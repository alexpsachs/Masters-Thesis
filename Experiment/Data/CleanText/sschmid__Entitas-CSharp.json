{
    "sschmid": "Thanks! I implemented your changes.\n. Thanks\n. Hey Stephen, I haven't setup up a project to prove and reproduce yet, but my first thought was, it doesn't work because you're not using the Entitas sources, but a dll. Try using the source files, that should fix the conflicting types\n. There shouldn't be a problem with namespaces. In my tests it's working fine. If you still have problems, let me know. In the email there was this screenshot attached\n\ni saw this\ncs\nnewEntity.addLight(3)\nwith lowercase a. Maybe that's the problem. It's AddLight with uppercase A\nI hope that helps\n. Pool, Entity and Matcher are partial classes. If you use the code generator, which is adding functionality to the Pool, Entity and Matcher, you have to use the Entitas sources and not the dll.\nPartial classes are a purely language feature. When an assembly is compiled, the files are combined to create the type. It isn't possible to spread the files out into different assemblies.\n. Hi Sven,\nin order to Undo/Redo we would need some kind of history of actions or sth like that. I was already thinking of sth like this and came to the conclusion, that this should be part of the application layer and not part of Entitas. Although it might be nice to have such functionality built in, I fear that it would have an impact on overall performance, even if you are not using this feature. I try to keep the core very small and efficient, so my suggestion would be to selectively historicize the entities that should be affected by this feature. But if you have a nice idea, how we could add this feature without sacrificing overall performance, I'd love to discuss that with you. Feel free to make a pull request.\n. Thanks! I will try to get a Windows machine to reproduce and work on a fix.\n. Hi, I set up a windows machine and made some changes. Line endings are now converted before the input string is parsed. I released a new version, which should fix the problem.\nPlease try the new version and let me know if it works for you.\nhttps://github.com/sschmid/Entitas-CSharp/releases/tag/0.18.0\n. Hi, I will add some more documentation soon. Usually when you want to add a new feature, you\n- create components (e.g. PositionComponent and MoveComponent).\nAfterwards you want to\n- use the CodeGenerator to enjoy a more readable and natural api.\nNext, you might want to\n- implement a system which is modifying some data, e.g MoveSystem.\nNext, you could\n- create a MonoBehaviour as an entrypoint to the game, where you start and execute your systems in Start and Update (see GameController)\nHope that helps!\n. Hey! I will look into this. It works fine on a Mac. I'll set up a Windows machine to reproduce and then take a look a the solutions described in your links.\n. Ok, your solution works fine! Thanks! I'll release a new version soon which will contain your fix.\n. I released a patch release 0.18.1.1 to temporarily fix this issue. A proper fix will follow soon...\n. Done.\n. Thanks @movrajr \nUpdated everything a5bc66dd966889ad3c58b67fdecf4531deffb683\n. Yes, that is completely true. You mustn't add components from different pool to the same entity. Different pools have a specific set of components, depending how you attribute your components (e.g. [A] or [B]). When you create an entity with pool A, you can only add components of set A. Personally, I have a pool for UI, Meta Game and the Core Game. Adding Core Game Components to a UI Entity doesn't work, and doesn't really make sense. The different pools work on specific aspects in your application and do not mix.\n. The introduction of multiple pools originally was a part of performance optimizations when the amount of components grow. Each created entity will have a array of capacity components count to store the components. To avoid creating large arrays for each entity, it can make sense to have multiple pools focusing on specific aspects like UI or Core Game, and therefore reducing the array capacity for the arrays in the entities. As a result, you run into the issue you described, since components from different pools always start with index 0.\n. I already had a few discussions about this topic. In the future the might be some safety mechanisms to address this issue, e.g. generating pools and entities based on the specified pool names. Like: APool and BPool and AEntity and BEntity, only offering code completion for their supported components.\n. Fyi, the next release will have support for components with multiple PoolAttributes. Regarding your example of adding AComponent and BComponent to entities in different pools, you can now do this by attributing the components with all the pools they should be supported in\ncs\n[A, B]\npublic class AComponent : IComponent {}\n[A, B]\npublic class BComponent : IComponent {}\n. I invite you to visit the Entitas chat, where we just had discussions about this very topic:\nhttps://gitter.im/sschmid/Entitas-CSharp\nAlternatively click the \"Join the chat\" button in the readme\n. You might want to scroll up until you see my reply saying \"Designing levels\"\n. Quote:\nDesigning levels\nLet me explain, how I see this:\nFor me levels are just data - some configuration where things are and what their state is. E.g. a building at a certain position in the world that can be attacked and has a certain health.\nI don't really care if I get this information from a json or a scene from Unity. In both cases I parse the source and create entities based on the data. In this example I'd create an Entity with BuildingComponent, PositionComponent, AttackableComponent, HealthComponent\nThe cool thing is, when you're designing your level in Unity, you already have the view, too! So when you parse your scene you already can link the actual building GameObject to the Entity by adding a ViewComponent\ncs\npublic class ViewComponent : IComponent {\n    public GameObject gameObject;\n}\nAgain: a designer is completely free to create a level. He/she can setup e.g. multiple buildings at different positions, with different health and so on... the important part is: All the Monobehaviours on that GameObject should NOT have any game related logic! Only configuration like transform, health, attackable, etc. They might have some View related logic like animating something on the building. The GameObject should be treated as a dumb view with no behaviour! It's just a View\n. I might create a third example project soon to illustrate what I just wrote, since this is a question that already came up a few times.\n. @mzaks wrote a blog post addressing this question:\nGames, Data and Entitas\n. We're currently exploring alternatives for the code generator, I will also take a look at CodeDom. Thanks!\n. Hi, your points are valid and I'm happy to merge pull request! In fact, I encourage you guys to do so, since it helps making Entitas better. But you are right, looking at the current state of the pull requests you might get a wrong impression.\nHere's an attempt to explain what happend:\nThe two example pull requests you were referencing are both from co-wokers. In the case of #1, we were discussing and sketching out the changes together and after he made a pull request I implemented it again in a test driven manner, because all features in Entitas are added with writing tests first.\n11 for example was just one line, so I quickly tested it on Mac and Windows and yeah, then it was already in. I could have removed it again and merge the pull request, but I didn't :) But I mentioned @movrajr in the release notes to give him credit.\nHope that answers your question and again: I'm happy to merge pull request!\n. Sounds like a good idea! I'll give it a try.\n. I agree,  [Pool(Pools.Core)] is more descriptive. On the other hand these attributes are used for a very specific case and only in entitas components. It's a little less code to write with the current impl. which is nice, if you're writing this over and over again.\ncs\n[Meta, UI, SingleEntity]\npublic class MyComponent : IComponent {}\n. If you don't mind, I'd just leave it like it is for now.\n. The project files are in the .gitignore because they are and can be generated by Unity. Unity generates these files every time you select \"Assets/Sync MonoDevelop Project\"\n. They will probably be comitted in the next release\n. Hey, sorry but I'll remove the project files again in the next release. Unity will overwrite them anyway.\n. True, that's currently not possible atm. The initial motivation behind this decision was safety and protection against file loss, because when you hit the generate button, it also clears (deletes) the generated folder. If for some reason you specify a wrong folder, you end up deleting this folder. By appending \"Generated/\" if needed, you can avoid this problem, but I'll think about it again... ;)\n. Merged :)\n. The target framework of Entitas.Migration was intentionally set to Mono / .NET 4.0, because when running the command line program, it complained about\nWARNING: The runtime version supported by this application is unavailable.\nUsing default runtime: v4.0.30319\nWhen I change it to Mono / .NET 4.0, I don't get this warning.\nWhat exactly is VS complaining about? You still should be able to build, or not?\n. Ok, that's bad. Merged #23 \n. An entity is part of a group, when it fulfills the requirements of the matcher. In your case\ncs\nGroup group = pool.GetGroup(Matcher.AllOf(Matcher.PlayerSelectActionAttack, Matcher.Position));\nonAdded = group.CreateObserver (GroupEventType.OnEntityAdded);\nonRemoved = group.CreateObserver (GroupEventType.OnEntityRemoved);\nan entity belongs to a group when it has a PlayerSelectActionAttackComponent and a PositionComponent.\nWhenever you replace either of those it will be removed from the group (intentionally), because the idea is to remove the old component (=> entity doesn't match anymore) and the replace it with the new component (=> entity matches again). As a result e.ReplaceXyz will always trigger OnEntityAdded AND OnEntityRemoved\n. Btw, AttackPointerController looks like it should be a ReactiveSystem rather than a MonoBehaviour. A ReactiveSystem is using a GroupObserver under the hood, so you don't have to mess with it. If you still want to use GroupObservers don't forget to call observer.ClearCollectedEntities()\nYou can get the most out of Entitas if you try putting all your logic into dedicated systems doing only one thing.\n. Next release 0.22.0 will solve this issue.\n. No, that's fine, I run a script, that automatically updates these projects\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/updateDependencies.sh\n. From ComputeNextTurnSystem:\ncs\nentity.ReplaceNextTurn(entity.nextTurn.timeBeforeNextTurn - nextTurnTimeToDecrease);\nif( entity.nextTurn.timeBeforeNextTurn < 0){\n    entity.RemoveNextTurn();\n}\nCalling entity.ReplaceNextTurn will trigger the ReactiveSystem in the next frame again, because it's triggered by Matcher.NextTurn. It kind of triggers itself every frame now.\nYou could fix that by writing sth like this\ncs\nvar timeBeforeNextTurn = entity.nextTurn.timeBeforeNextTurn - nextTurnTimeToDecrease;\nif( timeBeforeNextTurn < 0) {\n    entity.RemoveNextTurn();\n} else {\n    entity.ReplaceNextTurn(timeBeforeNextTurn);\n}\n. When you want to ensure that entites have certain components, you can implement IEnsureComponents\ncs\npublic class ComputeNextTurnSystem : IReactiveSystem, IEnsureComponents {\n    ...\n    public IMatcher ensureComponents { get { return Matcher.NextTurn; } }\n    ...\n}\n. Your solution with the IExecuteSystem is perfectly fine, too :)\n. I'll take a look and will update the Entitas sources to support Unity 4.5. I guess I will test the example projects only against the latest version of Unity.\n. Could you please create a pull request with the updated Entitas sources to work with your Unity version? That would be great :)\n. Yes, that's right. He was talking about the Match-One example\n. @KevinQiangK I don't have Unity 4.5 atm, but feel free to create a pull request\n. Hi, thanks. Please pull b306d8f612b87700da6862d3f6f54c3bc80e0947 from https://github.com/sschmid/Entitas-CSharp/tree/mzaks-develop, I marked lines of code in ReactiveSystem that are missing tests. Could you add tests for that too, please :)\n. Shall I merge now?\n. Haha :)\n. Awesome, thanks!\n. Automatic Entity Reference Counting (AERC) was introduced to fix an internal bug (#25). It works automatically and ist managed by Entitas. Usually you don't have contact with this feature and you should never manually call entity.Retain() or entity.Release(). The only exception to call these methods manually is when you want to keep a reference to an entity on your own, which is not recommended.\nBasically you can happily forget, that this feature even exists ;)\n. @hahasss95 I don't really understand what you mean. Could you explain what your concerns are? Again, consider AERC as an internal feature, you don't really have to care. It's all managed automatically for you.\n. Sorry, I have the feeling I still don't understand what the question is.\n\n...there were as much as around 50\n\ndid you debug your game, or how do you know the retained entities count? Because there is no public access to this information.\n\n... as all the destroyed entities are being retained.\n\npool.DestroyEntity() will release entities and therefore make them reusable.\nTo answer your initial question\n\nIs retained entities bad? Is there anyway to clear the retained entities or move it to reusable entities?\n\nIt's all managed for you automatically, you don't have to do anything. You don't even have to know that entities are being reused under the hood as this is just an performance and memory optimization. Call pool.CreateEntity() if you need one, call pool.DestroyEntity() if you want to destroy it ;) That's basically it. Anything else are implementation details.\n\nI was afraid that it will slow down my game...\n\nAERC won't slow your game down ;)\nHope that helps.\n. I mean, if you experience some unexpected behaviour or you think you found a bug, let me know. The expected behaviour is:\nWhen you create a new entity\n- _reusableEntities.Count == 0\n- _retainedEntities.Count == 0\nWhen you destroy this entity\n- _reusableEntities.Count == 1\n- _retainedEntities.Count == 0\nDepending on your reactive systems and group observers _retainedEntities.Count can be > 0, but will be == 0 by the end of the loop.\n. I think I know what you mean now! :)\nI could reproduce what you explained. The problem was that the GroupObserver could potentially retain entities multiple times. I fixed that in release 0.22.2\nLet me know if it fixes your issue as well.\nThanks :)\n. What do you mean with \"platform-specific build settings\"?\n. I see, will try to get a windows machine and fix that!\n. Type to int can be achieved with\nArray.IndexOf(ComponentIds.componentTypes, myType);\n. Thanks a lot for your effort! I finally got convinced and started adding documentation to the the sources based on the latest version. I'll take a look at your suggestions.\nSee #55 \n. We plan to release the next version of the (probably roslyn based) code generator to be a precompiled executable. Thanks for your feedback!\n. ~~Hey, I plan to release the current reflection based code generator as a dll, too. Will be in the next release~~\n. That totally makes sense. I will definitely consider your idea in the new version of the code generator!\n. PoolsGenerator generates Pools.allPools now.\n. Awesome, I'll take a look at the code when I find some time!\nI added it to the wiki\nGames and Examples\n. I just looked at the code. You grouped the components and systems by feature and you have separate folders for MonoBehaviours and entitas sources - that's how I like it :) Looks pretty good! Great job! I'm happy to have it in the wiki now so others can learn from it!\n. Grouping classes by feature is great for organization and prevents unused files in the project. I try to put not only components and systems in the same folder, but also extensions, utils, enums, unit test, etc. When you want to remove a feature you simply delete the folder and the feature incl. unit tests is gone.\n@mzaks and me will eventually start on a small series where we build a game from scratch including unit tests, level design and maybe physics. I hope that helps answering most questions.\nCurrently the lack of documentation is intentional. I'm not a very big fan of documenting code because I think good code should reveal its intend by just reading the class and method names. Maybe I didn't do a great job then ;) But I agree, it might help to get started. I'll think about to add some documentation at some selected places ;)\nI'm glad you had fun using Entitas. You did a great job! :)\n. Hey, just a heads up:\nNew releases are published with Entitas-Unity.zip. This contains all files as usual, but the CodeGenerator is now moved into an Editor folder, which should solve your issue.\n. Ok, I see your point. Entitas is designed to also work in an C# only environment. By adding #if UNITY_EDITOR the Code Generator wouldn't work without Unity anymore. A solution would be to move the contents of Entitas.CodeGenerator into a \"Editor\" folder, except the \"Attributes\" folder.\n. I'm thinking about adding a second zip file for Unity, that already moves necessary folders into an Editor folder...\n. Hey, just a heads up:\nNew releases are published with Entitas-Unity.zip. This contains all files as usual, but the CodeGenerator is now moved into an Editor folder, which should solve your issue.\n. You can exclude multiple components by passing them all into Matcher.AllOf()\n. Any component contained in the Matcher.AllOf will be used to exclude entities having this component. \n. Btw, AnyOf and NoneOf will be reintroduced in the next release\n. Sorry, I think I mixed sth up... You're right. \n. I think you're right. In this case we can remove\ngameBoardElements.OnEntityUpdated += onGameBoardElementUpdated\nsince replacing a component will also call OnEntityRemoved and OnEntityAdded. So it's redundant... I'll remove it from the example.\n. OnEntityAddedOrRemoved means it triggers when added OR when removed from the group.\nTo recap:\nAdding a component to an entity might result in the entity being added to a group. This will trigger OnEntityAdded\nReplacing the component will trigger OnEntityRemoved, OnEntityAdded, OnEntityUpdated\nRemoving the component will trigger OnEntityRemoved\nUsually reactive systems are interested in changes in the group thus triggering OnEntityAdded. In my experience it's a rare case when you actually want to trigger OnEntityAddedOrRemoved, meaning reacting on any change in the group, e.g AccelerateSystem.cs\n. I think you're right. The entity inspector just calls entity.ReplaceComponent() without using the componentPool and providing both the previous and the new component like the generated methods do.\nI'll work on a fix.\nThanks for letting me know! :)\n. Hi, this behaviour is expected for ReactiveSystems. ReactiveSystems are triggered by events like OnEntityAdded, OnEntityRemoved etc. and don't guarantee that that component that triggered the system is still present nor that the entity is not destroyed by the time it executes.\nGenerally, destroying entities in the middle of the systems chain is a bad idea. Destroying entities should be the last thing you do per frame, so every system has the chance to process these entities.\n. An integrated logging system could also make sense to use it as a foundation for visualization tools. A consistent logging output across projects could enable visualizing behaviour over time (e.g creating, changing and removing entities) which might help find some bugs.\n. @kicholen I agree. It should be very easy to deactivate the logging. In the future I can imagine that we can build all kinds of visualization tools etc based on this data\n. Yes, I don't plan to add a logging framework (I already did one, it's open source NLog)\nI plan to provide sth to plug into with any logging tool you like\n. @mzaks what's the state with this?. Might be safer to wait for the next release. PR on develop please (default branch)\nDoes it require changes in entitas? or is it a Plugin?. It's been a while :) I saw a working prototype ages ago. Shall finalize this? Whats the state with the web UI?. Hey, I thought about it and I think this could be very useful in some scenarios. Do you already have a system to convert back and fourth or shall I provide sth?\n. Your described suggestion def makes sense to me.\nI don't think the code generator is affected by this feature, or am I missing sth.\nI was thinking to create a new subfolder in the repo called \"Add-ons\" where tools like BluePrints can be collected. There you can provide a new feature with tests and readme.\nI will add an example soon.\n. Hi Nick, I was thinking about how provide a nice and streamlined way for people to contribute cool add-ons like BluePrints. I couldn't find a nice solution that is super easy to maintain yet. I was thinking to add a Add-ons folder in the repo, or creating a new repo for Add-ons etc. But I think it'll be difficult to maintain when I release new versions. Tools might get out of date if they don't get updated. We could quickly end up with different tools relying on different versions of Entitas. I could migrate the tools when I update Entitas, but that doesn't scale well :) Maybe you have some input how we could solve this. The easiest solution for now could be gathering links to all the contributed tools in the wiki or in a Add-ons.md. So everyone would work on their tools in their own repo. On the other hand I still think it would be cool to have a central place for that... What do you think?\n. Yes, I can imagine BluePrints being an Add-on. Add-ons should work with the current version of Entitas without having to change the core. Logging is a good example which can be an Add-on but also might require some changes in Entitas (e.g. adding more event hooks). In this case I would suggest to create a new issue or PR to discuss changes.\nI suggest we start easy first, meaning you can create your own repo and I can create a Add-ons.md where I can link to it. Then we can see how it goes. If needed, we can always think about adding nice tooling to discover and update installed add-ons, some sort of package manager. But let's start easy first :)\n. @npruehs Let me know when you create a repo for BluePrints. I guess you already have a lot of concrete ideas about it, I'd love to hear them. I have some ideas, too.\nI'm currently also working on the code generator to decouple the generation logic by adding an intermediate data structure. I'll keep you updated.\n. See #62 \n. I can also see that becoming a part of Entitas :)\n. @npruehs Having ComponentNameToId built in makes sense. I can add it\n. Btw, I start playing around integrating Blueprints... :)\n. For me it's important that all features of Entitas also work without the code generator. I'd like to keep it optional (although I cannot image to work without it anymore :)) I try to find a solution that works also without the code generator\n. see https://github.com/sschmid/Entitas-CSharp/blob/master/Entitas.CodeGenerator/Entitas.CodeGenerator/Intermediate/ComponentInfo.cs#L9-L10\n. Thanks! :) Yes ComponentInfo will make our lives easier I hope. It will make the switch to the new generator very easy\n. string fullTypeName is used instead of System.Type\n. This is checking for DontGenerate\nhttps://github.com/sschmid/Entitas-CSharp/blob/master/Entitas.CodeGenerator/Entitas.CodeGenerator/Providers/TypeReflectionProvider.cs#L33-L34\n. It's string based now so I can generate from different assemblies\n. generateMethods determines whether the usual extensions get generated.\ngenerateIndex determines whether an entry to ComponentIds gets added.\nif for some reason you don't want to have methods generated you still might need the index though\n. @npruehs Cool!\n- A code generator can set a fixed subfolder by prefixing the CodeGenFile.filename, e.g. \"Blueprints/\"\n- cool, I'll add <auto-generated>\n- A Blueprints Match-One Demo would be aweseome to see Blueprints in action :) Own repo sounds good\n- Definitely, see #67 where I sketched something already to get a feel for it\n. Added <auto-generated>\nsee 9c8ca6360b448c959e72375032a407fe45fd3397\n. @npruehs how did you actually create the blueprints.xml?\nDoes it support custom classes?\n. I started playing around with SerializedObject and using the EntityDrawer known from VisualDebugging which basically already provides most of the features to create a Blueprint out of the box. The first steps look promising and I try to also support GameObjects and other Unity Objects.\n\n. Maybe we can even use Unity\u2019s serialization system with its yaml backend\n. @npruehs Definitely agree! It was just so tempting to play around with it :)\n. Updated Wiki with a link to your repo\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Tools-and-Extensions\n. Thanks! I also added a runTest.bat to run the tests on windows. It's missing the step to compile the solution first before running the tests. It would be awesome if you could add that to the bat file :)\n. Hi,\nyes Entitas also works without Unity. Here's an example on how you can use the code generator outside of Unity\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas.CodeGenerator/Program.cs\nYou have to make sure to add the generated files to your project, but I guess you can automate this, too.\n. Hey, I updated the wiki and added a new page\n\"Install Entitas and first steps\"\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Install-Entitas-and-first-steps\nThat might help\n. When you generate new files be created. The code generator doesn't add them to the .csproj file. This means your IDE is not aware of those files. Try to add sth like this to your .csproj file\n<ItemGroup>\n  <Compile Include=\"path/to/generated/folder/**\" />\n</ItemGroup>\nIf that doesn't work we should try to find a way to automatically add those generated files to the project. We figured out a way with roslyn for windows already, but it doesn't work on mac yet.\n. I plan to provide the code generator as an executable in the future. As a first step it was necessary to check for the type with string comparison, since the executable doesn't contain Entitas.IComponent etc. I want to move the code generator to a separate project since the ultimate master plan is to offer a roslyn based code generator (or to basically enable any kind of source parsing, e.g. reflection, roslyn, json or etc)\n. I'll have to check. So far I used Entitas mainly with Unity, but I like to keep it working for c# only projects, too.\n. I updated the wiki Install-Entitas-and-first-steps.\nI created a simple C# project for you with the code generator already set up.\nThis should help getting started.\nhttps://github.com/sschmid/EntitasPure\nHave fun! :)\n. Thanks a lot, that was exactly what I was looking for :) Awesome!\n. Thanks! Makes sense, I'll see what I can do ;)\n. That's true, the package would have to contain the source files.\n. Update:\nJust released 0.41.0 which now deploys Entitas as Dlls instead of source code. The code generator doesn't rely on partial classes anymore.\nIt's now possible to easily create nuget packages with the c# only version.. No, there's no nuget package for Entitas. Generated components are in the Entitas namespace. Why do you have to fix the namespace? They are optional afaik and don't nessecarily have to match the folder structure. That should be fine.\nExtension methods are very limited and can only use the public api of an object. With partial classes we can achieve sth like e.position.x, which isn't possible with extension methods.\n. For now most of the generated extensions have to be in the Entitas namespace, so I think I cannot change that. Sorry.\n. Thanks! :)\n. You are right, entities can only have one component per type. At the moment this behaviour is intended. I'll think about your suggestion next week if it might make sense to add sth like [AllowMultipleComponents].\nFor now, in order that you can continue, I'd suggest having a HealthRegeneration class which contains all needed information about start/end time/interval etc. Then create a HealthRegenerationsComponent(plural) which has a List.\n```\ne.AddHealthRegenerations(new List());\n// later somewhere else in the code\nvar list = e.healthRegenerations.list;\nlist.Add(new HealthRegeneration(...));\ne.ReplaceHealthRegenerations(list);\n```\nHope that helps. I'll keep you updated\n. I was thinking a little bit about it now. I'm not sure if it's a good idea to allow multiple components. It will add quite some complexity I think. For instance, what does entity.RemovePosition(); mean when you have multiple positions? You'd have to also manage indices like entity.RemovePosition(3);\nI think with the given example of the health regenerators it's better to sth like I just mentioned before.\ne.AddHealthRegenerations(new List<HealthRegeneration>());\nThe good thing is, when you do sth like\nvar list = e.healthRegenerations.list;\nlist.Add(new HealthRegeneration(...));\ne.ReplaceHealthRegenerations(list);\nEntitas is smart enough not to change any data structures under the hood. You'll reuse the some instance of the list over and over again, so there will be no overhead. e.ReplaceHealthRegenerations(list); will also not change groups but only dispatch event, so it's efficient, too.\n. Do you mean this?\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas.Unity.VisualDebugging/Assets/Tests/Game%20Scene.unity\n\n. You're more than welcome! :)\nI'm happy to hear that you like it, and thanks for your support, I really appreciate it.\n. Once we add a component using a generated method like e.AddHealth(42) we could add an event handler for OnComponentRemoved. This handler could check if the component index is the same and push the component to the component pool. This way it would work for both cases  e.RemoveAllComponents() and pool.DestroyEntity()\nWhat do you think?\nI also have unity project for performance testing where I could check if the added event handler has a negative effect on the performance.\n. Also, I think it's time to also add tests for the actual logic of the generated output, not only tests for the expected output of the generator. I'd like to add tests for the four component types (standard, flag, single std, single flag)\n. First tests revealed it adds 312byte per component even with cached event handlers\n\n. Creating new components would be cheaper...\n. 91%, to be precise :)\n\n. Here's my test, if you're interested:\n. ```\nusing System.Collections.Generic;\nnamespace Entitas {\n    public partial class Entity {\n        public PositionComponent position { get { return (PositionComponent)GetComponent(ComponentIds.Position); } }\n    public bool hasPosition { get { return HasComponent(ComponentIds.Position); } }\n\n    static readonly Stack<PositionComponent> _positionComponentPool = new Stack<PositionComponent>();\n\n    public static void ClearPositionComponentPool() {\n        _positionComponentPool.Clear();\n    }\n\n    EntityChanged cachedOnComponentRemoved {\n        get {\n            if (_cachedOnComponentRemoved == null) {\n                _cachedOnComponentRemoved = onComponentRemoved;\n            }\n\n            return _cachedOnComponentRemoved;\n        }\n    }\n\n    EntityChanged _cachedOnComponentRemoved;\n\n    public Entity AddPosition(float newX, float newY, float newZ) {\n        OnComponentRemoved += cachedOnComponentRemoved;\n        var component = _positionComponentPool.Count > 0 ? _positionComponentPool.Pop() : new PositionComponent();\n        component.x = newX;\n        component.y = newY;\n        component.z = newZ;\n        return AddComponent(ComponentIds.Position, component);\n    }\n\n    public Entity ReplacePosition(float newX, float newY, float newZ) {\n\n//            var previousComponent = hasPosition ? position : null;\n            var component = _positionComponentPool.Count > 0 ? _positionComponentPool.Pop() : new PositionComponent();\n            component.x = newX;\n            component.y = newY;\n            component.z = newZ;\n            ReplaceComponent(ComponentIds.Position, component);\n//            if (previousComponent != null) {\n//                _positionComponentPool.Push(previousComponent);\n//            }\n            return this;\n        }\n    public Entity RemovePosition() {\n\n//            var component = position;\n            RemoveComponent(ComponentIds.Position);\n//            _positionComponentPool.Push(component);\n            return this;\n        }\n    void onComponentRemoved(Entity entity, int index, IComponent component) {\n        OnComponentRemoved -= cachedOnComponentRemoved;\n        if (index == ComponentIds.Position) {\n            _positionComponentPool.Push((PositionComponent)component);\n        }\n    }\n}\n\npublic partial class Matcher {\n    static IMatcher _matcherPosition;\n\n    public static IMatcher Position {\n        get {\n            if (_matcherPosition == null) {\n                var matcher = (Matcher)Matcher.AllOf(ComponentIds.Position);\n                matcher.componentNames = ComponentIds.componentNames;\n                _matcherPosition = matcher;\n            }\n\n            return _matcherPosition;\n        }\n    }\n}\n\n}\n``\n. addedonComponentRemoved`\n. I could try writing a custom event system for Entitas. Might be (or not be) more efficient\n. I have an idea which works completely without events. An entity could have an array of stacks (similar to the array which holds the components). When removing a component it will get the stack at index and push the component. Done. If no stack exists, it doesn't (which means we're using entitas without the code generator)\nI'll give it a try\n. fyi, I started writing tests for the existing generated component extensions. After that I will implement my idea test driven.\n. Ok, I found a way which works without events.\nSee PR #60 \n. @trumpets @SvDvorak\nIf you like, you can test the latest version. Here are the zip files\nhttps://github.com/sschmid/Entitas-CSharp/commit/fbfc99e5e0061b93b4f6017b18c6fb21c1bf22db\nI'd be interested if it solves your issues. Let me know, if it works better now\n. See #60 \n. Thanks :)\n. See #61 \n. Thanks!\nPlease see #62 \nI'm currently working on that. Will be in the next release\n. Updated the section with a code example\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator\n. Please see #62.\nOnce I release the new version code generators only get ComponentInfo[]\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas.CodeGenerator/Entitas.CodeGenerator/Intermediate/ComponentInfo.cs\nThis way you don't have to worry about if we use reflection, roslyn or anything else as a source.\n. True. Atm it's intended, because this code is being generated and we can save a method call. If we start using it in more places, we can extract it to a method.\n. In general extracting such a method would be nice. Not sure if it makes sense in this case. It's in a generated extension a should not be used from a different generated extension. Offering a generic method componentPool.GetComponent<Position>() would work but since it's in a generated file I'd rather go for the better performance by writing new PositionComponent()\n. Hi, a quick follow-up:\nJust added entity.CreateComponent() which does all the pooling logic now. It's also used by the code generator now.\ne641cf184a48691ed30454a880462a0f7b24e5ba\n``` csharp\npublic Entity AddPerson(int newAge, string newName) {\n    var component = CreateComponent(ComponentIds.Person);\n    component.age = newAge;\n    component.name = newName;\n    return AddComponent(ComponentIds.Person, component);\n}\npublic Entity ReplacePerson(int newAge, string newName) {\n    var component = CreateComponent(ComponentIds.Person);\n    component.age = newAge;\n    component.name = newName;\n    ReplaceComponent(ComponentIds.Person, component);\n    return this;\n}\n.\nvar player = new ComponentBlueprint(24, \"PlayerComponent\", null);\nvar positionFields = new Dictionary {\n    { \"x\", 12 }, { \"y\", 34 }, { \"z\", 56 }\n};\nvar position = new ComponentBlueprint(42, \"PositionComponent\", positionFields);\nvar components = new [] {\n    player,\n    position\n};\nvar hero = new Blueprint(\"Hero\", components);\npool.CreateEntity(hero);\n``\n. Blueprints contain all the information needed to create an entity. We can add converters to create Blueprints from different sources like XML, JSON, YAML, etc. We can either use them directly withpool.CreateEntity(blueprint)or use them as a base for code generationpool.CreateHero()`\nThe first approach relies on reflection and might be slower than the code generation approach where no reflection is necessary.\n. Blueprints are not in yet. The branch has been merged, but the contents have been removed again. I'll create a new branch once I continue working on this feature.\n. Yes, settings is just data and should be stored in components. If really only needed in the system you could also pass it in as a constructor argument for the system (wouldn't recommend that though)\npool.CreateSystem(new GameBoardSystem(spawnChances));\nGood example @npruehs with the 91% probability. In deed that should not be hardcoded and should be accessed sth like this:\nif (Random.value < _pool.blockerProbability.value) {\n    _pool.CreateBlocker(column, row);\n}\n. Hi, I'm glad you like it :)\nThe reason I removed support for properties is because you can actually hide logic in getters and setters. Components represent data only and properties could indicate sth else.\nWhat is your use-case with NoesisGUI? Can that be solved differently?\n. I'll reenable support for properties in the next version\n. @Roms6 Read-Write properties are now supported in Entitas 0.29.0\nPlease let me know if it works for you now.\n. My bad... I saw the TypeReflectionProvider is not updated yet... sorry :) I'll update it!\n. I fixed it. Here are the zip files, so you don't have to wait for the next release ;)\nEntitas-CSharp.zip\nEntitas-Unity.zip\nLet me know, if it works for you now\n. Awesome! You're welcome :)\n. You are right. I will reopen this issue to remind me to fix that.\n. Hey! Should work now in release 0.29.1\nUpdated VisualDebugging and CodeGenerator\n. Ok, thanks. I think I saw that one, too. It won't break anything, but I guess it's annoying :)\nI'll take a look at it\n. I changed a few things in Entitas 0.29.0\nLet me know if it fixes your issue, otherwise I'll finally add a null check :)\n. Just fixed it. Will be in the next release. Happy coding! :)\n. This has sth to do with the Special Folders and Script Compilation Order and partial classes\nThe generated sources files extent the core files of Entitas making use of the 'partial' keyword. This requires Entitas to be in the same assembly as your source files. Moving Entitas to Plugins will actually result it to end up in Assembly-CSharp-firstpass which means you cannot compile.\nEntitas for that matter is no Plugin\n\nUnity lets you add Plugins to a project to extend the features available to Unity. Plugins are native DLLs that are typically written in C/C++. They can access third party code libraries, system calls and other things that are not provided by Unity out of the box. Plugins must be placed in a folder called Plugins to be detected by Unity and like the Editor folder, this affects the order in which scripts are compiled. See the page on Special Folders and Script Compilation Order for further details.\n\nhttp://docs.unity3d.com/Manual/SpecialFolders.html\n. Yes, I see... VisualDebugging is not yet updated to use the new entity componentPool. By updating components with the inspector, the actual values of the component get modified. The same changed component is then used when calling entity.ReplaceComponent(). That's why you currently see that previous and new components are the same instance.\nI'll work on updating VisualDebugging to use the componentPool too and to ensure expected behaviour.\nGood find! Thanks for letting me know\n. This has been fixed in Entitas 0.29.0\n. Great to hear that!\nI can provide a detailed example with Unity Test Tools and also with nspec test (used also by Entitas itself) soon. It's already started... I'll keep you updated\n. Hey, I added a new example project. It's in veeery early stages, but it's developed test driven. There are Unity Test Tools tests for the view aswell as nspec tests for the game logic (as used in Entitas itself)\nhttps://github.com/sschmid/Entitas-Shmup\n. Use runTests.sh to run the nspec tests\n. @mzaks \n. Update:\nEntityIndex is already available on develop and can be used.\nThe code generators are not updated yet. This will probably happen after the typed Entity and Pool is implemented. See #139 \n. Time flies... Can't believe this issue is almost one year old... \ud83e\udd26\u200d\u2642\ufe0f . But at least my estimation was correct ;)\n\nUpdate:\nEntityIndex is already available on develop and can be used.\nThe code generators are not updated yet. This will probably happen after the typed Entity and Pool is implemented. See #139. Started implementing the core functionality after comparing and trying different approaches.\n\nThe idea:\n- I\u2019d like to reuse the Inspector for EntityBehaviour we all know from VisualDebugging to create and edit Blueprints\n- Provide sth to easily set the format how to serialize Blueprints (XML, YAML, JSON, FlatBuffers, ProtoBuf, ScriptableObject, etc)\n- Add a code generator to read all blueprints and generate code for better performance compared to pool.CreateEntity(blueprint), e.g. pool.CreateHero()\n- Cache blueprints at runtime when used raw (e.g. loaded OTA) to avoid reflection\nYou can follow and diff here #84\n. API sneak peak:\n``` csharp\nvar blueprint = new Blueprint(\"Hero\", e);\ne.ApplyBlueprint(blueprint);\n``\n. Blueprints means serializing and deserializing components. Shall I enforce that every component that can be used with blueprints has to be tagged with[Serializable]`? It would def help to raise awareness that not every type can be easily serialized and that you'd have to provide a converter for those cases\n. Too bad that Unity's mono version is sooo old. I cannot use built in json and Unity's json implementation is very limited and doesn't support serializing System.Object. Also no public access to Unity's yaml parser...\nI guess for now I have to stick with xml \ud83d\ude31\n. Poll\nI was thinking if we actually need the option to serialize to different formats like xml, json, etc.\nOk, it's nice that the serialized file is human readable, but it doesn't really need to be.\nWhat about going binary only? The file size might be smaller, parsing might be faster, and we can always edit the blueprints with the Entity Inspector known from Visual Debugging.\nIt would also work with A/B Testing by providing a new binary file.\nThe only downside that I see atm is, that C#-only-projects don't have a visual editor for Blueprints and would benefit from a human readable text file.\nTwo ways to work around this would be\n1. declaring entities in temp code to generate blueprints and binary files\n2. Getting the free Unity version to get a visual editor :)\nWhat do you guys think? Can/Should we go binary only?\n. Update:\nI've got the basic mechanic working. In phase 1, you can create new Blueprints as a ScriptableObject which serializes the data in a binary format. The EntityInspector know from VisualDebugging is used to set up the blueprints.\nNext step is to support different pools and automatically resolve potential pool and component index mismatches from the deserialized blueprint (when you load an old blueprint and you refactored the pool name or added new components and the index is out of date)\nI did lot of profiling and managed to use blueprints without creating garbage.\n\nIf you already want to see the first result checkout #84 \nHappy Easter! :)\n. @rollkoffer\n. Maybe yes, I heard of it before. Current efforts are going into a solution with roslyn though. But if you have any input for us why Antlr should be considered, let me know, I'm always open for new ideas :)\n. Awesome!\n. fyi, I talked to @cedricdg, apparently not all required features to work on all platforms are implemented in mono yet. Proof of concept works on windows but still needs some work to work on Mac OS X and Linux.\n. fyi, last december I created an issue at github.com/Microsoft/msbuild\nhttps://github.com/Microsoft/msbuild/issues/1469\nThis was basically preventing me from developing the roslyn based code generator. If anyone of you guys knows how to make it work on a mac, let me know.. Bye roslyn, was nice to meet you. Hello DSL. There is hope.... \ud83d\udc7b . \n. Wooooot!\nmono Entitas.CodeGenerator.Roslyn.exe Entitas.properties\nJust generated the very first time!. @mzaks @cloudjubei @arne-schroppe\n. Will close becaus of #112 \n. I tried Entitas - I love it ;)\n. Feel free to close this issue, if answered\n. When unit testing, you shouldn't use Pools.pool, because\n1. it's a singleton (therefore needs teardown)\n2. It does VisualDebugging related things you don't want or need when testing\nInstead, create a pool like\ncsharp\nnew Pool(CoreComponentIds.TotalComponents);\nor, to get better error messages\ncsharp\nvar poolMetaData = new PoolMetaData(\"Core\", CoreComponentIds.componentNames, null);\nvar pool = new Pool(CoreComponentIds.TotalComponents, 0, poolMetaData);\nThis way, you don't need a teardown anymore\n. No, there is no specific reason why 3rd parameter is null, you can (and should) also pass in CoreComponentIds.componentTypes. \nWhen instantiating a new Pool there is no tear down required and everything will be cleaned up automatically\n. Can you update Unity?\n. Unfortunately, Unity's documentation doesn't tell in which this method was added. I could add an #if, but maybe updating Unity is a good idea anyway ;)\n. You can add this piece of code\ncsharp\n                    #if (UNITY_5_3)\n                    var componentColor = Color.HSVToRGB(hue, 0.7f, 1f);\n                    #else\n                    var componentColor = Color.grey;\n                    #endif\nIf you know a way how I can check if the Unity version is greater that 5.3, let me know. The problem with  #if (UNITY_5_3) is, that it only checks the specific version... That means Color.HSVToRGB would also be deactivated in 5.4 which is not intended\n. It says:\n\nEditorGUIUtility.HSVToRGB is obsolete. Use Color.HSVToRGB instead\n. To restart your app, I'd suggest to first call:\n\nsystems.DeactivateReactiveSystems()\nThen, to reset the pool, use Pools.pool.Reset()\ncsharp\n/// Resets the pool (clears all groups, destroys all entities and resets creationIndex back to 0).\npublic void Reset() {\n    ClearGroups();\n    DestroyAllEntities();\n    ResetCreationIndex();\n}\n. True, it's not intended to manually set a new pool for the static pools like Pools.pool. If you call pool.Reset() it's basically a new one. To also reset all componentPools (use for object pooling of the components) you can also call pool.ClearComponentPools()\n. If you could manually assign a new pool to Pools.pool, all references in the systems would be out of sync (ISetPool)\n. This works well for me:\nStep 1\nsystems.DeactivateReactiveSystems() to ensure all collected entities are cleared and the reactive system won't be executed. This basically resets the reactive systems.\nStep 2\npool.Reset() Resets the pool (clears all groups, destroys all entities and resets creationIndex back to 0). Destroying all entities will also remove all components. Since all Reactive Systems have deactivated already, none of them will be triggered. Also, since all groups are cleared before destroying all entities, none of the groups will trigger any events.\nImportant All groups will be cleared, that means group.RemoveAllEventHandlers(); will be called. All event handlers are gone and have to be set up again.\nAll initialization logic should be in system.Initialize(), if you reuse your existing systems and not create new ones. If you setup group event hanlder in SetPool(), this will cause unexpected behaviour\n. void ISetPool.SetPool(Pool pool)\n{\n    fallingGroup = pool.GetGroup(Matcher.AllOf(Matcher.Position, Matcher.Falling));\n}\nwill cause problems. The pool is reseted and groups are removed, but you keep a reference to the old group.\nTo make your life easier, you can also just throw away all your systems and create new ones... Or, as said above, all your logic has to go into the initialize method\n. True, that's indeed an issue!\nReactiveSystems set up groups in the constructor, not in Activate(), that means event handlers will never be reassigned to the new groups.\nI personally always recreated all systems when resetting, that's why I guess I never encountered this issue.\nI'll put it on my todo!\nI keep you updated\n. Basically it means, everywhere you use a group you now have to re-add your event handlers to the new group. The easiest solution would be to recreate all objects. I think it's easy to forget some place in your code where you stored a group in a field... not sure if one can handle this in a big project. Recreating all objects sounds more bullet proof... But I'll take a look. Would be nice if Entitas itself can handle this\n. Personally, I also store group refs when initializing. The dictionary lookup itself is not really a big thing, but hey, why not caching if we can :)\nOn the other hand if you're fine with the dict lookup, it will be safer for the reasons you just experienced yourself. In an ideal world I'd suggest to not cache the groups and ask the pool for it.\n. Ok, sounds good. I also just reset when I switch scenes.\nI've put it on my todo list. I think it's more than just the ReactiveSystem. I'd like to check all places where groups are used and verify if they behave correctly when removing all event handlers.\n. You can use pool.OnGroupCleared\nhttps://github.com/sschmid/Entitas-CSharp/blob/master/Entitas/Entitas/Pool.cs#L24\n. Some ideas so far:\nEntitas Editor\nEntitas Lens\nEntitas Monitor\nEntitas Visualizer\nEntitas Visualisation\nEntitas Analyser\nEntitas Eye\nEntitas Vision\nEntitas Goggles\nEntitas Explorer\nEntitas Vision\nEntitas Sight\nEntitas Trace\n. Haha:\nTheia (Ancient Goddess of sight and the bright sky)\n. Oculus (latin, Entitas is also latin)\n. Welcome to Unity @benoneal :)\nThese are the very first steps to get started:\nStep 1:\nCreate a new project with Unity. Unity will automatically create all the files it needs. It will also create an empty folder called 'Assets'. This is the place where all your Scripts, Graphics, Sounds, etc go. When you create a new file in Unity, it will automatically end up in this folder.\nStep 2\nGo to the releases page on GitHub and get the latest version of Entitas (https://github.com/sschmid/Entitas-CSharp/releases) In the downloads sections, click 'Entitas-Unity.zip' (not Entitas-CSharp.zip)\nStep 3:\nDrag and drop the content of the zip file into Unity. It will also end up in the Assets folder. For each Script, Graphic, Sound, etc Unity automatically creates .meta files, this is normal. These files contain import information and also should be committed to your version control system.\nThats it, happy coding!\n. Great!\nsee #76 \n. Yes, it's on my list :) will come\n. Hey, I updated the wiki and added a new page\n\"Install Entitas and first steps\"\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Install-Entitas-and-first-steps\nThat might help\n. Yes, it's planned. That would be cool.\n. Feel free to reopen, if there are still questions\n. Oh, ok, Thanks, I'll take a look\n. Hey! It's fixed now, thanks for pointing it out. Will be in the next release! Happy coding :)\n. Hey, nice :) You can definitely do that. I merged the part where the abstract classes are ignored to support the WrapperComponent. While the WrapperComponent might be nice I don't think it should be part of Entitas but rather part of your Entitas tool belt ;) Thanks, and I hope it's ok for you.\nChanges will be in the next release.\n. @LinusVanElswijk I updated the wiki with your WrapperComponent\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Tools-and-Extensions\n. I was thinking about modifying the code generator to achieve this, but my main argument why I didn't do it was: If you add another field to the component, lot's of places in your code won't compile anymore.\n. It's maybe the very first time I wouldn't actually mind some magic :)\nI can give it a try with value being a magic field name :)\nI only see 1 problem:\ncsharp\npublic class ScoreComponent : IComponent {\n    public int value;\n}\ncsharp\nvar score = e.score;\nHow would you actually get the ScoreComponent from an entity now?\n. I think it won't make it into Entitas by default for the following reasons:\nImplicit casting is (you guessed it) implicit. I think in this case explicit > implicit.\ncsharp\nint score = e.score; // returns score.value\nvar score = e.score; // returns ScoreComponent\n(Almost) same code, different results, not a big fan of that.\nAdding new fields in the future will also break this unless I add magic by reserving the field name \"value\" and treat it differently or I add a new Attribute for the code generator.\nAgain, I think explicit > implicit > magic.\nBut of course you can still use the WrapperComponent or easily add a custom code generator to get the result you suggested. But I'll push this responsibility to the application layer and away from Entitas ;)\n. Hi, you are right, there is no difference between adding or updating a component. This is by design. Systems contain the logic to represent the current state of your pool. If a component got added OR replaced doesn't matter. All that matters is the fact that is currently there.\nWhat you described as a workaround sounds like a common thing to do for me. I do the same in my current project :)\nI have an AddViewSystem, its only job is to display the correct Sprite depending on the ResourceComponent.name. Always showing the correct Sprite means:\n- If there is no GameObject yet, create one and set the Sprite\n- If there is a GameObject, update the Sprite\n. Yeah, I could do sth like that in future migrations. Thanks, good idea\n. Whoops, thanks! These #if are really nasty sometimes :)\n. Yes, I think I could add sth in the future that removed UNITY_EDITOR and then checks if it still compiles. That would make a lot of sense\n. Nothing is stopping you from implementing it ;)\n. see #86 \n. Maybe you can reopen #86 and revive the conversation. Also, you could try to ask in the Entitas chat: https://gitter.im/sschmid/Entitas-CSharp\nMaybe someone can help you there\nPersonally, I cannot provide any examples for state machine\n. Fyi, I was testing some github integrations that should pick up the commit messages (which didn't work...)\n. Ah, I see, I got it after reading it again... The problem is that your InvincibilityComponent has a field for the timer and you update the component each frame. Ok, you obviously don't want to add yet another TimerComponent but instead store the timeout in the InvincibilityComponent. I guess that's fine, too.\nI think it's currently possible to have one ReactiveSystem with Matcher.Invincibility.OnAddedOrRemoved(). In the execute you can do\ncsharp\nvar collider = e.view.gameObject.GetComponent<Collider>();\ncollider.enabled = !e.hasInvincibility || e.invincibility.timer == 0;\nThis code will set the collider active if the InvincibilityComponent  has been removed completely or the timer is over. Otherwise the collider is disabled.\nDoes that make sense?\n. @grygus You should never do sth like e.ticksLeft--, it circumvents all the cool features built into Entitas.\nI repeat: You should never do sth like e.ticksLeft-- ;)\nYes, it will be called every time. There is no such thing as adding the first time or remove it, because even if you remove a component there might be another system just adding it.You cannot know if sth got removed or replaced. But you can always check on your own with e.hasComponent.\nI like how @mzaks explained it in the talk: You should be able to pause the game at any given time, look at the pool and you should be able to reason about the data. That means: either an entity has a component, or it doesn't. Adding sth the 'first time' would be implicit knowledge which isn't reflected anywhere and cannot be reasoned about. If you need this kind of information, then - yes - you'd put it on a component :)\n. @JamesMcMahon Imagine, we would have these kind of behaviour with added and removed.\nCase 1:\n- The timer ran out\n- you remove the component\n- Ok works\nCase 2\n- The timer ran out\n- you remove the component\n- Collision happens\n- you add again (same frame)\n- meh, doesn't work anymore\n- event removed was raised, but got a new component\n. But since I heard this idea before, I'll think about it again and try to find cases where it might make sense. No guarantee though ;)\n. @JamesMcMahon I'm sorry for your ears ;) but actually, your last point 'Separate the timer and the invincibility flag into two components' is the way to go in my opinion, it solves all the problems, plus you can reuse the TimerComponent for other things, too\n. @grygus what you just said is actually an argument for slitting it into 2 components, because then you have less components because you reuse the TimerComponent for each task. It also solves calling the code each frame, because you only react on invincibility added or removed. Win win :)\n. Oh, that's what you mean, nope :)\n. Ok, I'll think about this again, maybe there's room for improvement :)\n. Weeeell, starting with a new HashSet the order is deterministic - but it's not sorted. Usually if you process entities in a system, the order doesn't matter. If it does, you have to order them own your own, either based on a sortable identifier component or the creation index.\n. And yes, since it is a hashset the order in which you add entities most likely is not the order in which you read them\n. Seems like you guys are outvoting me :)\n. Thanks for your input and opinions. Pool will stay Pool :)\nFor now... \ud83d\ude08\n. Old ghosts being reawakened. After experiencing confusion when talking about object pools and Entitas pools and after writing explanations like \"a pool is basically a context\" I finally decided to rename Pool to Context \u00a0\ud83d\ude31. @Noshire I guess you mean the inputfield in the visual debugging inspector? Since VisualDebugging is an Editor feature only and performance isn't really an issue, I'd say it doesn't really matter so much to update on every change, even if that will trigger an expensive method. It's for debugging and playing around, so checking Resourcesl.Load<>() == null is more than fine imo\n. csharp\npublic class PersonComponent : IComponent {\n    public string name;\n    public string gender;\n}\n``` csharp\nusing System;\nusing Entitas;\nusing Entitas.Unity.VisualDebugging;\nusing UnityEditor;\npublic class PersonComponentDrawer : IComponentDrawer {\npublic bool HandlesType(Type type) {\n    return type == typeof(PersonComponent);\n}\n\npublic IComponent DrawComponent(IComponent component) {\n    var person = (PersonComponent)component;\n\n    person.name = EditorGUILayout.TextField(\"Name\", person.name);\n\n    var gender = (PersonGender)Enum.Parse(typeof(PersonGender), person.gender);\n    gender = (PersonGender)EditorGUILayout.EnumPopup(\"Gender\", gender);\n    person.gender = gender.ToString();\n\n    return person;\n}\n\nenum PersonGender {\n    Male,\n    Female\n}\n\n}\n```\n\n. A person has string name and string gender.\nWith a IComponentDrawer you can easily overwrite the default drawers, e.g. a EnumPopup for the gender, even though it's a string. Pretty cool :)\n. Very useful for AssetComponent.assetName in combination with Blueprints.\nInstead of writing a asset name, you can select one from a list popup and prevent misspelled asset names by providing a AssetComponentDrawer.\n. If you already tested Blueprints Beta you can drop your feedback here. Does it work? Any pain points? Bugs?\n. @grygus on my list now :) thanks\n. related #267 JSON Blueprints. Update:\nI will drop support for BinaryBlueprints in favour of a text-based format. Blueprints might turn out to be Unity only, so we can use Unity's serialization mechanisms (e.g. ScriptableObject). This should improve the current issues with binary blueprints and the problems when migrating to newer versions.. No further development on Blueprints for now, see #390 Blueprint sources will stay in the repo so they can be extended.. Hope that will help you guys to get started easier \ud83d\udc4d\n. Feel free to add your top 3 questions so I don't forget them in the FAQ\n. Awesome! Thanks for your help\n. @carlos-avila Nice! We can use that in the future\n. Cool! Happy to see things get started.\nSuggestions and thoughts:\n- IWriter and IPostProcessor are basically the same atm. Can we get rid of IWriter completely? Writer is a PostProcessor, too? (which happens to write files to disk)\n- PostPrecessors might change the content of CodeGenFiles which is a struct right now. We can change it to class. PostProcessors the can work on and change CodeGenFiles.\n- Adding the generated header comments could move to a AddFileHeaderPostProcessor now\n. @MoritzVossKing Just this week I got more interested in a solution based on DSL instead of roslyn.\nCurrent state:\nI'm talking with the roslyn guys to make it work on mac, currently waiting for a pending bug to be resolved.\nA DSL solution wouldn't depend on source code, so you'll get the same benefits as with the roslyn solution plus:\n- xplatform\n- you can gernerate even more things (e.g. type-safety features)\n- you could build tools on top of this (e.g. UI or node based visual coding)\n- can be used for other languages\nAs for now I can imagine moving away from roslyn in favour of a DSL solution.\n@mzaks started a DSL already\nhttps://github.com/mzaks/ECS-Lang. The DSL solution with ECSLang won the race. There will not be an official code generator based on roslyn for now.. Correcting myself almost a year later :)\n@cedricdg jetzt ist es endlich soweit... lange hats gedauert. My recent answer from the chat\n\nWhen you can identify certain areas in your game that are decoupled from each other it can make sense to use separate pools for those. I explain why:\nImagine a Match 3 game where you have a grid of colored pieces that you have to match. You\u2019ll probably end up having components like Position, Color, Movable, Matchable, etc. Scale this up to a big game with tons of features and you might have 100+ Components only related to things those colored pieces can do. In order to be able to add any of those components to an entity, the entity gets created with a capacity to hold these 100+ components.\nNow imagine you won a game and you return to a scrollable map where you see all the levels you played, and all the levels ahead of you. Now components like PlayerLives, LevelWon, Currency, etc are getting relevant. You might only have 10 or 20 Components related to the meta game.\nIf you have only on single Pool, an entity which you create is able to hold the 100+ components and the 20 components of the meta game, but you know for sure that you never will add any of those core game components. That is a waste of memory and each entity in the meta game can actually be much smaller. Other way around: you know for sure that in the coregame you will never add any of those PlayerLives or Currency components. That\u2019s why you want to use a coregame pool and and a metagame pool. This step is made to reduce the memory footprint of entities.\n[...]\nLimitations to multiple pools:\nAn entity created in one pool can only work with components assigned to this pool. The good thing is, a component can be assigned to multiple pools and can therefore be used in all of them\n. I'm currently re-working the wiki. This questions definitely deserves a spot in the FAQ :)\n. see #103 \n. Here's an example how to use a component in multiple pools\n\ncsharp\n[Core, Meta, UI]\npublic class MyComponent : IComponent {\n    ....\n}\n. I'm wondering why the icon couldn't be found in the first place?! That shouldn't happen. Did you delete meta files?\n. Yes, 0.30.2 fixed that. The meta file was missing in 0.30.1.\nYes, guarding would make sense in this case. Will do. Thanks!\n. I'll merge it\n. Thanks for contributing :)\n. Ah, I see. I opened Pandora's box with the Blueprints feature ;) I'll take a look... Thanks for the hint\n. Test project with the bug\nIsPlayingBug.zip\n. Filed a bug\nhttps://support.unity3d.com/hc/en-us/requests/49030\n. Current quick fix:\nhit stop and play again :) or wait until Unity finished compling\n. That is exactly this issue. Happens when entering play-mode while still compiling.\nAfter stopping and entering play-mode, it should be visible.\n. Generate again, that looks like old code\n. :) No worries\n. Fyi, Unity was able to reproduce the bug is currently working on a fix.\n. Still open, but seems like there has bee some work done...\n\n. Atm there is no Activate() by design. You mean, remove them from the array in the pool?\n\"immediately\" as in\nPerformance Test\nBefore: 200ms\nAfter: 0ms\nWhich is kind of immediately ;) Yes, it's basically a dictionary lookup\n. Yes, I though of that, too. Will be implemented.\nGreat to see that you're looking at it closely :)\n. If you have doubts or arguments against it, let me know.\n. Afaik it's up to the Microsoft/Xamarin/Mono guys to implement missing features for all platforms. I cannot really tell when / if.\nIt's planned that any new code generator will be bundled with Entitas, so nothing to do on your part.\n. They use CodeDom. I did not look at CodeDom yet, but now would be a perfect time to do so :)\n. That was already a good hint to finally fiddle with CodeDom :) Thanks\n. Will close because of #77 \n. Great, looks good. I was thinking about that for some time, too. That might be very useful.\nI could see that being part of Entitas, but I'd like to do some performance tests first to figure out if it has some negative consequences on performance. If not, the CopyXXX could actually become the default ReplaceXXX\n. That's what I meant, keep the name 'Replace' and do the suggested logic from the copy method\n. Can be solved manually by creating a custom code generator. I recommend duplicating the existing ComponentEntityGenerator and modifying it to your needs. See #265 . If you have ideas that involves radical changes, I'm also fine with that :)\n. I'm kind of dreaming about components being structs and they are all \"next to each other\" (contiguous memory) and no need to look up the reference first.\nUsing a dict in c# would not improve data locality afaik, at least as long the value is a ref to the actual component. I remember the component access (dict[key]) being a bottleneck\n. Haven't checked yet, but aren't dict values are boxed, too (if they are structs)\n. Blog post Data Structures for Entity Systems: Contiguous memory\n. Throwing in some links while I'm digging deeper into the matter\nModern C++: What You Need to Know (jump to 23:30)\nTips for Improving Time-Critical Code\nData Locality\nFrom what I've read so far, there's a big potential to gain speed!\n@braaad Looking forward for your next post :) That's exactly the kind of stuff I want to read :)\n. I'm sorry, yes, github had some issues\n\n. Nice, that might improve both, memory footprint of an entity and data locality. I love where it's going :)\n. CppCon 2015: Vittorio Romeo\n\u201cImplementation of a component-based entity system in modern C++\u201d\nhttps://www.youtube.com/watch?v=NTWSeQtHZ9M\n. I recently made some tests with ideas I had. The results where more than exciting! It's fast - damn fast.  And the memory is way less compared to Unity's approach. I might share more once I have the time to work more on that. Short explanation:\nComponents as structs, preallocated array for each component type, entities as int.\nCompared it to the Unity way, was a lot faster and about 10x less memory. So a really basic ECS implementation in the end. But I'm thinking to build ontop of that.. Thanks for you're input. I played with different solutions. While there is a potential performance benefits there will also be a drop of ease of use. I think Entitas is a great mix of high performance and simple-to-use. Will close. Thanks, I'm always happy if we can identify more places where we can save some cycles :)\nYes, this would save one dict lookup.\nThoughts:\n- We would need to store a group in the entity for each SingleEntity which increases the memory footprint of each entity.\n- When you store references to groups, you should also always subscribe to pool.OnGroupCleared and add logic to set the group field to null and retrieve it again from the pool if it's null.\nI could add a test in the performance test suite and profile it, to see if there are any gains that would justify the increased complexity.\n. You can do Array.IndexOf with ComponentIds.componentTypes to infer the index of a given component type.\nI can also imagine to additionally generate ComponentIds.ComponentTypeToInt(type) which would be faster than Array.IndexOf\nAn int based enum would provide type-safety, but I need to test if there are performance drawbacks because we'd have to cast to int all the time. I can imagine that this might have a negative effect\n. Wow, never heard\n\nWin systems that have been configured to use Unix style line endings\n\n:)\nThanks for letting me know, I'll update!\n. Thanks! Sorry, took a while. Will be in the next release\n. @AllanSamurai Thanks!\nI don't have a windows 10 machine right now, but you could help me verify if this fixes it:\nCan you replace CodeGenerator.writeFiles() method with this code and see if it the issue is fixed?\nCodeGenerator.cs\ncsharp\n        static void writeFiles(string directory, CodeGenFile[] files) {\n            if(!Directory.Exists(directory)) {\n                Directory.CreateDirectory(directory);\n            }\n            foreach(var file in files) {\n                var fileName = directory + file.fileName + \".cs\";\n                var header = string.Format(AUTO_GENERATED_HEADER_FORMAT, file.generatorName);\n                var fileContent = (header + file.fileContent).Replace(\"\\n\", Environment.NewLine);\n                File.WriteAllText(fileName, fileContent);\n            }\n        }. Awesome, will be in the next release\nbb83d990c59266d6605da94a95389195a892a4ec. Two thoughts:\n- Removing all components not necessarily means that you want to destroy the entity. Maybe you remove a component just to add an other one\n- the pool would need to listen to on component removed (which it already does) then could check entity.GetComponents().Length == 0) which will allocate an empty array (because of GetComponts())\nAs @JuDelCo suggested, I'd go for flagging entites with DestroyComponent\n. But of course, in your case, if you are sure that you can destroy entities as soon as they don't have any components anymore, you could implement it like:\npool.OnEntityCreated += ... e.OnComponentRemoved += ... => pool.Destroy(entity)\n. Yes, if you could share an example, that would be great because I never encountered a case where I had an empty entity that I need to take care of myself.\n. I was reading through the discussion again, but I still have the points in my head that I made earlier. I think your solution with a custom cleanup system as a last system in your list could solve this.\nAnd yes, there is a way for having one system for multiple pools (pretty new feature):\nSee AnimateDestroyViewSystem.cs\n. IGroupObserverSystem \n. PoolExtension.cs\n. Ups, seems like I missed to update the version text file. I guess I was too excited to release a new version :) Thanks for letting me know. Screams for automation ;)\n. You can create a constructor that has the pool as an argument or use ISetPool, which can basically be considered Awake() as it will be called after the System has been created (like @dkozlovtsev said)\nExample for constructor with pool: ProcessMoveInputSystem.cs\nI caught myself caching groups in _myGroupXyz fields and adding group.OnEntityAdded += in ISetPool or constructors as well, but I'd like to tell you that in an ideal case you should but this logic into Initialize().\nThe reason is, if you ever want to soft-restart the game (and therefore use pool.Reset()), meaning you reuse pools and all systems, but destroy all entities and get rid of all the state, all groups will be cleared and all registered event handlers will be removed. The groups also get removed from the pool completely.\nJust by calling Initialize() you can re-setup all listeners and the application works as expected. If this logic is in the constructor or SetPool you cannot re-add all listeners.\nBack to your question; does it help putting your logic to SetPool?\nOne more thought:\ngroup.OnEntityAdded += is basically some kind of observer pattern, and I think it's ok to do these 2 steps you described:\n1. Register an event handler for change\n2. Process the initial state (events you potentially missed before)\nI do basically the same in the ScoreLabelController.cs from Match-One\n. Do you mean different sets of systems that you execute in different 'Phases' of the game?\n. You can definitely nest systems RootSystemBehaviour.cs\nYou could also create some kind of GuardSystem which inherits from Systems (or better: Feature) and the add child systems to it\n``` csharp\npublic class GuardSystems : Feature, ISetPool\n{\nreadonly Func<Pool, bool> _guardFunc;\nPool _pool;\n\npublic GuardSystems(string name, Func<Pool, bool> guardFunc) : base(name)\n{\n    _guardFunc = guardFunc;\n}\n\npublic void SetPool(Pool pool)\n{\n    _pool = pool;\n}\n\npublic override void Execute()\n{\n    if (_guardFunc(_pool)) {\n        base.Execute();\n    }\n}\n\n}\n.\nnew GuardSystems(\"Pause Systems\", pool => pool.isPaused)\n    .Add(someChildSystem);\n```\n. Fair enough :)\n. With GuardSystems you can create more complex system trees and end up with a single parent Systems which can be nice. In your case not really necessary, I see :)\n. Hi, when you want to rename a pool I suggest following steps:\n- Use rename refactoring of your IDE to rename the existing XyzPoolAttribute class name first, e.g. [Core] to [CoreGame], (CorePoolAttribute to CoreGamePoolAttribute)\n- Update the pool names in the Entitas Preferences\n- Generate\n. I'll will look into this. This looks like a bug\n. Fox will be in the next version. Thanks for finding!\n. Hey, thanks. I did some small refactorings already and moved the attribute from Entitas.Codegenerator to Entitas.Serialization.Blueprints. It's called HideInBlueprintInspector now.\nThe changes are on this branch\nhttps://github.com/sschmid/Entitas-CSharp/commits/vkuskov-feature/blueprints-runtime-only-components\nI think it's not complete yet, because the code generator needs some update so it will also add this attribute to generated components and interfaces\n. Yes, I do this for my levelEditor and even execute the same systems that will add and remove views etc. You need a way to serialize and deserialize the state, e.g. json so you can recreate the entites when you reload the scene\n. Can you show me how you create ConsumeProgressSystem. It seems to me you just used the wrong pool for that\ne.g.\n``` csharp\npool.CreateSystem();\n// vs\ncorePool.CreateSystem();\n```\n. If that's the case the system will actually trigger when ProgressListener is added. That's why you get InvalidCastException. Internally, both have the same component index, so you basically observing a component with index 0.\n. I personally use nspec but you can use anything you want for writing unit tests.\nYou can take a look at the tests from Entitas Shmup\nhttps://github.com/sschmid/Entitas-Shmup/tree/develop/Assets/Tests/Editor\nHere's a simple example\ndescribe_VelocitySystem.cs\n. That' my basic setup\n``` csharp\nusing NSpec;\nusing Entitas;\nclass describe_MyNewFeature : nspec {\nPool _pool;\nSystems _systems;\n\nvoid ExecuteSystems() {\n\n    // If needed, change some entities here to\n    // trigger reactive systems\n\n    _systems.Execute();\n}\n\nvoid when_executing() {\n\n    // Test setup, called before each test\n    before = () => {\n        _pool = new Pool(CoreComponentIds.TotalComponents);\n\n        // If you have to add further systems in the future,\n        // just add them here\n        _systems = new Systems()\n            .Add(_pool.CreateSystem<SystemA>());\n    };\n\n\n    it[\"does sth\"] = () => {\n\n        // given\n        // setup your case\n\n        // when\n        ExecuteSystems();\n\n        // then\n        // assert result\n\n    };\n}\n\n}\n```\n. Hi, the problem boils down to the code generator being based on reflection. I'm currently \"fighting\" for some time in my current project to finally tackle this issue because a roslyn based code generator would solve a lot of problems and we would all benefit.\nIn the meantime I usually do as described here\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator#fixing-compilation-errors\nThe problem in a nutshell:\nDev A adds ComponentA and dev B adds component B. If you merge you'll end up having a conflict in ComponentIds. The main goal is then to get the code into a compilable state as quick as possible to regenerate. My workflow:\nBuild -> Jumps to error -> fix -> repeat\nIn this example ComponentIds.B is missing but used in the code base. So I duplicate any existing line of the components indices an rename it to B. I don't care about the actual index, as it will be regenerated anyway, e.g\ncsharp\n    public const int Position = 45;\n    public const int Velocity = 45; // duplicated, doesn't matter that it's 45 too\nAny other errors in generated files I just put comments around, because as I said, my main goal is to be able to compile first.\nSometimes 2 or 3 systems are also affected, so I temporarily put comments in those files as well and undo after regenerating. In total all these steps shouldn't take longer that 1 or 2 minutes. To keep conflict counts down it helps to merge more often.\nAt wooga we're around 4 to 6 devs per team.\nIn my team we work agile and test driven, so nothing is designed in advance. Features and requirements may or may not changed at any given point of time. I personally never worked in an environment where you design everything up front. In my team we're totally guided by TDD principles.\nMultiple pools should be a result of the game design and not dev head count I think. But if you have a working workflow for this I'd be happy to learn more about it :)\n. \nIn the default case it's this code which is creating garbage\nGroupObserver.cs\nHopefully @JuDelCo is right and this changes in the future. Atm, iterating over a hashset produces garbage\n. Hey, thanks! It seems to be faster in some scenarios. I don't know why yet, can you explain? Because I actually get more calls to UpdateName now. \ud83e\udd14\n. Hey, awesome! Thanks for contributing. Could you do me a favour. I merged your changes into develop and added MyDoubleComponent and MyFlagsComponent to the VisualDebugging project to test if it's working.\nI added Item2 as a start value, but the drawer shows Item1.\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas.Unity/Assets/Examples/VisualDebugging/VisualDebuggingExampleController.cs#L36\nWould be great if you could look into this!\n. Ok, cool! Thanks\n. Thanks! Is fixed now\nhttps://github.com/sschmid/Entitas-CSharp/tree/master/Entitas.Unity/Assets/Entitas/Unity/VisualDebugging/Entity/Editor/TypeDrawer\n. Awesome! Thanks :)\n. Hi, thanks!\nHow did you do that? Is there a way to automatically do that? Or did you do it manually?\nMerged into develop. Will be in the next release.\n. Hey, good find. I'm thinking about a mechanism to provide equal checks for specific types similar to ITypeDrawer so we are able to move this very specific code somewhere else.\nE.g. we could implement IEqualComparer or sth (AnimationEqualityComparer) and VisualDebugging will be aware of this implementation and use it instead of the default equals.\n. Closed by #266 . > Giving this some more thought I realized this would be a pretty serious departure from the current architecture and would break all existing projects\nOh yes, this was a huge change :). Hi @srivello, thanks for sharing and welcome to Entitas ;) I scanned through your code and here's my feedback\nDestroyComponent\n\nSince this class has no properties this attribute is required for it to be generated - srivello\n\nWill also work without CustomPrefix. Default prefix is \"is\" (isDestroy)\nImplementing IComponent is enough to be generated.\nVelocityComponent\n\nEntitas examples use x,y,z properties separately, but I use a Vector3. Best practices for Entitas?\n\nTotally fine to use Vector3. Keep in mind that if you want to write your simulation logic totally independent from unity, it's good practice to write your own Point struct or just use x, y, z.\nViewSystem\n\nWhat does ensureComponents do?\n\nsee https://github.com/sschmid/Entitas-CSharp/blob/master/Entitas/Entitas/Interfaces/IReactiveSystem.cs#L26-L32\nFeature\n\nWhat is a Feature? \n\nFeature is basically the same as Systems. There is no difference other than it uses DebugSystems when playing in Editor (to get VisualDebugging) and normal Systems without the overhead in release builds.\nVelocitySystem\n\nWhat is the best way to address OPTIONAL components like Tick and Friction below?\n\nSystems in general should not have any state (other than fields for optimizing performance, e.g. caching groups)\nOptional components could be set to default value if not present in a IInitializeSystem\nVelocitySystemTest\nI recommend (and personally do so) writing test for all logical systems that are necessary for the core simulation.\nThe test looks great ;)\nGet inspired here https://github.com/sschmid/Entitas-Shmup/blob/develop/Assets/Tests/Editor/describe_VelocitySystem.cs\n. @mstrchrstphr I should have read you answer first ;) Great answer, you totally got it :)\n. Hi, I linked your pong project here\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Games-and-Examples\nI hope that's fine with you\n. Added it to the wiki\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Tools-and-Extensions\n. Hi, yes, atm there's only a script that's tested on mac. I'd be happy to accept an PR if you want to provide a script for windows. If you need more information about the idea behind the various scripts let me know.\nbuild.sh should work out of the box. It seems like there are compiler errors that's why the Unity task cancels\nAborting batchmode due to failure:\nScripts have compiler errors\nWhen you open Unity manually you should be able to identify the spot where it's breaking for you. Maybe sth went wrong with update_project_dependencies.sh\n. Hi, having specific types to improve code completion will totally fit into the vision of Entitas. Once you scale your game you'll usually end up having multiple pools. This can lead to bugs because you are able to add components to entities from different pools etc. I'm currently integrating the new Pools class which is not static anymore and try to prepare a new version with features and bug fixes from all of you guys. After this I think it totally makes sense to keep on working on your suggestion.\n. Just a heads up: I really like your idea, great work! This topic just became my prio 1 task now. I will look more into this. I also added a new PoolsGenerator on develop for the new Pools instance class to make it easier to work with multiple pools. I also plan to replace pool.CreateSystems() with pools.CreateSystem() and move the responsibility to choose the correct pool into the reactive system itself. This all should fit nicely with all of your suggestions.\n. I started to look into this now. I took a look at your changes and put them ontop of the latest develop.\nI currently have problems getting it to work. Here's what I've done.\n1. Added IEntity. Entity implements IEntity\n2. Added IPool<TEntity>. Pool implements IPool<TEntity>\n3. Updated Matcher, Group, GroupObserver, ReactiveSystem, TriggerOnEvent and more to be generic with TEntity\n4. Added convenience default Matcher, Group, GroupObserver, ReactiveSystem, TriggerOnEvent with <Entity> to make VisualDebugging compile without changing too much.\nI have questions:\nImagine TEntity is CoreEntity. What has to be generated and how should I use it?\nDoing this\ncsharp\npublic interface ICoreEntity : IEntity {\n    PositionComponent position { get; }\n    bool hasPosition { get; }\n    Entity AddPosition(UnityEngine.Vector3 newPosition);\n    Entity ReplacePosition(UnityEngine.Vector3 newPosition);\n    Entity RemovePosition();\n}\ndoesn't work with pool.CreateEntity() because new Entity cannot be casted to TEntity.\ncsharp\npublic virtual TEntity CreateEntity() {\n    var entity = _reusableEntities.Count > 0 ? _reusableEntities.Pop() : new Entity();\n    ...\n}\nI can add constraints like this:\ncsharp\npublic partial class Pool<TEntity> : IPool<TEntity> where TEntity : class, IEntity, new() { }\nso I can do\ncsharp\npublic virtual TEntity CreateEntity() {\n    var entity = _reusableEntities.Count > 0 ? _reusableEntities.Pop() : new TEntity();\n    ...\n}\nThen I have to create a pool like this\ncsharp\nvar pool = new Pool<CoreEntity>(...);\nTherefore I need a CoreEntity class\ncsharp\npublic class CoreEntity : Entity { }\nBut by inheriting from Entity I basically get code completion for all pools.\nSo the solution would be\ncsharp\npublic partial class CoreEntity : Entity { }\nand the ComponentExtensionsGenerator should only add methods to CoreEntity and not Entity.\nIs that correct? Did I miss sth?\n. fyi, https://github.com/sschmid/Entitas-CSharp/commits/feature/type-safety\n. What do you think of this idea:\n- No interfaces for typed entities (e.g. CoreEntity)\n- We keep IEntity, IPool<TEntiy>\n- Entity is not partial anymore. Code Generator doesn't extend existing Entity class anymore\n- Code Generator creates new partial class based on pool names, e.g. MetaEntity, CoreEntity\n- Code Generator extends CoreEntity the same way it used to extend the normal Entity\n``` csharp\nusing Entitas;\npublic partial class CoreEntity : Entity {\npublic PositionComponent position { get { return (PositionComponent)GetComponent(CoreComponentIds.Position); } }\n\npublic bool hasPosition { get { return HasComponent(CoreComponentIds.Position); } }\n\npublic CoreEntity AddPosition(UnityEngine.Vector3 newValue) {\n    var component = CreateComponent<PositionComponent>(CoreComponentIds.Position);\n    component.value = newValue;\n    AddComponent(CoreComponentIds.Position, component);\n    return this;\n}\n\npublic CoreEntity ReplacePosition(UnityEngine.Vector3 newValue) {\n    var component = CreateComponent<PositionComponent>(CoreComponentIds.Position);\n    component.value = newValue;\n    ReplaceComponent(CoreComponentIds.Position, component);\n    return this;\n}\n\npublic CoreEntity RemovePosition() {\n    RemoveComponent(CoreComponentIds.Position);\n    return this;\n}\n\n}\n``\n- We used the new Pool` as planned\ncsharp\nvar corePool = new Pool<CoreEntity>(CoreComponentIds.TotalComponents);\ncorePool.CreateEntity()\n        .AddPosition(new Vector3(1, 2, 3));\n. Here's a working example\nTyped Entities.zip\n. 1) my current plan is to have this API\npools.CreateSystem(new MySystem()));\nHaven't check yet, but the idea is that you can infer the TEntity type of the system itself.\n2) Yes, matchers should be typed as well\n3) Definitely\n4) The static Pools is already gone on develop. You can always write your own ISystem storing pools. I don't think this will be part of Entitas. You should use ISetPools instead of constructor arguments, otherwise you cannot easily reinitialize if you ever plan to do some kind of soft-reset and reuse / reinitialize the system with a different Pools instance\n. I'm currently playing around on this branch\nhttps://github.com/sschmid/Entitas-CSharp/commits/feature/type-safety\n. Here's an updated sample project\nTyped-Entities.zip\n``` csharp\nPools.sharedInstance.SetAllPools();\nPools.sharedInstance.meta.CreateEntity()\n        .AddName(\"Max\");\nPools.sharedInstance.core.CreateEntity()\n        .AddPosition(new Vector3(1, 2, 3));\n```\n``` csharp\n[Core]\npublic class PositionComponent : IComponent {\n    public Vector3 value;\n}\n[Meta]\npublic class NameComponent : IComponent {\n    public string value;\n}\n```\nYou cannot add Position to a meta entity \ud83d\udc4d \n. The new Pools class let's you assign Pools as you like. It can store all specified pools. You can also set them to null now. It's planned to pass around the Pools instance with ISetPools instead of manually passing all required pool instances to an object.\n. I feel like I am missing sth in your idea. I don't understand how it should work with the interfaces. Can you explain?\nE.g. IPositionEntity, would you do sth like\nvar posEntity = (IPositionEntity)entity;\nWhat type is entity? Entity or CoreEntity, how can you cast Entity to IPositionEntity?\nAfaik, Entity would have to implement all those interfaces?\n. It might work if the code generator makes the partial Entity class implement all interfaces, right?\n. From my test, you cannot cast IEntity, ICoreEntity or anything else to IPhysicalEntity if you never declare interface ICoreEntity : IPhysicalEntity\nAm I missing sth?\n. My test setup:\n``` csharp\n// given\npublic partial interface ICoreEntity : IEntity {}\npublic partial class CoreEntity : Entity, ICoreEntity {}\n// having\n[Pool(\"Core\")]\npublic class NameComponent : IComponent {\n    public string value;\n}\n// This will be generated\npublic interface ICoreNameRead {\n    NameComponent name { get; }\n    bool hasName { get; }\n}\npublic interface ICoreNameWrite {\n    void AddName(string value);\n    void ReplaceName(string value);\n    void RemoveName();\n}\npublic partial class CoreEntity : ICoreNameRead, ICoreNameWrite {\n    // placeholder for real index\n    const int nameIndex = 0;\npublic NameComponent name { get { return (NameComponent)GetComponent(nameIndex); } }\n\npublic bool hasName { get { return HasComponent(nameIndex); } }\n\npublic void AddName(string value) {\n    var component = CreateComponent<NameComponent>(nameIndex);\n    component.value = value;\n    AddComponent(nameIndex, component);\n}\n\npublic void ReplaceName(string value) {\n    var component = CreateComponent<NameComponent>(nameIndex);\n    component.value = value;\n    AddComponent(nameIndex, component);\n}\n\npublic void RemoveName() {\n    RemoveComponent(nameIndex);\n}\n\n}\n```\ncsharp\npublic interface Person : ICoreEntity, ICoreNameRead, ICoreNameWrite {}\ncsharp\nvar pool = new Pool<CoreEntity>(...); // type CoreEntity\nvar e = (Person)pool.CreateEntity(); // Does not compile ;(\n. Am I missing sth? It would be awesome if that would work\n. Heads up,\nthere's a version on this branch for everyone who wants to try it already.\nhttps://github.com/sschmid/Entitas-CSharp/tree/feature/type-safety\nThis feature is currently on hold in favor of research for a roslyn based code generator.\nBut the type-safe feature will definitely be a thing in future versions of Entitas!\n. Closed by #266 . Hi @angelotadres,\nyes, Futurama has some Entitas in it\nhttps://itunes.apple.com/de/app/futurama-game-of-drones/id1009200976?mt=8\nhttps://play.google.com/store/apps/details?id=com.wooga.futurama\nand there have been a few games in production already. I'm currently working on a game that we plan to go live with.\nThere have been soft-launches with the objective-c and swift version already, too.\nThere have also been multiplayer games proving that you can run the simulation on a server and reuse existing code. Unfortunately they haven't been released.\n. Looks great! :)\n. Now officially available via Dash https://kapeli.com/dash\n\n. I have a new machine. Did brew install doxygen but can't run it anymore. I get this error\n/Library/Developer/CommandLineTools/usr/bin/docsetutil: No such file or directory\nNo idea what's happening. Any idea? My old machine didn't have this file either, but it worked.. pool.CreateSystem<T>() is a convenience method and currently returns ISystem because in case T is IReactiveSystem this method actually returns a new instance of ReactiveSystem with T being the subsystem. This means a general casting to T wouldn't work.\nAdditional thoughts:\nI was thinking to add pool.CreateReactiveSystem(), this way your suggestion would work. 2nd thought was to remove CreateSystem<T> altogether and just provide CreateSystem(ISystem system) the reason being increased build size when compiling AOT, e.g. iOS.\nEven more thoughts and a glimps into the future of Entitas:\nI added pool.CreateSystem() mainly to inject the pool if needed and wrap a system into a ReactiveSystem if needed. When I'd add pool.CreateReactiveSystem() there would be only one reason left for this method (ISetPool).\nI plan to get rid of the static Pools class and make it a normal class where you can set multiple pools yourself. Instead of passing a pool to ISetPool we could pass in the pools instance and have sth like\ncsharp\npools.core\npools.meta\nThen I'm wondering if we can get rid of the ISetPool interface altogether and just pass the pools instance as a constructor parameter if needed.\n. I think codings standards are great and important. Although we call them standards, many teams have their own \"sub standards\". Personally, I've set the conventions for Entitas to sth very similar I saw when looking at the Unity API, e.g. gameObject.transform.x.\nIf the generated code doesn't conform to the convention your team has decided on, I suggest you duplicate the existing code generators and update the affected code. Then you can deselect the generators that ship with Entitas and choose your custom ones.\n. I usually differentiate between two types of tweening: relevant and irrelevant tweening (couldn't come up with  better name for now :)).\nRelevant meaning that an actual system needs to take care of tweening component values like position. This means you have to write your own tweening system and that the actual position change is important to the simulation.\nIrrelevant meaning that the tween is purely view related and animates a state change, e.g Match-One example. A piece falls down 3 cells in the grid and the position is set to the final value immediately but the view is animated over time using DOTween (if you like HOTween you'll love DOTween)\nRenderPositionSystem.cs\nBut if we'd had a sophisticated TweenSystem for Entitas already, we could basically use it for everything. This is an idea that @mzaks had for a while.\n. Before I get started: Initialize is the perfect place to subscribe to events since it will work great if you ever need to soft-reload you game (see #82). So well done ;)\nIf you use pool.Reset() it will also do the unsubscribing in groups for you. But you are right, being a good citizen means cleaning up after yourself. This is exactly why I've planned to add sth like 'ICleanupSystem' or 'IDeinitializeSystem' (not sure about the name yet) to have a proper place to do so. So we can call\ncsharp\nsystems.Initialize();\nsystems.Execute();\nsystems.Deinitialize();\n. Btw, I'm not quite sure what your current design is, but consider preferring ReactiveSystems over group events if possible (and if it makes sense of course). I generally try to use group event only if I really need to.\n. Btw, I added ICleanupSystem and IDeinitializeSystem. They will be in the next release.\nThe suggested order is\nInitialize\nExecute\nCleanup\nDeinitialize\n. More info about Cleanup:\nI often end up having a global cleanup system in the end which is removing flags or flagging entities to destroy. Instead of having one systm that basically know about all features you can now simply implement ICleanupSystem to  remove component (or other cleanup) in the same system where you actually add those components\n. Awesome! Great to see that you have a Entitas game in the stores! Will link it in the wiki\n. Cool thanks! It's the small details that makes it great ;)\n. Hi, long time no see.\nIt's really easy now to add you own custom code generators (see #265). This means you can simply duplicate the a current generator (e.g. ComponentEntityGenerator.cs) and change it to produce the code you want to have. Once you're done, you can select your code generator in the Entitas Preference Window in Unity.\nThe default generator won't be updated for now, but feel free to create your own one and create a new pull request if you think that should be part of Entitas.\nThanks!. Correct, it will always be the component that actually triggered the event of being added to a group. You can always access the components by directly retrieving them from the entity itself\ncsharp\nvar x = entity.isGameElement;\nvar pos = e.position.value;\n. Ok cool.\nHere's a suggestion for a minor improvement:\nvoid OnEntityRemoved(Entity entity, IComponent component)\n{\n    var pos = component as PositionComponent;\n    if (pos != null) {\n        _pool.gridCache.Grid[pos.X, pos.Y].Remove(entity);\n    }\n}\n. Hi, great to hear you get started with Entitas. Good choice ;)\nI would really love to do more tutorials and even video tutorials. I really plan to do this someday. Currently, it is very hard for me to find additional time after work or on the weekend and after adding more useful features.\nI hope the videos from Unite 2015 and 2016 will already help a little bit. Make sure to checkout the example projects that you can find in the wiki https://github.com/sschmid/Entitas-CSharp/wiki/Example-projects\nIf you have questions, feel free to add more issues here on GitHub.\n. Hi, I was just looking into this. Technically it's easy to add this. When working with Entitas one of the most important things is order of execution of the systems. If you're system implements both, IReactiveSystem and IExecuteSystem, which execute should be called first? Execute() or Execute(entities). I don't have a general answer to this, so I don't support it atm. But I'm open for discussion.\n. About throwing an error:\nEntitas is pretty flexible, you're always in control when and which systems to execute. There is actually no downside or limitation to implement both interfaces. You can definitely do that if you know what you're doing.\nThe way how to create and execute systems are just suggestions from my side.\n. Yeah true, it's a potential trap. Maybe I should provide more documentation for this\n. I was thinking of adding some kind of logging support for Entitas, so I save this to my list. I could log a warning or info if you're implementing both\n. A code generator is planned for a future version. See #75\n``` csharp\npublic const string PositionKey = \"Position\":\npublic static void AddEntityIndices(Pool pool) {\n    // Position index, key type is IntVector2\n    var entityIndex = new EntityIndex(\n        pool.GetGroup(Matcher.Position),\n        (entity, component) => { // How to create a key based on entity and component\n            var positionComponent = component as PositionComponent;\n            return positionComponent != null\n                ? positionComponent.value\n                : entity.position.value;\n        });\npool.AddEntityIndex(\n    PositionKey, // Any unique name\n    entityIndex\n);\n\n}\n```\ncsharp\npublic static HashSet<Entity> GetEntitiesWithPosition(this Pool pool, IntVector2 position) {\n    var index = (EntityIndex<IntVector2>)pool.GetEntityIndex(PositionKey);\n    return index.GetEntities(position);\n}\ncsharp\nvar entities = pool.GetEntitiesWithPosition(pos); // fast index access\n. I updated my previous comment. Try that\n. You can achieve sth like this already manually, but yeah, generating these things will be very handy\n. I think I'll give up on that, since I can't find a way to load the dll. Doesn't seem to work\nhttps://github.com/sschmid/Entitas-CSharp/blob/feature/%23158-command-line-code-generator/CodeGenerator/Program.cs#L22-L25\n. 2nd take...\nalso add commands\n$ entitas init        // create a Entitas.properties file\n$ entitas diff        // list of code generators not used in Entitas.properties\n$ entitas generate    // generates source files based on Entitas.properties. Reached the first milestone! Entitas command line code generator paves the way for simple customization and roslyn integration\n\nYou're ready to generate.\n\n. The sources for the Addons and all of Entitas will stay open source, but I'm working towards deploying dlls in the zip files instead of sources.\nThe green generate Button definitely stays ;). aiming for dll-only. The new Pools class fixes a few flaws of the previous version: The Pools class in previous version was a static class with all its drawbacks. It was a hardcoded singleton, you couldn't set your pools manually. The new Pools class is more flexible. You can create multiple instances of it, you can set (or not) your pools as you please. For convenience, there is still a static sharedPools getter to get easy access in other places like MonoBehviours.\nIt is one step (of more to come) to make work with multiple pools easier. Previously, you only could set one pool with ISetPool. Depending on your design, you might have more than just one pool for a e.g. the core game. Example. Entitas Shmup GameController.cs\ncsharp\n.Add(new ReactiveSystem(new AnimateOutOfScreenViewSystem(corePool, bulletsPool)))\n.Add(new ReactiveSystem(new AnimateDestroyViewSystem(corePool, bulletsPool)))\nThese systems need more than just one pool. Imagine you have even more, like AnimationPool, SoundPool, etc. \nTo simplify this, use the new Pools class (it has a reference to all pools like pool.core, pool.animation, ect) and use 'ISetPools' to get this instance.\nMore convenient and less code to write.\n. > @behealed\n\nHey thanks for the reply. I don't want to start a debate over which ECS system is better, but seeing how both of these ECS systems are open source now, is there anything that Entitas does better than uframe ECS? Also I'm curious, since both are open source, if Entitas is more powerful on the code end, would it be wrong or illegal or unethical or whatever to simply take the graphic node system from uframe and copy it to Entitas? \n. > @cloudjubei Sept. 11 20:33\n@behealed about your suggestion of node-based scripting - I've spoken to @sschmid about it a month ago and after Simon has enough time to work on the current issues it might be something to look into. I think it's a very useful feature to have, but I don't expect people that like to code to use it too much - which is our target Entitas audience atm \nThe reason why you should be using Entitas over other ECS frameworks is that it's really battle tested - we are currently using it at Wooga to make real games and we talk about it all the time to try and improve it. We've seen it improve the way we code in many ways so it's not just a framework but also a methodology, a way of thinking and coding. I believe that Entitas makes us better and cleaner coders - so if you have no preconceptions - I would really advise you with all my heart to try it out for yourself and ask if there's something you don't get - we're always happy to help new people out \n. > @behealed Sept. 11 21:08\n@cloudjubei I like to code too. And I used to think that nodes were kind of useless. Then I tried shader forge, and I changed my mind to \"most nodes are useless\". That's because shader forge actually renders a little image into each node, and the image (often) illustrates the result of whatever math that node output, including all the math that led up to that node. You can be the greatest shader coder ever, but seeing those little renders happening on every node is a world of information... sometimes. Anyway, so now I'm a believer in nodes, but only if the nodes display something that would otherwise be hard to see when coding.\n. > @behealed Sept. 11 21:15\nOf course none of that applies too good to a ECS system... but the idea is the same, the nodes should either display something useful that I can't see very easily while coding, or else the nodes are indeed pretty useless, except maybe they would help a child who wants to see big pictures in their story book lol.\n. > @cloudjubei Sept. 11 22:46\n@behealed I understand fully - I was blown away by Shader Forge too  only problem with it is that it's quite inneficient - we had to rewrite all shader forge shaders as they were super unoptimised for mobile. So yes - for your Technical Artist doing them in SF it was great... but for the guy who was later on 'translating' SF shaders to normal+fast shaders it wasn't \nIt's very similar with Entitas actually, this example, because if you really do do it right - it will be very efficient \nBut as I said also - I think the future does lie in GUI or graphical based programming - so I guess we will have to look into it sooner rather than later \n. The thing that pops to my mind immediately when thinking about this is refactoring. So far I didn't have any good experience with node-based systems. I remember mecanim animation controllers quickly growing very big and \"refactoring\" was a mess; so much clicking...\nBut maybe we can do it better ;)\n\nHow exactly do you guys envision this to work? \nAlso, since this will rely on code generation, this should be definitely tackled after the roslyn code generator is finished.\n. Move conversation to #475 . In the very beginning I tried enums instead of const int. Unfortunately it was slower than plain integers. This is basically the main reason why it's integers now.\n. Does it help using the [componentNames array?](https://github.com/sschmid/Match-One/blob/master/Assets/Sources/Generated/ComponentIds.cs#L24-L36\nIf not, the code generator is pretty flexible: you can just duplicate the existing ComponentIndicesGenerator and change its name and update it to generate enums instead to a different file like ComponentIdEnums or sth like that. It will automatically appear in the Entitas Preferences in Unity for you to select. Would that help you?\n. There are multiple ways to do this. I think a \"correct\" answer is strongly depend on which platform (PC or Mobile) your game runs and how powerful your minimum target devices are (again PC or Mobile). Can you give more information? \n. I'll try to answer soon. In the meantime you can read #82, maybe this contains valuable info already.\n. If you ever call pool.ClearGroups() all entity indices are not working anymore, so we need a way to reactivate / re-add them\n. My favorites so far\nIResetSystem\nITearDownSystem\n. ITearDownSystem it is then ;)\n. Basically, the question is:\nCan we have a Matcher with a condition, e.g.\ncsharp\nMatcher.Color().Where(e => e.color.value == 1); // not Linq where\nand use it as a trigger.\nThis can also work for more complex matchers\ncsharp\nMatcher.AllOf(A, B, C).NoneOf(D).Where(e => ...);\nIt's not implemented yet, but generally yes.\nA few things that pop to my mind:\n- Currently matchers are cached and reused. With this approach, this is not possible, since we customize it with a function.\n- I have to check first, but: this lambda will most likely produce garbage.\n- Filtering will be a little bit more expensive.\nBut all in all, shouldn't really be reasons not to implement it. This might actually a pretty nice addition to Entitas.\n. Will close. Not planned anymore.. If you mean Migration 0.32.0, it's these steps:\n- install Entitas 0.32.0\n- use the command line tool MigrationAssistant.exe\n  - this will update Entitas.properties to use the new keys\n  - this will replace calls to pool.CreateSystem<T> if you used it\n```\n$ mono MigrationAssistant.exe -l\n...\n========================================\n0.32.0\n  - Updates Entitas.properties to use renamed keys and updates calls to pool.CreateSystem()\n  - Use on folder, project root\n========================================\n``\n. :)\nYes,Generated` has to be in version control.\n... but, when we have the roslyn generator - some day - we could ignore the generated folder.\n. Awesome, thanks!\n. Some tasks go away if you just wait long enough :). I write unit tests for the game logic, so basically most of the tests are testing systems. I use nspec which I run either within the IDE or with runTests.sh.\nEntitas Shmup tests\nMy systems almost never use any unity stuff. E.g. I try to use IViewController exclusively which are hiding the gameObject. I use my own logging NLog which is more flexible than plain Debug.Log which also enables having logs in systems. If you use Debug.Log (or any other unity api) you cannot run the tests like I do anymore.\nIn the chat we already had a few discussion why that makes sense (running code on a server).\nSometimes I want to test features that actually use unity api. In those cases I use Unity Test Tools, see EntityLinkTests.cs\n. I haven't had a project so far that relies on time. All my games are tick-based.\n. You'll see Attempted to access a missing method every time you're accessing Unity api which cannot work without unity running.\nFor tests, I create pool manually like this\nTestHelper.cs\n. Latests builds are failing. See https://travis-ci.org/sschmid/Entitas-CSharp/builds/162594512\n. > Components contain data only\n\n;)\n\nThis logic should be somewhere else. The component only has string audioClipName\n. You can create a new class AudioClipCache containing this logic, this way you can also easily test it\n. Fyi, matchers with filters might get removed in the next version. It encourages people to write  less efficient code. Instead of aggregating change in a reactive system and the only filter once, groups and reactive systems that will support matchers with a filter would filter more than once - basically every time you replace a component.\nIt's very convenient, but it has an overall negative effect on performance.\nPlease try to avoid using matchers with filters until the discussion has a result.\n. Pools is a partial class, so you can basically implement as many methods that make sense for you as you like.\nThe code generator is very flexible. You can duplicate the existing PoolsGenerator and modify it to your liking and select it in the Entitas Preferences.\n. I'd suggest you create your own version of PoolsGenerator and make it generate your suggested code\n. @alandyshev let me know if there are still issues\n. Released Entitas 0.35.0 with the fix.\n. Simple but very useful\n\n. how come I still don't have this?! :D. how come I still don't have this?! :D in 2017. Great talk! I love it!\nGreat to see how your systems doing one single thing and comparing it to the Player script.\nYou seem to fully get the Entitas way :) Turning off systems for debugging rocks!\nKeep it up!\n. I'll create a new section in the readme or wiki to link your talk if you din't mind\n. Added to the wiki\nhttps://github.com/sschmid/Entitas-CSharp/wiki#video-tutorials\n. Thanks, I updated the links!\nI'm glad I could share some useful information with you guys!\n. Example:\nInputSystem.cs\nGameController.cs\n. I updated the wiki Install-Entitas-and-first-steps.\nI created a simple C# project for you with the code generator already set up.\nThis should help you getting started.\nhttps://github.com/sschmid/EntitasPure\nHave fun! :)\n. Duplicate #50 \n. Makes sense. Will be in in a future version. Thanks\n. Hi, documentation should not be part of your unity project or source code. Only copy the Entitas sources to Unity. That will fix it.\n. @oxysoft I think you mean sth like in RenderPositionSystem\ncsharp\npublic void Execute(List<Entity> entities) {\n    foreach(var e in entities) {\n        e.view.controller.position = e.position.value;\n    }\n}\nand you don't want to do foreach(var e in entities)\nAs in many other cases, Entitas provides the foundation to work with your data in a way that I think is the fastest way. You can extend Entitas in any way you like, and if it makes sense to you and you're fine with the additional method call, you can create your own system with Execute(Entity e) and use that instead.\nYou can create your own base system which implements IReactiveSystem and calls a custom Execute(Entity e) for each entity. Other systems would subclass this base system. I personally wouldn't do it, but there's nothing technically that will stop you.\n. Yes, the planned roslyn code generator will fix these issues.\n. From reading the code it looks like the is no attribute in the components\nsee https://github.com/sschmid/Entitas-Shmup/blob/develop/Assets/Sources/Features/Position/PositionComponent.cs#L4\n. PoolAttributes will tell the code generator in which pools the component should be available. If there is no PoolAttribute it'll end up in the default ComponentIds \n. Yes, that's right. You have to use entity.ReplaceGap(). Components are object pooled under the hood to reduce memory allocations. So currently, your workaround is the correct way of doing it.\nThis issue could be solved by having a reference count to components, same as there is a reference count for entities (retain / release).\nI would have to see, if that will have a negative effect on performance. Otherwise, the only thing I can say right now is to use the generated methods instead of manually calling entity.ReplaceComponent(). Rule of thumb: if you're using ComponentIds anywhere in your code, consider this as using internal api. Consider this as an internal implementation detail that can change at any time. It might not change, but try using matchers and generated methods instead. Entitas also works completely without the generated methods, but then you have to be aware of more details like the issue you just described.\n. Hi, currently this Attribute only works for non IComponents, e.g.\ncsharp\n// This will automatically generate PositionComponent and VelocityComponent for you\n[Pool, CustomComponentName(\"Position\", \"Velocity\")]\npublic struct IntVector2 { // <-- Not IComponent\n  public int x;\n  public int y;\n}\nBut I think we can add this also for IComponents. Will tag this as a feature request.\n. Fyi, I will be back in December, so this will take a while, I'm sorry. If you like you can also dig into the code generator code and do a pull request.\n. For now, it will only work on non IComponent. @benzsuankularb It only works on non IComponent.. Closed by #266 . Eagle eye! :) Thanks!\n. Usually I suggest keeping components as small as possible. This can increase the reusability and will result in more fine-grained control for matchers, groups or reactive systems. But of course, this is totally up to you and to whatever makes more sense in your game design. If your WorldClass only contains configuration of the world, which will not be used by other entities or e.g. reactive systems, there is no need to split it up into many smaller components. Think of components as small reusable building blocks. Is your WorldClass made of many little building blocks? Yes? Split it up. No? Keep it as a big class of data and link it as a reference in an other component.\nOther question, see #226 . First few thoughts:\nI think this can be achieved without any attributes.\ncsharp\npublic class Foo : IComponent {\n    public int x = 1;\n}\nshould be enough for the code generator.\nBut:\ne.AddFoo();\ne.AddFoo(2);\ndoesn't work if you add int y and int z with default values, too.\nAddFoo(int x = 1, int y = 2, int z = 3) might be a better solution. This requires a certain order of fields (or a smart way in the generator to rearrange them) given the case below\ncsharp\npublic class Foo : IComponent {\n    public int x = 1;\n    public int y;\n    public int z = 3;\n}\nAddFoo(int x = 1, int y, int z = 3) // will not compile\nI'll think about it and about cost/gain as maxim called it ;)\n. Feel free to re-open, when you think it's important. Unfortunately, for now it's not going to make it in.. Unfortunately, this feature request will not be implemented. To give a good answer I guess I'd need more context, but I can tell you how I solved it in my multiplayer games (synchronous realtime multiplayer):\nFor sending the state from the server to the clients we designed a small and efficient custom binary protocol based on UDP to keep package size as small as possible. Clients receive the packages, deserialize them and eventually create / modify entities and components.\nChanges on the client are serialized to the custom binary format and sent to the server as command (input)\nThe server simulates the game, the clients display it. For a smooth UX, clients have prediction systems to feel more responsive, meaning, you see your own inputs before confirmed by the server.. If your game is not a synchronous realtime multiplayer, maybe @mzaks or @cloudjubei have more insights. Yes, I've open sourced it.\nNUdpKit: https://github.com/wooga/NUdpKit\nErlang backend: https://github.com/odo/talk. See README.md. It's pretty advanced stuff, I hope the readme helps.\nThis is the basic design of a package\n+---------+------------+-------+------------------+-------+--------------+---------+--------------+--------+\n|  8 Bit  |   64Bit    | 32Bit |       32Bit      | 32Bit |    32Bit     |  8Bit   |     8Bit     | Rest   |\n+---------+------------|-------|------------------|-------|--------------|---------|--------------|--------+\n|Signature| ResourceId | SeqNr | Equivalent SeqNr |  Ack  | Ack Bitfield | Command |  Compression |Payload |\n+---------+------------+-------+------------------+-------+--------------+---------+--------------+--------+. Oh, true... I see what I can do about the private repo...\nSome more context for to decide if it sth you need:\nIt was designed for:\nsynchronous multiplayer\nauthority on the server (simulation on the server)\nclients send inputs (commands)\nworks on mobile with Edge / 3G, switching from Wifi to Network etc.\nreliable udp with package tracking for resend (ack bitfield tracks last 32 packackes)\nudp with tcp characteristic (ack for connect, deconnect)\noptional payload comression (game state). @luochuanyuewu is it a pure c# project or a unity project? I'm asking, because in a unity project usually deleting the component + the generated code should be enough.. Hey, that's a good idea. All classes considered public api already have basic documentation. Doxygen is used to generate the docs found here\n- Entitas.docset.tgz\n- http://sschmid.github.io/Entitas-CSharp/\n- Also available for Dash\nRun ./Scripts/docs to regenerate the docs. This will generate the Entitas.docset.tgz and create the ./docs folder which will be shown when opening http://sschmid.github.io/Entitas-CSharp/. I think a step by step guide would also be really helpful. This might go hand in hand with #227 (Video Tutorials). Will move to #333 and close. I could update the the code generator to ignore read-only fields and properties. Would that help?\nCould you give a little bit more context about your use case, maybe there are better ways instead of having a parent component.. Hey, sound like serialisation and deserialisation.\nUsually not all entities and components have to be serialized (saved) in order to load (deserialize) a game state. Try to figure out which data is necessary to be able to load and recreate a game state. Either you come up with a custom serialisation scheme or simply use Entitas.Serialization.Blueprints.Blueprint. This class is [Serializable] and can be saved as e.g. json or binary. Personally, I have a SerializationService and DeserializationService, both based on json. Will probably switch to binary soon. I don't serialize entities as is. I extract the data I'm interested in, e.g. type and position and store them. From the serialized data you cannot tell that I'm using ECS or Entitas. When deserializing I will create entities and add components based on the data.. I'd love to do some video tutorials, unfortunately I'm not quite sure when I can spare some time. If anyone makes videos, let me know. I'll link them in the wiki. And of course I'll let all of you know whenever I'll start working on video tutorials. Will move to #333 and close. My goal is that Entitas works really well with Unity but also in plain C# projects. I try to keep Entitas very modular, so you can add / remove modules easily. I personally haven't created any UWP apps yet, so I rely on issues like this one to get more external input where Entitas needs even more separation.\nIf it's only the System.Runtime.Serialization.BinaryFormatter that keeps you from compiling, try deleting the Serialization/Blueprints folder. This shouldn't have any effects other than removing the blueprints feature.. @culer Yes, we can take a closer look at that.\nAssets\\Entitas\\Extensions\\TypeExtension.cs(11,42): error CS1061: 'Type' does not contain a definition for 'GetInterfaces' and no extension method 'GetInterfaces' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nSound like there are some methods missing... What is the target framework? Is it just a subset of .NET?. @zmox Yes, initially I wanted to use json for the beta, but I didn't want to depend on a 3rd party lib. Just as a proof of concept I used the BinaryFormatter that comes with c#. @culer If you want you can send me the project or an empty new failing project so I can take a look and try to fix it.. I must have missed the notification somehow, just read it now. You solved it already?. Seems to work on windows only, too bad I'm working on a mac. \nI suggest\ndelete the serialization folder, you don't need it, this should fix a few compiler errors\n. might be a problem / breaking change with .NET core. Any news? Otherwise consider closing this issue.. Try implementing IComponentDrawer\nExample:\nAssetComponentDrawer.cs\nA IComponentDrawer will be used when matching the component type. This way you can draw your custom editors. Well, nothing really changes how you load things with Unity's WWW class. Or What do you mean?. What about sth like this\ncsharp\n.Add(new IncrementTickSystem().Bind(pools))\n.Add(new AddViewSystem().Bind(pools.core))\n.Add(new AddViewSystem().Bind(pools.bullet))\nBind (or a different term? Suggestions?)) actually does the same thing as CreateSystem. If a system implements ISetPoolsthen pass pools in, if it implements ISetPool then pass the pool in, if it doesn't implement either, do nothing (same behaviour as it is right now).\nThis might be less confusing and more explicit. Sounds more like we're using this system with the specified pool. Any suggestions other than .Bind(core)?\n.Use(core)\n.Inject(core)\n.With(core)\n.Link(core)\nThis will most likely be an extension method on ISystem. UPDATE: new idea (forget .Bind())\nSince this might be a big change I'd like to have your opinion on that.\n2 thoughts:\n1.\nThe goal is to simplify the creation of system lists. I'm thinking about removing ISetPool and ISetPools. They spell almost the same I guess people get easily confused what it is and what the differences are.\nInstead, use pools only and pass them in as a constructor argument if needed.\n2.\nCurrently CreateSystem sets the pools if ISetPools is implemented. It also wraps IReactiveSystem in a ReactiveSystem.\nI'm thinking of removing CreateSystem and move the reactive system wrapping to the systems.Add() method.\nAs a result we'd write sth like this:\n```csharp\n        return new Feature(\"Systems\")\n        .Add(new IncrementTickSystem(pools))\n        .Add(new CreatePlayerSystem(pools))\n        .Add(new CreateEnemySystem(pools))\n\n        .Add(new AddViewSystem(pools))\n        .Add(new AddViewFromObjectPoolSystem(pools))\n\n```\ncompared to the current solution:\n```csharp\n        return new Feature(\"Systems\")\n        .Add(pools.CreateSystem(new IncrementTickSystem()))\n        .Add(pools.CreateSystem(new CreatePlayerSystem()))\n        .Add(pools.CreateSystem(new CreateEnemySystem()))\n\n        .Add(pools.core.CreateSystem(new AddViewSystem()))\n        .Add(pools.bullets.CreateSystem(new AddViewFromObjectPoolSystem()))\n\n```\nI would need to add some mechanism to define the pool which a reactive sub system is working on to make this work, but this could be achieved by modifying IReactiveSystem\ncsharp\npublic interface IReactiveSystem : IReactiveExecuteSystem {\n    TriggerOnEvent trigger { get; }\n    Pool Bind(Pools pools);\n}\nYou basically hardcode the reactive system to a pool. We kind of doing this anyway already by using {Pool}Matcher as a trigger.\nAny thoughts before I get started?. @T2RKUS Yes, that's the only thing I have in mind too. If we move in this direction Pools becomes more than just sugar but a first class citizen. I'll think about it but I can imagine that every game will have more than one pool, so moving away from pool to pools might not be that bad.. It's the end of the year and a good time to clean up a little bit ;)\nI updated IReactiveSystem\ncsharp\n    public interface IReactiveSystem : ISystem {\n        EntityCollector GetTrigger(Pools pools);\n        void Execute(List<Entity> entities);\n    }\nThis change enabled me to get rid of loooots of code . It's a breaking change but I hope the result is less confusion and less code to maintain.\nI deleted:\n- IMultiReactiveSystem\n- TriggerOnEvent\n- IMatcherExtensions\n- .CreateSystem()\n... without loosing any features. The new IReactiveSystem can do the same as IMultiReactiveSystem and IEntityCollectorSystem\nAdding systems to the list is more streamlined and less code\ncsharp\n.Add(new IncrementTickSystem(pools))\n. Hi, I added IFilterEntities \nInitially, this should enable us to filter entities based on component values, e.g.\n```csharp\npublic class KillSystem : IReactiveSystem, IFilterEntities {\npublic TriggerOnEvent trigger { get { return CoreMatcher.Health.OnEntityAdded(); } }\n\npublic bool filter(Entity entity) {\n    return entity.health.value <= 0;\n}\n\npublic void Execute(List<Entity> entities) {\n    foreach(var e in entities) {\n        // no need to check for health here anymore, yay\n        e.flagDestroy = true;\n    }\n}\n\n}\n```\nBasically, IFilterEntities can now potentially replace the other existing interfaces IEnsureComponents and IExcludeComponents, since we can now express that in one simple filter(entity) method. This will also simplify the internal implementation of ReactiveSystem since we only have to check on single method now.\nI'm thinking of deprecating IEnsureComponents and IExcludeComponents in favour of IFilterEntities.\nWhat do you guys think?. On a related note\n@FNGgames was kind enough to also provide a step by step Hello World Tutorial\nWiki - Unity-Tutorial-Hello-World\nAlso feel free to update the Wiki with your Tutorial (ref #333). Hi, no, it's not implemented. I talked to Maxim a few times, but I never felt like implementing it. There always seem to be tasks with a higher prio, so I probably will never do it, and since it's over a year old, I just closed it. I hesitate to introduce more complexity... things like e.GetComponents() and other areas have to be updated, but I don't think it's a problem right now.. Pools.cs\ncsharp\n        readonly Dictionary<IMatcher, Group> _groups =\n            new Dictionary<IMatcher, Group>();\nFor the sake of reusing existing groups, that might not be a good idea.\nCurrently we can retrieve existing groups by comparing the matcher.\ncsharp\npool.GetGroup(Matcher.Health);\npool.GetGroup(Matcher.Health); // will return the same instance\ncsharp\npool.GetGroup(e => e.hasHealth);\npool.GetGroup(e => e.hasHealth); // will return a new instance\n. Creating new classes (like Nodes in Ash) could help, but who wants to write more classes... \ud83d\udc4e . Hi,\nI recommend setting up the pools like this\ncsharp\n var pools = Pools.sharedInstance; // lazy init of the pools instance\n pools.SetAllPools(); // Sets up all pool (e.g. core, meta, depending on your specified pools)\nIf you use the code generator it will extend the Pools class to contain all your specified pools (e.g. core, meta, ui, etc)\nThat's pretty much it as you can see in Entitas Pure. Pass in the pools into systems via constructor argument (ISetPools is deprecated as of today) to keep things decoupled.\nAbout delta time:\nEntitas itself doesn't have the concept of time baked into the core, but it is really easy to add either deltaTime (DeltaTimeComponent) or frameCount (TickComponent)\nIn our Unite Talk (watch) we discussed that for us time is the same as input.\nI recommend having DeltaTimeComponent [SingleEntity] and do this (or similar)\nvar deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;\npools.input.ReplaceDeltaTime(deltaTime);\nin the beginning of mono game update.\nThis way every system can easily read the deltaTime pools.input.deltaTime.value\nHope that helps! :). This way you can also write unit tests based on deltaTime without depending on a running game. Time is input ;). Each component is in the default pool when there is no PoolAttribute. This is fine if you only have one pool. It seems like you already use your custom pool called Core (which is great). All the components that should be available in this pool have to have the CoreAttribute.\nA pool is basically like a context. Every component that should be available in this context needs the related PoolAttribute. Components can have multiple different PoolAttributes to be available in multiple pools.. If you change the member type the generated code will have compiler errors. You cannot regenerate while having compile errors.\nBut I have to check if this guard still works with Unity 5.5. Haven't tried yet. But sounds like it just regenerates based on the previous dll which includes the component with the old member type.... I just check with Unity 5.5, the guard still works\nException: Cannot generate because Unity is still compiling. Please wait...\nWhen you change the member type your project most likely has compiler errors. This prevents the current code generator from regenerating (based on reflection and generates based on the last compiled dll). Unfortunately, you have to manually fix the compile errors in the generated code first. I usually just delete the affected lines and regenerate.\nThere's also an entry in the Wiki Fixing compilation errors\nWe're currently working on an alternative code generator to fix this issue.. @Zammy Did the answer help you? If so feel free to close the issue, if not add another comment if you need further help.. Can you give a simple example? I'm not quite sure if I understand you correctly.. I think I don't quite understand what you mean.\nJust read\n\nit is responsible of creating and destroying them\n\nSounds like this system is doing 2 things \ud83d\ude31 \nConsider splitting up in CreateEnemy and DestroyEnemy system. Currently you have to use the source code of the at least the core of Entitas, since it contains partial classes.\nBut just this week I started testing working around this. Based on the latest develop I picked up the type-safety feature again which might enable me to deploy Entitas as a dll. I'll look further into this after the xmas holidays. . Hey, fyi,\nwith the current state of develop you should be able to compile Entitas to .dll.\nCode Generation doesn't rely on partial classes from the lib anymore. As a part of restructuring Entitas and managing dlls and dependecies, this is the current project structure\n\n. Currently I don't have time to do this. I'd love to do more tutorials as soon as I can find the time. I'm currently focusing on releasing the next version of Entitas which comes with lots of improvements. I hope that once I'm done with that I can make some tutorials.\nIn the meantime check out the example projects and make sure you watched the presentations\nAre you using Unity?\nLook at the GameController which contains all the logic you need to set Entitas up.\nIt's basically just creating a new pool and the list of systems. That's pretty much all you need to get started.\nI hope that helps.. @JRSerjeant I'll try to wrap up performance tests with the new version tomorrow. If there aren't any major performance draw backs with the generic type-safe version I will continue updating the code generator and visual debugging. If we're going this way this will be a major breaking change. It will also contain multiple other breaking changes that are recently made (no IEnsure, IExclude, etc). I hope I will be done within the next 2 weeks.\nI try to post a sneak peek tomorrow of what the code could look like to get some early feedback.. @JuDelCo That is true. My current roadmap is to ship the in-between version before the type-safety / DSL version (see 0.36.0). Once the type-safety version is out and I upgraded my production codebase to prove that it works, there should be a wiki rewrite. ... with tutorials and FAQs ;). @alimoeeny I think you can wait. I had a similar issue with the Entitas project itself which has a Tests project (and others). Referencing the Entitas project in the Tests project which also contains generated code doesn't work for the the reason you explained with partial classes. I ended up adding the existing Entitas folder as a link instead of referencing the project or copying the sources. This solved the issue for me. Hope that helps.\nBtw, coincidentally I just finished a draft version of Entitas today which enables me to distribute Entitas as a dll. In the future you're not required to import the sources anymore and the code generator doesn't extend existing class from the Entitas library. Good times ahead :). see #244 . Just to let you know, the dll version will have lots of major breaking changes. If you decide to update it will involve lots of manual migrating. Once I'm ready with the version I will migrate my project (500+ systems) and will inform you about the migration workload.. @T2RKUS IMO, you don't need an DI framework when working with Entitas. If you have a ref to the pool you basically have access to everything.. Hey, fyi,\nwith the current state of develop you should be able to compile Entitas to .dll.\nCode Generation doesn't rely on partial classes from the lib anymore. @ophilbinbriscoe Deep down on my to-do list I have this task :) I think it would be a very convenient thing to just click a button and Entitas updates itself. Personally, I love using package managers. Looking at my current work load and planned tasks, I probably won't be able to implement sth like this anytime soon. It's on my list, but the prio is very low. But I'm happy to discuss pull requests ;). I'm happy to accept PR ;). With the changes from #244 we just got one step closer.... Duplicate #52 . @Propolandante I know that the docs and wiki are behind atm. In the last weeks / months I did a rather big change to the code base and I'm currently preparing for the next release. So I'm currently really busy with the code base. Once I'm done I try to update the wiki. In the meantime I try to as transparent as I can by sharing my current progress with issues / pull request / chat announcements so you guys have the chance to follow what's happening.. @JuDelCo \nI'm currently writing a new migration assistant to make things easier. the version itself is ready. bleeding edge is on develop. Also testing maxims dsl. I don't wanna rush the release and try to make upgrading less a pain. ETA: this month. @JuDelCo It would be an addition, not a replacement. The list approach is the most flexible and fits well with the Entitas idea of aggregation. The other approach on the other is a veeery common use-case I guess.. @pderuiter77  Yes, but this would mean you can override both methods, which can lead to confusion plus in a normal case you always have the overhead of a method call.. It would be a separat system. Another reason to add this new system is performance. Currently you iterate once to filter, than you iterate to execute. With a single entity system we could save 1x iteration which might be noticeable when having thousands of systems. . Won't happen for now... will close. #ECP FTW! \ud83d\udc6f \nECS is so 2016 ;)\n. from @JRSerjeant \n\nSounds good to me. A System systems components vs. a Processor processes components. The latter sounds much better and the former just sounds odd when you say it.. @IsaiahKelly I love to talk about details like this, you don't have to excuse your thoughts :) Finding good names is an art :) \nRecently, I was researching a way where any object can be used as components / data instead of being IComponent. I ended up calling those objects Health or Position, no suffix at all. You're right, in the end it's just data. Let's see where this is going.. Thanks guys for the conversation and for your input. I really like 'Processor' etc, and I think, if I would start from scratch, I would consider calling systems like this. I think I will suspend this issue for a while, since I'm currently working on other features. Also, with the latest release I think I already used up your  energy with renamings and breaking changes ;) I'd like to go easy on you for the next few weeks ;) But I might re-open this issue in the future. For now, I'll keep it classic, ECS, Entity, Component, System.. Hi Eugene, great to hear that you're giving Entitas a try. I always try to make working with Entities fun and seamless. The current code generator is our biggest complaint atm and we are well aware of that. After researching and prototyping different alternatives to fix that issue we finally made some really good progress. I plan to test our next-gen code generator this week, maybe even on a big project I'm working on. The solution we're striving or is our custom DSL. it will look sth like this:\n```\ncomp Position in Core\n    x : float\n    y : float\n    z : float\n\ncomp Resources unique in Meta\n    coins : int\n    gems : int\ncomp Tick unique in Input : ulong\n```\nBased on the DSL we can generate code at any time, no matter if your game compiles or not. But there is way more than just that, I think the DSL has much potential and we can have really cool features in the future. We're also trying to generate systems and blueprints for you. It is really promising :) As I said, I plan to test all this this week and let all of you guys know about the results.. @JuDelCo true. @T2RKUS That sound like a good feature. Entitas will always ship with the current default code generator, so it will be easy to implement custom generators.. @T2RKUS with #265 you will be able to generate exactly what you need. related to #139 . @vedun-z Great to hear! You are right, Entitas is in the middle a rather big change. I'm currently actively working on the type safety feature. I finished this task this week and I'm now in the middle of updating the code generator. While I'm doing this I also restructure the code generator to be more flexible and extensible for all of you. I expect this to be done by next week. If everything works like planned, I can release the new version next week which will be a major breaking change to the current one, because of the generic approach. But I think the added value and security is worth the breaking change. It works great together with my vision of the future of Entitas and the integration of a Entitas DSL.\nAs for future updates: While not planned, it can happen that there are breaking changes as a result of the progress being made. When there are breaking changes I always try to provide automatic migration tools or provide a migration guide to make upgrading as simple as possible. The breaking change with the type safety was also clearly communicated and I try to be as transparent as possible.\nI don't expect a breaking change that is so big as the current one in the near future. No promise though ;) But I try my best :D. Thanks for noticing. Updated the link!. While I love talking about the smallest details and good names, I think blueprint is fine. Maybe it's just me, but I think it's kinda clear what it means, no confusion with Prefabs, no prefix EntityXyz needed. In the end, blueprints are just configuration. It can be json, flatbuffers, or any other data format. For the Unity integration I used a binary format as proof of concept. It can also be used in a pure c# project. I wish blueprints would have a higher priority for me, but atm there are many things happening with Entitas and I think I won't be touching blueprints anytime soon. I hope that's ok.. This file Res.cs contains all available resource names. Usually I have a mechanism to generate them (either from resources or asset bundles). This is just a simple example, so I didn't provide the generator to generate this file. You can manually add them if you want, but for a proper game I suggest you have a different workflow and use asset bundles. For demo purposes I added AssetComponentDrawer.cs to showcase that you can customise how to render components. This custom drawer inspects the Res.cs file and renders a dropdown with the contents.. I could think of an AssetDrawer that inspects asset bundles or folders and also validates the names (in case you rename or move an asset). @NemoStein That's a very good question and will definitely make it into the faq :)\nThe trigger should really only be used as a trigger. Neither does it ensure nor exclude and entities with specific components. In the past, people used the trigger to sth like you wrote Matcher.allOf(TestContextMatcher.TestComponent, TestContextMatcher.AnotherComponent)\nWhile this works, it is not good practise. In most of the cases a trigger should only be exact one matcher. You should use it in combination with the filter to ensure or exclude entities.\nIf you trigger for component A it doesn't necessarily that the entities still have that component once you execute.\nRule of thumb:\nevery component that you read or write to in the execute (has, get, add, replace, remove) method has to be in the filter. The filter is not optional anymore to enforce good practise. This fits also really well with our vision with the DSL, where the systems are generated for you, so you don't have to implement triggers and filters anymore because we can infer that from the DSL and will automatically generate that for you. The DSL will follow the rules mentioned above, meaning every access to a component will automatically be ensured.. Checking for components with e.hasXyz doesn't really have a bad impact on performance, but will greatly improve avoiding certain kind of bugs.. @NemoStein Based on the trigger entities will be aggregated by the system immediately when ever and where ever the change to the entity happened. This means at a later point of time where you actually execute the system other logic might have removed the component again.\nImo, the issues are a good place for me to talk about any feedback, questions or suggestions. I will be notified via mail, can manage them and can link them to actual code changes and PR. Atm, I can't see myself also moderating a forum.. Closed by #266 . Unity support is missing.... Not anymore ;)\n\n. @vedun-z Agree, you're right, the code generator shouldn't use PublicMemberInfos. Can you create an issue for that?. I just tested using the Unity JsonUtility instead of the BinaryFormatter again and got reminded why I went for Binary in the first place. The BinaryFormatter \"just works\" out of the box. Unity's JsonUtility will skip fields of type object but the serializable Blueprint class uses Entitas.Blueprints.SerializableMember which uses object for the value field. I think other Json libs can handle that but I don't want to depend on a 3rd party lib.. Fyi, due to #390 I cannot work on blueprint related issues. Blueprints can become a community supported feature.. Numer 1 and 2 will be improved when using Entitas-Lang or the roslyn code generator (coming soon):\nNumber 3 sounds like similar to #352 . Will take a closer look\nNumber 4. I added a new method for simplify getting the context observer:\ncsharp\ncontext.FindContextObserver()\n. @Milambeer agree, will do some day. It's a recent change, so docs are not updated yet. Maybe I should only release when the docs are updated, too. Sorry for the confusion.. That's a rather clear feedback ;)\n. Thanks for voting.\nI think the feedback is clear.\nHideInBlueprintsInspectorAttribute will be removed in the next version.. Done.. fyi, EntityLink will ship with the next release Entitas 0.37.0.. Looks like it's related to c# events...\nNeed to investigate or implement own event system.... C# events do work, but after a really short investigation, I have the feeling that assigning methods to event with += retains the object somehow even if MyEvent = null (which should remove all event listeners).\nIf I don't assign listeners (like here) it works. As soon as I assign methods, the object is not released, even when I do group.OnEntityAdded = null somewhere else.\nResult -> memory leak\nThis only affects a specific edge cases, the normal use-case shouldn't be affected. Still would be nice to solve this\n. usually yes, but in this test the group is deactivated and should remove all connected listeners by setting event = null\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Plugins/Entitas.Unity.VisualDebugging/Assets/Tests/Manual%20Tests/Collector%20Destructor/CollectorDestructorController.cs#L16\n. I made a manual test\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Plugins/Entitas.Unity.VisualDebugging/Assets/Tests/Manual%20Tests/Collector%20Destructor/CollectorDestructorController.cs\nExpected:\nDebug.Log(\"Reusing entity!\");\nAfter some time of running. But doesn't work\n. ```csharp\n    void Start() {\n        Contexts.sharedInstance.SetAllContexts();\n        var context = Contexts.sharedInstance.game;\n    // Collector\n    context.GetGroup(GameMatcher.Test).CreateCollector();\n\n    // Entity\n    _initialEntity = context.CreateEntity();\n    _initialEntity.isTest = true; // Collector collects\n    context.DestroyEntity(_initialEntity); // Destroy, removes isTest, removes from group, but still retained by collector since we never call c.ClearCollectedEntities()\n    context.ClearGroups(); // Remove all eventhandlers\n}\n\nvoid Update() {\n    var context = Contexts.sharedInstance.game;\n    for (int i = 0; i < 5000; i++) { // create a lot of entities and wait for the collector destructor to be called. When it's called it releases the entity and the entity is ready for reuse.\n        var e = context.CreateEntity();\n        if(e == _initialEntity) {\n            Debug.Log(\"Reusing entity!\"); // Entity finally got released and is reused\n            EditorApplication.isPlaying = false;\n        }\n    }\n}\n\n```\nThis is the expected behaviour, but it seems like c# events still prevent collector from being destructed. Either we find a fix or as a last resort a custom event system can also work and might even have less memory footprint. context.ClearGroups() is removed. The test is invalid now. Will close. iirc @mzaks wrote sth about this. Let's see if he can give an answer to this.. given:\na building with position(0,0) and size(2,2)\nwhen:\nadded to an EntityIndex with multiple keys support\nthen:\nit will be at\nindex.GetEntity(0, 0)\nindex.GetEntity(1, 0)\nindex.GetEntity(0, 1)\nindex.GetEntity(1, 1)\n. this can be helpful for all sorts of games. See CustomEntityIndex for a reference implementation. There you go\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Tests/TestFixtures/Fixtures/CustomEntityIndex.cs. If you can represent this as an int, it would be great. Otherwise there's a risk to create lots of string and increase the gc pressure. The idea was that you can any kind of data to the dictionary. A class would be limiting for customisation. I agree, the PublicMemberInfos should be replaced with sth else in the first place, but the whole idea of the code generator refactoring was that you can add anything at any time.\nThis means, you can e.g. add a roslyn data provider that adds whatever you need to the dictionary. A custom code generator can read those values and produce any kind of code. In the Entitas Preferences Window you can select your data provider and code generator and everything should work. In this very case I understand it would be nicer if you only have to add a new data provider and use the existing code generator.. You could duplicate the existing component generators and use your data instead of public member infos. Btw, I was thinking about roslyn again. It's great that you do this. If there's ever a way we can invoke roslyn from within unity, I'd replace the reflection based one. I think that would be very powerful! I just started migrating a very big project today and we have some custom generators, but they're all based on reflection. Of course, there are lot of compiler errors and I cannot re-generate, but the dsl doesn't help either because those generators are custom. So roslyn would be very beneficial for those cases!. Common steps:\n- start with an empty project\n- define contexts in Entitas Preferences\n- Generate (this will generate a few files including context attributes)\n- create a new IComponent and use the generates context attribute (e.g. [Input]). The Documentation folder should not be part of your Unity project. It contains the docs and no source files. That's why you got errors.. Hey, yes with the last and the next release there are some major changes. See release notes\n\nRemoved IEnsureComponents, IExcludeComponents, ISetPools, ISetPool, IReactiveSystem, IMultiReactiveSystem, IEntityCollectorSystem\n\nThe new version is almost done. After this I try to find time to update / rewrite the docs. Check the example projects Match-One\nor Entitas-CSharp-Example.\nBoth of them have a GameController as an entry point. That might help. The concepts stay all the same. The biggest new thing in the next versino is the type-safety.\nSee issue\nhttps://github.com/sschmid/Entitas-CSharp/issues/257\nsee\nMilestone\nhttps://github.com/sschmid/Entitas-CSharp/milestone/7?closed=1. that's correct. It's more explicit now. I usually pass in the contexts via ctor args. Yes. The Feature class takes care of either subclassing from DebugSystems or normal systems. In the editor you'll get DebugSystems, in release mode you will get the faster Systems. yep all docs + wiki are not updated yet. Just released 0.37.0 and have to catch up with the docs... . I'm thinking about adding sth like a default context again. Will probably just use the first declared context. Planned in 0.38.0. Very well done! Thanks for the PR!. I'll fix these things. Thanks for contributing!. We might be able to get rid of ITypeEqualityComparer by using EditorGuiLayout.BeginCheck() to see if sth changed and the replace the component (Similar to IComponentDrawer). This might make things way easier and we don't have to care about writing equality checks. Will look into this.. https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.Unity.VisualDebugging/Assets/Entitas.Unity.VisualDebugging/Entity/Editor/EntityDrawer.cs#L236-L247\n. Just removed ITypeEqualityComparer\nand using EditorGUI.BeginChangeCheck instead.\nThis simplifies a lot and we don't have to check for equality anymore\n8b8584015dab15c96562d87e2436600ea1754836. https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.Unity.VisualDebugging/Assets/Entitas.Unity.VisualDebugging/Entity/Editor/Entity/EntityDrawer.cs#L167-L192. Oops ;). \ud83e\udd15 \nAlmost forgot about that... I already started working on new features. I'll try to force myself to resists adding new features now and update the docs first. @AndreGroeschel Match-One is fully up to date and is currently the best reference to get started.\nCheckout the AddViewSystem to see how EntityLink works. Help Simon #333. Will move to #333 and close. Playing around with internal Unity Editor code... it's both awesome and a pain :). \n. \n. Ha, found the native Play and Skip Buttons :)\nAll sections can be collapsed / expanded. Coincidence? :) #ECS\n\n. Drastically simplified EntityDrawer, got rid of all hacks and EntityDrawer.Initialize().\nReplacing components with object pooled components on GUI.changed which enabled me to remove ITypeEqualityComparer completely and simplify ITypeDrawer. \n. \n. \u2764\ufe0f \u2764\ufe0f \u2764\ufe0f \nThanks, I really work hard trying to make Entitas a pleasure to work with.. Try steeping through frames and also check, if you call Execute twice. great :). This is actually a task I want to tackle for the next release.\nShort answer: Currently a reactive system is limited to one context.\nWhat I will try for the next release is to change the generator to generate IGameEntity interface instead of a class. This way we can compose custom types like\ncs\npublic interface MyCustomEntity : IGameEntity, IGameStateEntity, IInputEntity { }\nwhich can be used\ncsharp\nreturn new Collector<MyCustomEntity>...\nHaven't thought it through yet and cannot guarantee that it is actually possible. But I'll give it a try. On e thing that could be a problem while attempting to solve this with interfaces is the generic type constraint atm where TEntity : class, IEntity, new(). Interfaces don't fulfill this requirement. But I'll see what I can do.\n. :) Let the flame wars begin, haha\n\n. Any vetos why not to do so are welcome btw. I used to care a lot about details like this, but I stopped caring about it a year ago, because most of the time people argued based on personal preferences. I worked in different teams with different rules, and I'm convinced that everyone can adapt to anything. So I tried to approach this without personal preference but with logic, otherwise there will never be a consent.\nWhat's probably more important, no matter which topic, consistency is king, especially when talking about whitespace and braces and all this rather unimportant things :)\nI used spaces until now. My silly attempt to approach this with logic resulted in the following thoughts:\n- Tabs is a character which only intent is to indent\n- Space is a character which main intent is to separate\n- you cannot \"half indent\" with tabs\n- IDEs let you define the indent distance for tabs (e.g. 2 or 4)\n- 1 tab character -> 4 spaces character\nWell, couldn't find any advantages using spaces out of my head. Maybe I'm missing sth (chances are actually high, that I'm missing sth)\n. Haha, just checked what VS for Mac does - it's cheating\n\nit's using spaces to align nicely. Lol, that's the best reason! Stupid tabs :D. Ok, thanks for your input, always very much appreciated. Nothing will change, spaces will stay!\nHurray \ud83c\udf89 . https://www.youtube.com/watch?v=SsoOG6ZeyUI. Fyi, I strongly recommend not doing sth like this:\ncsharp\ne.position.x = 10;\ne.position.y = 10;\nAlways use the e.ReplaceXyz() methods.\nIn case you're planning to use the dsl, I enforced that you get a compiler error when writing sth like this.\n@T2RKUS already found the issue with a suggestion how you could add your custom generator to solve this.. You're welcome to do a PR so I can add it to Entitas. First proof of concept!\n\n. TL;DR\nCurrently struggling. I'll probably have to step back and check if there are other solution or try again on the weekend.\nIf you guys have any suggestions or ideas how to solve this, let me know! \nThe setup:\nI've create a new C# solution with 2 projects\n\nPhysicsKit (name ist just a placeholder)\nThis project contains 2 components in the namespace PhysicsKit\nPositionComponent\n\nVelocityComponent\n\n\nMyGame project\nThis console application project contains 1 components and serves as a test project to integrate the PhysicsKit.\n\n\nI updated the project's Entitas.properties with new Kit syntax. When specifying contexts you can optionally register Kits like this\nEntitas.CodeGeneration.Plugins.Contexts = Game: PhysicsKit + OtherKit + YetAnotherKit\nThe code generator will pick this up and when generating extensions for the Game context it will load and inspect the PhysicsKit and also generate extensions. This works great. You can now write sth like this \n```csharp\nvar context = new GameContext();\nvar e = context.CreateEntity();\n// SomeComponent from the Game context\ne.Some();\n// Generated extensions from the Physics Kit. The Game context and the GameEntity can now also use the components from the Kit\ne.AddPhysicsKitPosition(4, 5, 6);\ne.AddPhysicsKitVelocity(10, 10, 10);\nConsole.WriteLine(\"e: \" + e);\nConsole.WriteLine(\"e.position.x: \" + e.position.x);\nConsole.WriteLine(\"e.physicsKitPosition.x: \" + e.physicsKitPosition.x);\n```\nThe code generator produces a few new interfaces as well.\nPhysicsKitEntity will now implement the new IPhysicsKit interface\nPhysicsKitContext will now implement the new IPhysicsKitContexinterface\nPhysicsKitMatcher will now implement the new IPhysicsKitMatcherinterface\nMatchers are different now, you access them through the context:\ncsharp\ncontext.matcher.physicsKitPosition\nThis is necessary because in the scope of the PhysicsKit, the PositionComponent might have index 0, but when used as a Kit the index gets remapped ontop of already existing indices and will be another index. Since context.matcher will return an IPhysicsMatcher, it works both in the Kit and in the Game. In the Kit IPhysicsMatcher will be the actual PhysicsMatcher, in the game it will be MyGameMatcher which implements IPhysicsMatcher\nThis is what I called Phase I. Works great. Done. But:\nPhase II is about also using systems from another Kit. So I added a simple MoveSystem to the PhysicsKit project\n```csharp\nusing Entitas;\nnamespace PhysicsKit {\npublic sealed class MoveSystem : IExecuteSystem {\n\n    readonly IGroup<PhysicsKitEntity> _group;\n\n    public MoveSystem(IPhysicsKitContext context) {\n        _group = context.GetGroup(context.matcher.AllOf(\n            context.matcher.physicsKitPosition,\n            context.matcher.physicsKitVelocity\n        ));\n    }\n\n    public void Execute() {\n        foreach (var e in _group) {\n            var p = e.physicsKitPosition;\n            var v = e.physicsKitVelocity;\n            e.ReplacePhysicsKitPosition(p.x + v.x, p.y + v.y, p.z + v.z);\n        }\n    }\n}\n\n}\n```\nGoing back to the MyGame project and using it like this would be the goal\ncsharp\nvar system = new MoveSystem(context);\nThe problem:\nMy current problem is to resolve the casting problems. In theory MyGame context, entity and matchers will implements IPhysicsContext, IPhysicsEntity, IPhysicsMatcher.\nProblem 1:\nMyGameContexts implements IPhysicsContexts\nThis was my 1st try in order to pass it to the MoveSystem which requires a IPhysicsContexts in the ctor. But then MyGameContext has to implement all the methods from the IContext<T> interface again, now with T being PhysicsKit additionally to MyGame. This will result in duplicated methods.\nE.g. the IContext<T> interface makes you implement TEntity CreateEntity(). By creating a new context new Context<GameEntity> this is already taken care of, but when now implementing IPhysicsKit I need to implement PhysicsKitEntity CreateEntity(). Yet another Kit would require to implement SomeOtherKitEntity CreateEntity()\nBut obviously I cannot cast and GameEntity to a PhysicsEntity.\nI see, the text is already pretty long, so I guess I'll stop here ;)\nThe short version: I tried casting and implementing different interfaces to resolve the issue, but I'm not there yet. I'll probably have to step back and check if there are other solution or try again on the weekend.\nIf you guys have any suggestions or ideas how to solve this, let me know! . EntitasKitsTest.zip\nHere's the project if anyone want to see the setup. Pretty simple. EntitasKitsTest.sln contains boths projects. Goal: Get rid of compiler errors :) Or find a completely new approach. Go and check the generated code and maybe modify it, e.g. try what happens if GameContext also implements IPhysicsContext...\nI'm currently trying to find out what the generated code should look like. So main objective is to mess with the generated code.. Hi @PanCotzky , @IDNoise is right, in 0.37.0 you have to put a ContextAttribute to every IComponent like so Match-One PositionComponent\nThe next release has a \"default context\" feature, which means that all IComponts that don't have a ContextAttribute will automatically be linked to the first context specified in you Preferences. So with the new version your setup would already work.. Just an idea, not sure if it's worth the effort.... Yes, sometimes you might not want to regenerate and get frustrated if it automatically does. I'll think about it, it's just an idea atm. No seeing this happening right now... Will close. Wow, that's must have been quite a migration :) Nice!\nThat's actually a good point. Sth like\ncsharp\ncontexts.Reset();\nwould be nice.\n\nI also don't know how to handle the generated indices and blueprints\n\nWhat do you mean? How to migrate them?\n. Blueprints are just config and don't have any state that has to be reset. Entity Indices can be reused and are empty when you destroyed all entities. I will also remove context.DeactivateAndRemoveEntityIndices() I guess, so don't use that. Doesn't make sense to remove indices since they are actually beneficial for performance.. Haven't had the time to look into it yet, but here are my thoughts on resetting (not your code, just general thoughts):\n1.\nI will remove context.DeactivateAndRemoveEntityIndices() since it doesn't make sense to remove or deactivate indices. Entity indices are a performance optimization and I don't see any reason to remove them on reset. When all entities are destroyed, all indices are empty anyway.\n2.\nI probably remove ClearGroups()from the context.Reset() method. When all entities are destroyed, all groups are empty anyway and can be reused. ClearGroups was added because I saw people registering to event like group.OnEntityAdded += ... but never removed the event handler. ClearGroups will call RemoveAllEventHandlers on each group and basically clean up for you in case you didn't unsubscribe from event yourself. Cutting off all registered eventhandlers might be unexpected behaviour when you reset the context, so I will remove it. E.g. ScoreLabelController.cs wouldn't work anymore after clearing groups, unless you re-enter the scene and start gets called again.\n3.\nContexts stay in the hierarchy (DontDestroy) even after you reset, because you're just resetting and intend to reuse all the allocated structures.\nIf you really want to do a hard-reset, you can do this by writing this\ncsharp\nContexts.sharedInstance = new Contexts();\nMake sure to manually remove the previous ContextObserver if you're using VisualDebugging. So after those changes i mentioned above, resetting should be as easy as writing this\ncsharp\nsystems.DeactivateReactiveSystems();\ncontexts.Reset();. Try not to call ClearGroups. Uncomment this line in Context.Reset()\nIf you reset the groups, existing contextObservers (the things in the hierarchy) won't update anymore because we cut off the event handlers. So your components are most likely added, but you cannot see it with visual debugging. How do you initially create the Contexts? Do you do it manually with new Contexts()? If so, you'll get new gameObjects in the hierarchy. When you lazily create them by calling Contexts.sharedInstance you should be fine. Yeah, you're setting the contexts again with SetAllContexts(). That's why you get the second gameObject.\nYou should only create contexts once in the lifecycle of the app. I mean you can totally create them again, but then you have to cleanup the previous gameObjects yourself. When you're systems are written correctly, you can even reuse the systems.\nWith written correctly I mean, in case you cache any state within a system, that you do that within the Initialize method.\nSo all you need to do is call systems.Initialize() and systems.ActivateReactiveSystems() again, but you can reuse the contexts and systems.\nBut of course, it's also alright to just create everything from scratch again, depends on the use case. Personally I try to reuse the objects.. Ref to an older conversation #82. Seems like your ManExtraColliderCollisionComponent has a member called colliderEntity of type Entity but should be of type GameEntity or should be casted like this\ncsharp\n((GameEntity)e.manExtraColliderCollision.colliderEntity).AwesomeCodeCompletion***\nBtw, when it's only 1 matcher, don't use Matcher.AllOf to reuse the cached matcher\nvoid SetGroup() {\n        _Group = _context.GetGroup(GameMatcher.ManGroundCollider);\n}. :) You're welcome!  \ud83d\ude34 . HideInBlueprintsInspector has been removed in 0.38.0.\nVisualDebugging currently depends on the Code Generator Addon because it's using\nCodeGeneratorConfig and ContextsComponentDataProvider\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.Unity.VisualDebugging/Assets/Entitas.Unity.VisualDebugging/Editor/EntitasStats.cs#L40-L56\nEntitasStats cannot be moved to the Code Generator Addon because it uses Feature\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.Unity.VisualDebugging/Assets/Entitas.Unity.VisualDebugging/Editor/EntitasStats.cs#L63. 0.40.0 introduced another coupling. Added ContextObserverGenerator to VisualDebugging which makes it even more dependent on Entitas.CodeGenerator.. 0.41.0 has a streamlined project structure. The coupling still remains, since the EntitasStats have to retrieve information from the CodeGeneratorConfig. Only solution would be moving EntitasStats to a separate Addon.. It's been a while. But I did finally remove the dependencies to Entitas.CodeGeneration.Plugins. Will be in next release. You would wire up this instance to all contexts in the beginning and therefore the lazy instantiation wouldn't kick in. The wave of closing issues doesn't stop here... Will close, focusing on more important features for now.. Turned out not to be true. GLAD!. Welcome to the world of micro-optimizations. Feel free to do one :). I don't expect any real life gains unless you call those methods reeeeeaaaly often. I'd call it code maintenance.... I know what you mean, but this is intentional.\nFor this code generator to work, it needs certain information. If some keys don't exist, it cannot fully function. Checking for keys would mean it end up generating some things and would skip others. The shipped code generators work full or nothing. For customized solutions I recommend creating your own generators, even if this means duplicating an existing one and just changing a few little things.. So I'd say it's ok to create your own ComponentDataProvider or AbstractComponentDataProvider. You can use ComponentData. ComponentData and others are basically empty dictionaries to enable me to use static extension methods for nicer api and safety. You're not required to use any of those extension methods and you can check for keys if you want.. Sounds like you're calling context.Reset() or context.DetroyAllEntities(). Is your RemoveViewSystem reactive?\nThat's an interesting (and probably common) use-case... context.DestroyAllEntities() actually throws when detecting retained entities to warn you the hard way, that you might leak.\nSince I guess your RemoveView system is reactive, it didn't unlink yet, so entities are still retained.\nSolutions:\n1. get all entities and add e.isDestroyed = true and execute the systems again\n2. get all entities with view and manually unlink\nboth solutions don't really seems to be optimal, so if you have more ideas let me know.. Totally, perfect fit :) I hope this idea with Kits and Modules will work somehow.. Yeah, I was thinking about that too. In fact, before the EntitasCache, every class had their own static cached list. As part of refactoring I moved that code to the EntitasCache. But I guess you're right, when thinking about the performance we can save a dict lookup and even the whole object pool, because all we really need is just one cached list that we reuse. Merged! :)\nThanks for the contribution!. Examples\n```csharp\nnamespace MyGame {\npublic class HealthComponent : IComponent {\n    public int value;\n}\n\n}\n```\nwill generate\ncsharp\nentity.AddMyGameHealth(42);\nI personally don't use any namespaces for my game logic\ncsharp\npublic class HealthComponent : IComponent {\n    public int value;\n}\nwill generate\ncsharp\nentity.AddHealth(42);\nUsing namespace indicates that there might be name conflicts. That's why the code generator includes the namespace to all generated methods. I know that there will be no name conflict with any of my systems or components, so I don't use namespace to enjoy the shorter api.\nIf Entitas Kits #307 will ever be a thing, there might be name conflicts between your PositionComponent and e.g. PhysicsKit.PositionComponent. So the code generator must not ignore the namespace in order to resolve this.\ncsharp\nentity.AddPosition(42);\nentity.AddPhysicsKitPosition(42);. While I still think the code generator should not ignore namespaces if you choose to use them, I see a lot of people want to use namespaces because they are \"used to use 'em\" \u2122\ufe0f - that's fair enough. While not officially supported by Entitas you can add this functionality yourself by customizing the component data provider.\nIn 0.40 I removed componentName from the data provider and I'm thinking about readding it for the sake of choice with namespaces. This will allow you to easily use a custom component data provider which sets the short type name without namespaces.\nIn the meantime, you can do this as a temporary solution:\nSearch for .Replace(\"${ComponentName}\" in the folder Entitas.CodeGenerator/Generators/ and update this\n```csharp\n//instead of\nvar componentName = data.GetFullTypeName().ToComponentName();\n// do this\nvar componentName = data.GetFullTypeName().ShortTypeName().RemoveComponentSuffix();\n```. I think I found a nice solution. All you have to do is adding this key to your config in order to ignore namespaces\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true. Added IConfigurable. DataProvider, CodeGenerators and PostProcessors can now be optionally configurable by implementing IConfigurable. This means they will need optional keys in Entitas.properties, e.g. Entitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nI also updated the CLI to report if any plugins require keys\n$ entitas status\nMissing key: Entitas.CodeGeneration.Plugins.IgnoreNamespaces\nThis solution will make it easy to customize plugins in the future.. You'll see dependencies based on the usings. But with the builtin plugin it's simple, all generators depend on their corresponding data provider, they're all in the same namespace. Based on recent advancements with the roslyn plugin for the code generator, I will close.. Feel free to retweet if you want to see this happening\nhttps://twitter.com/entitas_csharp/status/840581685846634497. All common pitfalls when using MT also apply when using Entitas. My main goal is to explore and define workflows and conventions to help developers avoid having issues. Those conventions could lead to additional apis to encourage people to structure their code in a certain way. After that, the ultimate goal which I'd love to achieve somehow is that you don't even have to care about details of MT; Entitas could figure out those details for you and run systems in parallel by itself. This would not be part of Phase 1, but I like to set the goals high ;). I played around with threading again. I added a JobSystem.cs as a proof of concept.\nThis system distributes the execute over multiple threads and joins them again. This can speed up performance if you either have lots of entities or if the calculations are very intense.\nIt's really simple to set up:\n```csharp\npublic sealed class RotateSystem : JobSystem {\npublic RotateSystem(GameContext context, int threads) :\n    base(context.GetGroup(GameMatcher.AllOf(GameMatcher.Rotation, GameMatcher.RotationVector)), threads) {\n}\n\nprotected override void Execute(GameEntity entity) {\n    entity.rotation.value = entity.rotation.value * Quaternion.Euler(entity.rotationVector.value);\n}\n\n}\n```\n\nMutating the component values directly (non reactive) and therefore circumventing groups, collectors and reactive systems can already result in massive performance gains.\nI think you should approach performance critical systems in the following order:\n1. Use system as normal (reactive)\n2. Use system without generated methods (non reactive)\n3. Use JobSystem\n. Updated EntityDrawer to automatically draw all known types also for custom types. No code generation required. Entitas can draw nested known types recursively \ud83d\udc4d No need for simple custom TypeDrawers anymore like IntVector2TypeDrawer. Take a look at #323, I just closed this issue with a commit. Component (without namespaces) is gone. I will update all test fixtures to use namespace to have unit tests and make sure that all data providers and generators are namespace aware. Will rename issue. Fixed in 0.39.0. Fixed in 0.39.0. Good find. Fixed in latest commit. I was throwing an exception when attempting to set a field that does not exist. This stopped the deserialization. Works as expected now.. Yeah, a proper FAQ probably makes more sense. Waiting for the forum. Will close. Yes, wiki is free to be edited. I'm also happy with having the FAQ in the wiki. @aefreedman agree. I can totally see the FAQ as a part of the wiki. . That's right. Collectors collect / add entities, never remove them. This is why we use the Filter() method in ReactiveSystem. A trigger doesn't guarantee that the entity still matches. . ReactiveSystems automatically call collector.ClearCollectedEntites() once they are done. So yes, they will be removed automatically. maybe the system triggers itself by changing components that are in the trigger. you're not calling Execute(List<BuildingEntity> entities) directly, right? (which would be wrong to do)\n. If your ReactiveSystem triggers itself because you change components that are part of your trigger, you can also just call Clear() in the end of your execute which will clear collected entities for this reactive system\n```csharp\n    protected override void Execute(List entities) {\n        // do sth\n        Clear();\n    }\n```. It will only affect this system, all other reactive system will behave as expected. Hi, no, from the point of view of a reactive system there is no difference between a component being added or replaced.\nYes, replacing a component can lead to an entity being removed from a group (remove component) and then being added again (new component added).\nThat's definitely sth for the faq. I suggest having an issue with a catchy title and have the question including the answer (optionally some examples) in the description. I will add the faq label and move it to the faq project. Similar to the dummy issue #332 . Hello and welcome! I understand that it might be not as easy to get into at the moment. A few things changed recently and I'm busy to add more features and improvements which are important to the games I'm working on full time.\nThe good thing is all the concepts from the Unite Videos are still valid.\nThere are 2 changed that might be confusing after seeing the videos\n1. Pool got renamed to Context\n2. Entitas is type-safe now (more info see #257)\nThe best way to get into Entitas is by checking out Match-One\nhttps://github.com/sschmid/Match-One\nIt's up to date (0.38.0) and I will update it to 0.39.0 which I just released today.\nThe GameController is the starting point of the game where all systems are added. Start exploring from there.\nIf you have questions you can either add new issues or ask in the chat\nhttps://gitter.im/sschmid/Entitas-CSharp. Match One is updated now. Fell free to re-open or create new issues if you still have questions. Added link to documentation in the readme\nhttp://sschmid.github.io/Entitas-CSharp/. Closed by https://github.com/sschmid/Entitas-CSharp/commit/8443997ca913d1c6b4dd2ded5a8790b572ee66fb. Improved Editor DebugSystemInspector 2-3x less memory and CPU.\nBetter UX:\nAny system can be deselected at any point of time. Cool! Thanks. @IDNoise  I know what you mean, but not replacing the component circumvents all concepts of Entitas (Groups, ReactiveSystems, EntityIndex, VisualDebugging, etc will not work) Components should be seen as immutable data. The only reason why they are technically mutable in Entitas-CSharp is the garbage collector and performance optimizations. The whole api is designed to treat components as immutable data. I consider the fact that we were actually able to modify components as an exploit that I want to patch.\nEntities and components are all object pooled and reused, so changing them multiple times each frame shouldn't be a problem. In rare situations where performance is really critical, and none of the features mentioned above are needed, you can still modify the actual component. But as a default I think it's a safer way to enforce replacing components. Replacing has a real benefit as it makes the whole state in the context observable and thus enables Groups, ReactiveSystems, EntityIndex, VisualDebugging, etc.. Sure, there might be a case where you prefer not to have those effects. Personally, I never encountered such a case in my last 3 games with Entitas (which doesn't mean anything really, tbh :)). With Entitas I'd like to promote general best practises and insist on consistency as I'm convinced consistency is generally a big plus. As mentioned above, there will still remain a way to modify components directly, but it won't be as obvious anymore in order to prevent people from doing common mistakes.. The goal is not to remove flexibility but to make it harder to write code with bugs. just had another real-life issue from a user that called e.position.x = 42;\nI think that feature really helps reducing bugs. After some thought, I will close. While I think it's nice to enforce, there are performance penalties that hurt everyone. Getters are just way slower than fields. In rare cases you want to actually circumvent all event for extreme performance.. Of course I have :D Everything I do is based on performance results. I even came up with a name\nPDD - Profiler-Driven-Development \u2122\nI try to recall, it was sth like 50-70ms vs 13ms. Hi, yes, that's true. Starting with 0.37.0 I made some steps towards deploying Entitas as a dll which could also be placed in Plugins. I'm not quite there yet, as you found correctly, the Assembly is still hardcoded with IEntity. In the future I could imagine to specify a path to the assembly. You can try replacing IEntity with a type of your assembly. For now Entitas is only tested and supported in the Assets folder. Added assemblyPath and codeGeneratorAssemblyPath to code generator config. You can now select assemblyPath and codeGeneratorAssemblyPath in the Entitas Preferences. When not selected already, navigate to Library/ScriptAssemblies/ in your Unity project and select Assembly-CSharp.dll for the assembly and Assembly-CSharp-Editor.dll for the code generator assembly (or where ever you dlls are located)\n. EntitasPure is updated using modified 0.39.2.\nChanges in modified version will be in the next official release.. Hi. I understand that the current workflow with the reflection-base code generator might be a pain, especially in the beginning when you're new to Entitas and code changes all the time. Good news is that we're currently working on finding better solutions like Entitas-lang or a roslyn-based code generator which will work even when there are compile errors.\nThe code generation issues will fade more into the background once your code gets more stable. I'm in a team with 4 devs, we have over 300 components and over 600 systems. Code generation is actually no problem. But I get that it's a problem currently. The roslyn solution should fix all of this.\nOn premature optimization:\nUsing \"premature optimization\" when talking about Entitas is wrong IMHO. I have very strict rules when writing libraries such as Entitas. I always strive for simplicity and efficiency. Nothing gets added without being proved to be necessary. I do sth I call Profiler-Driven-Development and all the changes and improvements are actually backed by numbers and tests.\nCode generation was a natural evolution of the library and necessary to improve performance and optimized memory usage. As it turns out, it also enables us to do automatic object pooling and results in a great api.\nIn the early days we had an api like this\ncsharp\nentity.AddComponent(new PositionComponent());\nvar pos = entity.GetComponent<PositionComponent)();\nThere is no object pooling of components and retrieving components like this was very slow and created a measurable bottle neck.\nCode generation enabled us to do automatic object pooling for components and speeded up component lookup by an order of magnitude. At the same time we get a nice api.\n```csharp\nDebug.Log(e.debugMessage.message);\n// vs\nDebugMessageComponent component = (DebugMessageComponent)e.GetComponent(_context.Table.IndexOf());\nDebug.Log(component.Message);\n```\nI really like this api, that's why I went with code generation. Luckily code generation is optional and flexible. You can chose to only use a small subset of generator like ComponentsLookup or nothing at all.\nBut your code suggestions contain a few nice ideas that I also wanted to try when tackling #307 \n. > That is bad. Maybe you not need a code generator at all, anyway 95% of frame time eaten by graphics. Maybe need to concentrate on building more comfortable workflow with developers, that can save a lot time for making a lot of new features, than on optimization that save 1% of frame time, and cost a hundreds of developers hours\nA multiplayer backend doesn't do anything involving graphics and it's a question of real money if you need 1000 servers or if you can do the same with 100 servers with an optimized framework. I think a really good point you made is the dependency image. I'll think about it. Hey, sounds useful and is sth you can easily do to if you want. For now I won't add and maintain sth like this in Entitas. Hope that's ok.. Check your code generators, there's a new one called Context Observer. I decoupled it from the previousContexts generator. Let me know if that fixes it.. Btw, the Entitas.Unity.VisualDebugging.SystemWarningThreshold belongs to this feature \"Added SystemWarningThreshold to visualize slow systems\" 7a3a333a6b98eac8a605dc3cd294c2a2d70b8b3c. This will draw systems in red color if they take more time than the specified threshold. Also, the \"S\" systems hierarchy icon will turn red, so you immediately see when systems run slow. Thanks, updated comment. Haha, nice :) There are tools for everything nowadays... I'm aware of those code paths, I see what I can do. None of them are critical or important imo. Let's see\nThanks. Haha, there will be no Entitas left once he gets started deleting code :D. > 1- CodeGenerator.cs\njust went away naturally :D. The other parts will stay like this for now. I think I found a nice solution. All you have to do is adding this key to your config in order to ignore namespaces\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true. Seems like I actually forgot to call a method to use this new key... \ud83e\udd26\u200d\u2642\ufe0f  Will be fixed in the next release. \n. Will close, feel free to re-open if you have further questions.\nHappy coding! :D. Cool, great, Will take a look! Thanks. Can't see why this should happen. The file contains \\n only\n\nand I'm calling .ToUnixLineEndings()\nwhich will do\ncsharp\npublic static string ToUnixLineEndings(this string str) {\n    return str.Replace(\"\\r\\n\", \"\\n\").Replace(\"\\r\", \"\\n\");\n}\nDid you open and save the file and therefore overwrite with \\r\\n?. ah ok, CodeGenFile should maybe have a setter for fileContentand call . ToUnixLineEndings(). I don't quite understand why it happens... if AddFileHeaderPostProcessor.cs didn't change everything should be fine, or am I missing sth?. Added a setter to\nCodeGenFile\nWould be nice to know, if that fixes your issue\n. Will close, see referenced commit. Feel free to re-open when still happening in the next release. Hi,\nI recently posted sth about the roadmap in the chat:\nhttps://gitter.im/sschmid/Entitas-CSharp?at=58cdae0efe6a638b1add8d63\nI'm currently working on a roslyn code generator and @mzaks is about to release Entitas-Lang which both attempt to solve the issues you might have with code generation. I also just updated the build pipeline and the Entitas code base to be deployed as dlls.\nI want to have those things in before I consider going 1.0.0 since those changes might have an effect on the public api.\nHaving said that:\n- Entitas is ready for production\nWe used it for multiple different games in different genres over the last 3 years and there are a few games already out in the AppStore made with Entitas. Take a look at the Wiki - #madeWithEntitas\nI used Entitas in a synchronous multiplayer game and in a deterministic game where I could replay the game just by providing inputs. It's really easy to achieve this with Entitas.\n\nIs Entitas good enough for it?\n\nIn my opinion Entitas it currently one of the best options to build a game with a solid architecture. I'm currently working on a game with hundreds of systems and growing complexity, but it's still a pleasure to work with, and the complexity is manageable very well. We have thousands of unit tests and the game runs very smooth.\n\nand why?\n\n\nIt's fast and optimized\nI uses way less memory than Unity\nIt uses object pools and caching by default to ensure to have almost no allocations\nData Oriented approach, composition over inheritance\nSystems that follow the Single Responsibility Principle\nIt's really easy to write Unity Tests with Entitas, which can be veeery beneficial if you want to create a deterministic game\nIt has proven to scale well\nMe and the great community are happy to help if you have any questions\nIt's plain fun to work with :D\nIt's open source. Maybe sth like this?\n\n```csharp\npublic class MySystems : Feature {\npublic MySystems(Contexts contexts) {\n\n    Add(new MySystem1(contexts));\n    Add(new MySystem2(contexts));\n    Add(new MySystem3(contexts));\n}\n\npublic override void Execute() {\n    if (contexts.isInBattleMode) {\n        base.Execute();\n    }\n}\n\n}\n```\nMySystems will only execute its child systems when isInBattleMode. 1st April is almost over, so I can close this issue again :D \nRepost from the chat\n\nsorry everyone :) couldn\u2019t resist. But on a serious note, I actually really started writing one yesterday. I will share it with you soon. It will by a step by step guide from downloading and installing Entitas to seeing moving cubes based on user input. I will push it to GitHub and every commit is a sub step where I add features etc. This tutorial should help getting people started. After doing the tutorial Match-One should be very obvious\n. @marczaku Sounds great! Your suggested Api is definitely nicer! :D  Do you want to create a PR?\nThanks a lot. Will close. Use\ncsharp\nDestroy(contexts.game.FindContextObserver());. Awesome! Thanks!. I'd love to see the icon :D I was thinking about having a new one anyway :)\n\nI'm not an expert on licensing atm, I hope to change that soon. Sounds great!\nI understand, it's better safe than sorry. If you join the chat you can pm me\nhttps://gitter.im/sschmid/Entitas-CSharp. I guess there are people at Wooga who might know more about this topic, but would be great if you could do some research if you think it's important to you.\nWill close, but we can stay in contact about this\nThanks . Releases after 0.40.0 will have an updated ContextsGenerator which will include a try catch block in order to be able to run tests outside of Unity.\nContexts.cs\n```csharp\npublic partial class Contexts {\n#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n\n[Entitas.CodeGenerator.Api.PostConstructor]\npublic void InitializeContexObservers() {\n    CreateContextObserver(game);\n    CreateContextObserver(gameState);\n    CreateContextObserver(input);\n}\n\npublic void CreateContextObserver(Entitas.IContext context) {\n    try {\n        if (UnityEngine.Application.isPlaying) {\n            var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);\n            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);\n        }\n    } catch (System.Exception) {\n    }\n}\n\n#endif\n\n}\n```. Hey, thanks for the feedback. These are all good points and I try to address all of them in the step-by-step tutorial I'm currently working on.. Jep, will all be part of the tutorial. In the meantime:\nMultiple Contexts, an attempt to explain:\nhttps://github.com/sschmid/Entitas-CSharp/issues/105#issuecomment-213925457. @VladislavKostin While I love talking about details like naming (which I think is really important) I must tell you that this topic has been discussed already in the past (#99) and I'm afraid that there will be no renaming of the Context anytime soon.\nWe were thinking about the name a lot and we agreed that Context is actually a good name that it is both short and descriptive. Personally, I try to avoid using *Manager whenever I can.\nBut thanks for the input!. We reached 1000 starts today, that should be enough motivation to finally start a forum :D\nI'd love to go with flarum, but they emphasize not using it in production.\nProbably will take a look at discourse then. ### Ok guys, make it rain stars then! :)\n\u2b50\ufe0f \u2b50\ufe0f \u2b50\ufe0f \u2b50\ufe0f \u2b50\ufe0f . cc @mzaks . Hey, I will redirect you to the official Entitas-Lang GitHub repo which is maintained by @mzaks\nhttps://github.com/mzaks/Entitas-Lang\nIf you have further questions, feel free to create an issue on this repo.\nThanks\n. Hi!\nFor c# only projects I only have a minimum project with one component here\nhttps://github.com/sschmid/EntitasPure\nBut all the concepts are the same. Looking at the Unity projects should help you getting started with c# only, too, I hope.. Fyi, a new command line code generator will come very soon. The EntitasPure example currently has a separate project for the code generator. This will go away in the future in favour of a standalone command line tool. Just to let you know. The starting point in a c# project is the Main class. Take a look at the GameContoller.cs from the Unity projects, they are basically the entry point.. If you need further help, let me know.\nIf you have a basic project working, maybe you want to share it with the community. It might be helpful for other people using monogome, too. You can let me know and I will link it in the wiki. @VladislavKostin You mean when UserComponentgets renamed to PlayerComponent you want that Entitas renames all occurrences of AddUser, ReplaceUser and RemoveUser to AddPlayer, etc, right? I was thinking about that for a while now. This is sth we can achieve with roslyn where we actually can do safe refactoring based on symbols. This would be an additional refactoring tool. It would definitely make sense.. cc @mzaks do you have an Entitas-Lang repo where we can add related issues?. @VladislavKostin Agree, this feature is on my wish-list too :) Would be very convenient.. I'd be happy to accept PRs :D While this feature is also on my wish list it's currently not planned. Will close, but might re-open at some point in the future.. In my workflow I need to be able to see many components at a glance and often modify multiple components. That shouldn't change.\nAny progress, otherwise feel free to close\nThanks. Wanna share screenshots to see if it's going in the right direction?. cc @mzaks Did you push Entitas-Lang to a GitHub repo already where we can post related issues?. Hey, I will redirect you to the official Entitas-Lang GitHub repo which is maintained by @mzaks\nhttps://github.com/mzaks/Entitas-Lang\nPlease create an issue on this repo.\nThanks\n. Hey, I will redirect you to the official Entitas-Lang GitHub repo which is maintained by @mzaks \nhttps://github.com/mzaks/Entitas-Lang\nPlease create an issue on this repo.\nThanks. Fyi, due to #390 I cannot work on blueprint related issues. Blueprints can become a community supported feature.. I can't really see what the difference is. Why does moving the try catch block help?\nI'd say we should find out why there is an exception in the first place, since there shouldn't be one. Is it the security exception? Are the dlls unblocked?. I'd be interested in a solution for windows. Works with mono on a mac, no security exception. Is this sth you can configure? Kind of trust a location / dll / sth ?\n@wistler My setup:\n\nUnity project Assembly-CSharp.csproj\nA second Tests.sln which has a ref to Assembly-CSharp.csproj\n\nThis way I have the tests separate and not in a Editor folder which is great. UNITY_EDITOR shouldn't be an issue since the only thing which depends on this is the ContextObserver in the generated Contexts class.. Added the suggested fix. Will be in the next release. Thanks!. Hey, I just check real quick, seems like I forgot to actually call Configure on the generators \ud83e\udd26\u200d\u2642\ufe0f . This means they fall back to the default. Will fix it for the next version.\n. Yes, if you fork and and compile yourself. The easiest would be to change the default to true, meaning it should ignore namespaces\nSearch for bool ignoreNamespaces { get\nhttps://github.com/sschmid/Entitas-CSharp/search?utf8=\u2713&q=%22bool+ignoreNamespaces+%7B+get%22&type=\nand check against false instead of true. I will make this more centralised and less duplicate code\n. @VladislavKostin Great, thanks. Yes the wiki is a git repo, too\n. Will close and gather docs / wiki related things here\n333 . Hey, I'm not aware of any changes from 0.36.0 to 0.40.0. It should behave the same.\nMaybe two notes, one on flag components and one on AnyOf as a trigger:\n1. Flag Components:\nSetting a flag component multiple times to a value, e.g.\ncsharp\nentity.isMovable = true;\nentity.isMovable = true;\nentity.isMovable = true;\nwon't trigger if the entity was already movable. See Match-One - GameMovableComponent\nOnly changes will trigger. Not changing the value by setting it to what it already is is not considered a change.\n2. AnyOf as a trigger in ReactiveSystem\ntl;dr; don't use it, use this:\ninstead of\n```csharp\n// DON'T DO THIS\nprotected override Collector GetTrigger(IContext context) {\n    return context.CreateCollector(GameMatcher.AnyOf(GameMatcher.Asset, GameMatcher.Destroyed));\n}\n```\ndo this\ncsharp\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n    return new Collector<GameEntity>(\n        new [] {\n            context.GetGroup(GameMatcher.Asset),\n            context.GetGroup(GameMatcher.Destroyed)\n        },\n        new [] {\n            GroupEvent.Removed,\n            GroupEvent.Added\n        }\n    );\n}\nWe often call this a multi reactive system, because it reacts to multiple things, e.g. when Asset gets removed OR Destroyed has been added.\nI'm pretty sure, that is what you want to achieve when you use AnyOf. The thing with AnyOf is, that's it might be confusing. It works correctly, but most likely not as you expect.\nExample:\nTrigger AnyOf(A, B)\nWhat you expect:\n\nA gets added - will trigger\nB gets added - will trigger\n\nWhat actually happens\n\nA gets added - will trigger\nB gets added - won't trigger\n\nWhy? Because the entity is already in the group AnyOf(A, B) so adding B won't affect group belonging and therefore won't trigger.\nSummary:\nBe alarmed when using AnyOf as a trigger and consider using the multi reactive approach which will work as expected + gives you additional control about the group event (added / removed)\nI hope that helps. @zehreken Added this feature in 0.41.1. Unfortunately I'm not calling the method to actually ignore the namespaces. Will fix this in the next release.\nIn the meantime checkout this comment for a workaround \nhttps://github.com/sschmid/Entitas-CSharp/issues/376#issuecomment-293275956\n. Here's why the code generator includes namespace now\n #323 . Agree, basic types should be supported, definitely. \nAbout Blueprints - don't use them, and don't plan to use them anytime soon until there are json blueprints :D I suggest having a custom solution for configuration or if you really like blueprints and want to use them, it's really easy to add JSON blueprints which should be way easier to handle and migrate than the current binary blueprints. The main reason I haven't pushed them yet is because I didn't want to depend on a 3rd party lib. But you can totally do that. The json lib must be able to serialize object type.\nSee also #267 . :D see https://github.com/sschmid/Entitas-CSharp/issues/267#issuecomment-292813369. About serializing GameObject:\nMaybe you know the Entitas-Shmup example project (ignore the fact that it's on an old Entitas version) There you can see I have an AssetComponent with a string of the asset name.\nI like to treat blueprints as configuration - data you pull in from a source, e.g. a server which stores the game configuration. It should only contain simple data such as strings, ints etc. For that reason I think serializing GameObjects is not a good idea. I prefer to save to name of the resource.. Will close. Binary Blueprints currently don't have a high prio unfortunately. See #267. Can you post your Entitas.properties file, it's in the root folder of your project.\nOk, I checked, seems weird:\nBased on your exception type.FullName is null\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas.Utils/Entitas.Utils/Utils/Extensions/TypeSerializationExtension.cs#L17\nwhich I never saw before. Seems like it couldn't reflect the type correctly. Also seems like you're using a generic type for a component, is that correct? If so, that's not supported\n. So my suggestion, check if you have generic components and remove them. :D Great to hear! Anything on the wiki is up for grabs :D\n333\nHope everything works fine for you now! If you have further questions feel free to ask anytime.. Hi, can you check your Entitas.properties and remove Entitas.Blueprints.CodeGeneration.Plugins\nAre you using Unity?. That's weird. Have you generate at least once? Is there at least one context?. Just to make sure I understand:\nYou deleted Entitas.Blueprints.CodeGeneration.Plugins\nEntitas.properties doesn't contain the plugin Entitas.Blueprints.CodeGeneration.Plugins\nafter Unity is done compiling it throws that error?. Ok :D Since you're not using Blueprints anyway, you can just delete all Entitas.Blueprints.* dlls. That should fix it. Awesome! I leave this issue open so I can take a look at this later!\nHappy coding :D. Will close and check at some point. Binary Blueprints currently don't have a high prio unfortunately. See #267 . Yes, in performance critical areas that makes sense. Our indices used for pathfinding are also based on arrays. We implemented our custom array IEntityIndex and added a few custom EntityIndexAttributes to generate.\nI currently can't squeeze in this feature though and would recommend implementing a custom solution.\nAs a start you can implement IEntityIndex and use the CustomEntityIndex attribute for generation.. Will close, implement IEntityIndex and use [CustomEntityIndex] for custom entity indices.. @IsaiahKelly This might be fixed in the Future. Microsoft just release a new mono version last week where they actually made the switch from xbuild (mono) to msbuild (which also runs on windows). Currently I cannot update to msbuild, but I might in the future.\nIn general, you have to make sure that the paths in Scripts/consts are setup to work properly on windows. E.g. /c/GitHub/Entitas/Scripts/ doesn't look like a valid path to me\nshould more look like c:\\GitHub\\...\n(I might be wrong though, it's been a while I worked on windows). @T2RKUS on windows? do you have mono installed? (xbuild)\n. Btw, just committed \"Using msbuild instead of xbuild\"\n6df2aa55b2e1a5d2517b4fd4c86e75c4d551d7b4. sorry, have to revert since travis ci doesn't use mono 5.0 yet. Will close. Duplicate, please refer to #385. I keep the Blueprint sources and will only exclude Blueprints from the zip files. So if you really want to use it / improve it / play with it / you can by forking Entitas. I assume you created a new class and implemented ICodeGenerator and saved the file in an Editor folder. This means your code generator is part of Assembly-CSharp-Editor.dll.\nMake sure you specify this dll in the Entitas.properties file under the key Entitas.CodeGeneration.CodeGenerator.Plugins. Since this dll depends on other dlls like UnityEditor.dll etc, make sure the Entitas.CodeGeneration.CodeGenerator.SearchPaths contain the folder where your Unity dlls are located (example: Match-One - Entitas.properties)\nNow the code generator will find your custom ICodeGenerator and will display in the drop down.\nHope that helps. Yep, on step at a time :D. Any suggestions how to tackle this? An additional user.properties?. @boris-741 \nThe only thing you have to do besides fixing the code in systems (what you already did) is fixing the generated GameViewComponent (assuming your context is called game). The AddView and ReplaceView methods have to be updated to accept Transform instead of GameObject. No need to move files out of the project or sth like that. Deleting the generated folder will never help as the code generator cannot pick up any changes if there are compile errors.\n@FNGgames is right, with the new roslyn code generator, it will be way better, since all you have to do is generate again and you should be fine.\nAlso see the wiki about fixing compile errors\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator#fixing-compilation-errors. @FNGgames I think your suggested workflow only works if components don't have any dependencies on you game code. As soon as a component uses a custom type in a field, it is getting more complicated. I think updating the generated code might be simpler. The new code generator is available. This will hopefully solve all your issues.\nEntitas on the Asset Store. Is ProjectName.Runtime.dll also compiled by Unity or only ProjectName.Runtime.Unity.dll?\nThe Feature call only depends on VisualDebugging when you run it in the Unity Editor. When releasing or using c# only, the VisualDebugging part is stripped out, you don't depend on Entitas.VisualDebugging.Unity\n. So using Feature in the c# project will be fine and won't have a dependency to Entitas.VisualDebugging.Unity, since UNITY_EDITOR is not declared. You can definitely write one :) It's super easy now ;). Hi, you closed already, so I assume you found the 2nd text field named Contexts. It's a comma separated list of context names.. Ok cool, do you want to submit a PR? This would help me a lot. Exactly. Returning IEnumerables might keep us flexible which data structures we use and if we want to do caching or not. Returning IEnumerable prevents (not 100%) you from modifying the collection too and encourage to use copies with collection.ToArray() when you actually need to change things. I did a performance test.\nSame code - only return type changed from int[] to IEnumerable\n```csharp\nvoid Update() {\n    foreach(var i in _ints) {\n    }\n}\n// test 1 return int[]\n// test 2 return IEnumerable\nIEnumerable getInts() {\n    const int n = 1000000;\n    var ints = new int[n];\n    for(int i = 0; i < n; i++) {\n        ints[i] = i;\n    }\nreturn ints;\n\n}\n```\n\nArray - 9ms\nIEnumerable - 62ms. I like to return copies of the internal data structures to prevent external modification. Most of the time the only thing is only iterating over those copies, so it would be safe to return the actual internal data structure as IEnumerable and skip the additional allocation. If you want to modify, you\u2019d have to call .ToList() (or others) yourself. But I guess I keep my current design which also allows me to cache and reuse collections. From an api perspective, IEnumerable would be better and safer in case the internal structure changes. But after seeing the performance benefits, I won\u2019t change the api to use IEnumerable.. Will close and cry \ud83d\ude2d . Hey! Simply create systems that you execute OnFixedUpdate()\nMatch-One - GameController calls execute OnUpdate(). You own the systems, you can call them whenever is best for you.\nI can also imagine having 2 sets of systems, one executed on Update, the other on fixed update.\nHope that helps. @FNGgames you're just too fast ;). Hi, I think we cannot change this, because this will skip reporting component removal when destroying entities.\nI think adding a check like entity.hasXyz to the filter should help.\nCan you tell me more about the system / use case?. Ok, I see your Filter() is empty. Usually this is the place to do some checks, but I see why you return true.\nQuestion:\nAt the moment you will replace the outline on any entity which had a change in ShipRoute. Is it possible to be more specific? E.g. in Filter() entity.hasOutline?\nIf you really want to apply this to any entity, entity.isEnabled seems to be the only way.. The only information you get is how many entities have been changed. I think in your example it's valid to check for isEnabled since this is what this system is actually doing. You execute on removal but exclude destroyed entities.. Hi! I blame it on the EntityLink. But to make sure, please select any of the empty entities in the hierarchy and see the \"Retain\" section of the Entity Inspector. It will tell you who is retaining the entity.\nTo reset Match One, remove and unlink the views first.. Since it is just a simple example, this case has to be implemented first. Currently you have to add DestroyedComponent to properly destroy entities. Calling context.DestroyAllEntities() which is called for you if you call contexts.Reset() won't clean up the views. @karpinsn That's surprising. Was it a custom EntityIndex? Usually entity indices don't contain any destroyed entities.. Why do you have to remove that entity index manually? If an entity gets destroyed the LocationComponent will also get removed and therefore the entity will be removed from the index, right? But I see you're not on the latest version, can you tell me which version you are on, because I changed the context.Reset() behaviour recently, so I can check if you're affected\n. I found the release with the change\nhttps://github.com/sschmid/Entitas-CSharp/releases/tag/0.41.0\n\nRemoved context.DeactivateAndRemoveEntityIndices()\nRemoved context.ClearGroups()\n. ~~Since 0.41.0 context.Reset() won't deactivate the entity indices anymore, which is good. This didn't make sense. So I guess upgrading will solve your issue already~~\n\nUpdate: It never Deactivated entity indices, I was wrong. I just updated my comment, I was wrong.\n. Awesome! Yes ITearDownSystem sounds like the perfect place to do it. Thanks!. ref #307 . @IDNoise I think you wanted sth like this too, right?\ncsharp\nforeach (var e in group) {\n}\nThis will circumvent the caching and will reduce gc alloc. But please be aware that you cannot change the group while iterating since you're actually iterating over the internal entity collection (for better performance and less gc alloc). @rastlin86 Do you mean these 2 methods?\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Group/Group.cs#L153-L159. I also measured 40B.\nAs you already said, any linq methods will not work anymore.\nI'll think about it, good find! \ud83d\udc4d . But I must admin, 0 gc alloc is very tempting :) Will probably go for it. @rastlin86 Thanks for the input. Sounds like a good idea for some scenarios!. @rastlin86 what would you say to use an array buffer instead of a list buffer and use Array.Resize internally (if required)?\npublic void GetEntities(ref TEntity[] buffer) . Nvm, that will produce garbage, too. @rastlin86 Why do you have an if statement and don't use AddRange in both cases?. my current impl:\ncsharp\n        public List<TEntity> GetEntities(List<TEntity> buffer) {\n            buffer.Clear();\n            buffer.AddRange(_entities);\n            return buffer;\n        }. Thanks, was already on my list :) Add this feature now (see commit). Will be in the next release! Will close. Sounds good. A cache per thread makes sense. Do you want to submit a PR?. ref #325. Hey, I wrote an answer here #413.. Update:\nUnity just accepted the submission of Entitas 0.41.2 with the updated price.\nhttps://www.assetstore.unity3d.com/#!/content/87638\nIt's my for asset on the Unity Asset Store and I'd appreciate any kind of feedback. From now on I also update the Asset Store version with every release.\nIf you encounter any kind of problems please don't hesitate to contact me and I will try to help you resolving any issues. You can\n- Create an issue\n- Contact me via the Entitas Chat\nFrom now on these are the two options to get Entitas:\n- Download Entitas-Unity.zip from the release section of the GitHub repository\n- Download Entitas on the Unity Asset Store\nHappy coding and thanks for your support, I really appreciate it!. @IsaiahKelly Thanks a lot for your input, I'm still trying to figure out a good strategy. There are so many options... :) I will definitely keep your points in mind. This method uses internal unity apis to detect compile errors. I assume the latest version might have changed this internal undocumented api. I don't have this Unity version yet, if you want you can run and debug this code:\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Unity.Editor/Entitas.CodeGeneration.Unity.Editor/Editor/UnityCodeGenerator.cs#L60-L72\nIf you can find the issue I'd be happy to accept a PR. Made another change since compiler flags won't work when shipping dlls \ud83e\udd26\u200d\u2642\ufe0f \nhttps://github.com/sschmid/Entitas-CSharp/commit/4c99aadb02c1eb897b9e6ddd66f18557b80a3d29\nEntitas 0.42.3. Duplicate #385 . @cloudjubei we still want this :) I'll setup your roslyn generator, ok? ;). Awesome, thanks!. Hi, sorry for the late reply. Yeah, that's true, my guess is, it's this\nListTypeDrawer\ncsharp\nvar elementType = memberType.GetGenericArguments()[0];\n... but I might also be wrong. The ListTypeDrawer is designed to draw generic lists. I recommend writing a custom ITypeDrawer for custom types if needed. See builtin TypeDrawers for inspiration\n. Hey, oh yes, that's the behaviour of the current code generator. I'll explain:\n\nYou add a component\nUnity will recompile and output Assembly-CSharp.dll which contains all of your code\nIn the Entitas Preferences you most likely set the Assembly path to Assembly-CSharp.dll\nThe code generator will use reflection on this dll and retrieve all the data it needs to generate\n\nNow here's the tricky part: I f there are compile errors Unity cannot recompile a new dll. This means you changed your code but the changes are not in the dll. In fact, it's still the previous dll. This means if you generate, the code generator will retrieve outdated data.\nTo fix this, you have to get rid of all compile errors first. Deleting the generated folder will most likely result in compile errors, so please don't delete this folder.\nI plan to release a new code generator this month which doesn't use reflection but actually parses your code. This way you can have compile errors and you're still able to generate. This will be very helpful!\nHope this helps\nHere are some techniques how to deal with it in the meantime\nSee wiki\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator#fixing-compilation-errors. Wow, good find! Thanks for reading the code so carefully :). Thanks!. Hey, agree. Totally makes sense to skip the namespace for components. Btw, did you know that you can override ToString in components to get custom output like\nEntity_0(*1)(Health(100), Position(1,2,3). Hi, I agree with @T2RKUS\nThis solution would be a mix of 1, 2 and 3.\n- You'd have a command component for each message type, e.g. HandshakeSuccessComponent\n- You'll have the system with the switch which only translates, meaning creating an entity and adding HandshakeSuccessComponent\n- Having a HandshakeSuccessSystem\nI think that will work and scale great because adding new message types is always the same workflow:\n- add new component\n- add new system\n- modify switch statement\nIn the system with the switch you can then see all supported network message at a central place. Hey @JamesMcMahon,\nsorry for removing this, but the good thing is, if you're preferring a different output from the code generator you can easily customize this by adding and using a custom generator.\nAll current generators can be found here:\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/Plugins/CodeGenerators\nYou can create a new class and get inspired (aka copy paste) by existing generators. Put all your custom generators into an Editor folder and you will be able to select them in the Entitas Prefs Window.\nYou could for example change the ComponentEntityGenerator and create a custom one that return the entity.\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/Plugins/CodeGenerators/ComponentEntityGenerator.cs#L20-L43\n```csharp\n    public ${ContextName}Entity Add${ComponentName}(${memberArgs}) {\n        var index = ${Index};\n        var component = CreateComponent<${ComponentType}>(index);\n${memberAssignment}\n        AddComponent(index, component);\n    return this;\n}\n\n```\nHope that helps. Hi!\nv 1.0 definitely hit my mind several times when thinking about the Asset Store release. Personally, I want to have a better wiki, more tutorials and maybe a website coming along with a 1.0 release to minimize confusion and help people getting started better.\nI agree, the API looks pretty stable to me. But going 1.0 won't actually change much about the way I work.\nBut maybe I just suffer from\nhttps://youtu.be/tc2UgG5L7WM?t=693. Hi, sorry for the late reply. So basically you'd like to have multiple different update steps. This kind of reminds me of IExecuteSystem and ICleanupSystem where you actually have one system that contains the code of both phases. So what we would need is adding ILateExecute and IFixedExecute and update the Systems and DebugSystems class. We also would need that for ReactiveSystems and MultiReactiveSystems, but that could be solved simpler with a Execute enum.\nYeah, probably that makes sense. Will add this to my todo\n. @heynemann Oh, how could this happen, I somehow totally wasn't aware of your comments, that should usually not happen. I'm sorry about not answering.\nThere's a CONTRIBUTING.md document with instructions. I need to update this now that I released 0.47.x. \nAfter cloning Entitas, simply open Entitas.sln, it contains all projects and Addons. To test, run the Test project as a cli program or navigate with the terminal to the Entitas root and call ./Scripts/bee tests. This will compile and run the tests.\nAbout the feature request itself: you already can group and nest systems and call them when necessary. So you can group fixed systems, late systems, or others like every-other-frame-systems, basically anything you need. But of course you can still implement sth like suggested yourself. I suggest looking at IExecuteSystem and the other interfaces and how it's done there. See those classes to fully integrate it:\n- Systems\n- DebugSystems\n- DebugSystemsInspector\n- SystemInfo\nAgain, sorry for not answering, I can't explain why I wasn't aware of additional comments in this issue.... What about adding a Name-/Description-/DebugComponent with a name? Overriding ToString in components let's you do things like\n\n```csharp\npublic sealed class DescriptionComponent : IComponent {\npublic string value;\n\npubic override string ToString() {\n    return \"Description(\" + value + \")\";\n}\n\n}\n```\ncsharp\nvar e = context.CreateEntity();\ne.AddDescription(\"Hero\");\ncsharp\nEntity_0(*2)(Description(Hero)). Hey, sorry for the late reply. The entity inspector tries to figure out how to draw unknown types. Most of the times that works, sometimes it doesn't. In those cases you have 2 options:\n1. Implement your own ITypeDrawer\nImplementing your own ITypeDrawer enables you to draw types the way you want. Take a look at the builtin type drawers to get inspired TypeDrawers\nMost of them are pretty simple.\n\nMark the component with [DontDrawComponent]\nThis will tell the entity inspector not to attempt to draw the type.\n\nOption 1 is the better choice most of the time, because you can inspect and changes values while playing. That's a good find!\nThe destructor deactivates the collector as a last resort to avoid leaks if the user didn't clean up.\nIs it possible for you to clean up (deactivate) the collector manually at a controlled point of time from the mainthread instead?. Reminder and Note to myself:\nCan reproduce sth similar in Tests/Unity/VisualDebugging/Assets/Tests/Manual Tests/ReactiveSystem Destructor\nget_gameObject can only be called from the main thread.\nConstructors and field initializers will be executed from the loading thread when loading a scene.\nDon't use this function in the constructor or field initializers, instead move initialization code to the Awake or Start function.\nUnityEngine.Component:get_gameObject()\nEntitas.VisualDebugging.Unity.EntityBehaviour:onEntityReleased(IEntity)\nEntitas.Entity:Release(Object)\nEntitas.Collector`1:ClearCollectedEntities()\nEntitas.Collector`1:Deactivate()\nEntitas.ReactiveSystem`1:Deactivate()\nEntitas.ReactiveSystem`1:Finalize(). Will close, this can only happen in the Unity Editor but never in a release build.. Awesome! Thanks. I linked this issue here\nWiki - Tools and Extensions\nso people can find it better.. Hi, I made the switch to deploy Entitas as dlls as of Entitas 0.41.0\nDeploying Entitas as Dlls instead of source code which has multiple benefits, e.g.\n- Entitas Unity menu appears even if code doesn't compile\n- Enables 3rd party Addons and Plugins\n- Enables command line code generator\nIt's been a while, so I can't recall what is not working with the sources, but I think with some minor changes I should work (I might be wrong, this change is almost half a year ago :))\nIs there a specific reason you want to use the sources?\nIf you want to make changes, I recommend forking and building Entitas locally. This enables you to run the tests too. See CONTRIBUTING.md. I can imagine providing an additional debug version of DLLs along with the release ones . Would that fix it?. Hi, I will try to find another solution as we also have methods like e.RemoveAllComponents() which would still pool those static components.. Fixed by checking the componentPool first. Probably not the best solution but the fastest.\nThere's another open issue that suggests a different approach of dealing with flag components altogether, so fixing this with an easy quickfix should be fine for now. https://github.com/sschmid/Entitas-CSharp/issues/238#issuecomment-302856144. @IDNoise I think you were interested in this fix too. There you go. Take a look at ContextsGenerator\nIt's possible to implement custom generators to change the default behaviour of the code generator.. Hi, thanks for the PR.\nDo you know if the changes you've done would also work in a Unity project? Do we need 2 different generators or can yours replace the old one?. No problem. Writing custom generators is a common thing. If you found a way to create one that fits your needs, that's great. We don't really have to investigate further imo.. This is what you'll get now\n'Game' detected retained entities although all entities got destroyed!\nDid you release all entities? Try calling systems.ClearReactiveSystems()before calling context.DestroyAllEntities() to avoid memory leaks.\nEntity_0(*2)() - SomeObject, SomeOtherObject\nEntity_1(*2)() - SomeObject, SomeOtherObject. Hi @FiveP,\ncorrect, you can add only one component of a type to an entity.\nI see two different solutions to this, but I will only describe one solution in detail as I think it's generally the better solution.\n\nIntermediate entity\nI regularly use this kind of concept where I create a separate entity that holds some kind of information, in your case:\n\n// in a method where a hit gets emitted\ncontext.CreateEntity().AddDamage(amount, attackerEntity.id.value, targetEntity.id.value);\ncsharp\n[Game]\npublic sealed class DamageComponent : IComponent {\n    public int amount;\n    public int attackerId;\n    public int targetId;\n}\nCreate a new entity for the damage information and add DamageComponent. A ProcessDamageSystem with a trigger GameMatcher.Damage can now easily iterate over all Damage entities and execute some logic. This also allows you to do some additional sanity check if needed, e.g. a certain target got 100 damages from 10 attackers but the game design rules limit a maximum damage to 10 hits for bullets plus an additional 10 damage for fire or sth like that.\nIf needed you can also use an entity index to perform fast queries like\ncsharp\ncontext.GetEntitiesWithDamage(e.id.value);\ncsharp\n    [EntityIndex]\n    public int targetId;\nIn this example it probably doesn't make much sense, but I remember having a few cases where an entity index made working with intermediate very convenient and simple.\nTo give you another example where this concept makes sense:\nYou shoot at a wall which should spawn some kind of damage texture, sth like this:\n\nApplying this same concept where each shot results in a new entity with information about the position on the wall let's you easily do optimization in a ProcessShotSystem, e.g. there are 10 shots at almost the same position, so instead of loading and spawning 10 textures at the same position probably resulting in weired z order issues you can only instantiate 2 or 3 and place them in a nice pattern.\nEntities and components are all object pooled for you by Entitas, so creating lots and lots of those intermediate entities per frame should not be a problem!\n\nList of Damage struct\nThe DamageComponent could have a List where the Damage might be a class or struct with all required information. I recommend not doing this because you cannot react to changes as easily.\n. Currently wrapping up everything needed for the new release with the new code generator. Waiting for the last feedback tomorrow. Finding good mic recording levels for Tutorial Videos in the meantime ;) Looking good so far. Next release ETA this October. Currently testing in Unity 2017.2, all seems to work fantastic :) . I can literally feel 1.0 in the air... :). \n\nDoes this image answer your question? :). Sorry for the late reply, I though I replied weeks ago already :)\nI had this in one of my projects\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Entitas;\nusing Entitas.CodeGeneration;\nusing Entitas.CodeGeneration.Plugins;\nusing Entitas.Utils;\npublic class ComponentEntityTryRemoveGenerator : ICodeGenerator, IConfigurable {\npublic string name { get { return \"Component (TryRemove)\"; } }\npublic int priority { get { return 0; } }\npublic bool isEnabledByDefault { get { return true; } }\npublic bool runInDryMode { get { return true; } }\n\npublic Dictionary<string, string> defaultProperties { get { return _ignoreNamespacesConfig.defaultProperties; } }\n\nreadonly IgnoreNamespacesConfig _ignoreNamespacesConfig = new IgnoreNamespacesConfig();\n\nconst string STANDARD_COMPONENT_TEMPLATE =\n\n@\"public partial class ${ContextName}Entity {\npublic bool TryRemove${ComponentName}() {\n    if (has${ComponentName}) {\n        Remove${ComponentName}();\n        return true;\n    }\n\n    return false;\n}\n\n}\n\";\npublic void Configure(Properties properties) {\n    _ignoreNamespacesConfig.Configure(properties);\n}\n\npublic CodeGenFile[] Generate(CodeGeneratorData[] data) {\n    return data\n        .OfType<ComponentData>()\n        .Where(d => d.ShouldGenerateMethods())\n        .Where(d => d.GetMemberData().Length != 0)\n        .SelectMany(d => generateExtensions(d))\n        .ToArray();\n}\n\nCodeGenFile[] generateExtensions(ComponentData data) {\n    return data.GetContextNames()\n               .Select(contextName => generateExtension(contextName, data))\n               .ToArray();\n}\n\nCodeGenFile generateExtension(string contextName, ComponentData data) {\n    var componentName = data.GetFullTypeName().ToComponentName(_ignoreNamespacesConfig.ignoreNamespaces);\n\n    var fileContent = STANDARD_COMPONENT_TEMPLATE\n        .Replace(\"${ContextName}\", contextName)\n        .Replace(\"${ComponentName}\", componentName);\n\n    return new CodeGenFile(\n        contextName + Path.DirectorySeparatorChar +\n        \"Components\" + Path.DirectorySeparatorChar +\n        contextName + componentName.AddComponentSuffix() + \".cs\",\n        fileContent,\n        GetType().FullName\n    );\n}\n\n}\n```\nThis is a good example how you can customize Entitas with custom code generators ;)\nIt generates this\n```csharp\npublic partial class GameEntity {\npublic bool TryRemovePosition() {\n    if (hasPosition) {\n        RemovePosition();\n        return true;\n    }\n\n    return false;\n}\n\n}\n```. Hi, sorry joining late to this conversation :)\nNot sure if I'm missing sth, but I can't see an advantage having priorities over a simple list of systems like:\ncsharp\nsystems.Add(systemA); // prio 1\nsystems.Add(systemB); // prio 2\nThere's no functionality added, right? I only see 2 downsides:\n1. Systems can be specified with the same prio. that should not be possible as the order of systems is one of the most important things usually\n2. Systems itself shouldn't be aware of any order or the application they are running in. Imagine sharing a MoveSystem that contains information about the execution order and use it in an other game, doesn't make sense, right? Adding an index to the systems hides the execution order from the outside and might feel like magic, which should always be avoided imo. Systems should be managed and ordered by a supervisor, the Systems class, e.g. in the GameController.. I wouldn't recommend it, but if you want to use priorities anyway, you could add a custom interface for the priority and implement it in systems and use it to sort and populate the systems class.. > my primary concern is the order of execution for systems is implicitly determined by the order they are added to the supervisor\nTrue, but I'd say it's explicitly determined :)\nIf a solution like the sorted dict makes sense for you, you can definitely do that.\n\nThis means that if I have a lot of systems--which any non-trivial simulation will have dozens or more--\n\nVery true! My previous project had ~700 systems (including parent systems).\nI heavily use parent / child systems which helps a lot to manage these many systems. I imagine using explicit priorities alone would be very difficult to do, especially since developing a game is a dynamic process where you add and remove systems frequently. Adding a system should result in re-applying and re-thinking priorities of existing systems.. E.g. Match One - ViewSystems\nJust a container with subsystems. I use them to group and manage systems. Hi, you can easily create and manage your own instances of contexts like GameContext or InputContexts and the Contextsclass itself (e.g. new Contexts();). The singleton you are talking about is a result of the ContextsGenerator which generates the Contexts class for convenience. You don't have to use this class or this generator at all. If you have other requirements you can create as many Context or Contexts as you need. Generally, everything in Entitas is very flexible and you can use it the way you need it. What you see in Demo projects are suggestions that I've used over the last few years that proved to be flexible, testable and scalable.\nEntitas is not thread safe out of the box, so caution is advised when using the same context across multiple threads.\nIt's perfectly fine to have multiple contexts for each photon room I think.. Hi!\nYes this can easily be fixed with a minor change in the code:\ncontext.DestroyEntity(e) is obsolete since 0.42.0 in favour of entity.Destroy() (see code here)\nSimply inline the method DestroyEntity L:168 in onDestroyEntity L:367 and remove the obsolete method DestroyEntity. context.DestroyEntity(e) will remain in the next couple of releases for backwards compatibility. Hi, 2 thoughts, one on deep copy and one on an alternative solution for your problem:\n\n\nDeep Copy\nA generic solution for deep copying is probably not a good idea. Deep cloning a component with complex objects is probably way more complicated and more overhead compared to simply construct new objects manually. Deep copying can make sense if you know what objects you are dealing with, but I wouldn't strive for a general solution. Objects might have references to other objects that have to be cloned that have references to objects that have to be cloned that have other ref..... and so on, which leads me to:\n\n\nConfiguration / Entity Factory\nIf I understand correctly you basically trying to create some template / blueprint entities that you will clone at runtime. If you break it down, this is basically configuration. I worked on many games with lots of external configuration. Configs are simple first and can grow in complexity. Chances are that game designers and level designer will take over the responsibility to maintain configurations. I recommend having tools for working with configs like google sheets, custom Unity inspectors or sth like that which output a versioned config in structure independent from your game architecture, e.g. Text formats like JSON or binary formats like Flax Buffers / protobuf or similar.\n\n\nWe created a class, e.g. CharacterSetupService, BuildingSetupService that know how to construct entities based on the configuration, e.g.\n```csharp\npublic virtual GameEntity CreateCharacter(Contexts contexts, string id, string type, Gender gender, int positionX, int positionY, string state) {\n    var e = contexts.core.CreateEntity();\n// Add components every character needs\nSetupEntitySpecificComponents(e, id, type, gender, positionX, positionY, state);\n\n// Add components based on config\nAddComponentsFromConfig(contexts, e);\nreturn e;\n\n}\n```\ncsharp\nvar character = characterSetupService.CreateCharacter(contexts, id, type, gender, 0, 0, CharacterState.Idle);\nThis approach also allows you to simply write unit tests because you can mock the CharacterSetupService and have config independent tests. I see too many cases where deep copying doesn't make sense and therefore can't be included in Entitas as a general solution. If you have specific cases where you need it, you have to implement it yourself, which I think would be the better way anyway as you have oversight on what objects you actually plan to deep copy.. Hi! Can you click on the empty entity (will have a red e symbol) in the Unity hierarchy to see which objects are retaining this entity? This will give you a clue what went wrong\n. Will look sth like this\n\n\n. ref #448. Ah, I see, because you have a collector with AddedOrRemoved, it will collect an entity when a certain component got removed, which happens when destroying all entities. Call systems.DeactivateReactiveSystems() before you destroy all entities to avoid this as this will deactivate collecting entities until you call systems.ActivateReactiveSystems(), see Systems.cs. Entitas itself does no threading, so unless you're not calling systems.Execute() on another thread, reactive systems are executed on the main thread.\nI'm interested in the very first error that occurs (the others are probably follow up exceptions that will go away if the first one is fixed).\nUnrelated side note:\n1. ToArray()\nforeach (var entity in entities.ToArray())\nYou don't have to do that. The entities list will not be modified during the score of the Execute method\n\nentity.isEnabled in Filter()\nI see you're using a the suggested pattern of a DestroyedComponend and a DestroySystem which is great! So I guess entity.Destroy() is called only in that system, so you don't have to check in the Filter entity.isEnabled. Hi, thanks for the PR.\nI think systems should not be dependent on other systems. Some systems might only make sense when working in combination with others, this is usually when you group them in a systems parent to make the order visible. A system shouldn't be able to see beyond its scope other than observing and working on the context and its entities.\n\nIs there sth I'm missing? If yes, could you explain what. Hi, having a separate entity for bonuses etc and binding them to the owner entity with id makes sense. When your processing your owner entity you can do context.GetBonusesForEntity(e.id.value) or sth like this.. Agree. You will see this now\n\n. Hey, good find. Just added support for multiple indexed members per component!. Reopen, needs some more adjustments.... Updated generator, multiple entity indices are now supported! \ud83d\udc4d. Hi, Unity has been changing this back and forth. It has been Assembly-CSharp.csproj for most of the time. I had a built where it was MyProjectName.csproj.\nSolution:\nEither deactivate the Update .csproj post processor (which is mainly useful when using the Code Generator CLI)\n\nor update your path to MyProjectName.csproj as @FNGgames already mentioned correctly. Hi, I saw you're using AnyOf in the trigger. Usually I'm alarmed when seeing this, because mots of the time you want to use a MultiReactiveSystem, because you want to react when either .ContainerLocation or FocusedContainer changed.\nTry this:\ncsharp\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n    return new Collector<GameEntity>(\n        new [] {\n            context.GetGroup(GameMatcher.ContainerLocation),\n            context.GetGroup(GameMatcher.FocusedContainer)\n        },\n        new [] {\n            GroupEvent.Added,\n            GroupEvent.Added\n        }\n    );\n}. I checked your code now and I don't see anything suspicious.\nThe error can only appear if:\n1.\nyou're executing the system again while the first execute hasn't finished yet, e.g. as a result of focusedContainer.containerViewListener.listener.ContainerViewChanged you call system.Execute() again (I hope you don't :))\n2.\nsomething fails quietly and the execute didn't properly finish, which prevents the system to properly release the entities\n. If none of these 2 descriptions apply to your code, I'd be interested in a small test case to reproduce.. Is this still relevant, otherwise feel free to close. Hm, never heard that before. There's no caching going on, the code generator always inspects the dll and generates. . oh, that might explain a lot :) I improved a lot in the last few releases. 0.35.0 comes with sources instead of dll, so you might be able to debug a little but. I never saw sth like that before and I cannot recall lot of the details of the previous generation of the code generator.\nI wrote down a note for my Video Tutorials :) Entitas Shmup is 0.35.0 too. Maybe I should to a \"how to upgrade from 0.35.0\" Video.. Throwing an error immediately when EntityLink is destroyed but still linked. As every game is different, sometimes you want the the VisualDebugging Systems Object to be destroyed when changing scenes, sometimes not. I recommend using DontDestroyOnLoad as you suggested if your systems instance needs to stay alive.. This is a part of making the CodeGenerator CLI experience as smooth as possible. Saving preferences should not result in losing comments. Well, changed my mind :) Will close. 2017.2. I will be available on the weekend again and try to reproduce and help out.. @jwvanderbeck I'd be happy to learn more about your suggestion. If you want to create a PR that might help a lot. Hi, thanks for already trying the roslyn beta and thanks for your feedback. Here are my answers to your questions:\n\nHaving to hand edit the entitas.proprties file is really not fun. Why can't this be in the GUI preferences?\n\nMost of the keys from the Entitas.properties are exposed in the Unity Entitas Preferences. I didn't add the searchPaths yet as they will most likely be based on User.properties because each user's path might be different. Editing those keys would override potential placeholdes like user.unity. I think it's safer to set the searchPath manually for now once you set up the initial project.\nMy suggestion:\n- Change the default searchPaths to also include the CodeGenerator folder and the roslyn plugin by default\n- Find a way for default values on windows (currently only mac paths)\n\nAlso a bit disappointed on it not just working out of the box.\n\nAtm Roslyn is opt-in because you cannot simply run it within Unity for technical reasons like it requiring .NET 4.6.1. This is why I have to deploy it in a zip because having the assemblies in the Unity Assets folder would cause problems. But I will repeatedly check if it's possible as Unity might upgrade to newer .NET versions.\nI know that the current workflow was to always go back to Unity and hit generate, but personally and what I've seen from other teams using it, you will probably change this workflow anyway, because it's just way faster to generate either out of the IDE or the terminal. If you think about, when you change code, why would you want to switch to Unity to press some buttons in the first place. Again, I know this has been the workflow and we kind of learned it this way, but actually I see it as an improvement to skip this step of switching to Unity. But of course anyone might have a different taste of doing things, so I'm sure someone will share a solution like a new generate menu item that invokes the entitas gen command from within Unity. Personally, I recommend trying to use the CLI for a while, because I'm convinced you gonna love for its speed and improved productivity.\n\nthe code for AssemblyResolver I noticed the path handling is rather messy. \n\nGreat that you checked the code! If you have suggestions how to implement this in a better way I'd be happy to accept PRs.\n\nI see no apparent reason for making three additional steps of creating a Libraries folder\n\nTotally! This was just my step by step guide recommendation. You can put the Entitas folder where ever it makes the most sense for you. No Library folder is required. I think you don't even need that path in the searchPaths, I just added it in case people have their own custom code generator plugins, so they can be detected.\n\nWhen using doctor and gen commands it gave me a whole lot of - Could not resolve: Microsoft.CodeAnalysis.Features.dll warnings\n\nYup, currently the are some Microsoft.[...] dll warnings. Let's see what I can do about them. Lazy answer:\nIf the doctor says it's all good, just don't mind them ;)\n\nas well as about \"unused keys\" and it bothers me a bit.\n\nI think you're talking about the VisualDebugging keys. Yes, the doctor doesn't know about them, because they are keys from VisualDebugging and have nothing to with Code Generation itself. This will happen with all custom keys that are to required for code generation. The doctor will give you a hint, you can decide. But I agree, it might be confusing.\nSuggestion: Add an option to ignore certain warnings like, unused keys and dlls that cannot be resolved. This will fix both of your issues.\nI just followed my own instructions on windows. Short story: I got it work by following all the steps, but not quite sure if it's a windows thing, but unzipping the CodeGenerator.zip resulted in a CodeGenerator folder + a _MACOSX folder which is definitely not the content of the zip! How does Windows add imaginary files to the zip? Anyway, make sure to extract the CodeGenertor folder to the root of your project, ignore the _MACOSX folder. As far as I'm concerned I'd say this folder doesn't exist anyway ;)\n\nThanks again for testing. I wanted to release this feature to you as soon as possible to get feedback as soon as possible and because I think it's awesome and will increase your productivity. It's not perfect yet, the initial experience can be improved, I'm working on it! Getting roslyn to work in the first place was a huge task for me. There where so many challenges but I'm happy that we can finally use it. . > Running Generate from inside of Unity freezes the Editor\nRoslyn + executing it within Unity = ;(\nSuggestion:\nI will add the possibility to \n$ entitas gen MyOtherEntitas.properties\nUnity will continue to use the default properties but in the CLI you can choose a different file with roslyn enabled. This is useful if you wrote your own plugins that actually require Unity APIs and have to be executed with our old friend the green Generate button but you also want to use roslyn in the terminal. A few updates:\n\ngot rid of all warnings like Could not resolve: Microsoft.CodeAnalysis.Features.dll etc\n\n\n\ndowngraded roslyn projects to .NET 4.6 and updated all packages to the latest version\nadded support for multiple properties files, e.g the default Entitas.properties for Unity and an optional My.properties where you can test roslyn, $ entitas gen My.properties. Generating with CLI could use roslyn, generating from Unity could still use the previous code generator version\neven with .NET 4.6 you cannot natively run it from within Unity, seems to be a know issue\nhttps://issuetracker.unity3d.com/issues/unity-fails-to-load-net-4-dot-6-assemblies-with-typeloadexception\nadded a Edit Button to the Entitas Preferences in Unity to open Entitas.properties with one click in case you have to update the searchPaths\n\n\nI will submit this version tomorrow and will keep working on it to make it a better experience!. @WoLfulus thanks for sharing the snippet. I updated it to work on Windows and Mac, works great! I integrated it into Entitas. We can now trigger the CLI code generator from within Unity. \nUnityCodeGenerator.cs\n\nFor this to work, I added 2 new keys to Entitas.properties\nEntitas.CodeGeneration.CodeGenerator.Mono = /Applications/Unity/Unity.app/Contents/MonoBleedingEdge/bin/mono\nEntitas.CodeGeneration.CodeGenerator.CLI = CodeGenerator/entitas.exe. Entitas 0.43.0 available to address most of the initial feedback! Asset Store version should be available in 2-4 days\n. I've added Roslyn.properties to Match One. You can download the latest Match One version from develop and drop your Entitas.Roslyn Plugin from the Unity Asset Store into CodeGenerator/Plugins of the Match One project.\nentitas gen Roslyn.properties -a. I added a better solution for everyone who prefers a Unity menu item or shortcut to activate the external code generator. We have multiple different ways of generating code now, I hope there's a way that fits everyones favorite workflow\nSummary:\n\n\nUsing the normal code generator works in Unity as always, just press the green generate button or use the shortcut. Edit the preferences visually in the Entitas Preferences Window (so nothing new)\n\n\nIf you use plugins that are not supported by Unity and cannot be recognized by Unity (e.g. the Roslyn Plugin) you have to run the Code Generator externally as previously explained in the terminal with entitas gen\n\n\nIf you prefer to use a menu item or shortcut in Unity instead of the terminal you can now do that. There is a new shortcut that connects to the external code generator and makes it generate. In order to this to work the only thing you have to do is start the code generator once in the beginning of the day with entitas server. I will probably include an executable for mac and windows, so no terminal is required to start the server. Only double clicking :). Yeah, that would be very convenient. Is EditorApplication.delayCall guaranteed to be only called once in the beginning? Or also after changing play mode?. Can you try right clicking on the Entitas folder and reimport? . Did it help?. Sometimes Unity seems to lose the labels. The images are labeled. Reimporting always helped when I had this problem. Feel free to reopen if you still have this issue. Ok I see, that's not expected. Data providers create the model which is then used by the generators to actually generate the files. In your case the roslyn data provider seems to produce an incorrect model. This is strange, I cannot explain this. Is it possible for you to zip the project and send it to me so I can see what's going on?. Ok, I did 2 things and now it works for me.\n\nChanged your Entitas.properties and changed the path separator from \\ to /\nDeleted the Generated folder and generated again. I think that's fixed, will close. Feel ree to re-open if you still have issues. I'd recommend using the Unity profiler. Creating lots of entities is not a problem, I could imagine that VisualDebugging drops the framerate. Try turning VisualDebugging off in the Entitas Preferences and check again. VisualDebugging will only run in the Unity Editor. Whenever you make a release build all this related code is stripped out and the overhead is removed.. Do you have any interesting profiling results?. EntityBehaviour and ContextObserverBehaviour are both part of the VisualDebugging, which is basically the Unity Integration. These things only run in the Unity Editor and never on release builds. To get more accurate profiling results I always recommend to temporarily turn off VisualDebugging.. But you could try turning on deep profiling and VisualDebugging on, maybe we can identify some parts that we can improve within Entitas. But as long it is playable, we shouldn't bother ;). Yes, you are right. I just added a unit test to see how roslyn displays types. In this case roslyns way of doing that is not able to compile\n\ndescribe ComponentDataProvider. when providing. special types. supports 3d array [,,].\nExpected string length 7 but was 10. Strings differ at index 4.,\nExpected: \"int[,,]\",\nBut was: \"int[*,*,*]\",\nWill add custom fixes for those \"special\" types. I added my own ISymbol.ToCompilableString() which catches those cases. Will be in the next release!. Yes, you're right, thanks! The arguments were cut off and only the 1st arg was send as a command. Here's the fix https://github.com/sschmid/Entitas-CSharp/commit/24cc1db504685aa7cd6370a524c0cc23b02bec40\nwill be in the next release. I think it's a good time to also stress that not only Unity's ECS has been built with performance in mind, performance is also one of Entitas key pillars. I've basically built what Unity is building now a year ago, I might have shared some info here and there about it when I talked about my other ECS with components as structs and entity is an int. I critically compared Entitas to my other ECS which has the same performance as the Unity ECS and Entitas kept up so great that I decided not to further pursue a second ECS. Plus, Entitas has Reactive Systems and a lot of other goodies that make ECS even more fun to use and the generate API is hard to beat. Unity is probably ahead with multithreading.. Hi, take a look at the EntitasUpgradeGuide.md.\n\nUse MigrationAssistant.exe 0.45.0 path/to/project \nupdate the searchPath that points to the default plugins to from\n\nCodeGenerator/Plugins/Default\n to\nCodeGenerator/Plugins/Entitas. Oh, I see, starting with a new project from scratch won't give you an option to select code generators. Will do a patch release. I removed some default values for the code generator in this release, this is causing the issue. I will find another way to set them. In the meantime check Entitas.properties that the plugins are set so Unity can display them in the Preferences Window\nsth like this (taken from Match One)\n```\nCodeGenerator.SearchPaths = CodeGenerator/Plugins/Entitas, \\\n                            Assets/Libraries/Entitas, \\\n                            Assets/Libraries/Entitas/Editor, \\\n                            ${user.unity}/Managed, \\\n                            ${user.unity}/Managed/UnityEngine, \\\n                            ${user.unity}/Mono/lib/mono/unity, \\\n                            ${user.unity}/UnityExtensions/Unity/GUISystem\nCodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                        Entitas.VisualDebugging.CodeGeneration.Plugins\n. you can also run\n$ entitas auto-import\n```\nto automatically find and set all available plugins interactively.. Next release will come with a convenient Auto Import Button. This will detect plugins, will set all defaults and automatically update Entitas.properties\n\n. Get the fix here\nEntitas 0.45.1. Good find! Changing the priority of the roslyn plugins to run after the context won't help, because it depends on the actual code, meaning it needs to generate first. I will see if I can find a solution. Fixed in 0.47.x. Ok, that's weird. I was able to reproduce only on windows. Fabl.Appenders.AbstractTcpSocket is in use for years already (probably mac only) so I'm surprised. Afaik I have disconnects by remote. I'll have to investigate on windows.\nIf anyone can spot the error I'd be happy to get some feedback.. Ok, I will check all the unit tests and see if I find sth suspicious. I already found a test cleanup function that uses try catch, so probably this is why the test pass. But just a guess atm. I will keep you updated. I'm still surprised on how different things with c# and mono work on different platforms. fabl has been in use for years on macs, iOS and Android devices without any issues. Only issues on Windows... such irony. fabl is my rebranded NLog. It's a flexible and extensible logging system that also comes with Tcp client and server to log from game consoles / mobile devices etc. It just set up an example where 2 fabl instances communicate with each other and it (as expected) works fine on mac / iOS / Android. It seems that the socket implementation differs on windows - it's really weird. ... rewriting from scratch ;). Rewrote the tcp sockets from scratch to work well on windows. Will be in the next release\nhttps://twitter.com/s_schmid/status/936638177699344384\n\n. Fixed in 0.46.0. Ok, I see. So looking at your code generator output I see sth strange:\nThis is correct (marked with green)\nGame/Components/GameFollowComponent.cs\nBut it also creates (marked with red)\nComponents/FollowComponent.cs\nThis usually only happens for objects that aren't IComponent but have an ContextAttribute like [Game]. In this case it will create a component for you. For some reason, it creates a FollowComponent for you, but this class is already an `IComponent.\n\nTry disabling Entitas.CodeGeneration.Plugins.ComponentGenerator\nBut actually, I think the error has to come from the Roslyn component data provider.. Do you have 2 different .csproj files?. Hey! I resolved the sound issues and uploaded an updated version of the video with better sound. Leave a like on the updated Video here\nhttps://www.youtube.com/watch?v=LGKsqSg5FHg. Hey, \ntl;dr;\n\nUse the Unity code generator when working with the default reflection-based generator\nUse the standalone generator in server mode with roslyn\n\nfrom the Video I saw, you're using the code generator in server mode. This mode was introduced to speed up the process when you use the roslyn plugin in. When using the reflection-based code generator the simplest thing is to use the Unity menu button.\nAlso, unfortunately once an assembly is loaded I can't really unload it, that is why server mode in combination with the reflection-based generator won't work.\n. Ok, I need to find out what's causing this. To my current knowledge it's roslyn not being able to resolve types for unknown reasons. Someone send a project to me already, it worked on a Mac, but not on Windows with the exact same error as yours. I don't quite remember how I solved, but I didn't really change anything related to Entitas. It was more like making Unity regenerating the solution again. If you could send me a sample project where I can reproduce it, I will take a look into it. You can also DM me if you want.. If anyone could send me a failing windows project, that would be very helpful. I think @StormRene also had this error once.. Still waiting :)\nBtw, try to use / instead of \\ in all your paths, not sure if that is related, but I just thought of it, because \\ is actually a reserved symbol in the properties syntax for multiline declaration. Strangely enough, I've heard this from almost everyone with initial problems. It kine of resolved itself?!?! That's what I've also seen when someone sent me a project. I opened it and then it worked, sent it back, and it worked :) Yay.\nNever mind warnings like Could not resolve as long as the doctor tells you that everything is ok in the end.. Once the project is loaded by roslyn, there shouldn't be any could not resolve warnings anymore when using entitas client gen. The client/server completely replaced gen -a, it's more flexible and can be easily send from anywhere (e.g. from IDE or Unity). In case you have issues with the client on windows, I'm currently rewriting the tcp sockets (used for communicating between client and server) to make it work on windows. @gabrjt looks like you're using the reflection-based code gen in the terminal. If so, you have to update your searchpaths to point to the Unity dlls\n(taken from Match One - Entitas.properties)\n${user.unity}/Managed, \\\n${user.unity}/Managed/UnityEngine, \\\nor even easier,  just generate in Unity.\nIf you're using roslyn, you will not have this issue, but then keep in mind, you can only generate from the terminal like described in this video:\nhttps://www.youtube.com/watch?v=LGKsqSg5FHg. Oh ok, I will take a look if the Unity preferences is trying to automatically clean up the properties a little bit to motivated ;). Fixed in 0.46.0. Hi, thanks! I merged it in and added Entitas Preferences integration\n\n. CodeGeneratorUtil.CodeGeneratorFromPreferences() is used most of the time and does the heavy lifting for you. Actually, the code generator doesn't really have any hard dependencies to Entitas and I will extract and decouple it completely in one of the following releases. Once that is done, there will also be a public API. In the meantime Entitas.Utils.CodeGeneratorUtil is your friend. Btw, here are all the commands which basically can be considered the public api\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.CodeGenerator.CLI/Commands\n. As part of #508 I can imagine exposing the code gen API where all commands from the cli can be used in code, too. that's weird. I just checked and ran the roslyn tests and namespaces seem to work. Will have to take a closer look soon! But thanks for letting me know.. Is Vector2F part of the same code base or is it in a different project / dll?. That would be great! Thanks. Great to hear, but actually it should also work for v3.5. I will investigate further. I've read from other people that removing\n<TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile>\nfrom the project might help. I don't have this is any of my projects, your project has it. Downloaded your project, opened it in Unity 2017.2.0f3 on windows and after code gen there are no compiler errors, so I guess that means it worked?. Which Unity version are you on? . Hi, your working directory should always be the same as where the Entitas.properties file is located, which is the root of your project by default. So cd into the root of your project first and then execute Entitas.exe like this\n$ CodeGenerator/Entitas.exe\nFor now, also make sure that the path separators (\\) are forward slashes (/). I haven't verified that yet, but other people reported it helped to resolve their issues. I will test this soon, but I can imagine it will cause problems, because \\ is a reserved keyword in the properties syntax for multiline declaration. Hi,\nas far as I can tell, the errors you posted don't contain anything related to Entitas. I created a new Unity project and added Entitas and the Unity Test Tools worked as expected for me. I couldn't reproduce you issue. I wrote a failing test and all seems to work. I don't think your issue is related to Entitas. Feel free to reopen if you still think Entitas causes the issue.. Repost from the chat:\nThat's something that we could report to the roslyn team, because this is out of my hand. I could add a new feature to the code generator: IPreProcessor, so I could implement and DeleteCrazyVSStudioTagsFromProjectPreProcessor. That could fix the issue for us until roslyn will properly parse the project.\nCould some please provide a .csproj file for me, so I can write unit tests to fix this? I don't have VS. great, thanks! I will take a look. Just to clarify: your suggested solution is to remove <TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile> right?. Is the issue described in #521 the one you guys have been experiencing? (fingers crossed :)). Awesome, thanks! That's what I wanted to hear :) I can fix this. Released Entitas 0.46.3\nUse auto import or manually add the new TargetFrameworkProfilePreProcessor.\nThis pre processor will remove <TargetFrameworkProfile >Unity Subset v3.5 < /TargetFrameworkProfile >\" if it exists.\nLet me know if this fixes the issue, then I will (happily) close. Did anyone try Entitas 0.46.3 already? I'm desperately waiting for positive feedback :) I hope this is the fix that we were looking for . @Neikice Did you activate the TargetFrameworkProfilePreProcessor as shown in release notes?\nhttps://github.com/sschmid/Entitas-CSharp/releases. @Neikice \n\nI tried 0.46.3. But it didn\u2019t work .I still had to Manually delete <TargetFrameworkProfile>Unity Subset v3.5 </TargetFrameworkProfile>\"\n\nIf have to ask, did you copy this line right from your project file? It contains a space after v3.5.\nIf that's the case I have to update the TargetFrameworkProfilePreProcessor. Currently it really only removes this (without a space)\n<TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile>. ok great, so did I forget do ship DesperateDevs.CodeGeneration.Plugins.dll in the Entitas.Roslyn plugin?. Don't mind the warning. It won't speed up the process. I already added a few custom dll to reduce the warnings but that's just how roslyn gets shipped by microsoft. Ironically, it's Windows only again :). Hi,\nyes, that's expected. But you can use\ncsharp\nDontGenerate(false)\nto ignore the component completely.\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Attributes/Entitas.CodeGeneration.Attributes/Attributes/DontGenerateAttribute.cs#L10. I like talking about details. In this case I don't really see an issue, but I might be biased since we called it Replace since the beginning 4 years ago :) In my opinion Replace makes still sense as it also explains why entities leave a group and re-entering it (well at least in the mental model) when you change a component. By now we probably are all familiar with Groups and Reactive Systems, but in the beginning I managed to explain the functionality by talking about really replacing immutable components.\n@IsaiahKelly \n\nUnity ECS system uses Set\n\nAfaik, they are actually setting the component. So it makes sense\n@nbreum15 \n\nMicrosofts C# naming conventions\n\nWelcome to Unity gameObject.transform.position.x ;)\nAs a result of #508 I plan to expose the code generation templates, so everyone can make tweaks without adding a custom code generator. That means you can easily change method names (e.g. UpdateX) and change upper or lowercase.\n. @IsaiahKelly \n\nYes, they are setting the component to a different value... by replacing it with a new one\n\nThey are actually setting it ;) They're putting the struct data directly in the array, so to be specific, they're overwriting the old data. I've basically built what Unity is building now a year ago, I might have shared some info here and there about it when I talked about my other ECS with components as structs and entity is an int.\nDifferent topic (because I read and here a lot about it recently), but maybe it's a good time to also stress that not only Unity's ECS has been built with performance as a key concern, performance is also one of Entitas key pillars. I also critically compared to my other ECS which has the same performance as the Unity one and Entitas kept up so great that I decided not to further pursue a second ECS.. Stopped my plans to expose the code generation templates to focus on other things. I hope it's also ok that I won't change the current replace api. But thanks for the discussion. Hi, I'm glad you like it!\nConcerning your issue: it looks like a duplicate to #489.\nI will close this one.. #sneakpeek\nhttps://twitter.com/entitas_csharp/status/937418972512866305\n\n. Wow, that was a lot of work, but I think it was worth it!\nLess is more! Sometimes you have to work hard to reduce the complexity.\n\n. Hi, that is definitely not implemented like this, but sound like a good idea :)\nAre you sure you didn't accidentally hit the donate button in the top right of the window?\nGenerate Button only ever generates. There's no hidden functionality to make people donate. While donations are appreciated, there are no cheesy tricks implemented from my side to end up on this website.. That is impossible, you can check the code. No hotkeys, no hidden functionality...\nThis is the one and only code path that calls donate\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.Unity.Editor/Entitas.Unity.Editor/Editor/GUI/PreferencesWindow.cs#L74. Still sounds like a good idea though ;). But on the other side I'm a little bit confused now how this can happen. Of course I use the same release as everyone else, for years, it never happened to me or any other collegue, and judging from the code, that is impossible. . Calling out Unity on this one, and on top of that I make a guess and say you're both on windows ;). :) yes, an easter egg for people who actually read the code - congrats. Go ahead and try the command, it will blow your mind :). \u2728\u2728\u2728. Windows - where the magic happens :)\nOk, I'll close. I showed you the code. It's open source, I couldn't hide sneaky tricks like that even if I wanted to :) You can verify yourself in the link I posted that it is impossible other than Unity on Windows has issues with custom menu items.. ... buuut still sounds like a good idea to do so :) haha. Re-opening, because more people saw this happen. I redirect you to Unity Support\nhttps://support.unity3d.com/\nwhere you can file a bug.\nAs far as I can judge, it's either a Unity bug or a Windows bug. Again, Entitas itself never actually goes those code paths as you can verify yourself.. That's so weird. I hope one of you guys did tell Unity already :). @jwvanderbeck I might be wrong, but I call it a Unity bug because of 2 reasons:\n1. The code path is very simple and clear and is only using Unity APIs as recommended (afaik) but the result is different and random on Windows\n2. Teams (on Macs) have been using Entitas for the last 4 years and it never appeared\nBut of course, I'd love to hear if I'm wrong, because only then I can do sth about it.. Hey,\nalways prefer Reactive Systems over direct Group delegates when possible. This will already fix your issue.\nCaution is advised when using direct group delegate that include NoneOf like in your case. Explanation:\nYou will probably have a system that destroys entities that are entity.isDestroyed = true. Destroying an entity will remove all its components one by one. Depending on the order of the removal this entity might trigger group delegates. In your case it seems like DestroyedComponent is remove first which will make the entity enter the group again. Right after it will leave the group again because Task and TaskDone will get removed too, but you delegate has already been called.  Using a Reactive System with a Filter will fix this and is recommended.. For now there are no plans to open source Desperate Devs, but you never know... :). Hi,\nthe previous code generator relies on reflection which means it produces source code based on a compiled dll. Compile errors in your code prevent you from building a new dll which means recent changes in the code cannot be picked up by the code generator since it will process the previous dll.\nThe roslyn plugin from the asset store doesn't use reflection and makes it possible to generate even if there compile errors.\nEntitas Asset Store:\nhttps://www.assetstore.unity3d.com/#!/content/87638\nVideo Demo:\nhttps://www.youtube.com/watch?v=LGKsqSg5FHg\nJump to the actual demo in the Video:\nhttps://youtu.be/LGKsqSg5FHg?t=17m0s\n. Personally, since I switched to Entitas I never used any DI frameworks anymore, and I never felt the need. Systems usually get the contexts ref via the constructor and then they have access to all data and dependencies.\nI also use sth we call Services, where we extract logic that might be used by multiple different systems, e.g. BuildingService or CharacterService. So all systems only need the contexts and some services. This can be easily handled without a DI framework. But of course, if you prefer you can still use it. But if you ask me, try without first and see if you like it. Hi! I'm glad that you like Entitas :) I love it too!\nAtm you can only mark components to be ignored by the generator\n```csharp\n[DontGenerate]\npublic sealed class MyComponent : IComponent {}\n// also don't generate indices\n[DontGenerate(false)]\npublic sealed class MyComponent : IComponent {}\n```\nsee all available Attributes here:\nEntitas.CodeGeneration.Attributes\nUnfortunately, there's nothing to ignore fields or properties. But fyi:\nStatic properties, readonly properties or nonpublic properties will not be generated. Only public fields and public properties get; set; will be generated.\nC# extensions might do the trick:\n```csharp\npublic sealed class MyComponent : IComponent {\npublic float value;\n\n}\npublic static class MyComponentExtension {\npublic static string Serialize(this MyComponent component) {\n    // ...\n    return str;\n}\n\npublic static MyComponent Deserialize(this string str) {\n    // ...\n    return component;\n}\n\n} \n```\nHope that helps\n. I will work on further improving the initial experience, so that in the future there's no need for a quick guide ;) Thanks for going through this with me.. @bwohaha can you translate the red error message for me please? Btw, the yellow warning can be ignored as long jenny doctor  says everything is alright.\nI can see the output from the ConsoleWriteLinePostProcessor which is printing all generated files. So looks good so far (except that red error of course). can you check you gitter, I send you a message. Solved.\nFor anyone interested:\nThe properties file still contained  DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor.  As mentioned above, this is  a x.Unity.Plugins.dll plugin and won't work in the standalone code generator. I think I found a nice solution for future versions: I added IDoctor so plugins can not only contain data providers, code generators and post processors, but also doctors that can diagnose if the plugin is supported in the current environment\n\nIn this case the DebugLog PostProcessor implements IDoctor and checks if you attempt to run it with the standalone code generator and will complain if you do so.\nEach plugin can now implement doctors that produce diagnosis that are easy to understand and also contain information about how to solve the problem \ud83d\udc4d . > Ok got that fixed by running jenny fix first, so maybe that should just always be run first?\nYes, when the properties file was created by Unity first (by opening the Entitas Preferences Window) you should run the fix command to prepare the properties file for jenny.\n\nI'm basically just spamming \"y\"\n\nI will probably add a new command that will just add everything without asking, that should already reduce the confusion. I do this already in Unity where all available plugins are automatically set by default (you see checkmarks in front of the names of the dropdown menus)\nFor some Unity version the default project name is Assembly-CSharp.csproj and for others it's MyProjectName.csproj. Make sure to set the correct project name for the key DesperateDevs.CodeGeneration.Plugins.ProjectPath in your properties file.\ncd into the same folder where the .properties file is located because I assume all paths are usually specified to be relative and not absolute. When you make changes to the properties file you should also restart the server just to ensure that all changes are picked up correctly.\n. I think the main problem is the lack of docs because as you said, most of you probably don't know what the jenny messages actually mean. I'm currently working on (hopefully) one of the last versions before 1.0 (will submit to the Asset Store tonight) and then I hope I there are less issues and more time for docs. Dang, Asset Store is 0.47.7... this is fixed in 0.47.8\nNew release should hit the Asset Store this week. Looks like your folder doesn't contain any properties file.\nWhen opening the Entitas Preferences in Unity, a new properties file will be generated automatically. Alternatively use jenny new MyProperties.properties to create one in the terminal. Correct. Only import the Entitas folder into Unity. Don't import other folders like Documentation or CodeGenerator. Hi,\ncan you run jenny doctor -v\n-v will result in verbose output and will help identifying the problem. Thanks! I'd be very interested if this issue is related to #503. \ntl;dr;\nTry removing this line from your .csproj file if it exists\n<TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile>\nIt might reappear, but I'm working on a fix.\nI hope this helps already. Who volunteers to update the wiki :). But yes, you're right. Entitas used to be a top level menu item. Unity requires asset store menus to be under Tools, so I changed it to Tools/Entitas. Btw, feel free to update sections in the wiki that are not correct or outdated.. Very nice :). I will take a look. Sounds like the EntityIndexGenerator is not yet using the IgnoreNamespaces config.. Hi, so just check. All good. So there's no generated api which contains the namespace of your custom index. The code you're referring to is only used internally, and if you're creating classes in a namespace, it needs to respect that namespace. The properties file can contain custom keys and other Entitas Addons like VisualDebugging also use that file to store some settings. jenny fix offers to remove unused keys. These keys are considered unused in the context of the code generator but might be required by you or Addons like VisualDebugging. If asked by jenny, please select the option (i)gnore instead of removing them, this will tell the code generator to not ask you again about those keys and that they are marked as used by you or other Addons like VisualDebugging. To automatically restore keys that you accidentally removed, simply open the Entitas Preferences Windows, and the lost VisualDebugging keys are restored with default values.. Just to be sure, have you seen the 2 assumptions I've made in #519?\nWhen you say you use Unity to generate, I assume you use the reflection based generator and there's no need to use the CLI. When you say you use the CLI I assume that you use the Entitas.Roslyn plugin, because this is not supported by Unity yet.. As I've seen from your previous issue, I see you're using Roslyn. Unfortunately roslyn doesn't work in Unity yet because it's using new .NET frameworks. This is why you have to use the CLI for now. You cannot generate with the green generate button from Unity. While it should theoretically do the same no matter if in Unity or not, there are some differences and limitations when run in Unity. But I think once set up correctly, the workflow with generating right from the IDE is faster and more convenient anyway.\nSee the video from #492. Just to be sure, try running jenny fix as described  in  #519 . I f the problem still exists afterwards, please let me know. Ok, that's new. It doesn't continue? Is the project in a working state? How long did you wait for the parsing to finish? (sorry, I have to ask all this, I never heard of this issue). Is this still an issue for you?. Hi, entities are not sorted for performance and design reasons, but you can sort them manually if needed when you retrieve them from the collector. The order is not guaranteed and you cannot depend on it. See Collector\nCollected entities are stored in a hashset, so order should be considered random. Deterministic, but random :)\nBut again, to ensure a certain order you can sort the entities first in the reactive system.. Danke, fr\u00f6hliche Weihnachten zur\u00fcck :). Hi, thanks for posting! I will try to reproduce after the holidays.. Ok cool. I will probably add a safety check to avoid this error. I really wanted to avoid any safety checks because I'm still convinced that this cannot happen :) but as it turns out, I'm wrong and it seems to behave differently on Windows, so I will surrender, give up, and add a safety check :). Hi, fixed in Entitas 0.47.0. Does this happen for you all the time or was this a one time thing?. Is this still a thing? Unfortunately, I wasn't able to reproduce. Do you know how I can reproduce? Otherwise feel free to close. I see, roslyn is lacking support as it is not recognizing the public field of the inherited class. . I just added support for subclassing components in roslyn which will enable the WrapperComponent. I see you've read my concerns about the WrapperComponent and that you are aware and fine with that :). Sorry, got sick. Will release this week. Hi, fixed in Entitas 0.47.0. ref #444. I usually prefer explicit over implicit. I get the idea, but there are also reason not to use [All]. Example: if you add a new context you never know which components it will contain. Before that it might have made sense for a component to be in all, but not in the new one.\nBut it's a good reason to start looking into writing custom data providers and generators :) You can add a new data provider for components which will add all contexts if it has [AllContext] attribute. Ok I see, question: Do you have components with an context attribute like [MyContext] but the context has not been generated yet?. @eransh22 great, that will help me a lot to find the issue. I will work on a fix for that. Thanks for the hints to reproduce. @eransh22 I just tried to reproduce, but unfortunately I cannot confirm. Generating the first time works great for me.\nBut: the next release contains a bugfix for the exception you posted, maybe your issue was related to that. I will release a new version soon, let's see if that solves your issue already.\n@jwvanderbeck \nThe current version of the roslyn plugin can already handle resolving contexts that are not generated yet, given they are specified in the properties file.\nExplanation:\nUsing an attribute that doesn't exist like [NonExistentAttribute] obviously cannot be resolved as I cannot infer if it is supposed to be an context attribute or something completely different. But: if the name between the braces (e.g. [NewContext]) matches any specified context in the properties file, I will just parse whatever text is found between the braces.. Hi, there are some fixes in Entitas 0.47.0. Sounds like a good idea. Hi, fixed in Entitas 0.47.0. Explanation:\nJenny tries to find a properties file automatically if you don't specify one along with a command. If you specify a properties file with a command it will be used, e.g.\n$ jenny gen MyPreferences.properties\nIf there are multiple properties files found, jenny uses the first one found. Coincidentally I was already working a feature last week that will tell if it found more files and which one it is using. I added this to the Unity preferences and to jenny. Will be in the next release. Sorry for the confusion.. Hi, fixed in Entitas 0.47.0. Could reproduce, haven't looked into it yet.\nStarts from UnityEngine.Experimental.UIElements.IMGUIContainer.DoOnGUI\nThe \"Experimental\" part is suspicious. But will look into it soon. But a problem though, everything should still work fine\nNullReferenceException: Object reference not set to an instance of an object\nUnityEngine.GUILayoutUtility.BeginLayoutGroup (UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options, System.Type layoutType) (at /Users/builduser/buildslave/unity/build/Runtime/IMGUI/Managed/GUILayoutUtility.cs:296)\nUnityEditor.EditorGUILayout.BeginHorizontal (UnityEngine.GUIContent content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorGUI.cs:7696)\nUnityEditor.EditorGUILayout.BeginHorizontal (UnityEngine.GUILayoutOption[] options) (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorGUI.cs:7676)\nUnityEditor.EditorGUILayout.LabelField (UnityEngine.GUIContent label, UnityEngine.GUIContent label2, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorGUI.cs:6040)\nUnityEditor.EditorGUILayout.LabelField (System.String label, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorGUI.cs:5996)\nDesperateDevs.Unity.Editor.PreferencesWindow.drawException (System.Exception exception)\nDesperateDevs.Unity.Editor.PreferencesWindow.drawContent ()\nDesperateDevs.Unity.Editor.PreferencesWindow.OnGUI ()\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:222)\nRethrow as TargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:232)\nSystem.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MethodBase.cs:115)\nUnityEditor.HostView.Invoke (System.String methodName, System.Object obj) (at /Users/builduser/buildslave/unity/build/Editor/Mono/HostView.cs:285)\nUnityEditor.HostView.Invoke (System.String methodName) (at /Users/builduser/buildslave/unity/build/Editor/Mono/HostView.cs:278)\nUnityEditor.HostView.OldOnGUI () (at /Users/builduser/buildslave/unity/build/Editor/Mono/HostView.cs:107)\nUnityEngine.Experimental.UIElements.IMGUIContainer.DoOnGUI (UnityEngine.Event evt) (at /Users/builduser/buildslave/unity/build/Runtime/UIElements/Managed/IMGUIContainer.cs:127). I don't know. I don't think so. Will close, this error message can be ignored. This error popped up in newer Unity versions and contains \"UnityEngine.Experimental\", so I'll assume Unity is trying and changing a few things. Will investigate if it persists in the next few Unity version too. Hi, by default VisualDebugging is activated which adds some overhead to integrate Entitas nicely into Unity. This code will be stripped out when you build a release version. To turn VisualDebugging off in the Unity Editor open EntitasPreferences and disable VisualDebugging. This will already make a huge difference in your case. That's weird. As a workaround for now try\nEdit > Project Settings > Player > Other Settings\nand add to Scripting Define Symbols:\nENTITAS_DISABLE_VISUAL_DEBUGGING. Explanation:\nThe Visual Debugging toggle adds or removes this compiler flag to all build targets. If for any reason it couldn't apply to all of them, the checkmark turns on again. Can't reproduce with 1.4.1. Are there any exceptions in the console?. A good example is probably\nMatch One - AnimatePositionSystem\nWhen a position is replaced on entities, this system will do its things when systems.Execute() is called. Nice! Thanks for sharing. Looks like JSON Blueprints, great :). Hi can you or someone else add this in the wiki to the other community contributions? Thanks. You're the best :) Thanks!. Hi, there are some fixes in Entitas 0.47.0. Hopefully it helps with the issue you had. Feel free to reopen, if it doesn't (you might have to wait a few days for the Asset Store version update). Does it finish when you wait 10+ secs or does it hang forever?. Ok, I just added a potential fix for that. Will be in the next release. Hi,\nif you bought Entitas I'd recommend using the Roslyn plugin as it can improve your workflow, see https://www.youtube.com/watch?v=LGKsqSg5FHg\nI see you're not using the Entitas.Roslyn DataProviders, open a terminal, cd into your project root where the Preferences.properties file is located and do\n$ ./CodeGenerator/Jenny.exe fix\n$ ./CodeGenerator/Jenny.exe auto-import\nand when prompted to resolve potential collisions, choose the ones with \"Roslyn\" in the name.\nAs a result the key Entitas.CodeGeneration.Plugins.Assemblies will also be removed.\nNote that once you've setup the roslyn plugin, you can only generate outside of Unity until Unity adds support for newer .NET versions. But again, see the video linked above, because the workflow without Unity is way faster anyway.\nIf you don't want to use Roslyn please check if the file exists that is specified at Entitas.CodeGeneration.Plugins.Assemblies. If not, click the menu Assets > Open C# project (also as seen in the video)\nI hope that helps!. External generate will now send the selected properties path with client gen\n\nYou can select the desired properties with the new Switch Button.\nWill be in the next release. Using Contexts.sharedInstance creates a tight coupling to this class and the code cannot be reused. Passing in contexts lets you use multiple instances of that class in different scenarios and with multiple different instances of contexts. This becomes very obvious when you start writing your first unit test or integration test.\nRule of thumb:\nAlways prefer passing in the contexts. Only use Contexts.sharedInstance when there's no other way. This will lead to more flexible design and helps writing reusable code.. Hi, i guess we need a little bit more information about your question :). There's a search field which supports fuzzy search, e.g to show Asset, Color, ViewController you can write \"as co vi\". This will filter all matching components.\nBased on my current plans, I cannot see myself adding sth like this. This would be a community driven feature. I recommend looking these classes to get started. Maybe sth like a IComponentsGroupDrawer \n```csharp\npublic class ViewDrawer : IComponentsDrawer {\npublic string title { get { return \"View\"; } }\npublic Color color { get { return Color.red; } }\npublic int priority { get { return 0; } }\n\npublic Type[] components {\n    get {\n        return new [] {\n            typeof(AssetComponent),\n            typeof(Color),\n            typeof(ViewController)\n        };\n    }\n}\n\n}\n. The EntityDrawer could draw all component groups based on prio first and then all remaining components as usual. Or maybe sth like this insteadcsharp\n[DrawInGroup(\"View\")]\npublic sealed class AssetComponent : IComponent {\n    public string value;\n}\n// In  ViewGroupDrawer.cs\npublic class ViewGroupDrawer : IComponentsDrawer {\npublic string title { get { return \"View\"; } }\npublic Color color { get { return Color.red; } }\npublic int priority { get { return 0; } }\n\n}\n``. oooor maybe not have anIComponentsDrawerat all and [DrawInGroup(\"View\")] dynamically creates Groups, because we have the title already and it gets a random (but deterministic) color assigned. Ordered alphabetically. Use deep profiling in the editor.\nIt's called \"DeviceDeepProfiling\", so only affects development builds\nsee [FeatureClassGenerator](https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.VisualDebugging.CodeGeneration.Plugins/Entitas.VisualDebugging.CodeGeneration.Plugins/FeatureClassGenerator.cs#L12). I see, the paths are escaped uri strings...My%20Unity%20Project` \nWill fix this. Thanks for reporting!. Fixed in Entitas 0.47.7. Not quite sure what you mean, I have it working with 2017.3. I have Libraries.asmdef with all libs incl. Entitas. What's your setup?. You said in the chat you managed to get it working?. Don't overthink it. Don't separate things that belong together :). ... \ud83e\udd26\u200d\u2642\ufe0f\nI see, Unity 2017.3 broke their Unity Editor already and produces errors with the UnityEngine.Experimental namespace. Never ending story ;)\nClicking Auto Import kinda works though. But I had to click it a few times. \n\nTested in older Unity versions, no problem. This got introduced by Unity 20.17.3. Their mask drop down seems to be broken. Another symptom is, it shows mixed even though everything is selected\n\n. Hi, I think I need more context, are you doing this in a system? Are you using group events directly?. I think I cannot help other than suggesting to debug and see with path your code takes. I see you're using a reactive system, but I don't see the trigger and filter, so it's hard for me to guess. You usually never instantiate components yourself because they are all managed and object pooled by Entitas for you. If it's possible for you, please share more of the system code (like trigger and filter). I just clicked the link you posted, and I saw the component stores other components in fields. You should never do that. Always work with component values. \nDo \ncsharp\ninputHandler.IsDrag(\n  dragEntity.dragSelectionMouseButtonDown.screenPoint,\n  mouseEventEntity.screenPoint.value // <- value, not the component itself. I will see who added this example project and will let him/her know. @xmzyl Please open the properties and check if all your paths are still valid. E.g. The folder CodeGenerator has been renamed to Jenny. Make sure all the paths specified in the searchPaths are still valid. Also take a look at #561 , I already made a fix for windows. When in doubt, you can delete the properties and open the Entitas Preferences and click auto-import, this will create a new one which should work. Just checked, you're right, there are issues on Windows.\nHere's my default Preferens properties file with Roslyn set up already (remove .txt)\nPreferences.properties.txt. Not sure what windows is complaining about yet again, if it's the latest roslyn libs, or the zip not being unblocked by the user first, or....  I have to investigate. @optimisez Ok, I can reproduce on Windows, works on Mac. The given assembly name or codebase was invalid. There seems to be (at least) 1 dll that he cannot load, although the file exists. Will investigate further. Ok, fixed on windows!. You can already use the fix by downloading the dlls listed here\nhttps://github.com/sschmid/Entitas-CSharp/commit/dd90ab7224faee90fab563dbf6675adfdd0d85e0\nare copy them into the Jenny folder. Fixed in Entitas 0.47.8. Seems like a dll got accidentally not built correctly. One DesperateDev dll seemed to be corrupt for that build only... New clean builds didn't have this issue... good to know. Not quite sure what you mean. Do you have an example of websites using Unity apis?\nWould a unitypackage attached to a release help already?. roslyn is asset store only. @WoLfulus How would you do this?. Added ValidateProjectPathPreProcessor to throw an error which will hint to the solution. Can reproduce, works with the default code generator, doesn't work with roslyn. Will investigate.... As a workaround please manually create  the ConfigsComponent\ncsahrp\n[Game]\npublic sealed class ConfigsComponent : Entitas.IComponent {\n    public Configs value;\n}\n. Ok, fixed. Will be in next release.\nIn case anyone is interested: Explanation:\nThe fix for #532 introduced that behaviour because all inherited members where inspected too to support subclassed components. The same functionality was applied for non-components. I fixed this to not inspect sublasses of non-components.. Fixed in Entitas 0.47.9. Hi that's totally fine. The output depends on your current properties file. There is no right or wrong order.. In your image I see it generated a component for a component :) There's a feature in Entitas where you can add an attribute like [Game] to any class (not an IComponent) and it will generate a component for you. Looks like your project was in a bad state and the parser didn't get that those classes were IComponents already. Is that possible? When you upgraded to 0.47.x, did you project compile?. This also explains why the compiler suggests to add the partial keyword (which you shouldn't do) because you already have a component, but another one got generated for you.. Not very important but, did you run jenny doctor or jenny fix, it should offer you to remove the key Entitas.CodeGeneration.Plugins.Assemblies. Doesn't really matter and it's not important, just saw that you're using roslyn, so this key can be removed as it's not used anymore by any plugin. Again, jenny fix will tell you more about it. @CuiXiaoliang does this issue still exists in Entitas 1.4.1? If not, feel free to close this issue. @defik2944 Unity's approach is different to the Entitas approach and for them it makes sense to use structs and not classes. Entitas is designed differently and classes are the better choice, please don't use structs as components.\nAbout a year ago I implemented another (private) ECS (called Eve) which is basically the same / similar that Unity does right now (struct arrays etc.) to evaluate Entitas performance.\nMy result back then was that Entitas performance without reactice systems was on par and it was not worth it to drop Entitas in favour of Eve, because Entitas gave more flexibility and less restrictions at a comparable performance.\nHere's a performance test that I will share soon where x amount of cubes are rotated every frame. This particular image show Entitas without reactive systems, meaning you don't use e.ReplaceXyz but modify the component values directly.\nleft: Unity with traditional monobehaviour\nright: Entitas\n\nUnity way memory: 28.7 MB\nEntitas way memory: 1.2 MB\n~24x more memory\nHaving said that, if you're talking about 20000+ entities and each of them is doing sth each frame, I think there's no way around multithreading and parallelizing systems to achieve a decent performance. I recommend a sandboxed performance test to validate Entitas and if it fits your needs. Please make sure to disable VisualDebugging in the preferences and also use fast & unsafe when profiling! With 20000+ entities VisualDebugging will significantly drop performance in the Editor and you won't get accurate performance results!. On the other hand, the amount of entities doesn't necessarily mean that you will end up with performance issues. I would be more interested in the amount of systems and if they will process all entities or just groups / subsets. Is it every frame or every turn?. If it's possible for you to share more info I'm sure we can find a solution. Yes, if you're dealing with thousands of entities, you can get a massive performance boost by not using the replace method. Groups will still work, but reactive systems and EntityIndex only work in combination with the replace method. @owengalenjones This is fixed as of 0.47.3, see #540 for a workaround. Turns out there are even more GUI related bugs introduced in 2017.3\nI won't address all of them for now, and hope Unity will fix them soon. Fixed in 1.0.0. Maybe I should consider to remove this behaviour again. This is the code I added recently. Main goal was to inform the user that he forgot to unlink gameObjects. Doing this in OnDestroy might not be the best idea.... Is this still an issue for you? What's your use case having inactive gameObjects that are still linked to active entities?. If you are using them for object pools, you should definitely unlink them. . Ok. Btw, all entities are already automatically object pooled, so you don't need to do that.. Thanks @roygear, I couldn't have said it better :). @yuchting the Entitas dlls are optimized release builds and therefore don't contain any debug information. That's usually the case for precompiled 3rd party libraries. You can fork Entitas and compile debug dlls if you want (see CONTRIBUTING.md) to step through the code. Not quite sure if that's desirable though if you want to debug 'your' code.. As soon as you open the c# project the very first time (Assets > Open C# Project), Unity will create a project for you. I think Unity should create this by default, but it doesn't. But that's not really a problem. Usually Unity will create Assembly-CSharp.csproj, in some cases users reported that the project is called differently, e.g. <MyProjectName>.csproj. Adjust the Entitas preferences accordingly.\nSee #563. Also see Video at 2:59\nhttps://youtu.be/LGKsqSg5FHg?t=2m59s. Added ValidateProjectPathPreProcessor to throw an error which will hint to the solution. Fyi, this can only happen in the editor. This won't happen on the device. VisualDebugging is editor only and will be stripped out for release builds. Properly cleaning up manually first as suggested can avoid this exception.. see #438\nWill close and mark as duplicate. > I have some problems with entities being retained by systems from other app mode\nWhen you deactivate an app mode, consider calling systems.DeactivateReactiveSystems(). This will pause them until you activate them again and also releases any retained entities.\n\nand I would like to add to it that it has BaseComponent\n\nuse Filter() to filter entities.\nTo react to both View and Base use\ncontext.CreateCollector(CoreMatcher.View.Added(), CoreMatcher.Base.Added());\nTo react to a group with view and base use\ncontext.CreateCollector(CoreMatcher.AllOf(CoreMatcher.View, CoreMatcher.Base);\n\nIs there any difference between CoreMatcher.AllOf(CoreMatcher.View.Added()\n\nCoreMatcher.View.Added() is not a matcher and this code won't compile\n*.Added() return TriggerOnEvent\n\nDoes ReplaceComponent trigger Component.Removed, Component.Added\n\nReplace will trigger group added\n\nCoreMatcher.AllOf(CoreMatcher.View, CoreMatcher.Base)\n\nit creates a group with view and base. if an entity has both, it's added, otherwise not\nHope that helps ;). Awesome! Sounds great! Do you also record to share it later or is it streaming only?. Thanks for sharing!. See issue New Video Tutorial | Entitas - Shmup - Part 1 #585 to watch the new Entitas setup & basics video. You can place Entitas and Jenny in any folder you want. I guess @FNGgames is happy to hear that ;)\nYou posted another issue #581. So I guess there went something wrong with your setup.\nCan you share your properties file?. Hi, I uploaded a Video Tutorial on how to set up Entitas. Let me know if it helps you\nSee #585 \nIt it helps you can close this issue. I'm using Console.ReadKey(true) to prompt user input. Do you know a way that works with your terminal as well?. Btw, you can use jenny auto-import -s. -s is for silent mode. You will get way less prompts.. You need to do the setup only once per project. Consider using the default terminal for that as shown here #585 . Hi, I uploaded a Video Tutorial on how to set up Entitas. Let me know if it helps you\nSee #585 \nIt it helps you can close this issue. I'm glad I could help! :). After a quick google I read \"strange regression in Unity for Windows specifically\".\nThat's what my gut feeling tells me too (though I might be wrong). I'm just using the Unity API UnityEditor.EditorUtility:ClearProgressBar() as usual. Starting with 2017.3 I discovered multiple other Unity GUI bugs. Seems like they changing quite a bit here and there but it's not quite ready yet.\nBut to get back to you issue: that message can be ignored and won't affect the functionality.\nAs mentioned in other Unity GUI related issues, I will ignore them for now and hope Unity fixes them as I don't think I can do anything about it.. Created a new issue to collect all those issues. Will close and redirect to #583 . I can help you set it up. I recently updated CONTRIBUTING.md.\nThe bee script might need slight adjustment for windows. If you want we can work together on making the bee build script also work on windows out-of-the-box.\nAt a first glance, you probably have to either install mono on windows or replace xbuild with msbuild. Other than that it's simple bash, so we should be able to make it work on windows. It's those 3 commands that need to work for local building, testing and syncing new code to the Unity projects\n$ ./Scripts/bee tests\n$ ./Scripts/bee build\n$ ./Scripts/bee sync\n. Let's move this discussion to #586. Thanks for the detailed issue.\nDid I see this correctly, when you run auto-import there's an error?\nFyi, if you already have a working properties file somewhere, you can use that one an skip the auto-import.. does auto-import complete properly? What's the output?. The difference is that older Entitas versions just used a simple approach for detecting plugins by checking the filename ends with .Plugins.dll. This is obviously not very robust. Newer version actually inspect and reflect all dlls and exes to check if they contain any plugins. This is why you see a lot of Jenny.exe reflect xyz\nCan you just use the working properties file with 1.0? Does generation work? auto-import is a convenience feature, you can also manually setup the properties file if it fails. I will google MonoError reused after mono_error_cleanup. You're on linux right?. btw, there's a newer mono version\n$ mono --version\nMono JIT compiler version 5.0.1.1 (2017-02/5077205 Sun Sep 17 18:29:46 BST 2017)\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com. This is a default properties file take from the Shmup Part 1 video. Try if that works for you if you have the same setup as in the video.\n(remove .txt)\nPreferences.properties.txt\n. What about Powershell or Cygwin? They do run bash, don\u2019t they?. Hi, thanks for your feedback and for supporting the development. Entitas has been fully open source for almost 4 years. Entitas will remain open source like I repeatedly guaranteed. I might need to update some wording to clarify that Entitas itself is open source but not other products that are shipped with Entitas. I recently started to extract unrelated code from Entitas as announced here: #512 \n\nEntitas used some of those tools by some extend and they were all in the Entitas namespace. But actually, .NoneOf() them have anything to do with Entitas. It's the other way around: Entitas was built on top of those tools.\nStarting with Entitas 0.46.0 and as announced in #508 I extracted all those tools into separate standalone projects. That's great because now I see and treat them a standalone projects. As a consequence I have to increase the focus on a public API that makes sense for all kinds of scenarios and therefore the API awesomeness and the reusability is increased. It also enables me and others to create new kinds of projects that use the same fundamental tools without the need to depend on Entitas completely.\nThe Entitas repository will be even more about ECS than ever without distractions on other tools as they're all considered external dependencies.\n\nYou are right, those parts are not open source anymore. This shouldn't affect working with Entitas at all, because all Entitas related code is and will be open source. I extracted Unity Editor, Networking and Code Generation related code which is fine in my opinion. If you want or need access to all of the sources from all used dependencies you can contact me.\nThe addon / plugin-based architecture of the Entitas project still allows a great deal of customization and the code generator is flexible for all kinds of projects and scenarios by design. If you want to extend the code generator behaviour to fit your needs I suggest taking a look here:\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins. To eliminate any misunderstandings: all of the Entitas Code Generation Plugins are open source. You can read the code, modify it or create your own ones.\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins\nJenny is not open source but that's not a problem I'd say, because jenny itself doesn't do anything other than loading and running the plugins. The plugins are the important part and they are open source.\nFyi, I removed Jenny CLI from the GitHub release to reduce confusion, because a lot of people thought they have to use it even with the built in plugins. If you don't have the roslyn plugins you don't need Jenny CLI, you should actually prefer the Unity generate button in this case. That's why I removed it.\nI was thinking to open source the roslyn plugins too, but that would result in too much support, because making this work was actually a freaking nightmare. I cannot support that. The last few months I made it work x-platform and you can get the result on the Asset Store, I think that's a fair deal.. @KumoKairo This is true, but I think we're drifting in a wrong direction.\nI can't fully understand the problem. Yes, Entitas relies on code generation quite heavily but if I would have chosen any other existing closed code generator, there wouldn't be a discussion.\nAnd to repeat: The data providers and code generators are all open source + Jenny can be customized and extended pretty easily. Jenny (among other pieces of code) turned into standalone projects and were extracted from the main code base which is a natural and in my opinion healthy process. Entitas is an open source ECS framework. It's not an open source Networking or Code Generation project.. > What are your goals of making it an open github repo?\nLearning, growing, exchange, sharing and disussing game architecture and ECS, getting input and ideas from other people to make a better product and giving back sth to the community.. Those are different things. Exchanging ideas and code about ECS is different from what people want me to build and share for free.\n\nEntitas is an open source ECS framework\n\nWhen I open source Jenny the discussion will continue, because Jenny relies on closed source like networking, logging, assembly management, etc.\nJenny itself only contains the interface like ICodeGenerator and a class that calls each plugin one by one. Not much lost there. None of the code I extracted has anything to do with ECS. Please let's shift the focus back to ECS and accept that the used \"3rd party\" dependencies are not open source.\nTo avoid future confusion:\nEntitas and the code generation plugins are open source.\nAny non ECS related dependencies are not.. If anyone needs or wants full source access to the dependencies, please contact me and we can find a way.. Will close now, the initial topic of this issue is now outdated.\nFeel free to keep commenting if there are any further questions.. @MrMonotone Entitas can still be used in pure c# projects. The workflow is even easier than before, because you don't need a separate code generation project anymore. Run jenny new Entitas.properties to create a new properties file. Open it and fill out the blanks. After that run jenny auto-import -s which will setup everything for you. From then on you can use the suggested workflow with jenny server as you might have seen in the tutorial videos.\nOnly the Asset Store version contains the standalone code generator (Jenny) to support cutomizations and the roslyn plugins. The Unity Asset Store is the only distribution channel for Entitas, but once you've downloaded it, you don't need Unity anymore.\nHope that helps!. Do you experience the same issue when you manually edit a source file outside of VS and go back to VS?. Ok sorry, I actually meant modifying the project file. If you have a suggestion how to improve this for VS please let me know. With my current knowledge it's a short coming from VS and there's nothing I can do about it other than recommending another IDE such as Rider. Maybe there are settings in VS to change this behaviour?. @buihuuloc Your issue is a different thing. This issue is about Visual Studio not handling external project modification well.\nCould you please create a new issue and tell me more about your setup. Is it any different to what I explained in this video? see #585. I'm afraid, but I don't think I can do anything about how Visual Studio 2017 handles changes made to the project. . Hi, unfortunately I cannot tell from the error message. I would need more information about the system setup and if you're doing anything special. Can you identify which system causes this issue?. I haven't got any feedback so far, so I assume the issue is resolved? Feel free to re-open otherwise.. Hi, please cd into the folder where the properties file is located. You were in the wrong folder. try cd into the folder where the properties file is and run\n$ Jenny/Jenny.exe fix\n$ Jenny/Jenny.exe auto-import. Updated code. Iteration 1 will contain generated\n- Interfaces\n- Components\n- Systems\n- One EventSystems class that contains all systems ordered by priority. Test results can already be seen here\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Tests/TestFixtures/Generated/Events. Current state:\nYou can flag components with [Event(true)] or [Event(false)]\n[Event(bool bindToEntity)]\nE.g.\ncsharp\n[Unique, Event(false)]\npublic sealed class ScoreComponent : IComponent {\n     public int value;\n}\nAfter generation you can use the IListener\n```csharp\npublic class GameHUDController : MonoBehaviour, IScoreListener {\npublic Text scoreLabel;\n\nvoid Start() {\n    Contexts.sharedInstance.game.CreateEntity().AddScoreListener(this);\n}\n\npublic void OnScore(int value) {\n    scoreLabel.text = value.ToString();\n}\n\n}\n```\nThe generated GameScoreEventSystem which notifies all IScoreListeners will be added to the generated EventSystems feature automatically.\nWhen [Event(true)] the listener is on the same entity as the component of interest, e.g. \n```csharp\n[Event(true)]\npublic sealed class PositionComponent : IComponent {\n    public Vector3 value;\n}\n```\n```csharp\npublic class View : MonoBehaviour, IView, IPositionListener {\npublic virtual Vector3 position { get { return transform.localPosition; } set { transform.localPosition =\n\npublic virtual void Link(IEntity entity, IContext context) {\n    gameObject.Link(entity, context);\n    var e = (GameEntity)entity;\n    e.AddPositionListener(this);\n}\n\npublic virtual void OnPosition(Vector3 value) {\n    position = value;\n}\n\n}\n```\nI will show this in the Shmup Part 3 video. Forgot to mention:\nIt's really awesome! :). [Event(true)] is bound to one entity, there can only be one. Try using [Event(false)] instead. Agree, I'm not 100% happy with [Event(bool)]. Suggestions for names?\n[Event] and [EntityEvent]?\nIXyzEntityListener could pass the entity instead of the value. @optimisez \n\nDo u mean passing the whole entity instead of the data from component?\n\nyes. but not sure if that's a good idea as it might encourage modifying the entity. @beck-daniel thought about that, we definitely need that to express more complex scenarios. I've got sth in my head already.. I changed the interface to include the entity:\ncsharp\npublic interface IPositionListener {\n    void OnPosition(GameEntity entity, UnityEngine.Vector3 value);\n}\nProblem:\nImagine PositionComponent is tagged with [Core] and [Meta]\nI have 2 options:\n1. generate ICorePositionListener and IMetaPositionListener and have a type-safe entity\n2. only generate IPositionListener but with IEntityas a parameter\nNr 1 would look like this\n```csharp\npublic class View : MonoBehaviour, IGamePositionListener {\n    // ...\n    e.AddGamePositionListener(this);\n   // ...\npublic void OnPosition(GameEntity entity, Vector3 value) {\n    position = value;\n}\n\n}\n```\nNr 2 would look like this\n```csharp\npublic class View : MonoBehaviour, IPositionListener {\n    // ...\n    e.AddPositionListener(this);\n   // ...\npublic void OnPosition(IEntity entity, Vector3 value) {\n    position = value;\n}\n\n}\n```\nAny thought?\nWhen IEntity:\nSince we get the value we don't always have to cast the entity to e.g. CoreEntity.\nWe could have 1 OnPosition that can handle both entity types\nWhen typed entity:\nMore convenient, but slightly uglier interface and component name, because it contains the context name\n. Maybe I can try to skip the context name, if I only detect 1 context. \n@optimisez no additional method call, just signature change. Changed it to detect if the component only has 1 context and then not prefixing it with the context name. Will pass the entity by default as the sender. For event delegates it is very common to have the sender + args as parameters. The (realdworld) performance is the same. . @optimisez yes, I'm aware of that. Currently I prefer the shorter api though.. Question:\nI'm not quite sure about how to handle all the cases, there are many different use-cases. Example\ncsharp\n[Event(false, EventType.Added)]\npublic sealed class GameOverComponent : IComponent {\n}\nEventSystems will usually be executed in the view phase after the update systems. The behaviour of an reactive system is: if isGameOver = true, the entity gets collected and the system executes even if we set isGameOver= false in between.\nNow what about events? Should IGameOverListener.OnGameOverAdded() be called or not? GameOver happened but we removed it before.\n. It probably shouldn't and I filter before. Currently I have:\nFlag Components:\n[Event(false, EventType.Added)] generates\nIGameOverListener.OnGameOverAdded(GameEntity entity)\n[Event(false, EventType.Removed)] generates\nIGameOverListener.OnGameOverRemoved(GameEntity entity)\n[Event(false, EventType.AddedOrRemoved)] generates\nIGameOverListener.OnGameOver(GameEntity entity, bool isGameOver)\nNormal Components:\n[Event(false, EventType.Added)] generates\nIPositionListener.OnPosition(GameEntity entity, Vector3 position)\n[Event(false, EventType.Removed)] generates\nIPositionListener.OnPositionRemoved(GameEntity entity)\n[Event(false, EventType.AddedOrRemoved)] generates\nIPositionListener.OnPositionAddedOrRemoved(GameEntity entity, Vector3 position)\n. I will probably add a check to the filter, so I ensure that it really isGameOver by the time we notify all listeners. Will pack a new version.\nFyi, things I won't implement:\n1. calling the listener delegate method when adding the listener\nIf needed, call the delegate manually after adding the listener. This is more flexible and work in more scenarios compared to always calling the delegate when added.\n\nGroup events\nAll Entitas events are reactive and aggregate changes for now. No group events planned.. Please feel free to continue the discussion, I will only close because this issue is related to 1.1.0 which is out.. Added in Entitas 1.1.0. Hi, in Entitas you always have full control of all your systems. Contexts are not aware of systems and will never execute or clear anything for you. Entitas throws an exception when using context. DestroyAllEntities() and there are still retained entities. I do this to enforce cleaning up first which will prevent any unintended follow-up bugs that are harder to track down otherwise. In those cases you have to decide what makes the most sense for you application, sometime clearing reactive systems makes sense, sometime other steps like processing all retained entities might be more desirable. This is totally up to you. Hope this helps. Hi, sorry for the late answer. Before calling context.DestroyAllEntities() you should call systems.DeactivateReactiveSystems(). This will deactivate and clear all collectors and release retained entities.\n\n\nHow currently work: The collector will retain my entity but the filter is not matching\n\nEntities are not retained when not passing the filter. The collector releases all entities after executing the reactive system, see ReactiveSystem\nI think the problem you mean is when a collector in the reactive systems collected entities but you never execute the system and the call context.DestroyAllEntities().\nThis is what the exception should suggest\nsee ContextStillHasRetainedEntitiesException. I agree with @Lazersquid \nYou will have benefits from splitting up components more granular. You can react to specific changes like velocity change, and you will more likely be able to reuse the code in different project.. With the common practice of using systems and reactive system all access is basically deferred. I strongly advise to not use group events directly on a regular basis, only if you're aware of the potential consequences. It's a very common practice to have a DestroyedComponent to flag entities as destroyed. This way all systems still have access to all the data before the entity will be destroyed for real in on of the last systems.. btw, group.OnEntityRemoved will give you access to the removed component. You have 3 options:\n- Flagging an entity with a component like DestroyedComponent (common practice)\n- using group.OnEntityRemoved\n- using entity.OnComponentRemoved. Hi, questions are always welcome, no problem.\nHere's a recent issue about DestroyAllEntities where I already replied #594\nI assume you heard about the common practice of using a DestroyedComponent and flagging entities with e.isDestroyed = true as in Match One\nDestroying entities should always be the last step to avoid issue similar to what you experienced. So before you call context.DestroyAllEntities you have to clean up everything that has to been cleaned up, e.g views and unlinking views.. To catch all modifications I'd suggest to hook into these entity events:\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Entity/Entity.cs#L13-L26\nCombine this with \nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Context/Context.cs#L14-L21\nto add and remove event listeners to entities when they are created / destroyed by the the context.\nWould this help?\nAlso, ref #47\n. Looks like it, yes. That's not an Entitas bug. There are multiple ways to solve this. If you need to keep the teardown this way I suggest checking Unity's execution order and set it up accordingly by placing this script above the default time.. Here some links to learn more about the differences:\n\nSee #587 for the difference between the GitHub and Asset Store version\nWatch the video in #492 so see the difference between the 2 code generators and why the roslyn plugin is so much better. I usually have a unique GameOverComponent and a system like DetectGameOverSystem. As you already mentioned, you're basically calling teardown and reset in the middle of the execution phase. I recommend to only set the context.isGameOver and then act accordingly and do the teardown and reset in OnDestroy of the controller of the current scene. You can turn off tracking by adding\n\nJenny.TrackHooks = false\nto the properties file.. They way I usually deal with sth like this is a reactive system that reacts to StatusComponent and in the Filter() I filter for the desired enum value.\n\nSimon will probably tell you to write a custom code generator\n\n@FNGgames knows me by now ;)\nIf it makes sense for you, you can look into creating a custom code generator for this and share it with us.. Just curious, what is your exact use case. With what do you extend the partial interface?. OK :). To add some cons:\n- implicit, dependencies are harder to spot\n- dependency to Contexts\nExample:\nI have a generic Button that uses a InputService when clicked. The Button is not aware of Entitas. The InputServices emits entities. With your suggestion I'd need to introduce a dependency to the context in order to get the service.. @FNGgames That sounds very nice!\nI have services like entityService.CreatePlayer() -/.CreateEnemy()\nhow would you call this?. If I strictly apply this model to Match One, I'd have to remove the EmitInputSystem and turn it to a MonoBehaviour that emit input entities.\nI would have to remove the AddViewSystem and the ViewComponent and have a ViewController or ViewService that listens to AssetComponent, then creates a view and binds it to an entity. The View would update itself with position listeners and destroyed listeners.\nIf I'm really strict I'd also remove the AssetComponent and have a mapping from entity type to asset name in the View Service, eg. isPlayer -> \"Views/Player.prefab\"\nIn my other games I'd also have to replace the PlayAudioSystem with and AudioController or AudioService. There would be no audio context and no AudioComponent anymore.\nHow does this sound? Am I going crazy? :). UI and Views visualize the current game state. They don't affect the game simulation. They can emit input like button clicks, but the game simulation doesn't know if this input came from a button, from the network or from some other program. That's why we don't need Entitas systems for them and can decouple them from the core logic as observers of the game state. UI and Views know how to represent the current game state. This allows us to start with placeholder assets which later can be replaced with the real game assets without touching the game logic.. 1st result of applying this strictly with TDD (Audio):\nBefore:\n- AudioComponent\n- PlayAudioSystem\n- AudioService\n- no abstraction, dependency to unity\nAfter:\n- No Component / System / IListener / EventSystem\n- AudioService (half the code)\n- Abstraction (IAudioService, IAudioClip)\n- Testable and no dependencies to Unity\nLess complex and almost certainly more efficient\nI guess I'm going down this road further :). I also refactored my views now. All testable and very nice :)\n- removed ViewComponent\n- Removed all view systems\n- Views updated themselves using the new Entitas events\n- ViewService listsnes to asset event and creates view from object pool\n- View reacts to destroyed and pushes itself back to the object pool\n- Added IView and IViewInstantiator to wrap monobehaviours and view creation. This was a result of TDD with TestView impl and TestViewInstantiator impl. The game uses UnityView (wraps MonoBehaviour) and UnityViewInstantiator (loads from Resources but can be swapped with UnityAssetBundleViewInstantiator). This way you can simply swap from creating view from resources to creating views from asset bundles at a later point of time. Object pooling is in ViewService. I really start loving the new events. It feels so clean now :)\n(We introduced the idea in 2016, but now that we can generate it's even nicer). Yes :). Updated diagram to include commands.\nExternal input should be checked first and if valid creates commands which affect the simulation.\nInvalid input could be for example buying an item, but you don't have enough resources. Commands don't verify, they only act.. I recently built a few smaller games following the \"Game Architecture with Entitas\" diagram very strictly and I was really happy with the results. After the latest Video Tutorial about TDD #611 I started with strict testing again, and I have to tell you:\nTDD really had a big impact on my apis and the general outcome. I'm so much happier with the result now. The code is way more reusable, which I was aiming for to be able to reuse as much code as possible in the next game. The apis are much cleaner and I got rid of unnecessary complexity. Plus, It just feels so much better to see all the green passing tests :) Really happy now! TDD FTW!. As another consequence I could get rid of the following contexts: Input, UI, Audio. I only have game and command context left.\nFeels like everything becomes simpler \ud83d\udc4d . ViewService, AudioService and all the other services are all less than 50 lines of code. Things became veeery simple now :). You can definitely have systems for input, no problem. I'm thinking in a very general and very broad context, one in where you can take the game logic as is without any modification and run it everywhere, e.g. server. On the server, probably don't run unity and also you don't have input like mouse. Only commands, e.g. as a result from validated network input. Same is true for views etc. I'm really reducing it down to the core logic. You can still have systems for input and views if you want, but then you'd have to modify the logic in a scenario where code is shared. There are lots of benefits when you have a defined architecture in your game. One of those benefits is that you can automate and generate code.\nImagine you want to add a new input action, like Shoot. Sticking with the diagram above, you'd have to write and implement the following classes:\n- InputAction.Shoot\n- ShootInputActionService that validates the input and emits the shoot command\n- ShootCommand\n- ShootCommandSystem\nYou need to update the the CommandSystems list and the InputActions list.\nI wrote a custom roslyn code generator that does all that for me. I only need to maintain a static class with fields (basically the input action types)\n```csharp\n    public const string START_ROUND = \"StartRound\";\n[DataField(Data.POSITION_X, typeof(float))]\n[DataField(Data.POSITION_Y, typeof(float))]\n[CommandField(\"position\", typeof(Vector3))]\n[Event]\npublic const string AIM = \"Aim\";\n\n[DataField(Data.POSITION_X, typeof(float))]\n[DataField(Data.POSITION_Y, typeof(float))]\n[CommandField(\"position\", typeof(Vector3))]\n[CommandField(\"velocity\", typeof(Vector3))]\n[CommandField(\"ammo\", typeof(int))]\npublic const string SHOOT = \"Shoot\";\n\n```\nThe code generator will then generate:\n- updates InputActionsServices list\n- generates ShootCommand\n- generates partial ShootCommandSystem\n- adds system to CommandSystems list\nAll I need to do is to implement the ShootInputService and fill out the rest of the partial ShootCommandSystem (which is only the execute method).\nVery nice :) \ud83d\udc4d . To write a custom roslyn generator you have to set up a new c# project with .NET 4.6 and install roslyn. If you reference DesperateDevs.Roslyn you can use some utility methods already. I will probably make a video about it.\nMaybe a good idea to also ship a working code generator project with Entitas \ud83d\udc4d . I updated the diagram. Feedback very welcome. repost from @RomanZhu \n\nIn that diagram InputService validates input, checks amount of resources and creates command, then that command is executed without validation\n150 resources - 100 (command1) = 50 resources;\nWhat if we call that InputService twice or more? It will create 2 commands, as we can't change resources from Service. It means there are some validations needed when executing commands?\n150 resources - 100 (command1) - 100 (command2) = -50 resources\n\nYou are right. In my previous project I had sth similar as @StormRene described, an InputActionSystem in between the action and the command. This way you can do sanity checks like \"is there only one command or more\". I will probably re-add this to the diagram and my code, as this can be very useful.. @cruiserkernan yes. E.g. entity with ShootCommandComponent added. Hi, design question, what would you say? (follow up of the problem described by @RomanZhu)\nGiven as described in the diagram:\n- InputActionService validates input and creates command if valid\n- Commands execute without validation\nProblem:\n- more than 1 BuyItem input action. The service checks\ncsharp\nif (hasEnoughResources) {\n    createBuyItemCommand();\n}\nThe BuyItemCommandSystem.Execute:\ncsharp\nresources -= item.cost;\nSince we execute the command system later and therefore subtract the resources later, both inputs are valid, even if we don't have enough resources to buy the 2nd item.\n2 options I see:\n1. Have a BuyItemInputActionSystem that can do sanity checks like, is there only 1 entity, or, do we have enough resources to buy all items of all input actions and then create the commands.\n\nWe change the definition and the command system can also do sanity checks and doesn't apply changes without validation.\n\nWith option 1 what we end up doing is basically having almost identical systems:\n1. BuyItem reactive systems that does the validation\n2. BuyItem command system that applies the changes\nSeems really redundant somehow. What do you think?. Option 2 seems more redundant, but is also more flexible, since 1 input action can result in multiple different commands if needed. @RomanZhu I would say that's a game specific decision and doesn't apply for all scenarios. I'm currently updating my an example code to include the validation layer with reactive InputActionSystems to get a better feel for it.. I've re-did what we've used in my previous project with some changes. Here's my current setup:\n\nInputController (MonoBehaviour) emits InputActionEntity.BuyItem\nBuyItemSystem (reactive) will do validation and eventually emit CommandEntity.BuyItem\nBuyItemCommandSystem applies changes\n\nI removed InputActionService which is now replaced by individual systems.\nAll components, systems and systems wrapper are generated. So to add a new input action I add a field in this class:\n```csharp\npublic static class InputActions {\npublic const string START_ROUND = \"StartRound\";\n\n[Event, DataField(\"lane\", typeof(int))]\npublic const string JUMP = \"Jump\";\n\n}\n. Thinking about generalizing the input action components to only 1 component\nstring inputAction;\nDictionary data;\n```\nto be able to easily serialize and record inputs\n. That would already be possible now. Btw, until there's a way to automatically generate this, you can also create custom events that are based on multiple components.\nIn your case sth like IDamageFireRateListener with (GameEntity entity, float damage, float fireRate). I use sth like this already. good old manual coding :) no code generation. @nomadfighter \nalternatively, you can try a general component check like this:\ncsharp\nif (e.HasComponent(ActorComponentsLookup.View)) {\n    var view = (ViewComponent)e.GetComponent(ActorComponentsLookup.View);\n}\nThe ids used to line up across contexts, but I'm not sure if that's still the case. You'd have to check if the View index is the same in all the generated lookups. Btw, with the new events it's simple, the DestroyedComponent would have an [Event(true)] attribute and the views are IDestroyedListeners and can unlink and hide themselves. @FNGgames \n\nI don't mind having these systems that talk to views because they're only ever talking to my interfaces\n\nThat's exactly how I did before, too. If you think about, using the events, that's still exactly the same: a system will call a method that's implemented from an interface. The only difference is, these systems are now automatically generated and you don't have to write them + those systems work on all kinds of things, not only views.. @FNGgames Btw, thank you very much for your post. I love it :) Thanks for taking the time, I think it will help a lot of people who are new to all of this.. To answer a question from the chat:\n\nMy only question is about the Input -> Command -> Process. Is there an example of this because I have a hard time differentiating it from normal Inputs in the Input context then picked by Systems to be applied to Entities\n\nThis is an optional idea that some of use to streamline adding new features and inputs.\nEvery game has a finite set of inputs like jump, shoot, buyItem, etc. This diagramm is a suggestion how to deal with those inputs. The input action layer is validating them, the command layer is applying them to the game logic.\nTo be specific (Shoot example):\n- You create a ShootComponent with 2 contexts: InputAction and Command\n- InputController : MonoBehaviour creates new InputEntity with ShootComponent when mouseDown\n- Reactive ShootInputActionSystem is validating the input (e.g. can shoot? hasAmmo? is bullet cooldown complete?) and creates CommandEntitiy with ShootComponent (or not)\n- Reactive ShootCommandSystem does whatever needs to be done, e.g. create a new bullet entity that spawns in the game. the larger the game and the more inputs you have, the more important it becomes to have a defined way how to handle those inputs. This approach helped me managing this even with lots of inputs. see comments above\nhttps://github.com/sschmid/Entitas-CSharp/issues/610#issuecomment-367994419. Yes, that's the idea. Most of it can be generated as described in the comment above. So all I implement is just the execute of the input system and the command system. Everything else will be generated. # Recommendation\nIf you want to learn more about Unit Testing I strongly recommend\nClean Code - Advanced TDD\nIt starts from the very basics and goes deep into the matter.\nIt shows you why and how you should test, how it affects design and apis, and why tests can be considered more important then the actual production code.\nTDD is still a controversial topic for some. You can do if very strictly or without much discipline (but then you can just skip it altogether). If you just get started I suggest being very strict as it will train your mind to eventually produce better code down the line even if you decide to stop writing tests years later. Being disciplined and trying TDD the strict way personally made me a better dev.. @IsaiahKelly Thanks for your feedback. You have some very good points. After the basics are established, it sounds like a good idea to build such games as you suggested in one run, without going too much into the details.\nRegarding the interval of recording videos: I don't really know, I do them whenever I find some time.. I have no experience with .NET core2, so I don't know if it works or not. Hi. If renamed, the issue still exist. I suggest renaming EnableComponent because isEnabled is already taken. Maybe activated?. Ok thanks. Jenny is multithreaded and both jobs compete with disk write I guess. Not high prio, but will keep in in mind if I see sth. Afaik, because it is being used by another process is windows specific. Hi, not quite sure what you mean by that.\nUsually you group systems together in a Feature class. They will automatically appear in the Unity hierachy. DebugSystemsInspector.cs. Did this info help you? If so, you can close if you want. Fixed, especially important, if you don't use roslyn! . Will change to List and will add a generator for this\n```csharp\npublic partial class GameEntity {\npublic void AddColorListener(IColorListener value) {\n    var listeners = hasColorListener\n        ? colorListener.value\n        : new System.Collections.Generic.List<IColorListener>();\n    listeners.Add(value);\n    ReplaceColorListener(listeners);\n}\n\npublic void RemoveColorListener(IColorListener value) {\n    var listeners = colorListener.value;\n    listeners.Remove(value);\n    if (listeners.Count == 0) {\n        RemoveColorListener();\n    } else {\n        ReplaceColorListener(listeners);\n    }\n}\n\n}\n```. Hm, network code hasn't been changed in recent versions. I guess it's an IPv6 issue.\nCan you enter your actual local ip address instead of \"localhost\" and see if it works?\nJenny.Client.Host = localhost. Can I see the properties file, there might be sth setup not correctly. Since Jenny became its own project, it doesn't show the Entitas version anymore. Opening the Entitas Preferences in Unity shows the version in the title of the window.\nDid the issue resolve? Have you tried auto-import?. @rastlin86\nsee commit 9520928b62bcdee4c5c77aef738866135eaf0c00. Only if you used linq, e.g. group.Where().\nBut all foreach loops are unaffected. that's not a group, so that will still work. I should probably have a custom entity index that only get interactive entities and replace linq. But I probably won't :). @rastlin86 I added a new scene in the VisualDebugging project called Group Alloc\nsee PR https://github.com/sschmid/Entitas-CSharp/pull/625\nThe profiler said 0B gc alloc, so I'm happy.\nI compared those implementations\n```csharp\n+    void iterate() {\n +        switch (mode) {\n +            case GroupAlloc.Group:\n +                foreach (var e in _group) {\n +                    var i = e.myInt.myInt;\n +                }\n +\n +                break;\n +            case GroupAlloc.GetEntities:\n +                foreach (var e in _group.GetEntities()) {\n +                    var i = e.myInt.myInt;\n +                }\n +\n +                break;\n +            case GroupAlloc.GetEntitiesBuffer:\n +                foreach (var e in _group.GetEntities(_buffer)) {\n +                    var i = e.myInt.myInt;\n +                }\n +\n +                break;\n +        }\n +    }\n +}\n```\nIf the group count changes GroupAlloc.GetEntities will produce garbage, the other 2 are always 0 B. I replaced all my calls to GetEntities() with getEntities(buffer).\nThe different ways to iterate over the content of the group depends on the use case:\n1. The group content doesn't change\nUse GetEntities() and the result is cached and fast to iterate over\n2. The group changes size often\nDon't use GetEntities() because internal caching has to be updated all the time and produces garbage. If possible just iterate over the group. If you modify the group while iterating over it (as mentioned in Video Part 2) use GetEntities(buffer) to reduce gc alloc by reusing the buffer. Yes, please use auto-import again to use the updated plugin names. See release notes. No worries, happy coding :). Yes, can reproduce on windows. Will investigate. Jenny hasn't changed and is the same as 1.2 and 1.3, so it's kind of weird.\nLoading assemblies behaves differently on windows, it was a threading issue.\nAdded a fix. You can override the dll in the Jenny folder to apply the patch.\nDesperateDevs.Utils.dll.zip\nWill be in next release. @optimisez can you do -v so I can see what the problem is? Did it work before?. @optimisez you requested a properties file, here it is :)\nPreferences.properties.zip\n. Ok, fixed. Will be in next release. If you already want to patch the dll, here it is\nDesperateDevs.Utils.dll.zip\nOverride existing dll in Jenny folder and Entitas folder\n. Atm, the system execution order is defined by the order you add them to the systems. You can implement your own strategies how you want to add systems in a specific order if that makes sense for you. I would advice not to put the  information about the system order in the system itself as it will become impossible to keep the overview and control ones you have lots of system.\nInstead, I recommend having Feature classes like InitSystems, ExecuteSystems, InputSystems, etc and group your systems within those classes. Awesome! Thanks a lot! Must have been a oversight after the rather big code generator refactoring.. Thanks a lot! Happy you found and fixed this! Will merge. Hi, you are using 1.4.1? Did you update both, the Entitas folder in the Assets and Jenny outside of the Assets folder?\nCan you show me the component with the event attribute, it seems like it couldn't get the priority (3rd argument). I can only reproduce, if I don't pass a bool as the first argument (which will result in compiler error). Please check if you pass a bool like this [Event(true)] or [Event(false)]. fixed, DesperateDevs.CodeGeneration.Plugins.ProjectPath was not pointing to the correct project. looks like you updated Entitas but didn't unzip the new Jenny or ran auto-import.. The new interfaces changed name and end with *Entity now. IPoolable? :). Is that actual code from your game? Because, why input and sound is a IViewEntity?\nI don't think you need multiple contexts and interfaces for that at all. Hi,\nI understand. This has a very low prio for me which means I will probably never do this.\nYou can see how I solved it with ignoring namespace and suggest doing it the same way.\nsee: https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/Configs/IgnoreNamespacesConfig.cs\nIf you fork Entitas you can see how and where this class is used. To make my life easier I added method that returns the correct value\nsee: https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/CodeGenerators/CodeGeneratorExtentions.cs#L13-L15\nI guess you could solve the naming convention in the same fashion. Feel free to create a pull request if you added it.. @raincole by default, only public fields or properties are drawn.\nHowever, you can customize this by implementing your own IComponentDrawer\nSave the MovementComponentDrawer in a Editor folder and you can define how the component should be drawn.\nExample:\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Tests/Unity/VisualDebugging/Assets/Examples/VisualDebugging/Editor/PersonComponentDrawer.cs. I see you're using the events, I already like that a lot :)\nI don't have any insights into your game, but why do you need entities for the body parts? When you want to stick to the idea that the view maintain themselves then try only using the CharacterView or the BodyParts for the view logic. But sure, depending on your game you can also decide to control the view with systems and entities if necessary. Personally, I try to fully decouple the views from the game logic, as a result I don't have view components or view systems anymore.. Hi,\nwhen gameObjects are controlled by Unity Physics, e.g. Rigidbody, I have a system that syncs the position back to the entity. I only use it when I need to be able to react to the position.\n```csharp\npublic interface ISyncPosition {\n    Vector3 position { get; }\n}\npublic class SyncPositionComponent : IComponent {\n    public ISyncPosition value;\n}\npublic sealed class SyncPositionSystem : IExecuteSystem {\nreadonly IGroup<GameEntity> _entities;\n\npublic SyncPositionSystem(Contexts contexts) {\n    _entities = contexts.game.GetGroup(GameMatcher.AllOf(GameMatcher.SyncPosition, GameMatcher.Position));\n}\n\npublic void Execute() {\n    foreach (var e in _entities) {\n        e.ReplacePosition(e.syncPosition.value.position);\n    }\n}\n\n}\npublic class Rigidbody2DView : UnityView, ISyncPosition, IVelocityListener {\npublic override Vector3 position { get { return base.position; } set { throw new Exception(\"Rigidbody2DView.position must not be set!\"); } }\npublic override Quaternion rotation { get { return base.rotation; } set { throw new Exception(\"Rigidbody2DView.rotation must not be set!\"); } }\npublic override Vector3 scale { get { return base.scale; } set { throw new Exception(\"Rigidbody2DView.scale must not be set!\"); } }\n\nRigidbody2D _rigidbody2D;\n\npublic override void Awake() {\n    base.Awake();\n    _rigidbody2D = GetComponent<Rigidbody2D>();\n}\n\npublic override void Link(IEntity entity, IContext context) {\n    base.Link(entity, context);\n    base.position = _linkedEntity.position.value;\n\n    _linkedEntity.RemovePositionListener();\n    _linkedEntity.RemoveRotationListener();\n    _linkedEntity.RemoveScaleListener();\n\n    _linkedEntity.AddSyncPosition(this);\n    _linkedEntity.AddVelocityListener(this);\n}\n\npublic void OnVelocity(GameEntity entity, Vector3 value) {\n    _rigidbody2D.velocity = value;\n}\n\n}\n```. My next video will be about this topic. If you don't want to miss this, you can subscribe \nhttps://www.youtube.com/DesperateDevs. Match One - View\nMatch One - ViewService. context.GetEntityWithId(id) is a generated method when you use PrimaryEntityIndex. Here's another example\nMatch one - PositionComponent\nMatch One - GameBoardService. If it's about seeing the code, your IDE should be able to display it (decompile it)\nThere's no automated way to get the sources. You can fork Entitas and copy the sources from Entitas and the desired Addons manually. There might be a few places that need to be updated to work with the sources, but that should be easy to do.. Hi,\nit's not a but. ReactiveSystem base calls GetTrigger()\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Systems/ReactiveSystem.cs#L16-L17. The way I once solved this is that each player has a unique id. When you create the input entity (btw, I create new Input entities everytime and not reuse a single one, because you might have multiple inputs for each player) this entity will also contain the id of the player it belongs to. I have a single ProcessInputSystem where I apply the input on the corresponding player with GetEntityWithPlayerId. \n\nIm still confused its bad practice to use GetEntitiesWithPlayerId or not?\nGood practice! But would recommend a PrimaryIndex instead of a normal one for this case. The local InputController creates inputs for the local player. The NetworkController creates inputs based on the information coming from the network command which should contain the playerID\n. See Match One - InputController.cs\n\nand \nInputSystem.cs\nI suggest to create and destroy inputs all the time. Don't worry, Entitas is object pooling and reusing all entities and components, so creating and destroying entities is not a problem. Please open the Entitas preferences in Unity once and close it and see if this fixes the issue. When you open the Preferences, Entitas will automatically add missing keys. Make sure your properties contain these keys\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer. Your error says it couldn't find SystemWarningThreshold. Why is it called UnityPreferences, do you have multiple? If so, what does the button in the Entitas logo say?. Ok, then I need to try to reproduce.\nMaybe as a workaround (just guessing) add those keys also to the roslyn properties, maybe that helps. Are you using jenny and the roslyn code generator? If so, please try deleting the generated folder and generate again.. Hi, you can use group.OnEntityAdded +=\nThis will execute code immediately when sth changes.\nBut: I strongly recommend not using it and consider reactive systems instead.\nOnly use direct events when you're fine with the consequences. Consequences are less control over the order and that code in other places will be executed directly. Roslyn is using new .NET code and can not be run in Unity, that's why there is the standalone generator (Jenny). Always use the Terminal, external Generate Button or other ways to generate with roslyn. Not UML, but that's why we have somewhere in the wiki\n+------------+       +------------+       +------------+       +------------+\n|            |       |            |       |            |       |            |\n|   System   | +---> |   System   | +---> |   System   | +---> |   System   |\n|            |       |            |       |            |       |            |\n+------------+       +------------+       +------------+       +------------+\n+------------------+\n                      |     Context      |\n                      |------------------|\n                      |    e       e     |      +-----------+\n                      |        e     e---|----> |  Entity   |\n                      |  e        e      |      |-----------|\n                      |     e  e       e |      | Component |\n                      | e            e   |      |           |      +-----------+\n                      |    e     e       |      | Component-|----> | Component |\n                      |  e    e     e    |      |           |      |-----------|\n                      |    e      e    e |      | Component |      |   Data    |\n                      +------------------+      +-----------+      +-----------+\n                        |\n                        |\n                        |     +-------------+\n                        |     |      e      | Groups\n                        |     |   e     e   |\n                        +---> |        +------------+\n                              |     e  |    |       |\n                              |  e     | e  |  e    |\n                              +--------|----+    e  |\n                                       |     e      |\n                                       |  e     e   |\n                                       +------------+\n. Can you tell me, what is causing the gc alloc?\nSide notes, nice to know:\n- \"simple\" Matchers like GameMatcher.Position are cached and only alloc once\n- \"Complex\" matchers like AllOf().NoneOf are allocated new, but you can cache them manually if you use them often\n- There's only ever 1 instance of a group per given matcher, so allocs only happen when requesting a group the first time\nWhen profiling, make sure to turn of VisualDebugging to get more accurate results. If you have classes with the same name, you have to use namespaces. If you use namespaces, the code generator must respect them and prefix all components. You have to choice by setting Ignore Namespaces in the Entitas preferences.\nPersonally, I only use namespaces for libraries. I don't use any namespace for the game logic. Hi,\nsee release notes Entitas 1.5.0. @raymondleungmh\nIn general, it is possible to creates entities in a JobSystem. But you have to be careful if you have multiple JobSystem running in parallel creating entities, that can lead to race-conditions. If you are sure that only one JobSystem at time modifies the contexts / groups, then you're fine. On which Unity version are you?. Unity 2017.3 has known UI issues. See #583\n\nSolution: Don't click \"Continue and Overwrite\" with the mouse, but use the enter key on your keyboard.\n(I know, sounds weird, but works)\n. Are there errors in the console? Entitas should definitely work with your Unity version. Btw, if you plan to use the roslyn code generator plugin, simply press the Auto-Import file contained in the Jenny.zip.\n\nSee\nhttps://www.youtube.com/watch?v=L-18XRTarOM. I suggest closing the Entitas Preferences Window, open it again, and then use the enter when auto importing. If that doesn't work, it shouldn't really matter, because I think you will use the roslyn generator anyway which you setup by double-clicking the Auto-Imprt file, after you unzipped Jenny.zip into your project root folder as shown in the video. Glad it worked!. As mentioned in the release notes, there's a new EnsureStandalonePreProcessor which will throw when generating in Unity. If you don't like this behaviour, you can disable it. No problem at all :) . I see 3 common ways to do this:\n\nSystems know themselves when to execute\n```csharp\nclass MySystem {\n\nvoid Execute() {\n        if (context.isInBattle) {\n             // Battle logic\n        }\n    }\n}\n```\n\nSystems are managed by the parent system\n\n```csharp\npublic sealed class UpdateSystems : Feature {\nreadonly Contexts _contexts;\n\npublic UpdateSystems(Contexts contexts) {\n    _contexts = contexts;\n\n    Add(new MySystem(contexts));\n    // add other systems\n}\n\npublic override void Execute() {\n    if (_contexts.game.isInBattle) {\n        base.Execute();\n    }\n}\n\n}\n```\nInstead of hardcoding the condition you can also create a GuardSystem which takes a function to check a condition, so the GuardSystem can be reused for multiple scenarios.\n\nWhat @surferau suggested\n\n. You should see entities in the hierarchy that are marked with a red entity logo. By selecting them you can see which objects are still retaining them. \nIn your case it looks like the views (EntityLink) are still retaining them.\nI assume you are using the pattern of e.isDestroyed = true in combination with a DestryoEntitySystem.\nIf so, make sure to destroy all entities like this before calling battle.DestroyAllEntities();, otherwise your cleanup systems (e.g. DestroyEntitySystem) won't get the chance to do their job.. Hi,\nyou're right, [DontDrawComponent] only applies for custom drawers. Sounds like a good idea to make it work for all types.. Hi, can you show me the Preferences.properties?\nAlso try running jenny gen -v to get verbose output so I can see, what is going wrong. There is no Battle context defined the properties. Glad that it works now :). @lai32290\n@FNGgames summarized pretty good (as always ;)) first answer is a very common way to deal with timers and cooldowns.\nI'm just commenting to emphasize not to do the 2nd solution. Technically it works, but you would basically hide logic in a component, which you should avoid.. Hi,\nsounds like a good idea. I tried that in the past, but had problems with the post processor that updates the project to update the correct project. But I just had an idea, how I could tackle this issue.\nWill try to support for multiple project file if I find the time. Basically, if I add optional meta data to the CodeGenFile, e.g. project path, then the post processor can update the corresponding project. Hi,\nin order to make it work as I imagined, each data provider would have to specify the project path, so the post processor can map the CodeGenFile to the correct project. This would be a big change for an unusual case.\nIf you already found a way how to make it work for your setup, I'd prefer not to change the existing implementation.\nOr do you have another idea how this could be solved?. Hi, that's correct.\nAll paths specified in the properties file are always relative to the location of the properties file.\nIs there a reason why you can't have the properties in the same folder?. Ok, just followed up on the chat and saw your messages. Did you make progress, or do you still have issues?\nIf so, could you briefly outline your setup, so we can try to find a solution. Hi,\nThis was removed last year, see #310.\nRemoving all handlers might result in undesired behaviour, because reactive systems and entity indices which rely on those groups will break.\nI updated the comment in the group:\n/// Removes all event handlers from this group.\n/// Keep in mind that this will break reactive systems and\n/// entity indices which rely on this group.. Hi,\nyou can remove \nDesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor\nfrom the post processors in the properties file. Removing it will disable this post processor and the project file is not changed anymore.. Hi,\nVisual Debugging tries to draw components even for custom types. If there is a problem you can either\n- use [DontDrawComponent] attribute on the component class to prevent VD from drawing this component\n- Implement a custom ITypeDrawer and add your custom draw logic. did this help?. Closed bc inactive. Hi,\nDesperateDevs is not open source.\nIf you want source access we can negotiate sth.. Hi,\nsee Unity GUI bugs on Windows #583\nThis error doesn't affect the functionality of Entitas and can be ignored. Afaik, Unity has to fix this. They are currently using UnityEngine.Experimental.UIElements. Hi @kenofori,\nEntitas and Unity ECS are both implementations of Entity Component System Architecture. They share a lot of the same concepts, the implementation is different though.\nAs you might have seen from the YouTube videos, we introduced Entitas back in 2015 already. My advise that I can give you on what to learn first strongly depends on your goals. If you want to build and release a game this year, I recommend using Entitas. It's production ready, has been around for some years and is battle tested on multiple platforms like PC, mobile, VR, etc. There's a healthy community which can help and answer questions. There are also a bunch of helpful features that are not available in Unity ECS, like Reactive Systems and Entitas Events. We developed a lot of conventions and guidelines to solve most of the problems already, which is a huge benefit in my opinion.\nUnity stresses that their ECS is not production ready, but if you want to learn ECS I think it's worth checking out. Also, if you know that your game will require heavy multithreading, Unity ECS will be a great option because of their tight integration with the C# Job System. Keep in mind that apis might change in the future and that best practises will develop over time.\n@mzaks wrote a blog post about features that you find in Entitas which he misses in Unity ECS\nhttps://medium.com/@icex33/my-wish-list-for-unity3d-ecs-1f3985bbe308. You're welcome.\nThere are currently no plans to do so. But since I use Entitas professionally on a daily basis, I will keep it up to date and will improve it whenever I see potential enhancements. It's quite possible that Entitas can benefit from things like NativeArrays and the C# Job System. Sound like there was an issue with the code generator, probably changes in the properties file.\nIs this still an issue?. @wolfgang-wdw\nIf you spot areas that can be improved to better support multi threading I encourage you to make a PR. Unfortunately, I'm not working on a project that uses multiple threads atm, so my attempts to make Entitas safer would be based on artificial scenarios and probably incomplete.\nBut I'd be happy to exchange experience with you and make Entitas work better in your case!. .ToArray() works and is a fast and simple solution. But it will also allocate memory every frame for every event system. I'd like to avoid this, because I think in the majority of cases, we don't need that functionality and I don't want to have a general performance penalty.\nI will probably first try copying to a buffer list. Not 100% happy with this solution, because of the double iteration. But I will add it so people can use the feature and keep it in mind. Maybe we can come up with a better solution.\nI was also thinking about Unity's NativeArray, but I think you cannot use it without Unity.. Is this still an issue? I'm using Unity 2018.1 and I'm not experiencing any issues. A very high level summary would be:\n- All data is in components (e.g. imagePath, title, description, position)\n- All logic is in systems (e.g. ShowSelectedThumbnailSystem, RatingSystem)\n- Components can be added to entities in any combination\n- Entities are created, managed and destroyed by a context\n- I recommend starting with a one context for the app, e.g. GameContext, and one for input, InputContext\nMatch One is a good starting point.\nThe links provided by @StormRene are a good to learn more.\nThe videos on the Desperate Devs YouTube Channel should help, too\nhttps://www.youtube.com/desperatedevs. I'm using Entitas on a daily basis. Personally, there's nothing missing for me atm. There is no roadmap other than if you guys come up with features and requests. I have nothing big planned atm but I'm open for improvements!. I follow this diagram #610 \nYour use case mentions what I would put in the View layer. Entitas is powerful and very useful for the game logic part. I would probably implement what you described in Unity. Hi,\nentity index only works on field of components.\nBut you can easily create you own custom entity index (example from the unit tests)\nor even simpler, add a generic one directly to the contexts in the beginning of your app\ncsharp\n        player.AddEntityIndex(new Entitas.PrimaryEntityIndex<PlayerEntity, int>(\n            \"Magic\",\n            game.GetGroup(PlayerMatcher.MagicComponent),\n            (e, c) => ((MagicComponent)c).Index));\nsee https://github.com/sschmid/Match-One/blob/master/Assets/Sources/Generated/Contexts.cs#L67-L70. A while ago you needed a separate project for the code generation part. This is why I create EntitasPure, so people have a starting point with the generator project already set up.\nWith the newer versions of Entitas, we don't need that anymore.\n- Unzip Jenny.zip to your project root\n- run .\\Jenny\\Jenny.exe new Entitas.properties (don't navigate into the Jenny folder, but the project root)\n- open and update all values in Entitas.properties\n- run .\\Jenny\\Jenny.exe auto-import -s\nfrom then on you can run .\\Jenny\\Jenny.exe gen or the more convenient way .\\Jenny\\Jenny.exe server\n. Your c# only project needs to reference all dll that are not in the Editor folder\n. @mchamplain looks like the icons in the images folder are not found, or rather the meta files which contain the labels for those icons. VisualDebugging initially searches for those icons based on labels.\nAre they missing?. Any news?. Ok, great.\nBtw, meta files should always be in version control, too. They may contain important information. @DeusExMachina1993 Maxim never released it so far, but I think if we keep metioning him enough, he will probably do so ;) @mzaks . @mzaks ;). @quabug Thanks!\nIn the meantime you can either use [DontDrawComponent] to tell VisualDebugging not too draw the component or implement a custom IComponentDrawer for that component. Closing because issue can be resolved with\n- [DontDrawComponent]\n- custom IComponentDrawer\n- custom ITypeDrawer. Thanks, I hope one of those 3 solutions helps\nSee https://github.com/sschmid/Entitas-CSharp/issues/711#issuecomment-395481952. Awesome, thanks!. @aammfe please run Jenny from the folder where the properties file is. By default, this should be the root folder of your project.\nDon't navigate into the Jenny folder, but run in from the project folder\n.\\Jenny\\Jenny.exe auto-import -s. did this help?. I just check, there's a video already. I will most likely go for\n```\n[Event(EventTarget.Any)]\n[Event(EventTarget.Entity)]\n// or\n[Event(EventTarget.Self)]\n```\n. Hi,\nyou can find an empty *.userproperties file in your project folder. You can use that to overwrite existing keys in your properties file. \nThe idea is to put *.userproperties in your gitignore and team members can overwrite settings if necessary.\nHope that help. To overwrite a setting selectively add lines you want to overwrite to your own userproperties\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = %project_name%.csproj. The generated code should be the same across all machines. Are you sure, the config is setup correctly for everyone?. The code generator is not aware of the IDE. It doesn't matter which IDE you are using. I have the feeling that the properties file might not be set up correctly.\nWhat is the difference of the generated code?. Is that true for all components or just the health component?. Please check GeneratedFolder/%ContextName%/Components\nand see if this folder has all your components.\nI cannot think of a case, where not all components are generated, so I still think the properties is not set up correctly.\nTo test this, you can delete the properties file on the affected machine, open Entitas Preferences window which will regenerate it, then run jenny auto-import -s, double check the project path and see if it works \n. The rider log contains \"GameHealthComponent.cs\", looks good to me.\nVS log additionally contains \"Components\\HealthComponent\" which is weird.\nThis file will be generated, if Health doens't implement Entitas.IComponent, so there's sth wrong.. Double check if HealthCompoent implements the proper IComponent interface. Components\\HealthComponent should not exist. I would be interested in a diff of the project files. In the past, VS has already produced different project files which affected the the roslyn parser. . Sure, I understand. No need to share the project file. Can you do a local diff, just to see if there are any differences. E.g. in the past, this happened #503. Ok, I can update the pre processor to support this change. Patch file\nDesperateDevs.CodeGeneration.Plugins.dll.zip\n. If you have selected this plugin in the properties, then yes. If you selected the one in the entitas folder, then replace that one. hm, the update removes both in my tests\n<TargetFrameworkProfile>Unity Full v3.5</TargetFrameworkProfile>\n<TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile>\n. did you restart jenny server?. -a ?. :) I remember, -a was \"keep alive\", a feature that has been replaced by jenny server. Please patch the dll in DesperateDevs and Entitas.Roslyn. ok great! glad we found a solution. @franklzt Thanks for your contribution.\nUnfortunately Rene is right and I cannot merge your PR.\nThanks. Hi, thanks for your PR.\nI don't think the added benefit of \ne.PlayerPlayerName\n// vs\ne. player.PlayerName\ncan justify the additional binary size and method count.. Hi, not sure if that's the reason, but try right-click on the nspec dlls and unblock them in the preferences.. Hi, you're right. I should probably change this.\nCurrently all events are set to null when resetting which means, the observer is not notified anymore. Updated dll\nEntitas.dll.zip\nReset only call\n            DestroyAllEntities();\n            ResetCreationIndex();\nAdded\n            RemoveAllEventHandlers\nLet me know if that works better. I think that's not needed anymore with the fix.\nBut here's the method that gets call automatically\nhttps://github.com/sschmid/Match-One/blob/master/Assets/Sources/Generated/Contexts.cs#L93-L100. Hi, Entitas 1.6.0 has changes that may affect jenny in existing projects. See release notes to see what changed.\nChanges marked with \u26a0\ufe0f are breaking changes and require user action\nhttps://github.com/sschmid/Entitas-CSharp/releases. taken from the release notes\n\nPlease run jenny auto-import -s or modify Preferences.properties to update the paths to the plugins if necessary\n\nHope that helps. More information:\nThe paths of the jenny plugins changed. Desperate Devs dlls where extracted to their own folder.\nauto-import -s should automatically find the plugins at their new location. Here's and example taken from Match One\nthe paths changed, see diff\nhttps://github.com/sschmid/Match-One/commit/1b34e4f6defde37d268d5be8f0a4bafa9befe25e#diff-0c9f719b38f967155a05afb016f41708. Hi, yes, deleting a component should result in deleting the generated code, too.\nIf you don't use the roslyn code generator (comes with the asset store version) and you use the default generator in Unity, the code is not deleted automatically, because the default code generator only works when there are no compiler errors.. Hi,\nI'm not aware of jenny locking any files, especially .bak files. Windows is known for locking files.\nDI you use custom generators? If not, check your properties file and try removingLibrary/ScriptAssemblies from the search paths or Assembly-CSharp.dll from your plugins if it's set. Yes, you can specify the port\nStarting with Entitas 1.6.1, there is a new setting\n\nAlternatively, open your properties file and update these keys\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost. Hi,\nhere's a discussion about that\n609\nHere's how I use services in Match One\nhttps://github.com/sschmid/Match-One/tree/master/Assets/Sources/Services\nHere's how the services is used in a system\nhttps://github.com/sschmid/Match-One/blob/master/Assets/Sources/Systems/Game/Systems/GameBoard/Systems/FillSystem.cs\nPersonally, I use my own DI solution instead of .singleton, but the idea remains the same.\nI don't use static helper methods, because you cannot mock them in unit test or partially override them.\nI wouldn't use components for those dependencies, because you can avoid the overhead of components for those cases. We solved a similar issue by introducing the DestroyedComponent and deferring the actual destruction of the entity to the end of the frame.\nYou can use the same approach for removed faces.\nOnce you call e.RemoveXyzComponent() the components is removed immediately. If you still need this data a later point of time, you must not remove it.\nIf removing the face only happens when you destroy an entity, you can just react do GameMatcher.Destroyed and filter for e.hasFace.. Hi, yes that's true.\nEvent tags currently only work on components\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/Component/DataProviders/ComponentDataProvider.cs#L96\nI could probably add this to dataFromNonComponents, too.. My suggestion is not to use reserved keywords. Feel free to create a pull request with this implementation, see we all can enjoy components with reserved keywords :). ref #756 . Hi,\nEntityLink comes with Entitas to link GameObjects to entities for Editor convenience.\nTo add a link to a gameObject, do this\nMath One - View Service\nTo get the link from a gameObject do this\ngameObject.GetEntityLink()\n. EntityLink is not added automatically by Entitas, you're in full control.. Thanks for your PR. I merged it in \ud83d\udc4d . @tony707 did you run jenny auto-import -s and choose roslyn, maybe this will solve the issue. Would you mind sharing your properties file?. I haven't checked, but I guess roslyn should be able to parse net core 2.0 projects. If so, it will be possible to support. If the current roslyn plugin doesn't work, we only need to update ComponentDataProvider and EntityIndexDataProvider and we should be fine. Can you share more details on what didn't work?. Hi, I see you already created an issue here\nhttps://github.com/mzaks/Entitas-Lang\nit's maintained by @mzaks so hopefully he will reply\nUnfortunately, I cannot help here.. true, this repo references and showcases tools from other people, too. It might happen that people don't update their code when Entitas is updated. Entitas-Lang is open source and can be maintained by the community and people who use it.. @lcals \nThere is no remove method on systems.\nTry to design your systems in a way so they don't do anything if not needed. Alternatively, have a separate parent systems that you can execute differently, e.g. AlwaysOnSystems in Update() vs. OtherSystems only when a certain condition is met\n. Thanks for sharing!. Clarification:\ne.isPaused = true should only throw, if there is an entity with this component already.\nIt will still be possible to flag entities like this.. >@yosadchyi\nAutomatic download after installation?. Luckily, I was able to resolve this issue with Unity. Jenny.exe will stay and will be accepted.\n\ud83d\ude0d. Hi @VirtualMaestro,\nI just tested and everything worked as expected\n```csharp\nvar entity = contexts.game.CreateEntity();\nconst int componentIndex = GameComponentsLookup.My;\nvar component = entity.CreateComponent(componentIndex, GameComponentsLookup.componentTypes[componentIndex]);\nentity.AddComponent(componentIndex, component);\nConsole.WriteLine(\"entity.hasMy: \" + entity.hasMy);\nConsole.WriteLine(\"entity: \" + contexts.game.GetEntityWithMy(false));\n```\nentity.hasMy: True\ncontexts.game.GetEntityWithMy(false): Entity_1(*3)(My)\nI couldn't reproduce your issue. Did it work out for you in the meantime?. To identify the issue, please tun jenny gen -v\nWhen the logs are printed, is there some point where it takes a long time waiting? If so, where?. Ok, so here:\n```\nOpened RopeRunnerUnity\nParsing RopeRunnerUnity\n<------ Takes long time here?\nComplete RopeRunnerUnity\n```. @ip Entitas uses HashSet for entities in contexts and groups. I remember my tests for determinism suggested that contexts and groups (and therefore systems, reactive systems and collectors) are deterministic.\nI suggest to find out if hashsets are really deterministic, because I have the impression that there are different opinions on that. Again, my tests show, they are, but you're invited to prove me wrong.\nOn that note, Entitas is not ordered or sorted, meaning, entities won't necessarily be iterated in the order they were created - deterministic, but not ordered.. Hi, both exist\nEventType (removed)\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Attributes/Entitas.CodeGeneration.Attributes/EventAttribute.cs#L24-L26\nEntity (OnComponentRemoved)\nhttps://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Entity/Entity.cs#L18-L21\nHope that helps. Rolling back to a snapshot for every wrong prediction sounds pretty intense. Depending on the size of your contexts, this might be a expensive thing to do. What about saving important data + framecount in the prediction, so you're able to undo the prediction and recalculate from a specific framecount?. Hi, yes I was thinking to sell Jenny as a standalone tool. It's really flexible and also works completely without Entitas.\nI was thinking to sell it on the Asset Store, because it's convenient and probably most of the people use Unity.\nBut I'm open to suggestions. I'm not familiar with other stores, so if there are great alternatives, let me know. Hi, should actually still work.\nDid you update the Entitas folder in Assets + the Jenny folder in the root of your project?\nI see the searchPaths look a little bit messy. Can you please try this:\ninstead of the current paths\nJenny.SearchPaths = Assets/Entitas/Editor/Plugins/DesperateDevs, \\\n                    Assets/Entitas/Editor/Plugins/Entitas, \\\n                    Assets\\Entitas\\Editor\\Plugins\\DesperateDevs, \\\n                    Assets\\Entitas\\Editor\\Plugins\\Entitas, \\\n                    Jenny\\Jenny\\Plugins\\Entitas.Roslyn, \\\n                    Assets\\Libraries\\Entitas\\Editor\\Plugins\\DesperateDevs, \\\n                    Assets\\Libraries\\Entitas\\Editor\\Plugins\\Entitas, \\\n                    Jenny\\Plugins\\Entitas.Roslyn, \\\n                    Assets\\DesperateDevs\\Editor\\Plugins, \\\n                    Assets\\Libraries\\Entitas\\Editor\\Plugins, \\\n                    Assets\\Entitas\\Editor\\Plugins\ncan you please just set it to \nJenny.SearchPaths = Jenny\nand then run jenny auto-import -s\n. Thanks for the very detailed comment, that helps a lot \ud83d\udc4d \nThe properties file looks correct to me, I would actually expect it to work.\nSince it doesn't, please try this:\njenny scan\namongst others, the output should contain those classes\n...\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventEntityApiGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventSystemGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventSystemsGenerator\n...\nCan you check if they are present?. for all the vim lovers ;)\njenny help\n```\n[...]\nMenus\nDown, Right, j, l          - Select next\n  Up, Left, k, h             - Select previous\n  Home, a                    - Select first\n  End, e                     - Select last\n  Enter, Space               - Run selected menu entry\n[...]\n```. Hi, thanks for the suggestion. I will try to find time to create a performance test, to see see the benefits \n\ud83d\udc4d . Interesting, I remember a long time ago, when I added component pooling, I was explicitly testing\nCreateComponent\nvs\nCreateComponent\nand the latter was faster. Tested again now and it's the other way around. I will update the generated code!. Passing in the an entity factory method speed things up by a factor of 2x, very nice!. Sure, I could rename to .entitas but they are actually properties files. I'd like to keep that extension because it's a known ext and will be recognized by text editors and IDEs. It's similar to other libraries that require a xyz.json file, and people know which syntax the file format supports\n. Jenny is bundled with Entitas, but I'd like to see it as a standalone project. Jenny is able to read any *.properties file. reminder: remove Jenny.Ignore.keys. @wpp1983 \n\nretain link bug\n\nAre you talking about EntityLink?\n. Summary:\nThe nature of reactive systems is to aggregate changes until you call Execute() the next time. When calling Execute() it will process all changed entities with their current set of components and corresponding values once. That's intended behaviour.\nIn order to react to any change immediately (and therefore outside of your defined system loop) is to use group observers as @StormRene mentioned.\nThis is not recommended for normal use, because it triggers code immediately and doesn't follow your system loop. In my experience there is just a very small set of use-cases, where you should favour group observers over reactive system.. Hi,\nindeed, I've seen this too :D This error message might be confusing, you are right.\nDesperateDevs is not part of the Entitas project, I will take a look into this.\nFyi:\nKeyNotFoundException is usually thrown by the Properties.cs class, when a key is requested that doesn't exists, e.g. when the Preferences.properties is not yet configured. 1.7k... rene is going for the world record ;). @zsydeepsky it would affect the memory footprint per entity, but not really the runtime performance. Entities will be reused, so once created you won't allocate the array again and again. If you want to know the exact numbers, you can can calculate numComponents * sizeOf ref to get the memory consumption of the component arrays. @StormRene do try to keep the parent systems as flat as possible to reduce method calls, or are you going clean with tons of sub parent systems?. It'a already set to .NET 3.5. Hi, I don't quite understand what you're suggesting. Can you rephrase please?. > 55s to 12s\n???\nReally? Usually it should take 1 or 2 s. Or is this a performance test?. Sure, would be great if you could post it here and explain, what is actually improving the performance. @CCludts I'm about to add this soon. Did you make any improvements in the meantime that I should consider adding?. Hi,\nmay I see you properties file?. jenny auto-import -s will fix the issue\nYour properties file contains ComponentDataProvider twice.\nWhen prompted by jenny to resolve plugin collisions, choose the one with roslyn in the name. great! you're welcome. Yeah I know, that's probably just me being me :) I always look at code and when I see the XML comments I always think I'm a human not a html parser. So I got rid of the tags. The IDE was still able to display documentation help popups - but the I switched from deploying Entitas source code to dlls... Now the docs are gone :( I never updated it.\nEventAttribute has no docs yet. > turn on the XML-Document \nAwesome thanks! I remember now. Hi, please let's keep the communication in english, so we can all participate, help and learn. Hi,\ntry this: add the folder of Foo.dll to the Jenny.SearchPaths.\nMy guess: It cannot fully resolve the type 'Color' to 'Foo.Color' and then I automatically fall back to the actual used name 'Color'. If roslyn is able to resolve the type (e.g. when it's in the same assembly) it will use the fully qualified name.\nHopefully adding the path to the search paths helps. If not, let me know. Cannot reproduce, works for me.\nWith which .NET version is the dll compiled?. I hope your fine with the workaround. Sorry that I couldn't reproduce. When in doubt, you can send me stripped down demo project with you specific setup so I can try. Will close the issue for now. @phoenix1917 Thanks, well spotted :) \ud83d\udc4d\nWill be fixed soon. @LukeChen The code generator should still. Can you show your Preferences.properties file. You will find this file in the project folder on the same level as the Assets folder.\nAlso make sure that in the Unity Player Settings you chose .NET 4.x. Here's a link with common pitfalls. Please check and see if that helps\nhttps://github.com/sschmid/Entitas-CSharp/issues/803#issuecomment-427126471. EntityBehaviour can be expensive when there are thousands of entities.\n- Updating the GameObjects name is expensive\n- If the Entity changes each frame entity.ToString() is very expensive\nFor comparison:\nleft: as is right now\nright: no ToString()\n. I tried not to change too much and do small improvements. By simply ignoring component.ToString(), which is probably not often used (e.g. Entity_0(*1)(Position(1, 2, 3))), we can safe 40% already.\n. btw, the main reason I include all components is to able to search and filter entities. Hi, you might wanna pull from\n#799-visual-debugging-performance\n\nreduced e.ToString() cache invalidation\nalways using component.ToString()\nadded object pool for EntityBehaviour\n\nI'd like to have some feedback from you guys, if the performance is better and if it's good enough, or if there are more areas that need opimization. Thanks!\n. You're still able to use the hierarchy search and custom component.ToString() still works, but the overall performance should be way better now.\nSee diff\nhttps://github.com/sschmid/Entitas-CSharp/compare/feature/%23799-visual-debugging-performance. Yes, that\u2019s the plan. I just wanted to hear feedback already because I don\u2019t have projects where visual debugging is an issue. . For your convenience, here' a precompiled version of the latest version incl. the Visual Debugging improvements:\nEntitas.zip\n. Any feedback welcome ;). @Chompetto did you manage to make it work?\n. @Chompetto feel free to close the issue, if you don't have any further questions. Hi,\nthanks for the logs. Looks all good (except that there are no components generated)\nI will do some blind guesses just to rule out common issues:\n1. Correct project name\nI see it successfully parsed the project\nOpened Assembly-CSharp\nParsing Assembly-CSharp\nComplete Assembly-CSharp\nSo I guess the path to your project is correct and is Assembly-CSharp.csproj\nJust to verify, is this correct? (sometime the generated Unity cs projects are called .csproj)\n2. Correct component declaration\nCan you pick any component from the Assembly-CSharp.csproj and post the source?\nMake sure it inherits Entitas.IComponent\n3. .NET setting in Unity\nIs your project set to .NET 4.x?\nIf not, can you switch and try again?\n4. Open C# project in Unity\nIn Unity click the menu Assets -> Open C# project\nThen open Assembly-CSharp.csproj in a texteditor to see the xml.\nSearch for TargetFrameworkProfile. Can you find a line with this? If so remove the line and try generating again\n. Great to hear!. Hi,\nwhen you select the retained entity in the hierarchy, you should be able to see who is retaining the entity. @benzsuankularb I added a new wiki page with a step by step guide, how to set up a C# only project with Entitas\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Entitas-pure-C%23\nI hope this helps. I will dump a few images here, so I can reference them in the wiki\n\n\n\n\n. What's the .NET version of the project?. @kkohno \n\nJenny have bug with pure C# projects\n\nNot quite sure what you mean. You can specify any folder. . @benzsuankularb \nAs described in the wiki\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Entitas-pure-C%23\nhere's a working project\nhttps://github.com/sschmid/EntitasPure. Installed dotnet 2. First impression, csproj works differently. Source files are not listed but recognized. To fix compilation, I removed DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor to prevent <Compile Include=\"...\">\nHave to investigate further. My guess, since the project file is empty, no components are found. > Duplicate 'Compile' items were included. The .NET SDK includes 'Compile' items from your project directory by default. You can either remove these items from your project file, or set the 'EnableDefaultCompileItems' property to 'false' if you want to explicitly include them in your project file. For more information, see https://aka.ms/sdkimplicititems\nTry setting 'EnableDefaultCompileItems' property to 'false'. I readded DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor and added\n<EnableDefaultCompileItems Condition=\" '$(EnableDefaultCompileItems)' == '' \">false</EnableDefaultCompileItems>\nto the projects <PropertyGroup> and readded Program.cs and HealthComponent.cs\nCode Generation and updating the project works now, but still no component generated\n. Seems to be an issue with the netcore csproj, works with .NET csproj. This works as a workaround for net core solutions:\nAdd a new .NET 4.x project for all your components within your solution with a standard jenny setup and reference this project in you net core project. All components and generated code will be in the .NET 4.x project, all your production code in the net core project\n. If components use custom datatypes as fields, those obviously have to be in that project too.. I strongly recommend having a simple matcher like GameMatcher.A in the trigger and do additional filtering in Filter()\nWith the example posted above, I can pretty much guarantee that it's not doing, what you're expecting. To give you a simpler example:\nImagine a collector with AnyOf(A, B)\nThis is a simple example, but many people already get it wrong. Here's why:\n- add component A: system will be triggered\n- add component B: system is not triggered, because entity is already in the group.\nIt gets even more unintuitive when using noneOf.\nUsually the system is only triggered by 1 thing. Use the filter do make it process only a specific subset of entities.\nBut to answer your question: You can use sth I call multi-reactive system\nprotected override ICollector[] GetTrigger(Contexts contexts)\n{\n    return new ICollector[] {\n        contexts.game.CreateCollector(GameMatcher.A),\n        contexts.game.CreateCollector(GameMatcher.B.Removed()),\n        contexts.game.CreateCollector(GameMatcher.C)\n    };\n}\nYou can return an array of collectors. This way the system is trigger when any of those collectors are filled\n. What do you guys think about removing IListener and replace it with\ncsharp\npublic delegate void OnPosition(Vector3 position);\ncsharp\nvar listener = contexts.game.CreateEntity();\nlistener.AddPositionListener(p => transform.position = p);. Just submitted PR #827\ncsharp\n[Event(EventTarget.Self), Event(EventTarget.Any)]\npublic sealed class PositionComponent : IComponent\n{\n    public Vector3 value;\n}\nwill generate IPositionListener and IAnyPositionListener\n```csharp\npublic void OnAnyPosition(GameEntity entity, Vector3 value)\n{\n    UnityEngine.Debug.Log(entity.creationIndex + \" Position: \" + value);\n}\npublic void OnPosition(GameEntity entity, Vector3 value)\n{\n    UnityEngine.Debug.Log(entity.creationIndex + \" Position: \" + value);\n}\n``. Need to update roslyn generator and namespace support. Will be in next release.. Delegates might be more flexible, but currently I also prefer IListener being more explicit.\nIn order not to break existing code when adding a second event attribute at a later point of time, \"Any\" will always be prefixed. I think that's a good fit as it describes the intend even more. Thanks for the detailed description.\nLast week I tried updating to the latest roslyn version and got a similar error withMicrosoft.CodeAnalysis.Workspaces.Desktop.dll`\nCurrently not sure what's going on.... Not quite sure what you mean with downgrading, I'm using brew install mono and the latest stable version is 5.14.0.177 and Jenny works with that version. ok, I see, a manual download is available at the mono website (5.16)\nI recommend to install mono (and basically any tool) with homebrew. Awesome! Thanks for the heads up!. Happy to hear that!\nI addressed those issues in Entitas 1.13.0 and updated roslyn. I also found a better way to bundle msbuild. The next release will probably contain all the latest and greatest!. Hi, thanks for you PR.\nBut I have to say that I think that this is a bad idea.\nThis change basically hides exceptions and doesn't fail. This will make it impossible to scale up your game. My motto: crash hard and early. Otherwise you cannot fix the actual bugs and you will have unexpected follow up errors that potentially doesn't have anything to do with the original exception.\nThere are use-cases where it's valid to silently catch exceptions, but not in the reactive system.. Ah, I understand now. It's not catching the exception, it just prevents the followup exception EntityIsAlreadyRetainedByOwnerException not spam the console. I have to correct myself then, this is a good idea. Sorry, I initially though it's just catching the exception, which obviously wouldn't be such a great idea.\nThanks for clearing things up! \ud83d\udc4d \nWill be in the next release. For performance reasons context.GetEntitiesWithGameObject returns the internal hashset used to store the entities. As with many other collections, you cannot modify them while iterating over them. e.RemoveGameObject() updates the group and therefore modifies the collection. There are 2 recommended options:\n1. \ncsharp\nvar group = context.GetEntitiesWithGameObject(gameObject);\nforeach (var e in group.GetEntities()) {\n    e.RemoveGameObject();\n}\nThis returns a new array which makes it safe to modify the hashset. The array is cached, meaning if you call GetEntities() multiple times while the group hasn't changed you don't allocate unnecessary memory. However, a new array will be created once the group changes.\n2.\n```csharp\n// instance var\nreadonly List _buffer = new List();\nvar group = context.GetEntitiesWithGameObject(gameObject);\nforeach (var e in group.GetEntities(_buffer))\n{\n    e.RemoveGameObject();\n}\n```\nThis will fill the buffer. Useful if the group is expected to change often. You manage the memory manually with the buffer, avoiding to create many arrays\n. Yes, because you use [EntityIndex]\nYou can do gameObject - entity relations with EntityLink. \ud83e\udd26\u200d\u2642\ufe0f sorry :) I was somewhere totally different in my head. It's not about groups, it's about the entity index, my bad.\nJust use ToArray()\ncsharp\nvar entities = context.GetEntitiesWithGameObject(gameObject);\nforeach (var e in entities.ToArray()) {\n    e.RemoveGameObject();\n}. Great to hear! You're welcome!. Renamed\nIPreProcessor\nIDataProvider\nICodeGenerator\nIPostProcessor\n. DesperateDevs.CodeGeneration. Here are the dependencies\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Libraries/Dependencies/DesperateDevs. Have fun :). @felippeduran thanks for pointing out. That was actually a bug. MultiReactiveSystem didn't remove duplicates when an entity was collected in multiple collectors. Fixed it in Entitas 1.9.1\nhttps://github.com/sschmid/Entitas-CSharp/releases. @XiaoJueMing \nStormRene is correct. Generally there is no order in groups and reactive systems. If your logic relies on a specific order you can sort them before processing them, e.g\ncsharp\nprotected override void Execute(List<TestEntity> entities) {\n    foreach (var e in entities.OrderBy(e => e.creationIndex))\n    {\n         // do sth       \n    }\n}. Do you use the roslyn generator? If so, you need to either wait for the AssetStore update, or you can manually overwrite the plugins in the Jenny folder. The code generator was updated. Quickest way to fix it is just to generate.\nIf you don't use the roslyn generator, open the generated context files and add\ncsharp\n() => new GameEntity()\nas a last argument, e.g\n```csharp\npublic sealed partial class GameContext : Entitas.Context {\npublic GameContext()\n    : base(\n        GameComponentsLookup.TotalComponents,\n        0,\n        new Entitas.ContextInfo(\n            \"Game\",\n            GameComponentsLookup.componentNames,\n            GameComponentsLookup.componentTypes\n        ),\n        (entity) =>\n\nif (ENTITAS_FAST_AND_UNSAFE)\n            new Entitas.UnsafeAERC(),\n\nelse\n            new Entitas.SafeAERC(entity),\n\nendif\n        () => new GameEntity() // <------------- add this to make it compile\n    ) {\n}\n\n}\n```. I updated the release notes\nhttps://github.com/sschmid/Entitas-CSharp/releases/tag/1.9.0\nThanks for letting me know!. @MkVno2 No problem, don't worry. I reverted it. no problem, it's easy to revert. will close and not change for now. With next release I was referring to 1.11.0\nI guess you're using namespace and set \"ignore namespaces\"\nI'll need to check. Checked, it works.\nWhat's your issue?. Are you using roslyn? If so, you have to wait for the Asset Store version to come out.. The asset store version comes with the roslyn code generator and Jenny (standalone cli code generator) which is strongly recommended because it works when there are compilation errors in your code. It will save you a lot of time and you will have no issues generating code.. Hi,\nthat's weird. When you start jenny server it opens a socket connection based on your properties (usually localhost / 127.0.0.1) to receive commands like gen.\nI just checked the code. The connection goes both ways, that means you can type when the server runs and the client will be notified. I think I can remove that code\ncsharp\nwhile (true)\n{\n    server.Send(Encoding.UTF8.GetBytes(Console.ReadLine()));\n}\nI will take a closer look soon and keep you updated. The while keeps the server alive and prevents the program from early termination, but I can remove Console.ReadLine()\nIf I get this correctly, when jenny is idle it basically stops at Console.ReadLine(). A quick check on my machine resulted in 0.0% cpu usage when idle. Ok, I'm glad you could resolve your issue. Starting jenny for the first time will load both the jenny program and your project. If you use jenny server it only load it once, that's why it's faster after you generated the first time. I'm not aware of a way to create a cache or sth like that. That's why I added jenny server in the first place, to basically prevent loading the program and project multiple times. Hi, in an earlier version of the event feature it was actually the way you described.\nIn order to avoid checks like if (entity.isPressable == true) I changed the api to\nOnPressable and OnPressableRemoved\nYou can It's possible to listen for removed events already\nExample:\ncsharp\n[App, Unique, Event(EventTarget.Any), Event(EventTarget.Any, EventType.Removed)]\npublic sealed class AsyncLoadingComponent : IComponent {\n}\nwill result in\n```csharp\npublic void OnAnyAsyncLoading(AppEntity entity) {\n    gameObject.SetActive(true);\n}\npublic void OnAnyAsyncLoadingRemoved(AppEntity entity) {\n    gameObject.SetActive(false);\n}\n``. Hi, Roslyn will parse the project file, does Unity create a different csproj file? . Thanks for sharing!. I'm not sure, so I'm guessing: does it work if you have only english letters in the path name?. Hi, just to narrow down possible, could you just runJenny/Jenny.exe`, this will start the Jenny Wizard. Could you test and create a new Jenny.properties with the Jenny wizard and do auto import everything automatically? Maybe that helps. Hi, thanks for pointing this out, Just released Entitas 1.12.2 that contains a fix for that!. This could only work with the roslyn generator and I think it won't even work properly with roslyn. You cannot infer if it's a ContextAttribute or any other attribute. Adding a new [MyContext] can be parsed, but since the type doesn't exist yet, you cannot check if it's a ContextAttribute or not. Generating a ContextAttribute for unknown types is not very robust. @wpp1983 if you do deep profiling and expand the selected line, you can exactly find out what's producing the allocations. Btw, when you profile, it's recommended to disable visual debugging to get more accurate data. Hi, not sure if that's a good idea. Starting jenny server initially reads a Jenny.properties. Based on this file it initializes everything like listening on the specified port and parsing the specified project.\nUsually you run jenny from the same folder where the properties file is located. This way you can specify relative paths instead of absolute paths in the properties, which you need to do when working in a team or on different machines. You can also run multiple instances on different ports per project.\nWhen you start a agent like this you'd need to hardcode it to a certain project, I don't think that's what you want?. Or wait, I need to check if you can pass in different properties files like\njenny client gen Jenny.proeprties\nmaybe this could work, need to check first though. But to keep it simple, I'd suggest to run one separate instance per project. @Jennal both ways are fine. When you use jenny wizard (run Jenny.exe without any parameters) with the command line, it performs some additional cleanup logic which might explain the difference in the searchPaths. \nPersonally, it create a new Jenny.properties with jenny new and then I specify the initial search path where the auto-import command should search for plugins\nJenny.SearchPaths = Jenny/Plugins\nnow I just start the jenny wizard and follow the instructions. @charlieamer if you're on windows you can run Jenny.exe directly. You only need to use mono if you're on macOS.\nYou can append -v to any command to get verbose output\ne.g.\n./Jenny/Jenny.exe gen -v. when you run Jenny.exe without any parameters it will start the jenny wizard which helps you generate a proper Jenny.properties file. Usually that helps when there are any issues. @c0ffeeartc actually, one of the first implementations what's like this. I will keep it in mind and reconsider. Thanks for the input!. You can write also [PrimaryEntityIndexAtribute]. Is there a reason you designed your component like this?\nIf not, this is all you need\ncsharp\npublic class IdComponent : IComponent {\n    [PrimaryEntityIndex]\n    public int id;\n}. ok, if it's just a habit, don't do it. You have to write more code, other people have to read more code and more importantly, the runtime performance is worse for no added benefit.. Hi, a single static component is already shared for all entities. Take a look at the generated code\nhttps://github.com/sschmid/Match-One/blob/develop/Assets/Generated/Game/Components/GamePieceComponent.cs#L11. Sounds great! I will check it out in the future!\nThanks for the suggestion. Hi,\ntry jenny gen -v to see verbose logs. For reference, here's the Jenny.properties from Match-One\nhttps://github.com/sschmid/Match-One/blob/master/Jenny.properties. Can you try the latest Entitas version and see if it helps?. Happy to hear that you resolved your issue. Hi,\nMatchers are designed to check the existence of components, but not the values. I think what you're looking for is an EntityIndex\n```csharp\nusing Entitas.CodeGeneration.Attributes;\n[Game, Event(EventTarget.Any)]\npublic class StateComponent: IComponent\n{\n    [EntityIndex]\n    public int value;\n}\n```\nIf you add the [EntityIndex] attribute you can do this:\ncsharp\nvar entities = contexts.game.GetEntitiesWithState(States.STATE_EXECUTING);\nEntityIndex and PrimaryEntityIndex will take care of the component value observation for you, and you will get a very fast access to all entities that have the requested state.\nI hope this helps!. The code generator will kindly generate all the necessary methods and indices for you\n```csharp\npublic class ExecuteSystem: IExecuteSystem\n{\n    readonly Contexts _contexts;\npublic ExecuteSystem(Contexts contexts)\n{\n    _contexts = contexts;\n}\n\npublic void Execute()\n{\n    foreach (var e in _contexts.game.GetEntitiesWithState(States.STATE_EXECUTING))\n    {\n        e.ReplaceUpdate(Timer.DeltaTime);\n    }\n}\n\n}\n```\nIf you're replacing or removing the StateComponent while iterating, make sure to call ToArray(). Are you using .Net 4.x?. \ud83d\udc4d. Hi,\nit looks like there is an issue with the EntityIndexDataProvider.\nCan you double check if all your components are correctly using the entity index attribute?. Makes sense, good idea. Will add this. Added. Will be in next release. Are you executing your tests in parallel on different threads? Otherwise I don't understand why there should be race conditions. Hi,\nEntitas is plain c# and there are no known limitation for those platforms.\nIf you use Unity for example, it should be easy to deploy you application on all those platforms.. Check your policy to avoid changes like this\n. Check your policy to avoid changes like this\n. Shouldn't that be\ntypeEquatable != null && !typeEquatable.Equals(value, newValue)). Will throw exception when value == null. will a newkeyword new public bool to get rid of warning. Hey! Thanks.\nCould you please check if there's sth like UNITY_2017 so we can use this compiler flag? Otherwise this fix will break it for Unity versions < Unity 2017. ",
    "StephenAArredondo": "Doing as you suggested, there are no further conflicts, but then I got another problem.\n``` javascript\nprotected override void Initialize()\n{\n    // TODO: Add initialization logic here\nvar newEntity = entityPool.CreateEntity();\nnewEntity.AddLight(3); // <-- Not working\nnewEntity.AddSprite(2, 32, 32);  // <-- Not working\n\n}\n```\nI no longer had the ability to call .Add($ComponentName) on the entity.\nI played around with the namespaces a bit and realized that the Components cannot be declared within a namespace for this to work.\nOriginally\njavascript\nusing Entitas;\nnamespace Components\n{\n    public class LightComponent : IComponent\n    {\n        public float Direction;\n    }\n}\nWorking\njavascript\nusing Entitas;\npublic class LightComponent : IComponent\n{\n    public float Direction;\n}\nWith this, I'm good to go!\nThanks again for the help. I'll keep you posted. :+1: \n. I noticed that too after I posted, but after correcting those line it was still not working.\nI'll give it a shot at a later time. Working on embedding all of this with C# scripting at the moment. :D\n. ",
    "a-m-svetlov": "Hello.\nThe best C#-way to fix that will replace\nc#\nvar delimiter = new[] { Environment.NewLine };\nwith\nc#\nvar delimiter = Environment.NewLine.ToCharArray();\nAnd also using Environment.NewLine in .Replace methods.\nBest regards.\n. Thanks!\n. ",
    "LinusVanElswijk": "I can confirm that the update has solved the issue. :)\n(Windows 8.1/Unity 5.1.1f1)\n. A related issue: if you have multiple pools, then you can end up with multiple entities with the same name, which also causes an exception on the same line of code.\n. ",
    "Ps-spectre": "Thanks! Work like a charm. )\np.s. i am apologize for late response. (was in vacation without access to PC)\n. ",
    "takaaptech": "Thank you so much! I can follow now.\n. ",
    "eproxus": "Thanks! :bow:\n. ",
    "movrajr": "I suppose you have some kind of script in place to generate the different versions, but I don't have all the required dependencies in my Ubuntu VM.\n. ",
    "ghost": "It makes sense performance wise but I wish there was a mechanism at compile time to formally link entity and pool. In the current state, I would have to remember which component belongs to which pool in order to not mix them up in the same entity and introduce a bug. This mechanism should be inexpensive, otherwise it defeats the purpose of separating the pools.\nI'll give it some thought and come back to you if I come up with a good solution.\n. ",
    "TheLouisHong": "That would be amazing :smile: Thanks again! Really enjoyed the talk! Did a fantastic job selling what you guys have to offer to the audience. Instantly fell in love.\n. ",
    "SvDvorak": "I'm one of the persons who had the same question as you. I've made something that works for me currently which essentially scans through the scene at start for any gameobject with a Component container-MonoBehaviour and creates entities using the components specified in the container. The container only has a list of IComponents that I can add and edit using VFW (https://github.com/vexe/VFW). This does not work during runtime though, then I have to go to the entity pool and edit those components, I'm still thinking about how to solve that (or just make it easy to jump to the correct entity during runtime). I'm also curious to see @sschmid solution =)\n. It sounds pretty interesting. Would it be possible to also see which system did the action?\n. Ah, ok, was looking at the examples. Then I'm all for it as I've been wishing for a way to see what systems use what components (in an easier way than searching around in the code).\n. Nice, looks pretty solid! There is one thing though that wouldn't work in my case; it looks like the current code requires each property to have a unique name. For example, if the PositionComponent has x & y then no other component can have fields with those names. Could be fixed with a composite key of type and property-name.\n. No biggie. And yeah, you probably would have noticed when doing serialization. Thought I'd sound all smart and point it out beforehand =)\n. I've also given this idea some thought and come to the same conclusion, it'll make the API more confusing while only giving you a bit more granular notifications. And you can wrap the code sschmid wrote in an extension so that you'd only have to write\ne.AddHealthGeneration(index, new HealthGeneration(...))\ne.ReplaceHealthGeneration(index, new HealthGeneration(...))\ne.RemoveHealthGeneration(index)\nIf you absolutely had to only update a single HealthGeneration then you're still stuck with writing some more code to compare the previous and new list but I'd say this is more an exception rather than a rule.\n. A bit late but I checked through your solution, smart moving up the pools and creating a function to retrieve the correct one. Nicely done!\n. I've had it for a while and it got a bit too annoying, especially when you have other errors it just becomes noise. Thanks!\n. I've felt the same way, very nice solution and I'm definitely going to use it myself. Thanks @LinusVanElswijk \n. Pools makes me think of object pools which in one way is fitting because it refers to a pool of objects but at the same time it doesn't fit the Object Pool-pattern itself since we're querying and actually using the pool contents directly. Then again, pool is shorter to write as @JuDelCo mentioned =)\n. Woo, long time coming! :thumbsup:\n. ",
    "laurentopia": "Here is an example which I think combines the best of both ECS and Unity world.\nFrom the race car example add this to cars you drop into the scene:\nusing UnityEngine;\npublic class OpponentInScene : MonoBehaviour {\n    public float speed;\n}\nThen change the InitOpponentSystem to this:\n`using Entitas;\nusing UnityEngine;\npublic sealed class InitOpponentsSystem : IInitializeSystem {\nreadonly GameContext _context;\n\npublic InitOpponentsSystem(Contexts contexts) {\n    _context = contexts.game;\n}\n\npublic void Initialize() {\n    // scan scene and register opponents which already exist\n    var ops = GameObject.FindObjectsOfType<OpponentInScene>();\n    foreach (var o in ops) {\n        var e = _context.CreateEntity();\n\n//          e.AddAsset(resourceName);\n            e.AddView(o.gameObject);\n            e.AddPosition(o.transform.position.x, o.transform.position.y, o.transform.position.z);\n            e.AddMove(o.speed, o.speed);\n        }\n        //generate\n        const string resourceName = \"Opponent\";\n        for(int i = 1; i < 10; i++) {\n            var speed = Random.value * 0.02f;\n            var e = _context.CreateEntity();\n            e.AddAsset(resourceName);\n            e.AddPosition(i + i, 0, 0);\n            e.AddMove(speed, speed);\n        }\n    }\n}\n`\n(sorry github ate my formatting, I'll figure it out eventually). ",
    "goshki": "I think there's a project that tries to solve this very problem: https://github.com/WoLfulus/Entitas-CSharp-VisualEditor. ",
    "WoLfulus": "@goshki Haven't had time to update it to the last version of entitas though.. Entitas Inspector?\n. I thought about this yesterday, but this can't be done right now, at least not this way.\nIt'll be easier to implement when roslyn branch arrives.\nThe only way I see this coming without Roslyn is by creating attributes and modifying the code generation templates. Something like:\n[DefaultValue(1)]\npublic int x;\n. @Blucky87 Yes, but you'll still need to make it manually. To auto-generate method overloads you'll still need access attributes of the field.\nI can be wrong though.\nWe need to hear from @mzaks @sschmid \n. @cloudjubei I find it quite problematic :P so I'm playing with an external generator. It's made only for Unity yet. \nhttps://github.com/WoLfulus/Spirit\n. Sorry about that. I'm moving so it will take a while to get back to PC. I'm still working on it, but I'll be adding a readme ASAP.\n. THANK GOD! <3. Yeah, I had a \"Processor\" on my old ECS project too \ud83d\ude06 \nI like it \ud83d\udc4d . Entity Templates?  We can use it as a template and add features to the entity itself later.. I thought about that, and I know I'd be confused myself with that. That's why I suggested templates instead of prefabs. \n. What about services that will be used on multiple contexts but needs to have only one instance?. It'd be cool to see a benchmark and how those changes impact the performance :D. what is the main problem with multithreading in entitas? concurrent access? I mean, what needs to be changed/made to accomplish proper MT?. @aefreedman it's already closed. it'll will probably be in the forum\nsee https://github.com/sschmid/Entitas-CSharp/issues/332#event-1047019127. @aefreedman true... \n@sschmid yeah, wiki is probably the most common and intuitive place to search for a FAQ. Wrote this so you can use as a base: \nhttps://gist.github.com/WoLfulus/79bb7d38da84a48800d6857d67c9108a\nAn addon like this will be nice with common \"templates\". Nothing personal, but I don't get all that fear for a logo...\nI'd love to release all my stuff under IDGAF license, but meh... I'll keep using MIT just like entitas :P . if you don't mind helping newer projects and using beta stuff, this is amazing:\nhttp://flarum.org/\n. @cloudjubei if you pay them to host it then yes. This is awesome! We all love the work you put in Entitas and the whole architecture, and this is great news! \nI'm just waiting for roslyn stuff to really start working with entitas again (and get it from the store too). When you have only about an hour/day to work on little projects, that thing will help a lot!\nKeep it up!  ;). A Patreon page will be awesome.. Maybe a cool system/component marketplace? Or a set of ready to use stuff? A marketplace is a hell lot of work that should be put outside entitas itself, but could be an option for monetizing entitas in another way.\nStill, I fully support simon's decision and I'll buy it myself when its out, but I do agree that this problem everyone has with the current code generator is a show stopper if you're trying to evaluate new stuff :(\n. I just did that :(\n. glad it helped :). Can confirm this is happening, but I haven't put the computer to sleep. I just started the server and hit generate and the same exception was thrown. I can't confirm it now since I'm not home, but I'm pretty sure I was only using the server generator when I saw it behaving like this... I used both generators only to demonstrate that the generator server doesn't detect changes, while the reflection based (green button) generates files successfully.\nI was expecting the inverse behavior because I had compilation errors (reflection based generating files based on the last compilation) and generator server (roslyn) generating files based on source contents.\nI'll confirm later, but even restarting the server and trying to regenerate doesn't make it detect changes to the source files (even directly running entitas gen)\nThe behaviors seems really confusing and I'm pretty sure the auto-import didn't even detect the Roslyn generator (which might explain the odd behavior) and is using reflection based instead.\nHow Entitas.properties should look like for Roslyn generator? . I've deleted the whole thing and imported the asset again. It was probably caused by me trying to use the updated version of GitHub with Asset Store Roslyn.\nAny thoughts on a better way to get the updated versions faster than Asset Store? :P . but it won't contain the updated roslyn dlls right? \nI'll search the website I saw using the order code verification. Thats why I'm asking for this :( \nAnyways, I couldn't find the publisher that has the feature, but I found the API request\nhttp://api.assetstore.unity3d.com/api-docs/#!/invoice/verifyInvoice_get_0. I could even write the whole system myself. Just give me a green sign that it will actually be used and consider done.. Here's an example\nhttps://ludiq.io/build/924. Simple download script that pre-signs an Amazon S3 download url (and binds it to the download button) just after checking if the order number is valid via Unity API.\nS3 is cheap, a script like this needs almost 0 resources, and all you need to do to deploy a release is upload the file (unitypackage) to a bucket.. Bash scripts won't work on windows at all. It might work only on Windows 10 and yet you'll need developer mode activated and ubuntu subsystem installed.\nWriting bat files (which IMO is the best way to do it) that complex can be quite challenging, but it's possible.. Cygwin should work just like ubuntu subsystem. Not sure.\nPS should work a little better than bat files (more powerful and flexible) but I always struggle with permission stuff trying to run stuff with it.\nI did a quick test with bash from ubuntu subsystem and it asked for xbuild as you said, but it's not that easy to just type msbuild instead of xbuild because msbuild is never installed to $PATH on windows. \nYou'll probably need to invoke visual studio's scripts to make it available to the terminal first, but it always changes between versions of VS (not sure too).\nAlso, invoking bee script with bash -c ./Scripts/bee build for example, messes with arg parsing and it prints all the available commands instead. quick solution:\nEdit /etc/hosts or C:\\Windows\\System32\\drivers\\etc\\hosts and add\n127.0.0.1 desperatedevs.com. ",
    "JamesMcMahon": "Ah, sorry for the misunderstanding. Thank you for your reply!\n. Yeah I followed the other examples and it seemed like a good way to do it. I've seen a lot of ECS projects use just a single directory for systems and then a separate directory for components and I was initially going to do that but grouping by features seemed like a better granularity for organization. \nSeparating in the MonoBehaviors from the Entitas just made sense. I wish I could have gotten rid of all using UnityEngine; dependencies in the Entitas sources, but that involved duplicating code and was impossible for the GameObject view stuff. It would be great if you guys had a few examples with unit tests because I'd love to see how that works with Entitas.\nIn the case of this game it was really easy to encapsulate all the simulation logic in Entitas. I'd like to know what to do when I need to use Unity features beyond a view capacity, such as collisions, pathfinding, etc. I have a rough idea but didn't get to experiment with it much in this project.\nOne thing I'd like to see in the Entitas project is more documentation around the various classes and interfaces. I think I was able to figure out everything but the startup cost was larger if there had just been some class docs.\nIn general though using Entitas was a blast, I think I am going to adopt it for my prototyping going forward. It was so easy to add new features once I got everything up and running. Also the Unity editor widgets you built out are really helpful and impressive.\n. Hmm, not sure why that didn't work for me. I'll have to revisit. Good to hear that additional matchers will be available soon.\n. Another possible oddity, for Matchers instead of OnEntityUpdate it's OnEntityAddedOrRemoved. If these methods represent the same functionality they should probably have the same method name.\n. Makes sense. I appreciate the explanation.\n. One of the major problems with Unity development is there is no standard easy to extend logging interface. There have been attempts to replace the built in logger with something better but nothing that the entire community is using.\nI think whatever solution you guys come up with needs to be easily extendable / modifiable to use 3rd party loggers.\n. I haven't seen this in awhile but I didn't really see it in my project when I started it under 0.28.2. I used to see it all the time when working on my example project.\nI do plan to upgrading that project when I get a block of time but it probably won't be for at least a month.\n. Thanks Simon! I figured you guys were working on this but I wanted to file it under Feature Request because having sane automated testing seems like one of the big advantages of using an ECS.\n. Thanks Simon. When I get some time I'll take a look.\n. RE: uFrame, everytime I try visual coding, I find myself just wanted to type stuff.\nRE: Artemis, AFAIK doesn't have the visual debugging aspect that Entitas has.\nMy recommendation is to try them out by creating a simple ECS app and see what works for you.\n. That makes sense. Thanks for the answer.\nQuick follow up questions:\n- Any specific reason to omit the Type[] parameter from new PoolMetaData(\"Core\", CoreComponentIds.componentNames, null);? It also seems to work with new PoolMetaData(\"Core\", CoreComponentIds.componentNames, CoreComponentIds.componentTypes);\n- Is there any danger of entities hanging around if I remove the tear down? I assume the garbage collector is going to handle everything. Just double checking.\n. Thanks again!\n. @JuDelCo Entitas doesn't appear to give you any write access to the static pool variable. I think this would be needed to reset the pool by assigning the static pool to a new pool.\nHere is the Pools class;\n``` csharp\npublic static class Pools {\nstatic Pool[] _allPools;\n\npublic static Pool[] allPools {\n    get {\n        if (_allPools == null) {\n            _allPools = new [] { pool };\n        }\n\n        return _allPools;\n    }\n}\n\nstatic Pool _pool;\n\npublic static Pool pool {\n    get {\n        if (_pool == null) {\n            _pool = new Pool(ComponentIds.TotalComponents, 0, new PoolMetaData(\"Pool\", ComponentIds.componentNames, ComponentIds.componentTypes));\n            #if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n            var poolObserver = new Entitas.Unity.VisualDebugging.PoolObserver(_pool);\n            UnityEngine.Object.DontDestroyOnLoad(poolObserver.entitiesContainer);\n            #endif\n        }\n\n        return _pool;\n    }\n}\n\n}\n```\nIf I could reset _pool to a new pool I could accomplish your suggestion, but it doesn't seem like that's what the Entitas team intended since _pool is private. Though perhaps I am wrong to the use the static accessor at all for a game I need to reset.\n. Pools.pool.Reset() Doh, can't believe I missed that.\nWhat is the interaction between reseting the pool and the running systems? Seems like I should deactivate the reactive systems as you said, then activate them after the pool reset and then use systems.Initialize(); to reboot the initializing systems. Anything I am missing there?\n. Hmm even after changing:\npool.ClearComponentPools();\n    pool.ClearGroups();\n    pool.DestroyAllEntities();\nto\npool.Reset()\nI am still hitting the same issues.\n. Ah that sounds like the issue. Let me try implementing my group configuration in system.Initialize() and see if that fixes my issues.\n. Still have some issues with my view system,\nAfter:\ncsharp\nsystems.ActivateReactiveSystems();\nsystems.Initialize();\nI never see my AddViewSystem get triggered:\n``` csharp\nIMatcher IExcludeComponents.excludeComponents\n{\n    get { return Matcher.View; }\n}\nTriggerOnEvent IReactiveSystem.trigger\n{\n    get { return Matcher.Resource.OnEntityAdded(); }\n}\nvoid IReactiveExecuteSystem.Execute(List entities)\n{\n    // never called. I see entities tagged with resource but they never get a view\n}\n```\n. Ah, then what I am seeing makes sense. I am not opposed to recreating the systems, I just end up with a bunch of cruft in the visual debugger (two system views) and the scene view makes it look like both sets of systems are still running, though again that may just be an issue with the visual debugger.\nNot to get too far off topic, but is it good practice to store a reference to a particular group in a system instance or is it preferable to take the hit on the dictionary lookup and pull it on every execute? I assumed the reference would be faster and I think one of your example projects had it but now my Initializing systems list is pretty cluttered just for group reference creation.\n. Thanks for your help again Simon.\nI think it would be cool if reactive systems could reinitialize on activate. Heck, I think it would be create to have a single method to reboot everything for simplicity.\nIn my case, however, I realized I also have some Unity MonoBehavior scripts that were also attached to out of date groups for even handling. So for now I am going to reload the scene, so now my method does the following.\nsystems.DeactivateReactiveSystems();\npool.Reset();\nSceneManager.LoadScene(SceneManager.GetActiveScene().name);\nWhich seems to give me a clean enough break. My game is simple enough that I think reloading the entire scene back into memory will be a non-factor.\nGoing to close up this question because I consider it answered. Do you want me to create a separate issue for the ReactiveSystem trigger issue?\n. As an end user it would also be nice to have some place to hook into so I could reset groups attached to MonoBehaviors.\nLike this for instance,\n``` csharp\npublic class GameOverMenu : MonoBehaviour\n{\n    Pool pool;\nvoid Start()\n{\n    pool = Pools.pool;\n    var gameOverGroup = pool.GetGroup(Matcher.GameOver);\n    gameOverGroup.OnEntityAdded += \n        (group, entity, index, component) => EnableGameOverMenu();  \n}\n....\n\n}\n```\n. Visual debugging seems pretty on point to me. Moniter and Analyzer are nice and descriptive as well.\nThe thing is the VD allows you to things that people take for granted in Unity. I don't think Unity really has a term for the live editing environment you get, it's just Unity.\nFew spitballs:\nEntitas Visual Debugger (instead of debugging)\nEntitas Supervisor\nEntitas Visual ECS\nEntitas Live Edit\nEntitas Live\nEntitas Backstage\nEntitas Control Panel\n. @sschmid I wonder if this would fit better into the Entitas project is it was a modification to the code generator. IE, for single field components, generate a convenience accessor that you can call off of an entity. Thoughts?\nIf you think it would fit in the project It's something I can look into once I get some spare time.\n. Though instead of another accessor it would probably be better to just add an extension to the component class located in the generated component code.\n. Hmm, yeah I understand your concern.\nMaybe if it was an field attribute:\n``` csharp\nXComponent : IComponent\n{\n    [Entitas.CodeGeneration.ImplicitField]\n    public int foo;\npublic string otherNonImplicitField;\n\n}\n```\nOr maybe if it was a Ruby on Rails style convention over configuration approach:\n``` csharp\nXComponent : IComponent\n{\n    // value is a magicial field name that gets turn into an implicit field\n    public int value;\npublic string otherNonImplicitField;\n\n}\n```\nThat way you could keep your code working when you added a second field.\nThoughts?\n. I would use the implicit operator method that Linus created. So\ncsharp\nScoreComponent score = e.score;\nint scoreValue = e.score;\nvar scoreDefault = e.score; // this is a ScoreComponent\n. I understand your concerns @sschmid. I think the convenience would be nice, but it could lead to weird errors / bugs if the users weren't wary of it.\nThanks @LinusVanElswijk for the WrapperComponent. I will use that in future projects.\n. Well I had planned to send you a pull request at some point, though it would be feature development. :smile:\nUnderstandable that the mistake would happen, macros are really scary sometimes. Any thoughts on getting the automated tests to detect a compile time error like this?\n. Yeah I didn't want to muddy the waters with that example. The crux of my point was that if they aren't fired on an update, add and replace become a lot more useful.\nOn Mar 31, 2016, 5:11 PM -0400, Michalnotifications@github.com, wrote:\n\nSschmid but this code still will be called every component replace right? Wouldn't it be better if it would be called just on first component Add and last Removed? Right now for this kind of stuff I do not use e.Replace but just access fields directly e.ticksLeft-- ,but this breaks reactive approach :(\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly orview it on GitHub(https://github.com/sschmid/Entitas-CSharp/issues/97#issuecomment-204131082)\n. Sorry, I started this chain and then got distracted by other obligations.\nAdding sth the 'first time' would be implicit knowledge which isn't reflected anywhere and cannot be reasoned about.\n\nFirst time was a bad choice of words. To clarify, Add would only be called if a component is added and doesn't already exist on the current entity. Remove would only be called if it is not being replaced.\n\nYes, it will be called every time. There is no such thing as adding the first time or remove it, because even if you remove a component there might be another system just adding it.\n\nYeah there could be some nasty complexity there. Systems would need to be more careful about using replace versus add. It still seems more useful to me then having OnEntityAdded being essentially interchangeable with OnEntityUpdated.\n\nI'm sorry for your ears ;) but actually, your last point 'Separate the timer and the invincibility flag into two components' is the way to go in my opinion, it solves all the problems, plus you can reuse the TimerComponent for other things, too\n\nThats actually what I ended up doing. What do you mean by \"reuse the TimerComponent\"? Are you referring to using a base class? I actually have several components with timer related functionality in my codebase.\n. Yeah maybe I am just used to it, but I like the terminology Pool. It is a nice description of what it is and I think Context would actually be less clear.\nAlso JuDelCo is right about it being shorter \ud83c\udf7a \n. It's your project Simon so ultimately it's your call. But I will say from experience that sometimes you can stare at a project so long that you see flaws where there are none. \ud83d\ude04\n. I mentioned it in my multiple pool ticket, but I think adding the proper way to restart a game to the FAQ would be useful.\n. I'd probably also add:\n- Test Teardown\n- An explanation of the various OnEntity behaviors\n. Thanks for the clarification Simon. If you're adding that to the wiki I'd also discuss the proper way to clear out pool like we discussed when we were talking about how to restart a game.\nI'll close this ticket out as you have #103 to track this.\n. There is another issue here with the error icon not existing which should be fixed but I think having the editor code not through an exception is a step in the right direction.\n. I found the underlaying issue. I am using Entitas 30.1 and EntitasPoolErrorHierarchyIcon.png does not get distributed with a meta file. This particular issue looks like it is fixed in the latest distrubution.\nI still think it would be a good idea to guard against bad input while loading an icon. A warning will still get produced further down the pipe (something like \"null image passed into somemethod\") but this will keep it from exploding.\n. Do you want to merge this in? Or do you want me to make changes?\n. Cool cool, just checking \ud83d\ude04 \n. I'm seeing an issue with 0.31.2 where I see the pool game object in my scene when NOT in play mode. Is that related to this issue?\n. I see the follow exception when it happens:\nInvalidOperationException: The following game object is invoking the DontDestroyOnLoad method: Pool (0 entities, 0 reusable, 0 groups). Notice that DontDestroyOnLoad can only be used in play mode and, as such, cannot be part of an editor script.\nPools.get_pool ()\nPools.get_allPools ()\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)\nRethrow as TargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)\nSystem.Reflection.MonoProperty.GetValue (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)\nSystem.Reflection.MonoProperty.GetValue (System.Object obj, System.Object[] index)\nEntitas.Unity.Serialization.Blueprints.BinaryBlueprintInspector.findAllPools ()\nEntitas.Unity.Serialization.Blueprints.BinaryBlueprintInspector.UpdateAllBinaryBlueprints ()\nFrom pool.cs, line 27:\n``` csharp\npublic static Pool pool {\n    get {\n        if (_pool == null) {\n            _pool = new Pool(ComponentIds.TotalComponents, 0, new PoolMetaData(\"Pool\", ComponentIds.componentNames, ComponentIds.componentTypes));\n            #if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n            var poolObserver = new Entitas.Unity.VisualDebugging.PoolObserver(_pool);\n            UnityEngine.Object.DontDestroyOnLoad(poolObserver.entitiesContainer);\n            #endif\n        }\n    return _pool;\n}\n\n}\n```\n. Oh yup totally, forgot to regenerate when I upgraded.\nCode is now\n``` csharp\npublic static Pool pool {\n    get {\n        if (_pool == null) {\n            _pool = new Pool(ComponentIds.TotalComponents, 0, new PoolMetaData(\"Pool\", ComponentIds.componentNames, ComponentIds.componentTypes));\n            #if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n            if (UnityEngine.Application.isPlaying) {\n                var poolObserver = new Entitas.Unity.VisualDebugging.PoolObserver(_pool);\n                UnityEngine.Object.DontDestroyOnLoad(poolObserver.entitiesContainer);\n            }\n            #endif\n        }\n    return _pool;\n}\n\n}\n```\nSorry about the confusion. I usually remember to regenerate when I upgrade, just forgot this time.\n. There is a still a dictionary lookup:\n``` csharp\npublic virtual Group GetGroup(IMatcher matcher) {\n    Group group;\n    if (!_groups.TryGetValue(matcher, out group)) {\n        group = new Group(matcher);\n        var entities = GetEntities();\n        for (int i = 0, entitiesLength = entities.Length; i < entitiesLength; i++) {\n            group.HandleEntitySilently(entities[i]);\n        }\n        _groups.Add(matcher, group);\n    for (int i = 0, indicesLength = matcher.indices.Length; i < indicesLength; i++) {\n        var index = matcher.indices[i];\n        if (_groupsForIndex[index] == null) {\n            _groupsForIndex[index] = new List<Group>();\n        }\n        _groupsForIndex[index].Add(group);\n    }\n\n    if (OnGroupCreated != null) {\n        OnGroupCreated(this, group);\n    }\n}\n\nreturn group;\n\n}\n```\n_groups.TryGetValue(matcher, out group) is pretty fast, but for an extra boost it might be worth caching.\n. I guess the more obvious thing would be to cache the entity itself.\nI find myself doing a enity lookup in a system and saving it to a local var just to avoid duplicate lookups. It would be nice to not have to do that but the performance difference is probably pretty slight.\n. I looked into this further in my system code where I am caching bool for component flags. I actually don't see much difference (doesn't show up in the visual debuger so it's less then 0.001ms) between caching in a boolean, using the current code or caching the group like the following (which I modified in the single entity generated code):\n``` csharp\nGroup _cachedGroup;\npublic Entity gameOverEntity {\n    get {\n        if (_cachedGroup == null)\n        {\n            _cachedGroup = GetGroup(Matcher.GameOver);\n        }\n        return _cachedGroup.GetSingleEntity(); \n    } \n}\n```\nSo this may be a case of premature optimization on my part. In this case it was just a system with a single lookup, it may make more a difference on systems with multiple lookups.\n. Make sense. In terms of thing TODO this would be pretty low impact / priority. Just one of things that stood out at me when looking at the generated code.\n. This is what I ended up doing in my game:\n``` csharp\nusing Entitas;\nusing System;\npublic static class EntitasHelpers\n{\n    public static int GetComponentId(Type type)\n    {\n        return Array.IndexOf(ComponentIds.componentTypes, type);\n    }\n}\n```\nThen in generic base system I do:\n``` csharp\nint? _componentId;\nint TimerComponentId\n{\n    get\n    {\n        if (_componentId == null)\n        {\n            _componentId = EntitasHelpers.GetComponentId(typeof(T));\n        }\n        return _componentId.Value;\n    }\n}\n```\nI also ensure that T is an IComponent.\nThis always me to work with a component at a generic level without having to worry about the type safety of the component id.\nI think this is a pretty good work around and the additional type safety of an enum probably wouldn't be worth the performance hit. Going to close this and @sschmid can reopen if he thinks it's worth revisiting.\n. > I think that would make removing and replacing components slower because of the check isn't ?\nI think the check should be fairly fast, this is what I do in my code:\ncsharp\nif (entity.GetComponents().Length == 0)\n{\n    pool.DestroyEntity(entity); \n}\n\nIn my case to destroy entities I add a \"destroy\" component or similar to flag those entities in a reactive system that executes at the end of the update/frame.\n\nYeah I actually do the same thing in my codebase (well except for the example above).\n. Those are good points but I still think it's weird that you can end up with orphaned entities. Essentially there is no way to pull them from groups at the at that point, so they just hang around in the pool and take up memory, almost like a memory leak. While there are definitely ways to handle this in application code it seems like a universal issue that you may want to the library itself handle. \n\nRemoving all components not necessarily means that you want to destroy the entity. Maybe you remove a component just to add an other one\n\nYeah, the timing on that is tricky. Maybe flag the entity as deletable and then fire on the next frame after doing another check? I think my suggested implementation above was naive, I think the final solution would need to be more involved.\n\nthe pool would need to listen to on component removed (which it already does) then could check entity.GetComponents().Length == 0) which will allocate an empty array (because of GetComponts())\n\nYeah for optimization purposes that should probably be another more efficient way to check the number of components on an entity.\n. Just to clarify. This is not something that is causing issues in my application. I've handled all cases of empty of entities (that I've thought of at least). But my thoughts on that matter are this:\n- Why allow less then optimal usage by allowing a developer to not handle this situation?\n- Why give the developer's the mental overhead of handling this?\n- Why not optimize memory usage for all apps by cleaning up empty entities?\n. Sure, I can give you a concert example from my codebase; I have a bunch of timer based systems that use timer components. In simple terms, these timer components are used to countdown to discrete events which execute when the timer hits zero. Essentially they are my way of implementing Unity's Invoke / Coroutines while still keeping the code friendly to ECS.\nOften I attach other components to these timers so they can be associated with other data. To give you an example, I have a system that increases the pitch of the music over a period of time, so the entity in this example has a music pitch component, a music pitch over time component, and a timer attached to it. The entity is this example is easy to use because I can check the timer and preform the relevant mutations of the data based on a single entity. After the end of timer event some systems remove the timer and effectively shutdown. So in some cases, when the timer is removed there are other components attached to the entity that I want to keep around, which means I just drop the timer and keep the other data on the entity. Other cases, the timer is the only component on the entity, so I preform a check and destroy the entire entity if nothing else is attached.\nHope I didn't simplify that example too much, I don't want to go too far into the minutia of my codebase. But high level, if you have a situation where you don't want to just blow away an entity carte blanche, ignoring any existing data, you have to do a check to make sure empty entities are cleaned up.\n. I use timers for a bunch of stuff in my game, sometimes they don't need any other data connected to them.\nFew example:\n- Timer before game start\n- Timer for speeding up the game\n- Timer for on hit effects\nBasically anything in my game you would traditionally use coroutines or Invoke for in a MonoBehavior I use timers for. However, I don't want to focused on the timer aspect for the purposes of this discussion, it is just a concrete example I choose from my code base of a situation where I need to check for empty entities on component removal. \n. That's what I am doing. I remove the timer component when it's over and sometimes the entity has more components on it so I don't delete it, sometimes it doesn't so I clean it up.\n. > But if the entity has only a timer component, how you know for what use is that timer?\nIt's pulled by a system by the timer component. I think I did a bad job of explaining this point, while I have a base timer component there are several distinct timers components in my codebase, so TimerAComponent is distinct from TimerBComponent, so the can pull the proper timer.\nAgain, I don't want to go too deep into my codebase because I was hoping the generic utility of this change be apparent. I don't think I am doing a good job of advocating for this. I am drawing a blank on another specific example. It's not hard to do application side, so if I'm not making my case well I can always handle it on my side.\n. @JuDelCo You actually do the same kind of manual cleanup I am talking about in your codebase as well,\nhttps://github.com/JuDelCo/Shmup-AAA-plus/blob/master/Sources/Features/Coroutine/CoroutineSystem.cs#L31\ncsharp\nif(e.GetComponentIndices().Length == 0)\n{\n    e.isDestroy = true;\n}\nSo that's at least one other example \ud83d\ude09 \n(The coroutine system is pretty interesting BTW)\n. Again, this is too specific on that one scenario and not the on the general idea. So let me try and refocus this discussion. \nLet's say this is not a good idea at a framework level, does Entitas provide the tools to create a generic system that cleans up empty entities?\nI haven't tried this myself, I am handling specific instances of this as it comes up, but I think if you were dealing with a single pool it would be easy enough to iterate through all entities in pool and delete them if they had no components.\nI can think of a few issues:\n- Checking for empty components has array creation overhead.\n- Iterating through all the entities in a pool could potentially take some time in a huge pool, though in practice I think the cost of looking at the number of components is the only expensive bit here.\n- The timing of when the system executes could be tricky, I'd probably stick it as my last running system, don't know if I'd hit any weirdness.\n- Systems only act on a single pool, so you would need to instantiate multiple systems of the same type for each pool you were using. I might be missing something here, is there a way to do a multiple pool system?\nJust some thoughts. I think if Entitas has all the tools needed to do this I can just create a generic system and stick it in future projects.\n. Interesting, so you could conceivable go through each pool and clear out empty components.\npublic interface IGroupObserverSystem : IReactiveExecuteSystem {\n        GroupObserver groupObserver { get; }\n    }\nWhere is the pools method?\n. Ok, I'll close this one. Thanks for the discussion on the feature guys.\n. This manifests in the auto updater thinking there is an update when you have the latest (0.31.2).\n. Totally, I guess the horse is already out of the barn at this point \ud83d\ude04 \ud83c\udfc7 \n. There are ways around this, like you set listeners that you want to be registered before any component creation in the SetPool method. That seemed like the wrong way to do things though.\nSince Entitas is so interface based I think using extending concrete classes would be really limiting design wise, that's why I suggested this for inclusion in the framework itself.\nIt would be pretty easy to implement I think, just add new method to IInitializeSystem and then call that in the systems Initialize code. I can put a PR if people feel it's a good idea.\n. I don't think I agree. The constructor for systems is borderline useless as you don't have access to any of the larger state or the pool at that point.\nSo here is a straightforward example. Registering component listeners (OnEntityAdded). Right now you if you create a component in a system on initialization before another system that is listening to that component it will miss that initial add event.\nYou can work around that by either:\n- Make sure your listener systems are there before component creation. This gets tricky in practice and can break easily when you add new systems or do any re-ordering.\n-  Do a check in the listening system to see if a component is already added. I often do this just for robust sakes, but it feels like a lot of fiddling that could be avoided with a two stage init. \n. > I caught myself caching groups in _myGroupXyz fields and adding group.OnEntityAdded += in ISetPool or constructors as well, but I'd like to tell you that in an ideal case you should but this logic into Initialize().\nYup, we actually had a discussion about this awhile back, that's one of the reasons I don't want to use SetPool or the constructor.\n\nBack to your question; does it help putting your logic to SetPool?\n\nI am not having a specific problem per say, but I have been working with Entitas pretty seriously over the last few months and thought I would suggest things that could be improved upon / discussed. In my project everything works, but state pre-requisites and event tracking can be a bit of pain sometimes.\n. The use case would be that if System A creates a entity on init that B is listening to. You could reorder them, but what if B creates an entity that A is listening to.\nWith the two stage system A and B could register their listeners and in the second stage create their entities.\nIf SetPool was called again when reseting Entitas it could be used as the first stage, since it's called before initialize.\n. Yeah, what I actually needed to do was a set of systems that could be paused and another set of systems that were unpausable. So one set of systems only runs if there is no pause component in the pool and the other runs all the time.\nI've implemented this and so far haven't had any issues. I looked deeper into the systems class itself and it doesn't seem like is anything magical there, just two lists for keeping track of what's running.\n. That's fairly eloquent, I actually just ended up doing the following in my update method:\ncsharp\nunpausableSystems.Execute();\nif (!pool.isPaused)\n{\n    pausableSystems.Execute();\n}\nNo nesting involved.\n. Yeah I didn't realize they were nestable. May eventually go back and refactoring it, got a million other things to do to get this game out though \ud83d\udc7e \n. I have a game that is going to go live shortly. Stay tuned.\nhttp://ifallingrobot.com/\n. See https://github.com/sschmid/Entitas-CSharp/issues/148\n. I also will post on twitter, I do know how hashtags work. \ud83d\ude06 \n. Thanks Simon!\nAnd thanks for all the help. Entitas is a great framework, you should be proud.\n. @sschmid Just noticed an issue. When you added the game to the wiki, you also accidentally duplicated the Entitas Tank blurb.\n. Oh so rather then needing to implement ISetPool you can just access the pool directly?\n. Sounds interesting. I used a single pool in my game but this looks like it would make it easier to juggle multiple pools.\n\nYou can create multiple instances of it\n\nWhat would the point be of constructing multiple instances of a pool? Would the different instances share the same content?\nThanks for the answers Simon, and keep up the good work.\n. That sounds great, thanks Simon.\n. https://blog.discourse.org/2016/03/free-discourse-forum-hosting-for-community-friendly-github-projects/\n\nFree Discourse Hosting For Your Open Source Project\nDo you run a popular open source project on GitHub? Then you might be eligible for a free, hosted Discourse + SSL. Your users can log in with GitHub logins and write posts in Markdown, and we\u2019ve got tighter integration planned down the road, too.\nMinimum Requirements\nMust be hosted on GitHub\n2000+ stars\n30+ contributors\nYour project has a clear need for discussions (see FAQ below)\nPlease understand that approval is ultimately at our discretion as we work out the details of this program.. Congrats Simon and best of luck to you. Have you considered setting up a Patreon page?\n\nAlso, can you detail what your plans are for Entitas plus or are you still formulating your plans?. Thanks! One reasons I am hesitant to update the project is it's one of the first things I wrote in Entitas so some of the choices are a little odd. But people seem to find it useful so I wanted to see how much effort it would be to get it to 0.42. It hasn't been as straightforward as I would like so far.\nI tried some more experiments tonight to see if I could rule something out. First, I got rid of the abstract class and just copy and pasted the code into each subclass to see if the generated with having trouble with class hierarchies, no luck. Second I moved a few of the components out into separate files, also no luck.\nHere is what the generated code looks like for the matches,\n``` csharp\n    public partial class PoolMatcher {\n    static IMatcher _matcherAudioWalkSource;\n\n    public static IMatcher AudioWalkSource {\n        get {\n            if(_matcherAudioWalkSource == null) {\n                var matcher = (Matcher)Matcher.AllOf(PoolComponentIds.AudioWalkSource);\n                matcher.componentNames = PoolComponentIds.componentNames;\n                _matcherAudioWalkSource = matcher;\n            }\n\n            return _matcherAudioWalkSource;\n        }\n    }\n}\n\npublic partial class PoolMatcher {\n\n    static IMatcher _matcherAudioWalkSource;\n\n    public static IMatcher AudioWalkSource {\n        get {\n            if(_matcherAudioWalkSource == null) {\n                var matcher = (Matcher)Matcher.AllOf(PoolComponentIds.AudioWalkSource);\n                matcher.componentNames = PoolComponentIds.componentNames;\n                _matcherAudioWalkSource = matcher;\n            }\n\n            return _matcherAudioWalkSource;\n        }\n    }\n}\n\n```\nFor some reason the code generate is just duplicating those partial classes.. I just ended up manually editing the generated code and deleting the duplicated code.\n0.37.0 appears to fix the issue, so I am over the road block for now. Just wanted to make sure I didn't have something setup incorrectly.. Ok thanks for the link,\nThe transcript from Simon is as follows:\n\nIt\u2019s actually both - Design and Performance.\nDesign:\nI think Fluent Api makes sense when creating / configuring / building objects. That\u2019s why Systems.Add() can still be chained. You do it once in the beginning. With entities you do more and different things all the time.\nPerformance:\nBefore I moved the whole code base to a type-safe approach, I did several tests regarding generics, methods, method returns. Methods which return sth are generally slower. But to be fair, you have to run this test a lot of times to see a performance difference, but generally it\u2019s slower :wink:\nBoth those arguments might not seem strong on their own, but both of them point at the same direction which is removing the return.\nBut if you\u2019re life depends on it, or you simply have a different opinion on that, it\u2019s now a piece of cake to add your own custom code generator which can revive the returns :wink:\n\nI think I'll look into using the Systems.Add() method he mentioned. Does anyone have an example?\n. I finished converting my example project over to the latest version of Entitas.\nStill looking for an example of what Simon was referring to.. Ah, I see what Systems.Add was referring to now (that API being fluent but this change made the entities non-fluent).\nThanks for the answer.. I would't get too hung over the specific versioning to use. At the end of the day versioning is a tool for communicating with your end users.\nThe big thing is to get to stable version and reduce the number of API breaking releases. I think it will be difficult to build the Entitas community without doing this.\nFor example, here is what the state of example projects on the wiki currently looks like:\n| Name  | Entitas Version |\n| ------------- | ------------- |\n| Basic Example  | 0.37.0  |\n| Match One  | 0.41.2  |\n| Shmup  | 0.35.0 |\n| Tanks!  | 0.31.1 |\n| Unity 2d Roguelike  | 0.42.3 |\n| Pong  | 0.31.1 |\n| Asteroids  | 0.24.2 |\nBecause the APIs have changed so much it's difficult to build a corpus of example projects that reflect the current state of Entitas. This also applies to blog post, articles, talks, etc. For instance I got this comment on the talk I gave on Entitas / ECS:\n\nBasically I think any project needs to balance implementing the next great idea with user churn and I think the churn is high right now for Entitas, which makes sense as Simon as coming up with cool ideas left and right. But at some point the shift should be made to reduce churn. \nI think Entitas has a great little community and I am eager to see it grow as the API stabilizes.\n. Thanks! I will try that out tomorrow.\nCould have sworn I did a search in the issues here, oh well it's late and I'm tired.. This worked. I ended up just deleting the CodeGenerator directory from Entitas-Unity.\nI'm going to keep this issue open as it's something that could be improved in 0.42.3. My thought is the Documentation and CodeGenerator should be kept out of Entitas-Unity as they aren't needed if you are dragging the library into a Unity project.. Hey Milambeer,\nI just went through this myself. I'd recommend go through it one release at a time. 0.37 is honestly the hardest one to upgrade, but if you go to that instead of going directly to 0.42.3 it will be easier.\nIf you have a specific question don't hesitate to ask, I'll try my best to answer.. I am on my phone right now so I can't look in depth on anything but does this thread, https://github.com/sschmid/Entitas-CSharp/issues/82, help at all?. Super nitpicky, but there are inconsistent line endings in your various files.\n. The Github editor snuck in this change. Generally you want a newline at the end of a file.\n. ",
    "chrischu": "I just tried it and realised that enums cannot be partial, so instead of an enum a class with integer ids could be used like this:\npublic class PoolIds {\n    public const int Core = 1;\n}\n. Mhh just a quick idea: Maybe you should implement some kind of safeguard (like a yes/no dialog) before the folder is deleted when it looks like it is not a folder just containing Entitas files?\n. I am not able to build since the Tests project references the Entitas.Migration project and that does not work since the Tests project is using the 3.5 framework.\n. Thanks :).\n. The thing about groups (at least as far as I know) they do not really respond to the entity being added/removed but to each individual component.\nSo in your PlayerSelectActionAttackSytem you replace the position of the entity, therefore triggering all the groups again. In effect the replace triggers the remove event first (since the old position is removed) and then the add event (since the new position is added).\nI hope that makes things a little bit clearer and helps you solve the problem.\n. If I am not completely mistaken, Entitas does not have a UI (at least not the ingame kind that UnityEngine.UI deals with) and therefore does not utilize the new UI system from Unity 4.6, so that shouldn't be a problem.\n. Good idea, but just as a general tip you should probably exclude generated code folders from ReSharper analysis.\n. List is probably not the appropriate type since (at least from my perspective) it should not be possible to add a pool from the outside. \nYou should probably change the List to ReadOnlyCollection.\n. I think it is a good idea to provide a way for people to add-on to Entitas functionality, however I also think that those add-ons don't need to live in the same git repository. In my opinion and approach similar to the plug-ins folder of Notepad++ (or other countless software that offers plug-in support) would be best. This way people can write add-ons and offer them to the community to use (Entitas can help them promote the add-ons by linking to them in the wiki) but ultimately the Entitas USER gets to decide which add-ons he needs (and therefore copies into the add-ons folder in his Entitas \"installation\"). This way Entitas is not reliable for making sure all the add-ons continue to function with every version.\nHowever, if you decide to actually go for the add-on approach that would make them part of your repository, I would not go for git submodules. They have very little (if any) advantages over the tried and tested feature-branch&pull-request approach, and might even less good. For example I'm not sure for example if github would show pull-requests just containing submodule updates correctly (show all the changes in the submodule etc.).\n. If that bugs you, you can just change that in ReSharper: Select the a folder in the solution explorer, open/show its properties (F4) and change the setting for \"NamespaceProvider\" to false.\nThis is necessary anyhow if you don't want your namespaces to include \"Assets\" etc. :).\n. ",
    "jraselin": "Thanks for yours responses\nNow, I understand the concept of ReplaceComponent\nYou can get the most out of Entitas if you try putting all your logic into dedicated systems doing only one thing.\nOk, I will remove all UI Logic and create dedicated systems \nRegards\n. Thanks for your explanation.\nFor now, I won't use GroupEventType.OnEntityRemoved but only GroupEventType.OnEntityAdded.\nRegards\n. Thanks for your response\nRegards\n. ",
    "JuDelCo": "The real problem is destroyed entities (not just his components) will be reused to create another entity. It works like any ~~component or~~ entity instantiated (well, components too but only if you use the code generator !) will be used as a cache object to \"instantiate\" new ones if they are \"destroyed\".\nGroupObservers (and by extension, ReactiveSystems...) WILL NOT notice this, they just think the entity not match his requirements so they keep anyways a reference of them (if they matched before)\nThat's why in the examples provided in sschmid acount (the match-one and the cars one) they built a \"DestroySystem\" which executes at the very end of the loop, destroying in that moment any entity with the component \"DestroyComponent\".\n. One more thing... should I update code in this folders too?\n- Entitas.Unity\\Assets\\Libraries\\Entitas\\ ...\n- Entitas.Unity.CodeGenerator\\Assets\\Libraries\\Entitas\\ ...\n- Entitas.Unity.VisualDebugging\\Assets\\Libraries\\Entitas\\ ...\n. Closed, new 0.21.0 version fixes the issue\n. \n. Try disabling systems at runtime to see which one is retaining the entities. Anyway... how much is a lot ?\n. Too bad C++ doesn't have reflection, i can't think on this feature even a bit xD\nIt could have been worse :scream:\n. Maybe binary at first but using an file-access-like interface to allow other formats in the future? (for C#-only)\n. Maybe destroying all pools and loaded systems the GC would clean all from memory? (So you need to load all systems and pools again for the new \"scene\")\n. Entitas Suite\nEntitas Watchdog\nEntity Manager\nEntity System Explorer\nEntity System Visualizer\nEntity Watcher\nVisual Entity\nVisual Manager\n. How do you flag your units to destroy them?\nCheck this:  https://github.com/sschmid/Entitas-Shmup/tree/master/Assets/Sources/Features/Spawn\n. Why you can't reuse the same Resource and View components (and systems) for the target ?\n. How about storing a dictionary of resources in ResourceComponent and a dictionary of Views on ViewComponent ?\n``` csharp\n// In ResourceComponent\nDictionary  //  string == resource name\n// In ViewComponent\nDictionary\n```\nOf course adapting the systems as well\n. Pool is more short to write.\nYes, i'm very lazy\n. It's cool but i prefer this wiki because text is CENTERED in the screen\nI have a large screen ....\n. aa5fa47 \"Roslyn cod generation process if functional!\"\n:open_mouth: \nWhen there will be a new entitas version with this long waited feature? :smiley: \n. Wow, looks like a great addition to the framework\nI will see how this works behind the scene... :smile: \n. Mmm, if you deactivate a EntityIndex (or all of them), you can't reactivate it (as the suscriber code is in the constructor). So why not destruct/remove it instead ?\n(Btw, \"This returns the entity immediately\", well... as fast as a Dictionary key lookup can :smile: )\n. Also, if you add an EntityIndex to a group that has already entities, those won't be stored as keys in the index Dictionary\n. Looks good, but when Roslyn will work in those platforms? The DSL solution looks like a temp workaround until it works (and in those platforms where Roslyn works is better to use it because you don't need to write that DSL)\nIn any case, the concept is cool !\nPS: Question, i'm currently on windows, how would be for me the swap to Roslyn ? I need to install something ? Or will be bundled with entitas releases?\n. I like it, but I prefer the method name \"ReplaceXXX\", don't change it :cry: \n. Okay then :dancer: \n. Now that I know this, feels imperative to implement it in Entitas asap\nI have this line in the code where only changes the index and time (the last two parameters):\ne.ReplaceTileAnimation(e.tileAnimation.map, e.tileAnimation.id, e.tileAnimation.frames, nextIndex, Time.time);\nYeah, i should have more fragmented components, but i need all that info to implement tile animation.\nMaybe in the next version? :smile: \n. The objective is to improve component access or component data access ?\nI mean, to improve \"entity.GetComponent()\" or \"component.someProperty\" ?\n\nWhat i did in Entitas++ was to assign a unique integer ID to each component type in runtime and then store in each entity a \"Dictionary\" of component pointers by their keys\nstd::map<ComponentId, IComponent*> mComponents;\nI think this improves memory (and cache locality because entity's size?) but i think your solution is more faster anyway (or not? note it's a ordered map... key lookup should be fast, not as an array but...)\n. I think you can't do what you want because an entity is mutable though time, can have 2 components and suddenly add 10 more.\nMaybe the solution is to offer a new type of \"Entity\" with fixed size and having always the components specified. An example use: \"EntityTransform\" (type) will have always a transform component (and not more, by previous declaration/design). This way there's no need to lookup for components and can be stacked in arrays. It's like having a Pool with only 1 component (or two, three...) but without lookup and always having those components.\n. So many repeated comments xD (And so many email notifications for the same)\nGithub bug?\n. Groups are cached the first time you get one. So there's no lookup :)\n. I think that would make removing and replacing components slower because of the check isn't ?\nIn my case to destroy entities I add a \"destroy\" component or similar to flag those entities in a reactive system that executes at the end of the update/frame.\nEdit: You can do \"pool.DestroyEntity(entity);\" too\n. When i use entitas and design my game components & systems, I can see two \"main\" types of entities:\n- Entities with data components (which can be updated/replaced) and maybe flag components (those appear and disappear, but data components still remain in the entity)\n- Single entities (and those are handled using the pool, that way you can't duplicate them)\nCan you provide an example where you need to use entities which holds only temporally flag components? (those entities are the type i think they could end \"detached\" without components in the pool accidentally)\n. Why you would have a entity with only a timer component ?\n. If an entity has only a timer component (i imagine a single integer data with the timestamp), why not just destroy the entity when timer ends?\n. But if the entity has only a timer component, how you know for what use is that timer?\nMaybe the problem isn't the timers but data components instead. Why you delete all data components in the entity and not destroy the entity itself?\nMaybe sharing some code can ease our understanding of your problem (i'm still convinced that maybe be a component design problem)\n. If you can only have one Timer per type, you should use SingleEntities\nIn my \"cleanup\", note i destroy all entities in one system at the end of the frame and I destroy the entity, not his components.\nBy the way, the ideal system should not have state, remember that :smiley: (maybe you are storing some data in those timer systems you should store them in the entities as components)\n. You could make a new derived class from ISystem and add a custom method \"Awake()\", then derive Systems class and implement the same like Initialize (adding a new protected List, extending the constructor, extending Add method and adding your new Awake method).\n. Using multiple pools to separate behaviour is a better choice in most cases, but allow multiple systems, why not? Maybe in very big applications come in handy (multithreading?)\n. Since Systems are almost decoupled between each other, you could test their behaviours\n(try to design your game separating each logic concept in different systems. 1 system == 1 responsability)\nMaybe i'm wrong, but i think its something like that\n. Maybe it's because of the foreachs in them\n\nAnyway Unity it's working on a new compiler version that will fix those issues:\nhttp://forum.unity3d.com/threads/upgraded-c-compiler-on-5-3-5p8.417363/\nhttp://stackoverflow.com/questions/18552669/memory-allocation-when-using-foreach-loops-in-c-sharp\n. Besides tweening, i have been around the question for a couple of days. \u00bfWhere or how is supposed to store those small variables used for timing (ex: 2 sec doing something, that timer) or internal state? Not in systems but i think in components neither because then there will be so many components or variables inside components (ex: to do a value transition over time, i need 5 variables: a start time, a timer counter, a start value, a end value and current value, but all of this is related to some component).\nHow should approach those cases? I'm still trying to find a good solution to this.\nCan @mzaks show a bit more about his idea?\nEDIT: Well, almost a month later, i figured the solution: A mix of behaviour trees, task managers and promises.\n. Shutdown, Destroy and Reset are my favourites\n. .DisableEvents()\n.EnableEvents()\n(a more verbose choice)\n. It's worth mentioning that a SingleEntity should not be cloned\n. https://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator\nAt the bottom of the page, there are a FAQ about those questions\n. Why the thumbs down? @KumoKairo . Sooo, I think the next thing to do is update the wiki with all the new changes in 0.36, right now without examples may be a bit difficult to start to play with. Looking forward for that update/dll ! I want to start another project with entitas, so migration will not be a problem for me . @T2RKUS I don't know how different will be the new Entitas version, but i have plan to at least fix the memory leak problem in Entitas++, i'm currently switching jobs so maybe in a couple of months. I've not forgotten ;). Do you have a date ? It's okay if you can't say one / don't know, I'm not in hurry, only wondering :). Okay thanks ! ;). Will do the second example execute the method for each entity anyway? If so, it's fine for me, but optional, not as a replacement (because the List is useful in some cases, count, or store it in somewhere). Good idea !. I like this more than the Pool-Context at first sight, so, why not?. The only concern maybe will be that the generated code from the DSL won't update your code using that generated code, so when you need to refactor something you will need to change the DSL and your code as well. Maybe i am wrong.. C# events doesn't work ? . Like a spatial hash algorithm ? :smile: . If you need to put the parameters in different lines to read them then something is wrong.\nAs said, at the end the most important thing it's to be consistent (tabs or spaces, not both). I prefer Tabs, they are made for indenting (spaces no), allows each developer to see the size in theirs text editors as they prefer (i hate 2-spaces indenting for example) and you can't put 3/4 of a tab, as its only a character (not four)\nhttps://softwareengineering.stackexchange.com/a/72. Related: https://github.com/sschmid/Entitas-CSharp/issues/99. I just wanted to show that Context was called Pool before \ud83d\ude04 . ",
    "mzaks": "Ops I see there is a bug. I will fix it today. Please don't merge. \n. I am not sure yet :)\nFirst just wanted to see how much interest there is for such a feature.\nLet's meditate on it for a couple more days and than flesh out a plan.\n. This is what I meant by Logical events.\nCombined with state events you would see something like \n2015-12-26T09:56:21Z game1 user1 session1 InitSystem1 startExecution\n2015-12-26T09:56:21Z game1 user1 session1 CorePool 34526 45673 1 e_created\n2015-12-26T09:56:21Z game1 user1 session1 CorePool 34526 45673 1 c_added PositionComponent(5,4)\n2015-12-26T09:56:21Z game1 user1 session1 InitSystem1 finishExecution\n2015-12-26T09:56:21Z game1 user1 session1 SystemA startExecution\n2015-12-26T09:56:21Z game1 user1 session1 CorePool 34526 45673 1 c_replaced PositionComponent(5,4) PositionComponent(5,5)\n2015-12-26T09:56:21Z game1 user1 session1 SystemA finishExecution\nThis might get chatty, but I think it worth a try.\nWe can also adjust the log levels.\n. That was actually what I planned to do. \nFiguring out all the hooks and maybe providing a few classes, which will make it easy to use those.\n. @sschmid Can add it to the new Plugins structure. Schools I clone develop or wait until the release and make PR on master?. It is a Plugin. Sending the system will/did execute event schools be figured out though. But it will still be a Plugin . The order of entities is non deterministic, if you need a deterministic behaviour you would need to sort them yourself. This is due to the fact that entities are stored in the group in a HashSet due to performance reasons. \nhttps://github.com/sschmid/Entitas-CSharp/blob/master/Entitas/Entitas/Group.cs#L33\n. I had a discussion with @jamesmintram once about the size of the entity and why we use multiple pools. He proposed something interesting. As a pointer on an 64bit arch takes 8 bytes, what if the entity would store not an array of pointers but an array of indexes which can be 1 or 2 bytes big. Now if we say components are managed by a coordinator which has an array of components pre wormed, as @arne-schroppe and @braaad suggested, than entities can ask component coordinator/manager to replace, \"destroy\" or give them new components, where they get only an index. Components than can be structs or classes. As the coordinator holds only particular type of component no boxing should happen. \nWe should have an annotation, which let user define how many entities s/he intend to have in the game. If it is lower than 255 than we could even use 1byte index inside the array. 2bytes -> 65535 entities should be enough for most of the games. The annotation could be added to every component or just to the pool.\nAll that sad I think the most important point was mentioned by @braaad . We need a few very good tests in order to see if what we do make sense not only on \"paper\" but in real world scenario.\nAlso I liked the idea of FlagComponents being just part of the bit field/mask.\n. Here is another relevant article\nhttp://ithare.com/c-for-games-performance-allocations-and-data-locality/\n. I sketched something in Swift \nhttps://gist.github.com/mzaks/c6692a7a3c974ecedd3493322f017afc\nSome features are language specific. e.g. I don't even need Component structs as Swift has Tuples, but generally the code reflects what I suggested on May 27th.\nThe definition of components can be done through unity UI or a DSL. And this way Entity, ComponentManager and Pools (I didn't introduced Pool in my sketch but I guess it is almost obvious how it would look) can be generated.\n. @paraboxx well to be precise my proposal will not even grant sequential access when iterating through positions only. Let's say we create 10 entities and give them all position components. This will result in entity 1 having position component at index 1 in position array, entity 2 at position 2 and so on. But what happens when now we destroy entities 5, 6, 7 and create entities 11, 12, 13, 14. Entity 11 will have its position at index 5, entity 12 at 6, entity 13 at 7 and entity 14 at 11. So we end up jumping around in the array anyways. \nWhat I am trying to achieve with this architecture is to put the whole game state as compact as possible, hoping that it might fit into L2 or at least L3 cache. Making the footprint of an entity smaller and hoping that Component Manager stays also in reasonable size. \nLets say we have 200 entities with a position and velocity. I was very generous with position. I guess in a simple example a X and Y of two byte short should be enough, same for velocity. This means that our entity take 200 * 2 * 1 = 400 bytes and component manager 200 * 4 * 2 = 1600 bytes So all together we have 2000 bytes which is not that bad. Hm we also have the two nextOpenXYZ sets in the ComponentManager. To be honest I am not sure how much memory it consumes and if it will be loaded in to the memory as well, when we just using the get component methods on entities. But let's say we give every component another byte so 200 * 2 * 1 = 400 bytes. This makes a total of 2400 bytes.\nTo put thing into perspective, in current architecture the Entity is backed by an array of pointers. A pointer on a 64 bit CPU architecture is 8 bytes. Meaning that the entities alone will occupy 200 * 2 * 8 bytes = 3200 bytes\n. @paraboxx The logical systems which change only the entities are executed on the same thread sequentially. Meaning that there should be no interrupts in between and there should be not that much data loaded into the cache during the execution of all logical systems. That sad I guess it also means that grouping of the systems is important. If you have systems which need to interact with GameObjects for example, it would be  better to put them at the end of the systems list, so that logical systems can have the fastest throughput working only with Entities and components. \nHowever I totally agree with you, those are just speculations without actually tests, they are purely theoretical.\n. Hm here are my 5 cents to this issue:\nUnity needs two phase initialisation because game object encapsulate data and behaviour.\nEntitas system encapsulate behaviour and should have no data. Therefor there is no need to have two phase initialisation.\nLet me explain by example.\nSay we have three systems A, B, C and we decide that we want two have second phase initialisation on A and C.\nThis means that on init we will have following execution order\nA -> B -> C -> A -> C\nThis is confusing, why not introduce systems D and E to make it more explicit.\nA -> B -> C -> D -> E\nNow why does Unity can't do this? Because as I mentioned before Unities game object store data. Data could have cyclic references, so data in game object A is dependent on data in game object C. So after we initialised C we want to have second phase initialisation on game object A.\nIf you follow the strict ECS principal - separation of data and behaviour, you should not have such problems.\nOr am I missing something?\n. You see that this happens because your systems suppose to do more than one thing \ud83d\ude1c\n. This is what I did in the ECS-Lang code generator\nI define the accessors as interfaces inside of the component, as I want to have an accessor based lens\npublic class JumpInTimeComponent : IComponent {\n    public long value;\n    public interface Get {JumpInTimeComponent jumpInTime{get;}}\n    public interface Has {bool hasJumpInTime{get;}}\n    public interface Add {void AddJumpInTime_(long newValue);}\n    public interface Replace {void ReplaceJumpInTime_(long newValue);}\n    public interface Remove {void RemoveJumpInTime_();}\n}\nNow I can define a new interface which aggregates those interfaces (I do it inside of the system because it is it's system input entity):\npublic interface InputEntity : JumpInTimeComponent.Get, JumpInTimeComponent.Add{}\nAnd than I have to redefine partial Entity class that it implements the interface:\nnamespace Entitas {\n    using my.game;\n    public partial class Entity : ReplayBaseSystem.InputEntity {}\n}\nThis works.\n. Well in case of the DSL it is a bit more than just autocompletion. It is a contract of - which data this system has access for and can create. The beauty of ECS is that everything is open and I don't want to attack this. I want to takle the problem that it is sometimes hard to see what is going on. With a definition of system contract we expose the data access and mutation on a higher level, without need to understand how it is done we see that it will access following components, replace this component and destroy this type of entity. Again let's have a Replay system as an example:\nsys Replay {\n    input unique {\n        trigger : enteredGroup(JumpInTime)\n        ensure : JumpInTime\n        api : JumpInTime(get)\n    }\n    unique : ConsumtionHistory(has get)\n    unique : LogicSystems(get)\n    unique : Tick(replace)\n    unique : JumpInTime(get)\n    create consumeElixir : ConsumeElixir\n}\nOn the first glance we directly see that it does has dependency to a lot of unique components, most of the dependencies are how ever read. Only Tick will be replaced, and we see that we will create a new Entity wich will have ConsumeElixir component. I believe it adds a great amount of value for behaviour analysis.\nThe generated interfaces just make sure that we don't cheat in the implementation. We have to stick with the described contract. I also don't believe that the overhead of describing the contract first will be to great of a deal, when you stick to the single responsibility principal.\n. @aqaddoumi I would add AnimationStateComponent which value captures the enum AnimationState {Waiting, Running, Done}\nThan have another component:\ncsharp\npublic class StartAnimatingWhenDoneComponent : Component {\n  public Set<Entity> allOf;\n  public Set<Entity> anyOf;\n  public Set<Entity> noneOf;\n}\nYou could also add similar components: StartAnimatingWhenRunningComponent, StartAnimatingWhenWaitingComponent.\nThan have a reactive system ScheduleAnimationSequenceSystem which will listen to AnimationStateComponent iterate over all entities which have StartAnimatingWhenRunningComponent , StartAnimatingWhenWaitingComponent and  StartAnimatingWhenDoneComponent and than decide if they should switch from Waiting to Running\nBasically what I suggest is a dependency tree. Sequence A -> B -> C. Means that A doesn't depend on anyone so it has no dependency, B is scheduled when A is done, and C is scheduled when B is done. With allOf, anyOf, noneOf semantics you can map any kind of wild constellations. I think it might even be a bit over the top. I personally would start with just allOf but hey here it is just a concept :).\nWhat I would also love to see is that user can decide if the animation is based on delta time or tick. Also if it is delta time it would be good if it would be captured by DeltaTimeComponent. The reasoning about it is following. If it doesn't take unity delta time but it's own delta time, user can implement custom pausing which will also stop animations.\nOne more random thought. As @JuDelCo mentioned Tweening system implies lot's of components. It might make sense to have a special pool for them.\n. I would say it is a question of flexibility. By providing abstractions and hiding the state you can implement a very clean way of using the system. However it will push user into certain way of solving the problem. By exposing the state as components you can enable things like complex animation morphing. The developer who knows the animation of the game can write custom systems which can evaluate current animation state and decide how to proceed. \n. From my personal experience, I know that there are always a hand full of components which are good candidates for default values or partial default values. However the main accent here is on handful \ud83d\ude09. Adding own implementation for defaults will as @Blucky87 will take a developer a couple of minutes, it is quite a trivial task. Defining an abstraction which can represent defaults and make it work for different types, is a complex task, which makes maintainability of the project more complex.\nIn my opinion the cost/gain relation is very disproportional.\nHowever as far as I know it is possible to write your own code generator and plug it in. This would be a perfect candidate for own generator, if you really feel like implementing those default methods.\n. @sschmid btw just looked at the package design. 8bit signature makes the design dangerous as it misaligned the whole buffer. It has to cut of by user or it can lead to crashes on some systems. I guess it is not important any more, but just saying if someone wants to take it as a reference. . We do throw GroupSingleEntityException when we ask for single entity and find two entities in the pool. It would be much better if we would already throw when we add the component so that we know where the bug is.. Here is a Sketch of what we would need to have to implement it.\nFirst we need an interface for unique component:\ncsharp\ninterface IUniqueComponent {}\nthan we need a simple tuple which represents association of Component and an Entity.\ncsharp\nclass ComponentEntityAssociaton {\n  public IUniqueComponent component;\n  public Entity entity;\n}\nThan we need a IUniqueComponentLookup. \ncsharp\ninterface IUniqueComponentLookup {\n  public ComponentEntityAssociaton Get(int uniqueComponentId);\n  public void Add(int uniqueComponentId, Component, Entity entity);\n  public void Remove(int uniqueComponentId);\n}\nThis interface should be implemented by Context. Entity class should have a reference to instance of such interface and we need to add  methods for Get-, Add-, Remove-, Replace-, HasUniqueComponent.\nThan the Code Generator should generate separate component index for unique and non unique components. And finally we need to change the code generator to use described facilities.\nThe good news is, it can be non braking change for the users. As the generated public API can stay the same. It reduces the footprint of an entity and it let us throw an exception not when we asking for a unique component/entity but when we breaking the rule of uniqueness.\nBad news, it is a lot of work :) . In my previous comment I forgot about one more thing - the matcher. They also has to be separated for unique components.\nAnd second consideration. If we already separating the indexes and trying to make Entitas more memory efficient. It would be also good if we separate the flag components. Flag components do not has to be stored in components array as well. We could have a flag buffer where every flag component is just a bit field. . I made small gist\nhttps://gist.github.com/mzaks/3817c0e1a4e700aee4deb2607fa21eef\nBasically you can have a System wich will hold a reference to a root node of a behaviour Tree and it will push the entities through the node. Haven't tried it on a real project, but conceptually should be fine :). I gave the whole idea some thoughts which I want to share.\nAs I see it there are two ways how a Kit can be implemented.\n\nActor Model approach. (https://en.wikipedia.org/wiki/Actor_model)\nA Kit is a self sustained package. It has it's own set of contexts with resulting Matchers and Entity types. It has it's own set of components and systems. As a user we have to instantiate it's context and the root system of the kit and trigger it in our game loop. We interface with the Kit by using the context to create it's entities and set components in it.\nContext Extension/Inheritance approach. \nA Kit provides base functionality. It defines Components and Systems which we can use by extending our context with it.\n\nBoth approaches has complications. \nIn Actor Model approach we would have to bridge data from our context to the Kits context. Which can lead to tedious mapping code. \nIn Context Extension approach we will basically end up with multiple inheritance and lots of inefficiencies. Because if Kit A contains 20 components and I extend my context with Kit A I am inheriting all 20 components and my Entity get's 20 more slot's in the underlying array. Even if I use only 3 out of them. As always Pareto principal (https://en.wikipedia.org/wiki/Pareto_principle) applies. Only 20% of the components will be needed by 80% of the users meaning that everyone will put a 80% overhead in there projects by Context Extension approach.\nI personally would rather try to tackle the problem of entity mapping. We could introduce a mechanism which a Kit developer could introduce in order to make the mapping automatic. Like for Example provide an interface which my components have to implement in order for the kit to run through an \"unknown\" entity and extract data which it needs.\nSo for example Kit has a PositionComponent and it implements a Kit.IPosition interface. If you have your own PositionComponent just let it implement this interface and than you can pass your entity to Kit's context and Kit's context will be able to create it's own entity based on yours (or sync it's entity with provided). So a sync method on entities which can receive a generic entity.\nI believe actor model is much more superior to the inheritance model in simplicity, but than again I am biased :) \nhttps://medium.com/@icex33/consider-oo-inheritance-harmful-4612e65f3047#.engi9dm7h. @VladislavKostin can you post a sample .entitas file you get this crash on?. @VladislavKostin the requirement is directly from the AddOn not from VS so you are right we should add it to the wiki.. Point 4 now describes the dependency on Java Runtime\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Tutorial-\u2010-Entitas\u2010lang#1-using-visual-studio-code. Hm ... seems like they changed something on the VisualStudioCode side. Can you share the link which you used to get infos how to install the plugin?. OK that's new :)\nI will than write it this way in the Wiki. Yeah, yeah, I just wrote another two chapters. Sorry for being so slow, it's just a side project so I return too it only when being kicked \ud83d\ude00. Keep kicking me, other wise I will digress into doing some other things \ud83d\ude05.. I would do something with the entity in those tests. Other wise a good compiler / JIT could optimize the call away, as the calls actually do not contribute to anything meaningful. E.g try getting Radius and sum it up. . See https://en.m.wikipedia.org/wiki/Loop-invariant_code_motion. Well it is expected that an index will be slower than holding a direct reference, it is however interesting that getting entities from dictionary is 5x faster than from index, as index is also backed by a dictionary. Will be worth investigating. Thank you for the tests and findings!. Would be nice to have a link to gist with the result of code generation. Otherwise there are too many questions in my head \ud83d\ude01. I gutes I would introduce a getView() method on IRemoved interface and implement it in the partial class definitions. BuffEntity would return null other two, this.view.value. Than you can just call IView view = e.getView(); and remove the block you marked.. ",
    "YimingIsCOLD": "Thank you for your explanation. At first, I didn't know that the order of creating the system will affect how the loop goes. So I do not need to worry about having a lot of retained entities?\n. I managed to have no retained entities as before that there were as much as around 50. I was afraid that it will slow down my game as there were no reusable entities as all the destroyed entities are being retained.\n. Yeah I did debug my game to see the number of retained entities. Okay thank you. I will just let how the entities work and not change things that I do not know. Thanks for all the explanations! :)\n. Yeah, It seems to work fine now. No more retained entities.\n. Thank you for your suggestion. I will go with option 2 too.. @FNGgames Thanks for wiki post. I really understand more on how important it is to have a good game architecture.\nI have a question about combining unity and entitas. How would you make the PhysicsObject (the code can be found in https://unity3d.com/learn/tutorials/topics/2d-game-creation/scripting-collision?playlist=17093) into a PhysicsService and through entitas system update the view of the character?. > You can put whatever you need in those interfaces. You only need a component if you want the ability for a system to be able to pull data from the view. In my case i have an execute system that loops through all the physics components and pulls position and velocity from them onto components - so Unity physics solves for position then i suck it back into entitias. \n@FNGgames Does your execute system runs on a fixed update to update the entity's position? . @FNGgames I see. Thanks for the clarification. . @sschmid Thanks for the example. \ud83d\udc4d . @kdrzymala \nZenject is really interesting. I shall give it a try. Thanks for sharing.\nShould we have a small dependencies injection framework built into Entitas?. @kdrzymala Okay. Zenject documentation is really awesome and with the code snippet you shared, I had already setup and started using Zenject.. ",
    "gjroelofs": "Testcases are not passing, and hard to fix due to platform-specific build settings.\n. The generated code is compared directly to an @\"\" created string without unifying the line-endings.\nOn a Windows environment I'm getting errors on all ComponentExtension and IndicesLookupGenerator testcases because CL/+RF are used intermixed in the generation code.\nGetting VS to function properly with line-endings is a known head-ache, so I'd suggest unifying the line-endings before comparison (or making the comparison line-ending agnostic).\nSome of the errors I get locally on develop after a VS compile:\nExpected string length 1073 but was 1068. Strings differ at index 19., Expected: \"namespace Entitas {\\r\\n public partial class Entity {\\r\\n ...\", But was: \"namespace Entitas {\\n public partial class Entity {\\n ...\", -------------------------------^\n   at describe_ComponentExtensionsGenerator.generates(Type type, String code) in D:\\Projects\\C#\\Libraries\\Entitas\\Tests\\\nTests\\Entitas.CodeGenerator\\describe_ComponentExtensionsGenerator.cs:line 25\n   at describe_ComponentExtensionsGenerator.b__3_0() in D:\\Projects\\C#\\Libraries\\Entitas\\Tests\\Tests\\En\ntitas.CodeGenerator\\describe_ComponentExtensionsGenerator.cs:line 29\n. I completely agree, and it is standard practice in general.\nHowever mistakes do happen, and the intent is to limit the damage that can be caused by them.\nAnd any alterations to the code generator in general tend to be catastrophic.\nThe issue happened because the Code Generator code was altered, not the generated code. :-)\n(Still, your point stands, obviously :+1)\n. Agreed, I cached the result now as well (and changed the internal pool naming to avoid conflicts).\n. Just a heads up, if you now declare a Pool named \"allPools\", you'll create compile errors. See 631b497 \n. Just a heads up; the Unity Mono-based compiler has definite issues when it comes to the ordering of named arguments that leads to the compiler itself crashing. This can lead to some obscure bugs which are very hard to track. (This is not as an argument against, as we use them as well; but caveat emptor)\nhttps://gist.github.com/gjroelofs/626a67f22a6956e361c9\n. It's not about the compiler used to analyze a project though; this is about the compiler used by Unity itself to compile your project. I suspect that @sschmid isn't supporting replacing the compiler in Unity as this isn't popularly supported.  (Although we ourselves use: https://github.com/SaladLab/Unity3D.IncrementalCompiler)\n. ",
    "JGameCreation": "I solved the issue and sent a Pull request:\n Exclude scripts only needed in editor from build #42 \n. ",
    "ifshuaishuai": "I noticed OnEntityUpdated not function well when i change value in Unity inspector, when value changed, previousComponent is equals to newComponent.Same as OnEntityRemoved, when OnEntityRemoved's event is called, component's value(string type) has already be changed.I don't know if it is an issue.\n. Nice work, I'll try that out. :)\n. Just wonder if using Antlr will be a good solotion?\n. Antlr is a just a \"hammer\" pop in my head(so the rest of world becime a nail?), Roslyn sounds promising, I'll looking into that:)\n. ",
    "raveneer": "I destroyed my entity than entity's last component removed. \nafter long testing, I understand the mechanism (casting component Arg to removed component)\nthis is very confusing...\nhow about adding simple event?\nlike\nGroup.OnEntityRemoved(Entity entity);\nhave a  good day.. Thank you. \nAfter off visualDebugging: 10000 entity with damage dealt per tick : 180ms -> 2ms!\n. it's working but can't understand.\nI can't explain this symptom. plz, look at the video...\nhttps://www.youtube.com/watch?v=LYol1VNixtI. I'm making a similar game too. in my test, \"replace component\" takes time. 20000 plant entity get aged every 0.2sec, they replace age component(only have one float value). it takes 20ms. not slow, but 10times slower than just adding value 20000 float list. recommend run deep profiler first. \nhttps://www.youtube.com/watch?v=h0uETw_XFn0. https://youtu.be/gzB17VH9CU8\nI tried in project folder too.\nin jenny folder, can't find properties, in the root folder (properties have), can't run jenny.. running fix worked me.\nhttps://www.youtube.com/watch?v=Mh8GG-wwV8k&feature=youtu.be\nrun fix, and ignore options.\nthank you very much!. you don't need a list of entities, just make a group. Igroup.getEntities() will return desired entities!. @nomadfighter \nyes you right.\nI'm finding a solution before start refactoring.... @rglobig \nThank you! \n\n. ",
    "trumpets": "This would be awesome! What's the procedure on getting it in? I think I could help with it :)\n. I have implemented something similar for behaviour trees in Unity, was working on a project that required that level of AI and while in theory is amazing for combining common behaviours (entities in this example) it turned out to be just a bunch of objects being created and cleaned up by the GC ( we were creating a lot of them ). IMHO I am pretty much satisfied by just writing pool extensions which accomplish the same thing. Instead of a class and an object I just have an extension method :)\n. To be honest, as time goes by our game  needs this more and more :) \n. I see... The issue I stumbled upon, and thus discovering this intricacy, was that my object count was increasing a lot, I had a lot of entities which were being destroyed and created, and the GC was turning on once in ~10 secs and that was stuttering my game :/\nI am tinkering with the code right now, trying to figure out another way...\n. I found this article summarizing some garbage tests with events and delegates: http://jacksondunstan.com/articles/3264#comments and they confirm your findings. 104 bytes for creating a delegate and then another 208 bytes when adding that delegate to an event if it is the second+.\n. That's how I do it currently as well. But I could see how it would be useful :)\n. If you want to access the component being removed you can do it by subscribing to the groups removed event which passes the component removed to you.\npool.GetGroup(Matcher.Score).OnEntityRemoved += (group, entity, componentIndex, component) =>...\nExample here: https://github.com/sschmid/Match-One/blob/master/Assets/Sources/Features/RenderResource/RemoveViewSystem.cs\n. Still happening for me on 0.29.1. Also while exploring the Entities in Pools in the scene hierarchy I get the occasional TreeView exception.\n. @sschmid Man you are killing it lately ! Thank you for these, you support Entitas more than any OS framework I've ever used! :). No no, migration was a complete success :) \nI meant how do I handle indices and blueprints in terms of game restart. Do I need to call something like context.DestroyIndices or context.DestroyBlueprints ?. Thanks @sschmid !\nI did this in the game:\n```C#\nvoid OnDestroy() {\n        systems.TearDown();\n    systems.DeactivateReactiveSystems();\n    Contexts.sharedInstance.game.Reset();\n    Contexts.sharedInstance.input.Reset();\n\n}\n```\nAnd both contexts are emptied properly, however, they stay in the DontDestroyOnLoad part of the game and if I come back to the scene and recreate the systems etc, I get two new Game and Input contexts in the view hierarchy for every time I come back to the scene.\nAny idea why that is happening?\nThanks!. Also just calling\nC#\nsystems.DeactivateReactiveSystems();\nContexts.sharedInstance.game.Reset();\nContexts.sharedInstance.input.Reset();\nsystems.ActivateReactiveSystems();\nsystems.Initialize();\nWithout changing the scene does nothing. It's like the reactive systems don't pick up the changes for some reason :/. I have some more info on the issue but not sure how to interpret that. Basically the reactive systems are working fine but the entities are not created properly.\nFor example I have a SetupLevel initialize system which creates an entity with a LevelComponent (unique) which is then picked up by another reactive system which sets up the game pieces.\nThat system calls context.SetLevel which is just this autogenerated code:\nC#\npublic GameEntity SetLevel(int newLevel, int newColumns, int newRows, System.Collections.Generic.List<Piece> newPieces, System.Collections.Generic.List<Wall> newWalls) {\n        if(hasLevel) {\n            throw new EntitasException(\"Could not set level!\\n\" + this + \" already has an entity with LevelComponent!\",\n                \"You should check if the context already has a levelEntity before setting it or use context.ReplaceLevel().\");\n        }\n        var entity = CreateEntity();\n        entity.AddLevel(newLevel, newColumns, newRows, newPieces, newWalls);\n        return entity;\n}\nI attached a debugger and everything goes smoothly the first time, but when calling my reset method which basically executes the snippet in my last comment the debugger hangs on entity.AddLevel(), like it never executes. The GameContext also register an entity but without any components on it.\nI guess there is something that's bother the AddLevel method after following my reset sequence?\nFor reference, the AddLevel method is just this autogenerated code:\nC#\npublic void AddLevel(int newLevel, int newColumns, int newRows, System.Collections.Generic.List<Piece> newPieces, System.Collections.Generic.List<Wall> newWalls) {\n        var component = CreateComponent<LevelComponent>(GameComponentsLookup.Level);\n        component.level = newLevel;\n        component.columns = newColumns;\n        component.rows = newRows;\n        component.pieces = newPieces;\n        component.walls = newWalls;\n        AddComponent(GameComponentsLookup.Level, component);\n}\n@sschmid does anything catch your eye? :). That does make sense, but I still don't understand why the code above does not work.\nIt is pretty weird. If I restart the scene I end up with duplicate contexts in DontDestroy in the hierarchy and if I don't restart the scene then components are not added to entities :D. I will try without ClearGroups in a minute. I am not manually creating the contexts, I just use Contexts.sharedInstance to create the systems. ```C#\nsystems.TearDown();\nsystems.DeactivateReactiveSystems();\nContexts.sharedInstance.game.Reset();\nContexts.sharedInstance.input.Reset();\nsystems.ActivateReactiveSystems();\nsystems.Initialize();\n```\nThis seems to do it with ClearGroups removed from the Reset method. This is when I don't recreate the scene. So pretty much fits my use case. However if I just write this code in my OnDestroy method of the mono behaviour\n```C#\nvoid OnDestroy() {\n        systems.TearDown();\n    systems.DeactivateReactiveSystems();\n    Contexts.sharedInstance.game.Reset();\n    Contexts.sharedInstance.input.Reset();\n\n}\n```\nwith ClearGroups removed and reset the scene I still get duplicate contexts :/ They are all empty all the time but not sure if that's an issue.\nAs a reference, here is my Start method of the mono behaviour.\nC#\nvoid Start() {\n        var contexts = Contexts.sharedInstance;\n        contexts.SetAllContexts();\n        systems = CreateSystems(contexts);\n        systems.Initialize();\n}. Thanks for the info @sschmid :) I'll do a PR removing the ClearGroups() from Reset() and also adding Contexts.Reset() in the next day or so :). Thanks for the reply @sschmid . Yes I am calling context.Reset() when I get that error, but the AddViewSystem implements ITearDown with the method implementation above, i.e. getting all entities with view and manually unlinking them while calling systems.TearDown() before context.Reset(). \nThis line entity.view.gameObject.Destroy() does both Unlink() and Destroy() in that order.\nThat's why this issue is very weird for me :D. Oh man, what a silly mistake :) I named my extension method Destroy which does Unlink() and Destroy() but that was actually conflicting with a Unity method and was not reported by my IDE nor Unity itself :D\nIt wasn't ever called to manually Unlink the Entity Link. I just renamed it to UnlinkAndDestroy() and this works now. Yeah it is not really clean, as I need to have my own TearDown system which handles this but that's fine I think :)\nAs a suggestion, maybe we can have an EntityLink component and an EntityLink reactive + teardown system in the default Entitas add ons which adds EntityLink to game objects and makes sure to unlink them on TearDown? That would be a cool use case for the new kits system right? @sschmid  :D. Yeah I since started getting retention exceptions but they were not constant, I couldn't pinpoint what game states triggered them. I'll investigate further these days.. check out this: https://github.com/sschmid/Match-One It is always up to date with the latest entitas. Of course! It contains Entitas 0.38.0 bundled with it. 0.39.0 release just a couple of hours ago :) I am sure Simon will update the project. But the new changes are pretty under the hood, you won't notice them :). I must add to this \"accidental and hard to spot bugs\" :) this is a good feature IMHO . @GreatVV nope, does not do it for me :/ I also see that threshold value in preferences. It is set to 8 by default I guess. What does it do? Maybe it is somehow connected?. @sschmid as always you are exactly right :) Thank you! btw that issue leads to a 404 for me. ",
    "kartalguner": "Hello,\nI was just wondering what the benefits of having a logging system integrated with Entitas are. If you just provide the events and contexts then we are free to choose our own logging framework.  I have previously gotten nlog and log4net to work in my experiments.\n. ",
    "kicholen": "It might help finding some bugs but as @mzaks said it would be useful only in dev state. The log output  would be insane. If done I would like to see it as kind of plugin that is not built in to framework.\nI agree with @SvDvorak  checking for system-component dependencies is troublesome. Similar thing to Artemis-odb Component-Dependency-Matrix could resolve that issue quite nicely.\n. I don't know if this is necessary. You could create entity with settings component (filled with data from server/file) before calling initialization on systems than getting it from pool on Initialize.\n. I think I'v implemented sth similar to your idea of TweenClass it's not great, syntax could be much smaller but it gets the job done. The idea was taken from universalTweenEngine, it would be easy to modify accessors in a way that ReacitveSystems would work as well. \ne.AddTween(true, new List<Tween>());\ne.tween.AddTween(e.position, EaseTypes.quadIn, PositionAccessorType.X, timeLimit)\n    .From(e.position.pos.x + offset)\n    .To(e.position.pos.x)\n. ",
    "npruehs": "The blueprints are just created once, when the game is loaded, and never cleaned up again :) The idea is as follows:\n1. Game designer creates a blueprint, say \"Knight\".\n2. Game designer adds required components to the blueprint, say \"HealthComponent\" and \"AttackComponent\".\n3. Game designer tweaks the values, say settings Health to 140.\n4. Game designer saves the blueprints to disk.\n5. Entitas loads all blueprints at startup.\n6. Whenever the game needs to create a new Knight, it looks up the respective blueprint, and creates a new entity.\nThis behaviour is similar to the CreateRandomPiece extension method in the MatchOne example, except for all values are easily configured and re-balanced on a hour-to-horr basis by the game designers. We found that approach to be very important (or even required) when building games that require a lot of iteration, such as real-time strategy games.\n. @MrMonotone Creating a new extension is not a big deal in most cases for us engineers. They require a re-compile however, which can take longer the bigger your project gets (~ 1 minute in our current project).\nFor game designers, that are purely concerned with adding new data and balancing existing one, this can be a huge deal, though. First, we don't want designers to mess around in our C# code. Second, many designer just won't have Visual Studio or a similar IDE installed on their system. Imagine your teammate wanting to tweak the Health and Damage values of some of your entities. It would be far easier with an editor similar to, say, StarCraft II, than doing so in code:\n\nBlueprints allow this entity data to be easily serialized and de-serialized, from pure data files (e.g. JSON). This reduces the turn-around time by a lot, as we have learned.\n. We've already got something in place for converting between XML and C# blueprints. \nThen, I'd love to provide the conversion between blueprints and Entitas entities. My original question was whether my proposed way would be the way to go, and if so, whether I should wait for the new code generator to be finished.\nAlso, if you have a different data format in mind, we could split the work :)\n. The challenge is creating the components (step 2.iii.). Because their types are not known at compile-time, we were forced to use reflection in our framework to create the entities. While this works well, a common interface and a method generated with the code generator would be much faster. But I can start off either way, and we can iterate on it.\nI love the idea with the feature sub-folder. We could even go for an additional repository - that depends on how invasive that feature feels for you.\nLooking forward to the example!\n. I could, anytime basically - thought I'd wait for the Add-ons example, before messing up with your repo structure.\n. Hey @sschmid :) I think the cleanest way to go would be to have separate repositories. As @MrMonotone pointed out, compatibility will always be an issue - can't escape that. Luckily, that's not your problem. Plugin developers should always state the version of Entitas they are building against, and are responsible of updating whenever Entitas introduces breaking changes. See https://github.com/joscha/play-authenticate for an example, this is an authentication plugin for the Play! framework we've been using a few years ago.\nHaving a list in the wiki or Addons.md would be great for both sides, I think :+1: \nI don't think that including add-ons in Entitas itself via git submodules or subtrees is a good idea, though. People should be able to choose which plugins they want to use, and not be forced to include all of them when cloning Entitas. In most cases, if the plugin developers are working cleanly, Entitas won't even need to have to \"recognize\" or \"accept\" these add-ons - they would just build on Entitas classes or, even better, used in addition to them. If Entitas adheres to common Framework Design Guidelines (as it seems to me :) ), then this should not be much of an issue. (See https://msdn.microsoft.com/en-us/library/ms229042%28v=vs.110%29.aspx for some pointers.)\nWhenever something really gets popular and no one wants to miss it, you can still integrate it into Entitas itself. I've seen that happening for git subtrees recently: https://github.com/apenwarr/git-subtree/blob/master/THIS-REPO-IS-OBSOLETE\n. I think things like blueprints can easily built on top of Entitas, without having to change its core. We did the same thing in our framework, and made the mistake at the beginning of coupling it too closely to the core where it wasn't necessary at all. Clearly, blueprints don't do anything special except for parsing data from any stream (could be network, file, ...) and calling Entitas core functionality for creating entities. Other addons should be designed the same way, in order to minimize the dependencies of the Entitas core, avoiding it to have to reference stuff like IO or Reflection.\n. Yeah, the ideas are at the top of this thread :) I'll keep you posted!\n. Alright, it's almost done! I've created a new repository at https://github.com/npruehs/Entitas-Blueprints-CSharp - are you alright with the name? Everything, including the Readme file still work in progress of course.\nI've been diving right into your code generation and I have to admit its interface works like a charm. I was able to write my own code generator, and hook it up to the Match-One example at https://github.com/sschmid/Match-One\nI love that approach because it's not invasive in any kind, meaning that I didn't need to change any Entitas classes at all.\nHere's a gist of the results, works incredibly well already:\nhttps://gist.github.com/npruehs/c3270996b178868dbaa1\nNote that the Match-One example seems to be still missing the methods RemoveComponentSuffix and ComponentLookupTags, I had to copy them over from the latest Entitas release.\nDuring development, I've opened a few issues, two of which might be helpful to reduce code duplication:\nhttps://github.com/sschmid/Entitas-CSharp/issues/64\nhttps://github.com/sschmid/Entitas-CSharp/issues/65 - would improve Entitas.Blueprints\nhttps://github.com/sschmid/Entitas-CSharp/issues/66 - would improve Entitas.Blueprints\nI'm gonna clean up the code now, rename the output files and so on, and I'm looking forward to hearing your feedback.\nGood night everyone ;)\n. Oh, yeah. My bad - in our framework implementation we do it exactly that way. By restrictions of the C# language, this guarantees all keys to be unique. I'd have stumbled upon this as soon as I'd started the implementation of the serialization part ;)\n. Yeah thank you! If we hadn't had the same issue before in our projects, maybe I wouldn't have come up with a solution as nice as the one you've proposed :+1: \n. Alright, XML serialization is done, and so is support for singleton components (components without any fields).\nI've updated the gist, take a look at the result data file:\nhttps://gist.github.com/npruehs/c3270996b178868dbaa1\n@sschmid Any chance that some mapping similar to ComponentNameToId will be added to the core of Entitas? Should I create an issue for that? Or should I keep it locally?\nNext, I'm going to create a version of Match-One that uses blueprints instead of PoolExtensions class for creating pieces, and I'm going to clean up my code as soon as the new code generator of Entitas is ready :)\n. @Backman Sure, will do! Any merits of writing your own BlueprintManager and FieldTable instead of just using plain old Dictionaries? We did the same for our project, but I can't seem to find a real advantage of it.\n@sschmid Any updates on my previous question? :)\n. @sschmid Yeah, the single approach we've been coming up with in order to avoid code generation was to use reflections for creating the components. The remaining parts mostly stay the same.\n@dxslly Yes, we've got both of that as well. First one is great for reducing redundancy, but introduces the same drawbacks as classical inheriance-based game models. In a recent game, we came up with Fighter blueprints, and Building blueprints, and very soon found out that we need a Turret blueprint which would have to derive from both ;) But because it's still useful more often than not, we can go for it.\nThe second one we've been using for level editors as well. We called it an Entity Configuration, which essentially boils down to an Entity Blueprint + an additional dictionary with overriding values. That way, you can put a \"Wounded Knight\" in your level, which is using the same values as a Knight but has reduced life at the beginning.\n. @sschmid Just updating to Entitas 0.28.2. Already love the new ComponentInfo provided to code generators! Any way of accessing whether the component has Entitas.CodeGenerator.DontGenerateAttribute attached? You don't seem to check it when creating ComponentInfos, and ComponentInfo doesn't provide a reference to the underlying component type, or am I missing something? :)\n. I see! Nice. What is generateIndex for, in contrast to generateMethods?\n. Thanks! Might wanna add that to the property XML comments :)\n. @sschmid There you go! The initial release: https://github.com/npruehs/Entitas-Blueprints-CSharp\nNow for a few more questions:\n- Right now, the code generators all write their files to the same destination folder. It might come in handy in the future to allow generators to write files to a subfolder of \"Generated\". Maybe add a third property to CodeGenFile?\n- In the blueprints code generator, I'm adding an additional file header containing the <auto-generated> tag to have code style tools ignore these files (see updated gist: https://gist.github.com/npruehs/c3270996b178868dbaa1). Might wanna do that as well in the base Entitas code generators :)\n- I'd love to create a (very similar) version of Match-One with blueprints. Just providing a few blueprints for different pieces, maybe with different colors tied to different scores or something like that. Match-One would then pick a random blueprint instead of just a random asset when creating new pieces. How should we do that? Should I make an additional repository for that as well?\n- Finally, I'd like to add some documentation about how to use the blueprints. Should we try and find a way to use them without code generation? Maybe in a different thread, before this one becomes too crowded?\n. Alright, there you go:\nhttps://github.com/npruehs/Match-One-Blueprints\nWorks like a charm! :) Pieces are read by a new BlueprintsController from the file Assets/Data/blueprints.xml.\nUnfortunately, prefixing the generated source file name with a folder name does not work:\nDirectoryNotFoundException: Could not find a part of the path \"D:\\Dev\\SCM\\Match-One\\Assets\\Sources\\Generated\\Blueprints\\PositionComponentGeneratedBlueprintsExtension.cs\".\nSystem.IO.FileStream..ctor (System.String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean anonymous, FileOptions options) (at /Users/builduser/buildslave/mono-runtime-and-classlibs/build/mcs/class/corlib/System.IO/FileStream.cs:292)\nSystem.IO.FileStream..ctor (System.String path, FileMode mode, FileAccess access, FileShare share)\n(wrapper remoting-invoke-with-check) System.IO.FileStream:.ctor (string,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\nSystem.IO.StreamWriter..ctor (System.String path, Boolean append, System.Text.Encoding encoding, Int32 bufferSize) (at /Users/builduser/buildslave/mono-runtime-and-classlibs/build/mcs/class/corlib/System.IO/StreamWriter.cs:124)\nSystem.IO.StreamWriter..ctor (System.String path, Boolean append, System.Text.Encoding encoding)\n(wrapper remoting-invoke-with-check) System.IO.StreamWriter:.ctor (string,bool,System.Text.Encoding)\nSystem.IO.File.WriteAllText (System.String path, System.String contents, System.Text.Encoding encoding) (at /Users/builduser/buildslave/mono-runtime-and-classlibs/build/mcs/class/corlib/System.IO/File.cs:626)\nSystem.IO.File.WriteAllText (System.String path, System.String contents) (at /Users/builduser/buildslave/mono-runtime-and-classlibs/build/mcs/class/corlib/System.IO/File.cs:621)\nEntitas.CodeGenerator.CodeGenerator.writeFiles (System.String directory, Entitas.CodeGenerator.CodeGenFile[] files) (at Assets/Libraries/Entitas/Entitas.CodeGenerator/Editor/CodeGenerator.cs:56)\nEntitas.CodeGenerator.CodeGenerator.Generate (ICodeGeneratorDataProvider provider, System.String directory, Entitas.CodeGenerator.ICodeGenerator[] codeGenerators) (at Assets/Libraries/Entitas/Entitas.CodeGenerator/Editor/CodeGenerator.cs:19)\nEntitas.CodeGenerator.TypeReflection.TypeReflectionCodeGenerator.Generate (System.Reflection.Assembly assembly, System.String[] poolNames, System.String directory, Entitas.CodeGenerator.ICodeGenerator[] codeGenerators) (at Assets/Libraries/Entitas/Entitas.CodeGenerator.TypeReflection/Editor/TypeReflectionCodeGenerator.cs:7)\nEntitas.Unity.CodeGenerator.UnityCodeGenerator.Generate () (at Assets/Libraries/Entitas/Entitas.Unity.CodeGenerator/Editor/UnityCodeGenerator.cs:27)\nAlso, Match-One asset serialization is still set to \"Mixed\", you might want to change it to \"Force Text\" for future updates :)\nI've found one or two other things as well, but I think I'm gonna create a few new issues, so you can finally close this one.\n. @sschmid The XML file has been created with the Entitas Blueprints serializer:\nhttps://github.com/npruehs/Entitas-Blueprints-CSharp/blob/develop/Source/Entitas.Blueprints/Entitas.Blueprints.Xml/BlueprintXmlSerializer.cs\nThat serializer essentially wraps the .NET XmlSerializer and thus supports all CLR classes, with the same restrictions applied (i.e. serializes public fields and properties only, requires getter and setter, ...)\nOf course, as soon as one or more official Entitas formats have been developed, I'd love to add them to the Tome editor for easier data editing :) \n. Nice! One thing though: Many games I've been working at recently required the data (or parts of it) to be present at the server as well, which obviously is unable to deal with ScriptableObjects. I'd suggest providing one non-Unity data format at least to keep Entitas interesting for online games, and/or other engines such as MonoGame.\nEDIT: Haha, but I love the animation curve component! :)\n. Funnily, I had already written one myself ;) There you go: https://github.com/sschmid/Entitas-CSharp/pull/51 We can also remove the part of finding msbuild, if you'd prefer assuming its part of the path.\n. Thank you!\n. Neat! That should do the trick! :)\n. Yeah, I had to copy it for my own implementation of IComponentCodeGenerator. Not a big deal, but other people might easily miss the pooling part by just calling the component constructor instead. Your decision :)\n. Excellent :)\n. Had to look a short while before I found Pool.CreateEntity(Blueprint) and ComponentBlueprint.CreateComponent(), but yeah, this seems to be exactly the way we're doing it in our framework as well. Nice! :)\n. Ah interesting, yeah I like that. Thinking about that, settings are no different than entities with components... Actually, I recall Blizzard do it like that in Hearthstone. Thanks for the pointer!\n. Nice, thank you! :+1: \n. No offense taken :) The name is actually quite \"old\", and has been developed by our team a few years ago. You can find more details about the idea here: https://github.com/SlashGames/slash-framework/wiki/Entity-Blueprints\nHowever, with the advent of Unreal's blueprints, which are something completely different, a name change sounds perfectly reasonable!. ",
    "MrMonotone": "@npruehs How are blueprints different to extensions? Extensions can be created without creating a new derived type, recompiling, or otherwise modifying the original type. I mean if you want to create a new system class that generates that object(factory). See this for reference: https://github.com/sschmid/Entitas-CSharp-Example/blob/master/Assets/Sources/Features/CreateOpponentsSystem.cs\nMaybe I am missing something?\n. @sschmid @npruehs have you two started working on this?\n. @sschmid I do not think there is anyway to solve software not getting updated. There is always going to be a chance that old addons don't get updated because there is no way to predict if how the API will change. Unless you are very firm with keeping backwards compatibility but its probably too early to worry about that. The way you could mitigate the damage is just to have Entitas not recognize old versions of addons.\nWhat I would do:\nThere is a way to embed \"subrepos\" in git. I forgot what they were called.\nWhat I would do is have addons be a subrepo of Entitias. Addons would contain subrepos to various addon repos. Then authors would send pull requests updating those subrepos by commit. Then you would just accept those. Entitas would only recognize addons that are compatible with the current version of Entitas being used. Maybe give some sort of warning like this project is incompatible or something. You could do a similar thing like you have with the update button in Unity haha.\nI am only a uni student so take what I say with a grain of salt.\n. If we are going to seperate \"Addons\" from Entitas then we need to decide what specifies a feature of Entitas or what is an Addon. If Entitas is suppose to be more data driven then wouldn't Blueprints be considered a feature instead of an Addon? For example is logging a feature or and addon? There could be arguments for both. Where is the line drawn? I do not think its a big issue now but I feel it will be a tough issue to answer down the line. \n. I would like to use this in a project that does not use Unity. However it seems like it was easier to do this before. I found the Pure Entitas Project. However, it does not seem to be updated. Is this project not going to be supporting that use case? Does this mean that I can no longer use the code generator in my Pure C# project? As someone who is out of the loop, this is very confusing to me.. ",
    "iaincarsberg": "Wouldn't using semver's major number solve the API change issues?\nAs a way to automate the flagging of obsolete code, you could force all addon's to provide something akin to npm's package.json, which lists supported versions of Entitas, using strings such as \">0.10.0&<=0.27.0\", this would also help when you have add-ons depending on other add-ons.\nThen the migration tool could report errors when migrating to a version of Entitas that isn't compatible with older versions of installed add-ons.\n. ",
    "ForgeMistress": "I found a system like this actually rather easy to make using C#'s built-in serialization, though an official  version of the concept would be incredibly useful.\nIn my honest opinion, this is pretty much the only feature that is missing from Entitas to make it viable for large-scale projects.\n. You could always create a separate interface with your properties defined then refer to the component by that interface if you wanted.\n. ",
    "Backman": "After reading this issue I could not stop thinking about it. Therefore, a couple of weeks ago, I started to implement a similar system which I was thinking to use in my side project.\nDid not come here to hijack the comment feed but thought it might be a good idea to share it with you guys.\nIt's probably not as robust as your implementation, and very early in development, but it might give you some ideas.\nGreat idea to use the exisiting code generation interface. That idea did not cross me.\nHere's a link to the repository: https://github.com/Backman/entitas-blueprint\nAt the moment the editor is kinda broken but will try to fix it as soon as possible.\n. @npruehs No, there really is no reason I use classes instead of Dictionaries. Just kinda made sense to do it when I was writing it! :)\n. Personally I don't like to store data files like blueprints in a binary format. Simply because of the quick iterations you get with human readable files. So my vote is on that type of serialization format.\nBut as @JuDelCo mentioned. The binary way might be the way to go at first?\nBut in the future It would be really cool to be able to choose the blueprint serialization of your choosing\n. ",
    "dxslly": "This is a great feature idea.  A thought I have not seen mentioned yet is parenting blueprints.  This would allow blueprints to inherit the collection of components and values of the parent blueprint as defaults.  Child blueprints could override and add these components.  This would allow specializations of blueprints without having to duplicate inherited components and help avoid large refactoring of similar blueprints.\nIt maybe worth keeping in mind another possible feature while designing this due to how similar they may be.  That feature being serializing and deserializing of entity instances.  I could see this being used for persisting game state as save files or into a database.\n. ",
    "Thraka": "Hi. I'm new here too. I don't see how this gets my own component into the system. I created a new console project, added the generation/entitas code in it, I call your generation code from the wiki yet the generated types do not have my PositionComponent listed. What do I need to do exactly to hook all this up?\n. My generated output folder does not have any code related to my component class I made. It just has pool classes.\nMy component class in my generator project\nnamespace EntitasCodeGeneration\n{\n    public class PositionComponent :IComponent\n    {\n        public int X;\n        public int Y;\n        public int Z;\n    }\n}\nIf I use your sample code. This does not cause my component to suddenly be generated\nGenerator project (which has the component class in it)\n```\nstatic void Main(string[] args)\n{\n    Console.WriteLine(\"Building SadConsole entities\");\n// All code generators that should be used\nvar codeGenerators = new ICodeGenerator[] {\n                            new ComponentIndicesGenerator(),\n                            new ComponentExtensionsGenerator(),\n                            new PoolAttributesGenerator(),\n                            new PoolsGenerator(),\n                            new BlueprintsGenerator()\n};\n\n// Specify all pools\nvar poolNames = new[] { \"Core\" };\n\n// Specify all blueprints\nvar blueprintNames = new string[0];\n\nvar assembly = Assembly.GetAssembly(typeof(SadConsole.Game.Entitas.Entity)); // I compiled entitas into a library which I reference in this project.\nvar provider = new TypeReflectionProvider(assembly.GetTypes(), poolNames, blueprintNames);\n\nconst string path = \"./Generated/\";\nvar files = CodeGenerator.Generate(provider, path, codeGenerators);\n\nforeach (var file in files)\n{\n    Console.WriteLine(file.generatorName + \": \" + file.fileName);\n}\n\nConsole.WriteLine(\"Done. Press any key...\");\nConsole.Read();\n\n}\n``\n. I looked a bit more into it and I figured out why it doesn't generate anything for me. I changed the namespace of all the entitas code and you do atype.fullname == \"Entitas.xxxx\"check on things \ud83d\ude1e How come the code generator doesn't do atype == typeof(Entitas.xxx)` instead?\n. That sounds awesome. Especially because people could generate into other languages. I still voice my opinion for a good example of a non-unity project as an example though :)\nOne thing you could do is have a init system where the consumer provides all the types you know the generator needs.\n. @mike991166 It may be the difference in methodology. It seems that you don't create an \"entitas.dll\" library and reference that. You include the entire code base in your game project. I have two projects:\n1. My game project which also defines components used by entitas.\n2. My generation project.\nBoth projects have the entire entitas code base. The generation project includes my component files from my main project. When the generation project runs, it outputs the generated files into a folder for my main project. Then back in my main project I exclude the \"generated\" folder and include it again to pick up all the new files.\n. @mike991166 I just wanted to comment that I played around with this for a while and I find it very hard to use in a non-unity project. I've now started to test thelinuxlich/artemis_CSharp and it seems to play really nice with MonoGame. The tutorial website is simple and gets you started. However, there is also a sample MonoGame game where you can explore a full implementation of it. \nSo far I really like it, however, I really, really, love the entitas way building out the entity to have the components built in and miss that.\n. I second the motion for a non-unity based example. I cannot figure this thing out \ud83d\ude22 \n. ",
    "grumpyoldman1066": "I'd love a straight C#/Monogame example as well.  I can't get this working.  It generates the files, and those files show up in my project, but the component list has zero components and none of their code is generated.  Generating code in Unity worked fine for me.\nIs there something I'm missing or should I wait for the executable generator?\n. I second the request for a non-Unity example project, even one sans graphics that simply outputs to a log file.\n. ",
    "mike991166": "Just want to add support for a nice MonoGame example.  I'm having the same problem as others where no component code is actually generated.  I'm excited to try this, but unable to proceed.  Thanks for any help you can provide.\n. Thanks, that did it.\n. ",
    "aaronmell": "In order for this to work, I believe your going to have to remove the reliance on partial classes during generation. Since a partial cannot exist outside of the assembly it wouldn't work in its current form. \n. The namespace issue might be problematic, since it uses partials on the entity class for the extension methods.  I think that could be fixed though, instead of using a partial, why not turn the partials into true extension methods that operate on the Entity and Matcher objects? I might be missing something though, since I am unfamiliar with Unity. \n. Its probably just my experience as as business developer peeking through and being pedantic. It bugs me that resharper complains about the namespaces not matching the folder structure in the project. \n. ",
    "aloisdeniel": "Would be very interested in that too!\nI haven't used Entitas yet (and I won't with Unity), but couldn't an inherited class be generated ?\ncsharp\n   public class Entity : Entitas.Entity {\n        #region Components\n        #region Position\n        public PositionComponent position { get { /* ... */ } }\n        public bool hasPosition { get {  /* ... */ } }\n        public Entity AddPosition(float newX, float newY) { /* ... */ }\n        public Entity ReplacePosition(float newX, float newY) { /* ... */ }\n        public Entity RemovePosition() { /* ... */  }\n        #endregion\n        #region Rotation\n        public RotationComponent rotation { get { /* ... */ } }\n        public bool hasRotation { get {  /* ... */ } }\n        public Entity AddRotation(float angle) { /* ... */ }\n        public Entity ReplaceRotation(float angle) { /* ... */ }\n        public Entity RemoveRotation() { /* ... */  }\n        #endregion\n        #endregion\n    }\n. ",
    "haggerty-william": "Was a nuget package ever created? Cant seem to find an official nuget package.. ",
    "ReadmeCritic": ":tada: \n. ",
    "Necromantic": "Thanks for the response. I thought about multiple solutions and that was one of them, but to be honest that one kind of defeats the point of the entity system and would basically be a system in itself. You also couldn't use any of the group callbacks etc. when adding new components, you'd have to replace the whole component(with the list) just for changing one of its sub-components, which just doesn't feel right.\nWhat I've done so far is make a [MultipleInstance] Attribute and basically duplicated the components array and all it's utility variables and methods like:\nreadonly IComponent[] _components;\n        readonly List<IComponent>[] _componentLists;\nI even went so far to check for that attribute on code generation.\nBut because everything is kind of duplicated with list behaviours you'd also have to separate component index, type and name lists etc. in order to not clutter the different arrays with empty references that would only ever be filled in the other.\nSo at some point it feels like the only good and clean solution would be to build it into the system from the ground off.\nI'm not really working on a specific project right now so it's nothing I need urgently, it's just something I noticed when trying to implement an old attribute/skill system based on a (really simplistic) entity system of my own with Entitas.\nI just thought it would be an interesting feature for more applications and that it might be interesting to have it as part of Entitas.\nIf I find a good solution myself I'll let you know.or possibly create a fork.\n. I don't see how it would make the API that much more confusing just by allowing more of the same component type. It would give a lot more possibilities and opens up more elaborate game design.\nHaving to manage Lists of \"components\" in a component kind of defeats the point of an Entity System and only data being in components. What's in the Lists would be the components, not the components themselves and those wouldn't play along well with any of the rest of the system.\nYou'd also end up with old list contents unless you clear them every time you remove and cache a component else you end up with a whole lot. And if you want to cache those actual embedded components in the list you'd have to build your own cache and your own reactive system.\nWhat's important is the single components in the list, not the whole list of them. For adding you only want those actually added etc.\nOne-to-many relationships (which are pretty common) are just not feasible that way.\nOh well, guess I'll have to go back to my own implementations. Thanks for considering it anyway.\n. ",
    "miketon": "Yes!  I spent ~3 hours stepping through the repo available looking for this.  Thanks for the pointer, and taking the time to answer this.  I really appreciate the work y'all are putting in to Entitas.  It's a very different approach to code than I'm familiar with, and are loving it so far.\n. ",
    "Roms6": "Well, my current use is implementing a group of entities as a DependencyProperty. Let's say those entities are Countries. This way in my xaml file, I can easily call the DependencyProperty as an ItemsSource named Countries. I couldn't fill a ListBox more easily, let's say I want to show country names, I just need a {Binding country.Tag} (country being a CountryComponent and Tag the Property) set in a DataTemplate. If I want to show more data, I just need more bindings like this one.\nFor now I can see two other ways to achieve this. Due to the nature of Entitas (it's reactive), I could handle adding/updating/removing myself, that means way more lines of C# code and avoiding the binding feature. Also I could create a data Model that would mimic my components structure, except fields would be properties this time. To sum it up, it can be solved differently but it's far from convenient.\nI understand why you're enforcing this rule, but a guideline should be enough, don't you think ? :)\n. Hey @sschmid, thanks for reenabling this feature. I just made a quick test, and it seems the CodeGenerator is behaving the same way : properties are just ignored. I made a simple TestComponent with a string property (fully declared, not an auto-property). Edit: doesn't work when using an auto-property too.\n. It works like a charm. Thank you very much :)\n. I just noticed we can't visualize / edit component properties through the Unity Editor. But I guess that's more a matter of finishing making Entitas \"friendly\" towards component properties.\n. Thank you, I just updated it and everything seems perfect :)\n. The latest uFrame ECS beta was promising but the editor still had issues (handlers were not generated sometime, for example). Not to mention it lacks useful features from Entitas : component themselves are not used as states (you REALLY want this DeadComponent to be used to check if an entity isDead, why would you include a boolean in your DeadComponent class?), and we cannot make groups based on excluded components.\nThe current state of uFrame ECS isn't stable, and it didn't get update for months, while Entitas is actively supported.\n. They're not supposed to hold a Player component, because this system is reacting when it's added or removed. The entities you'll be looping in the Execute(List<Entity> entities) method actually include entities having your Player component (because it has just been added), and entities not having this component (because it has just been removed). This is why you should check if (entity.isPlayer), to know something has been selected or deselected.. ",
    "grygus": "It would be great to have two types of serializers human readable and binary, text serialization is great during development, you can easly check previous versions, merge conflicts, comparing.\n. For this version of unity just change Color to EditorGUIUtility.HSVToRGB, to check if version is greater you can use Application.unityVersion and than set your own define\n. This is solution for  5.2.x and versions below. \n. The most straightforward way that comes to my mind is to make reactive system for each transition example IdleRunTransitionSystem that listens for trigger to change state and components for each state, than you would need IExecute,IReactive systems for (IdleStateSystem,RunStateSystem) to start doing stuff when in state. And of course components that directly triggers state transitions.\n. Sschmid but this code still will be called every component replace right? Wouldn't it be better if it would be called just on first component Add and last Removed? Right now for this kind of stuff I do not use e.Replace but just access fields directly e.ticksLeft-- ,but this breaks reactive approach :(\n. @sschmid I know I should't but it really hurts when I know that code is called every update even when it doesn't need to :) but i see your point. I also do not like this kind of separation of things for me invincibility flag and timer are one thing and it should be one component. What if i would need fly timer shoot timer.. number of components is growing really fast :)\n. @sschmid hmm did I missed something? can I have 3x TimerComponent on one Entity? :)\n. I came up with another nasty thing that is happening right now in this state of events. When your system depends on the state of previous component you supossed to subscribe to OnUpdate hovewer if Add is still called you usually end up with doing similar things twice first in OnAdd and than in OnUpdate you make some modifications based on previous state and can call methods from OnAdd one more time, what can do further complications.\n. I also prefer Pool, i think it's more sexy, like eye candy :)\n. First of all Loading Prefabs from resources by string is not the best Idea, I recommend to make some code generator to generate classes for resources so you could use fields instead of strings, than you would have just simple enum to choose which prefab should be loaded and your problem automaticly would disappear. As long as i work with entitas that wasn't a problem at all :) . Cheers!\nLazy option would be to just scan resources for assets of some type and create string array from them than you would need to make your own ITypeDrawer for PrefabResourceComponents which creates dropDown list from your array. \nFor your sprite tilling system example actually this is desired behaviour, and editor performance shouldn't be an issue. But if you want to have possibility for apply you can just draw Apply Button :)\n. It would be nice to have event firing when Blueprint inspector is updated in playmode, that would give a possibility to test blueprints live. \n. ",
    "cedricdg": "Prepared implementation on branch feature/roslyn_code_generator. Progress can also be viewed in pull request https://github.com/sschmid/Entitas-CSharp/pull/104/.\n. Thanks for the remark, I'll watch out for the next commits.\n. ",
    "thematthopkins": "The original DSL (or JSON + schema) still sounds like a solid idea to me.  That would also set Entitas up so that it could down the line use T4 templates (*.tt's) so the code generation into a standard c# build process.  MS uses T4's internally for some of the new dotnet core stuff:\nhttps://github.com/dotnet/corefx/tree/master/src/System.Numerics.Vectors/src/System/Numerics\nI'm not sure if other's components are more complicated in some way, or include logic, but mine would all be representable with:\n{\n  \"MyNamespace.MyComponent\" : {\n     \"pools\": [\"core\"],\n     \"properties\": {\n         \"position\": \"UnityEngine.Vector3\",\n         \"facing\": \"UnityEngine.Vector3\"\n     }\n  },\n  \"MyNamespace.MyOtherComponent\" : {\n  }\n}\n. Thanks!  I went though manually - VS Code escalates them to warnings, so it was pretty quick to go through and remove them all.  For bigger projects though, resharper has a sort of bulk refactor option that can remove them though an entire solution.\n. ",
    "T2RKUS": "@sschmid What was the solution?. Will you include the Entitas CodeGen CLI in future releases with the source in addons or remove them altogether and just include this in the release (possible unity menu to call it perhaps). So will it look something like this: \nAddons/CodeGenerator/.dlls and exe's\nAddons/CodeGenerator/Source/.zips\nOr will it be source first with zipped exe/dlls?. In my project what I did is create an event pool with an event component containing a layer:int, type:int and args:object[] variables. and when I create a new event I'd use a helper I made: Event.CreateEvent(0, EventType.OpenLevelUI, null); or something similar. That entity is added to the pool and I'd catch it using the OnEntityCreated callback from a Monobehaviour script. \nFrom the UI though; when I select my level and click load that UI closes and creates a new event in the event pool which gets picked up by the LoadLevelSystem etc. The UI would call something like: Event.CreateEvent(0, EventType.LoadLevel, \"Map/Level1.dat\");\nAt the end of all my other systems I'd run EventCleanupSystem which deletes all the entities in the pool.\n. You could make a UI Manager script that contains references to UI prefabs so that when you call Event.CreateEvent(0, EventType.UI, UI.LevelMenu); The arguments match up to the index on the UI managers list of references and have that spawned up.\n. \"So the UI elements behaviour would be in the UI manager and not in Entitas systems?\"\nThe UI elements are from the unity view, meaning they are monobehaviours, you just want to get the data from the UI to the systems and vice versa. The event pool tries to solve that problem.\nAnd, I'm glad I could have helped somewhat.\n. Is't that what the new type safety feature branch would address. \nPoolAEntity class inherits from Entity which acts like a gate for managing what components a pool would have. so you'd do \nvar poolA = new Pool<PoolAEntity>();\nPoolA.CreateEntity().AddPosition();\nso the generated extension code is moved there.\n. The way I do my UI is have the UI coupled to the platform I'm using and have entitas completely decoupled from any one engine so if im using unity i'd use some UI framework asset or Unity UI and just react to the game. So I have something like this:\n```\n[Occurrence]\npublic class OccurrenceComponent : IComponent {\n/// <summary>\n/// Layer.\n/// </summary>\npublic int Layer;\n\n/// <summary>\n/// Type. e.g. \"System.UI.OpenDialog\"\n/// </summary>\npublic string Type;\n\n/// <summary>\n/// Argument(s). \n/// </summary>\npublic object[] Args;\n\n}\nAnd execute them like this\npublic class OccurrenceExecuteSystem : ISetPool, IExecuteSystem\n{\n    Pool _pool;\npublic void SetPool(Pool pool)\n{\n    _pool = pool;\n}\n\npublic void Execute()\n{\n    foreach (var e in _pool.GetEntities())\n    {\n        if (e.hasOccurrence)\n        {\n            Occurrence.Signal.CreateOccurrenceSignal(e.occurrence);\n        }\n    }\n}\n\n}\n```\n```\npublic static class Occurrence\n    {\n        /// \n        /// OnOccurrence Event.\n        /// \n        public static event Action OnOccurrence;\n    /// <summary>\n    /// Signal Class.\n    /// </summary>\n    public static class Signal\n    {\n        /// <summary>\n        /// Create Occurrence Signal Method.\n        /// </summary>\n        /// <param name=\"Occurrence\">Occurrence.</param>\n        public static void CreateOccurrenceSignal(OccurrenceComponent Occurrence)\n        {\n            if (OnOccurrence != null)\n            {\n                OnOccurrence.Invoke(Occurrence);\n            }\n        }\n    }\n\n...\n```\nwhich calls a static event on Occurrence class.\nthat class also has helper methods for creating events as well such as Occurrence.UI.LoadLevelDialog(..);\netc. then from that Unity UI view I then call another event from there and close that dialog. As for cleaning up events I have a system which deletes any lingering events. I could even have a separate component for a timer e.g. timed events and encounters for an rpg or something. These events can also be picked up by mods through a mod interface and other systems to react to. For collecting more than one type of event for a system or cache them as they come then execute them when that its that systems turn.\n(I don't just use it for UI though, It's my entire events system). I don't like the idea of adding in Pools like that because what if I wanted to reuse the system for a specific pool of the same type (referring to type safety branch) I would prefer the instance of the pool not a class with pools in to access.. I don't suppose there is much point making new Entitas tutorials right now being as a new (major) version of Entitas is just around the corner.. I'm just waiting on the new version before I start with my game. I intend to use a Dependency Injection library with Unity so I'll see how well Entitas and DI mesh.. @JuDelCo Will you be updating Entitas++ to the new, upcoming version?. @WoLfulus If you're thanking \"god\" and Simon made Entitas by \"god\" do you mean Simon? :D\nEDIT:\nGod = \"simon\"?. That sounds very useful, I've also used node.js before as well and love the package manager. It would be cool if it Entitas had one as well or used a pre-existing one out there.. The new term 'Context' is starting catch onto me as well, actually im starting to prefer it to pool now when I think about the types of 'contexts' I want to use entities for. e.g. The terrain context (to handle all terrain entities/behaviour), DynamicObject Context (e.g. for NPC, Items, Players, monsters, things that exist on the terrain)... starting to make more sense.\nEDIT: Also thought about entity.Destroy() before. an event huh? starring at us in the face XD. Yeah, I tend to call parts of my program that e.g. handles UI, events etc as an event system etc not necessarily meaning an entitas system. I like the idea of renaming System to Processor.. \"token\" would just end up confusing the hell out of me since I use Antlr in some projects with Entitas. :p. I also want to know whether I can change the DSL code templates to fit into my code base better. e.g. rather than a pools/contexts class being generated I want to create them through a different method like service attached to di container.. tbh, I also think \"Blueprint\" is fine. In fact I prefer it that way. . aren't you supposed to use -= on the event. (which is obvious ik but...). You would create a reactive system to do this:\n```csharp\npublic class CreateViewSystem : ReactiveSystem {\n        protected readonly GameContext _Context;\n    public CreateViewSystem(Contexts contexts) : base(contexts.game) {\n        _Context = contexts.game;\n    }\n    public override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n        return context.CreateCollector(GameMatcher.Card, GroupEvent.Added);\n    }\n    readonly IMatcher<GameEntity> filterMatcher = GameMatcher.Card;\n    public override bool Filter(GameEntity entity) {\n        return filterMatcher.Matches(entity);\n    }\n    public override void Execute(System.Collections.Generic.List<GameEntity> entities)\n    {\n        /* create views for entities. */\n    }\n\n}\nYou would then add this system to your systems chain.\nYou can also have your system create a view by responding to the creation of an AssetComponent( assetName:string) and do then following (assuming you also have a view component to hold the object to render)csharp\n    public class CreateViewSystem : ReactiveSystem\n    {\n        protected readonly GameContext _Context;\n    public CreateViewSystem(Contexts contexts) : base(contexts.game) {\n        _Context = contexts.game;\n    }\n    public override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n        return context.CreateCollector(GameMatcher.Asset, GroupEvent.Added);\n    }\n\n    public override bool Filter(GameEntity entity) {\n        return entity.hasAsset && !entity.hasView;\n    }\n    public override void Execute(System.Collections.Generic.List<GameEntity> entities)\n    {\n        /* create views for entities. */\n    }\n}\n\n```. When you \"replace\" a component what is happening under the hood is that the component is removed and a new component is requested from the component pool. Then the component values are copied from the old component to the new component. The old component then gets pushed back into the component pool.\nYou're literally replacing it with a new component.. You could create your own generator to do this for you when you call a method: entity.UpdatePosition(); for example. It would just copy all values to a new component and replace it internally triggering the change events.\nto get this kind of syntax.\ne.position.x = 10;\ne.position.y = 10;\ne.UpdatePosition();. You could also use this solution: https://github.com/sschmid/Entitas-CSharp/pull/150. \"VisualDebugging currently depends on the Code Generator Addon because it's using\nCodeGeneratorConfig and ContextsComponentDataProvider\"\nwhich are both used in EntitasStats only? So you're saying they're coupled for the sake of knowing how many components you have in a context etc. :'( If that's the case can't we move EntitasStats to it's own add on and create a new menu item under Entitas?. Is that not the same thing? How is that faster?. Ooh. Yes I know that. I overlooked the second use of the lookup variable lol. faster by 1 statement. \ud83d\udc4d . Example from ComponentGenerator\ncsharp\n        public CodeGenFile[] Generate(CodeGeneratorData[] data) {\n            return data\n                .OfType<ComponentData>()\n                .Where(d => d.ShouldGenerateComponent())\n                .Select(d => generateComponentClass(d))\n                .ToArray();\n        }. I've realized I could also create my own AbstractComponentDataProvider but I'd be duplicating most of the code already there... and wouldn't be able to use ComponentData.. I see. That makes sense. In that case I'll create my own, thank you.. There is no way to detect which generators require which data providers to function though or am I missing something?. JSON output is exactly what I spoke to @mzaks about, I wanted to use Entitas-Lang with your code generator because I liked certain things that Entitas-Lang generated like interfaces, abstract classes etc but didn't like the abstract class accepting a contexts class over the actual context e.g. GameContext (among other things I wanted to add which required Entitas-Lang not handling the generation). I want to control that.. surely we can use code similar to this and subclass ReactiveSystem -> ParallelReactiveSystem? \nhttps://github.com/thelinuxlich/artemis_CSharp/blob/master/Artemis_XNA_INDEPENDENT/System/ParallelEntityProcessingSystem.cs\nOr am I missing something? . I wanted to get everyone's thoughts on this before implementing it myself and trying it out, don't want to waste my efforts if it's not going to work (perhaps the component/context events triggering in parallel cause unintended side effects. not sure how that works.). I don't develop my games in unity directly though, we can't use the Unity C# Job system outside of unity and entitas isn't a unity library. It has unity extensions but the core is not coupled to it.. True but not everyone will be using unity so for instances when you don't want to use unity but want an ECS framework you'd be glad Entitas exists whether you're making a game or not. :). Instead of 'Tile' context I'd call it 'Terrain', and instead of Humanoid; \"AI\". If systems in the AI context need to know something about the Terrain context like cost you can create an entity index to get specific information from your context without searching through a group and comparing data for each item. \nI would only have the AI context systems use entity index's to query the state of the other context (or use a group if I need to) and then act on it by creating a command in a Command context. any NPC's/character in their own Context like Actor context which would handle stuff that would sit on or use the terrain like characters, cars, birds, buildings etc as a additional data layer. But the AI communicates in the same way as the player does. issues the same commands like MoveCharacterCommand. the AI systems would create them and the Input context. the difference is that the Input context has components which go through validation. e.g. an ActionSystem. if the input should happen it would turn it into a command. for example. If I wanted 100 coins by pressing a button I could have a system to take that input, test to see if 10 seconds has passed, if it has issue a command to give me 100 coinds then a system in the commands context would talk to the Economy context.\nFor example. If you you want which tiles have a certain cost you could index your entities by the cost and get them by doing: \ncsharp\nvar tiles = _terrainContext.GetTilesByCost(3);\nforeach (var item in tiles) {    }\n or\n csharp\nvar tile = _terrainContext.GetTileByPosition(10,10); \nint cost = tile.cost.value;\nhere is an example of an entity index which adds multiple index's of the same entity taking it's size into account so that with a tile of size: width(2), height(2) would span across four positions where it overlaps.\nhttps://github.com/sschmid/Entitas-CSharp/blob/10f27c1e42c32ab72923baae31c71cc8644f697a/Tests/Tests.Fixtures/Fixtures/CustomEntityIndex.cs\nEDIT: I will also add that the custom entity index's are then generated by the code generator so that they can be used like in my example above, from the contexts.. An example of an entity index which gets a blank tile (a single entity - there is only one blank tile per surface. ) from one surface of a 6 sided cube. From my puzzle game.\n```csharp\nusing Entitas.CodeGenerator.Api;\nusing Entitas;\nusing System.Collections.Generic;\n[CustomEntityIndex (typeof (GameContext))]\npublic class BlankTileEntityIndex : PrimaryEntityIndex {\npublic BlankTileEntityIndex (GameContext context): base (\n    \"BlankTileEntityIndex\",\n    context.GetGroup (Matcher<GameEntity> .AllOf (\n        GameMatcher.Surface, GameMatcher.Tile, GameMatcher.Blank)), (e, c) => {\n        var surface = c is SurfaceComponent ? (SurfaceComponent)c : e.surface;\n        return surface.id;\n    }) { }\n\n[EntityIndexGetMethod]\npublic GameEntity GetBlankTileOfSurface (int surfaceId) {\n    return GetEntity (surfaceId);\n}\n\n}\n. here I use a custom entity index to get all valid tiles per surface. I have a system which invalidates all tiles after movement and another which goes through each surface from the blank tile. mark the adjacent tiles as valid. Later when a tile is marked with a move component I use_context.GetValidTilesOfSurface(surfaceId)to see if the clicked tile is valid. If it is I can swap it with the blank tile by using_context.GetBlankTileOfSurface(surfaceId)csharp\nusing System.Collections.Generic;\nusing System;\nusing Entitas.CodeGenerator.Api;\nusing Entitas;\n[CustomEntityIndex (typeof (GameContext))]\npublic class ValidTileEntityIndex : EntityIndex {\npublic ValidTileEntityIndex (GameContext context): base (\n    \"ValidTileEntityIndex\",\n    context.GetGroup (Matcher<GameEntity>\n    .AllOf (GameMatcher.Surface, GameMatcher.Tile, GameMatcher.Valid)), (e, c) => {\n        var surface = c is SurfaceComponent ? (SurfaceComponent)c : e.surface;\n        return surface.id;\n    }) { }\n\n[EntityIndexGetMethod]\npublic HashSet<GameEntity> GetValidTilesOfSurface (int surfaceId) {\n    return GetEntities (surfaceId);\n}\n\n}\n. Lastly, my most complex lookup so far. Each surface of my puzzle cube has tiles which have local positions. there would be 6 tiles of position 0,0 so when I want to lookup a tile I need to specify a surfaceId as well so I need a more complex type as my key. when I need to look up a tile directly I use:_context.GetTileWithPosition(new PositionIndex(1, 10,10)); // surface 2, tile position: x(10), y(10) csharp\nusing Entitas.CodeGenerator.Api;\nusing Entitas;\nusing System.Collections.Generic;\nusing System;\npublic struct PositionIndex : IEquatable {\npublic int surfaceId;\npublic float x;\npublic float y;\n\npublic PositionIndex(int surfaceId, float x, float y) {\n    this.surfaceId = surfaceId;\n    this.x = x;\n    this.y = y;\n}\n\npublic bool Equals(PositionIndex other) {\n    return other.surfaceId == surfaceId && other.x == x && other.y == y;\n}\n\npublic override bool Equals(object obj) {\n    if(obj == null || obj.GetType() != GetType() || obj.GetHashCode() != GetHashCode()) {\n        return false;\n    }\n\n    var other = (PositionIndex)obj;\n    return other.surfaceId == surfaceId && other.x == x && other.y == y;\n}\n\n}\n[CustomEntityIndex (typeof (GameContext))]\npublic class TilePositionEntityIndex : PrimaryEntityIndex {\npublic TilePositionEntityIndex (GameContext context): base (\n    \"TilePositionEntityIndex\",\n    context.GetGroup (Matcher<GameEntity> .AllOf (\n        GameMatcher.Surface, GameMatcher.Tile, GameMatcher.Position)), (e, c) => {\n        var position = c is PositionComponent ? (PositionComponent)c : e.position;\n        var surface = c is SurfaceComponent ? (SurfaceComponent)c : e.surface;\n        return new PositionIndex(surface.id, position.x, position.y);\n    }) { }\n\n[EntityIndexGetMethod]\npublic GameEntity GetTileWithPosition (PositionIndex Index) {\n    return GetEntity (Index);\n}\n\n}\n. Do note that If you already have an entity indexed to a certain key already you will get an exception so you you should make sure there isn't an entity already indexed with the key. for example in my puzzle game I have to move my blank tile to position -1,-1 (invalid position but a blank tile isn't rendered anyway so it's fine). then move my non-blank tile to where it was. then move the blank tile to the position the other tile was at.csharp\nvar blankTilePosition = blankTile.position;\nblankTile.ReplacePosition(-1, -1);\nvar position = e.position;\ne.ReplacePosition(blankTilePosition.x, blankTilePosition.y);\nblankTile.ReplacePosition(position.x, position.y);\n```. You're welcome. There is something I have forgot to mention. If you try to get an entity or entities with a key which doesn't exist it will simply return null and won't throw an exception.. From Gitter:\n\n@T2RKUS Until now it\u2019s part of the design that you cannot disable systems. Ideally, they should know when they have some work to. Managing and grouping systems with the Feature class can help. A parent system can also decide (based on components) if it should execute its child systems. This is basically a way to enable and disable systems . It's tough for us guys with low level clearance.. lol Would love to see it one day.. Couldn't you just use the ctrl + R function in visual studio or the ctrl + f replace?. You can already do that. That's how unique components work. That's a good idea actually, If Blueprints are supposed to be a unity only thing but currently a blueprint is wrapped within a scriptableobject and draw using inspector code. This way you could load a blueprint from file and apply it that way as well.. Perhaps if you clearly define what you want explained in this video tutorial I or someone else from the entitas community will make one and put it up on youtube. I wouldn't mind doing a video tutorial but wouldn't know what to cover. I've done live streaming on livecoding and twitch of my projects before but not made any youtube tutorials.. I see, and what version of Unity are you currently using?. For starters, when I ran xbuild from the commandline the command didn't exist so I looked for xbuild in my Program Files(x86) on windows 10 It was in the Mono folder after doing a search for it. If you add xbuild.exe to your PATH then it should make that error go away. You'll probably have to restart. You can find xbuild here (assuming you have the mono runtime installed)\nC:\\Program Files (x86)\\Mono\\lib\\mono\\xbuild\\14.0\\bin\n\nOn Windows to edit your environment variables go to Control Panel -> System & Security -> System -> (Left hand side) Advanced System Settings -> Advanced Tab -> (at the bottom) environment variables.. Just found out that if you go to Task Manager and find Windows Explorer (The File Browser) and right click -> restart it will also reload the desktop and the environment variables as well. No restart needed.. The build script worked for me under the source tree terminal but not cygwin. I wonder if that has to do with me adding xbuild to PATH. I didn't try it before that so I don't know.. I installed Mono yesterday but It wasn't added to my PATH. Computer restarted since then due to windows updates during the night.\nOn Windows 10.. The build script works as is, no need to change it on windows.. @IsaiahKelly Now that I have it working on my machine I'll write a build and copy script in bash which uses the build script then copies everything to where it needs to go. basically a unity template demployement script if you like then upload it here.\nIt will run on windows since you're running MSYS. Didn't know source tree includes that. Must have missed something.. @sschmid you could do a bash -version and change the UNITY variable based on whether the terminal returns \"i686-pc-msys\", \"msys\" or something for windows. or maybe there is a bash command for os idk. Don't use bash much. Plan to change that though because I'm switching to Linux. albeit I could have used it more on my mac... :/. hmm, Just wondering whether I should make use of the deploy script and call that after build then unzip that file into the assets folder defined in my build script.. ```bash\n!/bin/bash -e\necho $0\nsource \"$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)/consts\"\nUser Configuration\nTEMPLATE_ROOT=\"${ROOT}/EntitasTemplate\"\nScript Configuration\nASSETS=\"${TEMPLATE_ROOT}/Assets\"\nLIBRARIES=\"${ASSETS}/Libraries\"\nENTITAS_ROOT=\"${LIBRARIES}/Entitas\"\nENTITAS=\"${ENTITAS_ROOT}/Entitas\"\nENTITAS_EDITOR=\"${ENTITAS}/Editor\"\nENTITAS_MIGRATION=\"${ENTITAS_ROOT}/Migration\"\nEDITOR_IMAGES=\"${ENTITAS_EDITOR}/Images\"\nBuild\n${SCRIPTS}/build\nCP=\"cp -f\"\nCopy Libraries  ---------------------------------------------------------\nmkdir $LIBRARIES\nmkdir $ENTITAS_ROOT $ENTITAS $ENTITAS_EDITOR $EDITOR_IMAGES\nmkdir $ENTITAS_MIGRATION\nEntitas\nCP \"${ROOT}/${ES}/${BIN}/${ES}.dll\" $ENTITAS\nCP \"${ROOT}/${ES_UTILS}/${BIN}/${ES_UTILS}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_U}/${BIN}/${ES_U}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_UE}/${BIN}/${ES_UE}.dll\" $ENTITAS_EDITOR\nEntitas Code Generation\nCP \"${ADDONS}/${ES_CG}/${BIN}/${ES_CG}.dll\" $ENTITAS_EDITOR\nCP \"${ADDONS}/${ES_CG_ATTR}/${BIN}/${ES_CG_ATTR}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_CG_G}/${BIN}/${ES_CG_G}.dll\" $ENTITAS_EDITOR\nCP \"${ADDONS}/${ES_CG_P}/${BIN}/${ES_CG_P}.dll\" $ENTITAS_EDITOR\nCP \"${ADDONS}/${ES_CG_UE}/${BIN}/${ES_CG_UE}.dll\" $ENTITAS_EDITOR\nEntitas Migration\nCP \"${ADDONS}/${ES_MIG}/${BIN}/${ES_MIG}.dll\" $ENTITAS_MIGRATION\nCP \"${ADDONS}/${ES_MIG}/${BIN}/${ES_MIG}.dll\" $ENTITAS_EDITOR\nCP \"${ROOT}/${ES_UTILS}/${BIN}/${ES_UTILS}.dll\" $ENTITAS_MIGRATION\nCP \"${ADDONS}/${ES_MIG_CLI}/${BIN}/${ES_MIG_CLI}.exe\" $ENTITAS_MIGRATION\nCP \"${ADDONS}/${ES_MIG_UE}/${BIN}/${ES_MIG_UE}.dll\" $ENTITAS_EDITOR\nEntitas Visual Debugging\nCP \"${ADDONS}/${ES_VD_CG_P}/${BIN}/${ES_VD_CG_P}.dll\" $ENTITAS_EDITOR\nCP \"${ADDONS}/${ES_VD_U}/${BIN}/${ES_VD_U}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_VD_UE}/${BIN}/${ES_VD_UE}.dll\" $ENTITAS_EDITOR\nEntitas Blueprints\nCP \"${ADDONS}/${ES_BP}/${BIN}/${ES_BP}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_BP_CG_P}/${BIN}/${ES_BP_CG_P}.dll\" $ENTITAS_EDITOR\nCP \"${ADDONS}/${ES_BP_U}/${BIN}/${ES_BP_U}.dll\" $ENTITAS\nCP \"${ADDONS}/${ES_BP_UE}/${BIN}/${ES_BP_UE}.dll\" $ENTITAS_EDITOR\nFabl\nCP \"${ADDONS}/${ES_CG_G}/${BIN}/fabl.dll\" $ENTITAS\nCopy Images  ---------------------------------------------------------\ncp \"${ADDONS}/${ES_UE}/${ES_UE}/Editor/Images/\" $EDITOR_IMAGES\ncp \"${ADDONS}/${ES_MIG_UE}/${ES_MIG_UE}/Editor/Images/\" $EDITOR_IMAGES\ncp \"${ADDONS}/${ES_VD_UE}/${ES_VD_UE}/Editor/Images/\"* $EDITOR_IMAGES\n```\nTry putting this script in the Scripts folder of the repo and change the user config to where your project is.. @sschmid Perhaps using Python/Ruby scripts instead of bash would be better?. did restart your computer or Windows Explorer after you set the variable?. It should look something like this: http://imgur.com/a/2F8Cy\nfor the PATH variable click EDIT and add the directory which has the xbuild exe in.. My script just calls the build script in the scripts directory so you should have it alongside \nupdate\nbuild\npack etc.\nit loads the consts file, builds, then copies the dll/images to the folder specified in my script. you can create a new file called update_unity in that scripts folder and run it from there.\nthe build file uses xbuild, there is no call to 'mono.exe'. I was just using the MSYS shell (which is what you are using if you start the terminal from Source Tree as you say) from my downloads folder and it worked fine there. I don't see what the problem could be. It was actually pretty easy to get working on my windows machine with minimum effort.. Perhaps somekind of static event on Systems class so we can do:\ncsharp\nSystems.OnCreated += (SystemsCollection, Name) => new DebugSystems(SystemsCollection, Name);\nAnd for destruction:\ncsharp\nSystems.OnDestroyed += (Name) => DebugSystems.FindDebugSystem(Name).gameObject.DestroyGameObject();. ProjectName.Runtime is pure c# no unity/client code but the simulation only where ProjectName.Runtime.Unity contains systems to integrate the simulation into unity3d though looking at this perhaps coding the unity integration side should be in the editor entirely . i think we should have a generator to create system chains. By appending an attribute to a system with a priority we can generate chains automatically. That would be less painful to develop a dll runtime and still use the feature class . Something tells me you're really into optimization @optimisez ;). Just put Added, Removed or AddedOrRemoved on the end of sprite. https://github.com/sschmid/Entitas-CSharp/blob/master/Entitas/Entitas/Collector/TriggerOnEventMatcherExtension.cs. Awesome, If the problem has been solved please close this issue. :). Personally, I'd go with option 2 (less components, less code. plus for each switch you could translate the message into a command for a command context. 2 is also more memory efficient). But I don't do much networking.. while the core of Entitas may not have had an update (as far as github goes) the community is still quite active. Be sure to come by Entitas-CSharp Gitter chat more often. Entitas users post ideas and code about how they do things in their games/apps. http://gitter.im/sschmid/Entitas-CSharp. Challenge Accepted. ;)\nSounds like fun.. The only problem I currently see with generating system chains is with the system constructors. If you add an attribute to a system with a priority and in a data provider gather all systems with that attribute you would then pass the data along to a generator which would add the types to chain. But what if they have a constructor which isn't empty? How would you fill them?. Systems with parameter-less constructors could easily be generated though.. add an attribute like: [System(10)] onto a system etc. It would gather all systems with System attributes and generate a single chain of systems from the highest priority to the lowest. System with priority 0 would be called before a system with priority 10.. Wouldn't that mean rewriting the Systems class?. In that case we can create a new systems class called PrioritySystems which derive from Systems with a Sort method (as you said) and then sort the systems by priority value on a priority interface. Something like that perhaps?. Didn't realize the lists were protected.. why build up a dependency graph when you can simply prioritize them by a number and sort them by it.\nif you want to a \"phase\" you could have several systems with '100' priority and begin another phase at '200' for example. A system of priority '1' would run before '2' etc.. Well if you find it easier, fair enough. I personally find the priority approach easier because I don't have to deal with a graph of dependencies; simpler code. Might not be easier to read but it forces me to keep the execution order in mind yet still easier than rearranging systems around. I can just change a number and it can be every '100' or so if I want to run things in between. . I\u2019m also interested in participating.. @wallpap3r you can use a custom entity index to get entites based on id which contains a position component. Please refer to https://github.com/sschmid/Entitas-CSharp/issues/351 for examples.. Updated list.. Update: I've started on Entitas Tanks Example.. Since the contexts are defined in the properties file you could modify the existing data provider to take that new attribute into account. It's definitely doable. see https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/DataProviders/Components/Providers/ContextsComponentDataProvider.cs\nYou wouldn't need to modify the existing code generators but not sure how you'd do it with the Roslyn code generator since I use my own.\n. Doesn't it generate a new .csproj with that name too? If you have an asmdef in Assets/Generated.Source/ and have it generate code in Assets/Generated.Source/Generated with the components one level up does it work then? With the generated .csproj in your properties. Or are you trying to separate components into their own asmdef? . This might help if you want more complex lookups. https://github.com/sschmid/Entitas-CSharp/issues/351\nBut if you just want to lookup position only (e.g. not taking into account anything else) this is enough.\n```c#\nusing Entitas;\nusing Entitas.CodeGeneration.Attributes;\n[Game, Input]\npublic class PositionComponent : IComponent\n{\n    [PrimaryEntityIndex]\n    public UnityEngine.Vector3 value;\n}\n```\nJust replace UnityEngine.Vector3 with some other struct/class containing XYZ etc. \nso you can use the generated extension method:\nc#\nvar Entity = Contexts.game.GetEntityWithPosition(new Vector3(0,10,0));\n. Rather than having a \"chunk entity\" as you describe and load a prefab which have many children, I would see the simulation as a grid (where the camera is pointing at a slice of it), to me it only makes sense to create a chunk entity if you want to query or identify chunks. Otherwise you can create a bunch of classes like, class MapEntity(int type, int x, int y), class Map (MapEntity[] entities) into somekind of MapTemplateComponent with another component like an id/string you can index. then create entities out of that adding in the offset where you need it now. with that you can create an in-game map editor or just convert a unity scene into a map template file and then load them. you could then do something like core.GetMapTemplateWithName(\"theme_snow_chunk_1\") . I noticed that now... I'll admit I skimmed it and ended up practically repeating one/more of your points. However, given the same problem that is how I would do it. not sure I'd make an editor of yours though since you can just create a new scene; place a bunch of objects from origin including the a player object to test the chunk (these objects could potentially emit themselves as entities when you hit play - would need some setup though) and then click a menu item to save the scene as a chunk with/without the player. \nUnity is already a level editor and chunk viewer so I'm not sure what the advantage of your tool is other than validating whether your chunk exported successfully, but then you could just load up the chunk in-game anyway?. ",
    "FNGgames": "Surprised you didn't just crack and buy a PC :). Was this closed because the suggestion was implemented? Or because it is no longer being thought about?. Fair enough. It's one of those niggles that doesn't really affect how you use entitas much, so we can certainly live without it.. Could it be a separate system altogether (e.g. SingleEntityReactiveSystem)? Rather than being mixed in with the current RS.. Oh no, that custom entity index page is really useful, it's dead now - we need a replacement. I dont know if other people have tried this but one thing i quite like to do for complex lookups use an intermediate string component with an entity index like this:\n```csharp\npublic class ThingAComponent : IComponent {\n    public ThingA value;\n}\npublic class ThingBComponent : IComponent {\n    public ThingB value;\n}\npublic class ThingAThingBHashComponent : IComponent {\n    [PrimaryEntityIndex] public string value;\n}\npublic static string GetThingAThingBHash(ThingA a, ThingB b) {\n    return string.Format(\"{0}_{1}\", a, b);\n}\nvar e = _context.GetEntityWithThingAThingBHash(GetThingAThingBHash(a, b));\n```\nA reactive system on AllOf(ThingA, ThingB) can keep the hash up to date easily.. I'm just starting to use Entitas now and the pools/contexts name change had my head hurting :). . @AndreGroeschel  MatchOne is up to date if you want to see how things have changed. Basically Contexts == Pools but with some extra type-safety which allow you to have multiple separate pools. \"Features\" just seems to be a folder name for mental organisation, not part of Entitas itself. MatchOne has better folder organisation than the Shmup example imo. \nFor integrating with unity systems, take a look at the Shmup example. Search for files with \"collision\" in the name and you'll get the CollisionEmiter, CollisionComponent, and ProcessCollisionSystem. The \"emitter\" is a monobehaviour that implements OnCollisionEnter(). It grabs the entity which is associated with that particular GO (via EntityLink) and adds a CollisionComponent to it. ProcessCollisionSystem is a reactive system and a cleanup system, it processes the collision components then removes them on cleanup. Be warned: Reactive Systems no longer implement IReactiveSystem but now inherit from ReactiveSystem (see MatchOne). The schmup example is using an older version.\nThis Emitter->Component->ReactiveSystem seems to be the general pattern for bridging unity with Entitas. Design the component to hold the data you need from unity (e.g. who we collided with), have the emitter create the component, fill in the data and add it to an appropriate entity, then have a system handle it as you would with any other bit of your Entitas code.\n. I was just about to post that :)\n. Introduction, overview and systems pages are up to date on the wiki now (0.39). Systems page has some more detail. https://github.com/sschmid/Entitas-CSharp/wiki/Systems. Hi, I've just updated the 'Generate Your First Component' page. This should be up to date for 0.39 now too. I intend to make a little step by step 'hello world' this weekend. As has been said before, please use MatchOne as your main reference example - this is always kept up to date along with new releases (give or take a few hours). . Basics and Attributes page should be up to date now too.. I added Hello World tutorial to the wiki. Should get you step by step from a blank Unity project to a set of working systems.. I think this is a good idea - i think you should be enforcing these rules with your API. My main concern is that this will generate an inconsistency between the way you set flag components and the way you set other components. I think that if you implement your suggestion you should also change the API for the flag components to use methods instead of direct assignments too. So 'e.IsFlag = true;' should become e.SetFlag(true) or something. Does this make sense?. how much slower Simon? Do you have test results (I know you do!)?. I know it's not exactly the point of your post, but you can re-gen your code in a few short steps which takes me about 1 minute. I do this if I make any breaking changes to a component.\n\nMove Components, Systems and GameController.cs to a folder outside your project (e.g. desktop). \nDelete the contents of your Generated folder\nRegenerate contexts (ctrl-shift-G)\nMove Components folder back\nRegenerate components (ctrl-shift-G)\nMove Systems and GameController.cs back and you're done.\n\nIt's not the robust solution you're looking for, but it should definitely not take you 30 mins to re-gen if something breaks.\n. Yeah, I understand that it's fairly easy within the IDE, but I want to be able to do it through until. I'll follow @KumoKairo's advice for now. Would be nice to add this to the Unity Addons part of Entitas.. Got to say i like @T2RKUS's API suggestion too. . See Release 0.41.1. There's a new cfg variable that you can set to ignore namespaces when generating the API.\n\nAdded option to ignore namespace in generated api\nSimply add Entitas.CodeGeneration.Plugins.IgnoreNamespaces = true to your Entitas.properties. @vbnn2 I might have misunderstood you, but it seems like you are trying to make Entitas comply with a more traditional unity architecture (e.g. adding objects in the inspector, attaching scripts to them etc.) I think this is a problem - in Entitas you should be using Systems to carry the logic of your game, not unity scripts. \nIn any case, the simplest way to acheive what you're looking for in Entitas would be to have your AssetComponent carry a string : assetName. Then you would have a System take care of loading the prefab when such a component is added. See Match-One: AddViewsystem. This way you can serialize the component because its data is just a string. No need to ever serialize a GameObject.. These tuts are extremely time consuming to make, and this framework is open source and all. So we've been trying to contribute as a community to the docs and stuff - but we all have day jobs too, so it's a little slow. \nWe've added quite a few tuts already, but I assume you're struggling with them from your post. I'd be more than happy to answer questions you have if you PM me on gitter, maybe I can point you in the right direction. I am not an expert or even a professional programmer, but I've been through the \"learning to use entitas\" process recently so I might be able to help here and there.. I will probably not be much help with regards to git I'm afraid, or even the entitas backend - i can help with front-end stuff though. Code below will instantiate a prefab when you add a PrefabComponent to an entity. If you want to then have data from your prefab accessible to entitas (e.g. number of points) you'd have to create some kind of component to hold that data (e.g. PointsComponent?) and write a system to copy that data back into a component when you add it. Can't tell you exactly how without you being more specific about the data you want. \n```csharp\nusing Entitas;\nusing UnityEngine;\n[Game]\npublic class PrefabComponent : IComponent {\n    public string name;\n}\n[Game]\npublic class ViewComponent : IComponent {\n    public GameObject gameObject;\n}\npublic class PrefabAddedSystem : ReactiveSystem { \n// create a GO to hold all the other views to keep your hierarchy organised\nreadonly Transform _viewContainer = new GameObject(\"Views\").transform;\nreadonly GameContext _context;\n\npublic AddViewSystem(Contexts contexts) : base(contexts.game) {\n    _context = contexts.game;\n}\n\n// collect all entities that have had a Prefab compoennt added to them\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n    return context.CreateCollector(GameMatcher.Prefab);\n}\n\n// this bit checks that we haven't already instantiated a gameobject for this entity\nprotected override bool Filter(GameEntity entity) {\n    return entity.hasPrefab && !entity.hasView;\n}\n\n// do instantiation\nprotected override void Execute(List<GameEntity> entities) {\n    foreach (var e in entities) {\n        var asset = Resources.Load<GameObject>(e.asset.name);            \n        gameObject = UnityEngine.Object.Instantiate(asset);\n        if (gameObject != null) {\n            gameObject.transform.SetParent(_viewContainer, false);\n            e.AddView(gameObject);\n            gameObject.Link(e, _context);\n        }\n    }\n}\n\n}\n. Glad i never used them now :). Upcoming changes to the code generator will likely improve this in future, but for now, here is the process I use when i change my components (e.g. renames, new fields, deletions etc).\n\nMove Components, Systems and GameController.cs to a folder outside your project (e.g. desktop). Or create a folder called \"StreamingAssets\" in your assets folder and move them to here (Unity will not compile the code in this folder) .\nDelete the contents of your Generated folder\nRegenerate contexts (ctrl-shift-G)\nMove Components folder back\nMake changes to your components\nRegenerate components (ctrl-shift-G)\nMove Systems and GameController.cs back and you're done.\n\nYou may have compile errors at this point, caused by your component changes, but they won't be in generated code, they'll be in your systems code which you are now free to go and fix. \nBetween each of these steps make sure you allow Unity to compile. The code generator will not run with compile errors present or during Untiy compilation.. @sschmid All the code my components depend upon sit in my libraries folder next to the Entitas install, and I don't move it. If I use an enum for my componet, i declare it next to the component. I guess there's plenty of cases where this wouldn't be the case for people though.. Possible solution : Create a second set of systems in you game controller (e.g. Systems _fixedSystems = new Systems().Add() ...). Call _fixedSystems.Execute() from within FixedUpdate().. I for one think this approach is perfectly reasonable. You are not cutting any existing users out of what they have already got (by providing the free version) but you are providing extra value for those who want it and can pay for it. You deserve some compensation for all your hard work, and Entitas is a great product that is more than worthy of an asset store price tag. Looking forward to hearing about price points and these sexy pro features.. Great idea. Yeah, tut was made with an old version - feel free to update the tutorial page. I'll update the example project as soon as my PC comes back from the shop and I'm working on my game again.. or you could just override ToString ( i made things stupidly complicated sorry).. Simon's answer probably solved your initial problem, but just for the record, I ran into this problem for physics forces in one of my games. Since many different things can end up adding force to a rigidbody in a frame, I wanted to accumulate force rather than replace or add it to a component.\nI wrote this extension:\ncsharp\npublic static void AccumulateForce(this GameEntity e, float force) {\n        if (!e.hasForce) {\n                e.AddForce(force);\n        } else {\n                e.ReplaceForce(e.force.value + force);\n        }\n}\nI do the same thing with collisions (except my CollisionComponent holds a list of collisions, and in the extension i make a new list or add a value to the old list depending whether the entity already has the collision component - the same as Simon describes for damage).\nWhen the collisions or forces are processed they are removed from the entity.\nIn future I plan to write my own code-generators with custom attributes ([Accumulate] for example) that add these methods into the generated files.. thanks for the code-gen example.. Collections in components are fine. You can access them and modify them as you would normally. The only trick is that you should use the .Replace() method after you're done modifying the collection to ensure that the rest of your code can react to the change.\ne.g.\n```csharp\n// component definition (int is just for example, list could be any collection)\n[Game] \npublic class MyListComponent : IComponent {\n    public List values;\n}\n// usage (no copying or new collection created, no memalloc)\nvar myList = entity.myList.values; // access\nmyList.Add(1); // modification\nentity.ReplaceMyList(myList); // update\n```\nin many cases however, you might prefer to have a separate entity for each element, in which case you could do sth like this:\n```csharp\n// component definition (int is just for example)\n[Game] \npublic class MyItemComponent : IComponent {\n    public int value;\n}\n// usuage (grab all entities with myItem component and do sth)\nIGroup myItemEntities = context.GetGroup(GameMatcher.MyItem); // access\n// up-to-date array of entities with myItemComponent\nforeach (var item in myItemEntities.GetEntities()) {\n    // do sth\n}\n```. For advanced ui the solution is to create interfaces e.g. IMenuItem then have monobehaviours which implement your interfaces. Then you can have a component e.g. MenuItemComponent with field item : IMenuItem. Your interfaces define the methods you want to use in your systems (e.g. OnClicked). If you build up your ui functionality that way you can make it as complex as you need, and plug into all the unity functionality through the monobehaviour. This has the advantage of requiring only that you re-implement your interfaces in the new engine should you want to switch engine later. Your systems code can then be completely engine-agnostic.. @sschmid could you possible weigh in on a general solution for deep-copy of entities and components?. That sounds similar to how I had it initially (I just wrote functions inside an EntityFactory class) and it's where I've been leaning recently too - my hope was to have something like a single ScriptableObject class that had a nice drop down for context and from there, drop-downs for components. From what you all say there is no nice way to do this in all generality. Thanks very much for the insights @sschmid and @kdrzymala.. Thanks for this - if I understand correctly, your SOs expose the specific things for specific entities they are responsible for (e.g. enemy config might need health, attack types, etc) then under the hood you have a method that translates the SO's fields into .AddComponent() calls. \nSo you have many SOs each defined specifically for certain types of \"things\" in your game. Then some way of managing instances of these SOs so they can be passed around at runtime?. Ok, thanks. Do come back and describe the setup if you have the time, otherwise I appreciate what you've shared so far.. What do you put in your AfterCopy methods for your components? Is this the bit you put in to handle deep-copying reference types?. Is the exception coming from a system? If so could you post the system code?. Do you know what line number your null-ref is coming from? You're not checking your GetEntitiesWithName calls for null - remember these can be null if the entity isn't found. Yeah, point it to your MyProjectName.csproj file. This should be better documented.. GameController.cs\ncsharp\nvoid OnDestroy() {\n    _systems.TearDown();\n}\nIt's for final logic as the game controller / instance of your game is shut down. Implement ITearDownSystem and it'll be called with the above method.. This happens to me a lot too, never said anything before - ctrl-shift-g sometimes opens the chat, the wiki, or the donate page instead of generating. My assumption is that it's accessing functionality of the buttons in the entitas prefs window, somewhat randomly.. It's really unpredictable when it happens, sometimes I have a whole session with multiple generates and it doesn't happen, sometimes it seems to happen every time i jump back to unity to generate. \u00af_(\u30c4)_/\u00af. This is awesome, thankyou. Would you mind throwing it up as a repo on gh? \n[Edit: I somehow didn't notice the code snippet - that answers my question]. I get this when i go through the reflection generator procedure for renaming and refactoring components in existing projects. Only when re-generating the contexts and feature classes, and then only when adding components back, but it does happen consistently every time. I've just ignored so far and it has never caused a crash.. You can create multiple groups, one for each context, then when you go to process them, cast them to a common interface as you do in the multiReactiveSystem.\n```csharp\nICollidableEntity : ICollisionListener, IEntity {}\npublic partial class GameEntity : ICollidableEntity {}\npublic partial class InputEntity : IColliableEntity {}\n```\n```csharp\nreadonly IGroup _gameGroup = _context.game.GetGroup(GameMatcher.CollisionListener);\nreadonly IGroup _inputGroup = _contexts.input.GetGroup(InputMatcher.CollisionListener);\n// etc ...\npublic void Execute() {\n     foreach (var e in _gameGroup.GetEntities()) Process(e);\n     foreach (var e in _inputGroup.GetEntities()) Process(e);\n// etc ...\n}\nvoid Process(ICollidableEntity e) {\n    // do stuff\n}\n```\nI think we should have a proper MultiGroup like you suggest, but this is how i deal with it right now.. @wallpap3r your point of view would also make MultiReactiveSystems a bit of an antipattern. Given that they exist, it seems logical that multi-groups should also exist.\nIn terms of implementation, i would think it would require that the code gen creates interfaces for each context, such that you could say sth like GameContext : ISomethingContext {} where:\n```csharp\npublic interface ISomethingEntity : IEntity, ISomething {}\npublic partial class GameEntity : ISomethingEntity {} \npublic partial class InputEntity : ISomethingEntity {} \npublic interface ISomethingContext : IContext, ICreateSomethingEntity {\n    ISomethingEntity CreateEntity();\n}\npublic partial class GameContext : ISomethingContext {}\npublic partial class InputContext : ISomethingContext {}\n// then to generate the group\nIGroup = Contexts.GetGroup( \n    // sth similar to the ICollector[] for multi reactive systems\n);\n```\n. @wallpap3r there's no inheritance in my example, and in fact no real polymorphism (gameEntity.AddCollisionListener does essentially the same thing as inputEntity.AddCollisionListener). \nBasically i think we need to be able to create and IGroup<ISomeMultiContextEntity> using a method that takes an array of Matchers from different contexts, whose entities implement the ISomeMultiContextEntity interface.. We have the interface IMatcher<TEntity> and  IContext<TEntity>. 'IContext' can easily define the method TEntity CreateEntity(). Seems like most of the abstraction work is done already. \nIf you know that a GameEntity implements ISomethingEntity, you therefore also know that GameContext has a method called CreateEntity() that returns something that can be cast to ISomethingEntity. All of that is guaranteed, but currently it's not enforced in code. . You might want to use a different Contexts instance in different unity scenes, or to have separate contexts between server and client, or you might want to do unit testing, where you mock up a dummy Contexts instance and pass it to systems, or as @c0ffeeartc said, you might have a minigame within a game and want that to have it's own Contexts instance that is separate from the main game. There are many reasons why you might want multiple Contexts instances. If you use the singleton instance you are limiting yourself quite heavily. It's just better architecturally to pass the contexts in the ctor.. If i had the time to create the addon myself i wouldn't have requested it here, but thanks anyway.\n@IsaiahKelly it would be more like a dropdown window that lets you define the order that components get drawn in the entity inspector, and a color picker for each one.\n. Thanks for the starting material, if i come up with something I'll certainly share it. I think the simple [DrawInGroup(\"View\")] tag would be all the functionality i need. I'll have a tinker. \n. @yuchting The filter conditions are there to prevent stale entities from being processed. Having a reactive system react to GameMatcher.Position does not guarantee that entity.hasPosition == true in the filter method. \nHere is a contrived example with two systems:\n```csharp\n// run this code in the first system to execute\nvar e = _context.CreateEntity();\ne.AddGameBoard(xSize, ySize); // fires GameMatcher.GameBoard.Added() event\ne.RemoveGameBoard(); // removes the component but group has been triggered, so the next system will process this entity regardless\n// second system reacts to GameMatcher.GameBoard.Added()\n// put this in exec method\nDebug.Log(e.gameBoard.xSize + \" \" + e.gameBoard.ySize); \n// ENTITY DOES NOT HAVE COMPONENT EXECEPTION\n```\n. That's correct, you're welcome.. The entities are stored in a nice contiguous array so if the data on them are small they are very efficient to loop through. They are also pooled so there's very little performance hit or GC from creation and destruction. I think you should profile a quick mock-up of your actual application to see.\nIt might be slower than a pure C# approach where you write some manager class and store everything you need in an array you have complete control of, but what you lose there you massively gain in flexibility - Entitas is like an automatic manager for any kind of data in your game / simulation, so you can worry about what you do with the data rather than how you pass it around.\nAll in all it's probably something you'll have to see for yourself with a mock-up of the kind of task you want to perform. \nThere's been some discussion of structs vs classes as components - I'll let @sschmid discuss that though as he knows more than me.. i think this could be done really efficiently in entitas. Mock something simple up, maybe even without the view layer, see how it runs for you. Try changing the entry in the entitas preferences menu to target your-project-name.csproj and see if that fixes it. I.e. the .csproj file that unity generates in the top level of your project folder.\nSo in a unity project called \"MyProject\", you'd use MyProject.csproj\n. Replace and Add are not distinguished in the collectors: e.AddThing(x,y,z) and e.ReplaceThing(x,y,z) will both show up in the reactive system with trigger Matcher.Thing.Added().\n. Can you be specific about what you are trying to do? I think i might have misunderstood you.\nReactive systems will trigger on component update, just like when component is added for the first time.. So if i understand you, you're looking to find away to replace that last execute system with a nice reactive one that doesn't need to check every frame?\nAt first glance I would say just make a reactive system that uses trigger: Matcher.DoSomethingStatus and filter: entity.hasDoSomethingStatus && entity.doSomthingStatus == Done. Every time the status is updated you check to see if the status is done, if not ignore it, if so, work on it.\nDoes that make any sense?\n. This has been discussed before as @IDNoise says - see issue #388.. All that logic should be in a TimerSystem. Your components should only have the data fields you need on it, no properties, no events, no delegates. There's no good reason to put that logic there.\ncsharp\n[Game]\npublic sealed class TimerComponent : IComponent {\n    public float currentTime;\n    public float maxTime;\n}\nThen the logic should be in a system e.g. \n```csharp\npublic class TimerSystem : IExecuteSystem {\n    readonly IGroup _timerGroup;\npublic TimerSystem (Contexts contexts) {\n    _timerGroup = contexts.game.GetGroup(GameMatcher.Timer);\n}\n\npublic void Execute() {\n    foreach (var e in _timerGroup.GEtEntities()) {\n        var t = e.timer.currentTime;\n        var max = e.timer.maxTime;\n        t += Time.deltaTime;\n        if (t > max) {\n            // timer is complete, remove the component\n            e.RemoveTimer();\n        } else {\n            // timer is not yet complete, increment the current time\n            e.ReplaceTimer(t, max);\n        }\n    }\n}\n\n}\n```\nI sometimes write a TimerCompleteComponent as a simple flag, and add that when the timer is complete because I find it more convenient to react to TimerComplete.Added() than i do to Timer.Removed(). . From my point of view, this would be a killer - i will flat-out refuse to use any asset that won't let me tidy it away in a Assets/Libraries/... folder. . Goodo. I'm super OCD about tidy folders :). I would just like to add that I think @djfountain's points are fair, but for my part, I think Simon has been very open about his plans all along and has made announcements and listened to our feedback for every major step. I understand the \"not part of entitas\" position because this came up in discussion many times - logically the unity specific, networking and other tools should not have been part of the Entitas top-level namespace and were only there because the architecture had not matured along with the feature development early on.\nI think specifically the code generator is the problem, not the other tools. Its undeniably an essential part of entitas - it would be good if at least the reflection generator was included as source code (i can't remember off-hand whether it still is).. Typo in generated code btw: \"_listsners\". I love this feature, my animation controllers are doing a lot of polling right now so I'm looking forward to rewriting them in this way.. @StormRene this is why i dont use OnEnable or any other unity message. Instead have an initialisation method as part of an interface on my monobehaviour that gets called by the system instantiating the gameobject. Using the unity messages you're giving up control over execution time.\nIf you use gameObject.Link() anywhere in your code, then you should be able to call your intialisation methods in the same place.. I'm just suggesting that the code from OnEnable be moved to another method that's part of an interface e.g. IViewController.InitializeView(); That way, right after you call Instantiate() to create the gameobject, you can do foreach (var view in GetComponents<IViewController>) view.InitializeView(); \nSo your listener scripts just have to implement that interface and you change the name of OnEnable() to InitView() or whatever you want. That way they are always initialized at a controlled, defined time, where you know exactly the state of every relevant object / entity. I also do the same thing with Destroy() / Disable() - there are equivalent methods in my view interface.. If they're there on scene load perhaps an initial FindObjectsOfType?. Ok, how about using onEnable to create sth like RequestInitializationComponent and have a system take care of it? \nI'm not as in-tune with the designer / programmer separation since I'm doing both for my team :). Forgive me if I'm misunderstanding. I think we have somewhat different architectures that make what I'm suggesting really easy for me, but really awkward for you. I'm allergic to using scenes for level design - i can't deal with the Russian roulette 'who gets initialized first' thing, so i initialize everything with code. I guess ignore me for now, I'm probably not helping! \ud83d\ude04 . Sure, that's somewhat outside of my experience - my \"team\" is an artist and me - he doesn't even touch unity! So yeah probably shouldn't follow my advice here, I'll stfu now \ud83d\ude04 . Just going to give you my thoughts - but these do not represent official advice.\nI'm sure you know this already, but the proper way to store a link to an entity in a component is to store an entity ID, then call _contexts.game.GetEntityWithId(id); This is a dictionary lookup which is fast, and scales as O(1) with number of entities (so should be about as fast if you have 1 million entities as if you have 10).\nThe dictionary lookup is of course slower than just looking up a direct memory reference. In some performance critical paths this is a problem. In my case physics, collisions and AI were hammering the EntityIndex lookups and slowing things down. I made a rule that I was allowed to reference Entities directly but ONLY IF THEY ARE SHORT-LIVED REFERENCES.\nSo for a collisions I have\ncsharp\n[Game] \npublic sealed class CollisionComponent : IComponent {\n    public GameEntity self; // instead of *public int selfId*\n    public GameEntity other; // instead of *public int otherId*\n}\nThese components are added to a new entity when collisions are detected, then they are processed and the entitiy is immediately destroyed (within one frame of being created). They are never going to hang around long enough for the reference to get stale. This is the situation where i think it is okay to use references.\nThe real problem with references is that you have no reliable way to check if they're stale - you can't do a null check because of pooling (your ref will now refer to a pooled entity, or worse, an entity that's been taken from the pool and reused and is now something completely different). You can't check for sth like entity.isDestroyed because that is usually only true for one frame, and if you miss it you're back to the first problem again. So it's not at all safe unless you're very sure that your reference doesn't live long enough to get stale.\nIf you don't have a performance problem, you should definitely use entity IDs and GetEntityWithId calls - it's much much safer. It's a bit cumbersome in code I know, but it will save you some nightmare bugs down the line.\nHere is an example of how i would do it with the lookup - entityA holds a component called Follow(int id), which will make it follow entityB:\ncsharp\n// get follow target\nvar target = _contexts.game.GetEntityWithId(entityA.follow.id);\nif (target == null) { // safe null check \n    entityA.RemoveFollow(); \n} else {\n    entityA.ReplacePosition(target.position.value);\n}\n. If you just want to do equality checks then it's really easy:\nentityA.target.id == entityB.id.value. @bit-chimp Lists are fine, you can do the following:\n```csharp\n// define this component\npublic class ListComponent : IComponent {\n    public List values;\n} \n// now you can do any of the things below\n// add fresh list\ne.AddList(new List()); \n// build a list then add\nvar list = new List();\nlist.Add(1);\nlist.Add(2);\ne.ReplaceList(list);\n// read an existing list from a comp, modify and save it back\nvar list = e.list.values;\nlist.Add(3);\ne.ReplaceList(list);\n// same but without the temp variable\ne.list.values.Add(1);\ne.ReplaceList(e.list.values); \n// important that you call replace, even though you already\n// modified the list in-place - replace triggers reactive systems!\n```\n. RE: getting entity targets - that sounds like a job for a Custom Entity Index. See #351 for an implentation of an entity index that lets you do \"GetXWithY\" lookups (e.g. GetTargetWithId(int id)). @sschmid i think the point of this question to ask for a reactive system trigger that fires at the same time as Removed() currently does, but that gives the reactive system access to the component that just got removed.\nThat is: we know we can get the component from the .Removed() event but we want it in the reactive system so we can process it before it gets deleted.\n@bit-chimp In my case I work around this by having a lot of intermediate components:\ne.g. instead of \ncsharp\ne.RemoveThing(); \n// trigger reactive system with GameMatcher.Thing.Removed()\ni have \ncsharp\ne.isRemoveThing = true; // add a component called \"RemoveThingComponent\"\n// trigger reactive system with GameMatcher.RemoveThing.Added()\n// in this RS, process data from ThingComponent (still attached to entity) THEN remove it.\nIt feels pretty hacky though. So, I think they work out the same - i think if you know you are going to process every entity with component X, every frame, there's no reason not to use an execute system with a group, and loop over group.GetEntities() every frame.\nI also sometimes do it your way: a reactive system that calls Replace() every frame, so it \"feeds back\" the entities into itself. The only reason i do it this way is because i can then use multi-reactive systems, and make these things work across all contexts. If you only need one context, there is no downside to using group.GetEntities() every frame.. Here is an example of something i know i need to do every frame - for which i use an execute system. Don't worry about the specifics of the view and physics interfaces - I'm just grabbing transforms from unity's physics simulation.\n```csharp\nusing Entitas;\npublic class SyncPhysicsTransformSystem : IExecuteSystem\n{\n    private readonly Contexts _contexts;\n    private readonly IGroup _physicsGroup;\npublic SyncPhysicsTransformSystem(Contexts contexts)\n{\n    _contexts = contexts;\n    _physicsGroup = _contexts.game.GetGroup(GameMatcher.AllOf(GameMatcher.View, GameMatcher.Physics));\n}\n\npublic void Execute()\n{\n    foreach (var e in _physicsGroup.GetEntities())\n    {\n        e.ReplacePosition(e.view.instance.Position);\n        e.ReplaceVelocity(e.physics.instance.Velocity);\n    }\n}\n\n}\n```. Advantage of GetEntities() is that it's always exactly up to date so there's no need for the extra logic performed in .Filter() in an RS - presence of the components from your group is guarenteed as long as you consume the entities right after you call GetEntities().. @c0ffeeartc usual caveats apply with floats - fp precision errors for equality checks. I personally never use them. I would prefer to round the floats down to ints have a separate GridPosition component with an IntVector2 - then use this for lookups, but depends on what you're trying to achceive.. Simon will probably tell you to write a custom code generator. I think the idea is really good though, and warrants consideration for being part of entitas.\nI imagine that generating a flag component for each state of the enum is how you would have to do it for the custom matchers and groups. This could easily explode out into many many components, but that would be your decision when you add the attribute to your component right?\nMany of the helper methods could be done without any extra flag components - you could have e.isStatusOn, e.isStatusOff, e.isStatusStandby, as a wrapper around a simple equality check -> under the hood it would be e.status.value == Status.On, no need for an actual new component generated for each enum state there.\n. @CCludts all fair points for sure. My favored option is services as Interfaces existing as generated fields in the Contexts class.\n1: Define your service interface e.g.\ncsharp\n[Service] // optional argument for service name?\npublic interface ITimeService {\n    float deltaTime {get;}\n    float fixedDeltaTime {get;}\n    bool isPaused {get; set;}\n}\n2: Generator adds field Contexts.timeService with a nice error message if it is accessed when it is null (e.g. \"you forgot to provide an implementation of TimeService before you accessed it\").\n3: In GameController.cs (or whatever your application start point is) \ncsharp\n_contexts = Contexts.sharedInstance; // or new Contexts(), however you first setup contexts\n_contexts.timeService = new UnityTimeService(); // concrete implementation of ITimeService\nNow from any system we can get _contexts.timeService.deltaTime etc.\nPros: It's basically your fourth option above, but without involving components - so you eliminate 3 of the 4 cons straight away. No need to generate anything more than the fields in the contexts class - all the methods are part of the original interface decleration. I suppose they wouldn't even have to be interfaces, if you wanted to do it with concreate classes that would work in the same way.\nThe way I currently work is to store directly onto a component, but i would prefer it to be in the contexts class if there was code-generation support for that.. Not sure if i understand these cons Simon, can we discuss further? I think my architecture is slightly different to yours, or I'm following different mental rules.\nI don't have any entitas dependencies in my services. IInputService should define a set of inputs your game wants to use (e.g. left / right stick vectors, four face buttons as bools, dpad buttons, shoulder buttons as bools and triggers as floats). \nNow in entitas code we might want an EmitInputSystem that actually queries these values, so say we want to know if user is pressing a ButtonA. In the system we're calling _contexts.inputService.buttonA to query the state of the button. In the actual input service, all that's happening is we're saying buttonA { get { return Input.GetKey(KeyCode.A); } }.\nI do not create entities or add components in services - my services don't know entitas exists. The service is just a way for you to get data into or out of your entitas code.. The way i think of services is like a portal to the exterior world - my game code is a walled garden - it should never be concerned with what's happening on the outside. It doesn't care about the engine it's being run on, it doesn't care about the input device, or clock source, or operating system or whatever.\nObviously sometimes it needs user input from the outside - it shouldn't care how it gets it, but instead just talk through interfaces (\"I don't care how, just tell me if button A is being pressed\" - of course button A could be the keyboard key A, could be a face button on a controller, or it could be an AI with no physical controller at all).\nThe service, on the other hand, can't see into the walled garden, except that it knows what interface it's supposed to implement. Just as my entitas code will never need using UnityEngine, my service code should never need using Entitas. . Yeah, i'm probably wrong about the terminology - this is what I call \"services\" but I'm sure that it's not formally correct to call them that. \n@sschmid closest example for me is my view service that has things like IViewController LoadAsset(string name). \nLoadAssetSystem (RS - Matcher: Asset, Filter: Asset && !View) looks like this:\ncsharp\nIViewController view = _viewService.LoadAsset(e.asset.name); // UnityViewService does prefab loading\nview.Initialize(e, contexts); // method from IViewController interface\ne.AddView(view);\ne.isAssetLoaded = true;\nAll my entity creation code - (CreatePlayer / CreateEnemy etc) goes in monobehaviours that live on the prefab. These implement IConfigureEntity and in the view controller Initialize method I do a var configs = GetComponentsInChildren<IConfigureEntity>(); and call config.Configure(GameEntity e, Contexts c) for each. \nSo for configuration i write specific monobehaviours like PlayerConfig which have classic Unity editor fields to play with. I have a folder full of these scripts. This is where I add components to the entities to make them into a player or an NPC or a bullet or whatever.\nI guess I'm leaving configuration to the outside world, which is maybe stupid - but i like having config all done in unity and saved as prefabs for right now - it's very convenient and designer friendly.\n. If you actually wanted contexts dependencies in your service though - why not just have an IService interface with an Initialize(Contexts c) method? then we pass it during construction and it's nice and explicit. . @StormRene  sure, i wasn't expecting my configuration solution to be the best option, but I can prototype with it really really quickly - I will probably end up moving it all to a proper serialized solution in the future.\nMy point as relevant to this issue is that the entity creation (and other things that rely on contexts reference) can easily be kept within systems code, then entities can be passed out of the systems code for services to do stuff to them. No need to have services dependant on Contexts or w/e. > Btw, until there's a way to automatically generate this, you can also create custom events that are based on multiple components\nhow?. I shared my interpretation in a wiki post:\nhttps://github.com/sschmid/Entitas-CSharp/wiki/How-I-build-games-with-Entitas-%28FNGGames%29. @YimingIsCOLD, @cruiserkernan I have kept hold of my ViewComponent for this reason. The IViewController interface acts as the base view, then I have things like IPhysicsController which have fields like mass, drag, and methods like ApplyForce(). In my view service I'm instantiating and then searching for scripts attached to the instantiated gameobject e.g.\n```csharp\nvar go = Instantiate(...);\nvar view = go.GetComponent();\nif (view == null) return;\nview.InitializeView(contexts, entity);\nentity.ReplaceView(view);\nvar physics = go.GetComponent();\nif (physics != null) {\n    physics.InitializePhysics(contexts, entity);\n    entity.ReplacePhysics(physics);\n}\n```\nYou can put whatever you need in those interfaces. You only need a component if you want the ability for a system to be able to pull data from the view. In my case i have an execute system that loops through all the physics components and pulls position and velocity from them onto components - so Unity physics solves for position then i suck it back into entitias.\nEvery prefab spawned into my game goes through that so if you want your prefab to be a physics object or a collider object or whatever you just hang a script on it with that interface. You dont need special entity configuration code (my physics controller script has public editor variables i can set for mass and drag, these get added as components to the entity during InitializePhysics()). So configuration is just in the editor on the scripts.\nSo I just have to go _context.CreateEntity().AddAsset(\"Player\") and I get a fully configured player entity with all its necessary components set up according to the values in the scripts on the prefab. My player prefab looks like this:\nhttps://i.imgur.com/i1WHH7g.png. Sure - any functionality you need from unity you can get this way.\nI tend to separate \"ViewController\" type things from \"Service\" type things along the lines of whether the information im looking for is global or local. E.g. Physics Service has raycast methods since these are stateless static methods. It doesn't need to live on a view gameobject to work. Physics Controller on the otherhand has things like mass / drag / apply force which all apply to a particular object instance. \nBut otherwise its the same - you are saying \"what info do i need from unity?\" and then writing interfaces that act as a pipeline to get that information into your game code.  Thats why i draw the diagram with the interfaces half-in-half-out of the box, they are the information pipes. You get to choose exactly what pipes to build so you dont carry all the extra bloat that comes with the implentation in the game engine or the asset store thing youre using.. I would also say, the whole \"logic talking to view layer == bad\" thing is probably overblown. It's a game, it's safe to say that it's being drawn, but less safe to say how it's being drawn. \nI don't mind having these systems that talk to views because they're only ever talking to my interfaces. I use events to minimise the amount i have to do this, but i find it really useful to have some references around in case i need to talk to them. That's not to say it's not a bit of a crutch, but i built these before Simon did events and I'm clinging to them for a bit longer :). > Does your execute system runs on a fixed update to update the entity's position?\nyeah, i use the new non-alloc groups though so i dont notice the cost.. @cruiserkernan it's an enum tag i give to all entities - similar to unity's tag system, so i can find entities with tag or check a tag for something when i have a collision or whatever. It's just a component with an enum field.. @sschmid good point RE: the events - there's still something talking to the views, but it's all hidden away.\nNo problem on the article, tbh i probably wrote it all in chat a couple of times before - it's nice to just be able to give some a link now :).. @zhuchun the services are all interfaces though so you can mock them up very easily (e.g. TestViewService : IViewService).. I think you're making your contexts too granular. Players / NPCs / Projectiles (in my mind) are all Game entities - they likely share a lot of core state and functionality. My advice is to split your contexts in such a way that you never need this meta-system you're talking about. \nIn other words, if you find yourself with logically connected entities that exist in different contexts, you've gone wrong - you should design your contexts so that that cannot be a single \"logical\" entity that has to be represented by multiple entities in multiple contexts.\nI would make NPC, PC, Projectile, proably even the tiles / terrain stuff just part of GameContext.\nThis is just my opinion obviously. Hope that makes some sense.\n. I guess I'm misunderstanding or missing something, maybe other can help. I've always handled this with components - e.g. CollisionComponent has a handle for the SELF and OTHER entities (plus a third field for collision data). Then i have reactive systems that consume these entities and do stuff. What does the proposed MetaEntity give you that a pure component wouldn't? \nI didn't intend to sound dismissive, sorry if I'm missing your point here.. I do it similarly to the way you have suggested, i have a SteeringRequestComponent -> RequestSteeringSystem -> Async calculations -> SteeringResultComponent -> ApplySteeringForceSystem.\nFor pathfinding on a grid or navmesh I'd do it the same way: PathRequest -> Async pathfinding -> PathResult -> FollowPathSystem. \nIf you're using GOAP or a behaviour tree this pattern still works, BehaviourRequest -> GOAP Pathfinding -> BehaviourResult -> DoBehaviour. . For me, services are these \"outside\" sources of information or functionality. I have a recent example where the service pattern and interfaces really helped me out:\nFor example I have an interface IInputService and it has properties like Vector2D LeftStick {get;}. My game doesn't care what is providing the left stick data, it just needs to be able to ask something for it when it needs to. I started off with UnityInputService : IInputService where i had an implentation like Vector2D LeftStick { get { return new Vector2D(Input.GetAxis('horizontal'), Input.GetAxis('Vertical'); } } but then later I bought InControl from the asset store. The advantage of this pattern is that all i had to do was write a new InControlInputService : IInputService using the InControl api, and feed that in at the start of the game instead of the unity one. There's nowhere in my game code that touches either Unity or InControl, so literally nothing changes in the game code when i change the way i get input. It's that sort of flexibility that's really useful.\n. _linkedEntity is defined in one of the base classes (View or UnityView i suppose).. I believe this might be because the interfaces that get generated by entitias for multi-context components have been renamed.\nWhat used to be called IDestroy is now IDestroyEntity. Unfortunately that was the name I used in the multi-reactive system tutorial for the interface I made, which now should be called something different.\n```csharp\n// this component\n[Game, Input, State]\npublic class DestroyedComponent : IComponent { \n}\n// generates an interface which is now called IDestroyedEntity\n// used to be called just IDestroyed\npublic interface IDestroyedEntity { \n    bool isDestroyed;\n}\n// so now when you make your cross-context interfaces you need to name them differently:\npublic interface IDestroyable : IDestroyedEntity, IEntity {}\npublic partial class GameEntity : IDestroyable {}\npublic partial class InputEntity : IDestroyable {}\npublic partial class StateEntity : IDestroyable {}\n``. I don't understand why you have the DestroyEntity class in there. There should be no such concrete class as aDestroyEntity. In our example you should only have aGameEntityand anInputEntity. These classes are both generated by entitas. I also cannot find the place where you saypublic partial class GameEntity : IDestroyEntity {}`. You need to do this to be able cast from GameEntity to IDestroyEntity.\nRemember IDestroyEntity is an interface, not a class.\n. in your example file, ttt and ttSystem are both fine, but that DestroyEntity class should not exist.. This might not be suitable for you, but the way i do this is to defer the entity setup to a script on the gameobject e.g. IConfig. If I want an asset i only need to know its name. I call _context.CreateEntity().AddAsset(\"MyAssetName\");. This send the entity through my LoadAssetSystem.\nIn LoadAssetSystem I call IViewService.LoadAsset(name) - in my implementation of this, I look for IConfig on the gameobject and call IConfig.Configure(IEntity e). When it's all configured I do entity.isAssetLoaded = true;. There's something on this in the FAQ. \nRecommended strategy is to use an ID component generated on entity creation. Wherever you would have stored a direct ref to an entity in a component, instead store its id. Look it up by calling var e = _context.GetEntityWithId(id);. If this is not null you have an alive, valid entity.\nDirect refs can get you into trouble very quickly, since entities are pooled - so your reference may become stale over time, and you might instead refer to a destroyed and pooled entity, or worse, one that's been destroyed, pooled, then reused as something else. You cant therefore perform any trivial check (e.g. a null check) on a direct reference that can guarentee you a valid entity. This is why we use the ID component approach.. You can do this with custom entity indices - @T2RKUS shared his implementation in #351 \nThis allows queries like \"Get (any) X With (specific) Y\" or \"Get (specific) X with (specific) Y\" or \"Get (any) X with (specific) Y and (specific) Z\" etc.. You could try this: \nGive HitComponent a field (float cooldownTime) then do entity.AddHit(cooldownTime). Then have a HitCooldownSystem : IExecuteSystem that iterates through the group of entities with hit components, subtracting the delta time from the timer value. When this hits 0, remove the hit component.\n```csharp\npublic class HitComponent : IComponent {\n    public float cooldownTime;\n}\npublic class HitCooldownSystem : IExecuteSystem {\n    readonly IGroup _hitGroup;\npublic HitCooldownSystem(Contexts contexts) {\n    _hitGroup = contexts.game.GetGroup(GameMatcher.Hit);\n}\n\npublic override void Execute() {\n    foreach (var e in _hitGroup.GetEntities()) {\n        e.ReplaceHit(e.hit.cooldownTime - deltaTime);\n        if (e.hit.cooldownTime <= 0) e.RemoveHit();\n    }\n}\n\n}. If you wanted it to be fully general you could have something like \n```csharp\npublic class DelayedActionComponent : IComponent {\n    public int ownerId;\n    public float delay;\n    public Action action;\n}\n// then you could do\ne.isHit = true;\nvar action = _context.CreacteEntity();\naction.AddDelayedAction(1, (e) => e.isHit = false);\n// then in system\npublic class HitComponent : IComponent {\n   public float cooldownTime;\n}\n```\nthen write a DelayedActionSystem that reacts to new delayedActionComponents, decrements their time value like before then when that hits 0 calls the the action you set in the component.\nThis breaks the \"ONLY DATA IN COMPONENTS\" rule though, and is a nightmare to serialize, so it's not recommended. . The first way is how I would do it. I think I have something very similar in my game. I know which one I'd recommend  ;-). @TargetDetected The listener component holds a list of IListener objects. AddThingListener(IThingListener item) is a shortcut for adding a listener to a list of listeners, which is why you can add mutliple identical ones. When the listener system executes it iterates the list of listeners inside that component and calls their OnThing() method - this was the solution for how to add mutliple listeners to the same entity.\nCould the RemoveListener method actually flag a listener for removal internally, then have the removals done at the end of the event system in question. Maybe RemoveListener adds a lsitener to a hashset somewhere and once the inital loop is finished, event system could loop the \"flaggedForRemoval\" set and remove them? IDK how workable that is but it's a suggestion that would allow us to keep the current API without having to use actions.\n. Match-one is following most of the principles I follow. Maybe we could use a slightly more complex example project, but I doubt I'll have much time to make that to the quality it would need to be. . Hi @moixxsyc - I wrote that tutorial quite a while ago, and back then the generated interface used to be I{ComponentName}, but now it is I{ComponentName}Entity.  I have updated the tutorial just now to reflect these changes.\nSorry for the confusion this has caused.. I dont think you should throw there unless the unique entity already exists. If this is what you mean, feel free to ignore below (i have no problem with the exception being thrown for a 2nd entity being created that conflicts with the unique first entity). \nIf what you mean is that the entity level (as opposed to context-level) api should be depreciated, i would be in trouble. It would break a ton of my code.\nI like to create a unique entity to hold several other components, e.g. a settings entity with several non-unique components attached as the actual settings data. This way i can have easy access to lots of data through context.settingsEntity.settingA.value but also get the benefit of reactive systems and groups that trigger when certain combinations of these components are added or removed. I use this extensively for scene management, input, etc, where i need reactive systems to be able to trigger on combinations of components on the same entity but i also want the benefit of a context-level reference to the entity.\nDoes that make sense?. The cache for ToString is likely overwritten every frame if an entity changes at all, it has to walk every component and build a string out of all their ToString values. Just guessing here though, didn't look at the source.. > btw, the main reason I include all components is to able to search and filter entities\nWhat do you think about susing groups to choose which things get displayed?\nYou could have an \"all\" option or narrow them down by group?. Are you going to merge this into release in the future? Thanks for responding to this issue. @AVAVT this sortof defeats the purpose of an event-driven system. The point is to only call the method when necessary. In some cases this would lead to thousands of unneccesary method calls.. I like the IListener approach for the same reasons, it's nice and convenient in the IDE and it's extremely readable, right at the top of the class you can see what it's reacting to. I just want support for both types of listener at the same time - perhaps the more cumbersome naming (Including the word Self/Any for example) could be reserved only for when the CG detects that both types are defined on one component?. Yes, you control exactly when your systems are called because you call their Execute methods manually. You can also create multiple sets of systems and execute them separately (some in update, some in fixed, some in late etc). Take a look at the game controller in match-one here. Look how systems are created and how their lifecycle is managed in the unity Start() Update() and OnDestroy() methods. For your needs you'd want to create a second group of systems call fe. _fixedSystems, and call _fixedSystems.Update(); _fixedSystems.Cleanup(); within FixedUpdate() instead of Update().. I might be wrong but i think they use HashSets which do not preserver order, so you would need to manually sort them if order was important to you.. Or creation time perhaps?. i think that's what i said :). > Yep. You did. I just wanted to confirm it...\nGood call!\n. ",
    "arne-schroppe": "I still think that a hash map with lazily created heaps as values is a promising idea. The hash function could simply be bit-masking on the component id. So every component id that ends in e.g. 010 would end up in the same heap.\nBut we need to keep in mind that this is not a completely uniform hash function, since the number of components will probably not be something that ends in all 1's, so everything below num_component_ids & 0b111 will potentially have one more entry. And the hash table itself also needs extra memory, so we might even end up using more memory with this method.\nOne way to mitigate this could be, that we expect the heaps not to be filled up completely. So to go with the current example, if we hash with the last three bits and thereby potentially have 8 entries per heap, we would at first only allocate space for 4 entries, hoping that the remaining slots will never be used. Whether that is a good idea and what numbers to use exactly is something we'd have to measure in a couple of real applications.\nAll in all I'm not sure if this is worth it, though. We might end up using more memory and we're going from 1 O(1) access + 1 dereference to  O(log n) access + 2 dereferences (first from hash table to heap and then from heap entry to component data).\nMaybe someone else has a better idea?\n. Actually now that I think about it: @antonlicht's idea of simply using a heap sounds way better. We would start with a capacity for maybe 20% of the total number of components (the best percentage would still need to be measured in real applications). This means that we might need to reallocate, but that should ideally not happen too often. Access would still be O(log n) instead of O(1) but even with 200 different components that would be at most 8 comparisons, so not really much.\nEdit:\nThere is one problem, however: The heap would either need both the component id and the component data reference per entry (meaning we'd spend about twice as much memory) or just the reference, but then we would have to dereference while searching in the heap, which will potentially lead to cache misses and be slow.\n. If I understand this correctly, the question is how to pack the components of one entity together as tightly as possible, right? I think we need to reframe that question, since that isn't really what we want most of the time. When we get component A of an entity, we usually don't want component B of that same entity right after. What we rather want is component A of another entity.\nSo how about this: All components of the same type are stored together in a shared array (so there will be one such array per component type, managed by the pool). An entity just holds an index into that array. When we loop over all the entities that have for example a Position component, all those components will probably already be cached. And this would even allow the components to be structs.\nStoring components like this would need a bit of memory management (i.e. if we run out of space, we need to reallocate a bigger array) but that should be manageable.\nCan this work or did I miss something?\n. ",
    "zyzyxdev": "What I liked about uFrame is the use of reactive extensions (UniRX) and the event bus.\n. ",
    "buihuuloc": "@sschmid Do you have any comparison with Artemis ECS?\n. @JamesMcMahon\nuFrame: me too, I'm not a big fan of drag and drop a code block :baby_chick:\nArtemis: My wonder is about the performance.\n. Also, How about this platform https://www.discourse.org/? . @sschmid \nI'm having the same issue here.\nI'm using Iterm2. The Jenny server is really slow. It takes more just 2 minutes to generate the code when using: \njenny client gen\nMore info:\nUnity 2018 beta 5\nEntitas 1.0\nMac 10.12.3\nAny ideas??\n. Yes, It is allowed to do so.\nThe properties of the component will come from both inheritance component and itself.\n```c#\n[Game ]\npublic class  TriggerComponent : IComponent, IBehaviourTrigger {\n   public ITrigger trigger;\n}\n[Game]\npublic class OnHitTrigger: TriggerComponent {\n}\n```\nYou can do something like that\n. ",
    "chiuan": "thanks all !\n. Entitas Console\n. maybe some example code would be helpful.\n. i have download the 0.31.2.unity.zip\nand delete the old Entitas folder, copy the newest to .\nbut the version is 0.31.1\n. i think this can post into wiki, i think its good to use!\n. @sschmid  i use your GuardSystems for control some kinds of systems.\nbut i found some thing error.\nplease look my post > https://github.com/sschmid/Entitas-CSharp/issues/122\nby the way i have test, this works, DestroySystem is worked.\n``` c#\nvoid InitSystems(Pool gamePool,Pool corePool)\n    {\n        _systems = new Feature(\"BattleSystems\")\n        // init sys\n        .Add(gamePool.CreateSystem<CreateBattleSystem>())\n\n        // add render view\n        .Add(gamePool.CreateSystem<RemoveViewSystem>())\n        .Add(gamePool.CreateSystem<AddViewSystem>())\n        .Add(gamePool.CreateSystem<UpdateViewSystem>())\n\n        // add gizmos systems\n        .Add(gamePool.CreateSystem<GizmosMoveSystem>())\n\n        // add tick logic systems.\n        //.Add(new GuardSystems(\"LogicSystems\", _pool => _pool.isTickPause)\n\n                .Add(corePool.CreateSystem<TickSystem>())\n\n                //.Add(pool.CreateSystem<InputSystem>())\n\n                // reactive\n                .Add(gamePool.CreateSystem<MoveSystem>())\n\n\n                .Add(corePool.CreateSystem<DestroySystem>())\n                .Add(gamePool.CreateSystem<DestroySystem>())\n\n        //) // add tick logic systems end.\n\n        ;\n\n\n    _systems.Initialize();\n}\n\n```\n. @sschmid i solve the ISetPool wont call in ISystems implement\n``` C#\nusing System;\nusing Entitas;\nusing TinyTeam.Debuger;\npublic class GuardSystems : Feature {\nPool _pool;\n\nreadonly Func<Pool, bool> _guardFunc;\n\npublic GuardSystems(string name, Func<Pool, bool> guardFunc,Pool pool) : base(name)\n{\n    _guardFunc = guardFunc;\n    _pool = pool;\n}\n\npublic override void Execute()\n{\n    if (!_guardFunc(_pool))\n    {\n        base.Execute();\n    }\n}\n\n}\n```\n. ok\u3002thanks for the tip!\n. by the way,i have checkout the usage of multi pools in Example demo project > https://github.com/JuDelCo/Shmup-AAA-plus\nbut if i use multisystems ,wont worked in some system.\n. solve this error in #120 \n. cant work for IComponent\n. i love the entitas project. and always support you! great work! \nby the way, i have spend my money on the Asset Store!. still alive.. 2017.2. same issue. i got this with new properties file....\n\nand i delete this line. work fine!!\n\n. how about new the properties file.. why are you need to do this ???. my solution is used one init system to setup all service.\nvoid IInitializeSystem.Initialize()\n    {\n        AccountService.Init();\n        ServerService.Init();\n        LoaderService.Init();\n        NetService.Init();\n        PlayerService.Init();\n        UIService.Init();\n        AudioService.Init();\n        MapService.Init();\n        .... and many more..\n    }\nwhen to use one service just need to Service.Get(). i thinks it's good to use react system to tell ui & view logic.\nby the way , sometimes good to use event + iListener to make it better right now. good !. i need it too.. ",
    "Smartis2812": "In my case, yes. I won't be stuck.\n. Some of my ideas:\nEntitas Insider\nEntitas Inside Lens\nEntitas InVision\nESVision\nESLens\nESDebugger\n. This is not really a issue.\nYou have to understand Unity3D first before you start handling extensions.\nUnity don't create Folders for you, just a root folder (Assets). The meta files are form Unity and not from entitas.\nDid you have the C# Version or the Unity3D C# embedded in your Libraries Folder? Often mistaken thous two.\nFor the classes and Interfaces from Entitas you have to put \"using Entitas;\" on the top of you C# Script.\nTry first some basic tutorials to understand how Unity3D works to avoid this simple questions.\nThanks\n. It's hard to write code, if you stuck in a bus. xD\nSomething like that?\n```\n    [TestClass]\n    public class Cardgame_Test\n    {\n        private Pool _pool;\n    // Systems to Test\n    private SetupGameSystem _setupGameSystem;\n\n    private HandleTurnSystem _handleTurnSystem;\n\n    [TestInitialize]\n    public void TestInitialize()\n    {\n        _pool = new Pool(ComponentIds.TotalComponents);\n        //_pool = Pools.game; // Doesn't work!\n\n        _setupGameSystem = new SetupGameSystem();\n        _handleTurnSystem = new HandleTurnSystem();\n\n        _setupGameSystem.SetPool(_pool);\n    }\n\n    [TestMethod]\n    public void Setup_Cardgame_Test()\n    {\n        _setupGameSystem.Initialize();\n\n        Assert.AreEqual(true, _pool.hasTurn);\n\n        Assert.AreEqual<UInt64>(1, _pool.turn.Turnnumber);\n    }\n}\n\n```\nThe problem would be, how to make sure the every system execute in right order. More like an integration test.\nIn my example case, a Card Game with Turns. I'll try to find a Test Driven Development approch for creating Games with Entitas.\n. Thank you!\nMy final solution for this, looks like this:\n```\n[TestClass]\npublic class Cardgame_Test\n{\n    private Pool _pool;\n    private Systems _systems;\n[TestInitialize]\npublic void TestInitialize()\n{\n    _pool = new Pool(ComponentIds.TotalComponents);\n    _systems = new Systems()\n        .Add(_pool.CreateSystem<SetupGameSystem>())\n        .Add(_pool.CreateSystem<HandleTurnSystem>());\n\n    // Execute IInitializeSystem's\n    _systems.Initialize();\n}\n\n[TestMethod]\npublic void Setup_Cardgame_Test()\n{\n    // Execute IReactiveSystem's\n    ExecuteSystems();\n\n    Assert.AreEqual(true, _pool.hasTurn);\n\n    Assert.AreEqual<UInt64>(1, _pool.turn.Turnnumber);\n}\n\nprivate void ExecuteSystems()\n{\n    _systems.Execute();\n}\n\n} \n```\nAny further problems i will look up first in your Shmup-Solution.\n. Of course, Makes sense.\nThanks!\n. ",
    "deathrat": "Entitas EyeDebug was an idea I posted in Gitter.\n. ",
    "vnedilko": "Entitas Debugger.  Also Entitas Editor will good for blueprint editor\n. ",
    "srivello": "Here are my favorites adapted from the lists above;\n-Entitas Editor Tools... including\n----- Entitas Settings\n----- Entitas Editors... including\n----- ----- Entitas Blueprint Editor\n----- ----- (other future Editors)\n----- Entitas Inspectors... including\n----- ----- Entitas Pool Inspector\n----- ----- Entitas Systems Inspector\n----- ----- Entitas Component Inspector\n----- ----- (other future Inspectors)\n. It would be helpful for the wiki to include more info on;\n- Features (vs Systems)\n. +1\n. Fantastic feedback, @mstrchrstphr. I'll wait a day in case anyone else comments here, then I'll commit code that addresses these issues and make a new 'Issue' with any remaining questions.\n. Thanks so much, @sschmid. I'll commit new code soon.\n. Here are all the areas mentioned above. I have completed fixes and committed EntitasPong/tree/0.2. and here is an update below. Thanks for all the help!\nFor Release0.2, I added \"ENTITAS_HELP_REQUEST\" in the code where I had questions. I'm not sure of the best way to share all those snippets in this post here, but all those snippets are compiled here. Note: That link is to head, not Release0.1. I don't know how to search a specific release :)\n1. Remove UnityEngine from all my Systems and Components.\n   - I created RMC.Common.UnityEngineReplacement.Vector3 and a few others. This subject is a bit of a rabbit hole :) Probably such classes already exist in the community for a larger project\n   - Exception: I do call CoroutineUtility.StartCoroutine(), which is dependent on UnityEngine, from within a few of my Systems. This is ok for now :)\n   - Status: Done\n2. Update my use of 'ensureComponents'. \n   - Removed all usages. Not needed (yet)\n   - Status: Done\n3. Address answers to my Q: \"What is the best way to address OPTIONAL components like Tick and Friction below?\" \n   - I simply added both Tick and Friction to the entity and remove the if's from the Execute()\n   - Status: Done\n4. I like my approach to System Testing. \n   - No changes needed.\n   - Status: Done\n5. \"Features vs System?\" I'll keep my code as is. I already recommended it be added to the wiki on the wiki thread. \n   - No changes needed.\n   - Status: Done\n6. Per Pausing, I see some alternatives in other projects including GuardedSystems, but I like how I handle pausing. \n   - No changes needed.\n   - Status: Done\n7. It's best practice to create your groups in Initialize() rather than SetPool() due to the way resetting pools works. \n   - I'll make that change soon.\n   - Status: Done\n8. Remove attribute in DestroyComponent.cs and confirm class gets generated without it. \n   - I confirm it does generate without it. Then I added it back because I prefer entity.WillDestroy(true).\n   - Status: Done\n. I also backported those changes to my EntitasTemplate project and then started a new 3rd project for fun :)\n. @sschmid That's great. For a more lean example for newbies, I recommend you also add this project I created if it meets your goals of that page.\nhttps://github.com/RivelloMultimediaConsulting/EntitasTemplate\n. ",
    "benoneal": "Thanks @sschmid and @Smartis2812 ; That has cleared things up. It wasn't intuitive that a script would need to already be using Entitas before it would appear in the top menu, so it appeared to not be working after it was installed. But it's sorted now. Cheers. :)\nP.S. That blueprints project looks incredibly useful, but isn't being kept up-to-date with Entitas' latest version. Are blueprints (or something functionally similar) on the Entitas roadmap? \n. ",
    "abbail": "It would be a great idea to add this to the wiki.  Although this is a basic step for veterans, many people only have exposure to adding things to unity through the asset store.\n. ",
    "Skybladev2": "Do you plan to make it available via Unity Asset Store? This will greatly reduce usage entrance barrier.\nI know such version will suffer from publishing delay, but if you give proper credits in the description, people will be encouraged to fix things for you.\n. @angelotadres Check out this game: https://twitter.com/dash_and_dot/status/765106758608191488\n. Hi folks,\nThanks for awesome extension, but I had some problems with installing it.\nCan you please add step-by-step install guide link to the main page (Readme.md)?\nAlso, there is the old screenshot showing Entitas at the top of the toolbar: https://github.com/sschmid/Entitas-CSharp/wiki/Generate-your-first-component#step-3. @IsaiahKelly  Yes. The problem was that I was afraid to press Generate button the first time until I read your tutorial.. ",
    "zehreken": "Ok, I'm here to revive the topic. I need an FSM to manage game state. Imagine an Enum {Play, Pause, End, SecondChance}. This machine controls the UI as well as the Systems of Entitas. Only the related system, let's say GameStateSystem, can change the state of the machine. And in Entitas, I don't know any way to encapsulate data. I think it is better not to do it using Entitas but I love debugging by checking the entity and its components.\nThis is the FSM:\ngraph TD;\nPlay --> Pause;\nPause --> Play;\nPause --> End;\nPlay --> SecondChance;\nSecondChance --> End;\nEnd -->Play. I liked this idea for simple components, like Name, Info or Score etc. But when I create the NameComponent like this;\npublic class NameComponent: WrapperComponent<string> { }\nit is now generated as a boolean component since the body of the class is empty. Is there another attribute to force it to be generated as a 'normal' component?. Yes, you're right I'm using the external generator. Unfortunately your answer showed me that I got bigger problems, if I auto-import inside Unity, I can generate with Unity but not with Roslyn. If I auto-import in Terminal, I can generate with Roslyn but not with Unity. :( Is that normal?. I'm using 0.35.0 by the way. Yes it is really weird.. ",
    "jwvanderbeck": "Thanks @LinusVanElswijk this is very nice!\n@sschmid In regards to your concerns, I would argue this is an example of why using var is a bad habit.  I never use it personally unless I absolutely have to.. Are you using the Rosyln generator? It was broken in there at one point, though should be fixed now if the asset store has updated.\nhttps://github.com/sschmid/Entitas-CSharp/issues/532\n. Yes.. Interestingly the exact same version of Entitas and the exact same version of Unity on my Mac does work and does have that file.  So it works on Mac, but does not work on Windows.. The really strange thing is how on my Mac it does have Assembly-CSharp.csproj and it is the exact same version of Unity! \nI changed it to my project name on my Windows machine and now I can generate successfully.  If I go to Tool->Entitas->Generate it generates with no errors.\nHowever if I go to Tools->Entititas->Preferences the click the Generate button there, I get an NRE in the console:\nNullReferenceException: Object reference not set to an instance of an object\nUnityEngine.GUILayoutUtility.BeginLayoutGroup (UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options, System.Type layoutType) (at C:/buildslave/unity/build/Runtime/IMGUI/Managed/GUILayoutUtility.cs:296)\nUnityEditor.EditorGUILayout.BeginHorizontal (UnityEngine.GUIContent content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at C:/buildslave/unity/build/Editor/Mono/EditorGUI.cs:7782)\nUnityEditor.EditorGUILayout.BeginHorizontal (UnityEngine.GUILayoutOption[] options) (at C:/buildslave/unity/build/Editor/Mono/EditorGUI.cs:7762)\nUnityEditor.EditorGUILayout.LabelField (UnityEngine.GUIContent label, UnityEngine.GUIContent label2, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at C:/buildslave/unity/build/Editor/Mono/EditorGUI.cs:6187)\nUnityEditor.EditorGUILayout.LabelField (System.String label, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options) (at C:/buildslave/unity/build/Editor/Mono/EditorGUI.cs:6143)\nEntitas.Unity.Editor.PreferencesWindow.drawException (System.Exception exception)\nEntitas.Unity.Editor.PreferencesWindow.drawPreferencesDrawers ()\nEntitas.Unity.Editor.PreferencesWindow.OnGUI ()\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:222)\nRethrow as TargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:232)\nSystem.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MethodBase.cs:115)\nUnityEditor.HostView.Invoke (System.String methodName, System.Object obj) (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:295)\nUnityEditor.HostView.Invoke (System.String methodName) (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:288)\nUnityEditor.HostView.OldOnGUI () (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:107)\nUnityEngine.Experimental.UIElements.IMGUIContainer.DoOnGUI (UnityEngine.Event evt) (at C:/buildslave/unity/build/Runtime/UIElements/Managed/IMGUIContainer.cs:179)\n. Yeah I figured out how to use it from digging through the code, but the reason I opened the issue was to address the problem of the System's page on the Wiki which does not include this system.. Changing things to use a ExecuteSystem works as expected, so it appears the issue does have to do with the funky way I am using the ReactiveSystem.\nIs there a better way to handle this? Basically I only want to react to changes in the ContainerLocationComponent, but when I react to that I am working with a different entity than the ones that have that component, so the ReactiveSystem setup ends up a bit odd.. @sschmid No, Maxim mentioned the same thing and this has/had nothing to do with it as far as I can tell.  Even after changing to use that system the problem still occurred.\nIt seems to be an issue with the filter being \"too loose\" if that makes any sense, that causes the execute to get called to quickly back to back, perhaps before one execution has even finished? I'm not sure.\nI re-factored things several times and constantly kept fixing the bug and then running right back into it and it was extremely frustrating because I had no idea what the root cause of such an error was or where to even look to try and fix it.\nRight now it is currently working so I'm afraid to touch it at all, but not understanding what the error is or why it was being caused bothers me. . You know you can submit multiple versions right?\nWe're currently using 2017.3 beta and almost always stay on the latest beta unless I run into show stopping issues.. Having to hand edit the entitas.proprties file is really not fun.  Why can't this be in the GUI preferences?\nI'm still trying to get this hooked up and I think I've messed up something, as I am getting a ton of errors when I run entitas.exe doctor\njwvan@gamebox MINGW64 /d/Unity Projects/SETI\n$ CodeGenerator/entitas.exe doctor\nUnused key: Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold\nUnused key: Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPat                                                                              h\nUnused key: Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\nUnused key: Entitas.CodeGeneration.Plugins.Assemblies\nAvailable: Entitas.CodeGeneration.Plugins.ComponentDataProvider\nAvailable: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\nOne or more errors occurred.\nThis is what my properties file looks like:\n```\nEntitas.CodeGeneration.CodeGenerator.SearchPaths = Assets/Plugins/Entitas, \\\n                                                   Assets/Plugins/Entitas/Editor, \\\n                                                   D:\\Program Files\\Unity 2017.3.0b3\\Editor\\Data\\Managed, \\\n                                                   D:\\Program Files\\Unity 2017.3.0b3\\Editor\\Data\\Mono\\lib\\mono\\unity, \\\n                                                   D:\\Program Files\\Unity 2017.3.0b3\\Editor\\Data\\UnityExtensions\\Unity\\GUISystem, \\\n                                                   CodeGenerator/Plugins/Roslyn\nEntitas.CodeGeneration.CodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                                               Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                                               Entitas.CodeGeneration.Roslyn\nEntitas.CodeGeneration.CodeGenerator.DataProviders = Entitas.CodeGeneration.Roslyn.ComponentDataProvider, \\\n                                                     Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                                                     Entitas.CodeGeneration.Roslyn.EntityIndexDataProvider\nEntitas.CodeGeneration.CodeGenerator.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                                                      Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                                                      Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nEntitas.CodeGeneration.CodeGenerator.PostProcessors = Entitas.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input, \\\n                                          Econ\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nEntitas.CodeGeneration.Plugins.TargetDirectory = Assets/Source/SETI/Entitas\nEntitas.CodeGeneration.Plugins.ProjectPath = SETI.csproj\n```. > similar issue here. Also a bit disappointed on having to struggle through issues after buying it.\nThese issues should only be with the new generator which is to be fair considered beta.  If you use the old generator (IE don't apply the changes here) then it should just work out of the box.. Still tracking this down, but while digging through the code for AssemblyResolver I noticed the path handling is rather messy.  I would highly suggest making more use of System.IO.Path as it would better handle paths cross platform.  \nJust a suggestion.. I'm pretty sure this isn't an issue with the searchPaths, which was my first guess.  I can see assemblies it is trying to load in the paths, and if I intentionally mess up the path then I get different errors.. I'd suggest Plugins/ rather than Libraries/ for the Entitas default path for a couple reasons:\n1) It is more common among other assets to use Plugins/\n2) My understanding is that Unity treats the Plugins folder in a special way which is beneficial to these types of assets (though since Entitas is pre-compiled that might not apply here)\n. Running Generate from inside of Unity freezes the Editor.. > Yup, currently the are some Microsoft.[...] dll warnings. Let's see what I can do about them. Lazy answer:\nIf the doctor says it's all good, just don't mind them ;)\nWait are you saying those are just warnings? My CLI is treating them like errors, not warnings and it still wont' generate even if I ignore them.\n\na _MACOSX folder which is definitely not the content of the zip! How does Windows add imaginary files to the zip? \n\nIt didn't.  Those folders are all over your mac just hidden by default.  It stores file metadata.\n\nAtm Roslyn is opt-in because you cannot simply run it within Unity for technical reasons like it requiring .NET 4.6.1.\n\nSpecifically 4.6.1? So using the new 4.6 support in Unity isn't good enough?\n\nPersonally, I recommend trying to use the CLI for a while, because I'm convinced you gonna love for its speed and improved productivity.\n\nHere are my reasons for not liking this workflow.  First of all, you are speaking from the perspective of someone who normally uses a Mac, where shell usage is quite common.  It is not on Windows.  In fact it is quite painful on Windows unless you install third party utilities.  Secondly, it disrupts a standard two-application workflow.  If you are developing for Unity you will for sure be switching between Unity and an IDE.  Now with two applications you can quickly alt-tab/cmd-tab between them.  Introducing the CLI though adds a third application.  Now I have to sometimes switch from IDE to Terminal, sometimes from IDE to Unity.  That starts the Alt-Tab dance where you end up tabbing to the wrong thing often.  You have to know what I'm talking about :)\nI'm not saying it is the end of the world, it is just annoying.  I was hoping this new generator would just work like it did before, with the exception that it would still work after refactors.  This is definitely a whole new experience and a whole new workflow.  I'm sure once we get used to it it won't be an issue, but it definitely isn't as smooth a workflow as Entitas was originally.. Here is a full -v output if its helpful\njwvan@gamebox MINGW64 /d/Unity Projects/SETI\n$ CodeGenerator/entitas.exe dry -v\nAppDomain load: Entitas.CodeGeneration.Plugins\n  - Loading: Entitas.CodeGeneration.Plugins\n    - Resolved: Assets/Plugins/Entitas/Editor\\Entitas.CodeGeneration.Plugins.dll\nAppDomain load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  - Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    - Resolved: Assets/Plugins/Entitas/Editor\\Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nAppDomain load: Entitas.CodeGeneration.Roslyn\n  - Loading: Entitas.CodeGeneration.Roslyn\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\Entitas.CodeGeneration.Roslyn.dll\n[Dry Run] Creating model: Context (4%)\n[Dry Run] Creating model: Component (Roslyn) (9%)\nOpening SETI.csproj\n  - Loading: Microsoft.CodeAnalysis.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n  - Loading: Microsoft.CodeAnalysis.CSharp.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n  - Loading: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n  - Loading: System.Composition.TypedParts, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Composition.TypedParts.dll\n  - Loading: System.Composition.Hosting, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Composition.Hosting.dll\n  - Loading: System.Composition.Runtime, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Composition.Runtime.dll\n  - Loading: System.Composition.AttributedModel, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Composition.AttributedModel.dll\n  - Loading: System.Collections.Immutable, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Collections.Immutable.dll\n  - Loading: Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\Microsoft.Build.dll\n  - Loading: Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\Microsoft.Build.Tasks.Core.dll\n  - Loading: Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\Microsoft.Build.Framework.dll\n  - Loading: System.IO.FileSystem, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.IO.FileSystem.dll\n  - Loading: System.IO.FileSystem.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.IO.FileSystem.Primitives.dll\n  - Loading: Microsoft.Build, Version=14.1.0.0, Culture=neutral\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\Microsoft.Build.dll\n  - Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.resources.dll\n  - Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.resources.dll\n  - Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.resources.dll\n  - Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.resources.dll\n  - Loading: Microsoft.Build.Tasks.Core.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n  - Loading: Microsoft.Build.Tasks.Core.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n  - Loading: Microsoft.Build.Tasks.Core.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n  - Loading: Microsoft.Build.Tasks.Core.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n  - Loading: System.Reflection.Metadata, Version=1.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Reflection.Metadata.dll\n  - Loading: System.IO.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.IO.FileSystem.dll\n  - Loading: System.IO.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.IO.FileSystem.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: System.IO.MemoryMappedFiles, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Could not resolve: System.IO.MemoryMappedFiles.dll\n  - Loading: Microsoft.CodeAnalysis.Workspaces.Desktop.resources, Version=2.0.0.0, Culture=en-US, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n  - Loading: Microsoft.CodeAnalysis.Workspaces.Desktop.resources, Version=2.0.0.0, Culture=en-US, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n  - Loading: Microsoft.CodeAnalysis.Workspaces.Desktop.resources, Version=2.0.0.0, Culture=en, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n  - Loading: Microsoft.CodeAnalysis.Workspaces.Desktop.resources, Version=2.0.0.0, Culture=en, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\nOpened SETI\nParsing SETI\n  - Loading: System.Security.Cryptography.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Security.Cryptography.Primitives.dll\n  - Loading: System.Security.Cryptography.Algorithms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    - Resolved: CodeGenerator\\Plugins\\Roslyn\\System.Security.Cryptography.Algorithms.dll\n  - Loading: Microsoft.CodeAnalysis.resources, Version=2.0.0.0, Culture=en-US, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n  - Loading: Microsoft.CodeAnalysis.resources, Version=2.0.0.0, Culture=en-US, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n  - Loading: Microsoft.CodeAnalysis.resources, Version=2.0.0.0, Culture=en, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\n  - Loading: Microsoft.CodeAnalysis.resources, Version=2.0.0.0, Culture=en, PublicKeyToken=31bf3856ad364e35\n    - Could not resolve: Microsoft.CodeAnalysis.resources.dll\nSystem.AggregateException: One or more errors occurred. ---> System.Threading.Tasks.TaskCanceledException: A task was canceled.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\n   at Entitas.CodeGeneration.Roslyn.ProjectParser.parseProject(Project project)\n   at Entitas.CodeGeneration.Roslyn.ProjectParser.GetTypes()\n   at Entitas.CodeGeneration.Roslyn.ComponentDataProvider.GetData()\n   at Entitas.CodeGeneration.CodeGenerator.CodeGenerator.generate(String messagePrefix, ICodeGeneratorDataProvider[] dataProviders, ICodeGenerator[] codeGenerators, ICodeGenFilePostProcessor[] postProcessors)\n   at Entitas.CodeGeneration.CodeGenerator.CodeGenerator.DryRun()\n   at Entitas.CodeGeneration.CodeGenerator.CLI.DryRun.Run(String[] args)\n   at Entitas.CodeGeneration.CodeGenerator.CLI.MainClass.Main(String[] args)\n---> (Inner Exception #0) System.Threading.Tasks.TaskCanceledException: A task was canceled.<---\n. After hunting down some really obscure paths and adding them to the searchPaths I have srunk my list of missing DLLS way down but it still errors out.  Also I'm not sure why I have to add all these really obscure paths to find the assemblies when on one else has :(\nBut I added:\nD:\\Program Files\\Unity 2017.3.0b3\\Editor\\Data\\MonoBleedingEdge\\lib\\mono\\unityaot\\Facades, C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\de\nAnd now my error list looks like:\njwvan@gamebox MINGW64 /d/Unity Projects/SETI\n$ CodeGenerator/entitas.exe dry\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\nOne or more errors occurred.\n. Not sure if this is the same issue or not, but after fighting to even get Jenny to see my csproj, I finally did, only to be presented with the following:\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.VisualDebugging.Unity.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.CodeGeneration.Attributes.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: UnityEngine.CoreModule.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\nx Could not resolve: Entitas.dll\n\nCould not load file or assembly 'Entitas, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.. I've seen this before as well and I don't see how you can call it a Unity bug if it is directing us to Entitas specific stuff.\nI also agree the code looks clean but doesn't change the fact that I've seen it once or twice!\n. > run jenny auto-import and confirm everything with y\nPS D:\\Unity Projects\\seti\\Assets\\Entitas> .\\CodeGenerator\\Jenny.exe auto-import\nThe given key was not present in the dictionary.\nEDIT: Ok got that fixed by running jenny fix first, so maybe that should just always be run first? Also this process is super confusing in the way it asks you to confirm lots of things that you really have no context or understanding of.  I mean I'm basically just spamming \"y\" because I have no idea what it is talking about.\nAfter all that I got the server running, and try to generate from inside Unity.  It says it connects to the server and generates, but in the powershell window I see:\nCould not find file 'D:\\Unity Projects\\seti\\Assets\\Entitas\\Assembly-CSharp.csproj'.\nWhy is it looking there for my project and how do I edit that? It is set properly in the Unity Entitas Preferences window.\n~EDIT 2: Despite that error it seems to be generating new code.~\nNo it isn't.. The path it looks for the csproj in appears to be unaffected by the path in the properties file, and instead influenced by the pwd when you run jenny.exe.  However, if I switch to the directory where the .csproj is located and then run jenny from there, it gets all messed up and suddenly tries to find the csproj in the root of the drive!\nPS D:\\Unity Projects\\seti> .\\Assets\\Entitas\\CodeGenerator\\Jenny.exe server\nServer is listening on port 3333...\ngen\nCould not find file 'D:\\Assembly-CSharp.csproj'\nEDIT: I had missed the step about where to place the contents of the CodeGenerator.zip, so I fixed that but that made no change to my issue.  I've also tried it both using the included .bat file and running the server manually.\n```\nPS D:\\Unity Projects\\seti> .\\Jenny-Server\nD:\\Unity Projects\\seti>pushd D:\\Unity Projects\\seti\\\nD:\\Unity Projects\\seti>CodeGenerator\\Jenny.exe server\nServer is listening on port 3333...\ngen\nCould not find file 'D:\\Assembly-CSharp.csproj'.\n``\n. I thought despite the error it was still working but after adding some new components, I can see that it isn't.. What I found is that for a brand new project, with a fresh Entitas install the setup is a lot simpler.jenny auto-import` and spam Y.  Then edit the properties file to point to the correct path where you want generated to be, and in my case I also set Ignore Namespaces to true (which I thought used to be the default?).  Done.\nThat can be improved by removing the need to spam Y to stuff you don't understand anyway.\nWhere the real nightmare comes in though is migrating an existing project and I think that is where most of us had the issues, and jenny just makes a real mess of things when you already have an existing properties file.. What you have described is twice the number of steps each iteration and 33% more \"applications\" open, or arguably 50% more if you consider having to first run Terminal or Powershell/cmd.  Each time you want to work.  As opposed to running Unity, and letting Unity open your IDE at the first edit.\nAlso, the setup process which I thought had gotten better really hasn't.  I just thought it had but then I found out that it wasn't actually working, so now I've spent the last day trying desperately to even get the external generator to work, as opposed to again the one in Unity that literally just works out of the box.\nI bought the asset store version specifically for this better generator and it has given me nothing but trouble to the point where I would be better off with the free version, which isn't great for the long term health of Entitas. . See that's what Entitas should be doing!. I don't see it EVERY generation, but I am seeing it more than just the once.  Not sure if there is a pattern, but let me see if I can find one.. Yeah I abhor the use of var when at all possible and much prefer explicit types, so I am ok with the implicit conversion which simplifies the overall API.\nCertainly good to have the option for those who want it and I loved using it in the old generator :). Any idea when this update will hit the Asset Store or is there some other way to obtain the fix?. I just ran into this as well and the cause was indeed trying to decorate a component with a context that hadn't yet been created.  If it were not for this issue though I wouldn't have realized that was what I had done (It was a typo).  Anyway to make the error more helpful?. Even though it was working fine before this, I ran jenny fix and it.. was acted rather weird as it seemed to add a bunch of keys and them proceed to claim they were unused and offer to remove them.\nPS D:\\Unity Projects\\seti> .\\CodeGenerator\\Jenny.exe fix\n??  Will add missing key: 'CodeGenerator.SearchPaths' (press any key)\nAdded: CodeGenerator.SearchPaths\n??  Will add missing key: 'CodeGenerator.Plugins' (press any key)\nAdded: CodeGenerator.Plugins\n??  Will add missing key: 'CodeGenerator.PreProcessors' (press any key)\nAdded: CodeGenerator.PreProcessors\n??  Will add missing key: 'CodeGenerator.DataProviders' (press any key)\nAdded: CodeGenerator.DataProviders\n??  Will add missing key: 'CodeGenerator.CodeGenerators' (press any key)\nAdded: CodeGenerator.CodeGenerators\n??  Will add missing key: 'CodeGenerator.PostProcessors' (press any key)\nAdded: CodeGenerator.PostProcessors\n??  Will add missing key: 'CodeGenerator.Server.Port' (press any key)\nAdded: CodeGenerator.Server.Port\n??  Will add missing key: 'CodeGenerator.Client.Host' (press any key)\nAdded: CodeGenerator.Client.Host\n??  Will add missing key: 'CodeGenerator.CLI.Ignore.UnusedKeys' (press any key)\nAdded: CodeGenerator.CLI.Ignore.UnusedKeys\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.SearchPaths' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.SearchPaths\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.Plugins' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.Plugins\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.DataProviders' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.DataProviders\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.CodeGenerators' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.CodeGenerators\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.PostProcessors' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.PostProcessors\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\n?  Remove unused key: 'Entitas.CodeGeneration.Plugins.Assemblies' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.Plugins.Assemblies\n?  Remove unused key: 'Entitas.CodeGeneration.Plugins.Contexts' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.Plugins.Contexts\n?  Remove unused key: 'Entitas.CodeGeneration.Plugins.IgnoreNamespaces' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.Plugins.IgnoreNamespaces\n?  Remove unused key: 'Entitas.CodeGeneration.Plugins.TargetDirectory' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.Plugins.TargetDirectory\n?  Remove unused key: 'Entitas.CodeGeneration.Plugins.ProjectPath' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.Plugins.ProjectPath\n?  Remove unused key: 'Entitas.CodeGeneration.CodeGenerator.CLI.Ignore.UnusedKeys' ? (y / n / (i)gnore)\nRemoved: Entitas.CodeGeneration.CodeGenerator.CLI.Ignore.UnusedKeys\nPS D:\\Unity Projects\\seti>\nThen I ran jenny gen again and I get no errors, but it also doesn't actually generate anything.  The generated code doesn't change.\nPS D:\\Unity Projects\\seti> .\\CodeGenerator\\Jenny.exe gen\nPS D:\\Unity Projects\\seti>. I suspect that jenny fix actually broke my properties file.  I'm going to try deleting it and starting from scratch (not fun) but for posterity this is what it current looks like:\n```\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nCodeGenerator.SearchPaths = CodeGenerator/Plugins, \\\n                            Assets\\Entitas\\Editor, \\\n                            CodeGenerator\\Plugins\\Entitas, \\\n                            CodeGenerator\\Plugins\\Entitas.Roslyn, \\\n                            CodeGenerator\\Plugins\\Jenny\nCodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                        Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                        DesperateDevs.CodeGeneration.Plugins, \\\n                        Entitas.Roslyn.CodeGeneration.Plugins, \\\n                        DesperateDevs.CodeGeneration.Unity.Plugins\nCodeGenerator.PreProcessors = DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nCodeGenerator.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nCodeGenerator.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nCodeGenerator.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nCodeGenerator.Server.Port = 3333\nCodeGenerator.Client.Host = localhost\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Assembly-CSharp.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Source/Entitas\nCodeGenerator.CLI.Ignore.UnusedKeys = Preferences.Entitas, \\\n                                      Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold, \\\n                                      Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath, \\\n                                      Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\n```\n. Ok fixed the issue.\nTurns out my NAS sync setup had erroneously copied over an old preferences file, but the thing is that file had a completely different name from the default so I am unsure why Jenny decided to start using it instead of the default one all of a sudden?  When I deleted that errant file things started working again.  The sync runs nightly which is why it was working yesterday.\nI'm confused why Jenny started using this other file though without being told to do so.  Does it just use the first .properties file that it finds rather than by filename?. ",
    "LastGhost": "Is there any example code?I hope to see it to understanding.\n. ",
    "dkozlovtsev": "Can we please have separate Add, Update, Replace in reactive systems. As far as i can tell Entity class already supports this, but the info is lost when Pool calls UpdateEntity in Group class. \nMy use case:\nI have a Target component:\npublic class Target : IComponent\n{\n    public Vector3 coords;\n    public Vector3 rotation;\n}\nIt is  attached to units, and provides the target for it to move to.\nFor debug purposes i want to draw small sphere on target location, right now it is next to impossible without changing component structure, because on every Replace both Removed and Added callbacks are triggered, and i have no way of knowing whether it was Removed to be Added again(so i need only to update transform of the view) or it was Removed for good and i need to destroy the view.\n. @JuDelCo  i have the structure very similar to Shmup( not a big surprise considering i was refering to it while developing mine =) ), but i'm not talking about showing unit, the one thing that helps the case of showing unit (and destorying it) is that it uses separate components to indicate that Entity needs to shown( Resource in Shmup) and other component to store View, and notify it about position changes(View component in Shmup). Again, i use the same approach and it makes sense for unit.\nFurther in the development i've added TargetComponent, which is used by MoveSystem to move Unit. If i am to use the same approach to show Target as to showing Units, i need to create additional components(TargetResourceComponent and TargetView), i need to change how target is added(as it needs to also add TargetResourceComponent), how it is deleted(To delete TargetResourceComponent) and have a set of systems that adds, removes, and updates TargetView based on what happens to TargetResource and Target components. That is a lot of changes to add for a simple debug drawing.\n. > Why you can't reuse the same Resource and View components (and systems) for the target ?\nBecause Target is on the same entity as original Resource and View components\n. As a workaround it works, aside from look-up for every position change even for the non-debug view. But it is a workaround. I still support adding separate OnAdd, OnUpdate, OnRemove so that it would be possible to do things in a more straightforward way\n. Encountered the same problem trying to generalize few of my systems.\nAs to implementation you can require(maybe optional requirement) to make IComponent implementation partial and add GetComponentId to it during code generation(along with adding additional interaface in order to make new components compilable in the first place).\n. In Unity Awake/Start separation is needed to compensate for lack of the constuctor. In Entitas your systems have a constuctor(hence the Awake phase) and Initialize function(Start method).\nI personally think that even IInitialiseSystem is not needed and exists only to support ISetPool, which exists only to avoid passing pool in the constuctor, to support Pool.AddSystem<TSystem>syntax\njust my 2 cents\n. Hi,\nMy issue is not with config differences between machines, but with code generated being different on different machines.. The only difference in config is DesperateDevs.CodeGeneration.Plugins.ProjectPath = line that targets different csproj files depending on whether VS or Rider is used.\nThe project layout is the same for both machines. . I can only quote the description from original message in the issue\nFor some reason generated code on machines is different\nfor example for component\npublic class Health : IComponent\n    {\n        public float value;\n    }\nVSTU machine generates\npublic sealed class HealthComponent : Entitas.IComponent {\n    public ECSGameplay.Health value;\n}\nand Rider machine doesn't.\nI can also provide verbose logs for generation on different machines. For a lot of components it is, can't confirm that it is true for all of them as there are a lot of components in the project\nother examples \n[Game]\n    public class AuthEventComponent : IComponent\n    {\n        public AuthEvent evt;\n    }\n[Entitas.CodeGeneration.Attributes.DontGenerate(false)]\npublic sealed class AuthEventComponent : Entitas.IComponent {\n    public ECSGameplay.AuthEventComponent value;\n}\nworth noting that all components are in a namespace. VSMachineLog.txt\nRiderMachineLog.txt\nVerbose logs for code generation on different machines, i will try resetting preferences, but I have to stress that configs are identical with exception of project file path line\nAlso i believe that those components should not be generated, so i perceive VSTU machine as generating wrong code ,not the Rider machine. I've double checked it, all the components do implement Entitas.IComponent interface\nCan it be that something prevents generator from recognizing it?\nI agree that Components\\*Component.cs files should not exist\n. I'm not comfortable exposing project files to the public, can I send them over to the email or something like that?. Yes, I'm having exactly the same problem. One thing though I do have FixTargetFrameworkProfile preprocessor enabled, for some reason it doesn't work, can it be because for me it adds <TargetFrameworkProfile>Unity Full v3.5</TargetFrameworkProfile> profile and not the one with Subset in it?\nWhen i delete the profile before generation it generates just fine, so at least i have a way of generating correct code on my machine. am I correct to assume that this dll replaces the one located in Jenny\\Plugins\\DesperateDevs  ? If so - it didn't work.. I've replaced both %)\nDoesn't work. I'm using Jenny gen -a for my test, i assume it doesn't require any additional actions to reload config when used that way. Hmm got this key from older discussion and/or documentation, removing it changes nothing though\n. New error\nCould not load file or assembly 'file:///C:\\UnityProjects\\prototypeBolt2\\Jenny\\Plugins\\Entitas.Roslyn\\DesperateDevs.CodeGeneration.Plugins.dll' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515). nvm windows was blocking code from unknown source\nNow the issue is solved. > Are you using .Net 4.x?\nThe instruments screenshot is made with project build with 2018.1.9 with .net 4.x backend. This is one is made with 2018.3.4 with .net 4.x scripting backend\n\n. @jannysice It looks like you're correct - the implementation I have available to me right now seems to not generate any garbage, but in my profiling I did see allocations that couldn't have been attributed to list resize. I'll try to reproduce it and If I fail I'll close the issue. Thanks for taking the time to dig into this.. ",
    "Deepscorn": "\nHow about storing a dictionary of resources in ResourceComponent and a dictionary of Views on ViewComponent ?\ncsharp\n// In ResourceComponent\nDictionary<IComponent, string>  //  string == resource name\n\nWhat will be with game saving then? Looks like that will ruin \"entities is game state\" statement.\n@JamesMcMahon, \n\nthere is no good way to hook into when a component is added for the first time or removed altogether. This is because the OnEntityAdded and OnEntityRemoved are also called whenever a component is updated\n\nDon't think it will help in you example usage, but just FYI. You can easily hook to entity remove. See https://github.com/mikecann/Entitasteroids/blob/master/Assets/Entitasteroids/Scripts/Sources/Features/Level/LevelEndingSystem.cs:\ncsharp\n_pool.CreateEntity()\n                .AddAge(0)\n                .AddMaxAge(2)\n                .OnEntityReleased += OnLevelEndTimerReleased;\nIt is to wait 2 seconds before going to next level so user can understand what's going on. As you see, usage of such a thing is very limited because it is not persistent between save-load. Things change if you add an id to such entity and perform a look up instead of creating new entity\n. Checked again, ComponentIndicesGenerator.cs is present in zip. Seems like some external app removed it. Sorry, closing issue\n. @BenjaBobs, @sschmid I checked @yosadchyi's results and implemented my own.\nThe reason is I wanted pooling and don't like writing \"new\" each time.\ncsharp\nentity.Replace(new Position(position.Location + velocity.Linear * dt,\n                    position.Rotation + velocity.Angular * dt));\nI implemented through generics + lookup table here https://github.com/Deepscorn/EntitasWithoutCodeGeneration Looks nice to me. What do you think?. ",
    "Fijit": "I also prefer Pool for pretty much the same reasons @JamesMcMahon has already stated. I've used it for years and know what it means as I glance over code.\nIt also doesn't compete for auto-completion space unlike Context (ContextMenu in UnityEngine for example) - A feeble argument but I needed to add something unique to the poll  ;-)\n. ",
    "carlos-avila": "What about \"Group\"? \ud83d\ude09 \n. Added a new section for Attributes.\n. Updated Attributes to reflect the latest release.\n. No problem, I think it would be nice if the project had some solid docs. Would you like to use something like ReadTheDocs? I could start working on that.\n. Here's a mockup of what I have in mind. It would also share the same files with the wiki, that way both the wiki and the site get updated at the same time. Let me know if you like the idea.\n. I'm not sure if you are aware of this yet, but all of the uFrame ECS system was open sourced recently: link. uFrame was also using a code generator that did not rely on reflection. Maybe something can be lifted from there?\n. Nice, I wish I could give you any pointers but I never had time to dive into that part of uFrame.. \n. ",
    "Noshire": "@grygus thanks for the input! I'd agree for production code (though even then - especially when it comes to e.g. user-contributed content you can't really generate enumerations or other hard-typed structures of your file system at compile-time), but for development and rapid iterations it's beneficial to keep that flexibility.\n@sschmid Yes, that's the context I was referring to. You're right of course. Might just be the clean code voice in me - I'm used to working in an event-driven environment, where everything only gets updated once it really needs to and makes sense, and this close-to-polling-based behaviour kind of bugs me. But you're right of course, I guess it's fine since it doesn't concern production :)\n. Despite this being closed, I think it's definitely worth some further investigation.\nI'm by no means experienced with how delegates and lambdas work under the hood exactly, but I found a few threads about caching lambda expressions, for example:\nCreating, combining and caching lambda expressions\nOptimally we'd have the best of both worlds - auto-generated matchers to check for the existence for each component, as well as the ability to use lambdas (which may or may not get cached) to do finer checks.\nIn the end, though, don't sweat it - it's perfectly fine to retrieve components and filter them in a second pass manually.\n. ",
    "vladpazych": "\nWhen creating new blueprint and typing it's name right away, after \"Enter\" name becomes \"New Blueprint\" again.\nWhen renaming blueprint in it's field - it looks like it saves assets after each letter typed - IMO better to save it manually with \"cmd + s\". \nSometimes (I have not figured out when exactly) VisualDebugger Pools appears in Edit Mode.\n\nIt's all bugs I found at the moment. \nBlueprints are very cool :)\n. Found another little bug.\nWhen BinaryBlueprint selected in Project tab, right after compilation:\nNullReferenceException: Object reference not set to an instance of an object\nEntitas.Unity.VisualDebugging.EntityDrawer.DrawComponents (Entitas.Pool pool, Entitas.Entity entity) (at Assets/Libraries/Entitas/Unity/VisualDebugging/Entity/Editor/EntityDrawer.cs:91)\nEntitas.Unity.Serialization.Blueprints.BinaryBlueprintInspector.OnInspectorGUI () (at Assets/Libraries/Entitas/Unity/Serialization/Blueprints/Editor/BinaryBlueprintInspector.cs:145)\nAnd from my previous post - bug 3 was my bug. Looks like you fixed it in 30.2, and I did not get fix because I create pools manually, without generator.\n. For temporary fix you can open EntityInspector.cs and add:\npublic override bool RequiresConstantRepaint () {\n    return true;\n}\n. Or you can do this:\n``` csharp\nstatic Pool _pool;\nstatic GameObject _poolObserverContainer = null;\npublic static Pool pool {\n    get {\n        if (_pool == null) {\n            _pool = new Pool (ComponentIds.TotalComponents, 0, new PoolMetaData (\"Pool\", ComponentIds.componentNames, ComponentIds.componentTypes));\n        }\n    #if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n    if (_poolObserverContainer == null && UnityEditor.EditorApplication.isPlaying) {\n        var poolObserver = new Entitas.Unity.VisualDebugging.PoolObserver (_pool);\n        _poolObserverContainer = poolObserver.entitiesContainer;\n        UnityEngine.Object.DontDestroyOnLoad (_poolObserverContainer);\n    }\n    #endif\n\n    return _pool;\n}\n\n}\n``\n. You can create your system as usual, to react onColorComponentadded, but inExecute` method add something like that:\nif (e.color.value != Color.Some) return;\nI didn't find perfect solution, so I do this all the time :)\n. You can check if (entity.isPlayer) inside of Execute method.. Pool was renamed to Context since 0.36.0.\nAll changes listed in release page: https://github.com/sschmid/Entitas-CSharp/releases. I can confirm the issue. \nIf entity already has a NameComponent, replacing it with the new value will trigger change, but it certainly should not (because entity is already in the group because of PositionComponent).\nAnd if you remove NameComponent before adding it again - it will not trigger change, as expected.. ",
    "Kabie": "It seems that it only generates one blueprints class. I was hoping it would generate one blueprints class for each blueprints.asset file.\n. ",
    "dimixar": "So I tried something like that in a component for blueprints.\n```\nusing Entitas;\nusing System;\n[Meta]\npublic class CharactersComponent : IComponent\n{\n    public Character[] chars;\n}\n[Serializable]\npublic class Phrases\n{\n    public string greetings;\n    public string grief;\n    public string happy;\n}\n[Serializable]\npublic class Character\n{\n    public string name;\n    public int age;\n    public Phrases phrases;\n}\n```\nAnd thought of using it as a some kind of scriptableObject alternative, but I guess this functionality is not there yet. :)\nhttp://goo.gl/QKLZGl\nAnd after Add element. BOOM!\nhttp://goo.gl/Jkk4X9\n. ",
    "alandyshev": "Overall Blueprints are great! It's a very nice idea and it fits very well into Entitas.\nHowever here are some features that would make them even better.\n- In Unity you can work with prefabs same as with instances: you can access any values from them. I'd like Blueprints to have the same interface as Entities.\nHere's a bit of my code with blueprints at the moment:\n```\nvar tubeSegmentBlueprints = _pools.pool.blueprints.instance.blueprints\n    .Select(b => b.Deserialize())\n    .Where(b => b.components.Any(c => c.index == ComponentIds.TubeSegment))\n    .ToArray();\nvar currentEnvironmentTubeSegmentBlueprints = tubeSegmentBlueprints\n    .Where(b => (EnvironmentType)b.components.First(c => c.index == ComponentIds.StartEnvironment).members.First().value == startEnvironment \n    && (EnvironmentType)b.components.First(c => c.index == ComponentIds.EndEnvironment).members.First().value == endEnvironment)\n    .ToArray();\nvar tubeSegmentBlueprint = currentEnvironmentTubeSegmentBlueprints[Random.Range(0, currentEnvironmentTubeSegmentBlueprints.Length)];\n_pools.pool.CreateEntity()\n    .ApplyBlueprint(tubeSegmentBlueprint)\n    .AddId(newTubeSegmentId)\n    .AddPosition(position)\n    .AddRotation(rotation);\n```\nThis code filters the blueprints that match criteria, then selects a random blueprint from selected ones and creates an entity from that blueprint.\nThis code could be much more simple and neat if I could access blueprint components and their values same as entity components: blueprint.startEnvironment.type, and check if blueprint has a component like this: blueprint.hasTubeSegment.\n- When I create new blueprint it's created in the root folder, not in the folder where I create it. And the name I give to it when creating is not saved. I need to rename it then.\n- When I save Unity scene by pressing Ctrl + S blueprints are saved as well. Then when I commit code to git it commits all blueprints since they've changed.\n. PrimaryEntityIndex throws exception due to this bug:\nEntityIndexException: Entity for key '0' already exists!\nOnly one entity for a primary key is allowed.\nEntitas.PrimaryEntityIndex`1[System.Int32].addEntity (Entitas.Entity entity, IComponent component) (at Assets/Entitas/EntityIndex.cs:108)\nEntitas.AbstractEntityIndex`1[System.Int32].onEntityAdded (Entitas.Group group, Entitas.Entity entity, Int32 index, IComponent component) (at Assets/Entitas/EntityIndex.cs:40)\nEntitas.Pool.updateGroupsComponentAddedOrRemoved (Entitas.Entity entity, Int32 index, IComponent component) (at Assets/Entitas/Pool.cs:319)\nEntitas.Entity.replaceComponent (Int32 index, IComponent replacement) (at Assets/Entitas/Entity.cs:155)\nEntitas.Entity.RemoveAllComponents () (at Assets/Entitas/Entity.cs:253)\nEntitas.Entity.destroy () (at Assets/Entitas/Entity.cs:353)\nEntitas.Pool.DestroyEntity (Entitas.Entity entity) (at Assets/Entitas/Pool.cs:146)\nDestroyEntitySystem.Execute (System.Collections.Generic.List`1 entities) (at Assets/Sources/Common/Core/Systems/DestroyEntitySystem.cs:21)\nEntitas.ReactiveSystem.Execute () (at Assets/Entitas/ReactiveSystem.cs:118)\nHere's my code for EntityIndex:\n```\n    // Tube Segment\n    public const string TubeSegmentWithIdKey = \"TubeSegmentWithId\";\n    private static void AddTubeSegmentWithIdEntityIndex(Pools pools)\n    {\n        var index = new PrimaryEntityIndex(\n            pools.pool.GetGroup(Matcher.AllOf(Matcher.TubeSegment, Matcher.Id).NoneOf(Matcher.Destroy)),\n            (entity, component) =>\n            {\n                var idComponent = component as IdComponent;\n                return idComponent != null\n                    ? idComponent.value\n                    : entity.id.value;\n            });\n        pools.pool.AddEntityIndex(TubeSegmentWithIdKey, index);\n    }\npublic static Entity GetTubeSegmentWithId(this Pool pool, int id) {\n    var index = (PrimaryEntityIndex<int>)pool.GetEntityIndex(TubeSegmentWithIdKey);\n    return index.HasEntity(id) ? index.GetEntity(id) : null;\n}\n\n```\nHere's my flow:\n- At the start of the game TubeSegment entities are created with int indices starting with 0 and incrementing by 1. TubeSegment entities are what game level consists of.\n- When player looses the game or restarts the game all TubeSegment entities are flagged for destroy:\n```\npublic class DestroyAllTubeSegmentsSystem : ISetPools, IMultiReactiveSystem\n{\n public TriggerOnEvent[] triggers\n {\n     get\n     {\n         return new[] { Matcher.LivesDecreasedEvent.OnEntityAdded(), Matcher.ResetInput.OnEntityAdded() };\n     }\n }\nprivate Pools _pools;\npublic void SetPools(Pools pools)\n {\n     _pools = pools;\n }\npublic void Execute(List entities)\n {\n     foreach (var tubeSegmentEntity in _pools.pool.GetEntities(Matcher.TubeSegment))\n     {\n         tubeSegmentEntity.flagDestroy = true;\n     }\n }\n}\n```\n- After that new TubeSegment entities are created, with indices again starting with 0 and incrementing by 1. Now I can have 2 TubeSegment entities with same index, but one of them has Destroy component, so it doesn't belong to group: Matcher.AllOf(Matcher.TubeSegment, Matcher.Id).NoneOf(Matcher.Destroy). So it should work.\n- DestroyEntitySystem destroys TubeSegment entities flagged with Destroy component. When entity is being destroyed its components are destroyed first. Destroy component is destroyed first of all components, and TubeSegment entities flagged for destroy now belong to the group PrimaryEntityIndex was created for.\n- Entitas tries to add this TubeSegment entity to PrimaryEntityIndex, but there's already a newly created TubeSegment entity with same index. The exception is thrown.\n. It's working now. Exception is not thrown. Thanks.\n. ",
    "ophilbinbriscoe": "Will these changes make it possible to have Blueprint component fields save references to UnityEngine.Object types such as assets and ScriptableObjects? That'd be a big win!. I'm about to start on a project that will have some fairly involved UI. Story events that occur as pages with decisions buttons on them, user-driven placement and design of structures, as well as standard management elements for tracking resources and tweaking preferences.\nAll told, a lot of stuff, and I'm wrestling with some of the same questions as you seem to be.\nIt's been my experience with pretty much every library / system / architecture / tool that getting things to work as nicely in a large involved project as they do in the \"toy examples\" is almost impossible. That's not to say that good design is thrown out the window, it just tends to look a bit different or at least have some more layers and moving parts before you get everything playing nice together.\nIn some cases, it's helped me to shift my perspective a bit on where a given piece fits into the whole. Maybe (almost definitely) there is a way to do all of this \"the Entitas way,\" but if that way isn't apparent to you, then maybe the best approach is to relegate the Entitas model to the region of your application that makes the most sense for your needs. What are Entitas' strengths as a tool for you as a developer working on this project? Where does adhering to its architecture start to become a pain point instead of a win? Find that line and you'll probably be well on your way to having your project structured (at least on a very high level).\nI am still in the design phase, but for me, in this project, it seems like Entitas will shine and therefor be the design authority and driving force behind the simulation aspect. As for the heavy UI and procedural geometry aspects, these will certainly consume and provide data from and to that simulation when appropriate, but they will really be their own systems.\nI could be inadvertently showing my inexperience with this approach / reply, but it's what makes the most sense to right now. I think it was as much a thought exercise for myself as it was an answer to your question, but there you have it.\nBest of luck!\n. Tangentially related - I have implemented ICodeGenerator in order to generate some ScriptableObject-based replacements for Blueprints, but I haven't been able to get Entitas to find my generator.\nIt doesn't appear in the Code Generators dropdown of the preferenecs window (in Unity), and if I add the full type name of the generator to the generators line in the Entitas.preferences text file, it is still not used.\nAny tips would be much appreciated - thanks!. Thanks a lot for the detailed reply, I'll give that a try tomorrow. If any further tweaks are necessary I'll be sure to share.. Hey @IsaiahKelly, I've got something cooking that might be ready to be tested outside of my project soon.\nI think the logic behind discontinuing the Unity side of Blueprints is totally fair, but I'm in the same boat as you - lone developer, no existing approach to lean on.\nThe solution I'm working on is actually fairly simple. It takes Unity's built-in serialization, Entitas' code generation pipeline, and the Prototype pattern, and mashes them together to make something that's pretty intuitive to use (I'm still working on my first Entitas project, myself) and has so far made injecting Unity assets into Entitas significantly less painful.\nUp until now, it's lived inside of my game's project but it's probably time I made a separate repository for it - thanks for the impetus!. Yeah, not my greatest moment, ahah. I was looking at the screenshot in the docs that used the ReorderableList GUI and felt crazy.. ",
    "CFusion": "It would be nice to have at least a single non-unity example project.\n. ",
    "MoritzVossKing": "How's this feature doing, btw?\nI find code generation has become more stable, but that might just be me knowing how to not trigger catastrophic failures when refactoring.. Totally loving this outlook, and it's likely the better choice.. I solved this \"restart\" problem by:\npool.DestroyAllEntities();\n        pool.ResetCreationIndex();\n        systems.TearDown();\nfollowed at an appropriate location by\nsystems.Initialize();\n        //...\n. Why \"pools\"?\nDoesn't a system live in one pool, and that's it? (yes, it could technically have a dependency on multiple pools, but that feels a little smelly, as CreateSystem is a member of Pool.)\nISetPool is very repetitive indeed, about 30-70% of my systems implement ISetPool. Any chance this could be done through inheritance instead? (I generally find inheritance highly underrated).\nI often use SetPool to just create a group which I'm using throughout the life of an IExecuteSystem, etc.. Oh, I understand and was misled all the time by the things you called out as misleading in the first post. \ud83d\udc4d . If this O(n) filter implementation scales equally well as IEnsureComponents did, sure!\nIn a recent gamejam project, I actually had to create an \"Impassible\" negative entity because IEnsureComponents couldn't reliably filter based on some external rules (a boolean array containing a collision map)..  I think order of systems is a pro, not a con, of ECS systems like Entitas (as opposed to event driven models, etc.)\nYou can have (but admittedly also sometimes need to manage) that temporal dependency, which in a pure event driven system you'd always need to fully micromanage (usually with chains of events, or order of handlers). . Isn't that a use case for ICleanupSystem?. ",
    "pointcache": "+1\n. ",
    "derwish-pro": "Ok. Thank you.\n. ",
    "bddckr": "This is fixed in Unity 5.4.0f2 (release candidate 2), at least on my end. Can't find anything related to it in the release notes, though.\n. My idea was to hook into the hierarchy window and only update the names when the entity actually changes. I can't seem to find any proper way to do this, so I used hierarchyWindowItemOnGUI, which is fired on every OnGUI event for every visible item in the hierarchy window.\nThis at least reduces the calls to the visible ones. I guess it's getting called more often than before when something leads to an OnGUI event. :disappointed:.\nAnother idea was to use OnComponentAdded and OnComponentRemoved, but the current implementation of the entity's toString method also uses the retainCount, so this won't update the name whenever needed.\nI'm currently working on a VR project and every millisecond counts but I still want the debug visualizations.\n. I tested some more...\nAfter reinstalling the latest Unity beta, reimporting the SteamVR plugin in Unity and restarting my PC several times I was able to get perfect performance without my changes of this pull request. :rage2:.\nThe cost of the debug visualizations is now so small that I don't think there is any benefit in changing anything. (PoolObserver.ToString should probably use a StringBuilder, though. :stuck_out_tongue:)\nSorry for bothering you :sweat_smile:.\n. You have to make sure the enum constants are a power of two and you should add a None enum constant:\nc#\n[System.Flags]\npublic enum MyFlags {\n    None = 0,\n    Item1 = 1 << 0,\n    Item2 = 1 << 1,\n    Item3 = 1 << 2\n}\nSee the FlagsAttribute docs and this stackoverflow answer for more info.\n. Just tested with my changes mentioned above... Still getting Item 1. :confused:\n. Found it! If you remove the None constant above everything works.\nAs soon as there is a constant with value 0 everything is off by one. This is a bug in EnumMaskField.\nAlso note that Unity already provides Nothing and Everything, but in code it's a good idea to specify a None nonetheless.\n. :+1:\nI think to emphasize that it's for the type (and not possibly a whole component) I'd go with ITypeEquatable.\n. I'll have a look at updating this proposal.. Replaced by #289.. I like it!\nThis adds safety on pool methods because one cannot use the wrong components on them.\n\nBut using the Has* interfaces @mzaks proposed it's possible to guarantee the usage of a subset of components in a System for example:\n``` c#\nclass ExampleSystem : IReactiveSystem {\n  private interface MyEntity : IEntity, HasPosition, HasVelocity {}\nvoid Execute(IEntity[] entities) {\n    for (MyEntity entity in entities.getSubsetOf(typeof(MyEntity))) {\n      myEntity.AddPosition(...);\n    }\n  }\n}\n```\ngetSubsetOf would be an extension method on IEntity[]. It won't be generic since the type is only used to get its inherited interfaces and check the array for entities that implement them all. AFAIK in C# class A : IOne, ITwo is not of type IAggregate where interface IAggregate: IOne, ITwo.\nIf the system uses only one type of IEntity (eg. IReactiveSystem) its trigger could maybe be replaced by returning MyEntity with a trigger event somehow?\n\nMaybe it's possible to tell the compiler about everything:\n- which components are available in a pool\n- which components an entity must have & in which pool the entity must be\n. If it isn't possible (or the implementation allows no performant fetching) to have both, I'd vote for the pool safety. Having the compiler help with which components are available in a pool sounds better than my idea above.\nJust thinking out loud. :smile:\n. If you want a unique ID for every entity you could add a simple IDComponent to every one and give it a new GUID for example.\nMake sure to have a look at EntityIndex/PrimaryEntityIndex. Either use it with your ID stuff or think about how existing components could be utilized to provide an EntityIndex.. Pasting my thoughts from the gitter chat:\n\n@sschmid Very awesome changes! I love every single one.\nSome thoughts:\n- I think the CreateEntityCollector extension methods shouldn't specify GroupEventType.OnEntityAdded by default. Things like these don't take much time to write but make it easier to understand what is happening. Could be just me, though. No hard feelings. \ud83d\ude04\n- Having CreateEntityCollector extension methods for Pool and Pools feels like it could introduce some confusion just like the stuff this commit started with \ud83d\ude03 Why are those methods not additional constructors on EntityCollector?\n- Why EntityCollector GetTrigger(Pools pools) and not EntityCollector Trigger? Shouldn't the systems' trigger be fixed to the same Pools it got in a constructor? I see we're not forcing people to specify such a constructor, but a system is fixed to a specific Pools nonetheless, right?\n- Doesn't look like IEnsureComponents and IExcludeComponents are tagged obsolete?. I agree with @Noshire. Entitas already handles \"saving\" lambdas: EntityIndex does it by referencing them by a name.. We're all on Gitter, like the little badge on the Readme says :)\n\n. The problem with that test is:\nThe created collector manages a list of Entities it collected. _initialEntity is in that list.\n_initialEntity is also retained by the collector. This adds the collector to _initialEntity.owners.\nSo both the collector and _initialEntity have a reference to each other. That's why the collector is never GC'ed.\nA simple fix to destroy that circular dependency is to change the test's Start method to include\ncollector.ClearCollectedEntities(); at the end.\nThis removes _initialEntity from the list and also releases it from the collector, which in turn removes the collector from _initialEntity.owners. :tada:\nNo idea if that behavior really is a bug in Entitas or just a bug in the test. I'm too tired to figure it out today. \ud83d\ude04. No idea if that behavior of retaining the entities is needed at all.\nMaybe the collector should implement IDisposable to signal the user \"this thing needs proper cleanup, otherwise hell will break loose\".\nCan you think of a reason why the collector retains the collected entities until one calls the clear method? Why isn't the collector subscribing to the entity released event and removes it from it's list of collected entities?\nI guess if you tell the collector to use GroupEvent.Removed (or AddedOrRemoved) you want to be notified about completely removed entities, too. Not just \"this entity was removed from this collector because its components don't match the matcher anymore\".\nThat would explain the need to retain entities until they're not \"collected\" anymore.. These \"docs\" are currently out of date but these two example projects have been updated:\nhttps://github.com/sschmid/Match-One\nhttps://github.com/sschmid/Entitas-CSharp-Example. Damn! True! That should work :+1:. For the destroy systems I went with this solution.\nThis only works as long as you don't need to access a component in multiple contexts. See this gist for a solution to that use case.\nFor the second issue:\nI don't think multiple contexts are supported like that anymore. You can create multiple systems like above, though. There may be other solutions of course. \ud83d\ude04. This whole discussion was fixed for me 20 years ago because we have proper IDEs (And I'm not even 30 years old :wink:). \ud83d\ude1b\nI don't really care, as long as it's not changed all the time so my commits aren't just\n\nLetting Entitas change whitespaces again.\n\n:wink:. Make whitespace great again.. I hated tabs when doing line breaks and having the IDE indent the stuff then.\nIn Objective-C it was apparent all the time, in C# I still break long methods so each argument is on its own line, but all arguments are intended by the opening parenthesis.. The effort shouldn't be that big.\nBut if you add this make sure to let us disable it. I'm not using Entitas-Lang currently and therefore there will always be some changes where I don't want to regenerate just yet.. @trumpets There's a new extension method to get the observer for a context. I think you need to use that one and destroy the context observer yourself. No idea if that should happen automatically in Context.Reset, though.. The difference is that the new variable index is used twice. The compiler won't reuse the same variable for that as it doesn't know what CoreComponentsLookup.Position does. It could have side effects for example.. Some thoughts I had which resulted in me not suggesting this. I'll post in in case someone else comes up with that, too:\nQ: Why not generate int value { get; set; } and in the setter do entity.ReplaceHealth(value)?\nA: I can see that being stupid when you have multiple fields in your component and leading to confusion because it will eat your performance probably.\nQ: Maybe only generate that for components with a single field?\nA: Sure that works, but is a pain when adding more fields later and one API is simpler than two \ud83d\ude04. It's a Unity bug that will be fixed in an upcoming release of 5.6.\nI know this because we're bitten by it in VRTK, too, and one of our users had a discussion with one of the Unity engineers.. I'd bet most of the time is spent because of that huge GC Alloc. Maybe there's a way to reduce the allocations?. ",
    "KumoKairo": "I've tested a bit and got some numbers.\nhttps://gist.github.com/KumoKairo/0ac544ade19f56dbc4c107d03919bb69\nIn 100 runs of setting the component values for 1 000 000 times the averages:\nclassical unnamed set:                     6-7 ms\nnullables and .GetValueOrDefault - 18-19 ms\nthere's also a way to write that a little bit differently:\nthis.x = x ?? this.x\nwhich turned out to be even slower:\n?? operator - 30-32 ms\nPlain old if(x != null) yields the same results of 30-32 ms\nJudging by IL these parameters get compiled to an array of params, but there's no actual array allocation on invocation. Most likely the performance penalty depends on method invocations and possible cache misses or something (I don't really dig into ASM much, but there are twice as much working lines with one 'call' operator). Which ideas did you try that made that \"damn fast\" execution?. @mgmhunt have you tried using uFrame Architect? I couldn't make it work on Unity 5.5, not even that fancy package manager. What about built-in XML serializer? Unity-C# has that by default too. Not sure about whether it's included in the UWP (but most like it is, I'll check on that). Checked that and here's a quick conclusion: binary formatter is only a small part of the things that don't get compiled as a UWP build. Somehow, this target is a bit glitchy about compilation and build errors (it doesn't even always tell what goes wrong, silently failing after a list of \"white\" console messages). Default build settings include \"Compilation Overrides - .NET Core\" which effectively does something like making a native .NET compiler compile all the stuff. And it fails pointing ONLY to the BinaryFormatter. Then, if the binary formatter issue is resolved, it starts complaining about the second thing - GetInterfaces method of a Type class, which is not present in WinRT assemblies (yes, it actually says that). It's not to say that this reflection stuff cannot be implemented - they just moved the whole Type thing into a TypeInfo class which has all the needed functionality.\nBUT\nI suspected that it maybe possible not to override Unity assemblies, so I checked the \"Compilation Overrides - None\" so it compiles with a Mono compiler. It didn't work, but it at least gave a full list of compilation errors:\n\nType.GetInterfaces\nSystem.AppDomain and AppDomain.GetAssemblies\nBinaryFormatter (there's a DataContractSerializer instead, and it's also available in Unity, but I didn't really worked with it and can say nothing about it)\nThere are actually more total error messages, but it's really all about these three things.\n\nSo basically three cases that need to be resolved somehow. One possible way is to replace a default BinaryFormatter with XmlSerializer (I tested it in the editor and it works just fine, saving a text representation right into the .asset file). \nRegarding reflection - there are different classes in that platform and thus can only be resolved with a conditional compilation, which I personally try to avoid as much as possible.\nRegarding the \"AppDomain\" thing - there's no support for AppDomain.GetAssemblies. I searched a bit and it seems that the only way is to replace this .GetAssemblies from AppDomain with something like \"typeof(string).GetTypeInfo ().Assembly.GetType (\"AppDomain\")\" - https://forums.xamarin.com/discussion/21255/device-getassemblies \nSo there's a way around this really, but someone would have to make it. I don't really work with UWP platform (had to install it separately actually to test everything)\n@culer will you be able to resolve this yourself?. Thanks @ophilbinbriscoe. To answer your question: \"What are Entitas' strengths as a tool for you as a developer working on this project? Where does adhering to its architecture start to become a pain point instead of a win?\"\nI see several advantages in Entitas over our current solution. \nIt's (entitas) a lot about amazing separation of concerns and the ability to relatively quickly and painlessly add or remove some features (just delete the feature folder, regenerate and most likely you're already good to go). This quick and easy feature-oriented design is what really attracts me in Entitas. General MVC/MVVM approach tend to add a lot of abstraction layers just for the sake of those layers (in case the functionality will be handy at some point, or just in case this or that will be extended etc.) while ecs maintains the separation and testability without the need of lots of boilerplate code. And as this approach tend to have pretty weak dependencies, those dependencies are still there which is not the case in ecs.\nWhat you did in your answer is just pushed me a bit to looking for a specific solution rather than trying to deal with everything in my head all at once.\n@T2RKUS Thank you for the answer, it's rather descriptive. As I can see there's no actual way to deal with it without another layer of concern (which is why I've written this question in the first place).\nI consider this an answer:\n\"Yes, you'll need some other layer of concern that will handle UI interactions differently and actual implementation depends on your project\". \nI will let this \"issue\" hang here for a few more days just in case. It's a pretty useless answer. General things that are known and are pretty easy to explain with abstract things, but which are not really applicable to a real project as-is (tell me that). Most likely @Elzean didn't even fully read my question or any of the answers, though I bet he will try to prove the opposite (I can guarantee it).. You can't really get away from touch commands like \"Input.GetTouch(0)\" cause that how Unity works. What you can do, however, is to look at the Physics example in the Entitas Shmup example, which adds some physics collision input to some entity. In case of drag-n-drop however you can basically adds an input component to some entity, say DragComponent with some position and some kind of an ID or reference to a draggable object. Then, every touch move you replace this component with a new one with new position and use some system to update the \"Draggable\" object.\nTo recap - \n- Listen to touches in some Unity-aware script that has Update method, \n- Check whether you press on something draggable and create an Entity with a DragComponent (or use some singleton Entity, it's up to you really).\n- Write a system that processes those entities (or entity) with the DragComponent to achieve the behaviour you want. Does it happen on a device? Can you provide some steps to reproduce this?\nC# events are tricky and really can lead to memory leaks and constant allocations on += -=\nMaybe that moment of nullifying an event happens after the garbage collector collection phase. I could say more If I'll be able to reproduce this locally. @kdrzymala or you can go with plain-old vanilla observer pattern with Interfaces, it's event less memory-and-GC-heavy because you still need to create those delegates to put them in the list of Actions. (It's created every time if you pass any \"method name\" as it is to Add or Remove methods. You can cache it, but it's still another object which you can totally remove in this case. Take a look at the console - it has a JS error. Unity thinks that .js files are Unity Scripts and tries to compile that. It fails because there's some real javascript code involving jQuery and things. Delete everything except Entitas folder from your project (so your Project tab displays only one thing - the folder named \"Entitas\"). It should then compile ok. To be more explicit here.\n\nDelete EVERYTHING\nCreate a folder named \"Libs\" inside of your project\nOpen Entitas-Unity ZIP archive\n\nCopy \"Entitas\" and \"Plugins\" folders inside of your newly created LIBS folder\nDone\n\nThis will not work if you'll just drop Entitas and Plugins folder into your project because of the way Unity handles folder names. @sschmid it will be a common error to copy the Plugins folder inside of the root Unity \"Assets\" folder, also leading to errors. Please consider renaming the folder to something more Unity-safe (so it's harder to screw things up when importing Entitas to Unity)\nIt's also possible to make a \"pre-compiled\" archive with a \"Libs\" folder without any documentation inside so one will be able to just drag-n-drop it inside Unity to make it work without any renaming. I'm working on a video step-by-step tutorial atm.. No, you have to create this \"default\" context by hand in the Entitas preferences. Every entity now needs to be assigned to some of the existing contexts.. https://youtu.be/YHweZ8dhOJA?t=4483\nIt may go side by side with the new Unity C# job system (safe multithreading). @T2RKUS I would go and implement this thing anyway. After these experiments we will at least know current friction points of multithreading with Entitas and will know where to move next.\nAs for the Unity's ECS - their solution is likely to be very specific, while general multithreading is usually more general and applicable to more usage cases, so it will find its user even after Unity will release their super-fast-and-specific ECS. @Lynx32 it's been a while since June 1st, can you share your experience with Entitas so far? Did you decide to discard it or still using it?. Just to clarify it here too - I'm making beginner video tutorials on a simple Dice Poker game (the project itself is almost done, so first videos are to be expected by the end of March 2017). I'll post a link to a project repo so you Entitas people can take a look and point to things that can be a bit off. That second dependency graph which you've shown describes exactly what's Entitas-Lang achieves. It stores Components as separate files, while generated code is that Component Snapshot. I have some ideas about visual component editor (based on uFrame), which will allow the same thing (effectively storing components as editor assets, leaving the generated code to be Component Snapshot). I don't take any steps towards that at the moment because there's so much to do with tutorial videos and blueprints. Can you post some relative performance charts? Make a few use cases like Execute System with GetComponent, ReplaceComponent etc. With, say, 1000 entities. It will provide a great value to this topic in general.. It's a pretty trivial task actually. You can even make first steps towards that. Take a look at custom editor scripts, there's a way to inject your methods to \"Create\" menu in project view.\nhttps://forum.unity3d.com/threads/custom-context-menu-for-project-view.127021/\nThen just add a few modal windows that ask a user about the type of an entity (GameEntity, InputEntity or whatever contexts there are in project), then just generate some code without any complicated code generation stuff (simple hardcoded stuff will do). It's absolutely possible in Unity and even more than that, it's pretty easy. Unity bug tracker issue https://issuetracker.unity3d.com/issues/playersettings-dot-setscriptingdefinesymbolsforgroup-doesnt-like-buildtargetgroup-dot-switch. In Unity 5.5 GetEnumerator no longer allocates memory (all foreach loops are now justified), so I think it is worth a try . \nI also did a small optimization thing in Entitas source with cached arrays. There was no .ToArray at the end, it just refilled the array with actual values and returned it (along with an int length. As I knew that in my case those arrays don't go out of the Execute method of systems, I just used that one single array as a temporary buffer for every GetEntities on a group. Iterating over an array is the fastest way to go over a collection in C#. Everything else (lists, enumberable collections, etc.) becomes much slower when the number of elements in them increases, because it involves method calls that have their overhead (indexing a list is actually calling a get_Item method that is generated for the list indexer. What about something like group.GetEntitiesNonAlloc(IEntity[] result)? Like Unity does it in https://docs.unity3d.com/ScriptReference/Physics.RaycastNonAlloc.html. This component inheritance thing looks very spooky. I would've gone with an \nenum SourceComponentType\n{\n    Audio,\n    Attack,\n    Death,\n    .... etc\n} \nand a SourceComponentType field inside of the BaseAudioComponent (which would be just an AudioComponent.\nYou have a great example project by the way, I started working with Entitas with your project (didn't go all the way to this audio components inheritance though). It may seem like a good quick solution, but resist the urge to do that. Don't add any functions to components directly and don't use component inheritance. Any problem can be solved in many different ways. \nKeep in mind that there are no strict rules in programming. I encourage you to try different things and see if they work out for you. As for my experience - I've already tried something like you have described and it didn't work out for me at all. Cheers :). Can you please specify which version do you have?\nUsually there are upgrade guides in Release notes https://github.com/sschmid/Entitas-CSharp/blob/master/RELEASE_NOTES.md (you can click links to get more specific info). -- UPDATE : initial conclusions about DLL turned out to be wrong, please read all the subsequent comments ---\nI've found a huge downside of DLL version.\nAs all game code goes through the DLL which is not debuggable by default, Unity fails to connect its profiler correctly on a target device. All code of systems get's \"squished\" into one line of general \"Update\" loop with overall time. There's no way to expand it and see what's going on inside, thus making profiling on a target device very hard.\nEditor profiling is not representative because of the Debug Systems that generate some overhead (additional allocations and execution time)\nTarget device profiling is hard (almost impossible) because DLLs are not expandable.\nI see two ways around it.\nFirst - provide an additional debug version of DLLs along with the release ones. I still need to check whether it will work for the profiler or not\nSecond - use a source version.\nI've checked my considerations with a few people and each of them had the same result.\nhttps://imgur.com/wu3nPFt.png. Not really, it still has side effects. And anyways, profiling in the Editor is just a first step. Devices have different runtimes and different behavior, not to mention that devices are usually more picky to some code that may run good in the Editor and not so good on the target device. Rule of thumb is to actually profile on a target device.. I'll get back to this issue once I have the numbers. Stay tuned. I did some digging with visual debugging turned off and it looks like there's really no additional overhead in the editor. However, I can't really check it on a device to compare non-visual debugging version in the editor and actual release version on a device.\n@kdrzymala it really seems that the editor profiling with visual debuggin turned off is the only option for now, thanks for the feedback.\nI'll need to try a few more things:\n1. Build a debuggable version of Entitas .dll files (not visual debugging, just script debugging so it may display in the Unity profiler)\n2. Get back to making a working copy of sourced Entitas version. I'll try it in the following week and write here on the results. Ok, rebuilding the core Entitas project as a debuggable version doesn't change anything, it's still doesn't show a full callstack in the profiler.\nI'll try rebuilding the whole set of Entitas projects and see if it makes a difference.. I've rebuilt the whole Entitas library as a Debug version but it doesn't change anything.\nI guess the only way left is to use SRC version. I'll try to \"sourcify\" the core Entitas project first, the one that contains all the systems and common execution logic.. Ok, I've made a working source version of Entitas. \nAs it turns out, Entitas doesn't have a lot of dependency on .dlls. It just needs to load Data Providers Plugins, Code and Data generators from assemblies. It also checks the current Entitas version by the Entitas .dll.\nI've made it look for certain interfaces in the currently loaded assembly instead and provided a fake version for it (it just needs it to suggest updating)\nBut you know what - sourced version of Entitas doesn't really help a lot either. Profiler shows the same picture as it is with the .dll version of Entitas. So the root of the problem is not really in it's \"dllness\", it's somewhere else. I've double checked that the built project doesn't contain separate .dlls and it's all in one usual Assembly-CSharp.dll:\n\nI'll continue digging further\n--- UPDATE\nThe root of the problem lies in nature of the Unity profiler itself. Editor has support for deep profiling, and this is where we get the most full callstack down to the actual thing that slows down the game. Deep profiling is not available on target devices. It allows you to check the \"deep profile\" button in the profiler window but it really doesn't do anything on a device. \nRight now I see a solution that's similar to current DebugSystems, but uses Profiler.BeginSample and Profiler.EndSample instead of the Stopwatch \nI'll try implementing it and will write back here with the results.. I've implemented a simple extension of Systems class, DevelopmentSystems, which use Profiler.BeginSample(<system name>) and Profiler.EndSample() on builds with a \"development build\" tick. The results are promising-profiler shows the whole deep callstack down to almost every call, even if running it on a target device. It works both with source version of Entitas and with a built .dll version so I guess we don't really need a sourced version after all. But just in case, I have a working solution for a sourced version too.\n\n. We use different systems for different game states (i.e. Select Car state and Race state)\nIt can be either a scene-based controller (with all the states there) or a state-specific controller. Each state specific controller has a list of Systems which it executes, cleans up and tears down upon exit\nThus, you have a lot of options:\nYou can use specific managers to handle different game states\nYou can create \"meta-systems\" that check this \"if/else\" things and call other systems accordingly (this approach increases code dependency and not encouraged though)\netc.\nMaybe you can provide your specific example with exact things you are facing now so it will be easier to provide and advice. I personally think that this system dependency thing is like trying to bring old OOP ways into ECS. I really like that systems don't know anything about other systems. They only care about data. \n\nI agree with you, but there are cases when a system needs to change or trigger a behaviour of another system.\n\nSystems don't trigger other systems. Data does. And it shouldn't be important where this data comes from - it may be another system or it can be direct player (or developer's) input. If you bind one system to another, you will basically tie data changes to that system. This means that we can't just change data by hand (via the inspector) or by means of other systems and hope that the first system will trigger - this change will have to be made from the system on which we depend on. It also means that I can't disable one system and hope that other systems will continue to work (right now they would). Making systems depend on each other will put logic on the first place again, while in ECS we say that it's data-first.\nI think it will increase the complexity of the easy-to-use and easy-to-read code. \nAs for the \"hard to grasp the flow\" - I'm agree with you here, and this is a comprehension problem. It can be solved using some static code analysis tools and visual node-based tools. We don't have to spoil our code with inter-system dependencies to understand what's going on. (We have a Visual Entitas Jam for this - #475 wink wink)\nWhat Unity does with its internal ECS and system dependencies is just a way to arrange systems order in a way that will make sense (data has to be changed before it's consumed). It's all automatic and doesn't require any by-hand dependency placements. Entitas is a step forward from that actually because in Entitas we can order systems ourselves, getting full control over the execution flow.. https://github.com/sschmid/Entitas-CSharp/issues/378 \nThis is a common misinterpretation of the AnyOf matcher. Certainly things need to be named more intuitive. For now you just need to use a different API for your case (take a look at Simon's answer). The destruction of systems is an essential part of their usage. This is what we use ITearDownSystem for.\nYou basically use it to cleanup the current state of the game - unlink entities that have their GameObject views destroyed, etc.\nIf you need a notion of common systems that don't get destroyed for the whole lifetime of a game, you should create them from an already DontDestroyOnLoad object.\nSystems themselves should know nothing about whether they are used from Unity or from pure C# code, it's just an unnecessary coupling. . We can create a visual node based editor for Entitas and present it to Simon to sell it on the assetstore. And in turn recieve a free Roslyn generator for the community. (Mega-Uber-Killer-Plan)\nI'll add more info on the upcoming Visual Entitas Jam #475 \nFeel free to take part ;). This is the editor usage statistics that is posted on Unity Publishers forum on 26th of July 2016. They publish new statistics every three months, so new stats should be coming soon.\n\n(this is not private info, I haven't accepted any NDA or anything like that, this info is completely legitimate)\nMethodology:\n Medium-to-High users (excludes those who used Unity for a very short period of time during the period)\n Previous 30 days\nCurrent Major Versions:\n 2017 - 13.5%\n 5.x - 83.9%\n 4.x - 2.5%\n 3.x - 0.1%\n\nTargeting 5.5+ / 5.6+ should be pretty safe, targeting most of the active users. Yes, I will definitely start from uFrame ECS. It's linked in the original description. There's also a more fresh version of it that works in 2017, let me just go fetch a link. I have just checked the uFrame chat again, your link is the latest \"not utterly broken\" uFrame version. Thanks for pointing that out, I have updated the link in the description. Now we have a xNode author here, this is where things get serious :). I have created a chat room on gitter (as gitter is what people use by default with Entitas)\nhttps://gitter.im/Entitas-Visual-Jam/Lobby\nAs a keynote - \nfor the new people with Entitas:\n- be sure to check the FAQ and Getting Started section at the main repo: https://github.com/sschmid/Entitas-CSharp\n- to get the general idea about visual ECS editor be sure to check out the uFrame ECS videos: \nhttps://github.com/InvertGames/uFrame.Documentation/blob/master/uFrameECS/Overview.md\nThe main purpose of this jam is to see what people can come up with regarding the Entitas visual programming / architecture creation / visual code generator. And also to increase one's editor scripting skills.\nGood luck and see you in the chat.\nCheers!. This is my kinda-postmortem on a Jam. And we will wrap up during the next couple of days.\n\nInitial ideas\nSo first, to be honest - for me this jam was an excuse to get my hands on uFrame and editor scripting.\nI really like the idea of visually representing active data that we are working on. uFrame itself was a pretty popular package back in the day, feedback of software developers on it is quite positive, so I decided to give it a go.\nMy goal was to create a visual system that allows creating components, contexts, groups and systems. \nFirst, we create components and groups.\nThen we hook up groups to systems and generate some boilerplate systems code that only allows using entities from supplied groups. \nWe should also be able to specify output component types that a system should create so we know not only Input components, but Output too.\nThis will allow to easily query for systems that handle certain component types so we know which components can be changed by which systems. It makes the overall comprehension and debugging process easier as we can always check for all of the systems that have something to do with certain component types.\nJumpstart\nSo I've started with uFrame and it was a \"straight to business\" experience - I had Entitas Data Providers hooked up to uFrame graph data in no time (as uFrame ECS already has Component nodes).\nI didn't want to write lots of code generator logic from scratch and have decided to use most of what Entitas already provides. Unfortunately, its current default Data Provider layout doesn't allow to inject some custom code into the data providing pipeline (https://github.com/sschmid/Entitas-CSharp/blob/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins/DataProviders/Components/ComponentDataProvider.cs#L38). \nMilestone 01 - Sourced Entitas\nDefault Data Providers pipeline is hardcoded and we can't change that using a .dll version of Entitas easily, so first I had to tailor Entitas for the source release. Turned out that Entitas doesn't really depend much on .dllness on its own, it just needs to know which assemblies to check for types. I started with Unity 5.2 (it's the latest version that is supported by uFrame out of the box) and it didn't have a notion of Assembly Definitions back then (turned out to be around two years ago - sic!). So I have returned to retrieving assemblies by type instead of loading dlls. \nEntitas also needs an assembly version so it knows whether or not it should advise you to upgrade. \nAssembly Definitions get us back to the need of searching for assemblies. But I think the whole process of manual addition of the assemblies thought the text preferences is cumbersome, and it can be easily replaced with automatic assembly search in the output Unity's Library folder. \nBack to uFrame\nData Providers hook up to uFrame graph data and generate all the needed code correctly. What I didn't yet have is a Context node and context attributes generation. It required a custom uFrame node and I dived in the Plugins system (after all - adding a custom node type should be easy, right?). Turned out to be not a simple task. Although uFrame has a notion of Plugins (it even has some code does a search and even calls some initialize functions), it was required to write actual code in the core of uFrame to add another item to a right click custom menu.\nAfter I was able to make a custom node and make it appear in the graph, I've faced another issue - it didn't allow me to rename my custom node. The text was in editable form, but it didn't receive any input. Turned out the focus is hard-reset every OnGUI event to some nonexistent text field. So I spend around 5 days digging around uFrame, fixing this thing and trying to understand the whole underlying uFrame structure.\nMilestone 02 - Lazy developer\nNow as I have started feeling that custom node types don't really work out as expected, I started thinking about reducing the workload. I have thought of the notion of contexts themselves, as they are kind of a workaround the fact that we need to store preallocated array of components for each entity. So we can reduce amount of wasted RAM, by splitting component types into groups. So entity can have 50 preallocated array elements instead of 300. \nThe idea is OK, but it leads to another workaround - Multi Reactive Systems, which need to handle entities from different contexts at the same time. It also puts a pressure on a developer by making think about which components really do belong together, and it kinda breaks the ECS thinking as these \"contexted\" components start to look like fields of a class (I've seen a lot of examples where people treat contexts like that, in OOP way)\nThen it has struck me - all this time we are trying to fix the code generation issues while the main problem lies deeper - component storage model. This has led me to a lot of conversation in the Entitas chat and a lot of component access tests. We were also lucky to have @Leopotam in that chat, as he provided a few different alternative ways of accessing components that can even be faster than what Entitas has right now, but with less RAM consumption. This whole Make Entitas Generic Again topic took me another 4 days or so.\nBack to uFrame (again)\nSo in the end I've managed to kinda fix the node renaming issue, but it has really shown that uFrame has a lot of \"tech-debt\" as one of the community members noted, so it was not really feasible to rewriting some stuff in uFrame itself.\nI've had 4 days left of the jam (took me too much time digging in uFrame and chatting about component storage model) so I finally decided to acually JAM!, writing my custom node editor from scratch\nMilestone 03 - Actual JAM!\nBesides uFrame, I've also wanted to try PureMVC for Unity and Editor Scripting looked like a good place to apply it. I have checked a few articles and a \"handbook\" again and started working. There's a .NET Standard version of PureMVC https://github.com/PureMVC/puremvc-csharp-standard-framework, but it doesn't work in Unity (it's multithreaded and uses some modern language features), \nso I had to port it to Unity it first. https://github.com/KumoKairo/puremvc-csharp-multicore-framework this is a fork that has a \"converted\" version that works in Unity. \nI have also decided to quickly \"Generitize\" Entitas so I won't need complex code generators that Entitas currently has. I have changed component storage to naive Dictionary lookup and removed the notion of different Contexts as they were not needed anymore. This process of refactoring got me understanding the \"backend\" of Entitas much better. \nBut in the end I didn't even had a chance to actually try it, so I guess it was work just for the sake of learning.\nSo last 3 days I have spend JAMMING with Node editor scripting with PureMVC and it turned out to be an exciting experience. I knew that I had to move on to next tasks without refactoring the previous ones, but couldn't help returning back and polishing all the stuff (both visual and technical).\nResults.\nAs a result of excessive polishing, by the end of the Jam I only had working solution for:\n1. Component addition / removal\n2. Component renaming (intuitive double clicking instead of RMB - Rename)\n3. Fields - addition / removal / renaming / changing types\n4. Interactive fields are really interactive - when moving a mouse everything reacts - text dims, buttons show that they can be clicked etc., feels really nice to me\n5. Trivial component generation.\nOther than actual node editor:\n1. I'm really determined to continue digging into component storage implementation in Entitas so we can really say goodbye to Contexts, MultiReactiveSystems and other workarounds of a current component storage strategy.\n2. Got my hands on uFrame (finally) and won't get back to that\n3. Finally tried PureMVC and it turned out to be good\n4. Got back to Editor Scripting (haven't touched that for 3-4 years because the first custom Node-based editor scripting experience was very daunting) and it turned out to be cool and exciting. \nhttps://github.com/KumoKairo/Entitas-Visual-Jam\nthis thing is opensource, it has PureMVC, Naively generitized sourced Entitas version and actual Node-based editor. I'm not sure what I will do with it now, but in general I'm still motivated to continue working on my initial idea of visual static analysis thingy that I have in my mind.. Thanks everyone for being interested and special thanks to @T2RKUS for actually participating and making something cool and usable.\nStay tuned for later updates!\n. I've just imported and setup this new generator in an empty project and tested the generator with compile errors.\nThe process took me less than I expected from the feedback of previous people, but it still has paint points in it:\n\nI see no apparent reason for making three additional steps of creating a Libraries folder, downloading Entitas folder separately and then moving it to Libraries by hand. The package can be uploaded directly inside the Libraries/Entitas folder and it doesn't require extra work really. \nIt would be nice to have all \"plugins/data providers/etc\" things set to \"Everything\" by default. \nAs for the generator itself - it would also be nice to have automatic search paths replacement as at the point of extracting the code generation archive we already have a project path anchor and it can possibly be automated\nWhen using doctor and gen commands it gave me a whole lot of - Could not resolve: Microsoft.CodeAnalysis.Features.dll warnings, as well as about \"unused keys\" and it bothers me a bit.\n\nAnd while using command line to generate is relatively easy, it would be a nice consistency to be able to generate inside Unity with Ctrl + Shift + G with the new Roslyn Generator instead of an old one.. > Find a way for default values on windows (currently only mac paths)\nI'm on windows and I didn't touch any of those \"only mac\" paths at all, it works out of the box\n\nAtm Roslyn is opt-in because you cannot simply run it within Unity for technical reasons like it requiring .NET 4.6.1.\n\nFacebook plugin solved this problem by making platform dependent code execution. It doesn't run CLI commands directly \"in unity\" it runs them by creating a separate CMD process and issuing commands with it. I was making an in-Unity Roslyn generator call, but didn't make it yet. I will write here if it will be successful on Windows\n\na _MACOSX folder which is definitely not the content of the zip! How does Windows add imaginary files to the zip? Anyway, make sure to extract the CodeGenerator folder to the root of your project, ignore the _MACOSX folder. As far as I'm concerned I'd say this folder doesn't exist anyway ;)\n\nThere are _MACOSX folders everywhere on Mac, they are just invisible. They show up a lot on windows if you're sharing any files or folders between a Mac and a PC. I bet the solution can be googled, but at the very least these _MACOSX folders can be removed by hand using a Windows machine for now\nAs for the additional CodeGenerator folder - it's solved by using an \"Extract here\" unzip option instead of \"Extract to CodeGenerator\".. What is fabl? Is it a custom logging library?\nI've tried googling it the first time it appeared in Entitas but wasn't very successful. Cool, I'll try to regenerate the solution and project files and will write back here with the results.. Now I can't send you the project because we have tried importing it again (a few days after we initially switched back to standard generator) and it worked. I just watched the video as it was in the last time, done everything exactly the same and strangely enough it worked this time\nIt still has a lot of warnings and generation takes much more time than initial assetstore version without a client/server thing (mow takes about 5-6 seconds)\n```\n    - Could not resolve: SQLitePCLRaw.core.dll\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll\n\n- Could not resolve: System.IO.MemoryMappedFiles.dll```\n\n. Can this could not resolve possibly impact the generators performance? Is there a way to use an -a append command to be able to generate again using this new client-server generator? Generating from client still raises those warnings and still takes the same amount of time. I have no issues except these could not resolve errors every time I run entitas client gen. with a entitas server running locally . After a few generation iterations I started getting \nCould not load file or assembly 'UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\nerror. Rolled back to old generator, sent the project to IM on gitter. What those kb lines stand for? Generated Garbage during the test?\nI think if it's done every frame, we should aim at 0 kb GC Alloc. Do you think that's possible?. I would suggest to stick to one context for now. It will become apparent which contexts you will need only at a later stage. Trying to separate your contexts beforehand is overthinking and may lead to more OOP-oriented design approach (people usually try making contexts as kind of Classes in OOP with fields as components)\nAs for the libraries - Simon has already done some work with it https://github.com/sschmid/Entitas-CSharp/issues/307. Just some followup in the chat. A strong point I'm absolutely agree with:\n\nI was also thinking about the fact that we already have the entity.isFlag = true; helper method for flag components, which I would argue doesn't suggest immutability at all and is just meant to be intuitive like Update  . It would also seem that renaming Replace to Update would make even more sense considering the fact that this method also updates all other systems, but maybe that's just me \ud83d\ude1b\nThis has got me thinking, isn't something like entity.isMovable = true/false basically a replacement for entity.AddMovable, entity.ReplaceMovable and entity.RemoveMovable? All though I guess Replace in this case would be useless\n\nThis bool equal operation goes against the commonReplace pattern and encourages to replace values of components directly. @ShadeSlider this is how Entitas looked like a few years ago. There was some performance considerations and bottlenecks with this fluent syntax that made Simon to remove it.. I also get redirected to a donation page randomly when trying to generate with Ctrl + Shift + G from the Unity editor. Always thought I misclicked something. Doesn't happen often, but sometimes pops up. \n. > since I could't find a way to use multiple contexts without reflections or code generation.\nWhy not use code generation then? It's the simplest possible way. I see.\nOverall I think it would be a great addition to Entitas-Unity plugins. This more of a designer-based approach is what we lack right now.. > But I need this logic outside System to check states and update/create UI.\nNo, you actually don't. UI is mere view which does nothing but reflects the underlying data. Putting logic in UI may look like an easy way, but it will backfire badly on the long run. If UI state can be inferred from data - there's no need to store it anywhere. If UI state only depends on itself, like animation state or something - we don't need to store it anywhere except the component itself. Using UI buttons with Entitas implies that those buttons have some kind of command emitters like\ncomponent ButtonPress:\n    string buttonId\nButtons just emit those entities into Contexts and some systems pick those up and process them (it may be one system or it can be a set of systems). UI then reacts to underlying changes that has come from systems in a form of changed state. It looks a bit like Commands in PureMVC framework.\nIf you need UI logic - create a separate set of systems that merely work with UI and nothing else. But please don't put any \"business\" logic outside the systems scope.. Just use Unity's built in functionality as it is and if it's needed - create a \"dependency\" component to easily access that in your systems. For \"dependency\" components see https://www.youtube.com/watch?v=Phx7IJ3XUzg. This is what Reactive Systems are for. You should go take a look at project examples like https://github.com/sschmid/Match-One/ and other inside of the examples page - https://github.com/sschmid/Entitas-CSharp/wiki/Example-projects. Common patter is to have several scenes to manage game state\nWhen entering a scene, Initialize all the systems and TearDown on leaving a scene (Start and OnDestroy) methods\nThis is where TearDown came from - it's used to cleanup current state-specific data (transient entities). This feature was written by me a month back. \nAnd it's only needed for the devices as the built-in Unity's deep profiler provides much more detailed info than this custom on-device profiler. \nIt also conflicts with the built-in Visual Debugging tool that also captures the systems timings, so you currently can't run both things at once. \nYou can tweak it so it actually has both visual debugging timings and named profiler lines, but I imagine the overall overhead from this will mitigate the whole point of using these profilers.\nMy advice is to use Deep Profiling in the editor and DeviceDeepProfiling on a device, it will give you the best results. Editor - Deep Profile\nDevice - DeviceDeepProfiling (Entitas-only feature)\nYou can't enable Deep Profile on a device, this is why we made this feature. Yes, it means that it's turned on. Build your game with a \"Development Build\" tick and connect it to the Unity profiler to see profiling data. This thing actually worked back in the day, we used to store settings components like that. Just mark a custom Settings : ScriptableObject class with [Game] and it should generate an appropriate component:\nSettingsComponent : IComponent\n{\n    Settings value;\n}\nSo I guess it's an issue with the new generator?. It's because there's a Deactivate call in the Collector's finalizer https://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Collector/Collector.cs#L135\nFinalizer are called by GC right before the destruction of the object. This call happens in a separate thread, this is why we can't access anything unity-specific there as it will fail to do it correctly. \nFinalizers in C# are usually used for closing unmanaged resources like files and handles, they are not really suited for general stuff, especially that's connected to Unity.\nIt's usually not a problem because collectors are immortal throughout the game, they basically never die (don't get garbage collected), but once you start having stray ones or using a Unity editor for it, it starts to be a problem\nThe only solution is to remove all finalizers completely as they are not the feature that has to be used for the purpose they currently serve. \nTake this Collector for example. We call Deactivate in the finalizer. https://github.com/sschmid/Entitas-CSharp/blob/develop/Entitas/Entitas/Collector/Collector.cs#L79\nWhat Deactivate does is just unsubscribing from groups events. But events are GC hooks in C#, so if any group is alive, Collector won't be picked up by GC at all. On the other hand, if all groups are dead and we don't have any references to a collector, it will all be Garbage Collected together without the need of unsubscribing from events because GC cleans up the whole chunk of objects together (so this finalizer is just some pure useless work)\nI have pointed this problem out back in the day, but it was decided to let it be.. Sure, it will be shared after the stream :). https://youtu.be/1qh6fTHeb5E\nRecording. Links included. >  because jenny itself doesn't do anything other than loading and running the plugins.\nIt's like saying that Feature is not an essential part of Entitas because the only thing it does is just calling Execute (Initialize etc.) methods on Systems.\n\nbecause making this work was actually a freaking nightmare.\n\nThis is where the opensource community comes into play. It's opensource so people can contribute and lift some burden from the main owner of the framework/library. Making these things closed won't even allow other people give you a helping hand.. @sschmid  Why is it open source? What are your goals of making it an open github repo?. > Why have you packaged Entitas up as it is with loads of dlls in separate solutions?\nIt was first introduced to allow future implementation of Entitas Kits.. Then you clearly miss quite a few of those points. Take sharing, exchanging, getting input and ideas (literally everyone here says that built-in generator should be opensource). \nI don't say it's bad, you will clearly get somewhere with this, but I personally don't like where this is going (and judging by the comments I'm really not the only one).. Yes, you can check the compiled DesperateDevs.Analytics.dll. It doesn't send much - OS version and hadrware statistics. \npublic UserTrackingData()\n{\n    base[\"u\"] = Environment.UserName + \"@\" + Environment.MachineName;\n    base[\"d\"] = Environment.ProcessorCount + \"@\" + Environment.OSVersion;\n}\nBut it bothers me too. It also works with a built-in generator, this dll is inside Unity package by default. We have rolled back to 0.45.1 for an \"in production\" project and use a completely custom Entitas version for our new projects.. We need a check mark in the GUI properties in Unity too. ",
    "braaad": "@sschmid structs in dicts shouldn't be boxed as long as they implement IEquatable<T>.\nI have written a few ECS's (too many), basically going with the approach @arne-schroppe describes. I use classes for components rather than structs. These get pre-allocated at startup so they are in the same area of the heap. While technically the CLR can move your stuff around in the heap, it's my, fairly limited, understanding things will generally stay put (open to clarification).\nThe topic of using managed memory for contiguous storage came up in one of the talks on the LMAX Disruptor (https://lmax-exchange.github.io/disruptor/). They basically said the same thing, I realise the original implementation is written in Java but I have tested the .net version and got almost identical results.\nThere are other options of course but none as simple as pre-allocated arrays of classes, imo. There will be the issue of growing the array as @arne-schroppe also mentioned. This would require a full copy of the current array, or, just accept you are going to have a cache miss at the end of the original array size, not really a big deal. The other thing, as mentioned in the t-machine post, the array will require defragmenting once you start adding removing entities. This can be solved, as I think is mentioned, with a lookup table (entityId -> instanceId).\nI have more I wanted to write but have run out of time, will add soon.\n. @sschmid If you are going to go ahead with this, maybe a set of benchmarks need to be created similar to what you already have but doing a full simulation of some kind. It would need a range of scenarios, e.g. a large number of entities with few components, a small number of entities with a large number of components, frequent adding and removal of components etc. etc. There isn't really a goto implementation that is the best in all circumstances (that I am aware of). A compromise needs to be made to handle the general use case, or, provide the ability to swap the internal memory management out for different implementations easily.\nI have been making a few notes as I have gotten time so here they are, not sure if they are useful or not. Mostly just from my own research / experience, nothing really out of the ordinary.\nIt's best to avoid \"monolithic\" entities and by that I mean storing state on the entity object itself. What I have done, and is a common way of doing it, is to just use struct for the entity which contains an ID. This ID is used as the key to access all it's relevant parts. I just have a free entity stack which I set it's initial size to be the max number of entities the system can handle. When you allocate a new entity you grab one from the stack and vice versa. The \"component manager\" can then make available that entity index for all it's component arrays.\nBit fields (or masks, whatever you want to call them) are pretty much the fastest, and easiest, way to handle entity filtering. With checking if an entity has all components being as simple as this return (this & other) == other;. However, you need 1 bit per component type (obviously) so can get large quite quickly. I went straight to using 128bit using two ulongs. Your use of pools though would alleviate this issue. Each bit field can be indexed by it's entity ID, like everything else.\nI generate code for Copy methods on my components, I use this for templates(blueprints) and shuffling components around in memory (since nothing gets new'd at runtime). I don't use this for general immutability.\nSome ideas I have had that I never got around to testing are:\n- The concept of static and dynamic components (the name static is probably a bit ambiguous). Static components can only be added when allocating a new entity. An example of static component would be Unity's transform component.\n- Treat components used a flags only (no data, just used for filtering) differently. Just add them to the component mask for the entity they are attached to. You already have this concept in Entitas.\n- Treat single instance components differently (once again you already have this concept). These gain no benefit from cache coherence and it's a waste to allocate an entire component array just for these that won't get used.\n. ",
    "paraboxx": "@mzaks How would you go about efficiently combining position and velocity components for a movement system? I.e. how would you efficiently match a position component to it's according velocity component. To get the best performance from the data layout both component arrays should be iterated over in tandem. Your sketch makes it look like positions could be iterated over sequentially, and a second velocity array would basically require random access because the slot allocation doesn't enforce anything.\n. @mzaks Ok yes, fitting as much as possible into the cache is a factor, too. I'm not sure how much good it does, though. For that to help there has to be a need to access the same data multiple times in close succession without anything big happening in between. There will be lots of other stuff going on between two movement updates that all potentially flush our data, Unity, rendering, physics, other programs running on the computer. This is why I think the most straightforward thing to do is to make sure data is accessed sequentially, to help the prefetcher do its work. But this is all guesswork without benchmarks and actual use cases.\n. To me processors are things that take one kind of data and transform it to get another kind of data. Event Processors take events and generate more events or make changes to game state entities.\nSystems are things that work on stuff continuously.  So an IReactiveSystem could make sense as IEventProcessor, especially if the events are deleted right after. But IInitializeSystem->IInitializeProcessor? Or IUpdateProcessor?\nAlso, does this mean the whole batch processing ideal wrt to cache friendliness is off the table then?. Or to state it differently: A processor processes a certain kind of thing. So it becomes a ThingProcessor. But systems in the more general sense can pull together information from various sources and act on them. Like a RenderSystem that might act on changes to Position, Health and AI State. Do we call it a RenderProcessor then? It doesn't process render, because render is not a component. Or should I call it a PositionHealthAIStateProcessor? The last one says what is being processed, but not what for. This is fine for input and event processors, but not for systems that don't have a singular input.. I don't think a single list will do as groupchanged callbacks might add or remove components and recurse into this handler. I think you even have a test for that case.. There is an older ECS framework for .NET on github called Forge (https://github.com/jacobdufault/forge) which implemented MT by enforcing immutable state. The whole architecture basically uses double buffering for the gamestate. During one update cycle, the systems read only from the old state and only write to the next. No interdependencies between state changes in a single update cycle are allowed. I didn't use it much though and sadly it didn't pay any attention to cache coherency and data locality.\n. No, it will be removed from the Group inside the collector, but not from the collector itself. Collectors keep the entity until the ReactiveSystem that owns the collector did its work on it. . The name is not about the class only. It also refers to the concept of the set of components that can build an entity. In one context, an entity can have a position, in another context it can't. Each component is relevant in one or more contexts. . No that's not possible. GameEntity and InputEntity are different entity types. Each type can only exist in it's own context. But these types can share common components. The context defines the set of components that its own entities can be composed of. And this is why EntityManager doesn't show the whole picture. Sure it does manage entities, but it also represents the concept of a context whose entities follow certain rules and which are separate by definition from entities from other contexts.. Just passing in a raw IEntity[] array will lead to a lot of unnecessary copying. I once added some performance counters to find out how often I get cached results vs a fresh allocation over all groups in my game and 98% was cached results.\nSo I  would go one step further and add an actual cache class that the user can pass in and that gets registered with the group. The group can then invalidate the caches like it does invalidate it's internal cache with the difference that the external cache just sets a flag or something and doesn't need to reallocate the next time it's used. The user would be responsible for checking the flag and refreshing the cache before it's actually used.\n. Do you know a good place to initialize the cache? Is Contexts constructor ok? Then we would need to manually initialize the cache for all tests that don't initialize a context.. That's the thing. It happened only once, in the Unity Editor. I have no clue which collector that was and why it didn't get cleaned up. I don't use collectors outside of the ones needed for reactive systems and I don't destroy/remove systems at all. Does the Visual Debugging code create additional collectors maybe?\nI think the collector destructors should log an error and report a leak instead of silently cleaning up after the user in this case. The intention is good but Deactivating a collector undeterministically will eventually lead to other problems even outside of threading scenarios.. Don't instantiate them from a generator. Just leave everything as is and in a final step - before the context calls the Initializers - execute a Sort() or whatever is needed to get them in order. I see more of a problem with nested systems in @RichPruitts usecase. Since each Feature is responsible for executing its child systems, the sorting can only be relative to siblings.. If you want to integrate it properly, yes. On the other hand, you can probably derive your own system and do it in there.. You could implement your own index that reacts to entities with unit owners and properties and puts them in a like Dictionary> for fast lookups. int would be the unit Id, string the property type, and GameStateEntity is the entity that contains the property.\nJust look at the implementation for GetEntitiesWithUnitOwner() and roll your own that fits your usecase.. ",
    "cconstable": "Hey all, I'm a little late to the conversation but I've got some thoughts. For topics like this I think it's helpful to envision the ideal future and work backwards from there.\nSmaller Entities\nI imagine entities as tightly packed structs containing only a few ulongs. As others eluded, bit fields are wonderful for conserving memory ~~but I didn't see anyone suggest using bit fields for the components themselves.~~ EDIT: @braaad mentioned this and I think already described what I am describing here...\nEssentially, the code generator would create pool-bases entities and allocate the exact amount of space needed to store all the components and flags. Since we are using bit fields this is super efficient:\n``` c#\n// apologies if the code below isn't syntactically correct - I'm new to C#\n[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 28)] // size is dynamic (code gen determined)\npublic struct PlayerEntity : IEntity {\n    [FieldOffset(0)]\n    public UInt32 id;           // unique entity id\n    [FieldOffset(4)]      \n    public byte[2] flags;       // bit field for component flags\n    [FieldOffset(10)]           // this offset is dynamic (code gen determined)\n    public byte[22] components; // bit field for attached components\n};\n```\nThis means that the actual size of an entity is 4 bytes + 1 byte per 8 flags + 1 byte per 8 components. Currently entities have a lot more responsibility than what is depicted above but perhaps that can be moved elsewhere.\nIf you have an Enemy pool that contains 200 components and 20 flags that gives you 32 bytes per entity. This means storing 1000 enemy entities only takes 32KB of memory. Of course each component's data would need to live somewhere but that is a different problem. From this, if we wanted a particular component's data we have a unique entity id and component offset (it's position in the bit field) that can be used as a unique index to get that data.\nComponent Managers\n\n@arne-schroppe: All components of the same type are stored together in a shared array (so there will be one such array per component type, managed by the pool). An entity just holds an index into that array.\u00a0\n\nYes! Except I don't think the entities need an index.\nSince entities no longer store references to components they will need a component manager that takes the entity's id + the request component offset in the bit field and returns the actual component data. Again, in this architecture entities do not have a component \"index\" - they simply have a bit that tells them whether they have the component or not. The component manager takes the entity's id + bit position of component (which is unique for each pool) and solely based on that returns the data.\nThis means component managers would be tied to pools.\nBest Practices\nUse Pools\nPool usage == optimization opportunity\nLogically Group Systems\n\n@mzaks: If you have systems which need to interact with GameObjects for example, it would be better to put them at the end of the systems list, so that logical systems can have the fastest throughput working only with Entities and components.\n\nI love this. This would be great in a best practices section.\n. I agree that @mzaks solution can be used to add extra safety :+1: . I also agree in that pool safety / entity interface cleanliness is my highest priority.\nI just started writing C# a few days ago so my knowledge there isn't strong but I'd like to think we could implement both of these solutions.\n. Giving this some more thought I realized this would be a pretty serious departure from the current architecture and would break all existing projects. Since pools are generally passed around as just a Pool reference I don't think migration tools would be able to migrate to something like this. \nI have a solution for this:\n1. Create an IPool interface and move existing Pool interface there.\n2. Have Pool conform to this interface and keep generating Pool as we are (with all single entity methods, etc). This is for backwards compatibility.\n3. Create a new generic pool class as described in the initial comment:\nc#\npublic partial class Pool<T> where T : IEntity { }\n. Hey @srivello,\n\nEntitas examples use x,y,z properties separately, but I use a Vector3. Best practices for Entitas?\n\nI think that is totally up to you. I use Vector3 as well.\n\nWhat does ensureComponents do? Is it only relevant to IReactiveSystems? Where is it documented online?\n\nSystems operate in a deterministic chain:\nc#\n[System1] -> [System2] -> [System3]\nImagine System3 is a IReactiveSystem that reacts to \"EventA\". System1 produces EventA and System3 later does something... that's great. But what if System3 actually needs to some to get some data off the entity that System1 creates? Everything is fine unless System2 removes that data before System3 can use it! ensureComponents makes sure that the entities that get passed to the system actually have the data you are looking for.\nAnother way to think about is reactive systems get triggered but don't execute immediately (they execute in the order they were added). Data can change from the time it got triggered to the time it actually executes. ensureComponents makes sure you only operate on entities with the components you actually asked for.\n\nWhat is the best way to address OPTIONAL components like Tick and Friction below?\n\nThere really is no concept of \"optional components\" but you can check for the existence of a component by using the methods on the Entity class that start with has....\n\nWhat areas of code do you recommend developers test?\n\nCheck out these tests:\n- https://github.com/sschmid/Entitas-Shmup/tree/master/Assets/Tests/Editor\n\nWhat is a Feature? \n\nA feature is a special type of Systems that allows you to visually debug the systems in Unity.\n\nFeatures vs System?\n\nA Feature is a collection of System's.\n\nWhere is this documented online?\n\nI don't think it is and to be honest the name really confuses me :disappointed:. There are plans to update the wiki though! See #103\n\nWhat is the best practice to handle pausable vs unpausable systems?\n\nI think the first step is modeling time explicitly with a system. Then it's just a matter of deactivating that system.\n\nAlso, I noticed this:\nc#\npublic void SetPool(Pool pool) \n{\n    // Get the group of entities that have a Move and position component\n    _group = pool.GetGroup(Matcher.AllOf(Matcher.Velocity, Matcher.Position));\n}\nIt's best practice to create your groups in Initialize() rather than SetPool() due to the way resetting pools works. Further discussion: https://github.com/sschmid/Entitas-CSharp/issues/82#issuecomment-195059578\n. Regarding pausing systems, check out this discussion: #120\n. I just made a fresh clone of master on my mac and ran Build/build.sh and it failed:\n```\nScripts have compiler errors.\n(Filename: /Users/builduser/buildslave/unity/build/Runtime/Utilities/Argv.cpp Line: 152)\nAborting batchmode due to failure:\nScripts have compiler errors.\nThread 'UnityLookForNewInputDevices' is still running!\n(Filename: /Users/builduser/buildslave/unity/build/Runtime/Threads/Thread.cpp Line: 68)\nThread was not cleaned up!\n(Filename: /Users/builduser/buildslave/unity/build/Runtime/Threads/Posix/PlatformThread.cpp Line: 39)\nempty()\n(Filename: ./Runtime/Utilities/LinkedList.h Line: 180)\n```\nAny thoughts? I can't seem to build on either OS \ud83d\ude22 \n. Ah I was compiling via command line and only compiling a subset of the files. The script was compiling everything thus the discrepancies - thanks!\nI wrote up a new script to make working on Entitas and testing in unity on Windows a little smoother. I'll open a separate PR for that when i return from traveling next week. \n. My next step is trying to figure how to build + package Entitas for Unity. I've had trouble with this #138.\nI'd also like to add tests for the new generated code. In general, testing code generators is usually very tedious and the tests are fragile. Do we have any procedures in place for updating test fixtures, etc? \n. Hey @sschmid, @mzaks, I was planning on continuing work on this PR this week but before I do I wanted to get some feedback from you two: Does this fit in the vision you have for Entitas? Are there plans that this interferes with?\n. Good to hear. Thanks!\n. Whoa lots of new chatter \ud83d\udc4d \nThanks for moving this forward. Here are my thoughts on a few things you brought up:\n\nSo the solution would ... the ComponentExtensionsGenerator should only add methods to [the Entity subclasses (which are partial)] and not Entity. Is that correct?\n\nIf that is the only thing we can do to make the type system happy then I'm good with that.\n\nNo interfaces for typed entities (e.g. CoreEntity)\n\nEven if the generated interfaces aren't used internally in Entitas I still think they are useful for doing things like composing interfaces for reactive systems:\nc#\n// Now we can use interface composition for typed reactive systems\ninterface IPhysicalEntity : IPositionEntity, IMassEntity, IVelocityEntity { }\nclass VelocitySystem : IReactiveSystem<IPhysicalEntity> {\n  public void Execute(List<IPhysicalEntity> entities) { }\n}\n. Ok, so I don't think we'll be able to do that with C#. I was originally thinking we'd be able to do something in C# like this:\n``` swift\n// Swift\nprotocol IMass { }\nprotocol IVelocity { }\nprotocol IPosition { }\ntypealias IPhysical = protocol\n```\nbut that doesn't seem possible.\nWhat if in order to get that behavior we did something like this:\n``` c#\n// User-created interface\npublic interface IPerson : ICoreEntity, ICoreNameRead, ICoreNameWrite { }\n// Make partial class conform to new interface.\n// No need to implement anything since it already conforms.\npublic partial class CoreEntity : IPerson { } \n// Then...\nvar pool = new Pool(...);\nvar e = pool.CreateEntity() as IPerson;\n```\nSo in the end it's only one additional line you need to write but I think the safety benefits of using a pattern like this far outweigh that small amount of time :)\n. > What I think you seem to want is actually a 'node' based approach (similar to Ash) where a system doesn't iterate over entities but over nodes which hold sets of components (for instance your Velocity, Mass, Position) and thus you can only interact with those in a given system.\nI think we can get the benefits of this without the performance hit by using interface composition and typed systems.\n\nIt is a contract of - which data this system has access for and can create... The generated interfaces just make sure that we don't cheat in the implementation. We have to stick with the described contract.\n\nYes \ud83d\udc4d  I think that we could achieve this with the IEnsure/IExlude interfaces, etc but that doesn't prevent the system from breaking the contract and modifying entities in whatever way it chooses. \nAdditionally, as a project grows in size anything I can do to help my code write itself is very desirable. If a system only exposes the correct subset of an entity's interface to me (e.g. IPerson in my example above) then I am prevented by the compiler from making logical errors which I think is really great! For example, I don't want a MoveSystem modifying an object's mass even though mass, velocity and position are likely components in the same pool.\n. Temp cache produced by VS 2015\n. I don't understand this diff. My VS project seems to compile fine. I'll investigate further.\n. Because the IEntity interface declares IEntity AddComponent(int index, IComponent component); this needs to be downcast. It will always succeed.\n. I move all these comments to the interface so they can be maintained in just one location.\n. Converted this to a property so it could be expressed in the interface. AFAIK, this shouldn't cause any issues.\n. Before these types were declared inside the Entity class. Since interfaces can't declare types I moved them here. Should I put them in their own namespace or leave them in the global Entitas namespace?\n. See note in IEntity about delegate types...\n. Moved comments to interface.\n. Again, I'm very confused by this project file diff. What have I done? \ud83d\ude2e \n. Atm, I'm not generating interfaces for single entities. I'll remove this constraint soon.\n. After the pool components have been separated into groups according to their pool name,\ne.g.\nc#\n{\n    \"Core\" : {\n        // core components...\n    },\n    \"Meta\" : {\n        // meta components...\n    },\n    // etc.\n}\nI filter to make sure there are no unnamed pools. I believe it is possible to make an unnamed pool like so:\nc#\n[Pool]\npublic class SomeComponent : IComponent { }\nAm I correct to be filtering these out or should I call the pool something like \"Default\"? In that case, what is the difference between an unnamed pool and having no pool? Does it simplify things to only generate these interfaces for components that have explicit pools?\n. Just saw this :) https://github.com/sschmid/Entitas-CSharp/blob/d7fd022597516df36194ffa02fc77c77f37d6f51/Entitas/Entitas/CodeGenerator/Attributes/PoolAttribute.cs#L9\n. ",
    "Stals": "I'll also leave a couple of links:\n- https://www.youtube.com/watch?v=rX0ItVEVjHc\n- https://blog.molecular-matters.com/2013/07/24/adventures-in-data-oriented-design-part-3c-external-references/ <-- specifically about data oriented design for ECS's components\n- https://www.youtube.com/watch?v=ZHqFrNyLlpA\n. I've also thought of this option, just forgot to mention it. \nI just think that if the trigger could do this - you could see all of your conditions in one place, instead of looking at both trigger and Execute() every time.\n. ",
    "AGeorgy": "https://jacksondunstan.com/articles/3453\nhttps://jacksondunstan.com/articles/3468\nhttps://jacksondunstan.com/articles/3325\nhttps://jacksondunstan.com/articles/3740. Awesome idea!!\nIt reminded me of:\n1. https://github.com/PlayMakerEcosystem\n2. https://hutonggames.fogbugz.com/?W1181. It https://github.com/sschmid/Entitas-CSharp/issues/309 It can help in the dependencies of another Kits. Wow! So huge changes in your life! Well, good luck to you!. ",
    "jakovd": "I was still getting inconsistent line endings for Generated/ComponentIds.cs on Windows machine. The fix works fine. Since it has been proposed 2 months ago it should have already made into the source by now. Don't you think?\n. Ah yes, @sschmid's response gave me a proper direction to the cause of the issue, although it was not exactly the described case. I was incorrectly adding entities with default pool component (ProgressListener) to a different core pool. That lead to matching that component as another one (ConsumeProgress) with the same component index in core pool.\nIt would be nice if we could we warned when adding different pool components to entities in another pool.\n```\n[Core]\npublic class CoreStuffComponent : IComponent\n{\n    public float x;\n}\npublic class DefaultPoolStuffComponent : IComponent\n{\n    public float x;\n}\n```\n// this should be fine\n        Pools.core.CreateEntity().AddCoreStuff(3f);\n// but this should throw some warnings\n        Pools.core.CreateEntity().AddDefaultPoolStuff(3f);\nWe can consider this issue fixed. Explained, actually.\nThanks @sschmid \n. ",
    "AllanSamurai": "In windows 10 64 i still had this problem but only the header it was causing.\nI resolved thus on file CodeGenerator.cs method \"writeFiles\" change this:\nvar header = string.Format(AUTO_GENERATED_HEADER_FORMAT, file.generatorName);\nto this:\nvar header = string.Format(AUTO_GENERATED_HEADER_FORMAT.Replace(\"\\n\",Environment.NewLine), file.generatorName);\nSorry my bad english.. Tested on my own project and on Entitas-Shmup project too\nit fixes\n:D\nThank you!\n. I think its java runtime requirement. if not installed install restart and try again?. ",
    "micz84": "That's great, I will try Entitas for my next project then :). Thanks for fast replay,\n. ",
    "cloudjubei": "Looking at the proposed change (which I like and wanted to have typed pools for a very long time) there's a couple things I wanted to highlight that we wanted this to solve:\n1) not having to write Add(Pools.core.CreateSystem()) or Add(Pools.core.CreateSystem(new TypeOfSystem())) in a Feature\n -> after typed pools writing Add(new TypeOfSystem()) and Entitas resolves the type based on trigger\n2) if 1) is true then all Matchers need to be typed and I shouldn't have to specify anything other than the matcher (trigger) to communicate to the outside that a given ReactiveSystem works on a given Pool\n3) Because we have typed Entities then only the components that belong to that given type are available on it from auto-complete -> otherwise compile-time error\n4) as a bonus (dunno if you want to incorporate it into this feature) the static Pools class needs to go and either the ISetPools or some other idea needs to proposed so that ISystems will have access to the Pools without me having to write 3-5 lines everytime to get them (atm I solve by having an ASystem class that simply gets the non-static Pools in the constructor and stores it in a field)\nSo looking at Simon's latest commit 2) is not there and the question still remains whether 4) should be part of this already.\n. 1) this is an improvement on the current API but would be great if in a Feature I could cleanly write:\nAdd(new MySystem()); - plain and simple\n4) ok cool - I guess that's good enough :)\n. I personally think that the amount of code you as a dev have to write in your project (not in Entitas!) to get something like:\nclass VelocitySystem : IReactiveSystem<IPhysicalEntity> {\n  public void Execute(List<IPhysicalEntity> entities) {...}\n}\nworking, outweighs any usability this provides - as what it really only provides is code completion and ensuring that an entity has the given components, but this can be achieved already with the IEnsure/IExlude interfaces.\nWhat I think you seem to want is actually a 'node' based approach (similar to Ash) where a system doesn't iterate over entities but over nodes which hold sets of components (for instance your Velocity, Mass, Position) and thus you can only interact with those in a given system. Simon and I have been talking about something like this for some time now and we definitely cannot have this real node based approach (where a node is a class container created every time and holding components) as it would be too slow, but we want to have the option of grouping components on a pool which would improve readability and performance, and hopefully at some point would lead us to a sort of interface like you have above :)\n. Of course this works - but it means that the partial class Entity will implement a bazillion interfaces once you start making your own interface aggregates - dunno if there's really a problem with that. But more importantly, as I said above, I don't see any use for it other than code-completion.\n. One thing to remember is that - Entitas on its own can be used without Unity - i.e. you should be able to build .NET apps on top of it - therefore we CANNOT tie ourselves too much to Unity.\n. ITearDownSystem\n. I generally like the word Reset (dunno why???) but in this context I don't think it works - if you reset something you should be able to use it anew soon. Whereas destroying something obviously has a different implication - I cannot use it anymore. So which behaviour do you want :)?\n. I've had this implemented maybe like a month ago but only for components with enums - if Simon decides that's enough you could get it soon :)\n. Yes - you have to remember to remove the generated code (i.e. the {your class name}GeneratedExtension.cs + the const inside ComponentIds.cs)\nSo far not many people find this process problematic - but if this is really an issue I guess we should think of a solution to make it easier - probably something along the lines of making a MonoDevelop + VisualStudio button/option to delete a component by name. \n. @WoLfulus Once Simon comes back from Australia I think we'll defo have to talk about this :) So if you will have a solution ready - we would definitely look at it!\n. discourse is paid?\n. @sschmid I'm away from home this week, but next week I might finally have some 'quality' time :D. ",
    "angelotadres": "That's is awesome!\nThanks for the information.\n. ",
    "aqaddoumi": "Hello, I\u2019m thinking of building a TweenSystem for Entitas. I have some ideas of how to implement it, I\u2019ve been looking at HOTween, GoKit and iTween. They have some similar approaches to tweening and some differences.\nI\u2019m thinking of creating a TweenClass, store it in a Component that you add to entities and have a TweenSystem that act on the variables of that class (Delay, TweenType, Tick, Done, etc..) and make the necessary changes for that entity. \nYou would also have other required components (Position, Rotation, Scale and Color) to be in the tweening entities so that the TweenSystem can make the changes to those component and you would create any Reactive system that act on those changes as you like. So the TweenSystem is only responsible for changing those components and not what happens afterwards.\nThere will be a static class or namespace that you can access from other systems so they can change or invoke the TweenComoponent for specific entities by writing for example.\nTweener.Position(e, 0.5f, new Vector(1,1,1));\nSo you pass the entity and the parameters and the Tweener static MonoBehaviour would change the TweenComponent for that specific Entity.\nSo if you would build something like this how would you go about it? and what do you think is wrong with this approach or what problems would I encounter? Also is there a better approach for this?\nAlso I haven\u2019t figured out how I would make Tween Sequences yet or that syntax for the sequencing. If you have any ideas about that, please do share :)\n. @kicholen Thanks for your example, yes it gets the job done, I've implemented a tweening system in my previous project but it was very hacky, that's why I'm trying to develop a more elegant system that I can use for my next project/s and share with the entitas community.\nI don't want to go off rail but the way you handled Entitas in your project seems very different from the way I've used it or from other examples on GitHub. What I'm trying to say it's very Object Oriented and less ECS. Some of your components have methods, aren't components supposed to have only data and let the systems handle the logic? I still need to go through your example more thoroughly but what we're you trying to solve by this and why did you use and MVC. PS you can be very brief :)\n@mzaks what I actually meant by having a TweenClass is actually two classes, one small class called for example TweenClass that have the tween properties and another, let's call it TweenerClass that holds multiple Tweens in a list in it. It also hold the AnimiationState and other and other necessary variable and methods for adding, modifying and running the tweens. What advantages would I get by using another AnimationStateComponent and System than having all of those saved in the TweenerClass that's saved in a component and have the TweenSystem iterate through them?\nAlso the DeltaTimeComponet was how I was planning to implement it :)\nYou guys and the entitas community are awesome and very helpful.\n. Okay, thanks for the answer, I will see how I will go about it and keep you guys updated :)\n. So the UI elements behaviour would be in the UI manager and not in Entitas systems?\n. This actually gave me an idea, I could create an EventPool and on intialization a system loops through each every entity with a ListenTo component then it creates a new entity for every EventTrigger that has listeners to in the EventPool. It adds a component with Dictionary > then it adds each entity with ListenTo to appropriate entity in the EventPool.\nSo what I would end up with is a Pools with multiple entities each have its own dictionary with its own listeners and I could access those entities when an event is triggered.\nThis would solve the huge parent dictionary I had and replace it with a pool.\nI can add ListenTo to entities on RunTime.\nI can create different event types with different arguments.\nIt doesn't solve all the systems listening to event from firing and then disabling them through if statements.\nIt doesn't solve accessing entities by strings which also have to be unique strings.\nI don't know. maybe I'm thinking about this all wrong and maybe I shouldn't use a system like this but I can't find another way to achieve that in Entitas other than creating lots of components and systems like in Entitas-ReactiveUI GitHub.\n. Okay I understand what you're saying now.\nThanks for the help \ud83d\udc4d I'm still trying to figure it out, any ideas are welcome :)\n. I have no experience in UniRX, actually it's the first time I hear about it. I don't think I fully understand your code, I'd have to see how UniRx actually works to fully get it. \nBut It seems that if we can a make a parent system with multiple children systems and the parent system can trigger only one system we would get the same effect right? and the children systems can have a state or stages so only one part of it would run until the state changes and it moves to the next one.\nI'm understanding this correctly? If yes, a good question would be, how can you make a system triggers only one it's children systems and not the others without creating different components for each system?\nThanks for you're long answer, I will look into it more thoroughly :) \n. I guess those are very valid reasons not go this way. Maybe I'm just overthinking but it seems to me that there should be a generic elegant way to use Unity Editor and Entitas together and give the benefits of both instead of writing custom Mono Behaviours for each game, but I might be mistaken. Thanks \ud83d\udc4d . ",
    "Yolziii": "Sorry, stupid question. Found it.\n. ",
    "jeffzi": "@gjroelofs Thanks for the heads up. Fortunately, @sschmid said that is currently focused on integrating the Roselyn Compiler :)\n. ",
    "RvRooijen": "Alright. I added a type check and now it behaves the way i want :)\n```\nvoid OnEntityRemoved(Entity entity, IComponent component)\n    {\n        if (component.GetType() != typeof(PositionComponent))\n            return;\n    PositionComponent p = (PositionComponent)component;\n    _pool.gridCache.Grid[p.X, p.Y].Remove(entity);\n}\n\n```\n. Thanks!\n. ",
    "alimoeeny": "Looking forward to the tutorials. \n. I think the current implementation makes sense, and keeps things cleaner for testing and when designing. I just didn't know this and thought other may fall into the same trap.\nI think it is best if you keep it simple, the way it is. Just prevent people by warning them or something.\n. Lovely. I think, from my point of view, I'd rather have a framework that prescribes a certain way of doing things, and when I need to stray from that it also let's me do my thing.\nToo much flexibility is prohibitive for beginners, and people with limited development experience, which I'd say are a large percentage of Unity developers. Absolutely no offense meant. You guys are in the top 0.1% of unity developers I believe and shouldn't compare yourself with the actual users of Entitas :) \n. - If I am not mistaken the first one means you can access your \"default\" pool as Pools.pool from anywhere (it's a singleton) \n. I believe, in most cases, having only one pool is enough, so the answer is yet. \nmy understanding is that you implement ISetPool only if you have multiple Pools and you want to control which pool is being accessed by which classes. \n. May I suggest, very humbly, that\n- if @sschmid and other core members have spare time, I really think having a walk through tutorial and other beginner friendly docs/videos/tutorials seems to have more priority.\n- in my mind, the purity and cleanness of architecture/design that entitas allows is what makes it great, so if a node based tool or any other tool is compatible with that, great, if not, one needs a very very good reason to spend time on it. \n. +1 to @cloudjubei and being able to run tests on a CI server/service is a huge plus.\n. Thanks @sschmid , running on mobile (daydream/cardboad VR), not hugely constrained by resources yet, but as always being efficient is good. the target device is an iPhone 6 or newer (on the android side, our target devices are the latest Nexus and Samsung devices). \n. I am actually more concerned with the order of things, \nI guess I should DeactivateReactiveSystems the ClearReactiveSystems then the all systems to null then Pools.pool.ClearComponentPools() and finally Pools.pool.Reset() ?\nThere is no destroy for pools?\n. WindDown, shutdown, halt, CloseAndClean, SunSet, break, destroy, destruct, dismantle, disengage :)\n. @sschmid what about Time ? do you also have a time library like NLog ? \n. So, I must be missing something fundamental here, \nI need to create/initialize my pools for my tests to run, \nwhen I call Pools.sharedInstance.SetAllPools(); somewhere Entitas wants to check with Unity to see if Application.isPlaying, and I get: \n...\nException executing context: nspec. FLStateMachine test. stateMachine Setup test\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.MissingMethodException: Attempted to access a missing method.\n  at (wrapper managed-to-native) UnityEngine.Application:get_isPlaying ()\n  at Entitas.Pools.CreatePool (System.String poolName, System.Int32 totalComponents, System.String[] componentNames, System.Type[] componentTypes) [0x00011] in <f71a8dc78d85453eb4d3e86bc895dad1>:0\n  at Entitas.Pools.CreatePool () [0x00001] in <f71a8dc78d85453eb4d3e86bc895dad1>:0\n  at Entitas.Pools.SetAllPools () [0x00001] in <f71a8dc78d85453eb4d3e86bc895dad1>:0\n  at FLStateMachine_test.stateMachine_Setup_test () [0x00006] in <109973244a17496590ea7711e15e974f>:0\n...\nIs there a way to tell Entitas not to look for Application or is there way to pretend that that Application is actually running when running headless tests? \nOr am I missing something very important all together? \n. Fair enough, Still struggling to get my head around the model,\nI'll move it to my AudioPlayBackSystem where it should have been all along.\n. Thanks @sschmid , Any chance you've open sourced any of your udp protocol and serializer/deserializer ?\nAny change it can become part of Entitas?  . You are the best, thanks, I guess the wooga/NUdpKit is private :(\nBut thanks again, odo/talk might be exactly what I was looking for, I am glad I have not had time to try to write one myself, [reposted to make sure you see it, I posted it at the same time you posted your last message and it got confusing]. It is too good to be true :D \nI am doing a mobile VR asymmetric synchronous multiplayer (a therapist \"plays\" with a kid http://floreotech.com ),\nI understand if you cannot make it public, but if you can I for one would appreciate it very very much.\n. @sschmid does this mean we should not upgrade and wait?. woot! Nooooooooooo. At the end of the day, it is a matter of taste.\nThe only argument is tabs display differently in different editors, different displays. \nI am personally a \"only use spaces\" guy.. ",
    "echeg": "I try:\n```\n[Game]\npublic class CardComponent : IComponent\n{\n    public int Id;\n    [IndexKey(\"CardT\")]\n    public TypeCard CardType; // want to integrate\n    public Rarity CardRarity;\n}\npublic class GameController : MonoBehaviour {\n    void Start()\n    {\n       _pool = Pools.sharedInstance.game = Pools.CreateGamePool();\n       AddEntityIndices(_pool);\n   }\npublic static void AddEntityIndices(Pool pool)\n{\n    // Position index, key type is IntVector2\n    var entityIndex = new EntityIndex<TypeCard>(\n        pool.GetGroup(GameMatcher.Card), // Group to observe\n        (entity, component) => ((CardComponent) component).CardType // How to create a key\n        );\n\n    // Add to pool by name\n    pool.AddEntityIndex(\n        GameComponentIds.Card.ToString(),\n        entityIndex\n    );\n}\n\n```\nAnd I get error on\n```\n(entity, component) => ((CardComponent) component).CardType // How to create a key\nNullReferenceException: Object reference not set to an instance of an object\nGameController.m__C (Entitas.Entity entity, IComponent component) (at Assets/Scripts/GameController.cs:45)\n```\n. Thanks all works fine!\n. What you think about double indices?\nExample:\n```\npublic class CardComponent : IComponent\n{\n    public int Id;\n    [IndexKey(\"CardTypeIndex\")]\n    public TypeCard CardType;\n    [IndexKey(\"CardRarityIndex\")]\n    public Rarity CardRarity;\n}\nvar entities = pool.GetEntitiesWithTypeAndRarity(TypeCard.solder, Rarity.Common);\n```\nOr indices from different components\nExample\npublic class CardComponent : IComponent\n{\n    public int Id;\n    [IndexKey(\"CardTypeIndex\")]\n    public TypeCard CardType;\n    public Rarity CardRarity;\n}\npublic class PlayerComponent : IComponent \n{\n    [IndexKey(\"PlayerIndex\")]\n    public int Player;\n}\nvar entities = pool.GetEntitiesWithTypeAndPlayer(TypeCard.solder, PlayerId);\n. The only node-base system that I liked it Behavior Designer\nIts main advantage is that you can visually understand what's going on with the selected object. And also a big + that all logic serialized to ScriptableObjects.\nBut graphical programming systems possess two critical drawbacks. The first is impossible to understand what was done by the commit. The second is the inability to merge. And almost all of these systems have a drop in performance.\n. If we use enum as key for dictionary \nhttp://stackoverflow.com/questions/26280788/dictionary-enum-key-performance\nI use \n```\npublic struct MyEnumCOmparer : IEqualityComparer\n{\n    public bool Equals(MyEnum x, MyEnum y)\n    {\n        return x == y;\n    }\npublic int GetHashCode(MyEnum obj)\n{\n    // you need to do some thinking here,\n    return (int)obj;\n}\n\n}\n```\nThis is much faster and does not cause unboxing\n. Maybe even add the ability to specify a list of components like \ne.Clone(Component[])\nor\ne.Clone(Component)\nFor example, to create a copy, but not copy something unnecessary. Especially it can be helpful when several people work on the project.\n. May be problem with nested namespaces.  . Any news?. Same project.  I can try to make a clean project for reproduce problem.. Entitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nTest class \n```\nusing Entitas;\nusing MyNamespace.subspace;\npublic class SomeBulk\n{\n    void SimpleTest()\n    {\n        var con = new GameContext();\n        var e = con.CreateEntity();\n        e.Addtestcomp2(new SomeStruct2());\n    }\n}\n[Game]\npublic class testcomp : IComponent\n{\npublic int zz;\n\n}\nnamespace MyNamespace\n{\n    [Game]\n    public class testcomp1 : IComponent\n    {\n        public int zz;\n    }\n[Game]\npublic class testcomp2 : IComponent\n{\n    public SomeStruct2 zz;\n}\n\n[Game]\npublic class testcomp3 : IComponent\n{\n    public SomeStruct1 zz;\n}\n\n}\nnamespace MyNamespace\n{\n    public struct SomeStruct1\n    {\n        public int X;\n        public int Y;\n    }\n}\nnamespace MyNamespace.subspace\n{\n    public struct SomeStruct2\n    {\n        public int X;\n        public float Y;\n    }\n}\n```\nIf GenCode from unity I have pretty good result\n```\npublic partial class GameEntity {\npublic MyNamespace.testcomp2 testcomp2 { get { return (MyNamespace.testcomp2)GetComponent(GameComponentsLookup.testcomp2); } }\npublic bool hastestcomp2 { get { return HasComponent(GameComponentsLookup.testcomp2); } }\n\npublic void Addtestcomp2(MyNamespace.subspace.SomeStruct2 newZz) {\n    var index = GameComponentsLookup.testcomp2;\n    var component = CreateComponent<MyNamespace.testcomp2>(index);\n    component.zz = newZz;\n    AddComponent(index, component);\n}\n\npublic void Replacetestcomp2(MyNamespace.subspace.SomeStruct2 newZz) {\n    var index = GameComponentsLookup.testcomp2;\n    var component = CreateComponent<MyNamespace.testcomp2>(index);\n    component.zz = newZz;\n    ReplaceComponent(index, component);\n}\n\npublic void Removetestcomp2() {\n    RemoveComponent(GameComponentsLookup.testcomp2);\n}\n\n}\n```\nIf I use a Roslyn Code Gen I can not get the same code\n. All project with out Roslyn Code Generator folder. \nhttps://www.dropbox.com/s/9yuc29tllbrce0j/RoslynEnty.zip?dl=0\n. Moving project from .Net 3.5 to 4.6 magically solve problem.. Unity 2017.1.1f\nI guess that means it worked? - I think so.\nMy main project have same issue and 3.5->4.6 solve all my problem with roslyn.. I think I catch some part of this bug.\nOn same project with same entitas.prop I have two behaviors one with bug.\nExample gen code\n```\npublic partial class GameEntity {\npublic ArcanoidWars.Logic.CardNameComponent cardName { get { return (ArcanoidWars.Logic.CardNameComponent)GetComponent(GameComponentsLookup.CardName); } }\npublic bool hasCardName { get { return HasComponent(GameComponentsLookup.CardName); } }\n\npublic void AddCardName(ArcanoidWars.Logic.CardsNames newCard) {\n    var index = GameComponentsLookup.CardName;\n    var component = CreateComponent<ArcanoidWars.Logic.CardNameComponent>(index);\n    component.Card = newCard;\n    AddComponent(index, component);\n}\n\npublic void ReplaceCardName(ArcanoidWars.Logic.CardsNames newCard) {\n    var index = GameComponentsLookup.CardName;\n    var component = CreateComponent<ArcanoidWars.Logic.CardNameComponent>(index);\n    component.Card = newCard;\n    ReplaceComponent(index, component);\n}\n\npublic void RemoveCardName() {\n    RemoveComponent(GameComponentsLookup.CardName);\n}\n\n}\n```\nNot corrected Line version\npublic void AddCardName(CardsNames newCard) {\nCorrected line version\npublic void AddCardName(ArcanoidWars.Logic.CardsNames newCard) {\nDifference between two code gen is location of:\npublic enum CardsNames\n    {\n        Solder1 = 1,\n        Solder2 = 2,\n        Solder3 = 3,\n        Solder4 = 4,\n    }\nNot correct version its in separate file like cname.cs\nnamespace ArcanoidWars.Logic\n{\npublic enum CardsNames\n    {\n        Solder1 = 1,\n        Solder2 = 2,\n        Solder3 = 3,\n        Solder4 = 4,\n    }\n}\nIn correct version CardsNames and CardNameComponent in same file.\n. I rewrite my deterministic physic  game to use GameEntity[]. I see real problem with index on real app.\nBefore\nhttps://www.dropbox.com/s/f1lr5dixavp3ort/Unity_2017-11-24_02-54-00.png?dl=0\nAfter \nhttps://www.dropbox.com/s/gql67bk5gj5ph3x/Unity_2017-11-24_03-07-55.png?dl=0  \nI rewrite some tests to calculate sum.\nPerfomanceTests.GetEntyFromFullArray:                       1000000             25 ms          13467 kb\nPerfomanceTests.GetEntyFromFullDict:                        1000000             35 ms          14728 kb\nPerfomanceTests.GetEntyFromIndex:                           1000000             196 ms         19423 kb\nPerfomanceTests.GetEntyFromIndexNoFirst:                    1000000             135 ms         19734 kb\n```\n    public class GetEntyFromFullDict : IPerformanceTest\n    {\n        int _iterations = 1000000;\n        private GameContext context;\n        private Dictionary _data;\n    public void Before(int iterations)\n    {\n        _iterations = iterations;\n        context = new GameContext();\n        _data = new Dictionary<int, GameEntity>();\n        for (var i = 0; i < 10000; i++)\n        {\n            var e = context.CreateEntity();\n\n            e.AddUnitName(UnitNames.Solder1);\n            e.AddRadius(new Fix32(1));\n            e.AddPlayerOwn(PlayerNames.Player0);\n            _data[i] = e;\n        }\n\n    }\n\n    public void Run()\n    {\n        long c = 0;\n        for (int i = 0; i < _iterations; i++)\n        {\n            var e = _data[i % 10000];\n            c+=e.radius.Radius.RawValue;\n        }\n    }\n}\n\npublic class GetEntyFromFullArray : IPerformanceTest\n{\n    int _iterations = 1000000;\n    private GameContext context;\n    private GameEntity[] _data;\n\n    public void Before(int iterations)\n    {\n        _iterations = iterations;\n        context = new GameContext();\n        _data = new GameEntity[10000];\n        for (var i = 0; i < 10000; i++)\n        {\n            var e = context.CreateEntity();\n\n            e.AddUnitName(UnitNames.Solder1);\n            e.AddRadius(new Fix32(1));\n            e.AddPlayerOwn(PlayerNames.Player0);\n            _data[i] = e;\n        }\n\n    }\n\n    public void Run()\n    {\n        long c = 0;\n        for (int i = 0; i < _iterations; i++)\n        {\n            var e = _data[i % 10000];\n            c += e.radius.Radius.RawValue;\n        }\n    }\n}\n\npublic class GetEntyFromIndex : IPerformanceTest\n{\n    int _iterations = 1000000;\n    private GameEntity[] _data;\n    private GameContext context;\n    private int _uniqIdIndex;\n\n    public void Before(int iterations)\n    {\n        _iterations = iterations;\n        context = new GameContext();\n        context.OnEntityCreated += AddUniqId;\n\n        context.AddUniqIndex();\n\n        for (var i = 0; i < 10000; i++)\n        {\n            var e = context.CreateEntity();\n\n            e.AddUnitName(UnitNames.Solder1);\n            e.AddRadius(new Fix32(1));\n            e.AddPlayerOwn(PlayerNames.Player0);\n        }\n    }\n\n    public void Run()\n    {\n        long c = 0;\n        for (int i = 0; i < _iterations; i++)\n        {\n            //var e = _data[i % 10000];\n            var e = context.GetByUniqId(i % 10000);\n            c += e.radius.Radius.RawValue;\n        }\n    }\n    private void AddUniqId(IContext context, IEntity entity)\n    {\n        var e = (GameEntity)entity;\n        //FastIndex[_uniqIdIndex] = e;\n        e.AddUniqId(_uniqIdIndex);\n        _uniqIdIndex++;\n    }\n}\n\npublic class GetEntyFromIndexNoFirst : IPerformanceTest\n{\n    int _iterations = 1000000;\n    private GameEntity[] _data;\n    private GameContext context;\n    private int _uniqIdIndex;\n\n    public void Before(int iterations)\n    {\n        _iterations = iterations;\n        context = new GameContext();\n        context.OnEntityCreated += AddUniqId;\n\n        context.AddUniqIndex();\n\n        for (var i = 0; i < 10000; i++)\n        {\n            var e = context.CreateEntity();\n\n            e.AddUnitName(UnitNames.Solder1);\n            e.AddRadius(new Fix32(1));\n            e.AddPlayerOwn(PlayerNames.Player0);\n        }\n    }\n\n    public void Run()\n    {\n        long c = 0;\n        for (int i = 0; i < _iterations; i++)\n        {\n            //var e = _data[i % 10000];\n            foreach (var e in context.GetsByUniqId(i % 10000))\n            {\n                c += e.radius.Radius.RawValue;\n            }                \n        }\n    }\n\n    private void AddUniqId(IContext context, IEntity entity)\n    {\n        var e = (GameEntity)entity;\n        //FastIndex[_uniqIdIndex] = e;\n        e.AddUniqId(_uniqIdIndex);\n        _uniqIdIndex++;\n    }\n}\n\n```\n. My run\n```\n        static void Run(int iter = 1000000) where T : IPerformanceTest, new()\n        {\n            Thread.Sleep(100);\n        //PerformanceTestRunner.Run(new T(), iter);\n\n        GCSettings.LatencyMode =GCLatencyMode.Batch;\n\n        long memory = GC.GetTotalMemory(true);\n        if (typeof(T) == typeof(EmptyTest))\n        {\n            Console.WriteLine(string.Empty);\n            return;\n        }\n        Console.Write((typeof(T) + \": \").PadRight(60));\n        Console.Write(iter.ToString().PadRight(20));\n        // For more reliable results, run before\n        PerformanceTestRunner.Run(new T(), iter);\n        var ms = PerformanceTestRunner.Run(new T(), iter);\n        long memory2 = GC.GetTotalMemory(false);\n        Console.Write((ms + \" ms \").PadRight(15));\n        Console.WriteLine((memory2 - memory) / 1024 + \" kb\");\n\n        GC.Collect();\n    }\n\n```. Yes its strange. And .first create garbage. \nI think we need special indexes for Uniq Item per key. . IDNoise I agree with you. And .First may replaced by foreach.\nBut if you consider my game, I have several(7) unique indexes 1 to 1 relation. I use them for server re-simulate game. In my approach I may add\\or remove\\or not create some Entity and not change uniq idexies keys.. @KumoKairo kb its only memory allocation not garbage. I have over 150 performance tests and sometimes  I need info about memory. \n\"0 kb GC Alloc\" is real but this is not the goal.. @IDNoise I create test for PrimeIndex\n```\n    public class GetEntyByPrimeIndex : IPerformanceTest\n    {\n        int _iterations = 1000000;\n        private GameEntity[] _data;\n        private GameContext context;\n        private int _uniqIdIndex;\n    public void Before(int iterations)\n    {\n        _iterations = iterations;\n        context = new GameContext();\n\n        for (var i = 0; i < 10000; i++)\n        {\n            var e = context.CreateEntity();\n\n            e.AddUnitName(UnitNames.Solder1);\n            e.AddRadius(new Fix32(1));\n            e.AddPlayerOwn(PlayerNames.Player0);\n        }\n    }\n\n    public void Run()\n    {\n        long c = 0;\n        for (int i = 0; i < _iterations; i++)\n        {\n            //var e = _data[i % 10000];\n            var es = context.GetEntities();\n            c += es[i % 10000].radius.Radius.RawValue;\n        }\n    }\n}\n\n```\nPerfomanceTests.GetEntyFromFullArray:                       1000000             27 ms          13660 kb\nPerfomanceTests.GetEntyFromFullDict:                        1000000             34 ms          14842 kb\nPerfomanceTests.GetEntyFromIndex:                           1000000             184 ms         19174 kb\nPerfomanceTests.GetEntyFromIndexNoFirst:                    1000000             155 ms         20070 kb\nPerfomanceTests.GetEntyByPrimeIndex:                        1000000             30 ms          13452 kb\nI think in most cases use PrimeIndex is good approach.. Many cases when for one entity it is necessary to call simultaneously several changes in the UI.\nFor example, we have several units, each of them has health. And when it changes, this change needs to be shown in two+ different places(hp bar, card info, stats screen etc).\nWe use group.OnEntityAdded and creation index id for this. . Same problem \n\n. ",
    "behealed": "Unity's Object / Component / Inspector model would be a potentially good model to build it on top of.\nIn this model, \n1) \"The nodes\" would be nothing more than empty GameObjects deriving from UnityEngine.Object\n2) \"The scripts\" would be nothing more than c# files, and could be attached to the nodes similar to the way UnityEngine.Components are attached to GameObjects.\n3) The \"Node Graph\" would be nothing more than a custom Unity Inspector Editor.\n4) The \"Code Generator\" would be... obsoleted I think. If you use Unity's design model, you won't need a code generator because Unity has a code generator built in?\nThe advantages of using this design model: \n1) It's already built into unity, so it is standard.\n2) Less likely to break every time Unity is upgraded.\n3) Can just write scripts to create new nodes, with no need to constantly rework the inspector to be able to display them correctly.\n4) Users can create their own nodes just as easily as right clicking the nodes folder in the project view, and selecting \"new c# file\".\nWe can call this the UOCI (unity object, component, inspector) design model. :)\nPlz note that I pulled all this ideas out of my behind just 5 seconds ago and I don't really know anything about Entitas, or anything about anything, so don't listen to me :/\n. ",
    "mgmhunt": "\"Also I'm curious, since both are open source, if Entitas is more powerful on the code end, would it be wrong or illegal or unethical or whatever to simply take the graphic node system from uframe and copy it to Entitas? \" - micah the founder/creator of uFrame has actively encouraged this (he's wiped the reference but it's here https://github.com/micahosborne/uFrame/commit/7fa1e2e1464ab60a4a90dd1c4ec340544331e809 \"Here's some idea of what it would be really cool to see the community come up with that we have never really shared....Other frameworks such as strangeIOC, Entitas... etc\".\nuFrame Architect could be the visual node editor/generator which then generates Entitas.  It's a matter of creating the nodes that generate the classes. Also uFrame Architect was visualised as Unity independent plugin (say for Visual Studio too etc).  ie uFrame Architect generates ECS code and MVVM code and could possibly generate any other code framework.\n. @KumoKairo not with Entitas. But I'm running 5.5 with uFrame from https://github.com/uFrame/ALLINONE/tree/dev . Few niggles with generation but check out https://trello.com/b/j4iGjQPb/uframe-opensource for current status, particularly user fuutou who seems to have fully understood Architect and is helping revive the project (original author micah has moved on, or taken a side line at least). @VladislavKostin  No not at the moment, I'm a hobbyist. fuutou is the person to ask on the Trello board, see above.  And I'm not sure the uFrame can be used to generate Entitas, but it was originally developed to be 'architecture neutral', currently it can generate MVVM and ECS code, and should/might be able to generate any modules... would require creating new nodes for the Architect.  Note uFrame Architect is the code agnostic generator & uFrame ECS/MVVM are two architectures that it can currently generate (plugins).  Anyway try fuutou, s/he seemed to get it (not sure commercial use).  There was one major project that used it and eventually gave up on it as the project got bigger, but they were using an older/much slower version of uFrame. I think Visual code probably best for designers and prototyping.... ongoing debate.... Note that https://github.com/uFrame is the best code base to work from now.. The links in description are from micah's code (the creator) but haven't been looked at in ages. The link I've referred to is the organisation that has a couple of key people who seems to understand it and are keeping it going.. ",
    "VladislavKostin": "I would definitely use uFrame version of Entitas. @mgmhunt I saw you on uFrame Trello, are you using uFrame for your work, can you tell me how well does it perform, and is it reliable enough?. I actually don't see how Job system would help Entitas. I mean, it can be used while Entitas does not have multithreading, or maybe it can be used by Entitas to take advantage of whatever thread safety mechanism it has, if it's possible, but I assume it will have some overhead. It seems to me that some solution like double buffering is the easiest one to work with and it would \"just work\".\nIn Entitas I imagine you could have base classes for multithreaded systems, and they would be managed under the hood. Entitas would run multithreaded systems (reading from buffer1, writing to buffer2), then in the main thread swap the buffers, run through systems that can't be multithreaded for some game logic reasons, swap buffers, start multithreaded systems again, and run all view systems in the main thread meanwhile (without them being able to write to the buffer).\n@periodyctom Parallelisation without the double buffering? Is that doable for Entitas? Would determinism be sacrificed? Would reduced memory footprint be the only gain compared to double buffer? It thinks double buffer doesn't really require almost any extra maintenance internally.. I'm wondering about the future of Entitas now that Unity releasing it's own ECS.\nUnity's new ECS + Job System + Compiler Tech is an insanely optimized system.  They claim that their code is even faster than vectorized C++ code, because of their custom compiler optimizations. And this will be available only in Unity. They have manual memory management with all it's drawbacks and performance advantages with zero garbage allocation. That's gonna be the \"right\" way to create games, and all advanced Unity developers will learn it. Unity has almost 100% multicore utilization.\nEntitas probably won't be able to reach the same level of performance. Entitas might have better API though and better workflow now with compiler. But then Unity ECS probably gonna have better support, docs and tutorials. Most of the developers don't look for super high performance, they just want a good architecture and API that are easy to work with. Also Entitas is portable and can be stand alone. The reactive systems might be an optimization (is it?) that Unity doesn't have (at least yet).\nI'm not even sure what I would choose, of course, depends on a project as well.\n. Nevermind the [1. Sidenote] I forgot about group events. But still a bit unintuitive that groups are created in the background when they are requested, and I would mention it in the Wiki. I mean you do say that they are cached, but maybe I'm too dumb to be sure what that means :). Awesome! Thanks. And one more:\n7) Context separation. Also a big question. I see I'm not the only one who has that question, but I haven't found an explanation that gives an understanding necessary to be able to decide how many contexts to use and what are the implications of having multiple contexts. When should I separate them and when I should not?. Cool. Thank you.. I would just call it EntityManager. Very clear purpose. The fact that it's two words is not an issue at all because autocompletion, and the name of the class is not used a lot actually. You would have:\nGameEntityManager _manager;\n_manager  =  EntityManagers.game;\nYeah, @JuDelCo, thanks,  I probably should have responded there, but I figured it was a closed issue specifically about Pool vs Context.. @JuDelCo Yes, thanks, I mentioned it.\n@paraboxx Aren't we talking about different entities though, if you have your GameEntity and InputEntity? I JUST started learning Entitas so I don't even know if you can take the same entity in different contexts and see different components on it depending on the context. Is that the case? If so, then yes, that makes things clearer to me.. I see, but on the other hand, components are just available to different entity managers or to different types of entities. So when you put [Game] in the component definition, you are saying that this component is a part of GameEntity.\nA \"Factory\" kinda works perfectly in this particular example. Factory has components to build entities from. Some components are available for certain factories and some are not.\nI'm a little OCD about my namings. Ironically that's one of the reasons why I'm switching to Entitas :) That is always an issue in OOP.. So in a case of EntityManagers, you are not generating contexts, you are generating entity types, and each entity type has its own manager. Components are declared available to different entity types. If you want to destroy or create a GameEntity, you go to GameEntityManager. EntityManager manages entity pools and entity lifecycle, and also Groups. A lot of stuff to manage if you ask me :D\nMm.. I actually don't see disadvantages or incoherences with EntityManager naming now.. Well, that wasn't a long discussion, @VirtualMaestro, and I have read it... Unless you mean not the #99 And not a lot of people were enthusiastic about Context, so I thought I'd ask. \nIt's not like it's \"ManagerControllerSystemThingy\" but I'll take the point about Manager in general. But I don't agree that it is always a bad thing.\nI just wish there would be a better option for everybody. I'm sure I would get used to any name.\nIf Context is not an intuitive name by default (I think I made the case) even if it is a good name at the end of the day (and I can kinda see why it would be), then ideally there should be a definition of Entitas' Context/Pool class from which its current name becomes self-explanatory. Because right now, it's funny, it's like the Dao that can't be named. When I will become zen enough I'm sure I will know the True Dao and the true meaning of Context \ud83d\ude04\nThe simple and intuitive definition in the Wiki doesn't have very much to do with the name of the class: \"The Context is the factory where you create and destroy entities.\"\nSo just logically the intuitive name is Factory or a synonym. I'm just exploring the subject of intuitive naming at this point.. \n. Well, thank you, that did something because now I get:\n[Error - 1:53:41 PM] Server initialization failed.\n  Message: java.lang.reflect.InvocationTargetException\n  Code: -32603. @mzaks Oops, sorry. When the first error was happening, I renamed the file, I don't remember why. Now I changed the name to what it's supposed to be, and it works.\nThank you for the quick response. \nWiki probably needs to mention the java runtime requirement. At least there is a wrong link to VS extension installation instructions, so I just googled to find out how to install the .vsix file, and if java was mentioned on VS website, that's why I missed it.. Cool. Note that point 3 link redirects to: http://code.visualstudio.com/docs/extensions/publish-extension\n\n. That was a part of some random post somewhere. You can just give instruction to open the command line in VS Code (Ctrl+Shift+P) and type in: \"install from VSIX\" then locate and choose the downloaded previously extension file.. I'm totally nitpicking here, but I hate that my poor word selection is now in the Wiki, so I would better word it like this: \"Open the command line in VS Code (Ctrl+Shift+P) and enter the following command: \"install from VSIX\" Then locate and select the downloaded extension file.\" \ud83d\ude04. Also, could Entitas-lang generate the System files automatically, so all I would have to do is to fill them in and maybe move?\nIdeally of course Entitas-lang would have settings for directories and .entitas file names.. @sschmid Yes.\n@T2RKUS Yes, Ctrl+Shift+F works, when there are no name collisions. Then file names... \nIdeally working in Entitas-Lang (in .entitas) there would be an F2 rename command, and it would do all the refactoring, including file names. And \"Go To Definition\" would send you to the implementation of the system, the framework of which, again, could be generated automatically. \nThose quality-of-life features would save a lot of time and effort, especially to newbies like me. DSL itself is definitely a great fit for Entitas, and it is a step in that direction. . Turns out I was using some wrong syntax when testing it. So it seemed like it wasn't there.. I see, thx.. You mean someone wants to use blueprints in non-Unity apps? If that is the case then current blueprints probably already work for them. In Unity, it is far better to have things serialized by Unity itself. \nThis approach can work with runtime serialization, this class is perfectly serializable. And if you want non-Unity, this can be wrapped. I need help making this. I have no experience with reflection, so I think code generation will be hard for me. (At least so I thought, now I'm looking into code generator.)\nUnless current blueprints can be as reliable and are easier to make work, and unless they also can serialize everything this example can, I think this is a good way to go. This one potentially supports even refactoring with [FormerlySerializedAs] which Entitas could utilize. \n. Actually, game state saving and blueprint integrated system seem pretty simple.\n\nGenerate serializable versions of all components. \nGenerate a class like a blueprint in the initial post but not Unity-specific, use it as C# blueprint.\nWrap it into or generate ScriptableObject version just like in the example above, for Unity blueprint.\nBlueprints should be able to be serialized into files.\nHave a method that will serialize given list or a group of entities into files using those blueprints.\n\nThis would make a very easy to use runtime serializer out of the blueprint system.\n\nOptionally, have a [SerializeComponent] or [DoNotSerializeComponent] attributes to mark components that you want to be serialized during runtime. But serialize all for the blueprints. In generated serializable components have a bool _serializeAtRuntime.. I think it can be portable by breaking down in 2-3 files and just using a ScriptableObject as a wrapper, but it might be easier to just generate Unity version separately. Internally they both would implement the same interface, so it is just a matter of one code generator addon for Unity. Blueprints are already pretty unity-specific at least partially.. I think I have read in the chat that someone was implementing something like this. Whoever it was, please respond here if you have some progress or have it working already :smile:. @pixeption Idk, possibly. Were you working on this? How is it going? . This would make a good Entitas Plus feature :). It's not going anywhere for now. Should I close it? \ud83d\ude04 . @pixeption Isn't it almost the same code though? Mine and what you tried to achieve? Just change  : ScriptableObject to : MonoBehaviour and you can use it on game objects. And it is easy to implement yes. Problem is that for me it won't save any time doing so, but when someone will do this it will save time to a lot of people and improve workflow in the editor. Wink-wink nod-nod to @sschmid again :) It would be a great Plus/Pro/Delux feature.. Is there some sort of version control for the Wiki? I'd like to participate in reorganizing it, I'd make a general structure and fill it in with existing text or placeholders.. This is the general structure. I want to get more experience working with Entitas first, then I might get my hands on the Wiki directly and submit some of my suggestions.. Thank you. I'll look into it. I'm not actually gonna be using Entitas for a while until I finish my current game. I'm thinking about my next game, so I hope that maybe you'll find the time to implement this by then (prob 4 months from now at least).. But currently, Entitas supports that kind of thing via IEntityIndex, right? Just not as a single attribute? In that case that won't be a problem for me, as long as it is integrated with Entitas and I don't need to hack that kind of solution in via some external system, although even that could be acceptable.. I guess you could have MonoBehaviours for your UI infrastructure that would link your UI to entities by generating view entities and UI events. You can have one class initiating and handling the whole UI or you can separate it into elements. Very rough example:\n\n```csharp\npublic class LevelSelectionMenu: MonoBehaviour\n{\n    [SerializeField] private GameObject _levelButtonPrefab; // For dynamically generated buttons.\n    Contexts _contexts = Contexts.sharedInstance;\npublic static void Initiate() // Can be called from a system.\n{\n    // Instantiate your buttons if they are dynamically generated.\n\n    // Create entity for entitas to be able to control this menu.\n    // This would allow you to, for example, disable and enable and move this menu \n    // from a System.\n    var e = _contexts.ui.CreateEntity();\n    e.AddGameObject(gameObject);\n    e.AddTransform(transform); \n    e.isLevelSelectionMenu = true;\n}\n\n//Link your UI elements to these methods.\nprivate void OnLevelSelectionButtonPressed(int index)\n{\n    var e = _contexts.ui.CreateEntity();\n    e.AddLevelSelectionButtonPressed(index); \n}\n\nprivate void OnExitButtonPressed()\n{\n    //Create input entity for this event.\n}\n\n}\n```. I'm personally so used to prefabs and being able to reference any assets and components directly in a prefab, that it's hard for me to imagine a better workflow (than prefabs). And I think the majority of Unity developers are using that workflow.\nCurrently, it means that in Entitas I need to create scriptable objects for each type of object, and then a method that would read it and configure the object, and it is simple but it could be automated/generated.\ncsharp\npublic static GameEntity CreateSpaceship(this GameContext context, Vector3 position, SpaceshipData data)\n{\n    var entity = context.CreateEntity();\n    entity.AddSpeed(data.playerSpeed);\n    entity.AddHealth(data.playerHealth);\n    if (data.isSomething)\n        entity.isSomething = true;\n    //etc, etc.\n    return entity;\n}\nSo this approach is better for me than current blueprints, but ideally it would be automated and be like that:\ncsharp\npublic static GameEntity CreateSpaceship(this GameContext context, Vector3 position, SpaceshipBlueprint blueprint)\n{\n    var entity = blueprint.CreateEntity();\n    entity.ReplacePosition(position);\n    return entity;\n}\n. Having some systems executed in Update and some in FixedUpdate was my first solution, but then doesn't it create problems with input or other things that have one frame life cycles and have to be cleaned up at the end of the frame?\nFor example, I create Input event entities in Input systems, and I clean them up on Cleanup(). If have systems in the Fixed update they won't receive the input, right? Or did I do something wrong? \nSo instead I just Update my static FixedTime component on every FixedUpdate() and have my systems react to it.. @aefreedman But If I create and cleanup (destroy) input entities inside an Update() than why does it matter if they are reactive? When are reactive systems triggered?  I thought reactive systems are triggered on Execute() and when it happens they receive all the accumulated changes from the collector.. I like that. Great idea, having a free and a \"plus\" version, great way to support the development. What kind of pricing can we expect for the Plus? Is it license per seat?\nWe all benefit from Entitas being as popular as possible and you being able to focus on it.\nTake your time with the release, you better have a complete documentation by the time, to avoid bad reviews \ud83d\ude04 . I would actually strongly suggest not to publish the free version before it is as user-friendly as possible. At least until it has a complete and easy documentation, and preferably the Roslyn compiler. Otherwise, the potential customers might be put off and not come back when it's ready. Ratings might also get affected negatively by that.\n(Documentation has to have good navigation for each element of Entitas, so if you want to see how Component should look like or to learn everything about component you would click on \"Components\" in the table of contents. It is better to duplicate information than fragment it.)\nAs we said in the chat ideally compiler would be the free feature and multithreading would be paid. Maybe also blueprints paid.. Yeah, I ran into that myself in the Systems page before. Fixed this one too. Guess you can close this :)\nEdit: Now I actually did. . ",
    "ivankuzev": "What about making the CodeGenerator  to output Enum in addition to all the constants? you wont use it anywhere in the system so no performance drawbacks. and it will only be compiled if somebody decides to use it to get the component ids this way.\n. String array was no good. I went with the other suggested way. Nice extendable generator system.\nHad a bump with the ComponentLookupTags function. its somewhere in the core code generator but it is used exclusively by the  ComponentIndicesGenerator same with the filename constant.\nHere is a Link If you want a copy\n. ",
    "VirtualMaestro": "IDisposeSystem\n. Don't forget that adding new API also brings complexity. Is new API really valuable or it is only a sugar?. > If you call SomethingManager, or SomethingController, that you don't understand what that thing is \n\nexactly.\n\nAbsolutely true. Besides that, we already had the long discussion about this topic (you should read it) and current name expresses exactly what it is.. Hey Simon!\nMy congratulations to you with such a decision!\nYou are implementing my dreams :)\nWish you all the best on this way!\nP.S.: it's a pity you're not in Hamburg :). ",
    "DanijelC": "EntityCollector better describes the intention of class than GroupObserver.\nIt observes one or more groups and collect entities by GroupEventType/s, so I agree.\n. Maybe RecycleSystem, because useless entities are not only cleaned, they are returned back to pool to be reused again. \n. ",
    "oxysoft": "np, I kind of had that feeling, it's just that the wiki instructs you to copy the whole content of the zip into your assets folder so perhaps it should be updated for clarity\n. Ah, I kind of figured there wouldn't really be a good fix for this. Correct me if I'm wrong, but there was some discussion about using Roslyn for the code generator instead of precompiled binaries, I believe it would resolve these issues?\n. ",
    "Eforen": "Found problem accidentally matching across multiple component id pools.\nFor anyone else with this issue Check your Generated ComponentIds files for example here I had CoreComponentIds.GameBoard = 4 and ComponentIds.Moveable = 4 thus they count as the same component for matching purposes. If you need help with yours feel free to comment here or @ me in your issue\n. ",
    "GreatVV": "@aqaddoumi I solved similar problem using UniRx (https://github.com/neuecc/UniRx)\nMy problem was that I have a long chain-like very specific multi-step scenarios which used the same core gameplay (it's a story-driven painting game for kids)\nI will describe my case in more details. I have a simple story. For example You need to paint a chicken, then you need to paint an egg and then you need to put the chicken on the egg.\nI have a basic drawing system in entitas. And I need to change pool state one time (e.g. change painting target from chicken to egg). \nSo it's just one time operation with very specific data and for me creating system which listen only for one state seemed like a big overhead and it was very time consuming (i tried)\nso I just created a unirx sequence with actions listened to specific states and now it looks awesome\nI have utility class methods like this:\n``` csharp\n      public static IObservable WaitToPaint(string name)\n        {\n            return Observable.Create(observable =>\n            {\n                var characters = Pools.painting.GetGroup(PaintingMatcher.Name);\n                var targetCharacter = characters.GetEntities().First(x => x.name.Name == name);\n                targetCharacter.isCanBeEdited = true;\n                Debug.Log(\"anim: \"+targetCharacter.animator.Animator);\n                Debug.Log(\"anim: \"+targetCharacter.animator.Animator.name);\n                targetCharacter.animator.Animator.SetTrigger(AnimatorConstants.StartdrawingTriggerName);\n                Group.GroupChanged changed = (@group, entity, index, component) =>\n                {\n                    if (entity.name.Name == name)\n                    {\n                        Debug.LogFormat(\"{0} had drawn\", name);\n                        targetCharacter.isCanBeEdited = false;\n                        targetCharacter.isEdit = false;\n                        observable.OnCompleted();\n                    }\n                    else\n                    {\n                        Debug.LogFormat(\"It's not a {0} \", name);\n                    }\n                };\n            var targetGroup =\n                Pools.painting.GetGroup(Matcher.AllOf(PaintingMatcher.RootCharacterController, PaintingMatcher.Edit,\n                    PaintingMatcher.Animator, PaintingMatcher.ControlCamera));\n            targetGroup.OnEntityRemoved += changed;\n\n            var feature = PaintingUtility.AddPaintingSystems(Pools.painting, Pools.uI, Pools.storage);\n            Debug.LogFormat(\"Start draw {0}\", name);\n            observable.OnNext(targetCharacter);\n\n            return Disposable.Create(() =>\n            {\n                feature.DeactivateReactiveSystems();\n                targetCharacter.isCanBeEdited = false;\n                targetCharacter.isEdit = false;\n                targetGroup.OnEntityRemoved -= changed;\n            });\n        });\n    }\n\n```\nAnd steps itselfs like this\n``` csharp\nprotected override IObservable Stage1()\n        {\n            return Observable.Concat(\n                WaitForDrawChicken(),\n                Observable.Empty().DelayFrame(2),\n                WaitForDrawEgg(),\n                WaitForDragChickenToEgg(),\n                WaitForEggShakeAnimation(),\n                EggTapMiniGame()\n                );\n        }\n    private IObservable<Unit> WaitForDrawEgg()\n    {\n        return StoryUtility.WaitToPaint(CharacterNames.Egg).Select(character => character.isEdit = true ).DoOnSubscribe(() =>\n        {\n            if (Pools.painting.hasEnviromentController && Pools.painting.enviromentController.Controller.Animator){\n                Pools.painting.enviromentController.Controller.Animator.SetTrigger(AnimatorConstants.StageCompleted);\n            }\n        }).DoOnCompleted(() =>\n        {\n            var egg = StoryUtility.GetByName(CharacterNames.Egg);\n            egg.isDraggable = false;\n        }).AsUnitObservable();\n    }\n\n```\nSorry for dirty code - it's a first version of code.\nOf course, UniRx it's totally different from Entitas and I had some problem with such approach.\nBut code is still testable (not in this case of course)  and short\n. I had the same problem. I just rechecked \"Enable Visual Debugging\" checkbox in Entitas Preferences. @sschmid Can you make any update about status of entitas? Because I just want to have new version ). ",
    "LRP-sgravel": "ok, then why is it public?  From what I can see it's only public for a unit test... it would be easy to fix that and most likely the add and remove variants as well.\n. Possibly, I wasn't aware of that branch!\n. ",
    "benzsuankularb": "@sschmid Currently CustomComponentName is obsoleted but ComponentName.\nCan I use ComponentName with IComponent at this time?. I upvoted this issue.\nI've saw there's plenty of use for this.\nIf you want to have many parts of games in a single project. Why don't we separate it to other Contexts by generating along with namespace?\nThink about a project with mini-games. There shouldn't be coupled in a single Contexts.\nAnd also case like separate core-loop and game completely.. I'm not sure if it the same with this issue. But I think it's different cases.\nhttps://github.com/sschmid/Entitas-CSharp/issues/323\n@sschmid If you interested for Entitas1.8.3. List of things to update will be cool.\nEasier for someone else to PR. :). My Entitas.properties\n```\nJenny.Ignore.Keys = \nJenny.SearchPaths = Jenny/Jenny/Plugins/DesperateDevs, \\\n                    Jenny/Jenny/Plugins/Entitas, \\\n                    Jenny/Jenny/Plugins/Entitas.Roslyn\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = MyProj.csproj\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = ./\n```\njenny doctor said happy coding.. @kkohno \n\nI will add, that Jenny have bug with pure C# projects: It is only works if your generated output folder is in Assets folder root, even if you change this paths in *.properties file\n\nNah, Still not work.\nBut maybe it's a bug like you said.\n\nalso you can make following bat file to generate without servers and unity:\npushd %~dp0\n.\\Jenny\\Jenny.exe gen\npopd\n\nYeah, But what's the point of server then?. issues 706 No help with this.\n\nSimilar issues:\nissues 803\nI think the same issue here. But that's in Unity. From @sschmid mentioned there.\n1. Correct project name for sure.\n2. My component inherited Entitas.IComponent.\n3. I'm not in Unity but I've tried both .netstandard2.0 and .netframework4.7.\n4. If I remove <TargetFramework>netstandard2.0</TargetFramework> project will unable to restore.\nissues 759\nMaybe look like the same issue but I don't know why he can get it worked on .netframework.\nissue 798\nissue 798\nNo info. But maybe the same problem.\nPretty severe somehow I think.. @sschmid I've removed the repo. Apologize for that, I didn't mean to do it.\nHere's the new sample repo.\nPlease investigate this, I can't continue working on the project.. netstandard2.0. @sschmid \n.framework is OK but still not working with .netstandard and .netcore.\nI think it's about <Compile Include=\"...\"> not working on .netstandard.\nI've updated 100% as you describe in the wiki.\nhttps://github.com/benzsuankularb/EntitasIssue806. Thanks a lot. I forget about having reference from netcore to net4.x.. Also the new version of Visual Studio for Mac unable to open if not mono 5.16.\nAnd we can't downgrade VS mac. I've tried.. ",
    "zmox": "@sschmid  thank a lot.  I got it. @sschmid\nI think maybe blueprint Serialization using JsonUtility is good option.\nbinary can not  be  modified Manually.. oh, this is what I want. thanks a lot. @sschmid . ",
    "Blucky87": "@WoLfulus would it not be possible to just add\ncsharp\nusing Entitas;\nnamespace Entitas {\n    public partial class Entity {\n      public Entity AddFoo(){\n         return AddComponent(BarPoolComponentIds.Foo, CreateComponent<Foo>(BarPoolComponentIds.Foo);\n      }\n   }\n}\nto a new file. Like what is autogenerated? \n. ",
    "svanderweele": "Is this possible with the new Roslyn plugin? . Tried to approach it differently and this is what I ended up with:\n\nI think that's a little complex for it since when I come to actually creating the entities I need to add all those components just for movement, what do you think?\n. Thanks for your feedback guys. \nRegarding entity references, is it a bad practice to hold a List? I've got an Ore Vein which creates Ore Branches for each miner that targets it, the Ore Vein needs to keep a reference to all it's branches to make sure they're removed when it's destroyed. So would a ParentComponent containing a List be a bad idea? \n. I require the list because I need the entities that were created by another specific entity, I don't think a group will cut it unfortunately.\nAnother example would be AI Sight, If I want to keep a list of entities my AI can 'see', how would I go about it? I'm thinking of two possible approaches, one where I keep a list of SightTargetsComponent, and other where I use a context extension to GetSightTargets(GameEntity e) which will return all entities in sight.. For the SightTargets I decided to use a component with a List of Entity IDs, and for Targeting I've decided to use a static class with a method GetEntityTargets, which gets all entities with targets and crossmatches the ID. Seems to be a good approach for this issue.. That's exactly how I managed to work around it, thanks for the suggestion. Hopefully, this will help others with the same issue :). When you say group events directly what exactly do you mean?\nThis is the approach I've started using with Triggers\nprotected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n        {\n            return context.CreateCollector(GameMatcher.Target.AddedOrRemoved(), GameMatcher.AIState.AddedOrRemoved(), GameMatcher.MoveComplete.Added());\n        }\nDo you mean events like OnEntityRemoved etc?\n. So after testing this for some time I found that adding these\nm_systems.DeactivateReactiveSystems();\n         m_systems.ClearReactiveSystems();\n         m_contexts.game.DestroyAllEntities();\ninstead of using Destroy All Entities gets the job done, so why doesn't Destroy All Entities use these methods and how can I get it to work without these calls? \nI hope you don't mind all these questions but I'm trying to learn by example and I can't seem to find this info in previous issues/wiki, so I'm hoping they will help others too.. So Contexts will not change anything from systems, good to know, thank you!. Great, thanks for your answer!. The GitHub version does not have the zip used in the video, only the asset store paid version does. In your case, you can use the internal generator not the external one, in Unity I believe it's found in the task bar Tools > Jenny > Generate\n(All of this info is explained in this youtube video https://www.youtube.com/watch?v=LGKsqSg5FHg)\nRegarding your question whether or not it's a better generator, it makes use of the Rosyln plugin which allows compilation even when syntax errors are present, it's not necessary but it definitely speeds up your workflow and makes it a lot easier to modify variable types without having to go through generated code and fixing loose ends. \nAlso the fact that you can host a server and attach that to your IDE for very quick compilation time is awesome.. Didn't think of it like that, thanks man!. Definitely, it all makes sense now, I'll start using it more often :). I'm such a doofus.\nUse tasks.json\n{\n            \"label\": \"run entitas server\",\n            \"command\": \"mono Jenny/Jenny.exe client gen\",\n            \"type\": \"shell\",\n            \"group\": \"build\",\n            \"problemMatcher\": []\n        }. I agree with this, being able to use contexts to organise my code better would be incredible.\n. I realised that this is less an issue of Entitas and more an issue of project management.. So the way I targeted this issue was by keeping the reference and then maintaining the relationship by adding an IListenerEntityDestroyed to handle the removal of the GameObject/Reference. \nSeems to work well, couple that with a factory for creating health bars and you've got a generic approach on your hands. \nFeel free to contact me if you have any questions :). HO, I totally disregarded the EntityIndex attribute! You're a genius, thanks man!. Defining the execution by use of nested features seems to be the best approach. I'll just use CoreInit, CoreExecute, CoreInput for my library then create MainInit and just add grouped features in there.\nThanks for your help :). And the reason for doing this is to create a central validation system?. Why use a Service rather than a ReactiveSystem for example?\nIn the Match One Demo, AddViewSystem was replaced with a ViewService which listens for the adding of an AssetComponent, how is that different to having a ReactiveSystem which reacts to the same component?. That makes sense, thanks!. Thank you for your input guys, that cleared it up for me.. The reason is for sprite swapping. I've got Pirate units that have interchangeable parts, different shirts, different weapons etc.\nBut now I'm wondering how you would do this without using systems? \n````\nusing UnityEngine;\nnamespace Siege.ECS.Services.Character\n{\n    public class SiegeBodyPart : MonoBehaviour\n    {\n        public BodyPartId id;\n        public Sprite[] Sprites;\n    void Start()\n    {\n        GetComponent<SpriteRenderer>().sprite = Sprites[Random.Range(0, Sprites.Length)];\n    }\n\n}\n\npublic enum BodyPartId\n{\n    Head,\n    Torso,\n    Left_Arm,\n    Right_Arm,\n    Left_Leg,\n    Right_Leg\n}\n\n}\n````. I think the approach I proposed better maintains the principles of ECS, avoiding inheritance etc.\nFor dependant stats I think I would use a StatService with a method Calculate, and then have it call a HandleDerivedStats method or something which would have a bunch of if statements, if(statID == \"critical\") //depends on agility * strength / dexterity and returns a new value.\nHonestly I think it'll be more manageable that way, but thank you for your input :)!. After giving this some thought I'm thinking using a State enum that will filter which systems are updated.\nMain.cs\n   //**Initiating code omitted **\n    public static GameState State;\n\n    public enum GameState\n    {\n        Game,\n        Pause,\n        Shop\n    }\n\n    public static bool IsDebug = false;\n\n    void Update()\n    {\n        switch (State)\n        {\n            case GameState.Game:\n                _gameSystems.Execute();\n                _gameSystems.Cleanup();\n                break;\n            case GameState.Pause:\n                _pauseSystems.Execute();\n                _pauseSystems.Cleanup();\n                break;\n            case GameState.Shop:\n                _shopSystems.Execute();\n                _shopSystems.Cleanup();\n                break;\n            default:\n                throw new ArgumentOutOfRangeException();\n        }\n\n        if (IsDebug)\n        {\n            _debugSystems.Execute();\n            _debugSystems.Cleanup();\n        }\n    }\n\nHas anyone used this approach? If so, how did it work out for you?. What about Unique Flag Components set to the Context such as, AiDisabledComponent, MovementDisabledComponent, UnitUIDisabledComponent for specific control then have main components which will also be used for bulk management such as GameplayPausedComponent? That way it'll be somewhat easier and quicker to manage.\nUpdateAiSystem.cs\nvoid Execute(entities)\n        {\n            if (_contexts.game.isGameplayPaused == true || _contexts.game.isAiDisabled == true)\n                return;\n            //else update\n        }\nThen I could have a StateService  to manage bulk components and state switching.\nStateService.cs\nvoid SetState(StateEnum state)\n        {\n            if (state == StateEnum.Paused)\n            {\n                //gameplayUiDisabled = true\n                //gameplayPaused = true\n            }\n        }. I think that idea should do it! \nThank you very much :)!. Did you place the 'Jenny' folder (found in the Entitas folder when you imported it) in your Project folder?  \n\nIf you have, did you run auto-import in the Tools/Jenny/Auto-Import to setup your project?\nIf you have also done that that check your Preferences.properties file in your Project and make sure the TargetDirectory is set correctly\n\nBased on the information you provided that's all the help I can offer. I'm sorry I didn't realise that you commented until now..\nI also just checked this tutorial https://www.youtube.com/watch?v=L-18XRTarOM and realised that I made a mistake. The approach I suggested is for the external generator which is also covered in that video. Did you by any chance follow that video to set it up initially?\n. Just created a new project with 1.6.0 and it all worked fine. If you'd like to send me the project I'll look into it for you.. Glad to hear you got it sorted :). Just found it mentioned in #810, will be fixed next release. Weird, I must have imported it incorrectly. I just removed all my namespaces from the project and am about regenerate (don't need the namespaces anyhow). \nWould you like the source of the previous build to try root out the problem or wait for more reports (if there are any)?. Okay so Namespaces completely removed from project, ignore namespaces set to false. Deleted Entitas + DesperateDevs folder not overwrite and also deleted Generated folder. \nHitting generate produces the same results as before, as shown in pictures.\nIt doesn't seem to be generating the Component related information, only the listener part.\nGamePositionListenerComponent.cs (EventTarget.Self)\n```\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic PositionListenerComponent positionListener { get { return (PositionListenerComponent)GetComponent(GameComponentsLookup.PositionListener); } }\npublic bool hasPositionListener { get { return HasComponent(GameComponentsLookup.PositionListener); } }\n\npublic void AddPositionListener(System.Collections.Generic.List<IPositionListener> newValue) {\n    var index = GameComponentsLookup.PositionListener;\n    var component = (PositionListenerComponent)CreateComponent(index, typeof(PositionListenerComponent));\n    component.value = newValue;\n    AddComponent(index, component);\n}\n\npublic void ReplacePositionListener(System.Collections.Generic.List<IPositionListener> newValue) {\n    var index = GameComponentsLookup.PositionListener;\n    var component = (PositionListenerComponent)CreateComponent(index, typeof(PositionListenerComponent));\n    component.value = newValue;\n    ReplaceComponent(index, component);\n}\n\npublic void RemovePositionListener() {\n    RemoveComponent(GameComponentsLookup.PositionListener);\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic sealed partial class GameMatcher {\nstatic Entitas.IMatcher<GameEntity> _matcherPositionListener;\n\npublic static Entitas.IMatcher<GameEntity> PositionListener {\n    get {\n        if (_matcherPositionListener == null) {\n            var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PositionListener);\n            matcher.componentNames = GameComponentsLookup.componentNames;\n            _matcherPositionListener = matcher;\n        }\n\n        return _matcherPositionListener;\n    }\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic void AddPositionListener(IPositionListener value) {\n    var listeners = hasPositionListener\n        ? positionListener.value\n        : new System.Collections.Generic.List<IPositionListener>();\n    listeners.Add(value);\n    ReplacePositionListener(listeners);\n}\n\npublic void RemovePositionListener(IPositionListener value, bool removeComponentWhenEmpty = true) {\n    var listeners = positionListener.value;\n    listeners.Remove(value);\n    if (removeComponentWhenEmpty && listeners.Count == 0) {\n        RemovePositionListener();\n    } else {\n        ReplacePositionListener(listeners);\n    }\n}\n\n}\n```\nGameAnyAssetListenerComponent.cs (EventTarget.Any)\n```\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic void AddAnyAssetListener(IAnyAssetListener value) {\n    var listeners = hasAnyAssetListener\n        ? anyAssetListener.value\n        : new System.Collections.Generic.List<IAnyAssetListener>();\n    listeners.Add(value);\n    ReplaceAnyAssetListener(listeners);\n}\n\npublic void RemoveAnyAssetListener(IAnyAssetListener value, bool removeComponentWhenEmpty = true) {\n    var listeners = anyAssetListener.value;\n    listeners.Remove(value);\n    if (removeComponentWhenEmpty && listeners.Count == 0) {\n        RemoveAnyAssetListener();\n    } else {\n        ReplaceAnyAssetListener(listeners);\n    }\n}\n\n}\n```\n. Generating both EventTarget.All and EventTarget.Self results in the Generator writing to the same Class\n```\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic ChildOfListenerComponent childOfListener { get { return (ChildOfListenerComponent)GetComponent(GameComponentsLookup.ChildOfListener); } }\npublic bool hasChildOfListener { get { return HasComponent(GameComponentsLookup.ChildOfListener); } }\n\npublic void AddChildOfListener(System.Collections.Generic.List<IChildOfListener> newValue) {\n    var index = GameComponentsLookup.ChildOfListener;\n    var component = (ChildOfListenerComponent)CreateComponent(index, typeof(ChildOfListenerComponent));\n    component.value = newValue;\n    AddComponent(index, component);\n}\n\npublic void ReplaceChildOfListener(System.Collections.Generic.List<IChildOfListener> newValue) {\n    var index = GameComponentsLookup.ChildOfListener;\n    var component = (ChildOfListenerComponent)CreateComponent(index, typeof(ChildOfListenerComponent));\n    component.value = newValue;\n    ReplaceComponent(index, component);\n}\n\npublic void RemoveChildOfListener() {\n    RemoveComponent(GameComponentsLookup.ChildOfListener);\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic ChildOfListenerComponent childOfListener { get { return (ChildOfListenerComponent)GetComponent(GameComponentsLookup.ChildOfListener); } }\npublic bool hasChildOfListener { get { return HasComponent(GameComponentsLookup.ChildOfListener); } }\n\npublic void AddChildOfListener(System.Collections.Generic.List<IChildOfListener> newValue) {\n    var index = GameComponentsLookup.ChildOfListener;\n    var component = (ChildOfListenerComponent)CreateComponent(index, typeof(ChildOfListenerComponent));\n    component.value = newValue;\n    AddComponent(index, component);\n}\n\npublic void ReplaceChildOfListener(System.Collections.Generic.List<IChildOfListener> newValue) {\n    var index = GameComponentsLookup.ChildOfListener;\n    var component = (ChildOfListenerComponent)CreateComponent(index, typeof(ChildOfListenerComponent));\n    component.value = newValue;\n    ReplaceComponent(index, component);\n}\n\npublic void RemoveChildOfListener() {\n    RemoveComponent(GameComponentsLookup.ChildOfListener);\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic sealed partial class GameMatcher {\nstatic Entitas.IMatcher<GameEntity> _matcherChildOfListener;\n\npublic static Entitas.IMatcher<GameEntity> ChildOfListener {\n    get {\n        if (_matcherChildOfListener == null) {\n            var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ChildOfListener);\n            matcher.componentNames = GameComponentsLookup.componentNames;\n            _matcherChildOfListener = matcher;\n        }\n\n        return _matcherChildOfListener;\n    }\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic sealed partial class GameMatcher {\nstatic Entitas.IMatcher<GameEntity> _matcherChildOfListener;\n\npublic static Entitas.IMatcher<GameEntity> ChildOfListener {\n    get {\n        if (_matcherChildOfListener == null) {\n            var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ChildOfListener);\n            matcher.componentNames = GameComponentsLookup.componentNames;\n            _matcherChildOfListener = matcher;\n        }\n\n        return _matcherChildOfListener;\n    }\n}\n\n}\n//------------------------------------------------------------------------------\n// \n//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// \n//------------------------------------------------------------------------------\npublic partial class GameEntity {\npublic void AddChildOfListener(IChildOfListener value) {\n    var listeners = hasChildOfListener\n        ? childOfListener.value\n        : new System.Collections.Generic.List<IChildOfListener>();\n    listeners.Add(value);\n    ReplaceChildOfListener(listeners);\n}\n\npublic void RemoveChildOfListener(IChildOfListener value, bool removeComponentWhenEmpty = true) {\n    var listeners = childOfListener.value;\n    listeners.Remove(value);\n    if (removeComponentWhenEmpty && listeners.Count == 0) {\n        RemoveChildOfListener();\n    } else {\n        ReplaceChildOfListener(listeners);\n    }\n}\n\n}\n```. Oh I see, that's it then :) \nI'm curious though, what else is there if not roslyn?\nThanks \ud83d\udc4d . Fixed by acquiring Entitas through Unity asset store. ",
    "apheliagames": "@mzaks what would be your best approach for entity-sync asyncronously...i currently use a publish/subscribe system but its a lot of work to react on all changes of different components...i'm just looking for a more generic approach.... ",
    "luochuanyuewu": "So, if i deleted DestoryLineGeneratedExtension.cs, and remove related code about \"DestoryLine\" in ComponentIds.cs, then i can regenerate code correctly. \n. @WoLfulus \nI have noticed your repo few days ago. but i din't find any information on how to use it. adding a readme or something like that is much appreciated!\n. @WoLfulus \nOh, thanks, glad to hear that.\n. ",
    "Arpple": "it's not the same but I think it is similar to my question here #218\nyou can't do that with current code generator now\nbut you can do it manually. I still want this to happen because I now use scriptableobject as blueprint by manually create it.\nso it will be awesome if I can generate it instead.\nI really want to help on this if I can :D. I haven't read all of your explanation yet, but for situation 1 (and in other async command) I will use an InputEntity with component that have a callback as property like this\ncs\n[Input]\npublic class CmdPlayAnimationComponent : IComponent {\n    public GameEntity Entity;\n    public string Animation;\n    public Action OnAnimationEnd;\n} \nand the reactive system that catch on this will just have to call the callback when it finished\ncs\npublic class AnimationSystem : ReactiveSystem {\n    public void Execute() {\n        //PlayAnimation is just function that will play animation and call callback when end\n        PlayAnimation(cmd.Animation, cmd.OnAnimationEnd);\n        }\nand use a command like this\ncs\nvar cmd = CreateInputEntity();\ncmd.AddCmdPlayAnimation(entity, \"hurt\", () => createCommandThatShowDamage());\nand I combine the concept above with RSG Promise and it become like this\n```cs\n[Input]\npublic class CmdPlayAnimationComponent : IComponent {\n    public GameEntity Entity;\n    public string Animation;\n    public Action OnAnimationEnd;\n}\npublic static class CmdPlayAnimationExtension {\npublic static IPromise PlayAnimation(this GameEntity entity, string animation) {\n    return new Promise((resolve, reject) => {\n        Contexts.sharedInstance.input.CreateEntity(e => e.AddCmdPlayAnimation(entity, animation, resolve));\n    });\n}\n\n}\nand use itcs\nentity.PlayAnimation(\"hurt\")\n    .Then(() => createCommandThatShowDamage());\n```\nhope this help somehow. ",
    "e-gs": "Hi,\nI'm new to the whole ecs thing as well - anyhow I'd approach that task as follows:\nWe need to store the state of the doors, so we should have a door-pool.\nThe door entities need three components:\n-  Id: integer or string so we can address the door\n-  DoorState: boolean to indicate whether the door is opened or closed\n-  View: a reference to a Monobehaviour that represents the door in the scene \nSince we want to change the state of the doors we need some type of input.\nLet's collect the Inputs in an input-pool. Since the Input-Entities only need to tell us which door to change they will merely need one component:\n- Door-Id: int/string telling us which door to open/close\nNow we use a ReactiveSystem that is triggered whenever an Input-Entity is created. The System will then search the Door-Pool for an entity with the given Id (plenty of room for optimization here), change its DoorState and update the view. \nFinally we need two MonoBheaviours a ButtonInputController that creates an Input-Entity when a Button is pressed and a DoorView that displays the DoorState.\nYou could initialize the door-pool from the views OnStart. Every DoorView creates a door-entity and adds the necessary components.\nI hope that makes sense...\nCheers\n. ",
    "Ziboo": "Thanks for your detailed answer.\nThat's actually kind of what I had in mind, but man, that's a lot of code for doing just a simple thing. Just getting my had around ECS it hard.\nI was wondering if Entity or Component instances have a unique ID already built in ?\nThanks. Thanks for your answer :). ",
    "implicit-invocation": "The serialization and deserialization should be easy.\nMy questions are:\n- what is the best way to get all entities and their components in one place?\n- after deserialization, I must create/modify entities to load the data. What should be deactivated/disabled before and reactivated/enabled after the loading process so that my systems can continue processing normally?. ",
    "jgj": "I was able to get a basic proof of concept going for JSON serialization using Blueprints and FullSerializer:\n```csharp\npublic struct GameData {\n    public List entities;\n}\npublic static void SaveGame() {\n    var contexts = Contexts.sharedInstance;\n    GameData gameData;\n    gameData.entities = new List();\nforeach(var context in contexts.allContexts) {\n    Entity[] entities = (Entity[])context.GetType().GetMethod(\"GetEntities\").Invoke(context, null);\n    foreach(var entity in entities) {\n        var blueprint = new Blueprint(entity.contextInfo.name, entity.ToString(), entity);\n        gameData.entities.Add(blueprint);\n    }\n}\n\nfsData serializedGameData;\nfsSerializer serializer = new fsSerializer()\nserializer.TrySerialize<GameData>(gameData, out serializedGameData).AssertSuccessWithoutWarnings();\n\nvar serialized = fsJsonPrinter.PrettyJson(serializedGameData);\nFile.WriteAllText(GAME_SAVE_PATH, serialized);\n\n}\npublic static GameData LoadGame() {\n    string savedJson = File.ReadAllText(GAME_SAVE_PATH);\n    fsData data = fsJsonParser.Parse(savedJson);\nGameData deserialized;\ndeserialized.entities = new List<Blueprint>();\nfsSerializer serializer = new fsSerializer()\nserializer.TryDeserialize<GameData>(data, ref deserialized).AssertSuccessWithoutWarnings();\nreturn deserialized;\n\n}\n```\nThe resulting JSON looks like:\njson\n{\n    \"entities\": [\n        {\n            \"contextIdentifier\": \"Input\",\n            \"name\": \"Entity_0(*2)(Id, Tick)\",\n            \"components\": [\n                {\n                    \"index\": 0,\n                    \"fullTypeName\": \"IdComponent\",\n                    \"members\": [\n                        {\n                            \"name\": \"value\",\n                            \"value\": {\n                                \"$content\": \"f4e968e4-e3a3-4f29-bb0d-de675f95eb7d\",\n                                \"$type\": \"System.String\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"index\": 1,\n                    \"fullTypeName\": \"TickComponent\",\n                    \"members\": [\n                        {\n                            \"name\": \"value\",\n                            \"value\": {\n                                \"$content\": 925,\n                                \"$type\": \"System.UInt64\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\nHydrating the contexts looks like:\n```csharp\nDictionary contextMap = new Dictionary();\ncontextMap.Add(contexts.game.contextInfo.name, contexts.game);\ncontextMap.Add(contexts.gameState.contextInfo.name, contexts.gameState);\ncontextMap.Add(contexts.input.contextInfo.name, contexts.input);\nGameData data = LoadGame();\nforeach(var blueprint in data.entities) {\n    var context = contextMap[blueprint.contextIdentifier];\n    Entity entity = (Entity)context.GetType().GetMethod(\"CreateEntity\").Invoke(context, null);\n    entity.ApplyBlueprint(blueprint, true);\n}\n```\nWould love to get feedback on if there is a better, less Reflectiony way to handle this (especially for saving).. Seems to me if I'm going through the trouble of telling the code generator what context I want the kit to exist in that the code generator should generate code to integrate it transparently into said context. As an end user of a kit, do I really need to make the distinction at compile-time that a set of components/systems came from a kit?\nIt makes sense to me that the code generator would generate versions of the kit's systems/components that function/appear the same as systems/components I've authored myself. Otherwise I'm taking on additional mental overhead to use a kit, which is contrary to the reason I'm using a kit in the first place.\nPerhaps that means creating kit-authoring-specific types (Context, Entity, Matcher, etc) that can function for testing/building a kit and easily be replaced by the code generator with the end user's types?. ",
    "enginerenturk": "I handled this by using partial class. \nNamespaces needed to be corrected for the upper level partial classes. New code is like below\n```\nusing Entitas;\nnamespace X\n{\n    public partial class XYZComponent : IComponent\n    {\n        public string value;\n    }\n}\n\nnamespace X\n{\n    [APool, BPool]\n    public partial class QWEComponent\n    {\n    }\n}\n```. ",
    "culer": "I was able to modify the Blueprint module to use \"SharpSerializer\" instead of BinaryFormatter. Even though this resolved the problem in the Blueprint classes, now I'm getting some other errors:\nAssets\\Entitas\\Extensions\\TypeExtension.cs(11,22): error CS1061: 'Type' does not contain a definition for 'IsInterface' and no extension method 'IsInterface' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Extensions\\TypeExtension.cs(11,42): error CS1061: 'Type' does not contain a definition for 'GetInterfaces' and no extension method 'GetInterfaces' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Serialization\\PublicMemberInfo.cs(21,40): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.IEnumerable' to 'object[]'\nAssets\\Entitas\\Serialization\\PublicMemberInfo.cs(29,40): error CS1503: Argument 1: cannot convert from 'System.Collections.Generic.IEnumerable' to 'object[]'\nAssets\\Entitas\\Serialization\\TypeSerializationExtension.cs(20,21): error CS1061: 'Type' does not contain a definition for 'IsGenericType' and no extension method 'IsGenericType' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Serialization\\TypeSerializationExtension.cs(22,45): error CS1061: 'Type' does not contain a definition for 'GetGenericArguments' and no extension method 'GetGenericArguments' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Serialization\\TypeSerializationExtension.cs(50,21): error CS1061: 'Type' does not contain a definition for 'IsGenericType' and no extension method 'IsGenericType' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Serialization\\TypeSerializationExtension.cs(52,45): error CS1061: 'Type' does not contain a definition for 'GetGenericArguments' and no extension method 'GetGenericArguments' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\nAssets\\Entitas\\Serialization\\TypeSerializationExtension.cs(74,37): error CS0103: The name 'AppDomain' does not exist in the current context\nIf you're interested, I would be happy to talk to you about the problems I'm experiencing in more detail and maybe find a solution together, as I'd really like to use Entitas in my UWP App for Hololens. \n. Hi all, \nsorry for replying so late, I was on vacation for quite a while.\nAs I'm not really experienced in C# and UWP and just started using Entitas I doubt I'll be able to solve the three cases myself in an acceptable amount of time. I think it would be a lot easier to do for @sschmid or someone else who was involved in Entitas development. However, as I'd still like to use Entitas for my Hololens project I could maybe implement a solution if someone gave me an introduction to the affected modules and classes and a hint on how the problems could be solved.\n@sschmid Do you think it will be possible to solve the problems pointed out within the next few weeks or are there any major obstacles that would require too many adaptations?. @sschmid Thanks a lot, I'll definitely do that. Unfortunately, Hololens UWP Apps don't work out of the box when put on GitHub so I just attached a link to a zip file on dropbox: https://www.dropbox.com/sh/mqof16ibexn41bo/AADAL1tmrR3iS8k5_OgWAu7Wa?dl=0\nSome hints: a special version of Unity3D is used for developing apps for Hololens. Furthermore, the right SDKs have to be installed. This is a link to a short introduction from Microsoft on what has to be installed to get started. https://developer.microsoft.com/en-us/windows/holographic/install_the_tools\nI basically just used the so-called \"Origami\"-example project from Microsoft and added Entitas to the assets to keep it as simple as possible while still having all the special settings and stuff set up especially for Hololens UWP projects. See the following tutorial if you need to know more about the example project (I doubt that it's important to resolve the Entitas compile errors but just in case): https://developer.microsoft.com/EN-US/WINDOWS/HOLOGRAPHIC/holograms_101e\nThanks again for helping out!\n. No, I didn't. I was actually waiting what you might find out. Would be great if you could still try to solve it.\n\nSimon Schmid notifications@github.com hat am 31. Januar 2017 um 19:02 geschrieben:\nI must have missed the notification somehow, just read it now. You solved it already?\n--\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/sschmid/Entitas-CSharp/issues/229#issuecomment-276441670\n. \n",
    "Aszan": "Hi there,\nJust managed to compile Entitas-CSharp-Example using UWP profile.\nHave to deal with 3 issues reported by @KumoKairo, namely:\n\nenrich TypeExtension.cs following this pattern:\n```      \npublic static bool IsInterface(this Type type)\n        {\n\nif UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR\n        return type.GetTypeInfo().IsInterface;\n\nelse\n        return type.IsInterface;\n\nendif\n    }\n\n```\n\nUse workaround for AppDomain.CurrentDomain.GetAssemblies:\n```\n\nif UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR\n    public static async Task<List<Assembly>> GetAssemblyListAsync()\n    {\n        List<Assembly> assemblies = new List<Assembly>();\n\n        var files = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFilesAsync();\n        if (files == null)\n            return assemblies;\n\n        foreach (var file in files.Where(file => file.FileType == \".dll\" || file.FileType == \".exe\"))\n        {\n            try\n            {\n                assemblies.Add(Assembly.Load(new AssemblyName(file.DisplayName)));\n            }\n            catch (Exception ex)\n            {\n            }\n        }\n        return assemblies;\n    }\n\nendif\n    public static Assembly[] GetAssemblyList()\n    {\n\nif UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR\n         return GetAssemblyListAsync().Result.ToArray();\n\nelse\n        return AppDomain.CurrentDomain.GetAssemblies();\n\nendif\n    }\n\n```\n\nReplace BinaryFormatterby XmlSerializer\n. Just noticed that Entitas structure has changed compared to the sample embedded version.\nI will try to report my changes asap.. This one is on my list...\nMy next project will definitively use Entitas & my working env. is UWP.... \n",
    "Elzean": "It shouldn't matter however you represent your game, same as an MVC pattern. Can be UI or 3d object does not really matter. Everything that show up in Unity is part of your view, It shouldn't hold any game logic, but nothing stop you from hooking you view to Entitas data with a monobehavior.\nEntitas will manipulate the data of your game / app and put it in a new state. Once that happen your views react to the data, not necessarily with events, just the fact that data are different is already enough to show something different.\nClosing / opening window of UI doesn't change anything to the data of your game, it's usually not important to know if a window is open or not that can just be handle in Unity (the view) and Entitas doesn't need to know about it.\nIn case pressing a UI button act on the game it's exactly the same as killing an enemy or picking up an object, you can then create a new entity for example (inside a monobehavior) and init it, Entitas will naturally react to that newly existing Entity, Systems will manipulate it and change game data if needs to be.\nA game like Eve Online, very heavy on UI, it's just a bunch of window that represent portion of their uge Database, no matter how they design those windows and how they are nested. Again you shouldn't make a difference between a UI and 3d object, you can always represent your game character as a window with a bunch of info (position, health, name etc) and a button for each of his actions (attack, run, jump...) it's the same :p. Hmm, i didnt mean to give you a \"useless\" answer. From your question i felt like you just needed direction on how to handle the UI with Entitas, my point was that it's no different than other element of your Application / Game. I was trying to help, no need to sound so negative :p\nSo from your previous message i guess you want something a bit more concrete.\nThere is various ways to implement UI, in my project i have an ApplicationStateComponent. The UI listen for a \"stateChanged\" from it. Depending on the result the UI will show something different. When clicking a button i generate \"CommandComponents\" that are catch by an Entitas ReactiveSystem and handle the command that was ask by the UI (but the command itself could be generate from something else too). The system change the data, for example right now it fetch data of the player from the server and fill the information. Again UI simply react to the change and display the information.\nFor other smaller UI interaction that happen within a state and doesnt act on the data of the game this is handle within the UI, like close/open a nested window, change tab etc.\nSorry if this still doesn't help you, i read your question but i probably don't get it (which is kind of worse XD).. ",
    "Zammy": "Have you checked this page https://github.com/sschmid/Entitas-CSharp/wiki/Games-and-Examples?. I do not understand how this will help me. They are supposed to have player component because of the trigger. Also... how does this tells me if it is added or removed?. ",
    "JRSerjeant": "@Zammy Yes these are the examples I'm referring to. I have read almost all of the wiki at this point. \nEdit: Just taking a look at the EntitasTanks project as I don't think I have looked at it yet. Its difficult to pick apart the Components and Systems to understand how the prefabs are being instantiated into the Unity Scene. \nApologies, it may be that I'm simply coming from a less experienced position than others.  \n. After a bit more hacking on my lunch today I have managed to get what I wanted working.\nI will try and find time this weekend to tidy up the project and post it to GitHub with some comments/instructions. . Evening All, I have uploaded my basic example to here. I will add more explanation as comments in the code and in the Git ReadMe soon. \nBut some feedback on what I have implemented would be great. What about this is and is not considered to be good practice?\nAs a learning exercise I'm hoping to set up a few different examples to show the basic building blocks required for Entitas.  . Hello Again all, \nI have updated the example projects Wiki to provide some explanation. Any feedback would be great. \nNext I'm going to add some comments into the code for those that don't find the Wiki. Once done I'll move onto another example. I'm thinking moving the game object will be a nice next example. But if anyone has any idea for examples please let me know. \n. @jony100200 \nAlthough I'm no expert and still learning myself I step up this project in a attempt to show the basic structure of an Entitas Unity project. \nCheck the wiki for some explanation\nHope it helps and I welcome any feedback.  . @T2RKUS  True, I'll update my example once the new version is released. \n@sschmid Is there an ETA on the new release?. Evening Simon, \nThank you for the quick response. Casting to GameEntity works perfectly. \nI will be able to sleep soundly tonight now, Cheers. :). Yeah I was just about to correct it myself and saw it had been done. \nCheers. :). ",
    "Substr": "That helped for sure! It's a nice way to think of the timing as just another component as you said.\nOne other concept that I'm still not totally clear on is when you would use different pools vs. when you just fetch Groups using the Matchers from the one pool, is this just about organisation and memory management?\nI've tried adding a DeltaTimeComponent as you suggested, but seem to be having an issue when using [SingleEntity] - I get the following error when trying to use pool.AddDeltaTime(), pool.ReplaceDeltaTime() or even creating an entity with that component and adding that:\nPool.cs line 242 inside GetGroup() if(_groupsForIndex[index] == null) { gives a 'System.IndexOutOfRangeException' exception. Is there something else I'm supposed to be doing? From looking at the generated code for the component, it seems like the Pool methods should automatically create the single entity if it's needed? But the getter for the Entity seems to trigger this error:\n```\npublic partial class Pool {\n    public Entity deltaTimeEntity { get { return GetGroup(Matcher.DeltaTime).GetSingleEntity(); } }\n```\nThanks!\n. I seem to have solved the error above by adding [Core] attribute to the component, although I'm not at all clear why that solved it, or if you're then always supposed to specify one or more pools for all components like this? . @sschmid Thanks for clarifying. I seemed to have a problem with just using the default pool however, giving errors like the one above when trying to look up entities by those components. It seemed required to add a pool attribute to every component to make it work. I also found that once you add a pool attribute like \"[Core]\" you then can't use Matcher to find it but instead have to use CoreMatcher - this was a little confusing. . ",
    "danielbe1": "Well, say that I have an Enemies system that handles Enemy components, it is responsible of creating and destroying them.\nAnd say that my execution code looks something like this:\nvoid Update {\n  _systems.Execute();\n _systems.Clean();\n}\nNow, say that I have a system that wants to create an enemy, and waits until that enemy is destroyed.\nThis will obviously not work, since if the system is created before the Enemies system then it will not be able to handle destroyed Enemy components and if it is created after the Enemy system then it will not be able to create enemies.\nSo yeah, I could split one of the systems, but that seems unreasonable as this is a very trivial use case.. > Isn't that a use case for ICleanupSystem?\nNot if the entities are destroyed.. If I take Entitas-Shmup as a case for MT, most of the systems there could run code in parallel on the Entity level, for example updating positions, velocity, damage and all that. Basically, any processing that does not depend on another entity's components can run in this mode. Using something like this could be as easy as changing IReactiveSystem to IReactiveMTSystem.\nRunning systems in parallel is not as simple, but because entities are a composition of many components, systems that operate on separate components could run in parallel. It would be nice if we had systems that operated on subsets of the components and combined the results at the end somehow. Maybe under the existing code, something like EntitySystems that are composed of ComponentSystems could be used to achieve this. . The main motivations behind data immutability are to avoid side-effects which in turn give us thread-safety and data sharing and some more nice things. Replacing and setting are both side effects so personally, I don't think this has any real benefit.. Yes, but that's assuming that we always want to cause those side effects, which might not be the case. I mean, not reacting to change is simply a design choice of the ECS, its just as valid as reacting to changes.. Well, technically there isn't an inconsistency since for flag components, setting is similar to replacing but yeah,  this is a style inconsistency.\nI think generating something like Scala's copy would be the best of both worlds, the ease of use of direct assignment together with consistent state transformations.. If you don't like the code generators you can take a look at [Entitas-Lang(https://github.com/mzaks/ECS-Lang)\nBTW it appears here.\nSomething like:\n[dependsOn(SystemB)]\nSystemA {\n  ...\n}\nHowever this still doesn't really hit the spot, two better alternatives would be:\n1) immutable global data (components) thats is only changeable at the end of a frame through callbacks, or dedicated events.\n2) defining systems as flows, where one system takes as input the output of previous systems.\nThe first option is actually easier to accomplish, even using the current Entitas code, incidentally this also solves the problem of executing systems in parallel.. @T2RKUS could you give an example for how it would be used?. The entity is retained by the collector (shown in the message above) of the reactive system I created the collector above for. I followed #448 and even after clearing all reactive systems the entity was still retained by that reactive system.. I had the same exact issue and deleting the Entitas folder, then reimporting helped,. That is obviously possible, which would mean I wouldn't be able to enjoy the benefits of having multiple contexts to begin with. The point is not to refactor my code to suit your own taste, but to make working with multiple (and single) contexts easier, which would also mean that you would probably find it easier to split your sparse single context into more granular sub contexts to lower memory overheads, lookup overheads using caching, and eliminating invalid game object states (projectiles with inventories, map tiles that spring to life and walk away for example). Maybe the multiple contexts thing is a red herring, what I am saying is that it would be nice to be able to express more complex relationships as entities of entities, hence MetaEntity. A meta entity could also be for example, two GameObjects in your scheme that fight with one another, something like:\n```\nclass MetaEntity\n{\n    public GameEntity enemy;\n    public GameEntity target;\n}\nclass MetaSytem \n{\n    ....\npublic void Execute(MetaEntity entity) \n{\n}\n\n...\n\n}\n```\nIf you find these  kinds of relationships to be useful in many places you would probably one an easy way to express it, this specific example can be used for collisions, combat AI, path finding etc.\nSo for example doing combat AI could go like this:\n- your game entities hold handles to other entities, because that is safe and clean.\n- A second context (problably not directly accessible from the outside) that holds meta entities caches the look ups of game objects and their targets (like in the example above).\n- Your combat system uses the second context and doesn't need to do look ups at all, and its all done safely and conveniently.\nIf this is easy, then decomposing your single to context into more granular contexts also becomes easy.. Sure you can handle this with pure components, such as a collision event component, but I assume that the collision component is short lived (correct me if I am mistaken) and does not persist beyond the current frame so you don't have to handle cases where one or both of the references become invalid.\nBut what if you want to represent something long lived like seeking targets? What if you want references to 3, 10, 20 entities? You would either need to perform look ups every frame, or need to write code to make sure references do not become invalid, plus you would probably want to cache results, make sure no one is accessing (persisting) this data from the outside and have all of this tested and verified to work. This can be done by hand but its not so trivial and since it can be done mechanically its best to do it using code generation.\nEssentially this can be thought of like JOINs and using views in a database. Depending on your requirements you might want to normalize your data and have certain views of your data optimized.. I've had a little bit of time to begin an implementation, the API right now looks like this.\nFor a Game context with one immutable component:\n[Game, Access(Immutable)]\npublic class NameComponent() : IComponent {\n    public string Value;\n}\nThis generates the following methods for the entity and context:\n```\npublic partial class GameEntity {\npublic NameComponent nameSafe { get { return (NameComponent)GetComponent(GameComponentsLookup.Name); } }\n\n}\npublic sealed partial class GameContext : Entitas.Context {\npublic GameEntity CreateEntity(NameComponent name);\n\n}\n```\nAs can be seen, all removal and replacements are not generated and the non-generated context methods enforce the immutability and safety of the field which means the component will always exist and no tests for existence need to be made. CreateEntity is now generated and Immutable and mandatory components must be provided. There are some issues that still need to be addressed, for example the Unity visual debug plugin will still attempt to add and remove these components etc, still need to work on those things.\nFor a Meta context with one mandatory component:\n[Meta, Access(Mandatory)]\npublic class AgeComponent() : IComponent {\n    public int Value;\n}\nThis generates the following methods for the entity and context:\n```\npublic partial class MetaEntity {\npublic AgeComponent ageSafe { get { return (AgeComponent)GetComponent(MetaComponentsLookup.Age); } }\n\npublic void ReplaceAge(int newValue);\n\n}\npublic sealed partial class MetaContext : Entitas.Context {\npublic MetaEntity CreateEntity(AgeComponent age);\n\n}\n```\nIn this case the component can be replaced, but not removed, only replacement is generated.\n. ",
    "awalltoo": "Oh cool, definitely looking forward to that then!\nI'm not sure how well Unity deals with source files that are outside the project directory, so I don't know if the first solution would work for me.  But if the dll version is coming, I can work around it for the time being.  Thanks!. ",
    "7ujian": "@sschmid it's would be great to mention in getting start docs about the Pool to Context change.  . ",
    "Propolandante": "@7ujian @sschmid As a brand new user, I agree. I read the wiki thoroughly and dissected the Asteroids example project, but then immediately felt lost when one of the core pillars of Entitas wasn't functioning at all. . ",
    "shawnfromportland": "I hope to contribute to the documentation as soon as both i understand the existing documentation perfectly and have the time. in the following months perhaps.. @sschmid It was on hold all summer, but we are developing a relaxing VR train ride app on entitas for many platforms out early next year!\nhttps://twitter.com/polygonalmind/status/920939537664180225\n. ",
    "edgar1SI": "I would definitely use that all the time. In fact, it was something I was wondering why it didn't exist before, since there are many cases where you know you have a ReactiveSystem that reacts to a SingleEntity. Of course, it would be cool to keep both options available \ud83d\udc4d . ",
    "pderuiter77": "If you make the method with the foreach virtual, we have the choice of overriding that if needed, or just use the Execute(Entity) if that suffices. You do have the DoExecute(entity) call. personally i would have had that call anyways :)\nIf you make it abstract it's clear what you must do.. ",
    "boscohyun": "In my understood, Execute(entities) in ReactiveSystem is enough and correct to the Entitas idea.\nWhen I use ReactiveSystem, I don't care about what each entity in entities is. They are just matched to trigger. ReactiveSystem processing them. That's all.\nBut If there are Execute(entity) in ReactiveSystem, I should care about entity and trigger.\nIf there are plural entities matched to trigger, what is the one for execute? First one?\nIf so, how to processing other entities?\nIf use for SingleEntity only with other name that is not just ReactiveSystem, that's simple to understand.. ",
    "IsaiahKelly": "An \"entity processor\" does sound more descriptive of the actual purpose than an \"entity system\".  A system can also be quite complex, but calling it a processor should help reinforce the single responsibility idea behind it. I like this.. Would it also be acceptable to name processors simply \"process\", e.g. RenderPositionProcess ?. Actually, IExecuteProcess or maybe even just IProcess sounds better to me than IExecuteSystem.. This might be going a wee bit off topic, but I've been thinking about the naming convention of ECS in general for awhile now, especially within the context of Unity. \nFor example, Unity's definition of a \"component\" makes perfect sense to me (logic & data encapsulated in a discrete element, e.g a behavior). But in a modern ECS the term makes a lot less sense because a \"component\" in ECS is simply data and the term doesn't actual express that. It can also be a little confusing to someone used to Unity's definition. \nSo I thought why not just call components \"data\" instead? e.g. HealthData, PositionData, etc. This perfectly describes what these components actually hold, and this combined with the more popular  \"processor\" over \"system\" also gives us a new term: EDP (Entity-Data-Processor). Which I think is actually an excellent term.\nHowever, I guess you could also just adopt this \"data\" naming convention without even renaming the actual component element itself, but I do like the EDP term.\nPlease excuse all my thought diarrhea :p. One of the unique features of EgoCS seems to be the way in which it combines both entity components and Unity components together. However, I'm too much of a newbie to know if their approach is good, since this might tightly couple entities to GameObjects?\nI'm still trying to make my brain understand this whole ECS concept at the moment :). @20zinnm I agree that entity components and Unity components should have a clear distinction/separation from each other. However, I don't think @sschmid is trying to remove that. I think he's just trying to find better ways to integrate ECS into the Unity workflow and/or make their application more universal. The pure C# base is a key \"component\" ;) of Entitas, so I wouldn't worry about that going away.\n\nI disagree that \"components\" as we know them are just data. When you consider what they represent\nComponents describe characteristics\nIt is not so much data as features of entities\n\nI think you're confusing the literal definition with the abstract. \"components\", \"characteristics\", \"features\" no matter what you call it, it's still all just data!  However, just calling it \"data\" might be a bit too literal. You, however, seem to favor the term \"characteristic\". So why not just call them that instead? Too many letters? :p \nThis is probably just personal taste, but the term \"component\" has never sounded right to me. I think it suggest a more complex and independent system. However, I have yet to find a term I really think should replace it. \"data\" seems like the easiest, but I've also thought about other terms and you've actually just added to the list.\nList of alternatives to \"component\":\n\ndata\ntrait\nfacet\nelement\nfeature\nattribute\ncharacteristic\nproperty\n\nSome of these terms obviously conflict with preexisting C# terms, however,  I actually think \"trait\" might be my favorite right now and it's very similar to feature or characteristic, but much much shorter!. @20zinnm I actually completely agree with you on what a component is and represents. I think this is all just a misunderstanding over my issue with the term \"component\" itself. The fact that the term is symbolic or abstract doesn't change the fact that it's still just data. So I disagree with the idea that a component is \"not just data\" because the symbolism here is still just data, but like I've already said \"data\" is probably too literal or generic a term to be used instead. \nI'm really just arguing semantics. I personally dislike the term \"component\" when used here in the Entitas context, but there is nothing technically wrong with it. I just feel like there might be a better symbolic term that would more accurately represent the fact that an entitas component holds pure data. However, I might only feel this way because Unity's use of the term \"component\" has distorted my understanding of what a component should or can be. \nIn any case at least we both like the term \"trait\" :) One other term I've thought of is \"token\" which can mean \"A specific instance of a phenomenon or a class of things\", but I'm still favoring \"trait\".\n. Yeah, an entity \"token\" probably makes a lot less sense than an entity \"trait\" or most of the other terms suggestions anyway.. I have now discovered that blueprints were actually contributed by @npruehs. Apologizes. I'm something of a newbie here. :$. @npruehs I have no problem with the name blueprint itself or it's similarity to Unreal. Although it's interesting to know you came up with it first. My ignorant assumption was that you probably stole the term form them. :) Anyway, it's more about naming consistency within Unity to make it as intuitive as possible for developers. However, this could all just be consider me nitpicking.\nIn any case, I do love the concept behind blueprints. I think anything that helps integrate ECS into the Unity workflow is essential to getting more developers to embrace it. So thanks for your contributions!. @WoLfulus \"Template\" could definitely work.\nMy first idea here was to make blueprints more consistent with Unity terminology by changing them to \"EntitasPrefabs\". However, I'm now wondering if that might only create possible confusion between Unity prefabs and Entitas. So maybe using different terms is actually a good thing.. Ironically, I now realize I wanted to change the term \"component\" for the exact opposite reason! D'oh!! In any case I'm thinking maybe we should at least prefix whatever term used with \"Entity\" e.g. \"EntityBlueprint\". Or would that just add needless term bloat?. I created a new \"Tutorials\" wiki page to contain all tutorial related content since this was spread all over the place. Also restructured all the main links and renamed \"Download and setup\" to \"Quick Start\".\n@Adjuvant how exactly is that page linked to other content in the wiki so people can find it?. I'm not showing it off publicly just yet because it's a simple but very unique design and I'm afraid someone else could easily copy and clam the design for themselves before I figure out how best to do this. Yes, I'm being extremely paranoid here, but always better safe than sorry. \ud83d\ude04 \n@sschmid Probably best to send you a draft of it directly to check out anyway. Do you have any noncorporate email or private message contact address I could send it to?. Oh, I also thought it would be cool to create some \"Made with Entitas\" splash screens for people to use in in their projects. These could then be easily added to Unity's new splash screen player. However, I'm thinking it should probably exclude the words \"made with\" since this would seem repetitive and confusing if seen right after \"Made with Unity\". So it should probably just be the logo without a prefix or \"and\" / \"powered by\" / \"Created with\" or something like that instead.. @T2RKUS Nothing personal dude. I just don't trust randos on the internet. You may be a spam bot for all I know. \ud83d\ude06 You shouldn't have to wait very long in any case. Just a few years or so. \ud83d\ude23  I kid I kid! \n. @WoLfulus Like I said before, I'm paranoid. \ud83d\ude04 This is because I think I've created something very special here and I don't want to accidentally just give it and all rights to it away (outside of the project itself). If this was just a generic logo I wouldn't care at all, but I think I've really got something unique here.\nMy plan right now is to write a simple custom license / guideline for use of the Entitas trademarks / logos, similar to this one. This should be good enough to at least give the project some basic intellectual property protection. \nI'll then show it to Simon and once he's okay with it, he can add it to a future release of Entitas with or without a new logo. The main purpose will just be to ensure we have IP protection in place for any current or future IP related content. Once that is all done I'll feel a little better about sharing the new logo design.\n@sschmid is there anyone in the legal department at Wooga that you could ask for advice on this topic? If this is not possible or you're not comfortable doing so then that's fine. Just throwing out some ideas here.. Here's an idea: What if instead of expandable panels for each component, we had a dedicated area below the entire list of components that would show properties of the currently selected component only? This would function very much like Unity's Quality Settings level inspector, and the list of components could be scroll-able to save space. \nWould this be an improvement or is there a real need to always be able to edit multiple components simultaneously?. I've made good progress on this, but I currently cant test any of my changes because I still haven't found a way to build and copy the DLLs into Unity on Windows. :confounded:. I'm gonna close this issue for now. I'll reopen this if / when I fix my issues with the source code.. @VladislavKostin You should be able to close your own issue by clicking the \"Close Issue\" button at the bottom.. I'm sure it has something to do with \"portability\" here, but I've been studying Blueprints lately and thought about doing something like this myself since I noticed Blueprints don't currently support Unity undo operations and switching context erases all blueprint components! \nThis is really ridiculous and annoying, but I believe replacing the binary formatter should fix all that and I hope to help in this area eventually, but I still don't know enough about the system yet to contribute anything. I have however at least been able to fix some aspects of the blueprint inspector already.. @FNGgames @T2RKUS Thanks for the reply. Here's my specific situation if that helps any:\nI already have the Entitas source forked and cloned to my local machine through SourceTree, but I don't know how to build and test any modifications made in Visual Studio from Unity. \nSimon has been trying to help me with this, but he's on Mac and I'm on Windows and so far I can't get it working, At the moment typing ./Scripts/update into the SourceTree Terminal just returns /c/GitHub/Entitas/Scripts/build: line 6: xbuild: command not found and I have no idea how to fix this.\nI've been looking at other means of testing in Unity, but so far I don't even know which scripts or DLLs I should copy over from the Entitas souce to Unity in order to test my modifications manually.. Maybe part of the problem here is I don't know what xbuild and msbuild are, and probably also don't completely understand what you mean by mono, but I'm guessing you're not talking about MonoDevelop? \ud83d\ude33 \nSo do I need to install this?: http://www.mono-project.com/download/ and should it be the 32-bit or 64-bit version?\nIt would also seem that constant UNITY=\"/Applications/Unity/Unity.app/Contents/MacOS/Unity\" is useless on Windows and should be changed to something like UNITY=\"/Program Files/Unity/Editor/Unity\"?. Yeah, I was already thinking there must be a way to make the scripts execute differently on Windows. That would help newbs like myself a lot.\nFYI: running Unity 5.6.0f3 and Visual Studio Community 2017.. @T2RKUS Thanks for all your help on this! I installed Mono 64-bit (Preview, no GTK#) and added this PATH:\n\nBut get the same line 6: xbuild: command not found error again. Is this the wrong version of mono or am I setting the PATH incorrectly?. Duh!. Did the Task Manger restart trick, but that didn't work. So I restarted and that didn't help either. \ud83d\ude1e \nI've also checked the Scripts/consts definitions as Simon suggested, but UNITY is the only incorrect path I can see.  Can you tell/show me how you have that file setup? Here's mine at the moment:\n```\n!/bin/bash -e\nSCRIPTS=\"$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)\"\nROOT=\"${SCRIPTS}/..\"\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nUNITY=\"/Applications/Unity/Unity.app/Contents/MacOS/Unity\"\nUNITY=\"/Program Files/Unity/Editor/Unity\"\nPROJECT_NAME=\"Entitas\"\nADDONS=\"${ROOT}/Addons\"\nADDONS_PLAYGROUND=\"${ROOT}/Tests/Unity\"\nES=\"Entitas\"\nES_UTILS=\"Entitas.Utils\"\nES_U=\"Entitas.Unity\"\nES_UE=\"Entitas.Unity.Editor\"\nES_CG=\"Entitas.CodeGeneration\"\nES_CG_ATTR=\"Entitas.CodeGeneration.Attributes\"\nES_CG_G=\"Entitas.CodeGeneration.CodeGenerator\"\nES_CG_G_CLI=\"Entitas.CodeGeneration.CodeGenerator.CLI\"\nES_CG_P=\"Entitas.CodeGeneration.Plugins\"\nES_CG_UE=\"Entitas.CodeGeneration.Unity.Editor\"\nES_MIG=\"Entitas.Migration\"\nES_MIG_CLI=\"Entitas.Migration.CLI\"\nES_MIG_UE=\"Entitas.Migration.Unity.Editor\"\nES_VD_CG_P=\"Entitas.VisualDebugging.CodeGeneration.Plugins\"\nES_VD_U=\"Entitas.VisualDebugging.Unity\"\nES_VD_UE=\"Entitas.VisualDebugging.Unity.Editor\"\nES_BP=\"Entitas.Blueprints\"\nES_BP_CG_P=\"Entitas.Blueprints.CodeGeneration.Plugins\"\nES_BP_U=\"Entitas.Blueprints.Unity\"\nES_BP_UE=\"Entitas.Blueprints.Unity.Editor\"\nBIN=\"bin/Release\"\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSOLUTION=\"${ROOT}/${PROJECT_NAME}.sln\"\nPROJECT_VERSION=cat ${ROOT}/${PROJECT_NAME}/${PROJECT_NAME}/version\nTEST_PROJECT=\"${ROOT}/Tests/Tests/Tests.csproj\"\nTEST_RUNNER=\"${ROOT}/Tests/Tests/bin/Release/Tests.exe\"\nbuild\nBUILD=\"${ROOT}/Build\"\nBUILD_SRC=\"${BUILD}/src\"\nBUILD_DOCS=\"${BUILD}/docs\"\nBUILD_DEPLOY=\"${BUILD}/deploy\"\nDOCS=\"$ROOT/docs\"\nDOCS_RES=\"${SCRIPTS}/docs_resources\"\nDOCSET=\"com.sschmid.${PROJECT_NAME}.docset\"\nDOCSET_KEY=\"entitas\"\ncpe() {\n  rsync -ar --include-from \"${SCRIPTS}/rsync_include.txt\" --exclude-from \"${SCRIPTS}/rsync_exclude.txt\" $1 $2\n}\n```. Should I try the 32-bit version of Mono instead?. @T2RKUS I already placed your script there and named it \"temp\", but have now changed it to \"update_unity\" \nInstalled mono 32-bit and and changed PATH to that installation and removed \"xbuild.exe\" from the string since your screenshot doesn't show that in the path. Still doesn't work.\n$ ./Scripts/update_unity\n./Scripts/update_unity\n/c/GitHub/Entitas/Scripts/update\n/c/GitHub/Entitas/Scripts/build\n/c/GitHub/Entitas/Scripts/build: line 6: xbuild: command not found\nI'm wondering if my issue here is with the git working directory path? Simon doesn't think /c/GitHub/Entitas is a valid path, but I'm not sure if this is true or just the way SourceTree handles it? The literal path is C:\\GitHub\\Entitas\\ Is this path correct and how would I change it if it isn't?. Hey! It's me again \ud83d\ude42. I recently reinstalled Windows 10, Unity 2017.1 and Visual Studio 2017 and decided to give this another shot. So I downloaded the Entitas source and opened it up again. Tried running Tests again, but I believe it gave me an error related to the build target or something, so I changed the target to x86 and it finally ran! However, now I'm getting an error message on line 17 of check_namespaces.cs with the following message:\n```\nNUnit.Framework.AssertionException: '  Expected: greater than 80\nBut was:  0\n```\nNo idea what this actual means, so I totally stuck again. \ud83d\ude1e. Duplicate of issue #385. This is also a Unity related bug (Issue ID 898295). >in my experience games use a more sophisticated approach for configuration. >Different teams have different workflows how to provide configuration, e.g. Google Docs, Excel Sheets, >Json Cloud Service, etc.\nThat actually sounds great, but as someone new to Entitas I have no idea how to even start creating such a configuration setup without some kind of learning material on the subject. \ud83d\ude1e I think a real lack of good, up-to-date learning material and detailed full featured examples is the biggest weakness of Entitas at the moment and the biggest thing preventing more people from using it.\nFor me the most appealing aspect of blueprints was their intuitive Unity like nature. This was especially helpful for a lone Unity only indie developer like myself.  I also think this intuitive designer friendly aspect is the key if you ever want widespread adoption of Entitas in the Unity community. Having to learn a completely new workflow from the very start isn't something most lone developers are gonna be really excited to do. At least not the creative / artistic focused kind.\nHowever, I understand all of this requires a huge amount of work not directly related to the core development of Entitas. So I can completely understand your need to abandon it for now. I'd love to help develop this aspect of Entitas myself, but I'm beginning to think I'm just not skilled enough to help in that area yet. \ud83d\ude1e. I think this is an excellent way to encourage people to financially support the project while also keeping it open and free. However, I have a few suggestions to help make this as successful as possible.\nFirst of all, you need to understand the Asset Store audience. You can get a great sense of this by just looking at the top selling / grossing assets on the store. These include:\n\nPlaymaker (visual scripting)\nRealistic Effects Pack 4\nArchimatix (node-based modeling)\nUFPS : Ultimate FPS\nGaia (easy procedural terrain generator)\nProBuilder Advanced (level editor / modeling)\nShader Forge (node-base shader creation)\n\nYou will notice that almost all the top assets on the store are beginner, artist, or non-programmer focused. This is an important thing to remember if you want your asset to also become popular and therefor successful. This is not to say your asset must fit into one of those categories, but it should try to appeal in some way to these non-technical demographics if you want it to have widespread success.\nAnother excellent strategy is to release a free asset and / or free lite version of an asset just for promotional purposes on the Asset Store. This eliminates any barriers to entry and allows you to generate lots of downloads and reviews for the asset. Which will help push the asset up the list of popular assets and make it more visible to more people in the store. This in turn will drive more users to your own store page and any other paid assets you have. You can also advertise your paid assets as upgrades inside the free ones.\nAt the moment I'm a little confused as to why the default version of Entitas cost money on the Asset Store if you're already planing to charge for the Plus version? I understand this might just be a way to allow existing users to support you already, but the price tag will also greatly discourage any new users from picking it up. \nSo in my opinion I think the default version of Entitas should be free on the Asset Store. This is also the only way to get it above page 100+ on the store and will help you promote the plus version when it's released. Now I'm really looking at this from a new user point-of-view, but I think you have to look at it that way if you want to succeed on the Asset Store since this is what the majority of people there will be.\nAs for the paid version(s) I would focus on learning examples for newcomers. Perhaps you could create a complete game example / tutorial that covers all possible use cases and sell that? Converting the official Unity Tanks!!! Reference Project for this purpose.\nAlso, if the roslyn code generator is an essential tool for helping new comers then I would greatly discourage putting it behind a paywall. Since I'd be afraid this could greatly hinder new users from embracing Entitas if they run into any issues. It's a tricky balancing act, but I would only charge money for non essential extras. You just need to make sure these extras are still very enticing so people still want to buy them. I think the free and paid Game Framework Assets are a good example of how to do this right.. @VladislavKostin Excellent point. This also relates somewhat to my own point about the Asset Store being focused on non-technical users. Expectations on the Asset Store are also quite different from something like GitHub, even if the asset itself is free. So in many ways publishing to the Asset Store might require a lot of extra work and I'm not sure if Entitas is ready for that yet. Without proper preparation this whole thing could end up being more trouble than it's worth.\nI would at least clearly state on the store page that the core Entitas framework is free on GitHub and that you should only buy it if you want to support it's development. Anyone who buys it without knowing that might feel cheated or deceived and leave you a bad review on the store. Of course the chances of some clueless random user finding it on the Asset Store are low right now, but that's always a possibility.\nBasically be as transparent on the Asset Store as you are here! Clearly state in the Asset Store description that Entitas is free and buying it is only optional. Maybe even rename the asset to something like \"Entitas: Supporter Edition\" to clarify it's purpose even further. Then rename it to \"Entitas Plus\" once you add extra features. You could even encourage people to buy the current release on the Asset Store by promising a free upgrade / discount to the Plus version if you buy it now, etc.\nThen once documentation and other vital features are in place you can release the core free version on the Asset Store.. @TheUtDuong I might be completely wrong, but I believe the EntityLink addon is designed for your exact use case. It's a MonoBehaviour script that allows you to link entities to predefined Unity GameObjects in the scene. At least that's what I think it does. No documentation on it.. ### Updated menu and preferences screenshots for the wiki.\nI think the light Unity editor skin looks better on the white pages of the wiki. Unity also uses this light skin for all the screenshots in the official Unity documentation. \n\n\n\n\n\n. Some example images for use with the wiki setup instructions.\n\n\n\n\n\n\n. \n\n. Wow. You are undoubtedly very passionate and dedicated to this project. Thanks for all your hard work and best of luck with all this!\nYeah, I was just thinking of the possibility of setting up a Patreon or similar system of support too. You could entice people to support you on a monthly basis by offering early access to new builds / features and premium support, etc. \nThis might work even better than a one-time fee from the Asset Store because it means you could keep all features completely free and open. Supporters would just get them early. Something like this might also provide better longtime financial support by giving you a steady stream of income over time, rather than just a large lump sum upfront.\nNothing to lose in just trying something like this out anyway. It's always a good idea to investigate all your options. Never really know if it'll work until you try it.. 2017.2 \nI'd suspect most users here like living on the cutting edge \ud83d\ude0e so the results will be skewed. A more accurate stat would be the Unity version usage data released by Unity themselves. You can get the very latest numbers for that in the private publisher forum, which you can gain access to by signing up for it here. \nHowever, if you're only going to upload a single version the safest action would be to use the oldest supported version of Unity. Only upgrading when it's absolutely required. \nBut Unity 2018.x will probably become the minimum required version anyway if you decide to integrate the new job system that's coming next year. \u2753. Don't know if you've seen them already, but the Untie Europe 2015 and 2016 talks about Entitas should help you get a much better understanding of how Entitas works in comparison to the new native  Unity ECS. At least as much as is currently possible with the little knowledge we currently have about those new Unity features.\nSimon is also already working on beginner tutorials at the moment which may further help you understand this. I don't have enough knowledge of Entitas myself to really help explain the exact differences, but in any case it's probably way too early to really know since the new Unity ECS and job system hasn't been released yet, so our understanding of them is very limited at the moment.\nA followup/alternative question to yours for @sschmid right now might be how easily he thinks Entitas will integrate with these new Unity features and how difficult or easy it might be to transition from Entitas to this new native Unity ECS in the future and if using Entitas now is a good first step / substitute / preparation for these future features.\n. Yeah, I now see that in addressing the issue title I missed some important details.\n\n\nCurrently no, but multi thread support is something Simon wants to implement (#325) and the new job system should help him with that goal.\n\n\nI don't know the answer to this myself, but asking this question in the chat will probably get you an answer sooner then here. In fact, chat might be a better place for all these question. You can also just wait for Simon to stop by and hopefully answer these question way better than me. \ud83d\ude04 \n\n\n. We do have a FAQ in the wiki which can serve a similar purpose, but why is that cookbook a separate repository instead of a part of the wiki? The official wiki seems like a much better, more visible and much more easily editable place for this type of content.. As an interesting side note, I also noticed while watching the Writing High Performance C# Scripts Unite Austin 2017 talk again that the new Unity ECS system uses Set instead of Replace for their own API:\ncsharp\nEntityManager.SetComponent(entity, new Component(...));. @sschmid thanks for the reply.\n\nAfaik, they are actually setting the component. So it makes sense\n\nYes, they are setting the component to a different value... by replacing it with a new one (watch this). So I'm not sure what your point is exactly? \ud83d\ude00\nI'm also now leaning towards entity.Set over entity.Update because it could also replace (no pun intended) the component flag boolean. So instead of entity.isMovable = true; you could use entity.SetMovable(); giving us a more consistent API. \nHowever, this is all very much a personal preference kind of thing. Allowing people to create their own API naming conventions would be very helpful too, but I think universal consistency or agreed upon standards are important. If everyone has their own, things could get very confusing fast! So I guess it really comes down to what the community wants. Just throwing some ideas out there anyway. Thanks for considering them.. @kdrzymala The biggest benefit here would not be for experienced users, but beginners. The primary objective being to just make it more intuitive or easily understandable for those coming from a OOP prospective, but whether that's actually a good idea is up for debate.\nI would however point out again that we already have entity.isMovable = true; which completely goes against the reasoning for sticking with entity.Replace . The argument for keeping it just seems to be that it's something people are used to, which doesn't sound like a very compelling reason to me, but I might be trying to fix something that isn't actually broken. \ud83e\udd37\u200d\u2642\n@sschmid In my mental model the word \"replace\" just doesn't seem optimal because it's describing the literal function rather than the purpose, if that makes any sense. In other words, we replace components when we want to update their values. So \"replace\" is the literal function, but \"update\" is the intended purpose. Do you see what I mean? Now this is probably very subjective, but that is just how my brain seems to see things anyway.\nAlso, I would say the difference between Entitas entity.Replace and Unity ECS entity.Set seems trivial to me, but maybe it's just because I don't actually understand the differences? At least there seems to be no difference in how they work from an API perceptive. In both cases you're replacing all values at the same time. The only difference seems to be in how this is handle behind the scenes in memory. So I don't see any functional difference in calling either method \"replace\" or \"set\", but maybe that's just because I'm entirely ignorant and have no idea what I'm talking about. \ud83d\ude2c. @ShadeSlider Thanks for the input, but I don't think including \"Is\" in the add method makes any sense if you're not actually setting or getting a bool. So I think it would be better to stick with how it works now or just use the standard add method instead.\nHowever, I think replacing all of this with just Entity.Set makes a lot of sense. \nSo instead of doing this:\npublic static GameEntity CreateBlocker(this GameContext context, int x, int y) {\n        var entity = context.CreateEntity();\n        entity.isGameBoardElement = true;\n        entity.AddPosition(new IntVector2(x, y));\n        entity.AddAsset(Res.Blocker);\n        return entity;\n}\nYou would do this:\npublic static GameEntity CreateBlocker(this GameContext context, int x, int y) {\n        var entity = context.CreateEntity();\n        entity.SetGameBoardElement();\n        entity.SetPosition(new IntVector2(x, y));\n        entity.SetAsset(Res.Blocker);\n        return entity;\n}\nThen instead of replacing components to update their values you would simply call set again:\nvoid moveDown(GameEntity e, IntVector2 position) {\n        var nextRowPos = GameBoardLogic.GetNextEmptyRow(_context, position);\n        if (nextRowPos != position.y) {\n            e.SetPosition(new IntVector2(position.x, nextRowPos));\n        }\n}\nThis all seems like a much simpler, clearer and logical API to me.\n. @zoujyjs Don't know of any good references here, sorry. It's something that's really lacking at the moment with Entitas. As for your use case, my first guess would be that your component is probably too big and you just need to create a new separate smaller component and system to handle this one type of data.\nHowever, as far as I understand it, you should always use entity.replace whenever you want to change any value on a component because modifying the values directly will not update other systems that work on them. Causing them to become outmoded and/or preventing them from reacting to state changes. Now if you don't really need other systems to know about the changes then I guess you can get away with it, but it's very likely to cause you problems later on if you need to know about these changes.\n\"Immutable\"\nThe Entitas API treats component data as if it's immutable, but components are actually recycled behind the scenes to avoid garbage collection. I think the logic behind this facade is to force people to use entity.replace whenever they want to change values, so systems can always get notified of changes, but I'm wondering now if this is actually having the opposite effect. Since the concept of replacing things you want to update seems strange and sometimes a little annoying, so people just end up modifying the values directly because it feels more natural or easier. \nHowever, forcing you to replace components entirely, every time you want to change a value, does make people think about what data their components store a might help encourage them to follow the single responsibility principle more often. \nAgain in my mind just calling it set or update instead of replace seems like it might resolve some of these issues, but who knows, this might ultimately be just a personal preference.\nIn any case we probably need a dedicated section on this subject in the wiki because it seems to be a topic discussed in the chat often and is not very well understood or explained to newcomers.. @zoujyjs Deciding how your data should be broken up is no simple task and something of an art form. There are also much more qualified people than me that can probably give you much better advice, but I'll try to give you my own thoughts on the subject anyway.\nYes, in your example I would probably move the fixed bool field to a component like MovableComponent and just add/remove this component to indicate a camera entity is movable. Then the CameraFollowingSystem would only process entities that have both a camera and movable component attached to them.\nFor more complex constraints, like fixed individual axis,  you could create a more complex component to handle all these use cases like this:\n```\npublic sealed class ConstraintComponent : IComponent {\npublic bool lockX;\npublic bool lockY;\npublic bool lockZ;\n\n}\n``\nThen you could use this component for both cameras and other entities that are constrained in a particular way. This component could also be structured differently and it might be more helpful to use an enumerator instead, e. g.constraint = ConstraintType.All;` \nI think the key principle here is to keep your components as generic as possible, so they can be easily reused in other systems and entity combinations. Maybe thinking of components as a kind of advanced variable would help. You'll notice that both component examples above could easily be reused with other entity types and are not unique to the concept of a camera at all.\nHope this helps you, but I'm afraid we've steered the topic off the road and over a cliff \ud83d\ude01. If you have more question on the subject then please feel free to ask in chat or open a new issue on the subject. Thanks!. @ShadeSlider I've added your RTS Template to the examples page. Thanks for sharing!. @ShadeSlider Have you had a look at Entitas Blueprints? Seems like the perfect starting point for this kind of experiment and would also totally fix the multiple contexts issues.. I replaced the installation section of that tutorial entirely with a link to the new dedicated step-by-step install guide I made over a week ago. This new page rendered that section unnecessary and repetitive. I also moved the troubleshooting section to the FAQ page and plan to update the install guide to cover that issue as well.. Okay, I just spent way too much time updating the step-by-step guide to address both project path and script assemblies issues, but it should be pretty comprehensive now. Still have no idea why I'm spending so much time updating the docs for a framework I don't even use! \ud83d\ude06 \ud83d\ude15 I think I might be broken or something.. @Skybladev2 Did my step-by-step guide solve all your problems? If not, please let me know what I can do to improve it. Guide is on the main wiki page, but unfortunately only Simon can update the Readme.md (@sschmid \ud83d\ude09\ud83d\ude09 nudge, nudge), but I'll see what I can do about updating the other tutorials. That whole section really needs to be completely redone, but my time is limited. Also please remember that anyone can help edit the wiki.. Added it to the wiki extensions pages. You're welcome \ud83d\ude03 . Sounds like you want something like features, but for components instead of systems. Perhaps you could create your own add-on from the source code to that?. @c0ffeeartc I'd say \"Could not find file\" is pretty self explanatory. It's also supposed to be an error message, not a tutorial \ud83d\ude1b. However, the wiki FAQ page already explains how to fix this and other common errors in detail, and following the Unity Installation Guide to begin with should prevent / address most issues too.\n. Yes, that's standard error dialog, but it could probably be improved. Maybe something like this:\n\nAssembly file not found! Please open your project (Assets>Open C# Project) and ensure the assemblies path in Entitas preferences is set correctly. \n[ More Info ] [ Ok ]\n\nAnd for project files:\n\nProject file not found! Please open your project (Assets>Open C# Project) and ensure the project path in Entitas preferences is set correctly. \n[ More Info ] [ Ok ]\n\nIt would probably be ideal if @sschmid could make Entitas automatically open the C# project whenever you run Auto Import or Generate and Entitas detects that the project file and/or script assemblies are missing, or at least upon first run. Just showing a button to open the C# project from the error message doesn't seem all that helpful because it doesn't actually elaborate on the issue.\nNot sure if we can actually detect project file naming issues, but adding a More Info or Help button to the error message itself, that links to the FAQ or other documentation, would be a very helpful too.. I was planning on improving and polishing many aspects of the Entitas Unity GUI and visual debugger months ago, but I could never get the Entitas source code setup for development properly. \ud83d\ude1e Meaning I couldn't test any changes I made before submitting a PR. So it would have been kind of like throwing darts in the dark and hoping they landed \ud83d\ude27. Forget about TDD. This is UTD! (Untested development) Ha!\nIf I ever figure out how to get it working, I'd be more than happy to try and fix these issues on Windows and improve things overall.\n. Thanks for another great video! \nDo you still plan to remake the shmup demo in this tutorial series? Honestly, I think even if you expand upon the original, it's not really the best type of example. I'm now thinking an RTS would be more ideal. Since that seems like a very popular genre here and it would better demonstrate more complex game systems. It's also much more scalable, so you could use it to also demonstrate the speed of Entitas with hundreds of units at once. Like Unity did with their Job system RTS demo.\nI also don't want to sound ungrateful or impatient, but how often do you plan to release new tutorials?  I know they probably take a huge amount of work. \nMaybe to save time you could do some informal quick game jam like tutorials. Where you create a complete simple game in one session, like breakout or space invaders. Where you just take the viewer through the process of making it without explaining everything in great detail. So they can just get a holistic view for how best to approach building a game in Entitas.\nA nice side benefit of doing a video tutorial where you recreate a classic video game would be an bump in the number of hits you get on YouTube. This is because a title like \"Space Invaders in Unity with Entitas\" will attract people not just looking for Entitas explicitly.  So it's a great way to promote the framework even further.. @raincole Think you meant to say \"unrelated\" instead of \"irrelevant\", but in any case I think they're both very relevant and related to the topic of the video. He also spends only a minute on git, so a separate video for that would make little sense to me. I'd also rather watch one video that covers all this than a bunch of tiny clips, but that's just my personal preference.. ",
    "thygrrr": "Uhh, I name my Systems plainly anyway, e.g. \"RenderViews\", \"LoadViewsFromPrefabs\", etc.\nI don't 100% like the Processor idea, mostly because it sounds weird for IExecuteSystems. But if push comes to shove, I'm quite indifferent. \ud83d\udc4d . Actually, a whole lot of things may or may not be glitching out if Entitas is not in the root of Assets. :( Absence of output/error codes seems to not indicate proper operation.. Not sure what exactly is going wrong here, actually. The Jenny server batch also doesn't work unless it's in the root of your project, but I guess that's easily remedied.\n(I mean you also can't call \\Jenn\\Jenny-Server and expect that to work because the batch is written in a way that it only runs if there is a Jenny directory with Jenny.exe in the current Directory)\n. Can no longer reproduce. \nI did the steps from the tutorial video and it works.\nThank you VERY much for helping out with this, I'm a little embarrassed this bug report turned more into a customer service ticket in the end. :). I'd suggest the read key commands to be omitted; as that could also interfere with automated project setup, etc. \nOther than that, I personally can live with using the default terminal. \ud83d\udc4d . Actually, jenny from the command line (set up \"exactly\" as in the video) does nothing on my system, and is either silent, or gives me the following error:\nCould not load file or assembly 'Entitas, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\nThis is pretty frustrating, but it's also 4:00 am, so I might be overlooking something fundamental.\nThe error seems rather random... but jenny does nothing either way.\nscreenshot. I did the steps from the tutorial video and it works.\nIt's most likely the fact that I didn't have Jenny inside the project, but rather in a location above the current working directory that screwed something up.\nThank you VERY much for helping out with this, I'm a little embarrassed this bug report turned more into a customer service ticket in the end. :). I don't understand why you'd want to move Input out of a system if it could exist in a system. \nIf it lives inside the \"view/presenter\" domain, i.e. in a Monobehaviour, you have much less control over it.\nI generally try to keep as little as possibe in Monobehaviours. However, I also rarely use OnMouse... handlers, but rather roll my own input with raycasts and state etc., to account for multi-touch etc.. I only kind of agree.\nThe only problem is in having an entity that contains a bunch of references to other entities.\nI solve this with extensions to ContextEntity, which minimizes boilerplate. So if I have an InputEntity e, that has a GameEntity associated with it, through an extension, I can do e.game.hasWhateverGameComponent.\nIt will obviously throw errors (as it should!) if e doesn't have a GameLinkComponent or whatever I call it.\nSome boilerplate persists when cleaning these puppies up. At times I wish I could get the Component that was removed one last time in some kind of GraveyardSystem. (I wrote that once using delegates, but it wasn't really worth it, and it broke the timing of the systems). The inability to get the data of a removed component one last time in a System means that you end up with hacky secondary entities \"destroyGameLink\", that have their own system.\nHowever, until that triggers, you can't reuse your original component. Meaning you might need to wait until the next tick (with everything that entails...). I just place the System Initialize and Update calls in a separate GameObject / MonoBehaviour.\nThat can then be easily enabled or disabled.\nIt also improves testability in some scenarios, you just plunk the \"subsystem\" object into a scene you are working on and you do not have to worry about the other systems.. I suspect this has something to do with the InControl type drawers; probably for PlayerActionSet or InputDevice classes.. Sorry, super time constrained right now, so this is a somewhat shitty bug report. :). -I suspect from entities in 2 contexts, game and input, sharing a mutually recursive component called \"Binding\". (recursion is indirect, binding leads to something that in turn contains the GameEntity that had the original Binding)-. So it is actually this: InputDevice contains the GamePlayerActionSet that, in turn, has a reference to the InputDevice, and so on.\nBoth have very heavy UI, too.\n```\n   [Input, Game]\n    public sealed class ActionSet : IComponent\n    {\n        public GamePlayerActionSet value;\n    }\n[Input, Game]\npublic sealed class Controller : IComponent\n{\n    [PrimaryEntityIndex] public InputDevice device;\n}\n\n```\n. ",
    "20zinnm": "Honestly, I would definitely ask to keep entities and Unity entities separate for several reasons:\n\nEntitas-CSharp should, like the name implies, be for C#, not Unity. A separate implementation could be Unity specific.\nIt would make life living hell for those of us working on alternate implementations of Entitas as an ECS in other languages.\n\nNext, on the topic of naming:\nI disagree that \"components\" as we know them are just data. When you consider what they represent, I think the word component properly explains what they are. Components describe characteristics of entities; for example, a Health component describes an entity that has health. It is not so much data as features of entities, so one could say Health is a component of an entity, meaning the entity is comprised of characteristics including Health.\nTo illustrate my point, suppose we have two entities, each with a set of components (forgive the Go syntax, it's my comfortable language and illustrates the point fine):\n```go\ntype HealthComponent struct {\n    Health float32\n}\ntype RegenerationComponent struct {\n    Rate float32 // Represents the rate of regeneration (health per tick) this entity regains health at.\n}\ntype Player struct {\n    HealthComponent\n    RegenerationComponent\n}\ntype Bullet struct {\n    HealthComponent\n}\n```\nIn this example, Health is characteristic of both Player and Bullet; that is to say, having health is a component that helps to make up the definition of both entities. However, RegenerationComponent is only characteristic of a Player entity; thus, a player can be differentiated from a bullet by virtue of the fact that the underlying components that make them up are different.\nWhat you describe (using components as data) helps to differentiate between the same component in multiple entities. Maybe you want some players to regenerate health faster than others; you could set the rate differently on both. But both regenerate health.. I actually do like the idea of renaming System to process. Per Google (our lord and savior), a definition of process is:\n\n(verb) perform a series of mechanical or chemical operations on (something) in order to change or preserve it.\n\nFurther, the definition of a processor is:\n\n(noun) a machine that processes something.\n\nI think that fits perfectly with the entity-component-~system~processor paradigm, as they are meant to modify or preserve entity states routinely.\nA system implies a bunch of parts making up a complex whole, so the union of all processors could be considered a system. @paraboxx in this implementation of an EC~S~P, systems don't continuously operate; they are restarted every time the overarching state is updated. Thus, these mutations aren't so much continuous as they are procedural.. @IsaiahKelly I like the idea of trait, and in fact I think there is precedent for that, but I would like to reiterate that an entity is comprised of multiple components (or \"traits\") which describe the entity in different ways. Merely having a component/trait indicates that it is characteristic of the entity; the data contained within further elaborates upon the trait (for example, its rate or magnitude). It is not just data, because its presence is symbolic of the components that make up the entity. I think it is more appropriate that they be named traits.. I think trait works especially well in this context, as we are talking about entities :). ",
    "vedun-z": "Hi! We are starting to develop our game and looking around for a good frameworks. We've watched your videos in youtube and we really love your approach. But it seems like Entitas in the middle of breaking changes. Entitas really needs type-safety because a partial class that includes all possible fields looks really ugly. However literally every release breaks backward compatibly with previous one.  Are you going to create \"stable\" with long term support? At least, do you have any estimation of type-safety release?. PublicMemberInfos seems not suitable for a custom data provider. It has reflection-based fields:\n```\n        public readonly Type type;\n        public readonly string name;\n        public readonly AttributeInfo[] attributes;\n    readonly FieldInfo _fieldInfo;\n    readonly PropertyInfo _propertyInfo;\n\n```\nMy roslyn-based data provider just cannot create such classes.  Can you store strings  in PublicMemberInfos instead? \n. I've checked usage of PublicMemberInfos in Entitas, it seems that PublicMemberInfos should not used in CodeGeneration at all. I suggest to create another string based representation for public members.. @sschmid I've created https://github.com/sschmid/Entitas-CSharp/issues/280. If you don't mind I can try to make a patch with these changes. . > the whole idea of the code generator refactoring was that you can add anything at any time\nYou can have class fields for stable things like component public fields and an auxiliary dictionary for adding new features on the fly.  Anyway you have coupling between DataProvider and CodeGenerator and I think that an explicit declaration of common CodeGenerator's requirements is nicer than implicit. . I've made a Roslyn-based data provider, you can check it out https://github.com/vedun-z/Entitas-CSharp/commits/develop . Now I have two separate commits. First commit introduces MemberInfosData for holding field/property info. The second one introduces Roslyn support. I've checked that my provider creates the same data for Tests.Fixtures project. Of Course, It has some bugs, bug reports welcome! :-D\nI use nuget to install Rolsyn. It would work fine for windows, however, for mac/linux I except some troubles with msbuild. Roslyn uses msbuild to open solution/project files and  as far as I remember We've used a custom build of msbuild and 4.6 runtime in mac/linux systems. So, If you have some ideas how to create multisystem Rolsyn distribution, please share them.\n. ",
    "bwohaha": "Oh! Great to know! Thanks.. Ok, so after a couple of hours trying to figure it out, I finally found out what my mistake was.\nTimeComponent did not have a pool attribute, while ClosestTimelineFinishTimeStampComponent did.\nSince Entitas under the hood works based on indices in the array, the code generator creates indices for each component. Components for pre-defined-pool with that pool's attributes get their own indices class, while generic(no  attribute) components get theirs. Both Index classes start their index counting from 0.\nThis resulted in both components having index of 0, hence one component overwrote the other, since all they have to figure out which is which are their predefined indexes. That is also why the component thought it had time, while in reality it did not.\nThis problem works the same way for all of the generic(no pool attribute) components, it does not have to be single. It seems to not be reflected in documentation and looks like a weak spot.\nThe solution that comes to my mind is the following:\nAdd an \"#if Unity_Editor\" block into \"Entitas.cs\"(methods \"AddComponent\" and \"ReplaceComponent\", possibly also \"RemoveComponent\" for consistency) right before the place, where the component checks the index for another component already existing in that spot. Put inside a try catch explicit casting and throw exception with the info about where the problem probably lies(\"different components having the same indexes, probably because you're using not-predefined-pool-connection components in a pre-defined pool\").\nYou can also wrap it into another \"#if Entitas_Debug\" and add a flag into entitas menu to turn this option off(purely for profiling).. Hey, Simon.\nWas really looking forward to Roslyn, bought the plugin on the asset store, but I''m having issue trying to hook it up. The same problem as I got in 0.45.1.\nhttps://clip2net.com/s/3QmeQ2h\nUsing Unity and Visual studio enterprise, if that means anything to you.\nI'd appreciate any help I can get on this one.. after entering the correct path to the solution(it uses Assembly-Csharp.csproj, while visual studio generates the .csproj, where x is the name of the project directory), the problem changed, but I still can't generate:\nhttp://clip2net.com/s/3Qmfgxg. The error says \"Could not load a file or an assembly \"UnityEngine, Version=0.0.0.0...\" or one of its dependencies. Could not find the specified file.\njenny doctor result:\nhttps://clip2net.com/s/3QmfvQy. ",
    "shophk": "OK found out that in the preferences we set custom pools. So Core, UI, Meta are pre-defined pools.. ",
    "NemoStein": "\nIf you trigger for component A it doesn't necessarily that the entities still have that component once you execute.\n\nDoes it mean that the GetTrigger is triggered before systems loop starts (in the beginning of the game loop) and Filter is called just before Execute?\nI mean, is it possible that, before anything get processed by the systems queue, an entity component triggers some system trigger but, before reaching that system, the component could be removed by another system earlier in the queue?\nEdit - ps: Is this the right place for this kind of conversation? Do we have a more appropriate channel to talk about things?. Thank you for your time to explain... I think that I understand the workflow far better now. =]. ",
    "SonicZentropy": "This is Unity-based rather than MonoGame/etc, but a while back I added an alternative JSON serializer to Entitas using  FullSerializer and it \"just worked\" pretty well.  You could do the same with a different, non-Unity-centric JSON lib like JSON.Net or something and use that in MonoGame.  Highly recommend going this route of adding a new serializer rather than messing with the existing BinaryFormatter. Really looking forward to this update as well. Been keeping watch on Entitas until the big refactoring was done before I converted my current project but it's still pretty impossible to actually switch while all of the wiki/examples/everything are still targeted at out of date stuff!. ",
    "Milambeer": "Ok thank you! Didn't notice :)\nShould be great to update the Pool section wiki to avoid confusion!\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Overview. Ok thank you, helped a lot.\nShould be great in the future to be able to handle event like collision, input, etc directly in the entity or with a system without adding monobehaviour component to dispatch the entity.. Was a bug from my code and not from the framework!. Ok i managed to upgrade my project. I commented all my sources, added my contexts and deleted generated folder. The assembly dll was generated by unity. I generated entitas code to get my contexts generated code, then uncommented my components, then regenerated entitas code to get component generated. From there i just cleaned, updated the code with the upgrade guide to each version. And it worked! \\o/\nBut i have a problem when you loose the game i print a ui menu to reload the game which reset all entity in each context whith this code:\n        gameEventEntity.Destroy();\n        _systems.DeactivateReactiveSystems();\n        _systems.ClearReactiveSystems();\n        _contexts.game.Reset();\n        _contexts.gameEvent.Reset();\n        _contexts.input.Reset();\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\nAt this point i am getting this error when the game reach this code:\n\nContextStillHasRetainedEntitiesException: 'Game' detected retained entities although all entities got destroyed!\nDid you release all entities? Try calling systems.ClearReactiveSystems()before calling context.DestroyAllEntities() to avoid memory leaks.\nEntitas.Context1[TEntity].DestroyAllEntities ()\nEntitas.Context1[TEntity].Reset ()\nGameController.Update () (at Assets/Scripts/GameController.cs:35)\n\nIt worked on 0.36.0 but i am not sure this is the proper way to reload the game. \nAny thoughts?. Ok i managed to fix it. The code\nc#\n    foreach (GameEntity e in entities) {\n        if (e.hasView) {\n            e.view.gameObject.Unlink();\n            UnityEngine.Object.Destroy(e.view.gameObject);\n        }\n        e.Destroy();\n    }\nwas called in another reactive system that wasn't executed before this code was called:\nc#\n    gameEventEntity.Destroy();\n    _systems.DeactivateReactiveSystems();\n    _systems.ClearReactiveSystems();\n    _contexts.game.Reset();\n    _contexts.gameEvent.Reset();\n    _contexts.input.Reset();\n    SceneManager.LoadScene(SceneManager.GetActiveScene().name);\nSo i just waited that the system which clean gameobjects and unlink entities do its jobs and after it's ok just called:\nc#\n    gameEventEntity.Destroy();\n    SceneManager.LoadScene(SceneManager.GetActiveScene().name);\nSince i am calling SceneManager.LoadScene(SceneManager.GetActiveScene().name); to reset the game, i could remove this UnityEngine.Object.Destroy(e.view.gameObject); but tohers part of the code use it (to remove projectile in the game). A refactor is needed to clean it :)\nThanks for your help!. Thank you, it worked!. ",
    "beck-daniel": "You could simply assign an entity for every clickable Unity game object, the shmup example here does exactly this, and then fetch the entity from returned game object.. Updated the Overview page of the wiki to fit the current terms (context <--> pool basically). @T2RKUS Defining dependencies explicitly has the advantage of being easier to use, less error prone, more informative, and save the programmer the actual work of managing dependencies.\nSpecifying indexes gives you no more than just a bit of more convenient way to do what can already be done.. Awsome, that works, thanks!. While its nice to have the classes generated for you by applying the annotation to the component, wouldn't it make more sense to generate using objects that define more elaborate triggers? It would be much more helpful to generate interfaces around a matcher rather than to create them over a single component.\n. ",
    "kdrzymala": "side note: I ended up rewriting c# events to a custom solution in one of our games. c# delegates are immutable so when you += or -= you're leaving garbage ( similar to string concatenation). The custom solution doesn't have to be anything fancy -> this works for me: https://gist.github.com/kdrzymala/c2a96df48bb3dcbc06f8f27c246b8b1d \nSo rewriting it to something like we use could gain some performance.\n. Oh yeah, saw that one on google :) Didn't give it much thought though, because I don't want to write a tool from scratch ( looking forward to letting the designers tweak those trees in a visual manner).\nLooking at it again I see that I could do pretty much the same with Behaviour Designer. I'll only need a component for the BT refrerence and the BT would need the reference for its entity. Nodes would operate directly on entities. I guess as long as the state is in components then I'm good, right?. Spaces FTW!. what @bddckr said.\nThat's why I prefer spaces. I know that if I break a long method and align it nicely, it'll look the same no matter the env settings.. How do you use Entitas.CodeGeneration.Plugins.IgnoreNamespaces = true ?\nI just uprgaded to the 0.41.1 version, added that line to Entitas.properties file, hit generate but the generated components still contain the namespace.\nI am clearly missing something here. Is there anything else I need to do first?. :)\nCan I patch it myself somehow till the new version arrives?. awesome thanks, got it working this way \ud83d\udc4d \n. You can disable the visual debugging in the preferences window. That should help with profiling in the editor, shouldn't it?. What side effects? I'm doing it this way and didn't notice overhead.\nI hear you, though I tend to profile in the editor since deep profile isn't working on devices reliably anyway.. I did what Simon suggests for one of our games and would do it again.\nFor behaviour trees we use BehaviourDesiger. We have an excel spreadsheet that defines all enemies types. One of the fields is the name of the behaviourTree asset. \nIn runtime our \"blueprints\" read this config and provide entities built from it.. Well, we do have scriptable objects that define game entity types :) They are just high-level, and designer friendly like: enemy, pickup, static geometry and so on. The designers can build levels and gameplay effortlesly from those blocks.\nFor instance: enemy generator is parametrized just with the enemyId (which corresponds to the config entry). Designers get to see/tweak only what is meaningful to them.\nThe difference is that we don't allow designers to compose entities from components - in my opinion they shouldn't be aware of that, it's an implementation detail. The composition is done in code.\nAt first I was reluctant to keep it in code, but it's not that much work. When we need a new generator type - coding one is like 2 minutes of work. Generator does only one thing, so it's clean too.. More-less, yes, though it is far more complicated than that (I wanted to describe our setup, but stopped half way, as I have to go  back to work ;-)) The big picture is to expose simple interface to the designers and keep the complexity hidden.\nAs for runtime - no I don't. I treat those SO's just like Unity treats prefabs. Those are editor thingies and the runtime code has not idea where the entities came from, just like Unity doesn't know if a gameObject was spawned dynamically or from prefab.. I will, after gamescom most probably, though ;-). Ok, so a feature request :)\nLet the error message tell the user what's the problem, took me too much time to figure this one out ;-). 5.6.3.p4. I'd say coupling your entitas code to editor / unity like that isn't good. \nWe did a level based game (didn't hit prod yet) and we were making custom mono behaviours for the designers with the params we allowed them to tweak :) \nThose MB's were creating entites / components based on the parameters set by designers - so if a breaking change/refactoring occurred - we managed to keep it all in code and unity scenes and prefabs weren't affected.\nGenerally - the less coupling you have, the better.. Yeah, but since Unity is able to implement it on the c++ side, they'll be able to make it super cache friendly. Something that'd be quite challenging when implementing it purely in c#.\nBuut they'll also expose native memory access and Entitas can benefit too :)\nOn topic: me and my team are used to Replace, not sure what would be the benefit of the rename. Naming conventions are just... conventions :). Yeah, saw that too :)\nThought it's by design ;-). Nice!\nThis is something really similar to what we did (having an EntityConfiguration in SerializedObject), minus the awesomeness of odin -> need to get it ;-) \nThanks for sharing.. I was holding off with Rolsyn reading here that people had issues. I think I waited long enough and tried it today on a new project (latest asset store entitas, Unity 2017.3.0p1) with this result: \n```\nC:\\Repo\\Slippy\\Implementacja\\Slippy>Jenny\\jenny doctor\n???  Unused key: Preferences.Entitas\n???  Unused key: Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold\n???  Unused key: Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath\n???  Unused key: Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\n??  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\n?????  Symptoms: Entitas.CodeGeneration.Plugins.ComponentDataProvider loads and reflects Library/ScriptAssemblies/Assembly-CSharp.dll and therefore doesn't support server mode!\n??  Treatment: Don't use the code generator in server mode with Entitas.CodeGeneration.Plugins.ComponentDataProvider\n?????  Symptoms: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider loads and reflects Library/ScriptAssemblies/Assembly-CSharp.dll and therefore doesn't support server mode!\n??  Treatment: Don't use the code generator in server mode with Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nNie mo\u017cna za\u0142adowa\u0107 pliku lub zestawu 'Entitas, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' lub jednej z jego zale\u017cno\u015bci. Nie mo\u017cna odnale\u017a\u0107 okre\u015blonego pliku.\nC:\\Repo\\Slippy\\Implementacja\\Slippy>Jenny\\jenny fix\n?  Add available post processor: 'DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor' ? (y / n)\nAdded: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\n?  Remove unused key: 'Preferences.Entitas' ? (y / n / (i)gnore)\nRemoved: Preferences.Entitas\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath\n?  Remove unused key: 'Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath' ? (y / n / (i)gnore)\nRemoved: Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\n??  Apply fix: Remove DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor from CodeGenerator.PostProcessors\nto treat symptoms: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor uses Unity APIs but is used outside of Unity! ? (y / n)\nC:\\Repo\\Slippy\\Implementacja\\Slippy>Jenny\\jenny auto-import\nPodana nazwa zestawu lub \u015bcie\u017cka bazowa kodu jest niepoprawna. (Wyj\u0105tek od HRESULT: 0x80131047)\nC:\\Repo\\Slippy\\Implementacja\\Slippy>\n```\nSorry for errors in Polish, not my fault, it's Windows' I guess ;-)\nNot sure what to do next, as the docs are pretty fragmented and related to different versions of Entitas. Someone here said that Zenject is a great example for how documentation should be done. I second that :). Hey, here's my 2c.\n\n\nSingleton. Yep, it's singleton, we all know this one all too well :) Not testable, poor maintainability and modularity. In particular: it's not easy do IMyService and then swap implementations  with singletons, which can be really useful.\n\n\nKind of reminds me of the service locator antipattern. Much better than singleton, but still has issues. What if service A depends on B and B depends on C? You have to manually construct the objects in the correct order. Small change ( B no longer depends on C but on D) can result in need to rewrite stuff. Rewriting stuff -> potentially introducing bugs.\n\n\nThis is what we do and IMO Entitas works sweet with Zenject. You don't need to worry on the correct order of initializing things - Zenject keeps track of the dependency graph and constructs everything in the correct order.\n\n\nThis is how we glue Entitas and Zenject together. You need an InjectableFeature: \nhttps://gist.github.com/kdrzymala/23d37c745377957cf9e63aeb55ceb6b5\nThen in your GameController you do:\n[Inject]\nDiContainer _container;\n[Inject]\nContexts _contexts;\nvoid Start()\n{\n  _systems = new InjectableFeature( \"Root system\" );\n  CreateSystems( _contexts ); // all your _systems.Add(new ASystem); goes here\n  _systems.IncjectSelfAndChildren( _container );\n  _systems.Initialize();\n}\nAnd that's it. Magic can now happen :) You can use [Inject] in your systems now. We abstract quite a few things that way: saving (we have a couple strategies that can be swapped), logging, analytcs (mutliple providers), ads (same as analytics), object pooling, etc.\nAlso - you no longer need to use Contexts.sharedinstance (which is a singleton) - you can inject Contexts into your MonoBehaviours (this is where you'd normally use Contexts.sharedinstance).\nZenject and Entitas are the top 2 awesome things happened to me in the past 2-3 years :) Together they help to create loosely coupled, testable and maintainable code. . @StormRene This where DI frameworks shine ;-) TL;DR; you just do different bindings for tests. \nZenject docs have a bit more to say about it. I'll just guide you there, as there's no point of repeating this stuff:\nhttps://github.com/modesttree/Zenject/blob/master/Documentation/WritingAutomatedTests.md\nhttps://github.com/modesttree/Zenject/blob/master/Documentation/AutoMocking.md\n(seriously, Zenject has awesome documentation)\n. @YimingIsCOLD IMO Zenject works great and is opensource, so I'd say that there's no point in re-inwenting the wheel. \nOnly downside is (if it matters to you) that it has dependencies to UnityEngine. If that's an issue you could try Ninject - which is quite similar.\n. Yep, I did that. It gets stuck at the parsing step.\nHere's the output:\nhttps://gist.github.com/kdrzymala/e947c30eebdc9c3c2d9e84c359aeed99. Yes, that's right! :). I've tested it on some other machines and I noticed that each time Unity generates ProjectName.csproj this bugs happens. Didn't notice it when I had AssemblyCSharp.csproj\nIs there any rule why Unity generates one over the other?. ",
    "r3b00t5": "I realize this has been closed for a while, but has anyone been able to make this work? As I understand Behaviour Designer, each GameObject needs a behaviour tree attached to it so that it can run through its tree. . Thanks, I was looking to just work with the code, but I suppose the extra step won't break my back. Thanks for the response. If I end up swapping the dll's for the source, I'll try to write a how to.. I've started to put together my own design based on the Services and Events tutorial.\nhttps://github.com/sschmid/Entitas-CSharp/wiki/How-I-build-games-with-Entitas-(FNGGames)\nI'll most some screens when I flesh it out enough. \nCan I ask though, in that diagram you posted, how are systems processing components and data?\nEdit: My attempt at UML\n. ",
    "jrmacgill": "The CustomEntityIndex link above now 404s. Could not load file or assembly 'file:///C:\\Users\\jmacg\\Documents\\Unity\\TCG\\Jenny\\Plugins\\Gear\\Gear.Roslyn.CodeGeneration.Plugins.EntitasEnumGenerator.dll' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515) :(\n. Same error... However, did some searching for the error and found that windows was blocking your DLLs.  Right click, properties, (this DLL came from another computer... unblock [ ]) on all three DLLs and the problem is fixed.. Why do 'shared' versions not create Extensions?  It would be nice to use ReplaceX in both cases no?. ",
    "zendorx": "thanx!. Yes, i'm sure. I use ctrl+shift+g shortcut. There no way I could press anything else. Do you have hotkeys for donate? :). https://github.com/sschmid/Entitas-CSharp/blob/22757c60dd96a2722091253715b9531dfb88b879/Addons/Entitas.CodeGeneration.CodeGenerator.CLI/Commands/Donate.cs\nSo what is this code doing than?. for printing heart? :)\n. Yes, i'm on Windows. . Yeah, looks great, but I'll wait some discount :)\nOne more question, can I use Entitas with some Dependency Injection framework(Zenject for example) or there no need? . Thx, great! Also I  see potential to make some sort or repository of systems or commands that very common in use.. ",
    "Crioca": "Thanks, that did the trick.. So just deleting everything except the Entitas folder seemed to work, but I'll follow those steps to be safe.. ",
    "dzliergaard": "Note: \"Plugins\" is now called \"AddOns.\". ",
    "senritsu": "Ok, so would you recommend waiting to try out Entitas until vNext is finished? How much of the existing concepts are obsoleted by the changes? . Judging from the example and a quick look into the Entitas sources, the linking of System to Context is now done manually via constructor injection instead of method injection as before and there is no related interface or visible contract anymore. So if something needs the context, i have to handle that dependency myself, is that correct?. Thanks for the insight. I think i will give it a try despite its current state, and see how far i get, now that i know there is at least an updated reference project to look at. \nOne last tangential question, the Feature class used in the Match One example, am i correct in assuming it is just a wrapper around Systems solely for visual debugging purposes?. ",
    "Xfer83": "I think this would be helpful for beginners.  Though after updating to 0.37.0 it took me some time to realize that i was obliged to declare a context at all, since by default there are none.. Went ahead and had RemoveViewSystem and DestroySystem implement ITeardown in order to remove the views and then destroy the objects properly when _systems.TearDown() is called.\nThis seems to work properly and maybe is the intended way to go about things.  (DId have to double check that i was Unlinking the views properly). \nThanks !. ",
    "AndreGroeschel": "Also starting out with Entitas and evaluating if it might make sense to use it for future projects. Watched the Unite presentations, read through the docs, and started with the examples. Seems not all of them are using the latest version and I feel really confused. Would be super awesome if you could explain the basic concepts. What is a context, what is a feature? At least some code documentation would help. Also how does Entitas integrate with other Unity features. Right now I have no clue how to use NavMeshes, Physics or Networking. Some examples would be really helpful. Entitas seems to be such a great framework and I'm sure with better documentation more people would use in their projects! . @FNGgames thanks a lot! Makes much more sense now and I know where to look. Regarding the EntityLink... I saw in the latest release that something changed there and the Shmup example is outdated. Is there any up to date example that shows how to link gameobjects and entities?. ",
    "5alamander": "Thanks for reply. \ud83d\ude00\nbut I still wonder why the 'OnRemoved' and 'OnAdded' action are invoked when I just 'Replace' a component?\nIs it possible to add an additional action of 'OnReplaced', to distinguish the first 'add action' and the 'replace action'   O__O \uff1f. ",
    "basarsimitci": "I used to do tabs a (very) long time ago. Then I got sick of seeing my code garbled up when I opened in different editors / viewers and converted to spaces for good. While I acknowledge the argument that everyone can set the tab size to their liking, let's not forget that code is not only observed in editors that you can set the tab size, but also on web pages.\nAlso, frequently you need to align to non-tab-stop columns, as already mentioned.. ",
    "leinades": "Spaces because tabs are stupid.. ",
    "ethankennerly": "Do any of you know tips on how to reuse:\n1. a reactive system in two different game repos?\nI tried to make a few Entitas components, systems, and MonoBehaviours that I could reuse between games.  I ran into problems that are related to those discussed above.\n\nThe examples of a reactive system hard-code:\nthe entity class, such as GameEntity.\nthe context class, such as GameContext.\nthe context property on the generated contexts object, such as contexts.game.\n\n\n\nI can generalize to TEntity and TContext.  Yet the generic system looks verbose and less useful.  With a generic class I cannot operate on components, unless those components have an interface, which is generated if the components exist in multiple contexts.\nOr I can specify the entity and context.  Then the code in the library is non-compatible with the code in the specific game, because the library code needs to be generated to function, but the specific game code also needs to generate code, which goes into the specific game's folder.  So the library is always in a broken state.  It can't be tested outside of a game.\nNamespacing is important to write library code.  I'm probably doing it wrong, but last I tried, namespaces made awkwardly verbose generated code by prefixing the namespace to the component variables in the context.. For others reading a warning every frame:  I also did not see the icon beside the game object in the hierarchy window.  The above steps alone did not fix my setup.  I also had to find and restore an old copy of the Assets/Entitas/Editor/Images.  Somehow when I installed the asset store version, the images got deleted.  I already had the GitHub version installed before, so perhaps the images got merged into old location which I cleaned due to conflicts with the new version.  On the import window from the asset store, there is a tiny warning icon on the editor images folder that has the following tooltip:  Will override existing asset, which may be undesirable.. 1. Is there an up-to-date instruction for installing and upgrading Entitas Roslyn generator from the Asset Store?\n1. Are there step-by-step instructions for editing the properties file?\nI have been advocating the adoption of Entitas, yet yesterday when I purchased, I ran into a lot of hassles, many of those mentioned here and in other issues.  https://github.com/sschmid/Entitas-CSharp/issues/477 https://github.com/sschmid/Entitas-CSharp/issues/521\nThrough trial and error, and following the breadcrumbs in miscellaneous issues like this one, I got it working. For example, during the Jenny diagnosis and fixing steps, Jenny gets confused.  I guess between the reflection-based generator and the compiler-based generator (Roslyn-based, from the asset store).  I kept only the references to Roslyn, yet Jenny asks me if I want to add back the reflection libraries.  When I add them back, Jenny has a conflict.. If it's relevant, I've seen this error preceded by another error:\nVisual debugging sometimes crashes when switching windows.\nSteps:\n1. Mac laptop.\n1. Play in editor.\n1. Switch window away from Unity.\n1. Edit an asset file.\n1. Switch back to Unity. \n1. Sometimes an error appears:\n    NullReferenceException: Object reference not set to an instance of an object\n    Entitas.VisualDebugging.Unity.ContextObserverBehaviour.OnDestroy () (at <7a3e32b56db949119387854a500d7000>:0)\n\nAfter this, I might also see a GUI sort of like the one above, but I seem to recall the stack trace was different.. Thanks.  The entity and component lifecycle events are nice.  I\u2019m asking about a new entity lifecycle event:  when the entity is executed by a reactive system.  Because Entitas has no stack trace connecting the origin of a trigger to the reacting system.\nThat logging proposal is thorough.  I found reading a log of multiple entities to be disorganized.  In the example above I created a log on the entity\u2019s audit component, so I could trace where that entity had been before its arrival to a system that is executing it.  In the visual debugger of the audit component, I read only that entity\u2019s log.. @sschmid Would you have time to update some Match-One branch to reflect your experiment?  I'm not yet imagining all the details that you are experimenting with.  For example you wrote:\n\nRemoved all view systems\n\nOn the master branch of Match-One there are view systems:  https://github.com/sschmid/Match-One/tree/master/Assets/Sources/Systems/View. @r3b00t5 That's a great example of a UML diagram for an ECS-architected game!\nEveryone,\nHow would you automatically generate a system diagram from a game that is using Entitas?\nI'm looking for ideas.\nOne idea is to augment the nice visual debugger, so you can see the diagram as you play.\nI haven't found an entity-retained event, so I would make a middleman reactive system class that the game reactive systems extend from.  When compiled for debug visualization, in the execute method, I would place the debug entity game object in front of the debug system game object.\nI would make a sprite and text mesh for each entity.  The text would be the string value of the entity.\nTo see how an entity goes from one system to another, I would going to visualize a trail from one system to the next.  \nI would layout a collection of systems (called a feature) as a row of sprites, one sprite for each terminal system.\nI would layout a series of systems in their execute order.\nWhat ideas do you have to quickly and automatically visualize the relationships between systems?. For what it's worth, in a weekend, I diagrammed and logged flow through any observable Entitas system.\nhttps://github.com/ethankennerly/Entitas-VisualDebugging-System-Flow. I share this concern about enforcing unique components in order to avoid having to do a query if other entities are already applying the not-necessarily unique component.\nIn the case of a unique component, have you considered removing the generated API for adding and removing a component to an entity?\nIn this example, do not generate e.isPaused property.\nInstead, the context already has context.isPaused property.\nAnd it already has context.pausedEntity entity.\nAs a user, I would rather not have an API than have an API that punishes me for using it.\nSince the context has a way to add the component and for accessing the entity, all the valid use cases are supported, and none of the invalid use cases are left as traps for a user to stumble into.\n@FNGgames brings up an interesting use case, which would modify the generated code that I saw for the context context.isPaused = false.  In my version of Entitas, setting that not only removes a component, it also removes the entity. With this suggested use, I imagine it would be compatible to keep the entity with the component removed. Then context.settingsEntity can be used for other properties. If those properties are unique, then an example call like context.isPaused clarifies that the property is unique.\nI could imagine this suggestion being backward compatible if it were an optional toggle on the Jenny code generators, named something like \"Entity (Disregard unique attribute)\".. Thank you for quickly pointing out EventType.Removed argument for the event attribute. I hadn't paid attention to that second argument.. ",
    "c0ffeeartc": "Right now Kit feature blockers are:\n  - partial keyword in generated folder\n  - ComponentsLookup indexes\n  - Contexts facade coupling\nSolutions could be:\n  - Extension methods\n  - Attribute/reflection during initialization (similar to PostConstructorAttribute in Contexts)\n  - static int initialization for indexes\n407 Entitas.Generic solved these in one way\nCould you tell if any changes in this field are expected?. Wiki page can be edited by others vs FAQ issue edited by author only.\nIt could be both: FAQ wiki page + issue for discussion. In gitter chat I got answer this could be due to having exe in Assets folder.\nAfter removing CodeGenerator folder with exe client everything works smooth. No errors. Entitas makes bold changes, maybe its versioning model can change too https://medium.com/sapioit/why-having-3-numbers-in-the-version-name-is-bad-92fc1f6bc73c. Look at https://github.com/sschmid/Entitas-CSharp/issues/430. Yes, delete or move CodeGeneration and Migration folders, they contain commandline tools. Now that I think about it, explicit is better than implicit, and for my usages checking if contextInfo contains component type is enough.\nFor example:\nforeach ( var context in _contexts.allContexts )\n{\n    if ( !context.contextInfo.componentTypes.Contains( typeof( IdComponent ) ) )\n    {\n        Debug.Log( \"Missing idComponent in \" + context.contextInfo.name );\n    }\n}. I solved it by changing IComponent, adding Component class and each component inherits from Component.\n```csharp\npublic interface IComponent {\n    void AfterCopyPublicMemberValues();\n}\npublic class Component : IComponent {\n    public virtual void AfterCopyPublicMemberValues() {\n    }\n}\n```\nNon POD members would implement ICloneable interface called in AfterCopyPublicMemberValues\n```csharp\npublic interface IBtNode : ICloneable {\n    BtStatus Execute(Contexts contexts, Entity entity);\n}\n[BtC]\npublic class BehaviourTreeComp : Entitas.Component {\n    public IBtNode Root;\n    public override void AfterCopyPublicMemberValues() {\n        Root = Root.Clone();\n    }\n}\n--edited to use `csharp code block and spaces`\nclonedComponent.AfterCopyPublicMemberValues() is called in PublicMemberInfoEntityExtension.CopyTo\nI don't tnink it's optimal solution as it doesn't utilize Entitas caching capabilities. If only all behaviourTree data could be cleverly stored in components. Any Ideas?. Agree with all statements, thanks guys.\nI decided to try both approaches and see what fits best in the long run. Configs are very good as they are implementation independent, and data won't disappear after implementation is rewritten. I will add them at some point.\nFor deep-copy solution I ended up using modified copy of PublicMemberInfoEntityExtension.CopyTo \n```csharp\n    public interface IAfterCopy\n    {\n        void AfterCopy();\n    }\npublic static class CloneExtensions\n{\n    public static TEntity CloneEntityExt<TEntity>(this IContext<TEntity> context, IEntity entity, bool replaceExisting = false, params int[] indices) where TEntity : class, IEntity\n    {\n        TEntity entity1 = context.CreateEntity();\n        entity.CopyToExt((IEntity) entity1, replaceExisting, indices);\n        return entity1;\n    }\n\n    public static void CopyToExt(this IEntity entity, IEntity target, bool replaceExisting = false, params int[] indices)\n    {\n        foreach (int index in indices.Length == 0 ? entity.GetComponentIndices() : indices)\n        {\n            IComponent component1 = entity.GetComponent(index);\n            IComponent component2 = target.CreateComponent(index, component1.GetType());\n            component1.CopyPublicMemberValues((object) component2);\n            (component2 as IAfterCopy)?.AfterCopy(  );\n            if (replaceExisting)\n                target.ReplaceComponent(index, component2);\n            else\n                target.AddComponent(index, component2);\n        }\n    }\n}\n\nentity.CopyToExt() calls (component2 as IAfterCopy)?.AfterCopy(  ) after CopyPublicMemberValues. Components can implement IAfterCopy to react. All cloning should go through CloneEntityExt() and CopyToExt().\nIt doesn't require changes to Entitas src.. objects implement ICloneable and in AfterCopy I call something like `Value = Value.Clone();`. Followed this video https://www.youtube.com/watch?v=Ct70N_8TcTU. After some time, I think it should be inside Entitas framework.\nEither:\n  - `CopyTo()` should provide deep copying\n  - or better have separate`CopyToShallow()`, `context.CloneEntityShallow()` and `CopyToDeep()`, `context.CloneEntityDeep()`, to avoid `ICloneable.Clone` reputation for not stating clone type\n  - rename current `entity.CopyTo()`, `context.CloneEntity` to `entity.CopyToShallow()`, `context.CloneEntityShallow()`. If it's thread related I might be wrong, otherwise:\nDo you call entity.Destroy() outside MultiDestroySystem? That's not desired.\nNo need to check entity.isEnabled in Filter, it should match GetTrigger components.. Hi, remove documentation folder or move outside Assets folder. A guess - add scene component to an entity, when unloading scene manage entities(destroy, etc). Passing argument into constructor is \"dependency injection\" principle, it makes code more flexible. For example - it allows having multiple systems of the same type referencing different contexts, which could be used for tests or minigames.. There is no csproj file in new Unity project. Error message should be more descriptive, something like:\nCould not find file \"/pathToYouProject/Assembly-CSharp.csproj\".\nPress \"Assets->Open C# Project\" in Unity's menu to create it.\nIf error remains check name of created *.csproj, write it into Entitas preferences and press generate.\n```. Error message should point to solution when possible IMHO\nBtw is this error dialog standard? If no automatic solution possible, can another button be added into this dialog to trigger Open C# Project, and may be even Open Project Folder button?\n\nAnother solution could be a link to FAQ or Unity Installation Guide in error message. What if I want multiple listeners to [Event(true)]?. Event(true) usage is kind of narrow, will keep using entity.OnComponentAdded \nCan it use Action under the hood to allow multiple listeners?\nSomething like this:\n```csharp\n[GameC]\npublic sealed class HealthCompListenerComponent : Entitas.IComponent {\npublic Action<float> value;\n\n}\npublic partial class GameCEntity {\npublic HealthCompListenerComponent healthCompListener { get { return (HealthCompListenerComponent)GetComponent(GameCComponentsLookup.HealthCompListener); } }\npublic bool hasHealthCompListener { get { return HasComponent(GameCComponentsLookup.HealthCompListener); } }\n\npublic void AddHealthCompListener(IHealthCompListener listener) {\n    if (!hasHealthCompListener) {\n        var index = GameCComponentsLookup.HealthCompListener;\n        var component = CreateComponent<HealthCompListenerComponent>(index);\n        component.value += listener;\n        AddComponent(index, component);\n    }\n    else {\n        healthCompListener.value += listener;\n        listener.OnHealthComp(healthComp.Value);\n    }\n}\n\npublic void RemoveHealthCompListener(IHealthCompListener listener) {\n    healthCompListener.value -= listener;\n    if (healthCompListener.value == null) {\n        RemoveComponent(GameCComponentsLookup.HealthCompListener);\n    }\n}\n\n}\n. Copied existing generators and changed to use `Action` [Gist](https://gist.github.com/c0ffeeartc/c03f7aa5f8e110c10ce8c6bd018e2ee4).\n It needs extension method for convenience, didn't write generator for itcsharp\npublic static void ListenHealthComp (this GameCEntity ent, Action action) {\n    if (!ent.hasHealthCompListener) {\n        ent.AddHealthCompListener(null);\n    }\n    ent.healthCompListener.value    += action;\n    ent.ReplaceHealthCompListener(ent.healthCompListener.value);\n}\n```\nHere are my thoughts after digging in event generators:\n  - Event(false) and Event(true) serve quite different purposes, and having same interface gives drawbacks. For example ent.AddHealthListener(*) doesn't tell if health is entity event or a global event. Or if at some point developer chooses to switch (false) to (true)version there will be no compilation errors, but behaviour will be broken.\n  - Event(false) and Event(true) generators are tightly coupled. Wanted to change one of them and had to change other too. [Event] and [EntityEvent] sound good. > IXyzEntityListener could pass the entity instead of the value\n but not sure if that's a good decision as it might encourage modifying the entity\nI'd use entity argument in both Event and EntityEvent, sometimes there are additional components on entities.. @roygear eventSystem tracks all value changes of Component. When there are class members system reacts to Added trigger, without class members it reacts to AddedOrRemoved trigger.\nEventSystemGenerator.cs\ncsharp\n      MemberData[] memberData = data.GetMemberData();\n      string newValue1 = memberData.Length == 0 ? \"AddedOrRemoved\" : \"Added\";\nDo you request separate Added, Removed systems or separate subscription?\nIn case of isGameOver that could be useful, in case like isFrozen that would lead to subscribe twice to the same function, one to display frozen state, another to turn it off. So it's the same problem rotated around. @StormRene when callbacks are on different entities, how system would trigger only callbacks subscribed to this entity?\nHow about keeping multiple callbacks in a component of an entity? . If we agree on passing entity as argument to Event and EntityEvent, can we use this interface void (Contexts contexts, GameEntity ent) ?. I need Contexts to get access to everything \ud83d\ude04\nFor example event entity is only a signal that something happened, then view gathers data through contexts and updates itself.\nContexts and entity are present in eventSystem, why not share them. In case these won't pass to final interface, I'll just use Contexts.sharedInstance, and GetEntityWith* to do the same thing.. Something like [EntityEvent( hasContextsArg = false, hasEntityArg = enumEntityArg.CreationIndex, hasEntityFieldsArgs = true)] or [EntityEvent( argFlags = eContexts | eEntityCreationIndex | eEntityFields]. And everyone gets what he wants. Sounds like a hell of generator \ud83d\ude06 . > Changed it to detect if the component only has 1 context and then not prefixing it with the context name. \nSorry to say late, but that's probably not a good decision. After adding context and regenerating it will bring compile errors for every subscriber.\nIt's great to have it open source to tweak however we like. Any ETA on updated feature?. Made a repository EventsCE alternative to Entitas Events feature. Current step is replicate Events generation into Generated/EventsCE folder. After step is done other features are planned see Readme. >>Another issue I encounter is let say I have UI A and UI B. When I close UI A and switch to UI B, I will remove all the UI A listeners. Then when I close UI B and open UI A, the UI A does not refresh all the data when I add all the UI A listeners. I think I need something like [Event(false, EventType.AddedOrRemoved, RefreshListener)] to generate one more system to make it call listener one time when adding the ListenerComponent to the entity.\n\nFor this problem, do you have any good solution for it? I think another way is to just get the component and replace back the component with the same data to make it call listener. Will it better than generate one more system to make it call listener one time when adding the ListenerComponent to the entity?\n\nwhen adding listeners there is access to needed entity, call listener directly after adding listeners.. It's ok to have double linked references.\nWhen referenced entities are flagged for destroy referencedEntity.isDestroy = true, handle broken references in Cleanup system.. //than, we can't keep ref of GameEntity? do GetEntityWithId when needed?\nYour test calls applEntity.Destroy(), usually it can happen only inside DestroySystem, all other places should flag entity applEntity.isDestroy = true. This way it's fine to use reference from GetEntityWithId() during local scope or during one Systems.Execute() call, but caching reference in broader scope is error prone. @T2RKUS does PrimaryEntityIndex work well with float and Vector3? I thought it was for int and enum mostly. Currently using this\n```csharp\npartial class Contexts\n{\n    public Custom.Sources.Services Services;\n}\nnamespace Custom.Sources\n{\n    public class Services\n    {\n        public IGameEntService GameEnt;\n        public ICmdEntService CmdEnt;\n        public IConfigService Config;\n    }\n}\n// In GameController.cs\n// _contexts.Services = new Services\n// {\n//     GameEnt = new GameEntService,\n//     CmdEnt = new CmdEntService,\n//     Config = new ConfigService,\n// };\n```. Model looks nice and very intuitive, should be in wiki somewhere \ud83d\ude04 \nI wouldn't place Physics Collision alongside Button Click, because Unity runs physics in separate cycle N times before Update FixedUpdate > InternalPhysics > OnTriggerXXX > OnCollisionXXX > yield WaitForFixedUpdate.\n Bullet may bounce of wall during few physics cycles before it gets destroyed in Game Logic, if we mark Bullet as trigger it gives no collisionInfo, and if we add BounceComponent to Bullet marked as trigger, it will travel a bit inside objects before GameLogic corrects its direction.. @zhuchun same could go for regular classes, until you implement a class there is nothing to test and there might be compile errors.\nNSpec has pending tests feature it[\"\"]=todo; xit[\"\"]= ()=>{}; for this situation . Look at IdComponent example. Order of attributes isn't reliable, another argument perhaps inside Event attribute.. Also this might be helpful for group entities iteration https://github.com/sschmid/Entitas-CSharp/issues/624#issuecomment-368242397. Did you add EventSystems to Systems in GameController?. Hi,\nAdded your components code to project, generated result:\n```\npublic partial class Contexts {\npublic const string DunkHeroesGameComponentsPlayerIndex = \"DunkHeroesGameComponentsPlayerIndex\";\npublic const string DunkHeroesInputsComponentsPlayerIndex = \"DunkHeroesInputsComponentsPlayerIndex\";\n\n``\nNo compilation errors.Ignore Namespacesis set tofalsein Entitas 1.4.2 preferences.\nGenerated by Unity generator(not jenny). Shorter namespaces maybe.\nOr no namespaces for components, and when name collision happens just come up with another name. Multiple projects can be handled with multiple generate passes. Each project has separate set of setting files, hittinggenerate` runs them one by one.. reverse order won't work when listener deletes other listener not self. Well, that's somewhat alternative look at github issues. Here is bolt's roadmap for example link, it has features per version, research and few other sections.\nThere was something similar in this repository issues, most features were finished time ago. Ok, so submitting feature suggestions and pull requests is the way to go.. This setup is too simple. Without Entitas that would be only few functions and MonoBehaviours.\nEntitas helps building architecture good for extension, if you plan add a lot more features it can become useful.\n Simple project could be good to learn, try out Entitas routines, check if it fits you. Additional info generator skips abstract classes, could be useful for base IComponent. Here is one way - create Main scene, put GameController into it, load it at startup and never unload it. Load/unload all other scenes additively.\nHow and when you load/unload is up to you. > Wouldn't it be an issue if lets say main menu scene is quite graphic heavy and even disabling it might take some memory?\nIn setup I described Main scene is just a manager without any graphics or heavy objects.\n\nWhy not unload this main menu scene along with related controller?\n\nUnloading game controller is another way to do it. I don't unload game controller because I find having 1 Contexts instance through all app runtime convenient. For ui refreshing there is Events feature. Chatting in gitter may get you additional answers. Added.\nFeel free to fix/change https://github.com/sschmid/Entitas-CSharp/wiki/Example-projects. [Event(Listen.Entity)], [Event(Listen.Group)]. @zhuchun yes I read this link, and my implementation is very close to it.\n What I lack is some kind of TransformController wrapper or a set of components, that have parenting and matrix transformation functions. How do you deal with transformations under that architecture?. @zhuchun thanks. I totally missed IViewController part , looks very close to what I need. Will try it out and return with results. I wrote TransformController and it solved a lot of issues, but I didn't have time for very thorough check. Here are my thoughts:\n  - it's about immediate vs postponed state changes. Controller, Group Callbacks are immediate, Systems are postponed.\n  - having immediate changes in transform is crucial when dealing with parented transforms. Immediately changing unity transforms removes performance gains, but is required for states heavily dependent on parenting. It's not that bad, just the regular way unity works.\nSome implementation details:\n  - I used controller for read and write, but kept positionLocal, rotationLocal, scaleLocal components for reacting\n  - if entity has view, position, rotation or scale it must have a transformController. Each entity with TrController must have a gameobject\n  - gameobject is added immediately\nHere is gist to some parts link. I read Situation 3\nPossible solution is Parametric Animation. It's doable with tweens, behaviour trees, or coroutines. During them create Input/Command entites, this will most likely happen during unity's Update stage, so be careful what entities you create.\n\nDon't really know where to put the hitTime calculation code in. A SkillService? Right now because there's only 2 different kinds of text animation I'm putting it all in the PerformAttackSystem within an if/else block. But obviously this is not scalable.\n\nI write functions into systems at first, then once needed elsewhere, refactor them into service and call from various places.. > Which part were you talking about? The delay between AoE hits, or the multi-hits part? (sorry I didn't organize the point very well).\nIt should work for both parts, it's written in code and quite flexible. The downside it needs recompiling\n\nAnyway, this part is an animation visual, so creating InputEntity wouldn't be a sound idea, would it?\n\nFine for me. Would like to know more solutions. That's why I prefer using base ContextAttribute instead of generated. Doesn't look as nice but is more reliable.\nHere is code I found to get contextNames from ISymbol\n```\n        public static List GetContextNames(ISymbol type)\n        {\n            List contextAttributes = new List();\n        foreach (var attribute in type.GetAttributes())\n        {\n            if (attribute.AttributeClass.BaseType.ToDisplayString().Contains(typeof (ContextAttribute).ToCompilableString()))\n            {\n                // we need to go deeper!\n                var declaration = attribute.AttributeConstructor.DeclaringSyntaxReferences.First().GetSyntax();\n                var baseConstructorInit = (ConstructorInitializerSyntax) declaration.DescendantNodes().First(x => x.IsKind(SyntaxKind.BaseConstructorInitializer));\n                var name = (LiteralExpressionSyntax) baseConstructorInit.ArgumentList.Arguments.First().Expression;                    \n                contextAttributes.Add(name.ToString().Replace(\"\\\"\",\"\"));\n            }\n            if (attribute.AttributeClass.ToDisplayString().Contains(typeof(ContextAttribute).ToCompilableString()))\n            {\n                var name = (string)attribute.ConstructorArguments.First().Value;\n                contextAttributes.Add(name);\n            }\n        }\n        return contextAttributes;\n    }\n\n``\nFeel free to close issue if not going to be implemented. DoesMakeEntityFromEntityInfo` involve deserialization? If so it could be the case.\nAlso check profiler results with disabled visual debugging in Entitas settings.. @wpp1983 methods on screenshot are not from Entitas. As sschmid said by using deep profile you can find the culprit. ",
    "IDNoise": "Did you add [Game] attribute to position component? Now you need to specify what context\\contexts component will be used in.. I think problem here is in binary serialization, after change in network component serialization failed on 2nd component and all components below were wiped. I'm not sure, but possibly you can move component to the bottom of the list for each blueprint before changing it or wait\\implement yourself json\\yaml\\xml serialization :). I'm not sure this is good feature. In some cases you don't need component to be trigger in reactive system and want to save performance on every value change. F.e. you have global component with counters that is affected by multiple systems almost every frame, but no one need to react on those changes.\nAs an option it's possible to add new component attribute like [ReadOnly] that will generate interface with getters only.. I have setup like this\nSystem\n```cs\npublic class UISectorControlsSystem : BaseSlowExecuteSystem\n{\n    UISectorControlsView _sectorControlsView;\npublic UISectorControlsSystem(Contexts contexts, int executesPerSecond) : base(contexts, executesPerSecond)\n{\n    _sectorControlsView = GameObject.FindObjectOfType<UISectorControlsView>();\n\n    _sectorControlsView.ButtonPrev.onClick.AddListener(() => _context.AddAction(ActionType.ChangeSector, new ActionDataChangeSector(_context.player.currentSector.value - 1)));\n    _sectorControlsView.ButtonNext.onClick.AddListener(() => _context.AddAction(ActionType.ChangeSector, new ActionDataChangeSector(_context.player.currentSector.value + 1)));\n    _sectorControlsView.ButtonAutorNext.onClick.AddListener(() => _context.CreateEntity().AddCommandToggleAutoNextSector(!_context.player.doAutoNextSector));\n}\n\nprotected override void SlowExecute()\n{\n    var playerEntity = _context.player;\n    var sectorEntity = _context.sectorEntity;\n\n    if (!_context.sectorEntity.hasWave)\n        return;\n\n    var currentSector = sectorEntity.sector.value;\n    var lastCompleted = playerEntity.completedSector.value;\n\n    _sectorControlsView.ButtonPrev.interactable = GameLogic.IsSectorAvailable(currentSector - 1, lastCompleted);\n    _sectorControlsView.ButtonNext.interactable = GameLogic.IsSectorAvailable(currentSector + 1, lastCompleted);\n\n    _sectorControlsView.GONext.SetActive(_sectorControlsView.ButtonNext.interactable);\n    _sectorControlsView.GOWaves.SetActive(!_sectorControlsView.ButtonNext.interactable);\n\n    _sectorControlsView.TextWavesLeft.text = sectorEntity.wave.value.ToString();\n\n    _sectorControlsView.IconAutoNext.color = playerEntity.doAutoNextSector ? _sectorControlsView.AutoNextEnabledColor : _sectorControlsView.AutoNextDisabledColor;\n\n    _sectorControlsView.TextSector.text = currentSector.ToString();\n}\n\n}\nMonoBehaviourcs\npublic class UISectorControlsView : MonoBehaviour\n{\n    public GameObject GOWaves;\n    public GameObject GONext;\n    public Text TextWavesLeft;\n    public Button ButtonPrev;\n    public Button ButtonNext;\n    public Button ButtonAutorNext;\n    public Image IconAutoNext;\n    public Text TextSector;\npublic Color AutoNextDisabledColor;\npublic Color AutoNextEnabledColor;\n\n}\n```\nI don't have any unity events setup in editor, subscribe to button's onClick in system code. This examples from element that is always in scene, for dynamic parts i spawn entity with prefab, go is created and then it's handled by other system the same way, get from view monobehaviour and add callbacks\\setup values. MonoBehaviour on prefab root is just a bag of references to needed components and again, i subscribe to all events in code, for me this is easier to track then searching in hierarchy.. This is for static element in gui and how you can handle it without prefab\\entity and FinfObjectOfType called once on initialization, you will have performance problems only if you gonna call it every update :) \nThis is example for dynamic list\n```cs\npublic sealed class UIWeaponListSystem : GameReactiveSystem\n{\n    UIWeaponListView _listView;\npublic UIWeaponListSystem(Contexts contexts) : base(contexts)\n{\n    _listView = GameObject.FindObjectOfType<UIWeaponListView>();\n}\n\nprotected override void Execute(List<GameEntity> entities)\n{\n    foreach (var weapon in entities)\n    {\n        var weaponViewGO = GameObject.Instantiate(_listView.WeaponPrototype);\n        weaponViewGO.transform.SetParent(_listView.transform);\n\n        weapon.AddWeaponUIView(weaponViewGO.GetComponent<UIWeaponView>());\n    }\n}\n\nprotected override bool Filter(GameEntity entity)\n{\n    return true;\n}\n\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context)\n{\n    return new Collector<GameEntity>(\n        context.GetGroup(Matcher<GameEntity>.AllOf(GameMatcher.TransportWeapon)), \n        GroupEvent.Added\n    );\n}\n\n}\n```\nthen in view system you can have smth like this\n```cs\nprotected override void SlowExecute()\n    {\n        foreach (var e in _weapons.GetEntityList())\n        {\n            var view = e.weaponUIView.value;\n            var isOnScreen = view.transform.IsRectOnScreen();\n        if (!isOnScreen)\n            continue;\n\n        var isActiveView = IsViewActive(e);\n        view.gameObject.SetActive(isActiveView);\n        if (!isActiveView)\n            return;\n\n        UpdateView(e, view);\n    }\n}\n\nprivate void UpdateView(GameEntity entity, UIWeaponView view)\n    {\n        view.ActiveInfoContainer.SetActive(entity.isActive);\n    view.ButtonLevelUp.interactable = _context.HasEnoughMoney(entity.weaponPrice.price);\n\n    if (entity.hasWeaponView && entity.weaponView.value.ViewLevels.Length > 1)\n        view.ImageIcon.sprite = entity.weaponView.value.SpriteRenderer.sprite;\n\n    UpdateReassemblies(entity, view);\n}\n\n```\nUIWeaponView  is monobehaviour with only references to components\nI'm not saying this is best fit for everyone, but i never setup ui events in editor, only code :). For those who is working solo or have configs in editor - use scripatble objects and create extenstion methods with scriptable object as parameter, this way you can create entities with custom logic and special cases based on this configuration.  It's more extensible nd you don't miss  required component, also changing components will not affect your configuration! ;). what about https://github.com/sschmid/Entitas-CSharp/issues/388? add extensions for all types or do it like \nGameMatcher.Asset.On(GroupEvent.AddedOrUpdated). Group's GetEntities can result in big gc allocation for game when hunderds of entities with multiple components are created and destroyed every second. 1 rule: don't change collection returned by group.\nI'm still on source code version and use this code, with arrays i had up to 150kb gc every second.\ncs\n        List<TEntity> _entityListCache = new List<TEntity>(64);\n        public List<TEntity> GetEntityList()\n        {\n            if (_entitiesCache == null)\n            {\n                _entityListCache.Clear();\n                _entityListCache.AddRange(_entities);\n            }\n            return _entityListCache;\n        }\n. Right now i'm using these 2 options (mostly 1st):\n1.  List _entityListCache = new List(64);\n    public List<TEntity> GetEntitiesNonAlloc() {\n        if (_entitiesCache == null) {\n            _entityListCache.Clear();\n            _entityListCache.AddRange(_entities);\n        }\n        return _entityListCache;\n    }\n\n\npublic IEnumerable AsEnumerable => _entities;\n\nYeah, i know that 2nd has limitation of not changable during iteration :). @rastlin86 Did you measure it? How many bytes it allocs? \nAs a thing to try is to create internal custom enumerator that will wrap hashset's struct enumerator inside, like here: https://gist.github.com/yuri-tikhomirov/6bb2cc1a04391451ba60, not gonna try it myself now, will do it when optimization interation will come :). Based on link i posted:\n```csharp\n        public IEnumerator GetEnumerator()\n        {\n            return RetainEnumerator();\n        }\n    CustomEnumerator _enumerator;\n    bool _isEnumeratorRetained;\n    IEnumerator<Entity> RetainEnumerator()\n    {\n        if (_enumerator == null)\n        {\n            _enumerator = new CustomEnumerator(this, _entities);\n            _isEnumeratorRetained = true;\n            return _enumerator;\n        }\n        else\n        {\n            if (_isEnumeratorRetained)\n                return _entities.GetEnumerator(); //  _enumerator is retained, so would produce base enumerator\n            else\n            {\n                _isEnumeratorRetained = true; // not retained, so will just return an instance\n                _enumerator.MyReset(); // reset it with special public method\n                return _enumerator;\n            }\n        }\n    }\n\n    void ReleaseEnumerator(CustomEnumerator enumerator)\n    {\n        if (ReferenceEquals(enumerator, _enumerator))\n        {\n            // the reference equals, so it is ok to release\n            _isEnumeratorRetained = false;\n        }\n    }\n\n    public class CustomEnumerator : IEnumerator<Entity>, IEnumerator\n    {\n        private Group _group;\n        private HashSet<Entity> _hashSet;\n        private HashSet<Entity>.Enumerator _enumerator;\n\n        public CustomEnumerator(Group group, HashSet<Entity> hashSet)\n        {\n            _group = group;\n            _hashSet = hashSet;\n            _enumerator = hashSet.GetEnumerator();\n        }\n\n        public void MyReset() => _enumerator = _hashSet.GetEnumerator();\n\n        bool IEnumerator.MoveNext() => _enumerator.MoveNext();\n\n        // can't access to private Reset() method, so just re-create base enumerator\n        void IEnumerator.Reset() => _enumerator = _hashSet.GetEnumerator();\n\n        object IEnumerator.Current => _enumerator.Current;\n\n        Entity IEnumerator<Entity>.Current => _enumerator.Current;\n\n        void IDisposable.Dispose()\n        {\n            // dispose base enumerator (actually, does nothing)\n            _enumerator.Dispose();\n            // tell the list it is released\n            _group.ReleaseEnumerator(this);\n        }\n    }\n\n```\nThis one generates 0 garbage (if you don't do foreach over group inside foreach over same group :) )\n2nd approach i use is 1. from my comment before (GetEntitiesNonAlloc() with internal list cache)\nI don't want to give away linq capabilities, i use it a lot and get rid\\optimize only parts that really affect performance :)\n. Also garbage free solution (a bit hacky and slower :) )\nGroup inherits from List and we do this.Add(entity), this.Remove(entity) if add/remove entity to hashset succeeded.\n```csharp\n        bool AddEntitySilently(Entity entity)\n        {\n            if (entity.IsEnabled)\n            {\n                var added = _entities.Add(entity);\n                if (added)\n                {\n                    >> this.Add(entity);\n                    _doUpdateCache = true;\n                    entity.Retain(this);\n                }\n            return added;\n        }\n\n        return false;\n    }\n\n    bool RemoveEntitySilently(Entity entity)\n    {\n        var removed = _entities.Remove(entity);\n        if (removed)\n        {\n           >>  this.Remove(entity);\n            _doUpdateCache = true;\n            entity.Release(this);\n        }\n\n        return removed;\n    }\n\n```. Yes, there is no way to get rid of it, it was posted before. So you have to get a copy if such loop expected, my suggested getEntitiesNonAlloc does the trick (if you don't call it inside same foreach), it is always in group and you don't fill every system with buffer list field as you want in your solution, . Yes it isn't, didn't need it to be :) But it also don't stop you from having buffer inside threaded system and fill it yourself or have both solutions, just to reduce boilerplate.. There is bluepring functionality for this and it has problems now in case of component change.\nThere is one big cons: every time you want to change component stucture (combine, split, remove/replace) designer will need to fix all prefabs too. So it's better to have custom set of mono behaviours you give to your designer and you write own logic on how to translate this data into current set of components.. Question is why do you use EntityIndex instead of PrimaryEntityIndex when you need only 1 to 1 relation, this is why you have this .Frist() call. Because EntityIndex has list or hashset as result.   As i said, store index as field (and don't reqest it from context by name) + use primary entity index. if this is not enough you can write own index using array (basically you will have same stuff you have now). What i ment is there is already PrimaryEntityIndex with 1 to 1 support (Dict and not  as in EntityIndex). You are not required to use entity index at all. You need to select best approach, if single dict get is too slow for you - write own solution, it can be custom index or separate solution. There is no tools that do all jobs good :)  For me basic primary index was good enough (stored in field) and i had 30+ entities created\\removed per frame with ~300 entities that were used in collisions (ships and projectiles) + 300 entities for other stuff.. Hey. I had this suggestion before (https://github.com/sschmid/Entitas-CSharp/issues/388). There are code entries you can use if you use source code version. It makes real split between added/updated/removed.. I had same problem on start of my project and decided to drop actions at all, all my commands had validation (your option 2).\nQueue solution must work properly, it's very rare situation when you can get >1 action from user (gui/input) per tick.\nOption 1 is really redutant because there can be multiple types of command that need some spendable resource. I had 5-6 of such commands  ;)\nThere is no best answer, better do what works for your in current situation, it's not that big of a deal to refactor it and if there are tests, you don't have to worry about it :). You can also add to EntitasCache (if it's partial) new object pool entry per multicast event and get list from there on add and push on remove, because this api is already ready for it :). According to this https://stackoverflow.com/questions/3679805/how-does-foreach-call-getenumerator-via-ienumerable-reference-or-via/3679993#3679993\nyou can still use IEnumerable interface (just implement it privately so there is no crossing between GetEnumerator that returns HashSet and the one that returns IEnumerator). And for foreach it will be alloc free (because GetEnumerator that returns hashset.enumerator must be used first) and for linq there will be cast to ienumerable version. Didn't test myself, but thing to try :)\n. ",
    "blisterfingers": "I figured this out. I moved the entitas source from it's position in Assets/Plugins/Entitas/Entitas to Assets/Entitas/Entitas and my component classes were in a namespace but I changed the Data Provider in the preferences and it works after removing all the files and doing a fresh generate.. ",
    "WeslomPo": "I connect entitas to zenject and it work like a charm. Only SceneContext on scene before you hit play xD, and all dependencies in right place. Love it.. Fix link in \"Install Entitas and first steps\" to examples page, it led to new empty page before.. @FNGgames unity have a folder WebplayerTemplate, you can move files here if you don't want to compile. Your algorithm is very clear (and I can make a script to make it automagical), but on start, before of understand how framework is working exactly, it's make beginners feel very uncomfortable. I want to say this is huge problem in a core of framework.\n@danielbe1 I dig trough all wiki, I think. I don't understand why I need other tool to work with Entitas, and I don't like Eclipse :). Maybe, someday I will try it, but first, let me make a bicycle :). Maybe it will be working with generators some day, maybe I will not need it ever.\n. There a two problem:\n1. We have complex dependency model\n2. IEntity/Entity - is premature optimized with generators, and a lot of code dependent on it. \nComplex dependency model.\nSystems, and a lot of code dependent from generated code and model, generated code dependent from model components too, when we made change on model, we need to update all other dependencies. There are an image with arrows that represent dependencies (#paintskilz).\n\nHere a systems dependent from components bypass generated code. Maybe, if we freeze model and make generated code and systems dependent from it, we can solve the problem of egg and chicken. I mean, we can just copy/paste components and made dependencies from it instead of source model, that's brake cross generated code dependency in systems, and solve compiler errors, I think. Here another image:\n\nNo dependencies from source components. No compiler errors when you change them.\nPremature optimization\nThat is bad. Maybe you not need a code generator at all, anyway 95% of frame time eaten by graphics. Maybe need to concentrate on building more comfortable workflow with developers, that can save a lot time for making a lot of new features, than on optimization that save 1% of frame time, and cost a hundreds of developers hours.. @sschmid yeah, I understand about multiplayer and etc. But beginners may not get there because of complicity of work with generators.\nIs Roslyn work with mac?\nI made wrong implementation at first, now I move all get/set component code in Entity that extends base class, and i remove LookUpTable because it just ContextInfo. Now it looks like this:\nDebugMessage component = e.GetComponent<DebugMessage>();\nLookUpTable now just statically extends ContextInfo methods:\n```\npublic static class LookupTable {\n    public static int IndexOf<T>(this ContextInfo contextInfo) where T : IComponent {\n        // Todo assert if -1\n        return Array.IndexOf(contextInfo.componentTypes, typeof(T));\n    }\n\n    public static int[] IndicesOf(this ContextInfo contextInfo, Type[] types) {\n        int[] indices = new int[types.Length];\n        for (int index = 0; index < types.Length; index++)\n            indices[index] = Array.IndexOf(contextInfo.componentTypes, types[index]);\n        return indices;\n    }\n\n}\n\n**Generic.Entity**:\nnamespace Generic {\n    public class Entity : Entitas.Entity {\n    public void AddComponent<T>(T component) where T : IComponent {\n        AddComponent(contextInfo.IndexOf<T>(), component);\n    }\n\n    public void RemoveComponent<T>() where T : IComponent {\n        RemoveComponent(contextInfo.IndexOf<T>());\n    }\n\n    public void ReplaceComponent<T>(T component) where T : IComponent {\n        ReplaceComponent(contextInfo.IndexOf<T>(), component);\n    }\n\n    public T GetComponent<T>() where T : IComponent {\n        return (T) base.GetComponent(contextInfo.IndexOf<T>());\n    }\n\n    public bool HasComponent<T>() where T : IComponent {\n        return HasComponent(contextInfo.IndexOf<T>());\n    }\n\n    public bool HasComponents(Type[] components) {\n        return HasComponents(contextInfo.IndicesOf(components));\n    }\n\n    public bool HasAnyComponent(Type[] components) {\n        return HasAnyComponent(contextInfo.IndicesOf(components));\n    }\n\n    // Not all methods here, but, maybe it not useful in real workflow.\n\n}\n\n}\n```\nI updated gist with full implementation. I think, that code some \"not written now\" generator of code can convert to more fast in a particular case, if necessary.\nConclusion\nI understand that there a framework with long history, with robust workflow and etc. I just want to give a few ideas, show an example of work without a code generator. Thanks for answers!\nGist with full implementation. @danielbe1 as a generic solution, it will not compile if you made some type conversion mistakes, as it guarantee type safe.\nBut, that code can have some cpu and cache problem, that lay more deep down than type checking (as all logical errors). Every call is a search a type in array, and that may lead to cpu down, when you use many of components and many of matchers. Replacing components with \"new\" every time make a new object and replace previous, that need to be collected by garbage collector sometimes, that makes a hiccups in cpu page in profiler here are @sschmid  and @mzaks talk more. There need to think about caching and pooling. It not hard as described in video, but it still need work to do with. I think it still good performance, as It work with fast Entitas inside, only user code may have problems... I hope... :)\nAlso, to be honest, I don't test my solution not for errors, not for speed or efficiency, I made it for learning. I want to start using ECS as fast as I can, without fighting with compiler, that I hate to do. If I would love to fight with compiler I'm will programming on C++ xD.\nCode generated solution more robust, more user friendly and very performant solution, but it have defect with compiling while you in active developing, and made many of changes in components, like remove, rename fields and etc. I love to remove and rename something every time :) and that defect makes me crazy, I feel unconfident and uncomfortable.. @Spy-Shifty there problem that when you rename field (with resharper, of course) or change signature, it need to be regenerated, but it can't because of reflection.\nNow I thinking about my diagram, that I can make by myself with barehands, to test that solution, maybe that will be enough to solve problem, maybe not. After tests I will write result here. But now I have no time to experiments, today and tomorrow I need to release three games simultaneously xD. \nGeneric solution, to my opinion will works same as generated solution, maybe with suspectible lack of performance, but still fast than MonoBehaviour, because in core it is a entitas with their awesomness.\nThanks for your advices.\n. @sschmid, Back to my first message. I said that I have two solutions, and seconds is using generic wrapper, that wraps entitas with generic methods. But first solution is make a copies of components and make dependencies to that copies instead of source components, I suggested, that this solution will fix issue with impossibility of re-generating when you change source component a lot. But, also I suggested that solution will need a lot of time to work... but last turned out it is not true :)\nI spend two hours and made some peglegs in code generators to test my suggestion. And it works. It really breaks that vicious circle of dependencies. Now I can use power of generators, and make a changes without pain in ass :).\nA few comments, that solution very simple, but need to make several changes in code generators, and that solution generate only simple components with fields only (it not copy-paste file, it use arguments list to made component). It need change all dependencies in Systems to generated components. I made it like a proof-of-concept, and it works.\n. @KumoKairo yes, you right. But the fact is, that even with coupled with project compiler (like mono in unity) you can re-generate components after changing. I test that and that's works (I told about in chat). Third-party program not needed.. If you call SomethingManager, or SomethingController, that you don't understand what that thing is exactly.\nContext is really great name with very clear understanding to my opinion. Maybe you need to work with entitas more to understand that.. I'am using unity 2018 from start, and it is buggy as hell. It is not Entitas problem. Just wait for patch release.\nI have a tested bug with opening properties from Entitas preferences window - after click Unity immediatly falling down. xD. Or when you forget to stop unity and go to IDE and back - it may crash sometimes.. \nSame here. Maybe I need to just update Rider.... Rider update is not helped here...\nI don't know, when it started, I just see it today. Maybe I need to update Entitas (I have 1.5.1)... I try it now.. Aha! I was stupid. I update Entitas to 1.5.2 and it is solve my problem. Thanks for help.. Huge problem that name for entities generates every frame by ToString (5 problem in the list). This is first that need to be fixed.. ",
    "aefreedman": "I'm not certain this issue is actually resolved. I think this is an execution order problem.\ntl;dr the linked gameobject may be destroyed before you unlink and release. You may still throw exceptions unless you do an unlink check in every monobehavior interested in the EntityLink.\nYou can create something like EntityLinkTeardownSystem that calls Unlink() on any View during TearDown(), but you will still  sometimes hit the retention exception because during Destroy() the GameObject with the entity link may be destroyed before your teardown system is called. You'll end up with entities retained by instances of an entity link that you can't unlink and release anymore.\n\nQ: Why don't you just make sure the Entity Link ensures it releases its entity, then?\n// In EntityLink.cs\nprivate void OnDestroy()\n{\n    if (_entity != null) Unlink();\n}\n\nSo, that does work and you still get the retention exception, only the retained entity is destroyed as expected.\nThe only method I've found that avoids all exceptions is doing both the teardown system and also unlinking in the EntityLink.\n*edit for clarity. Just throwing in here that there might be a conflict with WebGL builds and multithreading.. Commenting here because I'm finding the current wiki structure hard to navigate and it's difficult to find the information I need in a timely manner, or even discover that it doesn't exist. The reorganization into many pages has hidden information between clicks and searches.\nThe information for getting started with Entitas is good, but once you get beyond that, there's little information. The many questions and issues on the tracker and gitter may be symptomatic of this.\nI would reference the Zenject docs as a good example. Zenject is arguably more finicky and confusing to set up than Entitas, but I think the Zenject documentation does a great job of providing quick access to information while maintaining coherent organization -- often just by Ctrl/Cmd + F searching.. @sschmid Re: the faq label. I disagree that using the issue tracker as an faq is a good idea. It requires additional maintenance on your part and is also unfriendly/unintuitive for a developer trying to find an answer.\nDiscussion on questions is good, but for someone who doesn't know the answer and is asking the question, the comments can be confusing or flat-out incorrect. GitHub also doesn't have the stackoverflow-like feature of floating the \"selected answer\" to the top.\nWe'd also end up in the annoying situation where the issue-creator owns the original comment and must now maintain their own FAQ issue.\nThe advantage to having an old-school FAQ page is that it is either out-of-date or current, and if the original writer disappears, someone else can update it.. @WoLfulus I would apply my same worries about the issue tracker to using the (non-existent) forum as the FAQ location as well.. Made a catch-all  FAQ page on the wiki.\nI'll be gathering information there. Feel free to help. . I've found that the search paths is also problematic when collaborating, since the Unity asset selector window will return an absolute filepath specific to the user. You then need to edit the .properties file manually and make sure not to use the Entitas window.. I think this might actually be ok in recent versions of the properties window now that the path fields only allow string entry. (Issue was Unity inputting absolute paths.). What page has the missing link?. The link should be good now.. (put this in the wiki) cough. It depends on how you implement your input system.\nRef. the execution order of Unity events FixedUpdate() always occurs before Update(), even if executed multiple times.\nEdit: removed incorrect info so I don't confuse people.. @VladislavKostin yeah I'm wrong don't mind me lol. You are correct, you can only use one index per component.. Also getting the same Microsoft.{etc}.dll errors.\nI also want to log here the errors I was getting about the Unity.{etc.}.dll too. I needed to add the following to my entitas.properties:\n${user.unity}/Managed, \\\n${user.unity}/Managed/UnityEngine, \\\n${user.unity}/Mono/lib/mono/unity, \\\n${user.unity}/UnityExtensions/Unity/GUISystem, \\\nwhere ${user.unity} is specified in the separate file user.properties and points to the specific install of Unity that I'm using for the project, e.g. C:/Program Files/Unity_2017.2/Editor/Data and also notice that this is both not a default path for a Unity install and that the relative path to the .dll files is different on Windows than on OS X.\nI'm also wondering whether it matters whether the specific version of Unity matters or if it just matters that it's the same one that you're developing the project with. (The install at the default */Unity path is 2017.1.1 on this machine.)\n(Also yes I know it's mentioned as a bullet point but I also think the solution isn't obvious so I wrote it out here for others.)\nThere's some potential gotchas that may or may not cause issues:\n\nIt's really common to have multiple installs of Unity\nNeed to remind users that the generator is going to try to use the Unity version at the default system install path unless you specify otherwise\nWhat happens on machines with multiple drives? e.g. project and Unity are on different drives\n\nAdditionally, the generator is complaining about resolving .dll's from other plugins in the project I'm trying this on, which seems odd.. Also we should probably cross-reference this tutorial with an instruction on how user.properties works, since that's also new, and you might not know you can use it to fix some stuff.. @jwvanderbeck Plugins folder is a good idea (doc page on special folders for others that aren't aware)\nI think instructions should also be super super clear that if you put Entitas anywhere other than the \"default\" location that you need to fix your properties file. The fact that it's not already in the expected folder in the .unitypackage means it's easy to put it somewhere else.. ",
    "TicTocGarth": "I believe I am getting this same error. I'd love to track it down but I'm finding it hard to even know which entity is being retained.\nThis is how systems are being taken down.\nprivate void OnDestroy()\n{\n    // This event notifies Views to unlink\n    if (EcsDestroyedEvent != null) EcsDestroyedEvent();\n    _updateSystems.TearDown();\n    _fixedUpdateSystems.TearDown();\n    _updateSystems.DeactivateReactiveSystems();\n    _fixedUpdateSystems.DeactivateReactiveSystems();\n    _updateSystems.ClearReactiveSystems();\n    _fixedUpdateSystems.ClearReactiveSystems();\n    _contexts.Reset();\n}\nAnd this is the error that appears on scene change.\n\nDoes anyone have a suggestion on tracking down which Entity isn't clearing? I can get rid of this error message if I never even link Views to entities, but it's a great debugging tool so I'd love to use it! Thanks!\n. ",
    "GarthSmith": "There does seem to be a race condition. This error does not always occur. Which means these are terrible reproduction steps I know. \ud83d\ude13. ",
    "pkupilas": "Hey @GarthSmith did you resolve your problem? I think i might have the same one. :/. ",
    "akoolenbourke": "Did this ever get solved? It seems like it's a fundamental requirement of any Unity Entitas game so we need a deterministic, solid solution. I've hit the same issue and am not sure how to resolve it\n. I know this is old but I've just hit this problem and the solution doesn't seem obvious. I am using EntityLink but there seems to be an A/B problem here. If I unlink before killing gameobjects, it's possible that gameobjects might try and access EntityLink in their next Update before I get a chance to unload the scene, and therefore fail. If I unload the scene first, the game objects are gone and unlinked but how can I guarantee that my code can then be called at right at the end to DeactivateReactiveSystems and context.Reset()?\nIs there a deterministic pattern to use here?. Hi. Did you ever sort out default values? I'm in that situation now where I have to provide default values that are setup later in systems and it's yuk.. Hi @fraylopez, did you continue work on this system and how has it worked out? I have a couple of questions (I'm new to Entitas and Unity)\nBy putting [Unique] on the components, you're only ever going to get one entity with those components right? If so, there's no need for the foreach loop correct?\nI also see you get StateMachine from services. Does this mean this system only works with one state machine and would not work in general for statemachines for other objects in the game\n. Great, thanks!. Thanks Simon. May I also say great work on Entitas, it's looking very good to me so far. We're about to embark on a project (Commercial, many platforms) so hopefully it can handle what we need.\nAnother quick question that I haven't been able to find an answer to yet, is do you see any issues with Entitas and multiscene loading? We will be using a boot scene that then manages sub scenes, creating and destroying objects (And hence Entities) on level start and destroying on level end, repeating this process etc.\nAny best practices here? Like keep all systems global for the entire program life in the boot scene, or add and remove Systems/Features as required?\nThanks. Just adding that this issues makes using Entitas extremely difficult unless I'm missing something here.\nUnless you can be 100% sure of what each System is doing at any point in the execution order you really have to make sure that any entity Destroy'ing happens after all Reactive systems and before any other systems that might signal destruction, even other Reactive systems.\nSome people have deferred Destroy until the end of the next frame but that runs the risk of an Execute system running with an entity that is meant to be Destroyed. This seems like a bad idea.\nAny thoughts on this? Is this as big of an issue as I am thinking?  IS the solution something crazy like in a DestroySystem, if there are entities to destroy, then call systems.ClearReactiveSystems() before proceeding?\nTrying to shutdown a level cleanly is proving to be a nightmare.. ",
    "periodyctom": "An interesting approach might be something similar to what this guy is doing with a C++ ECS framework:\n- Vittorio Romeo: Implementation of a multithreaded compile-time ECS in C++14\n- Vittorio Romeo's ECST\nWhile he uses C++ templates to setup the metadata and configure systems, I like the idea of having predefined \"modes\" for parallelization. There would also be the option to customize for specialized use cases, as needed. His technique also ensures that systems later in the chain must wait for all of their dependencies to complete before executing, which seems to remove the need for double buffering.. @KumoKairo - That's what I was thinking, assuming the Jobs system comes out at a reasonable pace.. @VladislavKostin Honestly, you're probably right about double buffering being the simplest, I'm merely pointing out that I like the policy based approach presented in the links I posted above, for the people who need more control for specialized scenarios. The idea of customizing the threading work chain (with some rules to enforce determinism) is very appealing.\nWhat I would like to see is the ability to setup the threading policy for systems, with double-buffering probably being the \"default, simple, most tested\" option, but having the ability to say \"run the system chain synchronously, but for Feature/System X, split the entity workload across all cores, then resume on the main thread\", perhaps with some stipulations or deferred operations like in the example I posted.. ",
    "Lynx32": "Hello @sschmid,\nwe are experimenting with Entitas right now. I was suprised to discover that using Entitias would make code significantly harder to multithread. That is our main concern with Entitas now. We are currently considering modifying Entitias to add some form of double buffering or sadly discarding it.\nI was really happy to read about your plans here. I am curious how would you like to achieve it. I guess you have some thoughts already about that. Could your shed some light on it and share the rough ideas of that practices and workflows you have came up with? Also, is there any time horizon at which you expect it to be ready?\n. @T2RKUS\nGenerally your idea of \"ParallelReactiveSystem\" is valid and it would be a good and easy way to multithread stuff to some degree. If it fits your needs then go ahead. When writing my post I thought about higher level parallelization tools, something like upcoming Unity Job system with job dependencies and other stuff.. @KumoKairo We have used entitas and we are glad we did it. I really enjoy working with it. Unfortunately, as the game is on a prototyping stage, we still did not bother to adapt entitas for our needs in MT. We have reviewed important parts of the source code and prepared \"strategy\" for implementing it. We also keep annotating dependencies between the systems and try to keep code ready for the change, but that is all for now in this matter.\nIt is hard to tell when I will get to make that change. It will not be sooner than January 2018. \nI also really look forward to Unity Job System and Unity ECS. Depending on the time of its introduction and state of development of our game, we would also consider switching to Unity solution.. ",
    "optimisez": "I will suggest waiting for Unity C# job system coming. . When this optimization will be shipped? Will it totally avoid memory alloc and gc? . @KumoKairo It's really nice and must have feature. Kindly submit a PR. . @sschmid Can you make it even awesome that it will automatically runs Entitas server when opening Unity and close the server when closing Unity? I think hook the Unity editor API should make it works. Something like EditorApplication.delayCall.. Yup. It's called only once. For detecting close Unity I still haven find the API.  . Btw I tried ur migration tools but seems like it does not work properly so I edit it manually. It's working now. And for the searchPath, I only see have this that I didn't see CodeGenerator/Plugins/Default\nCodeGenerator.SearchPaths = Assets/Libraries/Entitas, \\\n                            Assets/Libraries/Entitas/Editor, \\\n                            /Applications/Unity/Unity.app/Contents/Managed, \\\n                            /Applications/Unity/Unity.app/Contents/Mono/lib/mono/unity, \\\n                            /Applications/Unity/Unity.app/Contents/UnityExtensions/Unity/GUISystem\n. The problem seems similar to #503 . Hi @sschmid, I think I found the root cause of the problem. As stated in issue #503, when you open the project the in Visual Studio it will generate <TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile> in [Your project name].csproj and cause the Roslyn code generator cannot work properly. When u open the project with Visual Studio, it will generate different .csproj file. Open with Visual Studio will generate [Your project name].csproj meanwhile MonoDevelop will generate Assembly-CSharp.csproj. I'm using Unity 2017.2 and Visual Studio 2017. I attached that 2 .csproj files for you to inspect. \nUnity Test Project.csproj.txt\nAssembly-CSharp.csproj.txt\n. @sschmid I forget to mention. Try go to Edit - Preferences - External Tools to switch external script editor at Unity to reproduce the issue.\n\n. \n\nHi @sschmid. I get \"'CodeGenerator' is not recognized as an internal or external command,\noperable program or batch file.\" when I try to run \"$ CodeGenerator/Entitas.exe\" . \nSeems like the folder naming cannot have space and for Windows command prompt it need to put the complete path.  Anyway when I run \"Entitas.exe auto-import\" I get \"Could not find a part of the path 'C:\\Applications\\Unity\\Unity.app\\Contents\\Managed'.\". If not mistaken, it's the path for Mac OS. Extra care is needed to detect whether it's Windows or Mac OS and feed the correct path. \nUpdate 2:\n\nI tried to set up everything I can do but it still give me \"Object reference not set to an instance of an object.\" error. I attached my Entitas.properties to show you my setup. \nEntitas.properties.txt\n. Update 3:\nI get it working by creating a new Unity project but generating code still have issue. The generated code in Roslyn seems different than old code generator. I just create a TestComponent and generate with Roslyn code generator, I get Assets/Sources/TestComponent.cs(11,21): error CS0260: Missing partial modifier on declaration of type `TestComponent'. Another partial declaration of this type exists error. I notice it creates a new additional weird TestComponent script.\n\nUpdate 4:\nI found that I get this error when generate code for the first time. \n\nThen regenerate code again I get another errors. \n\nWhen u generate again then it will go back to like first time then generate again become second errors again then keep looping back the same error. \nUpdate 5\n\nSwitch Unity Scripting Runtime Version to .Net 4.6 fix Roslyn code generator issue but old code generator does not work anymore. It will display this progress bar and stuck there. \nAttached with my latest Entitas.properties setup. \nEntitas.properties.txt\n. Refer #503. Close issue.  . Sadly it does not work for me. Each time I hit generate on Roslyn code generator it will write <TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile> back to .csproj. . I think needs @sschmid to do extra care to handle it when .csproj file has <TargetFrameworkProfile>Unity Subset v3.5</TargetFrameworkProfile> inside. Technically after fixing this bug Roslyn code generator should able to generate code without needing to switch to Unity Scripting Runtime Version to .Net 4.6. I think I not able to change IDE other than Visual Studio 2017 for the moment.  . Hi @sschmid. So far so good. It still need a bit of manual work to get it working though. \n\nAnother thing is I see \u00d7 Could not resolve: SQLitePCLRaw.core.dll slows down the code gen. I think fix that warning will speed up code gen.\n\n. Awesome.. Can you make the profiler able to profile systems without the need of toggling DeviceDeepProfiling too?There are a lot of unnecessary information pops up at there. . @KumoKairo How can I enable DeviceDeepProfiling on device? I only know enabling Deep Profiling in the editor.\n\n. @KumoKairo, do u mean this is DeviceDeepProfiling ?\n\n. Ya. I tried to make Components, Systems and Generated as individual assembly file but not working properly. So, I only add Libraries.asmdef and Sources.asmdef. \nBtw I found the issue that Jenny code generator does not gen code properly after setting up Sources.asmdef assembly definition file. All the generated code went missing. It seems like Jenny not able to scan the component file and gen the code properly. For now, I temporarily remove Sources.asmdef until Jenny code gen can support assembly definition files properly.. Ya. Sources.asmdef is already working. Now let see whether I can further split out the generated code. . Since generated code has dependency to Components, Systems and vice versa that Unity will complain cyclic reference error. I think it's not possible to split out generated code as a separate assembly. . Auto import from unity entitas gui then jenny fix\n\n. Renamed Entitas properties manually. Jenny doctor no problem but nothing happen when jenny gen. It's the same result when opening jenny server and client gen.\n\n\n\n\n\n. Ok. Problem fixed. The issue is due to the CodeGenerator folder name changed to Jenny. \nChange this\nJenny.SearchPaths = CodeGenerator/Plugins, \\\n                            CodeGenerator/Plugins\\Entitas, \\\n                            CodeGenerator/Plugins\\Entitas.Roslyn, \\\n                            CodeGenerator\\Plugins\\Entitas, \\\n                            CodeGenerator\\Plugins\\Entitas.Roslyn, \\\n                            Assets\\Entitas\\Editor, \\\n                            CodeGenerator\\Plugins\\Jenny\nTo this\nJenny.SearchPaths = Jenny/Plugins, \\\n                            Jenny/Plugins\\Entitas, \\\n                            Jenny/Plugins\\Entitas.Roslyn, \\\n. Here's the working Entitas.properties file for reference to people who failed to setup Jenny code gen properly.\nEntitas.properties.txt\n. After puttingdd90ab7 dlls. I get this error when gen code.\n\n\n. @sschmid Maybe you can do auto search .csproj for Unity and Jenny code gen and also manual setup .csproj function or Jenny although u can just directly edit properties file directly.. So, for the time being before we get better solution just call DeactivateReactiveSystems before TearDown should fix the problem?\nprivate void OnDestroy()\n{\n        systems_.DeactivateReactiveSystems();\n        systems_.TearDown();\n}. Nope. No freezing issue when manually edit a source file outside of VS and go back to VS. I suggest can call it one-to-one event and one-to-many event. . Or One-To-One Event and Many-To-One Event? Btw XyzEntityListener could pass the entity instead of the value? Do u mean passing the whole entity instead of based on the data from component? . > but not sure if that's a good idea as it might encourage modifying the entity\nSo is that the new feature u plan to work on? One use case I encounter when working on game object pooling is I need to pass the entity as parameter to the interface so I can get the entity at MonoBehaviour side to add event listener component as it's Event(true) event that's bound to a specific entity. Or maybe there is better solution for this problem? . @sschmid First option seems quite nice as u can know the context. Btw will this implementation introduces more method calls and slow down the performance as method call is not cheap. . I see you add entity to the parameter but I think maybe you can make it able to configure attribute at component to make it generate interface that has/without entity as parameter will be even better.  Just like how Event(true) and Event(false) work previously that generate code based on attribute configuration. Although I'm not really sure will it affect much performance for 1 parameter vs 2 parameters.. Awesome. Make it generate interface that has no entity parameter by default if there's no eEntityFields. Then maybe [EntityEvent( argFlags = eContexts | eEntityCreationIndex | eEntityFields] is the better way to go. . > Changed it to detect if the component only has 1 context and then not prefixing it with the context name. \nYa. @sschmid. Make it prefixing it with the context name even he component only has 1 context will be better as it won't introduce breaking change after changing component to more than 1 context. . 1) [Event(false, EventType.Added)] generates IGameOverListener.OnGameOverAdded()\n2) [Event(false, EventType.Removed)] generates IGameOverListener.OnGameOverRemoved()\n3) [Event(false)] generates IGameOverListener.OnGameOver()\nI think make it able to supports all these 3 events as sometimes u just only want to trigger event when isGameOver = true or isGameOver = false. And sometimes u want trigger both true and false.. Another issue I encounter is let say I have UI A and UI B. When I close UI A and switch to UI B, I will remove all the UI A listeners. Then when I close UI B and open UI A, the UI A does not refresh all the data when I add all the UI A listeners. I think I need something like [Event(false, EventType.AddedOrRemoved, RefreshListener)] to generate one more system to make it call listener one time when adding the ListenerComponent to the entity.   . @sschmid I think just keep the Event(true) and Event(false) attribute naming as I will use extensively and I dun really want to have breaking change anymore. \n\nAnother issue I encounter is let say I have UI A and UI B. When I close UI A and switch to UI B, I will remove all the UI A listeners. Then when I close UI B and open UI A, the UI A does not refresh all the data when I add all the UI A listeners. I think I need something like [Event(false, EventType.AddedOrRemoved, RefreshListener)] to generate one more system to make it call listener one time when adding the ListenerComponent to the entity.\n\nFor this problem, do you have any good solution for it? I think another way is to just get the component and replace back the component with the same data to make it call listener. Will it better than generate one more system to make it call listener one time when adding the ListenerComponent to the entity? . > Listeners should be everytime getting called with the current state when they are added. We first thought it would be good to make a reactive system that triggers on the listener component getting added. We later found out it's not a very good idea because they are getting called delayed and not directly (like one tick after, when entitas is getting updated). Therefore we generate a ReactiveSystem for changing data and a InitializeSystem which calls the listener on group added so they are getting called instantly. It's working very nice. Imo that's one of the rare situations where you really want a group added event.\n@StormRene If I understand correctly ur solution is using InitializeSystem that only called one time at initialization phase and will not call anymore later. My use case is I will need to keep switching UI back and forth. So, it will keep adding and removing the same listener and each time when I add back the listener, I will need to refresh the listener to make sure the UI always display the latest data.   . > In this text I proposed a problem we found while developing our reactive ui system. Our first solution was write a reactive system with a collector on the specific listener so it can inform the listener. We found out it's not a good solution, because the listener will not be informed instantly but somewhere later (when the next tick is happening in entitas).\nWeird. If I understand correctly, @mzaks says before that reactive system will aggregate and execute everything it needs to execute in one shot. Meaning that it will be done in one frame. Can you share how you do it with reactive system previously?. Awesome. Btw @sschmid does it support loading some game objects first at loading time? For example, I want to load 10 enemies into game object pool first before starting game. I expect there is an API to preload the game object first into game object pool. . @sschmid Awesome. I hope I can get that new feature soon.  . > I wrote a custom roslyn code generator that does all that for me. I only need to maintain a static class with fields (basically the input action types)\n@sschmid Can you integrate custom roslyn code generator into Entitas? So for those who need it can directly use it. . > Maybe a good idea to also ship a working code generator project with Entitas \ud83d\udc4d\nAwesome. It can be a very good starting point to learn how to write custom code gen as until now I still dunno how to do it. lol . > Thinking about generalizing the input action components to only 1 component to be able to easily serialize and record inputs\nYa. It will make it also able to see all the input action with visual debugging. \n. @sschmid Do u plan to release custom roslyn code generator soon? . > I removed InputActionService which is now replaced by individual systems.\n@sschmid I wonder how you can like emits InputActionEntity.BuyItem from a UI that has MonoBehaviour since when linking entity to its MonoBehaviour, it will only pass Game Context? Have u use something like EntityService in Match-One? . @sschmid Will anything break for this changes? . > Only if you used linq, e.g. group.Where().\nBut all foreach loops are unaffected\n@sschmid I see ur Match-One example project uses Linq. Have u thought about how to solve this breaking change? Something like: \nforeach (var e in _contexts.game.GetEntitiesWithPosition(new IntVector2(input.x, input.y)).Where(e => e.isInteractive))\n{\n            e.isDestroyed = true;\n}. @sschmid Actually dun use linq and make it as if statement check will be better. lol\nforeach(var e in _contexts.game.GetEntitiesWithPosition(new IntVector2(input.x, input.y))) \n{\n            if (e.isInteractive)\n                e.isDestroyed = true;\n}\n. @rastlin86 Should be. Even I switch to Api Compatability Level to .Net 4.6.\n[__DynamicallyInvokable]\n    public void InsertRange(int index, IEnumerable<T> collection)\n    {\n      if (collection == null)\n        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.collection);\n      if ((uint) index > (uint) this._size)\n        ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.index, ExceptionResource.ArgumentOutOfRange_Index);\n      ICollection<T> objs = collection as ICollection<T>;\n      if (objs != null)\n      {\n        int count = objs.Count;\n        if (count > 0)\n        {\n          this.EnsureCapacity(this._size + count);\n          if (index < this._size)\n            Array.Copy((Array) this._items, index, (Array) this._items, index + count, this._size - index);\n          if (this == objs)\n          {\n            Array.Copy((Array) this._items, 0, (Array) this._items, index, index);\n            Array.Copy((Array) this._items, index + count, (Array) this._items, index * 2, this._size - index);\n          }\n          else\n          {\n            T[] array = new T[count];\n            objs.CopyTo(array, 0);\n            array.CopyTo((Array) this._items, index);\n          }\n          this._size += count;\n        }\n      }\n      else\n      {\n        foreach (T obj in collection)\n          this.Insert(index++, obj);\n      }\n      ++this._version;\n    }. @sschmid I wonder what kind of use case will use _group.GetEntities(_buffer)? Only iterate _buffer entities? . @sschmid Seems like 1.4 has bug on auto-import. Even empty fresh properties file auto-import does not work properly. Can you upload ur 1.4 version properties file before this issue getting fix? Thanks. \nEmpty fresh properties file auto-import\n\nPrevious version properties file auto-import\n\n. @sschmid Collection was modified; enumeration operation may not execute. has been fixed but\nI still have this issue. I notice that this error will pop up when I change DesperateDevs.CodeGeneration.Plugins.ProjectPath to Sources.csproj. Sources is the project that I create using Assembly Definition files that contain all the Entitas source code.\n\n. @sschmid Ya. Previously version is working. \n? Resolved: Jenny\\Plugins\\Entitas.Roslyn\\Microsoft.CodeAnalysis.CSharp.dll\n  ? Loading Dependency: Microsoft.CodeAnalysis, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    ? Resolved: Jenny\\Plugins\\Entitas.Roslyn\\Microsoft.CodeAnalysis.dll\nOpened Sources\nParsing Sources\nComplete Sources\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at DesperateDevs.Utils.StringExtension.LowercaseFirst(String str)\n   at Entitas.CodeGeneration.Plugins.CodeGeneratorExtentions.Replace(String template, String contextName)\n   at Entitas.CodeGeneration.Plugins.CodeGeneratorExtentions.Replace(String template, ComponentData data, String contextName)\n   at Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator.generateInterface(ComponentData data)\n   at Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator.generate(ComponentData data)\n   at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\n   at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.generate(String messagePrefix, IPreProcessor[] preProcessors, IDataProvider[] dataProviders, ICodeGenerator[] codeGenerators, IPostProcessor[] postProcessors)\n   at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.DryRun()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.DoctorCommand.run()\n   at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run(String[] args)\n   at DesperateDevs.CLI.Utils.CLIProgram.runCommand(String[] args). > My next video will be about this topic. If you don't want to miss this, you can subscribe\nhttps://www.youtube.com/DesperateDevs\n@sschmid I think next video u not only can talk about view service but also audio service since I think audio is part of view. . > Please open the Entitas preferences in Unity once and close it and see if this fixes the issue\n@sschmid Still the same error but I have a interesting finding. When u keep Entitas preference window open, the error does not appear anymore and visual debugging works properly. lol\n\n . > When you open the Preferences, Entitas will automatically add missing keys. Make sure your properties contain these keys\n@sschmid Yes. I have those keys included. I uploaded my UnityPreferences.properties for you to check it out.\nUnityPreferences.properties.txt\n. > Why is it called UnityPreferences, do you have multiple? If so, what does the button in the Entitas logo say?\n@sschmid Yup. I have UnityPreferences.properties for Unity and Entitas.properties for Roslyn. I think I selected UnityPreferences.properties properly. \n\n. > Maybe as a workaround (just guessing) add those keys also to the roslyn properties, maybe that helps\n@sschmid Ya. Problem fixed after adding those keys to roslyn properties. I guess it still read roslyn properties file instead of UnityPreferences properties file.\n. @sschmid, have u start working on this feature? . @StormRene How many system u have? Are remain all the systems together all the time or u load different set of systems based on scene? . @StormRene Awesome. What's the target frame rate of your game? 60 fps? . @StormRene I see. Thanks for sharing your experience. . Seems like it's similar to #656 issue that I post. . @sschmid Is that possible to implement this similar feature without using any Exception Handling statements (try-finally for this PR)? From what I understand, it will have performance penalty when using Exception Handling statements. . Seems like the problem is due to I didn't setup project properly. Will close the issue.  . ",
    "SylwesterMichalowski": "hi, I have one question the JobSystem.cs is still proof of concept?\n. ",
    "rvangijlswijk": "I came across the same problem when using a component in a namespace. As mentioned, the GetGroup() call calls the component from the matcher and includes the namespace in the referenced component. This is incorrect, as the matcher doesn't know anything about namespaces. \nI would expect the call in the exampe above to be the following:\ngame.GetGroup(GameMatcher.OwnedBy),\nThis example above also fixes the compilation errors.\nMoreover, and this is more of an enhancement, methods of components within a namespace can have a very long namespace. In the example above, the call would be GetEntitiesWithSkillOwnedBy(), which is still doable. However, when one has a full-blown namespace, the GetEntities method can get a really long name. E.g., when the namespace is ..ui, then the method name becomes:\nGetEntitiesWithCompanyProjectUiOwnedBy()\n... which is a bit too long, if you ask me. I would propose getting rid of of the namespace in the method call (or let the user choose in the preferences).. Actually, I think this is a duplicate of #328 .. ",
    "Adjuvant": "Added a rather complicated example of inter-context communication for networking. If something simpler is desirable happy to fix it.. @IsaiahKelly sorted, thanks for prompt! Avoided linking till I did a redraft, but likely to forget that, so now added it to tutorials.. Amazing, thanks so much! Compiled, generated, built and run, successful! \nI did create a component with a generic, but it had a \"DontGenerate\" tag. That must have been ignored somehow. \nOwe you big! Anything on the wiki need done?. ",
    "Lazersquid": "Added Code generation shortcut for Visual Studio tutorial to the wiki.. Running Jenny auto-import -s also throws  The given assembly name or codebase was invalid (Exception from HRESULT: 0x80131047) for me.\nAnd it's not adding any roslyn Plugins/PreProcessors/DataProviders/etc\nThe ones that were added when hitting Auto-Import inside the unity entitas preferences remain.\nUnlike @optimisez I don't have to rename 'CodeGenerator.'...  keys to 'Jenny.'... they are correctly generated by the entitas unity gui.\nProject structure:\n Project/Assets/Entitas\n Project/Jenny\n Project/Jenny auto-import.bat\n Project/Preferences.properties\nI took extra care to follow simons instruction on gitter:\n\nMy setup is usually the following\n- Create a new Unity project\n- Copy Entitas into Assets folder\n- Assets -> Open C# project\n- Open Entitas Preferences\n- Click Auto-Import and  hit generate\nIf everything is fine I extract the Jenny.zip into the root of the project and run\n$ Jenny/Jenny.exe fix\n$ Jenny/Jenny.exe auto-import -s\n\nMy preferences without editing them:\n```\nJenny.SearchPaths = D:\\Daten\\Game Development\\Projekte\\EntitasTestProject\\Assets\\Entitas\\Editor\\Plugins\\DesperateDevs, \\\n                    D:\\Daten\\Game Development\\Projekte\\EntitasTestProject\\Assets\\Entitas\\Editor\\Plugins\\Entitas\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = EntitasTestProject.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Sources\nJenny.Ignore.Keys =\n```\nI tried Jenny new Preferences.properties, Jenny fix  and thenJenny auto-import but that results in the same error.\nI'm using unity 2017.3 and windows 10. Short answer is that composing an entity of many small components is better than having few big components that might contain unneeded functionality. You can create static methods to create combinations of components that you need often, eg:\nC#\npublic static void AddVelocityComponents(GameEntity entity, float x, float y, float maxSpeed, ...)\n{\n    entity.AddPosition(x, y);\n    entity.AddMaxSpeed(maxSpeed);\n    ...\n}. ",
    "AlexeyJKoshkin": "Ok. My ReactiveSystem call Execute(List eneities) method.\nBecause Inside this method I do entities[i].RemoveUpgradeBuilding()\nBut entity still in collector.\nWhen entity will remove from collector ? Or entity will be inside forever ???. but entity still in this collector :-) Even after calling Execute(List<BuildingEntity> eneities). \nWhat am I doing wrong ?\n. No, of course not :-)\nI think you're right I'll try change my code.\n\nthe system triggers itself by changing components \n\n. > If your ReactiveSystem triggers itself because you change components that are part of your trigger, you can also just call Clear() in the end of your execute which will clear collected entities for this reactive system\nThanks!. All working nice :-). Yes. It's unity 5.6.0.f3. I deleted Entitas.Blueprints.CodeGeneration.Plugins and still have this exception. Yes. I have several projects with different count of context. 1,3 and 6. And all this projects catch this exception.\nAnd different unity version 5.6.0.f3 and 5.5.2.\n. Yes :-) I did everything.\nSome unity Magic ;-). heh :-) Everything working :-). Mark. When deleted blueprints libraries imposible to use codegenarator. \"Couldn't load assembly ...\"\nI think it should be warning message or something like this.. ",
    "cemkoker": "thanks for the reply ! I see this is 0.38 but entitas is 0.39; will it work ?. ok thanks ! One thing that's very confusing is the 'Pool' actually ... The videos from Unite are very outdated and it's hard to 'get started' ... Hopefully someone will post a nice step by step video ! \ud83d\udc4d . ",
    "discofever": "I'm sorry but it's not. I have still not a simple 'hello world' kind of example ... \nhttps://github.com/sschmid/Entitas-CSharp/wiki/Generate-your-first-component still speaking about pool ...\nWhy is it so hard for you guys to put yourself in the place of someone who has no clue on how this thing work ? There are just bits here and there and no clear path on how to build a simple example; I don't know like a simple button that makes a cube move, anything ... Please ! \nThat was my 2cents comment ... \n. Ahhhhh finally ! Now I get a glimpse of how this 'thing' works. Thank you very much, and looking forward for a good tutorial.. ",
    "Bradamante3D": "Enforcing a Replace makes sense. However, are there other conceivable ways to do so, besides a compile error?. ",
    "Spy-Shifty": "Renaming is quite easy. Use your IDE for that job (Visual Studio or something else).\nDeleting and Adding Fields can be indeed a problem. But it don't take hours as you described before. \nThe real problem (at the moment) are blueprints. If you delete a field of a component wich you use in a blueprint, you have to recreate the hole blueprint... (because of the binary serialization). Thats my real problem by the way.\nI had my difficulties with the codegen at beginning, too. But now i feel comfortable with it. Sure, there could be some improvements. But speed is very important! \nI build a game with thousands of \"bots\" and still I have 75 FPS. That's inconceivable with the \"intuitive\" Unity way (Monobehaviour Scripts attached to each bot)\nThe best way to learn and use entitas is to take a look at the examples and videos. And first think about components and then act! And finally, the simplest solution is the right solution ;). Many thx for your deep explanation.\nThat helped me a lot! \nMaybe this could be a good starting point for newbies and a place for some more experence reports!\nThanks a lot!. ",
    "yosadchyi": "Quick draft of generic API: https://github.com/yosadchyi/Entitas.Generic. Played a bit with entitas and made sample implementation of generic API: https://github.com/yosadchyi/Entitas.Generic. ",
    "mic-code": "How does Entitas-Lang work with player modding? It appears to me that a generic api having the ability to load arbitrary component at runtime is key to easy player modding, and modding capability is major reason to use a ECS system(instead of unity normal way) to me. ",
    "leonhardrocha": "@WeslomPo has really strong points. I don\u00b4t see any future for Entitas if this is not fixed asap. I don\u00b4t have to spend 30 min trying to fix errors just because I renamed some component...  and the code becomes too cluttered... I guess this is the opposite direction to go!. ",
    "dreadicon": "I have to agree on the modding issue; I intend for my game to be very mod-friendly. To that end, I want my environment to be as close to what modders will use as possible, and using the unity editor and/or hard-compiled generated code seems to run contrary to that. IMHO, moddability is one of the most appealing aspects to ECS, so it's a shame Entitas doesn't play as nicely with runtime modification.. ",
    "BenjaBobs": "Is this still being discussed? I personally think it would be a huge improvement in developer experience, especially since it would remove a whole step from the pipeline. Maybe some more bench marking would shed some light on whether this is feasible. @yosadchyi's results are certainly promising.. @mzaks Has created this all though it's not complete yet.. ",
    "CuriousHub": "Oh, cool, just wanted share what I found.\nLet Zack delete the extra lines though :)) He mentioned in the video that he loves to delete code whenever he can :D. ",
    "marczaku": "You call .ToUnixLineEndings() at:\nCodeGenFile.cs-Constructor, which is only called for the initial fileContent value.\nUnityCodeGenerator.cs, which does not have any effect, as WriteToDiskPostProcessor is called before you do so.\nI don't know, why it happens. There are no changes to the AddFileHeaderPostProcessor.cs\nBut it happened to me again after forking your repo and then cloning it.\nI made custom modifications to the NewLinePostProcessor.cs again to fix that issue for now.\nI can do some further investigations in a few days.. That's a nice solution. Although I would prefer a single line ending replace in the NewLinePostProcessor.. whoops :'D. I'm working on it! :)\nRight now, describe_M0320.cs fails for me in line 46, because it is checking for \\n, while the Migration-Tool creates \\r\\n line endings. What's your suggestion for fixing that?\nWell, replacing the Systems.cs file under Tests/Tests/Tests/Entitas.Migration/Fixtures/M0320/ with a downloaded one fixed it for me :D. ",
    "leopripos": "Hi @sschmid ,\nThanks very much for your explanation.\nI will start to explore more.\n(y)\n. ",
    "charlieamer": "This still got me :(. Hello guys,\nI think I encountered a similar bug (or not, I don't really know). My bug was that after destroying all entities (i wanted to load a new level basically), in teardown even though I called _systems.ClearReactiveSystems(); I still got error ContextStillHasRetainedEntitiesException: 'Game' detected retained entities although all entities got destroyed!\nDid you release all entities? Try calling systems.ClearReactiveSystems()before calling context.DestroyAllEntities() to avoid memory leaks.\nI noticed all entities that didn't want to clean up were retained by collector of velocity system, so here is the old collector code which caused the problem:\nc#\nreturn context.CreateCollector(GameMatcher.Velocity.Added(), GameMatcher.Move.Removed());\nI replaced the code with the following code:\nc#\nreturn context.CreateCollector(GameMatcher.AllOf(GameMatcher.Velocity).NoneOf(GameMatcher.Move));\nand my problem was solved. So I guess in your case you can solve your problem by using\nc#\nreturn context.CreateCollector(CoreMatcher.View);  // without added() function. You can additionally check if view exists in filter.. Running Jenny.exe doctor or Jenny.exe gen yields the same error. I run clean Jenny.exe (without any params) on both my own project I am trying to use, and in a clean project (created by following the tutorial from the link I provided in issue description), and I still get the error. In 2 days I will try Mono for windows, maybe that could help ? And try to run Jenny.exe with mono ?\nHere is a full output of what I get when I run Jenny.exe gen -v:\nLoading assemblies from C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Analytics.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Analytics.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CLI.Utils.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CLI.Utils.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CodeGeneration.CodeGenerator.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CodeGeneration.CodeGenerator.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CodeGeneration.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.CodeGeneration.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Logging.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Logging.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Logging.Formatters.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Logging.Formatters.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Networking.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Networking.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Serialization.CLI.Utils.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Serialization.CLI.Utils.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Serialization.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Serialization.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Utils.dll\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\DesperateDevs.Utils.dll\nName:Jenny.exe\nThere are no context policies.\n load: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\Jenny.exe\n  ? Loading: C:\\Users\\ACER\\Documents\\GitHub\\PiratesRising\\Jenny\\Jenny.exe\nGenerating using Jenny.properties\nName:Jenny.exe\nThere are no context policies.\n load: DesperateDevs.CodeGeneration.Plugins\n  ? Loading: DesperateDevs.CodeGeneration.Plugins\n    ? Resolved: ../Jenny/Plugins/DesperateDevs\\DesperateDevs.CodeGeneration.Plugins.dll\nName:Jenny.exe\nThere are no context policies.\n load: Entitas.CodeGeneration.Plugins\n  ? Loading: Entitas.CodeGeneration.Plugins\n    ? Resolved: ../Jenny/Plugins/Entitas\\Entitas.CodeGeneration.Plugins.dll\nName:Jenny.exe\nThere are no context policies.\n load: Entitas.Roslyn.CodeGeneration.Plugins\n  ? Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    ? Resolved: ../Jenny/Plugins/Entitas.Roslyn\\Entitas.Roslyn.CodeGeneration.Plugins.dll\n  ? Loading Dependency: Entitas.CodeGeneration.Attributes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n    ? Resolved: ../Jenny/Plugins/Entitas.Roslyn\\Entitas.CodeGeneration.Attributes.dll\nPre Processing: Validate Project Path (3%)\nPre Processing: Fix Target Framework Profile (6%)\nCreating model: Context (9%)\nCreating model: Cleanup (12%)\nOpening PiratesRising.shproj\n  ? Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  ? Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  ? Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  ? Loading Dependency: System.Collections.Immutable, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    ? Resolved: ../Jenny/Plugins/Entitas.Roslyn\\System.Collections.Immutable.dll\n  ? Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\n  ? Loading Dependency: Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    ? Resolved: ../Jenny/Plugins/Entitas.Roslyn\\Microsoft.Build.dll\n  ? Loading Dependency: Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    ? Resolved: ../Jenny/Plugins/Entitas.Roslyn\\Microsoft.Build.Tasks.Core.dll\nSystem.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\n   at System.Reflection.RuntimeAssembly.get_DefinedTypes()\n   at System.Composition.Hosting.ContainerConfiguration.<>c.<WithAssemblies>b__16_0(Assembly a)\n   at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\n   at System.Composition.TypedParts.TypedPartExportDescriptorProvider..ctor(IEnumerable`1 types, AttributedModelProvider attributeContext)\n   at System.Composition.Hosting.ContainerConfiguration.CreateContainer()\n   at Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(IEnumerable`1 assemblies)\n   at Microsoft.CodeAnalysis.Host.Mef.DesktopMefHostServices.get_DefaultServices()\n   at DesperateDevs.Roslyn.ProjectParser..ctor(String projectPath)\n   at DesperateDevs.Roslyn.CodeGeneration.Plugins.PluginUtil.GetCachedProjectParser(Dictionary`2 objectCache, String projectPath)\n   at Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider.GetData()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.generate(String messagePrefix, IPreProcessor[] preProcessors, IDataProvider[] dataProviders, ICodeGenerator[] codeGenerators, IPostProcessor[] postProcessors)\n   at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.Generate()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.GenerateCommand.run()\n   at DesperateDevs.CLI.Utils.AbstractCommand.Run(CLIProgram program, String[] args)\n   at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run(CLIProgram program, String[] args)\n   at DesperateDevs.CLI.Utils.CLIProgram.runCommand(String[] args). @sschmid After installing Mono for Windows I have managed to get it to work (after a bit of hacking).\nFirst when I installed it and run mono ..\\Jenny\\Jenny.exe on my project, after i selected which plugins I want, I was presented with the following error:\nCould not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection:_handle' (0) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies.\nThe solution was a bit boring, I had to install the package \"SQLitePCLRaw.core\" in a dummy c# project, went to package files and found a SQLitePCLRaw.core.dll file, and copied the file to the same directory as where Jenny.exe resides. That made it work and it finally works like a charm (for mono ..\\Jenny\\Jenny.exe).\nMy advice: you should pack Jenny.zip with SQLitePCLRaw.core.dll pre-packaged, so that it works out of the box for third-party installed mono. You should also look into the error I mentioned above for default .NET support on windows, and see why exactly it fails, and can it be fixed. I don't think I should close the issue as this wasn't solved for me without using mono (I wasn't able to run Jenny.exe gen even after I copied SQLitePCLRaw.core.dll to Jenny directory, I still got the same error as mentioned above).. ",
    "nbreum15": "Placing the try-catch like that still produces an exception for me. Placing it like the following works:\n```\npublic partial class Contexts {\n#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n\n[Entitas.CodeGenerator.Api.PostConstructor]\npublic void InitializeContexObservers() {\n    try {\n            CreateContextObserver(game);\n            CreateContextObserver(gameState);\n            CreateContextObserver(input);\n    } catch (System.Exception) {  }\n}\n\npublic void CreateContextObserver(Entitas.IContext context) {   \n    if (UnityEngine.Application.isPlaying) {\n        var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);\n        UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);\n    }\n}\n#endif\n\n}\n. Unblocking does nothing. The error message i get is:\n System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Security.SecurityException: ECall methods must be packaged into a system module.\n           at Contexts.CreateContextObserver(IContext context)\n           at Contexts.InitializeContexObservers() in D:\\GitHub\\UnityProject\\Assets\\Generated\\Contexts.cs:line 82 (this is the CreateContextObserver(input) method)\n           --- End of inner exception stack trace ---\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n           at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n           at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n           at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n           at Contexts..ctor() in D:\\GitHub\\UnityProject\\Assets\\Generated\\Contexts.cs:line 50\n```\nHere is what i have tried so far:\n-Unblocked the zip archive and look through all dlls to see if any of them still were blocked.\n-Unblocked all other dlls in my unity project. (e.g. i use npec.dll and nspectestrunner.dll). I think Unity does something very weird when they throw exceptions (when you call methods in their dlls). Because doing the following makes the try-catch block work fine as @sschmid pointed out. \n```\npublic partial class Contexts {\nif(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n[Entitas.CodeGeneration.Attributes.PostConstructor]\npublic void InitializeContexObservers() {\n    CreateContextObserver(game);\n    CreateContextObserver(gamestate);\n    CreateContextObserver(input);\n}\n\npublic void CreateContextObserver(Entitas.IContext context) {\n    try {\n        if(IsPlaying()) {\n            var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);\n            DontDestroyOnLoad(observer);\n        }\n    } catch(System.Exception) {\n    }\n}\n\nprivate bool IsPlaying()\n{\n    return UnityEngine.Application.isPlaying;\n}\n\nprivate void DontDestroyOnLoad(Entitas.VisualDebugging.Unity.ContextObserver observer)\n{\n    UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);\n}\n\nendif\n}\nIf someone can explain this mystery then I'm glad to hear it.. So basically doing the following works:\n    public void CreateContextObserver(Entitas.IContext context) {\n        try {\n            UnityCode(context);\n        } catch(System.Exception) {\n        }\n    }\nprivate void UnityCode(Entitas.IContext context)\n{\n    if(UnityEngine.Application.isPlaying)\n    {\n        var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);\n        UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);\n    }\n}\n\nBut this doesn't:\n    public void CreateContextObserver(Entitas.IContext context) {\n        try {\n            if (UnityEngine.Application.isPlaying)\n            {\n                var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);\n                UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);\n            }\n        } catch(System.Exception) {\n        }\n    }\n``. It's due to performance. See: https://gitter.im/sschmid/Entitas-CSharp?at=58a356d321d548df2c0c0367. 2017.2. Okay, pm'ed you the project on gitter. It is a totally fresh project created to test the new generator with nothing in it but Entitas and the component shown in the issue description.. Having read all of @mzaks's book, it would awesome if he continues writing it. It would be awesome to have a book that goes more in depth with ECS as there aren't any books (that i could find) written solely for it.. The GitHub for Entitas-Lang is: https://github.com/mzaks/Entitas-Lang. Post the issue there \ud83d\ude03.. I see that to load the different assemblies that the generator depends upon, it usesAppDomainwhich is can't use because the application does not run in the project directory. Any alternatives to this?. Managed to solve it by changing the base paths fed to AssemblyResolver.. I think this is the same error i got in #478. I didn't solve it by doing what was suggested in the issue. However, after switching to .NET 4.6 Experimental in Unity the problem was solved for me.. My particular use case is calling the code generator from an arbitrary directory with an absolute path (instead of relative path) to the C# project with theEntitas.propertiesfile in it. Where I then load theEntitas.CodeGeneration.*.dll`'s through reflection. \nWhen I pass the Preferences object I'd like to the be able to alter the different values read from Entitas.properties. I see that the Entitas.properties file is represented by multiple classes (e.g. CodeGeneratorConfig, TargetDirectoryConfig, ProjectPathConfig, etc.) throughout the code generator (for modularity). Is there an easy way to get the dictionary keys for these?\nCurrently I do the following, which is error-prone if the Entitas.properties ever changes:\n```\nvar preferences = new Preferences(propertiesPath, userPropertiesPath);\npreferences.AppendProjectPath(\"CodeGenerator.SearchPaths\", projectPath)\n           .AppendProjectPath(\"Entitas.CodeGeneration.Plugins.ProjectPath\", projectPath)\n           .AppendProjectPath(\"Entitas.CodeGeneration.Plugins.Assemblies\", projectPath)\n           .AppendProjectPath(\"Entitas.CodeGeneration.Plugins.TargetDirectory\", projectPath);\nprivate static Preferences AppendProjectPath(this Preferences preferences, string preferenceKey, string projectPath)\n{\n    string[] value = preferences[preferenceKey].ArrayFromCSV();\n    for (int index = 0; index < value.Length; index++)\n    {\n        value[index] = $@\"{projectPath}{value[index]}\".Replace(\"\\\", \"/\");\n    }\n    preferences[preferenceKey] = value.ToCSV();\n    return preferences;\n}\nPerhaps a solution would be to make the keys public so instead of callingpreferences.AppendProjectPath(\"Entitas.CodeGeneration.Plugins.ProjectPath\", projectPath)I can call it likepreferences.AppendProjectPath(ProjectPathConfig.ProjectPathKey, projectPath)```.\nThank you in advance \ud83d\ude04.. Do you do it through Unity or with command line? Also, have you tried switching to MonoDevelop temporarily and see if it works with that? (Remember to change the .csproj in Entitas.properties if you decide to try it \ud83d\ude04). Here is one: https://pastebin.com/bPDZhsNn. I like the UpdateXXX renaming. Another minor issue with the code generator is with naming conventions. Say I make a component like this:\npublic class PositionComponent\n{\n    public Vector2 Value;\n}\nThe API it generates is:\n```\npublic partial class GameEntity {\npublic PositionComponent position { ... }\npublic bool hasPosition { ... }\n\npublic void AddPosition(int newX, int newY) {\n    ...\n}\n\npublic void ReplacePosition(int newX, int newY) {\n    ...\n}\n\npublic void RemovePosition() {\n    ...\n}\n\n}\n``\nThen, when used, it looks like:entity.position.Value` which does not look right if you are used to Microsofts C# naming conventions where public fields, properties, and methods start with an upper-case.\nCould be nice to have some kind of option to disable this such that fields begin with upper-case.. Fixed it. Here are my steps:\n1. Move component files out of source directory.\n2. Generate\n3. Move component files into source directory again.\n4. Generate\nLast thing to note. I got this error while using the UniquePrefixAttribute on a component class. Also note, I used one file for all my component classes (dunno if that messes sth up).. Trying that I get:\n.\\CodeGenerator\\Jenny.exe client gen -v\nSystem.IndexOutOfRangeException: index was outside the bounds of the array.\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.Client.run()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.AbstractPreferencesCommand.Run(String[] args)\n   at DesperateDevs.CLI.CLIProgram.runCommand(String[] args). Entitas properties:\n```\nCodeGenerator.SearchPaths = CodeGenerator\\Plugins, \\\n                            Assets\\Entitas\\Editor, \\\n                            CodeGenerator\\Plugins\\Entitas, \\\n                            CodeGenerator\\Plugins\\Entitas.Roslyn, \\\n                            CodeGenerator\\Plugins\\Jenny\nCodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                        Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                        DesperateDevs.CodeGeneration.Plugins, \\\n                        Entitas.Roslyn.CodeGeneration.Plugins, \\\n                        DesperateDevs.CodeGeneration.Unity.Plugins\nCodeGenerator.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nCodeGenerator.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nCodeGenerator.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor, \\\n                               DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nCodeGenerator.Server.Port = 3333\nCodeGenerator.Client.Host = 172.20.0.253\nEntitas.CodeGeneration.Plugins.Contexts = Core, \\\n                                          Input, \\\n                                          Command\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets\\Sources\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = EntitasProject.csproj\nCodeGenerator.CLI.Ignore.UnusedKeys = \n```. Is there a way to check which Entitas version you're running?. I didn't realize that I was still on 0.46.1 (thanks new Asset Store for not letting me update). However, unfortunately the problem is still there in version 1.4.0. If it helps any, the generator worked fine on version 0.46.3.\nHere is my properties after auto-import on version 1.4.0:\n```\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nJenny.SearchPaths = Assets\\Entitas\\Editor\\Plugins\\DesperateDevs, \\\n                    Assets\\Entitas\\Editor\\Plugins\\Entitas\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets\\Editor\\DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets\\Editor\\TypeDrawer\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = EntitasProject.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Core, \\\n                                          Input, \\\n                                          Command\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets\\Sources\n```\nIf I start the server I get an error related to the port:\n.\\CodeGenerator\\Jenny.exe server -v\nSystem.Collections.Generic.KeyNotFoundException: the given key was not present in the dictionary.\n   at System.ThrowHelper.ThrowKeyNotFoundException()\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\n   at DesperateDevs.Serialization.Properties.get_Item(String key)\n   at DesperateDevs.CodeGeneration.CodeGenerator.CodeGeneratorConfig.get_port()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.Server.run()\n   at DesperateDevs.CodeGeneration.CodeGenerator.CLI.AbstractPreferencesCommand.Run(String[] args)\n   at DesperateDevs.CLI.CLIProgram.runCommand(String[] args). Think I was using the wrong Jenny.exe. My problem is now exactly the same as #628, so I am closing this one.. As written on Gitter, a quick work-around is to download and run it through mono with mono .\\Jenny\\Jenny.exe auto-import. (Remember to set mono directory in system variables)\n@sschmid When running unit-tests do you run it on Windows and Mac to make sure Jenny is compatible on both platforms?. ",
    "kewlniss": "Would a dedicated forum be better than simply using StackOverflow with an Entitas tag? All of the awesome folks in the chat could monitor SO for questions as they had time. And I believe SO's SEO juice would be better than any particular forum. Perhaps this was actively decided against, but I figured I'd ask since I've seen other projects like this do well by simply tagging questions in StackOverflow.. ",
    "Serris": "okay, thanks for the quick reply. I'm having some trouble setting up Entitas within Monogame, but i'll try the other way around, using that EntitasPure example and modify that to use Monogame.. ",
    "pixeption": "@VladislavKostin Not sure but is it me or someone else?. @VladislavKostin sorry for late response\nActually I worked on something different, I don't want blueprint as scriptable object, I want to attach entitas components into GameObject (For example many game level require design on Editor for productivity). \nAt the end I gave up (although it can run) since it is contained many cheat code & limited when using Unity serialization.\nWriting code to generate scriptable object as blueprint is not hard, you can check how blueprint generate in source code and do the same thing. (actually I learn a lot of reflection and code generation via entitas). @VladislavKostin It's actually difference.\nBlueprint is like a template and can't change (if we change, we change all object), prefab does. I want to add entitas component just like monobehaviour did and with each different object, the number of components and values are difference.\nI succeed at serialize entitas component using Unity Serialization via many tricks.\nI save all component info into a scriptable object with object instance ID, component lookup id (i failed here, component lookup id can change and no other ways to add component to entity without lookup id)\nHere is a demo but i don't think this is a good approach, maybe I'll think about another approach\n\n. @FNGgames I think the biggest difference between cocos2d-x and Unity2D is the Editor (I compare these two since i use both of them). For example i want to design levels in game, the powerful of editor will save ton of times, just grab object into the scene and everything is ok no matter how complex the level is (WYSIWYG)\nWith entitas, to achieve the same result, i don't think we can do the same thing, maybe we can create a level just like above, then export to some asset file then we load at runtime. This can leads to a huge workload and complexity from writing the exporter, the importer and objects creator system.\nI trying to make Entitas easier to use and can use the powerful power of editor. The script i wrote is like EntityLink from Entitas, the difference is it can automatic create entity and component of a game object when it's created.\nNote: Sorry, i'm still vbnn2 above, i use 2 computers and signed in with different account. Cool, hope the best for you and your team, I always support you.. ",
    "wistler": "I'm very much new to .NET projects, but it looks like the Unity project always has the UNITY_EDITOR symbol set; so after assembly, the DLL would only contain the first block when Visual Debugging is enabled for the project (i.e. when ENTITAS_DISABLE_VISUAL_DEBUGGING is not defined), even before we access the DLL from the test project. (Because the assemblies seem to get compiled first, based on the individual project settings, before being linked to the test project.)\nLooks like the intent of the #if #else #endif was to be able to compile the code block dependent on unity when run from within the Unity Editor, or the other block when compiled from outside the Unity Editor. However, the compilation always seems to use the symbols defined in the Unity-controlled .csproj file, which always has the UNITY_EDITOR symbol. \nDo we need to make another .csproj file (manually??) for the same production code-base (so that we can control the defined symbols), to compile the #else code block instead, for our unit test use cases?. ",
    "vaudevillian": "Addition:\nBy just adding \npublic bool value;\nto the component it does work again as expected. So I assume it has something to do with empty components.\nAnother Addition:\nIt only works when components get replaced. By merely adding a component the ReactiveSystems wont trigger.. Hi,\nfirst of all: thanks for your time. This is quite complicated and it took myself some time to get back into the topic. During the time I was using those multi reactive systems, which worked fine so far. \nYet I came back and checked what you said about AnyOf groups and tried to understand.\nTheoretically I totally understand, but thats not exactly how it seems to happen sometimes.\n\nWhat actually happens\nA gets added - will trigger\nB gets added - won't trigger\n\nThat is not true if you do replace components. In Context::updateGroupsComponentReplaced will be called \"UpdateEntity\" instead of \"HandleEntity\", which itself doesnt consider the matcher.\nAnd since flag components doesnt replace they behave differently from replaceable components. Maybe thats the reason why I misunderstood the AnyOf concepts at the beginning. \n. Hey,\nsure thing, I will copy & paste some code here. To the skipping: thats actually exactly what I want and I couldn't figure out a reason why a systems wants a list of disabled, pooled entities.\nHere is the code:\n```\npublic sealed class CalcOutlineSystem : ReactiveSystem\n{\n    public CalcOutlineSystem( Contexts contexts ) : base( contexts.game )\n    {\n    }\nprotected override Collector<GameEntity> GetTrigger( IContext<GameEntity> context )\n{\n    return new Collector<GameEntity>(\n        new[] {\n            context.GetGroup(GameMatcher.ShipRoute),\n            context.GetGroup(GameMatcher.View)\n        },\n        new[] {\n            GroupEvent.AddedOrRemoved,\n            GroupEvent.Added\n        }\n    );\n}\n\nprotected override bool Filter( GameEntity entity )\n{\n    return true;\n}\n\nprotected override void Execute( List<GameEntity> entities )\n{\n    foreach( var entity in entities )\n    {\n        if( entity.hasShipRoute )\n        {\n            if( HelperShips.IsLooping( entity ) )\n            {\n                entity.ReplaceOutline( Color.green );\n            }\n            else\n            {\n                entity.ReplaceOutline( Color.white );\n            }\n        }\n        else\n        {\n            entity.ReplaceOutline( Color.red );\n        }\n    }\n}\n\n}\n```\nEntities (Ships) may lose ShipRouteComponent when those routes are cancelled. In this case, they should get a red outline. The entities are still intact. \nBut if an entity is destroyed, the ShipRouteComponent will be removed during the destroying process, hence every system will react to the component removal. I could put everywhere a \"is this entity still valid?\" check, sure. But I was assuming that only valid entities gets forwarded to the Execute system.. I can be more specific in the filter and I could easily filter entity.isEnabled, yes. \nBut my concern is more of a general question: is it really reasonable to return destroyed entities in the first place? Since those entities are totally empty without any components, you cant extract any useable information. It seems to me that every single ReactiveSystem with xxxOrRemoved would have to utilize the entity.isEnabled filter, then.\nOr am I missing some use case here? . Okay, thanks for the help!. ",
    "PanCotzky": "Oh. Ok, i'll get back to composing my entities in code.\nAlso, about json. It looks like Unity added a native json serializer to version 5.6. May be you should try it. Here it is:\nhttps://docs.unity3d.com/Manual/JSONSerialization.html\nUpdate\nNevermind. Found your comment on the matter.\n267. I see what you're saying, but all I need is some debug information. Naming the abstract entity may go against ECS philosophy but adding a comment to a logical object is pretty standard for any programming philosophy and that's all I ask for..",
    "vbnn2": "Hi, this is my first comment on Entitas issues and I'm sorry if my English is bad. I also want to show my respect with the guys who made Entitas.\nI know Entitas when it first came out on Unite 2015 and I really like the concept of Entitas. But I'm have not used it in any project because of it can't company with Unity GameObject or Prefab.\nI try to fix this problem about a week and now I gave up, but I still explain my idea here since it may help the others a little bit. Maybe they have a better idea :)\nDesire: Using Entitas with GameObject & Prefab just as like blueprint did right now, we have a game object, we attach a script and starting to add component to it. When the game run, the object will create an entity and components associate with it. It's can also support all kind of serialization that Unity support.\nMy approach: \n- Each component must be serializable\n- ComponentData: A generic class will held game object instance id, component lookup id and Entitas component\n- Create a scriptable object generic base will held a bunch of list of ComponentData. To make Unity Serialize work, I made an editor class to help us to generate this class, with each component has marked as Serializable, I create a list for them and save them as ComponentAsset.asset\n- A ComponentBanker will help to load asset file and associate with ComponentAsset\n- Each game object has EntityAttacher component that can do what blueprint did.\n- If we delete gameobject => also delete all component in ComponentAsset\n- If we duplicate gameobject, copy/paste, create from prefab => clone those component with new GameObject instance Id\nI succeed with this approach, i can add/update component, i can run and the gameobject can create entity with component ..... \nBut .... at the end i realized my approach have 1 fault. Currently to add or create a component, we must know the component lookup id, and it can be changed if we add new/delete component. So my week is gone =))\nI really really like Entitas and hope it can company with Unity soon :). ",
    "boris-741": "Thank you VladislavKostin. I did not guess to look at the problem from this angle\n. IDNoise \n\nGameObject.FindObjectOfType\n\nAnd if you have hundreds of objects in the scene?. ",
    "koden-km": "In my project I have been using some defines that I can set to disable all my Entitas code when making changes to components or systems.\nIt is a bit of extra work, but has has helped with refactoring and Entitas upgrades. I disable Systems while refactoring Components. Then after I regenerate the new components, I can enable systems again. It seemed a bit nicer than moving code in and out of the project.\n```cs\nif !MYGAME_DISABLE_ENTITAS_COMPONENTS\npublic sealed class ViewComponent : IComponent {\n   public GameObject gameObject;\n}\nendif\n```\nAnd also one for systems.\n```cs\nif !MYGAME_DISABLE_ENTITAS_SYSTEMS\npublic sealed class CommandLogicSystems : Feature {\n    // ...\n}\nendif\n```\nI added those defines to my Entitas source file templates to keep it easy.\n. Sorry for the late reply. I'd also like to say thanks for Entitas also. The ECS design has been great compared to my previous games in pure Unity style. I just hope I can easily create new projects with the asset store version.\nI didn't try the other recent 0.47.x asset store versions. When you said 1.0.0 was coming I had been waiting for that to avoid more project upgrades.\nThe auto-import fails to complete. I have ran it with -v and this is the output:\n```\n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe -v auto-import\nLoading assemblies from /home/kevin/Documents/UnityProjects/MyGame/Jenny\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Analytics.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Analytics.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CLI.Utils.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CLI.Utils.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.CodeGeneration.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Logging.Formatters.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Logging.Formatters.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Logging.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Logging.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Networking.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Networking.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Serialization.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Serialization.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Utils.dll\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/DesperateDevs.Utils.dll\nJenny.exe load: /home/kevin/Documents/UnityProjects/MyGame/Jenny/Jenny.exe\n  \u279c Loading: /home/kevin/Documents/UnityProjects/MyGame/Jenny/Jenny.exe\nJenny.Ignore.Keys = \nJenny.SearchPaths = \nJenny.Plugins = \nJenny.PreProcessors = \nJenny.DataProviders = \nJenny.CodeGenerators = \nJenny.PostProcessors = \nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nJenny.exe reflect: ./Assets/Entitas/DesperateDevs.Logging.dll\n  \u279c Loading: ./Assets/Entitas/DesperateDevs.Logging.dll\nJenny.exe reflect: ./Assets/Entitas/DesperateDevs.Utils.dll\n  \u279c Loading: ./Assets/Entitas/DesperateDevs.Utils.dll\nJenny.exe reflect: ./Assets/Entitas/Entitas.CodeGeneration.Attributes.dll\n  \u279c Loading: ./Assets/Entitas/Entitas.CodeGeneration.Attributes.dll\nJenny.exe reflect: ./Assets/Entitas/Entitas.Unity.dll\n  \u279c Loading: ./Assets/Entitas/Entitas.Unity.dll\nJenny.exe reflect: ./Assets/Entitas/Entitas.VisualDebugging.Unity.dll\n  \u279c Loading: ./Assets/Entitas/Entitas.VisualDebugging.Unity.dll\nJenny.exe reflect: ./Assets/Entitas/Entitas.dll\n  \u279c Loading: ./Assets/Entitas/Entitas.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.Analytics.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.Analytics.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.CodeGeneration.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.Networking.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.Networking.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.Serialization.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.Serialization.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/DesperateDevs.Unity.Editor.dll\n  \u279c Loading: ./Assets/Entitas/Editor/DesperateDevs.Unity.Editor.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Entitas.Migration.Unity.Editor.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Entitas.Migration.Unity.Editor.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Entitas.Migration.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Entitas.Migration.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Entitas.Unity.Editor.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Entitas.Unity.Editor.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Entitas.VisualDebugging.Unity.Editor.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Entitas.VisualDebugging.Unity.Editor.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Unity.Plugins.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Plugins/Entitas/Entitas.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Plugins/Entitas/Entitas.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Assets/Entitas/Editor/Plugins/Entitas/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Assets/Entitas/Editor/Plugins/Entitas/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Analytics.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Analytics.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.CLI.Utils.dll\n  \u279c Loading: ./Jenny/DesperateDevs.CLI.Utils.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: ./Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: ./Jenny/DesperateDevs.CodeGeneration.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Logging.Formatters.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Logging.Formatters.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Logging.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Logging.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Networking.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Networking.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Serialization.CLI.Utils.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Serialization.CLI.Utils.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Serialization.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Serialization.dll\nJenny.exe reflect: ./Jenny/DesperateDevs.Utils.dll\n  \u279c Loading: ./Jenny/DesperateDevs.Utils.dll\nJenny.exe reflect: ./Jenny/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Unity.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/DesperateDevs/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas/Entitas.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas/Entitas.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Analytics.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Analytics.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.CodeGeneration.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Logging.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Logging.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Roslyn.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Roslyn.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Roslyn.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Serialization.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Serialization.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Utils.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/DesperateDevs.Utils.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Entitas.CodeGeneration.Attributes.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Entitas.CodeGeneration.Attributes.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Entitas.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Entitas.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Entitas.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Entitas.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Framework.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Framework.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Tasks.CodeAnalysis.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Tasks.CodeAnalysis.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Tasks.Core.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Tasks.Core.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Utilities.Core.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.Utilities.Core.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Build.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Cci.Extensions.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.Cci.Extensions.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.Scripting.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.Scripting.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.Workspaces.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.Workspaces.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.CSharp.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Scripting.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Scripting.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.VisualBasic.Workspaces.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.VisualBasic.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.VisualBasic.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.amd64.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.amd64.dll\n    \u279c Resolved: ././Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.amd64.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.x86.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.x86.dll\n    \u279c Resolved: ././Jenny/Plugins/Entitas.Roslyn/Microsoft.DiaSymReader.Native.x86.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.CloudTestTasks.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.CloudTestTasks.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.Tasks.Packaging.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.Tasks.Packaging.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.Tasks.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Microsoft.DotNet.Build.Tasks.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/PortableTask.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/PortableTask.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.AppContext.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.AppContext.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Collections.Immutable.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Collections.Immutable.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.AttributedModel.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.AttributedModel.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Convention.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Convention.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Hosting.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Hosting.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Runtime.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.Runtime.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.TypedParts.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Composition.TypedParts.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Console.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Console.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Diagnostics.FileVersionInfo.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Diagnostics.FileVersionInfo.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Diagnostics.StackTrace.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Diagnostics.StackTrace.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.IO.Compression.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.IO.Compression.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.IO.FileSystem.Primitives.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.IO.FileSystem.Primitives.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.IO.FileSystem.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.IO.FileSystem.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Reflection.Metadata.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Reflection.Metadata.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Runtime.InteropServices.RuntimeInformation.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Runtime.InteropServices.RuntimeInformation.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Algorithms.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Algorithms.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Encoding.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Encoding.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Primitives.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.Primitives.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.X509Certificates.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Security.Cryptography.X509Certificates.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Text.Encoding.CodePages.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Text.Encoding.CodePages.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Threading.Tasks.Dataflow.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Threading.Tasks.Dataflow.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Threading.Thread.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Threading.Thread.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.ValueTuple.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.ValueTuple.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.ReaderWriter.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.ReaderWriter.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XPath.XDocument.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XPath.XDocument.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XPath.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XPath.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XmlDocument.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/System.Xml.XmlDocument.dll\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/Xunit.NetCore.Extensions.dll\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/Xunit.NetCore.Extensions.dll\nJenny.exe reflect: ./Library/ScriptAssemblies/Assembly-CSharp.dll\n  \u279c Loading: ./Library/ScriptAssemblies/Assembly-CSharp.dll\nJenny.exe reflect: ./Jenny/Jenny.exe\n  \u279c Loading: ./Jenny/Jenny.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/ApiCompat.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/ApiCompat.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/BclRewriter.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/BclRewriter.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/GenAPI.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/GenAPI.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/GenFacades.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/GenFacades.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/MSBuild.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/MSBuild.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/VBCSCompiler.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/VBCSCompiler.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/csc.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/csc.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/csi.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/csi.exe\nJenny.exe reflect: ./Jenny/Plugins/Entitas.Roslyn/vbc.exe\n  \u279c Loading: ./Jenny/Plugins/Entitas.Roslyn/vbc.exe\n  \u279c Loading Dependency: UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n  \u279c Loading Dependency: UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n  \u279c Loading Dependency: UnityEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n  \u279c Loading Dependency: UnityEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n  \u279c Loading Dependency: UnityEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n  \u279c Loading Dependency: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  \u279c Loading Dependency: Microsoft.Build.Utilities.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  \u279c Loading Dependency: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  \u279c Loading Dependency: System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: Microsoft.Cci, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  \u279c Loading Dependency: System.Composition.AttributedModel, Version=1.0.30.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\nSystem.ExecutionEngineException: MonoError reused after mono_error_cleanup\n  at (wrapper managed-to-native) System.Reflection.Assembly:GetTypes (System.Reflection.Assembly,bool)\n  at System.Reflection.Assembly.GetTypes () [0x00000] in <8f2c484307284b51944a1a13a14c0266>:0 \n  at DesperateDevs.Utils.AppDomainExtension.GetAllTypes (System.Collections.Generic.IEnumerable`1[T] assemblies) [0x00016] in <124a669b64a14dedae98b649f2290514>:0 \n  at DesperateDevs.Utils.AssemblyResolver.GetTypes () [0x00000] in <124a669b64a14dedae98b649f2290514>:0 \n  at DesperateDevs.Utils.AssemblyResolver.GetAssembliesContainingType[T] (System.Boolean allDirectories, System.String[] basePaths) [0x00046] in <124a669b64a14dedae98b649f2290514>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGeneratorUtil.AutoImport (DesperateDevs.CodeGeneration.CodeGenerator.CodeGeneratorConfig config, System.String[] searchPaths) [0x00006] in :0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CLI.AutoImportCommand.autoImport () [0x0003c] in <233ae60b7b054b8ba54b6e797d330e25>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CLI.AutoImportCommand.run () [0x00016] in <233ae60b7b054b8ba54b6e797d330e25>:0 \n  at DesperateDevs.CLI.Utils.AbstractCommand.Run (System.String[] args) [0x00018] in <25f8b2b4985947678beadf29ec33f49a>:0 \n  at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run (System.String[] args) [0x000bb] in <26b18d9c76d747d097f17f0ef3668224>:0 \n  at DesperateDevs.CLI.Utils.CLIProgram.runCommand (System.String[] args) [0x0000e] in <25f8b2b4985947678beadf29ec33f49a>:0 \n~/Documents/UnityProjects/MyGame $ cat Entitas.properties \nJenny.Ignore.Keys = \nJenny.SearchPaths = \nJenny.Plugins = \nJenny.PreProcessors = \nJenny.DataProviders = \nJenny.CodeGenerators = \nJenny.PostProcessors = \nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\n```. There still seems to be something wrong with the new Jenny since the 0.46.x update.\nAs a test, I tried using the Unity Entitas UI to do the initial auto import just like your new Entitas-Shmup video. That filled in the properties file (see below). After that I tried set up the Roslyn Jenny generator again, but Jenny CLI just errors same as before.\nMy Entitas.properties file after using Unity Entitas UI auto-import:\n```\n~/Documents/UnityProjects/MyGame $ cat Entitas.properties \nJenny.Ignore.Keys = \nJenny.SearchPaths = Assets/Entitas/Editor/Plugins/DesperateDevs, \\\n                    Assets/Entitas/Editor/Plugins/Entitas\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Assembly-CSharp.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Sources\n```\nNow trying to setup Roslyn Jenny (the MonoError line is red and the command exits immediately):\n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe auto-import -s\nMonoError reused after mono_error_cleanup. As another test I have copied my new Unity project folder to MyGame_copy and copied the old 0.46.3 Jenny CodeGenerator folder from an older project into this new copy project. I kept the Entitas 1.0 asset as is, only the Jenny part is changed.\nI removed the Entitas.properties file that was created by Entitas 1.0.0 Jenny and used the older CodeGenerator Jenny to create a new Entitas.properties file.\nThe auto-import and gen commands work perfectly when using the older Jenny in this copy project.\nAny ideas on what changed between the Jenny's included in Entitas asset store package 0.46.3 and 1.0, that could cause these errors?. Ok thanks for the explanation of the Jenny changes, and yes i'm on Linux (Ubuntu 17.10, the most recent official release). I am using the version of mono from the Ubuntu package manager, so other Linux users may hit this same issue. It does seem to be quite an old version of mono from Nov 2016. I will try the newer version of mono using the custom repository later today and report back here. I do not expect you to go out of your way to support the Unity Linux Beta for your asset. I reported my issue here in case it was a simple fix and to see if it also occurred on other platforms.\nI tried the Preferences.properties that you linked from your Shmup Part 1 video in my Entitas 1.0 based project and it does generate successfully. So other than the CLI Jenny auto-import issue, Entitas 1.0 is working great.\nI look forward to more of the Shmup videos for best practices. Thank you for your hard work!\n. Ok good news, I have updated my mono version and re-run the Jenny setup and generate commands and everything works perfect. Thanks.\n```\n~/Documents/UnityProjects/MyGame $ mono --version\nMono JIT compiler version 5.4.1.7 (tarball Wed Jan 17 20:26:34 UTC 2018)\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n    TLS:           __thread\n    SIGSEGV:       altstack\n    Notifications: epoll\n    Architecture:  amd64\n    Disabled:      none\n    Misc:          softdebug \n    LLVM:          supported, not enabled.\n    GC:            sgen (concurrent by default)\n~/Documents/UnityProjects/MyGame $ rm Entitas.properties \n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe new Entitas.properties\nCreated Entitas.properties\nCreated /home/kevin/Documents/UnityProjects/MyGame/Entitas.userproperties\n~/Documents/UnityProjects/MyGame $ cat Entitas.properties \nJenny.Ignore.Keys = \nJenny.SearchPaths = \nJenny.Plugins = \nJenny.PreProcessors = \nJenny.DataProviders = \nJenny.CodeGenerators = \nJenny.PostProcessors = \nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe auto-import -s\nAdded: DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nAdded: Entitas.CodeGeneration.Plugins.ComponentDataProvider\nAdded: Entitas.CodeGeneration.Plugins.ContextDataProvider\nAdded: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nAdded: Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\nAdded: Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nAdded: Entitas.CodeGeneration.Plugins.ComponentContextGenerator\nAdded: Entitas.CodeGeneration.Plugins.ComponentEntityGenerator\nAdded: Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator\nAdded: Entitas.CodeGeneration.Plugins.ComponentGenerator\nAdded: Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator\nAdded: Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator\nAdded: Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nAdded: Entitas.CodeGeneration.Plugins.ContextGenerator\nAdded: Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nAdded: Entitas.CodeGeneration.Plugins.ContextsGenerator\nAdded: Entitas.CodeGeneration.Plugins.EntityGenerator\nAdded: Entitas.CodeGeneration.Plugins.EntityIndexGenerator\nAdded: Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator\nAdded: Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nAdded: DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor\nAdded: DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nAdded: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\n\u26a0\ufe0f  Potential plugin collision: ComponentDataProvider\n0: Keep all (no changes)\n1: Keep Entitas.CodeGeneration.Plugins.ComponentDataProvider\n2: Keep Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\nRemoved: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u26a0\ufe0f  Potential plugin collision: EntityIndexDataProvider\n0: Keep all (no changes)\n1: Keep Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n2: Keep Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nRemoved: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nAdded: DesperateDevs.CodeGeneration.Plugins.ProjectPath\nAdded: Entitas.CodeGeneration.Plugins.Contexts\nAdded: Entitas.CodeGeneration.Plugins.IgnoreNamespaces\nAdded: DesperateDevs.CodeGeneration.Plugins.TargetDirectory\n\ud83d\udc89  Applied fix: Remove DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor from CodeGenerator.PostProcessors\n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe doctor\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nGame/Components/GameHealthComponent.cs - Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator\nInput/InputComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator\nGame/GameComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator\nGame/GameAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nInput/InputAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nGame/GameContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nInput/InputContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nGame/GameMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nInput/InputMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nContexts.cs - Entitas.CodeGeneration.Plugins.ContextsGenerator, Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator\nGame/GameEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nInput/InputEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nFeature.cs - Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\n\ud83d\udc68\ud83d\udd2c  No problems detected. Happy coding :)\n~/Documents/UnityProjects/MyGame $ mono Jenny/Jenny.exe gen\nGame/Components/GameHealthComponent.cs - Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator\nInput/InputComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator\nGame/GameComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator\nGame/GameAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nInput/InputAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nGame/GameContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nInput/InputContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nGame/GameMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nInput/InputMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nContexts.cs - Entitas.CodeGeneration.Plugins.ContextsGenerator, Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator\nGame/GameEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nInput/InputEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nFeature.cs - Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\n```. This sounds very interesting. Will you be sharing your game examples using this structure?\nI've been struggling a bit in my current project to convert input actions/intents into validated commands and that apply the state changes. I was trying to follow a design discussion you had on gitter a few months ago.. Would you do A.I. in the \"External Input\" section or \"Game Logic\" section?\nI was planning to do A.I. as Entitas systems just like player input. Each creature/NPC would create intent actions (just like input, eg. MoveFoward) to be validated and converted into Commands. I then run all command systems in the simulation step before render.\nWhich logic should be done directly in systems and which should be passed off to do in View's?. Other inputs will have issues with multiple different command types also. For example if there were Move and PickupItem commands both coming from input actions in same frame. If move is done first, then you might be too far away to pickup item. If you pickup item first it might be trapped and paralyse player preventing movement.\nI think it might be best to skip early validation. Just create commands (as intents) from any input and validate them on execute. Which ever happens first becomes the new state. The other commands will need to softly fail doing nothing and be skipped or apply slightly differently if possible to the new state.\nIn my project I had been working with commands late in the game loop, applying after regular game logic, but before render views are updated. This was so AI systems could run early just like player and network input and I could treat their decision as input for creating commands. Movement happens which can cause new views to be streamed in and old view streamed out. Some AI will potentially run from MonoBehaviour assets in that early External Input section and some from Game Logic systems.\n. The field needs to be public: public float value;\n. The properties files are always for Entitas regardless if read by Jenny or the Unity interface generator?\nWhat if you use .entitas as the file extension so there is no confusion between what the .properties file is for (Entitas or some other data file/asset). You could have Jenny.entitas and Unity.entitas?. I wonder if this is related to the issue?\nhttps://github.com/ericsink/SQLitePCL.raw/issues/228. I got a bunch of Mono/.NET updates for my Ubuntu system this weekend.\nMono JIT compiler version 5.16.0.220 (tarball Mon Nov 26 17:17:59 UTC 2018)\nI now get a similar but slightly different error. I am still on the same Entitas version 1.8.2. I will update to latest Entitas and try it again soon.\n~/UnityProjects/Unity-2018.2.7f1-testing $ mono Jenny/Jenny.exe doctor -v\n---- (content here is the same as original post, error is below) ----\nOpening Assembly-CSharp.csproj\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\nSystem.TypeLoadException: Could not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection:_handle' (0) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies.\n  at (wrapper managed-to-native) System.RuntimeType.GetPropertiesByName_native(System.RuntimeType,intptr,System.Reflection.BindingFlags,bool)\n  at System.RuntimeType.GetPropertiesByName (System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean icase, System.RuntimeType reflectedType) [0x0001b] in <0f8aeac9d63d4b8aa575761bb4e65b79>:0 \n  at System.RuntimeType.GetPropertyCandidates (System.String name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, System.Boolean allowPrefixLookup) <0x7f0d3055f8d0 + 0x0007a> in <0f8aeac9d63d4b8aa575761bb4e65b79>:0 \n  at System.RuntimeType.GetProperties (System.Reflection.BindingFlags bindingAttr) <0x7f0d30560050 + 0x0002c> in <0f8aeac9d63d4b8aa575761bb4e65b79>:0 \n  at System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties (System.Type type) <0x7f0d306f8350 + 0x00019> in <0f8aeac9d63d4b8aa575761bb4e65b79>:0 \n  at System.Composition.TypedParts.Discovery.TypeInspector+<DiscoverPropertyExports>d__7.MoveNext () [0x00030] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.TypedParts.Discovery.TypeInspector+<DiscoverExports>d__5.MoveNext () [0x000dc] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.TypedParts.Discovery.TypeInspector.InspectTypeForPart (System.Reflection.TypeInfo type, System.Composition.TypedParts.Discovery.DiscoveredPart& part) [0x00061] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.TypedParts.TypedPartExportDescriptorProvider..ctor (System.Collections.Generic.IEnumerable`1[T] types, System.Composition.Convention.AttributedModelProvider attributeContext) [0x00037] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.Hosting.ContainerConfiguration.CreateContainer () [0x00042] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create (System.Collections.Generic.IEnumerable`1[T] assemblies) [0x0001e] in <a4b6e470f95047fb822f681582b0e302>:0 \n  at Microsoft.CodeAnalysis.Host.Mef.DesktopMefHostServices.get_DefaultServices () [0x00011] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create (System.Collections.Generic.IDictionary`2[TKey,TValue] properties) [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create () [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at DesperateDevs.Roslyn.ProjectParser..ctor (System.String projectPath) [0x0001b] in <b590fa441c8344e8bb2722e51c425b28>:0 \n  at DesperateDevs.Roslyn.CodeGeneration.Plugins.PluginUtil.GetCachedProjectParser (System.Collections.Generic.Dictionary`2[TKey,TValue] objectCache, System.String projectPath) [0x0000f] in <a13d56fd143a49ceb960b6591f07351a>:0 \n  at Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider.GetData () [0x00021] in <9b3d59da2f5047e98ce32419dc56e7c7>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.generate (System.String messagePrefix, DesperateDevs.CodeGeneration.IPreProcessor[] preProcessors, DesperateDevs.CodeGeneration.IDataProvider[] dataProviders, DesperateDevs.CodeGeneration.ICodeGenerator[] codeGenerators, DesperateDevs.CodeGeneration.IPostProcessor[] postProcessors) [0x00125] in <f4aeeb22e469410b9430bcbbbc55fc17>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.DryRun () [0x000c2] in <f4aeeb22e469410b9430bcbbbc55fc17>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CLI.DoctorCommand.run () [0x00037] in <f4281e7008534af4a7b64d7bfa1438b4>:0 \n  at DesperateDevs.CLI.Utils.AbstractCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x0001f] in <6f1644502be0452880cd4a5c4a6c102a>:0 \n  at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x000b7] in <9f0f6b628fda4b81b4841c3997c7b2fb>:0 \n  at DesperateDevs.CLI.Utils.CLIProgram.runCommand (System.String[] args) [0x0000e] in <6f1644502be0452880cd4a5c4a6c102a>:0. I've found a work around for this dll issue that doesn't involve rolling back the mono version.\nSee here: github.com/dotnet/docfx/issues/3389\n\nManually download the SQLitePCLRaw.core dll from: https://www.nuget.org/packages/SQLitePCLRaw.core/\nCopy the net45 SQLitePCLRaw.core.dll into <your-project>/Jenny/.\nJenny now works again!. FYI, I had more Mono/.NET updates for my Ubuntu system this week. It is now on Mono 5.18.x.x up from 5.16.x.x\nMono JIT compiler version 5.18.0.225 (tarball Wed Jan  2 21:20:16 UTC 2019)\n\nI checked Jenny without the manual override of SQLitePCLRaw.core.dll and it errors as it did previously. When keeping the DLL override in my project Jenny stays happy which keeps me happy ;)\nFor what its worth i'm still on Entitas 1.8.2 for a while. I will update to latest when i finish my game feature branch and post here.\nSimon, if you want to close this you can. If it stays open I will keep updating it as things change for those interested. The only reason i haven't closed this yet is due to the \"out of the box\" experience of having Jenny error if using a newer/latest Mono.\n. Good news, the out of the box experience is working again!\nI upgraded my project to latest Unity editor and Entitas, along with some more system updates for Mono, and now everything is working out of the box again. No need to manually add the SQLitePCLRaw.core.dll anymore.\nI did a clean setup of Entitas+Jenny, removing all the old files and doing fresh import. I ran auto import, then doctor. Next I added my contexts back to the newly created Jenny.properties file and ran the Jenny generator and everything worked perfectly.\nSystem\nUbuntu 18.04.2 LTS\nMono JIT compiler version 5.18.0.268 (tarball Thu Feb 28 15:24:08 UTC 2019)\nEntitas 1.13.0 (asset store version)\nUnity 2018.3.7f1\n:+1: . This sounds like the same issue i'm getting in #811 (the recent post). People have worked around it by downgrading Mono to 5.14.. ",
    "aschuhardt": "https://github.com/sschmid/Entitas-CSharp/wiki/Code-Generator\n. ",
    "hegi25": "Sure, i will do in next week.. Thanks for the reply. \nI agree that contexts are not aware of systems so i revoke my suggestion above.\nBut i still think that something is not working correctly here.\nMy main problem is with the working style of the Collector and Filter.\nWhen using a collector with .Removed() matcher it will trigger when i call DestroyAllEntities(). There is no problem at all. But after these collectors will retain these entities even if the filter will never match. Its like warning me even if there are no reactive systems to process any entity. My suggestion here is to check the validity of the retained entities after the collectors update with reactive systems filter or something like.\nFor Example:\nCollector: context.CreateCollector(GameMatcher.BatchingIsVisible.Removed());\nFilter: return entity.hasView && !entity.isBatchingIsVisible;\n1.DestroyAllEntities()\n2.BatchingIsVisible component is removed (also View component)\nHow currently work: The collector will retain my entity but the filter is not matching. (No reactive system will ever process these entities)\nHow should it work: The collector will not retain the entity, because the filter is not matching.\nWorkaround 1:\n1.Add a WillBeDestroyed component to all entities\n2.DestroyAllEntities()\n3.context.CreateCollector(GameMatcher.AllOf(GameMatcher.BatchingIsVisible).NoneOf(GameMatcher.WillBeDestroyed).Removed();\n4. Not working, still retaining (I thought BatchingIsVisible component will be removed first because of alphabet, but collector still retaining)\nWorkaround 2:\n1.Add a WillBeDestroyed component to all entities\n2.context.CreateCollector(GameMatcher.BatchingIsVisible.Removed(), GameMatcher.WillBeDestroyed.Added()); (i have to remove the BatchingIsVisible component manually here, or the collector will trigger again)\n3. DestroyAllEntities()\n4. Actually this one works, but its too complicated compared to my original suggestion.\nThanks!\n. New idea!\nWhat about Collectors not collecting disabled entities. This tweak would solve all my problems. \nIs there any situation when you want to execute disabled entities in a reactive system? My short answer is no, because you cannot Add/Remove/Replace any component on a disabled entity, so there is no reason to retain them.\nThanks!. Hi, sorry but i cannot agree with you. \nIf i have a ReactiveSystem with trigger like: context.CreateCollector(GameMatcher.Asset.Removed()); this will retain any entity is destroyed (and has AssetComponent of course). But this should only retain entities if the AssetComponent has been removed. Why should a reactive system retain an entity if it is Destroyed (aka it has no components to work with). What could a reactive system execute on an empty entity? I still suggest to implement this filter into the Collector\nprivate void addEntity(IGroup<TEntity> group, TEntity entity, int index, IComponent component)\n    {\n      if (!entity.isEnabled || !this._collectedEntities.Add(entity))\n        return;\n      entity.Retain((object) this);\n    }\nThanks. @sschmid Where is the DestroyEntitiesSystem in your model? Currently I ended up splitting the Eventsystems into two systems, DestroyedEventSystem and the rest. Now my flow is: \nExternal Input ---> Input Actions ---> Commands ---> Call Destroy Events ---> Destroy Entities ---> Game Logic ---> Rest of the Events\nThe reason why I using this is to be able to cleanup everything before the game logic.\nSimple example: Restart game\n1. User create input with RestartComponent\n2. Input actions triggered by RestartComponent and flag all entity with DestroyComponent\n3. Destroy events has sent to all listeners (including viewservice, so unity objects can go back to pool)\n4. Destroy all entities with DestroyComponent entities\n5. Game Logic triggers RestartComponent and re-initializing all game systems.\n6. New entities are created\n7. Send the other Events (viewservice can render now from pool)\nWith this flow I can cleanup and re-initialize the whole game in the frame of the input without any leak or garbage.\nBut maybe I miss something and you have a better implementation.\nThanks.. #632 Created a new pull request to fix this issue. Can also be done without linking with creating a dummy 4.7.1 csproj file with ItemGroup: <Compile Include=\"path/Components/**/*.cs\" />. You can also disable generate csproj file in jenny settings. Much cleaner and more simple solution.. ",
    "Shmewwww": "Okay!!! Create new system for fixed update doing well!! Thx. ",
    "karpinsn": "I ran into a similar problem on my game. You definitely need to remove the EntityLink but I also had to explicitly remove an EntityIndex that I had as well. This is kinda unfortunately because then I have to manually reset the EntityIndex since they are added to all contexts in InitializeEntityIndices as a post construction step.. Just one that I added to my component via the EntityIndex attribute\n```csharp\nusing Entitas;\nusing Entitas.CodeGenerator.Api;\n[Game]\npublic class LocationComponent : IComponent {\n    [EntityIndex]\n    public Location2D Location;\n}\n```. Looks like I am on version 0.40.0. I can update if that will help. Otherwise I can try and put together a small example of what I am hitting.\nAs for what is happening I am calling Reset which is calling DestroyAllEntities. If I don't manually get rid of the entity index, they stay retained and at the end of the method it throws the ContextStillHasRetainedEntitiesException. Awesome, thanks. I'll upgrade and let you know if I hit any snags. Thanks for the great library. ",
    "rastlin86": "The proposed implementation for this feature still generates some garbage due to boxing. The best approach would be to remove IEnumerable interfaces just provide implementation without interface:\nHashSet<TEntity>.Enumerator GetEnumerator();. Yes, the struct enumerator from HashSet is being boxed into IEnumerator causing GC.Alloc.\nAdding the method I mentioned to IGroup interfaces resolves this\npublic interface IGroup<TEntity> : IGroup where TEntity : class, IEntity\n    {\n        HashSet<TEntity>.Enumerator GetEnumerator();\nIt might be also good to remove IEnumerable from IGroup to not encourage using the interface, which causes allocation, however this might have some compatibility issues for people using IGroup as IEnumerable.. I did measure it, it's 40B per foreach.\nIt's pretty common situation with Unity and foreach. That's why it's advised to avoid Linq extensions, as they tend to allocate the memory.\nThere is already a HashSet enumerator available, that is being returned either way by current implementation and is alloc free. The allocation comes solely from the fact that it's wrapped with the interface.. Also, I'm planning to implement this in my copy of Entitas, but it's possible to completely remove memory allocation from the Group.\nCurrent implementation has a cache of entities, which is invalidated each time the group is modified:\ncs\nvoid removeEntity(TEntity entity, int index, IComponent component) {\n    var removed = _entities.Remove(entity);\n    if (removed) {\n        _entitiesCache = null;\n        _singleEntityCache = null;\n        if (OnEntityRemoved != null) {\n            OnEntityRemoved(this, entity, index, component);\n        }\n        entity.Release(this);\n    }\n}\nThe cache is created each time the GetEntities() is called if the modification occured:\n```cs\npublic TEntity[] GetEntities() {\n    if (_entitiesCache == null) {\n        _entitiesCache = new TEntity[_entities.Count];\n        _entities.CopyTo(_entitiesCache);\n    }\nreturn _entitiesCache;\n\n}\n```\nEach time the group is changed, it causes new managed array to be allocated.\nThe alternative, and more memory efficient approach is to switch the entities cache ownership to each System by providing new implementation of GetEntities:\n```cs\npublic void GetEntities(List buffer) {\n    buffer.Clear();\n    foreach (var entity in entities) {\n        buffer.Add(entity);\n    } \nreturn _entitiesCache;\n\n}\n```\nThis way each individual system would allocate his buffer only ONCE per it's lifetime essentially removing any memory allocation during execution - well unless the List would have to be expanded in the background due to number of entities. It can be worker around by profiling the application and choosing the buffer size accordingly, depending on usage.\nIf the Systems are executed sequentially all the time, one could get away with just a single buffer for all systems.. The above will cause exception any time you modify the Entities which causes them to be added/removed from the group as long as you iterate over it.\nThats the reason you get a buffer copy on GetEntities() and only at this point.. Well your proposal of GetEntitiesNonAlloc() isn't thread safe unfortunately.\nSo it's just a matter of answering a question what performance characteristic you want to achieve. If you want zero-alloc, thread safe solution, one approach I can think of is to pollute your systems with a buffer for entities.\nIf you don't care about having minimal alloc or about thread safety, you can use either of your suggestions or current implementation.. @sschmid This is my current implementation I'm using\n```cs\npublic List GetEntities(ref List buffer)\n{\n    if (buffer == null) buffer = new List(Math.Max(_entities.Count, 32));\nbuffer.Clear();\nif (buffer.Capacity < _entities.Count)\n{\n    //Resize buffer twice\n    buffer.AddRange(_entities);\n}\nelse\n{\n    foreach (TEntity entity in _entities)\n    {\n        buffer.Add(entity);\n    }\n}\n\nreturn buffer;\n\n}\n```\nThis does not produce any garbage - unless required by a buffer size (due to how AddRange is implemented, it unfortunately creates 2 arrays internaly).\nThis allows me to use following syntax when I operate on groups:\ncs\nforeach (UnitEntity withTarget in _withTargetsGroup.GetEntities(ref EntityBuffer))\n{\n//code...\n}\nI just use List because it supports foreach without any garbage out of the box - Arrays are wrapped with IEnumerable when used in foreach, again causing garbage.. AddRange always creates a new array internally regardless if the list needs to be resized or not, at leas in Microsoft implementation:\nhttps://stackoverflow.com/questions/2123161/listt-addrange-implementation-suboptimal\nHave not tested that, but I'm like 80% sure this is also the way it's implemented in mono.. @sschmid Have you profiled the implementation?\nAccording to MS reference source the AddRange always creates a temp table:\nhttps://github.com/mono/mono/blob/27480ee50d6fe402b752da40653d7c6a38e517dd/mcs/class/referencesource/mscorlib/system/collections/generic/list.cs#L735\nI'm looking for how it's implemented in mono to confirm.. It's nice to see that Unity optimised AddRange implementation. Good job with the testing scene!. ",
    "sdarkwell": "I wonder that as well!. @jr69: That was also a concern of mine. Might be worth confirming with Simon, though, just to ensure.. Alright! Pull request submitted.\nI've only ever used Git for myself, so apologies if there are any issues with how I submitted the pull request.. Included preprocessor condition to ensure targeting of only versions v2017.1.0+.\nThere was no condition that would just affect v2017.1.0b4+, so b1 - b3 may be broken.. Glad I could help!. @sschmid: It hangs for at least 10 minutes.. @sschmid: Thank you, sir!. My pleasure. Glad that I could help!. I agree. If possible, I would also appreciate this enhancement.\nOne example of an asset developer who has implemented a system like this is Guavaman Enterprises with their Unity input asset Rewired. See:  [http://guavaman.com/rewired/latest]. After entering your Email address and invoice number, clicking \"Download\" automatically serves up the newest Unity asset package for the full version of Rewired.\nIt would be a nice benefit of those who have paid to support Entitas, instead of feeling like we are missing out the benefit of your efforts to quickly patch any issues.\n\nS.. I like this idea as well!\n- S.. Simon (@sschmid),\n\nThank you for taking the time to create such comprehensive videos. While I am familiar enough to create games/applications in C#, I am still early on my path to understanding design patterns, and only just beginning to understand design methodologies. A few times, I've researched Test Driven Development, but always failed to wrap my mind around how to use it with Unity. This video helped me with that immensely.\nOf course, your videos also serve as great views into Entitas best-practices.\nI will also be watching Clean Code - Advanced TDD as soon as my time and budget affords me the opportunity. They appear to be an excellent resource and boon to understanding Test Driven Development.\nAgain, thank you greatly for creating these videos and providing the additional references.\nI await your next video with great excitement!\n- S.. Included preprocessor condition to ensure targeting of only versions v2017.1.0+.. ",
    "jr69": "Seems like the Asset Store version is a scam, likely someone else impersonating Simon and trying to profit. There's no official word here of any paid version as far as I'm concerned. ",
    "DTurley": "Perfect, thanks a mill, I think I was having a compile problem that was also complicating the issue.  \ud83d\udc4d . ",
    "TheUtDuong": "What is the planned price for Entitas Plus? My wallet is ready.. I agree with the top few posts. When first learning Entitas, I encountered that catch 22 case where my systems broke because I needed to regenerate components but couldn't because of compiler errors. That was a pretty big annoyance. Entitas in it's current form is very programmer oriented. It may defeat the purpose of entitas but how about the idea of having entitas generate attachable monobehaviour scripts whose sole purpose is to populate the attached GameObject with the entitas components. I found this approach very friendly with the unity workflow. An example would be a waypointcomponent. I would create a monobehaviour that I can attach to any GameObject that will create an entity and add a waypointcomponent.. Yeah, you are correct about EntityLink. I am currently using that. My suggestion was more to make entitas more accessible for people not familiar with Entitas but are familiar with the unity workflow. \nLet's say you have a playercomponent and movementcomponent as icomponents. The typical workflow is to create the entity with the playercomponent and movementcomponent in a system. My suggestion is have entitas also generates playerMonoBehaviour and movementMonobehavior. A user can then attach those scripts to a player game\u200bObject. The scripts would then search for an EntityLink or create one if the object is not linked.\nWith this approach it may help ease in people familiar with the unity workflow. I am not sure if this is the right approach but it is what I have used in the past and it helped me wrap my head around Entitas coming from a pure unity workflow.\nSorry for the formatting, I am currently on my phone.\n. ",
    "Jonathan-Turner": "I'm happy to support the project, but would likely rather buy the Plus version. Is there an upgrade path between buying the asset now to support your further development and then going to plus?\nMy apologies if I missed that somewhere.. ",
    "burley1": "Have the same error (or not?)\nildslave/unity/build/Editor/Mono/EditorGUI.cs:6143)\nDesperateDevs.Unity.Editor.PreferencesWindow.drawException (System.Exception exception)\nDesperateDevs.Unity.Editor.PreferencesWindow.drawContent ()\nDesperateDevs.Unity.Editor.PreferencesWindow.OnGUI ()\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:222)\nRethrow as TargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MonoMethod.cs:232)\nSystem.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) (at /Users/builduser/buildslave/mono/build/mcs/class/corlib/System.Reflection/MethodBase.cs:115)\nUnityEditor.HostView.Invoke (System.String methodName, System.Object obj) (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:295)\nUnityEditor.HostView.Invoke (System.String methodName) (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:288)\nUnityEditor.HostView.OldOnGUI () (at C:/buildslave/unity/build/Editor/Mono/HostView.cs:107)\nUnityEngine.Experimental.UIElements.IMGUIContainer.DoOnGUI (UnityEngine.Event evt) (at C:/buildslave/unity/build/Runtime/UIElements/Managed/IMGUIContainer.cs:179)\nEntitas - 0.46.3\nUnity 2017.3.0f3\n\n. Is there any way to disable \"Experemental\"?. Hi, I started all from the begging - I removed all generated code, removed system, then add components again and error disappear. Anyway i can't reproduce this error so issue can be closed.. ",
    "andrewhickey": "@cloudjubei Did you decide to go ahead with this in the end? Any help needed?. ",
    "CypherEA": "Is this alive?. @sschmid @cloudjubei Any way you can also update the EntitasTanks to latest Entitas version - it's the only fully featured 3D example out there. With the pathfinding it will be even more important.\nAlso, using it to showcase best practices (code structure, step by step using generator etc') would be a tremendous help.. ",
    "robert-wallis": "I also did a quick check for x should be same x and found no other suspicious code.\nregex\n\\b(.+)\\.should_be_same\\(\\1\\). ",
    "Alexiron": "Oookey, this is my fault.\nI changed one line in the position animation system from\ne.ReplacePosition(newPos);\nto\ne.position.c = newPos;\nbecause I had changed all the matchers to catch the NewPosition component instead of Position component. I thought I would no longer need to keep track of the Position component changes. But I overlooked the need to track changes for the proper operation of indexing.. ",
    "Besjan": "Even better :) thanks for tip. ",
    "Tzelon": "Good luck mate. \nJust started to work with Entitas and I will be happy to contribute to the project. \nJust let me know how I can help. . ",
    "roygear": "Love your passion! Thanks for contributing this great tool. \nGood Luck!. 2017.2. here is another not work sample: https://gist.github.com/roygear/770a448aba7194ec550f7f76f8ee2620. if Unity using .Net 3.5, this content will generate again, but the roslyn will work only one time!!\n\"< TargetFrameworkProfile >Unity Subset v3.5 < /TargetFrameworkProfile >\"\nif Unity switch to .Net 4.5, the content of TargetFrameworkProfile will be empty, and roslyn WORK!. Rider do not generate this Profile. happy holiday!. Nice!. this may be a bug of Unity 2017.2.\n2017.3 seems fixed.. My workflow is this:\n\nOpen Jenny-server, and pretend it not there\nChange Entitas code\nUse Hotkey of IDE to execute \"client gen\" to generate codes, wait 1 to 2 seconds\nGo back Unity and wait a few seconds\nDo something must do in Unity Editor\n\nand repeat step 1~4. The setup process of 0.46.3 is easier than old version. \nI guess you are a VS user. Yes, it do have more trouble than Rider. \nFor example, you have to use the extra IPreProcessor which a new function of 0.46.3. Otherwise, Roslyn not work.. @chiuan you can make global setting on Unity's inspector. This important to Game designer. To use Entitas and Roslyn generator properly, particular folder placement is needed! You cannot move them to anywhere.\nThat SQLitePCLRaw error can be ignored. It will disappear in latest version of Entitas.. The \"Roslyn\" is a new code generator which is aim to replace the old code generator of Github version.\nCompare to the old one, Roslyn generator mainly have 2 advantages: \n    - faster code generation time via client-server mode\n    - code can be generated even there are code errors\n\"jenny fix\", \"jenny auto-import\" used for first time setup.\n\"jenny doctor\" to check whether the setup good or not.\nAfter successful setup, we only use command \"jenny client gen\" in daily workflow. \nFor other commands, I personally never used. \nFor custom code generation, there is no detailed DOC in wiki. \nYou can get inspiration from Entitas' source code:\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.Plugins. Which IDE is used for your project? Something like Visual Studio or Rider can decompile the DLL file and then source code will be shown. If you just like to see the source code sometime rather than changing them, use DLL version of Entitas is fine.. @sschmid I think it is just OK for Mac.\nFor Windows, I still have to put Jenny's content like this to make it work.\n\n. ```\n[Event(false)]\npublic sealed class GameStateOverEventComponent : IComponent { }\npublic class UiController : MonoBehaviour, IGameStateOverEventListener\n{\n    ......\npublic void OnGameStateOverEvent(bool isGameStateOverEvent) // this paramenter is not needed\n{\n    //do something\n}\n\n}\n```\nfeature request: empty parameter event function\n. @c0ffeeartc\nI like to trigger a event then the listener do something without using any parameter.\npublic void OnGameStateOverEvent(){ // do things}\nIt could be done in previous manually way. Of course, use generator way is better if supported.. to fix this, check the last post  : https://github.com/sschmid/Entitas-CSharp/issues/628. I am using Windows 7 + Unity 2017.3.1p2 + Entitas 1.4.2. It is working fine. . Be careful about the format and symbol in properties file. It is easy to mess up at beginning. \nTo add a new context in properties file, you should have this:\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Battle\nFor more safe way, we can use Unity's GUI like this:\n\n. yes, always select Roslyn if you are using asset store version. have you put the GameEventSystems in your feature class ? \n```csharp\npublic sealed class GameSystems : Feature {\npublic GameSystems(Contexts contexts) {\n\n    // Input\n    Add(new InputSystem(contexts));\n\n    // Update\n    Add(new GameBoardSystems(contexts));\n    Add(new ScoreSystem(contexts));\n\n    // Events\n    Add(new GameEventSystems(contexts)); <-------------this\n\n    // Cleanup\n    Add(new DestroyEntitySystem(contexts));\n}\n\n}\n. yes. but the Match One repo is using a old version of Entitas that the generated system named call `EventSystems`. The lastest version will generate `[ContextName]EventSystems`.. I think there is no BEST way in this case. Only preferable way you like. . I am using Unity 2018.1.0f2, Windows 7, Entitas 1.5.2. The drawer is working fine. Any special setting for that?. how about[Event(Bind.Any)]and[Event(Bind.Exact)]```. I had similar problem about error when reaches system.Initialize().\nSome configs set before system.Initialize(), and those configs will be loaded in InitializeSystem.\nbut the path of configs are changed. The configs cannot be loaded.\nSo, that cause the unit test's error.\nYou have to ensure every source read correctly before system.Initialize().. I implemented such \"@\" fashion to generator, but I don't like it. \nThe interface like this:\nentity.@base.value = \"odd\";\nor add \"_\"\nentity._base.value = \"odd2\";. I never used @ for field name, not sure any potential problem with it.\nSo, here is implementation which adding \"_\" in front of keyword.\nUsage:\n```Csharp\npublic sealed class BaseComponent : IComponent\n{\n    public string value;\n}\n...\n\nvar e = contexts.game.CreateEntity();\n\ne.AddBase(\"Add\");\ne.ReplaceBase(\"For ReactiveSystem\");\ne.RemoveBase();\n\ne._base.value = \"For critical code\";\n\n```\nThis DLL based on Entitas 1.7, tested in Roslyn version\nEntitas.CodeGeneration.Plugins.dll.zip\n. if you like to try the @ version\nEntitas.CodeGeneration.Plugins_at.dll.zip\n. which version? \"_\" or \"@\" ?. PR submitted using \"@\" version. you have to setup a link for this gameObject first:\ngameObject.Link(entity, context);\ntake a look this sample project:\nhttps://github.com/sschmid/Match-One/blob/master/Assets/Scripts/Views/View.cs. @foreverpains are you going to copy the the generated codes to other project? If yes, stop.\nJust copy the component classes you created to the other project, and then hit the generate button.\nThe necessary classes will be generated, which including the class your post.\nThe namespace for generated codes is meaningless.. Use 1...2... for the folder only, not for the systems. create a folder named _1_KillFeature, and put KillEntitySystem in it, that KillEntitySystem  will run first than DestroyEntitySystem.\nI think we do not have to worried so much about creating Feature class because it is generated. . about idea of the naming 1...2..., it is come from Unit Test. Update:\nadded DeleteEmptyFolderInAllFeaturesPreprocessor and error message if there is same folder name in AllFeatures. To reducing such boilerplate codes, my solution is write custom code generator.\nThe code generator sample already existed in Entitas:\nhttps://github.com/sschmid/Entitas-CSharp/tree/develop/Addons/Entitas.CodeGeneration.Plugins/Entitas.CodeGeneration.Plugins. Simon answered here : https://github.com/sschmid/Entitas-CSharp/issues/706. That very good for Github version.\nHow about the difference using client gen ? . Thanks for suggestion!\nPlease check the updated file.. @jrmacgill \nWhich version of Entitas you are using?\nWould you mind show your Preferences file?. updated the install guide and DLLs, please check again.. Currently, I have different usage for Sharable case. I will update usage section later because it related to my another generator.\nOf course, the Replace() style is doable. I may create a parameter to define what function can be generated depending on different needs.. updated:\n- added EntitasEnumAffix\n- usage guide. @VincentSai If the ListenerComponent exist in other context,  how do you handle the case of EventTarget.Self ? . put folder Jenny outside of  Unity's folder Assets.\n\nand check out this video for setup\nhttps://www.youtube.com/watch?v=L-18XRTarOM. Of course, you can use Jenny.exe auto-import -s instead of the CMD in that video. make sure no file of Jenny inside Assets folder, that cause error.\nI can see : \n...Documents/WorkSpace/Jenny/TestJenny/TestJenny/Assets/Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll type:SqlStatement member:(null). nice. The bad boy is ToString() in Update().\nHere is my solution:\nIn class EntityBehaviour, use delegate OnComponentAdded and OnComponentRemoved instead of Update(). That will greatly reduce the calling of ToString(). After change, I can run 3000+ entities which contain 10 components smoothly in my test scene.\nSource :\nhttps://gist.github.com/roygear/f7eae9fe2f13792f0468657aa4428c31\nCompiled dll based on 1.8.2\nEntitas.VisualDebugging.Unity.dll.zip\n. In fact, the full component names cannot displayed on vertical layout. There are 10 components on the left, but displayed 3 to 4 maximum usually. Now, I have the right one. \n\n. Simon replied about EntitasPure here : https://github.com/sschmid/Entitas-CSharp/issues/706\nI suggest information about obsolete should be added to that repository to avoid confusion from new user.\nWe can run the standalone application via IDE. The process shown in this video : https://www.youtube.com/watch?v=L-18XRTarOM, jump to about 5min. The content in listener function usually has more than one line code. It is nice to have a distinct function for it. \nThe one of advantages of IListener approach is that correct function name and parameters can be filled by IDE automatically.\nAnother personal reason I like to keep using IListener is that I pick the Blueprint up and make it support IListener. \n. If it is a stable and beneficial functionality, I agree we should use it. . You have to use correct C# extension method syntax:\nCSharp\npublic static partial class CoreEntityExtention\n{\n    public static void ReplaceBattleScene(this CoreContext context, string stage_id)\n    {\n        if (context.hasBattleScene){\n            context.ReplaceBattleScene(\n                stage_id, \n                context.battleScene.cr_gameobj, \n                context.battleScene.bg_gameobj,\n                context.battleScene.ui_gameobj, \n                context.battleScene.if_win);\n        }\n        else{\n            context.ReplaceBattleScene(stage_id, null, null, null, 0);\n        }\n    }\n}. ",
    "jonathanpmast": "As someone that is just coming to this project, and generally has a pretty sound understanding of the ECS architecture.  This issue is extremely relevant to me :)\nTrying to follow the youtube tutorials and the API has changed enough that I've had to cross reference the sample projects linked in this thread to make progress.\nNot impossible, and given a community supported lib I guess we kind of expect it, but I think @JamesMcMahon feedback is super relevant here.. It just goes counter to the concept of features as has been stated.  I see both sides to this argument, my primary concern is the order of execution for systems is implicitly determined by the order they are added to the supervisor, rather than configuration. \nThis means that if I have a lot of systems--which any non-trivial simulation will have dozens or more--then in having to basically add all of the systems to a collection in a serial process one after another. \nI suppose as has been said, one way to do this is to just add them all to a dictionary, sort them, and add them based on sort order at initialization time. . > I heavily use parent / child systems which helps a lot to manage these many systems.\n\ud83e\udd14 what's a parent system?. I see.  So really in this case the Feature is the Parent System and it contains a bunch of Child systems.\nThis is where my concern comes in around execution priority as if I break Systems down logically like this I have to crawl through all the Parents/Features to determine in what order the execute.\nObviously ways to fix this outside of Entitas, I've just seen the priority method leveraged in other ECS so was curious if/why not in Entitas.\nClosing now \ud83d\ude80 . ",
    "heynemann": "I did my own version of this a little differently.\nIn order to use LateUpdate or FixedUpdate, all my systems must do is implement IFixedUpdateSystem or ILateUpdateSystem. \nOne drawback is that they still must implement IExecuteSystem (even if I don't need anything to be executed in update - meaning empty Execute method).\nAnother drawback is that I can't use ReactiveSystems if I need either Late or Fixed Updates. I can live with that, though.\nIf anyone cleverer than me thinks of a better way of doing this, I'm all for contributing back. Pardon me for the code below, c# is not my most fluent language.\n```c#\nusing Entitas;\nusing System.Collections.Generic;\nusing System;\npublic interface IFixedUpdateSystem\n{\n    void FixedUpdate();\n}\npublic interface ILateUpdateSystem\n{\n    void LateUpdate();\n}\npublic static class UnityEntitasExtensions\n{\n    public static void FixedUpdate(List executeSystems)\n    {\n        foreach (var system in executeSystems)\n        {\n            var s = system as UnityFeature;\n            if (s != null)\n            {\n                s.FixedUpdate();\n                continue;\n            }\n        var f = system as IFixedUpdateSystem;\n        if (f != null)\n        {\n            f.FixedUpdate();\n        }\n    }\n}\n\npublic static void LateUpdate(List<IExecuteSystem> executeSystems)\n{\n    foreach (var system in executeSystems)\n    {\n        var s = system as UnityFeature;\n        if (s != null)\n        {\n            s.LateUpdate();\n            continue;\n        }\n\n        var f = system as ILateUpdateSystem;\n        if (f != null)\n        {\n            f.LateUpdate();\n        }\n    }\n}\n\n}\npublic class UnitySystems : Systems\n{\n    public void FixedUpdate()\n    {\n        UnityEntitasExtensions.FixedUpdate(_executeSystems);\n    }\npublic void LateUpdate()\n{\n    UnityEntitasExtensions.LateUpdate(_executeSystems);\n}\n\n}\npublic class UnityFeature : Feature {\n    public UnityFeature(string name) : base(name) {\n    }\npublic UnityFeature() {\n}\n\npublic void FixedUpdate()\n{\n    UnityEntitasExtensions.FixedUpdate(_executeSystems);\n}\n\npublic void LateUpdate()\n{\n    UnityEntitasExtensions.LateUpdate(_executeSystems);\n}\n\n}\n```\nA sample system that implements IFixedUpdate:\n```c#\nusing Entitas;\nusing System.Linq;\nnamespace Sample {\n    public class RenderPositionSystem : IInitializeSystem, IExecuteSystem, IFixedUpdateSystem\n    {\n        readonly GameContext _context;\n        IGroup _movables;\n    public RenderPositionSystem(Contexts contexts) {\n        _context = contexts.game;\n    }\n\n    public void Initialize()\n    {\n        _movables = _context.GetGroup(GameMatcher.Position);\n    }\n\n    private GameEntity[] Filter(GameEntity[] entities)\n    {\n        return entities.Where(e => e.hasView).ToArray();\n    }\n\n    public void FixedUpdate()\n    {\n        var entities = Filter(_movables.GetEntities());\n        foreach (var e in entities)\n        {\n            var go = e.view.gameObject;\n            go.transform.position = e.position.value;\n        }\n    }\n\n    public void Execute()\n    {\n        //As I said, I have to leave this empty.\n    }\n}\n\n}\n```\nWhen I create my features it's pretty much the same:\nc#\nnamespace Sample {\n    public class GameplaySystems : UnityFeature {\n        public GameplaySystems(Contexts contexts) : base(\"Gameplay Systems\") {\n                Add(new AddViewSystem(contexts));\n            Add(new RenderPositionSystem(contexts));\n            Add(new RenderDirectionSystem(contexts));\n        }\n    }\n}. @sschmid any thoughts on how to proceed here? I understand you said I could have a completely different set of Systems for the specific purpose of Fixed and Late Updates, but it strikes me as odd that I divide my Systems by when they are called, instead of by cohesion.\nImagine a scenario where my system must rotate the character. I must rotate the main model in the FixedUpdate method, but the character's spine in the LateUpdate method (after animation has already finished). This is just an example.\nWhat do you think?. Not to put pressure here @sschmid but do you see this being implemented soon? I can try to get a PR done if you think it's useful. I can try to start with what you described above.. Also, do you have any instructions on how to develop? I'm trying to run the tests in VS 2017 and it can't find any tests... (sorry for the newbie questions). I managed to start a PR. I haven't created it as a PR because I'm fairly certain I'm still missing stuff.\nhttps://github.com/heynemann/Entitas-CSharp/tree/feature/%23434-Unity-Events\nCan you guys help me in the right direction? I can now run all the tests.\nWhat I have so far:\n LateExecute in the Systems (with tests);\n FixedExecute in the Systems (with tests).\nI'm still missing, that I know of:\n\nIntegrating with ReactiveSystems;\nUnity Editor integration (to show ILateExecuteSystems and IFixedExecuteSystems).\n\nAny help would be very appreciated. Sorry if this is not what you meant.. Btw, sorry for the identation diffs. I just managed to get the project to compile and its 2am. I will configure MonoDevelop properly later. And will squash everything to 1 commit in the end, before the PR.. @sschmid has this been fixed in the framework? Why was this closed?. Thanks!. Hmmm I hope it goes forward.. I should close this then.... ",
    "christianvoigt": "Hi @sschmid,\nmy original issue was not so much about how to implement this (as I had already found a solution that works for me). It was more about how to add VisualDebugging support for my UnitySystems class. I could somehow not use DebugSystems for my own class  and did not want to reinvent the wheel. To be honest I don't remember the exact issue right now, but I will look into this again if I find some time, and describe the issues I had in more detail. . Nevermind, I just realized that this won't work for me either, as my serializer is also based on a custom code generator that would run before the partial classes are created. I think I have to use the Event attribute to automatically generate a list of component names that should not be serialized.. I think a good solution would be to add new listeners to the start of the list and iterate over them in reverse order. That way you still call listeners in the order they were added, but you do not have to make a copy of the listener list every time the event is emitted (which could happen every frame). The addListener methods would become slightly slower, but normally they are not called every frame.. I had the same problem on my Mac with Mono 5.16. Downgrading to 5.14 worked for me as well.. I originally had used homebrew to install mono, but when I installed Visual Studio for Mac it installed its own version automatically. As far as I remember using VS with 5.14 created huge cpu spikes and I was really glad when 5.16 arrived and fixed it for me. While I prefer working in VS Code the Unity debugging plugin is not working for me, so I had to use Visual Studio for that. . ",
    "joshbayley": "You can run entitas on a backend server and it could definately be used to simulate the world, entitas is not very implementation specific, its not going to do much of the work for you unfortunately. Also entitas dosn't support multithreading directly and load management is very important for an MMO so you would likely need to devise some way of utlizing threads with it.\nYou can definately utilize entitas for you're client though :)\nThe answer is yes you can use it, but it's not going to make it an easy task.. ",
    "moto2002": "ok,thanks very much. ",
    "chuckbergeron": "Rad, thanks for this! If you're on Mac OSX here's some install instructions: \nRight-click your Unity.app and click Show Package Contents and copy / move the files to: Contents/Resources/ScriptTemplates/*. ",
    "gd2020": "https://github.com/gd2020/EntitasTemplates\nI made it as a plugin so that it makes us possible to use this without setup.. Can I see your codes using TriggerOnEventMatcherExtension::AddedOrRemoved??. ",
    "ironicnet": "Nowadays i'm replacing:\nvar postConstructors = System.Linq.Enumerable.Where(\n            GetType().GetMethods(),\n            method => System.Attribute.IsDefined(method, typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))\n        );\nWith\n``` \nvar postConstructors = System.Linq.Enumerable.Where(\n                GetType().GetRuntimeMethods(),\n                method => method.GetCustomAttribute(typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))!=null\n            );\n``\nIt requires anusing System.Reflection` to use the GetRuntimeMethods extension\nI really don't know if this is the best way to do it. but it seems to be working. Sorry, i just missed the notifications of your last comment. \nI didn't test it with unity. I can try it out if required. ",
    "FiveP": "Ahhhh yes, of course, I didn't think of having entities as just pure intermediate data containers, so obvious and simple :]. I will give it a shot. I did elaborate a bit on the second solution but found exactly the same problem, it really isn't a good solution. Thank you a lot for the illustrative explanation and again, good job on Entitas!. ",
    "colourstar": "@FNGgames Thanks a lot,i have some thinking about this issue,i dont know if you read this git\nhttps://github.com/mzaks/Entitas-ReactiveUI,which is same with your advise : component includes interfaces,which implement operations in detail.. ",
    "RichPruitt": "Yeah, I am having the same problem. I put systems in features grouped by functionality, but this makes priority very tricky sometimes. I have lots of systems and it is very hard to keep them in the right order.\nWould be nice if we could just ensure that all systems picked up every change. Probably will cause some unwanted side effects, but with a large number of systems ensuring system ordering is correct is very painful.\nThe priority on a system might be an easy alternative.\n. ",
    "OndrejNepozitek": "I've run into this problem recently, too. I am now experimenting with class attributes. I've divided all systems into phases (which is something like the priority you were talking about - but with names instead of numbers). The usage is something like:\nC#\n[SystemPhase(Phase.SomePhase)]\npublic class ASystem : ReactiveSystem<GameEntity>\nThis helps me to prevent order collisions by defining logical groups with exact order. But this is sometimes not enough. So I have another layer of control with something like this:\nC#\n[ExecutesAfter(typeof(AnotherSystem), typeof(YetAnotherSystem))]\npublic class ASystem : ReactiveSystem<GameEntity>\nIt makes a graph of dependencies and than adds the systems to each logical group with corresponding order (if there are no cycles).\nI don't know if it solves all my problems but it looks like it could save me some time and make the systems not that fragile.. Well, I find it easier to just declare that a system must run after some other systems rather than managing priorities with numbers.\nWhat is the benefit of managing priorities? It seems to me that it is not really different from what I was doing earlier - having a list of systems in my GameController and thinking about what system goes first.\nI like the dependency diagram because some systems are completely independent so I do not have to specify any order. But then there are some system that must be enabled after like 3 other systems so I just write it as [ExecutesAfter(..)] and it finds the order itself. I just have to specify the dependencies and don't have to worry about the bigger picture.\nPS: I have the \"phases\" mainly because my game has also a multiplayer and I need to maintain some invariants regarding systems order. It could work without them - just with dependecies.. ",
    "gameunite": "Hello! Wow that is a really quick response.\nSo I just tried not using the sharedInstance and just creating my own object and boom everything works perfectly now. No more weird packets and movement going somewhere.\nWow I really missed that line! I didn't noticed that public Contexts() I thought it was private like in most Singleton. I guess I have too much coding today.\nThank you. . Yes. It's coming from the system. Here's the list of exceptions I got:\n\nThe collection has been modified. The enumeration operation may not be executed. '\nEntitas.EntityIsAlreadyRetainedByOwnerException: ''ReactiveSystem(OutgoingNetworkSystem)' cannot retain Entity_2(*6)(Name, OutgoingNetwork)!\nEntity is already retained by this object!\nThe entity must be released by this object first.'\nSystem.NullReferenceException. Object reference not set to an instance of an object.\nError related to namecomponent does not exist.\n\nHere's the code. I stripped most of the networking and farseer physics stuffs which I think is not related here.\n```csharp\n        private Systems CreateSystems(Contexts contexts)\n        {\n            return new Systems()\n                .Add(new IncomingNetworkSystem(contexts))\n                .Add(new OutgoingNetworkSystem(contexts))\n                .Add(new MovementSystem(contexts))\n                .Add(new PhysicsSystem(contexts, world, gameTimer))\n                .Add(new MultiDestroySystem(contexts));\n        }\npublic sealed class IncomingNetworkSystem : ReactiveSystem\n{\n    readonly GameContext gameContext;\n    readonly InputContext inputContext;\npublic IncomingNetworkSystem(Contexts contexts) : base(contexts.input)\n{\n    gameContext = contexts.game;\n    inputContext = contexts.input;\n}\n\nprotected override bool Filter(InputEntity entity)\n{\n    return entity.isEnabled && !entity.isDestroyed;\n}\n\nprotected override ICollector<InputEntity> GetTrigger(IContext<InputEntity> context)\n{\n    return context.CreateCollector(InputMatcher.IncomingNetwork.Added());\n}\n\nprotected override void Execute(List<InputEntity> entities)\n{\n    foreach (InputEntity inputEntity in entities.ToArray())\n    {\n        GameEntity gameEntity = gameContext.GetEntitiesWithName(inputEntity.name.value).SingleEntity();\n\n        if (inputEntity.incomingNetwork.eventCode == (int) ClientEventCode.MovePosition)\n        {\n            gameEntity.ReplaceImpulse(inputEntity.impulse.value);\n        }\n        else if(inputEntity.incomingNetwork.eventCode == (int)ClientEventCode.AttackEnemy)\n        {\n            gameEntity.isAttack = true;\n        }\n\n        inputEntity.isDestroyed = true;\n    }\n}\n\n}\npublic sealed class OutgoingNetworkSystem : ReactiveSystem\n{\n    GameContext gameContext;\n    InputContext inputContext;\npublic OutgoingNetworkSystem(Contexts contexts) : base(contexts.input)\n{\n    gameContext = contexts.game;\n    inputContext = contexts.input;\n}\n\nprotected override bool Filter(InputEntity entity)\n{\n    return entity.isEnabled && !entity.isDestroyed;\n}\n\nprotected override ICollector<InputEntity> GetTrigger(IContext<InputEntity> context)\n{\n    return context.CreateCollector(InputMatcher.OutgoingNetwork.Added());\n}\n\nprotected override void Execute(List<InputEntity> entities)\n{\n    foreach (InputEntity inputEntity in entities.ToArray())\n    {\n        HashSet<GameEntity> gameEntities = gameContext.GetEntitiesWithName(inputEntity.name.value);\n\n        if(gameEntities.Count == 1)\n        {\n            GameEntity gameEntity = gameEntities.SingleEntity();\n            byte eventCode = (byte)inputEntity.outgoingNetwork.eventCode;\n\n            if (eventCode == (byte)ServerEventCode.UPDATE_PLAYER)\n            {\n                //Build data\n            }\n            else if(eventCode == (byte)ServerEventCode.DEBUG_VIEW_CIRCLE)\n            {\n                //Build data\n            }\n\n            //Send to client\n\n            inputEntity.isDestroyed = true;\n        }\n    }\n}\n\n}\nclass PhysicsSystem : IExecuteSystem\n{\n    const float maxSpeed = 1.0f;\nreadonly GameContext gameContext;\nreadonly InputContext inputContext;\nreadonly IGroup<GameEntity> rigidbodies;\nreadonly World world;\n\npublic PhysicsSystem(Contexts contexts, World world, GameTimer gameTimer)\n{\n    this.world = world;\n    this.gameTimer = gameTimer;\n    gameContext = contexts.game;\n    inputContext = contexts.input;\n    rigidbodies = contexts.game.GetGroup(GameMatcher.Rigidbody);\n}\n\npublic void Execute()\n{\n    foreach (GameEntity rigidbody in rigidbodies.GetEntities())\n    {\n        if(rigidbody.isEnabled)\n        {\n            Body body = rigidbody.rigidbody.body;\n            float speed = body.LinearVelocity.Length();\n\n            if (speed > maxSpeed)\n            {\n                body.LinearVelocity = body.LinearVelocity / speed * maxSpeed;\n            }\n            rigidbody.ReplacePosition(new Vector3(body.Position.X, 0, body.Position.Y));\n\n            InputEntity inputEntity = inputContext.CreateEntity();\n            inputEntity.AddOutgoingNetwork((byte)ServerEventCode.UPDATE_PLAYER);\n            inputEntity.AddName(rigidbody.name.value);\n        }\n    }\n}\n\n}\npublic sealed class MovementSystem : ReactiveSystem\n{\n    public GameContext gameContext;\npublic MovementSystem(Contexts contexts) : base(contexts.game)\n{\n    gameContext = contexts.game;\n}\n\nprotected override bool Filter(GameEntity entity)\n{\n    return entity.isEnabled && !entity.isDestroyed;\n}\n\nprotected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n{\n    return context.CreateCollector(GameMatcher.Impulse);\n}\n\nprotected override void Execute(List<GameEntity> entities)\n{\n    foreach(GameEntity gameEntity in entities)\n    {\n        Body body = gameEntity.rigidbody.body;\n        body.Rotation = (float)Math.Atan2(gameEntity.impulse.value.X, gameEntity.impulse.value.Z);\n        body.ApplyLinearImpulse(new Vector2(ConvertUnits.ToSimUnits(gameEntity.impulse.value.X), ConvertUnits.ToSimUnits(gameEntity.impulse.value.Z)));\n        gameEntity.ReplaceRotation(body.Rotation);\n    }\n}\n\n}\npublic class MultiDestroySystem : MultiReactiveSystem\n{\n    public MultiDestroySystem(Contexts contexts) : base(contexts)\n    {\n}\n\nprotected override ICollector[] GetTrigger(Contexts contexts)\n{\n    return new ICollector[] {\n        contexts.game.CreateCollector(GameMatcher.Destroyed.Added()),\n        contexts.input.CreateCollector(InputMatcher.Destroyed.Added())\n    };\n}\n\nprotected override bool Filter(IDestroyEntity entity)\n{\n    return entity.isDestroyed && entity.isEnabled;\n}\n\nprotected override void Execute(List<IDestroyEntity> entities)\n{\n    foreach (var entity in entities.ToArray())\n    {\n        entity.Destroy();\n    }\n}\n\n}\n```\nIt happens more often when we have like more than 2 players.\nThank you,\ngameunite. Nope. I only called the entity.Destroy inside the MultiDestroySystem. I'm really confused on what's going on. It happens randomly. I'm thinking on maybe it's because of the reactive system so I'm planning to just use executesystem maybe or worst no use entitas at all.. ",
    "nwben": "Thx for your answer. ",
    "isbdnt": "My solution for this issue.\n```csharp\nif (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\npublic class Processor : Feature\n{\n    Dictionary<string, int> _executeSystemInfoIndices = new Dictionary<string, int>();\n    Dictionary<string, int> _initializeSystemInfoIndices = new Dictionary<string, int>();\n\n    public Processor this[string name]\n    {\n        get\n        {\n            return (Processor)executeSystemInfos[_executeSystemInfoIndices[name]].system;\n        }\n    }\n    public override Systems Add(ISystem system)\n    {\n        base.Add(system);\n        if (system is IExecuteSystem)\n        {\n            _executeSystemInfoIndices[system.GetType().Name] = _executeSystemInfoIndices.Count;\n        }\n        if (system is IInitializeSystem)\n        {\n            _initializeSystemInfoIndices[system.GetType().Name] = _initializeSystemInfoIndices.Count;\n        }\n        return this;\n    }\n    public Processor ActivateExecuteSystem(string name)\n    {\n        int index = _executeSystemInfoIndices[name];\n        var info = executeSystemInfos[index];\n        info.isActive = true;\n        (info.system as IInitializeSystem)?.Initialize();\n        return this;\n    }\n    public Processor DeactivateExecuteSystem(string name)\n    {\n        int index = _executeSystemInfoIndices[name];\n        var info = executeSystemInfos[index];\n        info.isActive = false;\n        (info.system as ITearDownSystem)?.TearDown();\n        return this;\n    }\n    public Processor ExecuteInitializeSystem(string name)\n    {\n        int index = _initializeSystemInfoIndices[name];\n        var info = initializeSystemInfos[index];\n        ((IInitializeSystem)info.system).Initialize();\n        return this;\n    }\n    public Processor(string name) : base(name)\n    {\n\n    }\n    public Processor()\n    {\n\n    }\n}\n\nelse\npublic class Processor : Feature\n{\n    Dictionary<string, int> _executeSystemIndices = new Dictionary<string, int>();\n    List<bool> _executeSystemActivities = new List<bool>();\n    Dictionary<string, int> _initializeSystemIndices = new Dictionary<string, int>();\n\n    public Processor this[string name]\n    {\n        get\n        {\n            return (Processor)_executeSystems[_executeSystemIndices[name]];\n        }\n    }\n    public override void Execute()\n    {\n        for (int i = 0; i < _executeSystems.Count; i++)\n        {\n            if (_executeSystemActivities[i])\n            {\n                _executeSystems[i].Execute();\n            }\n        }\n    }\n    public override Systems Add(ISystem system)\n    {\n        base.Add(system);\n        if (system is IExecuteSystem)\n        {\n            _executeSystemIndices[system.GetType().Name] = _executeSystemIndices.Count;\n            _executeSystemActivities.Add(true);\n        }\n        if (system is IInitializeSystem)\n        {\n            _initializeSystemIndices[system.GetType().Name] = _initializeSystemIndices.Count;\n        }\n        return this;\n    }\n    public Processor ActivateExecuteSystem(string name)\n    {\n        int index = _executeSystemIndices[name];\n        var system = _executeSystems[index];\n        _executeSystemActivities[index] = true;\n        (system as IInitializeSystem)?.Initialize();\n        return this;\n    }\n    public Processor DeactivateExecuteSystem(string name)\n    {\n        int index = _executeSystemIndices[name];\n        var system = _executeSystems[index];\n        _executeSystemActivities[index] = false;\n        (system as ITearDownSystem)?.TearDown();\n        return this;\n    }\n    public Processor ExecuteInitializeSystem(string name)\n    {\n        int index = _initializeSystemIndices[name];\n        var system = _initializeSystems[index];\n        system.Initialize();\n        return this;\n    }\n    public Processor(string name) : base(name)\n    {\n\n    }\n    public Processor()\n    {\n\n    }\n}\n\nendif\n. Then I can activate/deactivate some systems easily by inspector or UI in game. Below is the inspector code snippet.csharp\n                bool isGod;\n                if (asset.BoolPropertyField(\"isGod\", out isGod))//return true if the PropertyField has changed.\n                {\n                    if (Application.isPlaying)\n                    {\n                        if (isGod)\n                        {\n                            Controller.processor\n                                .DeactivateExecuteSystem(\"MainFighterWalkSystem\")\n                                .DeactivateExecuteSystem(\"ThirdPersonCameraProcessor\");\n                            Controller.processor\n                                .ActivateExecuteSystem(\"CameraFlySystem\")\n                                .ActivateExecuteSystem(\"CameraWalkSystem\")\n                                .ActivateExecuteSystem(\"CameraLiftSystem\")\n                                .ActivateExecuteSystem(\"CameraFreeRotationSystem\");\n                        }\n                        else\n                        {\n                            Controller.processor\n                                .DeactivateExecuteSystem(\"CameraFlySystem\")\n                                .DeactivateExecuteSystem(\"CameraWalkSystem\")\n                                .DeactivateExecuteSystem(\"CameraLiftSystem\")\n                                .DeactivateExecuteSystem(\"CameraFreeRotationSystem\");\n                            Controller.processor\n                                .ActivateExecuteSystem(\"MainFighterWalkSystem\")\n                                .ActivateExecuteSystem(\"ThirdPersonCameraProcessor\");\n                        }\n                    }\n                }\n                bool autolock;\n                if (asset.BoolPropertyField(\"cameraAutoLock\", out autolock))\n                {\n                    if (Application.isPlaying)\n                    {\n                        var processor = Controller.processor[\"ThirdPersonCameraProcessor\"];\n                        if (autolock)\n                        {\n                            processor\n                                .ActivateExecuteSystem(\"CameraAutoCheckSystem\")\n                                .ActivateExecuteSystem(\"CameraAutoLockSystem\");\n                        }\n                        else\n                        {\n                            processor\n                                .DeactivateExecuteSystem(\"CameraAutoCheckSystem\")\n                                .DeactivateExecuteSystem(\"CameraAutoLockSystem\");\n                        }\n                    }\n                }\n````\n\n. ",
    "adizhavo": "Hi, \nI agree with you, but there are cases when a system needs to change or trigger a behaviour of another system. Of course this can handled with components and reactive systems, but it may lead in having custom components just for this interaction, when it may be easier to just have a dependency. \nThis may lead also in features (group of systems) that are hard to read and hard to grasp the flow.\nFrom my perspective, its not essential but a nice to have (or not to have :D) possibility. It doesn\u2019t take away from the ECS architecture but can help make things simple in some cases.\nYes, there are DI frameworks out there, but as I said above, it can help in some cases where a DI framework can be an overkill.\nWhat do you think ?. @KumoKairo fair point, thank you for the clear explanation ;) \nI understand the usage of an ECS so i guess what you're trying to say is that having a feature in a library that goes against its usage simply defeats its own purpose. \nI agree, so there is no need for this addition.. Wanted to share the architecture we used in one of our game which is pretty similar to the diagram that Simon shared with us.\nAs an \u2018entry\u2019 point we have the GestureSystem which listens inputs from Unity and translates them meaningful gestures like TouchDown, TouchUp, DragStart, Drag, DragEnd, TouchHold, Pinch etc .. and provides additional data like touch position, hold time etc ..\nAlso any UI input happens at this state.\nThen we have \u2018Controllers\u2019 that listens to the gestures through an interface or events and they basically validate the inputs based on the state of the game and construct commands. Rarely controllers have a dependency to another controller to coordinate validation.\nCommands of different type are sent to a CommandSystem that basically executes them. The command system contains blocks of command executors (one for each type of command) that tries to add entities with specific components to the game (the entity construction happens through a factory service)\nThere might some few simple validation happening here, but most of the commands don\u2019t care about the state of the game.\nDestruction/cleanup of game entities also happens here by calling specific commands.\nWhen entities are created they enter the \u2018Entitas\u2019 loop where Systems only operate on entities with certain components and there is no validation.\nThere are also \u2018Controllers\u2019 that look at the game on each update and change the entities states by executing commands upon them (this is how AI/State machine is handled)\nThe view is mainly handled by \u2018Controllers\u2019 and a Data-binding service but there are cases where view listens to systems.\nServices and utilities are injected with a DI framework to controllers/commands/systems.\nI think that this is very close to what Simon shared and can be entirely in Entitas and I can say that this has scaled pretty good so far.. ",
    "raincole": "I agree with @KumoKairo . It's an open source project after all, and while I'm willing to pay dozens of dollars to support it, I wouldn't like to see one of the core features become premium-only. Selling addons and books like \"Best Entitas Practices\" will be better options. Maybe a book about general ECS with examples written in Entitas? I bet there are thousands of programmers who are struggling getting ECS done right out there!. This bug still happens to me in Entitas 1.4.1. Could you reopen this? The workaround works tho.. No, but I created a fresh new project and imported Entitas, and then the bug didn't happen there. Guess the problem is on my own side.. Another useful customization that would help is to allow us to not show entities with specific components in visual debugging. For example I create and clean up some \"temporary\" entities every frame. It's not a big deal thank to Entitas' pooling. The problem is, visual debugging creates a GameObject for each of them and it completely ruins the performance. Disabling visual debugging fixes that, but it would be better if we could only turn it off for these entities.. I fully understand that Roslyn is not open-source cause it's more like icing on the cake, but I couldn't say so for Jenny. Without Jenny we can't run code generator and it kills an essential feature of Entitas.. > b) Don't use a static class and pass the service via ctor arg into the system\nFor option b), one can use dependency injection library like Zenject to make things much easier. Zenject is probably too bulky to be a dependency of Entitas, but the users can choose to use them together without problems. Or Entitas can implement its own lightweight DI library. But IMO Zenject is popular and stable enough and we can just let users decide and not reinvent wheels.. Very helpful video! But I have a small suggestion: talk one topic per video. Git and Unit Test are pretty irrelevant ideas, and just like the principle of Unit Test, it's better to do one thing at a time. (And it's good for SEO too). @IsaiahKelly Yeah sorry I meant unrelated. I guess it's fine for us who follow Entitas news constantly, but if someone searches \"how to do unit test with entitas\" etc I doubt they would like to see a Git tutorial first. Again it's just a suggestion.. Got it. For future reference, this is how I implemented it:\nhttps://gist.github.com/raincole/5943d5c68e045e785a742c5f85235cce\nIt's kinda ugly because I avoided changing current behavior. But hey it works.. ",
    "CCludts": "2017.1.1f1, but moving to 2017.2 very soon. similar issue here, using windows 10 pro 64bit.\nAlso a bit disappointed on it not just working out of the box. \n(maybe an entitas.exe upgrade_properties_for_roslyn )?\nUnused key: Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold\nUnused key: Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath\nUnused key: Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\nUnused key: Entitas.CodeGeneration.Plugins.Assemblies\nAvailable: Entitas.CodeGeneration.Plugins.ComponentDataProvider\nAvailable: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.CSharp.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n    - Could not resolve: Microsoft.CodeAnalysis.VisualBasic.Features.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.Build.Tasks.Core.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.Desktop.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\n    - Could not resolve: Microsoft.CodeAnalysis.Workspaces.resources.dll\nObject reference not set to an instance of an object.\n```\nEntitas.CodeGeneration.CodeGenerator.SearchPaths = Assets/Libraries/Entitas, \\\n                                                   Assets/Libraries/Entitas/Editor, \\\n                                                   Assets/Plugins/Entitas, \\\n                                                   Assets/Plugins/Entitas/Editor, \\\n                                                   CodeGenerator/Plugins/Roslyn, \\\n                                                   /Applications/Unity/Unity.app/Contents/Managed, \\\n                                                   /Applications/Unity/Unity.app/Contents/Mono/lib/mono/unity, \\\n                                                   /Applications/Unity/Unity.app/Contents/UnityExtensions/Unity/GUISystem\nEntitas.CodeGeneration.CodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                                               Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                                               Entitas.CodeGeneration.Roslyn\nEntitas.CodeGeneration.CodeGenerator.DataProviders = Entitas.CodeGeneration.Roslyn.ComponentDataProvider, \\\n                                                     Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                                                     Entitas.CodeGeneration.Roslyn.EntityIndexDataProvider\nEntitas.CodeGeneration.CodeGenerator.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                                                      Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                                                      Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                                                      Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nEntitas.CodeGeneration.CodeGenerator.PostProcessors = Entitas.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                                                      Entitas.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nEntitas.CodeGeneration.Plugins.TargetDirectory = Assets/Sources/Generated\nEntitas.CodeGeneration.Plugins.ProjectPath = MyProject.csproj\n```\n~~Might it have to do with the Entitas folder being in Assets/Plugins folder instead of Assets/Libraries ?~~\nhappens regardless of the folder. I will test it out and let you know once the new CodeGenerator is on the assetstore.. update for future reference: removing all files and plugging in the new codegenerator fixed all the issues. I'm going to guess that reloading would be fixed the initial issue.. @KumoKairo thanks for the response. It's seems to more than just that though, it seems to also report information about the components.\nIt's unsetteling to me that my (potentially very sensitive) data is sent to some server without notifying/asking for permission, and the source-code is not public information. \n@sschmid would it be possible to have an option to disable this?. @FNGgames Indeed, this could be supported without codegeneration, but that involves increasing the complexity by a large amount. \nHaving read-only flags is by far the easiest way of implementing this, and the flags just get updates when you replace the component. \nYes this will create more components, but it's by entitas' design that you can only react to component, not component values. I like this way of coding, it makes code simple. I would dislike this being implemented in any other way than through components.\nThat said, I'm glad that other people are also seeing the usecase for this :). Here's a possible updated implementation for Contexts.Reset(), which seems to work in a simple test.\n```\n        /// Resets the context (destroys all entities and\n        /// resets creationIndex back to 0).\n        public void Reset() {\n            foreach (var group in _groups.Values) {\n                group.RemoveAllEventHandlers();\n            }\n            foreach (var index in _entityIndices.Values) {\n                index.Deactivate(); // clears internally\n            }\n            DestroyAllEntities();\n            ResetCreationIndex();\n            foreach (var index in _entityIndices.Values) {\n                index.Activate();\n            }\n        OnEntityCreated = null;\n        OnEntityWillBeDestroyed = null;\n        OnEntityDestroyed = null;\n        OnGroupCreated = null;\n    }\n\n``. We have a rather large project, roughly 4000components. Most of the time goes into writing to disk unnescessarily, sinceCleanTargetDirectoryPostProcessordoes 1 write per file, and thenWriteToDiskPostProcessor` does another write for every file.\nThe performance gains come:\n- cleaning after generating, and only cleaning what is required.\n- only writing to the file if it changed\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing DesperateDevs.CodeGeneration;\nusing DesperateDevs.CodeGeneration.Plugins;\nusing DesperateDevs.Logging;\nusing DesperateDevs.Serialization;\nnamespace BestGenerator {\n    public class SmartWriteToFilePostProcessor : IPostProcessor, ICodeGenerationPlugin, IConfigurable {\n        public string name => \"SmartWriteToFilePostProcessor\";\n    public int priority => 100;\n\n    public bool runInDryMode => false;\n\n    public Dictionary<string, string> defaultProperties {\n        get {\n            return _targetDirectoryConfig.defaultProperties;\n        }\n    }\n\n    public void Configure(Preferences preferences) {\n        _targetDirectoryConfig.Configure(preferences);\n    }\n\n    public CodeGenFile[] PostProcess(CodeGenFile[] files) {\n        var fileNameLookup = new HashSet<string>(files.Select(getPath));\n\n        //-- clean files that no longer exist\n        Directory.CreateDirectory(_targetDirectoryConfig.targetDirectory);\n        foreach (var fileInfo in new DirectoryInfo(_targetDirectoryConfig.targetDirectory).GetFiles(\"*.cs\", SearchOption.AllDirectories)) {\n            if (!fileNameLookup.Contains(fileInfo.FullName)) {\n                try {\n                    File.Delete(fileInfo.FullName);\n                } catch {\n                    _logger.Error(\"Could not delete file \" + fileInfo);\n                }\n            }\n        }\n\n        //-- update new/changed files. only write if anything changed\n        foreach (var codeGenFile in files) {\n            string path = getPath(codeGenFile);\n            string directoryName = Path.GetDirectoryName(path);\n\n            Directory.CreateDirectory(directoryName);\n\n            if (!File.Exists(path)) {\n                File.WriteAllText(path, codeGenFile.fileContent);\n            } else {\n                int comparison = String.Compare(File.ReadAllText(path), codeGenFile.fileContent, StringComparison.Ordinal);\n                if (comparison != 0) {  // difference\n                    File.WriteAllText(path, codeGenFile.fileContent);\n                }\n            }\n        }\n        return files;\n    }\n\n    string getPath(CodeGenFile codeGenFile) {\n        return Path.GetFullPath(_targetDirectoryConfig.targetDirectory + Path.DirectorySeparatorChar.ToString() + codeGenFile.fileName);\n    }\n\n    private readonly Logger _logger = fabl.GetLogger(typeof(CleanTargetDirectoryPostProcessor));\n    private readonly TargetDirectoryConfig _targetDirectoryConfig = new TargetDirectoryConfig();\n}\n\n}\n``. I should note that the 10ish seconds that remain come almost exclusively from roslyn compiling the assembly. Random side-benefit worth mentioning: omnisharp-VSCode freaks out if a large amount of files are changed.\nIn practice this means you have to restart VSCode after generating with the old approach. WithSmartWriteToFilePostProcessor ` it works all nice. > That very good for Github version.\n\nHow about the difference using client gen ?\n\nWe didnt see a significant difference between client gen and gen. there's a small bug in the code I posted. I updated the comment\nint comparison = String.Compare(File.ReadAllText(path), codeGenFile.fileContent, StringComparison.OrdinalIgnoreCase);\nto \nint comparison = String.Compare(File.ReadAllText(path), codeGenFile.fileContent, StringComparison.Ordinal);. @sschmid nope. still using it exactly as posted :). Awesome! Happy to see members from the community sharing code \ud83d\udc4d \nSmall suggestion: in ChangeStateTo it might be cleaner to first remove all components before adding new components. This avoids issues when using groupevents such as OnEntityAdded.\nentity.isStateDefend = false;\n                entity.isStateAttack = true;. Out of curiosity, did anyone do some in-depth profiling to figure out what makes VD so heavy? A quick glance at the profiler seems to suggest ToString is the main culprit in our project (agreeing with @WeslomPo). Seems slightly strange, since ToString already has a cache built-in, and shouldnt be that expensive.\nThe way we 'fixed' things in our project is by disabling VD, and have a button to enable to at runtime. It's a mediocre fix though, it would be awesome if there's a low-level modification to make it more performant with large amounts of entities.\n. ",
    "Neikice": "2017.2.  I tried 0.46.3.  But it didn\u2019t work .I still had to Manually delete\n<TargetFrameworkProfile>Unity Subset v3.5 </TargetFrameworkProfile>\". @sschmid  yes, i did.\n```\nCodeGenerator.SearchPaths = CodeGenerator\\Plugins, \\\n                            CodeGenerator\\Plugins\\Entitas, \\\n                            CodeGenerator\\Plugins\\Entitas.Roslyn, \\\n                            CodeGenerator\\Plugins\\Jenny\nCodeGenerator.Plugins = Entitas.CodeGeneration.Plugins, \\\n                        Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                        DesperateDevs.CodeGeneration.Plugins, \\\n                        Entitas.Roslyn.CodeGeneration.Plugins\nCodeGenerator.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                              Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nCodeGenerator.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentEntityInterfaceGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ComponentsLookupGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                               Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                               Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                               Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nCodeGenerator.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                               DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nCodeGenerator.Server.Port = 3333\nCodeGenerator.Client.Host = localhost\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Town.csproj\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Sources\nCodeGenerator.PreProcessors = DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nCodeGenerator.CLI.Ignore.UnusedKeys = \n```. @sschmid sorry ,i I forgot to put the DesperateDevs.CodeGeneration.Plugins.dll  in the Entitas.Roslyn folder.\nIt works perfect now.\nThanks, Entitas 's getting better.. @sschmid \nGithub released doesn't contain Entitas.Roslyn plugin.\nAssetStore version doesn't update to 0.46.3.\nNext time, maybe you should remind us.\n\ud83d\ude04. \nHi, According to your suggestion, I got the information in the above picture\n. I have tried this ,yesterday.It is good in my laptop, but not on the desktop.\nI'll be waiting for your next  release.. fixed in 0.46.3.. ",
    "Rybachello": "2017.1.2. ",
    "ealeksandrov": "I don't have too much of Unity expertise but this sounds like a good time to get some.\nCount me in!. ",
    "Siccity": "Sign me up as well :). ",
    "Pelmog": "I'm in.\nOn 20 December 2017 at 11:36, Thor Brigsted notifications@github.com\nwrote:\n\nSign me up as well :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sschmid/Entitas-CSharp/issues/475#issuecomment-353040408,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAnI2jbqVIxA-4jgWtN2WwKVY8X3CqSCks5tCPEhgaJpZM4QPmXX\n.\n. Thank you for your outstanding work Simon! :)\n\nOn 25 November 2017 at 15:03, Simon Schmid notifications@github.com wrote:\n\nOh ok, I will take a look if the Unity preferences is trying to\nautomatically clean up the properties a little bit to motivated ;)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sschmid/Entitas-CSharp/issues/496#issuecomment-346945714,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAnI2sA3zKnI2LA1MpI7tbRj-yUjxHo8ks5s6CwqgaJpZM4QprSy\n.\n. You, my friend, are a steely eyed missile man.. \n",
    "Psythyst": "(@T2RKUS Account) Example repo (Contains tutorial): \nhttps://github.com/Psythyst/Entitas-Match-One \nPsythyst Unity Edition (Unitypackage): \nhttps://github.com/Psythyst/Entitas-Match-One/raw/develop/Assets/PsythystUnity-Entitas.unitypackage. Will update the other repos soon as well as begin to fully document Psythyst (even if no one but me uses it).. ",
    "masterkenny23": "Hi Kumo, apologies for resurrecting this thread.\nIn your research into a visual node system on top of , did you ever look at Bolt?\nIn particular, Bolt 2 looks very interesting with its realtime C# generation. Perhaps there's something here to compile down to the ECS in Entitas?\nI have not dug into Bolt in detail, but on the surface level, \"flow machine\" macros in Bolt can act in a visual way of building \"systems\" in Entitas' ECS. . ",
    "haoRchen": "Thanks Simon. Turning off the visual debugging does bring the framerate to about 60.  I'll have a go profiling to see whats causing it. . \nDeleted the previous when I realized it included visual debugging haha. \n. thats true. Since visual debugging thousands of entities can bottleneck the framerate, does entitas have a way for someone to pick which entities to visual debug? . ",
    "JavadocMD": "As the founder of Ornithopter Games, we'd be happy to be on that list. Buff Mountain (iOS/Android) was crafted with Entitas at the heart of its game systems and I can testify to all of the benefits you listed. Thanks for the great framework!. ",
    "darbotron": "Thanks Isiah, yeah I totally watched the unite videos already.\nThe questions I have aren't inherently limited by knowing what Unity's recemtly announced experimental ECS does...\nMy questions without any reference to Unity's ECS are in essence:\n1) can entitas run on a thread other than the main thread, & if not is it in theory capable of doing so?\n2) is there currently any way to control the memory layout of the components so that they're in contiguous allocations rather than just heap allocated wherever the new operator puts them?\nCheers,\nAlex. cool, thanks :). Thanks for getting back to me - I'd really like to say I'm not trying to make it a competition! I was just wondering whether it would be worth waiting for the Unity ECS.\nI was planning to implement an ECS using structs which is how I found Entitas in the first place (always good to avoid reinventing the wheel, right?).\nWhen you say Entitas has similar performance to the struct implementation I'd be interested to know how close the performance was & if you have any thoughts on why the performance was so close? \nI would have expected the contiguous memory you'd theoretically get from the struct approach would have been a big win from a cache PoV.. ",
    "fayte0618": "i read it just now. Good stuff. Wish he can finish it :/ would love also other testimonies or learnings from other people who finished a project using ecs and what are the common pitfalls, tips and patterns etc.. tried removing the component generator, now errors are invalid arguments. Also for .csproj this is what i saw\n\n. It's ok now. I changed runtime to .NET 4.6 then did a fresh setup and it works. The only problem i notice is whenever i regenerate components it displays can't delete Assembly.dll error and compile erros appear. But, if i close and reopen Unity they disappear. I think it might have something do to do with the generator not allowing Assembly.dll to be deleted, since it deletes when I close generator.\nAlso, when i remove fields to components and regenerate I have compile errors. But, I found a workaround that when I deleted the generated component files and regen, compile errors disappear.. I just want to make sure if I understand it correctly. This would mean I have an Input, Command and Game context version of the components? Then, I have an InputSystem to filter the Input entity which creates a Command Entity, then have a CommandSystem to operate on the Command entity which it applies to the Game entity?. ^already fixed! Thanks I updated all my EventType.AddedOrRemoved to use the Added or Removed only versions. dont let the triggerComponent have a direct reference to the unity trigger, but let it store data like a boolean to know it is triggered. Then, have a monobehaviour view that holds the collider AttackTrigger, and when it is triggered using the Mono methods (Ex. OnTriggerEnter). Then have the view create an input Entity or have it change the trigger data in your TriggerComponent and do your logic in your systems, then update your view again using EventListeners. ",
    "Synean": "Thank you :-). ",
    "owengalenjones": "Same issue here.. @sschmid yes sorry, this is within a system, I updated the code above to show where the dragEntityGroup is being instantiated and how the behavior is occuring within the System's Execute method.. @sschmid ok, I didn't think about Entitas needing to manage components, I believe I had copied this approach from one of the many example projects.  Let me try extracting ScreenPointComponent to a separate interface so I'm no longer instantiating Components.\nI'll add the Filter and Trigger as well.. @sschmid followup, I think I know what's happening but it raises another question.\nIn the System I call:\nc#\nif (inputHandler.IsDrag(\n  dragEntity.dragSelectionMouseButtonDown.screenPoint,\n  mouseEventEntity.screenPoint\n)) {\n  inputHandler.HandleDrag(dragEntity, mouseEventEntity);   \n}\nwhich compares the distances between the screenPoint (Vector3) where dragging started and where the mouseEventEntity.screenPoint (current mouse position) is.  Basically it seems like the Add*Component functions set components equal by reference rather than value?\nc#\ndragEntity.AddDragSelectionMouseButtonDown(mouseEventEntity.screenPoint);\nlater when mouseEventEntity.screenPoint changes, the dragEntity.dragSelectionMouseButtonDown is equal to it.  This causes them to fail the distance check and causes the visual lag when the selection Rect determines it doesn't need to update.\nIf it is set by reference and we aren't supposed to instantiate new Components is having a Component contain other Components an anti-pattern?  I copied this from this example btw.. I'll close, definitely seems like some Component fields will result in them being set by reference rather than value.. Attempting to disable Visual Debugging results in Unity compiling for a second and then the option is re-enabled.  I tried this as well with the generated and source folders empty in case things need to be re-generated before hand but same issue.  I'm on version 46.3. ",
    "starikcetin": "@kdrzymala May you give a simple example of your approach?. ",
    "vasiliy-kuznetsov": "Thanks for great video.\nThe roslyn generator looks really nice.. ",
    "DianeOfTheMoon": "It looks like I was missing the developer pack.. How are we supposed to know what other parts of Entitas needs other than trial and error?  Shouldn't the system be able to maintain itself without issue?. I mean the menu option Jenny -> Generate, which I would assume to the be the same as Jenny.exe gen and different than Entitas->Generate.. This is when trying to run Unity with 4.6 experimental. It does, but the generated file seems to have jenny hang on parsing the Assembly-CSharp.csproj file.\nD:\\strategyrpg>CodeGenerator\\Jenny gen -v\nAppDomain load: Entitas.CodeGeneration.Plugins\n  ? Loading: Entitas.CodeGeneration.Plugins\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas\\Entitas.CodeGeneration.Plugins.dll\nAppDomain load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  ? Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas\\Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nAppDomain load: DesperateDevs.CodeGeneration.Plugins\n  ? Loading: DesperateDevs.CodeGeneration.Plugins\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\DesperateDevs.CodeGeneration.Plugins.dll\nAppDomain load: Entitas.Roslyn.CodeGeneration.Plugins\n  ? Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Entitas.Roslyn.CodeGeneration.Plugins.dll\nAppDomain load: DesperateDevs.CodeGeneration.Unity.Plugins\n  ? Loading: DesperateDevs.CodeGeneration.Unity.Plugins\n    \u221a Resolved: CodeGenerator\\Plugins\\Jenny\\DesperateDevs.CodeGeneration.Unity.Plugins.dll\nPre Processing: Fix Target Framework Profile (4%)\nCreating model: Context (8%)\nCreating model: Component (Roslyn) (12%)\nOpening Assembly-CSharp.csproj\n  ? Loading: System.Collections.Immutable, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\System.Collections.Immutable.dll\n  ? Loading: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\n    x Could not resolve: SQLitePCLRaw.core.dll\n  ? Loading: Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.dll\n  ? Loading: Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.Framework.dll\n  ? Loading: Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.Tasks.Core.dll\n  ? Loading: Microsoft.Build, Version=14.1.0.0, Culture=neutral\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.dll\n  ? Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.resources.dll\n  ? Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.resources.dll\n  ? Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.resources.dll\n  ? Loading: Microsoft.Build.resources, Version=14.1.0.0, Culture=en, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.resources.dll\n  ? Loading: System.Reflection.Metadata, Version=1.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\System.Reflection.Metadata.dll\n  ? Loading: Microsoft.Build.Utilities.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.Utilities.Core.dll\n  ? Loading: Microsoft.Build.Framework, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.Framework.dll\n  ? Loading: Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.Build.Tasks.Core.dll\n  ? Loading: Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.CodeAnalysis.CSharp.dll\n  ? Loading: Microsoft.CodeAnalysis, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n    \u221a Resolved: CodeGenerator\\Plugins\\Entitas.Roslyn\\Microsoft.CodeAnalysis.dll\nOpened Assembly-CSharp\nParsing Assembly-CSharp\n...and then it just sits there.  . I waited a couple of minutes before closing the console.. It seems to have something to do with deleting the output directory.. Looks like there was an issue with the 4.6 targeting framework.  Once I updated, generation was working.. It might be good to change the false/true to something like EventScope.Context/EventScope.Entity to help with readability.. I think I'm going to take a look at this.  Any suggestions for the config key before I get started?  Entitas.CodeGeneration.Plugins.CSharpNamingConventions?. ",
    "gabrjt": "I'm also having the \"Could not load file or assembly 'UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\" problem. \nBut this occurs with me only if I have Components that store classes from the UnityEngine, like a GameObject for example (ViewComponent).. ",
    "inslayn": "Sorry to necro this after it was closed, @sschmid, but I just wanted to say that I get the error @RadekOlenski posted.\nI tried to repro this and discovered that I get this issue after adding the Plugins folder from the CodeGenerator.zip into the entitas folder in Unity. Removing that folder makes the error go away and Test tools work.. ",
    "ShadeSlider": "My 2 cents: I would really prefer to have a completely 'fluent interface' approach for adding/replacing/removing components on an entity.\nMaybe add 'is'/'has' prefix to flag components methods just like we have with properties now would be cool as well:\ncsharp\npublic class Destructible : IComponent {}\npublic class Movable : IComponent {}\ncsharp\nEntity entity = context.CreateEntity.AddIsDestructible().AddIsMovable();. I thought it was intended as well =)\n50% of the time hitting Ctrl+Shift+G opens a donation page for me as well =)\nI actually have a reflex to hit Ctrl+W => Alt+Tab right after hitting generate hotkey now :). I'm working on rewriting my RTS project using Entitas and I'm willing to share the basic functionality when I'm done with it.\nThat includes:\n1) Universal mouse and keyboard input processing using keymap config.\n2) Click and drag selection of units/structures in the scene\n3) Basic 'right-click' navigation for units using, probably, A* Pathfinding Project (thanks to @StormRene for suggesting it, btw)\n4) Basic resource system for construction with a UI panel.\n5) Possibly, something else.. Is this topic still alive?\nI've uploaded the RTS template I promised: https://github.com/ShadeSlider/Entitas-RTS-Template. @KumoKairo I most definately will. I'm already using some, as you know. Just wanted this example to be as simple, as possible, so that we could focus on the approach itself and not technical implementation.. @IsaiahKelly Yeah, that was one of the first things I looked into.\nBlueprints definitely have a lot in common with my approach, but they felt somewhat too heavy and too integrated into the core of Entitas. They also lacked the abilility to override components on the in-the-scene instances, which was the main goal of mine.\nI think, ideally, this should be a decoupled addon that uses type drawers from Entitas, but otherwise is a separate thing.. @11clock if you mean initializing entities this way while the game is running - I don't think it's a good idea.\nThe only real reason for this approach is the ability to override and tweak component values in the editor.\nAnd I actually try to keep the amount of MonoBehaviours as low as possible, to be honest.\nThat being said, you can make this system into execute of reactive system to achieve what you want, no reason to make it a MonoBehavior.. @11clock I see, yeah, I'm planning to extract entity creating code into a separate service or Context extension. Something like context.CreateEntityFromConfig(entityConfig);\nI'll update the issue when I get to that.. Sorry for late response.\nIt's not a bug indeed, it's just the fact that I was copying references to the components instead of copying the component itself.\nIn order to fix it, you need to add these lines to the code (I'll update the snippet above):\ncsharp\nIComponent finalComponentCopy = (IComponent)Activator.CreateInstance(finalComponent.GetType());\nfinalComponent.CopyPublicMemberValues(finalComponentCopy);\nand change next one to this:\ncsharp\nentity.AddComponent(componentIndex, finalComponentCopy);. Don't forget, that VisualDebugging creates/removes GameObject in the Hierarchy for EACH entity. So yeah, if you create 10k entities, you create 10k GO as a result.. Updated my repo to eliminate this awefulness :)\n. ",
    "zoujyjs": "@IsaiahKelly Can you explain a bit more on the \"immutable nature of components\"? Any reference? Because I have some code modifying the value of a component directly in systems.  Sometimes when you have some large components, you need to change some fields alone.. @IsaiahKelly Very helpful! It's kind of like a functional programming model where systems read states(components) and map it to new ones.  But say I have a CameraComponent which contains a reference to the camera instance and parameters of camera. \n// not an entitas syntax component, just for example\nstruct CameraComponent {\n    ICamera *camera;\n    ...parameters\n    bool fixed;\n}\nSpecifically, bool CameraComponen::fixed is a state indicates should camera be fixed for now maybe when the avatar is doing some animation play when you don't want camera following the animation.\nI've got CameraFollowingSystem that will find a entity with PlayerComponent and check if not fixed then set the camera attitude to follow the avatar.\nAnother FooSystem will set CameraComponent::fixed = true when the avatar is playing some animation.\nIt's a very common situation where a system will only need to change one field. Also a very common situation where you need some adhoc data to change the system behavior (e.g. an camera offset when you use difference avatar with different body shape).   So should I separate the all these data into a new Component? like a FixedComponent ?  And add/remove it to/from avatar in FooSystem ? Because it's weird when I have other fields like \"should the camera fixed on y axis\" which is a parameter of camera, and now I have to add this as a component to an entity (camera is not an entity).. @IsaiahKelly Your thoughts really enlightened me. I'll try doing some refactoring work after.\nThanks!. ",
    "Redwan13": "So, where is the source code of these assemblies? Will it be published?\nUPD: found old version in history (0.45.1 release). Same question about recent versions:). ",
    "wallpap3r": "@ShadeSlider \nDid your project make for multiplayers? I'm working on a similar project using Entitas, I found some problem to update agent properties with ECS way.\n1. There are thousands of agents to sync with server. (State Synchronization)\n2. createEntity on Message(id, create), and addPosition(), addRotation(), addxxx()...\n3. every time I get the Message(id, new_pos), I need find the entity which created before.\nwith the old way it usually need an AgentManager to hold a map , (ignore octree here) then get and update Position on receiving the message.\nwith the ecs way, I can only solve with \ngroup<entity> allAgents = context.GetGroup<Matcher.AllOf(Matcher.Id, Matcher.Positon)>\nforeach(var agent in allAgents.GetEntities()){\n    if(agent.Id.val == id){\n        ....\n    }\n}\nbut traversing the array is expensive.  How do you solve such things, to quickly find some entity with ID or some key component else.. @T2RKUS It's exactly what I what, I was just try to ask how the [EntityIndex] attribute is used then It's here.\nThanks you for the tutorial.. It seems that dividing entities to multiple context is not necessary in ECS way. If you find you need multiple context to describe some kind of entity, you should put them together.\n\"To divide\" means \"should not combine\", in my opinion.\nIn my project, I only have those two default context. Some times entites are passed between systems of different contexts.. @sesky4 yes, a huge entity will cost unnecessary memory. I prefer to divide when it is clear as Input vs Game, or lobby vs battle, it's due to we are not familiar with ECS way.\nStill, some of the components are doing the same thing, such as LoadingProgressComponent vs TaskProgressComponent. May be it's better to leave them duplicated.. @FNGgames I'm not quite follow your point. But I do think ECS is anti-inheritance, but use combination to implement Polymorphism.\nReturn to the topic, I prefer to put all the entities which can be notified by collision events within an context...\nBut I have the same confuse that how can I pass entites from context A to systems of context B. It seems we can only use CustomEntityIndex.\nsee also https://github.com/sschmid/Entitas-CSharp/issues/351. @FNGgames I see... I think it's the strong type dividing the contexts so that you cannot group the entities with diffrent Type.\nMay be it's better to divide the entity index with other solution but not with template specialization.. If I get it correctly,I think you need \"EntityIndex\" to query things created. you can search some tutorials for this topic.. ",
    "11clock": "This solution sounds nice, but what about putting the \"InitSceneEntitiesSystem\" logic within the \"ViewableEntityInitializer\" MonoBehaviour itself? I think that this would allow the logic to work when you instantiate objects after the scene is loaded as well, rather than only on scene load.. @ShadeSlider Ah, I was wanting to use this as a replacement for the deprecated blueprints, so that I can use Unity's new tilemapping feature for building levels within the scene editor. At the same time, I also wanted to use this for practically every common entity, like projectiles and such, rather than building factories. For this to work, I would need to be able to parse the scriptable objects during runtime, and not just on scene load.. @ShadeSlider Discovered an issue with this setup. The components generated on the entity become directly attached to the ones in the config file, meaning the config file gets altered by new values assigned ingame. I was wondering if you know of a way to fix this.\nEdit: I did some research on the matter and discovered that this isn't really a bug but a misunderstanding  on how scriptable objects work as a shared resource.. I must have done something wrong during the installation process, because I started over and now everything is dandy.. ",
    "ivarus": "Why you just don't use mono behaviours instead of config SO + overrides? Isn't it enough simply to save mono behaviour into prefab and use as \"config\" with all \"override\" functionality support?. ",
    "Leonidos": "Thanks for advice. I will try ). ",
    "cywil4": "Thanks! Right now I use non-static methods and it works just like a static one as well. But yes, extensions are more handy here.\nBest!. My question was inaccurate, sorry my fault. I would to know if an order of entities in collection depends always on the order of adding/updating of components. I tested and it looks like in code below but I have to make sure it's always true.\n```csharp\ncontext.CreateEntity().AddPosition(0);\ncontext.CreateEntity().AddPosition(1);\ncontext.CreateEntity().AddPosition(2);\n//and then in reactive system\nvoid Execute(IEntity[] entites)\n{\n       foreach (e in entites)\n       {\n              Debug.Log (e.position.value);\n       }\n{\n//output:\n//0\n//1\n//2\n```. Ok, I can see it now. Thank's a lot:)\nBest and Fr\u00f6hliche Weihnachten:D. I have same here. In my example I can't unregister from the event while game object is being destroyed.\n@christianvoigt idea sounds good.\n//Edit: How about event/action as value in listener component instead of list?. ",
    "Brainshack": "What seems to be missing here, is that you apprently have to add some unity directories to the search paths, or otherwise it will not find all DLLs. Here is how it looks for me:\nCodeGenerator.SearchPaths = CodeGenerator/Plugins, \\\n                            CodeGenerator\\Plugins\\Entitas, \\\n                            CodeGenerator\\Plugins\\Entitas.Roslyn, \\\n                            CodeGenerator\\Plugins\\Jenny, \\\n                            C:/Program Files/Unity/Editor/Data/Managed, \\\n                            C:/Program Files/Unity/Editor/Data/Managed/UnityEngine, \\\n                            C:/Program Files/Unity/Editor/Data/Mono/lib/mono/unity, \\\n                            C:/Program Files/Unity/Editor/Data/UnityExtensions/Unity/GUISystem\nHowever. Running on Windows 10 i still dont get the generator to work:\nC:\\Users\\brain\\Documents\\Unity Projects\\LetsCreateJam\\LetsCreateJam>CodeGenerator\\Jenny.exe doctor\n??  Available: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n??  Available: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n??  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\n    \u00d7 Could not resolve: SQLitePCLRaw.core.dll\n    \u00d7 Could not resolve: SQLitePCLRaw.core.dll\nDer Objektverweis wurde nicht auf eine Objektinstanz festgelegt.\nI must agree: Setting up the roslyn compiler makes absolutely no sense to someone that just wants to use it. Especially when you are migrating from an older Entitas Version that didnt have it. What I would kie to see would be a simple button inside Unity that does all the necessary setup for me. Considering the Roslyn Compiler is the main selling point for the Asset Store Version it really needs a better UX.\n. So just a little update: It works in a clean new project. So there might be some issues when using it inside a project that was using an older version of entitas before.. I dont get the point of this issue to be honest. Afaik the old way of working has never been removed? If you really think that starting a single script is to much to ask of you, you can always return back to the old ways. And also return to slow compilations and sometimes hard to fix catch 22 issues that appear when you need to change components that would break unities code compilation. For me, having to run a single command before starting work is really worth the amounts of time and headaches it safes me.. Just as an FYI for people getting the same issue: Dont forget to reunzip the Jenny.zip and then auto-import again.. Hey Simon. If you are up for someone working part-time and remote from Cologne. I have my roots in web development (over ten years of devlopment experience), have done professional work in UE4  and also have done some Unity projects, though only pirvate stuff for game jams etc. However, I know how to write test-driven code and have used a bit of entitas aswell. If that sounds like something you might want to give a shot, let me know.. ",
    "kkohno": "do step by step for roslyn and have an error\n\n. @sschmid thanks, it seems that *.properties files was executed by default by another soft on my computer. and how to refactor? For example rename the component.... I have the component Named NeedSpawn, then I rename this to TrySpawn and have a many problems with fields as below:\nentity.isNeedSpawn; is not compiled\ni need rename all entries to entity.isTrySpawn;\n . @fahall a lot of steps for a simple renaming. By the way, simply deleting the Generate folder will have compilation errors with attributes in your code. thanks, but it is strange, that this project contains tutorial about entitas-lang and cannot support this)). thanks, it seems true, that entitas is updated and entitas-lang is not. I advise you to change the tutorial. For example, while studying Centitas, I relied on the possibility of the entitas-lang and was disappointed. I solved this issue - I had a bad Project Path in Plugins configuration after adding asmdef. For example: where i can find documentation for EventAttribute and its parameters?. I see no problems with it. When you write \"///\" brfore class or method etc. - IDE automatically add the XML documentation template for this.\nIf you need to compile the DLL go to Project-> Settings-> Compilation and turn on the XML-Document File checkbox. It will generates you XML documentation file when compiling DLL.\nIf you have generated XML file in the same directory than DLL, IDE will automatically parse DLL and XML files and you will have Intellisence for DLL. And nothing goes away in documentation in another projects, when you use dlls instead full-flaged codes. It is really very usefull for coding.. > I always look at code and when I see the XML comments I always think I'm a human not a html parser.\nonly public methods and classes that will be used by library users need documentation. \u042f \u0433\u043e\u0432\u043e\u0440\u044e \u043f\u043e \u0440\u0443\u0441\u0441\u043a\u0438)) \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0432\u043e\u0442 \u044d\u0442\u0443 \u0441\u0442\u0430\u0442\u044c\u044e, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0440\u043e \u044d\u0432\u0435\u043d\u0442\u044b \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e EventAttribute. \nhttps://github.com/sschmid/Entitas-CSharp/wiki/How-I-build-games-with-Entitas-(FNGGames)\n\u0412 \u0438\u0442\u043e\u0433\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u043a\u043d\u043e\u043f\u043e\u043a (\u0447\u0438\u0441\u0442\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u0438\u0445 Unity \u0432 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043b\u0438 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435), \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043a\u0435\u0439\u043b\u0430 \u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u044f \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043d\u0430 \u044d\u0442\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u0445 \u0438 ECS. \u0414\u0430\u043b\u0435\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0434\u043b\u044f Unity \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u044d\u0442\u0438\u043c \u0434\u0435\u043b\u043e\u043c (\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0434\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0442\u0438\u043f\u0430 IScaleView \u0437\u0430 \u0441\u0447\u0435\u0442 EventAttribute). \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f - \u043d\u0430 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0442\u0443\u0436\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0441\u044b\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443 IScaleView \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0432\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442-\u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440.  \u0412 \u0438\u0442\u043e\u0433\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u043e\u0431\u0449\u0435 \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u0438, \u0447\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0441\u0435\u0433\u043e \u0441\u0443\u0449\u0435\u0433\u043e \u0437\u0430 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u0438\u0442\u0434.. \u043f\u0440\u0430\u0432\u0434\u0430 EventAttribute \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 Entitas, \u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438 \u0441\u0430\u043c\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e. I will add, that Jenny have bug with pure C# projects: It is only works if your generated output folder is in Assets folder root, even if you change this paths in *.properties file. change TargetDirectory sring in your .properties file as follows, and it will works:\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets\nalso you can make following bat file to generate without servers and unity:\npushd %~dp0\n.\\Jenny\\Jenny.exe gen\npopd\n. ",
    "xiatianjin": "Could not find file 'Assembly-CSharp.csproj'\nPress \"Assets -> Open C# Project\" to create the project and make sure that \"Project Path\" is set to the created *.csproj.\n. ",
    "npoguca": "I'm talking specifically about the \"tutorials\" section of wiki.. Updated the tutorials section.. ",
    "Draugor": "i just installed unity 2017.3.0f3 and tried it, and it still happens. \nit happens even without having unity open (after a few tries).\nthe error message suggests it has something to do with the server <-> client socket connection so unity version shouldn't affect that.. i wrote a script for my unity project that starts the jenny server when i open my unity project (or restarts the server after it crashes) \nRunEntitasServerOnEditorStartup.txt\nif your project isn't using the new .net 4.6 environment you probably need to comment-out or change the \"Debug.Log\" lines.\nso after using that i just open my project in unity, Jenny starts automatically, i open the c# project from unity and start \"happy coding\" :D\n. personally i would go with something like this:\n- IdComponent (every entity gets this, with an [PrimaryEntityIndex] attribute)\n- HealthPointComponent\n- BodyPartComponent: 1 Value which is an Enum of possible bodyparts (Leftarm1, Leftarm2, LeftFrontLeg, LeftMiddleLeg and so on)\n- BodyComponent: List of Integers (IDs) (Or Dictionary for simpler access)\na body part is an Entity with a BodyPartComponent, an IdComponent and a HealthPointComponent\nthe main entity then would have a BodyComponent with a list(or Dictionary) of IDs referencing the IDs of the body part entities.\nHope that makes sense :D\n. For the attributes i would suggest to name them differently instead of [Event(true)] and [Event(false)]. Currently you would have to know if \"false\" is an Entity bound event or not instead of just seeing it at a glance. One could read the parameter as \"is pure event\"  or as \"is entity event\" (which it currently is)\nMaybe call them [Event] and [EntityEvent] or something along these lines, to clearly differentiate them.. there is a chapter in the Entitas cookbook about indexing entities, it even uses position as an example. That should help you. https://github.com/mzaks/EntitasCookBook/blob/master/chapters/1_ingredients/106_index.md. ",
    "eransh22": "@sschmid Thank you for the quick answer :+1: \nRegarding your question, and after further investigation (we tried and succeeded reproducing it on a clean project), it seems that if you use the Roslyn plugin data providers for the very first code generation that you make - it will give you this exception, and therefor will not even generate the contexts themselves.. It seems like it needs the contexts to already be created before that.. but no code generation was done before that step. it's the very first time you try to generate..\nHowever, if you use the normal plugin data providers for the first time - it will succeed in creating all contexts and then you can switch to Roslyn plugin and it will succeed in code generation every time afterwards, without the exception.\nSo I believe the question is then why it fails when using Roslyn for the first time code generation?\nThanks!\n. ",
    "kalissar30": "I'm encoutering the same problem.\nUnity : 2017.3.0f3\nEntitas : 0.46.3\nOS : Windows 10\nReproduction : I followed the step-by-step install guide in a new and clean Unity project. The error occurs at step 8 when generating\n. ",
    "qkhuyit": "how to check Replace component even ?\nI used BattleMatcher.PlayAnimation.Added(), but not successful. I am waiting for your sample project. thank very much. ",
    "AVAVT": "Thank you @KumoKairo, after taking your suggestions I got the cutscenes going well now \ud83d\ude38 . I second the idea. This way instead of having to wait 2-4 days for asset store update, purchasers can enter their invoice and download the latest release immediately.. It took some time to separate Component and ScriptableObject, but it looks cleaner now so I have no complaint. Entitas' Attribute above non-IComponent looks confusing.. After testing turns out I'm having the same issue with #564 .. Do you think this is a bug on Unity side? The doc says it is called on all GameObjects but apparently it's only called on active GameObjects.\nI think the warning is helpful and should not be removed.. Well a simple use case is an object pool (projectiles).\nIt's no longer a bug, but an issue in the sense that it's yet another thing I have to remember to do manually in every new scene.. I see. I'm currently pooling entities along with their gameobjects, so I never unlink object during the game. Anyway, it's no longer a problem so I'll close the issue.. I see, so IPoolable is now IPoolableEntity?\nBut what do you suggest I name my previously named IPoolableEntity now?\nI followed the lead and changed it to:\n```\npublic interface ICrossContextPoolableEntity : IEntity, IReusableEntity, IViewEntity, IPoolableEntity { }\npublic partial class GameEntity : ICrossContextPoolableEntity { }\npublic partial class InputEntity : ICrossContextPoolableEntity { }\npublic partial class SoundEntity : ICrossContextPoolableEntity { }\n```\nit works now but the name is pretty cumbersome.. Oh SoundEntities are mostly GameObjects with AudioSource that are pooled and move around (even attach themselves to other entities), so they have View.\nFor Input it's a relic from past mistakes, removed ^^'. I didn't notice someone created a similar issue #599 . Will try to work based on that.. Thanks a lot @zhuchun , it seems like the right direction. The compile part seems to work fine, but I can't run the compiled exe. Do you know why?\n```\nApples-MacBook-Pro-2:Tests AVAVT$ csc TestRunner.cs -r:Libraries/NSpec.dll\nMicrosoft (R) Visual C# Compiler version 2.6.0.62309 (d3f6b8e7)\nCopyright (C) Microsoft Corporation. All rights reserved.\nApples-MacBook-Pro-2:Tests AVAVT$ mono TestRunner.exe\nUnhandled Exception:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'NSpec, Version=1.0.7.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies.\nFile name: 'NSpec, Version=1.0.7.0, Culture=neutral, PublicKeyToken=null'\n[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.FileNotFoundException: Could not load file or assembly 'NSpec, Version=1.0.7.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies.\nFile name: 'NSpec, Version=1.0.7.0, Culture=neutral, PublicKeyToken=null'\n. Oh I'm an idiot. Simon already has a bash file for that. Got it running using msbuild.. For interval-based behavior I'm using these:\nComponents:Components.cs\npublic sealed class RemainingCooldown : IComponent { public float value; }\n// CooldownTime is used to refresh interval-based cooldown. if !entity.hasCooldownTime, it will be an one-off cooldown.\npublic sealed class CooldownTime : IComponent { public float value; }\n```\n```CooldownSystem.cs\npublic class CooldownSystem : IExecuteSystem\n{\n  IGroup _timers;\npublic CooldownSystem(Contexts contexts)\n  {\n    _timers = contexts.game.getGroup(GameMatcher.RemainingCooldown);\n  }\npublic void Execute()\n  {\n    float deltaTime = _contexts.game.time.deltaTime;\nforeach (var timer in _timers)\n{\n  if (timer.remainingCooldown.value > 0)\n  {\n    spawner.ReplaceRemainingCooldown(\n      spawner.remainingCooldown.timer - deltaTime\n    );\n  }\n  else if(timer.hasCooldownTime) // refresh cooldown if needed\n  {\n    timer.ReplaceRemainingCooldown(\n      timer.remainingCooldown.timer + spawner.cooldownTime.value - deltaTime\n    );\n  }\n}\n\n}\n}\n```\nUsage: add RemainingCooldown to an entity and react to that, filtering only entities that has remainingCooldown.value <= 0 (off cooldown)\n(this file is not complete)\nUpdateSomethingSystem.cs\npublic class UpdateSomethingSystem : ReactiveSystem<GameEntity>\n{\n  protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n  {\n    return context.CreateCollector(GameMatcher.AllOf(GameMatcher.UsefulComponent, GameMatcher.RemainingCooldown));\n  }\n  protected override bool Filter(GameEntity entity)\n  {\n    return entity.hasUsefulComponent && entity.hasRemainingCooldown && entity.remainingCooldown.value <= 0;\n  }\n  protected override void Execute(List<GameEntity> entities)\n  {\n    foreach(var entityThatIsOffCooldown in entities)\n    {\n      // do something here\n    }\n  }\n}. > I read Situation 3\nPossible solution is Parametric Animation. It's doable with tweens, behaviour trees, or coroutines. During them create Input/Command entites, this will most likely happen during unity's Update stage, so be careful what entities you create.\nWhich part were you talking about? The delay between AoE hits, or the multi-hits part? (sorry I didn't organize the point very well).\nAnyway, this part is an animation visual, so creating InputEntity wouldn't be a sound idea, would it?. Why not just leave it as EventTarget.Any and in the entity's View put a check if(entity == gameEntity)?. ",
    "sesky4": "@FNGgames Thanks. It seems a good idea to have a MultiGroup.. @wallpap3r Sounds real neat to work with.But it may lead to worse performance and more memory consumption.\nHere's a related article.\nhttps://medium.com/@icex33/why-components-need-different-context-types-in-entitas-csharp-e12e0aee9a67. ",
    "wpp1983": "I have the same problem.... sorry \uff0cI found my bug is because that I forget call the DeactivateReactiveSystem()\n. > Does MakeEntityFromEntityInfo involve deserialization? If so it could be the case.\n\nAlso check profiler results with disabled visual debugging in Entitas settings.\n\nthank for reply\nMakeEntityFromEntityInfo not involve deserialization, and I disable the visual debugging, the result is same.\n. @sschmid  It have 160 component, so the Entity's _components is 4*160 = 1K.... and I have 10000 entity,.... @sschmid  there guid component has prime index, and the deep profile is here\n\n. and I use the Jenny-server,  there is a error about \" can't load UnityEditor Version = 0.0.0.0\"\n. oh, I fix this. ",
    "yuchting": "@c0ffeeartc thanks for your explanation, I know the \"dependency injection\". As I said, I was ECS newer, so...FYI, some other contexts can be passed for different purpose? Could you show me some samples? I will appreciate that.. @FNGgames \n Thanks! I know what you meaning, if some system add component and delete same component in one frame, the collector may catch the adding behaviour, but when it is passed to Execute method, it hasn't the  component.\nSo the GetTigger is for action, but the Filter is for current game entity status.\nI got, thanks so much! :smile:. @roygear thanks for your quick reply.\nCould you explain more about Roslyn plugin do for Entitias code? I find the Entitas.exe file has been changed into Jenny.exe, I run this exe file, it show a lot of command:\n\nusage:\njenny add key value          - Add a value to a key\njenny auto-import            - Find and import all plugins\njenny client command         - Start client mode\njenny doctor                 - Check the config for potential problems\njenny dry                    - Run the code generator in dry mode\njenny dump                   - List all config keys and values\njenny edit                   - Open config files with default editor\n.....\n\nI just know a little usage via Entitas introduce video,  any wiki/example/note to let me know more about those commands? And what did Jenny do for my C# code by xxxx.csproj file while I \"jenny gen\"? How can I custom a code generator?\nThanks! . @roygear Thanks a lot!\nSo I cannot use Roslyn with source code, but I was newbie in Entitas, how can I debug my project code and see the Entitas code too? Because I step follow the code, cannot enter the Entitas.dll.\n@sschmid any idea?. @roygear @sschmid \nThank you! As a newbie of Entitas, I have always a lot of problems, thanks for your patience and help :). @FNGgames thanks for so quick answer, I know that, but if there's not \"Update/Replace\" event, I have to use IExecuteSystem.Execute in every frame loop to check some components value is updated.\nAnd I find the source code of Group.cs, the \"Group.OnEntityUpdated\"(delegate variable) haven't been set at any place, that's meaning, a variable was declared, never been set and used, I think the autor @sschmid  may have some reasons.. @FNGgames thanks for your patient, let me explain more  by code and design requirement.\nI have a list of behaviors data, each behavior data relates one component,\n\ninterface DoSomethingData\nDoFirstThingData -> DoFirstThingComponent -> DoFirstThingSystem\nDoSecondThingData -> DoSecondThingComponent -> DoSecondThingSystem\nWaitForSecondsData -> WaitForSecondsComponent -> WaitForSecondsSystem\n\nNow, my config json text is a list of behaviors:\n\nDoFirstThingData \n WaitForSecondsData \n DoSecondThingData \n WaitForSecondsData \n DoSecondThingData \n DoSecondThingData \n ....\n\nobviously, I cannot AddDoSecondThing twice in one GameEntity in one frame loop, so I designed:\ncsharp\n// in another system, I create a game entity for those behaviors\nList<DoSomethingData> list;\nGameEntity en = context.CreateEntity();\nen.AddDoSomethingDataList(list);\nen.AddDoSomethingStatus(Done); // Running, Done\nen.AddDoSomethingIdx(0);\n...\nsystems design:\n```csharp\nclass DoFirstThingSystem : IReactiveSystem{\n    Execute(entities){\n        entities.foreach(e) => {\n            // do first thing \n            ...\n            // done\n        e.RemoveDoFirstThing();\n        e.ReplaceDoSomethingStatus(Done);         \n    }\n}\n\n}\nclass DoSecondThingSystem : IReactiveSystem{\n    // same routine for DoSecondThingSystem\n}\ncsharp\nclass WaitForSecondsSystem : IExecuteSystem{\n    entities = context.GetGroup(AllOf(WaitForSeconds));\n    Execute(){\n        entities.foreach(e) => {\n            // wait a time by timer\n            if(e.waitForSeconds.timer += Time.deltaTime > e.waitForSeconds.time){\n                e.RemoveWaitForSeconds();\n                e.ReplaceDoSomethingStatus(Done);\n            }                 \n        }\n    }\n}\ncsharp\nclass CheckDoSomethingStatusSystem : IExecuteSystem{\n    // I have to check and check again\n    entities = context.GetGroup(AllOf(DoSomethingStatus));\n    Execute(){\n        entities.foreach(e){\n            if(e.DoSomethingStatus.status == Done){\n                e.DoSomethingIdx.idx += 1;\n                if(e.DoSomethingIdx.idx >= e.DoSomthingList.list.Count){\n                    // all behaviors are executed done\n                    e.Destory();\n                }else{\n                    // add some thing by data\n                    Utils.AddComponentForDoSomething(e,e.DoSomthingList.list[e.DoSomethingIdx.idx]);\n                }             \n            }\n        }\n    }\n}\n```\nabove code may have some bug, but you should what I need and what I am doing for this.\nMaybe you have another better way to realize my requirement.\nSo, If I have \"Update/Replace\" event trigger, I won't design a IExecuteSystem for CheckDoSomethingStatus, IReactiveSystem is better.\nCheers\n . @FNGgames I understand your meaning now, that's to say, I can write CheckDoSomethingStatusSystem like this:\n```csharp\nclass CheckDoSomethingStatusSystem : IReactiveSystem{\nFilter(){\n    entity.hasDoSomethingStatus && entity.doSomethingStatus == Done;\n}\n\nGetTrigger(){\n    return CreateCollector(GameMatcher.ActionStatus);\n}\n\nExecute(entities){\n    entities.foreach(e){\n        //if(e.DoSomethingStatus.status == Done){\n            e.DoSomethingIdx.idx += 1;\n            if(e.DoSomethingIdx.idx >= e.DoSomthingList.list.Count){\n                // all behaviors are executed done\n                e.Destory();\n            }else{\n                // add some thing by data\n                Utils.AddComponentForDoSomething(e,e.DoSomthingList.list[e.DoSomethingIdx.idx]);\n            }               \n        //}\n    }\n}\n\n}\n```\nand then, if some systems call \ncsharp\ne.ReplaceDoSomethingStatus(Done)\nor\ne.AddDoSomethingStatus(Done)\nI will collect these entity and process by this system. Thanks for your explanation, so patient.\nI just want to ask another un-resolved  problem again, why in Entitas source code Group.cs, there is OnEntityUpdated to handle replace event only, but haven't realized it and remain a never used variables, it makes me confused.\nAnd more, a method calling ReplaceDoSomethingStatus may raise two different events:\nAdded if hasn't any Component before\nor\nRemoved and Added if has one.\nMaybe, if you design it one relates one:\nAddDoSomethingStatus just raises Added  event\nRemoveDoSomethingStatus just raises Removed event\nReplaceDoSomethingStatus just raises Replaced event if it has already one, if you haven't one, it raises Added event.\nIs it a better design? Please don't mind, I just make a suggestion.\n@IDNoise thanks for your help, do you mean, you open a issue before, but @sschmid haven't modified? And he suggests us do:\ncsharp\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n    return context.CreateCollector(\n        GameMatcher.DoSomethingStatus.Removed(),\n        GameMatcher.DoSomethingStatus.Added()\n    );\n}\nrather than:\ncsharp\nprotected override Collector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n    return context.CreateCollector(GameMatcher.DoSomethingStatus.Updated());\n}\n. ",
    "xmzyl": "thank @sschmid ,  this Issue is the same #561 \u3002. great! .  I  figure out this question. I must call  _eventSystems.DeactivateReactiveSystems() before call Contexts.Reset()\ncsharp\n    ...\n    _eventSystems.DeactivateReactiveSystems();\n    Contexts.sharedInstance.Reset();. ",
    "denizdikbiyik": "Hello,\nIf you want to find an alternative for asset store because you cannot find your material, you can try to find 2D images or create them and by using designing programs, you can give third dimension to it as depth.\nThis may help.. Hello,\nI also noticed that there is a very good website for 3D models and I want to share it with you:\nhttps://www.turbosquid.com/\nAnd there is an option that if you cannot find 3D models you need, you can draw them on SketchUp.. ",
    "StormRene": "What do you think about: \n[Game]\npublic class ConfigsComponent : IComponent\n{\n    public Configs value;\n}\npublic Configs : ScriptableObject {\n<....>\n}\npublic class LoadConfigsInitializeSystem : IInitializeSystem {\n    private readonly Configs configs;\n    private readonly GameContext context;\n    public LoadConfigsInitializeSystem(GameContext context, Configs configs) {\n        this.configs = configs;\n        this.context = context;\n    }\n    public void Initialize() {\n        context.CreateEntity().AddConfigs(configs);\n    }\n}\nJust write a simple InitializeSystem to set your Component. . I would say you always want the entity from Event(true) despite it's unique. So the generator could handle that for you. Furthermore the OnPositionChanged(Vector3 position, GameEntity entity) Method should also be called when the Group of PositionEventComponent is changing so that the registered interface get directly called (as Group Event, not reactive so it won't get called the next tick). Finally a Remove Event would be good.. Please don't put the EventListenerComponent with the interface on the same entity with [Event(true)] instead on a new one with only listening purpose. It's very handy to have as many listeners on a component as you want by registration. In this way it feels like a real Observer/Listener pattern. Will the current solution call the Listener Method after registration automatically if there is already the component or will it only getting called after a new change? \nWould call the [Event(true)] an [LinkEvent] or [LinkedEvent] because it's bounded to the entity.. @c0ffeeartc creationIndex is the key for that. You are subscribing to the component with the specific creationIndex of that entity to determine if it's the correct one. \nlistenerEntity.AddHealthEventListener(targetIndex, this);\nThe Listener Component should look like this:\npublic class HealthEventListenerComponent : IComponent {\n    [EntityIndex]\n    public int targetCreationIndex;\n    public IHealthEventListener listener;\n}\nSo the system which calles it could do this:\n\u00b4\n//Collector in Health\n<...>\nprotected override void Execute(List<CoreEntity> entities) {\n    foreach (var target in entities) {\n        var listeners = context.GetEntitiesWithHealthEventListener(target.creationIndex);\n        foreach (var listener in listeners) {\n            listener.healthEventListener.listener.HealthChanged(target.health.value);\n        }\n    }\n}\n<...>\nAdditionally it's very very handy to have a system that has his GetTrigger on the HealthEventListener so that when a new one get registered this system checks if there is already a state and calls the new listener immediately. We are using for this directly the group.OnEntityAdded, because otherwise the initial call for the registration would be one tick later when the next entitas update is getting called. If you don't call them on registration you have to check for yourself in the view after you are adding the listener and adjust for the current state only to have the same code one the listener callback again. Not cool.. Imo there are two options:\nvoid HealthChanged(int creationIndex, int newHealth);\nor \nvoid HealthChanged(GameEntity healthEntity, int newHealth);\nWhy do you need the Contexts?. Why not getting all the necessary data through the Events? If you need other data on a specific event just register new listeners:\nvoid TookDamageChanged(GameEntity e, int damage) {\n    listenerEntity.AddAnotherListener(e.creationIndex, this);\n}\nvoid AnotherListenerChange(int newData) {\n//go for it.\n}\nThis way you are pure reactive. If you need to collect data from the contexts you should consider to first make a new system that collects the data and then react with a listener on the new component that this system is creating.. [Event(false, EventType.AddedOrRemoved)] should generate\nIPositionListener.OnPosition(GameEntity entity, Vector3 position)\nand\nIPositionListener.OnPositionRemoved(GameEntity entity)\notherwise you have to check if it's add or remove in the method if you want both. Seems to me ugly if I need to check everythime against isEnabled like this:\nIPositionListener.OnPositionAddedOrRemoved(GameEntity entity, Vector3 position) {\n    if(entity.isEnabled){\n    } else {\n    }\n}. Listeners should be everytime getting called with the current state when they are added. We first thought it would be good to make a reactive system that triggers on the listener component getting added. We later found out it's not a very good idea because they are getting called delayed and not directly (like one tick after, when entitas is getting updated). Therefore we generate a ReactiveSystem for changing data and a InitializeSystem which calls the listener on group added so they are getting called instantly. It's working very nice. Imo that's one of the rare situations where you really want a group added event.. @optimisez I already explained the solution directly under your posted issue.. Nope that's not what I said. From the beginnig of this discussion I'm saying it's important that listener are getting called directly after the registering. All the time. In this text I proposed a problem we found while developing our reactive ui system. Our first solution was write a reactive system with a collector on the specific listener so it can inform the listener. We found out it's not a good solution, because the listener will not be informed instantly but somewhere later (when the next tick is happening in entitas). This leads towards that we wrote all the time in our register listener methods that we also first grab all the data to initialize the object and getting informed with the same data one tick later. (duplicated code) So we corrected the whole thing and made a Initialize System per listener with directly onEntityAdded on the group. Like so:\npublic void Initialize() {\n    this.listenerGroup = uiContext.GetGroup(UIMatcher.HealthStateListener);\n    this.listenerGroup.OnEntityAdded += Execute;\n}\nprivate void Execute(Entitas.IGroup<UIEntity> group, UIEntity listener, int index, Entitas.IComponent component) {\n    var target = coreContext.GetEntityWithId(listener.healthStateListener.targetEntityId);\n    if(target) listener.healthStateListener.listener.HealthChanged(target.health.value);\n}\nSo it will be instantly called on register and grab all the data if exists. Otherwise it will maybe getting informed if it will exist in the future by the solution I proposed earlier in this discussion.\nOur listeners are getting added with OnEnable and destroyed with OnDisable. . @optimisez Yes that's true it will execute in one shot. But only when your MonoBehaviour.Update / FixedUpdate where your EventsFeature.Execute is  getting called. If you instantiate a bunch of enabled GameObjects and they register itself in the OnEnable on some data they will be not showing the correct data between their particular OnEnable and the next Update call, because the listener is not already called. So with a little bad luck you are showing for a fraction of a second a menu without correct state. We started to write all the time many queries to set the data instantly with the reactive approach only to get the correct data later. It lead us to many redundant code so we said it would be nice if the state is already correctly set when the scope of OnEnable ends. group.onEntityAdded was the solution for that.. @FNGgames But OnEnable an OnDisable is very handy. When your designers are working on particular views they can drop your listener scripts on their GameObject and connect the data to show it. Otherweise you always need a coder when a designer just want to add a new healthbar somewhere, because you need to write a system/some code, or am I getting you wrong?. And how do you solve the problem when a GameObject is not instantiated by the Controller/a Coder? E.g. a ParticleSystem that needs additional data and the designer just dropped it in the scene.. No thats not a good idea at all. You want to iterate over all GameObjects and their childs just to call it yourself. That would be insane for a big scene.. Would it not be the same problem, but in a obfuscated way? You would rather like to see:\nvoid OnEnable() {\n   Contexts.SharedInstance.view.CreateEntity().AddRequestInitialization(this);\n}\nvoid InitializationAnswer() {\n   Contexts.SharedInstance.view.CreateEntity().AddHealthListener(idToListen, this);\n}\nvoid IHealthListener.HealthChanged(int newHealth) {\n   //stuff\n}\nthan the simple solution:\nvoid OnEnable() {\n   Contexts.SharedInstance.view.CreateEntity().AddHealthListener(idToListen, this);\n}\nvoid IHealthListener.HealthChanged(int newHealth) {\n   //stuff\n}\nIn both ways you need to use a group.onEntityAdded if you want direct response and not waiting for the next Execute call of your event/initrequest features.. @FNGgames Haha I know the probem. But if you are working in a team with designers and artists you can't control everything they do - and you shouldn't. They should be creative and life their designing dreams, otherwise you are doing something wrong and don't offer the correct tools. It's also really really annoying if a designer has to come to you every 5 mins, because they want to add something. In the end they are stopping to disturb you and don't make cool stuff. But I agree with you, when you are a team only of coders or techy designer this approach could work although I thinking it's a bit overengineered for just creating view. Mostly their should be no interference if object a is created after object b or the other way around, because the listener are reactive. The relevant code is in entitas.. +1 for FNGgames solution. \nWould maybe initialize the service like the unique components. Furthermore should it be possible to flag it with a context to provide specific view and/or core services.\n[View, Service]\npublic interface ITimeService {\n    float deltaTime {get;}\n}\n<...>\n_contexts = Contexts.sharedInstance;\n_contexts.view.SetTimeService(new UnityTimeService());. @FNGgames interesting concept. We are using services to share some logic like heavy/common calculations or factories in different systems. To decouple unity from entitas we are using an action context to communicate from unity to entitas and a listener concept (similar to simons one from v1.1) to communicate back. I would call your idea more like a fascade/provider.. I don't like the idea about configuration via mono behaviours directly on the prefab if they are gameplay relevant. All data on the prefab should be \"state\" (more like view state) of that particual object and how it is represented in the view. Configuration should be in ScriptableObjects or in json (or some other text format) in your project folder. To have all those data in your project folder is imo even more designer friendly, because it's a clear statement: Balance values goes to project folder and representation goes to prefab and can be done in the scene. It also helps with changing balance values really fast and swap different configurations (our designer can load the balance values into the project with excel - they are saved as jsons. Designers love excel import). We are doing it exactly like shown in the graphic. Furthermore we splitted the game logic into different parts: Action -> Command -> Core -> View. The View or other external inputs are able to create actions. The systems there are doing checks if it's possible and emit commands. The command systems will change the state of the core. Core systems only change core state. View is reacting on core and creating view state. Listeners are getting called, because something changed directly in core or in view. We also have a meta context which is just loaded balance values (from json just for easier access). This is done because action and view are part of unity (client side). Command and core are part of the simulation and will run not only on the client, but also on the server (we have a simulation game).. What's also really helpful in our project is that we have an Action Context before Command Context. Like in the updated architecture commands are only verified data for the game logic which gets checked in action systems. But actions also help with view systems and the data in view. Actions are allowed to change the view context directly. That's very helpful for menues and other view stuff where you need reactive behaviour, because they are complex (best practice here is, that menues never have state in MonoBehaviour and only react to view components). So you don't have to make commands out of actions that are only interesting for the view and the game logic doesn't need to know about these. Therefore I would create a new rectangle before commands and call it action with a second line to view. (Could be to complex in the MatchOne example or Schmup, but in a bigger project this step is important imo). I would say you could do the following: in your InputActionService you could flag all commands that need to be queued with an entity.isQueuedCommand = true flag. \nclass InputActionService {\n   //queued\n   public void BuySomething() {\n      var entity = commandContext.CreateEntity();\n      entity.AddBuyCommand(something);\n      entity.isQueuedCommand = true;\n   }\n   //continuous\n   public void MoveSomewhere() {\n      var entity = commandContext.CreateEntity();\n      entity.AddMoveCommand(somewhere);\n      entity.isContinuousCommand  = true;\n   }\n}\nA QueueActiveSystem flags only one command per tick from the queue as active so it can be processed and another deletes active && queued entities after the tick. With that approach you can solve queued and continuous commands easily. For better readability you could also create a entity.isContinuousCommand  = true flag and separate in two features: QueuedCommandsFeature and ContinuousCommandsFeature in your CommandsFeature. (Option 2, Commands do sanity checks)\n. Imo just one thing is missing: You don't want to always create actions and commands for changing the view/view logic systems. With the current diagram you could think it's a good idea to control a full fletched sim city menu via the game logic. I think there should be another part the View Logic as a own box between Game Logic and Observers and another line directly from Input Actions to View Logic.\n\nView Logic is not unimportant. When you are creating listeners for directly game logic you are not able to process the data further for the view. Often you want more data that's only for the view. Let's say you have weapons with damage and fire rate, the view could need a damage/min info thats unneeded for game logic.\nHere's the difference:\n```\nclass WeaponView : MonoBehaviour, IGameDamageListener, IGameFirerateListener\npublic float damage;\n   public float fireRate;\n   public float damagePerMinute;\n   void OnEnable() {\n      listenerEntity.AddGameDamageListener(this);\n      listenerEntity.AddGameFirerateListener(this);\n   }\n   void GameDamageListener(float damage) {\n      this.damage = damage;\n      this.damagePerMinute = damage / ... //wtf i don't have firerate now.\n   }\n   void GameFirerateListener(float fireRate) {\n      this.fireRate = fireRate;\n      this.damagePerMinute = ... / fireRate //wtf i don't have damage now.\n   }\n```\nYou don't know the order from the view perspective so you beginning to save the state of damage and fireRate and dividing if the divisor is not zero in both. Or start another query against game context. But that shouldn't be happening in the first place, because that's why you are using Events.\nWith View Logic it's easy. You can react as usual on changes of game data and creating specific view data like a ViewDamagePerMinuteComponent. What you get is super clean MonoBehaviour Views to present.\n```\nclass WeaponView : MonoBehaviour, IViewDamageListener, IViewFirerateListener, IViewDamagePerMinuteListener\npublic float damage;\n   public float fireRate;\n   public float damagePerMinute;\n   void OnEnable() {\n      listenerEntity.AddViewDamageListener(this);\n      listenerEntity.AddViewFirerateListener(this);\n      listenerEntity.AddViewDamagePerMinuteListener(this);\n   }\n   void ViewDamageListener(float damage) {\n      this.damage = damage;\n   }\n   void ViewFirerateListener(float fireRate) {\n      this.fireRate = fireRate;\n   }\n   void ViewDamagePerMinuteListener(float damagePerMinute) {\n      this.damagePerMinute= damagePerMinute;\n   }\n```. @vkyii \nDid a quick check about it and run the Api Port Analysis from Microsoft on the entitas solution. Here's the result:\n\nHere's more info about the topic: https://docs.microsoft.com/en-us/dotnet/core/porting/libraries\nEntitas is fully ready for .NET core 2. \ud83d\udc4d . I already proposed a solution in the issue of reactive ui and in the chat before @echeg comment. Take a look here: https://github.com/sschmid/Entitas-CSharp/issues/591#issuecomment-365905791. Yes. You can call the cli without parameter and you'll see the version. In your case:\nPS A:\\GitHub\\EntitasProject> .\\CodeGenerator\\Jenny.exe\nSomething like this should pop up (I'm using older version):\n. You can try jenny fix and after that again jenny auto-import.. What do you think about the following: \nHumanComponent identifies your humanoids.\nBodyPartComponent has a reference to the Human. Like so\nclass BodyPartComponent : IComponent {\n   [EntityIndex]\n   public int creationIndex;\n}\nWhen you want to change parts of your humanoid you could do:\nvar bodyParts = context.GetEntitiesWithBodyPart(specificHuman.creationIndex);\nforeach(var bodyPart in bodyParts) {\n   //go for it\n}. You are welcome :). You know that you can nest Features? Like a SystemStructuresExecuteFeature in your MainLoopFeature and so on. \nIf you really want that feature you could build it yourself in two ways:\n1. Create your own generator and make a set of Attributes for your systems. \n2. The Add(ISystem system) in Systems is public therefore you could call it inside a System. For example deriver from ReactiveSystem implement your own technqiue how to add to Systems and finally deriver from that class all your regular systems. \nConsider that Systems are not part of an Context therefore it would be not a good idea to implement your SetSystemRuntime in contexts.\nPS: Furthermore I would not give away the control to organise my features. You don't have to worry. The normal way you have full control about the specific order and know that it will always getting called that way. If you do this directly in the system it could end in a real mess because it's indirect and you don't know in which order they will be executed. You could combat that with index argument in your proposed method but wouldn't that result in the same as putting stuff directly in a feature, but with bad readability? . @bit-chimp @FNGgames is doing this, because he uses multi threading. He put's his data with Request into his threaded systems and after a certain time he gets Result back. \nThe Service is an abstraction to decouple unity from entitas. So no unity specific logic is in entitas and vice versa. So the view/unity can react on added asset without entitas knowing there is something that draws the data. The implementation of the specific service stays on their \"side\" while they can get called on the other. Let's imagine you want to run the same code on a server or want to change to another engine etc. pp.. I would not make the visualizer part of my game solution, therefore pack it into a own solution - like tests. I Would probably write some WPF program because the WPF UI is easy to handle. To show the realtionships between systems I would do:\n1. Show the execute order\n2. Show Input (Collector and Filter)\n3. Show Output (ReplaceX and AddX, CreateEntity, DestroyEntity etc. pp.)\nMaybe 2/3 can be neat visualized as data transformation in some way?\nTo accomplish this I would say attributes over the system which specifies the types of input and output is an easy way. Otherwise reflection could be an option but seems hard to achieve. How to get the filter for example?. What I'm seeing is: DesperateDevs.CodeGeneration.Unity.Plugins in Jenny.Plugins. That shouldn't work without Unity.. I don't get your problem? Is it for you terrible to Replace all in one system? You could split it into different systems and add it under one feature. Something like a LoadCompleteFeature and LoadCompleteReplacePositionSystem etc. . You could create a context for every individual game and a context for application. Like a top-level context. \nWhen switching the scene you could clean up the individual context of the game. I would control the scene change with entitas systems in the top-level context. So everything is prepared. Don't forget you can use ITeardown as a counter part to IInitialize.. https://github.com/sschmid/Entitas-CSharp/wiki/Systems\nhttps://github.com/mzaks/EntitasCookBook/blob/master/chapters/1_ingredients/107_system.md\n(ITearDown is similar to IInitialize)\nThe Context can be resetted via the Method context.Reset() do clean all current entities if you don't need the data anymore.. You are welcome \ud83d\udc4d . I highly recommend the first solution that simon wrote, because it's not necessary to turn off and on a system if it's only executed if the required conditions are met. It's really helpful to see in what condition the system is executed by trigger/filter, instead of debugging down the road to know which system is which enabling or disabling or worse execution is dependent on some unity monobehaviour state. Especially if you have a big game. Furthermore enabling/disabling systems would mean some sort of state. That means it should be part of the data and therefore components. Like you said in your example I could imagine some kind of BuildPhaseComponent or FightPhaseComponent and so on.\nIt's not a big deal to have many thousand systems at the same time if they are reactive and not getting executed all at the same time.  . 4. As parameter of the system ctor\n^ this is simple and we are using it. Advantage is you see the dependency of the system and in unit testing you just need to substitute the interface. Disadvantage is, if you are not bundling the dependencies in some container, you are passing a whole bunch of references through the features to your systems.\n. @kdrzymala \nI like your solution very much. Just one thing that I don't understand fully: how would a unit test for a reactive system look a like with zenject where I need to substitute a service? . @kdrzymala\nPretty cool! Thanks for the links. . @kdrzymala There is also a version that works unity-independent on the release page Zenject-NonUnity.v5.5.1.zip .. Set throws a error if the component/unique entity already exists. If you want to replace the component you can use contexts.game.ReplaceGlobals(globals);, otherwise you could remove it with contexts.game.RemoveGlobals();\nPS: You should consider not to reload the scene with your Controller in it. You can prevent this with https://docs.unity3d.com/ScriptReference/Object.DontDestroyOnLoad.html so that your controller doesn't get destroyed/reloaded. Or simply another scene where your controller is.. Yes it's normal. Take a look at the Contexts in the hierarchy view of unity. They are under the DontDestroyOnLoad Scene - thats a fair hint that the will not be cleared after scene load (although this is just debug view). If you really want to wipe the complete context then you can call the method context.DestroyAllEntities() . This error means that something has at this specific moment a reference to an entity and therefore It couldn't realease it. Is it possible that you are trying to clear the context inside a event listener? Furthermore did you try calling systems.ClearReactiveSystems() first as the exceptions says?\nAs good practice: Never ever save references to entities in fields directly. Always save Id's. . You can see in the exception which group is getting retained Collector(Group(AllOf(Asset, View))), Collector(Group(AllOf(Player, PlayerStatus))). Do you save somewhere in a MonoBehaviour a reference to a Entity? As I said you can clear the collectors of reactive systems also with systems.ClearReactiveSystems().. quote from the unity page: \"foreach loops\nIn versions of Unity prior to 5.5, a foreach loop iterating over anything other than an array generates garbage each time the loop terminates. This is due to boxing that happens behind the scenes. A System.Object is allocated on the heap when the loop begins and disposed of when the loop terminates. This problem was fixed in Unity 5.5.\" (in the end unity will optimize it so there is mostly no difference in for/foreach. just syntactical sugar). Don't get me wrong, but your request seems like you need someone to take on the task of an architect for your future project. Sounds like paid work to me. Have you already looked at all the resources here in the community? I am sure the community can help you with specific questions about your implementation ideas. Do you already have experience with ECS and a rough idea for start? Here you can find more information and inspiration:\n- https://github.com/sschmid/Entitas-CSharp/wiki/How-I-build-games-with-Entitas-%28FNGGames%29\n- https://github.com/sschmid/Entitas-CSharp/issues/610\n. Copy from chat:\nEntitas works with code generation that needs to be recompiled. Would be very tricky to add new components to entitas and hot reload your c# part\nif it's just hot loading lua scripts and the entitas side doesn't gets affected there's no problem\njust use nlua or moonsharp\nI mean there are options to do assembly hot reloading in c# but that's a more common problem and not related directly to entitas itself. There is a typo in line 3 GameContex. Also, you can't assume that there will be these contexts. For this extension you need to extend the code generator.. Introduce a TickComponent  that is getting increased by every execution cycle. Now you can react to that component. You also can save the delta time by an DeltaTimeComponent on the same entity. Now you can also react to tick and save the delta time. In your feature you can react to tick or delta time.Depending on what you need.. You can no longer access the component data with a reactive system. The component is already deleted. It is possible if you register for a group event:\n```\npublic class FaceRemoveSystem  : IInitializeSystem, ITearDownSystem {\nprivate readonly IGroup<GameEntity> group;\n\npublic FaceRemoveSystem(GameContext game) {\n    group = game.GetGroup(GameMatcher.Face);\n}\n\npublic void Initialize() {\n    group.OnEntityRemoved += Group_OnEntityRemoved;\n}\n\npublic void TearDown() {\n    group.OnEntityRemoved -= Group_OnEntityRemoved;\n}\n\nprivate void Group_OnEntityRemoved(IGroup<GameEntity> group, GameEntity entity, int index, IComponent component) {\n    Object.Destroy(entity.face.gameobj);\n    e.face.sequence.Kill();\n}\n\n}\nBut be careful. This method is called immediately when the component is removed. This means there is no order and you should avoid such systems as much as possible. I hereby warned you :smile:. I'm a bit curious here. if you use a field with @ like `int @int` you can access it like `object.int` and not `object.@int`. . The API would stay the same but we could use component names like `FloatComponent`, `BaseComponent` and `EventComponent`. I can think of the following solution: the code generator has an array of all reserved keywords (https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/) and if the naming matches one of these it writes it with an @.. I assume you are talking about getting data from the backend/your server? I posted this a while ago in the gitter chat: \nI have a service that receives data from backend and can create command components with the respond packages. Every backend package consists of a set of responds 1..* with type and content. I can register for types with the method `RegisterResponse<StartMissionResponse, StartMissionResponseCommandComponent>()`\nThe implementation for that looks like this:\nprivate void RegisterResponse()\n    where TResponse : IServerResponse\n    where TResponseComponent : IResponseComponent, new() {\n    this.client.RegisterResponse((response) => {\n        var entity = this.commandContext.CreateEntity();\n        var component = new TResponseComponent {\n            Value = response\n        };\n        entity.AddComponent(CommandComponentsLookup.componentTypeIndices[typeof(TResponseComponent)], component);\n    });\n}\npublic interface IResponseComponent : Entitas.IComponent {\n    IServerResponse Value { set; }\n}\n```\nFrom that point I can react as usual with reactive systems.\nRegister reponse in the service (client) looks like this: void RegisterResponse<T>(Action<T> callback) where T : IServerResponse. In the service I'm saving every registered response like that this.clientResponses.Add(typeof(T).Name, new ClientResponse<T>(callback)). When the backend gives me some packages I check my response dictionary and call the corresponding callbacks with the deserialized data.. Why not split the components into different ones so you can control which fields you want to replace? In your question I see 7 different components.. Sure you don't need to split data if you don't get any advantages from it. You only need to split of you need to react on fields independently.\nIt's not Dark Souls - it's single responsibility principle. If this is the state of the entity you need then you should write logic that doesn't transform the entity into some full-hp-dead man or vice versa. Maybe it's just me, but I like small components with just 1-2 fields and systems that have only 3-5 lines of code. . Jenny can generate with compile errors. The statement in FAQ refers to the free version here in github. \n\"Alternatively, you can eliminate these steps and the issue itself entirely when refactoring by using the new Roslyn code generator [Jenny] available on the Asset Store.\". There is none.. Define \"everything\". I would say the business logic should be completly in ECS.. The only problem I see is that you have to choose naming for your systems in a feature that corresponds with the order - if you don't want to add sub-features (and they also need the correct naming for ordering). So if the DestroyEntitySystem should run after the KillEntitySystem, what do I do? Putting it in a DestroyFeature would end in the same result. I like the idea very much, but naming stuff with _1_ ... _2_ doesn't seem right.. Hello and welcome to the community. Please note the correct formatting of your code. Your request is pretty hard to read.\nThe behavior shown is intentional. Reactive systems are triggered by changes and pass the current data from the component. The state after your processing for the next Execute is e. As a result, you also get this data in the system.. As mentioned before: Please take into account the correct formatting of your code. Your follow-up message is even harder to read than the first one. \nThe behavior shown is intentional. The system processes the current data of the component when it calls the Execute, which is always e in your case.. Only the current data of the component of each entity when the execute is called is transferred in the reactive system. Therefore, in your case: 1.. This behavior is not possible if the Execute is called only once between the individual changes to the data. Either you call Execute after each change or you use GroupEvents. With GroupEvents you can react directly to any change regardless of the Execute order. Here is the code:\ngameContext.GetGroup(GameMatcher.StringData).OnEntityAdded += (group, entity, index, component) => Debug.Log(\"String: data \" + entity.stringData.Data);\nThis method is called immediately when the component is added.. Not really. We currently have a total of 1.7k components in our project with 800 in the largest context. So far we don't have any problems.. Yes, we support the current version up to iPhone 6, but we also plan to support 5s.. You are welcome pal. @optimisez Around 3,5k systems. Mostly reactive. Yes they all stay together all the time - loaded on start of app.. tons of sub parent systems :-D. We create a city builder game with tower defense elements so 30 fps is enough. More is nice to have.. The structure looks like the following:\n->Client\n-->UIFeatures\n-->ActionFeatures\n-->InputFeatures\n-->Services\n-->Factories\n->Simulation\n-->CoreFeatures\n--->DayFeature\n---->MorningFeature\n----->MorningComponent\n----->SomeMorningSystems...\n-->MetaFeatures\n-->CommandFeatues\n-->Services\n-->Factories\n Folder == Feature - Each folder needs a feature class.\nOf course it happens that logic is written twice, or it is forgotten that there are already components. I assume this happens with every big software project. Communication and documentation is the key.. Hello in the community. Unfortunately you have to give us more information about your bug. The code you showed is not very revealing. Please use the formatting for code for the next time.. You could write reactive systems that are reacting on changes of health and sending messages to your server and vice versa with the framework you prefer. You could probably send some kind of identifier so both computer know which entity is meant and than change the data so both are synced.\n//pseudo-code\nSendMessageOnHealthChangedSystem {\n   ctor(INetworkService)\n   Collector { return Matcher.AllOf(Health, NetworkId) };\n   Execute(entity) {  networkService.SendPackage(new HealthChanged(entity.networkId entity.health)) }\n}. Let me get this straight:\nOn your server an entity is created, based on a view component a GameObject with a Unity network component is also created. Based on this network component, a GameObject is also created in the client. You want to create a corresponding entity because this network component exists in the client on the GameObject?\nI don't think that sounds like a problem of Entitas. You could fire an action component with the NetworkId on the prefab which is created in the client, so that an entity is created which also has it as a component. (Something like (pseudocode):Start() -> context.CreateEntity().AddNewNetworkEntity(gameObject.GetComponent<NetworkComponent>().id))\nUsually you don't build something like this. Usually a GameObject is created in the client due to a change of the entity and not vice versa. (You should consider if the Multiplayer High Level API is the right one for your application.)\n. Hello and welcome to the community,\nas it seems, the components were not generated correctly. Have you already tried to regenerate them?. Very good. Now it seems to be generated :-)\nA small typo, but I think now you can continue happily?. Hello XiaoJueMing and welcome to the community,\nYou cannot rely on the order for the return value of the GetEntities method, because the entities are stored internally in the group as HashSet. For your problem there are surely several solutions. If you describe the case to me I can surely help you :). I thought about it a bit and want to throw the saying \"crash hard and early\" into the room. The syntax of course \"fuels\" the null check after the assignment. Especially in systems I expect an exception when I access values that are simply not available. Either I didn't think about the correct collector/filter or it's just an error in my logic. I can only imagine the syntax outside of systems in the view. Depending on how you manage your view. What do you think of that?. However, the component can also be wonderfully divided into several parts so that this \"hack\" would not be necessary at all. Especially the if_win gives me a headache :smile:. Order is not preserved. You have to save data for ordering yourself. Internal all entities are saved in a HashSet.. Yep. You did. I just wanted to confirm it because you put \"I might be wrong but I think\" in front of your sentence :smile:. ",
    "CuiXiaoliang": "Thanks very much! But I can't really get it, here is my definition for component\n```\nusing System.Collections.Generic;\nusing Entitas;\nusing Entitas.CodeGeneration.Attributes;\n[Platform,Unique]\npublic sealed class FriendsComponent : IComponent {\npublic List<UserInfoObject> friends;\n\n}\n```\nis this wrong? Or is there anything you know that can lead to this problem?\nAnd yes, I run jenny fix, it's very useful :). ",
    "defik2944": "I try to describe. \nThe first one - my turn is not equal to frame - cos of performance. I can reach only 4 turn in sec with a minimum 30 fps. \nHow i am say i have field with 150*150 cells where each cell each turn do few actions:\neach cell have int water and each turn have \"damage\" on dis water. So simlpe: int MyWater - SunDmg. \nHow i suppose it can be a first system who operated with 22500 array.\nThe next one is a little more complex. Some type of cells (ground cells) haveMyWater more than 100. \nI have a function that distributes water to neighboring cells. With some descrise.  \n\nIf to say otherwise i have WaterRelease() function who check all ground cells with water 100+ and release water in cells around. \nI have array of Bush. Dis array can have maximum around 20000 members. Each turn each member must to do:\ntake some water from ground cells.\ntake some sunenergy from sun (The same function as we used for the earth)\ndo energy from two previous operation\nspend energy as cost of  life each turn\ndie if dont have energy\nif have enough energy use two most hardest function:\n1) calculate new henom for childred\n2) born children\nit is only part for my Bushes and GroundCells. I have equal arrays for seeds and for animals. They do similar actions.\nvideo: https://www.twitch.tv/videos/220116334\nhow it works:\nall objects - ground cells, bushes and etc - scriptable objects, all functions works only with scriptable objects\ni have two manager\nfirst one: create a two pool of scritable objects for each type of my \"units\". Pool of dead and pool of life. In start all objects in pool of dead. When we need a new one manager take one from dead and drop it in life. most part of funtions work only with life arrays.\nsecond one: create a two pool of game objects. visible object and not visible. each turn each scritable object chek - i am visible? if yes dis manager take one game object from invisible pool, drop it in visible, accociate it with dis scriptable object, ask scriptable object: who u are? how u look like? where u? and say all of that to game object. game object choose a sprite, choose a position and then is becoming visible.\nits a main idea) \n. okay :) i ll try to do it. thx for answers @FNGgames @sschmid . ",
    "CreativeWarlock": "Glad I had a look into the issues section of this repository. When I went through the installation steps I got the same daunting error. I can only agree to @c0ffeeartc that error messages should always point to some solutions.. ",
    "aviv-jellybtn": "Hey, what's the status on this?\nWe've actually ran into an issue with our code today where we didn't want our ReactiveSystem to trigger when something was Removed but only when it was Replaced. but since calling Replace will trigger both Added and Removed it made us do some ugly workarounds.. ",
    "RealCosmik": "Perhaps in the filter make sure you state that entity does not have the component so then when the system is triggered it\u2019ll only execute when the entity does not have the component which would be similar to reacting on remove but with replace. Or just actually use the component generated remove method and then just use the add method. I\u2019ve even ran into sometimes where although using replace is just faster to do using removed and then add was just better for my system filtering . The only way I have implemented physics into my entitas system is having the collision emmiter such as this however as I said I dont know how to keep the entity as a master controller of its gameobject while using rigid bodies\n                public class CollisionEmitter : MonoBehaviour {\n\n       public string targetTag;\n\nvoid OnCollisionEnter(Collision collision) {\n    if(collision.gameObject.CompareTag(targetTag)) {\n        var link = gameObject.GetEntityLink();\n        var targetLink = collision.gameObject.GetEntityLink();\n\n        Pools.sharedInstance.input.CreateEntity()\n            .AddCollision(link.entity, targetLink.entity);\n    }\n}. that is old entitas code btw that I found on how collision can possibly be implemented i must say good idea. Heres an example of the views I used for a ping pong game I made with entitas\n\n```\nusing Entitas;\nusing Entitas.Unity;\nusing System.Linq;\nusing DG.Tweening;\nclass BaseGameView : BaseView, IBaseGameView, IGamePositionListener,IGameNameListener\n{\n    public GameEntity gameEntity { get; set; }\npublic void OnPosition(GameEntity entity, EntitasVec3 value)\n{\n\n    transform.DOMove(value, .1f);\n}\n\npublic virtual void Startup(GameEntity entity)\n{\n    gameEntity = entity;\n    gameEntity.ReplacePosition(new EntitasVec3(transform.position.x, transform.position.y, transform.position.z));\n    if (tag == \"Enemy\")\n    {\n        gameEntity.isEnemyFlag = true;\n    }\n\n}\n\n\n\nprivate void Awake()\n{\n}\n\nprotected string Getname()\n{\n    if (name.Contains('('))\n    {\n        int index = name.IndexOf(\"(Clone)\");\n        name = name.Remove(index);\n        return name;\n    }\n    else return name;\n\n}\n\npublic virtual void Link(IContext context, IEntity entity)\n{\n    EntityLinkExtension.Link(gameObject, entity, context);\n    if (gameEntity == null)\n    {\n        gameEntity = entity as GameEntity;\n    }\n    transform.position = gameEntity.position.value;\n    gameEntity.AddGamePositionListener(this);\n    gameEntity.AddGameNameListener(this);\n    gameEntity.AddBaseGameView(this);\n\n    if (gameEntity.hasName)\n    {\n        name = gameEntity.name.value;\n    }\n    else gameEntity.AddName(Getname());\n}\n\nprivate void OnDestroy()\n{\n\n\n}\n\npublic void Unlink()\n{\n    EntityLinkExtension.Unlink(gameObject);\n    gameEntity.RemoveBaseGameView();\n    Destroy(gameObject);\n}\n\npublic void OnName(GameEntity entity, string value)\n{\n    name = value;\n}\n\n}\nthen I had game view that also would be a rigid body\n using Entitas;\nusing UnityEngine;\nusing Entitas.Unity;\nclass RigidBodyBaseView : BaseGameView, IRigidBodyView\n{\n    protected Rigidbody rb;\n    public EntitasVec3 Velocity\n    {\n        get\n        {\n            return rb.velocity;\n        }\n        set\n        {\n            throw new UnityException(\"cannot set Velocity\");\n        }\n    }\npublic EntitasVec3 Getvelocity()\n{\n    return rb.velocity;\n}\n\npublic void InputForce(EntitasVec3 newtons)\n{\n    rb.AddForce(newtons, ForceMode.Acceleration);\n}\npublic void SynchPosition()\n{\n      gameEntity.ReplacePosition(rb.position);\n}\n\nprivate void Awake()\n{\n    rb = gameObject.AddComponent<Rigidbody>();\n    rb.useGravity = false;\n}\n\npublic override void Link(IContext context, IEntity entity)\n{\n    base.Link(context, entity);\n\n    gameEntity.AddRigidBodyView(this);\n}\n\nprotected void OnDestroy()\n{\n    if (gameObject.GetComponent<EntityLink>() != null)\n\n        EntityLinkExtension.Unlink(gameObject);\n    gameEntity.RemoveRigidBodyView();\n}\n\n}\n```\nand then I had a special view for entitys I wanted to be balls\n```\nusing UnityEngine;\nusing Entitas;\nclass BallView : RigidBodyBaseView\n{\n    private void OnCollisionEnter(Collision collision)\n    {\n        if (collision.gameObject.name == \"Player Goal\")\n        {\n            var score = Contexts.sharedInstance.gameState.GetEntitiesWithName(\"EnemyScore\").SingleEntity();\n            score.ReplaceScore(score.score.value + 1);\n            gameEntity.isDestory = true;\n            Destroy(gameObject);\n    }\n    if (collision.gameObject.name == \"Enemy Goal\")\n    {\n        var score = Contexts.sharedInstance.gameState.GetEntitiesWithName(\"PlayerScore\").SingleEntity();\n        score.ReplaceScore(score.score.value + 1);\n        gameEntity.isDestory = true;\n        Destroy(gameObject);\n    }\n\n    if(collision.gameObject.name== \"PlayerPadle\")\n    {\n        ServiceManager.DebugMessageService.Print(\"player paddle hit\");\n        rb.AddForce(new EntitasVec3(100, 0,0));\n    }\n    if (collision.gameObject.name == \"Enemy Paddle\"|| collision.gameObject.name == \"Player Two\")\n    {\n        ServiceManager.DebugMessageService.Print(\"enemy paddle hit\");\n\n        rb.AddForce(new EntitasVec3(-100, 0, 0));\n    }\n\n\n\n}\n\n\n\npublic override void Link(IContext context, IEntity entity)\n{\n    base.Link(context, entity);\n    gameObject.GetComponent<SphereCollider>().material = Resources.Load<PhysicMaterial>(@\"Materials\\bouncy\");\n}\n\n}\n``. hmm, If you want the system above to be a strictly be a charachter movement system for the local charachter that is controlled through the key board then I would addentity.movementinput.playerID==1` to be inside of your filter method \nHowever on first thought if you wanted not a charactermovement system but just a movement system for both local and network charachters Prehaps something like this:\n```\n[Game]\npublic struct PlayerIDComponent: IComponent\n{\n[EntityIndex]\npublic int value\n}\n```\nwith the EntityIndex attribute on your field you can search directly through the context. lets say ID of 1 is a local charterer and ID of 2 is a network character so then maybe you could have something like this \n```\nreadonly Contexts _contexts;\nGameContext _Gamecontext;\npublic MovementSystem(Contexts contexts) : base(contexts.input)\n{\n    _contexts = contexts;\n_Gamecontext=contexts.game;\n}\nprotected override ICollector GetTrigger(IContext context)\n{\n    return context.CreateCollector(InputMatcher.MovementInput);\n}\nprotected override bool Filter(InputEntity entity)\n{\n    return entity.hasMovementInput;\n}\nprotected override void Execute(List entities)\n{\n    foreach (var e in entities)\n    {\n        if (e.movementInput.playerId == 1)\n        {\n            foreach (var charachter in _Gamecontext.GetEntitiesWithID(1))\n            {\n                //movement code for local charachters here here\n            }\n        }\n    else\n    {\n        foreach (var networkcharachter in __Gamecontext.GetEntitiesWithID(2))\n        {\n            //movement code for network characters here\n        }\n    }\n}\n\n}\n`` __Gamecontext.GetEntitiesWithinsertcomponentname()` returns a hashset which is quick to iterate through. This system may not be the most efficient way but I believe it is a way to control both network and local entities in one system\n. on a second look it might look cleaner to separate network movement into another system because the one I just wrote looks a little wild haha but thats the idea. when you use  the entity index attribute as I did the GetEntitiesWithPlayerId  is a generated method that returns a hash-set of all the entities inside the context that has the given ID. I apologize for not reading the notes Thank you. no it is not the crash that was caused was mentioned in #711 so I just modified my custom point struct to avoid the editor crash  . I also was wondering If it was possible to manually update EntitasPure. I have also run into this problem to and I think different names would be very useful. Sorry for the late response I created a new unity project and checked out the generated code to see what was changed in the context files and noticed the added func delegate so i just went back and changed it in all my files and just noticed your comment THANKS . yeah I fixed this issue in my proj. ahhhhhhhhh I forgot about that the default value on the eventType param was eventType.Added okay i see glad to have that cleared up. As a followup question i am not sure if this was already explained somewhere or described in some documentation but I noticed that there is 3rd parameter 'priority' which defaults to 0. I have not fiddled with the that param what are the effects of it?. You could use anything as a prefab. Entitas is really just an extension to unity. if you wanted to somehow control the text of the 3d text mesh through entitas perhaps something like this\ncsharp\n[Game,event(eventTarget.self)]\npublic sealed class TextComponent: IComponent\n{\npublic System.Text.StringBuilder value;\n}\nthen in the prefab Perhaps something like this\ncsharp\nclass MeshComponent: monobehaviour, ITextListener\n{\n       void start()\n       {\n          var text_entity=contexts.sharedinstance.Game.createEntity();\n           text_entity.addText(new StringBuilder(\"the text you want\"));\n            text_entity.addTextListener(this);\n        }\n        public void OnText(GameEntity entity, StringBuilder value)\n         {\n             //here is where you would get the component of the textmesh and say the text of that mesh\n            //is equal to the value param thats here in this method\n           }\nwhen you create the entity does not matter that was just an example the only thing that would matter is that somehow your prefab got an entity that it would listen to for the text it contains. so in this example i just made the prefab create the entity so now in your systems anytime the  the text of the \"text_entity\" is changed the prefab would reflect whatever the text was. that was the purpose of adding the the ITextListener interface\n. ",
    "mrobaczyk": "systems.DeactivateReactiveSystems() helped! Thanks a lot!. Could you point me code in Entitas.VisualDebugging where you iterate over all Features and Systems and where you list them in they Unity inspector?. Yes thanks for help. Now i have to implement what I want.. ",
    "VergilGao": "@FNGgames  Thank for your advice.\n i think I find how to solve my problem:\nOnly which system setup the timer can remove it.\nso my timer looks like this:\n```\n    public class TimerComponent : IComponent\n    {\n        [EntityIndex]\n        public string name;\n        public float value, maxTime;\n        public bool isStopped;\n        public bool isBroken;\n    }\n```\nThen I extend the method about timer:\n```\npublic static class TimerComponentExtension\n    {\n        public static void AddTimer (this GameEntity e, string newName, float newMaxTime)\n        {\n            e.AddTimer (newName, 0f, newMaxTime, false, false);\n        }\n    public static void ReplaceTimer (this GameEntity e, float newValue)\n    {\n        e.ReplaceTimer (e.timer.name, newValue, e.timer.maxTime, e.timer.isStopped, e.timer.isBroken);\n    }\n\n    public static void ExtendTimer (this GameEntity e, float newMaxTime)\n    {\n        e.ReplaceTimer (e.timer.name, e.timer.value, newMaxTime, e.timer.isStopped, e.timer.isBroken);\n    }\n\n    public static void StopTimer (this GameEntity e)\n    {\n        e.ReplaceTimer (e.timer.name, e.timer.value, e.timer.maxTime, true, e.timer.isBroken);\n    }\n    public static void BreakTimer (this GameEntity e)\n    {\n        e.ReplaceTimer (e.timer.name, e.timer.value, e.timer.maxTime, e.timer.isStopped, true);\n    }\n\n```\nAnd this is my timersystem:\n```\npublic class TimerTickSystem : IExecuteSystem\n    {\n        private GameContext _context;\n        private IGroup _group;\n        public TimerTickSystem (GameContext context)\n        {\n            _context = context;\n        _group = _context.GetGroup (GameMatcher.Timer);\n    }\n\n    public void Execute ()\n    {\n        foreach (var e in _group.GetEntities ())\n        {\n            if (e.timer.isStopped || e.timer.isBroken) { continue; }\n\n            e.ReplaceTimer (e.timer.value + Time.deltaTime);\n        }\n    }\n}\n\n```\nOK, if a system creates SomeBuff.\n...  // create an entity for SomeBuff here.\nsomeBuff.AddTimer(\"SomeBuff\",10f);\nthen it just create a group:\ngourp = context.GetGroup (GameMatcher.AllOf (GameMatcher.SomeBuff, GameMatcher.Timer);\nOh, I think GetEntitiesWithTimer (\"SomeBuff\"); is much better.\nOK, I will check every entities in the group every frame and\n```\nif(e.timer.isStopped) { ... }\nif(e.timer.isBroken) { ... }\nif(e.timer.value > e.timer.maxTime) { ... }\n```\nI think the solution is \"ECS\" enough :)\n. @fayte0618 thank you.. agree with you. my opinion:\n[Game(hasEvent = false /* as default */ ), Ui(hasEvent = true , bindToEntity = false /* same as Event(false) */)]. @Noicon \n```\nprotected override void Execute(List entities)\n{\n    foreach (var e in entities)\n    {\n        // now we can access the ViewComponent and the DestroyedComponent\n        if (e.destroyed.component_name == \"Action\" && e.hasAction)\n        {\n            e.action.timeline_x.Kill();\n            e.action.timeline_y.Kill();\n            e.action.timeline_agl.Kill();\n            e.RemoveAction();\n        }\n    /* else is not suitable here */ if (e.destroyed.component_name == \"Face\" && e.hasFace)\n    {\n        sth\n        e.RemoveFace();\n    }\n    else if .....\n}\n\n}\n. \u9879\u76ee\u8def\u5f84\u5efa\u8bae\u4e0d\u8981\u7528\u4e2d\u6587\uff08\u867d\u7136\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u82f1\u6587\u8def\u5f84\u9020\u6210\u7684\u5f71\u54cd\u3002. Tools/Entitas/Preferences\nThen just close the new window and everything would be ok..\n [Game]\n    public sealed class HealthComponent : IComponent {\n        public float currentValue;\n        public float baseMaxValue;\n        public float currentMaxValue;\n    }\npublic static partial class GameEntityExtention {\n    public static void AddHealth (this GameEntity entity,float value) {\n        entity.AddHealth (value, value, value);\n    }\n\n    public static void ReplaceHealth(this GameEntity entity,float value) {\n        entity.ReplaceHealth (value, entity.health.baseMaxValue, entity.health.currentMaxValue);\n    }\n}\n\n```. ",
    "djfountain": "Since launching on the asset store you have removed the functioning Standalone Code Generator from the open source version. I get that you want to make money out of a portion of your work, but even as someone that buys the asset store version, I can't see to find the source for the code generator to make my own routines. \nFurthermore you cannot describe the github version as open source because you have been deleting functional entitas code and moving it to the closed source desperate devs project, replacing the code with pre-compiled dlls.\nThe whole point of open-source is that I want to own, understand and modify the code. You have invalidated all of these factors.\nI have paid for the asset store version to support you but will continue to use a much older one which doesn't have these issues. I wont be singing your praises as I have been or using your code in future projects if the project continues this downward turn.. The mindset of someone who specifically chooses open-source software is that they want to understand, debug and modify it, they also want it to be future proof for different platforms ect. \nThey want to own it.\nFurthermore, why would I start a big project which relies on a code-generator that is closed-source, it's just not reliable.\nThe main issue with all of this is trust. We are kind of forced to trust Unity to maintain support for platforms / be bug free. However someone like me, staking their business on YOUR software shouldn't need to invest that same trust in an individual. Sure, I can trust your passion, intellect and dedication, but I'm not staking my livelihood on it. I would however pay you for the source code, so if anything goes wrong AND you disappear, I can still fix it / recompile myself.\nI've been burnt before, something similar to this happened with some software I used on the game Lumino City. I could have fixed it if I had the source. After that I made a concerted effort to pick better software when I made the next couple of games at \"State of Play\". I was planning on using Entitas for my next.\nThere are also a few times when I have wanted to delve deeper and see how things work inside the deperatedevs libraries and I had previously modified the old code generator to make flatbuffer code to save and load my contexts to a file. I did this my modifying the executable at some point.\nIf I could do what I wanted to do with Entitas then I wouldn't be writing here.\nI know you have spun a narrative about how these tools \"were never part of Entitas\"... but lets be honest, you cannot deny:\nLast year Entitas was a whole open-source framework, with an open-source code generator.\nThis year Entitas is partly open-source, with a closed-source generator which i can write plugins for.\nMaybe I am the anomaly here, and if you think that you still have a customer-base after people like me have gone then I wish you all the best, but I think you are making a big mistake.\nWritten-text has a way of coming across different to the reader, I want you to know that I really like the software and I wish you all the best in your new venture to make it better. I just wanted to warn you about how the most recent changes have come across. I would use your code and I would pay you for it, but I just can't now. I'll be using an old version of Entitas which is still open-source\nThanks for listening!\n. > Making these things closed won't even allow other people give you a helping hand.\nThere is stuff that I have added which I would genuinely consider adding.\nI looked into merging my changes with the current version and that's when I realised that a bunch of stuff was stripped out into closed-off DLLs.\nI'm not comfortable using them in my product let-alone contributing.\nI was able to pull apart all of entitas and have it just sitting in my project folder as .cs files. The only exception is the codegenerator attributes dll which needs to be the same as the code generator one.\nFor all other purposes this is loads better since I can see exactly what is going on and I can much more easily make changes.\nWhy have you packaged Entitas up as it is with loads of dlls in separate solutions?. ",
    "radiys92": "Our team check this way and event handling like this is unprofitable in huge projects, while you can't subscribe for group of components.\nFor example, 2 cases:\n- it's  ok if you subscribing for PlayerDataComponent, but what if you need update UI only when group of components PlayerDataComponent and PlayerAvatarResourcesComponent added \n- if you need to update online badge near concrete user from 2 users in multiplayer session avatar when group of PlayerDataComponent and PlayerIsOnlineComponent added/removed\nAlso few features will be useful here:\n- filtering components (for example, subscribe only for StoreItemComponent with Gift in ItemType field)\n- subscribe to adding and removing of components\n- subscribing to components-flags\n. ",
    "yanjingzhaisun": "Got it. Turn off internal ones and stick with Roslyn. Working now!. turns out that Context.Reset() will turn off the Observer.. Thanks! That did work! I was wondering about if there is a way to add the observer event handler back?. ",
    "nicovain": "Pretty sure that is only available on the asset store version and not the GitHub version. Which one are you using?. ",
    "dafong": "Yes I used the github version. So the jenny is a better code generator ? . ",
    "KirliAdam": "I already have IdComponent for my project and I'm not so sure how to implement this.\n```csharp\nusing Entitas;\nusing Entitas.CodeGeneration.Attributes;\n[Game, Input]\npublic class IdComponent : IComponent\n{\n    [PrimaryEntityIndex]\n    public int value;\n}\n```. @T2RKUS Thank you.\n@Draugor Thank you.. ",
    "guitax": "For now I'm using something like your code gen example in #451.\nAnd I think that in general if your generated classes are partial, then we can have more \"freedom\" in creating custom code generators.\nBesides what harm can it make? \ud83d\ude01 . ",
    "RomanZhu": "Can you post your experiments into some repository?. I would prefer solution of @StormRene with queue for all external inputs \nSo only one action is served in a single tick . I was thinking about making queue only for actions who are using resources (trading, eating, etc) \nand serving all other actions without queue (movement, etc). Yep, that's a good one\nthis issue was created to be dedicated for that separate feature, #591 is too broad . here is the part for extracting ( you need to set absolute filePath)\n```\nCall :UnZipFile \"./\" filePath\nexit /b\n:UnZipFile  \nset vbs=\"%temp%_.vbs\"\nif exist %vbs% del /f /q %vbs%\n\n%vbs% echo Set fso = CreateObject(\"Scripting.FileSystemObject\")\n\n%vbs% echo If NOT fso.FolderExists(%1) Then\n%vbs% echo fso.CreateFolder(%1)\n%vbs% echo End If\n%vbs% echo destFolder = fso.GetAbsolutePathName(%1)\n%vbs% echo set objShell = CreateObject(\"Shell.Application\")\n%vbs% echo set FilesInZip = objShell.NameSpace(%2).Items()\n%vbs% echo objShell.NameSpace(destFolder).CopyHere(FilesInZip, 16)\n%vbs% echo Set fso = Nothing\n%vbs% echo Set objShell = Nothing\n%vbs% echo Set FilesInZip = Nothing\ncscript //nologo %vbs%\nif exist %vbs% del /f /q %vbs%\npause\n```. I think it should be this way:\n\n\nYour characters should have some IdComponent \nThen you should have 2 input entity emitters, local and network, they both emit entities with MovementInputComponent AND IdComponent of character it belongs to\nThen you should have system that loops through all MovementInputComponent with IdComponent \nand if it finds Character with same IdComponent, then it applies MovementInputComponent values to position.\n. In my example I have \n```\nusing Entitas;\nusing Entitas.CodeGeneration.Attributes;\n[Game]\n[Event(true, EventType.Added)]\n[Event(true, EventType.Removed)]\npublic sealed class SelectedComponent : IComponent\n{\n}\n```\nAnd it shows no errors in Rider  :c\nTry to separate attributes for now. Is that behavior started today? Or it was like that from the beginning. You have autoimport.bat file as a sibling of assets folder, right? launch it\nalso jennyserver.bat should be as a sibling of assets folder\nI'll tell you how it should be done in a few hours, if it won't be solved yet. show screenshot of your Asset folder siblings. launch Jenny-Auto-Import.bat. I think about Event and GlobalEvent. There is a Service pattern https://github.com/sschmid/Entitas-CSharp/wiki/How-I-build-games-with-Entitas-%28FNGGames%29\nI implemented this one in my old template https://github.com/RomanZhu/Match-Line-Entitas-ECS/blob/master/Assets/Sources/Services/ElementService/ElementService.cs\nThat's how I use those Services https://github.com/RomanZhu/Match-Line-Entitas-ECS/blob/master/Assets/Sources/GameController.cs#L25\n. @sschmid Nice timing :D 8 seconds difference :D\nI like that hiding Service behind interface, easy to mock/change engine/change pathfinding asset/etc.\nI just pass that Services blob into system constructor, it is easy to track down and understand how everything works. @T2RKUS \nThat's looks like the thing i described\n(Also hardly customizable) Whole chunk configuration is just a JSON (not a prefab) and everything is set up in some editor tool. Then we create all entities from configuration with positions -> views are loaded for basic elements (platform, coin, forcefield...)\nWhen I started doing that project that approach was first which came to me, but it would be more time consuming to do than the solution I choosed.\nI have chunk editor, which has a collection of chunk names (resources path), their parsed widths and 3d preview now.\nBut it was created to be a full chunk editor, where I can place elements and then just load them all from a config. Probably I will make it that way, as full random is hard to make interesting\n\n. What i was thinking is I need no additional monobehaviours for it...\nBut yeah, your approach is easier to setup, thanks\nI will make a preview of map in that editor for validation tho\nSoon it will be in examples page of entitas :D. After I implemented it and worked with it for a little while my view is complete now. I was wrong, that setup is harder to manage.\nThe workflow with creating new scene, dragging prefabs into it, pressing Save in the menu... is not that bad.\nBut when I need to add new element type (coin for example) I would need to 1)Add new monobehaviour. 2)Edit saving and loading scripts. Now that is cumbersome.\nMy initial approach (chunk prefabs which contains elements, who create entities when requested) proved its strength and simplicity from workflow side of things. With nested prefabs coming soon it will be a complete workflow for a solid game.\nTo be clear I could use OdinInspector and it would smooth out a lot of things, but it's a sample project, so I can't use paid addons. With that asset there will be no need to edit scripts when new element type is created.\n. ",
    "cruiserkernan": "Is a command just an entity with some components?. @FNGgames Great post! \nI want to get access to the collider bounds of a gameObject. Following your workflow would I create a ColliderComponent and access the value from there or create a service to access the collider bounds? Since I don't have a viewComponent anymore I can't access it through the view.. So in my case I could have a IColliderController and have a ColliderComponent?. @FNGgames Thanks for your help!. @FNGgames What is your tag on UnityGameView for?. ",
    "nomadfighter": "hi everyone, how to avoid this code?\n```\n[Buff, Effect, Actor]\npublic sealed class RemovedComponent : IComponent\n{\n}\npublic interface IRemoved : IEntity, IRemovedEntity { }\npublic partial class ActorEntity : IRemoved { }\npublic partial class EffectEntity : IRemoved { }\npublic partial class BuffEntity : IRemoved { }\npublic class RemovedSystem : MultiReactiveSystem, IInitializeSystem\n{\n    public RemovedSystem(Contexts _contexts) : base(_contexts)\n    {\n}\n\npublic void Initialize()\n{\n\n}\n\nprotected override void Execute(List<IRemoved> entities)\n{\n    foreach(var e in entities)\n    {\n        IView view = null;\n\n        ///////////////////////////////////////////////////////////////////\n        // because Actor and Effect has view component, but buff is not a viewable entity\n       if (e.contextInfo.name == \"Actor\") \n        {\n            var a = e as ActorEntity;\n            view = a.view.value;\n        }\n        else if (e.contextInfo.name == \"Effect\")\n        {\n            var eff = e as EffectEntity;\n            view = eff.view.value;\n        }\n        // any way to avoid?\n       ///////////////////////////////////////////////////////////////////\n\n        if (view != null)\n        {\n            view.Unlink();\n            view.Hide();\n        }\n        e.Destroy();\n    }\n}\n\n```\nthanks. thanks all , I used @StormRene solution. I think too many components in one context is too hard to maintenance.\nsplit ur game context to multi contexts?. ",
    "zhuchun": "Hi, I really like the idea but don't know how to implement TDD with a code generator.\nIn unit test, we write logic first and then write some tests for it. But in TDD, it requires us to write tests first and then write logic to pass them. However, it's hard to do these in Entitas if no proper component has been generated first since the IntelliSense cannot predict it. \nWrite & generate component first seems working, but it's breaking TDD somewhat, any good suggestion?. Thank you @c0ffeeartc \nI also notice if we implement architecture like How I build games with Entitas (FNGGames) did, it would be harder to be tested. Because system now relies on Services while some of them may need UnityEngine runtime.. @FNGgames Thank you, I really like your post! It clarifies a few pain points in my past works and helps me get out of there ;). I also want to know more tips about how to run Entitas safely in a multi-threading environment.. OK, here's how I made it.\n\n\nImport from Asset Store, so now we have Jenny.zip and a few other files.\n\n\nCreate a new Class Library project in VisualStudio/Rider, for example, name it MyEcs.\n\n\nUnzip Jenny.zip, copy everything into the MyEcs root folder.\n\n\nOpen PowerShell in the root folder (Hold Shift and right-click on any blank area).\n\n\nRun .\\Jenny\\Jenny.exe new prefernces.properties, this will give you a new prefernces file.\n\n\nEdit prefernces.properties, change DesperateDevs.CodeGeneration.Plugins.ProjectPath value to match up your project name, say MyEcs.csproj, then save and exit.\n\n\nRun .\\Jenny\\Jenny.exe auto-import -s and select the Roysln generator.\n\n\nRun .\\Jenny\\Jenny.exe doctor to see if everything is OK, then run .\\Jenny\\Jenny.exe gen. If nothing bad happens, you should able to see the same folder structure has been generated just like you saw in Unity.\n\n\nCreate a folder and name it Libs in the root folder, copy DesperateDevs.Utils.dll, Entitas.CodeGeneration.Attributes.dll, Entitas.dll from YourUnityProjectPath\\Assets\\Entitas\\ into the Libs folder.\n\n\nOpen MyEcs in your IDE, add reference to dlls you just copied. You're good to go now.\n\n\nHowever, I'm NOT sure if there's any dll file is needed/unneeded. Would be appreciated if anyone can confirm that.\nCheers\n. Try to use Entitas in hybrid mode, so you can have ComponentSystem + ECS + Lua and do crazy stuff. Beneath links may help.\nMultiReactiveSystem\nGame Architecture With Entitas\nPersonally, I would avoid merging an ECS framework with an existing project, it's time-consuming. Mixing up Lua, ComponentSystem, ECS is another thing I may never do, that's way hard for the whole team to follow up ;). @StormRene Agree. If I have to do this, I would try to abstract Lua parts as a service interface, Lua can hotfix the implementation while Entitas don't have to know about Lua. . Update:\n\"Show States\" button in the preferences panel shows the correct number of components, but the generator cannot create them.. Alright, it turns out quite simple. In my case, I have an ECS.amsdef file in my component folder so Unity can generate an ECS.dll. However, Unity also creates a new project named \"ECS.csrpoj\" in the root folder( you can see this in the IDE) . So changing DesperateDevs.CodeGeneration.Plugins.ProjectPath from Assembly-CSharp.csproj to ECS.csrpoj fixed my problem ;). You can find them here, there's a chapter about it at the end.. BTW, there's an important thing was missing, check this out Component Listener is not working.\nTL;DR Add a generated GameEventSystems to your feature/system.. How about mono instead? Check it out. Cool! Didn't notice there's a new update, this helps a lot, thank you!\nOn Tue, Jul 3, 2018 at 2:54 PM Simon Schmid notifications@github.com\nwrote:\n\nYes, you can specify the port\nStarting with Entitas 1.6.1, there is a new setting\n[image: jenny-port]\nhttps://user-images.githubusercontent.com/233700/42203275-8d1032ec-7e9e-11e8-8534-a07a459f8dec.png\nAlternatively, open your properties file and update these keys\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/sschmid/Entitas-CSharp/issues/736#issuecomment-402032424,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADO9GddmMoUbXh-BDB3uNt_QqMrCcMoPks5uCxUwgaJpZM4VAYb-\n.\n. Greetings, the code generator has generated \"I{YourComponentName}Entity\" for you. In fact, it will generate such an interface for whatever component defined in multiple contexts. I believe that's the thing you want instead of \"IDestroyed\".. Hi, have you seen this article How I build games with Entitas? Personally, I take the whole ECS system as a big simulator, so everything inside the core determines how my game behave and the view layer only cares about how data be displayed.. Greetings, if you've any problem with the asset, try delete and re-import it again. If it doesn't work for you, take a look at my post, you can setup Entitas for any generic environment, w/o a GUI.. Yes, but the community is open, in case someone meets/solved your problem, let's keep things in English :)\n\nI hadn't tried the GitHub version, but there're things could stop you from getting it works, say compiler error, missing files etc. Try Entitas in an empty project again and see if it works.. 1. You didn't metion about what framework/architecture you're using, that's crucial.\n\n\nIn general case, you may need a code generator/templates to help you develop your game easy and safe.\n\n\nWrap generated code as a service. Interesting, subscribed ;). Open the property file in your root folder, find a line with \"IgnoreNamespace\" and set it to false. Next time the code generator will give you something like \"MyNamespaceMyComponent\", it's long though.. As far as I know, that's not supported. \n\n\nThat's interesting, why would you do that? Maybe other solution can solve your problem, other than use namespace?. I'm using it with 2018.2.0f2, works fine. For general purpose, try to design your system as a reactive system, the overhead of an empty one is acceptable.\nFor something like \"OpeningAnimation\", either design it as an initialize system or put it in an empty scene so it could be destroyed. However, I think it's fruitless to make everything in ECS.. @StormRene That's off topic ;) But specify to this topic, I probably would not write a system to control animation directly, sending event instead seems better. There's no native implementation. Regarding your purpose, is that possible to create/destroy the whole entity on demand?. In general, you don't need the client-side prediction. Lockstep should only be used in the case you totally don't care about the network latency, say turn based games or LAN games. To predict things, you need to make sure the simulate rate is consistent while Lockstep has a mutable simulate rate.\nRegarding snapshot, I assume you want to make a fast-paced game, then you can do it like what @sschmid said. Rolling back the whole Contex means you will lose the processed input history, which is needed to re-simulate states.\n. @simonynx Check this video, the developer of Rocket League has explained lots of details and references in his speech. Personally speaking, it's hard to approach authoritative fast-paced game when your team is lack of developer/time because the requirements and workload are significantly higher than a single player game. Entitas/ECS is not the key, Overwatch is using ECS by the way.\nYou can find a few famous articles written by Valve and others, they're old but still the backbone of almost everything. The most recent games you can learn from are Rocket League and Overwatch, their developers have made excellent talks.. @sschmid Jenny is a life saver, I use it everyday with Rider, please consider to make it as a generic code generator even without Unity. I've made my own code generator based on T4, but it's far worse than Jenny. It would be great if we could customize Jenny, learning Roslyn from scratch is an overkill after all.. Hi, ECS is different from OOP so it would be hard to re-implement anything until you know how it actually works. ECS is data-oriented, which means you have to split your data and behavior. \nI would create an entity each time my UI change the scale, there should be a component storing localScale. Next, I would make an ExecuteSystem to calculate the correct localScale depends on the component. Last, I would make an Event to notify the button change its scale.\nNo doubt it's much more complex than BehaviorComponent, in practice I would use both of them, AKA \"Hybrid mode\". ECS will take care of my game logic while BehaviorComponent handles those trivial things like View, UI, Animation etc.\nTranslated by Google, I don't speak Russian ;)\n\u041f\u0440\u0438\u0432\u0435\u0442, ECS \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u041e\u041e\u041f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e-\u043b\u0438\u0431\u043e, \u043f\u043e\u043a\u0430 \u0432\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. ECS \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n\u042f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b \u0431\u044b \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u043c\u043e\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0439 localScale. \u0417\u0430\u0442\u0435\u043c \u044f \u0431\u044b \u0441\u0434\u0435\u043b\u0430\u043b ExecuteSystem \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e localScale, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u044f \u0431\u044b \u0441\u0434\u0435\u043b\u0430\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0435\u0434\u043e\u043c\u0438\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0443 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430.\n\u0411\u0435\u0437 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u044f, \u044d\u0442\u043e \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435, \u0447\u0435\u043c BehaviorComponent, \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044f \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0438\u0445 \u043e\u0431\u0430, AKA \u00ab\u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c\u00bb. ECS \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f \u043e \u043c\u043e\u0435\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u0438\u0433\u0440\u044b, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a BehaviorComponent \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0449\u0438, \u043a\u0430\u043a View, UI, Animation \u0438 \u0442. \u0414.. I don't speak Russian but glad to see Google Translate works well.\nI'm using the Asset Store version so didn't notice Event is missing in open source version. You're doing it in the right way. So as you can see ECS could make things complex, but it's up to you once you know how it works, good luck :)\n\n\u042f \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044e \u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438, \u043d\u043e \u0440\u0430\u0434 \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e Google Translate \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e.\n\u042f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0430\u043a\u0442\u0438\u0432\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043b, \u0447\u0442\u043e \u0432 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u0435. \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u044d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e ECS \u043c\u043e\u0436\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0435\u0449\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438, \u043d\u043e \u044d\u0442\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0430\u0441, \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0443\u0434\u0430\u0447\u0438 :)\n. Good post! There're only a few entities in my current project but every time I click on any entity the inspector will be frozen for half a minute, I guess these are related.. Hi, may I ask if that's necessary to destroy entities manually in your case? In general, DotNet GC should take good care of it. I usually instantiate Contexts manually instead of use Contexts.Shared, it's nothing special, just a pool of pools. In this way, I can have as many instances as I want, and they should be safely handled by DotNet GC.. Thanks. But my IDE still can't find them, would you mind show me the namespace, or do I need to download some files from the repo?. Great! I've found them, can't wait to see what I can do \ud83d\ude04 \nIn Unity, these DLLs are in the Editor folder, so the custom script should be put in an Editor folder as well.\nDependencies should be needed for the pure C# project, I will check it out soon.. My general usage is something like this\nif (e.hasMyComponent){\n  // operate multiple properties \n}\nI'm not sure if I need the nullable version \ud83d\ude05 They're almost the same, should be useful for someone who needs single property operation though.\nif (e.myComponent != null){\n  // operate multiple properties \n}. Regarding Photon Bolt, I'm not sure how are you going to make it works with an ECS implementation. Bolt is a well-made framework comes with its own code generator, which means you have to organize your code in traditional style, otherwise, you may have problems when trying to use EntityBehavior/GlobalBehavior. You can try the Github version first, it's free and fully functional, the asset store version is better though.. > In the client side question, will it be necessary to rewrite many things?\nNo, You can use BehaviorComponent/ OOP scritps as services, check this out How I build games with Entitas (FNGGames)\n\n\nWould I have to rewrite it on the server side as well?\n\nAssuming that you're building a 100% server authoritative game. The answer heavily depends on what's your server side. If you want to use the headless server, then no, it's just Unity without graphics. However, if you're going to build things from a pure C# project, then yes, you can't use any Unity things, at least for the core layer.. Maybe it's NOT a good idea unless your server-side application is just a relay server(like a broadcaster).\nIn practice, I always try to keep both side scripts as similar as possible, leave alone that the difference between ECS and Component system is huge. It would be painful to implement everything in 2 different ways. Assuming you are building a fast-paced network game, server and client usually share the same code but just work in a different way. Say a client send command input to the server and then the server sends command result and world state back. In order to get a nice and smooth client-side prediction result, your code should be deterministic. Implement deterministic code for both ECS and Component system would be a nightmare, at least to someone like me.\nIn short, you can write both sides in either way, no problem.\nRegarding how Entitas works, it knows nothing about Unity, just like your server side code. So you can reference the UnityEngine namespace in a system and ask it to update transform position for you.. Oh, I see. That's normal. Regarding your first two questions, you may need to rewrite your game logic on the RoomServer/GameServer. Otherwise, your teammate may yell \"Oh WTH, why this game logic is ECS on the client but OOP on the Server?\" \ud83d\ude04 So it's better to keep them as is.\nEntitas itself is easy to learn and use, the code generator is the only black magic there.. Thank you @FNGgames \ud83d\ude04 \nI guess sorting entities by an incrementing id manually would be an easy yet concrete solution. > Or creation time perhaps?\nGood idea! Creation time should be good enough for most cases. In my case, multiple reliable network messages/entities might be created at the same frame and I still want their order to be guaranteed \ud83d\ude04 . CMD is my favorite, it fits any environment say a pure C# project. This file is human readable so don't be afraid to edit it manually.  Backup first. Hi, this is the thing I would like to avoid if possible. In practice, I consider data as a \"flat\" structure in the ECS, so they can be batched/multi-threaded easily. ECS is an architecture other than ComponentSystem, thus \"Thinking in ECS\" might be helpful. Indeed, there is some relationship like \"Pet\" in games, you can use the index to fetch them and it's not going to be a big problem in general.. You can write a flag component like \"RecordableComponent\" and use JSON.net to serialize instances. However, I'm almost sure that this is not what you want by practice. For cool things like kill cam and rewindable gameplay, it's important to filter out unnecessary data, otherwise, the player's memory/harddisk would be blown up quickly because you're storing data at the 60Hz frequency.\nSo as you can see, it's not an Entitas related problem. IIRC, Zaks made a talk about how to implement a playback system, you can google that video, it's insightful.. If you are making a multiplayer game, don't use JSON, it's still too big\nunless your game is simple enough. We usually use a code generator to create\ncontracts for State, Input and other stuff then serialize them as a\ndict/hashtable byte[]. Google GafferOnGames, there are lots of\nessential posts about networking on it and you will see how picky it is to transfer data in\na real game. In short, every bit you saved is $$$ :wink:. There's an auto-generated Feature called GameEventSystems take response for event delivery, I guess you didn't put it in the loop?. Interesting. How about changing the implementation a little bit, like using an entity carrying a component to tell others what Map has been destroyed, and have another reactive system to destroy related entities? IIRC, OnComponentRemoved happens after the component has been removed, thus no data could be access anymore. Perhaps event delivery is following this pattern?. Sure. I'm curious about this as well, just don't have time to check the source right now.. ",
    "SpellChucker": "Ah sorry, I did see that but I did a generate before auto import. Thank you.. ",
    "Randhall": "Doesn't work even when run with mono.\nI'm running windows 8 with unity 2017.3 freshly imported preferences without any change and it still fails to auto import.\nWhen running the doctor it lists a bunch of unused keys in the preferences and running fix fails as well.\n\n. Yup that did it for me thanks ;)\nNow i can enjoy those delicious garbage free group iterations :D. ",
    "vorrin": "this assigns the path : \nfor /f \"tokens=*\" %a in ('dir Jenny.zip /b /s') do set p=%%a;\nto a variable p that you can echo or access(<-assumption) with:\necho %%p \nI think you'll then need to package some zip program with it, I got one here  not sure if the licence is  ok with what you need, but with that, this line should do what you want:\nfor /f \"tokens=*\" %a in ('dir Jenny.zip /b /s') do  unzip -d  . %a. ",
    "majorika": "how about using powershell?\nwrite unzip.ps1 file:\n```\nstep 1: find Jenny.zip\n$jennyPath = gci -filter \"Jenny.zip\" -recurse | Select-Object -ExpandProperty FullName\nstep 2: unzip to current folder\n$ShellExp = New-Object -ComObject Shell.Application\n$zip = $ShellExp.NameSpace($jennyPath)\n$pwd = (Get-Item -Path \".\\\").FullName\n$dest = $ShellExp.NameSpace($pwd)\n$dest.Copyhere($zip.items(), 0x14) # 0x14 : do not display progress window and 'yes to all', more info: https://msdn.microsoft.com/en-us/library/windows/desktop/bb787866(v=vs.85).aspx\n```\nyou can run this script (using batch file or command line)\npowershell -executionpolicy bypass -Command \"./unzip.ps1\"\n. @yt09 \nWhen I tested version 1.7.0 on the 2018.2 version, it just worked fine.\nCould you tell me more informations? ex. full project path, any console logs. @yt09 \nOh, there are some issue with Chinese character path.\nYou should change path's chinese character to english, for now.\n@sschmid \n\"auto import\" feature is not contained in this repo.\nCould you check this issue with chinese character path?. you can find a answer from this. #429 . ",
    "Djadavin": "Hello. Sorry for bad english.\nMy current aproach like whis:\nI have a BaseStat class with float Value and Name. From BaseStat i have Primary, Secondary , Derived \nand Vital stat classes for progression stat like strenght, unchanging like mass, derived from others like HitChance and everchanging stats with Current/Value.\nStats are hold in simple wrap around Dictionary.\nFor stat modifiers i have class with strings Stat, Layer(like armor, shield, total), and float value. And have component with StatModifier and unitID added to entity for each modifier.\nStatUpdateSystem gets StatCollection and all entities with StatModifiers fro each unit and calculates them.\nI dont know if its good for your game, as im not prof.\nI get inspiration from https://www.youtube.com/watch?v=wqEk5mzJB3M.\nAnd for effects from https://www.youtube.com/watch?v=TIQlX2WPCAQ.\n. ",
    "ropollock": "@sschmid Could you also post UnityView here?. @sschmid I'm not seeing where this _linkedEntity reference is coming from?. Seems to me if you have two separate behaviors for local or networked you should have two separate systems to maintain a single responsibility for a system. You just need to find a good filter to differentiate between the two player types for each system.. ",
    "yika-aixi": "oh.. Is still the same error. You run the Game, and then in Game or Input to create an entity and the add DestroyedComponent you will see the error. Now I deleted it and created\n public partial class GameEntity: IDestroy {} \nThe and\n public partial class Inputntity: IDestroy {} \nBut still the same mistakes, that I'm a little confused\nCan you give me an example of can run?thank you!\nNew\n. I suspend use MultiReactiveSystem, somewhat embarrassed. ",
    "artfabrique": "Any progress on that?. Anybody? Please!. @FNGgames Thanks, but where I can find an example, showing how should I organize architecture for a Fixed Update loop? . ",
    "Angryhead": "Posting just to show my support right now.\nI had a working system using Blueprints for a while, and it worked fine, but with the new Event system it has gotten tied to MonoBehaviours in some cases and I haven't gotten deserialization for those working yet.. ",
    "Zifkan": "As i understood \"2 input entity emitters\" you mean create two separated Systems?. I tryed as u say, but just with hardcode for main character \nreadonly Contexts _contexts;\nprivate IGroup<GameEntity> _characters;\n\n\npublic CharacterMovementSystem(Contexts contexts) : base(contexts.input)\n{\n    _contexts = contexts;\n    _characters = contexts.game.GetGroup(GameMatcher.AllOf(GameMatcher.PlayerId, GameMatcher.CharacterPosition));\n}\n\n\nprotected override ICollector<InputEntity> GetTrigger(IContext<InputEntity> context)\n{\n    return context.CreateCollector(InputMatcher.MovementInput);\n}\n\nprotected override bool Filter(InputEntity entity)\n{\n    return entity.hasMovementInput;\n}\n\nprotected override void Execute(List<InputEntity> entities)\n{\n    foreach (var e in entities)\n    {\n        if (e.movementInput.playerId == 1)\n        {\n           var player =  _characters.GetEntities().FirstOrDefault(entity => entity.playerId.value == e.movementInput.playerId);\n            player.ReplaceCharacterPosition(new Vector3(player.characterPosition.value.x+ e.movementInput.horizontal, player.characterPosition.value.y + e.movementInput.vertical, 0));\n\n        }\n    }\n}\n\ni think its looks like some ugly or im mistaken. Ty for advice but a bit late im already realize with one system for local and network, but im thinking about separate it.\nI created Input Identifer:\n[Input]\npublic class InputPlayerIdentifierComponent: IComponent\n{\n    public int playerId;\n}\nand have Movement Component:\n[Input]\n public class MovementInputComponent: IComponent\n  {\n        public float horizontal;\n        public float vertical;\n   }\nEmit Input System which always emit Identifier and then another inputs:\n```\npublic class EmitInputSystem : IInitializeSystem, IExecuteSystem\n    {\n        Contexts _contexts;\n        IInputService _inputService;\n        InputEntity _inputEntity;\n    public EmitInputSystem(Contexts contexts)\n    {\n        _contexts = contexts;\n        _inputService = _contexts.meta.inputService.instance;\n    }\n\n    public void Initialize()\n    {\n       _inputEntity = _contexts.input.CreateEntity();\n    }\n\n    public void Execute()\n    {\n       _inputEntity.ReplaceInputPlayerIdentifier(Random.Range(0, 9)); // Just for test while haven't network implementation\n       _inputEntity.ReplaceMovementInput(_inputService.Horizontal, _inputService.Vertical);\n       _inputEntity.ReplaceRotationInput(_inputService.RotationX, _inputService.RotationY);      \n    }\n}\n\n```\nAnd Movement System:\n```\npublic class CharacterMovementSystem : ReactiveSystem //IExecuteSystem//\n{\n    readonly Contexts _contexts;\npublic CharacterMovementSystem(Contexts contexts) : base(contexts.input)\n{\n    _contexts = contexts;\n}\n\n\nprotected override ICollector<InputEntity> GetTrigger(IContext<InputEntity> context)\n{\n    return context.CreateCollector(InputMatcher.AllOf(InputMatcher.InputPlayerIdentifier,InputMatcher.MovementInput, InputMatcher.RotationInput));\n}\n\nprotected override bool Filter(InputEntity entity)\n{\n    return entity.hasInputPlayerIdentifier && entity.hasMovementInput && entity.hasRotationInput;\n}\n\nprotected override void Execute(List<InputEntity> entities)\n{\n\n    foreach (var e in entities)\n    {\n        var player = _contexts.game.GetEntitiesWithPlayerId(e.inputPlayerIdentifier.playerId).SingleEntity();\n        player.ReplacePosition(new Vector3(player.position.value.x + e.movementInput.horizontal, 0, player.position.value.z + e.movementInput.vertical));\n        player.ReplaceRotation(Quaternion.Euler(2 * e.rotationInput.AxisY, 2 * e.rotationInput.AxisX, 0));            \n    }\n}\n\n}\n```\nIm confused is using GetEntitiesWithPlayerId generated method properly way and may be its really better use two systems. Im still confused its bad practice to use GetEntitiesWithPlayerId or not?. @sschmid, as i understood for example i have 10 characters with IDs form 1 to 10. And im creating 10 MovementInputComponents for of each character. Should this components all been created once and reused each other or what u mean \"create new Input entities everytime and not reuse a single one\" ?. ",
    "nashnie": "@fayte0618 thanks.. ",
    "DuckOfDoom": "@sschmid Thanks a lot.. @sschmid  I think it might be useful if I, for example, want to abstract my logging system. I'd have log component and will create entitites with this component when I need to log something. Is it a good way of doing so? . ",
    "Aslan85": "Hi,\nSimon did a youtube video to set the code generation in a terminal.\nIt was 6 days ago, you have probably your answer but I send the link -> https://youtu.be/L-18XRTarOM. Add [Unique] before the declaration of your class.\nYou need to declare\u300cusing Entitas.CodeGeneration.Attributes;\u300d\n```\nusing Entitas;\nusing Entitas.CodeGeneration.Attributes;\n[Unique]\npublic sealed class ScoreComponent : IComponent\n{\n    public int value;\n}\n```\n. ",
    "ResourceHog": "This link uses unity. OP specifically asked for one without unity.. ",
    "livingstonhan": "@sschmid  Thanks a lot, It's my mistake, I did not realize that matchers can be cached.. ",
    "TheHacky": "It is a little bit difficult to give you an answer because we don't know your whole system.\nBut in most cases, Rene approach will be a good one. Another one is to capsulate gameObject instantiation from asset creation. So, first of all, create your gameObject and in features afterwards load the assets. Each for every component.. Did you have a look into Editor.log?. For a roadmap have a look at https://waffle.io/sschmid/Entitas-CSharp. I think there is no reset method for PrimaryEntityIndex, but if you destroy the entity or remove the component the index will be free again. So, be careful to destroy all unneeded entities or remove all unneeded components, especially when (re-)loading a scene.. Hi,\nthat will be great. :). Huhu,\nthanks, Simon. I fully oversaw it. \nBut I'm wondering. In my case, a collector is retaining my entities, but after every update, I call ClearCollectedEntities of my collector and in the first run everything works fine. Why doesn't it work in the second run and some of my entities won't be released?\nHere a short code example:\n```csharp\npublic sealed class CollectSomethingToProcede : IExecuteSystem\n{\n    private GameContext _gameContext = null;\n    private IGroup _commandGroup = null;\n    private ICollector _collector = null;\npublic CollectSomethingToProcede(GameContext gameContext)\n   {\n    _gameContext = gameContext;\n    _commandGroup = _gameContext.GetGroup(GameMatcher.Command);\n        _collector = _gameContext.CreateCollector(GameMatcher.CommandExecute.Removed());\n    _collector.ClearCollectedEntities();\n   }\npublic void Execute()\n   {\n    if (_commandGroup.count > 0) return;\nList<GameEntity> buffer = new List<GameEntity>();\nforeach (GameEntity entity in _collector.collectedEntities)\n{\n    if (!entity.isDestroyed && !entity.isCommandExecute)\n    {\n        entity.Retain(this);\n    buffer.Add(entity);\n    }\n}\n\n_collector.ClearCollectedEntities();\n\nforeach (GameEntity entity in buffer)\n{\n         // proceed entities\n}\n\nfor (int i = 0; i < buffer.Count; i++)\n{\n    buffer[i].Release(this);\n}\n}\n\n}\n```. Ok. I mentioned some weird behaviour for me.\nI got the source and added some debug logs to Retain and Release methods. I got sometimes retain logs twice of the same type of collector and both collectors will be added. The call stack is the same and it happens in the frame directly after each other. So it seems that there are two collectors. I mentioned this behaviour with my own collector, but also with other collectors. Is that a normal behaviour?\nHere an example of my logs:\nEntity 95 retained for Collector(Group(AllOf(Switching))) // retainCount: 11 // owners: Items -> Game, Group(AllOf(Id)), PrimaryEntityIndex(Id), Group(AllOf(Color)), Group(AllOf(Asset)), Group(AllOf(Position)), Group(AllOf(Position).AnyOf(Color, Destroyable)), Group(AllOf(Color, Position).NoneOf(Superstone)), PrimaryEntityIndex(Position), Group(AllOf(Switching)), Collector(Group(AllOf(Switching)))\nEntity 95 retained for Collector(Group(AllOf(Switching))) // retainCount: 12 // owners: Items -> Game, Group(AllOf(Id)), PrimaryEntityIndex(Id), Group(AllOf(Color)), Group(AllOf(Asset)), Group(AllOf(Position)), Group(AllOf(Position).AnyOf(Color, Destroyable)), Group(AllOf(Color, Position).NoneOf(Superstone)), PrimaryEntityIndex(Position), Collector(Group(AllOf(Switching))), Group(AllOf(Switching)), Collector(Group(AllOf(Switching)))\nIn my first run, it seems that also the released method will be called twice, but in the second run for my type of collector only once.\nIs it possible that I  create my own collector twice, because of loading my scene twice? Won't collectors be destroyed after changing the scene? Should I explicitly deactivate them or something else?. Ok. I think I'm right. Now, I deactivate my collector in TearDown and everything works fine.\nI think it should be mentioned that custom collectors should be deactivated if you don't use it anymore.\nWill collectors live forever? Should we cache and reuse them with Entitas or handle that for yourself?. > What's the point of Jenny server. Why don't just use jenny generate instead of the server?\nThe server is for caching purpose. So running the server will result in faster generation process with the second run. You can also use Jenny alone, but then without caching and every run will take longer.. Hi,\nI would suggest to listen for OnEntityAdded only and define a second Component for destroying. If OnEntityAdded is called, you proof for a view and if there isn't one you add it. You can do adding and destroying with very simple ReactiveSystems.. ",
    "dharmeshinitfusion": "Can you please explain how to clean up the context. and how to use ITeardown and IInitialize.\nSorry, I am new to Entitas.. Thank you so much @StormRene. I will try with your solution.... Oh, yeah \nthank you @c0ffeeartc.. ",
    "forsakenyang": "thanks @c0ffeeartc ,after set Ignore Namespaces to false all errors are gone.\nAnd then I get lots of loooong name components :(\nCan I have it both ways?. ",
    "raymondleungmh": "Hi, is it possible to call CreateEntity in the Job System? My scenario is that, I have a collision detection system, if they collided, I will create entity with a custom collision event component for later use. . OK. Thanks!. ",
    "tonypig1988": "Unity 2017.3.1f1 (windows). I just try Unity 2017.2.0f3.\nthe same issues.\nand I use the enter key on my keyboard on Unity 2017.2.0f3.but it still doesnt work.\nI am Installing Unity 2017.3 and try it again.\n. no anything in the console . and I use the enter key on my keyboard on Unity 2017.3.1f3.but it still doesnt work. it is done! thank you very much!. Jenny.Ignore.Keys = Entitas.CodeGeneration.Plugins.Assemblies\nJenny.SearchPaths = Assets\\Entitas\\Editor\\Plugins\\DesperateDevs, \\\n                    Assets\\Entitas\\Editor\\Plugins\\Entitas, \\\n                    Jenny\\Plugins\\Entitas.Roslyn\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = TestDemo.CSharp.csproj\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Sources\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\n. D:\\EntitasWork\\TestDemo>.\\Jenny\\Jenny gen\nGame\\GameComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentLookupGen\nerator\nInput\\InputComponentsLookup.cs - Entitas.CodeGeneration.Plugins.ComponentLookupG\nenerator\nGame\\GameAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nInput\\InputAttribute.cs - Entitas.CodeGeneration.Plugins.ContextAttributeGenerat\nor\nGame\\GameContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nInput\\InputContext.cs - Entitas.CodeGeneration.Plugins.ContextGenerator\nGame\\GameMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nInput\\InputMatcher.cs - Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nContexts.cs - Entitas.CodeGeneration.Plugins.ContextsGenerator, Entitas.VisualDe\nbugging.CodeGeneration.Plugins.ContextObserverGenerator\nGame\\GameEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nInput\\InputEntity.cs - Entitas.CodeGeneration.Plugins.EntityGenerator\nEvents\\EventSystems.cs - Entitas.CodeGeneration.Plugins.EventSystemsGenerator\nFeature.cs - Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerato\nr. I use Jenny doctor . it say      ?????  No problems detected. Happy coding :). but I can generate component\n. I delete it.now I cant generate any component\n. and I try create a new project, and install Entitas .but I cant generate Component\n. first, I define the Battle context in the properties.but I cant generate BatlleComponent .and then I discovery I cant generate any Component. so I create a new project in unity .and install Entitas.copy the scripsts to new project.and delete Battle context .but I cant generate any component anymore.\n. I find my mistake .  when I auto import the Roysl is not always 2.    sorry for wasting your time\n. D:\\EntitasWork\\TestDemo>.\\Jenny\\Jenny.exe auto-import -s\n??  Potential plugin collision: ComponentDataProvider\n0: Keep all (no changes)\n1: Keep Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\n2: Keep Entitas.CodeGeneration.Plugins.ComponentDataProvider\nthis time it is 1.. @VergilGao Thanks\uff0cit works\uff01. ",
    "surferau": "If you update the game code while unity is in play mode then this is a normal behavior and not only with entitas.. Thank you. you can separate systems into different sets. \n```\n_systemsAlwaysToExecute = new Feature(\"Systems\")\n            .Add(new ConfigSystem(contexts))\n            .Add(new InputSystems(contexts));\n_systemsExecuteWhenCondtionIstrue = new Feature(\"Building Systems\")\n            .Add(new BuildingSystem(contexts));\n_systemsAlwaysToExecute.execute();\nif(GameStateService.condition== true)\n  _systemsExecuteWhenCondtionIstrue.execute();\n```\n. Thank you. I will look into it.. \u041a\u043e\u0440\u043e\u0447\u0435, \u0443 \u0442\u0435\u0431\u044f \u0435\u0441\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c(entity_item) \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0444\u043b\u0430\u0433\u043e\u0432, \u0438\u0442\u0435\u043c1 \u0438\u043b\u0438 \u0438\u0442\u0435\u043c2; \u043f\u043e\u0442\u043e\u043c \u0443 \u0442\u0435\u0431\u044f \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u0441\u0442\u0435\u043c, \u043e\u0434\u043d\u0430 \u0440\u0435\u0430\u0433\u0438\u0440\u0443\u0435\u0442 \u043d\u0430\u0436\u0430\u0442\u0438\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 \u0438\u0442\u0435\u043c1,2 \u0438 \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0437\u0443\u043d\u043e\u043a \u0438 \u0441\u0442\u0430\u0432\u0438\u0442 \u0444\u043b\u0430\u0433 \u0434\u043b\u044f entity_item& , \u043f\u043e\u0442\u043e\u043c \u0435\u0441\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0437\u0443\u043d\u043e\u043a \u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043d\u043e\u043f\u043e\u043a. \u0442.\u0435. \u0443 \u0442\u0435\u0431\u044f \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u043e\u0439 \u0442\u043e \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0437\u0443\u043d\u043a\u0430, \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u043d\u043e\u043f\u043e\u043a \u0438 \u0442.\u0434. \u0438 \u043c\u0435\u043d\u044f\u0435\u0448\u044c \u0442\u044b \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0434\u0430\u043b\u044c\u0448\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c, \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u043d\u043e\u043f\u043e\u043a \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.. ",
    "ChessMax": "So, the problem is code recompilation . Thanks.. You can iterate over all component types via {Context}ComponentsLookup.componentTypes or via ContextInfo.componentTypes to figure out (with reflection API) what components extend EntityRefComponent. Then iteration index would be the index of component. With these indices you can do what ever you need (context.GetGroup(Matcher<TEntity>.AnyOf(indices))).. ",
    "BarbaricWizard": "Just started getting this error myself, and apparently it's something corrupted in the currently open Animation window.  It only happens when clicking on GameObjects in the Scene Hierarchy while the Animation window is active and in focus in the Editor.  I've yet to determine if there is something wrong with my animations that might be broken.  I was working on changing pre-existing animations in my last session prior to when I started getting this error, so there could definitely be broken animations still in one of my controllers.. It would seem it is having trouble finding the following:\nhttps://github.com/Unity-Technologies/UnityCsReference/blob/master/Editor/Mono/Animation/AnimationWindow/GameObjectSelectionItem.cs\nI'm thinking that maybe they changed this either into or from being a ScriptableObject due to the nature of the error message.. ",
    "exlineo": "In my project, the error came from transition between animations and 'Any State' state. You can see it in live in the Animator window in play mode.. ",
    "lai32290": "Hi @FNGgames , about your first answer, is this way common been done using Entitas? I already did this way but I just not sure if it's the best/correct way to do.\nThank you so much, you answered my question. Oh! I didn\u2019t note that! I see a quick search in Match One repo now, is that system generated by Entitas?. It's working! thanks you so much!. Or the correct way is checking if the global variable is exist, before set the value?. Oh, I see, but when I load scene, it\u2019ll not reset entities, is it normal?. Why when I use context.game.DestroyAllEntities() it's throwing error like this?\nContextStillHasRetainedEntitiesException: 'Game' detected retained entities although all entities got destroyed!\nDid you release all entities? Try calling systems.ClearReactiveSystems()before calling context.DestroyAllEntities() to avoid memory leaks.\nEntity_4(*2)() - Collector(Group(AllOf(Asset, View))), Collector(Group(AllOf(Player, PlayerStatus)))\nEntitas.Context`1[TEntity].DestroyAllEntities ()\nMainPageController.Restart () (at Assets/Scripts/MainPageController.cs:24)\nUnityEngine.Events.InvokableCall.Invoke () (at C:/buildslave/unity/build/Runtime/Export/UnityEvent.cs:165)\nUnityEngine.Events.UnityEvent.Invoke () (at C:/buildslave/unity/build/Runtime/Export/UnityEvent_0.cs:58)\nUnityEngine.UI.Button.Press () (at C:/buildslave/unity/build/Extensions/guisystem/UnityEngine.UI/UI/Core/Button.cs:36)\nUnityEngine.UI.Button.OnPointerClick (UnityEngine.EventSystems.PointerEventData eventData) (at C:/buildslave/unity/build/Extensions/guisystem/UnityEngine.UI/UI/Core/Button.cs:45)\nUnityEngine.EventSystems.ExecuteEvents.Execute (IPointerClickHandler handler, UnityEngine.EventSystems.BaseEventData eventData) (at C:/buildslave/unity/build/Extensions/guisystem/UnityEngine.UI/EventSystem/ExecuteEvents.cs:50)\nUnityEngine.EventSystems.ExecuteEvents.Execute[IPointerClickHandler] (UnityEngine.GameObject target, UnityEngine.EventSystems.BaseEventData eventData, UnityEngine.EventSystems.EventFunction`1 functor) (at C:/buildslave/unity/build/Extensions/guisystem/UnityEngine.UI/EventSystem/ExecuteEvents.cs:261)\nUnityEngine.EventSystems.EventSystem:Update()\nBut if I remove them one by one, this problem is not happening\ncsharp\n_contexts.game.GetEntities().ToList().ForEach(e => e.Destroy());\n. That's weird, because I have a function like this:\ncsharp\npublic void Restart()\n{\n    _contexts.game.GetEntities().ToList().ForEach(e => e.Destroy());\n    SceneManager.LoadScene(\"Main\");\n}\nAnd this function is being called by UI button directly.. Thanks @StormRene ! cleaning reactive systems just fixed my problems!!!. ",
    "bfsrjose": "Awesome :-). Well, you can maintain all paths relative to the properties directory (or make them absolute) and then adjust them shortly before writing to the project file ~ assuming at that point you know where the project file you are writing to is.. I found a workaround, I have a csproj next to the properties file that I'm using just for Jenny (jenny.csproj).\nThe overall project setup is kind of like this:\nAssets\nAssets/Built/library1.dll\nAssets/Built/library2.dll\nExternalProjects/Library1/library1.csproj \nExternalProjects/Library2/library2.csproj\nJenny.csproj\nentitas.properties\nentitasAssembly.properties\nSo right now I have library1.csproj and Jenny.csproj pointing at the same files and a separate entitas properties file for building without Jenny from the assemblies that are added to the Assets folder.. Awesome, thank you :-). ",
    "kenofori": "@sschmid \nThank you for your detailed reply.\nIs there any plans to eventually base it on Unity's ECS (even in future)\n. Last question, please do know that im coming from a noobish background so want to clear the confusion. \nI took the 2016 session you guys did and saw you using foreach instead of for loop. (isnt foreach generate garbage and slow).\nI'm convinced to go with your framework due to stability and production, especially its on sale and hopefully learning it will also help me switch to Unity'e ECS when it becomes stable after a year.. Thanks, i have started the documentation, v impressed with performance comparisons  :)\nwill come back here for any further questions. @FNGgames Thank you for your reply, ill definately check this project in detail and ask here to adopt according to your given guide.\nCan you please also look at following issue, and advise me how should handle it in an entitas based application where one seperate scene will b doing just that minimal functionality, how should i be using entitas there?\nhttps://github.com/sschmid/Entitas-CSharp/issues/702\nThanks. Thanks @zhuchun , can you please explain for a layman whats the difference between [Event(true) and false. Where would i use which one?. Thanks :). ",
    "TargetDetected": "Same problem here. Also, it seems that AddListener can add the same listener multiple times? It's not clear for me. . @christianvoigt Yes, this is the best solution in my opinion too. @FNGgames For AddListener you can use Map to check the key appearance in the list of listeners. And add new listener only if it is the new one. . Right... well, list copy then. Listeners almost useless if you can't remove them anyways. . https://files.gitter.im/sschmid/Entitas-CSharp/mqCF/Entitas.CodeGeneration.Plugins.dll  In case someone needs this - i added .ToArray() for EventSystems listeners firing, so you can now safely modify collection (call remove listener in the event handler). ",
    "aammfe": "Thank you very much, i decided to build a small matching game like project from a learning point of view, will ask questions related to it in future.. Thank you for your reply,\nQuestion, why not unload this main menu scene along with related controller? Wouldn't it be an issue if lets say main menu scene is quite graphic heavy and even disabling it might take some memory? . That makes sense now, Thanks :)\nUnloading other scenes means their systems can be destroyed too, which is great.\nContinuing, as Match 3 only has just one score field, is there any heavy ui related example project (with more buttons, HUd etc) so i can learn from it how to handle these fixed already drawn elements in entitas?. I have created a file and opened it in VS.\nproject name is Assembly-CSharp.csproj\nbut still getting error. neither '.\\Jenny.exe auto-import' is working nor \nJenny.exe gen \"E:\\Unity Work Space\\Entitas hello world\\Preferences.properties\"\n=>\nCould not find file 'Assembly-CSharp.csproj'\nPress \"Assets -> Open C# Project\" to create the project and make sure that \"Project Path\" is set to the created *.csproj.. I have launched it =>\nServer is listening on port 3333\nand run command\n` .\\Jenny.exe auto-import'\n=>\nCouldn't find any *.properties files!\nUse 'new Preferences.properties' to create an new file.\nThanx . \n\n. Yes Thanx :). Hello!!!\nSorry For late replay . yes it did helped . \nThanx \ud83d\udc4d . I m using unity 2018.1.0f2. ",
    "rglobig": "If your id component is based on the creationIndex (or GUID, doesn't matter) you can of course also reset it via the context. The problem you describe, however, is that the scene, i.e. the view, has already been destroyed and reloaded, but the context does not reflect this at all and your logic is based on it. The best thing to do would be to clean up the context first to the state you need and only then to unload and reload the scene. You could solve the problem by introducing a component that describes that the entity should be destroyed during a scene change. Something like a flag DestroyOnUnloadComponent. Then you can write a system that will be triggered on your scene change and destroy all entities with this flag.. The [Event(false)] is triggered if any entity that has this kind of component in the group changes. [Event(true)] instead is only triggered if the specific component on the same entity, where the listener is attached, is changing. So you are basically \"binding\" the listener to a specific entity.. Are we talking about pure execute systems (not reactive) when executing the input and AI? If so, then I suggest switching the systems to a TickComponent and using them reactive on it. This component can then be controlled by a few systems. Especially when and how often it is changed/increased. I imagine that when entering or leaving the menu you create a FreezeAIActionComponent which causes the TickAIComponent to no longer be incremented by your tick-time systems. Further advantages would be that you can control the time better. How often, for example, the AI can be executed in general and so on.\nTo spin the whole thing further, you could add a new input UpdateTimeActionComponent. All systems in the TimeFeature react to this input and then update their specific tick components. In the respective subtime features there is then the handling how to handle Freeze. A kind of multiplier would make sense here, where freeze means a multiplication by 0. Let's say AITickMultiplierComponent. Furthermore there could be a general time multiplier as a component.. Would be possible if the generator generates it like this:\npublic BaseComponent @base { get { return (BaseComponent)GetComponent(GameComponentsLookup.Base); } }\nThe @ symbol allows to use reserved words. . You can use the watch window in VS to find specific componets. https://www.codeproject.com/articles/121623/tips-you-should-know-about-watch-window-while-d. ",
    "mchamplain": "@sschmid I didn't really investigate more at the time and moved Entitas back to Unity directly. But yesterday I tried to share the project with a colleague (via Git), and he got the exact same issue. When we deleted the Entitas folder from his side and re-downloaded the files from github, everything worked.\nSo I investigated a bit more and found that I was ignoring .meta files in my repo from the .gitignore in a parent folder. So yeah, the labels were gone when Unity regenerated the files.\nClosed. Solution: make sure the .meta files are versioned controlled\n. Maybe setting a name when creating the entity would be more useful that displaying the components names?\nvar e = gameContext.CreateEntity(\"player\");. ",
    "quabug": "Entitas.VisualDebugging.Unity.Editor.dll.zip\n. ",
    "sjsdzg": "HI,I met the same problem.I did not find Jenny.exe or Jenny-Auto-Import.bat\n\n. @aammfe @RomanZhu @sschmid @sjsdzg @robert-wallis \u3002I use unity5.6 or unity 2017.3,ECS1.13.0.They all come up with this. ",
    "DeusExMachina1993": "thanks for the reply,\nunblocking Dll didn't help me.\nbase on this link  seems specific unity functions only can call inside the editor.\nby adding simple try catch temporary ignore exception but I don't know why it's throwing from the system..\n. ",
    "Cloud2Li": "I don't find Jenny in the Entitas folder\n\nThat's all I can find in Entitas folder\nI can generate the base script \n\nI only can't generate the custom component and system\n. I'm sorry I didn't reply until now....\nI created a new project and it all worked fine. \ncomparing with old project, I find that the set of Assemblies is wrong.\nI can start to use 1.6.0 happily\uff0cthank you(:+1: . ",
    "fahall": "@kkohno I ran into this problem too. I fixed it by finding the occurrences of my component, NeedSpawn in your case, inside the Generated folder. There were a few files (e.g. GameNeedSpawn.cs if using Game context); these can just be deleted (or renamed if refactoring) and 3 references in the generated GameComponentsLookup.cs file. The lines referencing the component inside GameComponentsLookup.cs can be renamed or deleted. Do note that if you're deleting a component, you will need to decrement the values for all subsequent indices (e.g. public int NeedSpawn = 8;) such that they are monotonically increasing. \nYou can probably also just delete all the contents of the Generated directory. The only gotcha I've found there is that you need to make sure you have enumerated all of your contexts inside the Entitas menu. \nSounds like updating to the paid asset store version might also fix things. I'm still testing out Entitas before buying, but it's nice to know that the code generation will get out of the way more with the Roslyn version. . ... Oh man... I feel so dumb. Thanks @koden-km !. ",
    "syedhasan1964": "The only solution seems to be right-clicking on the script folder and then left clicking on the Reimport menu item.. ",
    "Noicon": "Before this, I thought IExecuteSystem is read-only, then I can't reset my component value in it.  And now I know Replace[ComponentName]. It works!\nThank you~~. .singleton is work-well and simple enough.\nThank all of you :D. Thank you for the answer.\nMaybe I should write the same lines after every .RemoveFace(), instead of using the system like this.\nActually I think, when .RemoveComponent(), the component should be really removed at the very end of this frame. So that we can do some last thing before it disappear.. @sschmid \nDestroyedComponent is a nice solution that I need. But one problem raises.\nWhat I write in DestroyedComponent.cs\npublic class DestroyedComponent : IComponent\n{\n    public string component_name;\n}\nIn reactive system\nprotected override void Execute(List<IDestroyableEntity> entities)\n{\n    foreach (var e in entities)\n    {\n        // now we can access the ViewComponent and the DestroyedComponent\n        if (e.destroyed.component_name == \"Action\" && e.hasAction)\n        {\n            e.action.timeline_x.Kill();\n            e.action.timeline_y.Kill();\n            e.action.timeline_agl.Kill();\n            e.RemoveAction();\n        }\n        else if (e.destroyed.component_name == \"Face\" && e.hasFace)\n        {\n            sth\n            e.RemoveFace();\n        }\n        else if .....\n    }\n}\nThe problem is that: \nIf I remove two different components in a frame, like \ne.ReplaceDestroyed(\"Action\"); \ne.ReplaceDestroyed(\"Face\");\n, only one component will be removed. \nI know why it happened. Because DestroyedSystem update every one frame.\nBut I don't know how to fix it.. I don't think the problem is here...\nIn one trigger of reactive system, e.destroyed.component_name is one-single string, it can't be \"Face\" and \"Action\" at the same time.\nActually, all problems in this issue already solve in #755 .\nBy writing my own .Add, .Replace, and .Remove, even doesn't need a react system to release the timeline(sequence).\nThank all of you!!. to VergilGao \nthank you!\nto StormRene\nI know what you mean.\nBut if a man is \"dead\", he can't be  \"full hp\",\"healthy\", \"almost-dead\".\nIf each state is a single component , more code must be write to prevent a full-hp-dead man.\nThat's too Dark Souls XD\nActually I think, if two components share same lifeline (always add, relace and remove together), then they should be one. \nSo that I can remember components as less as possible. . @StormRene\nDark Souls is a game which start with a full-hp-dead man.(:\u0437\u309d\u2220)\nThank you for telling me the single responsibility principle. \nI will reconsider which style take more advantage:D. ",
    "moixxsyc": "@zhuchun  thanks\uff0cthat help me alot ~. @FNGgames  thanks for your help~ . I change proj-path from projectName.csproj to Assembly-CSharp.csproj fixed my problem. ",
    "Leithan": "Sorry, it seems my mistake was assuming events were 1 to 1, when I had created them to be 1 to Any. In this case it will have to call them whenever an event of the same type is created.. ",
    "AtheosCode": "public class DestroyedComponent : IComponent\n{\n    public List<string> component_name;\n}\nIs it possible to use list to store component that needs to be deleted?\npublic class CommandComponent:IComponent\n{\n    public List<CommandEnum> commandList;\n}\npublic enum CommandEnum\n{\n    None = 0,\n    AddRender,\n    RemoveRender,\n    Destory,\n}\npublic static void AddSafeCommand(this GameEntity entity, CommandEnum command)\n    {\n        var list = new List<CommandEnum>();\n        if (entity.hasCommand)\n        {\n            list = entity.command.commandList;\n        }\n        list.Add(command);\n        entity.ReplaceCommand(list);\n    }\nI treat all one-time operations in the system as a command, and then process them through the command system, but I don't know if the design is appropriate.\nAnd it raises a new problem. If I disable the command system in editor debugging mode, the list data becomes very large in an instant.\n```\n private readonly Contexts _contexts;\n    private readonly IGroup _commandGroup;\n    public CommandSystem(Contexts contexts)\n    {\n        _contexts = contexts;\n        _commandGroup = contexts.game.GetGroup(GameMatcher.Command);\n    }\npublic void Execute()\n{\n    foreach (var entity in _commandGroup.GetEntities())\n    {\n        foreach (var command in entity.command.commandList)\n        {\n            switch (command)\n            {\n                case CommandEnum.None:\n                    break;\n                case CommandEnum.AddRender:\n                    if (entity.hasResource)\n                    {\n                        entity.AddSafeRender(entity.resource.resource);\n                    }\n                    break;\n                case CommandEnum.RemoveRender:\n                    entity.RemoveSafeRender();\n                    break;\n                case CommandEnum.Destory:\n                    entity.RemoveSafeRender();\n                    if (entity.isEnabled)\n                    {\n                        entity.Destroy();\n                    }\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException();\n            }\n        }\n    }\n}\n\n. cool. for c#  document\n When you write \"///\" brfore class or method etc. - IDE automatically add the XML documentation template for this.\nbut the final format is like this\n///\n///something\n///\nnot\n/// something\n/// something\n/// something\n```\nYou're going to have to work hard on the revision notes again.. ",
    "PythagoRascal": "Personally, I'd say \"@\" because \"_\" is often used for private variables and at first glance that might be confusing.. ",
    "Josecarz": "Hi Simon, Im very interested in work with you, it is possible another way to contact ? Thanks man.... ",
    "kompyang": "Unfortunately, my English and German are not very good.\n. The following text I use google to translate Chinese into English, I hope you can understand\nI think Itch.io is a cool choice. There are not only a lot of cool indie games, but also a lot of independent tools, plugins, text editors, programming languages, art resources, development frameworks, mixers, any Game development related stuff (you can also find an ECS-based console...) https://itch.io/devlogs/tools\nI think this is a good way to show Entitas, fully demonstrating the independence of Entitas. You may not be able to anticipate on how many copies it can sell on it, but it is a good way for developers other than used unity to get Jenny.\nBut this is just my personal suggestion, because I saw a developer asking a similar question on gitter yesterday (and I bought Entitas recently, and the unity's version is updated so frequently today. this is really very\nTangled, although unity's ECS can't be production ready now, it maybe better to use some day.At least Entitas makes me write very comfortable, I feel very strong under the BDD process, and my heart is very peaceful)\nbut  involving Jenny's positioning , and related protocol issues, at least the licensing agreement I saw in the unity store (except for entita and Roslyn).\nPart) is a plugin for a seat (confused that I didn't know at the outset what is the difference between Entita and github sold in the store)\n. \nI think [select all] should be placed on top. I encountered the same problem as you did when using the 1.8.1 version of the unity store. Have you updated the jenny file for 1.8.2, I think you should use the latest store version.\n. ",
    "nilayshah812": "Myself Nilay shah from India and I am interested in developing games. I know gimp, CPP language, also I am learning unity and csharp.. ",
    "yt09": "i use github release Entitas ,it doesn't have jenny.exe. \u54e5\u4eec \u662f\u4e2d\u56fd\u4eba\u561b \u8981\u4e0d\u7528\u4e2d\u6587 . \n@majorika  when i click continue nothing happen .no comsole logs. \n@majorika  this is project path outside i followed steps  click \" open C# project\" in Assets toolbar. ok ! it works, it chinese character path cause this problem. thank you everybody! @majorika @zhuchun @VergilGao. ",
    "LonelyEntity": "Thank you! It works perfectly now.\n\nFrom: Simon Schmid notifications@github.com\nSent: Friday, August 3, 2018 12:21:36 AM\nTo: sschmid/Entitas-CSharp\nCc: LonelyEntity; Author\nSubject: Re: [sschmid/Entitas-CSharp] How to use GetEntityLink()? (#752)\nEntityLink is not added automatically by Entitas, you're in full control.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/sschmid/Entitas-CSharp/issues/752#issuecomment-410086210, or mute the threadhttps://github.com/notifications/unsubscribe-auth/An3JJh9wMWXUKR-RuAare_aWNQIqN_twks5uM3twgaJpZM4VjtjN.\n. ",
    "foreverpains": "Thank you for your answer @zhuchun  , but this just adds namespace to the component, and I want to add namespace to GameEntity\u3002. ",
    "hurog": "Oops, I've ignored the grand rule - 'The project has to compile before you can generate'\nI have unchecked Jenny preprocessor 'warn if compilation errors' flag.\nSo the problem happens after running code generation with compile errors.\nhttps://github.com/sschmid/Entitas-CSharp/wiki/FAQ#q-how-do-i-regenerate-code-when-there-are-compile-errors\nSelf closing the issue :). Both free and paid version calls the code generator 'Jenny'?\nI think that's where I started confusing the two different versions.\nThank you for the information. I might try Asset Store version, too.. ",
    "tony707": "Just tried it on another computer and it works fine on 2018.2.2. I'll try to find what's happening. . Yes i did run this command. In fact the generation is working but it takes way too long to complete.. \nHere it is: https://pastebin.com/EDYET8rZ. Ok I think I found the issue, it looks like my Unity 2018 generated several csproj files for several packages. I used to set my entitas project path to ProjectName.csproj and it worked fine on Unity 5.6 and 2017 but here I have both Assembly-CSharp.csproj and ProjectName.csproj. If I set my project path back to Assembly-CSharp.csproj it works fine. . ",
    "saviorextr": "Hi , sorry for the very late reply , but the basic problem I faced was create a new .net core library project, add few components and tried code generation on the project file , which did not pickup the added components. I presume it could be the new .csproj structure. For now I've switched back to the .net framework project but if this could be supported in the near future would be great.\nI can add a sample project which I'm getting issues on if you'd like.  . ",
    "ip": "Thank you for the answer. I just realized that the consistent order isn't actually needed, I can deterministically calculate the Context's hash by hashing entities and sorting their hashes. All this is needed to detect desyncs.. ",
    "simonynx": "@sschmid thanks for the reply. I thought that would not need to take a snapshot for every frame, but like per 15 frames. Then revert to that shot, recalculate inputs and fast forward to the present. As you said, saving the important data of the prediction still needs to pick out Context changes, likely which entity destroyed or created or component data changes. For rolling back, the exact Entity should be reverted according to saving data.  Any good solution to that?  Would it be appropriate to add a GUID component for the coming search?  Or other methods. Thanks a lot.. @zhuchun yeah, you are right. I misunderstand the term of Lockstep. However, I still need Snapshot to roll back to a specific moment. You seem to be experienced to fast-paced sync game, have you tried converting one with Entitas? Thank you so much.. using CreateIndex to link entity and save all necessary components. Compare with entities of the current context, revert the difference. . ",
    "BorisovAlexey": "Hi, Simon.\nI set Jenny.SearchPaths to Jenny\n>Jenny\\Jenny.exe set Jenny.SearchPaths Jenny\nthen run \n>Jenny\\Jenny.exe auto-import -s\nDump:\n```\nJenny.SearchPaths\n\u251c\u2500\u2500 Jenny\n\u251c\u2500\u2500 Jenny\\Plugins\\DesperateDevs\n\u251c\u2500\u2500 Jenny\\Plugins\\Entitas\n\u2514\u2500\u2500 Jenny\\Plugins\\Entitas.Roslyn\nJenny.Plugins\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Unity.Plugins\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins\n\u251c\u2500\u2500 Entitas.VisualDebugging.CodeGeneration.Plugins\n\u2514\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins\nJenny.PreProcessors\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor\n\u2514\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ContextDataProvider\n\u251c\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider\n\u251c\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\n\u2514\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentLookupGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ContextGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.ContextsGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EntityGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EntityIndexGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EventEntityApiGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EventSystemGenerator\n\u251c\u2500\u2500 Entitas.CodeGeneration.Plugins.EventSystemsGenerator\n\u251c\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator\n\u251c\u2500\u2500 Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator\n\u251c\u2500\u2500 Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator\n\u2514\u2500\u2500 Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor\n\u251c\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor\n\u2514\u2500\u2500 DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port\n\u2514\u2500\u2500 3333\nJenny.Client.Host\n\u2514\u2500\u2500 localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath\n\u2514\u2500\u2500 DuelMagic.csproj\nEntitas.CodeGeneration.Plugins.Contexts\n\u251c\u2500\u2500 Game\n\u2514\u2500\u2500 Input\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces\n\u2514\u2500\u2500 false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory\n\u2514\u2500\u2500 Assets/Sources\nJenny.Ignore.Keys\n```\nDoctor: \ndoctor-v-2.txt\nBut this did not solve the problem( \nFor some reason, the generator does not see the Event attribute.... >Jenny\\Jenny.exe scan\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor\nDesperateDevs.CodeGeneration.Plugins: DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor\nDesperateDevs.CodeGeneration.Unity.Plugins: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogDoctor\nDesperateDevs.CodeGeneration.Unity.Plugins: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nDesperateDevs.CodeGeneration.Unity.Plugins: DesperateDevs.CodeGeneration.Unity.Plugins.WarnIfCompilationErrorsDoctor\nDesperateDevs.CodeGeneration.Unity.Plugins: DesperateDevs.CodeGeneration.Unity.Plugins.WarnIfCompilationErrorsPreProcessor\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentDataProvider\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentLookupGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ContextAttributeGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ContextDataProvider\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ContextGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ContextMatcherGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.ContextsGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EntityGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EntityIndexGenerator\n**Entitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventEntityApiGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventSystemGenerator\nEntitas.CodeGeneration.Plugins: Entitas.CodeGeneration.Plugins.EventSystemsGenerator**\nEntitas.Roslyn.CodeGeneration.Plugins: Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider\nEntitas.Roslyn.CodeGeneration.Plugins: Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator\nEntitas.Roslyn.CodeGeneration.Plugins: Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator\nEntitas.Roslyn.CodeGeneration.Plugins: Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\nEntitas.Roslyn.CodeGeneration.Plugins: Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nEntitas.VisualDebugging.CodeGeneration.Plugins: Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator\nEntitas.VisualDebugging.CodeGeneration.Plugins: Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nList contains required lines. But i fixed my problem :)\nI removed old .properties file and .userproperties file and create new properties files. \nThanks, Simon, for the help and the time spent!\n. ",
    "xiaomingfun": "//--------------\n// GameControllerTest.cs\n//-------------------\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Entitas;\nusing UnityEditor;\npublic class GameControllerTest : MonoBehaviour\n{\n    Systems _systems;\n    // Use this for initialization\n    void Start()\n    {\n        var contexts = Contexts.sharedInstance;\n        _systems = CreateSystems(contexts);\n        _systems.Initialize();\n    }\n// Update is called once per frame  \nint count = 0;\nvoid Update()\n{\n    _systems.Execute();\n    _systems.Cleanup();\n\n    count++;\n\n    entity.ReplaceStringData(count.ToString() + \"a\");\n    entity.ReplaceStringData(count.ToString() + \"b\");\n    entity.ReplaceStringData(count.ToString() + \"c\");\n    entity.ReplaceStringData(count.ToString() + \"d\");\n    entity.ReplaceStringData(count.ToString() + \"e\");\n\n}\n\nprivate void OnDestroy()\n{\n    _systems.TearDown();\n}\n\nGameEntity entity;\n\nSystems CreateSystems(Contexts contexts)\n{\n    var s = new Feature(\"Root System\")\n       .Add(new StringDataSystem(contexts));\n    entity = contexts.game.CreateEntity();\n    entity.AddStringData(\"123\");\n    return s;\n}\n\n}\n//--------------------\n//   StringDataComponent.cs\n//----------------------------\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Entitas;\npublic class StringDataComponent : IComponent {\n    public string Data;\n}\n//-------------------------------\n//      StringDataSystem.cs \n//------------------------\nusing System.Collections.Generic;\nusing Entitas;\npublic class StringDataSystem : ReactiveSystem\n{\n    GameContext _context;\n    public StringDataSystem(Contexts contexts) : base(contexts.game)\n    {\n        _context = contexts.game;\n    }\nprotected override void Execute(List<GameEntity> entities)\n{\n    foreach (var item in entities)\n    {\n        UnityEngine.Debug.Log(\" String: data \" + item.stringData.Data);\n    }\n}\n\nprotected override bool Filter(GameEntity entity)\n{\n    return entity.hasStringData;\n}\n\nprotected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n{\n    return context.CreateCollector(GameMatcher.StringData);\n}\n\n}\n`\nunity Log :\nString: data 1e\nString: data 2e\nString: data 3e\nString: data 4e\nString: data 5e\n.....\nI change the value 5 times at one frame   :  count+ (a to e) \nbut  after Update function, \nUnity just Debug the last value  I passed\n@StormRene  \n. I just want  to say\u3002  If I change the value   of  a component   more then once  by   the function  replace*()  at  MonoBehaviour  update  ,  how many times the Reactive systems will execute  at one frame?    . I know you meaning. If I change the value more then once time at the same frame ,the  reactive system will just call execute only once with value current data . But I want  reactive system call execute each time I changed the value in one frame. What I can do for this ?   . the last code can work will. ",
    "zsydeepsky": "OK, thanks for the answers guys :). > Not really. We currently have a total of 1.7k components in our project with 800 in the largest context. So far we don't have any problems.\njust for curiosity\nis your project targeted on mobile? especially on some old phone models like iPhone 6?. > Yes, we support the current version up to iPhone 6, but we also plan to support 5s.\nCool~\nI have no problems then\nThanks for your info~. ",
    "sudall": "@StormRene out of curiosity, what does you folder structure and organization strategy look like for components and systems? I imagine with that many components/systems organization is critical since you might forget what a component/system is for eventually and therefore forget where to go to update something or accidentally create another component type that is meant for the same purpose as a component that already exists, for example.. True that. Cool, thank you for sharing. Organization with ECS architecture is something I've been struggling with.. Here's a way that I've thought about handling this:\nFor each component that you want synchronized, you'd do something like this:\n```\nclass HealthController : NetworkBehaviour, IHealthListener {\n    [SyncVar(hook = \"OnChange\")]\n    public int health = 100;\nvoid Awake() {\n    var entity = this.GetOrCreateEntity();\n\n    entity.AddHealth(this.health);\n\n    entity.AddHealthListener(this);\n}\n\nvoid OnChange(int newValue) {\n    // when the value changes via UNet on the client...\n    if (!isServer) {\n        // receive the new value from the server\n        this.GetOrCreateEntity().ReplaceHealth(newValue);\n    }\n}\n\nvoid OnHealth(GameEntity entity, int newValue) {\n    // when the entity's component on the server changes...\n    if (isServer) {\n        // send the new value to the client\n        this.health = newValue;\n    }\n}\n\n}\n```\nThe code might be a bit wrong, but that's the general idea.\nGetOrCreateEntity() is a monobehaviour extension I've created for accessing an entity that is bound to the game object. My strategy with Entitas is based on the Hybrid Unity ECS approach, which means that entities are created/destroyed when prefabs are instantiated/destroyed.\nAny thoughts or criticisms?\n. @Alexandre-Dhalenne Fair enough. It's not \"proper\" ECS, but Unity is so heavily based on game objects that I find this strategy easier and faster to work with. I guess this strategy shoots for compatibility with Unity and other libraries over decoupling from Unity. As a solo dev, I feel like I need to lean on existing tech as much as possible.. ",
    "Kiddinglife": "Hi sschmid,\nI write some pseudo codes that can show you my idea.\nFor me, ecs shows me how to code game logic in c language way where everything is procedure instead of oop. The trick is to apply entity concept to organise data layout. If you can remember which parameters a specific procedure will read and write, we can also throw away component concept.\nhowever, there are some systems that already been implemented as unity built-in component like rigibody, audio and so on. This really makes it impossible to 100% ecs-alike.\nRegards.\n```c#\nstruct MonoBehavior\n{\n    void start()\n    {\n}\nvoid update()\n{\n\n}\nvoid end()\n{\n\n}\n\n}\nstruct sys\n{\n    MonoBehavior[] monoBehaviors;\n    void add(MonoBehavior entity)\n    {\n        monoBehaviors.push(entity);\n    }\n    void remove(MonoBehavior entity)\n    {\n        monoBehaviors.push(entity);\n    }\n    void clear()\n    {\n        monoBehaviors.clear();\n    }\n}\nstruct component_move\n{\n    transform trans;\n    animation walk;\n    animation run;\n    int speed;\n    navigation nag;\n}\nstruct move : sys\n{\n    void update()\n    {\n        for(MonoBehavior entity : monoBehaviors)\n        {\n            if(walk != null)\n            {\n                speed = 10;\n                entity.walk.play();\n            }\n            else\n            {\n                speed = 50;\n                entity.run.play();\n            }\n            entity.trans += speed * time_interval;\n            entity.nag.moveto(entity.trans);\n        }\n    }\n}\nstruct component_health\n{\n    int health;\n    bool alive;\n    animation dead;\n    animation alive;\n}\nstruct on_health_change : sys\n{\n    void update()\n    {\n        for(MonoBehavior entity : monoBehaviors)\n        {\n            entity.health -= entity.shell;\n            if(entity.health == 0)\n            {\n                alive = false;\n                entity.dead.play();\n            }\n        }\n        this.clear();\n    }\n}\nstruct component_collision\n{\n    int shell;\n    animation animation_hit;\n}\nstruct on_collision : sys\n{\n    void update()\n    {\n        for(MonoBehavior entity : monoBehaviors)\n        {\n            entity.shell -= 1;\n            entity.move.speed = -100; // simulate to bounce back\n            entity.animation_hit.play();\n        }\n        // event-triggered system should always be removed after used\n        this.clear();\n    }\n}\nclass application : MonoBehavior\n{\n    sys[][] syss = new array[8][8];\noverride void start()\n{ \n    syss[0].add(new on_health_change());\n    syss[0].add(new move());\n    syss[1].add(new on_collision());\n}\n\noverride void update()\n{\n    // for sys that needs normal update\n   for(sys s : syss[0])\n        s.update();\n}\n\noveride void FixedUpdate()\n{\n    // for sys that needs fixed update\n    for(sys s : syss[1]) \n        s.update();\n}\n\nsys get(int systype, int sysidx)\n{\n    return sys[systype][sysidx];\n}\n\n}\nclass mob_entity : MonoBehavior\n{\n    MonoBehavior application;\ncomponent_collision collision;\ncomponent_health health;\ncomponent_move move;\n\noverride void start()\n{ \n    application = gameobject.find('application');\n\n    // Append move to this entity inside start() method \n    // because component_move is constantly being updated in each frame \n    move_g.add(this);\n}\n\noverride void onCollision()\n{\n    // Append on_collision and on_health_change to this entity \n    // when another entity hits us told by this entity's rigibody system that calls this method of onCollision().\n    // on_collision and on_health_change are regarded as event-triggered system or one-off system \n    // they will be removed from the entity after used\n    sys on_collision = applicationon.get(1,0);\n    sys on_health_change = applicationon.get(0,0);\n    on_collisionget.add(this);\n    on_health_change.add(this);\n}\n\n}\n```. ",
    "Jennal": "Of course, and I just tested in non-server mode, it also happens.\n```\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nJenny.SearchPaths = Assets/DesperateDevs/Editor/Plugins, \\\n                    Assets/Entitas/Editor/Plugins, \\\n                    Jenny/Jenny/Plugins/Entitas.Roslyn\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nJenny.Ignore.Keys = Preferences.Entitas, \\\n                    Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold, \\\n                    Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath, \\\n                    Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Character, \\\n                                          Input\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Entity.csproj\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Entity.dll\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Game/Scripts/Entity/Generated\n```. cool, it works, thank you!. ",
    "mmvlad": "\u0412\u043e\u0442 \u0435\u0449\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u0441\u0432\u044f\u0437\u0430\u0442\u044c UI \u0438 Entitas\nhttps://github.com/mzaks/Entitas-ReactiveUI\n. ",
    "nfoste82": "I added both the path to the folder with the source itself and the path to the folder with the .dll, to the Jenny.SearchPaths, and that didn't seem to have any effect.. .NET 4.7.1 for both dlls.\nI'm able to work around the issue for now by using the full namespace in the component variables. So this isn't a blocking issue. Just seemed like it might be a bug. It's a shame you can't reproduce it though.. ",
    "ArtStylePro": "Thank You!, But I have put Jenny outside of Unity's folder Assets\n\n. And I have watched tutoral video, use Jenny.exe auto-import -s instead...\nselect number 1 and number 1\nbut still error ...\nbash-3.2$ mono ./Jenny/Jenny.exe auto-import -s\n\u26a0\ufe0f  Potential plugin collision: ComponentDataProvider\n0: Keep all (no changes)\n1: Keep Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider\n2: Keep Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u26a0\ufe0f  Potential plugin collision: EntityIndexDataProvider\n0: Keep all (no changes)\n1: Keep Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\n2: Keep Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\nbash-3.2$ mono ./Jenny/Jenny.exe doctor\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.WarnIfCompilationErrorsPreProcessor\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nCould not set up field 'Statement' due to: Could not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlStatement:_rawStatement' (1) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies. assembly:/Users/song.cheng/Documents/WorkSpace/Jenny/TestJenny/TestJenny/Assets/Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll type:SqlStatement member:(null)\nbash-3.2$\n. thank you man, i checked my folder, and  exec mono Jenny/Jenny.exe doctor -v\n```\nLoading assemblies from /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Analytics.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Analytics.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CLI.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CLI.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.Formatters.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.Formatters.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Networking.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Networking.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Jenny.exe\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Jenny.exe\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nJenny.SearchPaths = Assets/DesperateDevs/Editor/Plugins, \\\n                    Assets/Entitas/Editor/Plugins, \\\n                    Jenny/Plugins/Entitas.Roslyn\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Lunar-Match.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input, \\\n                                          GameState\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Scripts/Generated\nJenny.Ignore.Keys = Preferences.Entitas, \\\n                    Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold, \\\n                    Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath, \\\n                    Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath, \\\n                    Entitas.CodeGeneration.Plugins.Assemblies\nJenny.exe load: DesperateDevs.CodeGeneration.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe load: DesperateDevs.CodeGeneration.Unity.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Unity.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe load: Entitas.CodeGeneration.Plugins\n  \u279c Loading: Entitas.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.Roslyn.CodeGeneration.Plugins\n  \u279c Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    \u279c Resolved: Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  \u279c Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.WarnIfCompilationErrorsPreProcessor\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nDry Run\nJenny.exe load: DesperateDevs.CodeGeneration.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe load: DesperateDevs.CodeGeneration.Unity.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Unity.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe load: Entitas.CodeGeneration.Plugins\n  \u279c Loading: Entitas.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.Roslyn.CodeGeneration.Plugins\n  \u279c Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    \u279c Resolved: Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  \u279c Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nOpening Lunar-Match.csproj\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\nSystem.TypeLoadException: Could not set up field 'Statement' due to: Could not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlStatement:_rawStatement' (1) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies. assembly:/Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll type:SqlStatement member:(null)\n  at (wrapper managed-to-native) System.RuntimeTypeHandle.is_subclass_of(intptr,intptr)\n  at System.RuntimeTypeHandle.IsSubclassOf (System.RuntimeType childType, System.RuntimeType baseType) [0x00016] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.RuntimeType.IsSubclassOf (System.Type type) [0x00020] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.RuntimeType.IsValueTypeImpl () [0x00026] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Type.get_IsValueType () [0x00000] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Type.get_IsClass () [0x0000b] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Composition.TypedParts.Discovery.TypeInspector.InspectTypeForPart (System.Reflection.TypeInfo type, System.Composition.TypedParts.Discovery.DiscoveredPart& part) [0x0000b] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.TypedParts.TypedPartExportDescriptorProvider..ctor (System.Collections.Generic.IEnumerable1[T] types, System.Composition.Convention.AttributedModelProvider attributeContext) [0x00037] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.Hosting.ContainerConfiguration.CreateContainer () [0x00042] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create (System.Collections.Generic.IEnumerable1[T] assemblies) [0x0001e] in :0 \n  at Microsoft.CodeAnalysis.Host.Mef.DesktopMefHostServices.get_DefaultServices () [0x00011] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create (System.Collections.Generic.IDictionary2[TKey,TValue] properties) [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create () [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at DesperateDevs.Roslyn.ProjectParser..ctor (System.String projectPath) [0x0001b] in <b590fa441c8344e8bb2722e51c425b28>:0 \n  at DesperateDevs.Roslyn.CodeGeneration.Plugins.PluginUtil.GetCachedProjectParser (System.Collections.Generic.Dictionary2[TKey,TValue] objectCache, System.String projectPath) [0x0000f] in :0 \n  at Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider.GetData () [0x00021] in <9b3d59da2f5047e98ce32419dc56e7c7>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.generate (System.String messagePrefix, DesperateDevs.CodeGeneration.IPreProcessor[] preProcessors, DesperateDevs.CodeGeneration.IDataProvider[] dataProviders, DesperateDevs.CodeGeneration.ICodeGenerator[] codeGenerators, DesperateDevs.CodeGeneration.IPostProcessor[] postProcessors) [0x00125] in :0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.DryRun () [0x000c2] in :0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CLI.DoctorCommand.run () [0x00037] in :0 \n  at DesperateDevs.CLI.Utils.AbstractCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x0001f] in <6f1644502be0452880cd4a5c4a6c102a>:0 \n  at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x000b7] in <9f0f6b628fda4b81b4841c3997c7b2fb>:0 \n  at DesperateDevs.CLI.Utils.CLIProgram.runCommand (System.String[] args) [0x0000e] in <6f1644502be0452880cd4a5c4a6c102a>:0 \nbogon:Lunar-Match song.cheng$ \n```\n\n\n. but there is still an error... \nSystem.TypeLoadException: Could not set up field 'Statement' due to: Could not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlStatement:_rawStatement' (1) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies. assembly:/Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll type:SqlStatement member:(null)\nIn Terminal >>>>\n```\nbogon:Lunar-Match song.cheng$ mono Jenny/Jenny.exe doctor -v\nLoading assemblies from /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Analytics.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Analytics.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CLI.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CLI.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.CodeGenerator.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.CodeGeneration.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.Formatters.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.Formatters.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Logging.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Networking.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Networking.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.CLI.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Serialization.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Utils.dll\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/DesperateDevs.Utils.dll\nJenny.exe load: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Jenny.exe\n  \u279c Loading: /Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Jenny.exe\nPreferences.Entitas = Entitas.Unity.Editor.EntitasPreferencesDrawer, \\\n                      DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.CodeGeneratorPreferencesDrawer, \\\n                      Entitas.VisualDebugging.Unity.Editor.VisualDebuggingPreferencesDrawer\nJenny.SearchPaths = Assets/DesperateDevs/Editor/Plugins, \\\n                    Assets/Entitas/Editor/Plugins, \\\n                    Jenny/Plugins/Entitas.Roslyn\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nEntitas.VisualDebugging.Unity.Editor.SystemWarningThreshold = 5\nEntitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath = Assets/Editor/DefaultInstanceCreator\nEntitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath = Assets/Editor/TypeDrawer\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Lunar-Match.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Input, \\\n                                          GameState\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = false\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Scripts/Generated\nJenny.Ignore.Keys = Preferences.Entitas, \\\n                    Entitas.VisualDebugging.Unity.Editor.SystemWarningThreshold, \\\n                    Entitas.VisualDebugging.Unity.Editor.DefaultInstanceCreatorFolderPath, \\\n                    Entitas.VisualDebugging.Unity.Editor.TypeDrawerFolderPath, \\\n                    Entitas.CodeGeneration.Plugins.Assemblies\nJenny.exe load: DesperateDevs.CodeGeneration.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe load: DesperateDevs.CodeGeneration.Unity.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Unity.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe load: Entitas.CodeGeneration.Plugins\n  \u279c Loading: Entitas.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.Roslyn.CodeGeneration.Plugins\n  \u279c Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    \u279c Resolved: Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  \u279c Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.WarnIfCompilationErrorsPreProcessor\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.ComponentDataProvider\n\u2139\ufe0f  Available: Entitas.CodeGeneration.Plugins.EntityIndexDataProvider\n\u2139\ufe0f  Available: DesperateDevs.CodeGeneration.Unity.Plugins.DebugLogPostProcessor\nDry Run\nJenny.exe load: DesperateDevs.CodeGeneration.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Plugins.dll\nJenny.exe load: DesperateDevs.CodeGeneration.Unity.Plugins\n  \u279c Loading: DesperateDevs.CodeGeneration.Unity.Plugins\n    \u279c Resolved: Assets/DesperateDevs/Editor/Plugins/DesperateDevs.CodeGeneration.Unity.Plugins.dll\nJenny.exe load: Entitas.CodeGeneration.Plugins\n  \u279c Loading: Entitas.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.Roslyn.CodeGeneration.Plugins\n  \u279c Loading: Entitas.Roslyn.CodeGeneration.Plugins\n    \u279c Resolved: Jenny/Plugins/Entitas.Roslyn/Entitas.Roslyn.CodeGeneration.Plugins.dll\nJenny.exe load: Entitas.VisualDebugging.CodeGeneration.Plugins\n  \u279c Loading: Entitas.VisualDebugging.CodeGeneration.Plugins\n    \u279c Resolved: Assets/Entitas/Editor/Plugins/Entitas.VisualDebugging.CodeGeneration.Plugins.dll\nOpening Lunar-Match.csproj\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.CSharp.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: Microsoft.CodeAnalysis.VisualBasic.Features, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\n  \u279c Loading Dependency: SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535\nSystem.TypeLoadException: Could not set up field 'Statement' due to: Could not load type of field 'Microsoft.CodeAnalysis.SQLite.Interop.SqlStatement:_rawStatement' (1) due to: Could not load file or assembly 'SQLitePCLRaw.core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1488e028ca7ab535' or one of its dependencies. assembly:/Users/song.cheng/Documents/WorkSpace/Lunar-Match/Jenny/Plugins/Entitas.Roslyn/Microsoft.CodeAnalysis.Workspaces.Desktop.dll type:SqlStatement member:(null)\n  at (wrapper managed-to-native) System.RuntimeTypeHandle.is_subclass_of(intptr,intptr)\n  at System.RuntimeTypeHandle.IsSubclassOf (System.RuntimeType childType, System.RuntimeType baseType) [0x00016] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.RuntimeType.IsSubclassOf (System.Type type) [0x00020] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.RuntimeType.IsValueTypeImpl () [0x00026] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Type.get_IsValueType () [0x00000] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Type.get_IsClass () [0x0000b] in <0242286efc4a47b69b5a84e828f56ef8>:0 \n  at System.Composition.TypedParts.Discovery.TypeInspector.InspectTypeForPart (System.Reflection.TypeInfo type, System.Composition.TypedParts.Discovery.DiscoveredPart& part) [0x0000b] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.TypedParts.TypedPartExportDescriptorProvider..ctor (System.Collections.Generic.IEnumerable1[T] types, System.Composition.Convention.AttributedModelProvider attributeContext) [0x00037] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at System.Composition.Hosting.ContainerConfiguration.CreateContainer () [0x00042] in <9aac21a4a3f24063b2b8b59143acddfc>:0 \n  at Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create (System.Collections.Generic.IEnumerable1[T] assemblies) [0x0001e] in :0 \n  at Microsoft.CodeAnalysis.Host.Mef.DesktopMefHostServices.get_DefaultServices () [0x00011] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create (System.Collections.Generic.IDictionary2[TKey,TValue] properties) [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create () [0x00000] in <1644e7370de141eca00406e57c629f50>:0 \n  at DesperateDevs.Roslyn.ProjectParser..ctor (System.String projectPath) [0x0001b] in <b590fa441c8344e8bb2722e51c425b28>:0 \n  at DesperateDevs.Roslyn.CodeGeneration.Plugins.PluginUtil.GetCachedProjectParser (System.Collections.Generic.Dictionary2[TKey,TValue] objectCache, System.String projectPath) [0x0000f] in :0 \n  at Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider.GetData () [0x00021] in <9b3d59da2f5047e98ce32419dc56e7c7>:0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.generate (System.String messagePrefix, DesperateDevs.CodeGeneration.IPreProcessor[] preProcessors, DesperateDevs.CodeGeneration.IDataProvider[] dataProviders, DesperateDevs.CodeGeneration.ICodeGenerator[] codeGenerators, DesperateDevs.CodeGeneration.IPostProcessor[] postProcessors) [0x00125] in :0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CodeGenerator.DryRun () [0x000c2] in :0 \n  at DesperateDevs.CodeGeneration.CodeGenerator.CLI.DoctorCommand.run () [0x00037] in :0 \n  at DesperateDevs.CLI.Utils.AbstractCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x0001f] in <6f1644502be0452880cd4a5c4a6c102a>:0 \n  at DesperateDevs.Serialization.CLI.Utils.AbstractPreferencesCommand.Run (DesperateDevs.CLI.Utils.CLIProgram program, System.String[] args) [0x000b7] in <9f0f6b628fda4b81b4841c3997c7b2fb>:0 \n  at DesperateDevs.CLI.Utils.CLIProgram.runCommand (System.String[] args) [0x0000e] in <6f1644502be0452880cd4a5c4a6c102a>:0 \nbogon:Lunar-Match song.cheng$ \n```. I reinstall my unity and it works, thanks. ",
    "Alexandre-Dhalenne": "In fact, my problem is a little more complicated.\nWhen a player connect to the host, host creates entity, and one of the component is \"View\", to deal with the gameobject. The gameobject has a network Identity, so it is synced with the client. Good ! But how can i get the reference to the gameobject on the client to have the same entity  ? \nI don't know if i'm clear, but i do not want to use GameObject.Find(), which takes a lot of resources.\nEdit : I was thinking : the GameObject dealing with entities, is there a way to sync it ? Maybe can i just add a component \"NetworkIdentity\" or something to it ? If it could work , it could be a greate feature to tell Entitas you are developing a mutliplayer game and have entities synchronised ! . @StormRene I see what you want me to do but I think it will not solve my issue.\nLet me summarize : \n- On the host, when a player connects, one method is called (let's say OnServerPlayerConnect() ), which i overrided to customize the spawn of a player. It all works well on the host because it is a client and a server.\n- On client, when a player connects, the method is called, but on SERVER side. My playerPrefab is instantiated on the host, everything is well. But, because the prefab has networkidentity and stuff, it is spawned on client too, which should be fine, but there is no method on client to detect when the player is instantiated and to get the gameobject just created. So, when I create, client side, my Entity with my components, I can't put the \"Networked\" PlayerPrefab into my entity because I don't have anyway to get it. \n@sudall I think your strategy is opposed to what Entitas wants us to do. I think Entitas is meant to create an entity, add components, and act on them (like instantiate a gameobject). \nI don't know if instantiate a prefab with entities is a good way to have a proper ECS architecture.\n. @sudall Anyway, for the moment I don't see a better solution, for my players prefab... I will go with your idea but I'm not convinced it is a good way to respect the ECS architecture. Thanks for your help !. ",
    "bruno1308": "Setting the .NET version to 4.x did the trick, thanks for the help.. ",
    "Zonciu": "Same issue, my project is <TargetFrameworks>netstandard2.0;netcoreapp2.1</TargetFrameworks>, it doesn't generate Component code.\nNow I use mklink to link all code files to a Unity project to generate codes, that works fine.. ",
    "dogiordano": "What you suggested is actually what I'm currently doing but creating a new component (and system) seemed more like a workaround than the intended way to do such a simple thing.\nSearching more on the web I found one of the developer proving me wrong.\nThanks a lot for your answer.. ",
    "MrXo": "@AVAVT This works but is not very convenient. I would also like to have different names for the event listeners.. ",
    "logixworx": "Has this issue been resolved? I followed the instructions on this link and got the exact error shown here.\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Entitas-pure-C%23. ",
    "wkunker": "Same problem here. Is there a known working mono version? At my workplace we've been toying with the idea of running Jenny in a bind mounted docker container so we can use a version of mono which is compatible with Jenny.. ",
    "cmd-johnson": "I had the same issue (on Arch linux) with mono-5.16.0.179-1-x86_64. I was able to get Jenny working again by downgrading to mono-5.14.0.177-1-x86_64.. ",
    "JesseTG": "I can confirm that @koden-km 's fix works with Mono 5.18.0.240 on Ubuntu 18.10, with Entitas 1.12.2.. ...it is?  Son of a bitch.  My mistake, then.  Thank you for all you do.. Here's an idea.\nFirst, create a component to signal that your scene (or other asynchronously-loaded data) is ready.  It might look like this:\n```csharp\nusing Entitas.CodeGeneration.Attributes;\nusing Entitas;\nusing UnityEngine;\n[State, Cleanup(CleanupMode.DestroyEntity)]\npublic class DataLoadedComponent : IComponent\n{\n    public string path;\n    public ILoadedData data;\n}\n[State, Cleanup(CleanupMode.DestroyEntity)]\npublic class SceneLoadedComponent : IComponent\n{\n    public ILoadedScene scene;\n}\n```\nThese components don't need to exist for very long; their job is to signal that the data you want is ready.  The [Cleanup] attribute means that any entity with these components will be destroyed at the end of the frame.  If you want to keep this data around, consider adding another component for that purpose.\nWhen you want to load data, do something like this:\n```csharp\n_resourcesService.LoadResources(path, (ILoadedData data) =>{\n    var e = contexts.CreateEntity();\n    e.AddDataLoaded(path, data); \n});\n```\nNext, create a ReactiveSystem<StateEntity> subclass, with a Collector looking for StateMatcher.DataLoaded (and other components, if needed).  For example:\n```csharp\nusing System.Collections.Generic;\nusing Entitas;\nusing UnityEngine;\nusing Entitas.Unity;\npublic class LoadSceneSystem : ReactiveSystem\n{\n    private readonly Contexts contexts;\n    private readonly IResourcesService resources;\npublic LoadSceneSystem(Contexts contexts, IResourcesService resources) : base(contexts.state)\n{\n    this.contexts = contexts;\n    this.resources = resources;\n}\n\nprotected override ICollector<StateEntity> GetTrigger(IContext<StateEntity> context)\n{\n    return context.CreateCollector(StateMatcher.DataLoaded);\n}\n\nprotected override bool Filter(StateEntity entity)\n{\n    return entity.hasDataLoaded;\n}\n\nprotected override void Execute(List<StateEntity> entities)\n{\n    foreach (var e in entities)\n    {\n        contexts.Import(e.data);\n        resources.LoadScene(e.path, this.SceneLoaded);\n    }\n}\n\nprivate void SceneLoaded(ILoadedScene scene)\n{\n    var e = contexts.state.CreateEntity();\n    e.AddSceneLoaded(scene);\n}\n\n}\n```\nTo process a loaded scene, you'll basically be doing the same thing:\n```csharp\nusing System.Collections.Generic;\nusing Entitas;\nusing UnityEngine;\nusing Entitas.Unity;\npublic class ProcessSceneSystem : ReactiveSystem\n{\n    private readonly Contexts contexts;\n    private readonly IResourcesService resources;\npublic ProcessSceneSystem(Contexts contexts, IResourcesService resources) : base(contexts.state)\n{\n    this.contexts = contexts;\n    this.resources = resources;\n}\n\nprotected override ICollector<StateEntity> GetTrigger(IContext<StateEntity> context)\n{\n    return context.CreateCollector(StateMatcher.SceneLoaded);\n}\n\nprotected override bool Filter(StateEntity entity)\n{\n    return entity.hasSceneLoaded;\n}\n\nprotected override void Execute(List<StateEntity> entities)\n{\n    foreach (var e in entities)\n    {\n        /* do something here */\n    }\n}\n\n}\n```\nOnce you request your ILoadedData as described, it will be processed by LoadSceneSystem in the next game loop that begins after it's ready.  In this case, you'll request a ILoadedScene.  At the end of that frame, the entity maintaining the DataLoadedComponent will be destroyed.\nSame thing for ILoadedScene.  After the requested scene is ready, it will be processed by ProcessSceneSystem in the next game loop.  At the end of that frame, the SceneLoadedComponent's entity will be destroyed.\nDoes this make sense?. Happy to help.  :). ",
    "Kaladrius2trip": "I have some problem in my project when i don't handle exception in some reactive system. \nBut i have many exceptions in loop.\nIMHO: Logs contain many EntityIsAlreadyRetainedByOwnerException errors but real useful information contains in first one from my code base. \nTryFinaly block hide only this exception in reactive system, but my error it still actual and i should see only one error but i saw more than expected. And i think any framework must be safe from a box. And my Exception it is my problem.\n. Thanks for you work! . @optimisez It low cost operation. For my project thar solve many problem for debugging and handle exception. In the world-wide we may find many tests for using try-finally blocks. \nFor example stackoverflow.com. ",
    "kurobon-jp": "Thank you for the quick response.\nI understood your intentions.\nBy the way, \ncsharp\nvar group = context.GetEntitiesWithGameObject(gameObject);\nIs this function generated automatically?. To me, the group type looks like a HashSet.\nWhere are GetEntities() defined?. This problem was resolved thanks to your support.. For example, when moving from a game scene to a title scene, it is necessary to delete unnecessary game entities.\nIn this example, since the transition destination is not implemented, it is destroyed by the timer.. ",
    "OneYoungMean": "And this one\n\n. hmmmm if you mean this help manual ,the answer is right :P\nhttps://github.com/sschmid/Entitas-CSharp/wiki/Unity-Installation-Guide\nBTWIs this another way of writing sprites?\n \n. Ya,thanks XD. Hey looks like it's replied as it is\nDid I miss something?. Oh, thank God, I thought I made an unforgivable fault, I hope that my behavior has not caused you too much trouble.QAQ. ",
    "XiaoJueMing": "\n@XiaoJueMing\nStormRene is correct. Generally there is no order in groups and reactive systems. If your logic relies on a specific order you can sort them before processing them, e.g\ncs\nprotected override void Execute(List<TestEntity> entities) {\n    foreach (var e in entities.OrderBy(e => e.creationIndex))\n    {\n         // do sth       \n    }\n}\nThank you very much\uff01\uff01\n. \n",
    "robulonn": "\nA quick check on my machine resulted in 0.0% cpu usage when idle\n\nOn my machine it's usually at 0.0% CPU usage when idling between gen commands.\nAlthough, that's when I'm intermittently sending gen commands (so consistent usage/gen commands sent, with small breaks ranging from 5 ~ 10min between sending gen commands). \nHowever, after being idle for a period of time w/no gen requests (for around 15min ~ 1hr) it shoots up to high CPU usage pretty consistently. . I think I resolved the issue\nIt only occurred when I (mistakenly) had multiples instances of rider's external tool command open upon generating.\nWhen I noticed this, and closed all instances except one; it always stayed at 0.0% idle cpu usage after letting it sit idle for the usual time it took to make it hop in cpu usage.\nThanks for helping. ",
    "atkdefender": "It works!\nThX very much \u30fe(@^\u25bd^@)\u30ce. @StormRene \nhahaha.\nAfter learning the IGroup, Collector, Matcher things, I know you are right.\nThey were written several months ago. And I think they are ugly now.\nI will rewrite before I really mad at them.\n. Had found a way.. @fraylopez \nUse the unity Animator Controller, without the Animation Clips.\nState Machine \u2192 Inspector \u2192 Add Behaviour\nThen you can find some functions like \"OnStateEnter\", \"OnStateExit\"...\nAnd this is what I want:D. I write something like:\nOnStateEnter(.....)\n{\n gameEntity.AddFace();\n gameEntity.AddNumber();\n}\nMaybe it's not the best way, but to me, it's good enough.. ",
    "fraylopez": "Could you explain it? I am interested.. Thanks! But how is it integrated within Entitas?. I see, thanks for your answer!. Hi @akoolenbourke, \nI'm quite happy with the result, it served it's purpose and scaled up quite well, the current version is a bit more complex than the one I write down here.\nRegarding your first question, yes, looping interfaces when using unique components is a bit redundant but that way my code implementation is not dependent on a \"meta\" tag in another file which eventually may change and I don't have to think about it while coding. Keep in mind that Entitas will always emit a entity list as argument for Execute method, even with a single member.\nRegarding your second question, the idea of this snippet is Game State handling through a state machine. The game state is assumed to be unique, and the service strategy is just a way to expose \"state change triggers\" to the code in a clean way. However, the pattern is useful without the \"service\" exposure. \nIn my Entitas test project I use it also on a smaller system state machine that builds the levels of a grid-based puzzle game in a concrete order (board-layer, obstacle-layer, piece-layer,...). \nHope it helped!. ",
    "jclitwin": "\n\nIn the client side question, will it be necessary to rewrite many things?\n\nNo, You can use BehaviorComponent/ OOP scritps as services, check this out How I build games with Entitas (FNGGames) \n\nWould I have to rewrite it on the server side as well?\n\nAssuming that you're building a 100% server authoritative game. The answer heavily depends on what's your server side. If you want to use the headless server, then no, it's just Unity without graphics. However, if you're going to build things from a pure C# project, then yes, you can't use any Unity things, at least for the core layer.\n\nYo,\nThanks alot for reply me! Then, about server side, I have already developed, it's pure C# project, but I mean, I don't want to add Entitas on my project, only want to know if I need to change something in server side, because with Entitas, it's using ECS logic.\nSo, this means that using Entitas only on the client side, will not interfere in server logic?\nWhat I'm worried about is how I will interact with the components of the Client <-> Server (for example: update Player's position on the server for all clients), or I don't need to care about this? \nCheers.. I do not see necessity to use Unity as a server, as I said, it's a \"Bomberman Online 3D\", but even then, I still use a 2D grid to do verifications (player movements, AI and etc), it also includes the other logics (shop, items, chat, social and etc) and any physics needed, it will be easy to simulate on the server itself. My server is also separated into different parts, such as LoginServer, RoomServer, LobbyServer, and DBServer.\nIt would not be appropriate to use Unity as a server for all these servers (in which I still want to upgrade and add a new server to manage the servers), it would only be \"appropriate\" to use Unity as the only server for the RoomServer, then I  of the work to have to develop the entire structure of the other server outside of Unity and then I would end up having all the work to have to develop the entire structure of the other server outside of Unity to the other servers.\nCheers.. It's just a personal project, so I don't have to worry about teammate. :P\nI will have to rethink in other alternatives in this case, because I would not like to have to rewrite to much the server, because in addition to learning a new technology, such as ECS with Entitas, I would like to add support for multiple rendering and processing objects for the client, without having to worry about a drastic fall of ping (example: adding 200+ AI's in a single scene in a short distance, another example would be a type of battle royale).. ",
    "TimeToTheNorth": "I want to know what is the default address. Every time I need to go to the self-selection configuration\uff01 So Jenny doesn't have a default address\uff1f. I am a beginner many things do not understand\uff0c hope to forgive. ",
    "meichen8050753": "\nThis sounds like the same issue i'm getting in #811 (the recent post). People have worked around it by downgrading Mono to 5.14.\n\nThanks, It's usefull. > Hi, just to narrow down possible, could you just run Jenny/Jenny.exe, this will start the Jenny Wizard. Could you test and create a new Jenny.properties with the Jenny wizard and do auto import everything automatically? Maybe that helps\nwhen I use Jenny wizard, There are the same error.\n. ",
    "dekstrin": "Thx for your help! \nBut why I have \"String reference not set to an instance of a String.\" only if I run jenny in launchd? \nBasically I need this for a Jenkins builds. I want to start Jenny before the build and stop after. . Problem with launchd anyway fixed by itself after update to macos 10.13.6\n. ",
    "ijovi23": "\nYou can write a flag component like \"RecordableComponent\" and use JSON.net to serialize instances. However, I'm almost sure that this is not what you want by practice. For cool things like kill cam and rewindable gameplay, it's important to filter out unnecessary data, otherwise, the player's memory/harddisk would be blown up quickly because you're storing data at the 60Hz frequency.\nSo as you can see, it's not an Entitas related problem. IIRC, Zaks made a talk about how to implement a playback system, you can google that video, it's insightful.\n\nThanks for your reply. It's really not an easy thing to do, I think so too. \nI found the following demo but, its solution so damn sucks if the systems grow more and more complex.\nhttps://github.com/coding2233/Entitas-Replay-Demo\nI won't store the state data at every frame. Instead, I can save a state every 30 frames, and save the user-action every frame.\nWhat you said 'RecordableComponent' may be not enough, cause when I have collected all Recordable Entities, I still don't know what to record. I need manually organize all components I want to record in a recording-system. Maybe the best way is writing a code generator to automatically generate a component includes all components that have the attribute \"Recordable\".\nConsidering server/client communication, it's necessary to do serializing/deserializing. The code may look like\n```\n    public RecordSystem(Contexts contexts)\n    {\n        _recordableEntities = contexts.game.GetGroup(GameMatcher.Recordable);\n    }\npublic void Execute()\n{\n    Dictionary<int, byte[]> serialized = new Dictionary<int, byte[]>();\n    foreach (GameEntity e in _recordableEntities.GetEntities())\n    {\n        serialized[e.EntityId] = e.GetComponents<IRecordableComponent>().SerializeToBytes()\n    }\n\n   //do next...\n}\n\n```\nJSON.Net needs more device resources, and bytes serialization such as protobuf breaks ECS rules.. I recorded and serialized the content data of the component. Next I wanna find a way to know what component the data belongs to.\n```C#\npublic interface IRecordableComponent {}\n[Game]\npublic class PositionComponent : IComponent, IRecordableComponent\n{\n    public float x;\n    public float y;\n}\n[Game]\npublic class RecordableComponent : IComponent {}\npublic class RecordSystem : IExecuteSystem\n{\n    readonly GameContext _context;\npublic RecordSystem(Contexts contexts)\n{\n    _context = contexts.game;\n}\n\npublic void Execute()\n{\n    Dictionary<int, IComponent[]> entityData = new Dictionary<int, IComponent[]>();\n    var entities = _context.GetGroup(GameMatcher.Recordable);\n    foreach (var e in entities)\n    {\n        var comps = e.GetComponents().Where((c) => c is IRecordableComponent).ToArray();\n        entityData[e.creationIndex] = comps;\n    }\n\n    if (entityData.Count > 0)\n    {\n        Debug.Log(JsonConvert.SerializeObject(entityData));\n    }\n}\n\n}\n```. > If you are making a multiplayer game, don't use JSON, it's still too big unless your game is simple enough. We usually use code generator to create contracts for State, Input and other stuff then serialize them as a dict/hashtable byte[]. Google GafferOnGames, there are lots of network essential posts on it and you will see how picky it is to transfer data in a real game. In short, every bit you saved is $$$ \ud83d\ude09\nYou are so cool!. ",
    "RetroBum": "If that was the case none of my events would work at all.. I have considered this but I was hoping to smooth out these issues and stick with events where possible.. Okay. I think I've got it.\nThe problem was, indeed the ordering of the generated ComponentEventSystems inside the generated ContextEventSystem.\nThe Event attribute has a 3rd parameter; Priority which allows you to control the order so I used those to get my event systems executing in the right order.. ",
    "azsdaja": "I just have a habit of not using public fields. I know it may be considered an overkill.. ",
    "ArkTarusov": "@sschmid Will it be merge?. ",
    "IsmailAlaouiAbdellaoui": "Thank you very much for your answer. I will try this and let you know :). ",
    "vanlecs09": "This is my implementation of FMS (game state manager )\n `public static class GameStateContextExtension\n{\n    public static void ChangeToGameState(this GameStateContext gameStateContext, GAME_STATE newGameState, string assetName)\n    {\n        var entity = gameStateContext.CreateEntity();\n        entity.AddGameStateEnter(assetName, newGameState);\n        entity.isGameStateUpdate = false;\n        entity.isGameStateExit = false;\n    }\n}\n\n\nEnterState\n```\npublic class GameStateEnterSystem : ReactiveSystem, IInitializeSystem\n{\n    GameStateService _gameStateService;\n    Contexts _contexts;\npublic GameStateEnterSystem(Contexts contexts) : base(contexts.gameState)\n{\n    _contexts = contexts;\n}\nprotected override bool Filter(GameStateEntity entity)\n{\n    return entity.hasGameStateEnter;\n}\npublic void Initialize()\n{\n    _gameStateService = (GameStateService)_contexts.meta.gameStateService.instance;\n}\nprotected override ICollector GetTrigger(IContext context)\n{\n    return context.CreateCollector(GameStateMatcher.GameStateEnter);\n}\nprotected override void Execute(List entities)\n{\n    foreach (var e in entities)\n    {\n        var uiEntity = _contexts.uI.CreateEntity();\n        uiEntity.AddAsset(e.gameStateEnter.assetName);\n        e.isGameStateUpdate = true;\n    }\n}\n}\n- UpdateState\npublic class GameStateUpdateSystem : IExecuteSystem, IInitializeSystem\n{\n GameStateService _gameStateService;\n Contexts _contexts;\npublic GameStateUpdateSystem(Contexts contexts)\n{\n    // this._gameStateService = contexts.sta;\n    _contexts = contexts;\n}\npublic void Initialize()\n{\n    _gameStateService = (GameStateService)_contexts.meta.gameStateService.instance;\n}\npublic void Execute()\n{\n    // _gameStateService.Update();\n}\n}\nExitState\npublic class GameStateExitSystem : ReactiveSystem, IInitializeSystem\n{\nGameStateService _gameStateService;\nContexts _contexts;\npublic GameStateExitSystem(Contexts contexts) : base(contexts.gameState)\n{\n    _contexts = contexts;\n}\nprotected override bool Filter(GameStateEntity entity)\n{\n    return entity.hasGameStateTransition;\n}\npublic void Initialize()\n{\n    _gameStateService = (GameStateService)_contexts.meta.gameStateService.instance;\n}\nprotected override ICollector GetTrigger(IContext context)\n{\n    return context.CreateCollector(GameStateMatcher.GameStateExit);\n}\nprotected override void Execute(List entities)\n{\n    foreach (var e in entities)\n    {\n        // e.isGameStateUpdate = true;\n        // destroy view\n    }\n}\n}\n\npublic enum GAME_STATE {\nMENU, \nGAME_PLAY\n}\n```\n\n\nHow to change state to state \n_gameStateContext.ChangeToGameState(GAME_STATE.MENU, \"Assets/Game/Prefabs/pref_ui_menu\");\n. ",
    "offka": "Hi! Thank you. Looks like this is that i searching for :) \ud83d\udc4d . ",
    "spudbox": "Some progress! Using -v , it looks like it has a problem with Assembly-CSharp , the last message is Parsing Assembly-CSharp. Our project is quite large now so I've included a partial file. Anything I should be looking for?\nSample.csproj.txt\n. FWIW, I tried with a clean unity project and get the same result.\n. I let doctor run to see if it would ever complete, it does after about 3 minutes. I have everything installed on SSD, going to install on the hard drive and see if that makes a difference.\n. Moving to hard drive and latest entitas gets the same delay, about 3 minutes. Another possibility is my anti-virus setup. I have another machine I'm going to try an experiment with.. Ok. I'm thinking that it is anti-virus related. I'm going to do some more testing but that seems most promising and also why there are no other reports of this issue. . It is my anti-virus. I have to disable to run BUT that's not a jenny issue. You can close this ticket. Thanks for your help!. ",
    "jannysice": "AddRange shouldn't allocate garbage in this case, since a HashSet\\<T> is passed. It uses ICollection\\<T>.CopyTo(), which in the case of a HashSet is allocation free.\nIt might be that the list resizes in EnsureCapacity, which will allocate some garbage.\nThe same would happen in your proposed fix.\nPut a sample of AddRange below.\nc#\nICollection<T> objs = collection as ICollection<T>;\nif (objs != null)\n{\n    int count = objs.Count;\n    if (count > 0)\n    {\n        //List might need to resize. Possible GC alloc.\n        this.EnsureCapacity(this._size + count);\n        if (index < this._size)\n            Array.Copy((Array) this._items, index, (Array) this._items, index + count, this._size - index);\n        if (this == objs)\n        {\n            Array.Copy((Array) this._items, 0, (Array) this._items, index, index);\n            Array.Copy((Array) this._items, index + count, (Array) this._items, index * 2, this._size - index);\n        }\n        //Using CopyTo here, which is alloc free in case of HashSet<T>\n        else\n            objs.CopyTo(this._items, index);\n        this._size += count;\n    }\n}\n//Will never go here since the collection passed implements ICollection<T>\nelse\n{\n    foreach (T obj in collection)\n        this.Insert(index++, obj);\n}. ",
    "ribbanya": "I believe that is what Rider does, yes.. I checked my settings. In theory, Rider should only be using one thread for unit testing. Not sure what's causing the race, if that's true.. "
}