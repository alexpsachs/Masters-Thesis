{
    "juanpabloaj": "this way the user not forget to install install prompt_toolkit and docopt .\n. Ok , I understand , I will not share this package ;)\nThanks for the merge\u00a0\n\u2014\nJuanpablo AJ\nOn Tue, Feb 3, 2015 at 1:37 PM, Jonathan Slenders\nnotifications@github.com wrote:\n\nHi @juanpabloaj Thanks for the pull request. I'll merge it asap.\nBut note that this is still a very experimental package (basically two evenings of fun.) Probably, somewhere during the next weeks I'll try to create a decent Vim clone with more functionality and release it.\n(I also appreciate if you don't share this package yet on Reddit/hackernews/etc... for now. I prefer to release finished stuff ;) )\nReply to this email directly or view it on GitHub:\nhttps://github.com/jonathanslenders/ptvim/pull/1#issuecomment-72684066\n. :tada:\n. this way the user not forget to install install prompt_toolkit and docopt .\n. Ok , I understand , I will not share this package ;)\n\nThanks for the merge\u00a0\n\u2014\nJuanpablo AJ\nOn Tue, Feb 3, 2015 at 1:37 PM, Jonathan Slenders\nnotifications@github.com wrote:\n\nHi @juanpabloaj Thanks for the pull request. I'll merge it asap.\nBut note that this is still a very experimental package (basically two evenings of fun.) Probably, somewhere during the next weeks I'll try to create a decent Vim clone with more functionality and release it.\n(I also appreciate if you don't share this package yet on Reddit/hackernews/etc... for now. I prefer to release finished stuff ;) )\nReply to this email directly or view it on GitHub:\nhttps://github.com/jonathanslenders/ptvim/pull/1#issuecomment-72684066\n. :tada:\n. \n",
    "jonathanslenders": "Hi @juanpabloaj Thanks for the pull request. I'll merge it asap.\nBut note that this is still a very experimental package (basically two evenings of fun.) Probably, somewhere during the next weeks I'll try to create a decent Vim clone with more functionality and release it.\n(I also appreciate if you don't share this package yet on Reddit/hackernews/etc... for now. I prefer to release finished stuff ;) )\n. I justed released this on pypi. It's public now! :)\n. Thanks for reporting! I will fix this asap.\n. Ok, thanks for reporting! :)\nI will fix that, along with the other bugs coming in.\n. Thank you! I merged it: https://github.com/jonathanslenders/pyvim/commit/cc0b333cef7a21682a6c12789c32cc4371ec7f71\n. Thanks @movEAX ! I know about this (personally, I use it very often.)\nSo, there's a good chance I will implement this anytime soon for pyvim as well.\n. It's vim-like indeed. The goal is certainly not to create a perfect clone. But something that is useful and feels familiar for vim users.\n. Thanks for reporting! I'll try to fix this.\n. Thanks for reporting! I fixed it: https://github.com/jonathanslenders/pyvim/commit/34b61754c737972932b3f1902528cf7eb427d059\n. Good idea! :)\nActually, some time ago I made a multiplexer in Python: https://github.com/jonathanslenders/pymux\nSo, it shouldn't be too hard to give pyvim terminal emulation as well. Do you know how neovim is doing it? It would be good to support the same set of commands.\nHaving this would be also be the start of a real Python IDE with integrated debugger and option to run scripts.\n. Hi @nikhedonia Thanks for reporting!\nI am aware of this. Right now, the data structures are still extremely simple. A next step would be to have something more clever. I liked this: http://lists.suckless.org/dev/1409/23497.html\nIt won't be easy. Suppose that I'll go for something like \"rope\" as a data structure, I have to find a way to teach the Pygments lexer to lex a part (the visible part) of the rope structure. Futher, all editing code, the unde stack, etc... should understand that structure.\nNo promises on this, but I like challenges. Maybe I will do it some day.\nedit: On a second thought. The fact that 20GB expands to 4GB will probably not be solved by only using something like \"rope\". I guess it's rather the layout engine that reflows the whole file, creating a huge raster of characters in memory. \n. Thank you, I'm indeed not sure about this. (Let me think.)\nIndeed, I meant Vi, because every Vim clone is also a Vi implementation. \nMaybe I should replace the word \"clone\" with \"implementation\", because I don't want to pretend to have all features of Vim. But I think it has some of Vim that Vi doesn't have.\nBut the name of the project was on purpose pyvim, because that sounds better than pyvi, and the goal is to become as close as possible to vim.\n. Thanks, I will change that later everywhere to be consistent.\n. Thanks everyone! I used the phrasing of @SanketDG.\n. Thanks for the suggestion! I made a new screenshot with the text of @coolwanglu.\n(The original was from a lorem ipsum generator.)\n. Hi all,\nI added the alternatives in the readme.\n@stefanoborini Thanks for the offer, I appreciate it! Right now, I'm not sure what can be reused, I'm also not sure how much I'm willing to invest in pyvim in particular. It was more created as a proof of concept to challenge the prompt-toolkit library and to learn.\nSo, there is no roadmap. But my focus is probably going to be this:\n- First, ensure that prompt-toolkit is the best possible libary for creating REPLs.\n- Second and third (in no particular order) Implementation of better data structures. (That means probably either rope or gap buffer. Or an adaptation that fits well into Python.)\n  And adding real vt100 pseudo terminal emulation. (like neovim got as well.) The latter will probably allow me integrate a full debugger.\nImplementing a better data structure would probably require refactoring many parts of the code base. So, merging code basis is probably not going to be an option for me right now.\nFurther, looking at Vai, the only things I'm missing right now are the following:\n- Highlighting of all occurrences of the identifier currently under the cursor.\n- Cursor position restored between runs.\n- Autoindent\nActually that would probably be an evening of work for me. (In any case, less than porting it.)\nAnd looking at the key bindings, that's also only a fraction of what we already support in pyvim:\npython\nc}    gU%    g~;    dd    di>    g~i<    E    yG    S    g?e    gui<    dW    yi`    ci'    x    g?i>    yi>  \n  ya'    di{    l    gE    d^    g~W    g?b    g~}    gUk    c    b    gu    gUi<    cG    s    g?W    gu| \n   gUiW    gugg    g~iw    di)    ygE    di<    da(    g~j    g?w    g~|    H    g?j    yW    :    >    c0  \n  g?{    (    B    ca>    W    h    g?i<    c%    ca(    dl    c|    g?|    da\"    g?a{    cgE    dL    guiW  \n  diW    gua`    di[    cH    gU;    yL    ca'    d{    gUi[    ca)    gui\"    dgE    ye    N    gue    y%  \n  g?G    gUa<    gUaW    g~B    g~e    A    g?ge    yi]    #    ge    gui)    yi'    cc    di\"    g?i)    w  \n  cW    yE    g?i(    g?a'    g?B    gUg_    gua\"    $    gUgg    gUL    gu%    g~a'    guL    g~,\n    g~H    c^    da{    <<    gUW    gUi}    dge    g~0    g?aw    c,    g~E    dj    g?l    cw       \n  yw    yb    c$    gua{    ca{    g?i}    ya)    dh    gul    g~k    g~a<    ciw    gu^    g?a}    g~i{  \n  a    n    yh    yiw    ci)    dB    O    g?aW    caW    ci(    gUi`    gUi'    g~i>    dw    cl    gui{  \n  gUE    caw    g?a\"    gUi{    gUa}    ci]    g~i`    g~ge    gUi]    guj    gU,    ya}    ce    g~G  \n  guiw    ^    daW    diw    gui[    yaW    ch    cgg    gu}    g?H    ,    yi}    gU{    gUa(    /  \n  guG    gUa[    gUi(    y0    gu,    g~a]    g?;    g~{    daw    g~h    d}    gUa`    ya`    g? \n    gUh    g~    ci{    g?}    d$    g?a(    gUj    -    <    guW    gug_    gui(    di}    gUG    gu$  \n  gT    guE    gU0    yi\"    d0    cg_    yj    d%    g~l    gUw    dE    gui]    ciW    gUa)    g~%  \n  gua}    k    ca]    g~i)    gui}    guH    ca[    yH    gUa]    g?a>    u    gUgE    di]    gua>    D  \n  g~w    guh    d     i    %    d|    g?i{    yi[    L    V    ca<    dG    gUi)    g?h    gUB    g?E \n   g~i[    g?i]    ya<    da}    g?g_    gUl    gU|    guge    cL    yi(    g~i(    g~i\"    C    ?    g~a> \n   gU    gui`    d;    gUa'    de    R    aW    yg_    g~gg    ca}    e    da[    guw    ya(    yB    gua'\n    c{    gUH    g_    yi{    di(    {    ya[    yi<    yaw    g~g_    +    ya\"    gua]    X    |    ci}    d,  \n  guaw    g?^    ca`    dH    g?i'    da>    yge    dk    zz    gu;    y|    g?$    gg    gU     g?iw  \n  I    )    g?i[    ya{    g?a]    c;    g~a(    g~iW    db    da`    !    gugE    G    cj    c     ~    J    g~  \n   g?a<    g?a`    da<    guaW    g?    g~aw    guB    y{    p    di`    ci\"    gui'    yiW    g?iW  \n  gua[    g?,    cB    y^    gu     y$    gUe    g~a`    gU^    *    gub    g~a{    ci`    g?L    g?a[    y} \n   ci[    da'    g~a[    gUiw    gua<    g?k    aw    gUge    g~^    yl    g?%    yi)    g~a)    gUb \n   gU$    g~a}    dgg    gUi\"    ;    g?a)    gu0    di'    g?gE    yy    cE    }    gui>    g~i}    gUi> \n   ya]    g~$    gUaw    y,    g~a\"    g~i]    cb    j    gu{    g~L    ygg    cge    y     g?i`    P    gua) \n   da)    ya>    ci<    g~i'    gUa\"    y;    o    g?0    gUa{    ck    v    ci>    gt    gUa>    yk    g~aW  \n  gU}    da]    guk    >>    dg_    g~gE    ca\"    g?i\"    g?gg    y    Y    gua(    g~b\nMaybe I'm missing something, I really appreciate your offer, but I'm really not sure what we can merge.\nCheers,\nJonathan\n. Thank you. Merged in: https://github.com/jonathanslenders/pyvim/commit/892188cee5ada46c194a6adc6b6e492d1c113234\n. This has been merged: https://github.com/jonathanslenders/pyvim/commit/dfed3a3ee3ad4704cc033f81c2a1b4c0aee3f7a1\nThank you!\nBy the way, I also added the same force option for the bn and bp commands.\n. Good catch! That's the default key binding of readline what you experience.\nIn a shell, ControlD will delete. I will create a new key binding for pyvim.\nThanks.\n. @SanketDG Thank you! That is a huge help. I couldn't figure out how much they should scroll. I will fix that.\n. Normally, all of these should be working.\nControl B/F/U/D/Y/E as well as PageUp and PageDown.\n(That is the latest master commit. Not yet the Pypi version.)\n. Thanks for reporting. There is indeed still a bug in :q. It happens when you start the editor without file, and then uses :edit to add a new file. I will fix that.\nZZ has not yet been implemented. I'll fix that as well.\n. Thanks for reporting.\nNormally :b 1 (with a space in between) should already work. I was not aware that it was possible without. I'll fix that as well.\nBy the way, feel free to keep reporting missing key bindings or commands. Vim has a lot, and implementing all of them is not feasible in the short term. But things that are reported will probably get priority.\n. I made \"vi\" an alias for \"pyvim\" now. That forced me to use it all day. :)\nActually, right now, I'm doing all pyvim development in pyvim itself.\nThat way, every time I need a missing feature, I want to implement it asap.\n. Thanks. I am aware of this. pyflakes can't run if there is a syntax error in the document. But instead it should show a compile error. I still have to do that.\n. This has been merged: https://github.com/jonathanslenders/pyvim/commit/1ff1bacbf18b68c178bc071dfce27607ce53feef\nThanks you!!\n. About control h/l/j/k/ or arrows. Are you sure that is default Vim behaviour? Or do you have some custom bindings in your .vimrc?\n. I'll think about it. I like the shortcuts. They are easy to implement. But maybe I'll put them in an extension.\n. Probably I will implement ControlW + hjkl.\n. Are these just aliases, or do they have a different meaning?\n. Thank you. I didn't know about the re-read part. That is interesting.\n. This has been implemented: https://github.com/jonathanslenders/pyvim/commit/40cfe6691aef91262eb30ca8d415c437331ba104\n. Yes, that's something I'd like to have as well. Probably I will do it somewhere in the near future.\n. Yes, thanks for the suggestion. py.test is really great.\nThere are no tests yet in pyvim. But I think I'll use that indeed. (Today I used it in another project.)\n. Thank you. Merged in: https://github.com/jonathanslenders/pyvim/commit/b1d9813665a32d4541a411229c05aa87786e8c1a\n. Thanks! I have a look at this later on.\n. Hi @tony and @lunemec \nSorry for the late reply. I merged the two commits.\nI'm completely in favour of using pytest, and think about converting the tests from prompt-toolkit to pytest as well.\n. Thanks a lot for reporting this!\nI didn't know about it, but it definitely makes sense. It's actually an enhancement that goes to prompt-toolkit.  Having this also means that when I implement \"ap\" (Auto-paragraph), we will automatically have \"vap\" as well.\n. Fixed in https://github.com/jonathanslenders/python-prompt-toolkit/commit/3675addf7e3f65f63ab833cfcb5cf3205e54fac2\nThis should handle:  viw, vaw, vi(, vi{ va( va{, etc...\n. This has to be implemented in prompt-toolkit itself:\nhttps://github.com/jonathanslenders/python-prompt-toolkit/issues/207\nI'm closing this issue in favor of that one.\n. Yes, we don't have mouse support yet... I really hope to be able to implement that some day. That would be great for all applications using prompt-toolkit. But it's not an easy one. So, probably I will postpone this until all other important things are working.\n. Docopt is a dependency of ptpython, which is a dependency of pyvim. If you want, you can create a pull request to add docopt to the setup.py of pyvim. That will probably be better.\n. Merged in:  https://github.com/jonathanslenders/pyvim/commit/4920b74e0ba6d82285092ef2826bb830c7a209b6\nThanks a lot!\n. Thanks for reporting the bug @ja5h . I appreciate it.\nThis looks indeed like a bug, but I'm not able to reproduce it...\nA few questions:\n- Are you using a custom colorscheme?\n- Do you know whether your terminal supports 256 colors? (I think it does, if I look at the screenshot, but I'm not entirely sure.)\n- Just to be sure: you are not using GNU Screen or Tmux?\n- What terminal are you using?\n- What Python version do you have?\nThanks a lot!\nJonathan\n. I agree. Feel free to create a pull request.\n. Ok. also clearly a bug. Should be fixed. Thanks!\n. I think this is still not entirely correct. It's only for numerical names, that the space is not required. I can have a look later on.\n. Merged in: https://github.com/jonathanslenders/pyvim/commit/d842f0665f1b22733e52c6bda0892464df867830\nThanks!\n. That's a bug. Thanks! Will be fixed.\n. Fixed in: https://github.com/jonathanslenders/python-prompt-toolkit/commit/3228e1c4c3373a167d4685288e29f316ab6bd8e2\n. The reason is that prompt-toolkit, in its core, is a kind of GNU readline replacement. Everything that readline does should be in there. And it happens that readline also implements a lot of Vi key bindings. (Especially the motion and text blocks commands.)\nSo, this is a conscious decision, to avoid code duplication.\n. Thanks, i didn't know about the last one. (That they should close together.)\nThe scrolling together is caused by a limitation in prompt-toolkit. There is only one cursor per file, so if a file is opened in several panes, they share the same cursor. That causes it to scroll together. I'm working on a solution, but that takes some time. (I have to rethink a part of the Buffer data structure, and I prefer to find a way, that it supports multiple cursors, but also large files, line folding, and a few other things.)\n. I think in insert mode, in indents, while in navigation mode it still replaces the last two characters before the cursor. That's what GNU readline does, but we shouldn't do that.\n. Fixed: https://github.com/jonathanslenders/pyvim/commit/1fdd937b4cb1592703b66c59247358c2473f4104\n. Merged in: https://github.com/jonathanslenders/pyvim/commit/1ec47f103dd7ce09412211f80799dfa402f642e6\nThanks a lot!\n. Hi @ekollof,\nThanks for reporting this bug. Excuse me for replying this late.\nI think I fixed the bug in prompt_toolkit. I installed ArchLinux and had the same issue there.\nhttps://github.com/jonathanslenders/python-prompt-toolkit/commit/9aa56e741444ff0c2756e531b3a352063b7e99c2\nThe gray dots to indicate trailing whitespace at the lines did not appear in the ASCII encoding.\n. A new version with this fix has been released as well.\n. Hi @ordinaryegi  I suppose you installed pyvim through Git?\nYou need to check out the latest master commit of prompt_toolkit and install that. (The latest is not yet on Pypi, sorry.)\nSee: https://github.com/jonathanslenders/python-prompt-toolkit\nJonathan\n. I guess that's something with how pyvim is installed. After installing the latest prompt-toolkit, try to run \"python setup.py develop\" in the pyvim repository.\nBut anyway, I will probably try to do a new release of both repositories on pypi this evening. (That's in about 9 hours.) That will be easier.\n. Good that you figured it out!\nI did a new release on pypi. pip install -U pyvim should now give you the latest version as well.\nThanks for the complement. Pyvim is still in the early stages, but we keep improving hopefully. :)\n. Hi @twz915,\nThis is implemented: https://github.com/jonathanslenders/python-prompt-toolkit/commit/f9c54569d98603c98a6f34134c287399f70ed283\nIt will be in the next release of pyvim. If you have other suggestions. Feel free to create an issue.\nJonathan\n. We can add this to pyvim yes. It cannot be added to prompt_toolkit like the other bindings, because there we want to be compatible by default with GNU readline, where <num>G means: go to this entry in the history.\n. Hi @gimu,\nThanks for pointing this out. pyvim was behind on prompt_toolkit. Maybe you already had a newer version of that library?\nAnyway. I just did a new pypi release of pyvim (0.0.5), pointing to the latest versions of these libraries. Does it work now? Try pip install -U pyvim.\nCheers,\nJonathan\n. Great :)\n. Hi @zaxebo1,\nThanks for the recommendation! It should now work: https://github.com/jonathanslenders/pyvim/commit/ce65f7a98d72f156cb768ffdf91859cf0e5c54b3\nCheers,\nJonathan\n. You're welcome!\n. Hi @znorris,\nAre you using the insert key of the keyboard? If so, that's interesting, because I think, I never tested it. My keyboard does not have insert keys, and I use 'i' or 'a' to go to insert mode, and 'escape' to go back.\nI guess we have to fix that.\nThe ':q' issue for the help should also be fixed. That's easy.\nAnyway, I'd say it's still experimental to some extend. All features that are developed are supposed to be stable and bug free. Bugs in existing features have to be fixed. Many features are however still missing, but I'm using it quite often as my own editor without any issues.\nThere is however one big issue, that is the handling of big files. (>2000 lines of code). Editing such big files becomes slow. I know why. I know how to solve it. But not how to do it in pure Python code, and not without loosing compatibility with Pygments. And not without risking to introduce many small bugs.\nData structures are really important for editors when files are bigger. The underlying library prompt-toolkit was meant as a readline replacement, and not designed for such big files. The data structures of prompt-toolkit are extremely simple. This was good enough for most use cases, and allows for very quick development. So, I'm honest, currently prompt-toolkit is not powerful enough to compete with a real Vim or Emacs. Maybe some day it will, but it's not a priority. But for now, it should certainly work fine for smaller stuff and simple editing.\n. The insert key is working. I'm going to close this.\n. That pull request of @amjith has been merged, so the next pyvim release will include it. Thanks everyone!\n. Hi @htzh,\nThanks for taking the time to troubleshoot the issue!\nI should admit that I didn't  create an API to install new color schemes. Probably, just like ptpython, we would need an install_ui_colorscheme function: https://github.com/jonathanslenders/ptpython/blob/master/examples/ptpython_config/config.py#L102\nIn ptpython, it's possible to choose the color of the Python source code and the UI decorations independently. This is what I want in Pyvim.\nStyles are immutable classes. Well, actually they are mutable, but as you experienced, it's not a good idea to alter an existing style, because not all the changes are propagated through the application. There are also caching layers in between. And I think there is one style class that acts as a proxy to the text highlighting style and the ui style.\nSo, what we need is an install_ui_colorscheme function and a use_ui_colorscheme function. I take this issue as a feature request to do that. It's possible that you find a workaround, but that's not a clean way.\nCheers,\nJonathan\n. It's a very cool proposal. I'd like to have this as well, but it's not my priority at the moment. We will see in the future. :-)\n. Hi @jacob14916,\nThanks a lot for reporting this bug! I was not aware about the difference between Python 2 and Python 3 regarding docopt. I will decode the string in Python2.\nJonathan\n. This should be fixed in: https://github.com/jonathanslenders/pyvim/commit/07fbb2cd45810bfd2ce4676aa5029dfe3e26b405\nActually, I'm not entirely satisfied with the solution. I prefer all strings to be unicode strings, even for Python 2. However it seems that the combination of docopt, Python 2 and unicode strings doesn't work that well out of the box. (See also: https://github.com/docopt/docopt/issues/301 ). So, I consider switching to the \"click\" library if that fixes my problems.\n. Thank you! Merged in: https://github.com/jonathanslenders/pyvim/commit/fddbac5c861db4470611b20aec923ceacd44d700\n. Thanks a lot for reporting this! I appreciate it.\nThe solution was actually easy: https://github.com/jonathanslenders/python-prompt-toolkit/commit/6d14961008cc00dba8ffb5b1d72753134baf9084\nThis is a serious bug, so it means that I will push a new release asap.\n. Thanks for reporting!\nThis commit should fix it: https://github.com/jonathanslenders/pyvim/commit/fb0f6956e6b8f8620c2fd3b31bef9697d59fd21c\n. Hi @gantlion,\nThat is right, I've been working on some improvements on prompt-toolkit. (Named registers, improved text objects, etc...) Now you need to install the latest prompt-toolkit from Git as well. I hope to be able to release both of them soon.\nJonathan\n. Thank you @davidbrochart,\nA few things were implemented differently in prompt_toolkit, but this commit https://github.com/jonathanslenders/pyvim/commit/0c36a2766c68a6da75943be77da472e3434fb104 should do it. Let me know if you have some remarks.\n. Thank you @davidbrochart, Very useful!\nI'll review and merge this asap.\nJonathan\n. Hi David,\nThat's true. Thanks for pointing out! It's the same for #.\nAdding this to my to-do list. :-)\n. Hi @Mikaayenson, what do you mean?\nNormally, pyvim should run on any Python 3 version.. Hi @Kentoseth and @MarSoft,\nI just pushed a new version of Pyvim (0.0.21) that contains the fix. The fix was already in the repo, but not released.\nFYI: at this point I'm mostly working on prompt_toolkit v2.0. This contains many improvements. Once this is finished, you can expect an improved version of Pyvim, using prompt_toolkit 2.0 as well.\n. Thank you @davidbrochart,\nThis looks very nice! I'll merge it later when I have some time to review it.\nAlso, pyvim didn't got a lot of attention lately. Which is because I've been focussing mostly on prompt_toolkit 2.0. When that's released I'd like to make sure that pyvim runs on 2.0 as well, which should solve a couple of pyvim issues.. Hi @juanpabloaj Thanks for the pull request. I'll merge it asap.\nBut note that this is still a very experimental package (basically two evenings of fun.) Probably, somewhere during the next weeks I'll try to create a decent Vim clone with more functionality and release it.\n(I also appreciate if you don't share this package yet on Reddit/hackernews/etc... for now. I prefer to release finished stuff ;) )\n. I justed released this on pypi. It's public now! :)\n. Thanks for reporting! I will fix this asap.\n. Ok, thanks for reporting! :)\nI will fix that, along with the other bugs coming in.\n. Thank you! I merged it: https://github.com/jonathanslenders/pyvim/commit/cc0b333cef7a21682a6c12789c32cc4371ec7f71\n. Thanks @movEAX ! I know about this (personally, I use it very often.)\nSo, there's a good chance I will implement this anytime soon for pyvim as well.\n. It's vim-like indeed. The goal is certainly not to create a perfect clone. But something that is useful and feels familiar for vim users.\n. Thanks for reporting! I'll try to fix this.\n. Thanks for reporting! I fixed it: https://github.com/jonathanslenders/pyvim/commit/34b61754c737972932b3f1902528cf7eb427d059\n. Good idea! :)\nActually, some time ago I made a multiplexer in Python: https://github.com/jonathanslenders/pymux\nSo, it shouldn't be too hard to give pyvim terminal emulation as well. Do you know how neovim is doing it? It would be good to support the same set of commands.\nHaving this would be also be the start of a real Python IDE with integrated debugger and option to run scripts.\n. Hi @nikhedonia Thanks for reporting!\nI am aware of this. Right now, the data structures are still extremely simple. A next step would be to have something more clever. I liked this: http://lists.suckless.org/dev/1409/23497.html\nIt won't be easy. Suppose that I'll go for something like \"rope\" as a data structure, I have to find a way to teach the Pygments lexer to lex a part (the visible part) of the rope structure. Futher, all editing code, the unde stack, etc... should understand that structure.\nNo promises on this, but I like challenges. Maybe I will do it some day.\nedit: On a second thought. The fact that 20GB expands to 4GB will probably not be solved by only using something like \"rope\". I guess it's rather the layout engine that reflows the whole file, creating a huge raster of characters in memory. \n. Thank you, I'm indeed not sure about this. (Let me think.)\nIndeed, I meant Vi, because every Vim clone is also a Vi implementation. \nMaybe I should replace the word \"clone\" with \"implementation\", because I don't want to pretend to have all features of Vim. But I think it has some of Vim that Vi doesn't have.\nBut the name of the project was on purpose pyvim, because that sounds better than pyvi, and the goal is to become as close as possible to vim.\n. Thanks, I will change that later everywhere to be consistent.\n. Thanks everyone! I used the phrasing of @SanketDG.\n. Thanks for the suggestion! I made a new screenshot with the text of @coolwanglu.\n(The original was from a lorem ipsum generator.)\n. Hi all,\nI added the alternatives in the readme.\n@stefanoborini Thanks for the offer, I appreciate it! Right now, I'm not sure what can be reused, I'm also not sure how much I'm willing to invest in pyvim in particular. It was more created as a proof of concept to challenge the prompt-toolkit library and to learn.\nSo, there is no roadmap. But my focus is probably going to be this:\n- First, ensure that prompt-toolkit is the best possible libary for creating REPLs.\n- Second and third (in no particular order) Implementation of better data structures. (That means probably either rope or gap buffer. Or an adaptation that fits well into Python.)\n  And adding real vt100 pseudo terminal emulation. (like neovim got as well.) The latter will probably allow me integrate a full debugger.\nImplementing a better data structure would probably require refactoring many parts of the code base. So, merging code basis is probably not going to be an option for me right now.\nFurther, looking at Vai, the only things I'm missing right now are the following:\n- Highlighting of all occurrences of the identifier currently under the cursor.\n- Cursor position restored between runs.\n- Autoindent\nActually that would probably be an evening of work for me. (In any case, less than porting it.)\nAnd looking at the key bindings, that's also only a fraction of what we already support in pyvim:\npython\nc}    gU%    g~;    dd    di>    g~i<    E    yG    S    g?e    gui<    dW    yi`    ci'    x    g?i>    yi>  \n  ya'    di{    l    gE    d^    g~W    g?b    g~}    gUk    c    b    gu    gUi<    cG    s    g?W    gu| \n   gUiW    gugg    g~iw    di)    ygE    di<    da(    g~j    g?w    g~|    H    g?j    yW    :    >    c0  \n  g?{    (    B    ca>    W    h    g?i<    c%    ca(    dl    c|    g?|    da\"    g?a{    cgE    dL    guiW  \n  diW    gua`    di[    cH    gU;    yL    ca'    d{    gUi[    ca)    gui\"    dgE    ye    N    gue    y%  \n  g?G    gUa<    gUaW    g~B    g~e    A    g?ge    yi]    #    ge    gui)    yi'    cc    di\"    g?i)    w  \n  cW    yE    g?i(    g?a'    g?B    gUg_    gua\"    $    gUgg    gUL    gu%    g~a'    guL    g~,\n    g~H    c^    da{    <<    gUW    gUi}    dge    g~0    g?aw    c,    g~E    dj    g?l    cw       \n  yw    yb    c$    gua{    ca{    g?i}    ya)    dh    gul    g~k    g~a<    ciw    gu^    g?a}    g~i{  \n  a    n    yh    yiw    ci)    dB    O    g?aW    caW    ci(    gUi`    gUi'    g~i>    dw    cl    gui{  \n  gUE    caw    g?a\"    gUi{    gUa}    ci]    g~i`    g~ge    gUi]    guj    gU,    ya}    ce    g~G  \n  guiw    ^    daW    diw    gui[    yaW    ch    cgg    gu}    g?H    ,    yi}    gU{    gUa(    /  \n  guG    gUa[    gUi(    y0    gu,    g~a]    g?;    g~{    daw    g~h    d}    gUa`    ya`    g? \n    gUh    g~    ci{    g?}    d$    g?a(    gUj    -    <    guW    gug_    gui(    di}    gUG    gu$  \n  gT    guE    gU0    yi\"    d0    cg_    yj    d%    g~l    gUw    dE    gui]    ciW    gUa)    g~%  \n  gua}    k    ca]    g~i)    gui}    guH    ca[    yH    gUa]    g?a>    u    gUgE    di]    gua>    D  \n  g~w    guh    d     i    %    d|    g?i{    yi[    L    V    ca<    dG    gUi)    g?h    gUB    g?E \n   g~i[    g?i]    ya<    da}    g?g_    gUl    gU|    guge    cL    yi(    g~i(    g~i\"    C    ?    g~a> \n   gU    gui`    d;    gUa'    de    R    aW    yg_    g~gg    ca}    e    da[    guw    ya(    yB    gua'\n    c{    gUH    g_    yi{    di(    {    ya[    yi<    yaw    g~g_    +    ya\"    gua]    X    |    ci}    d,  \n  guaw    g?^    ca`    dH    g?i'    da>    yge    dk    zz    gu;    y|    g?$    gg    gU     g?iw  \n  I    )    g?i[    ya{    g?a]    c;    g~a(    g~iW    db    da`    !    gugE    G    cj    c     ~    J    g~  \n   g?a<    g?a`    da<    guaW    g?    g~aw    guB    y{    p    di`    ci\"    gui'    yiW    g?iW  \n  gua[    g?,    cB    y^    gu     y$    gUe    g~a`    gU^    *    gub    g~a{    ci`    g?L    g?a[    y} \n   ci[    da'    g~a[    gUiw    gua<    g?k    aw    gUge    g~^    yl    g?%    yi)    g~a)    gUb \n   gU$    g~a}    dgg    gUi\"    ;    g?a)    gu0    di'    g?gE    yy    cE    }    gui>    g~i}    gUi> \n   ya]    g~$    gUaw    y,    g~a\"    g~i]    cb    j    gu{    g~L    ygg    cge    y     g?i`    P    gua) \n   da)    ya>    ci<    g~i'    gUa\"    y;    o    g?0    gUa{    ck    v    ci>    gt    gUa>    yk    g~aW  \n  gU}    da]    guk    >>    dg_    g~gE    ca\"    g?i\"    g?gg    y    Y    gua(    g~b\nMaybe I'm missing something, I really appreciate your offer, but I'm really not sure what we can merge.\nCheers,\nJonathan\n. Thank you. Merged in: https://github.com/jonathanslenders/pyvim/commit/892188cee5ada46c194a6adc6b6e492d1c113234\n. This has been merged: https://github.com/jonathanslenders/pyvim/commit/dfed3a3ee3ad4704cc033f81c2a1b4c0aee3f7a1\nThank you!\nBy the way, I also added the same force option for the bn and bp commands.\n. Good catch! That's the default key binding of readline what you experience.\nIn a shell, ControlD will delete. I will create a new key binding for pyvim.\nThanks.\n. @SanketDG Thank you! That is a huge help. I couldn't figure out how much they should scroll. I will fix that.\n. Normally, all of these should be working.\nControl B/F/U/D/Y/E as well as PageUp and PageDown.\n(That is the latest master commit. Not yet the Pypi version.)\n. Thanks for reporting. There is indeed still a bug in :q. It happens when you start the editor without file, and then uses :edit to add a new file. I will fix that.\nZZ has not yet been implemented. I'll fix that as well.\n. Thanks for reporting.\nNormally :b 1 (with a space in between) should already work. I was not aware that it was possible without. I'll fix that as well.\nBy the way, feel free to keep reporting missing key bindings or commands. Vim has a lot, and implementing all of them is not feasible in the short term. But things that are reported will probably get priority.\n. I made \"vi\" an alias for \"pyvim\" now. That forced me to use it all day. :)\nActually, right now, I'm doing all pyvim development in pyvim itself.\nThat way, every time I need a missing feature, I want to implement it asap.\n. Thanks. I am aware of this. pyflakes can't run if there is a syntax error in the document. But instead it should show a compile error. I still have to do that.\n. This has been merged: https://github.com/jonathanslenders/pyvim/commit/1ff1bacbf18b68c178bc071dfce27607ce53feef\nThanks you!!\n. About control h/l/j/k/ or arrows. Are you sure that is default Vim behaviour? Or do you have some custom bindings in your .vimrc?\n. I'll think about it. I like the shortcuts. They are easy to implement. But maybe I'll put them in an extension.\n. Probably I will implement ControlW + hjkl.\n. Are these just aliases, or do they have a different meaning?\n. Thank you. I didn't know about the re-read part. That is interesting.\n. This has been implemented: https://github.com/jonathanslenders/pyvim/commit/40cfe6691aef91262eb30ca8d415c437331ba104\n. Yes, that's something I'd like to have as well. Probably I will do it somewhere in the near future.\n. Yes, thanks for the suggestion. py.test is really great.\nThere are no tests yet in pyvim. But I think I'll use that indeed. (Today I used it in another project.)\n. Thank you. Merged in: https://github.com/jonathanslenders/pyvim/commit/b1d9813665a32d4541a411229c05aa87786e8c1a\n. Thanks! I have a look at this later on.\n. Hi @tony and @lunemec \nSorry for the late reply. I merged the two commits.\nI'm completely in favour of using pytest, and think about converting the tests from prompt-toolkit to pytest as well.\n. Thanks a lot for reporting this!\nI didn't know about it, but it definitely makes sense. It's actually an enhancement that goes to prompt-toolkit.  Having this also means that when I implement \"ap\" (Auto-paragraph), we will automatically have \"vap\" as well.\n. Fixed in https://github.com/jonathanslenders/python-prompt-toolkit/commit/3675addf7e3f65f63ab833cfcb5cf3205e54fac2\nThis should handle:  viw, vaw, vi(, vi{ va( va{, etc...\n. This has to be implemented in prompt-toolkit itself:\nhttps://github.com/jonathanslenders/python-prompt-toolkit/issues/207\nI'm closing this issue in favor of that one.\n. Yes, we don't have mouse support yet... I really hope to be able to implement that some day. That would be great for all applications using prompt-toolkit. But it's not an easy one. So, probably I will postpone this until all other important things are working.\n. Docopt is a dependency of ptpython, which is a dependency of pyvim. If you want, you can create a pull request to add docopt to the setup.py of pyvim. That will probably be better.\n. Merged in:  https://github.com/jonathanslenders/pyvim/commit/4920b74e0ba6d82285092ef2826bb830c7a209b6\nThanks a lot!\n. Thanks for reporting the bug @ja5h . I appreciate it.\nThis looks indeed like a bug, but I'm not able to reproduce it...\nA few questions:\n- Are you using a custom colorscheme?\n- Do you know whether your terminal supports 256 colors? (I think it does, if I look at the screenshot, but I'm not entirely sure.)\n- Just to be sure: you are not using GNU Screen or Tmux?\n- What terminal are you using?\n- What Python version do you have?\nThanks a lot!\nJonathan\n. I agree. Feel free to create a pull request.\n. Ok. also clearly a bug. Should be fixed. Thanks!\n. I think this is still not entirely correct. It's only for numerical names, that the space is not required. I can have a look later on.\n. Merged in: https://github.com/jonathanslenders/pyvim/commit/d842f0665f1b22733e52c6bda0892464df867830\nThanks!\n. That's a bug. Thanks! Will be fixed.\n. Fixed in: https://github.com/jonathanslenders/python-prompt-toolkit/commit/3228e1c4c3373a167d4685288e29f316ab6bd8e2\n. The reason is that prompt-toolkit, in its core, is a kind of GNU readline replacement. Everything that readline does should be in there. And it happens that readline also implements a lot of Vi key bindings. (Especially the motion and text blocks commands.)\nSo, this is a conscious decision, to avoid code duplication.\n. Thanks, i didn't know about the last one. (That they should close together.)\nThe scrolling together is caused by a limitation in prompt-toolkit. There is only one cursor per file, so if a file is opened in several panes, they share the same cursor. That causes it to scroll together. I'm working on a solution, but that takes some time. (I have to rethink a part of the Buffer data structure, and I prefer to find a way, that it supports multiple cursors, but also large files, line folding, and a few other things.)\n. I think in insert mode, in indents, while in navigation mode it still replaces the last two characters before the cursor. That's what GNU readline does, but we shouldn't do that.\n. Fixed: https://github.com/jonathanslenders/pyvim/commit/1fdd937b4cb1592703b66c59247358c2473f4104\n. Merged in: https://github.com/jonathanslenders/pyvim/commit/1ec47f103dd7ce09412211f80799dfa402f642e6\nThanks a lot!\n. Hi @ekollof,\nThanks for reporting this bug. Excuse me for replying this late.\nI think I fixed the bug in prompt_toolkit. I installed ArchLinux and had the same issue there.\nhttps://github.com/jonathanslenders/python-prompt-toolkit/commit/9aa56e741444ff0c2756e531b3a352063b7e99c2\nThe gray dots to indicate trailing whitespace at the lines did not appear in the ASCII encoding.\n. A new version with this fix has been released as well.\n. Hi @ordinaryegi  I suppose you installed pyvim through Git?\nYou need to check out the latest master commit of prompt_toolkit and install that. (The latest is not yet on Pypi, sorry.)\nSee: https://github.com/jonathanslenders/python-prompt-toolkit\nJonathan\n. I guess that's something with how pyvim is installed. After installing the latest prompt-toolkit, try to run \"python setup.py develop\" in the pyvim repository.\nBut anyway, I will probably try to do a new release of both repositories on pypi this evening. (That's in about 9 hours.) That will be easier.\n. Good that you figured it out!\nI did a new release on pypi. pip install -U pyvim should now give you the latest version as well.\nThanks for the complement. Pyvim is still in the early stages, but we keep improving hopefully. :)\n. Hi @twz915,\nThis is implemented: https://github.com/jonathanslenders/python-prompt-toolkit/commit/f9c54569d98603c98a6f34134c287399f70ed283\nIt will be in the next release of pyvim. If you have other suggestions. Feel free to create an issue.\nJonathan\n. We can add this to pyvim yes. It cannot be added to prompt_toolkit like the other bindings, because there we want to be compatible by default with GNU readline, where <num>G means: go to this entry in the history.\n. Hi @gimu,\nThanks for pointing this out. pyvim was behind on prompt_toolkit. Maybe you already had a newer version of that library?\nAnyway. I just did a new pypi release of pyvim (0.0.5), pointing to the latest versions of these libraries. Does it work now? Try pip install -U pyvim.\nCheers,\nJonathan\n. Great :)\n. Hi @zaxebo1,\nThanks for the recommendation! It should now work: https://github.com/jonathanslenders/pyvim/commit/ce65f7a98d72f156cb768ffdf91859cf0e5c54b3\nCheers,\nJonathan\n. You're welcome!\n. Hi @znorris,\nAre you using the insert key of the keyboard? If so, that's interesting, because I think, I never tested it. My keyboard does not have insert keys, and I use 'i' or 'a' to go to insert mode, and 'escape' to go back.\nI guess we have to fix that.\nThe ':q' issue for the help should also be fixed. That's easy.\nAnyway, I'd say it's still experimental to some extend. All features that are developed are supposed to be stable and bug free. Bugs in existing features have to be fixed. Many features are however still missing, but I'm using it quite often as my own editor without any issues.\nThere is however one big issue, that is the handling of big files. (>2000 lines of code). Editing such big files becomes slow. I know why. I know how to solve it. But not how to do it in pure Python code, and not without loosing compatibility with Pygments. And not without risking to introduce many small bugs.\nData structures are really important for editors when files are bigger. The underlying library prompt-toolkit was meant as a readline replacement, and not designed for such big files. The data structures of prompt-toolkit are extremely simple. This was good enough for most use cases, and allows for very quick development. So, I'm honest, currently prompt-toolkit is not powerful enough to compete with a real Vim or Emacs. Maybe some day it will, but it's not a priority. But for now, it should certainly work fine for smaller stuff and simple editing.\n. The insert key is working. I'm going to close this.\n. That pull request of @amjith has been merged, so the next pyvim release will include it. Thanks everyone!\n. Hi @htzh,\nThanks for taking the time to troubleshoot the issue!\nI should admit that I didn't  create an API to install new color schemes. Probably, just like ptpython, we would need an install_ui_colorscheme function: https://github.com/jonathanslenders/ptpython/blob/master/examples/ptpython_config/config.py#L102\nIn ptpython, it's possible to choose the color of the Python source code and the UI decorations independently. This is what I want in Pyvim.\nStyles are immutable classes. Well, actually they are mutable, but as you experienced, it's not a good idea to alter an existing style, because not all the changes are propagated through the application. There are also caching layers in between. And I think there is one style class that acts as a proxy to the text highlighting style and the ui style.\nSo, what we need is an install_ui_colorscheme function and a use_ui_colorscheme function. I take this issue as a feature request to do that. It's possible that you find a workaround, but that's not a clean way.\nCheers,\nJonathan\n. It's a very cool proposal. I'd like to have this as well, but it's not my priority at the moment. We will see in the future. :-)\n. Hi @jacob14916,\nThanks a lot for reporting this bug! I was not aware about the difference between Python 2 and Python 3 regarding docopt. I will decode the string in Python2.\nJonathan\n. This should be fixed in: https://github.com/jonathanslenders/pyvim/commit/07fbb2cd45810bfd2ce4676aa5029dfe3e26b405\nActually, I'm not entirely satisfied with the solution. I prefer all strings to be unicode strings, even for Python 2. However it seems that the combination of docopt, Python 2 and unicode strings doesn't work that well out of the box. (See also: https://github.com/docopt/docopt/issues/301 ). So, I consider switching to the \"click\" library if that fixes my problems.\n. Thank you! Merged in: https://github.com/jonathanslenders/pyvim/commit/fddbac5c861db4470611b20aec923ceacd44d700\n. Thanks a lot for reporting this! I appreciate it.\nThe solution was actually easy: https://github.com/jonathanslenders/python-prompt-toolkit/commit/6d14961008cc00dba8ffb5b1d72753134baf9084\nThis is a serious bug, so it means that I will push a new release asap.\n. Thanks for reporting!\nThis commit should fix it: https://github.com/jonathanslenders/pyvim/commit/fb0f6956e6b8f8620c2fd3b31bef9697d59fd21c\n. Hi @gantlion,\nThat is right, I've been working on some improvements on prompt-toolkit. (Named registers, improved text objects, etc...) Now you need to install the latest prompt-toolkit from Git as well. I hope to be able to release both of them soon.\nJonathan\n. Thank you @davidbrochart,\nA few things were implemented differently in prompt_toolkit, but this commit https://github.com/jonathanslenders/pyvim/commit/0c36a2766c68a6da75943be77da472e3434fb104 should do it. Let me know if you have some remarks.\n. Thank you @davidbrochart, Very useful!\nI'll review and merge this asap.\nJonathan\n. Hi David,\nThat's true. Thanks for pointing out! It's the same for #.\nAdding this to my to-do list. :-)\n. Hi @Mikaayenson, what do you mean?\nNormally, pyvim should run on any Python 3 version.. Hi @Kentoseth and @MarSoft,\nI just pushed a new version of Pyvim (0.0.21) that contains the fix. The fix was already in the repo, but not released.\nFYI: at this point I'm mostly working on prompt_toolkit v2.0. This contains many improvements. Once this is finished, you can expect an improved version of Pyvim, using prompt_toolkit 2.0 as well.\n. Thank you @davidbrochart,\nThis looks very nice! I'll merge it later when I have some time to review it.\nAlso, pyvim didn't got a lot of attention lately. Which is because I've been focussing mostly on prompt_toolkit 2.0. When that's released I'd like to make sure that pyvim runs on 2.0 as well, which should solve a couple of pyvim issues.. ",
    "dragon788": "I'm running into this in a slightly different manner. If I open multiple files into panes from the command line (and maybe from within pyvim), apparently my commands to save/etc aren't making it to the correct buffer. See #93.. In Vim this also responds to Ctrl+q iirc as this is the mapping on Windows for gVim where compatibility with Ctrl+C/X/V/Z are maintained.. You can also jump windows by calling :wincmd and the key corresponding to the action you want to take, ie :wincmd h would move the focus to a window to the left of where your cursor currently is located. This is painful but I learned it by trying to use Vim in a browser terminal emulator where Ctrl+W closes the dang tab!. Mouse support appears to be working for me in PyVim even under PyMux.. I'm running into this in a slightly different manner. If I open multiple files into panes from the command line (and maybe from within pyvim), apparently my commands to save/etc aren't making it to the correct buffer. See #93.. In Vim this also responds to Ctrl+q iirc as this is the mapping on Windows for gVim where compatibility with Ctrl+C/X/V/Z are maintained.. You can also jump windows by calling :wincmd and the key corresponding to the action you want to take, ie :wincmd h would move the focus to a window to the left of where your cursor currently is located. This is painful but I learned it by trying to use Vim in a browser terminal emulator where Ctrl+W closes the dang tab!. Mouse support appears to be working for me in PyVim even under PyMux.. ",
    "e12e": "Possibly related: shouldn't :q in a buffer close that buffer?\nIf I start pyvim and type :help for help (incidentially, :h doesn't work - it probably should)  -- I can't seem to close the help-buffer? In vim I'd just do :q -- but that doesn't work (pyvim complains about \"one more file to edit\") -- and :q! quits pyvim -- rather than close the buffer&window.\n. It's right there in your vimrc: ctrl-w (window) hkjl... perhaps mapping arrows to hjkl might make sense, if that's not already done. Please don't remap \"prime\" shortcuts like ctrl-\"key\" by default - it gors against the principle of \"least surprise\" (and runs the risk of conflicting with eg: window manager (xmonad...)/os shortcuts)! :-)\n. *goes (sorry, silly cellphone touch keyboard)\n. I'm not sure what you mean, ctrl-w hjkl is bound as standard in vim? Granted it's two commands, but works well enough as a standard binding?\nSee eg: http://vimcasts.org/episodes/working-with-windows/\n. Possibly related: shouldn't :q in a buffer close that buffer?\nIf I start pyvim and type :help for help (incidentially, :h doesn't work - it probably should)  -- I can't seem to close the help-buffer? In vim I'd just do :q -- but that doesn't work (pyvim complains about \"one more file to edit\") -- and :q! quits pyvim -- rather than close the buffer&window.\n. It's right there in your vimrc: ctrl-w (window) hkjl... perhaps mapping arrows to hjkl might make sense, if that's not already done. Please don't remap \"prime\" shortcuts like ctrl-\"key\" by default - it gors against the principle of \"least surprise\" (and runs the risk of conflicting with eg: window manager (xmonad...)/os shortcuts)! :-)\n. *goes (sorry, silly cellphone touch keyboard)\n. I'm not sure what you mean, ctrl-w hjkl is bound as standard in vim? Granted it's two commands, but works well enough as a standard binding?\nSee eg: http://vimcasts.org/episodes/working-with-windows/\n. ",
    "lunemec": "I think it is neither, Vi is the original program without extensions and it was supposed to be used with printers instead of monitor, while Vim supports plugins and other nice stuff. But pyvim has some additional features vim doesn't have when installed. So it is kind of like vim extended, or vim like editor ..\n. I'm using elementaryOS (ubuntu 14.10) and py 2.7.6 and works OK. Maybe some incompatibility for versions py > 2.7.6?\n. Maybe the simplest fix would be to disable syntax highlight on files over certain ammount. There is no way someone has 200kB .py file. For most cases, it will be .csv or .sql or some datafile which would not support syntax highlight as well. Maybe that can cut down the memory usage a bit.\n. Also pageup and pagedown buttons are not working - full screen scroll.\n. Oh, I have pypi version installed.\n. I know :) doing it right now ;)\n. Yes, these seem to work in master. ctrl-d works too.. you can close this issue :)\n. Also there is a difference on these:\nZZ is equivalent of :wq - write and close\nZQ is equivalent to :q!\n. I found some strange behavior. I added this function\n@handle('Z', 'Z', filter=in_navigation_mode)\n    def close_with_save(event):\n        print('Close and save.')\nto file pyvim/key_bindings.py to function def create_key_bindings(editor):\nBut when I press ZZ, nothing happens. But strange thing is, when I add this exact same function (only with filter=navigation_mode) to python-prompt-toolkit, file prompt_toolkit/key_binding/bindings/vi.py to function def load_vi_bindings(registry, vi_state, filter=None): it WORKS! Why?\n. Sure, I'll try to use it tomorrow at work and report what I can find.\n. Yes, I completely agree, this is the best way. I'll try to contribute something during the weekend instead of issues alone :)\n. I think we should rename :bw to :bd ... from vim's help buffer\n```\n:[N]bd[elete][!]            :bd :bdel :bdelete E516\n:bd[elete][!] [N]\n        Unload buffer [N] (default: current buffer) and delete it from\n        the buffer list.  If the buffer was changed, this fails,\n        unless when [!] is specified, in which case changes are lost.\n        The file remains unaffected.  Any windows for this buffer are\n        closed.  If buffer [N] is the current buffer, another buffer\n        will be displayed instead.  This is the most recent entry in\n        the jump list that points into a loaded buffer.\n        Actually, the buffer isn't completely deleted, it is removed\n        from the buffer list |unlisted-buffer| and option values,\n        variables and mappings/abbreviations for the buffer are\n        cleared.\n:[N]bw[ipeout][!]           :bw :bwipe :bwipeout E517\n:bw[ipeout][!] {bufname}\n:N,Mbw[ipeout][!]\n:bw[ipeout][!] N1 N2 ...\n        Like |:bdelete|, but really delete the buffer.  Everything\n        related to the buffer is lost.  All marks in this buffer\n        become invalid, option settings are lost, etc.  Don't use this\n        unless you know what you are doing.\n```\n. I tried :b N in vim, and it doesn't work at all, I guess it never worked and always was without space :bN\n. I added alias to :bw also work with :bd, there is difference between these in vim, but I'm not sure what to make of the explanation from the help page and how it is supposed to work.\nhttps://github.com/jonathanslenders/pyvim/pull/44\n. I'm trying to make this work, but from what I've discovered, there would need to be dynamic adding of commands 'b1', 'b2' to the COMMANDS_TO_HANDLERS when adding/deleting buffers. These would need to call function bringing up specific buffer. But what I think would be better is if the command could contain regexp. That way, you could just write into the decorator this:\n@cmd('b(%d+)')\ndef buffer_switch(regexp_groups):\n    ...\n. https://github.com/jonathanslenders/pyvim/pull/50\n. The change in the pull request works OK, but I'd like to see which buffer I'm switching to since the numbering is dynamic (when you close buffer, others after it get its number). I'd like to add the completer so it would display which buffer are you switching to.\nExample:\nYou'd write :b1 and this would display either No matches, or what is under buffer number 1. But this cannot happen sooner (right after you write :b) this would disable shortcuts :bn :bp and maybe others.\nI'll try to figure out how the completer works and try to add this.\n. Maybe you can asynchronously use pylint instead of pyflakes? I think pylint can detect syntax errors. The check I use in vim comes from python-mode and that is using pylama:\nhttps://github.com/klen/python-mode/blob/develop/pymode/autopep8.py\n. Added mistune to setup.py:\nhttps://github.com/jonathanslenders/pyvim/pull/35\n. It seems that mistune is not dependency for pyvim after all. It gets loaded as a plugin by pygments when you have ipython installed for ipython's markdown parsing. This is rather unfortunate because most python developers have ipython installed. However I removed the mistune from the pull request.\n. :bd should close the split where you're at with cursor. Also not working.\n. Ohhhh, sorry, I've got it in my .vimrc\n```\n\" set moving between windows to ctrl+arrows\nnnoremap   l\nnnoremap   h\nnnoremap   k\nnnoremap   j\n\" set moving between windows to ctrl+hjkl\nnoremap   l\nnoremap   h\nnoremap   k\nnoremap   j\n```\n. But, this is a nice feature to have, I'd suggest to have this as default ... I don't even know how to switch between the splits without it :)\n. I only suggest this, because vim is kinda complicated to setup correctly and user-friendly. It took me few years to create working and usable .vimrc .. it depends on where you want to head with this project.\n. Ok, I agree with you, this may interfere with WM/OS shortcuts. The problem is, moving between splits in vim has no keybindings. It is by default done by :wincmd hjkl and that is terrible.\n. Oh, I didn't know about this one :) guess you learn every day :). Ok, these are just fine.\n. But these - ctrl+w hjkl doesn't seem to work in pyvim yet.\n. https://github.com/jonathanslenders/pyvim/pull/46\n. From my tests and what I could find online they seem to be aliases. Also when you press :e or :o again, it re-reads the file currently being edited from disk for changes from other programs (git or other editor) or tells you you have unsaved changes and the file has been changed on disk.\n. from vim's :help open\n:o :op :open\n:[range]o[pen]          Works like |:visual|: end Ex mode.\n                {Vi: start editing in open mode}\n:[range]o[pen] /pattern/    As above, additionally move the cursor to the\n                column where \"pattern\" matches in the cursor\n                line.\nVim does not support open mode, since it's not really useful.  For those\nsituations where \":open\" would start open mode Vim will leave Ex mode, which\nallows executing the same commands, but updates the whole screen instead of\nonly one line.\n. This seems to be related with #47 \n. Also, when there are some problems with certain versions of python and virtualenv, this tool comes in handy: https://testrun.org/tox/latest/\nIt creates virtualenv for each said version and runs tests with given version of python inside that venv. Very nice for version specific problems.\n. I changed pytest and fixed tests. Added tox:\nhttps://github.com/jonathanslenders/pyvim/pull/35\n. When you try to open file without it, you get this traceback:\nTraceback (most recent call last):\n  File \"/usr/local/bin/pyvim\", line 9, in <module>\n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"build/bdist.linux-x86_64/egg/pyvim/entry_points/run_pyvim.py\", line 48, in run\n  File \"build/bdist.linux-x86_64/egg/pyvim/editor.py\", line 297, in run\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 321, in read_input\n    self.eventloop.run(self.stdin, self.create_eventloop_callbacks())\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/eventloop/posix.py\", line 67, in run\n    callbacks.redraw()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 632, in redraw\n    self.cli._redraw()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 293, in _redraw\n    self.renderer.render(self, self.layout, self.style)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/renderer.py\", line 295, in render\n    extended_height=size.rows,\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 241, in write_to_screen\n    self.content.write_to_screen(cli, screen, write_position)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 80, in write_to_screen\n    dimensions = [c.height(cli, write_position.width) for c in self.children]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 238, in height\n    return self.content.height(cli, width)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 140, in height\n    dimensions = [c.height(cli, s) for s, c in zip(sizes, self.children)]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 66, in height\n    dimensions = [c.height(cli, width) for c in self.children]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 559, in height\n    preferred_height = self.content.preferred_height(cli, width)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 237, in preferred_height\n    screen = self.create_screen(cli, width, None)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 363, in create_screen\n    screen, cursor_position_to_xy = self._screen_lru_cache.get(key, _create_screen)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 73, in get\n    value = getter_func()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 320, in _create_screen\n    input_tokens, cursor_transform_functions = self._get_input_tokens(cli, document)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 279, in _get_input_tokens\n    return self._token_lru_cache.get(key, get)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 73, in get\n    value = getter_func()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 252, in get\n    tokens = list(self.lexer.get_tokens(document.text))\n  File \"build/bdist.linux-x86_64/egg/pyvim/lexer.py\", line 35, in get_tokens\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/lexers/__init__.py\", line 147, in get_lexer_for_filename\n    res = find_lexer_class_for_filename(_fn, code)\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/lexers/__init__.py\", line 112, in find_lexer_class_for_filename\n    for cls in find_plugin_lexers():\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/plugin.py\", line 53, in find_plugin_lexers\n    yield entrypoint.load()\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 2190, in load\n    ['__name__'])\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/__init__.py\", line 3, in <module>\n    from .exporters import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/__init__.py\", line 1, in <module>\n    from .export import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/export.py\", line 13, in <module>\n    from .templateexporter import TemplateExporter\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/templateexporter.py\", line 30, in <module>\n    from IPython.nbconvert import filters\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/filters/__init__.py\", line 6, in <module>\n    from .markdown import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/filters/markdown.py\", line 17, in <module>\n    import mistune\nImportError: No module named mistune\n. It seems to be dependency for pygments\n. Ok, so from the traceback, pygments has some plugin capability, and it loads my IPython, and that loads mistune for markdown parsing??? ... this seems to be pygments bug.\n. OK, i'll remove the mistune dependency.\n. Removed\n. Well, it is not that easy after 1 year. Now my git says: fatal: Needed a single revision which probably means someone did git push --force of this master branch. I may need to cherry-pick those commits for this to work.\n. Rebased.\n. Oh, I just noticed, buffers are being sorted alphabetically when accesed via :b N\n. I don't know about this, this may not be a bug, but difference from vim. In vim you tend to end up with buffer numbering holes after closing some buffers, you can then have buffers 1, 5, 6, 7, 10, 20 .. and that is confusing. But in pyvim when you close buffer, the buffer numbers are reindexed. Was this done on purpose?\n. docopt is installed as a dependency inside my virtualenv and system. pypy for some reason will not use it.\n. Maybe the problem is, I was running pypy from inside python2.7 virtualenv. It seems I need to create separate virtualenv with pypy as python interpreter. But that is failing for me on some ZipImportError :(\n. This is not a problem of missing docopt, I have it installed on my system, but pypy has completely different sys.path(s). It's not even trying to find it in correct directory and since I've used pypy very little I don't know what to make of this.\n. Oh I didn't checkout to origin/master I'll create new request :)\n. I am also unable to reproduce this bug.\n. My vim displays EE before line number of the ruler where the warning/error of syntax/pep8 check is.\n. pyvim\n\n\n. my Vim\n\n\n. https://github.com/jonathanslenders/pyvim/pull/57\n. Another example:\nwrite this text:\nin_navigation_mode\nGo to beginning and press ve. It selects only to the letter d.\n. Also the yank is missing the last letter. Use the same word from previous comment and press viw to select visually the word. Then press y. Then create another line and press p. The pasted word is missing last letter. This may be caused by the yank, it sould count the letter below the cursor as being visually selected as well, I think this does not happen.\n. Oh I meant python-prompt-toolkit/key_binding/bindings/vi.py\nThere is a ton of common keyboard combinations specifically for vim ... I'm just wandering why are these in prompt-toolkit and not pyvim.. because when you want to edit or add some, you have to do this into another project...\n. Thank you.\n. I think the split should behave like another buffer - it should be closeable with :bw or :bd and this is not working. Vim behaves this way.\n. Also when you have the same file open in more splits, when you :bd or :bw on either of them, it should close all buffers/splits containing the same file.\n. Yes, I'd really appreciate multiple cursor functionality, that is really awesome about sublime text.\n. Ok, this is not exactly search and replace, this behaves differently:\n```\n4.3 Search and replace                  search-replace\n                        *:pro* *:promptfind*\n\n:promptf[ind] [string]\n            Put up a Search dialog.  When [string] is given, it is\n            used as the initial search string.\n            {only for Win32, Motif and GTK GUI}\n                    *:promptr* *:promptrepl*\n\n:promptr[epl] [string]\n            Put up a Search/Replace dialog.  When [string] is\n            given, it is used as the initial search string.\n            {only for Win32, Motif and GTK GUI}\n```\nBut everyone uses substitute :)\n. I think it is neither, Vi is the original program without extensions and it was supposed to be used with printers instead of monitor, while Vim supports plugins and other nice stuff. But pyvim has some additional features vim doesn't have when installed. So it is kind of like vim extended, or vim like editor ..\n. I'm using elementaryOS (ubuntu 14.10) and py 2.7.6 and works OK. Maybe some incompatibility for versions py > 2.7.6?\n. Maybe the simplest fix would be to disable syntax highlight on files over certain ammount. There is no way someone has 200kB .py file. For most cases, it will be .csv or .sql or some datafile which would not support syntax highlight as well. Maybe that can cut down the memory usage a bit.\n. Also pageup and pagedown buttons are not working - full screen scroll.\n. Oh, I have pypi version installed.\n. I know :) doing it right now ;)\n. Yes, these seem to work in master. ctrl-d works too.. you can close this issue :)\n. Also there is a difference on these:\nZZ is equivalent of :wq - write and close\nZQ is equivalent to :q!\n. I found some strange behavior. I added this function\n@handle('Z', 'Z', filter=in_navigation_mode)\n    def close_with_save(event):\n        print('Close and save.')\nto file pyvim/key_bindings.py to function def create_key_bindings(editor):\nBut when I press ZZ, nothing happens. But strange thing is, when I add this exact same function (only with filter=navigation_mode) to python-prompt-toolkit, file prompt_toolkit/key_binding/bindings/vi.py to function def load_vi_bindings(registry, vi_state, filter=None): it WORKS! Why?\n. Sure, I'll try to use it tomorrow at work and report what I can find.\n. Yes, I completely agree, this is the best way. I'll try to contribute something during the weekend instead of issues alone :)\n. I think we should rename :bw to :bd ... from vim's help buffer\n```\n:[N]bd[elete][!]            :bd :bdel :bdelete E516\n:bd[elete][!] [N]\n        Unload buffer [N] (default: current buffer) and delete it from\n        the buffer list.  If the buffer was changed, this fails,\n        unless when [!] is specified, in which case changes are lost.\n        The file remains unaffected.  Any windows for this buffer are\n        closed.  If buffer [N] is the current buffer, another buffer\n        will be displayed instead.  This is the most recent entry in\n        the jump list that points into a loaded buffer.\n        Actually, the buffer isn't completely deleted, it is removed\n        from the buffer list |unlisted-buffer| and option values,\n        variables and mappings/abbreviations for the buffer are\n        cleared.\n:[N]bw[ipeout][!]           :bw :bwipe :bwipeout E517\n:bw[ipeout][!] {bufname}\n:N,Mbw[ipeout][!]\n:bw[ipeout][!] N1 N2 ...\n        Like |:bdelete|, but really delete the buffer.  Everything\n        related to the buffer is lost.  All marks in this buffer\n        become invalid, option settings are lost, etc.  Don't use this\n        unless you know what you are doing.\n```\n. I tried :b N in vim, and it doesn't work at all, I guess it never worked and always was without space :bN\n. I added alias to :bw also work with :bd, there is difference between these in vim, but I'm not sure what to make of the explanation from the help page and how it is supposed to work.\nhttps://github.com/jonathanslenders/pyvim/pull/44\n. I'm trying to make this work, but from what I've discovered, there would need to be dynamic adding of commands 'b1', 'b2' to the COMMANDS_TO_HANDLERS when adding/deleting buffers. These would need to call function bringing up specific buffer. But what I think would be better is if the command could contain regexp. That way, you could just write into the decorator this:\n@cmd('b(%d+)')\ndef buffer_switch(regexp_groups):\n    ...\n. https://github.com/jonathanslenders/pyvim/pull/50\n. The change in the pull request works OK, but I'd like to see which buffer I'm switching to since the numbering is dynamic (when you close buffer, others after it get its number). I'd like to add the completer so it would display which buffer are you switching to.\nExample:\nYou'd write :b1 and this would display either No matches, or what is under buffer number 1. But this cannot happen sooner (right after you write :b) this would disable shortcuts :bn :bp and maybe others.\nI'll try to figure out how the completer works and try to add this.\n. Maybe you can asynchronously use pylint instead of pyflakes? I think pylint can detect syntax errors. The check I use in vim comes from python-mode and that is using pylama:\nhttps://github.com/klen/python-mode/blob/develop/pymode/autopep8.py\n. Added mistune to setup.py:\nhttps://github.com/jonathanslenders/pyvim/pull/35\n. It seems that mistune is not dependency for pyvim after all. It gets loaded as a plugin by pygments when you have ipython installed for ipython's markdown parsing. This is rather unfortunate because most python developers have ipython installed. However I removed the mistune from the pull request.\n. :bd should close the split where you're at with cursor. Also not working.\n. Ohhhh, sorry, I've got it in my .vimrc\n```\n\" set moving between windows to ctrl+arrows\nnnoremap   l\nnnoremap   h\nnnoremap   k\nnnoremap   j\n\" set moving between windows to ctrl+hjkl\nnoremap   l\nnoremap   h\nnoremap   k\nnoremap   j\n```\n. But, this is a nice feature to have, I'd suggest to have this as default ... I don't even know how to switch between the splits without it :)\n. I only suggest this, because vim is kinda complicated to setup correctly and user-friendly. It took me few years to create working and usable .vimrc .. it depends on where you want to head with this project.\n. Ok, I agree with you, this may interfere with WM/OS shortcuts. The problem is, moving between splits in vim has no keybindings. It is by default done by :wincmd hjkl and that is terrible.\n. Oh, I didn't know about this one :) guess you learn every day :). Ok, these are just fine.\n. But these - ctrl+w hjkl doesn't seem to work in pyvim yet.\n. https://github.com/jonathanslenders/pyvim/pull/46\n. From my tests and what I could find online they seem to be aliases. Also when you press :e or :o again, it re-reads the file currently being edited from disk for changes from other programs (git or other editor) or tells you you have unsaved changes and the file has been changed on disk.\n. from vim's :help open\n:o :op :open\n:[range]o[pen]          Works like |:visual|: end Ex mode.\n                {Vi: start editing in open mode}\n:[range]o[pen] /pattern/    As above, additionally move the cursor to the\n                column where \"pattern\" matches in the cursor\n                line.\nVim does not support open mode, since it's not really useful.  For those\nsituations where \":open\" would start open mode Vim will leave Ex mode, which\nallows executing the same commands, but updates the whole screen instead of\nonly one line.\n. This seems to be related with #47 \n. Also, when there are some problems with certain versions of python and virtualenv, this tool comes in handy: https://testrun.org/tox/latest/\nIt creates virtualenv for each said version and runs tests with given version of python inside that venv. Very nice for version specific problems.\n. I changed pytest and fixed tests. Added tox:\nhttps://github.com/jonathanslenders/pyvim/pull/35\n. When you try to open file without it, you get this traceback:\nTraceback (most recent call last):\n  File \"/usr/local/bin/pyvim\", line 9, in <module>\n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"build/bdist.linux-x86_64/egg/pyvim/entry_points/run_pyvim.py\", line 48, in run\n  File \"build/bdist.linux-x86_64/egg/pyvim/editor.py\", line 297, in run\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 321, in read_input\n    self.eventloop.run(self.stdin, self.create_eventloop_callbacks())\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/eventloop/posix.py\", line 67, in run\n    callbacks.redraw()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 632, in redraw\n    self.cli._redraw()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/interface.py\", line 293, in _redraw\n    self.renderer.render(self, self.layout, self.style)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/renderer.py\", line 295, in render\n    extended_height=size.rows,\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 241, in write_to_screen\n    self.content.write_to_screen(cli, screen, write_position)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 80, in write_to_screen\n    dimensions = [c.height(cli, write_position.width) for c in self.children]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 238, in height\n    return self.content.height(cli, width)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 140, in height\n    dimensions = [c.height(cli, s) for s, c in zip(sizes, self.children)]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 66, in height\n    dimensions = [c.height(cli, width) for c in self.children]\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/containers.py\", line 559, in height\n    preferred_height = self.content.preferred_height(cli, width)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 237, in preferred_height\n    screen = self.create_screen(cli, width, None)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 363, in create_screen\n    screen, cursor_position_to_xy = self._screen_lru_cache.get(key, _create_screen)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 73, in get\n    value = getter_func()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 320, in _create_screen\n    input_tokens, cursor_transform_functions = self._get_input_tokens(cli, document)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 279, in _get_input_tokens\n    return self._token_lru_cache.get(key, get)\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 73, in get\n    value = getter_func()\n  File \"/usr/local/lib/python2.7/dist-packages/prompt_toolkit/layout/controls.py\", line 252, in get\n    tokens = list(self.lexer.get_tokens(document.text))\n  File \"build/bdist.linux-x86_64/egg/pyvim/lexer.py\", line 35, in get_tokens\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/lexers/__init__.py\", line 147, in get_lexer_for_filename\n    res = find_lexer_class_for_filename(_fn, code)\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/lexers/__init__.py\", line 112, in find_lexer_class_for_filename\n    for cls in find_plugin_lexers():\n  File \"/usr/local/lib/python2.7/dist-packages/pygments/plugin.py\", line 53, in find_plugin_lexers\n    yield entrypoint.load()\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 2190, in load\n    ['__name__'])\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/__init__.py\", line 3, in <module>\n    from .exporters import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/__init__.py\", line 1, in <module>\n    from .export import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/export.py\", line 13, in <module>\n    from .templateexporter import TemplateExporter\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/exporters/templateexporter.py\", line 30, in <module>\n    from IPython.nbconvert import filters\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/filters/__init__.py\", line 6, in <module>\n    from .markdown import *\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/nbconvert/filters/markdown.py\", line 17, in <module>\n    import mistune\nImportError: No module named mistune\n. It seems to be dependency for pygments\n. Ok, so from the traceback, pygments has some plugin capability, and it loads my IPython, and that loads mistune for markdown parsing??? ... this seems to be pygments bug.\n. OK, i'll remove the mistune dependency.\n. Removed\n. Well, it is not that easy after 1 year. Now my git says: fatal: Needed a single revision which probably means someone did git push --force of this master branch. I may need to cherry-pick those commits for this to work.\n. Rebased.\n. Oh, I just noticed, buffers are being sorted alphabetically when accesed via :b N\n. I don't know about this, this may not be a bug, but difference from vim. In vim you tend to end up with buffer numbering holes after closing some buffers, you can then have buffers 1, 5, 6, 7, 10, 20 .. and that is confusing. But in pyvim when you close buffer, the buffer numbers are reindexed. Was this done on purpose?\n. docopt is installed as a dependency inside my virtualenv and system. pypy for some reason will not use it.\n. Maybe the problem is, I was running pypy from inside python2.7 virtualenv. It seems I need to create separate virtualenv with pypy as python interpreter. But that is failing for me on some ZipImportError :(\n. This is not a problem of missing docopt, I have it installed on my system, but pypy has completely different sys.path(s). It's not even trying to find it in correct directory and since I've used pypy very little I don't know what to make of this.\n. Oh I didn't checkout to origin/master I'll create new request :)\n. I am also unable to reproduce this bug.\n. My vim displays EE before line number of the ruler where the warning/error of syntax/pep8 check is.\n. pyvim\n\n\n. my Vim\n\n\n. https://github.com/jonathanslenders/pyvim/pull/57\n. Another example:\nwrite this text:\nin_navigation_mode\nGo to beginning and press ve. It selects only to the letter d.\n. Also the yank is missing the last letter. Use the same word from previous comment and press viw to select visually the word. Then press y. Then create another line and press p. The pasted word is missing last letter. This may be caused by the yank, it sould count the letter below the cursor as being visually selected as well, I think this does not happen.\n. Oh I meant python-prompt-toolkit/key_binding/bindings/vi.py\nThere is a ton of common keyboard combinations specifically for vim ... I'm just wandering why are these in prompt-toolkit and not pyvim.. because when you want to edit or add some, you have to do this into another project...\n. Thank you.\n. I think the split should behave like another buffer - it should be closeable with :bw or :bd and this is not working. Vim behaves this way.\n. Also when you have the same file open in more splits, when you :bd or :bw on either of them, it should close all buffers/splits containing the same file.\n. Yes, I'd really appreciate multiple cursor functionality, that is really awesome about sublime text.\n. Ok, this is not exactly search and replace, this behaves differently:\n```\n4.3 Search and replace                  search-replace\n                        *:pro* *:promptfind*\n\n:promptf[ind] [string]\n            Put up a Search dialog.  When [string] is given, it is\n            used as the initial search string.\n            {only for Win32, Motif and GTK GUI}\n                    *:promptr* *:promptrepl*\n\n:promptr[epl] [string]\n            Put up a Search/Replace dialog.  When [string] is\n            given, it is used as the initial search string.\n            {only for Win32, Motif and GTK GUI}\n```\nBut everyone uses substitute :)\n. ",
    "niklasberglund": "Rephrased in commit 2409ad7f4220f43340de87410601b5a029238a26\n. Rephrased in commit 2409ad7f4220f43340de87410601b5a029238a26\n. ",
    "moigagoo": "Thank you for the awesome product!\n. Looks like I have an issue with PyPy3 itself. Launching any program with PyP3 fails.\n. Thank you for the awesome product!\n. Looks like I have an issue with PyPy3 itself. Launching any program with PyP3 fails.\n. ",
    "sjzabel": "I am having the same issue in Py 2.7.9 on OSX, with and up to date jedi in a virtualenv.\n. I am having the same issue in Py 2.7.9 on OSX, with and up to date jedi in a virtualenv.\n. ",
    "dotmobo": "Same issue in python 3.4 on Arch Linux.\n. Same issue in python 3.4 on Arch Linux.\n. ",
    "Shougo": "I think ... Python3 and virtualenv environments have the problem in total.\n. I think ... Python3 and virtualenv environments have the problem in total.\n. ",
    "lillian27": "Installed via pip in a clean virtualenv on OS X 10.10.3 with Python 2.7.6.  Does not work as expected (and by that I mean like it does in ptpython) so I'm not sure it is a  > Python 2.7.6 issue.  \nMinimal jedi behavior can be forced: just type a string and hit tab.  You should get a dropdown with all the builtins that start with that substring.  However, tab-forcing does not seem to work for imports, function names, parameter lists, etc.\n. Same problem, cloned latest prompt_toolkit as suggested and now I get \nTraceback (most recent call last):\n  File \"/Users/lillian/Documents/Projects/slenders/base/bin/pyvim\", line 9, in <module>\n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 356, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2431, in load_entry_point\n    return ep.load()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2147, in load\n    ['__name__'])\nImportError: No module named pyvim.entry_points.run_pyvim\nSuggestions?\n. I was able to get this working by using pip's git interface instead of just git clone.  I.e.\n pip install -e git+git://githib.com/... \nInstalled prompt_toolkit first, then pyvim and everything worked.  I tried the develop flag with setup.py before this in another venv with no luck and couldn't figure out why the eggs weren't being located even though there were clearly present.  pip's git installs are supposed to be equivalent to setup.py develop but it seems dependences are resolved/referenced more accurately.\nAnyway, really enjoying the work you are doing,  You are porting some of my favorite tools to pure python so thank you!\n. Installed via pip in a clean virtualenv on OS X 10.10.3 with Python 2.7.6.  Does not work as expected (and by that I mean like it does in ptpython) so I'm not sure it is a  > Python 2.7.6 issue.  \nMinimal jedi behavior can be forced: just type a string and hit tab.  You should get a dropdown with all the builtins that start with that substring.  However, tab-forcing does not seem to work for imports, function names, parameter lists, etc.\n. Same problem, cloned latest prompt_toolkit as suggested and now I get \nTraceback (most recent call last):\n  File \"/Users/lillian/Documents/Projects/slenders/base/bin/pyvim\", line 9, in <module>\n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 356, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2431, in load_entry_point\n    return ep.load()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2147, in load\n    ['__name__'])\nImportError: No module named pyvim.entry_points.run_pyvim\nSuggestions?\n. I was able to get this working by using pip's git interface instead of just git clone.  I.e.\n pip install -e git+git://githib.com/... \nInstalled prompt_toolkit first, then pyvim and everything worked.  I tried the develop flag with setup.py before this in another venv with no luck and couldn't figure out why the eggs weren't being located even though there were clearly present.  pip's git installs are supposed to be equivalent to setup.py develop but it seems dependences are resolved/referenced more accurately.\nAnyway, really enjoying the work you are doing,  You are porting some of my favorite tools to pure python so thank you!\n. ",
    "aidylewis": "Hi @jonathanslenders \nNeoVim uses libvterm.\nhttp://www.leonerd.org.uk/code/libvterm/\n. Hi @jonathanslenders \nNeoVim uses libvterm.\nhttp://www.leonerd.org.uk/code/libvterm/\n. ",
    "SanketDG": "I think @jonathanslenders meant this Vi.\n. An implementation of Vim in Python\nMuch more clear.\n. As much as I understand the code I think Ctrl-Fis set to scroll half page down. But it actually should scroll full page down.\n- Ctrl-B and Ctrl-F scroll by full page.\n- Ctrl-U and Ctrl-D scroll half a page by default.\n- Ctrl-Y and Ctrl-E scroll one line.\n. Please take a look at #23 \n. @lunemec  Well you can clone this and then run python setup.py install from the pyvim folder. That should get you the latest master branch.\n. OS and python version?\nWorks here in Mint 17 and python2.7\n. What is usecase of mistune?\n. Nice catch! I guess pip install docopt should do the trick. We have to add docopt in setup.py\n. I don't know what you mean by shortcuts, but have a look at key_bindings.py. This may be what you are looking for.\npython-prompt-toolkit is just a dependency for handling keyboard input.\n. I think @jonathanslenders meant this Vi.\n. An implementation of Vim in Python\nMuch more clear.\n. As much as I understand the code I think Ctrl-Fis set to scroll half page down. But it actually should scroll full page down.\n- Ctrl-B and Ctrl-F scroll by full page.\n- Ctrl-U and Ctrl-D scroll half a page by default.\n- Ctrl-Y and Ctrl-E scroll one line.\n. Please take a look at #23 \n. @lunemec  Well you can clone this and then run python setup.py install from the pyvim folder. That should get you the latest master branch.\n. OS and python version?\nWorks here in Mint 17 and python2.7\n. What is usecase of mistune?\n. Nice catch! I guess pip install docopt should do the trick. We have to add docopt in setup.py\n. I don't know what you mean by shortcuts, but have a look at key_bindings.py. This may be what you are looking for.\npython-prompt-toolkit is just a dependency for handling keyboard input.\n. ",
    "coolwanglu": "I agree, yet I would recommend something interesting:\nChinese sample text, all character have the same syllable. wiki\n\u77f3\u5ba4\u8bd7\u58eb\u65bd\u6c0f\uff0c\u55dc\u72ee\uff0c\u8a93\u98df\u5341\u72ee\u3002\u9002\u65bd\u6c0f\u65f6\u65f6\u9002\u5e02\u89c6\u72ee\u3002\u5341\u65f6\uff0c\u9002\u5341\u72ee\u9002\u5e02\u3002\u662f\u65f6\uff0c\u9002\u65bd\u6c0f\u9002\u5e02\u3002\u6c0f\u89c6\u662f\u5341\u72ee\uff0c\u6043\u77e2\u52bf\uff0c\u4f7f\u662f\u5341\u72ee\u901d\u4e16\u3002\u6c0f\u62fe\u662f\u5341\u72ee\u5c38\uff0c\u9002\u77f3\u5ba4\u3002\u77f3\u5ba4\u6e7f\uff0c\u6c0f\u4f7f\u4f8d\u62ed\u77f3\u5ba4\u3002\u77f3\u5ba4\u62ed\uff0c\u6c0f\u59cb\u8bd5\u98df\u662f\u5341\u72ee\u5c38\u3002\u98df\u65f6\uff0c\u59cb\u8bc6\u662f\u5341\u72ee\u5c38\uff0c\u5b9e\u5341\u77f3\u72ee\u5c38\u3002\u8bd5\u91ca\u662f\u4e8b\u3002\nJapanese sample text, from a famous novel.wiki\n\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u3002\u540d\u524d\u306f\u307e\u3060\u7121\u3044\u3002\n\u3000\u3069\u3053\u3067\u751f\u307e\u308c\u305f\u304b\u9813\u3068\u898b\u7576\u304c\u3064\u304b\u306c\u3002\u4f55\u3066\u3082\u6697\u8584\u3044\u3058\u3081\u3058\u3081\u3057\u305f\u6240\u3067\u30cb\u30e3\u30fc\uff0f\uff3c\u6ce3\u3044\u3066\u5c45\u305f\u4e8b\u4e08\u306f\u8a18\u61b6\u3057\u3066\u5c45\u308b\u3002\u543e\u8f29\u306f\u3053\u309d\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3075\u3082\u306e\u3092\u898b\u305f\u3002\u7136\u3082\u3042\u3068\u3067\u805e\u304f\u3068\u305d\u308c\u306f\u66f8\u751f\u3068\u3044\u3075\u4eba\u9593\u3067\u4e00\u756a\u7370\u60e1\u306a\u7a2e\u65cf\u3067\u3042\u3064\u305f\u3055\u3046\u3060\u3002\u6b64\u66f8\u751f\u3068\u3044\u3075\u306e\u306f\u6642\u3005\u6211\u3005\u3092\u6355\u3078\u3066\u716e\u3066\u98df\u3075\u3068\u3044\u3075\u8a71\u3067\u3042\u308b\u3002\u7136\u3057\u5176\u7576\u6642\u306f\u4f55\u3068\u3044\u3075\u8003\u3082\u306a\u304b\u3064\u305f\u304b\u3089\u5225\u6bb5\u6050\u3057\u3044\u3068\u3082\u601d\u306f\u306a\u304b\u3064\u305f\u3002\u4f46\u5f7c\u306e\u638c\u306b\u8f09\u305b\u3089\u308c\u3066\u30b9\u30fc\u3068\u6301\u3061\u4e0a\u3052\u3089\u308c\u305f\u6642\u4f55\u3060\u304b\u30d5\u30cf\u30d5\u30cf\u3057\u305f\u611f\u3058\u304c\u6709\u3064\u305f\u8a31\u308a\u3067\u3042\u308b\u3002\u638c\u306e\u4e0a\u3067\u5c11\u3057\u843d\u3061\u4ed8\u3044\u3066\u66f8\u751f\u306e\u984f\u3092\u898b\u305f\u304c\u6240\u8b02\u4eba\u9593\u3068\u3044\u3075\u3082\u306e\u309d\u898b\u59cb\u3067\u3042\u3089\u3046\u3002\u6b64\u306e\u6642\u5999\u306a\u3082\u306e\u3060\u3068\u601d\u3064\u305f\u611f\u3058\u304c\u4eca\u3067\u3082\u6b98\u3064\u3066\u5c45\u308b\u3002\u7b2c\u4e00\u6bdb\u3092\u4ee5\u3066\u88dd\u98fe\u3055\u308c\u3079\u304d\u7b48\u306e\u984f\u304c\u3064\u308b\uff0f\uff3c\u3057\u3066\u4e38\u3067\u85e5\u7f50\u3060\u3002\u5176\u5f8c\u732b\u306b\u3082\u5927\u5206\u9022\u3064\u305f\u304c\u3053\u3093\u306a\u7247\u8f2a\u306b\u306f\u4e00\u5ea6\u3082\u51fa\u6703\u306f\u3057\u305f\u4e8b\u304c\u306a\u3044\u3002\u52a0\u4e4b\u984f\u306e\u771e\u4e2d\u304c\u9918\u308a\u306b\u7a81\u8d77\u3057\u3066\u5c45\u308b\u3002\u305d\u3046\u3057\u3066\u5176\u7a74\u306e\u4e2d\u304b\u3089\u6642\u3005\u3077\u3046\uff0f\uff3c\u3068\u70df\u3092\u5439\u304f\u3002\u3069\u3046\u3082\u54bd\u305b\u307d\u304f\u3066\u5be6\u306b\u5f31\u3064\u305f\u3002\u662f\u304c\u4eba\u9593\u306e\u98ee\u3080\u70df\u8349\u3068\u3044\u3075\u3082\u306e\u3067\u3042\u308b\u4e8b\u306f\u6f38\u304f\u6b64\u9803\u77e5\u3064\u305f\u3002\n. I agree, yet I would recommend something interesting:\nChinese sample text, all character have the same syllable. wiki\n\u77f3\u5ba4\u8bd7\u58eb\u65bd\u6c0f\uff0c\u55dc\u72ee\uff0c\u8a93\u98df\u5341\u72ee\u3002\u9002\u65bd\u6c0f\u65f6\u65f6\u9002\u5e02\u89c6\u72ee\u3002\u5341\u65f6\uff0c\u9002\u5341\u72ee\u9002\u5e02\u3002\u662f\u65f6\uff0c\u9002\u65bd\u6c0f\u9002\u5e02\u3002\u6c0f\u89c6\u662f\u5341\u72ee\uff0c\u6043\u77e2\u52bf\uff0c\u4f7f\u662f\u5341\u72ee\u901d\u4e16\u3002\u6c0f\u62fe\u662f\u5341\u72ee\u5c38\uff0c\u9002\u77f3\u5ba4\u3002\u77f3\u5ba4\u6e7f\uff0c\u6c0f\u4f7f\u4f8d\u62ed\u77f3\u5ba4\u3002\u77f3\u5ba4\u62ed\uff0c\u6c0f\u59cb\u8bd5\u98df\u662f\u5341\u72ee\u5c38\u3002\u98df\u65f6\uff0c\u59cb\u8bc6\u662f\u5341\u72ee\u5c38\uff0c\u5b9e\u5341\u77f3\u72ee\u5c38\u3002\u8bd5\u91ca\u662f\u4e8b\u3002\nJapanese sample text, from a famous novel.wiki\n\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u3002\u540d\u524d\u306f\u307e\u3060\u7121\u3044\u3002\n\u3000\u3069\u3053\u3067\u751f\u307e\u308c\u305f\u304b\u9813\u3068\u898b\u7576\u304c\u3064\u304b\u306c\u3002\u4f55\u3066\u3082\u6697\u8584\u3044\u3058\u3081\u3058\u3081\u3057\u305f\u6240\u3067\u30cb\u30e3\u30fc\uff0f\uff3c\u6ce3\u3044\u3066\u5c45\u305f\u4e8b\u4e08\u306f\u8a18\u61b6\u3057\u3066\u5c45\u308b\u3002\u543e\u8f29\u306f\u3053\u309d\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3075\u3082\u306e\u3092\u898b\u305f\u3002\u7136\u3082\u3042\u3068\u3067\u805e\u304f\u3068\u305d\u308c\u306f\u66f8\u751f\u3068\u3044\u3075\u4eba\u9593\u3067\u4e00\u756a\u7370\u60e1\u306a\u7a2e\u65cf\u3067\u3042\u3064\u305f\u3055\u3046\u3060\u3002\u6b64\u66f8\u751f\u3068\u3044\u3075\u306e\u306f\u6642\u3005\u6211\u3005\u3092\u6355\u3078\u3066\u716e\u3066\u98df\u3075\u3068\u3044\u3075\u8a71\u3067\u3042\u308b\u3002\u7136\u3057\u5176\u7576\u6642\u306f\u4f55\u3068\u3044\u3075\u8003\u3082\u306a\u304b\u3064\u305f\u304b\u3089\u5225\u6bb5\u6050\u3057\u3044\u3068\u3082\u601d\u306f\u306a\u304b\u3064\u305f\u3002\u4f46\u5f7c\u306e\u638c\u306b\u8f09\u305b\u3089\u308c\u3066\u30b9\u30fc\u3068\u6301\u3061\u4e0a\u3052\u3089\u308c\u305f\u6642\u4f55\u3060\u304b\u30d5\u30cf\u30d5\u30cf\u3057\u305f\u611f\u3058\u304c\u6709\u3064\u305f\u8a31\u308a\u3067\u3042\u308b\u3002\u638c\u306e\u4e0a\u3067\u5c11\u3057\u843d\u3061\u4ed8\u3044\u3066\u66f8\u751f\u306e\u984f\u3092\u898b\u305f\u304c\u6240\u8b02\u4eba\u9593\u3068\u3044\u3075\u3082\u306e\u309d\u898b\u59cb\u3067\u3042\u3089\u3046\u3002\u6b64\u306e\u6642\u5999\u306a\u3082\u306e\u3060\u3068\u601d\u3064\u305f\u611f\u3058\u304c\u4eca\u3067\u3082\u6b98\u3064\u3066\u5c45\u308b\u3002\u7b2c\u4e00\u6bdb\u3092\u4ee5\u3066\u88dd\u98fe\u3055\u308c\u3079\u304d\u7b48\u306e\u984f\u304c\u3064\u308b\uff0f\uff3c\u3057\u3066\u4e38\u3067\u85e5\u7f50\u3060\u3002\u5176\u5f8c\u732b\u306b\u3082\u5927\u5206\u9022\u3064\u305f\u304c\u3053\u3093\u306a\u7247\u8f2a\u306b\u306f\u4e00\u5ea6\u3082\u51fa\u6703\u306f\u3057\u305f\u4e8b\u304c\u306a\u3044\u3002\u52a0\u4e4b\u984f\u306e\u771e\u4e2d\u304c\u9918\u308a\u306b\u7a81\u8d77\u3057\u3066\u5c45\u308b\u3002\u305d\u3046\u3057\u3066\u5176\u7a74\u306e\u4e2d\u304b\u3089\u6642\u3005\u3077\u3046\uff0f\uff3c\u3068\u70df\u3092\u5439\u304f\u3002\u3069\u3046\u3082\u54bd\u305b\u307d\u304f\u3066\u5be6\u306b\u5f31\u3064\u305f\u3002\u662f\u304c\u4eba\u9593\u306e\u98ee\u3080\u70df\u8349\u3068\u3044\u3075\u3082\u306e\u3067\u3042\u308b\u4e8b\u306f\u6f38\u304f\u6b64\u9803\u77e5\u3064\u305f\u3002\n. ",
    "jasonslyvia": "That's a interesting idea!\n. That's a interesting idea!\n. ",
    "vczh": "Agree. Unmeaningful Chinese characters just make us feel like there is a encoding problem.\n. Agree. Unmeaningful Chinese characters just make us feel like there is a encoding problem.\n. ",
    "stefanoborini": "I'd include my code gladly, but please keep in mind I cannot do it all by myself without prior discussion of what's needed and what's not. What I can provide is both the vaitk PyQt-style design as a generic visual framework (eventually reworked for a more PEP8 style) and the general MVC infrastructure or ideas in terms of responsibilities from vai.\nWhat I can provide already right now is a detailed explanation of the design choices at the base of vai. I do not consider them untouchable, but they work as of now. I am strongly in favor of constant refactoring.\n. I'd include my code gladly, but please keep in mind I cannot do it all by myself without prior discussion of what's needed and what's not. What I can provide is both the vaitk PyQt-style design as a generic visual framework (eventually reworked for a more PEP8 style) and the general MVC infrastructure or ideas in terms of responsibilities from vai.\nWhat I can provide already right now is a detailed explanation of the design choices at the base of vai. I do not consider them untouchable, but they work as of now. I am strongly in favor of constant refactoring.\n. ",
    "SimonBiggs": "In windows 7, python 3.5, using powershell I type:\n:help\nthen:\n:q\nAnd I get the error \"1 more files to edit\" and it does not exit.\nSee screenshot below:\n\nI am interested in this project, and am also stuck using windows at work.\n:q! also does not work, however :wq does.\n. In windows 7, python 3.5, using powershell I type:\n:help\nthen:\n:q\nAnd I get the error \"1 more files to edit\" and it does not exit.\nSee screenshot below:\n\nI am interested in this project, and am also stuck using windows at work.\n:q! also does not work, however :wq does.\n. ",
    "lepture": "@lunemec It is an optional dependency of IPython\n. @lunemec It is an optional dependency of IPython\n. ",
    "tony": "Initially I was going to write a disagreement with using pytest.\nI was surprised to find that flask and werkzeug, the projects I use at as an inspiration for my prior test suites, have both switched to py.test.  pypa/warehouse and pypa/pip is using py.test too...\nhttps://www.youtube.com/watch?v=AiThU6JQbE8\nI may trial with py.test a bit with a project of my own and report back\n. https://github.com/tony/tmuxp/commit/50d576c7b2a8a6b9d075591f3410eba05856e17b\nJust converted a pretty large test suite from unittest to py.test.\nSome things that gave me pause initially:\n- it feels a tad unpythonic at first.  There is some monkey-patching involved. There is magic-mojo happening in the background that isn't transparent.  e.g.:\n  - You create some fixtures in conftest.py, and tests magically get them in their arguments if you put them in the signature.\n  - The assert has super powers\nTimeline of me switching opinions:\n- about a year ago, had a good python programmer friend recommend it to me a year ago, spoke fondly of parametrize - which I ended up working into a few spots in my example test suite. i looked at it and thought eh, not standard library, and magic...\n- a few days ago I was just telling someone this extemporaneously \"The other thing is I stick to plain-old unittest on things ATM. Maybe pytest or nose is the way but I want it to play out, I don't want to introduce specialized behavior and 2 yrs later end up having to provide life support to a lib that's unmaintained.\": https://github.com/celery/case/issues/1#issuecomment-220206477\n- around the same time i first read this thread, i didn't respond to it, but i was about to say screw py.test just use unittest for now\n- then, i look at pypa's projects and flask, werkzeug, etc.  pytest is everywhere\n- then i as a trial, port tests on a sample project, tmuxp, over to it\nThings I fell in love with:\n- https://pytest.org/latest/parametrize.html\n- The fixtures of course, once you get used to how they are injected, end up being quite intuitive.\n- The assert statement handles dictionaries, lists, etc.\n- Very recently is support for asserting regexs https://github.com/pytest-dev/pytest/issues/372#issuecomment-212517182\n- Saving a whole line of indentation makes stuff so much more readable\n- tmpdir factory method, https://pytest.org/latest/tmpdir.html. Also the conveniences inside of the py.path.local object keep the code light-weight\n- I also tried https://pytest.org/latest/xdist.html and rearchitectured my tests work with it, got a nice speed bump\n. @lunemec can you rebase?\n. @lunemec yea no problem.\n@jonathanslenders is this ok to put in ? I'd like to start adding tests\n. @jonathanslenders can we get a slack setup for prompt-toolkit, pyvim, ptpython, pymux, etc?\n. I'm interested to know what you think of this approach @jonathanslenders.  Let me know if you have a better architecture in mind / ways I could simplify it / shortcomings my PR introduces I haven't thought about, etc.  I can revise accordingly\nBy the way, I have this working already: https://github.com/tony/.dot-config/blob/7ad23319566b0f74803fbd90f0cfcbcfa68e42a4/.pyvimrc#L57\n. @jonathanslenders if #35 gets merged, feel free to close this\n. Done in #35. closing\n. Initially I was going to write a disagreement with using pytest.\nI was surprised to find that flask and werkzeug, the projects I use at as an inspiration for my prior test suites, have both switched to py.test.  pypa/warehouse and pypa/pip is using py.test too...\nhttps://www.youtube.com/watch?v=AiThU6JQbE8\nI may trial with py.test a bit with a project of my own and report back\n. https://github.com/tony/tmuxp/commit/50d576c7b2a8a6b9d075591f3410eba05856e17b\nJust converted a pretty large test suite from unittest to py.test.\nSome things that gave me pause initially:\n- it feels a tad unpythonic at first.  There is some monkey-patching involved. There is magic-mojo happening in the background that isn't transparent.  e.g.:\n  - You create some fixtures in conftest.py, and tests magically get them in their arguments if you put them in the signature.\n  - The assert has super powers\nTimeline of me switching opinions:\n- about a year ago, had a good python programmer friend recommend it to me a year ago, spoke fondly of parametrize - which I ended up working into a few spots in my example test suite. i looked at it and thought eh, not standard library, and magic...\n- a few days ago I was just telling someone this extemporaneously \"The other thing is I stick to plain-old unittest on things ATM. Maybe pytest or nose is the way but I want it to play out, I don't want to introduce specialized behavior and 2 yrs later end up having to provide life support to a lib that's unmaintained.\": https://github.com/celery/case/issues/1#issuecomment-220206477\n- around the same time i first read this thread, i didn't respond to it, but i was about to say screw py.test just use unittest for now\n- then, i look at pypa's projects and flask, werkzeug, etc.  pytest is everywhere\n- then i as a trial, port tests on a sample project, tmuxp, over to it\nThings I fell in love with:\n- https://pytest.org/latest/parametrize.html\n- The fixtures of course, once you get used to how they are injected, end up being quite intuitive.\n- The assert statement handles dictionaries, lists, etc.\n- Very recently is support for asserting regexs https://github.com/pytest-dev/pytest/issues/372#issuecomment-212517182\n- Saving a whole line of indentation makes stuff so much more readable\n- tmpdir factory method, https://pytest.org/latest/tmpdir.html. Also the conveniences inside of the py.path.local object keep the code light-weight\n- I also tried https://pytest.org/latest/xdist.html and rearchitectured my tests work with it, got a nice speed bump\n. @lunemec can you rebase?\n. @lunemec yea no problem.\n@jonathanslenders is this ok to put in ? I'd like to start adding tests\n. @jonathanslenders can we get a slack setup for prompt-toolkit, pyvim, ptpython, pymux, etc?\n. I'm interested to know what you think of this approach @jonathanslenders.  Let me know if you have a better architecture in mind / ways I could simplify it / shortcomings my PR introduces I haven't thought about, etc.  I can revise accordingly\nBy the way, I have this working already: https://github.com/tony/.dot-config/blob/7ad23319566b0f74803fbd90f0cfcbcfa68e42a4/.pyvimrc#L57\n. @jonathanslenders if #35 gets merged, feel free to close this\n. Done in #35. closing\n. ",
    "ja5h": "To answer your questions in order:\n- Custom Color Scheme: \n  Nope.\n- 256 color support: \n  Unsure.\n- GNU Screen/Tmux: \n  Nope.\n- Terminal I am using: \n  Gnome Terminal 3.4.1.1\n- Python version I am using: \n  2.7.3\n_Also some more findings:_ \nI tried using XTerm and there was no issue.\nUnfortunately, after another restart, the bug got fixed by itself and I was unable to reproduce it. \n. To answer your questions in order:\n- Custom Color Scheme: \n  Nope.\n- 256 color support: \n  Unsure.\n- GNU Screen/Tmux: \n  Nope.\n- Terminal I am using: \n  Gnome Terminal 3.4.1.1\n- Python version I am using: \n  2.7.3\n_Also some more findings:_ \nI tried using XTerm and there was no issue.\nUnfortunately, after another restart, the bug got fixed by itself and I was unable to reproduce it. \n. ",
    "ordinaryegi": "same still don't found the result\n2015-05-07 12:12 GMT+07:00 lillian27 notifications@github.com:\n\nSame problem, cloned latest prompt_toolkit as suggested and now I get\nTraceback (most recent call last):\n  File \"/Users/lillian/Documents/Projects/slenders/base/bin/pyvim\", line 9, in \n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 356, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2431, in load_entry_point\n    return ep.load()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2147, in load\n    ['name'])\nImportError: No module named pyvim.entry_points.run_pyvim\nSuggestions?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jonathanslenders/pyvim/issues/59#issuecomment-99721411\n.\n\n\nubuntu user # 30968\n. same still don't found the result\n2015-05-07 12:12 GMT+07:00 lillian27 notifications@github.com:\n\nSame problem, cloned latest prompt_toolkit as suggested and now I get\nTraceback (most recent call last):\n  File \"/Users/lillian/Documents/Projects/slenders/base/bin/pyvim\", line 9, in \n    load_entry_point('pyvim==0.0.2', 'console_scripts', 'pyvim')()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 356, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2431, in load_entry_point\n    return ep.load()\n  File \"/Users/lillian/Documents/Projects/slenders/base/lib/python2.7/site-packages/pkg_resources.py\", line 2147, in load\n    ['name'])\nImportError: No module named pyvim.entry_points.run_pyvim\nSuggestions?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jonathanslenders/pyvim/issues/59#issuecomment-99721411\n.\n\n\nubuntu user # 30968\n. ",
    "hongquan": "Is it worth to support num + G as well?\n. Is it worth to support num + G as well?\n. ",
    "Gimu": "That indeed was the problem! It works now.\n. That indeed was the problem! It works now.\n. ",
    "zaxebo1": "@jonathanslenders \n:-) awesome. Thanks for solving this request\nand thanks a ton for writing this software\n. has it be released over pip? \nas you have suggested at  https://github.com/jonathanslenders/pyvim i installed it following steps\nthat to install pyvim , i did:\n   pip3 uninstall pyvim\n   pip3 install pyvim\nbut, when i launch it with python3 -m pyvim\nthen it did not worked\n. @jonathanslenders \n:-) awesome. Thanks for solving this request\nand thanks a ton for writing this software\n. has it be released over pip? \nas you have suggested at  https://github.com/jonathanslenders/pyvim i installed it following steps\nthat to install pyvim , i did:\n   pip3 uninstall pyvim\n   pip3 install pyvim\nbut, when i launch it with python3 -m pyvim\nthen it did not worked\n. ",
    "amjith": "Looks like zt is the same as z<cr> and zb is the same as z- which is already implemented. So it should be easy to add them. \n. Looks like zt is the same as z<cr> and zb is the same as z- which is already implemented. So it should be easy to add them. \n. ",
    "rgkirch": "Aha, I didn't know about those until now. Then zt should be mapped to what z<cr> does but z<cr> needs to be modified a little so that the cursor resets to the first column after scrolling. Similarly zb should be mapped to what z- does and z- should be modified.\nThanks for teaching me more short-cuts.\n. Aha, I didn't know about those until now. Then zt should be mapped to what z<cr> does but z<cr> needs to be modified a little so that the cursor resets to the first column after scrolling. Similarly zb should be mapped to what z- does and z- should be modified.\nThanks for teaching me more short-cuts.\n. ",
    "htzh": "I think I understand part of the reason for the behavior. The Editor instance initializes the default style for the underlying Application. If I call use_colorscheme it generates a new current_style which can be detected and trigger an update of the final styles dict. However if I merely update editor.current_style.styles this update is not triggered. As shown in the following interactive session in ptpython, where e is an Editor instance:\n```\n\n\n\ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]      \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False) \ne.current_style.styles.update({Token.Toolbar.Status : '#ffffff bg:#222222'})    \ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]      \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False) \n```\n\n\n\nHowever use_colorscheme does change the dynamic style attributes by overwriting the current_style attribute:\n```\n\n\n\ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]\nAttrs(color='999999', bgcolor=None, bold=True, underline=False, reverse=False)\ne.use_colorscheme('colorful')\ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]\nAttrs(color='880000', bgcolor=None, bold=True, underline=False, reverse=False)\n```\n\n\n\nSo it seems for now I need to either modify styles.py directly or if I want to overload the behavior I need to emulate the use_colorscheme method and overwrite current_style.\n. The overloading and indirection are kind of confusing here. \n```\n\n\n\nms = get_editor_style_by_name('friendly')                                                 \nms.styles[Token.Toolbar.Status]                                                         \n'#ffffff bg:#444444'                                                                          \nms.styles.update({Token.Toolbar.Status : '#ffffff bg:#222222'})                           \ne.current_style = ms                                                                      \ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]                   \nAttrs(color='d55537', bgcolor=None, bold=True, underline=False, reverse=False)                \ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]                \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False)           \nms.styles[Token.Toolbar.Status]                                                         \n'#ffffff bg:#222222'                                                                          \nms.styles[Token.Name.Entity]                                                            \n'bold #d55537'                                                                              \n```\n\n\n\nHow does the dict know to update certain property (Token.Name.Entity) but not others (Token.Toolbar.Status)?\n. The following works for me but I still don't fully understand the magic:\n# Apply colorscheme. (:colorscheme emacs)\n    my_style_extensions = {\n        # Toolbar colors.\n        Token.Toolbar.Status:                '#ffffff bg:#222222',\n        Token.Toolbar.Status.CursorPosition: '#ffffff bg:#222222',\n        Token.Toolbar.Status.Percentage:     '#ffbbbb bg:#222222',\n    }\n    pyvim.style.style_extensions.update(my_style_extensions)\n    editor.use_colorscheme('emacs')\n. Okay this is my understanding. The base class is pygments.Style\n@add_metaclass(StyleMeta)\nclass Style(object):\nThe StyleMeta metaclass overloads __new__ and during the construction of the Style class creates a cached dict _styles from the class attribute styles. But apparently ~~(related to the implementation of the add_metaclass decorator?)~~ according to Python semantics the statements in the scope of our class EditorStyle and the base class Style get executed first before the metaclass __new__ is called so the updates done in the body of the class definition show up in the cached object _styles. However after the class is constructed any new updates to styles has no effect on _styles which explains the weirdness I was seeing.\nThis (i.e., the execution order of the class scope statements and the metaclass __new__ method) seems to me to border on ~~undefined behavior~~ voodoo territory but then I am not a Python programmer worthy of anything.\n. I think I understand part of the reason for the behavior. The Editor instance initializes the default style for the underlying Application. If I call use_colorscheme it generates a new current_style which can be detected and trigger an update of the final styles dict. However if I merely update editor.current_style.styles this update is not triggered. As shown in the following interactive session in ptpython, where e is an Editor instance:\n```\n\n\n\ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]      \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False) \ne.current_style.styles.update({Token.Toolbar.Status : '#ffffff bg:#222222'})    \ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]      \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False) \n```\n\n\n\nHowever use_colorscheme does change the dynamic style attributes by overwriting the current_style attribute:\n```\n\n\n\ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]\nAttrs(color='999999', bgcolor=None, bold=True, underline=False, reverse=False)\ne.use_colorscheme('colorful')\ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]\nAttrs(color='880000', bgcolor=None, bold=True, underline=False, reverse=False)\n```\n\n\n\nSo it seems for now I need to either modify styles.py directly or if I want to overload the behavior I need to emulate the use_colorscheme method and overwrite current_style.\n. The overloading and indirection are kind of confusing here. \n```\n\n\n\nms = get_editor_style_by_name('friendly')                                                 \nms.styles[Token.Toolbar.Status]                                                         \n'#ffffff bg:#444444'                                                                          \nms.styles.update({Token.Toolbar.Status : '#ffffff bg:#222222'})                           \ne.current_style = ms                                                                      \ne.application.style.get_token_to_attributes_dict()[Token.Name.Entity]                   \nAttrs(color='d55537', bgcolor=None, bold=True, underline=False, reverse=False)                \ne.application.style.get_token_to_attributes_dict()[Token.Toolbar.Status]                \nAttrs(color='ffffff', bgcolor='444444', bold=False, underline=False, reverse=False)           \nms.styles[Token.Toolbar.Status]                                                         \n'#ffffff bg:#222222'                                                                          \nms.styles[Token.Name.Entity]                                                            \n'bold #d55537'                                                                              \n```\n\n\n\nHow does the dict know to update certain property (Token.Name.Entity) but not others (Token.Toolbar.Status)?\n. The following works for me but I still don't fully understand the magic:\n# Apply colorscheme. (:colorscheme emacs)\n    my_style_extensions = {\n        # Toolbar colors.\n        Token.Toolbar.Status:                '#ffffff bg:#222222',\n        Token.Toolbar.Status.CursorPosition: '#ffffff bg:#222222',\n        Token.Toolbar.Status.Percentage:     '#ffbbbb bg:#222222',\n    }\n    pyvim.style.style_extensions.update(my_style_extensions)\n    editor.use_colorscheme('emacs')\n. Okay this is my understanding. The base class is pygments.Style\n@add_metaclass(StyleMeta)\nclass Style(object):\nThe StyleMeta metaclass overloads __new__ and during the construction of the Style class creates a cached dict _styles from the class attribute styles. But apparently ~~(related to the implementation of the add_metaclass decorator?)~~ according to Python semantics the statements in the scope of our class EditorStyle and the base class Style get executed first before the metaclass __new__ is called so the updates done in the body of the class definition show up in the cached object _styles. However after the class is constructed any new updates to styles has no effect on _styles which explains the weirdness I was seeing.\nThis (i.e., the execution order of the class scope statements and the metaclass __new__ method) seems to me to border on ~~undefined behavior~~ voodoo territory but then I am not a Python programmer worthy of anything.\n. ",
    "sfantu": "auto completion doesn't work for me either.\nSorry it seems it works but only for some commands.\n. auto completion doesn't work for me either.\nSorry it seems it works but only for some commands.\n. ",
    "smileboywtu": "after several minutes finding in the source, I just find the code block\n``` python3\ndef get_display_name(self, short=False):\n    \"\"\"\n    Return name as displayed.\n    \"\"\"\n    if self.location is None:\n        return '[New file]'\n    elif short:\n        return os.path.basename(self.location)\n    else:\n        return self.location\n\n```\nshould i use the get_display_name() to get the filename, any way I can't find the filename in the edior.py or buffer_editor.py\n. ok, fine just change the editor_buffer.filename to editor_buffer.get_display_name()\n. use python-magic library and libmagic lib to decide the file lexer from contents not file type\n. after test, it seems the recognition is so good as default method.\n. the config file need reverse \n. it seems the editor use the lexer to decide the file type:\n``` python\n        return BufferControl(lexer=DocumentLexer(editor_buffer),\n                             input_processors=input_processors,\n                             highlighters=highlighters,\n                             buffer_name=buffer_name,\n                             preview_search=preview_search,\n                             wrap_lines=wrap_lines,\n                             focus_on_click=True)\n```\nlexer.py\n``` python\ndef get_tokens(self, cli, text):\n    \"\"\"\n    Call the lexer and return the tokens.\n    \"\"\"\n    location = self.editor_buffer.location\n\n    if location:\n        # Create an instance of the correct lexer class.\n        try:\n            lexer = get_lexer_for_filename(location, stripnl=False, stripall=False, ensurenl=False)\n        except ClassNotFound:\n            pass\n        else:\n            return lexer.get_tokens(text)\n\n    return [(Token, text)]\n\n```\nhow to change the lexer dynamically with key binding? anyone who can help me ?\n. after several minutes finding in the source, I just find the code block\n``` python3\ndef get_display_name(self, short=False):\n    \"\"\"\n    Return name as displayed.\n    \"\"\"\n    if self.location is None:\n        return '[New file]'\n    elif short:\n        return os.path.basename(self.location)\n    else:\n        return self.location\n\n```\nshould i use the get_display_name() to get the filename, any way I can't find the filename in the edior.py or buffer_editor.py\n. ok, fine just change the editor_buffer.filename to editor_buffer.get_display_name()\n. use python-magic library and libmagic lib to decide the file lexer from contents not file type\n. after test, it seems the recognition is so good as default method.\n. the config file need reverse \n. it seems the editor use the lexer to decide the file type:\n``` python\n        return BufferControl(lexer=DocumentLexer(editor_buffer),\n                             input_processors=input_processors,\n                             highlighters=highlighters,\n                             buffer_name=buffer_name,\n                             preview_search=preview_search,\n                             wrap_lines=wrap_lines,\n                             focus_on_click=True)\n```\nlexer.py\n``` python\ndef get_tokens(self, cli, text):\n    \"\"\"\n    Call the lexer and return the tokens.\n    \"\"\"\n    location = self.editor_buffer.location\n\n    if location:\n        # Create an instance of the correct lexer class.\n        try:\n            lexer = get_lexer_for_filename(location, stripnl=False, stripall=False, ensurenl=False)\n        except ClassNotFound:\n            pass\n        else:\n            return lexer.get_tokens(text)\n\n    return [(Token, text)]\n\n```\nhow to change the lexer dynamically with key binding? anyone who can help me ?\n. ",
    "therealfakemoot": "You can use os.path.abspath(os.path.expanduser(filename)) for evaluating the ~ (it will work for ~username as well as plain ~). Intelligently parsing out env vars before/after expanding ~ is going to be tougher to decide on but it's a start.\n. Installed fresh from master, confirmed working with PyPy 5.0.1. Thanks!\n. You can use os.path.abspath(os.path.expanduser(filename)) for evaluating the ~ (it will work for ~username as well as plain ~). Intelligently parsing out env vars before/after expanding ~ is going to be tougher to decide on but it's a start.\n. Installed fresh from master, confirmed working with PyPy 5.0.1. Thanks!\n. ",
    "jcmdln": "@jonathanslenders That was quick! Looks like that has solved the issue of using ~/ when using long paths, great suggestion @therealfakemoot!\n. Closing for now\n. @jonathanslenders That was quick! Looks like that has solved the issue of using ~/ when using long paths, great suggestion @therealfakemoot!\n. Closing for now\n. ",
    "lschumm": "This isn't an issue with Pyvim; this is how pip installs work. It's attempting to install pyvim globally by default\u2013meaning that you'll need root user permissions. To install it globally, run it with sudo like so:\nsudo -H pip install pyvim\n(here the -H flag means that your home directory will be your users', not the root users'; good practice in pip installs).\nAnother method is through virtualenvs. Once within a virtualenv, you may use pip without root user permissions.. This isn't an issue with Pyvim; this is how pip installs work. It's attempting to install pyvim globally by default\u2013meaning that you'll need root user permissions. To install it globally, run it with sudo like so:\nsudo -H pip install pyvim\n(here the -H flag means that your home directory will be your users', not the root users'; good practice in pip installs).\nAnother method is through virtualenvs. Once within a virtualenv, you may use pip without root user permissions.. ",
    "Mikaayenson": "I tried to install via pip on python3.6 in a virtualenv and it appears that it didn't install. I noticed the home page says python2.6-python3.4 is supported.. I tried to install via pip on python3.6 in a virtualenv and it appears that it didn't install. I noticed the home page says python2.6-python3.4 is supported.. ",
    "Kentoseth": "Please merge this issue with #99 \nThey both relate to the same thing.. Please merge this issue with #99 \nThey both relate to the same thing.. ",
    "MarSoft": "Here is when that module was removed (17 Dec 2016): https://github.com/jonathanslenders/python-prompt-toolkit/commit/17047496500480fc2c7653e701da0fdd5e08bfd4. Here is when that module was removed (17 Dec 2016): https://github.com/jonathanslenders/python-prompt-toolkit/commit/17047496500480fc2c7653e701da0fdd5e08bfd4. "
}