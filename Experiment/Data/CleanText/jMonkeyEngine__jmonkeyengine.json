{
    "shadowislord": "This is a jME2 issue. Not relevant in this repository.\n. Going to close this since universal renderer architecture makes this much easier to manage.\n. To upload to GPU you can use Application.enqueue() with a Callable that calls RenderManager.preloadScene().\nActually what I was thinking was something like \njava\nFuture<T> loadAssetLater(AssetKey<T> assetKey)\nwhich would let you load an asset on a separate thread. \nPerhaps you can set the executor via\njava\nvoid setExecutorService(ExecutorService executorService)\n. Video playback was removed, therefore this issue is no longer relevant.\n. This is already there in some form (AFAIK). Closing this issue.\n. Cannot reproduce this in any of the tests. Closing..\n. We now have some test cases that use sound with a scene.\n. In regards to the GC ignoring direct memory: The user might still hold references to the cached native buffers, therefore deleting them from the GPU or system memory during cleanup could cause a \"use after free\" bug. Implementing an LRU cache instead of a soft-ref cache will not fix this issue. Closing ...\n. Seems to have been accomplish partially via XBUF. Doesn't seem to be very useful, closing.. The jME distribution package includes a TestChooser application.\nI just noticed the alpha1 release is missing the distribution package, which is strange, because the build server was supposed to upload is automatically...\n. Tried the test case and I am not able to see any missed collisions. Maybe it was fixed in 64112ac. Closing for now..\n. Cannot reproduce on latest jME3.1.\n. Not much demand for this, closing.. The list of targets is now updated every time the model is rendered, so the issue is fixed.\n. Fixed in 3838216207917cf93f834caa1c1942312ec56564\n. You can load a RenderImageJme directly via a Texture2D, so this is not really neccessary.\n. If more than 16 textures are used then an ArrayIndexOutOfBoundException is thrown in GLRenderer.bindTextureAndUnit. Just tested this against latest jME3.1 and it works fine. Closing ...\n. Collisions between rays and/or bounding volumes have been possible for quite a while now. This should be fixed if LWJGL_OPENGL3 is used on Mac. Currently we only animate visible models (in SkeletonControl.controlRender) so that part is done. The other parts have no relevance in hardware skinning. Closing this ...\n. There's no way to fix this without preprocessing the shaders somehow. Closing this..\n. OpenGL1 will be removed soon anyway. No longer relevant.\n. This issue has already been fixed before we moved to Github.\n. The single pass mode was written just now. This issue is no longer relevant.\n. Not much demand for this, closing. Seems to be fixed in 64112ac. The test case does not print any error messages anymore.\n. Samsung Galaxy 2 has 4 different variations and all of them use GPUs from different vendors. No logs were provided either. Closing this issue due to lack of information.\n. The following textures in jME3 use DXT compression:\nTextures/Sky/Bright/FullskiesBlueClear03.dds\nTextures/Sky/Bright/BrightSky.dds\nTextures/3D/flame.dds\nScenes/Beach/FullskiesSunset0068.dds\n. Seems to have been fixed with GLRenderer. Fixed with the Limits enum. This is more or less implemented as of yesterday. Closing..\n. The dialog part is already implemented and adding logging functionality is easy enough and really should be the developer's responsibility. \n. \"reuse natives\" as described above is already possible by not bundling the natives with the app and then setting java.library.path system variable. This will cause jME3 to load the natives from that path and not extract anything. Closing ..\n. Already possible via JmeSystem.writeImageFile()\n. Based on the code, the importer no longer does this. Issue fixed.\n. Fixed as of 3992ed89af398fa525bc16a3781f11f96f226ef0\n. Since Fragments are now supported, there shouldn't be a need for this anymore.\n. Android 2.3 specific issue and the fix requires native code. Closing since too much work for too little benefit. \n. Some more windowed resolutions were added in 2fb87f9682e22255ba1402d8a3404efb95e5afda.\nIt is questionable under which circumstances users would actually want to modify the set of windowed resolution (and based on what criteria?) as well as how to expose such functionality. \n. Since we do support OpenSL (unofficially), we should just improve that renderer so we can make it the default. Any issues with it should be reported, otherwise, this issue is resolved.\n. Fixed in 7a09fbbeb0e22bd04deb577ebe556a1eb10bb908\n. Its time to make a decision on this ... Given that there's no platform-independent way of getting available VRAM and also that it differs from platform to platform, there's no point in implementing this. Closing this issue as well as the PR.\n. This seems to be more related to the blender2ogre exporter & blender than jME3 itself. You can actually achieve this in jME3 by attaching the mesh to the bone's attachment node. Closing..\n. Originally there was no frame limit when started in headless mode. Now we set frame rate to 60 by default if not provided by user. Issue fixed.\n. Not activity from author, closing. All devices with the issue mentioned in the report are using Adreno 320. A developer attempted to reproduce the issue on a Galaxy S4 (with Adreno 320) and did not see the issue. Closing ..\n. eglConfigType is now deprecated and shouldn't be used anymore. Also, the code looks correct to me. If we put a break, all parameters will be set to zeros which means the first configuration in the list will be chosen, which is probably incorrect.\n. Definitely disagree with this one... The default mode is the most compatible and fastest. E.g. when using non power of 2 textures on GPUs that don't support them for example, the repeat mode will cause a GL error, whereas clamp mode will work. jME3 isn't an OpenGL wrapper so OpenGL defaults have no relevance to jME3.\n. Don't think its such a big deal to just take the image out of the texture object. Of course, you can always extend TextureKey and return null in getProcessorType() to get around this.\n. It would require a lot of changes .. Normally if you're targeting OpenGL3 only (which is what texture arrays require) you would want to rewrite some parts of the shader anyway. I don't think this is essential.\n. We now load the scene from the Internet hosted on google code. Those files are no longer included in the builds.\n. Fixed in 6610536\n. We decided its probably not a good idea to implement this for now, given that it uses GPU-specific extensions that differ in functionality.\n. Some exporters set alpha to 0 incorrectly, which causes the models to become invisible. Now we check that alpha is between 0 and 1 before we consider the model transparent.\n. I've been able to build under JDK8 as well. Closing this.\n. Fixed in 18807cf1757a9f7acb3288149a0edc09fa577e09\n. Instead of duplicating the code, it is better to modify emitAllParticles() so that it calls emitParticles(particles.length). That way, one method can be modified if anything needs to be changed, instead of two methods.\n. Cannot reproduce this using latest jME3 master. I am able to exit the app and then open it again and no errors appear. \n. Closing due to no activity. @empirephoenix \n@shamanDevel \nIs there any way we can build our own binaries of those tools and bundle with the SDK? Right now they don't seem to be included.\n@normen It is OK to use the NVIDIA Texture Tools since NVIDIA already has a license for the DXT codec. See here: https://code.google.com/p/nvidia-texture-tools/wiki/FAQ\n\nCan I use the NVIDIA Texture Tools in the US? Do I have to obtain a license of the S3TC patent (US patent 5,956,431)?\nNVIDIA has a license of the S3TC patent that covers all our products, including our Texture Tools. You don't have to obtain a license of the S3TC patent to use any of NVIDIA's products, but certain uses of NVIDIA Texture Tools source code cannot be considered NVIDIA products anymore. Keep in mind that the NVIDIA Texture Tools are licensed under the MIT license and thus are provided without warranty of any kind. \n. @empirephoenix \nHow is this any different than asking the user to install NVIDIA Texture Tools? \nWe are trying to avoid having the user to install any 3rd party applications, as that's the only remaining issue with the patch. If we are OK with the user having to install NVIDIA Texture Tools, then we can already merge this.\n. Looks good to me. \n@normen Can you merge this if there are no issues. \n. @gouessej: Is it fine to merge this?\n. The Renderer will be refactored, but this will be based on the current LwjglRenderer and OGLESShaderRenderer classes, so any changes there will be visible in the refactor. \n\nA PR request would definitely help. \n. Looks pretty good, although I am not sure why swing is needed in the test.\n. Fixed in 409f5ab766162d98821287b0dbe6c5b3aa5c554c\n. Fixed in c3542649b53ad4f99268b9effe5764aecfca0e67\n. If you would like, you can make a pull request with the fix .. The person who is maintaining the physics support is not currently available.\n. Cannot reproduce in 3.1. Closing.\n. Also, last time I tried, gradle 2.x could not build jME3. I had to use gradle 1.x specifically. \nWere you able to get gradle 2.x to actually build the project? If not, we probably should recommend using the gradle wrapper instead.\n. It builds with gradle 2.2 if you have native projects turned off. When native project building is on, the build fails due to syntax error.\n. @pspeed42: Actually it is updateLogicalState() that handles Controls updating. updateGeometricState() doesn't do that.\n. 1) What is \"if (children.size() > 4)\"?\nIsn't the number 4 somewhat arbitrary? Where is it coming from?\n2) Why are you allocating a new CollisionResults object each time? You should be using TempVars.collisionResults to avoid allocation.\n. @Bebul \nWhy are you not using TempVars.collisionResults but instead creating your own public singleton class?\n. @Bebul \n\nUsing DummyCollisionResults avoids collecting of colliding geometries at all, so it is slightly more effective.\n\nYes but the CollisionResult object still has to be allocated if there is a valid collision, the collection step is negligible in this case (but either way we are talking peanuts). The only solution there is to do what @pspeed42 said and having an optimized intersection check that does not allocate anything. \nSo I still stand by my suggestion to use TempVars.collisionResults as that's exactly what it was intended for. If you wish to take the more advanced route @pspeed42 suggested that works too.\n. Sorry, looks like we had some confusion. Reopening again ...\n. An even more efficient algorithm than the one proposed here has been implemented a few days ago in master. I am closing this.\n. Closing since 3.1 is already released. Perhaps you can make a pull request instead? I'll assign Normen to it but he's quite busy these days.\n. Fixed in 66d4763a04fd5a63d4b4b45e062546cd035944f6, but the ScreenshotAppState no longer uses this method anyway.\n. I see two issues:\n1) This breaks the shadow processors (but not shadow filters). This is because you removed the part that adds geometries to the shadow receiver bucket. The shadow processors only render items in the shadow receiver bucket but with this change it will always be empty.\n2) If there's more than one scene attached to the viewport, it will only render the casters from the last attached scene. This is because of the RenderQueue.setRootNode() which is not necessary at all, because viewPort.getScenes() should be used instead.\n. @Bebul \n\nthe same holds for receivers too, as there is no need to collect them all first and select only these inside camera frustum later\n\nAll receivers are already guaranteed to the in the camera frustum since they are rendered from the eye camera. There's no need to render them again in the shadow renderer. The patch should only fix the issues with the shadow casters. The shadow receivers already work fine and should be left alone.\n\nthe renderScene is called for all scenes attached to viewport\n\nYes it is, but RenderQueue.getRootNode() is used at the very end after all scenes have been rendered, in AbstractShadowRenderer.postQueue(), so for multiple scenes, only the last scene will have proper shadow casters set.\n. Looks good to me.\n@Nehon please merge if you think its fine.\n. If the StatsAppState is responsible for rendering the StatsView, it can just set some flag on the Statistics class that says all calls should be ignored while it is rendering the StatsView.\n. @Bebul \nIs this because the spot light attenuation radius is not taken into account when rendering shadows?\n. I see .. @Nehon is it possible to pass the Light's radius to the shadow processor and use the same attenuation algorithm as the lighting shader? Otherwise I think it may be needed to disable the radius-based culling for shadow processors ...\n. Yeah .. for me this seems like a hack / workaround for an issue that shouldn't be there in the first place.\nI don't think post-pass shadows really work if you have more than 1 light, or if you're using point / spot lights. \nBut in any case, this is @Nehon's call\n. This change should be made in JBullet as well, I guess.\n. Looks good I guess .. Could use a bit of cleanup around ShaderKey. Anyway, we can look at that later.. \n. Already fixed in 3.1/3.2. Seems to work OK from here. \n. Fixed in ce1eba9\n. Seems to be a LWJGL bug. \nIt doesn't work on Linux either.. But that's because Linux uses the executable icon, it cannot be set via code it seems.\n. Cannot reproduce on Linux.\nProbably LWJGL bug. Closing.\n. Seems to be fixed since the code avoids passing invalid vectors to the collision function. Can you show a screenshot of the issue? I am unable to reproduce.\n. Unable to reproduce. Run app with these settings:\nTestTextureArray app = new TestTextureArray();\nAppSettings settings = new AppSettings(true);\nsettings.putBoolean(\"GraphicsDebug\", true);\napp.setSettings(settings);\napp.start();\n. Hi,\nThanks for this. It looks like the formatting has changed though, it is using tabs which makes it hard to see the changes. Is there any way you can use the previous formatting so the changes can be seen?\n. @simon-heinen \njME3 uses NetBeans IDE default formatting. I am not sure if such selection is available on Eclipse. \n. @simon-heinen\ncan you remove changes unassociated with the parsing performance improvement?\n. When using an HDR format, alpha is not available in any of the framebuffer textures. Normally alpha should not be required, and it does not really make any sense in the context of a post-processing system.\n. I can confirm TestSweepTest works, however, it seems the sweep test returns the object being sweeped as well (meaning, the capsule shape). This behavior doesn't seem to occur with JBullet. Currently investigating ...\n. I changed TestSweepTest so it ignores the shape being sweeped. This is a behavior difference between JBullet and native bullet that needs to be accounted for.\n. Why not just use Texture.setKey()? All other loaders already do this.\n. What is bullet's stance on this? How can they recommend persisting the data structure if it is not portable across platforms?\n. @empirephoenix \nHave you looked at the section \"Saving a single object, shape or acceleration structure\"?\nhttp://bulletphysics.org/mediawiki-1.5.8/index.php/Bullet_binary_serialization\n. @pspeed42 since you have interest in clipping, maybe you can review this?\n. The reason those formats were removed is because in OpenGL 3 all GL_LUMINANCE formats were removed. See here:\nhttps://stackoverflow.com/questions/20076814/replacement-for-gl-luminance-gl-luminance-alpha\nSo if you're targeting OpenGL 3+ you will not be able to use those formats. The replacement is GL_RED and GL_RG. The issue is, those formats are not available in OpenGL 2.\nThere's no single channel format that is available in both OpenGL 2 and 3 - not sure how that happened, but that's how it is. \nMaybe we need a new format, like X8 and X16, which essentially means, whatever single channel format the GPU supports. \n. Its probably best to bring those formats back .. It will cause too much damage to models that have embedded luminance textures, for example. \nIf Core Profile is used, luminance textures can be uploaded by using the texture swizzle extension, that's probably a better approach. That extension became core in 3.3, which should be supported by most GL3+ level hardware. \n. I will merge this, but since the default for point lights is to have infinite range, I am a bit confused as to why it is finite for spot lights. \n@Nehon Do spot lights support infinite range?\n. Looks OK, but it won't work on OpenGL ES 2.0 - i.e. Android and iOS devices.\nCan you make it use GL_MAX_VERTEX_UNIFORM_VECTORS if using OpenGL ES?\n. I don't think desktop OpenGL 2.0 supports GL_MAX_VERTEX_UNIFORM_COMPONENTS, and the constants have different values, so I guess you will need to do things differently depending on whether OpenGL ES 2.0 or OpenGL 2.0 is used.\nThe docs should match the OpenGL specification. Its OK to add for other shaders stages if you like.\nHardware skinning doesn't use this, it just tries to compile the hardware skinning shader and if that fails, will use software skinning.\n. I would just expose the VECTORS and compute it for desktop OpenGL based on COMPONENTS. \nIts just a division by 4 isn't it?\n. @zzuegg any update on this? It should be fairly simple to do ...\n. Looks good, but removing those spaces wasn't really necessary ...\n. Asset paths starting with \"/\" are pretty unusual .. Perhaps the change should be made in the Blender loader instead?\n. Yeah this makes sense ... Compatibility is probably more important here.\n. I am hoping maybe we can have some compatibility layer that can be used to create GLSL 1.1 and GLSL 1.5 shaders simultaneously (without duplicating code). \nFor example: \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/resources/Common/ShaderLib/GLSL150Compat.glsllib\n. Yeah but I think we should still support writing traditional shaders, even if its within the shader node system.\n. @davidB \nThe purpose of including that GLSL lib is to use the same vert / frag files for both GLSL 1.1 / 1.5. It automatically converts a GLSL 1.1 shader to 1.5. It doesn't do anything unless GLSL 1.5+ is the version being targeted.\nThis means you can declare two techniques in a material that specifies the same shader, but uses a different GLSL version. \nI am not sure if switching to shader nodes was actually needed here, perhaps @Nehon can chime in if that's the intended usage.\n. I believe @Nehon  should be the one to review it since it is using shader nodes now.\nAs an aside: I really don't understand what's the benefit of using shader nodes here, the technique issues can probably be fixed in the core itself... I.e. allow multiple named techniques and choose one automatically based on caps. Also there's some runtime overhead with using shader nodes which now would be imposed on everything due to these changes. \n. Nobody should be using those classes.. whatever.\n. Not exactly sure what this patch does? There's already a check to verify the value being set is not equal to the current value, why not just utilize this preexisting check? Also you should not use FloatBuffer.compareTo() as it will compare the contents of the float buffers which will significantly slowdown hardware skinning (which changes the matrix array per geometry per frame)\n. There's no need to test hardware skinning because its quite clear what the result would be based on the changes. First you have FloatBuffer.compareTo() which does a member-wise comparison between every float in the buffer, then later you have a buffer copy operation. This has to happen for each matrix and array uniform, per geometry, per frame. Let's say you have 100 bones in each model and 50 models on screen, that's (10016)50*60 = 4,800,000 float comparisons plus 4,800,000 * 4 = 18 MB of data copied per frame. Given that matrices and arrays change every frame in the engine (since the camera moves and the model animates), there's really no point in having those extra checks and copies.\n. @empirephoenix \nAfter testing this it seems the main gains are the per-camera matrices that don't change per model, e.g. ViewProjectionMatrix, ProjectionMatrix, and ViewMatrix. Those save the majority of uniforms it seems. \n. No, because the material is shared among all geometries, the camera uniforms are set on the material once at the beginning of the frame and then the check passes so it does not set them again.\n. Yes it does, but it has a very severe worst case performance: if you have a large matrix array which doesn't change, the compare has to go through the entire native buffer. If the comparison was changed only to happen for Matrix3 / Matrix4 type uniforms as opposed to arrays you would get the performance benefits without the worst case performance decrease. \n. I definitely want to see something that would optimize away View/ProjectionMatrix since those never change for the entire frame - it seems to save a lot of glUniformMatrix calls especially for the lighting shader which loves to use those matrices ... For all other cases, its either already implemented or not necessary to be implemented (like for skinning).\n. Looks OK, merging\n. Looks good.\n. I have this implemented locally. Going to commit it soon ...\n. This is already fixed. Seems to be an issue specific to post pass shadows which are already broken by definition, closing.... Notifying @kwando @erlend-sh \n. Thanks for the fix @kwando \n. First of all it changes the API so old code would not compile anymore. Second it changes the serialization format so exported models would stop loading correctly. If those functions are to be added, they have to be added alongside the existing ones, not replacing them.\n. @normen I think its OK in this case, since it just uses overloading\n. This is incorrect, in the case where weights[0] != 0, it will always increment by 4. There are two parts where idxWeights is incremented, in the for each weight in vertex loop, and then afterwards where its incremented by fourMinusMaxWeights - thus it is always incremented by 4.\nThe crash is likely due to the importer providing garbage data. The weights buffer should have 4 entries per vertex regardless of maxWeightsPerVert or weights[0].\n. This is a behavior change, yes. I am not sure if its significant enough to warrant avoiding fixing this, since it is not expected that it would always use Y when you change the up vector.\n. LWJGL 2.x does not support creating offscreen contexts without Pbuffers. On the other hand, LWJGL 3.x does support this, so the LWJGL 3.x implementation of OffscreenBuffer would probably use a hidden window opengl context instead of a pbuffer.\n. You need to have an OpenGL context to use OpenGL. An FBO is not an OpenGL context. \nIn LWJGL 2.x, three ways were provided for creating an OpenGL context: display, canvas, and pbuffer. In LWJGL 3.x which uses GLFW, there's only one way: creating a window, but that window can be hidden, thus achieving an offscreen OpenGL context.\n. This depends on issue #314 \n. Seems like this is already fixed since we support LWJGL 3.0 with offscreen buffers. Does the issue still occur in 3.1? I thought we defaulted to using the batched renderer in 3.1\n. Also it seems that an empty Mesh (with no buffers) can also cause problems\n. Version format has been implemented in 17887b1fb0c1478808a6aee5dc441cb59d1b5975\n. There's a weird issue plaguing the Linux installer. The executables in the folders jdk/jre/bin and blender are missing proper executable (+x) permissions, hence there's an access denied error when the jME SDK tries to use them. It seems that those permissions are being stripped upon being inserted into the data,1.jar package which is injected into the installer. \nAnother issue is with the packaging of the JDK for Windows - it seems the rt.jar.pack.gz file is not being properly unpacked upon installation, hence that file has to be bundled without any compression as rt.jar. \nAt this point, we may need to ask ourselves if there's a point to including the JDK? After all, we expect users to be experienced Java developers in order to use the engine. Isn't it expected that experienced Java developers will have the JDK installed? \nI am going to go ahead and loop in @normen on this so he can participate. \n. @phr00t \nActually I realized yesterday that changing the permissions after copying the files is the NetBeans Platform preferred way of having a bundled JVM. I was very surprised, I didn't think NetBeans platform would steep that low to support this.. I hoped there would be a more reasonable alternative. \nSo looks like that problem is solved.\n. There's another issue with the helpset generation not working correctly. The help pages are pulled correctly from the wiki but the links are incorrect. However since this issue can be resolved via NBM updates it will not be a blocker for the initial installer release.\n. An update:\nInstallers underwent closed testing. Some issues were found and corrected. NBM updates are confirmed working as well. The next round will be an open test. Better get ready @erlend-sh \n. Another update:\nMaven snapshot artifacts are now published automatically to updates.jmonkeyengine.org. They will be published as a release artifact if it is a tagged commit.\n. Closing since 3.1 was already released. I don't think Windows users would care about how it works on Linux. \nThe point is that a jME application executed from an SMB share crashes on boot, that's generally not a good thing regardless. A user may not wish to mount a net-drive, they may wish to run it directly from the SMB share.\n. Hey @jayfella I assigned you to this issue since its happening because the wiki page needs to be updated, but unfortunately we are locked out of the wiki.\n. I created a new (mostly) identical page for 3.1. Now only the URL needs to be changed in the SDK plugin.\nhttp://wiki.jmonkeyengine.org/doku.php/sdk:welcome:3_1\n. Can you please provide a small test case which reproduces the problem?\n. @jmekaelthas : do you have any idea why this happens? \n. Nevermind, Nifty GUI uses its own repository so this is probably not possible to accomplish.\n. This article might help:\nhttps://stackoverflow.com/questions/11504430/gradle-how-to-upload-custom-jar-file-to-maven-repository\n. Deprecated in https://github.com/jMonkeyEngine/jmonkeyengine/commit/616dadc4981d739c121285df8426fc3863f622cc\n. You need to have a 32-bit build environment installed.\n. Closing due to inactivity\n. I was actually thinking of changing it so that computing counts is not required at all.. E.g. the Renderer and / or Statistics class can simply use the limit / componentLength of the first buffer as the vertex count, whereas the primitive count is based on the index buffer limit / mesh mode size.\nThis way the error prone updateCounts() method can be removed.\n. Based on the stack trace you posted, the error appears in your code:\nUncaught exception thrown in Thread[jME3 Main,5,main] java.lang.NullPointerException \nat mygame.LoadModel.simpleInitApp(LoadModel.java:51)\nLine number 51 is:\nchannel = control.createChannel();\nTherefore control is null. It is null because the root node of arm.mesh.j3o does not have an AnimControl.\n. It looks good with the latest changes. If other members are OK we can merge this.\n. Because there are no core modifications, there should be no regressions with this. \nI am looking forward to getting rid of the LWJGL 2.x backend and replacing with this one.\nMerging..\n. @satscape \nCan you show the code on how you load the sound? \nNormally you have to specify that you want streaming for it to load in stream mode.\n. Actually, the expectation is that you set both parameters to false... For most sounds which are less than 10 seconds, you should be using the buffered mode instead of streamed mode.\nThis is explained (maybe not too well..) here:\nhttp://wiki.jmonkeyengine.org/doku.php/jme3:advanced:audio#audio_terminology\n. I created a new issue report to clarify the differences between the various parameters in AudioNode.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/342\nSince your problem is solved I'll close this one.\n. @Nehon \nSeems like this change is already applied, can we close this then?\n. Unfortunately it is highly unlikely that this method will be fixed. It isn't used anywhere in the engine, and it's probably not used in user code either, since it is quad based whereas most applications will probably want triangle collision instead.\nSo at this point I would recommend removing it entirely.\n. No activity and no PR was submitted from the author, closing... Actually there's an even faster algorithm that doesn't require Math.pow(), I implemented it here: https://github.com/jMonkeyEngine/jmonkeyengine/commit/d269839efb1470b3f44c5d201baf49e117783118\nThanks.\n. I already have this implemented locally - works great. Reduces uniforms set per frame by about x2. Combined with vertex array object support, this reduces number of GL calls made per object significantly (for a nice FPS boost).\n. We have some unit tests for the light culling here:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/test/java/com/jme3/light/LightFilterTest.java\nCould you include a test case for a model which uses a bounding sphere?\n. @Dokthar If you think it makes sense to share that code between bounding volumes and lights then go ahead.\n. Here's the explanation behind using Float.compare instead of ==:\nhttp://hub.jmonkeyengine.org/t/vector3f-equals-bug/32074/3\n. If the equals() method is modified according to this, it would violate the contract for hashCode(), because then there will be two vectors that have different hash code but will be equal according to equals().\nIf you like, you can implement something an approximateEquals() which will use a more relaxed comparison involving epsilons and such.\n. Looks good to me, going to merge this.\n. Recommend creating some unit tests comparing this improved method vs the old one to make sure there's no major differences. You can use approximateEquals for this.\n. Can you put it into jme3-core/src/test/java/com/jme3/math/?\n. Closing due to lack of information / stack trace / etc.\n. Still no information about the issue. I am guessing this is a duplicate of #558 which is also an \"invalid enum\" error.. Its not true that its unused, because in the last line:\ntmp_inverseWorldRotation.set(spatial.getParent().getWorldRotation()).inverseLocal().mult(localRotationQuat, localRotationQuat);\nThe mult() call actually writes the result to localRotationQuat, which is used.\n. What is this?\n. OK well, I am going to close this now. Not sure what this is supposed to be.\n. @pspeed42 I think you have this issue fixed on master already, right? Can we close this then?\n. No need to change SAVABLE_VERSION, name will simply be set as null as before if it was not written.\n. Less code is always better.\n. Looks fine to me, except I don't understand why isBatch() was made public. In what situation would the user need to use isBatch()?\n. Fixed in https://github.com/jMonkeyEngine/jmonkeyengine/commit/e541a5a147e0dc8acefee694fce4d7f8a616a5be\n. That's a lot of duplicate code. Maybe create a common subclass where this functionality can be implemented? Like AbstractSceneExplorerControlNode\n. Thanks, this is much better.\n. If you make those changes you have to fix the comment too:\nhttps://github.com/AlrikG/jmonkeyengine/blob/BoneAnimationBindTransformBug/jme3-core/src/main/java/com/jme3/animation/Bone.java#L140-L149\n. @normen \nCan you take a quick look at this? \nI thought collision groups were handled in the broadphase so there shouldn't be a need to check them again.\n. Looks good to me, except that the the logic is slightly different in this implementation compared to JBullet.\nIn JBullet we let the first listener decide the if the collision occurs but for this implementation we defer to the second listener if the first one says they should collide. We should decide what behavior we would like to have. \nAnother option would be to always call both listeners and then combine their result like this:\ncollide = listener1Result && listener2Result.\nThe reason is that maybe you just want to use the listener as a listener and not to influence the collision result, so in that case you want both listeners to be called no matter what. Although, if the first listener opts out the collision then technically the objects are no longer colliding, so maybe it doesn't make sense to call the second listener?\n@normen \n@Fadorico \nWhat do you think makes more sense? \n. I think the approach you proposed where we just ask both listeners and then combine the result makes the most sense.\nThere's no need to overcomplicate this for two reasons:\n1) Broadphase collision doesn't mean the objects are actually colliding, it just means bullet wants to know if they should be colliding or not. So using this listener to detect collision will not yield the expected result.\n2) Users of the engine are expected to have some consistency with how they manage their collision groups and listeners... If the ball collision listener says balls should be colliding with the ground, but the ground collision listener says balls should not collide with the ground, well then that sounds like a user error to me and not something the engine should be responsible for handling.\n. @Fadorico \nDo you think it makes sense to make the same change in JBullet as well to make sure it is consistent?\n. OK, looks good\n. A skybox is located infinitely far away, so all collisions would be located at infinity, and thus invalid. Closing this issue as it is expected behavior. Adding the unused field to VertexBuffer does not make any sense. The same Mesh could be used with a variety of shaders, some of which use that vertex buffer and some which do not.\n. @Nehon is there any reason why this is targeting the PBR branch? There's nothing PBR specific here.\n. Can we apply the same fix to SPLighting.frag?\n. It should not be required to catch a null pointer exception in a normal Java program.\nIt is better to fix the underlying bug causing the null pointer instead.\n. @JavaSaBr \nIs this still a problem? On the forum you mentioned your issues were resolved.\n. The only way this exception can happen is if the mesh has a HWBoneIndex buffer but no BoneIndex buffer. This would be a corrupt model.\n. The main issue I have with this is that it is now the user's problem to deal with differing coordinate systems between LWJGL2 and LWJGL3. I.e. when they switch to LWJGL3 they now have to change all their cursor loading code to pass this parameter.\nIMO this flipping should be handled by the context and not by the user.\n. Sorry but I don't think this is the right approach. We cannot expose Application on the AssetManager as that creates a circular dependency and also violates loose coupling.\nThe approach I was thinking is to perform the flip in jme3-lwjgl3 for now, and then once LWJGL3 becomes the default backend we can remove the flipping entirely.\n. Looks good to me\n@Nehon \nIf you think the shader node changes are fine I think we should merge this.\n. Not sure why this is needed, since you can make alpha insignificant by disabling blending and not setting AlphaDiscardThreshold.\n. I think a bigger problem with FbxMaterial is that it requires an AlphaMap parameter too.\nAnyways, this could be useful for FBX, but then again, so many other things in FBX are broke I am not sure if this would help much..\n. Fixed in https://github.com/jMonkeyEngine/jmonkeyengine/commit/9d094b222af01a896e5ddf716af588fba0e819dd\n. I would recommend to just do a sort. We don't know what the intended order is in this case so better not make any assumptions.\n. @NemesisMate \nTook a quick look at the source code and it doesn't seem like there is any implied order. Also consider that on the bullet side, the results are given via a callback and not a list of collision results.\n. It is intended that model loaders expect the key to be an instance of ModelKey. \nThe BlenderKey simply provides additional parameters specific to .blend files.\n. Also, one more thing is we require a test in jme3-examples for any features being added. \n. One more thing, do you have any example use cases for this feature? \n. The unit tests are passing for me, cannot reproduce. Should be fixed for Windows / Linux. Will update the OSX natives tomorrow.\n. Looks good! I am going to merge this although might not have much time to spend on merging the two importers.\n. The fix has already been committed, going to close the issue. This breaks backward compatibility but is expected behavior.. going to close the issue. Fixed in  2e58f27. That mode is only useful if texture border is used, otherwise, the GL_CLAMP_TO_BORDER mode is equivalent to GL_CLAMP_TO_EDGE. Supporting GL_CLAMP_TO_BORDER only makes sense if jME3 supported texture border. You can safely translate GL_CLAMP_TO_BORDER into GL_CLAMP_TO_EDGE with no adverse effects.\n. Can't you simply create the border manually in an image editor? Another option is to edit the image after loading it in jME3 to add the border.\nMain reason why it is not supported is because OpenGL ES does not support texture border.\n. Going to close this since there's been no response\n. Seems like expected behavior, so I am closing the issue. Looks good, I guess this new version of bullet uses threading automatically? Or do we need to do something to enable it?\n. Can you remove the commented out code? IMO there's no point in keeping it if that functionality was removed from bullet.\n. Looks good, however it is using tabs instead of spaces.\nRecommend to use 4 spaces instead to be consistent with the rest of the engine, then it would be A-OK\n. @empirephoenix  PrimitiveAllocator and BufferUtils still use tabs\n. LGTM\n@pspeed42 do you have any concerns about this?\n. Guess not..\n. Yeah, it's okay to update LWJGL3\n. @empirephoenix \nOne huge disadvantage is this ties the user API into OpenGL, since the custom blending mode now expects OpenGL arguments to be given. This means implementing the custom blending mode using Vulkan or DirectX might difficult. It's a tough call to make - and I am not sure if the benefits outweigh the costs..\n. @papaspace \nWhat I mean is that users are now expected to pass arguments into the method from the GL interface which is OpenGL specific. Ideally we would have those arguments exposed as jME enums, but this might be too much work given that not a lot of people have uses for these custom blending modes.\n. I put one comment, once its fixed I think this is good to merge\n. The PRs mentioned seem to have been already merged. Can you update the .travis.yml file to use Java 8 instead of 7? Since this PR requires jME3 to target Java 8 instead of 7\n. @empirephoenix @shamanDevel \nI am seeing warnings like this:\nwarning: [options] bootstrap class path not set in conjunction with -source 1.7\nGiven that JDK7 is EOL, and jME3.2 will probably be based on LWJGL 3.0, this means we need to target JDK8 for jME3.2, so the source / target properties in the build script should be updated as well.\n. This kind of throws a wrench in the works since we can't release jME 3.2\n(whenever that may be) with LWJGL 3.0 stable, without requiring Java 8.\nI see a few options:\n1. Merge this PR, and hope everyone upgraded to Java 8 by the time jME 3.2 is\n   released. To adhere with semver we could use version 4.0 instead of 3.2.\n2. Convince the LWJGL people that requiring Java 8 is a bad idea.\n3. Keep using the potentially buggy RC version of LWJGL 3 which only needs Java 7.\n4. Keep using the EOL'd / buggy LWJGL 2.\n. @empirephoenix \nDoes that mean going with option 4 then? \nOr do you propose upgrading to Java 8 for desktop only and keep using Java 7 for Android only?\n. The issue isn't really the source level. The plan was for 3.2 to use LWJGL 3 as the official backend, instead of LWJGL 2 which is obsolete. And LWJGL 3 requires Java 8.\n. Let's change the source / target version for the jme3-lwjgl3 module only then.. I see no issue with doing this since jME 3.2 isn't going to be released anytime soon.\n. Only thing that's bothering me is that we have no way to verify if we still have JDK7 compatibility, e.g. if people start using Java 8 features / APIs but don't notice it. \nBut that shouldn't hold this up, I guess.\n. @shamanDevel \nIt would be nice if we could somehow exclude building the LWJGL3 module if JDK7 is used. Then we could simply have Travis-CI build using both JDK7 and 8 and it would report which build variant failed. \nI am thinking this is possible with a conditional inside settings.gradle checking for the JDK version and not including the jme3-lwjgl3 project.\n. @riccardobl \nPlease enable graphics debug and try again:\nAppSettings settings = new AppSettings(true);\nsettings.putBoolean(\"GraphicsDebug\", true);\napp.setSettings(settings);\n. My running theory is the PBR shader has a mismatch in the interface between the vertex shader and the fragment shader (e.g. varying with different types or non-existent ones).\nIt still crashes if you remove FilterPostProcessor right?\n. If we are going to do this shouldn't we use the new Cloner system?\n. Log from forum post:\nSep 19, 2016 10:49:23 PM java.util.prefs.WindowsPreferences\nWARNING: Could not open/create prefs root node Software\\JavaSoft\\Prefs at root 0x80000002. Windows RegCreateKeyEx(...) returned error code 5.\nSep 19, 2016 10:49:31 PM com.jme3.system.JmeDesktopSystem initialize\nINFO: Running on jMonkeyEngine 3.1-beta1\n* Branch: HEAD\n* Git Hash: 310f4db\n* Build Date: 2016-04-25\nSep 19, 2016 10:49:32 PM com.jme3.system.lwjgl.LwjglContext printContextInitInfo\nINFO: LWJGL 2.9.3 context running on thread jME3 Main\n* Graphics Adapter: aticfx64\n* Driver Version: 8.17.10.1094\n* Scaling Factor: 1\nSep 19, 2016 10:49:33 PM com.jme3.renderer.opengl.GLRenderer loadCapabilitiesCommon\nINFO: OpenGL Renderer Information\n* Vendor: ATI Technologies Inc.\n* Renderer: AMD RADEON HD6410D Graphics\n* OpenGL Version: 4.1.11079 Compatibility Profile/Debug Context\n* GLSL Version: 4.10\n* Profile: Core\nSep 19, 2016 10:49:33 PM com.jme3.asset.AssetConfig loadText\nWARNING: Cannot find loader com.jme3.scene.plugins.blender.BlenderModelLoader\nSep 19, 2016 10:49:33 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio Renderer Information\n* Device: OpenAL Soft\n* Vendor: OpenAL Community\n* Renderer: OpenAL Soft\n* Version: 1.1 ALSOFT 1.15.1\n* Supported channels: 64\n* ALC extensions: ALC_ENUMERATE_ALL_EXT ALC_ENUMERATION_EXT ALC_EXT_CAPTURE ALC_EXT_DEDICATED ALC_EXT_disconnect ALC_EXT_EFX ALC_EXT_thread_local_context ALC_SOFT_loopback\n* AL extensions: AL_EXT_ALAW AL_EXT_DOUBLE AL_EXT_EXPONENT_DISTANCE AL_EXT_FLOAT32 AL_EXT_IMA4 AL_EXT_LINEAR_DISTANCE AL_EXT_MCFORMATS AL_EXT_MULAW AL_EXT_MULAW_MCFORMATS AL_EXT_OFFSET AL_EXT_source_distance_model AL_LOKI_quadriphonic AL_SOFT_buffer_samples AL_SOFT_buffer_sub_data AL_SOFTX_deferred_updates AL_SOFT_direct_channels AL_SOFT_loop_points AL_SOFT_source_latency\nSep 19, 2016 10:49:33 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nWARNING: Pausing audio device not supported.\nSep 19, 2016 10:49:33 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio effect extension version: 1.0\nSep 19, 2016 10:49:33 PM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio max auxiliary sends: 4\nBullet-Native: Initializing java classes\nSep 19, 2016 10:49:34 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture loading.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:34 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture dot.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:34 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture dot.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:34 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture dot.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:36 PM com.jme3.material.Material setTextureParam\nWARNING: The texture Models/zombiecommon/textures/zombie_common_hood.tga has linear color space, but the material parameter DiffuseMap specifies no color space requirement, this may lead to unexpected behavior.\nCheck if the image was not set to another material parameter with a linear color space, or that you did not set the ColorSpace to Linear using texture.getImage.setColorSpace().\nSep 19, 2016 10:49:36 PM com.jme3.material.Material setTextureParam\nWARNING: The texture Models/zombiecommon/textures/zombie_common_hood.tga has linear color space, but the material parameter DiffuseMap specifies no color space requirement, this may lead to unexpected behavior.\nCheck if the image was not set to another material parameter with a linear color space, or that you did not set the ColorSpace to Linear using texture.getImage.setColorSpace().\nSep 19, 2016 10:49:36 PM com.jme3.material.Material setTextureParam\nWARNING: The texture Models/zombiecommon/textures/zombie_common_hood.tga has linear color space, but the material parameter DiffuseMap specifies no color space requirement, this may lead to unexpected behavior.\nCheck if the image was not set to another material parameter with a linear color space, or that you did not set the ColorSpace to Linear using texture.getImage.setColorSpace().\nSep 19, 2016 10:49:36 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture title.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:36 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture start1.png (Flipped) (Mipmapped)\nSep 19, 2016 10:49:36 PM com.jme3.texture.Texture read\nSEVERE: Cannot locate texture continue1.png (Flipped) (Mipmapped)\n[JME3] OpenGL debug message\nID: 1000\nSource: API\nType: ERROR\nSeverity: HIGH\nMessage: glTexParameteri has generated an error (GL_INVALID_ENUM)\njava.lang.Exception: Stack trace\nat java.lang.Thread.dumpStack(Thread.java:1329)\nat com.jme3.system.lwjgl.LwjglGLDebugOutputHandler.handleMessage(LwjglGLDebugOutputHandler.java:76)\nat org.lwjgl.opengl.GL11.nglTexParameteri(Native Method)\nat org.lwjgl.opengl.GL11.glTexParameteri(GL11.java:3016)\nat com.jme3.renderer.lwjgl.LwjglGL.glTexParameteri(LwjglGL.java:320)\nat com.jme3.renderer.opengl.GLDebugES.glTexParameteri(GLDebugES.java:327)\nat com.jme3.renderer.opengl.GLRenderer.updateTexImageData(GLRenderer.java:2140)\nat com.jme3.renderer.opengl.GLRenderer.updateRenderTexture(GLRenderer.java:1500)\nat com.jme3.renderer.opengl.GLRenderer.updateFrameBufferAttachment(GLRenderer.java:1531)\nat com.jme3.renderer.opengl.GLRenderer.updateFrameBuffer(GLRenderer.java:1581)\nat com.jme3.renderer.opengl.GLRenderer.setFrameBuffer(GLRenderer.java:1736)\nat com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1072)\nat com.jme3.renderer.RenderManager.render(RenderManager.java:1145)\nat com.jme3.app.SimpleApplication.update(SimpleApplication.java:253)\nat com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:151)\nat com.jme3.system.lwjgl.LwjglDisplay.runLoop(LwjglDisplay.java:193)\nat com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\nat java.lang.Thread.run(Thread.java:745)\nSep 19, 2016 10:49:37 PM com.jme3.app.LegacyApplication handleError\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\ncom.jme3.renderer.RendererException: An OpenGL error occurred - Invalid enum argument (Error Code: 1280)\nat com.jme3.renderer.opengl.GLDebug.checkError(GLDebug.java:46)\nat com.jme3.renderer.opengl.GLDebugES.glTexParameteri(GLDebugES.java:328)\nat com.jme3.renderer.opengl.GLRenderer.updateTexImageData(GLRenderer.java:2140)\nat com.jme3.renderer.opengl.GLRenderer.updateRenderTexture(GLRenderer.java:1500)\nat com.jme3.renderer.opengl.GLRenderer.updateFrameBufferAttachment(GLRenderer.java:1531)\nat com.jme3.renderer.opengl.GLRenderer.updateFrameBuffer(GLRenderer.java:1581)\nat com.jme3.renderer.opengl.GLRenderer.setFrameBuffer(GLRenderer.java:1736)\nat com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1072)\nat com.jme3.renderer.RenderManager.render(RenderManager.java:1145)\nat com.jme3.app.SimpleApplication.update(SimpleApplication.java:253)\nat com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:151)\nat com.jme3.system.lwjgl.LwjglDisplay.runLoop(LwjglDisplay.java:193)\nat com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\nat java.lang.Thread.run(Thread.java:745)\n. Offending line:\ngl.glTexParameteri(target, GL.GL_TEXTURE_MAX_LEVEL, 0);\nError:\nInvalid enum argument (Error Code: 1280)\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/v3.1.0-beta1/jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java#L2140\n. I think I was able to reproduce this issue. It happens when the FPP is configured to use multisampling with setSamples(X). The parameter GL_TEXTURE_MAX_LEVEL is illegal for multisampled textures. I am working on a fix atm. Looks OK now, I have no further comments.\n@empirephoenix if you like, you can merge it\n. For things like deploying artifacts, you only want one of the builds to deploy instead of all 3. \nMight be worth having a \"master\" build distinction so the build script knows that it is allowed to deploy.\n. @shamanDevel \nDon't think different artifacts are needed depending on Java version.\nIf you use Java 7, all artifacts should work except for jme3-lwjgl3 which would give incompatible Java version error.\nIf you use Java 8, all artifacts should work, including jme3-lwjgl3. \nThis is already enforced with the build script changes made earlier, the only thing left is to make sure only the Java 8 builder deploys the artifacts and not all.\n. Looks OK\n. @empirephoenix I am not sure if it makes sense to merge this rather significant change to the 3.1 branch. Since we just released, the branch is intended only for bug fixes. So what are the advantages of using this allocator exactly? What's wrong with the regular one?. Where is the shader source that's supposed to be printed out above the exception?\nIt's not possible to debug this error without the shader source.. Hi @AlrikG \nCan you add the following to TestAttachmentsNode.main():\njava\nAppSettings settings = new AppSettings(true);\nsettings.putBoolean(\"GraphicsDebug\", true);\nsettings.putBoolean(\"GraphicsTrace\", true);\napp.setSettings(settings);\nAnd post the log here. You only need to run it for a second or so (it will generate a lot of output).\nThanks.. Hi @AlrikG , can you confirm that the problem was introduced in this commit? https://github.com/jMonkeyEngine/jmonkeyengine/commit/bf18ef304833a5428362e85fdd479b578e5f10df. @stephengold the fix PR was merged, does it work for you?. OK, I reverted it. @MeFisto94 should this issue should go under the SDK?. I think it might make more sense to create a unit test for this instead of an example program. In this case there's nothing interesting going on visually and a unit test is automated.\nAlso it seems like a bunch of commits from master are appearing on this PR.. maybe you need to merge master into it?. 1. Yes I have it... It kinda crappy though so I am going to clean it a bit and commit later\n2. So the challenge is supporting any light type in the shader without knowing its type statically. Unfortunately this is more complicated so I took the easier route initially where all types are known ahead of time. Theoretically the shader is faster but due to the large number of shader permutations it causes micro-stuttering when the shader variants are compiled. Supporting arbitrary light types requires several passes where first the shadow slices to fetch are determined (based on NB_LIGHTS) and then fetching them. The next part is using those results in the lighting loop.\n3. Not sure what you mean by renderer. Generating the shadow maps is handled by PreShadowArrayRenderer and then later they are used by ShadowStaticPassLightingLogic.\n4. I will update the description .... Can you attach a test case that reproduces the issue?. Please attach a test case reproducing the problem. You can set the windowed resolution by using AppSettings. Also indicate your OS and GPU (ideally, provide the log from running the test case).  * There are no tests for this feature (unit tests or examples). We don't actually know if the feature works or not\n * It's not explained what the value is of either UBO or SSBO to the engine and/or users\n * It's not a good idea to implement a feature that's not used by the engine itself because it will suffer from bit rot and stop working with time\n * One of the main benefits of UBOs is the ability to pass a variety of data types in a single buffer object, which is more efficient. The engine could have taken advantage of this by, say, passing material parameters and global parameters in two separate UBOs. With the current implementation the user has to be using UBOs explicitly which is not convenient and a leaky abstraction. I'm not objecting to the PR per se, I'm just saying that its a good idea to approach this from a different angle. Instead of saying, \"Hey let's implement UBOs and SSBOs\", you should instead say, \"How can we make the engine faster with UBOs / SSBOs?\" or \"What kind of features can we implement if we had UBOs / SSBOs that otherwise we couldn't have?\". So what does this do that isn't already there? You can already set the far clip plane with Camera.setFrustumFar(). There's a method called setFrustumPerspective which does it correctly... I guess changing the far value via setFrustumFar doesn't really work. What's the value of these formats? Where would they be used? Why are existing formats inadequate? . @Nehon \nOK. It seems those formats are already there though. Pretty sure this breaks backwards compatibility with J3O files generated before this change. RenderState is a Savable which means it is serialized in the model file, and this PR changes fields and field names.. Thanks, the issue has been fixed in this commit:\nhttps://github.com/jMonkeyEngine/wiki/commit/438a6d93c2cb70b82369e19ddb123b5ff865288e. cool, I guess this works. This is not really correct. GLFW_REFRESH_RATE is the display refresh rate for fullscreen mode, whereas settings.getFrameRate() is a software-enforced limit of framerate. GLFW_REFRESH_RATE should be set to settings.getFrequency() instead.\nProbably should stick to the LWJGL2 implementation for framerate.\n. Probably doesn't make much sense to implement Timer. We should be using NanoTimer by default for everything anyway...\n. Perhaps this should go into the jme3-lwjgl3 project instead, since no code outside of it should be using LWJGL 3 anyway.\n. Removing this can cause issues. The SDK is relying on being able to extract natives even though the context is not initialized. Also I strongly suggest using a different library name instead of \"lwjgl\" for lwjgl3, probably should just use \"lwjgl3\" to avoid conflicts. For openal you can use \"lwjgl3-openal\" instead. Once LWJGL 3.0 becomes official / stable we can then get rid of LWJGL 2 and replace the lwjgl and openal libraries with their LWJGL 3.0 equivalents. \n. Any specific reason why we are using the 3.0.0b snapshot instead of 3.0.0a?\n. Yeah, we'll have to do that I am afraid.\n. I don't think it is possible to implement canvas using GLFW. It only supports standalone windows or fullscreen. \nShould probably just remove this class then.\n. Isn't this the exact algorithm that was implemented above? Shouldn't this compare against the old algorithm instead?\n. Is it intended to use such a high epsilon value? Is it failing on the default value in FastMath.approximateEquals?\n. What about jbullet / nifty? We shouldn't upload those because they reference external artifacts.\n. Why not use the POM_ constants for everything? We want the POMs in our repo and the internal repo to be as similar as possible\n. By repo I meant jcenter and updates.jmonkeyengine.com/maven\n. Why not put this in the script: section? Alternatively, why not put both upload lines in the after_success section?\n. Is this developers section actually required? OSS projects have many contributors and we can't give credit to everybody.\n. sounds good\n. Just add a name 'jMonkeyEngine Team' with id 'jMonkeyEngine' then?\n. Can you update the 4 examples in the top comment to match this new behavior? I want to see how it looks like now\n. There are two quotes here: \n\"$TRAVIS_TAG\"\"\n. OK, that works\n. jme3-core should not reference the java.awt package, because it is not available on Android. \njava.awt is allowed to be referenced in desktop only projects, like jme3-desktop and jme3-lwjgl.\n. Loaders are typically managed via AssetManager, there's no need to have a static reference in any AssetLoader.\n. Although resizing images automatically could be useful, I don't think this functionality should only be available in certain loaders. This is much better to be implemented as a TextureProcessor feature instead.\n. Also, I'll mention that personally I don't think resizing images at run-time is a good idea, because it slows down loading for people who want lower texture quality. Further, resizing is not possible to do for compressed formats like DXT or ETC. A better option might be to use a mipmap level offset when specifying the texture in OGL, so that it ignores mipmap level 0 for example, effectively halving the texture resolution.\n. The type is a property of AudioData, not AudioNode. \nSee for example, AudioData.DataType enum which has the same purpose. Perhaps it should just be better documented.\n. I see it being used for Linux and Mac, but I cannot find it used on Windows:\nhttps://github.com/LWJGL/lwjgl/blob/master/src/java/org/lwjgl/opengl/LinuxMouse.java#L48\nhttps://github.com/LWJGL/lwjgl/blob/master/src/java/org/lwjgl/opengl/MacOSXNativeMouse.java#L53\n. Can you move the number into a constant field? Then I'll merge this.\n. Looks like copy and paste error. I guess this should be:\nstate.blendEquationAlpha = blendEquationAlpha;\n. Why not implement this in GL? OpenGL ES 2.0 supports this function too. \nThis would allow Android / iOS devices to take advantage of this feature.\n. Looks like\ncontext.blendEquationAlpha = state.getBlendEquationAlpha();\nis missing\n. Is there a need to override these methods if the superclass implementation is used?\n. Should use 4 spaces instead of tabs to match other jME3 code\n. Better to keep the static wildcard import as-is, otherwise it causes too much clutter.\n. The default value for this is actually GLFW_TRUE already, so there's no need to set it.\n. Can just use a for-each loop here, e.g.:\nfor (GLFWImage image : images)\nUnless the image ordering matters somehow. Based on the GLFW documentation, it doesn't seem like it does.\n. Freeing resources should be in a try .. finally block in case any of the code above throws an exception.\n. There's no need to write PNG here and then read it back again. The data can be pulled directly from the BufferedImage. \nSee how its done for LWJGL 2:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglDisplay.java#L227-L253\n. If you remove the free calls, you would introduce memory leaks. \n. Get rid of STBImage.stbi_load_from_memory, you don't need it if the data is loaded directly from the BufferedImage\n. There shouldn't be memory leaks in general - intentional or otherwise. Better to figure out why free() is crashing.\n. These two constants are available in both OpenGL 1.1 and OpenGL ES 2.0, so they should go into the GL interface\n. The ThreadLocal is not needed because AssetLoaders are already loaded per-thread. Why does this need to extend JmeImporter? Shouldn't it implementAssetLoaderinstead?. This could break compatibility... I think it fixes a bug, or changes behavior. FYI, this breaks any custom lighting shaders. Static pass should probably be removed. It doesn't add any value now . Should refactor this comparator to avoid allocation. Remove this. This needs a test...TestInPassShadowsuses the regularPreShadowArrayRenderer`. This needs to be used by the test. What's the point of this?. Should this be used for directional lights too?. ???. Add a check here. revert this. Adding this here changes the ordinals for the formats, which would break serialization (unfortunately, it uses the enum ordinal...)\nNew formats always have to be added at the bottom, and any existing formats can only be renamed, not removed. ",
    "gouessej": "@ghost Matthias Henze and me fixed tons of bugs in the JOGL backend of JMonkeyEngine 2 but unfortunately, we didn't take any time to put our fixes into the trunk. Please contact me on the official JogAmp forum if you still need a fix. I advise you to switch to JMonkeyEngine 3 as it is actively maintained.\n. Why not using the native packager of JMonkeyEngine, PackR or JNDT to make a simple installer to run a few demos instead of using applets and webstart which have effectively become unusable?\n. Is it still reproducible?\n. I use OpenJDK 1.7 update 65. Installing Oracle JDK under GNU Linux just for JMonkeyEngine is a bit... annoying. OpenJDK packages are provided with lots of distros wheras Oracle JDK is intended to work as is only on some of them.\n. Just use BufferUtils.destroyDirectBuffer(Buffer):\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/util/BufferUtils.java#L1307\n. Is it still reproducible?\n. You should remove the useless generated header from the class ScreenshotProcessor.java.\n. JogAmp (BSD 2-Clause license) and Ardor3D (libpng/zlib license) support DDS, I'm not sure that there is still a problem with patents.\n. I'm talking about both reading and writing DDS files:\nhttps://github.com/sgothel/jogl/blob/master/src/jogl/classes/com/jogamp/opengl/util/texture/TextureIO.java#L790\n. I can ask some questions about that to other JogAmp contributors after Siggraph, I understand your concern, some of us did lots of checks before using OpenJDK in the project JiGong, usually we don't take the risk of infringing any patent.\n. It's in the line 215 on the trunk:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-networking/src/main/java/com/jme3/network/serializing/Serializer.java#L215\nThis line can be removed as the constructor of the class SerializationRegistration does nothing fancy, the object \"reg\" isn't used locally and the same object is created anew further when calling the method registerClassForId().\n. @shadowislord Thank you for bumping me about this change. Please wait for a few minutes, I have to digest the salad, the tartiflette and the milk chocolate warmed lava cake.\n. Personally, I would call animator.isAnimating() before calling animator.stop() and keep in mind that the requested frame rate can be different from the chosen frame rate.\n. It's difficult to imagine how the developers use the public APIs. animator.isAnimating() returns false when the animator hasn't been started, is paused or stopped. \nI understand your position but I just remind you that FPSAnimator doesn't have a consistent cross-platform behaviour. The vertical synchronization is more reliable. Yes, some support is better than nothing.\n. The animator can be stopped in JoglCanvas.display() for example. The vertical synchronisation is already handled here: https://github.com/saloisio/jmonkeyengine/blob/master/jme3-jogl/src/main/java/com/jme3/system/jogl/JoglAbstractDisplay.java#L118\n. Your change is ok for me. It's valuable and useful, I don't deny it. As I said, FPSAnimator doesn't have a consistent behaviour across platforms and your update doesn't do anything about that. You need to use a swap group (NV_swap_group) to use v-sync on several canvases / windows:\nhttps://www.opengl.org/registry/specs/NV/glx_swap_group.txt\nhttp://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/javax/media/opengl/GLContext.html#queryMaxSwapGroups(int[],%20int,%20int[],%20int)\nYou can look at this unit test based on JOGL and NEWT:\nhttp://jogamp.org/git/?p=jogl.git;a=blob;f=src/test/com/jogamp/opengl/test/junit/jogl/acore/TestNVSwapGroupNEWT.java;h=54f99433cc8bbaa77d0675bf3d3ed47c7f4e753e;hb=HEAD#l75\n. I agree with Sebastian, this thing looked like a magic number until you explained why you use it.\n. Sorry but please can you minimize the changes? You seem to use a smaller value for the maximum line size. Dropping the scanner is a good idea as I suggested several months ago: http://hub.jmonkeyengine.org/t/obj-importer-does-not-support-backslash-as-line-continuation/31056/2?u=gouessej\nWhy have you added a public constructor into the internal class \"Face\"? Why have you dropped the commented source code in ObjectGroup? Why do you throw an exception instead of adding a message into the logs? Is your \"warning\" method really necessary? Why have you stopped using the enhanced for loop in constructMesh()?\nTo sum up, please concentrate on the necessary changes (especially in splitByChar()) and drop the unnecessary changes so that we can really understand what you have tried to modify.\n. In my humble opinion, you should move your cosmetic changes (braces, variables renaming, ...) into a separate commit.\n. @hurzl Which version of OpenJDK do you use?\n. This bug is fixed on master: https://github.com/jMonkeyEngine/jmonkeyengine/commit/f31911f039743cc8121cf02899dbc37456e58a1d\n. Hi. I'm currently studying your changes...\n. It's ok for me.\n. Shouldn't it be done for AWT too?\n. JoglAbstractDisplay still uses an AWT GLCanvas, it is probably affected by the bug. The AWT input should be overridden to use the same fix.\n. You can override it locally here or pass an instance of a class extending AwtMouseInput:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-jogl/src/main/java/com/jme3/system/jogl/JoglAbstractDisplay.java#L162\n. You can use JoglDisplay instead of JoglNewtDisplay to test it. I think that it requires a deeper code redesign to move the code common to the current AWT input system and the JOGL AWT specific input system into some abstract classes to avoid code duplication. Both concrete implementations would have to override getSurfaceHeight and getSurfaceWidth, the plain AWT one would just call getHeight and getWidth. Do you see what I mean? It mustn't impact other backends using AWT but without JOGL.\n. Ok a decision must be made about that, you're right. I can accept your pull request but please can you reproduce the bug with AWT? I received a Mac Mini but it doesn't work exactly as I expected :s \n. I'll have to add a warning into the AWT code path or to drop it later. Thanks.\n. Please move the test into the synchronized block and tell us if it solves your problem.\n. Double-checked locking shouldn't be necessary here.\nI like empirephoenix's solution but we must ensure that this source code doesn't prevent the loading of the class if it fails somehow.\n. @pspeed42 It's a matter of taste but I like neither early returns nor break (I prefer picking a right loop condition) & continue. Using early returns can enhance the readability but abusing of returns in the whole body of a method drives it harder to understand (in my humble opinion). If you have only small methods, having several points of exit isn't a source of trouble but it's not the case if you have large methods.\nI find structured programming helpful to make the proof of a program, not only with languages with no RAII (Resource Acquisition Is Initialization).\n. It's not the real fix:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/scene/Mesh.java#L439\nYour geometry has no indices, it should be supported.\n. Hi. Please provide a SSCCE: http:sscce.org I'm going to look at the source code. By the way, please post the full stack trace.\n. The problem is probably here: https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-jogl/src/main/java/com/jme3/system/jogl/JoglOffscreenBuffer.java#L64 It just stupidly mimics the way another similar API is used. There is no current OpenGL context here. I can fix this bug when I'm at home in a few hours. You can comment those lines and rebuild JMonkeyEngine in the meantime.\n. Actually, those lines are useless as JOGL can create an offscreen buffer even with no full FBO support. I have to add those lines too but it doesn't concern your bug: if (settings.getRenderer().equals(AppSettings.JOGL_OPENGL_FORWARD_COMPATIBLE)) {\n            caps = new GLCapabilities(GLProfile.getMaxProgrammable(true));\n        } else {\n            caps = new GLCapabilities(GLProfile.getMaxFixedFunc(true));\n        }\nI'll fix it in about 11 hours, sorry for the delay.\n. Your modifications are wrong. At first, making the OpenGL context current in this method isn't a good idea, it's useless as the OpenGL call was only used to check whether FBOs are supported (rather call GLContext.hasFullFBOSupport() if you really need to know that). Secondly, you shouldn't have to force the renderer in this method, call settings.setRenderer(AppSettings.JOGL_OPENGL_BACKWARD_COMPATIBLE) elsewhere. Moreover, your source code uses a different profile to create the offscreen buffer and to create the renderer.\n. Ok thank you for your detailed explanations. Please be very accurate on what you are trying to do. You would have had a similar concern with the other available backends. Please rather use something like \"JOGLCustom\" instead of \"CUSTOM\" and it will work. I'll fix the null dereference too, it might require much time than I thought.\n. Yes but actually you can't use a custom renderer without creating your own JMonkeyEngine context and none of the implementation of JmeContext are designed to be extended, which explains why you obtained an UnsupportedOperationException. In my humble opinion, there are two bugs to fix. At first, please check whether creating an offscreen renderer with the JOGL backend works as is (which is probably not the case). Then, I'll do my best to fix your specific use case with a custom offscreen buffer but it will only work with the JOGL backend (which is ok for me as a JogAmp maintainer officially responsible for engine support).\n. You're welcome. This feature is already working in JogAmp's Ardor3D Continuation, I'll try to do something similar in JMonkeyEngine.\n. I will modify the classes extending JoglContext so that they use the GLContext of the drawable when it is possible and I will remove the useless tests.\n. Please let me know whether it works. I'm not sure that I should release the OpenGL context. The other offscreen canvases that I implemented do something similar to what you did when they use a pbuffer but the most reliable one simply uses a NEWT offscreen GLWindow and is a lot cleaner.\n. Hi. JogAmp's JOCL will support OpenCL 1.2 and 2.0 in its next release. Let me know if you need some help.\n. com.jogamp.common.nio.PointerBuffer?\n. http://jogamp.org/deployment/jogamp-next/javadoc/gluegen/javadoc/com/jogamp/common/nio/PointerBuffer.html\nI remind you that Java 1.9 prohibits the use of Unsafe outside of the JVM and we'll have to rework InternalBufferUtil so that it doesn't use it.\n. @shamanDevel Maybe we have missed something, I don't think that it's the expected behaviour, it should work. You should talk about your problem with our developer responsible for JOCL maintenance. This is a limitation that we can plan to remove later.\n. The change is ready, you'll be able to use OpenCL 2.0 with JogAmp's JOCL:\nhttps://jogamp.org/bugzilla/show_bug.cgi?id=1075\nPlease use our IRC channel to ask when we plan to make a new minor release of JOCL.\n. The version 2.4.0 has not been released yet. Maybe you can release your stuff with the version 2.3.2 and add support to OpenCL 2.0 through JOCL later with the version 2.4.0.\n. Please improve your change. Currently, if userData is null before calling setUserData(\"any_key\", null), the hashmap is created at the beginning whereas it is useless as you're going to drop it a few lines later. I'd rather write:\nif (data == null) {\n    if (userData != null) {\n         userData.remove(key);\n         if(userData.isEmpty()) {\n             userData = null;\n         }\n    }\n} else {\n     if (userData == null) {\n         userData = new HashMap<String, Savable>();\n     }\n     if (data instanceof Savable) {\n         userData.put(key, (Savable) data);\n     } else {\n          userData.put(key, new UserData(UserData.getObjectType(data), data));\n     }\n}\n. You're welcome. I didn't want your stuff to be rejected, I preferred suggesting a small change. Now it's ok for me of course.\n. Excellent job. Actually, GLWindow.confinePointer(boolean) shouldn't be called in this class.\n. Good job as usual, discussion about this change here:\nhttp://forum.jogamp.org/JOGL-2-support-for-Ardor3D-JMonkeyEngine-3-jzy3d-and-NiftyGUI-tp1706747p4036887.html\n. sun.nio.ch.DirectBuffer is inaccessible in Java 1.9 but sun.misc.Cleaner is still accessible according to the JEP 260. Therefore, ReflectionAllocator would go on working if you stopped using the former but not the latter.\n. You can use KeyEvent.VK_PRINTSCREEN but there is no such key under Mac OS X as far as I know.. @Nehon Does it mean that we are allowed to use Java 1.8 features in the rest of the source code too?. I advise you to read my explanation, it's about OpenGL but it's still valid for OpenCL:\nhttps://stackoverflow.com/questions/3496508/deallocating-direct-buffer-native-memory-in-java-for-jogl#26777380\nThe native counterpart is the native memory allocated for the direct byte buffer, isn't it?. It's similar to the situation in OpenGL with vertex buffer objects, they use some memory on the GPU too and you need a direct NIO buffer for the transfer from Java to C. If you call the garbage collector on objects that aren't finalized yet, it might be completely useless. You could run the finalization and then \"call\" the garbage collector (System.gc() doesn't always call the garbage collector, it's just an hint) but it's counter-intuitive because there is no pressure on the Java heap as the Java part of an OpenCL object is tiny.\nIf I were you, I would use phantom references and allow manual deallocation. When Java tells you that an object has become reclaimable by the garbage collector, you can run your own pre-mortem cleanup actions, for example deallocating the memory on the native heap (used by the direct NIO buffer) and telling OpenCL to release the resources used on the GPU. When there isn't enough pressure on the Java heap, manual deallocation might be the only solution.\nP.S : Using the finalization mechanism for objects whose memory resides outside of the normal garbage-collected heap is a bad idea to me.. Oops, you already use PhantomReference.... @shamanDevel Is there still anything wrong? As long as com.jogamp.opencl.CLBuffer.release() or any equivalent method is called to release the OpenCL resource, it should work. Is it what you mean by \"we are running out of host memory on the OpenCL side quickly\"? host memory on the OpenCL side = OpenCL resource?. Maybe calling Runtime.runFinalization() would be enough. Now I understand your code. You call Runtime.getRuntime().gc() so that the OpenCL object is seen as reclaimable by the garbage collector earlier.. Is there a reason why OpenCLObjectRef.clear() is never called? You should declare refQueue as a ReferenceQueue<OpenCLObjectRef> as only OpenCLObjectRef instances are enqueued and it would eliminate a useless cast.. Reference.clear() should be called when you're done with the referent.\nIn my humble opinion, bothering the garbage collector so often can have some side effects, it doesn't help Java to behave consistently, I had this kind of problem when I did this kind of thing in my own first person shooter about ten years ago. If Java can't know whether an object is used without using dirty tricks impacting the performance, it should be up to the developer to tell the manager when such an object has become useless. The objects whose memory is allocated on the Java heap are managed by the garbage collector, the objects whose memory is allocated on the native heap aren't managed by the same mechanism in Java, the native memory of the direct NIO buffers is released by some \"cleaners\", the \"objects\" whose memory is allocated neither on the Java heap nor on the native heap shouldn't rely on the garbage collection. I understand your problem, you can't create an OpenCL buffer when you run out of memory on the GPU but I disagree with your solution. OpenJFX/JavaFX has the same kind of concern and it doesn't call the garbage collector potentially several times per second.\nThe native object manager doesn't call the garbage collector whereas it has to solve a similar problem. I could create a huge VBO whose data reside only on the GPU... A native object can be enqueued and freed later.. Yes. My main concern was that some variable changes done just before calling System.gc() were lost or at least postponed which caused some bugs and driving those variables volatile didn't fix it. As long as there is a mechanism to indicate that an object has to be \"freed\" in a timely manner, it's ok for me, there is no need of using the garbage collection for this purpose. Your code is already smart and kind enough without System.gc() and Runtime.getRuntime().gc().. There is probably a problem in the way the cursor is managed. I lack of time to investigate this bug right now.. ",
    "empirephoenix": "Actually, the assetmanager is quite capble of being used in a background thread, however the uploading to the gpu is not currently.\n. I believe this problem has died out together with java 1.5 right?\n. Since both proposed ways, applets and webstart are kinda dead, this is dead as well.\nThe next closest thing, aka youtube videos are there.\n. Was just about to do that when the battery died on my laptop :)\nI will make a cleaner retry\n. Closed in current form as per forum consensus.\nhttp://hub.jmonkeyengine.org/t/screenshotappstate-refactoring/29182/10\n. Sounds like this should be closed, in favor of a later solution, that allows different deployment hints?\n. Any arguments against closing this? As it is over a year old, and conflicting anyway ?\n. Any news on this? What is missing? does it require a different testcase to further evaluate the usefullness? Should TangentGenerator speed even be important? It shouldnt be done in a deployed application anyway or?\n. So if there is no problem with it, merge?\n. This sounds pretty dead to me? close?\n. Yep it's dead, killing it.\n. How about a custom command line adding,\nthen one could just paste the path to the compressor or nvidadds tools in it (maybee preconfigured so only the installpath needs to be added)\nThis would be kinda like the above solution.\n. What is the state on this? Close or keep?\n. For gimp exist an dds module.\nOne way would be to ask for an installed gimp directly and use this for all formats not supported directly by the engine?\nThis would also support many other formats then, like tga, photoshop files ect.\n. @shadowislord gimp exists for all platforms (not everyone uses windows.) and opensource and supports also a ton of other usefull formats (tga anyone?) . \nHowever the user would need to add the ddsplugin himself (due to the same license problem).\nIf the nvidia tools run with wine we could go that way for linux at least as well.\n. @Rena4ka for runtime my secret tip, nasa worldwind is in java and has a dds texture converter in it. Of course their license applies to it, but it might suit you.\nThinking about it:\nIf I understand http://ti.arc.nasa.gov/opensource/nosa/ correctly they allow even to embedd this or? \nCould maybee anyone with better english knowledge deciper this and decide on if its ok.\nIf so I can cleanup a version of only the DDS converter pretty quickly :)\n. Normen pointed out, to make this a seperate plugin if necessary. \nalso license issues and no activity for several month.\n-> Closed\n. What about this? worth the time to fix it up and merge it? or close it?\n. Seems to be fixed in master by now. So any answer here? This is kinda long stalled as well, but look sfine for me, merge?\n. @shadowislord  @pspeed42 Any rejections? Else I will merge this(manually) next time I review the open pull requests.\n. Closing due to merge conflict, however I would like to see this again in a form that just adds methods, as that can be easily applies without braking anything. I personally find different traversal methods usefull.\n. He is right however that for the warnings are confusing and anoying, a simple fix would be to add a boolean, shouldSetScale to the constructor, so the subclasses can define if it should be called\n. I use a slightly modified jme3 for my own stuff, and build it sucessfully with gradle 2.2.\nSo if the current jme3 does not build via gradle 2.x, it should only be a minimal modification\n. Already noticed you guys, and saw that you have some interesting parts that could be used for jme :) \nMy next plan is to write a adapter for the imgui port. Is this only about the primitives or also about shaders ect?\nAn alternative solutions with less downsides would be to calculate the primitives under the stats Node and just substract them in the second mode (as the stats are not culled it should not be necessary to actually count them while rendering). This would not affect any other Viewport.\n. Any news on this one?\n. @Nehon meow? ^^\n. @Nehon Do you know what the actual state on this is? Is the fix still required? Does the problem still exists(or at all) ?\n. poke @Nehon \n. Don't worry i remind you in a year :P\n. m\u00f6pp @Nehon  :)  :8ball: \n. @Nehon  :) i make it my personal task to poke you till you give up :P\n. ok fair enough, lets revisit when the new shado system is there, it might not een have this problem.\n. Ok, build works with current master now,\nCan we merge this?\n. As you can see at  commit 99d69d1 I also looked at every single change and I could not find anything that should make any problems.\nAlso error handling works as expected, as my opensource amd driver does not support opengl4 yet\nUncaught exception thrown in Thread[LWJGL Renderer Thread,6,main]\nUnsupportedOperationException: No default technique on material 'SimpleGeom'\n is supported by the video hardware. The caps [TesselationShader] are required.\n. If you are under linux, my suggestions would be to use meld\ncheckout stock jme and your own stuff into seperate folders,\nmeld foldera folderb.\nIt then has a nice compare ui where you can quickly hop trough all formating changes.\nBTW there are a ton of classes in jme not according to the netbeans default formating, maybee we should do a format all in netbeans and commit that at some time?\n. 3 month idle, author seemed to moved on to android development.\n. Reading the comments and activity I would say kinda rejected as not neccessary.\n. So no more notifications. #pissed\n. This lookes fine for me, @normen what do you think about this?\n. Hi, thanks for your work,\ncan you shortly explain what this does and why it is necessary? \nAlso what the difference to the normal ray and sweep is. I have not used Ghostobjects before and don't know what they are usefull for :)\n. I think, that since they apparently did not give a great performance boost, and are not documented in the bullet library at all, this could create quite some issues. So if no one objects I'm closing this next time i review the pull requests.\n. Hm yeah i guess it is a problem.\nIf there are flat shaded objects the normals are of course parallel. The box itself however works fine with normals and generated tangents for me.\n(Well I combine several into a new mesh, but the flat sides still apply)\nQuestion would be how to properly deal with this , or if it is even possible?\n. Because there is no TextureKey at the point anymore, and I did not want to introduce larger changes to his code :)\n. From docu: \"Concave Triangle Meshes\nFor static world environment, a very efficient way to represent static triangle meshes is to use a\nbtBvhTriangleMeshShape. This collision shape builds an internal acceleration structure from a\nbtTriangleMesh or btStridingMeshInterface. Instead of building the tree at run-time, it is\nalso possible to serialize the binary tree to disc. See examples/ConcaveDemo how to save and load\nthis btOptimizedBvh tree acceleration structure. When you have several instances of the same\ntriangle mesh, but with different scaling, you can instance a btBvhTriangleMeshShape multiple\ntimes using the btScaledBvhTriangleMeshShape. The btBvhTriangleMeshShape can store\nmultiple mesh parts. It keeps a triangle index and part index in a 32bit structure, reserving 10 bits for\nthe part Id and the remaining 22 bits for triangle index. If you need more than 2 million triangles,\neither split the the triangle mesh into multiple sub meshes, or change the default in #define\nMAX_NUM_PARTS_IN_BITS in the file\nsrc\\BulletCollision\\BroadphaseCollision\\btQuantizedBvh.h\"\nI made a thread in their forum \nhttp://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=10547\n. Just saying, I'm still on this.\nWith the answer form the bullet forums, I think I might be able to fix this so it actually works reliable.\nWriting that way should work according to https://code.google.com/p/bullet/source/browse/trunk/Extras/Serialize/makesdna/makesdna.cpp#153\nand if my C++ knowledge is not to far off, it seems that is also actually used in \nhttps://code.google.com/p/bullet/source/browse/trunk/Extras/Serialize/BulletWorldImporter/btWorldImporter.cpp?r=2602\nand not rebuild from scratch.\n. Ok, after some more time with this, I say lets axe this for the time being. \nBetter to have one less feature but better stability.\nI guess just disabling the calls javaside but keeping the interface to the native side will allow others to later play around with this easier.\n. Yes I did, but I failed to get it to work. Actually the writing part seems to work fine with that approach.\nHowever the reading part, I did not manage to get btBulletWorldImporter. This might be due to a combination of my missing c++ knowledge combined with gradle based compiling. I did not manage to get that part to work. The importer lies in the extras subproject. It appears this extra part is not at all compiled at the moment, and also not included into the include path.\n. So, what to do with this one? \nIt is open quite some time, all stated facts still apply. \n. I would guess, that the float buffers itself are no the gain, but the other uniforms used by the models can be reused efficiently.\n. Hm, so if the camera moves, the gain is gone, right? Aka the test case might be flawed.\n. So, it actually does work then and help gain performance.\n. Couldn't the part setting the uniforms for the camera matrices be made frame aware? So it only sets the camera stuff once per frame? Woudl reduce all comparison, while still giving the upside?\n. Transformed to issue for the outstanding part:\nReduce uniform changes by comparing them before frame #351 \n. Adding the ability for a post loading listener to the assetmanager would allow this pretty nice. Also it would allow other but similar stuff. Eg. in games low detail mode, remove all parallax parameters.\nBascally the AssetEventListener only needs to be extended to pass the actual loaded object in the loaded method\n. Hi, looks good, one question tho, why did you comment out the bullet project in the gradle file?\n. I would say lets merge it, and see what happens, after all git head is not supposed to be stable. If there are still any issues, they can be found faster, and fixed.\n. Why would this break code written for jbullet? It sure would not allow code written with these two features to run on jbullet, but aside from that I see no problems.\n. Ah ok, I did miss that, it sounded to me as only 2 new methods were added, and their values put into the capsule. (The capsule itself can handle non used values, and defaults, so no probem there if done properly or?)\n. Hm, either I dont get this pull request, or 0 files are changed in it.\n. checkout your git to computer\nadd remote the official jme as upstream\nhttps://help.github.com/articles/adding-a-remote/\ngit pull upstream master\nthen just push to github\n.  git remote add upstream https://github <- add it as upstream not origin\nI use a own fork not on github, pull requests are optional, but not necessary for this.\n. I think @afonsolage miinterpreted your comment, as using the up vector of the current view direction. Which would change behaviour. \n. not relevant/class not intended for productive use\n. No, it does not but it is a rather strange usecase, especially since mounting/ net-drive solves it.\nIn fact the reason is that the underlying API does not support this on both windows and Linux. \nAt least on Linux those cases are usually handled via file manger that just mounts it via fuse or natively can connect to it. In the later case all started applications need to support the networking protocols as well.\n. Well we could just add a simple catch for that exact case and a message that running the applications from a share is not supported. I see this often under windows, for example the Microsoft installer system itself cannot do this.\n. Short questions, did you test if the rotation/position returned from native code for those affected bodys contains NAN (not a number) floats?\n. I had the same underlying problem as well, having negative recorded rendered stuff, so I am for a fix to this, no matter the underlying way it works (as the stats are for debug either small ram or memory overhead are ignorable, tho I would tend to increased cpu useage, as the memory is also used if the stats are not used at all).  However I am closing this one, as it cannot be merged anymore.\n. I also propose to merge this. It wont break anyones game who is not explicitly using this, and master is unstable anyway. But it allows to check the newer lwjgl functionalities, and reduce some bugs on linux platforms.\n. While you are technically right, does this offer any other improvement?\n. fixed on master. I would say 1km distances are sure within jme's scope without using any intelligent system. Eg many map based shooters simply have their map loaded, at that size a 1px jitter at the end of the map would be problamatic, as the camera would jitter.\n. Closed due to unclear state of useability, and no further involvement by the creator or someone else\n. Could you explain in more detail, how this fix works? Are you basically just adding valid opengl3 techniquies? or does it change something more in the underlying?\n. So I kinda tend to merge by now, as more than enough time was given for protest and it should not break anything, but allow mac , but it has merge conflicts :) \n. Closed due to being dead\n. Actually wouldn't a static initializer block be the correct sync less solution for this?\nIf I see correctly loadCleanerMethods only would need to be converted to be a static block\n(I'm no friend of having synchronized blocks anywhere not necessary, as they could make wrong code working)\n. try catch in static blocks is allowed, dump it all in a try catch and go for it :)\n. Yes i guess you are right, not having the fields volatile is a breach of contract anyway.\n. You should not use the scenegraph for logic, only for visuals, you are actually doing an antipattern here. (be it in unity or any other engine)\nJME just does not force you do tdo stuff some specific way, so you can do this, if you are sure this is the best way.\n. Rejecting this due to usage of awt classes.\nA JME wide logic for resizing images at load is something I would like to see however, as shipping all textures with half resolution would add a heavy +40% in download size. I think some global implementation based on the mippmaps might be interesting here.\n. Hm yes, I'm for this :) would greatly reduce the bloat i have.\n. Yep I kinda hate the callables as in around 100% of cases I do a return null.\n. If we are at this, could we not remove the harmony code? That stuff is not supported since 5 years,  also it is on 1.5 level if I see correctly?\n. Hm a check for that condition, and then a correct exception could be beneficial for this.\nThe current code makes \"JME does not load my model\" to \"JME doesnt load model correctly, why?\"\nA proper exception would hopefully help more in this case. \n(And could still be caught by your usercode if a special treatment is necessary in your use case)\n. Thats why I propose to check for the missing buffer early, so that it is not loaded partially at all if it is invalid.\n. Either you don#t understand or do not want understand :P\nThe model should never bee laoded in the first palce at all. You should only get a AssetLoaderException with invalid model, HWBoneIndexBuffer exists but not BoneIndexBuffer.\nThat exception would be in the assetloader.loadModel not at the update loop (as a faulty model should never make it pass the loadCall and to the scenegraph).\n. So any news on this? \nI do not see it hurting anything, as it is not compiled into the final script if not actually used,\nThe transparent scenario is one I have as well for my inventory preview images :)\nIf noone has a good reason against this, I will merge this next time I review the pulls\n. opted for simpler better maintainable basis materials, sooner or later every project is kinda required to write a own shader anyway.\n. Is this a fix of the perceived Result, or was the actual bullet code looked at to determine if only those two orders can appear?   After this commit, we kind of guarantee that the result is always correctly ordered, so we should make sure, that is actually is. (As this could be a cause for quite subtle bugs for many users)\n. Ok, rejected merging this, as no guarantee of the outcome is made\n-> allow raw list as it comes from bullet\n-> use Collections sort on the list, to ensure guaranteed order, no matter what bullet tries to do (we can make this default, as most users will probably want this anyway)\nI would feel very happy, if you would resubmit with that smaller change in behaviour.\n. Looks fine to me, merging\n. I think you two have a misunderstanding.\nI can on the ogre side explicitly share a material, but the current jme loader ignores it, and does not share it then. This is useful for stuff like a city with different weather based flower/tree ect textures. This basically only adds the missing feature to jme, it does not share all materials if possible, only if requested on orgre side.\n. There are way more reasons than just batching.\nFor example a scene of a house, with 3 different textures(atlas) that can be changed by simply switching the diffuse in the material.\nIf it is shared this is way easier done for complex scenes than with separate ones.\nFor example something like this https://www.assetstore.unity3d.com/en/#!/content/19469 would be such a case. eg. apocalypse game with before and after doomsday parts.\n. Ok, I just finished a review\n-> I did check if it will break any existing code, I do not think there is really any part, as it mostly adds new classes and only very carefully modifies existing ones\n-> I did not check for function\n-> I did check for ability to simply disable it/ not use it (you can simply not enable it, and it should not change anything)\n-> I did check for multiple application usecases\nOne question here: How does OpenCLObjectManager.getInstance().deleteAllObjects(); detect wich objects to delete? Eg if I have multiple applications within one jvm. Scenario would be something where jme is embedded into a swing ui or similar for some visualisation but with different lifecycle. Is it possible to kill a OpenCL context of the embedding java application?\nI will either wait for a second opinion on this, or if noone objects merge it in ~2weeks (feel free to bumb me then I tent to forget such things :) )\n. Nice,\nI have thought a bit about the Multiple Application case,\nwould it be easily detectable when multiple Applications with opencl support are started? \nMultiple applications are kinda rare scenario and combined with opencl in multiple probably even rarer.\nIA simple warning in the log + switching to GC only mode might work just fine (eg just a flag to ignore the cleanup on destroy). (I don#t want to use GC mode as default, as often the opencl elements can be quite sizeable (eg generated skybox or similar))\nFrom my perspective this seems quite easy to do, but I do not have the insight you have, is this a simple to implement solution?\n. Nice, that sounds good, as this is the last small part where I hesitate, apart from that anyone got enough time to complain by now, and I would merge it :)\n. Sounds fair :) If lwjgl does not support it and jogl kinda enforce one, and this is more a rare usecase anyway whatever :) \nSo can I go ahead with merging then?\n. Hi ah lest do this, lets see who notices first :)\n. Thanks for the work :)\n. @normen can you maybee take a look at this at some point? I'm not entirely sure if this is/was a bug or expected behaviour.\n. I still do not know what to do with this, if you are still interested, could you try to explain in a bit more detail what this change does? . Yes I think I understand now that the old code was doing. I still kinda wonder if there was a specific reason for this, or if this was just an oversight, but I cannot see any issue with merging this. So if noone does object within a few days, I would merge it.. Hm well, I would say noone objected. Great, ok so time is 1 week till merge if noone voices an objection.\nAs far as I see this should not api wise break anything, so it should be fine from my point of view.\n. Looks fine to me, any vetos to a merge? if not merging in ~1 week\n. Shouldn't this be fixed in the loader instead?\n. Hm after revisiting this, I kinda agree, could you add a warning that shows if it skips a null?\n. Seems logical to me, do you found this by chance, or due to an actual error?  \nI'm not 100% sure why it was that way originally.\n. I would like a second opinion on this, maybe @normen is still deep enough in this to remember it?\n. Wait.\nI thought\n3.0 is 3.0\n3.1 is 3.1\nand master is 3.2?\n. Agreed, both jbullet and native bullet just print a warning no need to trigger this manually.\nHowever I would propose instead to check in the setScale if the new scale is not 1,1,1. That way ay generic handling of collision shapes would not generate warning if they are not actually trying to change the scale.\n. thanks\n. lets wait a few days to see if someone wants to input something, else I will merge\n. Thanks for the work.\n. Nah AMD on linux is pretty good by now (actually far better integrated than nvidia) , (if you use the opensource driver that is)\n. @shadowislord changed to use whitespaces\n. Good to know,\nbut thats the good thing with this change,\nit's now super easy to write a specialized allocator for this case, and everyone can easily decide for himself what the requirements in the own game are.\nI personally will probably switch to the lwjgl/jogl native allocator interfaces for performance reasons :)\n. So any opinions on this? Code quality wise it seems ok. What about the feature useability? \nWhy is this required and cannot be done with the current possibilities (and hence allows the increase in code)\n. Yes, I kinda agree, having a hard opengl depenency is pretty bad. So far we are sprisingly well Vulcan compatible (as glsl will run there) this would reduce this.\n. @papaspace Hi, any news here? \n. So I guess this is fine now? any objections to a merge?. Thanks for the work :). does that also happen with oracle jvm? what happens with jme 3.1 or with git head version?\n. Quite likely. Oh, good find, if you could just make a pull request for this, I can merge it. \n. master is for 3.2, so no 3.1 release will see any changes, without further work. Ah great, any further objections to merging this?\n. Well ubuntu doing version necrophilia is their thing, and I couldn't care less (update or gtfo)\nHowever there is no hard reason to kill android support that I see, especially if only lwjgl3 requires this.\nLambdas are nice, but not everyone using the engine cares about them, and they only reduce a little bloat, but bring no stuff that cannot be done before, so it would result in additional required knowledge to maintain the engine without any real benefit.\n. I do not really see the problem of compiling with 1.7 except for lwjgl 3.\nGradle does support different levels per module.\n. We could do a spilt for android lwjgl. Ant taaks are first clas citizens, after importing they are like gradle tasks\n. Shouldn't travis mostly just execute the gradle script? Or does it do something completely different?\n. @shadowislord  any updated opinion ?\n. Thanks for the work. Any news here? can this be merged?\n. Looks fine for me, anyone opposed to this? Else i will merge next time I come around.\n. And merged, thanks for the contribution :)\n. Yes, thanks seems like you found an issue :)\nCould you try to create a pull request for it?\n. Looks fine to, merging this as other already had a good Chance to veto by now. It is expected (for both) to only use them as a starting Point. Better uses real physics, while the other uses simplified ray based physics and is suspect to quite a few issues. Something like a character Needs to be adjusted for your game anyway. So you could add the slope checks yourself in your Version of it.. Looks fine for me, any objections against a merge?\n. Since no objections came, I merged it, thanks for the contribution. wont break anything existing, Looks fine to me, merging it. okay :P. Looks fine to me. Oh your right, it goes to 3.1? Is this already in master?  Reverted. Seems quite correct for me, will merge this if noone objects the next few days. Seems quite correct for me, will merge this if noone objects the next few days. So anyone objects this? else I think im gonna merge it.. Thanks for the work. Thanks, I tested a few of those links and they seem to work. The older ones are quite obviously not correct anymore, so i skipped testing before after, as this can only improve the currently not working code.. So, any objections to merging this? I left it laying around already quite a while due to other stuff. I will merge it if no further objections come within a week.. Thanks for your work. What is the reason for all those changes? Please explain why you think it is necessary to change more than just adding the new class for lwjgl3.. Lets start this way:\nI'm totally fine with the lwjgl allocator,\nI have no issue with the logger renaming, (I would prefer a global code unifiyng at some point, but this will not happen I fear, as the usual discussions about formating already once happend, so I'm ok with this)\nI have a slight issue with the new logic, because it prevents multiple applications running at the same time with different allocators. I see no real benefit in having that field static, instead the same logic could be done in the constructor of the bufferutils.  (In general I'm not a big fan of static initializers, and static fields) \nPlease note that this is my personal opinion, I'm not entirely sure how the rest of the jme community thinks about using statics here.. Oh you are right, my bad.\nI would suggest:\n1. rename the logger back (i wouldn't care but other obviously do)\n2. Couldn't the logic to determine the correct allocator being done in the BufferUtils, instead of using a different class for this? After all it is less than a few dozen lines, and could replace the current logics way.\n3. You do change behavior , many users would currently use the Reflection allocator, however if that one could not be loaded, for example due to problems with JavaSecurity stuff, jdk9 beta version ect. it would switch to the primitive one. This means that for most users (running jdk8 in a normal environment) the allocator does change. Just doing your if property not set the old way (try the reflection one before) would solve this.. Great, thanks one last question:\nYou set the property in the lwjgl context, what happens if it is already set by something else before? Eg a custom made allocator for a special case, would this overwrite the users property? Maybee a check should be added, to only set it, if none is set.. OK, looks fine for me, I will now give a little protest time (~4-7days) for others, if noone objects i will merge it.. The benefits are the one thing I'm certain about. Finally a way to efficiently manage memory manually in jme. No more directBuffer errors due to incompetent GC algorithms :)  (Also it is not direct memory as far as I understand, so does not abide to it's limits, is swappable, ect.). Merged it, thanks for the work :). Does anyone of you uses FBX, and can validate that it does not break existing stuff badly? Since I'm not using FBX, I'm a bit carefull with directly merging it.. You can just clone https://github.com/Heatherglade/jmonkeyengine (see the line with the link above the all checks passed). So nay news on testing this? . Ok, closed as per request, :+1: for next request :). Looks generally fine to me, I would however avoid the Tempvars useage and just allocate a new Vector3f each round. \nI assume that new jme users would seek this kind of example.\n-> They might see TempVars remember some have true stuff about GC and jump to very wrong conclusions\n-> Escape analysis in this example will probably lead to elimination of the allocation anyway.\nHowever this is my personal opinion, others might think different.. Wouldn't a correct approach base the epsilon on the absolute value range of the input? after all a fixed epsilon will not work for large values and be to large for tiny ones? Of course this would create a little cost in performance, but might lead to way more accurate calculations. So any ideas on this? As far as I can see, this one does probably not do any harm, but is also not really required, and might be thrown out with the whole method. However I remembered one use case for this: When I was tracking down a issue with native bullet, I spammed asserts all over the code, validating the the rotations are not fucked up. (there were nan's due to the bug). Using normalizeLocal instead would not have worked in that case.. killed due to being dead. Check your git settings, if you default install on windows for example it is set to replace stuff and modify it. Also check your favourite IDE, at east in eclipse you can set which line ending to use.. I'm against this as well, sorry. If you insist on using j3o I would fake the data were necessary.\nEg just store a dummy spatial with all your extra data somewhere, and do a import dialog if a j3o is loaded that is missing this. (Aka found directional light, pleace place in scene for editing). In my opinion this is mergable, however I would really like to see such  an appstate added later on, as this would enable almost all jme games to support VR. Many of the more complex games do not use necessarly a SimpleApplication compatible livecycle, and would have a lot of work to switch to this right now.. Btw. since I did not immediately spot it, is there a helloVrTest or similar example included in this? . It might be any idea to put it into the examples project in jme3, as that has quite some dependencies anyway to other parts. Hi, there still seems to be a minor issue with the build, did you do a recent merge with master? Apparently some method in the Shadow stuff was changed. \n. In .git/config add \n[remote \"upstream\"]\n    url = https://github.com/jMonkeyEngine/jmonkeyengine.git\n    fetch = +refs/heads/:refs/remotes/upstream/\nthen you can\n\"git pull upstream master\" to get all new changes in upstream (assuming you are already in master of your copy)\nGithub itself cannot do such things, as it would have to deal with the merges then, and potentially conflicts. . Thanks :). usually that issue happens with wrong gradle version, but gradlew should ensure correct one. Test if changing the properties in gradle folder were version is does help. Makes sense for me. Fine from my point,thanks, I might suggest to also take a look at other controls in jme, as this is quite likely to be inconsistent in many more places.. Thanks. Thanks. Thanks. toString should never ever throw any exception, and since that method seems to be unused anywhere else than in the toString i merged it, thanks for the work. As it is a rather large change, does it change anything outside of the VR specific classes? If not it can be directly merged, as it will not influence anything else.. Well in that case, thanks :). No objection after >one week, merged it. Wont try with ressources break older java api compability? this would be kinda fatal to android and other more exotic platforms. hm right, it only needs to implement that interface, not use the construct anywhere, my bad. Well not recreating the buffer makes sense in my opinion, if alone performance wise. From my point of view, not recreating buffers is a improvement, so if noone objects in the next few days, I will merge this. Yes they did :). Thanks, I merged it without further testing, after all, it can't be any worse than the state before :). It's no daemon, its the GC, it behaves similarly to the normal collections of the default BufferUtil. You know how it goes :) WE are happy to hear from your PR :) zzuegg. This makes sense to me, and would explain some confusion I had years back with this methods :) Fine from my point of view.. Isn't that pi? 2pi is one rotation if im not wrong, so -pi == +pi or? The rest is artifacts from the conversions with floats. dead. Yes, :) What is the reason, that the memoryutils cannot be used? Do it cause errors when not having a bytebuffer but a flaotbuffer for example?. Oh i see, it did return the native pointer to the current position O.o yeah a wonder that did not crash instantly XD . Not noticed before, looks fine. Yes this looks right +1:  Thanks. @Nehon We can just doa a squash and merge in github directly with the drobdown next to the merge pull request. If everything else is fine, we can directly solve this. Ok for you?. I remember one dds converter that i had this issue with as well. I see no problem in reducing the check to a warning. \nThanks for the work.. As I see it, this only changes Vr* classes and nothing else of the current core. Since you are maintaining this, I will merge it.. I think there was a appstate, if you want to be able to write an application that con do both.. True, while usually multiple contexts are not that supported, there is no reason to block this, especially for the nullcontext. Thanks for the work.. Hm, can you make a patch and do a pullrequest? I would be happy to merge this then.. Thanks for the work. closed due to inactivity and required open changes. Anyone feel free to reopen after fixing is.. Well fine for me, so if there are no objections the now non hypothetical code I will merge it in a few days. Well if changed within the core, I would find this still usefull, as it would reduce code complecity ad cognitive load while working on those classes\n. was not deemed required by the community, if the core would be cleaned up as well it is probably a valid solution. O.o thanks, apparently noone thought on removing the lodcontrol before :). Since i stopped using the first one, I also stopped doing work for it. It should however still work. The part leading me to abaddon it is however still present (also with the other solution) \n-> JavaFx makes way to heavy use of reflection, making it feel somewwhat sluggish\n-> There appears to be no real development effort anymore to actually improve it from Oracle side, there are currently some very annoying bugs open since Java7, and not even assigned to someone in the bugtracker.\n-> The runtime support for other than oracle jvm is decaying, for example it is next to impossible to cleanly create a project that runs on both openjdk and oracle jdk with the same sources.\ntl;dr This requires serious effort for questionable gain, and the effort is currently better spend somewhere else. So if you do not take a shot yourself, it will likely never happen.. I have sadly no idea how to validate this :(\nCan you post a simple sample model that shows the differences?. Please close and open this, travis had some issues /home/travis/build/jMonkeyEngine/jmonkeyengine/jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java:240: error: cannot find symbol\n                col = blendFactor * pixelColor[0];\nDoes this compile locally as it is in the git?. I'm still unsure about this (and the other blender related ones) on one side, I have no real way to confirm it is working, on the other hand, at least reading the code and the comment it makes sense to me. @Nehon what would your opinion be? just merge and see if complains happen?. Looks fine for me, I'm not sure if there will ever be a patch release, but you could build one yourself easily.. Cool that you are also at fixing this after finding it :)\nOne question, the return case for updateGeometrys, shouldn't that kinda be a IllegalStateException? Same for constructor, if I use values that can only be wrong, can a IllegalArgument be used? Or is there a case where just returning nothing is better?. If I understood the issue correctly, the cylinder is generated incorrectly? It was not a bug in the Ray stuff?\nSo if a cylinder with invalid trinagles, and causes issues at other parts of the engine, I would favor exceptions.. @Nehon does this work for you now?. Yes, please add a capture. Changing the texture coordinates is not a really big issue in my opinion, as cylinders are usual not sued ingame anyway, but more for debugging or simplistic scenes. I would say the left on is clearly better\n. Alright :) Thanks for the work @Saucistophe . Can you please reissue the pull request?  travis had some trouble yesterday, hopefully it will work today.. Yep you are right, I will merge this once build is finished. Build delays and API issues affecting travis-ci.com, i would say we give it some time, and then retry the build. Yes, that might be the fastest and cleanest way, please do so.. Thanks. Thanks for the work. Can you please add forum link?. Thanks for the work. Yes, this seems useful, on one of my machines pretty much everything works with opengl, except jme3 due to useing a GL30 function that is not supported in the selected profile. . Merged, thanks for the work. looks fine for me, any objections?. Is this key the same on all platforms? If so, I see no reason why we should not support it.. I can check linux, can you check what windows does?. XD, so does ubuntu does this then?. Thanks. Merged, thanks for the work. all fine, just a lot to do, thanks for the work. Can you show the current code part that does this? I think a hybrid approach would be better btw. Aka do current behaviour, except it can be disabled. So newer coders get  gc at the cost of performance, and can later disable that and do it manually. O.o Runtime.getRuntime().gc(); of I see what you mean, no go. I thought it uses some only opencl related cleanup. Invoking the main gc stutters for up to a second. Can you create a Pull request that removes that part?. Hm whats up with the build servers again? Also do I see correctly that we finally can do windows specific builds trough appveyor? Nice :). } catch (InstantiationException e) {\n                  } catch (IllegalAccessException e) {                        } catch (IllegalAccessException e) {\n                  }                       }\nWhat about this? as this would hide problems with initializers. I totally understand the need to do the continue for the not found case, but if a class could be loaded, why ignore errors on init?\nElse than this I think this change makes sense.. Well fi that was the prior behaviour, I see no reason against this.. as far I understand this, before they had shared lists between them? makes sense to create new ones then. . What is the state of this one btw? is this still alive?. Looks fine to me, \nsince you are already at it, couldnt those two be combined?\n        ImplThreadLocal local = classToLoaderMap.get(loaderType);\n\nclassToLoaderMap.remove(loaderType);\nif I remember right remove will return a removed item already?. Thanks for your work :). Answerd, I will leave the issue open for some time, to allow others to answer before closing it.. While maybee not optimal solution, certainly better than leaving this another 10 years open. I'm not reviewing this as I have no idea, but this will help whoever does the review:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/775/files?w=1\n?w=1 enables whitespace ignoring in githubs editor. tja\n[edit]\nActually \"Aha\" fits way better\nhttps://i.pinimg.com/736x/9b/5a/aa/9b5aaa667f76ac122550d099ea74c0f8.jpg. Well I think it is no problem, as long as the other examples can be run no matter what the vr stuff does. if (JavaVersion.current().isJava8Compatible()) {\n    include 'jme3-lwjgl3'\n    include 'jme3-vr'\n}\nyou on java7? or travis?. Hm maybe a new project for vr-examples / java8 examples is the better approach?. may i ask why do we support java7 currently? android stuff?. What is the reason that it was deprecated? Eg. what does the commit say?. Looks fine to me (apart from the already discussed stuff), looks like the cursor api really improved, since I saw it last time in lwjgl2. Great, this would also allow me to get rid of my currently ridiculous blenderloader hack.\nHowever there seem to be some issue with the build server, are maybee some clases / a commit missing?. One part requiring a bit thought is the handling of extension case, eg mac and linux/android differenciate between .png and .Png. Yes: https://i.imgur.com/vpn6tPI.png\nYes, so we need a full all possibilities brute force, since the blender loader is not meant to be used for production, but for initial importing into the engine, performance concerns are luckily not relevant that much.. Linux does not care for file endings at all, it looks at the magic bytes in the file at the header.\nHowever in jme the system really only takes a look at the extensions, so some kind of ugly workaround is inevitable here I fear. Brute forcing the extension might be our best way.. True, for the loader determination, there should be no problems, only for actually locating the file.. Ah I get it, I thought this was also an issue for loading external textures, if it is only for the embedded ones, case for the extension is indeed not important.\nI would say that solves my last questions, from my point this can be merged, any objections? . How about adding an init method to the MouseInput, and implement it only in lwjgl implement the lwjgl part as shown, leave the rest empty? That way it will not be much more work, but be a much cleaner solution and does not rely on reflection. I would not worry about that, after all anyone who would subclass this classes, should be able to add a empty init method as well, or copy paste your implementation. Well the os is useing 32bit for framebuffers in the window manager, maybe it is an invalid call to create a window with 16bit (and lwjgl will do just that)?. thanks. Seems like an error with the buildserver (all buildlogs are null/empty) , I suggest to just commit a extra space or similar somewhere, so that it is triggered again.. Hm having the assetmanager returing a object with your loaded result + additional informations and errors could greatly help for all kind of tools. Eg. informations on missing bones for animations, textures not found, missing tangentialstuff and other not necessarly critical errors.. It cant I fear. It would require every method of assetmanger to return a wrapper object.\nWhat might be possible:\nadd a setAdditionalInformationCallback into assetmanager\nevery loader could now emit filename, information evt into this callback.\nTools editors or interested people could not set that callback before loading something to give detailed information.\nA default value if not used would be a logger.info handler, that way each application has at least limited additional knowledge and each loader would be able to get rid of direct logger calls. \n@Nehon what would be your opinion on something like this? (out of scope for this Pr of course, more a seperate thing)\n. noticing upon load, that a users install is corrupt for example (proxys destroying zips silently did not only affect the sdk downloads sadly). Hm I see tow problems with this.\nin an editor I want an model with a missing texture to load, eg the loader should not throw a critical exception\nIn my deployed game, this should be an exception.\nWithout some indirection, it is not possible to fulfill both.\nWithout the first, importing assets into jme becomes even worse, without the second, I would have a game running with missing textures.\nCurrently every loader seems to do the what is an critical error and what not behaviour differently.. Ok lets put a few examples what I mean:\nDDSLoader@206\nWhy is a missing flag in the texture only worth a logger statement? If we do that right, it should be an exception right? What way would be there for an editor to warn about this properly? except from parsing the whole logger output?\nSceneloader@107\nThere are some additional warnings emited to the console, how is decided that they are non critical? What way would be there for an editor to warn about this properly? except from parsing the whole logger output?\nGltfLoader@103\nLoading a GLTF version not supported by jme is only worth a warning? not an exception?\nalso:\nlogger.log(Level.WARNING, \"Couldn't find any matching material definition for material \" + materialIndex);\nI would say not being able to load a material is not an ignore and continue case.\nNow I can hear you saying, but for production use only the j3o ect file are relevant (and I kna agree)\nbut:\n[...}\nj3m loader: logger.log(Level.WARNING, \"Unknown texture option \\\"{0}\\\" encountered for \\\"{1}\\\" in material \\\"{2}\\\"\", new Object[]{value, key, material.getKey().getName()});\n[...]\nlogger.log(Level.WARNING, \"Cannot locate {0} for material {1}\", new Object[]{textureKey, key});\n[...]\nOr even the binaryimporter\nlogger.logp(Level.SEVERE, this.getClass().toString(), \"readObject(int id)\", \"NULL class object: \" + alias);\nI would be totally fine, if we would say either it loads 100% or it is an exception, especially for the case of production importers, eg j3o, j3m and other jme native formats.\n(And any tool can then handle those however it seems fitting)\nBut currently there are dozens of cases, where we simply do no throw an exception if (depending on view) critical errors occur. \nSo even if we say no editor only features, we suppress errors that might be critical for game use.. To be honest, I did understand that as that I have to write my own assetmanager for my tools as well, as the current one is not usable(and not meant to be) for non production game cases. I just don't have a issue with doing this as much.. So lets agree on this whole topic needing quite a bit further dicussion before changing, and that it should probably be done in the forum? https://hub.jmonkeyengine.org/t/assetmanager-discussion/40130. Is see this correctly, that only a new integration way is added, but nothing is removed? (So can be merged without destroying anything?)\nBtw is it possible to render swing ui components above the jme window with this integration? (the other has some issues there). Since I see no removals and only additions, so I guess this is ok from my point of view.. Well since there were no prior objections, and apparently noone else feels like knowing enough about the integration, I just merged it.. Looks fine, wont break existing code -> merged & thanks. Neither Java9 nor Java10 will be LTS releases. Java 11 is the next LTS release.. Yes that surely looks like a bug to me, good find, can you make a pull request for it? . Seems like a useful change, feel free to do so, no objections from me :). Wild guess, what about line changes? some git clients are per installer setup to change them, you probably want a leave as is setup?. Ok, thanks, looks fine for me, merged. > I'm not sure why the native Bullet version was changed between JME 3.1 and JME 3.2 but it might be a good idea to revert it.\nI would suggest the opposite, see if a even newer version fixes the issue as well, if we go that path. 3 is a non issue, as moving a static rb is not supported by bullet anyway and will make it explode when using non trivial math shapes. (eg box often works, but a meshshape will not at all). I might suggest using Vmware Player 14 + something like ubuntu and install the vmware tools on the guest, it uses a virtual gpu, that is enough to run jme somewhat, might be an easier way than to compile lwjgl for arm :)\nExtended renderer info (GLX_MESA_query_renderer):\n    Vendor: VMware, Inc. (0x15ad)\n    Device: SVGA3D; build: RELEASE;  LLVM; (0x405)\n    Version: 18.3.4. Sounds correct, is there a good reason not also to delete the KinematicRagdollControl? It seems like it was deprecated quite a while by now. Can existing code using it be ported with acceptable work to the non deprecated version?\n. Looks fine for me, definitely better readable :). Nothing of value to add, just wanting to say Thank You for taking a deep look at all of the native parts  :1st_place_medal: . Is this still alive? Or should it be closed?. I personally think that this is the case for the assert keyword, as it only needs to be enabled in development, and has no performance cost at deployed runtime. I run my projects with enabled asserts for quite some months, not sure if my machine was ever affected however. Lwjgl is build by lwjgl itself, we only consume the release jars, while we compile bullet ourselves (as we maintain the wrapper). So it should not be a version issue between operating systems. \nI just tested with lwjgl3, my application surprisingly seem to correctly work. On Arch with Xfce, german keyboard. Yes, I think so, thanks for the work. You need to supply more information if you want any actual help. Hardware, Software, does other opengl based java software work?. The normal CharacterControl is very basic, and only works good for classical levels, eg Quake or similar. There is a BetterCharacterControl, that actually uses a physical object. However due to this it also behaves differently in some cases, to check if it better fits your requirements.. I had the BadRenderer issue a lot of times in smaller Tests, but never in my full Application, this would explain this. While this is extremly ugly, if it makes stuff work 99% of the time it is still a great improvement. So from my point of view this might be ok. Might another approch be, to drain the XWindow error queue on JME-LWJGL3 init?. Thanks for investigating this. Is private boolean contactResponseState = true; actually required for the bullet version? couldn't this just be read from the native classes instead? This looks like a duplicated state to me.. Makes sense and looks fine for me :) Lets give it a little protest time before merging :). Looks fine for me, any  vetoes against merging this?. ..Wait why does this work for me? I use java11 and the native bullet and have not the same issue? . Um, I do, so either eclipse does something clever in the run config, I don't know about, or there is some way this can be setup. \nhttps://pastebin.com/bUZjdHYA\n. Can you explain what this does? I have no idea what it is supposed to solve/fix/improve :). Hi, its a windows bug sadly, windows does not properly reset when going out of opengl apps in some states (I have this also with some older other games that do not use jme). Btw usually if you wait 1-5mins the night light will reenable and slowly dim in again.. I do not see it as a mesh problem, as I might want to use the same Mesh in multiple contexts. Eg a single tree rendered in a store has nothing to do with a terrainrenderer using 500as well. Having all Buffers for the tree duplicate to work around this is a bit strange. Afaik there is currently no good way to load a normal model via ssetmanager and use it for instancing and for normal rendering. (This does not mean that I have taken any look at the current proposal here). That is definitely faster than instancing, if applicable . Why? that would bloat the class, and the calculations need no real time at all. It is not that you are creating 1 million lights per frame. And if you want, you can simply write yourself a factory class using the second constructor, that has precalculated values in the factory.\n. Could the logger please be put into a static final field? Logger.getLogger(SkeletonControl.class.getName()) is relativly expensive. ",
    "erlend-sh": "This issue was moved to jMonkeyEngine/sdk#15\n. This issue was moved to jMonkeyEngine/sdk#14\n. @shadowislord and @Nehon are we still planning to do something with Shader Injectors or do the new Shader Nodes pretty much cover it?\n. This issue was moved to jMonkeyEngine/sdk#13\n. I like @gouessej's idea of making a standalone TestChooser demo application though, as an alternative to the bundled app.\n. This issue was moved to jMonkeyEngine/sdk#12\n. Is this issue confirmed solved @Nehon @maany?\n. This issue was moved to jMonkeyEngine/sdk#11\n. Agreed. Marking as closed.\n. This issue was moved to jMonkeyEngine/sdk#10\n. This issue was moved to jMonkeyEngine/sdk#9\n. @hunterboerner still having problems? I've found your user on our forum. If you'd like I can manually approve you with a temporary password.\n. This issue was moved to jMonkeyEngine/sdk#8\n. Heh, \"fixed\", thanks.\n. Make a quick pull request for it and we'll merge it :) You can even do it via the GitHub web interface :stuck_out_tongue: \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-bullet/src/common/java/com/jme3/bullet/control/RigidBodyControl.java\nIt's yours for the taking!\n. > Determine if 32-bit installers are required\nI'd say just don't include them for the alpha/beta releases, and then we can gauge how many people are missing them.\n. Yeah, I just checked our download statistics and it seems pretty foolhardy to exclude 32 bit.\n\n(p.s. that \"all time\" is just since our WP was reinstalled)\n. (bleh, forgot that GitHub Issues doesn't accept multiple assignees)\nSince @jayfella seems completely occupied for the time being, I think we rely on @kwando to do some detective work on this one :mag: \n. Yep, for quite some time. Jay made a Discourse-DokuWiki login integration which was working fine for a while, but it has now stopped working. My guess is an API change in Discourse is the culprit.\nPerhaps the time is ripe to move our docs to Jekyll...\n. Our own API server was down. Turned it back on and wiki logins are working again.\nNice detective work @kwando! :+1: \n. Just upload it on whichever service you prefer, e.g. Google Drive, Dropbox, a personal server etc.\n. This issue was moved to jMonkeyEngine/sdk#7\n. This issue was moved to jMonkeyEngine/sdk#6\n. This issue was moved to jMonkeyEngine/sdk#5\n. This issue was moved to jMonkeyEngine/sdk#4\n. This issue was moved to jMonkeyEngine/sdk#3\n. This issue was moved to jMonkeyEngine/sdk#2\n. This issue was moved to jMonkeyEngine/sdk#1\n. ",
    "Nehon": "Shader injection never existed I don't know what you are talking about ;)\nShader nodes covers it yes.\n. fixed with commit https://github.com/MeFisto94/jmonkeyengine/commit/7d07cedc4ceaec2b3761c9670d5d3fde11701356\n. Fixed this commit https://github.com/MeFisto94/jmonkeyengine/commit/1c12b68bb0623b66b68531662ec81f51f12dc47e\n. fixed in that commit https://github.com/jMonkeyEngine/jmonkeyengine/commit/dbae186426b154fec9a752baf2c92651c0c1814e\n. Yep go ahead. It's not an intrusive change and it can be useful.\n. That's not really an issue...idk how it's been done, but it has probably been generated on the first push. As long as it's working, I don't see the urge to change it...\n. Fixed with commit https://github.com/MeFisto94/jmonkeyengine/commit/e051936f9be015b338992b2b10a51f15d8cf6d36\n. the issue was fixed by commit \nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/d8bbb4e9f9c790217419a92683c5a2476101e668\nThanks for your help\n. Hey, I'm reviewing this PR (better late than never).\nIt works, but I actually don't get any speed improvement on sponza.\nOn my computer I got 270 seconds to generate tangents on sponza, parallel or not.\nMaybe my test case is flawed, do you have a test case?\nI used a ScheduledThreadPoolExecutor with a pool of 10 threads.\nThanks\n. there is no dead line. IMO this is an improvement, even if TBN is usually used at design time, it an't hurt to have it go faster.\nI tried to make a test case back then but couldn't notice any improvement. The thing is, now That I think of it, is that I used the stock sponza.j3o we have, and that's one big geometry. I guess that the parallisation is really relevant if there are more than one geom.\n. Well...still want a test case :p\n. 4 times faster with 4 cores. \ngonna merge\n. @shadowislord could you review this PR?\n. thanks\n. I'd rather have a more generic version of the method, not one for each component size.\nI'd use vector4fs as paramters and fill them accordingly by checking the number of component on the buffer.\nThis way we'd have one generic method.\n. Last time I checked there were patent restrictions preventing direct decode/encode of DDS files. That's the reason why it's not implemented in the SDK.\nThe texture picker use a workaround that renders the texture to a quad and use the result as a picture displayed in the GUI. No patent issue here because the DDS is decoded by the GPU.\nFor encoding I guess there is no workaround.\nI'm not a patent expert and maybe the situation have changed, but I want to be sure there is not patent infringement before merging something to the SDK. \nOtherwise this seems pretty neat.\n. Are you sure they are not infringing the patent? \nRegarding patents, I tend to consider the value of the argument \"That's probably ok because this guy did it\" close to 0.\n. Stand by on this PR, the lib used to write ( https://github.com/Dahie/DDS-Utils) seems to disregard compression algorithm patent, we can't integrate this. \n. I'm sorry but we won't integrate this PR for the following reasons : \n- The feature it implements would be more suited as a plugin, and should not be in core JME.\n- The way it's implemented seems kind of expensive ( a lot of branching and texture fetches in the frag shader)\n- There are already alternative ways to have similar results using the shaderblow shader library.\n  http://hub.jmonkeyengine.org/wiki/doku.php/sdk:plugin:shaderblow\n  If you have questions on the library please ask on the forum.\nThanks.\n. @normen could you review this PR?\n. Cool, thanks for thz fix\nNo need to do that for 3.0\n. Your use case is valid and we heard you.\nThere have been some changes in the core regarding this.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/05c6986492166c549d928cc2b23dc4c5de289b54\nA different approach has been used though. Could you test if it makes a difference in your scene.\n. Thanks.\nit looks good, I'll look into it this WE and keep you updated\n. Ok I looked into it, and all of our shadow tests runs fine. That's already nice :p\nCould be nice to also have the exact test case where it's faster than before.\nFrom my understanding it's will now be a lot faster to cull chunks scene if it's properly organized in sub graphs, am I right?\nAbout the code itself : IMO all methods and attributes you marked as deprecated can be safely removed. they are very internal stuffs, and even the public methods should not be used by users, unless they did their own renderer. But the deprecation won't really help out these people much neither, so I'm all for making some clean up.\nOne thing I dislike though it the ShadowUtil.rootScene = rq.getRootScene(). Not sure why you did that. I suspect it was to keep the ShadowUtil API unchanged.\nThis is bad because you're making a static Util class stateful. And even if it's handled properly here, it might not in user code, because they don't know how things work under the hood.\nIMO the rootScene should be passed as a parameter in ShadowUtil.updateShadowCamera() and not be a static class attribute..\nAlso if the occluders parameter is not needed anymore in this method, just remove it.\nSo short story : don't be afraid to change the ShadowUtil api. 3.1 will have a lot of breaking changes, this one is very internal and you go unnoticed.\nNice work.\nI'd be grateful you update the PR taking my remarks into consideration.\n. fixed \nsee https://github.com/jMonkeyEngine/jmonkeyengine/commit/dca050b96b4e93b79dcc261f52c3436c11152a35\n. @empirephoenix the problem with your approach is that you have to count the number of primitives  of the stat view on each frame as it may have changed (for example is fps goes from 99 to 100 there are 2 more vertices)\nAs for the original PR, I'm gonna test what it implies for other viewports.\n. Nope, sorry. I'll check it out\n. Just been bumped up at the top of the stack ;)\n. ok...so the major downside here is that for example this enturely skips stats from the shadow post pass (that is done in the postFrame). We may need to find a better solution to actually not account for the stat view geometries in the stat.\nMaybe a more in depth rework of the stat gathering.\n. maybe the stat view should be rendered in the render mthod of the statAppstate, without being added to the gui node.\n. mhhh....\nWait I don't get the case where it fails.\nIf the light cone is not in the camera frustum, shadows shouldn't be rendered, because light shouldn't reach the frustum.\nElse we have a problem in our light attenuation method.\n. Well that's the issue then.\n. We're passing the LightPos as a vec3, we could pass a vec4 and pack the inverse radius in the w component as we do for the light pass.\n. Do you have a test case at hand of the issue by any chance?\n. Mhhh ok.\nWhen I test it they don't disapear, no matter how I move the cam.\nhere is what I have \nhttp://i.imgur.com/eWIMUxC.png\nWhat is your hardware?\n. wait got it.\nDon't mind previous message\n. tbh this slipped my mind.\ngonna look into it\n. I have no memory you know...\nI'll look into it.\n. Well it's a corner case, really and  the fix will need a lot of changes...\nSince the shadow system is under heavy rework ... idk if that's worth the trouble...\n. Nice!\ngonna look into it\nThanks\n. Is that me or Tesselation control shader and Tesselation Evaluation shader are inverted?\nfrom this example https://developer.nvidia.com/content/opengl-sdk-simple-tessellation-shader\nTCS looks like that https://developer.nvidia.com/sites/default/files/akamai/gamedev/images/code_snippet_2.jpg\nand yours like that\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5b58bda23ffa1861952f302d7205d2fb67117175/jme3-testdata/src/main/resources/Materials/Tess/SimpleTess.tsctrl\nTES looks like \nhttps://developer.nvidia.com/sites/default/files/akamai/gamedev/images/code_snippet_3.jpg\nAnd yours\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/5b58bda23ffa1861952f302d7205d2fb67117175/jme3-testdata/src/main/resources/Materials/Tess/SimpleTess.tseval\nIt looks like it's the other way around.\n. Thanks will try that tonight ;)\n. Alright works fine.\n. Thanks David\n. Was actually an Issue due to previous issur with TestCanvas\n. Actually, That's because the TestChooser doesn't launch the main()...which is dumb\n. fixed https://github.com/jMonkeyEngine/jmonkeyengine/commit/39515c52c75ff304b97705530072181aaf123dbb\n. Same issue for NiftyToMesh\n. SAme for TestPostFiltersCompositing\n. Same issue as issue #235 TestChooser doesn't run the main() which init the http settings to get the zip file through an httpLocator\n. I'll test tonight thanks.\n. Here is the complete error \n[LWJGL] ARB_debug_output message\n    ID: 1280\n    Source: API\n    Type: ERROR\n    Severity: HIGH\n    Message: GL_INVALID_ENUM error generated.  enum is invalid; expected GL_ALPHA_TEST, GL_BLEND, GL_COLOR_MATERIAL, GL_CULL_FACE, GL_DEPTH_TEST, GL_DITHER, GL_FOG, etc. (136 others).\nmars 18, 2015 10:15:47 PM com.jme3.app.Application handleError\nGRAVE: Uncaught exception thrown in Thread[LWJGL Renderer Thread,5,main]\ncom.jme3.renderer.RendererException: An OpenGL error occurred - Invalid enum argument (Error Code: 1280)\n    at com.jme3.renderer.opengl.GLDebug.checkError(GLDebug.java:46)\n    at com.jme3.renderer.opengl.GLDebugES.glEnable(GLDebugES.java:185)\n    at com.jme3.renderer.opengl.GLRenderer.updateTexImageData(GLRenderer.java:2092)\n    at com.jme3.renderer.opengl.GLRenderer.setTexture(GLRenderer.java:2108)\n    at com.jme3.material.MatParamTexture.apply(MatParamTexture.java:112)\n    at com.jme3.material.Material.render(Material.java:1177)\n    at com.jme3.renderer.RenderManager.renderGeometry(RenderManager.java:568)\n    at com.jme3.renderer.queue.RenderQueue.renderGeometryList(RenderQueue.java:266)\n    at com.jme3.renderer.queue.RenderQueue.renderQueue(RenderQueue.java:305)\n    at com.jme3.renderer.RenderManager.renderViewPortQueues(RenderManager.java:803)\n    at com.jme3.renderer.RenderManager.flushQueue(RenderManager.java:731)\n    at com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1030)\n    at com.jme3.renderer.RenderManager.render(RenderManager.java:1078)\n    at com.jme3.app.SimpleApplication.update(SimpleApplication.java:260)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:152)\n    at com.jme3.system.lwjgl.LwjglDisplay.runLoop(LwjglDisplay.java:192)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:231)\n    at java.lang.Thread.run(Thread.java:745)\n. Fixed https://github.com/jMonkeyEngine/jmonkeyengine/commit/080255f51860d6803b88c0c91206a0c6c42da5f4\n. Well it was making sense for this test case.... I agree it's not the most common case though.\n. duplicate of https://github.com/jMonkeyEngine/jmonkeyengine/issues/492. I've finally looked into this issue.\nIt's not really an issue between DiffuseColor or DiffuseMap. It's actually a quesiton of how many different materials there is in the scene.\nThe shadow processor gathers all the materials of the scene to assign the shadow paramters on each frame.\nObviously if there is only one material, it's faster than with several material.\nSo this issue is a inherent to how we gather and update materials' parameters for the shadow post pass.\nThis could be aleviated if we had a way to add custom global parameters.Not completely sure it would be faster, but at least it would avoid the material gathering phase.\n. Please posts your questions on the forum http://hub.jmonkeyengine.org/\nWe package the engine with a SDK based on Netbeans and it comes with an installer. hence the different OS downloads.\nThe downloads are build from the 3.0 branch (latest is 3.0.10)\n. \"The forum is hardly readable because it has almost the same colour for back- and foreground.\"\nWell the forum doesn't send me a mail each time someone posts.\nThis is an issue tracker, not a chat.\nYou'd get more people to answer these questions on the forum forum anyway.\nIf you have trouble to read it, tweak you monitor contrast.\n. Actually, that was a big bug in the tangent generator.\nThanks for this issue because it allowed me to find it.\nHere is what the cube looks like now with your test case \nhttp://i.imgur.com/zNnLbnL.png\nHere is what the weird guy looks like\nhttp://i.imgur.com/ZUVaqBo.png\nNormals are right and there is no seam.\nHere is the fix : \nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/95d5fdf9c5b45f1bbd4d52e8e2a17f21ad03faa5\nAs you can see it was a very dumb issue. When computing tangent Normal and binormal with the tempVars the result was not cloned. Meaning we kept the tempVars reference, taht were modified later on....\nNasty.\n. Fixed the contributor doc\n. Can't reproduce the issue.\nCould you give some details on your hardware?\n. Alright, I guess a following commit fixed the issue.\nGood.\nClosing this issue. Thanks\n. OK this one is fixed. Thanks for the test case\n. What Operating System are you on?\n. Sorry but, I can't integrate that PR.\nI use World space to compute lighting in PBR as opposed to viewSpace in Lighting.\nParallax needs to be computed in world space.\nCould you add an Issue? Or if you feel like it, modify this PR.\n. It was removed on purpose actually, but yeah it broke parallax.\nIt works fine as you did, but there are much unnecessary operations going on.\nThanks anyway, I'll look into it.\n. Thanks ;)\n. done in https://github.com/jMonkeyEngine/jmonkeyengine/commit/719a683c2c037f8f342acaa2ab15603e7c790c91\n. true!\nwill fix it thanks\n. Finally got to this.\nThank you.\n. looks good thanks\n. Hello, I can't reproduce this issue on my side.\nI have someone else reporting this kind of issue (at least with this over brightness).\nWhat is your hardware?\n. I'll look into it and poke you on the core chat about it if I have some questions ;)\n. Fixed\n. cough shader nodes cough\n. Shader node will generate a glsl 1.5 shader if the hardware supports it, else it will generate a glsl1.1 shader. Without the need of thinking about it in 90% of the case\n. Meaning except for the change in the GLRenderer, this change's use case could be worked out with  the UnshadedNode.j3md that is already in the engine.\n. I'd be surprised you can mesure that overhead.\nIMO here the benefit of shader nodes is precisely that you don't need to care about glsl version.\nAppart from that, I admit the benefit is quite limited.\nI find it a bit dumb to need an unshaded15.j3md to be honest.\n. Also a mesh without position buffer is really unexpected\n. Ok we talked about it in the core chat an decided to add a check, it's been fixed on master.\n. Hello, I'm really surprised by this issue, but I can't figure what you changed because the formatting is all wrong.\nCould you please try to keep the right formatting?\n. mhh sounds like a breaking change...\nMaybe we could add a version to j3m files like we do with j3o.\nThis way, we'd consider j3m files with no version as in version 1.0 (meaning old parsing style even if it has flaws) and we could implement what you mention in version 1.1.\nAnyway the current way of parsing this is a bit dumb, it needs to change, and you proposal looks fine to me.\n@shadowislord @pspeed42 @normen what do you think?\n. I'm not a fan of the coma separator. Also it also not backward compatible. IMO @DannyJo solution sound nice. All up for a PR !\n. ok but also allow to an easy wrap around all axis like:\nDiffuseMap: WrapRepeat \"path/to/texture.png\"\nwould wrap around S and T...\nAlso would ahve called them U and V... but it has to match with the WrapAxis enum....\n. yep. Awesome.\nLooking forward to this ;)\nThanks for stepping in.\n. That was the recommended way to do it but somehow it doesn't work when you have embeded textures in a j3m file. You receive the events for the material file not for the sub sequent assets loaded with it. Maybe we could just fix that issue.\nIn anycase, I find it very inconvenient for this particular case of anisotropic filtering. This should really be a global setting.\n. Please, this is harldy related to the issue.\nCreate an other issue, and describe it thouroughly.\nThanks\n. Do you have a test case and a file? I could help to validate the PR.\n. I can't test it before 2 weeks. (answering from my phone). So yes,  go ahead merge this. But please pull it before and at least try to load stock materials. \n. Yes! I'll check it out tonight\n. Hello, looks pretty good.\nBut why the changes in the gradle build?\n. Tested it, it seems to work fine.\nWe need to have the SDK support those changes though.\nSince it's backward compatible I merge it and I'll make the change on the material editor later.\n. Thanks for this.\nBut you need to add the empty constructors too.\n. Yup, if you remove this, this PR is ready to be merged.\n. Ok back to this.\nI'm a bit annoyed because there are 2 PRs that does the same thing see #306.\nWe've been bad at talking to each others I guess. That's just too bad that the work has been done twice.\nSo since I'm going to integrate one or the other I have to choose and I'm gonna choose the one that will give me the less work because I'm a lazy ass.\nI'm gonna choose PR #306 because it's a tiny bit cleaner to my taste, and it even fixes my lousy spelling in the java doc.\nHowever it doesn't have the constructor with the radius for PointLight and the spot angles for the SpotLight...so mixed feelings, I'll add the 2 constructors.\nSo @zzuegg I'm really sorry to have wasted your time. Tell me how I can make it up to you ;)\n. out vec4 fragColor; is enough\n. Yep Thanks\n. Hello. Could you please explain.\nUsing normal here is definitely wrong and will produce wrong reflection.\nBut I'm willing to hear your arguments.\n. Ho that's only for the diffuse IBL, not reflection...\nMhh ok, will test this.\nDid you see an improvement?\n. Maybe it's more noticeable with hi frequency normal map...\nI'll test that.\n. Yes it has been added to the shader\n. mhhh this is the typical example where the compiler will do it for us...\nSince java 6 String concat are optimised into StringBuilder by the compiler.\nSo, for readability's sake, I'd rather keep the String concat syntax.\nAlso not really sure this method is a critical performance bottleneck, that would require this kind of micro optimisation, if the compiler wasn't doing it for free.\n. No problem really, you don't bother us.\nIt may not sound like that in our answers, but we appreciate the effort of people willing to optimise the engine ;)\n. To anyone willing to take this one\nSolution is to add rootBone.reset() be fore this line -> https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/animation/Skeleton.java#L307. Dude... that's just a reminder for me to fix it... You don't need information...\n. The other issue has a test case. That's interesting. I totally missed the post on the forum.\nLooks a lot better indeed.\n. Semms good to me @shadowislord do we merge it?\n. Hey david, I'm not shure what it fixes. Could you explain?\n. There is a lot of noise in this change because I guess of your formatting scheme.\nSeveral questions : \nWhy do you need to override this class? What feature do you miss?\nWhy the early returns instead of the more classic \"if\"\n. 1. createOffCamera is already protected. You can do that without the change. If you need any attribute from the class I'd rather create accessors than making them protected.\n2. Not relevant in this case, there is only one condition... your change doesn't make it more readable...\n. OH! duh. You should have started with that.\nOk I'll push a change in this regard.\n. ... how did I miss this?\n....how did it work???\nThanks for the fix\n. Looks good to me\n@shadowislord what do you think?\n. good thanks\n. Thnaks you\n. Thank you.\n. doh, right.\nThanks, I will change this.\n. fixed with https://github.com/jMonkeyEngine/jmonkeyengine/commit/a670877df172a06e6a96d52a417671084d748c0c\n. Alright let's merge it\n. Sorry wrong manipulation \n. Well there could be more than 3 renderers in the future, if we use MRT.\nBasically we'll have several color preview.\nAnyway, we'll see when we're there.\nThanks for the fixes\n. what does it exactly fix? What is the issue?\nEDIT: Ok I guess it's following this post on the forum \nhttp://hub.jmonkeyengine.org/t/see-if-a-mesh-has-been-changed/35346/6\n. Well at first I thought it was the whole new shadows system and on Perjin post on the forum, he uses PBR. It's actually the ground on which the shadows system is built, so it could be on master indeed.\nThough, maybe we should keep this for 3.2. In that case it can just be merged on this branch and wait for the 3.1 to be out when we merge this branch to master.\n. Well, if you can make the PR on master yes, but don't bother to split it. Sorry for the misdirection. \n. Sounds like a bug, but it would help to have the complete stacktrace and/or a test case.\n. yep got it\n. fixed, thanks.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/107123820bed1fd215566d3e3edad7cb84e1d304\n. That's actually pretty dangerous to do that.\nIf rotation.set() or lookAt.set is called later in the code, we modify a JME constant.\nEven the upVector shouldn't be initialized like that, actually, even if it's a bit particular because it's not supposed to be altered..\nHere you should just change the defaultValue in the serialization to null, and test for null values in the cloneForSpatial method.\nAlso about the serialization process. if null is not a valid state for the object, it should be tested in the write method and not be serialized in that case. Though here it's definitely a bug, the default value shoudl be null as those attributes are optional.\n. ok, looked again into that and actually this is not good...\nThe setLookAt actually assign the given vector instead of setting it (using vector3f.set()).\nThis was intended so that when setting a lookAt vector (say for example, by giving it the worldTranslation of a spatial) the look at would be changed whenever the worldTranslation would be changed, because they essentially are the same instance of a vector. Resulting in the object on the path always looking at the target.\nThis is not really great and I wouldn't do it the same way today, because everywhere else in the engine, the logic would be to have an appState or a control update the position if needed, and not share the same instance...\nBut changing this today will break user code. So we have to stick with this logic.\nSo basically to fix this issue, the change should be to change the cloneForSpatial method replacing \ncontrol.lookAt = lookAt.clone();\nwilth \ncontrol.lookAt = lookAt;\nand \ncontrol.rotation = rotation.clone();\nwilth\ncontrol.rotation = rotation;\n. Yes ok for the rotation.\nHowever I still disagree for the lookAt.\nit will work with a null vector. as clone.lookAt = lookAt won't fail if lookAt is null.\nAlso the read method should have null as default value.\nAs a side note. The current code in the read is wrong somehow. The default value is tested with \"==\" not \"equals\", so if you go Vector3f.ZERO.clone() and then set this in the default it will have no effect. The current value Vector3f.ZERO has no effect neither, so it should be changed.\nInitializing the lookAt with Vector3f.ZERO.clone() will also work, however you won't be able to set a proper default value unless you keep a reference to this very same clone...\nI'd rather nulll check tbh...\n. As said before. leave the declaration as it is (null)\nthen assign the lookAt in the cloneForSpatial and cloneJme methods, don't clone it\nThen in write and read use null as default value.\n. Man... that's awesome...I completely forgot the binormal was computed in the vertex shader...\n. yep I'll take care of it\n. @JavaSaBr what is the loader? BlenderLoader?. Please post your complete code.\nAlso, please prefer the forum for troubleshooting.\nhub.jmonkeyengine.org\n. Not sure it's a good idea tbh.\nNormalizing in the vertex shader is always problematic as the interpolated value once in the frag shader will no longer be normalized, unless all normals of the triangle are pointing in the same direction. I know it's slower to normalize in the frag shader on a pixel basis but it's more accurate.\n. Could you please report this issue in the sdk dedicated project?\nhttps://github.com/jMonkeyEngine/sdk/issues\nThanks\n. Well, on my part, I'm not fond of it.\nI removed this parameter because it was there for very specific use cases, like the one exposed,  and most of the time was not used, and was just adding clutter to the lighting material.\nIMO this should be handled by doing a fork of the shader in the user's project with this special behavior.\n. Please use the forum for trouble shooting\nhub.jmonkeyengine.org\n. Because it's a long and complex review work\n. Dude....those typos were by design... ;)\n. I also prefer the warning and spam version.\n. Hey thanks. I'd like @shadowislord comment on this, because I still don't get what's the intended way to use this in the first place.\n. wiki is now reachable at https://jmonkeyengine.github.io/wiki/\n. I agree with you Julien. Though it's a bit out of the scope of this PR, because what you describe is the behaviour we have today, regardless of this PR.\nAlso, calling setUserData(\"any_key\", null) when the userData is empty is not in the normal usage flow of  user data, usually, you want to delete things from a non empty list.\nSo basically, no big deal if it's merged like this. Though, If OP wants to jump on the occasion to refactor a bit and clean up the code, I'm fine with it too.\n. Did you try to update the drivers?\nIn any case if you want me to do something about it, a test case would help.\n. rhoo dude, ATI + Linux, you like to hurt yourself... ;)\nWill look into it, thanks for the test case. \n. Thanks ;)\nSeems I can't assign you for some reason so I'll just assign myself so that other people know that it's taken care of\n. @shamanDevel  Is this still relevant?\nAs a rule of thumbs, you should ask troubleshooting questions on the forum. I'll check that... there can be some left overs\n. I can't reproduce this issue on my end. I've made some cleanup in the j3md, but couldn't find any varying that was not declared in both the vertex and frag shader.\nYou use the TestPBRLighting, or maybe you have a specific test case for this problem?\n. oh ok.\nWell an mac I had a black object, so I figured it was mac specific, ut maybe the issue was not as bad on all platform but still there. anyway, glad it's fixed now.\n. Cool Thanks\n. seems it's an opengl only feature\nhttps://www.opengl.org/sdk/docs/man/html/glTexParameter.xhtml\nWhereas it's not in opengles\nhttps://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml\nSince it's on Desktop and with opengl, it should not be the issue, but I wouldn't be surprised that the drivers are screwed up...\nHow do we get around this in the android renderer? do we?\n. Seems like in 3.0 we were skipping the case where the image has no mipmaps and doesn't not need any, doing nothing.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/3.0/engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java#L1839\nIt can explain why it was working before and not anymore even with the same drivers.\nBut by the specs this means we kept the default value (1000) so maybe the mipmaps were still generated.\nMaybe setting GL_TEXTURE_MAX_LEVEL to 0 is the issue, but by the specs, again, it shouldn't.\nSpecs reference : \nGL_TEXTURE_MAX_LEVEL\nSets the index of the highest defined mipmap level. This is an integer value. The initial value is 1000.\nGL_INVALID_VALUE is generated if pname is GL_TEXTURE_BASE_LEVEL or GL_TEXTURE_MAX_LEVEL, and param or params is negative.\n(param is the parameter here it's 0 so it shouldn't be an issue).\n. Hello I made a pass this morning and fixed a couple of issues.\nCould you please check? Also it could help that you report the exact links\n. alright I'll make another pass in the source to find the faulty URL ;)\n. @mitm001 can this issue be closed?. You are definitely right\nfixed https://github.com/jMonkeyEngine/jmonkeyengine/commit/9cf67b902e46dbc2e01f88cb3e8b28729730c5f4\nand also on 3.1 branch\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/dd8271e8b3a5b63fec0388aae5e75be58b0b0c9e\n. mhhh..... well the test data is becoming bigger and bigger...\nidk if we should add the town.zip into it... Maybe we could upload it along with one of the release and point to it... there is very small chance it will change some day anyway.. no real need to keep it in the source control... @pspeed42 @shadowislord what do you think?\nand @Ali-RS definitely don't upload the extracted folder.\n. go ahead and merge it ;). go ahead. I fail to see how it's a JME issue... . Cool thanks. This one is trickier than it looks.\nFirst, we always had a modo to refrain to add code in the core engine that was not completely necessary, as in necessary in a game. And I'm 99,9% sure that you will never need to rename an application in a game.\nSo we always thought twice before adding code that would be only useful for the SDK, and refrain to do it whenever there was a work around. This one is convoluted I reckon, but does the job.\nThe only use case I know of changing the name of an anim in the engine is this one : in case of an editor/sdk.\nAs you realized it's not just a matter of adding an accessor in the Animation class, as the AnimControl uses the animation name as key in an internal map.\nOne way to do it, as you did, is to defer the name changing responsibility to the AnimControl. But what if another control also uses the name later? How would it be notified that the name changed? will it also have a name changing method? but then how will it notify the AnimControl?\nAlso, the setName you added in Animation is public, with no warning in the javadoc that it will completely screw up the animcontrol if you use it directly....\nBest way would be to have the setName in Animation notify some registered controls that the name has changed an that they should clean things up on their side... but again... a very very convoluted thing to add to the core with 1 and only use case, that is not a game use case....\nMy point is, you'd better have some AnimUtils in your editor, that does the job. You can even go through reflection to access the name in the Animation class and the internal map in AnimControl, but this shouldn't be in the engine IMO.. I gave my opinion on the rename anim thing. It's not needed IMO.\nfor the internalApi thing, we already have something similar\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/system/Annotations.java\nThough it's never used across the API at all...\nI guess the plan was to add them and have the sdk check for them... \nIf there is no support in the code editor it's plain useless IMO because users don't read doc, there is no way they go read annotations... \nSeems there are ways to have intellij raise errors or warnings for some annotations... but still... a far cry...\nMaybe we could have gradle check for them during the build maybe...\nI'll defer to the other core members @pspeed42 @shadowislord @normen so they can voice their opinion.. mhhh?. @shadowislord Could you review this?. A pull request is essentially a branch, you just have to pull it\nhttps://help.github.com/articles/checking-out-pull-requests-locally/. I agree with Empire, we should not promote usage of tempvars in user code, it's best it stays an internal stuff.\nOther than that, it's a nice example. Though it does not separate view from game logic (thought here is not much game logic :p), and maybe that's not the best message to users. But I guess we can't really expect that in a one class game :p\nget rid of the tempVars usage and it's got to go for me.. Thanks. It's ok IMO. Far better than some of our examples :p. Please post troubleshooting questions on http://hub.jmonkeyengine.org. to me the theory is that length is 1 more or less a thin epsilon due to float precision. so the squared value is also very close to being 1. So no need to have square root.\nThough I also agree that epsilon here is way to big... i'd have picked like 10-5 at least or even lower.... Don't please, I'm working on a global solution in the engine.. thanks. mhhh....mhhh.... what with this line ending stuff?\n. Thanks. mhhh..... what with the 7 commits? :))\n. well not really but once I merge this, 7 commits will be added to the branch.\nThat's no big deal but considering the extend of the change it's a bit too much.\ngit is wonderful and allows you to basically rewrite history... while it can be dangerous, here is one of the cases where it's fine, because it's a pull request, and that you are pretty sure to be alone to work on it.\nHere is a nice read.\nhttps://www.atlassian.com/git/tutorials/rewriting-history\nThere are several options to consider : \n- Rebase interactive and squash/discard irrelevant commits:\ngit rebase -i <hash of the commit before the first in this branch>\nyou'll be presented some kind of wonky unix like editor, but it does the job. I'll redirect you to the git rebase interactive documentation.\n\nreset soft your changes to the beginning of the branch and commit again, then push --force.\nThat's most probably what you intended to do with those reverts, or you should have used commit --amend which rewrites the previous commit. With git, you'll probably NEVER want to use the revert commit command, especially if it's to revert the commit before. It creates another commit as you can see.\ngit reset --soft <hash of the commit before the first in this branch>\nThis will reset all the commits while keeping the changes in the file (which in your case is actually the content of your last commit)\ngit commit -m \"fix errors in how vector projection is calculated\" \nCommit again\ngit push --force\nThis will rewrite history on the remote repo and update this PR.\n\nHope it helps\n. Wonderful thanks Steve. mhh.... you gonna have to explain more than that.... why do you need access to those methods?. \"I want to add supporting cloneable to ShadowRenderer:\"\nok... so why don't you PR this.\nMake the ShadowRenderer implement Cloneable and Savable and that will be ok.. Yep I agree for the warning instead of the exception. it's better to not have shadows than crashing the whole app, and the warning should give a hint to the user.\nI'm good with the PR, I'll merge it later tonight. I was thinking, now that we don't crash when the light is not set, maybe we should deprecate the current constructor and create a new one with the light as parameter..... you have a point .... maybe that's doable. It's a bit out of scope of this PR though, so let's not do it here. Thank you ;). sorry I'm late to the party.\nI do completely agree with Paul and empire.\nSame for Userdata, and in a general way do yourself a favor and don't save in to the j3o something that doesn't belong here.\n. so... 237 files to review \ud83e\udd47 \nI'm a bit too busy (lazy) to review all of them, so could you answer those questions please? \n1. Does this pr modify the core (as in any other jme-xxx module)? Seems your initial approach was to avoid that, and that's great, but did you achieve it?\n2. What's the used approach? Are you still extending SimpleApplication as phroot did? or is it entirely AppState based? (I could at least check this one out myself though, but hint: option 2 is way better)\n3. Does it use instancing as phroot did? Seems to be the standard of the industry now.\n4. You said playstationVR?\n5. I have no fifth question but it's to check if you read all my questions?\nhint: 5th question is a trap.\nThanks for the hard work. ;)\n. cool cool.\nYes I've eagerly read all your answers.\nNice work!. @jseinturier ... ok just noticed something in the core done by this PR.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/607/files#diff-730c034af98a55411581659f9891ebeeR173\nThis is pretty bad.\nNot only it's useless to have an additional method call for a bitwise operations, It gives access to the refresh flags of Spatial from this outside which is utterly bad.\nrefreshflags are internal to spatial and should not be directly changed from the outside.\nMaking them protected would have saved the thing, but here again we get to argument 1, it's useless.\nI'm pretty pissed off to be honest because you specifically answered this : \n\n\nDoes this pr modify the core (as in any other jme-xxx module)? Seems your initial approach was to \navoid that, and that's great, but did you achieve it?\nNO my jme3-vr module DOES NOT require ANY modification of the core distribution.\n\n\nThere is nothing more core than Spatial.java. It's the corner stone of JME. I would have liked that you mentioned this when I asked.. > With my late commit, you can see that there is no more modification of the Spatial class. I'm also thinking that there is no more modification of any JMonkey core class.\nNot sure what you mean by this, the change was effective on master. I reverted it yesterday https://github.com/jMonkeyEngine/jmonkeyengine/commit/d20cf3f20aa3a144b50448a4d88dfebe1f64b94e\nFortunately it seems you never call the public flags methods in the rest of the code, so the change shouldn't have break anything in jme-vr.. yep. It could be nice to squash your commits.\nsee this : https://www.atlassian.com/git/tutorials/rewriting-history\n. I agree about the comment, I don't like Exceptions in toString().. It's marked as pre release because we didn't yet publish a suitable change log. It will be done in the coming days.. ha_ git hub is wonderful.\nGo ahead then ;). Mhhh that's weird, it works for me. Could you tell us more on your system?. Far fetched but I once had issues with amd cards not rendering some of the geometries. I had to rollback drivers to a previous version. For example the HelloJme example was displaying nothing. though if I added another box in the scene, this box would be displayed, but not the first one.\n1. could you test this with your hardware ?\n2. could you test the TestAttachementNode on an other hardware?. oh boy....AMD\nWhat I meant by, \"could you test this with your hardware\" was to run the HelloJme test, not to rollback your drivers.\n. haha well we must not live in the same world because that's exactly the other way around for me...\nBut anyway...we need a solution for that.\nCould you post the issue on the forum please? i'd like to ask people to test on their hardware and see how it goes. @stephengold it doesn't in TestAttachementNode anyway. It's another issue.. Haaaaaa\nyeah it can be the issue.\nNice find\n. I fixed it on master could you please check?. I think he meant attachement node should not be \"skinned\". And he's right. It's just meant to follow the bone it's attached to.. There is no nightly anymore.\nThe part in this doc explaining how to build from source is outdated.\nNow you have to pull the repo from got and do a \"gradlew install\".\n@mitm001 could you look into this?. Yeah obsolete content should go away if there is no one to update it.\nThank you for your work on the wiki @mitm001 ;). seems that travis gh-pages push fails, gonna look into it.. we are experiencing some difficulties with the forum to say the less... the 3 persons that have the keys of the house are out of town... and there is not much we can do about it except wait.. it can ;) thanks. This will not be the case in the future ArmatureDebugger. I am curious why this is needed.\nI mean I know how it could be used, but your change only changes tempVars class and not its usage through the engine which let me think that you are using them in your game code.\nWhich I would definitely not recommend.\nThere are 5 allowed \"levels\" of tempVars and we do try to never get over this limit in the engine's code, but there is no guaranty if you use it in your own code that the limit won't break...\nYou'd better have your own temp vars... or have class defined temp variable.\nSo... I'm not completely convinced this change is needed.. I agree with Paul. TempVars usage in the engine is not always justified. And also the Android argument is les and less true nowadays where dalvik Vm has pretty much been wiped out form the surface of the planet.\nI agree making it closable would be handy, but only if the usage is changed in the engine. and not in the idea of easing its usage by users.\nReally you should not use them in your own code.. Swing works fine IMO. Has it querks sure... But it's solid. Look for substance LAF. They have a couple of nice skins. . Well, @empirephoenix was just reporting of his own experience, which I trust pretty thorough about javafx and JME. He was not prophesying the end of java.. It looks good, but I don't have time to test it, so one last question @Saucistophe : is it fully reto compliant with the old class? . Yeah I agree... though this means it's gonna break user code...\nThat said, I'm not sure a lot of users are using stock cylinder anyway... so let's merge this.. This is totally unneeded.\nYou just have to catch RenderException and parse the exception message.\nI'm against this change\n. the geometry doesn't need fixing, the material does.\nsee this https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java\n. alright. We can't merge that. StampedLock is java8 only.\nJME code base must be java7 complient.. mhhh I didn't know... I'm not sure why... Is lwjgl3 not compliant with java7?\n. ok... well then I guess I have no objections to this PR. Only in jme3-lwjgl3. But I don't picture you, fiddling in that code \ud83d\ude09. \nI'd rather the rest of the engine remains Java 7 compliant.  . mhh...  I wonder why I made it a Boolean with a big B...\nCould you change it to a classic boolean?. Thanks. Thanks!!. Seems that the glslcompat.glsllib was not included in the shader . I'm in vacations in a zoo right now so I'd appreciate \u00e0 PR \ud83d\ude09. thx. Github allows you to squash the commits when you merge a PR now.. I'm not fond of this change at all. It just hack around the fact that we don't infer the texture type in the J3md.\n- you don't need this if you use the sky factory, so you'll have to give me a very solid use case.\n- If you ever find a solid use case, This should be done otherwise: Allow \"Texture\" as a type in J3md and infer the type at run time when the parameter is set.. Sky is peculiar and is supposed to work with the SkyFactory. I can't see why you'd want to save j3m. Especially that you can save a sky in a j3o file like any other spatial.... No, as long as a texture has a TextureKey, it's not saved along with the rest in the j3o.\n. Thanks. I don't get what this fixes, could you please explain the issue a bit more?. Ok I get it now... that actually looks like a bug.... Not merging it for now, waiting for others to review. If it's not merged in a couple of days, please ping me.. Seems that the code was already doing that... It's weird, that those exception are not re thrown...\nIMO they were supposed to be thrown at first and has been silenced later for more proof loading....\n. Agree\n. To remove the commits you didn't do you need to rebase your branch on master.\nIf you want I can guide you through this, ping me on slack when you are available :). could you reopen the PR on master? it's on the v3.1 branch. mhh that's weird I never had this issue....\nAnyway yeah they should be cloned. You think you need it, but you don't. I've made a Node editor, without changing a single line in the core engine. Everything is in place to make it work. The engine shouldn't be modified to fit the editors, it's the other way around.. @MeFisto94 Could you rebase this PR on master please?. ha boy... what did you do?. yeah well, with git, when you are in the situation to fix conflicts on a file that you never changed in your PR that means that you did something wrong and you should do git rebase --abort.\nNow it's a bit too late though.\nSo yeah I think you can create a new branch an cherry-pick it's gonna be easier\n. This should disappear with the new animation system coming in 3.3. good to merge?. Should be fixed now. ha... I was working on a fix....You beat me to it.\nHowever i'd like to do it a more generic way and not have 2 versions of the doTransform method, one with tangents and one without.\nAlso in your change you iterate twice over the buffers instead of once. This code is executed on each frame so it has to be as fast as possible.\n. yep saw the issue this morning too.\nThanks a lot to have jumped on this though ;)\nI'm gonna try to simplify the code.. So here is the fix I pushed\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/ef5952bcad5696ed39b296875158b1d1667112ae\nThis way we have a lot less code for each case, and still only one iteration over the buffers.. thanks for the contribution nonetheless. Ok... I don't have time lately, so I'm gonna give you 1 try.\nThe indent part is useless, The indent is there just to have a debug readable version of the shader, we don't really care if that's spaces or tabs.\nThough i'm curious about the \"important varying fix\". What does this fix? There is no problem with varying and shader nodes so you'd better have found a huge bug.\nAs a rule of thumb, please explain your changes systematically when making a pull request.. Give me a j3md, and a jme3 test case outside of your editor. If the j3md is valid and if it fails to generate the shader properly, I'll consider your PR.\n. the problem is here: \nShaderNode ConstructColor {\n                Definition: ConstructColor: Common/MatDefs/ShaderNodes/Basic/ConstructColor.j3sn\n                InputMappings {\n                    red = WorldParam.Time\n                    //MISSING INPUTS FOR green, blue and alpha\n                }\n                OutputMappings {\n                }\n            }\ngreen, blue and alpha MUST be linked with input.\nIf they aren't you have to raise an error for the user to fix it.\nDeclaring the variable as your fix does will end in unexpected result and basically a silent fail of the shader...which is the worst thing the user can have.\n. An error is worth an exception. \nThere are enough silent fails when you debug shader to add this one.\nAdding default values in the j3sn would be a nice addition. But it has to be done right.\n. What about this PR @shadowislord ? Do you want to merge it?. Tbh, I'm not familiar with the asset link system. I never used it even in the sdk. @shadowislord could you review this please.? . @stephengold hasn't it been fixed by this commit? https://github.com/jMonkeyEngine/jmonkeyengine/commit/37e4d4d564f7bc21fdc6a3ff122fc221bc6e959f. Not sure this can be fixed easily and to me it's a very  rare corner case.\nDoesn't completely worth the effort of fixing it IMO.\nWhat do you think @stephengold ?. Not really, this system will stay in place in SkinningControl. In 3.3 SkeletonDebugger will be deprecated and there will be an ArmatureDebugger that works completely differently and should address this issue.. thanks. looks fine. Nice, could you make a pull request? And maybe add a test case so we can compare the perfs. Well ok, thanks nonetheless, I'll look into it.. No import should not be handled like that.\nI checked and there is no de duplication indeed in the system. When you import twice the same lib the shader fails to compile.\nBut imports are handled on a lower level in JME so i'd rather have them de duplicated at this moment. This way it could also work for classic shaders (in the case you have imports in a shader libs for example)\nI'm gonna work on this.. ok I looked into the code and the imports are injected when we load the shaderNode source.\nSo basically we'd need to parse the file for #imports store them in a set and replace them when relevant in the next source where it's present...\nSo several regexps, to pass the code in... \nHow fast is you AST generation? Maybe runing it once and for all would be faster in the end.\nNote that if we use the AST we'll use it for everything to not waste the time we take to parse the file.\nSo we may consider changing this part for example -> https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java#L504-L528\n. Default value are nice. So we can keep this.\nI'm more skeptical about the additionalValue... feels wrong to me. . My point is, if additional information is imports, it has nothing to do in the definition.\nAlso additional information is so vague... if we really need to add something at some point I'd rather have something explicit.\nBut imports can be handled differently really...\nEither we leverage your AST generation to rework the whole generation process, and extract the information from the node source code either I do it with regexp... but as said.. if in the end multiple regexp are slower than one AST generation... let's go for AST...\n. Arf... You're right...\nThen we need the loader to work differently . Yep, that's what I thought. Something like \u00e0 loadFilesSeparately flag in the asset key. It would return a map with file name as key and the source as value. This way the generator can store the imports in a map and add them on top of the file when the shader is generated.\nI will handle this if you don't mind.  I'll push something soon . Mhh. Like what ? There is already the description section. What else do you need ? . How would it look like in the j3sn? Give me an example.\nLe sam. 28 oct. 2017 \u00e0 14:46, Alexandr Brui notifications@github.com a\n\u00e9crit :\n\nFor example, I want to describe required material parameters for a shade\nnode(for defines from imported shaders)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/759#issuecomment-340188470,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADImPCUgBTClchDJVmU8MMOeqeoQPAxaks5swyIwgaJpZM4QHwlG\n.\n. ok... what's wrong with the description section?\nlike \ndescription {\n      Required material parameters : Int NumBones, Int Whatever...\n      ....\n}. I meant the Documentation section not description sorry. I don't want to add any data that is useless to the engine.\nNote that the documentation section already has a specific syntax like @input @output etc...\nI'm ok with @matParam Int NumBones for example\nIt's easy to parse, and it's what is done for (the sdk was parsing for these @input and @output to display documentation for example).\nNote that the documentation is not loaded by the engine, so you can put pretty much anything you want in it.. Done, https://github.com/jMonkeyEngine/jmonkeyengine/commit/171007693bdc621318da8498c72470077234b9f3\n. not sure why the AST generator has been snuck into this PR. can you make 2 separate PRs please?. mhh (\"position\", this)... that was dumb.... Also @JavaSaBr you can just assign me in the \"Reviewers\" section on the top right I'll be notified.\n\nI'll merge this PR once the build is green\n. This branch is weird you might want to rebase it with master. Still not good, the branch cannot be rebased\nI guess the pb was that master was push forced at some point and you can't properly rebase.\nyou'd need to create another branch on current master and cherry pick your commits on it and make another PR. no you did a merge apparently\n. Well... look at the PR : 19 commits -> you actually made 2 useful commits.\nalso there is a big hint from github -> \n\nThis branch cannot be rebased due to conflicts\nRebasing the commits of this branch on top of the base branch cannot be performed automatically due to conflicts encountered while reapplying the individual commits from the head branch.\n\n. It can be merged but not rebased. And I'd like to rebase it.\nSo basically your best choice now is to create another branch from master.\nthen cherry pick your commits. and IMO only this one is needed https://github.com/jMonkeyEngine/jmonkeyengine/pull/767/commits/8d3002bc1e0be1620b44e1d98302cd38a5a037ec\nso basically on your fork do:\n//go to master\ngit checkout master\n//make sure master is up to date\ngit pull\n//create branch and check it out\ngit checkout -b myNewBranch\n//cherry pick the commit\ngit cherry-pick 8d3002b\n//push on the remote\ngit push --set-upstream origin myNewBranch\nThen make a PR from this branch\n. The other one has been merged. What issue does it fix exactly, do you have an example where it fails?\n. ok, I understand.. Thanks. oh ok.. I see the problem.\nI'll merge this once the build is green.. Thanks you!. Don't sweat it, you didn't waste my time :p \nBy the way is there a VR example in jme-example project?. Yeah It could be nice to have a ready to go example for VR. So go ahead.. mhh seems it does not build\n\nProject with path ':jme3-vr' could not be found in project ':jme3-examples'.. The log was from travis openjdk7 job.. ok the vr project  is java 8 only?. oh ok so we can't use it in the example project then...\narf... it annoying.... Yep java8 is not supported on android.. Maybe we should discuss this on the forum, and let other people chime in.. thanks\n. I've been caught thousand times by this one too.... The reason is that it's just wrong to handle gamma correction like this. There is a lot more to it than just correcting the last image of the filter stack.\nAlso it should not be needed anymore, you can set gamma correction on in the app settings, and it will handle it properly even with post process.\nSteve has a corner case where he has a custom offscreen render, we need to discuss this as there are a couple of things to know to do it properly.. I'll try to add a contrast and color balance filter in a future release. well...because it does gamma correction for real, and some people might use it.. :p\n. Use the flag in the ShaderNodeDefinitionKey.\n. You can't. and if you need it, you have to find a way on your own. Reload the shadernodedefinition separately when you want to display the documentation for example.\nThis is clearly not worth a change in the engine. . Well you want to display the doc on a rollover from what I've seen on the forum, right?\nI don't know how your editor is done, but I guess you can know over which node you are, and from the node get the path to the shader node definition. then with the path, create a key, clear it from the cache, then set the flag to true then load the definition again. this time you'll have the doc.\n. @empirephoenix @JavaSaBr could you review this PR please?. @tonihele could you update the PR with the requested changes? I'll merge it right and it should make it in 3.2 alpha3. how many minutes? :D. I almost waited....  ;) \nRight once the build is green I'll merge the PR.\nThanks ;). Doesn't look like what we talked about.\nWe don't need another ValueMappings section, this can directly be done in the InputMappings section.\nAlso it was just about values, it was more about glsl expression ie\nInputMappings{\n         color1 = % mix(vec4(1.0), vec4(0.5), 0.5) % \n         color2 = % vec4(1.0) %\n         float1 = % 1.0 %\n         color3 = Global.outColor\n}\nIt doesn't look like you did this.. yes that's what we talked abut in the private message.\nAlso please use the inputMappings section and not an additional section.\nThe build fails on a strange error... \n:jme3-core:compileJava/home/travis/build/jMonkeyEngine/jmonkeyengine/jme3-core/src/main/java/com/jme3/shader/ShaderNode.java:288: error: for-each not applicable to expression type\n        for (final ValueMapping valueMapping : valueMapping) {\n                                               ^\n  required: array or java.lang.Iterable\n  found:    ValueMapping\n\nI think its confused because you name the iteration variable the same as the collection.`\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/786/files#diff-5d722bff374c84f550a4c22b059e134aR288\n. sorry it slipped my mind, gonna have a look asap. Or that yes... in the end in the shader it will be a vec4...\n. hey, looked into this a bit more...\nmaybe it would be better to have a pivot Vector4f (from the tempVars)variable to avoid a lot of code.\nsomething like this \n``` \n                TempVars vars = TempVars.get();\n                Vector4f vec4 = vars.vect4f1;\n                //handle the null case\n                if (this.value == null) {\n                    try {\n                        this.value = value.getClass().newInstance();\n                    } catch (InstantiationException | IllegalAccessException e) {\n                        throw new IllegalArgumentException(\"Cannot instanciate param of class \" + value.getClass().getCanonicalName());\n                    }\n                }\n                //feed the pivot vec 4 with the correct value\n                if (value instanceof ColorRGBA) {\n                    ColorRGBA c = (ColorRGBA) value;\n                    vec4.set(c.r, c.g, c.b, c.a);\n                } else if (value instanceof Vector4f) {\n                    vec4.set((Vector4f) value);\n                } else {\n                    Quaternion q = (Quaternion) value;\n                    vec4.set(q.getX(), q.getY(), q.getZ(), q.getW());\n                }\n            //feed this.value with the collected values.\n            if (this.value instanceof ColorRGBA) {\n                ((ColorRGBA) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);\n            } else if (value instanceof Vector4f) {\n                ((Vector4f) this.value).set(vec4);\n            } else {\n                ((Quaternion) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);\n            }\n            vars.release();\n\n```\n. don in https://github.com/jMonkeyEngine/jmonkeyengine/pull/791. No problem. I figured you were busy. And it's totally  natural. I had some time and I wanted to integrate it in beta 2,so I did it. . Oh yeah on interfaces it's directly static final...\nWell anyway I agree with you we should keep the final static as it makes it clear those are constants.. Appart from this it's ok . @pspeed42 are you ok with the \"public\" not being in the Interfaces?. To me there should be 2 commits only:\n- upgrade lwjgl3 module\n- refactor core opengl interfaces.\nThat's the moment to use the git rebase -i command, or learn about it.\nI can squash it to one commit with github, but IMO there should be 2 commits.\n. IS the issue also for those back ends?. Something similar to https://github.com/jMonkeyEngine/jmonkeyengine/commit/26ae3ec806c3bad233ae2c9192fc6051aafb5aeb\nshould be done then. So, do you guys agree on this, is it ok to merge?. true. IMO the best solution is to send a crafted MouseMotionEvent when a listener is set in the LwjglMouseInput https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/LwjglMouseInput.java#L162 or if it's not initialized at this poitn send the event in the initialized method https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/LwjglMouseInput.java#L84\nJust do something like this https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/LwjglMouseInput.java#L125-L127\nThis way, no change in the MouseInput api, and no change in the InputManager. just using th esystem in place. The KinematicRagdollControl put something that is not a spatial in userObject.\nWhy not just call setUserObject when cloning the controls?\nhere for example https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-bullet/src/common/java/com/jme3/bullet/control/RigidBodyControl.java#L154\nSo that each control manages what should go in user object. I think this is the same issue as https://github.com/jMonkeyEngine/jmonkeyengine/issues/380\n. thanks. @stephengold is it ok for you?. IMO it's lot of work for not that much. The user can easily fix this issue in the engine once the model is loaded.. @TehLeo good for you?. @jmecn Could you please rebase -i your PR so that it's only 2 commits one for each issue?\nDo you know how to use rebase -i?. Here is a nice an thorough explanation https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\nEdit: that's why I prefer 1 issue per PR because Github allows me to squash all your commits into one.\nBut for this PR I'd rather have 2 commits, one for each issue. So you have to clean up yourself ;). Perfect, nice work.\nI'll merge this PR once the build pass. No don't commit again I'll relaunch the build. I'm a bit confused reading the issue's comments. @pspeed42 is this PR ok?. Gamma correction won't work on android unless it's using opengl es 3. The setting is not exposed on purpose.\nMaybe we should allow it only if opengl version is es 3 but some test have to be done to ensure that it's working exactly the same than on desktop\nFor information we need those 2 things: \nthis extension\nhttps://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_framebuffer_sRGB.txt\nand srgb image formats\nhttps://www.khronos.org/opengl/wiki/Image_Format#sRGB_colorspace\n. https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/resources/Common/ShaderLib/Shadows.glsllib#L163-L166\nIt's used in Shadows.glsllib which is where the actual shadow code is.\nThe result should be visible though, but especially on low resolution shadowmaps.\n. Thank you ;). well for this one \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/animation/BoneTrack.java#L145\nnull values are not valid.\nfor this one \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/animation/BoneTrack.java#L168\nthe assertion should be after the if(scale!=null) indeed. @MeFisto94 this may impact the SDK, could you review please?. Maybe we'd need an error reporting in the asset manager... So that \"non fatal\" error could be properly reported.\nhere with just a warning, an editor cannot know that something went wrong and the user will never be notified.. uh wow... this escalated pretty fast.\nI agree there is a lack of consistency in the AssetManager on how to handle errors. For example it will load dummy textures when a texture is missing, but only when loading from a j3o.\nHowever (I'm not 100% sure of this) it will throw and exception when you try to load a missing image from a j3m.\nI think the point is to make sure the j3o is recoverable. \nBut this makes only sense at dev time already, because once your game is shipped you can't fix this.\nSo this PR actually raise a bigger question about how the asset manager should work.\nAlso re:  \"An editor would implement its own asset manager and catch the exceptions to do something nicer.\"\nIf every error is an exception you d'ont even need a custom asset manager, you can catch the errors.\nHowever if you want to recover from \"non fatal\" issues (like the one this PR is trying to fix), you have to go deeper than that. Many exceptions are thrown by the Loaders directly, aborting the loading process, So if you want to recover, you need a custom Loader too. And this can become very tedious.\nNote that the custom asset manager in the SDK doesn't do that, it just handles netbeans specific case and add some convenience methods to manage the cache (though I think that all cache clearing methods have been backported to the engine's asset manager)\nSo IMO, our choices are:\n- Make the asset manager only \"Game runtime\" oriented and throw exceptions whenever an issue is encountered (no recovery at all)\n- Make it super forgiving with error management and recovery processes, to ease up the development at the risk of introducing overhead and clutter, for something that is not needed at game runtime.\nNote that for now we are in a weird in between state.\n. Sorry slipped my mind. thanks. Nice.\nHowever I have several remarks: \n1. SSBO are ogl 4.3 only feature... it make it hard to use for the engines shaders. But at least users can decide to use them\n2. I feel this has a lot in common with Uniform Buffer Objects and maybe we could also implement them.\n3. The API to use them is not good at all:\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/java/com/ss/editor/test/external/SSBOSceneTest.java#L40-L54\nUpdating the byteBuffer directly is horrible, here you are mapping data (a color?) to light_1 in this shader https://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/resources/MatDefs/Unshaded.frag#L15-L19 but you have to know your binary....\nWe should have a java object with the same structure as you expect in the shader set as a materialParam, and the SSBO implem would handle the transformation to byte buffer.\nYour ShaderStorageBufferObject class should be called BufferObject. It would offer an API to set the params like set(\"varName\", value). Behind the scene, the BufferObject would update the underlying byte buffer.\nThen the Material should have a convenience method setBuffetObject (maybe with an additional param to differentiate SSBO and UBO ...)\nyour example would look like:\nBufferObject ssbo = new BufferObject(2); //2 is the binding\nssbo.set(\"light_1\", new ColorRGBA(0, 0, 1,1));\nmaterial.setBufferObject(\"TestSSBO\", ssbo);\n. Also more things.\nUBO and SSBO can be shared across shaders, so maybe it has no sense to set it as a material param, because as soon as you set it on a material it's available in all shader programs so in all materials.\nMaybe it should be set on the Renderer directly and bond as a g_ global parameter.\nAlso UBO and SSBO have a size limit in the spec. 16kb for UBO an 128mb for SSBO, though implems might provide more. There must be a way to query this value, this should be added to the limit enum of the renderer when UBO and SSBO are supported.\nAlso the BufferObject implementation should check that the byte buffer data doesn't exceed this limit and throw and appropriate error if ever.\nMaybe you should open this as a thread on the forum so that other devs can chime in and give their opinion on the implementation.\n. Rha... Sorry, the merge of your other PR introduced conflicts on this one.\nCould you rebase and fix the issues please?. I rebased the PR to be able to merge it... Somehow I failed to repush to this PR so I created another https://github.com/jMonkeyEngine/jmonkeyengine/pull/863\nIt's now been merged in master. Thanks for your work!. https://hub.jmonkeyengine.org/t/buffer-objects-in-jme/40054\nThere has been a long discussion here. Also the Pr stayed open several months... It's somehow too bad your objections comes 2 days after the Pr has been merged. \nThough nothing is written in stone. We can change how it's done. What do you suggest ? Maybe chime in on the forum thread. . :p... now there are 3.. I agree with this. \nThough maybe we should search for usage in the engine, and remove the methods where it's implemented (note that most remaining implementations are most probably not used, the jmeClone/cloneFields implementation is used). @shadowislord could you look into this PR please?. IMO Compact arrays shouldn't be cloned. They are pure immutable data and that's typically what you want to share between instances. Never got why they were cloned in the first place.\nAlso, not sure this PR worse the shot, these classes will be deprecated in 3.3, except for CompactArray.. mhh why did you close it?. ok I get why now ;). Hey thanks you.\nHowever as MeFisto94 said, it's best to make separate PRs for separate matters.\nAlso, it's imperative to keep the same file formatting as the original file, for overall consistency in the code base and to make the review less painful.\nHere it's hard to pick what actually changed among all the formatting changes.. @shadowislord is this good for merge?\nIMO it's ok, just a convenience method to not redefine the complete frustum.. @pspeed42 what do you think of this fix? \nrelated to https://github.com/jMonkeyEngine/jmonkeyengine/issues/797. Thanks\n. @shadowislord is that ok for you ?\nCan I merge this PR?. Thanks. Thanks. mhh... yeah may be that eclipse locks the file temporarily or some fancy stuff like this.. Could you provide a test case please. fixed in https://github.com/jMonkeyEngine/jmonkeyengine/pull/840\nThanks a lot. Man, I wish every one post issues like that.\nIf you're up for a PR, please do!\nI'll review it.\nThanks. fixed in  https://github.com/jMonkeyEngine/jmonkeyengine/pull/849. Thanks a lot. Damn you're right. Nice catch. I'll fix that . thanks. thanks\n. This is intended, the GlowMode.Object will not work with the PBR material.\nThe intended way is to use an emissive color and/or an emissive map on the material and use regular bloom in GlowMode.Scene. . Thanks. Hey, in the end I pushed another fix that uses a HashSet instead of a String. The choice of a String for this was a poor choice in the first place.\nhere is the commit\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/302e746a944f8f536fbb33fb059805e44d72c987\nThanks nonetheless.. I'll check that, imports are supposed to be \"deduplicated\". There must be an issue.\n. I'm gonna need a test case on this one. I can't reproduce the issue.\nThis change https://github.com/jMonkeyEngine/jmonkeyengine/commit/171007693bdc621318da8498c72470077234b9f3\nensures imports are injected once in the resulting shader.\nAre you using a prior version to 3.2.1 maybe?. \"(I think that an alphabetical order is used)\" Nope... there is no sort . They are inserted in the backward order they have been found in the nodes declaration. That may be what troubles you and what can cause an issue in the case of imports of imports. The reason for the backward order is moot though they could be inserted in the correct order. So the user would have more control. I'm gonna change that.\n\"then the programmer should be responsible to handle multiple importing with preprocessing annotations.\" Well I don't see it that way. This is typically something that I don't want the user to care about. It should just work. \n. What about them?. You'll have to explain the issue. If it's the fact that you can't import several times the same file, I can't reproduce it.. Well I can't tell for sure right now but it's should include it once the first time the import is found. Imports of imports are quite the corner case to me. We don't have a complex dependency system, just the possibility to import libs in shaders.\n. ok this is an issue I can look into.\nthe glsl lib loading is not done by the shader generator and I guess the imports are imported in place.\nThere must be the same issue with classic shaders btw.. Yep I guess it should be ok.. Great thanks!. ok I get the issue. The post shadow renderer renders shadows over the scene, modulateing shadows over what's already rendered. Without depth test the line is not really shadowed it's just rendered bellow the shadows.\nThis won't be fixed as:\n1. There no proper fix, only hack around the problem\n2. This won't happen with in pass shadows that will be in 3.3\n3. It's kind of a corner case. To me using IllegalArgumentException in these case is the right thing to do.\nI've seen other library throwing NPE when arguments are null I I find it completely dumb. Even in Java core there is this kind of stuff.\nTo me an NPE is the last ressort exception, meaning that's the one you got when the error was not anticipated at all.\nAn IllegalArgumentException seems the perfect fit when you fed a method with an illegal argument.\nSo IMO here wee should add this check in the method where it's missing.. Yes asserts for sanity checks could be nice.\nI remember having opengl errors failing with assertions, but not actually hindering the render.... Why is this needed?\n1. this is a NVidia only extension I wonder why it's in a fix for AMD cards\n2. It's an extention that allows you to fetch into cube shadow maps. Things we don't do at all, and if we did it wouldn't be in this shader.. I'm not sure why I set this method to final in the first place, I don't think it will make a huge difference.\nHowever, I'm really wondering why you need this method to no be final..?. Please remove this comment\n. I suppose not crashing and warning the user is alright. This could also be between \n```\nifdef HAS_POINTSIZE\nuniform float m_PointSize;\nendif\n```. Mhh this won't work. Here you are using the last geometry in the subgraph for every bones.\nYou need to read the BoneIndex buffer to check if the bone affects this geometry. This should be done in the Bone class. You should pass the entire list of geoms and let the Bone class find the one that it affects.. IMO not needed there. IMO that's a wrong assumption.\nWhat prevents a user from having several geometries with different transforms?\nI mean this is the very issue we are trying to fix. We assumes geoms wouldn't have transforms, now we assume they have the same transforms. It looks like the same mistake to me.\nAlso you're right about the second statement... A bone can affects multiple geoms. Making the assumption in this particular case, and picking the first/last one, is less likely to cause trouble. Thought it doesn't justify the fact that it's wrong when a bone affects only one geom.\n . I meant the targetGeomerty shouldn't be in SkeletonControl. It should only be in Bone and the target computed in Bone.\nEven with your implementation it's just a matter of picking the last entry of the targets list, we don't need an additional variable.. mhh wait... I did,'t realize but targets is actually a Mesh list not a Geometry list....\nMaybe we could change this and just call geom.getMesh(). True\n. Yes IMO it's acceptable.. Please fix the extra space in javadoc... you must have issues with your formater if any.. brackets always at the end of the line.\nMay sounds like nitpicking, but it's a matter of consistency in the code base.. Always put brackets even when there is only one statement in a if, for, while, or whatever.. wow format went crazy here, please fix. why the indentation??. ha ok ... yeah usually we format tabs as 4 spaces.. This one is not used/deprecated, I'd not include it in this batch. This one is not used/deprecated, I'd not include it in this batch. This one is not used/deprecated, I'd not include it in this batch. This one is not used/deprecated, I'd not include it in this batch. This one is not used/deprecated, I'd not include it in this batch. This one is not used/deprecated, I'd not include it in this batch. mhh... this new line serves nothing. Same, useless newline. Especially when it's the only change in the file. Same, useless newline. Especially when it's the only change in the file. Read the texture path, load the texture if it's relevant, else keep the texture null.. Don't save the textures data. save the texture path and load them in the read method\nAlso you'll have to do something about this https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-effects/src/main/java/com/jme3/water/WaterFilter.java#L230\nonly load the default textures if the texture2D variables are null.. Mhh.... why do we need this?. This may break j3o/j3f backward compatibility.\nSome people may have already saved post processes without the reflection scene. It would be nice to make sure those files still loads after this change. (to test it use the sdk and save a j3f file with a water filter, then try to load it in the engine). Yes I know, my point, is why do we need the flag? why not save it in any case.\nAlso... saving the scene here may be a problem for j3f in the SDK. Technically J3o works with object references, so an object data is effectively saved once even if it's referenced multiple times. But in case of j3f only the filter stack is saved, doing this you might save the whole scene into a j3f... Of course it's not a problem if you save all in one j3o...but the sdk doesn't do that.. You don't need to keep the texture key as a class field.. Don't do this, just fetch the TextureKey in the write method when saving.. Not sure why this is needed SafeArrayList is also a List. Why declare it as a SafeArrayList? List would do just fine. . Same here, use List. here again. \"terrain stuff\" I guess, not \"terrain staff\". I don't get it... Where is it used?\nAlso, What's the benefit over a classic ScheduledThreadPoolExecutor?. Ho .... for some reason github didn't expand the content of the file so I missed it.... mhhh so?\nMy point is, you can still declare it as a List then instantiate it as a SafeArrayList. SafeArrayList is just a List Implementation that provide low garbage generation on iteration. (@pspeed can tell more about it I guess).. where do you need it?\nthis is designed so that if you do a for(Object o:list) loop the iteration won't create an iterator but iterate over the array.. alright checked with Paul, and I'm wrong you need for(Object o:list.getArray())  for it to not create an iterator.... Yep ok this one is required. Won't that create a new instance of the wrapper on each frame ? . Why this? What's the use case?\nWhy not just let the user do enum.values()[i] and handle the bounds check?. I am strongly against this.\nThe material definition is external to the scene graph. By doing this you allow matdefs to be saved along with a scene and be modified inside it, without having a reference j3md. If this had been the intention in the beginning material and material def wouldn't be separate.\n. No. Matdef should be stored as j3md.. Ok... but what's the use case?. This has nothing to do with serialization. Generating a MaterialDef at runtime is just a matter of creating a new MaterialDef.. I am right in every case. It's been already discussed in the core team. Binary serialization should contain a scene. By doing this you open the special case where you could save only a materialDef in a j3o, which makes no sense and is very confusing for users. Save your materialDefs as j3md. There is even a serializer that does this in core. Look for J3mdExporter.. Then this has nothing to do in the engine.. You often tend to change things in the engine that are only very particular uses cases that wouldn't be needed in a regular game. This increase a lot the clutter of code in the engine and is wrong in many ways. If you have special use case work around them in your own projects.. Well if it's for serialization then it's not a good example. Doing it right would be to add the corresponding method in outputcapsule to save a list of Enum, and to save the values.\nSaving the ordinal is very bad practice as if the order changes one day into the enum it would break the old models loading. We already have this in other places in the engine and it's very bad. Let's not do the same mistakes over and over again.\nAnyway. This PR won't make it to core.. just set the assetName yes. that's the way it's intended to work. And save the material def as a j3md file.. Well then you have to think more about how you could redesign your editor so that you don't need to do that... I really don't get what you are doing.. Why would you save it before the user explicitly save it and provide a name?. You don't need it to implement a proper editor. And if you have to hack around in your code to not clutter the core engine, so be it.. I thought it was Issue 710?\nAlso maybe a more explicit name could help... we don't have direct access to github from code and issue 710 is not very explicit.. Please don't use empty if statements.\nI'd rather have an early return like \nif(value==null){\n    return;\n}\nif(value instanceof Savable){\n...\nOr at least put the if/else chain in a if (value != null) statement.\n. So? IDE are dumb, you are in control of your code.. If it's for serialization why not an empty constructor? the mesh data will be populated in the read() method so basically here you do the work twice and the first time with arbitrary input.. Not an issue, but so you know, star imports do not consume more memory or performance. It's really juste a matter of taste. Also it depends on the IDE settings, mine will use star import as long as there are at least 3 imports from the same package... Maybe at some point we should settle on this and make a clear statement in the contribution guilde line, and reject PR that don't follow the rule. I personally don't mind, but every single PR has a change in import style :p. Why do we need this?\nDefines and Imports can be defined in the shader node code... no need to do this in the shader node definition.. mhhh I'm not sure vertex texture fetch is available de facto with opengl2.0 or opengles 1.0.\nSo we may need to check this at generation time. and warn the user and provide a way to fallback to another solution if relevant.... Not sure why we need this? isn't the collection initialized when there is a world bind?\nSeems the setter in techniqueDef has only been implemented for this use... are you using it somewhere else?. well in that case why not just instantiate the list when it's declared instead of adding a setter?\n. I need to check this part, I know there is a logic in the global shader system with this, but I can't test for now.. Well... this one is though... because we can only know when we load the definition...\nI guess keep it like this. And let's leave the check to the user willing to use this feature... . the empty check is not necessary here. If it's empty it won't get into the for loop anyway.\njust go \"for (UniformBinding binding : getWorldBindings()) {\". I think he's talking about the logger that can definitely be static even in a multi threading context. Any news on this one?. uh what?\nWhat's the logic behind removing static final for constants?\n. missed this one.. and this one. and this one. and this one. and this one. mhhh... wouldn't it be simpler to do;\nstore.x = FastMath.nextRandomFloat();\n     store.y = FastMath.nextRandomFloat();\n     store.z = FastMath.nextRandomFloat();\n     store.normalizeLocal(); // <- random direction\n     store.multLocal(radius); // <- mult by the radius to be inside the sphere radius\n     store.addLocal(center); // <- relocate around the center.\nNo loop needed and the normalize ensure that the point is inside the sphere.\n. Uh yeah first the x2-1 should stay to allow negative values. But then just take \u00e0 random length between 0 and radius, and you break the uniformity. . Seems you left a carriage return. I'm not fond of having this in spatial.\nWorld transforms are supposed to be computed during the update loop, allowing users to set it directly feels like breaking this core concept. DirectionalShadowParameters implement it... not sure why it's needed though.\nThere is no other type of Shadow parameter and directional parameters are used with the type DirectionalShadowParameters So this interface is IMO useless. I'll remove it if you agree.\n. yes, done.. Could you please follow the formatting scheme of the rest of the engine? This line should be\nif (channel < 0 || this.getParent() == null || !velocityFromTranslation) return;  . What about the velocityFromTranslation flag?\nIf it's not here it's now completely useless.. ",
    "DannyJo": "Just looking at the referenced google code issue and this sounds similar to what we need to sort out to be able to list available monitors as well for LWJGL 3.x and GLFW later on.\n. I've had a look at this one and it is pretty straight forward. Basically the implementation would split the \"value\" string using spaces and then parse each token to see if it should alter the texture/texturekey in any way (I call these Texture Options). The last token in the list would be the actual path to the texture.\nHowever there is a potential for a defect here, a defect which I believe is already in place for the existing code as well for a specific use case.\nWhen a texture has a path that contains spaces eg. DiffuseMap: Models/Sign Post/Sign Post.jpg this kind of parsing would not work and the derived path to the texture in this case would be \"Post.jpg\" instead of the full path. Now the existing code has a similar issue in that it does a string.startsWith check to see if the \"path\" starts with \"Flip\", \"Flip Repeat\" or \"Repeat\" and then performs a string.subString(index) to get the texture path. Now if the texture path actually was \"Flip/SomeFolder/Texture.jpg\" the derived path would become \"/SomeFolder/Texture.jpg\".\nGood news is that this can now all be resolved with this added feature. When tokenising the path we would look for quoted strings as well, so for instance;\nDiffuseMap: MinTrilinear MagBilinear Flip WrapRepeat \"Models/Sign Post/Sign Post.jpg\"\nWould correctly parse out the different texture options as well as the correct texture path as it's escaped with quotes. The order of the Texture Options is also irrelevant, it will work either way.\nNow the downside to this is that existing materials which use spaces in the path would stop working unless quotes were added. This could perhaps be prevented if we checked for the number of valid Texture Options in the value first and if there are no matches we assume the value is the full path.\n. At the moment there is no \"split\" as such, there are some very basic checks to determine what to do and only in a specific order (Flip Repeat) is supported. You can't declare it using \"Repeat Flip\" for instance.\nCurrent code:\nif (texturePath.startsWith(\"Flip Repeat \")){\n                texturePath = texturePath.substring(12).trim();\n                flipY = true;\n                repeat = true;\n            }else if (texturePath.startsWith(\"Flip \")){\n                texturePath = texturePath.substring(5).trim();\n                flipY = true;\n            }else if (texturePath.startsWith(\"Repeat \")){\n                texturePath = texturePath.substring(7).trim();\n                repeat = true;\n            }\nHowever I think I might have a solution which is backwards compatible now and that actually allows for much more if it detects any of the new options. It also supports quoted paths using the new and old way. I've also added support for the reverse order (Repeat Flip) when using the old way just for extra niceness.\nTexture options would now include the following (order is irrelevant):\n- Min[Filter]\n- Mag[Filter]\n- Wrap[Mode]\n- Flip\nExample combinations:\nDiffuseMap: MinTrilinear MagBilinear WrapRepeat Flip \"some/path/to a/texture.png\"\nDiffuseMap: Flip Repeat \"some/path/to a/texture.png\"\nDiffuseMap: WrapEdgeClamp MagNearest MinNearestNearestMipMap \"some/path/to a/texture.png\"\nI believe I could create a pull request from this now unless anyone has any questions or feedback regarding my logic.\nAs an added extra we could log a warning if the old way has been detected and tell the user that it has been deprecated and that they should use the new format. At least we're telling people to fix it but we're not removing functionality right now.\n. OK, that's fine I will send a PR this way as soon as I can.\n. Not sure if this is what you're after @pspeed42 but I'm making a slight modification to this before I get it ready for a PR. It will now allow you to use the axis in setWrap() as well.\nThis line DiffuseMap: WrapRepeat_S \"path/to/texture.png\"\nTranslates to texture.setWrap(WrapAxis.S, WrapMode.Repeat);\n. Exactly, the normal WrapRepeat will ignore the axis call. Actually any WrapXXX will ignore the axis, but you can also use WrapXXX_AXIS to take the axis into account.\nWe can always add more WrapAxis enums as aliases but that's outside the scope of this issue I believe.\n. Pull Request #306 resolves this issue.\n. It says the build fails when building the SDK. This was happening in the clean updated code before I created this branch as well. Not sure if anyone else can shed some light on this, is there something I've missed or is/was master in a bad state?\n. I've reverted some build script changes and the build now appears to pass again. Should be good to go now.\n. That was never meant to be there in the first place, I should have deleted that row altogether really.\n. I used the TestPostFilters test case and just commented out the filter and made some temporary changes to BrickWall.j3m and Sign Post.j3m while testing the new code. Is that good enough or do you actually want something else? I could write a unit test for the J3MLoader which is probably the right thing to do really ;)\n. I have now added a unit test for the J3MLoader which tests that the old and new way of parsing texture parameters work as expected. The class could do with some refactoring as a whole though but that's a different issue altogether.\n. Any chance we could get this PR merged in soon @Nehon as I've foolishly merged this into my own master branch before I started a new feature branch for #314 and I'd rather not create a PR for that before this is merged in.\n. There are some changes in the build script to add some test dependencies and enable unit testing as a part of the build. Does that look wrong for some reason?\n. I've merged in master into this issue branch now so the pull request can be merged without any conflicts.\n. Nice stuff. Might not be a big deal but in the second constructor in SpotLight.java you get double calls to computeAngleParameters().\n. Is this not the same as PR #302 ?\n. I think this sounds like a bug fix to be honest and it shouldn't break code unless you've set the initial up vector to something other than Y and then use Q and Z to move along the Y axis anyway which to be honest sounds a bit odd to be doing. I'm guessing @g-rocket actually uses a different up vector for the fly cam and that's why this has come about.\nThis pull request has my vote unless a core dev can spot an error in that one line of code that has changed.\n. I'm currently looking at this and the conclusion is to create a new module (jme3-lwjgl3) which can be dropped in place of the jme3-lwjgl module in order to use the lwjgl 3 renderer.\nSo far everything is going OK, I've got the GLFW window running and keyboard and mouse input are working as expected. Joysticks still need some work. Audio seems to be fine as well.\nI also need to check that the offscreen rendering is working and test the SDK with it to ensure the canvas rendering is OK.\n. This work has now been merged into master as of pull request #340 \n. Is it this page?\nhttp://wiki.jmonkeyengine.org/doku.php/sdk:welcome:3_0\n. Good spot, although with the recent version changes from @shadowislord one might think the default could come from https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/system/JmeVersion.java\n. Sounds like car.getControl(AnimControl.class) returns null for some reason. Might be an issue with the model Textures/MyModel/arm.mesh.j3o. It will be hard to replicate without seeing the model file.\n. Excellent. It shouldn't be very intrusive with these changes now, basically just a new module which can be excluded for most people. I will of course be testing it myself in my project to see how it goes and I'm sure @phr00t will be interested in this one way or another.\n. How about creating an immutable version of the Vectors.\n. Oh yes, forgot about that. Back to checking each frame then.\n. I currently have an implementation of this on my machine. See the following videos for what it looks like.\nhttps://www.youtube.com/watch?v=8Dd_T1DyQjI\nhttps://www.youtube.com/watch?v=_ABwNzVbekA\nThe problem I now face is how to get this to fit nicely into the existing font rendering design. One problem is that I currently have a new shader for rendering using distance fields as the current one uses Unshaded.j3md and I'm not sure I want to introduce distance fields into Unshaded. Although distance fields would work on normal textures as well but that's another issue altogether.\nPerhaps I will have to create an extension to BitmapFont and BitmapText which would allow for the additional settings. \n. The 3.1 snapshot jars are available in the Maven repo, just go there and download them or better yet, just point your Gradle or Maven dependency management to them.\nThey are versioned as 3.1.0-SNAPSHOT\nhttp://updates.jmonkeyengine.org/maven/\n. Was there ever a forum post for this or a simple isolated test case to be able to reproduce?\n. Well, the simple answer is that the LwjglRenderer in 3.0.10 does not support using that wrap mode on a texture.\nExtended answer is that in 3.1 WrapMode.MirrorBorderClamp and most others are deprecated so you should no longer be using it.\nFor supported modes in 3.0.10 see this link.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/3.0/engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java#L1724\n. This has been implemented in the commit listed above, closing issue.\n. Slightly confused by this implementation, but is it right that in order to use this new feature you have to extend the TGALoader and override the getNewWidth() and getNewHeight() methods in order to resize the texture? If so, you are essentially resizing every texture that's being loaded by this loader regardless if it's smaller or larger.\nOn another note I thought the Graphics api was notoriously bad at resizing images when resizing by a large amount of pixels (quality wise I mean).\nWhat is your business case for this if I may ask? Why could you not just resize the texture before shipping it with your application in the first place?\n. So this means you will be shipping larger textures and then downscaling in your code at runtime/load time?\nDoes that not also mean you will be shipping several more megabytes of data for the client to download than what your application will be using?\nOr are you simply saying that you ship large textures with the application and then the users can select what quality they want in the application?\n. That's fine, however the LWJGL2 implementation uses Display.sync() which no longer exists. Should we just write our own implementation of that using some kind of wait mechanism?\n. Fair enough, I will change that.\n. Sure thing, I suppose we don't really need GLFW for timering.\n. Basically the 3.0.0b has some api changes in it to do with creating the GL capabilities and since this is more of an experiment module for now I thought having the 3.0.0b snapshot would be OK in order to get those api changes in place.\n. Why 120? Feels a bit magic, could we put it as a constant with a proper name?\n. ",
    "dokthar": "from googlecode : Add 3d widgets to move/resize etc\nThose widgets are already into the sdk.\n. This issue was moved to jMonkeyEngine/sdk#25\n. This issue was moved to jMonkeyEngine/sdk#26\n. This issue was moved to jMonkeyEngine/sdk#27\n. This issue was moved to jMonkeyEngine/sdk#28\n. This issue was moved to jMonkeyEngine/sdk#29\n. This issue was moved to jMonkeyEngine/sdk#23\n. This issue was moved to jMonkeyEngine/sdk#30\n. This issue was moved to jMonkeyEngine/sdk#31\n. I close this request, i'll make a new branch to avoid further conflict (with the reverted commit) \n. ok, but i just was afraid of having trouble while trying to merge a branch on which i doesn't want the reverted commit\n. Btw adding a cloneForSpatial(Spatial spatial) into the LightControl would be very appreciate into the scene editor. \n. You are all right. I'll make some modification to not break the API and the serialization.\n. You are right the vector isn't serialized.  So i could put a try/catch for the \"read\" and maybe i can write a float instead of a vector if x,y and z are equal.\n. but like this is okay to go from jbullet -> bullet-native, the other way will break if you used theses features.\n. just FYI, the forum thread is :  http://hub.jmonkeyengine.org/t/jmonkey-3-1-native-bullet-bug/33595\n. I close this issue, resolved by : 7e0bd4a .  ( PR #333 ) \n. (yeah you see two commit here because i did a mess with the first one, tried to resolve conflict ... ouch ) \n. Yes, i'll add this when i have time.\n. I could also move the code for collision of sphere v. sphere (and v. cone) into Intersection.java , what do you think ?\n. @shadowislord I agree that's feel strange to put the sphere v. cone collision code inside Intersection, as it's need a lot of parameters (already computed inside the cone light). \nAlso I found that the collision code used for sphere v. sphere was already wrote (inside Intersection), so i use this one.\n. Don't merge this yet, one test case is wrong, i am trying to fix this.\n. @shadowislord : I don't have more changes comming so you can review this.\n. The button you have is the paint tool. The tool tip is wrong and already been corrected ( #336 )\n. this is not a bug, as kwando said, this is caused by z-fighting. \nlook at the box constructor doc :  http://javadoc.jmonkeyengine.org/com/jme3/scene/shape/Box.html#Box%28float,%20float,%20float%29\n. @grizeldi don't go crazy on this, you'll have to look into scenecomposer's tools (some stuff i worked on  ;) ).\n. It's not just you : http://downforeveryoneorjustme.com/jmonkeyengine.org/\nyou can go on the forum, https://hub.jmonkeyengine.org\n. (alternatively) you could also change at https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java#L394\n+ setDamping(objectId, getLinearDamping(),angularDamping);\n- setAngularDamping(objectId, angularDamping);\n. there are not typos but good programming style ;)\n. Looks better this way, better ask @normen .\n\nwhy it was that way originally\n\ncopy & past\n. no change for windows build ?\n. In the toString() you added a ternary operator but in one case there is no \"\\n]\" at the end of the string.\nElse it look good to me ... although i dont know gl stuff.\n. you should check your parenthesis ... \nIt should look like this : \n``` java\n(blendMode.equals(BlendMode.Custom)? \"\\ncustomBlendFactors=(\"+sfactorRGB+\", \"+dfactorRGB+\", \"+sfactorAlpha+\", \"+dfactorAlpha+\")\":\"\")\n+\"\\n]\";\n```\n. This issue is very strange.\nCan you reproduce this issue with the last version of the SDK ? xor with your other card ? ..ect\nDo some kind of \"cross-checking\" so we can have a better idea on where the issue come from.\n. Logging is done with the standard java.util.logging you can see an example in the Node class.\n. ",
    "stephengold": "This issue has been bugging me for some time. Unfortunately, I don't see any way to address it without recalculating the bound on every frame --- a big hit to performance.. The max extent of all frames is a good solution for keyframe animations using the default animation channel. But that would leave closely-related issues when custom animation channels are used to blend animations together, or when a user transform is applied to a Bone. My usual workaround in these cases is to disable scene-graph culling.. The OP reported that opening any of the sky DDS images in the test data caused a runtime exception. The current SDK (v3.2.1-stable-sdk3) recognizes DDS images as binary files but offers to open them in a text editor. If the user consents to open them, there is no crash.\nWhile it would be nice to be able to view DDS images in the SDK, this doesn't seem to me like a serious defect. I'll downgrade this to an enhancement.\n. I'm curious why the OP wanted to go through Nifty instead of invoking InputManager.setCursor() directly.. I tried to reproduce this issue in current master branch (v3.3-6666 to be precise) by adding a PhysicsGhostObject to the TestWalkingChar test. The CharacterControl passed through the ghost object without impediment.  I therefore believe this issue was fixed at some point, probably on the Bullet end.. I believe that the DesktopAssetManager uses streams. Perhaps this is an Android-only issue?. Recent versions of Nifty (such as v1.4.2) have built-in support for colored text (using the \"color=\" attribute on text tags, for instance) so perhaps this is no longer an issue.. 5 years later, I'm still working around this issue.. I'm having difficulty reproducing this issue using the pastebin test case and current master branch. I don't see anything weird. Commenting out the bloom filter has no effect on the viewport layout.\nI suspect this issue might have been related to issue #357, which was fixed in 2017.. I'm having difficulty reproducing the issue in current master branch. The following test code succeeds with jme3-bullet:\npublic void simpleInitApp() {\n        CollisionShape capsule = new SphereCollisionShape(1f);\n        PhysicsRigidBody body = new PhysicsRigidBody(capsule, 1f);\n        body.setLinearDamping(0.03f);\n        body.setAngularDamping(0.04f);\n        assert body.getLinearDamping() == 0.03f;\n        assert body.getAngularDamping() == 0.04f;\n        stop();\n    }\nThe issue may have been fixed in Bullet end.\nAnyway, I'm closing the issue.. I believe this issue was resolved in 'master' branch by the following commit:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/commit/e776967c2361ccc3c35c64f61c4130df8bab6588. Current master branch yields an exception and stack trace:\nDec 15, 2018 10:49:22 PM com.jme3.scene.plugins.ogre.MeshLoader load\nWARNING: Cannot locate Models/MonkeyHead/MonkeyHead.material for model Models/MonkeyHead/MonkeyHead.mesh.xml\nDec 15, 2018 10:49:22 PM com.jme3.app.LegacyApplication handleError\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\ncom.jme3.asset.AssetLoadException: An exception has occured while loading asset: Common/Materials/RedColor.j3m\n    at com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:261)\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:373)\n    at jme3test.export.TestAssetLinkNode.simpleInitApp(TestAssetLinkNode.java:96)\n    at com.jme3.app.SimpleApplication.initialize(SimpleApplication.java:220)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.initInThread(LwjglAbstractDisplay.java:130)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:211)\n    at java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: Material instances must be loaded via MaterialKey\n    at com.jme3.material.plugins.J3MLoader.load(J3MLoader.java:797)\n    at com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:259)\n    ... 6 more. Still broken in current master (jMonkeyEngine 3.3-6666).\nIn the imported model, the Node with the AnimControl is actually named \"Cube\" not \"TestAnim\" and the animations are actually named \"Action\" and \"Action.001\" not \"TestAnim\". Both errors can easily be corrected.. Fixed in master.. See also https://github.com/jMonkeyEngine/sdk/issues/96. I believe this can be closed.. As I noted on the Forum today:\nhttps://hub.jmonkeyengine.org/t/solved-aspect-ratios-of-cameras-in-a-split-screen-render/38922\nCamera.resize() with fixAspect=true doesn't take the camera's viewport dimensions into account when calculating what the frustum's aspect ratio is. Since the renderer frequently invokes resize(w, h, true) on user cameras, the resulting renders appear squashed unless\nviewPortTop - viewPortBottom == viewPortRight - viewPortLeft\nThis turns out to be the root cause of issue #357. I ran the test code (submitted by slyh on Sep 28, 2015) with jME 3.1.0-stable. I reproduced the reported issue, then patched Camera.resize() and verified that the patch resolved the issue.. This looks like a one-line fix.. Thank you for the feedback, Paul. I've reverted the fix but left the issue open for easy reference.. I was able to reproduce this issue in current master branch.. This looks like the same issue as #740 aka #884.\nI tested on current master branch, and (after substituting \"Models/Sinbad/SinbadOldAnim.j3o\" for \"Models/Sinbad/Sinbad.mesh.xml\") I was able to run the 15 October 2015 test case on Native Bullet without a crash.. The PR has been merged.. On the forum, @kvainer indicated this bug was still present in JME 3.1. Would someone please check whether it's present in JME 3.2.1 and/or 'master'?. I reproduced the issue with JME 3.1.0-stable, but was unable to reproduce it with 3.2.0-stable or 3.2.1-stable. Apparently the memory leak was fixed between bullet-2.82-r2704 (used in JME 3.1) and bullet3-2.86.1 (used in JME 3.2).. I tested the original testfiles.zip from 7 January 2017 with JME 3.2.0, and it worked perfectly with both Native Bullet and JBullet. Not sure when or how it was fixed.. I'm okay with the change as proposed. Other approaches include: (a) preserve the existing behavior by setting the limits to 0.9801 and 1.0201 OR (b) tighten the limits to something more reasonable, like 0.9999 and 1.0001 OR (c) deprecate the method and add a new one with epsilon as a parameter.\n. Anyone using this method is probably making a mistake. I'd eventually like to see it deprecated. Why not now?But if we're keeping it in 3.1, then we shouldn't change the behavior just for efficiency.. The fix is to remove this method from Vector3f.. It's difficult for me to determine what's going on with the line endings. Not sure if it's my editor, my local repo, or GitHub that's changing them. But one of those three insists on adding carriage returns to Vector3f.java . Very embarrassing!. \"git config --get core.autocrlf\" returns \"true\" for my repo. When I do \"git config --list\" on my repo, I don't see a setting for \"core.autocrlf\" so it's probably using the default, which for Windows7 is probably \"true\". I'll set it to \"input\" and try again.. It turns out the value I wanted was \"false\". I'm ready to close this request and start a new one.. It took me multiple tries to get the line endings right. Is this an issue?. Happy now?. Is there a test case?. It's odd that PR #662 was closed but this issue was left open. If the consensus is not to make TempVars closeable, then this issue should be closed.. At least a couple of these can still be fixed for v3.2.2 .. I'm unsure what to do about parts C thru E, so I'll unassign myself.. I moved the target selection code from SkeletonControl to Bone. SkeletonControl's target list now holds geometries instead of meshes, and Mesh has a new public method to test for animation by a particular bone. I don't have a model with multiple transforms to test this new code, but it appears to work for Jaime and Oto, at least.. (1) When you refer to \"the testcase\" do you mean TestAttachmentsNode?\n(2) I'm curious about the structure of the scene graph in QB. Where is the SkeletonControl that controls the player's hand bone relative to the geometry that visualizes the torch?. I built a recent (c00407d) version of the 'master' branch of jMonkeyEngine. When I ran TestAttachmentsNode, the red box was visible and correctly positioned. I suspect the different behaviors we're seeing are related to our build procedures. You might try again with a fresh clone of jMonkeyEngine.\n. @AlrikG, does the hand model set ignoreTransform=true ?. Fixed in 'master'.. Thanks for the fix.. I'm curious why there hasn't been a pull request.\n. The change doesn't resolve my issue. Now the bones are all drawn extending in the local (1, 1, 1) direction, which is even less useful than having them drawn in the +Y direction.. To make AbstractShadowFilter cloneable? Does this mean there's going to be a v3.1.1?. https://hub.jmonkeyengine.org/t/solved-aspect-ratios-of-cameras-in-a-split-screen-render/38922?u=sgold. Fixed in master by PR #748 at commit 082fea9 .. Fixed in 'master'.. Thank you!\n. I'm pretty sure setBindingPose() wasn't meant to be used this way. All the transforms in the animation bone tracks are relative to bind pose, so changing the bind pose without updating those tracks will alter the animations in ways that you might not anticipate.. My suggestion would be to modify the animations, not the bind pose. The Wes library has utilities to do exactly that.. I managed to reproduce the issue using native Bullet on Windows 7, so it's not a unix-specific issue. Here's the console log:\n```\n\nA fatal error has been detected by the Java Runtime Environment:\n\nEXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x000007feddf11a5f, pid=7088, tid=0x0000000000001b5c\n\nJRE version: Java(TM) SE Runtime Environment (8.0_111-b14) (build 1.8.0_111-b14)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode windows-amd64 compressed oops)\nProblematic frame:\nC  [bulletjme.dll+0x21a5f]\n\nFailed to write core dump. Minidumps are not enabled by default on client versions of Windows\n\nAn error report file with more information is saved as:\nS:\\Git\\master\\jmonkeyengine\\jme3-examples\\hs_err_pid7088.log\n```\nI verified that TestRagdollCharacter still works with jBullet.. The issue may be related to bones such as \"Sheath.R\" for which no vertices have weights above the threshold (0.5). In this case, an empty array is passed to the HullCollisionShape constructor, resulting in an empty btConvexHullShape.\nPerhaps Native Bullet's stepSimulation method can't cope with an empty btConvexHullShape.. I've found a fix, so I'll assign this issue to myself.. The crash no longer occurs in 'master' branch.. I'll verify. Thanks!. Yup. The warnings are gone as of hash c17c3e9. Thanks again!. Yes, it's a corner case. Also, I expect that attach nodes will be deprecated when SkinningControl supplants SkeletonControl.. I'm willing to work on a fix, then. Taken!. I tested the fix. Looks good.. Nehon also thought the name was weird, so he did a follow-up commit to eliminate the new Spatial method. See hash 824e99c in master.. Fixed in 'master' branch.\nThe fix averts many potential issues with Spatial.localtoWorld(), Spatial.worldToLocal(), Spatial.getWorldRotation(), Spatial.getWorldTransform(), and so forth.\n. Actually, while pull request #745 corrected the behavior of collideWith() (which relies on the cachedWorldMat field) it did not alter the behavior of Spatial.localtoWorld(), Spatial.worldToLocal(), Spatial.getWorldRotation(), or Spatial.getWorldTransform(), all of which rely on the worldTransform field. \nThe worldTransform field is updated without regard for ignoreTranform. I suspect this was an oversight. I've coded a fix for worldTransform and will submit a separate PR for review.. I'm OK with this change, and am available to integrate it, once wiser heads have reviewed it.. Fixed in 'master' branch by pull request #750 (commit hash 94e828f).\n@kruchinin-pavel please indicate whether or not the issue is resolved to your satisfaction.. Since the user who opened the issue has been unresponsive, mark this as closed.. If b ranged from -1 to 1, the formula would be sqrt(1 - bb).\nBut since b ranges from 0 to 1, I substitute B = 2b - 1 into sqrt(1 - BB).\nThen algebra happens:\n1 - BB = 1 - (2b - 1)(2b - 1) = 1 - (4bb - 4b + 1) = 1 - 4bb + 4b - 1 = -4bb + 4b\n            = 4(-bb + b) = 4(b - bb)\nAnd of course the 4 gets pulled out of the radical as a 2.... Fixed in 'master' branch at hash=47a46a8.. I tried reproducing this issue in a recent master (JME 3.2) build and was unsuccessful, so maybe it doesn't need fixing.. I can confirm that this is fixed in JME 3.2.0-alpha2. Fixed in 'master'.. Thank you for your attention to this matter.. https://github.com/jMonkeyEngine/jmonkeyengine/commit/f7181c38dc1720d3df491b7ccac048ffc59817d6\nRemoved all xxx15.frag shaders and used GLSLCompat to have the same shader whatever version it's used for. @pspeed42  pointed out that what I want is actually a contrast filter. From digital photography, I'm accustomed to adjusting contrast using a gamma function. For reference:\nhttps://en.wikipedia.org/wiki/Image_editing#Gamma_correction\n. In addition to the deprecation warning at compile time, I get an AssetNotFoundException at runtime (in JME 3.2.0-alpha1):\nDec 03, 2017 5:30:55 PM jme3utilities.sky.test.TestGlobeRenderer simpleInitApp\nINFO: jme3-core version is \"jMonkeyEngine 3.2-alpha1\"\nDec 03, 2017 5:30:55 PM jme3utilities.sky.test.TestGlobeRenderer simpleInitApp\nINFO: SkyControl version is \"master 0.9.6+1\"\nDec 03, 2017 5:30:55 PM com.jme3.app.LegacyApplication handleError\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\ncom.jme3.asset.AssetNotFoundException: Common/MatDefs/Post/GammaCorrection.j3md\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:370)\n    at com.jme3.material.Material.<init>(Material.java:108)\n    at com.jme3.post.filters.GammaCorrectionFilter.initFilter(GammaCorrectionFilter.java:68)\n    at com.jme3.post.Filter.init(Filter.java:251)\n    at com.jme3.post.FilterPostProcessor.initFilter(FilterPostProcessor.java:189)\n    at com.jme3.post.FilterPostProcessor.reshape(FilterPostProcessor.java:500)\n    at com.jme3.post.FilterPostProcessor.initialize(FilterPostProcessor.java:166)\n    at com.jme3.renderer.RenderManager.renderViewPort(RenderManager.java:1074)\n    at com.jme3.renderer.RenderManager.render(RenderManager.java:1150)\n    at com.jme3.app.SimpleApplication.update(SimpleApplication.java:253)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:151)\n    at com.jme3.system.lwjgl.LwjglDisplay.runLoop(LwjglDisplay.java:197)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\n    at java.lang.Thread.run(Thread.java:745). Does JME 3.2 provide a contrast filter, or must I write my own?. Why not simply un-deprecate the existing filter and rename it to ContrastAdjustmentFilter or something similar?. With the pre-existing code, the class-cast exception typically occurs during RenderManager.render(), too late for the application code to catch it. But perhaps that's preferable to silently correcting the type mismatch.. Sure, I'll do it that way.. Thanks for followup. I'm sorry I didn't implement your suggestion promptly. I've been busy with family visiting this week.. Now we need fixes for LWJGL3 and JOGL, assuming they're still supported.. Yes!. I looked at LWJGL3, but I don't understand it well enough to code a fix for it.. While a stable version 3.2 of the Engine is available, it's not (by itself) a \"complete game development suite\". That phrase refers to the SDK, not the Engine.\nI think this change should wait until there's a stable version 3.2 of the SDK.. There are plenty of NetBeans plugins available. Good point about asset packs, however.. I think this change should wait until there's a stable version 3.2 of the SDK.. I'm pretty sure that would work, and it would be a cleaner solution. It would break any custom MouseInput subclasses, of course.. I'm fine either way, just waiting to hear from @nehon to decide whether to rework this PR.. @gouessej Any insight into this issue?. I'm in agreement with @pspeed42 that PhysicsCollisionObject should override cloneFields(). Unfortunately, PhysicsCollisionObject currently does not implement JmeCloneable.\nIf RigidBodyControl implements JmeCloneable, then so should PhysicsRigidBody (both versions) and PhysicsCollisionObject (both versions).\nAnd since the user object could be either a Spatial or a PhysicsBoneLink, then PhysicsBoneLink should also implement JmeCloneable so that its userObject field can be cloned in PhysicsCollisionObject.cloneFields().. If you haven't already, try launching in full-screen mode and then pressing the \"P\" key.. After further investigation, it seems that the exception isn't raised unless the initial display mode has a color depth of 16 bits per pixel. If the initial mode has a color depth of 32 bits per pixel, the switch to windowed mode goes smoothly.. This does seem connected to issue #801. But in 801, there's no exception raised.. Need to re-test with both LWJGL v2 and v3.\n. I see a similar issue if I attempt to change the display's MSAA setting using AppSettings.setNumSamples().. I wonder if this issue depends on the LWJGL version used.\n. Occurs with both v2.9.3 and v3.1.6 of LWJGL.. A possibly relevant topic at the Forum:\n    https://hub.jmonkeyengine.org/t/problem-with-gui-z-order-after-graphics-restart/40985. The code looks plausible. Has the change been tested?. This morning it occurred to me that RenderQueue.ShadowMode.Receive might not be the best setting for a model, since it doesn't include the capability to cast shadows.. An excellent idea.\n. And thank you, @thoced for your contribution to the project!\n. Thanks. I'll recheck for visible effect.. After gafiating for several months, I finally ran that check. I don't see any difference between setEdgesThickness(1) and setEdgesThickness(10), even in a closeup with a low-resolution shadowmap.\nHere are images:\n\n\nAnd here is the source code:\n```\npackage mygame;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.font.BitmapText;\nimport com.jme3.light.DirectionalLight;\nimport com.jme3.material.Material;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.math.Quaternion;\nimport com.jme3.math.Vector3f;\nimport com.jme3.renderer.queue.RenderQueue.ShadowMode;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.Spatial;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.shadow.DirectionalLightShadowRenderer;\npublic class Main extends SimpleApplication {\nDirectionalLight dl = new DirectionalLight();\n\npublic static void main(String[] args) {\n    Main app = new Main();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    setDisplayFps(false);\n    setDisplayStatView(false);\n    flyCam.setEnabled(false);\n    cam.setLocation(new Vector3f(-0.69f, 2.08f, -0.77f));\n    cam.setRotation(new Quaternion(0.256207f, -0.653331f, 0.2510693f, 0.666693f));\n\n    loadScene();\n\n    DirectionalLightShadowRenderer dlsr;\n    dlsr = new DirectionalLightShadowRenderer(assetManager, 256, 3);\n    dlsr.setLight(dl);\n    dlsr.setShadowIntensity(1f);\n    //dlsr.setEdgesThickness(1); // minimum value\n    dlsr.setEdgesThickness(10); // maximum value\n    viewPort.addProcessor(dlsr);\n\n    BitmapText text = new BitmapText(guiFont, false);\n    text.setColor(ColorRGBA.Red);\n    text.setSize(40f);\n\n    int thickness = dlsr.getEdgesThickness();\n    String message = String.format(\"thickness = %d\", thickness);\n    text.setText(message);\n    float centerX = (cam.getWidth() - text.getLineWidth()) / 2;\n    text.setLocalTranslation(centerX, cam.getHeight(), 0f);\n    guiNode.attachChild(text);\n}\n\nvoid loadScene() {\n    dl.setDirection(new Vector3f(-2f, -1f, -1f));\n    rootNode.addLight(dl);\n\n    Material white = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\n    white.setColor(\"Color\", ColorRGBA.White);\n\n    Box cube = new Box(1f, 1f, 1f);\n    Spatial box = new Geometry(\"box\", cube);\n    box.setLocalTranslation(2f, 4f, 2f);\n    box.setMaterial(white);\n    box.setShadowMode(ShadowMode.Cast);\n    rootNode.attachChild(box);\n\n    Box slab = new Box(10f, 0.1f, 10f);\n    Spatial ground = new Geometry(\"ground\", slab);\n    ground.setMaterial(white);\n    ground.setShadowMode(ShadowMode.Receive);\n    rootNode.attachChild(ground);\n}\n\n}\n```\n. Now I'm convinced that the feature works. Thank you!. Thank you!. In that case I'd like to close the issue. Any objections?. Hearing none.... I thought 3.2 allowed tracks without translations, for instance when importing from glTF.. I've seen glTF import generates spatial tracks without translations. Are bone tracks different in this regard?. I'll make a separate PR.. Thanks. I'll generate a separate PR to get rid of all uses in the Engine.. Many of the people with integration rights are \"on leave\" from the JMonkeyEngine project. I'm relatively inexperienced, and I don't know enough about VR to decide whether this PR should be integrated or not. Same thing with PRs #932 and #937.. I also don't know enough about AWT/SWING to decide whether this PR should be integrated or not. You might request integration at the Forum, or from specific members of the project team.. BoneTrack isn't even JmeCloneable, so it's setting a bad example for others.. PR#830 should've fixed this.. I don't want SpatialTrack.clone() to perform a deep clone of the track, because that would mean cloning the track spatial (plus all its controls and children). If the user wants a clone that deep, they should provide their own cloner.\nAs for CompactArray, I see it's immutable only after serialize() has been invoked. If invalid==false, jmeClone() could return an alias and cloneFields() could be a no-op. Better?\nPerhaps we shouldn't even allow cloning a CompactArray before it's been serialized.\nEven if animation tracks are deprecated in 3.3, I expect they'll continue to be used for some time.. I see 2 circumstances in which one might want to clone a track. One is when a model or scene is being cloned and deep cloning is desired. For that one needs an external cloner. The other circumstance is when only the track is being cloned, and the goal is to have 2 tracks referencing the same spatial. The clone() method is the obvious interface to use in the latter situation.\nNever cloning the track spatial in cloneFields() would break the deep cloning situation. Nulling and restoring the field in clone() would work great, but it would make the code less clear than in the current PR.\nI'm not sure what indexing in the cloner means. Say more about that, please.\nAlso, Paul, I'd like your opinions on cloning compact arrays. Should they be implement cloning at all? And if so, should cloning be optimized away if invalid==false?. Great tip, Paul. I rewrote SpatialTrack.clone() to use setClonedValue() as you suggested. Thank you!\nAfter studying the CompactArray class again, I don't consider its instances immutable, not even when invalid==false. Nothing prevents CompactArray.add() being called when invalid==false. Even if JME treats CompactArray as pure immutable data, but there's nothing stopping a user from cloning an array and then adding to one instance or the other. So I think it's appropriate to clone the CompactArray fields when cloning a track.\nPlease re-review this PR, guys.. I can sympathize! And thanks for contributing.\n. I don't believe this is the right fix for the issue. I'd like to close this PR without integrating it.. This PR is being discussed for possible inclusion in JME v3.2.3:\n  https://hub.jmonkeyengine.org/t/next-release-s-of-the-engine/40856/126. Yes, this would be helpful.. Deployments of JavaDoc JARs should happen automatically, now that we have \"buildJavaDoc = true\" in our gradle.properties file. Among other things, this adds \"archives javadocJar\" to the artifacts in the common.gradle file, and that should cause bintray.gradle to deploy those JARs.\nIf so, give @shadowislord credit for the fix.\nThe fix still needs to be propagated to the v3.2 branch in case there's a JME 3.2.2 release, so I'll leave the issue open for now.. JavaDoc JARs for v3.2.2-beta1 were successfully deployed to JCenter, so I think this issue can be closed.. While I agree this is a good catch, it looks to me like preTick_native() is never invoked, so rewriting it will have no effect. The same goes for PhysicsSpace.postTick_native(), addCollision_native(), needCollision_native(), addCollisionEvent_native(), and notifyCollisionGroupListeners_native().\nI recommend removing all this dead code.. Correction: those methods are invoked from native code, so they can't be removed.. Thanks. I forgot to do so.\n. It's been 2 months. If there's no objection, I'd like to rebase and merge this PR.. This appears to be an SDK issue, not an Engine issue. To keep things organized, I've opened SDK issue 172 to replace this one.\nhttps://github.com/jMonkeyEngine/sdk/issues/172 . I'm unsure whether to include this in v3.2.2 . How risky is the fix?. In my application, I worked around the issue by attaching all spatials with depth test disabled to a new view port that shares the main view port's camera.. I'm investigating this one, but don't have much of a handle on it yet.. Well, I've made some progress.\n\nSo far, the issue only shows up with \u22652 hinged balls and \u22651 free-falling balls:\nMultiple hinged balls by themselves are fine.\n1 hinged ball plus multiple free-falling balls is fine, and the free-falling balls fall straight down.\n\nBut with 2 hinged balls plus a free-falling ball, not only do the hinged balls go crazy, but the free-falling ball doesn't fall straight down.\n\n\nThe issue was apparently introduced into the jme3-bullet-native module between version 3.1.0-stable (which was based on bullet-2.82-r2704) and version 3.2.0-alpha1 (which was based on bullet3-2.86.1).\n\nIf I run Daniel's test case using jme3-bullet-native at version 3.1.0-stable and all other modules at version 3.2.1-stable, the test code works fine with 2 hinged balls plus a free-falling ball.\nIf I run Daniel's test case using jme3-bullet-native at version 3.2.0-alpha1 and all other modules at version 3.2.1-stable, 2 hinged balls plus a free-falling ball, the hinged balls go crazy.\n\nI'm not sure why the native Bullet version was changed between JME 3.1 and JME 3.2 but it might be a good idea to revert it.. The Bullet version was changed via pull request #698.. Also changed by pull request #528.. According to the Bullet Manual:\n\"Constraint act between two rigidbodies, where at least one of them needs to be dynamic.\"\n\nHowever, the kernel of this issue seems to be that Bullet constraints don't work well unless ALL bodies connected to the constraint are dynamic. The number of constraints isn't the issue.\nWhile I appreciate the ingenuity of riccardobl's proposed fix, a better solution, I think, would be to document this limitation and expose single-ended constraints in jme3-bullet. But that's still not ideal because it would introduce yet another incompatibility between jme3-bullet and jme3-jbullet.\nIt's also conceivable that the issue has been fixed in Bullet. I'll explore this possibility.. I'm seeing evidence that simply upgrading to Bullet v2.87 will resolve the issue. I'll generate a pull request.. The upgrade resolved the issue. The hard part was getting Travis and AppVeyor to build new native libraries.\nFixed in master branch.. The issue is now resolved for native Bullet (jme3-bullet) in both the master and v3.2 branches. I just noticed, however, that the TestIssue877 app fails for JBullet (jme3-jbullet) in both master and v3.2. Yet DanielMartensson used JBullet as a workaround ... ??. Lacking source code, I have no clue how to fix JBullet.. Occurs with both v2.9.3 and v3.1.6 of LWJGL.. Thanks for pursuing this. Glad to know it's not just me!. For situations where the type of Object is unknown at compile time, I work around this issue like so:\n```\n        if (object instanceof Boolean\n                || object instanceof Byte\n                || object instanceof Character\n                || object instanceof Enum) {\n            // a unique instance for every possible value, so alias\n            clone = object;\n    } else if (object instanceof String) {\n        // instances are immutable, so alias\n        clone = object;\n\n    } else if (object instanceof Double) {\n        clone = (double) object;\n    } else if (object instanceof Float) {\n        clone = (float) object;\n    } else if (object instanceof Integer) {\n        clone = (int) object;\n    } else if (object instanceof Long) {\n        clone = (long) object;\n    } else if (object instanceof Short) {\n        clone = (short) object;\n\n    } else {\n        clone = Cloner.deepClone(object);\n    }\n\n. While cloning material parameter values, I encountered one that was a Float.. I would also need cases for Integer and Boolean, since material parameters can also have such values. So I thought, \"Why not use a Cloner? It can clone anything.\". Fixed in 'master' branch.. Redone as PR #980.. Note: issue #877 was resolved by pull request #962.. I haven't seen a non-deprecated version yet. I was planning to develop something of my own, but it might not be an easy port.. This was a duplicate of issue #740. Sorry!. Note to self: this PR is already integrated into the `v3.2` branch.. Note: with the longer ray, the test seems to work for JBullet, but not Native Bullet. This is due to an unrelated issue (#887) with visualizing scaled mesh shapes in jme3-bullet. . Fixed in 'master' branch.. The shape's scale gets applied in BulletRigidBodyDebugControl.update(). I suspect the model in TestPhysicsRayCast has a compound shape, which is a tricky case for scaling.. Tested by modifying `TestPhysicsRayCast` as described above. Looks good with both jBullet and native Bullet.. Here is a test case that demonstrates the issue:\npackage jme3test.bullet;\n/*\n * Test case for JME issue #889: disabled physics control gets added to a\n * physics space.\n * \n * If successful, no debug meshes will be visible.\n /\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.bullet.BulletAppState;\nimport com.jme3.bullet.PhysicsSpace;\nimport com.jme3.bullet.collision.shapes.BoxCollisionShape;\nimport com.jme3.bullet.collision.shapes.CollisionShape;\nimport com.jme3.bullet.collision.shapes.SphereCollisionShape;\nimport com.jme3.bullet.control.BetterCharacterControl;\nimport com.jme3.bullet.control.GhostControl;\nimport com.jme3.bullet.control.RigidBodyControl;\nimport com.jme3.math.Vector3f;\npublic class TestIssue889 extends SimpleApplication {\npublic static void main(String[] args) {\n    TestIssue889 app = new TestIssue889();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    flyCam.setEnabled(false);\n\n    BulletAppState bulletAppState = new BulletAppState();\n    bulletAppState.setDebugEnabled(true);\n    bulletAppState.setSpeed(0f);\n    stateManager.attach(bulletAppState);\n    PhysicsSpace space = bulletAppState.getPhysicsSpace();\n\n    float radius = 1f;\n    CollisionShape sphere = new SphereCollisionShape(radius);\n    CollisionShape box = new BoxCollisionShape(Vector3f.UNIT_XYZ);\n\n    RigidBodyControl rbc = new RigidBodyControl(box);\n    rbc.setEnabled(false);\n    rbc.setPhysicsSpace(space);\n    rootNode.addControl(rbc);\n\n    BetterCharacterControl bcc = new BetterCharacterControl(radius, 4f, 1f);\n    bcc.setEnabled(false);\n    bcc.setPhysicsSpace(space);\n    rootNode.addControl(bcc);\n\n    GhostControl gc = new GhostControl(sphere);\n    gc.setEnabled(false);\n    gc.setPhysicsSpace(space);\n    rootNode.addControl(gc);\n}\n\n}\n```. In order to prevent AppVeyor from failing every pull request, an IF command has been added to the YML that aborts the on_success section if secure variables are not set. (For security reasons, these variables are never set in pull-request builds.). Note that this issue exists only with Native Bullet, not with JBullet.. Here's a testcase for the issue with respect to the gravity vector. It's harder to test with respect to upAxis, since the API does not include a getter for the vector.\n```\npackage jme3test.bullet;\n/*\n * Test case for JME issue #896: PhysicsCharacter writes incomplete gravity and\n * upAxis for Native Bullet.\n * \n * If successful, the loaded and saved vectors will be equal.\n /\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.bullet.collision.shapes.BoxCollisionShape;\nimport com.jme3.bullet.collision.shapes.CollisionShape;\nimport com.jme3.bullet.control.CharacterControl;\nimport com.jme3.export.binary.BinaryExporter;\nimport com.jme3.export.binary.BinaryImporter;\nimport com.jme3.math.Vector3f;\nimport com.jme3.scene.Node;\nimport java.io.File;\nimport java.io.IOException;\npublic class TestIssue896 extends SimpleApplication {\npublic static void main(String[] args) {\n    TestIssue896 app = new TestIssue896();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    CollisionShape box = new BoxCollisionShape(new Vector3f(1f, 1f, 1f));\n    CharacterControl savedControl = new CharacterControl(box, 0.1f);\n    Vector3f up = new Vector3f(1f, 1f, 1f).normalizeLocal();\n    savedControl.setUp(up);\n    Vector3f gravity = up.multLocal(-32f);\n    savedControl.setGravity(gravity);\n    rootNode.addControl(savedControl);\n\n    BinaryExporter exporter = BinaryExporter.getInstance();\n    String filePath;\n    try {\n        File writeFile = File.createTempFile(\"TestIssue896\", \"j3o\");\n        writeFile.deleteOnExit();\n        exporter.save(rootNode, writeFile);\n        filePath = writeFile.getCanonicalPath();\n    } catch (IOException exception) {\n        throw new RuntimeException(exception);\n    }\n\n    BinaryImporter importer = BinaryImporter.getInstance();\n    Node loadedNode;\n    try {\n        File readFile = new File(filePath);\n        loadedNode = (Node) importer.load(readFile);\n    } catch (IOException exception) {\n        throw new RuntimeException(exception);\n    }\n\n    CharacterControl loadedControl\n            = loadedNode.getControl(CharacterControl.class);\n\n    Vector3f savedGravity = new Vector3f();\n    savedControl.getGravity(savedGravity);\n    Vector3f loadedGravity = new Vector3f();\n    loadedControl.getGravity(loadedGravity);\n    System.out.printf(\"gravity  saved=%s  loaded=%s%n\", savedGravity,\n            loadedGravity);\n    stop();\n}\n\n}\n``. On closer inspection, it's not about different semantics. The issue is a bug in the test, which invokes physicsCharacter.setGravity() during the update phase. Moving setGravity() to the prePhysicsTick() phase resolves the issue.. Fixed in 'master' branch.. Fixed in 'master' branch.. Fixed in 'master'.. A partial workaround was discussed at the Forum:\n    https://hub.jmonkeyengine.org/t/character-control-setup-to-fix-gravity-for-some-computer-environments/40991/4.HelloTerrainCollisionalso suffers from this issue.\n. The fix (commit 6ab7c0d) changes the default gravity vector for ajme3-bulletPhysicsCharacter` and reverses the direction in which gravity is measured. These changes may break existing code that works with JME 3.2.2, so they're unfortunately not suitable for the JME 3.2.3 release. . Fixed in 'master' branch as of 499714507b902371b44c543d8da46430511d46cc, at least for Windows and OS X. (I tested on Windows.)\nIt looks like Linux binaries have not been updated since 9 August 2017, so I'll leave this issue open for now. . I opened a separate issue for Linux binary updating.. An unfortunate consequence of this incompatability is that RigidBodyControl.jmeClone() doesn't copy linear factors from the original control to the clone. (RigidBodyControl.java is common to both jme3-bullet and jme3-jbullet.) Thus the following test fails, even with jme3-bullet:\nRigidBodyControl body = new RigidBodyControl(capsule, 1f);\n        body.setLinearFactor(new Vector3f(0.2f, 0.3f, 0.4f));\n        RigidBodyControl clone = (RigidBodyControl) Cloner.deepClone(body);\n        assert clone.getLinearFactor().x == 0.2f;. Code inspection discovered a few more public methods that are lacking in jme3-jbullet:\n\npublic Vector3f getInverseInertiaLocal(Vector3f);\npublic void setInverseInertiaLocal(Vector3f);\npublic boolean isInWorld();\n\nFurthermore, the angular factor is a float in jme3-jbullet but a Vector3f in jme3-bullet, adding a few more incompatibilities.\n. The recently-added setContactResponse() method is yet another incompatibility.. Good catch! My C++ skills are a bit rusty, but I think I can handle this one.. @James-Richardson: ready for testing!\nIf you're on Linux, you'll need to build your own libbulletjme.so, due to issue #915.\nIf convenient, please provide a Short, Self Contained, Correct Example for future testing.. In the absence of a self-contained test, I applied a temporary hack to PhysicsJoint so I could invoke finalizeNative() on demand. No exception was thrown.\nFixed in the master branch.. Here's a clue from job 2286.1 line 437:\n```\n\nTask :jme3-bullet-native:downloadBullet\nTask :jme3-bullet-native:unzipBullet\nTask :jme3-bullet-native:unzipBulletIfNeeded\nTask :jme3-bullet-native:compileBulletjmeLinux32SharedLibraryBulletjmeCpp FAILED\nFAILURE: Build failed with an exception.\n What went wrong:\nFailed to capture fingerprint of input files for task ':jme3-bullet-native:compileBulletjmeLinux32SharedLibraryBulletjmeCpp' property 'headerDependencies' during up-to-date check.\nCould not list contents of '/usr/include/driver.h'. Couldn't follow symbolic link.\n Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n* Get more help at https://help.gradle.org\nBUILD FAILED in 52s\n```\n\nFor reasons I don't understand, the job continued through the failure.. By googling the error message, I learned that Ubuntu sometimes relocates header files between releases.\nI notice our .travis.xml changed the build environment (from default to \"precise\") on 19 August 2017. Circumstantial evidence, but perhaps sufficient to justify experimentally reverting that change. \n. With that change, the compileBulletjmeLinux32SharedLibraryBulletjmeCpp task completes silently during the oraclejdk8 build.  However, now upload_native.sh reports No native changes. and the openjdk7 build fails with a javax.net.ssl.SSLException.\nBtw, according to the Travis blog, support for the \"precise\" environment ended back in April.. That commit helped: all builds succeeded.\nThe upload_native.sh script still reports No native changes. however. Perhaps a future commit will produce some native changes for it to commit.. I'm not convinced the issue is resolved. Wait-and-see for now.. Now I'm convinced.. The suggestion has been implemented in the master branch, both for jme3-bullet and jme3-jbullet. Found the same issue with JBullet.\n. Also, Point2PointJoint.getTau() has the exact same issue. Might as well fix both methods at once.. Fixed in the master branch.. This causes a runtime exception:\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\njava.lang.UnsatisfiedLinkError: com.jme3.bullet.joints.motors.TranslationalLimitMotor.getLimitSoftness(J)F\n    at com.jme3.bullet.joints.motors.TranslationalLimitMotor.getLimitSoftness(Native Method)\n    at com.jme3.bullet.joints.motors.TranslationalLimitMotor.getLimitSoftness(TranslationalLimitMotor.java:154). Fixed in the master branch.. Perhaps this question should be discussed in a new \"Development\" topic at the Forum:\n    https://hub.jmonkeyengine.org/\n. Is there some reason you're developing in the v3.2 branch instead of the master branch?. If the PR was a mistake, please close it.. Fixed in master branch.. Thanks for this!. Fixed in master branch.. Thanks, both of you!. Looks like this won't be ready in time for JME 3.2.2 .. I'm not finding the time/motivation to work on this issue, so I'll unassign myself.\n. setOriginNormal doesn't throw any exception at all? Not even a NullPointerException?\nI believe a NullPointerException is the correct outcome for these situations.. For the sake of consistency, I'm willing to remove the IllegalArgumentException from from the setNormal() method.. Based on the lack of consensus, I've labelled this as \"wontfix\".. What is the purpose of this pull request?\nIf it was an accident, please close it or ask someone to close it for you.. Please add tests to the jme3-core/src/test/com/jme3/scene package.. This appears to be a troubleshooting question. Such questions are best answered at the Forum:\n    https://hub.jmonkeyengine.org/\n. Good catch! If there are no objections, I think I will integrate this one.. Thank you for doing this. Did you run any tests?. Thanks for your answer regarding testing.\nI'll leave integration for another day in case anyone else wishes to comment.\nRegarding continuous integration, I'm unsure how difficult that would be to set up. I had the impression that building jme3-bullet-native-android required installation of some tools. (Building on my desktop fails with an unenlightening execCommand == null! diagnostic.) Those tool installs would probably have to automated.. That sounds plausible. So, to set up continuous integration, installation of the android ndk in that path would need to be automated.. Your question should be directed to the authors of Matrix4f.java: Mark Powell and Joshua Slack. I suspect they no longer read jMonkeyEngine issues on GitHub, if they ever did.. Fixed now in master branch. (That was quick!)\nBy the way, given the lack of documentation for bounding volumes, I'm not convinced this was a bug.\nThe old way seemed to work fine in practice. The new way is more intuitive, but uses more heap memory.. Good to know. Thanks!. Fixed in master branch.. Integrated without review.. Perhaps we need an option to switch between (a) the workaround and (b) support for pathnames. Could be as simple as a boolean flag in the asset key.. I believe this is a duplicate of issue #96.. Closed as a duplicate.. The Del key should trigger key input events with the code KeyInput.KEY_DELETE = 211. At least it does in a Microsoft Windows environment with US layout using JME v3.2.1 with LWJGL v2.9.3 .\nIf that doesn't work for you, we'll need more information about the environment where you encountered this issue, such as its operating system, keyboard layout, and which version of JME/LWJGL you used. A short, self-contained example might also help.. There's a known issue #942 triggered by using LWJGL v3.1.6 with a non-US keyboard layout.\nThe LWJGL version number should be logged to the console when your application starts, like so:\nINFO: LWJGL 3.1.6 build 14 context running on thread main\nPlease retry your test with LWJGL v2.9.3 . This will probably involve replacing jme3-lwjgl3 with jme3-lwjgl in your build script.. Lacking the results of the retry, I will close this issue as a duplicate of #942. Reopen if there's more to discuss.. Sounds useful.\nAdding this would create yet another incompatibility between jme3-bullet and jme3-jbullet, but I don't think that's a major concern at this point.\nWhy in PhysicsCollisionObject instead of PhysicsRigidBody?\nIf you create a pull request, remember that the flag will have to be handled whenever a physics object is loaded, saved, or cloned.\n. Are there circumstances where one might wish to setContactResponse() on a ghost or character object?. ok\n. I'll implement this for jme3-bullet.. I'm satisfied that the new feature works in jme3-bullet. In jme3-jbullet, it throws an appropriate exception on any attempt to set it to false.. Riccardo: Thanks for reviewing this PR. I appreciate your help.\nWhile I see value in being consistent with the flag name, I'm reluctant to alter the method names because of the extra mental effort to interpret \"set ignore\" or \"set not\" as compared with \"set\".\nI agree that hardcoded flag values are undesirable. That was lazy of me. I'll address it before integrating this PR.\nI've also decided that isContactResponse() should be a PhysicsCollisionObject method rather than just a PhysicsRigidBody one, so I need to update this PR anyway.  (The setter will remain specific to PhysicsRigidBody.)\n. In the process of testing load/save/clone, I came across some unrelated bugs in jme3-bullet, but I'm satisfied that load/save/clone work for contact response. Once I've documented those issues, I'll look at PhysicsCharacter.. Is this fix suitable for JME v3.2.2 ?. Fixed in master branch.. At the Forum, @pspeed42 cited this issue as an example of one that's too risky to fix in a double-dot release, since users might count on velocities being reset every time the object is saved/loaded. Postpone this one to v3.3 .. I thought there was a reason to keep a copy of the state, but on closer inspection, there isn't one. I'll remove it. I'll also remove the corresponding state in PhysicsRigidBody.\nGood catch!. I reproduced the issue. Looks like Action, BlendableAction, and ClipAction all need some cloning methods implemented.. I thought speed was a multiplier used to convert real time to game time. Equating those metrics would imply speed=1, which is effectively what we'd have if the concept were removed. So your 2nd sentence makes no sense to me.\nI also don't see speed forcing spatials to be game objects; to me, that looks like an orthogonal issue. Care to elaborate?. I don't agree that speed=0 is the only interesting value. Aside from speed=1 there's also the range from about 0.1 to 0.6, which provides a slow-motion effect (extra drama for victory/defeat situations). And in my demos I use speed=1e-12 to produce a pause effect while still updating controls and appstates.. Okay, so speed belongs in SimpleApplication not LegacyApplication. In that case, setSpeed() and getSpeed() also belong in SimpleApplication.\nRight?. Enhancement added to master branch at hash c6158bba68c92f70182009968f56b06bb32a178b (pull request #986). That's fine for other tests. However, accessing town.zip via HTTP would defeat the purpose behind including it in TestManyLocators, which is to test/demonstrate a ZipLocator.. Fixed in master branch at hash 000ac95 .\nI copied the town.zip file from the Google Code archives to the jme3-examples sub-project. (No effect on jme3-testdata.). fixed in master branch at SHA id=bbf1f73a8912640b9056bd730ed6f1d4128dc95f using the Internet Archive's Wayback Machine. TGALoader.load() seems to expect that pixelDepth should be either 24 or 32: if it's not 32, it just assumes 24.\nIn fact, pixelDepth is 94, read from in back at line 145. The lack of input checking is an issue. Also, the file may be garbled.\n. Fixed in master branch at hash e5fb5bf .. Let's discuss at issue #978.. 8Keep, I took at look at your pull request, and it's perfect. Pspeed and I just need to agree on whether issue #978 was a good idea or not.. Would you be willing to rework your PR to meet the new requirements (SimpleApplication instead of LegacyApplication)?. Hm. I don't think we should move the speed variable from LegacyApplication just yet. Some users may be depending on it. Would you mind putting it back in?. There's still one change in LegacyApplication that needs to be reverted.. No need for a new PR. GitHub has a \"Squash and merge\" option which I will now employ.... Commenting out line 284 seems to resolve the issue, though I don't fully understand why:\n```\n                Geometry playerModel = (Geometry) player.getChild(0);\n                Geometry cubeModel = cubeField.get(i);\n                //cubeModel.updateGeometricState();\n            BoundingVolume pVol = playerModel.getWorldBound();\n            BoundingVolume vVol = cubeModel.getWorldBound();\n\n``. Thanks for the analysis. I suppose we should remove line 284 at least, since examples should ... set a good example. I'm unsure whether we should remove the assert as well.. Fixed inmasterbranch at SHA id=44801da70687f8fbf9ee609cc1ece7f9144d9341. In JBullet, aPhysicsCollisionEventis generated when aPhysicsRigidBodyoverlaps with aPhysicsGhostObject. In native Bullet, no event is generated, perhaps because theNO_CONTACT_RESPONSE` flag is set on the ghost object.\nFor compatability with both physics libraries, the app should poll PhysicsGhostObject.getOverlappingCount() instead of relying on the PhysicsCollisionListener interface.. fixed in master branch at SHA id=1bb388d793e6acdf082cb948ad46951ece9ee20a. I may revert 1bb388d at some point.... Closed as a duplicate of issue #1029.. I'm considering this PR for the JME 3.2.3 release.\nHas this change had much testing with Linux? I ask because Toboi reported a crash running Maud v1.0.0-alpha.6 on Kubuntu. The stack trace made me think it might be related to Nifty 1.4.3, so I rolled back to 1.4.2 in my next release of Maud, and that seemed to resolve Toboi's issue.\nhttps://hub.jmonkeyengine.org/t/seeking-alpha-testers-for-maud/39085/55\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nJ 3896  org.lwjgl.opengl.GL15.nglBufferData(IJJIJ)V (0 bytes) @ 0x00007f41c8aa9c0e [0x00007f41c8aa9bc0+0x4e]\nJ 3953 C1 org.lwjgl.opengl.GL15.glBufferData(ILjava/nio/FloatBuffer;I)V (38 bytes) @ 0x00007f41c8adf584 [0x00007f41c8aded60+0x824]\nJ 3952 C1 com.jme3.renderer.lwjgl.LwjglGL.glBufferData(ILjava/nio/FloatBuffer;I)V (11 bytes) @ 0x00007f41c8ae03f4 [0x00007f41c8ae0340+0xb4]\nJ 3842 C1 com.jme3.renderer.opengl.GLRenderer.updateBufferData(Lcom/jme3/scene/VertexBuffer;)V (312 bytes) @ 0x00007f41c8a8f7ac [0x00007f41c8a8e780+0x102c]\nJ 3744 C1 com.jme3.renderer.opengl.GLRenderer.setVertexAttrib(Lcom/jme3/scene/VertexBuffer;Lcom/jme3/scene/VertexBuffer;)V (573 bytes) @ 0x00007f41c8a6e1f4 [0x00007f41c8a6d240+0xfb4]\nJ 3974 C1 com.jme3.renderer.opengl.GLRenderer.renderMeshDefault(Lcom/jme3/scene/Mesh;II[Lcom/jme3/scene/VertexBuffer;)V (242 bytes) @ 0x00007f41c8aec7a4 [0x00007f41c8aeb500+0x12a4]\nj  com.jme3.renderer.opengl.GLRenderer.renderMesh(Lcom/jme3/scene/Mesh;II[Lcom/jme3/scene/VertexBuffer;)V+145\nj  com.jme3.material.logic.DefaultTechniqueDefLogic.renderMeshFromGeometry(Lcom/jme3/renderer/Renderer;Lcom/jme3/scene/Geometry;)V+49\nJ 3967 C1 com.jme3.material.logic.DefaultTechniqueDefLogic.render(Lcom/jme3/renderer/RenderManager;Lcom/jme3/shader/Shader;Lcom/jme3/scene/Geometry;Lcom/jme3/light/LightList;I)V (21 bytes) @ 0x00007f41c8ae6dc4 [0x00007f41c8ae6c60+0x164]\nJ 4016 C1 com.jme3.material.Material.render(Lcom/jme3/scene/Geometry;Lcom/jme3/light/LightList;Lcom/jme3/renderer/RenderManager;)V (130 bytes) @ 0x00007f41c8b0972c [0x00007f41c8b08ee0+0x84c]\nJ 4028 C1 com.jme3.material.Material.render(Lcom/jme3/scene/Geometry;Lcom/jme3/renderer/RenderManager;)V (11 bytes) @ 0x00007f41c8b1808c [0x00007f41c8b17f00+0x18c]\nj  com.jme3.font.BitmapText.render(Lcom/jme3/renderer/RenderManager;Lcom/jme3/math/ColorRGBA;)V+49\nj  com.jme3.niftygui.RenderDeviceJme.renderFont(Lde/lessvoid/nifty/spi/render/RenderFont;Ljava/lang/String;IILde/lessvoid/nifty/tools/Color;FF)V+180\nj  de.lessvoid.nifty.render.ScalingRenderDevice.renderFont(Lde/lessvoid/nifty/spi/render/RenderFont;Ljava/lang/String;IILde/lessvoid/nifty/tools/Color;FF)V+51\nj  de.lessvoid.nifty.render.NiftyRenderEngineImpl.renderText(Ljava/lang/String;IIIILde/lessvoid/nifty/tools/Color;)V+98\nj  de.lessvoid.nifty.elements.render.TextRenderer.renderLine(IILjava/lang/String;Lde/lessvoid/nifty/render/NiftyRenderEngine;II)V+13\nj  de.lessvoid.nifty.elements.render.TextRenderer.renderLines(Lde/lessvoid/nifty/elements/Element;Lde/lessvoid/nifty/render/NiftyRenderEngine;[Ljava/lang/String;)V+222\nj  de.lessvoid.nifty.elements.render.TextRenderer.render(Lde/lessvoid/nifty/elements/Element;Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+15\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afd6bc [0x00007f41c8afcaa0+0xc1c]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afd81c [0x00007f41c8afcaa0+0xd7c]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.screen.Screen.renderLayers(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+31\nj  de.lessvoid.nifty.Nifty.render(Z)V+46\nj  com.jme3.niftygui.NiftyJmeDisplay.postQueue(Lcom/jme3/renderer/queue/RenderQueue;)V+20\nj  com.jme3.renderer.RenderManager.renderViewPort(Lcom/jme3/renderer/ViewPort;F)V+423. Thanks for the reply. If you could test jme3-nifty on Linux with both adapters, that'd be great.\nThe JME 3.2.3 release is about 2 billion milliseconds away, so no rush.. Thank you!. fixed in master branch at SHA id=2a904034c29d11a8f9bb96f0ca4afbd453883612\nHelloCollision still doesn't work right with native Bullet, but that's a separate issue #910.. Fixed in master branch at hash  b9ea66139106d0f21da1ca7b52b40fcbae98a011 .. This issue also impacts the TestManyLocators and TestPostWaterLake example apps.. Fixed in master branch. See also issue #982.. Fixed in master branch at SHA hash 0e9ff839.. Per the JavaDoc for ConcurrentLinkedQueue:\nAttempts to addAll of a queue to itself result in IllegalArgumentException.. Fixed in master branch at hash fceee58546bf9eac988d3cd0cbbb2ab5d2ecc19c .. See also https://github.com/jMonkeyEngine/sdk/issues/96. This issue came up at the Forum back in 2013:\n    https://hub.jmonkeyengine.org/t/implementing-terraingrid/26827/5\nOf course, the URL in the Forum post no longer works, but it provides enough of a hint .... Nope. That just leads me back to the URL that's currently used in master. Perhaps the contents of TerrainGridTestData.zip have changed since it was archived.. Fixed in master. I recovered TerrainGridTestData.zip via the Internet Archive's Wayback Machine.. The issue came up again at the Forum:\n https://hub.jmonkeyengine.org/t/terraingridtestdata-zip-download/41480. Many of them were created by @Nehon, but a few have SimSilica copyrights (meaning @pspeed42 created them.)\nThere are also files (not listed above) with other authorship. For example:\ncom.jme3.app.VRApplication. The discussion here seems appropriate to me.. I just messaged @nehon via a couple channels to clarify his intent. . Could you provide any more details about your findings?. At the start of each loadModel(), the GltfLoader's dataCache is cleared and a new animations array is instantiated. I don't see what data are being reused. Could you clarify for me?. Now I get it. That explains why the issue only occurs with .glb, not .gltf. I'll add a data.clear() to address the immediate issue.\n\nI don't think thats the case for the GlbLoaders's data. This is what gets accessed by the readData method in the end.\n\n. The fix is integrated into the master branch at GitHub. @boonto please test.. Fixed in master at commit hash 34b32bf29b3a1c675fe30442e089fcc1de164692 .\nLets make this a high priority for the next JME release.. Thanks for the additional info. I've created my own test case.\nThis issue should be fixed in 3.2.3, if that ever happens.. Fixed in master branch at hash 51b12e1b9e4a5a22708db8b36500d854fc76f7d9.. I believe this is an example of issue #910: PhysicsCharacter incompatible between jme3-bullet and jme3-jbullet.. Thanks for looking into this.\nVehicleControl is a subclass of RigidBodyControl, so adding getSpatial() to RBC will address the needs of VehicleControl.\nBetterCharacterControl and KineticRagdollControl are subclasses of AbstractPhysicsControl, which doesn't have getSpatial() yet.\nSo yes. Please implement getSpatial() for AbstractPhysicsControl and CharacterControl also.\n. Sorry I was confused about VehicleControl.\nThe issue I see with adding getSpatial() to PhysicsControl would be that users might create their own classes that implement PhysicsControl, and changing PhysicsControl would break their code.\nIf we do add it to PhysicsControl then I request that the commit be in a separate PR.. Yes.. Fixed in master branch at 76049c76f309bceb5eaae43ef78d60e43988ec5a. Changing the semantics of BinaryExporter is a lot more likely to break existing code.. Pretty please may I see a pull request?. Okay, I read \"easy to fix\" and assumed you had a complete fix. I'm a bit behind the learning curve on LWJGL 3 myself.\n@Ali-RS you can assist @tonihele ?. Regarding the interference with StatsAppState, see issue #801.. Is Float.NAN similar to every other floating-point number?. The way the methods are written, if each test is false then the method returns true, meaning \"similar\". So I think the logic is broken for NaN.. I believe it does.. How about JavaDoc for the added methods removeAction(), removeCurrentAction(), and removeLayer()?. It looks to me like Travis ran on the pull request and again on the commit I integrated. Why do you believe it wasn't triggered?. https://travis-ci.org/jMonkeyEngine/jmonkeyengine/builds/491477131\nhttps://travis-ci.org/jMonkeyEngine/jmonkeyengine/builds/491990814. Which version of LWJGL?. Fixed in master branch at 512b096 and recommended for the v3.2.3 release.. This issue exists only with jme3-bullet library. In jme3-jbullet, the return type is more precise.. Fixed in master branch at 15f9f69611fb429ef9fc6e1261e0071e0cccddd7 .. You're right! I think the fix is now complete.. Do you have a request?. Perhaps you want BlendMode.Additive:\n  https://github.com/jMonkeyEngine/jmonkeyengine/blob/72bed74fa17416d58cc05a2857e78bf1ba4c6d9c/jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java#L783. I don't see an issue here. If action is required, please reopen and explain.. L. I'd rather create a new blending mode than change an existing one. I'll label this as an enhancement.. Fine with me. Will there be a pull request?. Resolved, presumably.. Looks like this was a regression introduced between JME 3.1.0-stable and 3.2.0-stable. In other words, between Bullet 2.82-r2704 and Bullet 2.86.1. There's also a comment in the CPP file that warns not to #define CLEAR_MANIFOLD:\n```\nifdef CLEAR_MANIFOLD\nm_manifoldPtr->clearManifold(); //don't do this, it disables warmstarting\n\nendif\n```\nIt's broken either way, eh?\n. If we implemented a btMultiSphereShape-based CollisionShape in jme3-bullet, we'd at least have a workaround.. What sort of Java changes do you anticipate?. You seem to have a good grasp of this issue. Shall I assign it to you?. Note that when 2 spherical rigid bodies collide, there's an exchange of momentum. So I know contact response works. My current approach is to trace the addCollisionEvent_native() path backward and see what's different about sphere-sphere as opposed to, say, sphere-box.\nBtw, in the Minie library, I've basically undefined CLEAR_MANIFOLD. So far I haven't noticed any ill effects such as contact points stuck in the cache. However, I haven't tested it thoroughly.. This issue appears to be the root cause of JME issue #989. Looking good so far. Unless concerns arise, I plan to integrate this tomorrow.. @riccardobl I've written a test app, which I plan to integrate separately. Or you can provide your own, if you prefer.. Fixed in master at 3.3-6737 (2bbf784).. A slightly belated \"thank you!\". This is a duplicate of issue #910.. If it were up to me, you'd have been invited the jMonkeyEngine organization by now. Then you could integrate your own PRs.. Looks good. I'll leave this open for 24 hours in case anyone wishes to comment.. I'm unclear. Are you asking for help other than integration of your PR into master branch?. The current behavior seems unexpected and unintended: a bug. I think it would be better to make it behave as expected than to simply document the bug. Particularly since AnimComposer is unreleased, so there's no compatibility issue with previous releases.. I don't yet feel qualified to review this one.. This looks fine.  Thank you.  I'll leave this PR open a few days in case someone else wants to review it.\nI'm a little surprised your efforts didn't uncover any bugs in FastMath.\nIf you're interested in writing more tests, I suggest you look next at the com.jme3.math.Vector3f class, the com.jme3.renderer.Camera class, or the com.jme3.scene package. But if you're anything like me, you'll find room for improvement almost anywhere you look.. Uncovered code paths should take priority. But I wouldn't object to being systematic and thorough unless/until testing has a noticeable impact on the build process.  . By the way, the fields of a Vector3f are public, so it's never necessary to use Vector3f.getX() or Vector3f.getY() or Vector3f.getZ().. Thank you for your contribution. If you could look at the other suggested classes, that'd be great.. Few of the classes in JME are adequately tested, in my opinion. Last week @Ali-RS and I suggested com.jme3.anim, com.jme3.renderer.Camera, and com.jme3.scene. (https://github.com/jMonkeyEngine/jmonkeyengine/pull/1039)\nThis PR was dropped from the JME v3.2.3 release because it uses Vector3f.isSimilar(), which doesn't exist in the v3.2 branch. This PR should be included in JME v3.3, assuming that ever happens, so I'll update the Milestone accordingly.. Nice work.\nOne correction: spatials are not attached to controls; controls are added to spatials. Could you please change the javadoc accordingly?\n. The way you have it is okay.\nNote how the field is documented above:\n/**\n     * spatial to which this control is added, or null if none\n     */. Sure. Sounds good.. Okay, I think this is ready to integrate. I'll leave it open another day in case anyone else wants to review it.. In the past, I've deleted tests/examples that targeted deprecated features.. I tested some old releases. The test has been broken since at least JME 3.1.0-stable.. The test works with Minie v0.2.10 but not with Minie v0.2.9. This leads me to suspect this issue is related to collision margins, which default to 0 in Minie v0.2.9 (and in all current JME releases). Minie v0.2.10 changed the default collision margin to 0.04 .. See issue #901.\n. Increasing the collision margin of the obstacle to 0.0001 is sufficient to resolve this issue. I'm undecided whether to modify TestCcd or address the larger issue #901 in CollisionShape.. From the IDE. I realize it's a console app...\n. Probably the IDE environment simply doesn't have a valid System.in. I opened this issue to remind me to look into it later.. @shamanDevel Can you explain why this test failed?. A change like this should include a testcase.. I assume all the animated geometries in the model will have the same global transform, so it shouldn't matter which one I use. If my assumption is wrong, I will change the code as you suggest.. If you mean the initializer is not needed, that's true. But the field is needed because the transform of the target geometry may change after the attachments node is created.. Note that a single bone can affect multiple geometries.. Pass the targets from updateTargetsAndMaterials() to getAttachmentsNode() as a return value?. I assume if a model has animated geometries with different transforms, then animations will affect them differently and they won't fit together when animated. I suppose one could create a model with two unconnected parts, each having a distinct set of bones, like a pair of insects. In that case giving the bone a complete list of animated geometries might be helpful. But in the multi-geometry models I'm familiar with (including Elephant, Ninja, and Sinbad) all the geometries have identical transforms.. If I pass a list of geometries to the bone, and the bone affects more than one of them, will it be acceptable for the bone to arbitrarily use the first one it affects?. If we generated a Geometry list, I believe we could dispense with both the 'targets' and 'materials' fields.\n. I understand and would support a more detailed set of style guidelines ... along with better enforcement of the guidelines we have.. ",
    "pspeed42": "It doesn't need to be recalculated every frame as the issue mentions... it just needs to be a max extent for all frames (calculated once).  However, it might be reasonable compromise to just recommend that users set their own bounding box that is 'big enough'.. But you might as well just give it a bounding box of 1,000,000x1,000,000 in that case.  Surely there is a compromise on your bounding box.. a) changes or at least notification of changes still need to be posted to the forum for discussion.\nb) reformatting at the same time as a two line change is likely to be skipped for being too hard to read.\nc) this change breaks any JDK less than version 8 since it's only Java 8 that removed the throws SocketException. (Long rant using this to point out again how dumb checked exceptions are in the first place removed. ;) )\n. Note: code submissions should also be mentioned on the forum since that's where discussion will happen if there are issues or things that need to be reworked a little.  For convenience you can include a link to the pull request or diffs.  Thanks.\n. Please direct questions to this forum post: http://hub.jmonkeyengine.org/forum/topic/performance-improvement-in-physicsspace-java/\n(where that question is already answered, I think)\n. Sounds like something you should post to the forum.\nOn Wed, May 7, 2014 at 9:25 PM, Nikita Gridinskiy\nnotifications@github.comwrote:\n\nI have JDK 8 installed but i dont think that should matter much for this\nparticular exception.\n/Users/grimm/src/jmonkeyengine/jme3-networking/src/main/java/com/jme3/network/kernel/udp/UdpEndpoint.java:130: error: exception IOException is never thrown in body of corresponding try statement\n        } catch( IOException e ) {\n          ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n4 warnings\n:jme3-networking:compileJava FAILED\nOn a side note is there a way to just compile the engine and the plugins\nthat i want without having to compile the netbeans stuff? I dont use the\nplatform or netbeans at all, and that would help a lot.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/133\n.\n. Actually, this was already covered on the forum.  JDK 8 broke apps that use\nJava networking unless they make themselves incompatible with all other JDK\nversions.  There is a patch on the forum for this, though.  I guess it\nhasn't been applied yet.\n\nOn Wed, May 7, 2014 at 11:59 PM, Paul Speed pspeed42@gmail.com wrote:\n\nSounds like something you should post to the forum.\nOn Wed, May 7, 2014 at 9:25 PM, Nikita Gridinskiy \nnotifications@github.com wrote:\n\nI have JDK 8 installed but i dont think that should matter much for this\nparticular exception.\n/Users/grimm/src/jmonkeyengine/jme3-networking/src/main/java/com/jme3/network/kernel/udp/UdpEndpoint.java:130: error: exception IOException is never thrown in body of corresponding try statement\n        } catch( IOException e ) {\n          ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n4 warnings\n:jme3-networking:compileJava FAILED\nOn a side note is there a way to just compile the engine and the plugins\nthat i want without having to compile the netbeans stuff? I dont use the\nplatform or netbeans at all, and that would help a lot.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/133\n.\n. It's not about working or not.  JDK8 broke compilation compatibility with networking.  So you have to patch the source to get it to build on JDK8.\n. I'm not saying this issue is invalid but if you actually want to get your build working soonest... you can look on the forum for the post about this problem.\n. Note: as far as this: \"Won't people want to use it possibly for some of\ndynamically generated geometry?\"\n\n\n...no, I think maybe not.  If one is dynamically generating geometry then\nthey are already in the best place to make tangents as they go for free.\nI agree that a speed-up is nice, though.\nOn Sat, Feb 28, 2015 at 11:22 AM, Artur Biesiadowski \nnotifications@github.com wrote:\n\nWorking on that right now\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/154#issuecomment-76532759\n.\n. Except the second calls the first and the third one should never ever ever ever by used by anyone.\n. It says why right in the javadoc for the method.\n\nOn Tue, Aug 5, 2014 at 10:03 AM, husainhz7 notifications@github.com wrote:\n\nwhy the third should be left alone?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/159#issuecomment-51201270\n.\n. As to the first, the line could probably be removed.  As to the second, I disagree.  It was much better than breaking all user code.\n. First, it's not at all clear to me that \"depthLastTraversal\" is the best name for pre-order traversal.  While I get it, it sounds backwards.  Adding a second depthFirstTraversal that took a preorder flag might have been preferable.\n\nI wonder what the use-case is, though.  It seems all of the typical use-cases I can think of, post-order is fine.\n. But it seems like in that case, that your tree model (I assume there is one) would want to wrap the actual node hierarchy... thus not even really needing the traversal API.  What kind of GUI is this for?\n. \"in order\" doesn't really make sense in this case as there is no \"left half\" and \"right  half\"... which is why I suggested the flag.\n. Either way, if we choose to add this method, JME should not use it internally for anything.  Above all else, creating needless per-frame garbage makes it harder to track real problems.  I recently did a sweep through the engine removing other cases of needless per frame garbage because they were completely obscuring some real slow leaks in my own code.\n. Note: jme includes the gradle wrapper so you don't have to install gradle to build it from the command line.  Just run gradlew instead of gradle.\n. updateGeometryState() does other things than update the light list... for example run controls.  So this patch is kind of broken if I read it right.\n. You're right.  I missed the \"Geometric\" state and was confused by all of\nthe recent discussions for reducing full scene traversals.\nOn Fri, Dec 5, 2014 at 10:08 AM, Kirill Vainer notifications@github.com\nwrote:\n\nActually it is updateLogicalState() that handles Controls updating.\nupdateGeometricState() doesn't do that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/195#issuecomment-65801986\n.\n. Note: the CollisionResults object is potentially a smaller but noisier allocation than the internal CollisionResult + array expansion that would happen for shapes that hit... all the way down to the geometry potentially.  It might be better to find a way to do a hit test without collecting any results at all.\n. This got eaten before:\nOn the positive side, this is the least invasive approach I've seen so far but a few things make me uncomfortable.  (other than the formatting issues)\n1) To me it doesn't go far enough.  A deep scene graph will continue to traverse deeply if even one child has a control.  There are ways around this with a slightly more aggressive approach.\n2) it exposes a new API checkChildControlsCountIntegrity() which means that if a better solution is used (see above) that we are forever locked into supporting this alternate version.\n3) This breaks spatial subclasses that require updateLogicalState() to be called even if they don't have any controls.  While subclassing spatial is discouraged it is not forbidden and there are many common reasons to do it especially at framework levels... and many of those cases hook into updateLogicalState() to do updates without a control.  (BitmapText is just one in-built JME example of this but Lemur does this a lot also.)  In light of this, \"controlsCount\" is also a new public API.\n\nI have a design for a slightly different approach that keeps a list of 'update requiring spatials' instead of generally relying on the control existence.  Mine will break existing code also but at least provides for a requiresLogicalUpdate() method that can be overridden by classes requiring update.\nYour approach is at least nice in that it hooks into most of the cases that need hooking. (add/remove control, attach/detach)\nBut I can't recommend applying it because of at least issues 2 and 3 above.\n. Oops.  I was trying to be too clever and avoid the stack recursion... but ended up not avoiding it anyway.  I'll fix it better someday but yours will stand for now.\n. This is only bound to complicate the code and I can't really see the use-case.  Event/listener code is kind of ugly at the best of times and this is not the best of times.\n. The root node doesn't need to be added to the list because super.updateLogicalState() is always called already.\n. And when exactly does it do that since the stats are just Geometry rendered like everything else?\n. I guess it just depends on how far we really want to go to remove 0.1% of the vertexes from the typical stats display.\n. Probably easier to just do the math and subtract it.\n. I don't really think this should be part of core... and definitely not included by default in the serializers.  It's a fairly rare edge case that would require this since normally more efficient IDs can be used... and it seems trivial to have the message that includes the UUID to use string or something else.\npublic void setId( UUID id ) {\n    this.id = id.toString();\n}\npublic UUID getId() {\n    return UUID.fromString(id);\n}\nBy including this by default, you make everyone using this force upgrade their clients when otherwise it wouldn't have been necessary.  It also sends a bad message that using UUIDs is actually a good way to do networking when in a high-performance networking situation, it's almost always better to used shorter localized IDs.\n. I don't think that's a great idea, either.  Nothing prevents your from writing/reading UUIDs from a capsule.  The point of these storage mechanisms is not so \"support everything that might be needed\" but to support a \"minimal set of primitives\" necessary for reading/writing.  It's trivial to read/write a UUID to a capsule as it is.  Just like it is trivial to do so for networking.\nIn your networking case, it is really surprising that UUIDs are the best way... as that implies that you have 2^128 objects to keep track of... which would never fit in the memory of any desktop computer.  :)\n. That's more a topic for the forum... but you can have IDs on the server that are different than on the client.  But if efficiency is not really needed then it's also not a big deal to just send the UUIDs as strings.\n. Please fix your browser and post support questions on the forum.\n. Well, you are so far the only one who has been unable to read the forum... so I suspect your browser or your system is misconfigured in some way.  In case it's a browser problem, here is how the colors look to everyone else:  http://i.imgur.com/KTiE0zW.png\n. Well, if that's still a problem then it might be settings on your monitor or perhaps there is an issue with your eyes or something.  As that is perfectly readable to me and I'm generally the first to complain about such things.\nTry adjusting the contrast on your monitor to normal human levels.\n. Paper doesn't shine in our eyes.  Too much contrast makes things less readable, not more.\nYou are the first human to have complained so far.  There must be half the web you have problems reading.\n. Well, as convenient as I would find it, I think having this enableClipping() method on spatial is kind of the wrong place API-wise.  Seems more like a render state thing to me.\n. I did not realize this one had been closed... as it's really my fault for not taking a look at it deeper.  In the intervening months, I agree that a proper solution (unfortunately) has to be done as part of the scene hierarchy.  I will take a look at this code and see what's salvageable at this point.  Even done at this API level, I feel like the spatial hierarchy inheritance of clip rectangle can be done differently and cleanup the renderer changes.  But we'll see.\n. I wonder if the assertion is just bogus now, then.  I guess we'd have to look and see if some other thing has a problem with a negative joyAxis or if it's supposed to mean something else.  I also wonder where the joyAxis comes from (having not looked at the code in a while :))\nNot sure when I will get to this.\n. Random things:\n-if escaping is not already supported then that's kind of a problem\n-we should only be accepting valid tokens anyway... so that would be one way to solve the problem\n-paths (and all such user-defined strings) should probably have been quoted all along.\nThese are very common errors in hand-rolled parsers, though.\nAnyway, to me the easy fix is to optionally allow quotes.  That way we maintain backwards compatibility but also support quoted paths.  I don't know how the split is done now but I'd think it's possible to adjust a regex to automatically catch quoted values in general.  Might require some more general refactoring.\n. Because that will ALSO break backwards compatibility in a big way, ie: every material ever everywhere becomes broken.\n. Yeah, I also look forward to seeing what @DannyJo has done... especially if it lets us also easily add things like repeat for just x or just y, etc.... because I  had to abandon j3ms in Mythruna config for that reason.\n. Not to mention that LightControl already has cloneForSpatial()... so.... yeah, if you do mention this on a forum or a different issue then include exactly what you are talking about at the same time.\n. Though if we are going to add bloat to a class that shouldn't be used in real games... why not have made it a boolean flag to turn on/off?\n. A couple of my boxes are still WinXP 32 bit and I'd like to continue using\nthem for a while with JME.\nOn Wed, Aug 5, 2015 at 10:10 AM, Erlend Sogge Heggen \nnotifications@github.com wrote:\n\nDetermine if 32-bit installers are required\nI'd say just don't include them for the alpha/beta releases, and then we\ncan gauge how many people are missing them.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/315#issuecomment-128010358\n.\n. Hmm... I thought ColoredTextured was actually removed.  Pretty sure it's deprecated and replaced by Unshaded.j3md, though.\n. You should ask trouble shooting questions on the forum instead of tagging onto another 'bug' report that should also have been a trouble shooting question on the forum... since the exception was clearly thrown by user code.\n. Yeah, with all due respect, this is a \"user doesn't know javadoc\" error because the substring() javadoc clearly states beginIndex and endIndex... not start and length.  If your first thought at sings of trouble isn't \"let me look at the javadoc\" then you will fail often.\n. Or, wait... maybe we are the dumb ones.  What the heck is substr()?\n. beginIndex 20 endIndex 1 means you are trying to capture the string backwards 19 characters, ie: -19 characters from the beginIndex.\n. Agree that this is an unoptimization because it makes the code harder to read but generates basically the same byte code.\n\nTo the OP, + is only bad when it's not part of the same expression, as in:\nString myValue = string1 + string2;\nmyValue += string3 + string4;\n...and so on.\nBecause it's possible that each separate line gets its own StringBuilder.\n. Bitmap text can be used in a lot of contexts where casting to an int would\nbe horrible.  Better to do your own centering, I guess.\nOn Sep 27, 2015 11:07 AM, \"slyh80\" notifications@github.com wrote:\n\nWhen using BitmapText to render a string while its alignment is set to\n\"Center\" and the text box has an odd width, the rendered text appears\nblurry for some of the lines.\nWhat it should look like:\nhttps://www.dropbox.com/s/fj1xldsco0pd5yj/centered-text-nice.png\nWhat it actually looks like:\nhttps://www.dropbox.com/s/j3d8l43y99wdvif/centered-text-ugly.png\nThe reason for this is that class 'Letters', which does the actual\nalignment calculation, for centered lines calculates a gapX position that\nis not an integer number, i.e. that is not pixel-perfect, resulting in the\nblurry text. IMHO the x coordinates of the rendered text should always be\nset to a whole number.\nThis could simply be achieved by casting the result of the calculation in\nline 217 of class 'com.jme3.font.Letters' to (int).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/355.\n. You are making the incorrect assumption that units are always pixels.\nOn Sep 28, 2015 4:20 PM, \"slyh80\" notifications@github.com wrote:\nDid you take a look at the code I mentioned?\nWhat could happen in the worst case if a line was moved a maximum of 0.5\n\"pixels\" to the left or right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/355#issuecomment-143863226\n.\n. Or, since the box used to center is 100% arbitrary and 100% set by you...\nyou could just always set an even-sized text box?\n\nThe \"for whatever reason\" is when using text in a 3D scene... or when\nanimating the text... or any of a dozen other reasons that snapping to\nunits would look pretty bad or put the text in completely strange places.\nWhen 1 unit is a meter in the 3D world, snapping looks pretty bad..\nScale is not the only thing that sets the font size... and > 0.3 seems\npretty arbitrary.  To be a correct solution, you'd have to let the user\nspecify their alignment units and then also take WORLD scale into account\nfor centering.  Or... just set an even sized text box to begin with, I\nguess.\nOn Wed, Sep 30, 2015 at 5:10 AM, slyh80 notifications@github.com wrote:\n\nWell, that's because in this case they actually are pixels, not just\nabstract units. So the suggested fix would in fact just snap the beginning\nof a centered line to a \"fullsize\" pixel.\nWe are talking about bitmap fonts here, after all.\nThere is one exception:\nIf you manually set the size of the font to something small (<2) by\ncalling BitmapFont.setSize(), some of the centered lines will be off by\nsome (screen) pixels. This is because a scale factor is applied to all\npositions and sizes, and so the pixels become in fact units.\nBut even for size values well below 1 the result looked far from\ncatastrophic. (Some of the lines were off by about 1 character.)\nI still see no reason to not round the indent value to an integer when\ncentering text. If the size of the font is not changed, everything looks\nnice and crisp. Currently half of all lines look blurry and crappy.\nIf in fact a user chooses to set the size to a very low value -- for\nwhatever reason, and instead of simply scaling the Node -- the centering is\noff by some (screen) pixels, which is hardly noticable, if at all.\nTo have the best of both worlds, you could even take the scale into\naccount before rounding:\nif (alignment == Align.Center) {\n                gapX = (width-lineWidth)/2;\n                if (getScale() > 0.3f) {\n                    gapX = Math.round(gapX);\n                }\n            } else if (alignment == Align.Right) {\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/355#issuecomment-144334143\n.\n. Note: these kinds of discussions should not happen in github.  They should\nhappen on the forum.\n\nOn Wed, Sep 30, 2015 at 5:17 AM, Paul Speed pspeed42@gmail.com wrote:\n\nOr, since the box used to center is 100% arbitrary and 100% set by you...\nyou could just always set an even-sized text box?\nThe \"for whatever reason\" is when using text in a 3D scene... or when\nanimating the text... or any of a dozen other reasons that snapping to\nunits would look pretty bad or put the text in completely strange places.\nWhen 1 unit is a meter in the 3D world, snapping looks pretty bad..\nScale is not the only thing that sets the font size... and > 0.3 seems\npretty arbitrary.  To be a correct solution, you'd have to let the user\nspecify their alignment units and then also take WORLD scale into account\nfor centering.  Or... just set an even sized text box to begin with, I\nguess.\nOn Wed, Sep 30, 2015 at 5:10 AM, slyh80 notifications@github.com wrote:\n\nWell, that's because in this case they actually are pixels, not just\nabstract units. So the suggested fix would in fact just snap the beginning\nof a centered line to a \"fullsize\" pixel.\nWe are talking about bitmap fonts here, after all.\nThere is one exception:\nIf you manually set the size of the font to something small (<2) by\ncalling BitmapFont.setSize(), some of the centered lines will be off by\nsome (screen) pixels. This is because a scale factor is applied to all\npositions and sizes, and so the pixels become in fact units.\nBut even for size values well below 1 the result looked far from\ncatastrophic. (Some of the lines were off by about 1 character.)\nI still see no reason to not round the indent value to an integer when\ncentering text. If the size of the font is not changed, everything looks\nnice and crisp. Currently half of all lines look blurry and crappy.\nIf in fact a user chooses to set the size to a very low value -- for\nwhatever reason, and instead of simply scaling the Node -- the centering is\noff by some (screen) pixels, which is hardly noticable, if at all.\nTo have the best of both worlds, you could even take the scale into\naccount before rounding:\nif (alignment == Align.Center) {\n                gapX = (width-lineWidth)/2;\n                if (getScale() > 0.3f) {\n                    gapX = Math.round(gapX);\n                }\n            } else if (alignment == Align.Right) {\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/355#issuecomment-144334143\n.\n. \n\n\nOn Wed, Sep 30, 2015 at 5:29 AM, slyh80 notifications@github.com wrote:\n\n100 - 77 = 23\n23 / 2 = 11,5\n(100 = box width; 77 = line width)\nSo, no, an even-sized text box wouldn't help a bit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/355#issuecomment-144337731\n.\n. No.  This fix assumes that bitmap text is being rendered on local pixel boundaries.  For a variety of reasons this may not be the case.\n\nFor example, if you alter that test to setSize(0.1) then I suspect you will have text centered in giant character-wide leaps.  This fix needs to be reverted and the issue closed as unfixable: \"not a bug\". Also, approximateEquals() is essentially already implemented.\nUse: v1.distanceSquared(v2) < EPSILON for whatever 'close' you want to define as approximate.\n. My concern in all of this was less whether we were getting the same values as the existing Quaternion and more about whether we were potentially introducing jitter that wasn't there before.  Quaternions are accumulated and used to position every object in the scene.  Any fluctuations out reasonably far from origin will likely be noticed as a lack of smoothness.\nSo, as a test, I used the following methodology...\nFirst, I created a double-based straight cos/sin based series of radials.  3600 radials from 0 to 2 PI at a radius of 1000.  I measured the distance between each successive point.  For perfect math, this distance should always be the same.  Indeed, the 'pure' version varies almost not at all... I calculate the max and min distances and take the difference: 2.0237145292867353E-12.\nThen I ran the same test using JME's quaternion.  Here we already have a small disadvantage because we're using float.  I do the distance calculation in double, though.  The variation in this case (max - min) is: 8.137615737373594E-4\nWorse, of course, but at a thousand meters from origin it is probably not noticeable.\nThen I ran with the fast-mult approach.  The variation in this case is definitely worse:\n0.0010742516680835035\n...it no longer even needs to render in scientific notation.  This was enough that I was going to sit on it overnight again and think about it.  Then I decided to graph the datasets to see where the jitter actually is.  After all, if the variations are at least consistent locally then it doesn't matter... no jitter in that case.\nI loaded up each set of deltas in open office calc and made some charts.\nhttp://i.imgur.com/YiimsbP.png\nWhen the scale is made the same between each chart, the 'pure' version shows no variation at all.  (Before that, it's small variations followed the same rough pattern of the other charts.)\nThis tells a slightly better story as the last two charts look very similar.  The third chart has some spikey outliers that are a little troubling.  I'm not sure it matters though as ultimately even the JME version is pretty chaotic at this scale.\nI have a double version of Quaternion in my SimMath package that does the same calculation as JME.  I may convert it to the faster mult and do some additional jitter tests.  I use that for my physics engine so I need more accuracy there but I'd also like the speed-up.\nSo far I'm kind of optimistic about applying this patch but I thought I'd present my evidence in case it bothers someone else more than it bothers me.\nI'll include my test just in case someone spots a flaw.\n```\nimport com.jme3.math.*;\npublic class TestQuaternion {\npublic static Vector3f fastMult( Quaternion q, Vector3f v ) {\n    float x = q.getX();\n    float y = q.getY();\n    float z = q.getZ();\n    float w = q.getW();\n\n    float vx = y * v.z - z * v.y;\n    float vy = z * v.x - x * v.z;\n    float vz = x * v.y - y * v.x;\n    vx += vx; vy += vy; vz += vz;\n\n    Vector3f store = new Vector3f();\n    store.x = v.x + w * vx + y * vz - z * vy;\n    store.y = v.y + w * vy + z * vx - x * vz;\n    store.z = v.z + w * vz + x * vy - y * vx;\n\n    return store;\n}\n\npublic static void main( String... args ) {\n\n    int radialCount = 3600;\n    double maxRadians = Math.PI * 2;\n    double radius = 1000;\n    double[][] baseline = new double[radialCount][2];\n\n    System.out.println(\"Baseline test with double-base trig:\");\n    double min = 100000;\n    double max = 0;\n    for( int i = 0; i < radialCount; i++ ) {\n        double rads = i * maxRadians / radialCount;\n        baseline[i][0] = Math.cos(rads) * radius; \n        baseline[i][1] = Math.sin(rads) * radius;\n\n        if( i > 0 ) {\n            double xd = baseline[i][0] - baseline[i-1][0];   \n            double yd = baseline[i][1] - baseline[i-1][1];\n            double d = Math.sqrt(xd * xd + yd * yd);\n            //System.out.println(\"[\" + baseline[i][0] + \", \" + baseline[i][1] + \"] dist:\" + d);\n            //System.out.println(d);\n            max = Math.max(d, max);\n            min = Math.min(d, min);\n        } \n    }\n    System.out.println(\"Variation:\" + (max - min) + \"  Max delta:\" + max + \"  min delta:\" + min);\n\n    System.out.println(\"Testing JME quaternion:\");\n    Quaternion quat = new Quaternion();       \n    double[][] jme = new double[radialCount][2];\n    min = 100000;\n    max = 0;\n    for( int i = 0; i < radialCount; i++ ) {\n        float rads = (float)(i * maxRadians / radialCount);\n        Vector3f v = new Vector3f((float)radius, 0, 0);\n        quat.fromAngles(0, 0, rads);\n        v = quat.mult(v);\n        jme[i][0] = v.x;\n        jme[i][1] = v.y;\n\n        if( i > 0 ) {\n            double xd = jme[i][0] - jme[i-1][0];   \n            double yd = jme[i][1] - jme[i-1][1];\n            double d = Math.sqrt(xd * xd + yd * yd);\n            //System.out.println(\"[\" + jme[i][0] + \", \" + jme[i][1] + \"] dist:\" + d);\n            //System.out.println(d);\n            max = Math.max(d, max);\n            min = Math.min(d, min);\n        } \n    }\n    System.out.println(\"Variation:\" + (max - min) + \"  Max delta:\" + max + \"  min delta:\" + min);\n\n    System.out.println(\"Testing fast quaternion:\");\n    double[][] fast = new double[radialCount][2]; \n    min = 100000;\n    max = 0;\n    for( int i = 0; i < radialCount; i++ ) {\n        float rads = (float)(i * maxRadians / radialCount);\n        Vector3f v = new Vector3f((float)radius, 0, 0);\n        quat.fromAngles(0, 0, rads);\n        v = fastMult(quat, v);\n        fast[i][0] = v.x;\n        fast[i][1] = v.y;\n\n        if( i > 0 ) {\n            double xd = fast[i][0] - fast[i-1][0];   \n            double yd = fast[i][1] - fast[i-1][1];\n            double d = Math.sqrt(xd * xd + yd * yd);\n            //System.out.println(\"[\" + fast[i][0] + \", \" + fast[i][1] + \"] dist:\" + d);\n            //System.out.println(d);\n            max = Math.max(d, max);\n            min = Math.min(d, min);\n        } \n    }\n    System.out.println(\"Variation:\" + (max - min) + \"  Max delta:\" + max + \"  min delta:\" + min);\n\n}\n\n}\n```\n. Just adding more information.  I did further testing with my double-based quaternions and the good news (at least for me) is that the math is still pretty accurate in that case.  Jitter errors are at a similar number of decimal places out (11 or 12).  It doesn't really help the other case but it's maybe useful information.\nAs an experiment, I also tried doing the float-in/out based calculations with doubles internally.  ie: promote the floats to double, calculate, cast doubles back to float.  In a microbenchmark (on desktop at least) it's still faster than JME's built in approach.  The bad news is that the jitter is just as bad as the full float version.  So it's not really an issue with the calculations (further confirmed by the double test) but a combination of float-errors in the source data + float errors in the answers being exaggerated by the new math.\nAs an aside, I added loop timings to the above test using nano timer.  In many ways, this is a more accurate timing test than a more traditional targeted microbenchmark as it includes more than just the quat calculation (which in general is a teeny tiny part of a JME update loop).  If I up the iteration count to 36,000 radials then the timing differences are almost at the level of measurement error.  The largest gain I've seen is from JME:10.743824 ms to Fast:10.275049 ms.  And again, that's for 36,000 quaternion multiply calculations.  Every now and then through random JVM fluctuations that plagued microbenchmarks everywhere, the numbers even reverse.  (For example, my last run even has a JME:12.402135 ms to Fast:12.605513 ms)\nThe jitter does worry me a bit and I don't think it's entirely unfounded.  For example, imagine you had a blue cube slowly orbiting a planet at 1000 meters and the camera is positioned right next to the cube so that the 1 meter cube fills the screen.  Error rate of the vertex transformations would be at the third decimal place.  On a 1900x1200 screen, that's slightly better than a pixel's worth of jitter that wouldn't have been there with the JME-stock way.\nWill it be noticeable?  Maybe.  Is the chance that it is worth the small gains?  I dunno.  I'll let others decide.  Maybe my methodology is flawed.\n. I think you should post about this to the forum with more of the code so that the community can trouble-shoot it.  It might be a bug in our code or your code.  Hard to tell and github is not a trouble-shooting forum.\n. Trouble shooting questions should be done on the forum where discussion can take place and where you will get more eyeballs looking at the problem.\n. The logic here is weird.  It's line 228 that seems bizarre to me.  Why\nwould anyone want to look up the serializer for the serializer instead of\njust instantiating it.  Very strange.\nOn Tue, Dec 29, 2015 at 6:03 PM, lightbringer notifications@github.com\nwrote:\n\nTrying to specify the Serializer for a class annotated with @Serializable\nthough the \"serializer \" attribute does not work:\nThe class is correctly fetched in Serializerjava:224 from the annotation,\nbut the succeeding call to getSerializer in line 228 is forwarded through\nline 316 to getSerializerRegistration, effectively looking for a\nSerializer for the specified Serializer class Since that class isn't\nregistered, the method falls through to the end (failOnerror is set to\nfalse by getSerializer) and returns fieldSerializer, which is actually\nreturned back to the original registerClass call for the annotated class\nWorkaround:\nspecifying an instance of the desired Serializer upon registering the\nclass:\n@Serializable( serializer = MySerializerclass )\nclass Foo{\n}\nDoes not work:\nSerializerregisterClass( Fooclass );\nWorks:\nSerializerregisterClass( Fooclass, new MySerializer() );\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/394.\n. For sending data larger than 32k you should break your message up into\nsmaller chunks.  Since Serializer has to work with ByteBuffers there is no\nreal way to make them self-expanding so a fixed size has to be chosen.\nAlready 32k is pretty larger considering every outbound message has to\ncreate a full size buffer.  Anyway, we won't be applying that patch for\nsure.\n\nWe can't apply the rest of them either because of all of the reformatting.\nSo you will have to keep using your branch until I get around to fixing\nthem myself I guess.\nOn Sat, Jan 2, 2016 at 12:46 PM, lightbringer notifications@github.com\nwrote:\n\nAs the master head failed to run for me, I branched of the 3.1.alpha1 tag.\nSorry for the clutter in the diff, but I ran the classes I edited through\nmy code cleaner/formatter and many indentations, alphabetical/qualifier\nmethod ordering and missing final tags were changed.\nThis PR fixes two things:\n1. Fixing issue 394, when specifying the Serializer class through the\n@Serializable https://github.com/Serializable annotation. The edit took\nplace in public static SerializerRegistration registerClass( Class<?> cls,\nboolean failOnMiss ) in Serializer.java\nand now correctly uses reflection to instantiates the Serializer rather\nthan looking up the Serializer for the SerializerClass.\n2. It adds a new feature: I needed to send Savables larger than 32K over a\nmessage,the relevant changes are in the send/broadcast methods in\nDefaultClient and DefaultServer. I also added a new method to their\nrespective interface to configure the buffer size dynamically.\nThis also fixes an issue that the SavableSerializer had, the\nByteBuffer..Streams did not implement the Output/InputBufferStream contract\ncorrectly. This only showed when either of them is wrapped in a\nBuffered..Stream and buffers larger than 32K are read/written.\nIf you decide to discard the >32K buffers feature for\nDefaultClient/Server, I recommend to use the fixed SavableSerializer anyhow.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/398\nCommit Summary\n- - made maximum message size configurable\n- Fixed issue #394:\nFile Changes\n- M jme3-networking/src/main/java/com/jme3/network/Client.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-0\n  (128)\n- M jme3-networking/src/main/java/com/jme3/network/Server.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-1\n  (161)\n- M\n  jme3-networking/src/main/java/com/jme3/network/base/DefaultClient.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-2\n  (697)\n- M\n  jme3-networking/src/main/java/com/jme3/network/base/DefaultServer.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-3\n  (946)\n- M\n  jme3-networking/src/main/java/com/jme3/network/base/MessageProtocol.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-4\n  (162)\n- M\n  jme3-networking/src/main/java/com/jme3/network/serializing/Serializable.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-5\n  (8)\n- M\n  jme3-networking/src/main/java/com/jme3/network/serializing/Serializer.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-6\n  (630)\n- M\n  jme3-networking/src/main/java/com/jme3/network/serializing/serializers/SavableSerializer.java\n  https://github.com/jMonkeyEngine/jmonkeyengine/pull/398/files#diff-7\n  (101)\nPatch Links:\n- https://github.com/jMonkeyEngine/jmonkeyengine/pull/398.patch\n- https://github.com/jMonkeyEngine/jmonkeyengine/pull/398.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/398.\n. Also, \"master head doesn't run for me\" isn't a particularly good reason to submit an incompatible patch... since it runs for a large number of other people then it must be a fixable problem.  Thank you for the effort but it's frustrating that all of this work went into something unusable. :-/\n. Thanks for redoing it.  I'll take a look at this later tonight and try to apply it.\n. I guess the original PR was strangely submitted directly against the alpha\nbranch instead of master.  If I applied it then maybe it was applied there?\n\nI don't know.  I can't really apply this PR as written because it includes\nthree different unrelated commits... one of which is to Node.java which\nisn't even in the same package.\nOn Tue, Feb 23, 2016 at 12:12 PM, Kirill Vainer notifications@github.com\nwrote:\n\n@pspeed42 https://github.com/pspeed42 I think you have this issue fixed\non master already, right? Can we close this then?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-187795908\n.\n. Also, it's 1000x easier to apply a patch if you don't reformat unrelated\nlines of code.\n\nOn Tue, Feb 23, 2016 at 2:36 PM, Paul Speed pspeed42@gmail.com wrote:\n\nI guess the original PR was strangely submitted directly against the alpha\nbranch instead of master.  If I applied it then maybe it was applied there?\nI don't know.  I can't really apply this PR as written because it includes\nthree different unrelated commits... one of which is to Node.java which\nisn't even in the same package.\nOn Tue, Feb 23, 2016 at 12:12 PM, Kirill Vainer notifications@github.com\nwrote:\n\n@pspeed42 https://github.com/pspeed42 I think you have this issue\nfixed on master already, right? Can we close this then?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-187795908\n.\n. I think mostly people don't send the scene graph over the wire and so it\nnever comes up.\n\n\nAs to the other, even for the one class I'm willing to apply, there were\nabout a dozen lines changes just because you applied a different\nformatting.  It makes it harder to see what the actual change was, personal\npreference aside.  Seemed to me it could have been done in one if-block and\nI could have just clicked \"accept\" with little to no extra interpretation\non my part.\nOn Tue, Feb 23, 2016 at 2:48 PM, lightbringer notifications@github.com\nwrote:\n\nSomething weird happened here. The update in Node.java was done for\nanother issue, which to my knowledge has been applied elsewhere (PR #403\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/403 ). No idea why\nthis pops in this thread. I blame git for being super confusing to me.\nAnyway, I havent't touched the original issue here for a while. But this\nPR should't have any lines besides a few. The original PR was a bit messy,\ntrue.\nI remember there also being another problem with the SavableSerializer I\nfound after submitting this: you can't put more than one Savable in a\nByteBuffer, because the Importer will suck the Buffer dry no matter if it\nbelongs to object it's importing. Has that been addressed recently or is\nthat by design?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-187872468\n.\n. re:\"The rest is just auto-formatting screwup.\"\n\nStep 1: turn off auto-formatting.\nStep 2: profit\n...at least when working on an open source project.  Else it's like\nrearranging everyone's kitchen every time you walk through.\nOn Wed, Feb 24, 2016 at 11:03 AM, lightbringer notifications@github.com\nwrote:\n\nThe actual fix is replacing line 228 with a try/catch block (Though my IDE\nseems to have ignore my wish to make this Java 6 compliant and converted it\nto a multi-catch).\nLine 236 removes an unnecessary object instantiation.\nThe rest is just auto-formatting screwup. Is their a style file for\nEclipse or something similar somewhere in the repo? Haven't found anything.\nThe changes SavableSerializer.java aren't solving the whole problem, as I\ncommented on above.\nComment on sending SceneGraphs over the wire: I think the ability to clone\nthe scene graph is one of the key advantages of JMonkey when developing AI\nmethods that use a forward-model, i.e. agents that want to predict the\noutcome of an action by cloning the graph, invoking the action on the copy,\nand observing the resulting world state, without implementing a custom\nparallel scene graph. (I additionally send these to number crunching\ncluster nodes). However, this makes e.g.Unity unusable for me. Who thought\n\"making the SceneGraph a singleton\" is a brilliant idea?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-188320938\n.\n. If you code on enough open source projects, eventually you learn to easily\ntype in a lot of different styles.  Else your patches never get applied.\n\nOn Wed, Feb 24, 2016 at 11:32 AM, lightbringer notifications@github.com\nwrote:\n\nYou should not use the scenegraph for logic, only for visuals, you are\nactually doing an antipattern here.\nNot entirely sure how to read your comment, and what you mean by \"logic\"\nor how this is an anti pattern. Besides, my application has no visuals - it\nruns completely headless. I'm not writing a game here ;-)\nThe point of a forward-model is to predict the outcome of an action that\nyou don't know, and you want to replicate the actual environment as closely\nas possible. Of course, I could implement something that looks like the\nscene graph but isn't, but I don't see the point of that. See\nhttps://en.wikipedia.org/wiki/Internal_model_%28motor_control%29\n...at least when working on an open source project.\nYeah, discussing pro&con of automatic code styles is like entering the\nrabbit hole. At one point in my life, I worked on industry projects with\n200+ participants on the code base, and every time there was some poorly\nformatted code checked in, the person to blame had to throw a round.\nBecause that If-Statement there was supposed to cover the whole block. What\nblock? Oh ...\nBut hey, it's your kitchen ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-188340193\n.\n. So, just so we're crystal clear on why this PR hasn't been applied... it is\nbecause it is unacceptable in its current form.  Not because of the\nformatting but because it has erroneous changes in it. (I'm not even\nallowed to apply it because it has merge conflicts.)  Fixing the formatting\nwill just lessen the time I have to waste on it next time.  Recommend\ntrimming it to just the serializer changes.  Do the other savable stuff as\na different PR if you like.\n\nOn Wed, Feb 24, 2016 at 5:19 PM, Paul Speed pspeed42@gmail.com wrote:\n\nIf you code on enough open source projects, eventually you learn to easily\ntype in a lot of different styles.  Else your patches never get applied.\nOn Wed, Feb 24, 2016 at 11:32 AM, lightbringer notifications@github.com\nwrote:\n\nYou should not use the scenegraph for logic, only for visuals, you are\nactually doing an antipattern here.\nNot entirely sure how to read your comment, and what you mean by \"logic\"\nor how this is an anti pattern. Besides, my application has no visuals - it\nruns completely headless. I'm not writing a game here ;-)\nThe point of a forward-model is to predict the outcome of an action that\nyou don't know, and you want to replicate the actual environment as closely\nas possible. Of course, I could implement something that looks like the\nscene graph but isn't, but I don't see the point of that. See\nhttps://en.wikipedia.org/wiki/Internal_model_%28motor_control%29\n...at least when working on an open source project.\nYeah, discussing pro&con of automatic code styles is like entering the\nrabbit hole. At one point in my life, I worked on industry projects with\n200+ participants on the code base, and every time there was some poorly\nformatted code checked in, the person to blame had to throw a round.\nBecause that If-Statement there was supposed to cover the whole block. What\nblock? Oh ...\nBut hey, it's your kitchen ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/399#issuecomment-188340193\n.\n. I'm blind... I see the \"Merge\" button if I go back to the original link.  \n\n\nI'm going to fix this a slightly different way... but your PR was key in the solution.  So thanks for that.\n. Committed a slightly different fix.  Thanks again.\n. Use new Quaternion().fromAngles().  A three-float-arg constructor is too ambiguous on its own.\n. Early returns are a billions times more readable.  It's funny because people who are against early returns seem to have no problem with using \"break\" in a loop and it's exactly the same thing.  In C, there was a point to this structured dogma but in any language with a finally {} clause there is no point.\n. This is fine for a utility you use yourself but this will not be included in the engine.  I appreciate the work you put into it but it has several problems that prevent it from being included.\n1) it completely goes against BaseAppState which will eventually be THE base abstract app state.\n2) in the process, it messes up the 'state' of the app state since an app state can be disabled and not yet initialized and those are two distinct states.  (For example, an app state that you want to attach but enable later.)\n3) It does redundant processing in update().  The app state update() already won't be called until it's attached and enabled.\n4) It confuses getState() that means two different things depending on the argument passed.\n5) it has a ton of nearly useless methods that merely save a method call... and it's likely that half of these methods become totally broken when SimpleApplication goes away someday.  (setDisplayFps(), etc... versus even in your own class getApplication().setDisplayFps().)  These kinds of methods are 100% clutter.\n6) It includes a runnable wrapper thing that would have been better as its own utility class.  (Surprised Java8 doesn't include it already for the reason you describe.)  (In fact, since the underlying could could easily handle both I've often wanted to add an enqueue(Runnable) right on application.)\nIn general, this class takes an \"everything and the kitchen sink\" approach which is the exact opposite of the direction we are trying to head.\n. The enum is just a bad idea to track two completely different boolean\nstates.  I cannot think of any changes that would make this palatable for\ncore that wouldn't end up making it look just like BaseAppState.\nOn Sun, Feb 14, 2016 at 2:01 PM, john01dav notifications@github.com wrote:\n\nWould it be better if I did the following:\n-\nFix the state management (ie. add more possible states)\n   -\nRename one of the getState() methods\n   -\nRemove SimpleApplication delegations\n   -\nMove the RunnableWrapper class to SimpleApplication (probably in a\n   separate pull request, in fact I'm going to go do this now)\nAs for BaseAppState, I'm not sure how I can fully integrate this with it\n(not that I think that is a bad idea) due to the generic type it provides\nand the enum to keep track of the state rather than set of booleans.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/412#issuecomment-183951023\n.\n. But in this case it's providing nothing except some small code sugar.  It\ndoesn't even really provide type safety since none of the other classes\nneed this.  Plus, in the future when SimpleApplication is deprecated it\nwill be completely unncessary to cast to any special application class\nexcept in the very most specific cases.\n\nIt seems like a lot of trouble just to avoid ((MyAppClass)getApplication()).\nOn Sun, Feb 14, 2016 at 4:45 PM, john01dav notifications@github.com wrote:\n\nThe main thing I want to contribute is something to provide easy access to\nthe application class via generics. I don't think it is wise to add a\ngeneric type to an existing api class. Perhaps extending BaseAppState with\nGenericAppState to simply add the generic feature would be wise?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/412#issuecomment-183986564\n.\n. Typo: \"since none of the other classes need this\" \"since none of the other\nclasses use this\"\n\nOn Sun, Feb 14, 2016 at 5:32 PM, Paul Speed pspeed42@gmail.com wrote:\n\nBut in this case it's providing nothing except some small code sugar.  It\ndoesn't even really provide type safety since none of the other classes\nneed this.  Plus, in the future when SimpleApplication is deprecated it\nwill be completely unncessary to cast to any special application class\nexcept in the very most specific cases.\nIt seems like a lot of trouble just to avoid\n((MyAppClass)getApplication()).\nOn Sun, Feb 14, 2016 at 4:45 PM, john01dav notifications@github.com\nwrote:\n\nThe main thing I want to contribute is something to provide easy access\nto the application class via generics. I don't think it is wise to add a\ngeneric type to an existing api class. Perhaps extending BaseAppState with\nGenericAppState to simply add the generic feature would be wise?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/412#issuecomment-183986564\n.\n. Almost ready.  General convention is to have inner classes at the bottom of the class.  If you can make that change, apply it, and flatten the PR then I'll apply it.\n\n\nThanks. I've had this on my to-do list for a long time.  (Though my plans were more invasive because it bugs me a little that Runnables incur all of the Callable+Future overhead where Callables could easily have been wrapped in a Runnable and just have a Runnable queue..  It's a small thing in the big picture..)\n. But once we have an enqueue(Runnable) then we can flip it over internally later.\nThe while( task = getTask ) { !canceled ) loop could easily just be a loop over runnables.  The runnable wrapping Callable could be smart enough not to run it if canceled.  Done.  :)\n. By the way, that's why I LIKE that RunnableWrapper is internal to this class... easier to change later.\n. Thanks!\n. Special note that a workaround is to set the guiNode scale to 1, 1, -1 to\ninvert the Z on the guiNode.\nI have no idea why this is strange on swing.\nOn Wed, Mar 16, 2016 at 10:14 AM, Jean-Francois Renaud \nnotifications@github.com wrote:\n\nThe same problem seems to appear here too:\nhttp://hub.jmonkeyengine.org/t/lemur-components-not-showing-on-alpha3-swing/35354\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/428#issuecomment-197349993\n. Please post trouble shooting posts to the forum instead of filing non-bugs.\n. This bug is already fixed in 'master'.  A user reported it on the forum the day after alpha 4 was released and I fixed it the same day.\n. For reference: https://hub.jmonkeyengine.org/t/npe-with-jmonkeyengine-3-1-alpha-4-in-terrainlodcontrol/35484\n. Nah, it's good to have it here, too...as this is where people would likely\nlook for existing bugs.\n\nOn Sat, Apr 2, 2016 at 1:57 PM, MeFisto94 notifications@github.com wrote:\n\nOh, apologies.\nI should've searched for that issue before posting it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/466#issuecomment-204765753\n. Which tests?\n. You should post trouble shooting questions to the forum.  Most likely cause\nfor stuff like this is threading issues.\n\nOn Fri, Apr 8, 2016 at 1:47 AM, john01dav notifications@github.com wrote:\n\nI was recently testing my game and the following crash happened without\napparent cause as a significant number of procedural geometries were\nattached:\njava.lang.IllegalArgumentException: This NativeObject is not registered in this NativeObjectManager\n    at com.jme3.util.NativeObjectManager.deleteNativeObject(NativeObjectManager.java:136)\n    at com.jme3.util.NativeObjectManager.deleteUnused(NativeObjectManager.java:188)\n    at com.jme3.renderer.opengl.GLRenderer.postFrame(GLRenderer.java:870)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:189)\n    at com.jme3.system.lwjgl.LwjglCanvas.runLoop(LwjglCanvas.java:229)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\n    at java.lang.Thread.run(Thread.java:745)\nIn the past, when the exact same geometries (generated from the same seed)\nwere attached, this issue didn't occur. It also does not occur if I load\nthose same geometries again.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/474\n. Yes, but the point is that if the imported file specifically has shared materials then the user probably did that for a reason and we shouldn't undo it.  Anyway, MPOs sort of get rid of the last reason to leave them shared.\n. In the second case, normen's comment is true... see:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/tools/java/jme3tools/optimize/GeometryBatchFactory.java#L323\n\nBut yeah, InstancedNode is not as nice this way.\n. Even better, the AudioListenerState should maybe not even be added if there is no audio renderer configured.  But yeah, at least it should check for null.\n. The audio listener state was added by default.  It was maybe a questionable\ndecision to do that as it assumes everyone must be using camera position or\nwhatever.  I guess some apps don't hit this (like mine) because they\nalready only include the app states they specifically want by passing them\non the super() constructor.  I recommend that in general, by the way.\nOn Thu, May 12, 2016 at 5:14 PM, William Linna notifications@github.com\nwrote:\n\nI updated my game to jME 3.1 beta 1, and noticed that all my positional\nsound effects stopped working.\n(By 'stopped working' I mean that the sounds are barely recognizable, and\noften I don't hear them at all)\nThen I noticed that when I stop updating the listener location like this\nlistener.setLocation(localCharacter.getWorldTranslation());\nthen sounds started to work again. Further research led me to call this at\nsimpleInitApp:\nstateManager.getState(AudioListenerState.class).setEnabled(false);\nNow all the positional AudioNodes work correctly again, and I can continue\nwith updating the location of the listener.\nShould I do something differently, or is there a defect in\nAudioListenerState?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/496\n. Hmmm... I wonder why the code used LinkedList... it will be less optimal in many ways but especially for sorting.\n. LinkedList is only more optimal in the cases where one is adding or\nremoving from the front or back of the list.  Else ArrayList is more\noptimal in all cases... but especially for Collections.sort() which must\nindex into the list.  LinkedLists are horrible for indexing as it must\nalways iterate from the beginning.  Also, as for garbage, an ArrayList will\nhave much less garbage since LinkedList will create an internal linking\nentry per item.\n\nOn Thu, May 19, 2016 at 6:52 AM, NemesisMate notifications@github.com\nwrote:\n\nYes, I had the same wonder but without more knowledge I am reluctant to\nchange it (that's why I asked here\nhttps://hub.jmonkeyengine.org/t/native-bullet-raytest-randomly-giving-inverted-list/35511/2\nat first place)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/497#issuecomment-220291241\n. Just use ArrayList in both cases.  Whatever the original reasons for\nLinkedList they are not valid.  Either now or ever depends on historical\nperspective but it's just as likely a misunderstanding about optimization\non the part of the original author.\n\nOn Thu, May 19, 2016 at 7:12 AM, NemesisMate notifications@github.com\nwrote:\n\nI know all that theory, what I don't know is why it uses a LinkedList in\nfirst place. If the only reason is because of it was was just\nadding/removing, then I suppose it must be changed now (hm... or changed\nonly for the sorting case?). Maybe changing it depending on the case would\nbe the better but at cost of obtaining different list types on the\ndifferent methods (with/without sorting).\nSo, the different solutions would be:\n1. Change LinkedList by ArrayList in both cases (the rayTest and the\n   rayTestRaw).\n2. Change to ArrayList just for the rayTest case (sorted).\nIf you are more eager to one of them just say it and I'll adapt it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/497#issuecomment-220294797\n. Seems to me that maybe the real problem is this: \"This is wrong since they are regenrated every frame and trigger our \"does not support shared materials\" warning (since the matrices simply aren't equal)\"\n\n...once we can save/load Matrix4f maybe we just need to detect that a different way?\nPresumably the material wasn't shared when the skeleton control was serialized... but the skeleton control was serialized as part of the spatial that holds the material.  If we serialize/deserialze the material, is JME's serialization smart enough to fix up the reference?  If so then the skeleton control would have the right material and could null out these references itself.\nJust random ideas of different skeleton specific solutions.\n. \"don't use shared materials\" warnings.\n...if it's a warning then let them warn.  I thought it was an error... if so change it to a warning: done.\n. No... warn once and reset the buffer.  If the warning was real then the animation goes funky for them and they get a warning every frame... if not then everything moves along fine.\n. I think the second one is probably better.  The first one feels kind of hacky and will potentially hide the error from the user until some odd later time.  Yes, users might see false positive warnings in the issue's care but I understand that this fix is only temporary anyway.\nI'll defer to others' opinion at this point.\n. Just a note: if you want this change to go in 3.1 also then it's cool if you can apply the PR to that branch as well.  I think that's easy to do when the PR is generated (I actually don't know).  Else we have to remember to go back and cherry pick it... which we can but then might get missed.\n. Yes, that's right.  This PR was submitted against master and so will go into some eventual 3.2.  I wasn't sure if you also wanted it to be in 3.1 or not.\n. You should ask questions on the forum.\n. You should post trouble shooting questions on the forum.\n. Ah, but you only thought it was a bug... but it isn't.  Which is why you should post trouble shooting questions to the forum as you've done now.\n. But we could translate them into JME enums... then there is no problem, really.  I mean, not 1000 separate blend modes but the JME-equivalent of the blend mode options.\nI do think it's worth it because I've already had to add two blend modes for my own purposes that I could have avoided by being able to call this new functionality.  I'm fortunate enough to be a core dev so I just added them.  Not every combination is worth that and not every developer will be willing to put that effort.\n. re: \"Well that confuses me. I was thinking that issues get merged from master to the current/next release branch O.o\"  How would that work, exactly?  We would never get to a stable release of anything ever if we merged all changes to all branches.  It can't work.\nWhen we start a release process, we create a branch.  I think we created the 3.1 branch more than 2 years ago(?).  Sometimes when a person submitted a change to the master branch (future 3.2) then we'd also apply it to the 3.1 branch if it was appropriate.  This is very hard to keep track of, though, and it's way easier if people submitting patches clue us into where they think it should go by applying it to the appropriate branch(es).  3.1 is kind of bug fixes only now and we usually let the person submitting the PR have the first crack at filtering, I guess.  It's too easy for us to miss something otherwise... as in this case.. The issue tracker is not a forum.\n. Thanks for contributing but I don't think we'll include this in core.  For one, it's really small to implement inline when needed:\nnew AbstractControl() {\n    public void controlUpdate( float tpf ) {\n        spatial.rotate(some values * tpf);\n    }\n}\nCode that's included has an incurred ongoing maintenance cost and the utility here does not offset that cost.\nSecond, for real games, rotation is generally controlled as part of the game object and controls are firmly on the \"visualization\" side.  JME often shows/does things in test and demos that are \"quick and dirty\" and might use something like this (but see the 5 lines of code that would work in that case) but it's kind of wrong to encourage that on core level when we can easily avoid it.\n. re: \"P.S. / offtopic: I'm always confused: override or overwrite? :)\"\nOverride is what you do with methods.  Overwrite is what you do with a pen when you write over something that was already written.  Overwrite has nothing to do with coding and is just a common \"mispronunciation\" by many folks, most of whom have English as a second language and the rest of us translate automatically for them.\nDo note if it helps you remember, there is an @Override annotation but there is no 'overwrite' anything.\n. Then you should remove Cloneable, too... but oh wait, you can't.  :)\nIt's better if we include the JmeCloneable interface everywhere that the Cloneable interface is.  So if you remove one then remove both... or don't remove either.\n. Not sure it matters in this case since this is just simple cloning of a regular Java object.  I don't think the other jme math classes use the new cloner either.\n. Please ask trouble shooting questions on the forum and/or wait for an answer there.  This is not a JME bug.  This is a \"your understanding\" bug.\n. I've fixed this on 3.1 and master.  I even added a test to the jme3-examples TestCloneSpatial app.\nNote: even though BitmapText would clone before it was a broken clone.  So until now it's never really been properly cloneable.. Seems like if we just exposed the modified flags then all of this could be done with one external utility class and a user parameter (for the, to me, unnecessary 'debug name')... and it wouldn't clutter up the code with a check that most experienced JME users avoid naturally.\nI mean, I'll leave it to the others but I'm against this patch.. re: (despite I still didnt find info about how it could be a 'user parameter')\nspatial.setUserData(\"myDebugName\", \"This is a debug string\")\nre \"Oh, these changes are solely intented towards new-comers.\"\nYes, but new-comers will learn their lesson fast and then understand more why it's an issue... but these changes will dirty up the code and increase the maintenance burden (without actually teaching those users what's really wrong).  We would have to support these calls basically forever even if next version we came up with a better way to do updates where this wasn't an issue anymore.\nThis kind of debugging stuff should not be embedded right into the core classes.. Yeah, logger to LOGGER is a no-no.  In general, don't change unnecessary things if you want your patch accepted.. It's funny how a good change will show me a piece of code that scares me for completely different reasons.  That if check is very scary.  +/- 1 centimeter within 1.0 means it's unit?!?  Yikes.  It's also completely different than the check in normalize() fortunately.  I guess there is no real reason for code to ever call isUnitVector() but still.\nMy math-brain is a little weak at the moment so I'm not sure if the lack of sqrt() makes this problem worse or better... that's the only reason I hesitate to accept it.  We may want to use the same check we use in normalize()... but that one actually might be too strict.  Floating point comparison should always have some epsilon I guess... but +/- cm is way too big in my opinion.. Yes, there is no reason to have sqrt() here.  We removed it incorrectly before.\n...but the lack of a decent epsilon worries me because I'm not sure if it magnifies or minimizes the issue to switch it.  I'm also trying to think of a case where user code would be calling this often.  I mean we should fix it... but we should really fix it.. Doing some quick checks, I guess it's ok.  0.99 * 0.99 = 0.9801... which is better for us.  (A change in behavior but a good one)  1.01 * 1.01 = 1.0201... which is also better for us.  (again a better change in behavior)\n...still be nice to fix it properly, though.. A fun read if you are interested in math: https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/. @empirephoenix did you read the included article?  And anyway, we know one of our test values is 1... so right there we at least know the range of magnitude in which we are dealing.  It should be possible to come up with a valid epsilon in that case but we'd probably have to base it on abs(val - 1f) instead of two separate comparisons.  Making the user pass an epsilon doesn't make much sense to me, either because of that.  We should change the method name if we allow an epsilon isCloseToUnit(float range)\nAnd either way, if you are using isUnitVector() to see if you need to normalize then you (the royal you) should note that normalize is already doing its own more (too) strict check.  In fact, I think it's probably possible to call normalizeLocal() over and over and have it do work every time.. I agree we should not fix this in 3.1... fortunately this patch is not for 3.1.  We can keep the method but we should actually fix it in 3.2+.. Note: I'm fine with keeping this method but your argument for keeping it is not a very strong one when isUnitVector() could easily be replaced with length() == 1 or lengthSquared() == 1 or whatever check the user wants to consider \"good enough\" for that check.\nIf we do keep it then we should fix it properly:  Subtract and compare against an appropriate epsilon.. I guess you need to keep some MVC style \"model\" object for the lights so that your editor can manage them.  This is going to be true for a dozen different things so it's worthwhile solving the problem \"How does the editor store things that don't get stored in the j3o?\"... because 90% of the stuff an editor needs should be left out of the j3o.. ...because it makes zero sense for a DirectionalLight to have a position, for example.. JME does not care about the position of your lights so it is not going to solve that problem for you.  JME specifically does NOT include features that are only useful for scene editors.\nStore that data however you want... in some project json file, Java serialization, some other mechanism... but it doesn't really belong in the scene.  j3o is not going to be a very good project format for you for a hundred reasons.  Not the least of which is that each new version of JME might break your old projects.. Even JME's SDK stores additional data in separate files.  Your unwillingness to give your users an actual project file is going to be a constant struggle for you... and will likely break with new JME updates.\nj3o is not really a transport format.  It's meant to be used to \"compile\" your scene for game distribution.  Even our own SDK relies on it a bit too much.. It looks good to me.  I'm no jme physics expert so hopefully someone else can look also.  It would be better if the commit were flattened but in this case I don't see that as a holdup.. Normen, could you double-check his flattened patch #612... or are you saying we should hold up applying that until the other checks are done?  My lack of familiarity with the code makes my uncomfortable to press the button.  (Alternately, if I had time to test it myself that would work too but I don't.)  It seems good to me but I don't know if there are additional implications.. This could change the behavior of existing apps that might rely on the old behavior.  Best to wait for 3.3.. Also, in the future you might actually look at the release page that might explain why such a situation exists.  Since in this case it said right at the very top of the release description.. Do note: generally user code should not be using TempVars.  It's a sign of big problems.  JME has no choice in some cases but user code almost always does.. In user-level code, there is almost always a better way to reduce your allocations.  You have access to your own fields, your own lifecycle, and so on.  JME often uses similar tactics when possible to avoid using tempvars.  Tempvars is a last resort in code that is executed often and has no other way to keep context.. But see... there's no patch I guess so we're only arguing over hypothetical code.. It's fine to close this because \"neat idea\" without a patch is destined to languish.  The issue we had was that making TempVars Closeable is meaningless without also changing the rest of the engine to use it.  Since if users are using TempVars then they are already doing the wrong thing.  So making it Closeable on its own has 0 effect on anything important.. I assume we are 100% sure that the changes to the buffer are being done from the rendering thread?. Euler angles are ambiguous.  A quaternion is not.  It is a compact representation of angles.  You are never guaranteed to get the same euler angles out that you put into it.  It's pure coincidence if you do.. You've removed the description on the order that the angles are applied.  That's important because it's completely arbitrary and makes a big difference.  If you apply them in a different order then you get different results.  I mean, it was wrong but it's important. :)  Order is yaw then pitch then roll.  I think the person writing the docs got confused with the difference between them.  yaw = rotation around y.  pitch = rotation around x.  roll = rotation around z.. The old text was wrong, I think.  We apply them in yaw, pitch, roll order.. No, that's absolutely not the case.  Yaw is definitely first.  You look left/right before any other rotations are applied... otherwise you would induce side-effect roll with every other action.  (Imagine if you pitch first and then yaw, you will be inducing a roll as well.). Reread your post... it is possible that roll is first but it would be very strange.  Probably we should write a test that uses something like a fly camera but with the mouse wheel used to add roll.  Then we'd see for sure.. Note: if you have the time... it might easier to add mouse wheel to roll support to the Lemur Gem for camera movement since it already keeps separate yaw/pitch instead of applying quaternions every time.. Please ask questions on the forum not as bug reports.. You should ask questions on the forum.  This is not a forum.  This is a bug tracking page.  That's what the forum is for... asking questions.\nIn other words, don't ask questions here... ask them on the forum since the forum is the place to ask questions.. User code should generally not be using TempVars because 99% of the time there is a better more efficient way.  Even in your example, those controls could keep a few of their own fields around for doing these calculations and it would be even MORE efficient than using TempVars.  (TempVars usage is definitely not free... but in general it's better than allocating new variables though there are places in the engine I think it's a total waste when not on Android.)  \nAnyway, user-level code often has the benefit of context where they can keep their own working variables.  JME quite frequently finds itself in the case where it is not reasonable to keep local context around just for some math operation.  At the library level its wasteful on a very fine-grained level since utility code lacks context.  Even still, there are probably some places in the engine code where TempVars usage is dumb.  I haven't done a thorough audit.\nBut as a general statement, if user code is using TempVars then that user code is probably non-optimal on several levels.. I think someone has not done a great job of explaining what the real issue is because I capture the Prt Scr button on Windows all the time... in fact, I guess it's the default mapping for the screen shot app state.... which I guess is really the Sys Req key on all of my keyboards:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/app/state/ScreenshotAppState.java#L176\n...so I guess there are keyboards that do not pair these?\nAs far as this:\n\"It would need to be increased and hence breaking compatibility for anyone relying on this being 0xE0 instead of referring to KEY_LAST\"\n...those people should have their Java license taken away, I think. ;)  That's what constants are for.. Yeah, and I think adding the keycode is easy.  Just add the constant.  It sounds like it should be 154:\nunsupported key:154\n...which there is no KeyInput value for yet.  (154 = 0x9a)\n    public static final int KEY_UNLABELED = 0x97;\n    public static final int KEY_NUMPADENTER = 0x9C;\n...so there is room for it there.  (Then change the appropriate places in the system-specific event classes of course.. AwtKeyInput in this case.)\n. If an app wants to respond to print screen then they should register to listen to that.  If they want to handle 90% of user's \"hitting print screen\" then they will also want to register for sys req.  (Bottom line is we should not be interpretting intent at the key event processing level... if it's a separate print screen button then send that code.  If it's a sys req button that happens to also be print screen then send the sys req code.)\nHowever, the fact that LWJGL doesn't even send it is a separate bug.. That seems reasonable... Mention that it's for separate prt scrn buttons\nonly (and consider using prt screen instead of \"print screen\"... See the\nother constants.)... And that for most use cases you really want sys req.\nIt's a similar issue with enter and numpad enter (which is actually the\nregular enter let on Macs)\nOn Jan 14, 2018 6:01 AM, \"MeFisto94\" notifications@github.com wrote:\n\nWell technically I think LWJGL is just wrong there assuming that it's the\nSysReq Key because (at least according to wikipedia) the actual sysreq key\nis now rather a combination of alt + something else.\nAwt might be querying the OS in a different way or is simply aware of the\ndifference.\nHow about a javadoc hint for KEY_PRINTSCREEN in combination with lwjgl?\nBecause else everyone falls into the pit of \"why doesn't print screen\nlisten to a keypress of \"print screen\"\".\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/682#issuecomment-357503662,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrfnnFhIpv6MXPb0QOTdr9gCX82Qy7mks5tKd5xgaJpZM4OS6pq\n.\n. Oh, and the lwjgl thing is definitely a bug on their side and probably\ndeserves a mention in our docs... But anyone wanting to do actual \"print\nscreen\" behavior will always want at least sys req anyway.\n\nOn Jan 14, 2018 6:04 AM, \"Paul Speed\" pspeed42@gmail.com wrote:\n\nThat seems reasonable... Mention that it's for separate prt scrn buttons\nonly (and consider using prt screen instead of \"print screen\"... See the\nother constants.)... And that for most use cases you really want sys req.\nIt's a similar issue with enter and numpad enter (which is actually the\nregular enter let on Macs)\nOn Jan 14, 2018 6:01 AM, \"MeFisto94\" notifications@github.com wrote:\n\nWell technically I think LWJGL is just wrong there assuming that it's the\nSysReq Key because (at least according to wikipedia) the actual sysreq key\nis now rather a combination of alt + something else.\nAwt might be querying the OS in a different way or is simply aware of the\ndifference.\nHow about a javadoc hint for KEY_PRINTSCREEN in combination with lwjgl?\nBecause else everyone falls into the pit of \"why doesn't print screen\nlisten to a keypress of \"print screen\"\".\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/682#issuecomment-357503662,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrfnnFhIpv6MXPb0QOTdr9gCX82Qy7mks5tKd5xgaJpZM4OS6pq\n.\n\n\n. Only if you were born recently, I guess.  Anyone who has ever mapped a key knows that the key is really keycode sys req.  Lying to them and telling them that it's a prt scrn button is wrong.  Just wrong wrong wrong.\n\nIt's the sys req keycode.  We should NOT NOT NOT be interpretting it as anything else at a low level key input API.  That would be as horribly wrong as deciding that we should map letter keys differently to help the French play WASD based games on their keyboards.  Do not interpret the keycodes.\n...plus, then what would you do for those folks who really do want to let users map them differently.. Step 1: ask trouble shooting questions on the forum.\nStep 2: ask trouble shooting questions on the forum.\nStep 3: ask trouble shooting questions on the forum.. I see the messages.  I will take a look... I just don't have time right now.. To me, the constructor changes kind of seem unnecessary.  There is no strong reason to pass in a starting capacity as the backing list gets recreated all the time.  But there is no problem with them, either... so I guess it's ok.. The weird thing about including this in 3.2.2 is the new functionality \"Spatial.setWorldTransform()\" (which I'm not 100% happy with the name but neither can I think of one better... just a shame to imply a bean-style setter that isn't really.)\nAlso, while it may be unlikely, could it be the case where some user has a malformed model that has ignore transform set on an attachment and doesn't realize it?  Now this change will break their game.  So I'm inclined to not include this in 3.2.2.. I admit the old code is wrong... by looking at it I see that it's treating b as an angle when it's clearly a vertical slice.\n...but where does this formula come from:\nfloat scale = 2f * FastMath.sqrt(b - b * b);\nI might have calculated the scale differently.  But I'd have also calculated b differently, I guess.  If it ran 1 to -1 then I guess scale would be more straight forward maybe?  sqrt(1 - b * b) if my envelope math is right.  I guess that's not too different but it's closer to an inversion of Pythagoras: a^2 + b^2 = c^2... where c = 1. Note: we see all of the commits as they come through.  You don't have to mention us all the time unless it's been a while without comment.. You will have to make a really strong case as to why this is a problem... because that's a pretty typical development practice and we are unlikely to stop doing it.  It could just be that we are never going to be compatible with \"jingsaw\" (sic).. The engine doesn't need documentation... so the engine shouldn't have documentation features built into it.. Probably because he let his IDE uglify it.  On interfaces, I guess all fields are static final by default but I think it's still a bad practice to remove them.  It confuses users and makes constants harder to find using normal search tools.  I suggest rejecting the patch until that's fixed.. I'm not ok with public not being on the interfaces.   Please put them back and stop using \"instant fix\" on your editor. \nEdit: or what are we talking about now?. Things like this:\nstatic final int AXIS_POV_X = 254;\nShould be:\npublic static final int AXIS_POV_X = 254;\nI prefer it for the methods as well but I'm less strict about it.  I prefer method signatures to match when possible with the implementations.. I don't know bullet well but the getUserObject() name implies that this would be a user object you'd supply by calling setUserObject()... which I don't see anywhere in the code.  Can you confirm that your original.getUserObject() is not null?\nIt's possible that it's not cloned properly but your example wouldn't show this, I think.. Oh, I see... it should be the spatial.\nIn that case, why not just get the spatial?  (I mean, it's a bug but it seems like a simple workaround to me.). I think PhysicsObject or whatever just needs to override cloneFields() and do the right thing with its local fields.. re: \"/*\n+     * Print Screen key.\n+     * NOTE: Only use this if your Print Screen button\n+     * is separated else LWJGL will interpret this key\n+     * as KEY_SYSRQ\n+     /\n+    public static final int KEY_PRTSCREEN = 0x9A;\"\nIt's just not true.  It has nothing to do with LWJGL.\nIf you have a SysReq key on your keyboard then it probably also has a Ptr Scr ABOVE IT.  ie: back in the old days you'd have to hit a special key to make the sys req key a print screen key.  Modern operating systems don't make you hit shift or control anymore... but it's the sys req key though.  Keys are keys and not their interpretation.  For example the '[' is not a curly brace key.  It's exactly the same thing.\nSome KEYBOARDS will have a separate PRT SCR button.  Since this is not the Sys Req key, it will have a different scan code.  Different keys, different scan codes.  Scan code = key.  Scan code != interpretation of key.  '[' has a scan code... '{' does not unless some keyboard has a separate key for '{'.\nHere is what I suggest.  Change the constant to \"PRTSCR\" (arbitrarily since most of the keyboards in my house with a dedicated print screen button have Prt Scr.  The laptops have PrntScrn and one keyboard mixes the two approaches.)\nThen change the comment to:\nPrtScr key.\nNote: for use on keyboards with a PrtScr key that is separate from the SysRq key.  Most keyboards combine SysRq and PrtScr so if the intent is to actually capture the user's desire to capture the screen then SysRq is the most likely scan code.  Use PrtScr to catch the rest (laptops, mini-keyboards, etc.).\n\nNote: the different abbreviated forms above are on purpose and should be kept as is.  If we keep using the words \"print screen\" then it too strongly associates with \"the thing I want to do\" and has little or nothing to do with \"key scan codes that will be sent\".. And I don't really care if nulls are valid or not but assertions should not throw NPEs regardless.. Didn't the SDK implement its own asset manager wrapper for similar (and other) reasons?  Wouldn't an IDE carefully manage its own asset manager so that it could clear the cache surgically, etc..\n...what is the \"in game\" use-case for runtime fix-up of broken assets?. An exception does that just fine.  We're talking about behavior other than throwing an exception for bad data, ie: \"bad data\" is no longer \"exceptional\" behavior.... ie: bad data is to be expected during normal runtime.\nThat seems like an editor-specific feature to me and is easily accommodated in editor-specific code.. Repeating myself: an editor would implement its own asset manager and catch the exceptions to do something nicer... or even do deeper rewrite but wrapping and catching is the easiest.  The game would use the regular asset manager.\nIn general, the engine will not implement editor-specific features but especially when they are pretty trivial to work around.. Without having time to read in detail, I would probably think that all of those cases should be an exception.. I'm done with this conversation and your BS... you can read what I wrote or you can make stuff up.  The answer is still the same.. Here... maybe I can play the game, too.\nWhy do you keep insisting I told you to rewrite the whole engine?. For reference: https://en.wikipedia.org/wiki/Straw_man\n...and few things will \"trigger\" me as fast as putting words in my mouth to make me look stupid.. There could be a larger conversation about how rigid the asset manager currently is, also.  How far do we want to open things up?\nShould it act strictly as probably originally intended, ie: like the old games that bundled all of their assets into a compiled resource file and you always knew everything was there?\nOr should it be more forgiving and allow the developer to configure fallback for things like missing textures?  (For example, it bugs the hell out of me that I can't have it fallback to a global texture pool if it doesn't find the model-specific one... or that I can't even probe to see if an asset exists.)  I think it could probably be more configurable... but whatever the case, it should decide what it wants to be and then do that in the best and most consistent way.\nIf someone can figure out a way to let me more easily have two FNT loaders at once, that would be great, too. ;). And note: you can already do some of that by overriding and wrapping the existing loaders for things like textures... but note that would be a lot easier if the asset manager was more \"introspectable\" as far as what is already registered.\nIt's possible we should/could extend the existing asset event listener (https://javadoc.jmonkeyengine.org/com/jme3/asset/AssetEventListener.html) support to allow overriding default behavior... or just require that it be the thing that actually throws the exception (though that doesn't easily allow for path redirection).. This would potentially break applications relying on the old unmultiplied behavior.  Best for 3.3 and not 3.2.2.. I didn't change the tag of anything.  I changed the milestone marker that sgold is using to see what should go into 3.2.2.  The code was merged to master.  sgold is trying to figure out what to merge to the 3.2.x branch for 3.2.2.  Since this code might break an existing 3.2.1 application then this should not go into 3.2.2.. I don't think this is generally useful and can be equivalently done through reflection for those very rare cases that it is necessary.  As a rule, JME tends to not add things to the engine that are only useful for \"editors\"... and in this case the information is already available anyway.  KeyInput.class.getFields().. Did you read back where we had him put it back because we prefer it the verbose way in this case?\na) it's easier to cut-paste\nb) it's easier to grep/search through code\nc) it avoids conversations like these where you have to point to the spec to prove that you can do it.. So we are not going to fix the cloning here or will that be a separate PR\nor something?\nOn Fri, Feb 23, 2018 at 3:54 PM, Stephen Gold notifications@github.com\nwrote:\n\nClosed #825 https://github.com/jMonkeyEngine/jmonkeyengine/issues/825.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/825#event-1489916224,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrfnnuYTrWr4m_vXbbU8UQkiuli-vB4ks5tXyVogaJpZM4SEqxS\n.\n. Is BoneTrack also using a strange patter for clone()?  Or is this a\ndifferent issue?\n\nOn Fri, Feb 23, 2018 at 4:07 PM, Stephen Gold notifications@github.com\nwrote:\n\nWhen a BoneTrack with scales == null is cloned, the result is a track with\nscales != null. While this behavior doesn't change the appearance of the\nanimation, it is unexpected and unnecessary.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/829, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AGrfnvuEwEIb2qYuC-eW7_YG5c4C3wfeks5tXyh-gaJpZM4SRepF\n.\n. Why doesn't SpatialTrack clone() also follow the pattern and instead do its own cloning?. re: \"I don't want SpatialTrack.clone() to perform a deep clone of the track, because that would mean cloning the track spatial (plus all its controls and children). If the user wants a clone that deep, they should provide their own cloner.\"\n...but then you could always just not clone that in the cloneFields() or alternately, in clone() null out the field and then set it back.\n\nI guess the question is, what does it mean to not deep clone a spatial track that has a reference to a tracked spatial?  Do you want both tracks to share the spatial or the new track to have an empty spatial?  Either approach can be accommodated with a proper clone() method calling the JME Cloner.  (If you want it to share a reference, you could even just index it in the cloner so the spatial won't be cloned.. When you create a JME Cloner, you can tell it objects that you do not want to clone.\nhttp://javadoc.jmonkeyengine.org/com/jme3/util/clone/Cloner.html#setClonedValue-T-T-\ncloner.setClonedValue(trackedSpatial, trackedSpatial);\n...you could do similar to what's done for other objects and have a clone() and a clone(boolean) method (the first which calls the second with default behavior).  The boolean could control whether or not you stick that spatial in the cloner ahead of time as above.\nI think that's really clear what's happening: \"We are using the JME Cloner to clone this but we don't want to clone this one object.\"\nThen cloneFields() can call JME cloner to clone it just like always.. I don't think I have a strong opinion on the arrays thing.  We could make it so that it doesn't clone if it's already been \"immuted\".  If the dependencies are right, I guess we could even build a clone function for that type that would do that... clone it or return it depending on its mutability state. . Is it weird that the object isn't cloned?  I feel like the usage implies that the default behavior should be to use JME cloner to clone the object in the cloneFields() method.\nFrom the usage, it looks like the fix really should have been in cloneFields() to use the cloner to clone the user object (which would have reused the spatial if it was the spatial).  Of course, since the super.clone() method is not called you probably still need to copy the reference as is done in this patch but I think this is only a partial solution.. Why are we calling setUserObject()?  I think I lost the bubble on that one.\n...I think it's an odd side-effect that setUserObject() will be called for clones.. Seems like in addition to the fix, some of the defaults changed.  I recommend leaving this one until 3.3.. I'm not even sure that the existing zip messages even work... but it's super easy for users to just write their own messages based on them if they do.  This is not an engine feature, in my opinion.  Also, 9 times out of 10, the zipping takes as long as the 'latency' you save in the networking.. re: \"Why not remove or deprecate the feature then?\"\nBecause it might be working.  Some users might be using it.  I don't know.  I would never use it and I'm the one who rewrote SpiderMonkey.  \nAs to the other:\nBefore you waste a lot of the core dev's time putting in issues in the tracker, you could post messages to the forum about your ideas and get feedback there from a much larger audience.. Loading games over a network should be done with a protocol meant to handle moving large amounts of data quickly... like HTTP.\nSpiderMonkey is meant for real time messaging for games.  All of the messages are potentially generated PER CLIENT.  There is no way to really support this feature without a lot of ugly code and in the end no one would use it because it's the worst way to do the provided use-case.\nFor a better approach to \"loading games over network\", see \"getdown\": https://github.com/threerings/getdown. Not just \"could be\"... but it would be better separate.  There is no way a game networking API is ever going to be as efficient at streaming large files to a lot of clients as a web server is.  That is their job, after all.. Just some notes from my experience that may color what you say above:\n-imports are done by JME because shaders don't support includes\n-ifdefs are handled by the shader compiler after JME has already done its own import processing.\nSo, yeah, probably a set (not a list) of imported names to only do it once might be a solution.. Pasting in the code the first time the import is encountered seems right to me.  It should handle all cases as long as you aren't wrapping imports in #ifdef.. I'm against adding this method and I'm kind of against the javadoc change.  For one thing, the method is only replacing one line of code already.  For another, it's poorly implemented since it creates double-garbage.\nAs to the javadoc, a \"direction\" is a very specific thing: \"a unit vector pointing in some direction\"... ALL of JME's documentation will be WAAAY easier to read if you just know that.  It seems redundant after a while to mention it everywhere.. Yeah, ok.  If we start adding in all of the redundant exposition then the documentation will get out of hand.\n\"A unit vector of length one that is three values x,y,z that represents a direction in world x,y,z cartesian space relative to the origin of this ray that points in the direction of this ray relative to its origin.\"\n...all of that is said already by: \"the direction of the ray\"\nDirection already always (always always) implies a unit vector in the local reference frame pointing in some direction relative to that local reference frame's origin.  What else could it be?. No, that's definitely not right.  You will be getting the angle between the tips of the vectors which is definitely not the angle between the vectors.  Think of the hands on a clock.  You want the angle that would move one hand to the other hand's position... not the angle between the tips of the hands.. And truthfully, 9999 times out of 10,000, if you are using this method then you are already doing something wrong somewhere else.. Please ask trouble shooting questions on the forum.  Github is not for tech support.. Why does this have a getParent() == null check?  That doesn't make sense to me... and seems like a big change in behavior (I almost never attach my AudioNodes to anything, for example).  Definitely too risky for 3.2.2... and the check should maybe be removed.  (Or at least explained.). Position worked before and now it doesn't, right.  Velocity may have been broken before but position definitely wasn't... at least not when I've used it in the past.. There is no reason to deep clone Float or enums... in fact, if cloning an enum does anything but just copying the reference then the enum would be broken.\nSo, here is how you \"clone\" an enum above:\nclone = e;. In what cases does this come up?\n...by the way, all of those casts are unnecessary and make more work.  At best, it's a lot of compiler work to just return the same instance, at worst it causes boxing and unboxing (which may also end up returning the same instance in the end).. In that case the material parameter does know what type it is for that\nspecial case.  If it's float then it can just copy directly, ie: do nothing.\nOn Mon, Aug 27, 2018, 4:52 PM Stephen Gold notifications@github.com wrote:\n\nWhile cloning material parameter values, I encountered one that was a\nFloat.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/879#issuecomment-416364590,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrfntEmNGm-JWbgQlYmaRf1FNogZs5wks5uVFv_gaJpZM4WEhpT\n.\n. Cloner can clone Cloneable things.\n\nProbably just switch( VarType ) in the cloneFields() method.\nIf it truly concerns you then the solution is to register IdentityCloneFunction with the various types on the cloner constructor but I think the code and documentation to explain that is more trouble than it's worth.. This could break applications that are accidentally relying on the old behavior.  Recommend for 3.3 and not 3.2.2.. This could break existing apps relying on the broken behavior.  Recommend for 3.3 and not 3.2.2.. This could break existing apps relying on the old behavior.  Recommend for 3.3 and not 3.2.2.. This is fine for 3.2.2 because it essentially does nothing.  But note that a real conversion to SafeArrayList would also have us use the more efficient array iteration instead of a ton of get(i) calls:\nhttps://github.com/joliver82/jmonkeyengine/blob/d0e342acb16c2b1acad546cb6d661451b6f0756c/jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java#L494. Seems like this could break existing applications that are accidentally relying on the bug.  Recommend for 3.3 only and not 3.2.2.. Ok for 3.2.2... but only because the machinations necessary for some app to rely on this incorrect values seems to overwhelm even my imagination.. This \"fix\" makes no sense at all but is otherwise completely harmless for a 3.2.2 release.. Seems like this could break existing applications that are relying on the older behavior.  Recommend for 3.3 and not 3.2.2.. I don't think it's difficult to understand either way.  I mean, in one case you get an NPE that's cryptic and you have to track it down.  In the other you get a nice message... but they are far enough away from each other that it's not like most people will think \"Odd, the NPE can't be because of the argument I passed because it didn't throw an illegal argument exception...\"  If it does then maybe you are using the wrong library. ;)\nSometimes an NPE is much worse because it happens far from where the original error is... and almost always requires digging into the source code to find out what you did wrong.  (Good coding practice is that any library code that throws an NPE is probably buggy.)  I understand the arguments against a lot of checks everywhere but the null check is a pretty trivial one, too.. Hmmm... not sure there is a lack of consensus.  Remy and I both believe that IllegalArgumentException is better than NPE-go-hunt-in-the-source-but-which-version-again... So if someone wants to submit a patch along those lines then it would be appreciated.. Could be.   I guess many of us don't run with asserts enabled because of other issues.  Is it still the case that JME will fail sometimes with invalid asserts?. It already supports key codes and key chars... but note the key chars are adjusted based on modifiers, etc...  KEY_M on my keyboard means 'm' and Shift + KEY_M on my keyboard means 'M'.\nI'm not sure what the issue is.  If you bind your game directly to WASD then that's not going to work on french keyboards no matter what... because their keys are in different places.  This is a \"Game doesn't let me remap key inputs\" issue and not a \"JME is broken\" issue.\nGames should allow players to remap input.  If they don't then they only plan to support folks with the same keyboard/mouse/etc. setup that they have.\nOr is there some other underlying issue with lwjgl3?. Reading that thread... is your issue that the character code comes in a different event now or something?. Other places in JME call getWorldBound() without checking for null.  You can find other places in Camera (I think) where we had to add the check.  So I guess another alternative would have been to track down everywhere in JME where getWorldBound() is called and add a null check.  This seems like the cleaner option to me.\n\"uses more heap memory\"... yes, one additional BoundingBox per node without any children that continues to have no children with its world bound is next calculated.  It would be interesting to see how often that happens in practice.. Yeah, here's one of the places we had to fix so that an empty GUI node wouldn't crash JME:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/renderer/Camera.java#L1070\nThere are others... and probably still others yet unfixed.\nBesides, the world bound of an empty node is knowable.  It may even make sense to ask the question.  It seems reasonable to return it.  But I guess the argument could be made the other way, too.. There could be existing applications relying on null world bound to indicate no children.  Recommend this for 3.3 and not 3.2.2.. Existing apps may be relying on this bug accidentally.  Recommend for 3.3 and not 3.2.2.. We support relative paths in other loaders... not sure why we don't in this one.  Absolute paths is typically a hard-veto.  Whenever possible we try to avoid having to answer forum questions about \"My game runs on my machine but nowhere else\" style questions that have to do with path mistakes.  Absolute paths won't work in a packaged game and so JME won't support them.. Yeah, I'm fine with this.  It's useful to have apps fail fast in most cases... I only wish I'd thought of all of this when there was still time to make it the default behavior. :). It's a new feature.  3.2.2 should be a bug fix release only.. Set it on what?. So we would put a whole 16 float matrix on EVERY spatial everywhere... bitmap text, cubes, whatever... just so that the physics engine (which is totally and completely separate from the visualization because the physics engine is 'game objects') might want to set it sometimes.  When would it set it?  Every time it changes?  Or only when it needs to change?  How would it know it needs to change?\nIt's bad idea for about 400 reasons.. We're not going to add something to Spatial just to support the add-on physics engine.  It's silly.. Also, you'd still have to call something once a VISUALIZATION frame to get the latest value... something like apply..... But WHEN would you call it directly?  JNI calls back to Java are not free.  It's generally cheaper to call the other way... which is why JME does that.  And having the physics library update these values \"whenever they change\" is going to slow the physics engine down for no reason.... since those values might never get displayed in time.\nYou should post this kind of discussion on the forum so that everyone can pile on instead of just me.. Oh, and keep in mind that you can use JME's bullet wrapper without any spatials at all (which is really the proper way if you want to have real game objects).. So keep in mind, what you are suggesting is pretty much exactly the same as suggesting:\n\"Hey, why don't we have the database update our JText string directly every time the field updates...\"  It's 100% backwards.. Ah, I thought you understood how JNI worked.  You should probably learn how impossible what you say is... then post to the forum about it if you still think it's even possible and we can discuss the other 399 reasons that it's a bad idea.. Ask questions on the forum not in the bug tracker.. Ask questions on the forum, not in the bug tracker.. Apps should not use speed.  It's a broken concept because it equates animation time and visualization time with game time.  It automatically presumes and FORCES spatials to be game objects.  The whole concept will be removed eventually... so I'm against expanding the API since we should already add deprecated tags to these methods.. To LegacyApplication speed=0 is the same as paused=true.  Speed = anything else does nothing in LEGACY APPLICATION.\nSpeed should be moved to SimpleApplication where it can live in the same someday-deprecated state the SimpleApplication does... where it pretends that game time is the same as animation time is the same as screen update speed.  None of which is true.  Else you are saying if a GUI button is emitting sparkly particles as part of the general UI then those should ALSO slow down or hang when the game itself is running at half speed.\nThere is a more complicated question of \"which time\" that JME completely ignores and will have to be built into future concepts of \"pause\"... or just left up to the game.. Yes, I guess SimpleApplication is fine since it actually uses it... and then we can deprecate it with all of the rest of SimpleApplication when we get there.. I don't think this is a good change as it makes something public through the API that should not be public... and in apps that want it to be public it is trivial for them to add.  (Plus, I'm kind of against the 'speed' idea anyway, my own last name not withstanding.). ...not only that, speed = 0 seems to be the only interesting value in LegacyApplication and SimpleApplication does its own speed processing anyway.  I think the idea of speed should be completely removed from LegacyApplication.. a) wouldn't it be nice if JME assertions included a message.\nb) calling updateGeometricState() manually is generally incorrect anyway.  Not sure why it was being done.. I guess the assertion is making sure that the parent's overrides were applied first?\n```\n    protected void updateMatParamOverrides() {\n        refreshFlags &= ~RF_MATPARAM_OVERRIDE;\n    worldOverrides.clear();\n    if (parent == null) {\n        worldOverrides.addAll(localOverrides);\n    } else {\n        assert (parent.refreshFlags & RF_MATPARAM_OVERRIDE) == 0;\n        worldOverrides.addAll(parent.worldOverrides);\n        worldOverrides.addAll(localOverrides);\n    }\n\n}\n```\nThis implies that it is incorrect to ever call updateGeometricState() directly on a child. (which is new... was just ill advised before)\n. Well the assert is confirming that the parent has been updated before applying its overrides.  If we want to allow direct updateGeometricState calling on children then a lot more work would have to be done other than just removing that line.\nIt would be nice if we would go through and add messages to our asserts so that they mean something, though.. I think they were changed after moving, weren't they?. I'm not ready to completely fold Lemur's version into  JME yet.  It's fine if JME takes them as a fork but I don't necessarily agree with how they were changed but neither do I want to make a hard decision about that right now.  \"ContainsTweens\" is not a name I'd have ever picked... nor would I have returned the raw array.  Not sure what it's used for, though.. Yeah, it does seem like data is never cleared.\n...actually, the fact that the asset loader system was written to keep state like this is dangerous and leaky.  I mean, if the loader keeps all of this data around imagine loading a giant ogre or gltf or whatever file and never loading another one of that particular type... all of the data hangs out in RAM for no reason.\nFuture todo item would be to rewrite loaders to have a clear/reset method or just instantiate them every time instead of keeping thread-locals around.  I'm not sure if there is any advantage to keeping them around (and many many disadvantages).. I kind of agree that PhysicsControl should have a getSpatial() method... which would force all of those others to implement it somewhere.\nAs I recall, the point of this is because PhysicsControls will show up in collision events?  If so then, yes, PhysicsControl should definitely have getSpatial().. PhysicsControl is an interface.  If you add the method there then you will still need it on these classes.. Interfaces can't have implementations.  Some class will have to implement the method... anything with \"implements PhysicsControl\" would have to implement the method.\nAre you thinking of a different language maybe?. JME is still on Java 7 mostly... else we lose android support, I guess.. Also, a default interface method wouldn't have access to the spatial field and so would have nothing to return.  So you'd still need the method on the other classes.. Agreed.  Though I'd argue that the \"throw an exception\" case is the right one.\nSimple enough for the caller to do a mkdirs() first and it avoids peppering their file system with erroneous subdirectories if there is a bug in their code somewhere.. Yes, sometimes we are slaves to the bad decisions of the past.. A compromise might be to modify the interface to also have a version that has a boolean createDirectories argument... then the old version can call the new version with true... but folks can do it the safe way if they want to.. In JME nifty uses its own viewport and stuff, I guess.\nIf Nifty is not involved then someone should be able to make a test case that illustrates the issue that doesn't use nifty.  And if that non-nifty test case works fine then is probably useful information, too.. I mean, it's possible that I did something screwy as I had a very specific use-case in mind.  (Also, for double a variable-epsilon'ed comparison is even more useful than for float.)  So I hadn't really thought about NaN but followed some patterns I've followed before.\nAt a quick read, I think the logic still works, though.  NaN and anything else (including NaN) kicks out false no matter the epsilon... which I think is ok in the case of a comparison that is looking for a specific precision.\nIt's possible I've missed something, though.  In my use-case, I was trying to see if something moved \"more than a little\" or rotated \"more than a little\" in a case where both halves of the comparison were derived from essentially the same path of logic (one frame to the next).  Most of my \"little\" comes from float-double-float kinds of conversions.  And my use-case doesn't have to worry about quaternion flipping, etc.. re: \"The way the methods are written, if each test is false then the method returns true, meaning \"similar\". So I think the logic is broken for NaN.\"\nSince the tests are for delta > epsilon, can you explain in more detail how the method is broken?  (Note: NaN > epsilon is always true.). D'oh.  My quick testing was in groovy which apparently gives different results in this case.. That's probably better... but I think > 0 is more appropriate for a compare() result.\n. I think maybe when it's been merged it goes away.. Did you try other lwjgl apps?  Minecraft?  Etc.?\nSeems like this is likely not a JME issue.. You can already do raw instancing by manipulating the vertex buffers directly.  I do this even in the IsoSurfaceDemo to do instanced trees.. Looking at your code, it provides no real functionality on top of what is already available in Mesh except adding more code to maintain and \"yet another path to the renderer\".. For each VertexBuffer you can set how it behaves in the presence of instancing...whether it repeats for each instance (the default), maps 1:1 with the instance, and so on.\n\"\"\"\npublic void setInstanceSpan(int i)\nSets how this vertex buffer matches with rendered instances where 0 means no instancing at all, ie: all elements are per vertex. If set to 1 then each element goes with one instance. If set to 2 then each element goes with two instances and so on.\n\"\"\"\nSo usually the main position buffers, textures, colors, etc. are set to 0 (the default), and a special model position buffer is set to 1 that maps some number of elements per instance.  For JME's default shaders, this is the transform matrix so 16 values map per instance.  They can be setup manually like:\n        // Create the transform buffer\n        FloatBuffer xb = MatrixUtils.createMatrixBuffer(transforms);\n    VertexBuffer vb = new VertexBuffer(Type.InstanceData);\n    vb.setInstanceSpan(1);\n    vb.setupData(Usage.Stream, 16, Format.Float, xb);\n\n(MatrixUtils is a util class in the IsoSurface library but it's basically flattening an array of Matrix4fs into the format JME likes for its InstanceData.)\nhttps://github.com/Simsilica/IsoSurface/blob/master/src/main/java/com/simsilica/iso/util/MatrixUtils.java#L57\nThere is no requirement to use that format even if you've developed a custom shader.  But even with custom shaders, it is easy to reuse JME's matrix stuff because there is a glsl lib for it.  Makes most shader code not have to worry about whether or not the data is instanced or not... it just handles it.\nFor reference, this is the tree instancing from the IsoSurface demo:\nhttps://github.com/Simsilica/IsoSurface/blob/master/src/main/java/com/simsilica/iso/plot/InstanceTemplate.java#L74\nIt takes one tree mesh, clones it, and sets the appropriate per instance matrix information... using a regular Geometry... regular Mesh.  I could also have, for example, interleaved other types of per-instance data, or per two instance data, etc..\nIt's very flexible (because I fixed it to be flexible way back when it was first added).\n. No matter what, you have to have something to indicate that there are multiple instances.  Else what would you be rendering?\nOr put another way, why would you be rendering the mesh 1000 times to the exact same location?. Such as?. re: particles, using an equation based on what?  What are its inputs?\nAlso note: even though only one draw call is made to the driver, internally it will still be doing 1000 draw calls.  Instancing is a way to save memory, not time.  It would save time over 1000 separate geometries but it would not save time over a single 1000 element batch.\nFor your forest (a good use-case for instancing), how do you sample the heightmap?  Using what coordinate?  Where did you get it?. So, so far the two use-cases:\n1) giant particle meshes following a specific trajectory.\n2) batches of trees where the placement doesn't really matter, ie: totally random.\nAre these common enough to require a whole new path through the renderer?\nOr could these very specific use-cases simply extend Mesh and return whatever instance count they want for what I believe is the same effect?. You had an entirely new Geometry class... that does exactly everything the existing geometry class does except pass the mesh instance count through different than the actual mesh instance count.\nIt seems that is no harder to work through a j3o than a custom mesh extension.  (Like Quad, Sphere, etc. are already mesh extensions.). I'll reiterate once that the performance of small mesh particles done this way would be horrible... so I doubt they are doing this.\nThe approach definitely makes sense if you are BATCHING particles... because you don't want to constantly rebatch them.. 1000 instances, slightly faster than 1000 draw calls.  Waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay slower than a batch of 1000.\nTest it.. re: \"The patch proposes to add a middle class between Geometry and InstancedGeometry that provides only two abstract method used by InstancedGeometry. But ofc this is up to discussion.\"\n...and modifies a technique.\nAll to avoid changing the result of Mesh.getInstanceCount().\nFor example, you could do everything you want to do with one patch that let's the user specify the instance count on the mesh to override the calculated one.  Without creating additional classes, requiring additional weird Geometry subclasses, etc..\nIt's a mesh problem, not a geometry problem.. re: \"Is this affirmation based on your own measurements?\"\nYes... which confirmed what \"everyone on the internet\" will tell you about instancing.  I tried to use it for a grass shader.  It was pretty horrible compared to batching.. You know meshes can share buffers, right?\nMy tree instancing just cloned the loaded tree mesh and set the one buffer to do instancing.  I could have just as easily set some magic instance count.\nre: \"I assume you did this with the instancing currently available in jme, this means your instances were carrying an huge vertex buffer and performing several transformations on the vertex shader.\"\nYes, I did it with the current instancing.  I don't see how that is relevant.  There was one 3 element positioning buffer in my test, so for 1000 blades of grass there was a 3000 float buffer.  The GPU cares not for buffers of this size.  You will have to do some per vertex transformation no matter what... in your examples it is even MORE expensive than anything I was doing.\nBut it makes sense, for instancing the GPU has to dispatch 1000 separate draw calls internally.  It's going to be slower than just one big draw call.. re: \"But does not Khronos recommend using GPU instancing? https://www.khronos.org/opengl/wiki/Vertex_Rendering#Instancing\nIt says It will send the same vertices instancecount\u200b number of times, as though you called glDrawArrays/Elements in a loop of instancecount\u200b length, so this is a GPU-based optimization?\nYou mean this is slow?\"\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\nSLOWER THAN BATCHING.\n. For small particles, batching will be more efficient and won't take an overly large amount of memory.\nIt's a trade off.  If you have to draw 5000 trees then instancing will save you a bunch of memory over batching.  And it will save you time over 5000 tree Geometries.\nIf you have to draw 5000 triangles then you might as well batch them.. And if you've batched 5000 triangles, you don't want to rebatch them all the time... so if you can calculate trajectory/position in the shader then it's better.\nI did this with my waterfall shader.\n. For example, this is the waterfall:\nhttps://www.youtube.com/watch?v=s0rAjdx2PXI\nI think it's two Geometries just because there were two different types of particle but I believe they share the same mesh (different Materials).\nMesh is batched once.  Particle positions are calculated in shader based on g_Time.. Correct.\nBut how is that relevant to this discussion?\nI said instancing is usually dumb for small meshes.  That's still true.  Batching is better for small meshes.. Current particles take bandwidth because they constantly have to update their batch.  If the same particles were rewritten to use the 'instance count only' discussions in this thread then they would only take more memory... since the data only has to get sent once.  So then it's only a trade off of RAM versus speed.  And often not much RAM for particles.\nAnyway, you can already test all of this right now just be extending mesh to provide your own instance count that overrides the default calculation.. re: \" in a real world scenario your whole render time is not defined by your particles or some other random single component of your whole scene.\"\n...unless you try to use instancing for grass.  I bet that will have a pretty big impact on your whole scene. ;). What is the benefit of doing this?. Yes, I also agree there is no need for the change... which is why I was asking why it was needed.\n\"So my IDE doesn't recommend it to me...\" is not a valid excuse, for example.. JME hardcodes a specific set of BlendModes (as an enum) which is unfortunate but the way it is.  (JME did this in a lot of cases where I would not have used an enum... Bucket, VertexBuffer.Type, etc.)  The current alpha blending is meant for 3D scenes and so generally you would want to ignore target alpha.\nIf you need \"yet another blendmode\" then it could be added... if you can come up with a decent name.. Or is your contention that JME's BlendMode.Alpha is just wrong in general?\n/**\n         * Alpha blending, interpolates to source color from dest color\n         * using source alpha.\n         * <p>\n         * Result = Source Alpha * Source Color +\n         *          (1 - Source Alpha) * Dest Color -> (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n         */\n    Alpha,\nBecause looking at the code now, there are many other blending functions and even a BlendMode.Custom that lets you setup specific blending parameters.\nGL_ONE, GL_ONE from your picture is JME's AlphaAdditive:\n/**\n         * Additive blending that is multiplied with source alpha.\n         * For use with glows and particle emitters.\n         * <p>\n         * Result = (Source Alpha * Source Color) + Dest Color -> (GL_SRC_ALPHA, GL_ONE)\n         */\n    AlphaAdditive,\nEdit: except I can't read this morming.  It's Additive that is GL_ONE, GL_ONE.. Ask questions like this on the forum.  I believe this was discussed recently.  You may find it in a search.. You didn't post a bug.  You asked a question.... that no one but maybe three people will ever read.\nIt's an easy fix on our end... just delete the example.. This is an unproductive line of questioning.  There is actually an approach that IS productive:\n1) ask the question on the forum or search for the existing question to see if it's a legitimate problem, a setup problem, etc.\n2) find out the bunch of things you left out of a proper bug report such as what version you were running, which bullet you were running, etc..\n3) potentially have gained enough knowledge to point out what is actually wrong with the example so someone can fix it... but even if not, you won't be sending anyone on a wild goose chase asking forum questions in a problem report.. Guess what?  That someone is you!!!!  And everyone else.  Then you too can bask in the fame and fortune of being a \"jme dev\"... or you will realize that this is all volunteer and supported by the community.\nBut I'll tell you what, I'll reopen this issue and just let the question stand: \"Does anyone else have this issue when they run this code?\"\nWhere \"anyone\" is probably two people.. Or you could look on the forum and ask on the forum and \"together\" could be hundreds of people instead of two people... one of whom has no time at all to fix documentation and happens to be doing \"data entry style coding\" for \"day job\" right now or else I wouldn't even be trying to help you actually resolve your issue here.. Which is why \"which bullet?\" is an important question to ask.\nPersonally, I get tired of playing the game of \"20 questions\" with every new bug report that consists of nothing more than \"Hey, X is broken.\"  After the 5000th time it got a little old.  So I direct folks to the forum where newer users have only done that 1000 times and might still be willing to play 20 questions.\nObviously this code worked once for someone.  So something regressed.  Or something is specific about how it's being run.\nIn case, at some point it could turn into a proper bug with the details necessary to fix it.  Because I'm 90% sure that if I tried this code it would work for me.. re: \" If you don't have time to actually contribute then why post anything at all?\"\nI AM contributing.  I'm trying to tell you how to get the help you need.  It's like you're standing in the wrong line at the DMV and I'm telling you the right line... and your just arguing \"Why can't I be helped in this line?\"   Well, you haven't filled out the right forms for one.. I opened it again... so you can check back in a few years when it's still sitting here because no one wants to touch it.  It lacks any useful information.  But I'll leave it open.\nIf you decide you care more about actually solving the problem than getting into pissing matches with people who are trying to help you then you can try a more productive approach.\nProbably you will get lucky and someone else will also discover this bug and provide the fix and/or proper details so someone doesn't waste their valuable free time chasing down bad leads.. Without spending some time expanding my view of the surrounding code, I'm a little concerned. It could just be based on ignorance.\nDoes not the animation code already loop?  It seems to.. So you want an animation that plays once and then stops?  And this is not already supported?\nI was 99% sure the wave animation in spacebugs runs and then stops on its own.. I can't check what I did right now but I will look tonight.. Probably you checked the file in with a different line ending.  You may want to fix it as it's harder to see what actually changed.. Or I sort of remember that it's possible to set line ending style on the repo or something... but that may make a whole bunch of source change because I don't believe it's consistent right now.. re: \"Now it returns the first hit WITHIN the range or otherwise continues picking. I don't know if that is valid, because I can only imagine situations in which the next raycast is even more out of range.\"\n...if the ray is not vertical, and the limit is long, it may collide multiple parts of the terrain, eh?  I'm not sure how that matches (or not) with what you've said above.  I got confused.. These changes seem to have nothing to do with the commit.. Either that or change your commit message to add \"and a bunch of unrelated stuff because lulz.\". Thinking on it some more.  I don't like and it needs to be removed.  setPhysicsSpace() is managing the state of this.space and shouldn't have to consult its own getter to know that.  To any reasonable Java developer, this.space is unambiguously \"the current space\"... and certainly the most current \"current space\" that it's ever possible for setPhysicsSpace() (the one managing that field) to deal with.  Calling getPhysicsSpace() is extra indirection that may obscure some random bit of horror that makes this method fail... as a developer, I'd have to go look.  And that's pointless since we are now (at best) indirectly asking about the one field that this method is supposed to be managing itself.\nIn general, your patches are more likely to be accepted if they only include the things you actually want to change and not a bunch of random other 'style' stuff.\ntl;dr: some peoples \"more readable\" is another's unnecessary obfuscation.. I don't mean to sound ungrateful.  I appreciate the main fix.  It just wastes so much time to include other random stuff in what would have been a one line change otherwise.. No... for SafeArrayList you have to do for( Object o : list.getArray() ) to get the iteration benefit.. re: \"but I can't save j3md as file :(\"\nWhy can't you save it as a .j3md file as already discussed?. Also, I can't remember for sure but it's possible that I modified SpiderMonkey's serialization to work with private/protected constructors.  In which case we could make this private and leave it empty.. ...and even if not, I think it's only a one or two line change to fix SM to work with private/protected constructors.  We already do a similar thing for private fields anyway.. ",
    "MeFisto94": "This should/could be moved to the SDK repository, but the fix would probably be to remove DDS as known extension / disable the text editor as the SDK isn't an image editor anyway and has only limited abilities to use images. A preview would be nice, but I am not sure how complicated that would be, especially given that DDS might be a proprietary file format (iirc). # bump\nHow about implementing this, @jmekaelthas, or is it already implemented?\n. @jmekaelthas: To be honest, I didn't really look into the patch, I was just looking for some Issues I could create a PR for and thought this is an easy one for you to either apply or close.\nLooking into the patch, it only differs by the \"0.5f\" (What were they ment for? They aren't there in master).\nAlso looking into https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-blender/src/main/java/com/jme3/scene/plugins/blender/materials/MaterialContext.java#L322 this has been changed since ages and is independant of the specularity-type anyway.\nSo if you have the powers, you can close this :) \n. I'm moving this to the SDK Repo :)\n. I imported them using the ModelImporter-Plugin as I can preview If everything went fine and such.\nThank you for that fix :)\nPS: hurry up with making 3.1 stable ;)\n. Well, I am currently working on porting to 8.1 (it compiles, I only have to fix some warnings).\nThe Blender Issue has been solved (afaik, atleast it doesn't crash anymore)\nSo it would be nice if you could look into that projects thing or the imported projects (though I am uncertain with that: Should we simply overwrite the old lib names with the new ones, or maybe have consistent lib names (If possible))\n. But wouldn't that lead to a (really small) performance overhead? \nIf you call limit each frame and do some divisions (and/or) +/- instead of like a few Bytes of Memory usage?\nWith the current way you could even make the updateCounts() private since the only way to update Buffers is using updateBuffer. \nI guess it wouldn't make a real difference though?\n. Should the AudioType be added as a field to the AudioNode so one can use\naudioNode.getType() == AudioType.Streaming\nAlso, should the underlying AudioKey be changed aswell or should it remain in the \"two-boolean\" style?\nAnd the third thing: Should the Type be an inner-class enum such as the old Status or rather an AudioType.java external file?\n. I am reopening this issue because of https://hub.jmonkeyengine.org/t/solved-ogg-memory-usage/38547/3 and https://hub.jmonkeyengine.org/t/solved-ogg-memory-usage/38547/5\nMaybe we should rename the enum to Uncompressed and Compressed, since it's buffered either way and not really streamed anymore (or say it's only streamed the first time, then it's buffered).\nThe Problem is though that we can't easily change the names without having another deprecation state again.\nDoes anyone know a good way to re-word the javadoc in order to clarify this?\n@pspeed42 . Okay, but why don't we add something like if (a == -0f) or (b == -0f) { return (a == b); }?\nI mean, I get the case with Float.NaN but since -0 and 0 are mathematically equal (and no one will use a special (-0, -0, -0) Vector to state something different like (0, 0, 0)) we could work around this?\nAtleast for the -0 case it's quite confusing to have that reaction\n. I see, the hashCode is the Problem. That explains the reason :)\nOne could simply check if the length of the Vector is zero.\nThanks for clarification\n. It's still there on 153cb27:\nhs_err_pid14764.log.txt\nMaybe it's a Mac OS related issue? I am running Mac OS 10.9.5 so still Mavericks.\nEdit: I don't know why my SDK outputs such an old git build hash but I can assure you I just updated and built from scratch :/ Will try it again asap\n. Okay, now I am on 5370 (b28f7e9) built today:\nhs_err_pid82153.log.txt\n. Okay, I wasn't precise enough about that:\nThe jme3-bullet (non jbullet) version SphereCollisionShape calls setScale() as part of it's constructor.\nHowever it also overrides setScale() to only print a warning and don't call the underlying methods.\nNow I don't know what was intended: Call the CollissionShape.setScale() which calls setLocalScaling, so Bullet has (1, 1, 1) as scaling? (It calls a native method) or don't use setScale at all (in which case the comment should be removed).\nI assumed the first one for my pull request and if it's wrong, simply remove that line completely (As it currently only comes up with a faulty message)\n. Hey @Triangle345 \nCan you retry with the latest release? See here\nIn case it doesn't work, see here on how to enable logging.\nJust attach that log then (but please to the sdk repo now, because we've splitted them apart).\nI only have W7 to test the installer on but we made some changes (using the latest jdk8 now)\nEdit: Oh and when the log shows something like \"Incomplete wizard\" then I have the additional question:\nDo you already have an SDK installed? It seems like we don't support updating/re-installing.\nA workaround is simply deleting the files in C:\\Users\\You\\ which start with .jmonkey such as .jmonkeyplatform and .jmonkey-installer.\nNote: You should launch the uninstall.exe in your previous SDK before that and make sure the folder ( C:\\Programs\\JMonkeyPlatform) is deleted.\n. But you had it before uninstalling JME3?\n. Well, it seems that having an already installed version of jme on the system causes the installer to go in the unimplemented (?) \"re-install\" mode. \nAnyway I'm glad that it works in the meantime. If you experience any issues feel free to create an issue in the sdk repo\n. Oh and I don't know if we should increase SAVABLE_VERSION?\nI think the usual behavior would be to increase it and only read the name if it's >= 3, though since we have specified \"null\" as default value, we have the same behavior, no matter if the patch is inside or not\n. I don't know if you get notified when I push a commit so:\nI think I fixed it appropriately now :)\n. Embarassing that the build failed :O I blame it on Netbeans Compile-on-Save :P \nI fixed it now, it was the order of annotations.\nUltimately we should decide on a format (In-Code-Keys vs Bundle.properties)\nPersonally I'd go for the latter since it seperates code and text/localization.\n. I hope it's okay that I removed some more duplicate code (the whole destroy(), isDestroyable() and the getAction)\n. So this would actually be a bug in Blenders FBX Import, Importing unused vertex groups.\nThanks for the fast fix :) \nFixed in be3dc06\n. So isn't it better to call Vector3f.clone() for the default values then in the constructor?\nBecause when allowing those values to be null nearly every method is broken (atleast the setters for Vector3f and Quaternion)\nFurthermore should we improve the read() to return clones as well or is the deserialized (read) object then cloned using cloneForSpatial?\n. That however implies that you share the same instance across clones.\nWhile this is useful for the outlined case with the same vector it's not for the rotation (e.g. when you clone the Motion Path and then change the curve to Linear). Then you'd have two different rotations.\nWe could use something like:\njava\ncontrol.rotation = (rotation == null ? null : rotation.clone());\nHowever that might not protect us if someone is not calling setLookAt() on a freshly created instance, so maybe have Vector3f.ZERO.clone(); as the default value and also put that into the read() method?\n. I just checked it: lookAt CAN be null, apart from the cloneForSpatial(), so we could just use null in the variable declaration.\nSo what should we actually exactly do?\n. Oh, apologies.\nI should've searched for that issue before posting it.\n. Apologies for that.\nWhen you create a Tests Project in the SDK you have to re-create it every time there are changes to those on master.\nI completely overlooked that.\n. it didn't seem to fix them since it's not only about the materials which are part of the SkeletonControl (there is a list of \"targetMaterials\") but they can be materials from some random influenced Geometry.\nI tried it by first making those Matrices serializable without changing the transiency but yeah, then you get those \"don't use shared materials\" warnings.\nI don't know if we can implement another check for shared materials but then we still waste space and time since those matrices won't ever be read (apart from said check).\nMaybe we could bypass the check and/or null those values upon the first update() call? I'll try that locally asap but we still waste some space.\nI didn't see how big such a matrix is but given that you can have plenty of them when dealing with multiple geometries and such, it's a bit of data but on the other hand it's not worth an ugly hack probably\n. I have to check what it is exactly, I guess an error but still a false positive spammed once per frame and animated geometry is not only confusing but stressing the logger^^ \n. https://github.com/MeFisto94/jmonkeyengine/tree/HwSkinningFixV01 This is with simply skipping the first conversion, I like this more since it has no false positive and does crash the application instead of only warning the user.\nhttps://github.com/MeFisto94/jmonkeyengine/tree/HwSkinningFixV02 this however is the desired version, let's see what the others think about it.\n. The LightControl should set the Position to follow the Node(0, 5, 2).\nThe reason for this behavior is, that a Light only enlightens what is under it's tree and as such it wouldn't light the whole scene when added to a node.\n. Plus you should google/search the forums first, since there is a TTF Library (3rd Party though)\nhttps://hub.jmonkeyengine.org/t/jme-truetypefont-rendering-library/35395\n. This indeed is a fault. The problem is that your pull request did not get merged into the 3.1 branch back then, so it is only in next (3.2).\nCould you maybe open a new PR which also applies it to the 3.1 branch?\nI don't know when a new stable version will be released, though, since that alone is annoying but probably not enough for releasing a 3.1.1-stable. I'm not sure if this works as intended.\nAre you certain that having multiple jdks defined leads to travis trying them all out? (It would make sense, though).\nWhat about specifing -source 1.7 -target 1.7 for everything which isn't lwjgl3, that way even a java 8 compiler should only use java 7 features and complain if someone sneaks in java 8 code.\n. @Ali-RS Now you polluted this pr with your other changes.\nJust as a hint: In the future you might want to create a new branch for each feature/pr you want to submit. That way it stays on the original level even when you change other things.\nAlso a good idea might be to have a branch own_changes or the like so you always have the original master to submit pr's without adding said changes.\nBut for now it's no real problem, we can fix that before merging, I just wanted to give you a bit info :)\n. Moved to jMonkeyEngine/sdk#111. I have to disagree on that: This method is useful when you have a method which is looking for a direction only and you could throw an Exception when it isn't.\nActually this is a constructed case but if one would remove this method, it should be noted clearly that normalize() already checks if it's a normalized vector, because if not a developer would try to avoid normalizing the same value every frame. It is just waste.. I think this is a proper issue, yes.\nThe thing is, it would actually belong to the  sdk repository, however looking at the crash in : \nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  com.sun.jna.Native.getInt(J)I+0\nj  com.sun.jna.Pointer.getInt(J)I+6\nj  org.netbeans.modules.masterfs.watcher.linux.LinuxNotifier.addWatch(Ljava/lang/String;)Lorg/netbeans/modules/masterfs/watcher/linux/LinuxNotifier$LKey;+59\nit is nothing caused by us ourselves but within Netbeans. This means you would have to look at their bugzilla: https://netbeans.org/community/issues.html.\nProbably the issue is already there.\nUnfortunately we cannot do much about this apart from waiting and update our netbeans as soon as they release a new version (9.0, might still be a long time until then, months,...).\nMaybe you can get around it by either retrying and see if it occurs, reinstalling or idk, something seems wrong related to a native file-system library. \nThis should actually be simple POSIX (fopen, fread), so I can't imagine a bug there, but yeah, maybe your Distro has some odd bug in it's file code?\n. > that the installer expects to be installing the only version of Netbeans on the system, a flaw that it inherited from the base platform. I'm not sure I want to scrap the version I have yet.\nWithout looking into logs or the issues, this seems only partially true. The installer has this flaw, yes, however it should only apply to previous SDK Installations, since we use jmonkeyplatform instead of netbeans or something as our product name. So what you could try is deleting .jmonkeyplatform and .jmonkeyplatform-installer and similar in your user directory (it might be hidden by default, though) and restart the installer. Did you previously have an SDK installed once? \nUpdating the JDK/JRE is unrelated, by the way, since the SDK comes with it's own JDK bundled (except when you use the zip file, so maybe the jdk which is currently bundled is for some reason incompatible with your setup)\n\nIt only finds one of the graphics drivers (this machine has both Intel and nVidia cards installed, it's only listing Intel),\nThis is as far as I know a flaw of JME's design, It simply picks the first (compatible?) GPU lwjgl returns, since at the time JME was created there were no integrated GPUs.\n\nOr am I wrong? If not, we might want to change that in \"some clever way\", @Nehon @shadowislord ?. A bit background here:\nIn order for jme to handle the PrintScreen Key, it has to be added to https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/input/KeyInput.java, which however requires a numeric value.\nFurthermore what about KEY_LAST? It would need to be increased and hence breaking compatibility for anyone relying on this being 0xE0 instead of referring to KEY_LAST (which can be ignored maybe, because it would be misuse).. I've just done some research:\nhttps://en.wikipedia.org/wiki/System_request / https://de.wikipedia.org/wiki/Systemabfrage-Taste (The German Version seems to be more detailed, so I'll translate it):\nIn 1984 the IBM Computer/AT had 84 keys instead of 83, because the Sysreq Key was added. however since 1987 it has been consolidated with the Print Screen Key.\nBUT: The article also states, that Sysreq still has it's own scancode, because on Notebooks there could be a separate SysReq Key or the Key isn't present at all.\nThis would mean:\n- Adding a Print Screen Key\n- Refactoring old code (ScreenshotAppState) to use this Scancode, just in case there would be some odd notebook keyboards. We're not loosing/breaking anything that way.. This also matches with https://gist.github.com/MightyPork/6da26e382a7ad91b5496ee55fdc73db2#file-usb_hid_keys-h-L198 and https://gist.github.com/MightyPork/6da26e382a7ad91b5496ee55fdc73db2#file-usb_hid_keys-h-L110. We've done some further investigation as the fix didn't work as expected and it turns out that this issue only applies to the AwtPanelsContext (since it's the only user of AwtInputs) but that the LwjglKeyInput (jme3-lwjgl) does NOT fire KEY_PRINTSCREEN. (https://github.com/LWJGL/lwjgl/issues/145)\nThe Problem here is if we add KEY_PRINTSCREEN, then many complaints will arise when people try to use the Print Key instead of the SysReq one.\nHowever hacking jme3-lwjgl so it triggers two key events might not be an acceptable solution?\n. Well technically I think LWJGL is just wrong there assuming that it's the SysReq Key because (at least according to wikipedia) the actual sysreq key is now rather a combination of alt + something else.\nAwt might be querying the OS in a different way or is simply aware of the difference.\nHow about a javadoc hint for KEY_PRINTSCREEN in combination with lwjgl? Because else everyone falls into the pit of \"why doesn't print screen listen to a keypress of \"print screen\"\".. Yes it definitely should, however I am closing this for now.\nA workaround is to use a older android sdk version or (what seems recommended) to just import the project into Android Studio (which you might need anyway, to design your activities and such), and make the Android SDK download there.\nSo you won't run the android game directly from the SDK but the Android Studio then. This is because Netbeans' Android Support Plugin is buggy currently and the new command line has become so complicated that you end up in parsing hell (the old version had java methods which could simply be called). Well I don't think there is a dedicated maintainer for the terrain system.\nHowever I think @pspeed42 might have a look since he implemented the new cloning system.\nBtw it would've been better if you created two separate pull requests, one for the memory leak and one for the optimization, I guess, so it's more clear and could be merged separately.. I knew this wouldn't become easy :D I really tried to rebranch. Please tell me if we can just squash merge the changes or not. If not, I'll just create a new branch and cherry pick the commit there and manually solve the conflicts.. I have no clue. I tried to rebase to master, but the UI wanted me to solve conflicts three times (rebasing always stopped and I had to re-continue it) :D . Yeah the SDK is also affected by this. \nJust saving any previously converted model, even without displaying it, leads to something like:\njava.lang.NullPointerException\n    at com.jme3.material.MatParam.write(MatParam.java:316)\n    at com.jme3.material.MatParamOverride.write(MatParamOverride.java:140)\n    at com.jme3.export.binary.BinaryExporter.processBinarySavable(BinaryExporter.java:401)\n    at com.jme3.export.binary.BinaryOutputCapsule.write(BinaryOutputCapsule.java:720)\n    at com.jme3.export.binary.BinaryOutputCapsule.writeSavableArrayList(BinaryOutputCapsule.java:757)\n    at com.jme3.export.binary.BinaryOutputCapsule.writeSavableArrayList(BinaryOutputCapsule.java:345)\n    at com.jme3.scene.Spatial.write(Spatial.java:1605)\n    at com.jme3.scene.Node.write(Node.java:734)\n    at com.jme3.export.binary.BinaryExporter.processBinarySavable(BinaryExporter.java:401)\n    at com.jme3.export.binary.BinaryOutputCapsule.write(BinaryOutputCapsule.java:720)\n    at com.jme3.export.binary.BinaryOutputCapsule.writeSavableArrayList(BinaryOutputCapsule.java:757)\n    at com.jme3.export.binary.BinaryOutputCapsule.writeSavableArrayList(BinaryOutputCapsule.java:345)\n    at com.jme3.scene.Node.write(Node.java:735)\n    at com.jme3.export.binary.BinaryExporter.processBinarySavable(BinaryExporter.java:401)\n    at com.jme3.export.binary.BinaryExporter.save(BinaryExporter.java:210)\n    at com.jme3.gde.core.assets.AssetDataObject.saveAsset(AssetDataObject.java:234)\n    at com.jme3.gde.core.assets.SpatialAssetDataObject.saveAsset(SpatialAssetDataObject.java:111)\n    at com.jme3.gde.core.assets.actions.ConvertModel$1.run(ConvertModel.java:67)\n    at java.lang.Thread.run(Thread.java:748). I am not sure what happened, since 727 passed without a problem actually. I had many issues with git though until I hard reset my fork's master and used a copy of the ImageLoader class actually.\nThe Problem is I don't like the brute force approach but for embedded images there seems no easy way to know the file type.\nThe extensions are no problem here, unless jme handles them differently. The idea here is that the asset manager gets \"dummy\" assetkeys, and then a assetloader says \"yes, I can load \"png\".equalsIgnoreCase(fileName)\", so it depends on how we handle that internally.\nMost files will be loaded through the AWTLoader though, so not sure what they expect.\nAs a side note: Linux is Case-Sensitive for Filenames, but is it really for extensions?\nEdit: Ah yes, it misses the part of the TextureHandler, hold on, I'll fix it. It's slightly offtopic but: All those files are associated with your pdf viewer nonetheless. And linux has the \"file\" command, which seems to check the file headers and/or mimetype.\nBut back to the topic: The question is how jme handles which AssetLoader to take?. Sure, but I was referring to how does jme handle the extension->Loader problem, and I've found:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-core/src/main/java/com/jme3/asset/ImplHandler.java#L270\n(which is called by DesktopAssetManager.registerLoader):\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-core/src/main/java/com/jme3/asset/DesktopAssetManager.java#L131\nSo the extensions are no problem here, as they are case-sensitive in jme anyway\n. This shouldn't be a problem either, since as you can see, we already have an InputStream which we are simply passing around (This is for embedded image files, hence we cannot guess the extension and have to bruteforce). We're troubleshooting this on the hub:\nhttps://hub.jmonkeyengine.org/t/solved-v3-2-0-stable-sdk1-eclipse-can-only-launch-application-once/39907/\nSince it seems to be more of a user/permissions problem.\nShort investigation also shows: props.load(JmeVersion.class.getResourceAsStream(\"version.properties\"));, so I'm suspecting a corrupt jar when jme is even unable to read it's own resources. I'm not that satisfied with the javadoc explanation but I couldn't come up with a good example either, so where are our \"writer / documentation monkeys\"? :). Sorry for the late reaction, somehow I skipped the GitHub E-Mails and did not see I was tagged.\nI'll have a look and will tell you :) . Okay, so this will not be a problem for the SDK in general.\nThe old code having this null check actually indicates that this was meant that way.\nIMO I am not sure if silently ignoring failures is a good thing, though.\nWe might get posts on the hub like \"fix your shit broken engine\" when it's just about an AssetNotFoundException.\nThis is also where it affects the SDK: Without an Exception, there will be no popup telling the user that something went wrong, only a small red text which they'll ignore much like they also ignore the stack trace on exceptions ^^\nSo SDK-wise, I'm fine with it, Engine-wise  an asset key property to toggle this behavior might be nice, but that's up to you guys :) . Hey :) Thanks for your Pull Request!\nOne thing I'd like to mention is that it's usually best to create separate pull requests for separate issues, so that we can handle them individually. For now it's okay, keep it that way, I just wanted to mention that for the future (and probably more complex changes there ;) ). Hey, thanks for your Contribution.\nActually what you want would be easily achieveable with standard methods already:\n```java\nQuaternion q = new Quaternion();\nq = q.lookAt(target); // I am not sure whether this is a static method or not, if it returns something or not\n// Transform the \"Forward\" Vector to look into the direction:\nVector3f v = q.mult(Vector3f.UNIT_Z); // Now you have your direction\nRay r = new Ray(Vector3f.ZERO, v);\n```\nIt's a bit more verbose, but technically it's already there.\nEdit: Actually your solution Vector3f relativeDirection = target.subtract(origin); is also possible and much easier :slightly_smiling_face: \nEdit2: Actually screw my solution, target would have to be the relativeDirection already and I've missed the second parameter which is the Camera Up Vector. Anyway it's useless, because you don't need the angles other than the y angle.. I don't completely understand what you are looking for, so I'll explain everything:\n\"Back then\" the SDK was built using custom ANT Tasks for jME users. Those are handling packaging your applications etc. Today gradle is the bee's knees, which is why no one wants ant anymore (though it still works actually).\nThe Problem is the SDK is subclassing Netbeans \"Project\" class, which the gradle plugin also does. This means you can either have the SDK Tools or the Gradle Project Thing.\nI tried to integrate the both of them but I couldn't even add the gradle plugin as a dependency to a sdk netbeans module. I chatted with both the gradle plugin author as well as with the maintainers of netbeans but no one had a clue. I hope that with Netbeans 9.0 they have time again to look at this. If not, I'd need to merge the whole sourcecode into our code base, which is something I don't want to do, it's a maintenance hell.\nThe other dimension is the NbAndroid Module, which brought Android compatibility to Netbeans. In addition to that we had some custom Android Code. Unfortunately Android switched to gradle as well and changed their toolings, which is why the SDK currently is unable to build to Android (NbAndroidModule used ant and I think it isn't updated anymore) and the SDK used android.bat to handle the AVM images and all. Since android.bat has been replaced and the syntax is completely different and more complex this should been redone completely.\nActually for Android I think you really profit from using Android Studio (which is IntelliJ), since it's generally built around Android, has a great UI Builder with Android in mind and all that which you would probably be missing in the SDK.\nWORKAROUND 1\nThe Workaround I am currently using is having an old regular sdk project and adding a build.gradle (but NOT enabling the Gradle Plugin in the SDK). That way you can use the SDK as regular and I simply use the command line to launch my code. You only have the Problem that you need to add the libraries from maven manually to the SDK Project for the error highlighting to be satisfied.\nI'm using these Gradle Tasks to support Debugging from within the SDK and Profiling (It will tell you the path to the .so/.dll inside Netbeans)\n```gradle\ntask(debug, dependsOn: 'classes', type: JavaExec) {\n    main = mainClassName\n    classpath = sourceSets.main.runtimeClasspath\n    jvmArgs = [\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\"]\n}\ntask(profile, dependsOn: 'classes', type: JavaExec) {\n    main = mainClassName\n    classpath = sourceSets.main.runtimeClasspath\njvmArgs = ['-XX:+UseLinuxPosixThreadCPUClocks', \"-agentpath:/home/marc/Dokumente/02_GIT/sdk/build/testuserdir/lib/deployed/jdk16/linux-amd64/libprofilerinterface.so=/home/marc/Dokumente/02_GIT/sdk/build/testuserdir/lib,5140\"]\n\n}\ntask(profileJMC, dependsOn: 'classes', type: JavaExec) {\n    main = mainClassName\n    classpath = sourceSets.main.runtimeClasspath\njvmArgs = ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder']\n\n}\n```\nWORKAROUND 2:\nThis is much like Workaround 1, however you don't use the SDK to run things, you just use it to convert and edit models and then code in another IDE.\nWORKAROUND 3:\nThere is the \"jMonkeyBuilder\", an Application designed to do tasks like Model Converting, Inspection, Material editing etc just like the SDK does. It also comes with an IntelliJ Plugin. 1. Unfortunately jME is not consistent in it's code with error checking (at least that's my belief), this starts with several errors only being triggered with assertions on, others being unit tested, others not being tested at all etc pp.\n\n\nFor a game engine you probably don't want to check everything (things like setNormal might be called a thousand times). Or you only want them to be checked in the Debug Build. It's a matter of performance and there are way less obvious faults than null values (e.g. you'd have to check every normal's length or force-normalize it)\n\n\nSetOriginNormal throws a NPE in the second line, at normal.x. Still it's users obligation to code correct code :P Maybe something like @NonNull could've helped with compile time checking there.. I think the \"issues\" with assertions where: When an openGL Error occurs (there used to be a GL_INVALID_OPERATION on AMD Cards), it is usually ignored/discarded, but with assertions on, it terminates jme when an GL Error exists.. Great, and he is using Ubuntu 18.10 on Gnome and I was using Kubuntu on 18.04 (KDE), so it's not desktop manage specific. We'd really appreciate a Windows test result, because then maybe our linux lwjgl3 is older (with bullet we had the same issue of not being updated), I'd like to rule that out before contacting the lwjgl guys for advice.\n\n\nIs someone knowledged about our build system there? @empirephoenix maybe?. Soo, I have not read the entire issue but found out it's an intended feature of lwjgl:\nhttps://github.com/glfw/glfw/issues/114\nProbably Phoenix had no problems because he was running an older version of lwjgl3?\nBut we should also find a solution for the described use case, namely:\nI code an FPS and want jme to translate the key codes of WASD to the user's current locale key characters. Or maybe have both input listeners for key codes (which would be the absolute position, like keyCode == fromKeyboardLayout(KeyboardLayout.US).W) and for key chars. \nThis is at least relevant for chat and all so tbh I'd prefer to at least use the key character and the french guys have an uncomfortable layout :P I could actually guess that most gamers use the us layout anyway.\n@pspeed42 How would you change/design the jme input system to support both key codes and key chars?\nEdit: Ironically these are rather key characters, not as told key codes (as there is no keycode for {).. >I'm not sure what the issue is. If you bind your game directly to WASD then that's not going to work on french keyboards no matter what... because their keys are in different places.\nThe real issue is that lwjgl3.2.1 started to always use the US-Layout for key chars to support that use case, where to me the real solution would've been the legacy behavior (if I want to have the key which is on the same position as the US-W, I'd use the key code, otherwise the key char). And I think we should restore that behavior for exact that reason. Otherwise on a non-us-layout you're screwed. Can't display \"Press W\", can't have a textinput.\n\nReading that thread... is your issue that the character code comes in a different event now or something?\n\nNo, but jme's input events are now related to the US-Layout, no matter what keyboard I have.\nRe-reading the issue it might be that I got that wrong. Their issue was that the scancode wasn't propagated to the keycode in earlier versions, which means  the keycode reflected the key character. Either way jme's input events don't correlate to the active user layout, probably \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/989fc0a9f0dc7a5c46b6c5d1f479064cffda8023/jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwKeyInput.java#L119 at least the char is only there for KeyInputEvents with KEY_UNKNOWN\nEdit: https://github.com/glfw/glfw/issues/114#issuecomment-61115907\nThis is all a bit confusing to me, it seems to be related to our gluing code in GlfwKeyInput. I guess Linux and lwjgl3?\nThen it's something we should really take care of. The Clue was that the settings dialog is falsely setting the frequency (setFrequency) as it's somehow differently reported by AWT/whatever we use to get the resolutions. Easy Fix, this import isn't used at all in the said code anyway.. As expected: https://github.com/KhronosGroup/glTF-Blender-Exporter/blob/7933fbfdd80628875910c5da36fd28e40474fb43/scripts/addons/io_scene_gltf2/gltf2_generate.py#L2292\nThey talk about a MetallicRoughness Texture here and even the spec talks about a MetallicRoughness Texture even though it's packed as Roughness Metallic, not sure if they are hence only confusing the users to create the texture or if they bake textures from channel inputs manually, in which case the exporter is broken.\nEdit: Okay so the situation is as follows:\n1. GLTF uses AO, Roughness, Metallicness as their packing format\n2. The Industry uses/used AO, Metallicness, Roughness before (see here section Substance Painter, there are no templates for GLTF)\n3. When I look at images like this it looks like even the \"GLTF\" Node of the Blender Addon uses 1 and not 2. When exporting, it should convert the textures, but it doesn't. Or it shouldn't be as misleading and call that texture RoughnessMetallicness\nSo at this point I have to leverage @pspeed42 @Nehon and other knowledgeable monkeys on what to do now:\nIt's easy to add a material parameter \"UseMetallicnessRoughness\", but we can't automatically set this for all GLTF files, only for the broken ones of Blender this would be correct. We should definitely talk to the blender exporter guys about this. Or do you think this is worth pointing out to Khronos that the world uses MR instead of RM?. I have a similar code in every of my own project as well, however it's called MathTools.approximateEquals(Vector3f, Vector3f) and what it does is call FastMath.approximateEquals(a.x, a.y) && ...., so I don't care about an Epsilon or corner cases as outlined by @stephengold, they are then a problem for engine developers, so that might be an alternative implementation which leverages existing code.\nEdit: And maybe \"isSimilarTo\" would be a more appropriate name. To not derail this discussion:\n\nI said instancing is usually dumb for small meshes. That's still true. Batching is better for small meshes.\n\nBut on the other hand for large meshes it could be better.\nI mean the trade off is bandwidth (which current particles take) vs. gpu time (which instanced particles take). It all depends on the case and if you're doing cpu heavy calculations or having many particles, instancing might be in favor. That's usual in gamedev but means an engine shall support both.\nEitherway the discussion has derailed, we should focus on how accessible instancing already is.. FYI: https://github.blog/2018-05-01-ignore-white-space-in-code-review/\nAs pointed out below:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/1048/files?w=1 also works\nNote though that this still means we don't want \"unclean\" commits, as git tools might not ignore whitespaces and it's not clear which line ending/white space is the correct one.\nActually we should have linters/auto formatters as bots which comment on the PRs :) . >...if the ray is not vertical, and the limit is long, it may collide multiple parts of the terrain, eh? I'm not sure how that matches (or not) with what you've said above. I got confused.\nThat's correct, I was under the impression that the multiple parts become further away the more we progress, but that assumption is wrong, to me it looks like it's just checking iteratively for every possible x and y coordinate/patch/what ever, so yeah, it may collide with multiple parts of the terrain.\nWhich brings up another question: For now it only always ever returned one collision and not multiple. It would be better to have multiple but if we're going to do that, unit tests might be appropriate, to be sure it works.. Good point. The issue happened when the terrain is at a level < y=0 and picking is performed from 0, 0, 0 with a limit < y. Then cr.size() has to be 0 and closestCollision = null.\nMaybe we can combine that case with a ray in -1, -1, 0 direction, so it can hit multiple mountains, but that implies generating some terrain somehow (as asset?). Not sure if the assetManager official supports MultiThreading but making result static would definitely disallow us to load multiple blender textures at once. I know what they are doing here and your method might break OSX support. Do some research on the hub please:\nFor OpenGL to work on Mac OS X it has to be started on the MainThread (which is the Thread the Application is started with, hence Thread.currentThread(). Your change destroys this. So it changes semantics.\nWaitFor() might be useless because if you're already on the MainThread, you don't have to wait for it.\nBut it's an inconsistent behavior as lwjgl2 probably returns from the Application#start() call.\nSo a proper solution would be to document this or provide AppSettings to enable \"forking\", unless on OS X.\nOr always use the CurrentThread, which to me is expectable if you hand control over to a framework.. ",
    "normen": "What if it was?\n. The SDK comes with Oracles JDK... No need to install anything.\n. No, we have several workarounds in place for LWJGLs deficiencies.\n. Yeah, in case you didn't get that part, JDK 8 is the reason for your problem.\n. I heard this topic is closed.\n. Its not yet decided how this will be handled in 3.1, we might also use the old names and a different way to access the libraries for the coming gradle-based SDK projects.\nAm 11.05.2014 um 14:55 schrieb S\u0142awek Miku\u0142a notifications@github.com:\n\nI can provide pull request with corrected code.\n\u2014\nReply to this email directly or view it on GitHub.\n. Try downloading directly from http://updates.jmonkeyengine.org/\n\nIt seems like some web browsers have issues with downloading through PHP from our server.\n. You tried to download directly from updates.jmonkeyengine.org? Then it must be your internet connection. The files haven't changed and have been downloaded by thousands already.\n. Maybe change the \"private\" pattern to \"nbproject/private\", thats a bit less generic and should do whats intended. Also keep the \"/dist/\" one instead of \"dist/\". Otherwise it looks okay, I am not entirely happy with the general \"build/\" pattern but I guess its something that could be obvious if somebody runs into a collision.\n. Well then just add the few missing folders to the existing list, can't be that many anymore.\n. I guessed that much as you did it that way initially.\n. yes\n. You can ignore the complete private folders, no need to ignore each file separately. Its quite easy to do this in NetBeans btw, just right-click the folder and select git->ignore (or so)\n. Not in the \"Files\" view, except for the ones that start with a dot (but you can display these too via the settings).\n. Sure, if you like. I actually didn't see the last change, I can merge this one too.\n. Generally a j3o that contains a Control that is not available can be considered broken. A j3o always exists in the context of a certain project, just like a Java class. However, for the purpose of loading a \"broken\" j3o in the SDK this would of course make sense. For that to work theres more issues than this one though, like UserData and other things. From a quick talk in the core chat, moving this kind of functionality globally to the loader and allowing different behaviors for deployment vs. development in case of missing classes or other references would be the preferred way to go if this problem was to be circumvented.\n. Just revert to a point where you had that control file?\n. Try building the project once, then it should find the new class.\n. \"Sometimes\"? How many times do you attach Controls that you then delete? If it can't be found its not on the classpath ad you will get the same issue when you actually run the application.\n. Yeah, if you want to discuss this topic per se further make a forum thread so everybody can take part. You know the opinion of the team on the change and questions about best practices are really not well placed here.\n. The debug display button should be disabled when the physics isn't enabled, otherwise it might be confusing that theres no physics debug display. I guess its more important to have collision shapes be displayed when the control is selected again. The \"play button\" is really just for quickly testing physics, in a real project you'd probably handle that via an appstate.\n. You should use the premade action classes that handle undo/redo and threading already, not implement new action types.\n. Hm, I can't get a good overview in the git GUI, I'll just merge the change and look at it in context, theres no release coming in quite a while anyway. \n. Theres only one action per primitive anyway, its not really needed. The Actions are already implementations, the point is that the code is in them.\n. Yeah, again, it would be better if the implementations were self-contained. That makes them easier to copy. You know what your methods do, somebody else has to look it up instead of just modifying a copy of the implementation.\n. Why the public \"material\" method? And what super class?\n. Just copy the whole code please.\n. By the way this would have been easier with a wizard where you select the primitive type.\n. At least put the configuration window to the right of the screen, the bottom is kind of meant for the actual plugin windows. And for the issue of batch creation.. if you want to have the same box again you can just copy-paste it, no?\n. The rest of the SDK doesn't work at all like blender though.\n. Yeah, I didn't say that you have to use a wizard though, just that it would avoid some issues. And while its true that some shortcuts are the same as in blender for things that work exactly like in blender (moving the cam, moving objects etc.), blender works in a completely different way and has a different purpose than the SDK\n. I think this message only indicates that you don't need to access the DataObject from the Edt anymore, you still can without a problem, and we use the Edt for maintaining code logic, not so much because it accesses the dataobject.\n. Again, the stack trace doesn't mean that something crashed or something is wrong, it just says \"Hey, you don't NEED to do this anymore\". Thats why I call the exception monumentally silly.\n. I don't understand the sentence? This is the AssetNode, the thing that displays the projects assets, what explorer do you mean? What things do you add?\n. Heres the actual message: \"Look for FileObject, not DataObject, in Node.lookup if possible.\"\n. Again, what explorer do you mean? The AssetNode only affects the project view and adding a primitive to the scene doesn't create a file in the project? If you don't see the object in the scene, are you sure you have the light turned on?\n. Well I can't help you if you don't explain what you mean. As said, if you add something to a scene, nothing new is appearing the Project Assets node, so I still don't see where the connection is.\n. Note that unless the NB changed this between 7.3.1 and 8.0, your issue doesn't happen in the stable release (if I understand it right). And even if the new empty scene wasn't displayed in the project assets view that wouldn't affect how the scene itself works.\n. Right, that would make more sense, getting an issue in the actual node that AssetNode represents :)\nIt would be really stupid if we had to access the DataObject on a separate thread each time (the AWT thread is our logic thread, similar as on OSX). If that was really necessary in NB 8.0 we should probably try and circumvent it somehow.\n. Btw, the issue with the missing right-click menu items might also be because they moved a lot of initialization from the layer.xml to annotations.\n. just commit the file?\n. sure, the version doesn't matter for trunk anyway\n. plus its set by the build script anyway as you know\n. Sure, scene opening will change substantially before 3.1 anyway but if you can find the root of this issue that wouldn't be bad either :)\n. Please use the project default indentation scheme (4 spaces per tab).\n. Thanks!\n. I do like the idea behind this, its a perfect example for parallelization really.\n. Extracting DDS is never the issue, you paid for that by buying a GPU. Packing DDS is the issue, is that what you are talking about?\n. Nvidia texture tools are not available on all platforms and the java version seems to infringe copyrights so I guess we can't merge this.\n. Yes we could use them but they are not available for all platforms and this PR doesn't use them yet either.\n. SDK plugins don't have to be BSD really, even GPL stuff is fine for it.\n. Well this whole PR is about the SDK if I'm not mistaken? :) The texture editor has a \"plugin system\" for file formats and the conversion dialog is independent anyway so I think it shouldn't be too hard to make it a separate plugin.\n. added this functionality\n. The user isn't really supposed to use this method anyway so the question is why do you use it. And there is no requirement for a control to be derived from AbstractControl either, so using the proper interface (Control, not AbstractControl) is the correct way here.\nNormen Hansen\n(normen@mac.com)\n\nAm 05.08.2014 um 10:57 schrieb hosswald notifications@github.com:\nI don't see a reason not to specify the return type of com.jme3.scene.control.AbstractControl#cloneForSpatial(Spatial) further, from currently Control to AbstractControl. This would in many cases relieve the user of casts. The returned object is of type AbstractControl anyway, the caller just doesn't know that.\nI would suggest changing it loke that:\n@Override\npublic AbstractControl cloneForSpatial(Spatial spatial){\n//No changes to actual code.\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. Native bullet is missing, I can only merge and add this when I have time myself. \nAm 14.08.2014 um 11:17 schrieb R\u00e9my Bouquet notifications@github.com:\n@normen could you review this PR?\n\u2014\nReply to this email directly or view it on GitHub.\n. Tha way it is, separate classes. jbullet might be deprecated in 3.2 so theres no need to clutter the whole wrapper.\nAm 15.08.2014 um 11:21 schrieb David Bernard notifications@github.com:\nWhat do you prefer about common PhysicsSpace parts :\ncopy/paste code into native PhysicsSpace from jbullet (easier to review)\nmove common code into a parent AbstractPhysicsSpace (easier to maintain)\n?\n\u2014\nReply to this email directly or view it on GitHub.\n. Well apparently thats just how bullet works then.\n. The results of the scaling depends on the final collision object type and can indeed work, so it should be set.\n. Thanks\n. A pull request would be much appreciated, thanks.\nAm 04.10.2014 um 02:01 schrieb Utlaen notifications@github.com:\nThe method is calling itself forever (current source):\npublic Vector3f getPositionWorldOnA(Vector3f positionWorldOnA) {\ngetPositionWorldOnA(positionWorldOnA);\nreturn positionWorldOnA;\n}\nBased in the code of the getPositionWorldOnB() the fix would be something like this:\npublic Vector3f getPositionWorldOnA(Vector3f positionWorldOnA) {\ngetPositionWorldOnA(manifoldPointObjectId, positionWorldOnA);\nreturn positionWorldOnA;\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks, merged. I can't make changes to the source right now so a PR is your best bet to get fixes in quickly.\nAm 04.10.2014 um 02:09 schrieb Utlaen notifications@github.com:\nWorking on that, first time using pull request... I still dont like git :P\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this (and the other PR) should rather be solved at the blender importer level.\n. Duh, this is the ogre importer.. I thought it was direct import of 3ds models in the SDK.\n. Thanks for the info. Note that for production use you should resort to the 3.0 stable build, the master branch is NOT to be used for anything but testing and WILL break constantly.\n. The SDK uses swing so yes, it is a common use.\n. I guess you don't keep your j3m files in the assets folder.\n. Please use the forum at hub.jmonkeyengine.org for generic beginner questions.\n. It probably shouldn't but it wouldn't open anything either.\n. Better use if (JavaVersion.current().isJava8Compatible())\n. Its okay the way it is but you copied the ugly way the other hit results are copied to java (addResult/addSweepResult), which was done as a contribution.. I wanted to change how this is handled, guess its my fault for keeping this bad example in  ^^\n. This is not the support forum.\n. That actually wasn't the issue, I was in Iceland so I couldn't merge this :)\n. The SDK comes with a bundled Oracle JDK, the system JDK is not used (unless you changed the config file or run your own build). Did you look at this? http://wiki.jmonkeyengine.org/doku.php/sdk:troubleshooting\n. What you did by doing that is make the SDK use the system-installed JDK.\n. The problem is the system LAF.\n. Theres mechanisms in place to clear the asset cache already.\n. How do you import your file anyway? Best way would be to simply keep your .blend file in the assets folder directly (as described in the manual). When you then right-click it and select \"convert to j3o\" the cache is definitely cleared each time. For the model import tool its true that the cache isn't cleared atm though, gonna fix that.\n. Fixed in #ceb45ff\n. Please use the forum at hub.jmonkeyengine.org for general troubleshooting requests\n. Sorry, this commit would break compatibility of the jbullet and bullet implementations. bullet may have additional features but not break code written for jbullet\n. Thanks but now the vector form isn't serialized at all or am I wrong? You could check for the vector and if its null use the simple float factor.\n. read won't fail if the variable name doesn't exist, it will simply return the default value you enter (second argument)\n. That works better but simply use different names for the vector and float variable, then it should be safest.\n. Okay, if you say so I'll merge ^^\n. I already merged it but no, why would it? If you wouldn't get the vector value you'd look for the float one, just like you do now but with different names. Contrary with jbullet you'd do it the other way around. If you already use the vector version your code isn't compatible anyway.\n. Sure. But please use the forum at hub.jmonkeyengine.org for generic chat and questions.\n. The SDK already uses AWT panels by default, canvas is optional.\n. Some reasons for this were incompatible JDKs on computers (Apple JDK on OSX, OpenJDK on Linux) as well as recurring troubleshooting requests of people who didn't have a JDK (or just a JRE). Additionally having a known JDK bundled with the SDK narrows down the range of issues people might have.\n. Btw, you can do all kinds of things in the config logic of the installer:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java\nAm 11.08.2015 um 23:27 schrieb Kirill Vainer notifications@github.com:\n@phr00t https://github.com/phr00t \nActually I realized yesterday that changing the permissions after copying the files is the NetBeans Platform preferred way of having a bundled JVM. I was very surprised, I didn't think NetBeans platform would steep that low to support this.. I hoped there would be a more reasonable alternative. \nSo looks like that problem is solved.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jMonkeyEngine/jmonkeyengine/issues/315#issuecomment-130083415.\n. Oh I just see you did exactly that ^^\nAm 12.08.2015 um 14:06 schrieb Normen Hansen normen@mac.com:\nBtw, you can do all kinds of things in the config logic of the installer:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java\n\nAm 11.08.2015 um 23:27 schrieb Kirill Vainer notifications@github.com>:\n@phr00t https://github.com/phr00t \nActually I realized yesterday that changing the permissions after copying the files is the NetBeans Platform preferred way of having a bundled JVM. I was very surprised, I didn't think NetBeans platform would steep that low to support this.. I hoped there would be a more reasonable alternative. \nSo looks like that problem is solved.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jMonkeyEngine/jmonkeyengine/issues/315#issuecomment-130083415.\n. Thats the page, yes. There\u2019ll have to be a new one for the 3.1 SDK and the URL and local content of the \u201eWelcome Plugin\u201c will have to be adapted. The purpose of that wiki page is basically that we can change it to say \u201eHey 3.0 user, 3.1 is out, go get it!\u201c. If that wiki page you linked changes the 3.0 SDK will force the welcome window to open when the SDK is started.\n\nAm 24.08.2015 um 13:05 schrieb Daniel Johansson notifications@github.com:\nIs it this page?\nhttp://wiki.jmonkeyengine.org/doku.php/sdk:welcome:3_0 http://wiki.jmonkeyengine.org/doku.php/sdk:welcome:3_0\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jMonkeyEngine/jmonkeyengine/issues/318#issuecomment-134153580.\n. Please make a more detailed report in the forum at hub.jmonkeyengine.org, preferably with a test case.\n. Lights in jME affect only the children of the node they're attached to. This is different in blender where it affects the whole scene no matter where in the graph it is. This is why lights are generally attached to the root node, so they light the whole scene. You generally can't expect the loader to keep your scene hierarchy completely intact. E.g. in blender one object can have multiple materials, in jME that would be multiple objects (geometries).\n. I gave an example for \"why\". Your point is a decision between WYSIWYG (in blender the lights affect the whole scene) and jME features. If we had done it the other way around we might have a bug report of somebody who complains that the light he added doesn't affect the scene. I just explained why its done the way it is.\n. You'd put the light for each floor in a node with the floor.\n. So how would you turn off a light on the floor?\n. Because you have to detach it to turn it off. This makes it hard to turn it on again because how do you know where it was? The solution: Place nodes instead of lights and attach them in code to these special nodes (or at the location of these nodes if you want them to affect the whole scene).\n. Yes, your problem of placing lights in your scene the way you want them.\n. You have a node. The node has a location and a rotation. You can attach the light to any node you want to all the way down to the root node and you can place it at the location its supposed to be (the light placeholder node you placed in blender).\n. Yeah, the LightNode should be placed in the hierarchy.\n\nThe Ogre importer imports the scene 1:1 as its stored in the ogre file which in turn depends on how the exporter created it. Some exporters don't include node hierarchy at all, some do. The blender loader has to make some decisions about how to import the file as it doesn't get a \"curated\" model but reads the blender file directly - and as you also indicated blender and a game engine renderer are two completely different things.\nGenerally I'd suggest not to use model formats / editors for light placement though unless you want to bake light maps (which you probably should given you didn't seem to want to turn off your lights anyway). Light in 3d editors and in game engines are quite different things - you're probably generally better off creating lights on the engine side (e.g. with the SDK scene composer - which is basically exactly made for doing the things that are engine dependent and not modeling - or in code). Same with particle effects etc.\n. Theres various ogre exporters for blender and various 3d modelers.\nI agree that the ogre importer should probably attach lights to the root node as well though instead of mindlessly importing the graph as it is.\n. What the... Why is this going to the 3.0 branch and why are there all changes of 3.1 included..\n. The error message is pretty clear. Do you call setTime() on a stream that is not seekable and doesn't have the streamCache option set to true?\n. Actually I prepared an Annotation checker for this that can be used in Java6+ during compilation, the code isn't complete but the skeleton is here: https://code.google.com/p/jmonkeyengine/source/browse/#svn%2Fbranches%2Fjme-checker\nThats also why theres the Annotation code in jme3-core\n. The change is not really necessary and ups the baseline for the plugin to Java7, I think we can pass on this.\n. Please don't nag, especially not via the github issues feature.\n. Well the SDK has no other hint at which mesh is which but the name so if you change that the old meshes are kept. A workaround might be an option to delete all meshes that weren't found (by name) in the current j3o - which in turn might delete meshes that you added to the j3o file later (not in blender).\n. Then you could just say \"no\" and convert it again. The point of this is keeping changes you made in the SDK (Materials, Particle Effects etc. etc.) and only importing changes you made to meshes.\nhttps://youtu.be/6-YWxD3JByE?t=2000\n. Most of these were kept separate to be able to add special parameter editors like sliders and whatnot but if/when that becomes the case they can still be split.\n. Yeah, it should be registered via setOverlapFilterCallback (see commented out code in PhysicsSpace.java), this needs to be done partly in the native com_jme3_bullet_PhysicsSpace.cpp, the callback itself can be routed back to java.\n. Sorry, a few things get mixed up here. The check\nif ((collisionObject.getCollideWithGroups() & collisionObject1.getCollisionGroup()) > 0\n                            || (collisionObject1.getCollideWithGroups() & collisionObject.getCollisionGroup()) > 0)\nneeds to be added in the native jmePhysicsSpace.cpp, this avoids further checks of the collision right in the broadphase. Additionally the PhysicsCollisionGroupListeners need to be called in that method as well because they can change the result right in that method, also avoiding further checks if they so wish.\n. Whats the purpose of sharing the material? It doesn't accelerate rendering, the size of the material data is negligible because all referenced data like textures and material definitions are shared anyway and this change will cause all instances of the material to be changed when you change one (e.g. you want to tint one model blue and the other red)?\n. Batching and instancing look for the actual parameters, so even if the material is not the same object - if the parameters are the same they will be batched.\n. It looks good, in fact I didn't regard the enabled state in this case and I'm not 100% sure if its regarded everywhere else?. Uh, sure, thats why I said it looks good. My implicit question was if you could check if the enabled state is considered in all other cases.. Its the same patch. It looks fine. It can be applied. I am saying that somebody should look into other cases where enabled might not be regarded because I am now realizing that I probably didn't regard it in all cases.. Yep, all documentation and the web links are pretty much fucked up because of constant useless website changes plus our documentation contributor doesn't have much time anymore (nor do I). So if you want to see this fixed its best to do it yourself. Just sent a pull request for the wiki.. Idk if theres any nightly zip distros anymore, I doubt so. Everything else should be on github.. ",
    "maany": "yes @erlend-sh , you can close it !\n. ",
    "Virepri": "This is the kind of thing you make a fork and then create a pull request for.\n. ",
    "jmekaelthas": "@MeFisto94  no, it is not yet implemented. I'll check it out and apply the patch if it does not break anything.\n. @MeFisto94 \nI have looked inside the code and looks like there is no need to change anything. The 'spec' is applied on each type of the specular color of the material. But if you know that some colors import badly please provide me the blend file and I'll take a look at it.\n. @shadowislord  I will take a look at it tomorrow or today in the evening and let you know.\n. I will need a file where the crash occurs. I tried the simple file loaded from 2.75a and it was fine. I also used more complex model and it was fine as well.\n. The file has strill the 2.73 version defined in it. I deleted one object, saved it and then reverted the deletion and saved again. This caused the version in the file to be updated to 2.75 and the error disappeared.\nI thought it might be a minor issue and I will quick fix it. But this bug will need further investigation. Try the workaround I mentioned and le t me know if it works.\nUnfortunately I am not able to work on it at the moment. I am getting married tomorrow and my time rapidly shrinks ;) That is the reason I was quite absent for the last month and a half. \nBut I will keep the file and I'll take care of it when I get back home in two weeks ;)\n. I have just mad a commit with fix.\nThis can happen when an unused mesh block is stored in the file.\nBlender stores vertex group names in the parent block of the mesh (the object). So when the importer encountered a mesh to be loaded it couldn't find its parent and read the proper content - this caused NPE to be raised.\n. ",
    "iwgeric": "Since jME 3.1 supports only Android 2.3 and above, it can be left as is.  For jME 3.0, do we want to simply use LinkedList instead?  Since NativeObjectManager is currently not platform dependent, there would be some significant changes to have only Android use LinkedList instead of ArrayDeque.\nPersonally, this issue was been around since May 2013.  I'm tempted to leave it as is.  Android 2.2 is currently at 0.6% of the market.\n. ",
    "sploreg": "Thanks. Issue found, will commit a fix.\n. Fix committed\n. ",
    "kwando": "And here is the forum topic http://hub.jmonkeyengine.org/forum/topic/screenshotappstate-refactoring/#post-266334\n. Ehm, wait before merging this.. when reading through existing blending modes it appears that the mode \"Color\" is the same as my \"Screen\" mode.. sigh\n. Forum discussion:\nhttp://hub.jmonkeyengine.org/forum/topic/make-interpolation-methods-on-colorrgba-line-up-with-vectorx-classes/\n. Here it is\n. No longer needed.\n. Do you have a valid benchmark ?\n. @Bebul Thanks for your benchmark. I'm not really convinced that a scene with 52K geometries is a valid use case and something we should optimize for. Generally you should only have a few thousands of objects in your scene, though it depends on your target platform. \nIf you are issuing a draw call for every geometry on your scene it will dwarf the updateLogicalState`` call, and if you don't issue a draw call for most of the objects in your scene graph then those objects should probably not be in the scene graph...\n. Whoopsie, It mas not my intention to press that button..\n. :+1: for unit tests :smiley: \n. It worked before on our new server?\n. What about aSanityCheckAppState` for this?\n. Instance variables in VectorXf is declared public which makes that impossible, without breaking lots of code. =/\n. Probably Z-fighting.\n. Issue should be temporarily fixed now.. ",
    "Eirenliel": "Here is the thread: http://hub.jmonkeyengine.org/forum/topic/fix-mipmapped-texture-arrays-and-3d-textures/\n. Forum thread: http://hub.jmonkeyengine.org/forum/topic/fix-jme-constanly-trying-to-upload-image-data-every-frame-with-mips/\n. I guiess this: http://en.wikipedia.org/wiki/S3_Texture_Compression and this: http://dri.freedesktop.org/wiki/S3TC/ could answer the question.\n. Why don't we compile NVT for all jme-supported plaforms and bunle native libs with jme?\n. @empirephoenix it is not solving any problem, i guess. If end-user don't have this, it is no difference from converting textures by developer themselves by NVTT or other program.\nOnly point in adding full DDS support to JME is to use it \"on the user side\" \u2014 e.g. generating DDS-textures in runtime (it will be extremely useful for me, for example). Simple support of converting them in SDK is useless if it makes so much patent problems.\n. As i can see, they do allow it, but this license is not bsd-compatible. I guess, it is better to release this as separate package/module/plugin with compatible license.\n. https://github.com/jobermayr/s2tc\nWe currently set a goal to port this converter to Java and integrate with our jme branch if converting result will be acceptable. When it's done we can contribute it here, if some one needs it.\n. Oh my, forgot to set JRE to 1.7... Fixed.\n. I already have few fixes + I want to move some features from your importer into this, so there will be another update. Furthermore I found some problems with some cases of importing bind poses and will investigate it as soon as I have time for this.\n. @bensku no, it's not since previous version. @bensku  Can you attach the file, please?. @bensku you're testing the wrong importer ;)\nThis patch is about com.jme3.scene.plugins.fbx.SceneLoader. @bensku you can just edit Desktop.cfg. @Ali-RS we are not working with Blender, we are working with Maya. I also do know that some stuff Blender imports from FBX wrong, but not necessary this case.\nWe recently made another giant update for FBX importer, i will share it a bit later, so this pull request can be just closed. Also can you send the file you are talking about for us to test in the new version?. @Ali-RS i've never seen quaternion rotation in real files, so i don't think it supports it now. I will check the provided file.. @Ali-RS all of this files have problems when importing. We will see why when we have time, thanks :). @deltasquad451 thank you, we will test it. We are working on fixing importer for our game on a daily basis, but it's an active development, so i don't know when we will be ready and have time to try to move it to JME, but it will happen any time soon :). @Pilvinen sorry we currently can't make necessary checks and prepare commits in jME.. @Pilvinen again all i can say is sorry, we are pretty swamped right now and if i try to give any estimate on plans, it might be wrong by any magnitude.... @Pilvinen but i tested the file you send and it does have some issues with animation. Sadly, we have no time to investigate it further :(. I'm sorry, Git Hub editor added it here.\n. ",
    "kles4enko": "Hi, why do you use Stack class?\n. @jonnius Hello!\nI use the same OS. The root cause in OpenJDK. Please, remove it, install OracleJDK  - everything will be ok!\nFYI: Java PPA\nhttps://launchpad.net/~webupd8team/+archive/ubuntu/java\n. ",
    "phr00t": "Updated to Deque instead of Stack\n. http://hub.jmonkeyengine.org/forum/topic/new-pull-request-emit-a-certain-number-of-particles/\n. Good suggestion; done.\n. Is there a way to just \"chmod +x\" those files in an installation script post install?\nI've recently switched back to Windows (VR development and all), but I'm pretty certain I developed on OpenJDK without issue for quite some time on Linux. I wouldn't let including the JDK on Linux hold up its release. Installing & maintaining a JDK is as simple as \"sudo apt-get install openjdk-8\" etc.\n. I look forward to it being merged & tested. I'd like to also pull it into my repository!\n. @DannyJo  can you create a pull request of this into my branch, please?\nhttps://github.com/phr00t/jmonkeyengine\n. ",
    "djmittens": "Well i think whether networking works or not is a separate issue, however i do believe it should build and not prevent the rest of the engine from building.\n. I can confirm that this indeed is broken in the latest alpha, could someone perhaps workon a fix for this?\n. ",
    "nanodeath": "I'm not sure this is still an issue -- I was able to compile using JDK 8:\n$ file com/jme3/math/Vector3f.class \ncom/jme3/math/Vector3f.class: compiled Java class data, version 52.0\n(after bumping to sourceCompatibility = '1.8' in common.gradle)\n. ",
    "danielwegener": "I think those things are called technical depts and have something to do with software quality. And I heard that refactorings towards simplicity, thats what changing working things is, have a reason. So the question should be: why not make it simpler if someone is willing to do it? \n. ",
    "slawekmikula": "If accepted, I can provide pull request\n. I can provide pull request with corrected code.\n. ",
    "AlrikG": "I have the same issue. All textures are in DXT5 512x512 format, but the output is always black\n. I think the bug could be in the method TextureUtil.uploadTexture(...). Because there is a check if the texture is 3D. Otherwise 2D textures are used, so there is no check if the texture is an array...\nif (glFmt.compressed && data != null) {\n    if (target == GL12.GL_TEXTURE_3D) {\n        GL13.glCompressedTexImage3D(target, i, glFmt.internalFormat, mipWidth, mipHeight, mipDepth, border, data);\n    } else ...\n. my textures are still black (512x512 DXT5). does anyone else got this problem?\n. The problem can be reproduced by using the provided TestTextureArray.\nWith the default test you only see a single texture (Pond.jpg) where it should be 2 different textures as been seen in earlier builds. This is even a new problem!\nAnd when changing it to load DXT5 textures the test wont even start. \n. Hi,\nOK, I've tried to use the default formatting. Sry for the typo in the branch name and in the last commit. Is it possible to rename my branch/commit without creating a new one?\nI don't know why but the formatting looks different on GitHub than in my IDE (eclipse)\n. Because you cannot compare two variables of the same reference. This patch prevents that the reference of a variable is written directly into the uniform variable \"value\", so without that comparing is not possible. I also have to check if matrices has changed. Have you tested hardware skinning in a complex scene with this patch applied?\n. \"There's no need to test hardware skinning because its quite clear what the result would be based on the changes\"\nI don't think so. Look at the screenshots on your own:\n\n\nBtw your calculation is not true at all. The float comparison terminates after the first difference was found. The whole buffer is tested if there are no differences. So you say \"changes the matrix array per geometry per frame\" this would leads to only some compare checks instead of checking the whole buffers.\n. What is the difference to my implementation?\n. Yes you are right. I fixed it\n. I have added a more precise comment because the constructor does more than the comment said\n. maybe this is also related and a solution for the problem: https://hub.jmonkeyengine.org/t/testpostfilterscompositing-not-working/37820. Cool! Can you create a test case as an example to show how to use it?\n. I have the same problem as on site blow. Some particle effects doesn't look good on bright backgrounds and I want to change the way how they blended on my own custom rules.\nhttp://blog.roblox.com/2014/10/transforming-the-look-of-roblox-with-new-particle-effects/comment-page-3/\nCan I achieve this effect by using the custom blend modes? I'm not really shure, that is why I'm wanted the feature.\n. Thank you but no I don't need a test case yet :). I still think its good idea to have such a feature\n. I don't know why it is wrong to give the user a method to pass arguments from the GL interface. If a user wants to define a custom blend mode then he must use the GL interface. In my opinion it is better to have a method with OpenGL arguments than no possibility to define such custom blend modes.\n. Cool! Maybe I have an improvement for your implementation: \nyou could extend the enumeration by a private constructor with the corresponding  \"public static final int\" as parameter. This way you can avoid the swith case in convertBlendFunc().\nThen you have something like:\n\"state.getCustomSfactorRGB().getBlendFunc()\"\n. Great :) One more thing: Is it possible to replace \"Zero(0)\" by this \"Zero(GL.GL_ZERO)\" ?\n. Hm ok then I think we should wait for a comment from @shadowislord  or @pspeed42 \n. @papaspace  is there a test case? I only get plain colored quads from the particle emitter.\n    mat.getAdditionalRenderState().setBlendMode(BlendMode.Custom);\n    mat.getAdditionalRenderState().setCustomBlendFactors(BlendFunc.One, BlendFunc.Zero, BlendFunc.One, BlendFunc.Zero);\n    mat.getAdditionalRenderState().setBlendEquation(BlendEquation.Add);\n\nEdit: It seems that there is a problem with DDS (DXT5) textures. I only get plain colored particles. It does work with PNG textures.. Yes it does work with BlendMode.Alpha and the DXT5 texture has a proper alpha channel. I also think its a DDS problem rather than a blend mode one.. sounds good, but what was the purpose to replace this one?\n\nreturn MemoryUtil.memAlloc(size);\n+final Long address = MemoryUtil.nmemAlloc(size);\n+final ByteBuffer byteBuffer = MemoryUtil.memByteBuffer(address, size);. I saw in the changes that you replaced \"return MemoryUtil.memAlloc(size);\" by the two new lines by I don't get it why did you do that. Is there any special reason for that? Don't get me wrong it is just out of interest :D. ah ups my bad xD ... thanks for this PR :). I just realized there is something more messed up with that euler methods.\nI have tested with this simple example. If I put something into roll and read it back, then pitch and yaw are also modified.\n\n```\nfloat pitch = 0;\nfloat yaw = 0;\nfloat roll = FastMath.PI;\nSystem.out.println(\"==============INPUT==============\");\nSystem.out.println(\"pitch \" + pitch);\nSystem.out.println(\"yaw \" + yaw);\nSystem.out.println(\"roll \" + roll);\nQuaternion q = new Quaternion();\nq.fromAngles(pitch, yaw, roll); // (pitch, yaw, roll)\nfloat[] angles = q.toAngles(null); // (yaw, roll, pitch) => (pitch, yaw, roll)\nSystem.out.println(\"==============OUTPUT jME javadoc - wrong order==============\");\nSystem.out.println(\"pitch \" + angles[2]);\nSystem.out.println(\"yaw \" + angles[0]);\nSystem.out.println(\"roll \" + angles[1]);\nSystem.out.println(\"==============OUTPUT same order as input======\");\nSystem.out.println(\"pitch \" + angles[0]);\nSystem.out.println(\"yaw \" + angles[1]);\nSystem.out.println(\"roll \" + angles[2]);\n```\noutput:\n==============INPUT==============\npitch 0.0\nyaw 0.0\nroll 3.1415927\n==============OUTPUT jME javadoc - wrong order==============\npitch -8.742278E-8\nyaw -3.1415927\nroll -3.1415927\n==============OUTPUT same order as input======\npitch -3.1415927\nyaw -3.1415927\nroll -8.742278E-8\n. yes but why is pitch and yaw rotated by -pi and roll is 0? Should not roll == pi and pitch==yaw==0 ?\nPITCH\n==============INPUT==============\npitch 3.1415927\nyaw 0.0\nroll 0.0\n==============OUTPUT jME javadoc - wrong order==============\npitch 0.0\nyaw -3.1415925\nroll 0.0\n==============OUTPUT same order as input======\npitch -3.1415925\nyaw 0.0\nroll 0.0\nYAW\n==============INPUT==============\npitch 0.0\nyaw 3.1415927\nroll 0.0\n==============OUTPUT jME javadoc - wrong order==============\npitch 0.0\nyaw 0.0\nroll -3.1415925\n==============OUTPUT same order as input======\npitch 0.0\nyaw -3.1415925\nroll 0.0\nROLL\n==============INPUT==============\npitch 0.0\nyaw 0.0\nroll 3.1415927\n==============OUTPUT jME javadoc - wrong order==============\npitch -8.742278E-8\nyaw -3.1415927\nroll -3.1415927\n==============OUTPUT same order as input======\npitch -3.1415927\nyaw -3.1415927\nroll -8.742278E-8\n. OK then I will update the PR.. is it fine now?. hm if I get the source code right, the order in which the angles are applied is (z,y,x) aka (roll,yaw,pitch). Do you agree with me?. ok then I build a test case if I have some time. Sorry but its not dead. I didn't had time for it because of planning my wedding, personal projects, and so on. But I definitely will work on this PR as soon as I have some time.\nEdit: fixed by #802. Hi,\nmy AttachmentsNode doesn't work anymore. I'm also don't see any red box in the test case. Is this bug related to this PR?\n\n. specs:\nWindows 7 64 Bit\nAMD Radeon 290x (Driver Crimson 16.2.2)\nJava 1.8.0_152-ea 64Bit\nLWJGL 3\nToday I pulled the latest changes from git master and build jme with the command: \"gradlew dist\".\nThen I updated my libs and tested it in my game qb. As you can see, the hand should hold a torch. After that I checked the testcase via the freshly builded jMonkeyEngine3.jar and realized that the attachment was also missing.\n\n. Hi @stephengold,\n\nYes I've tested with your new test case \"TestAttachmentsNode\". \nThe hand model is a j3o file where the SkeletonControl and AnimationControl are attached to that model. The torch model has no animations and therefore no SkeletonControl and AnimationControl. Further more the torch is attached to a bone of the hand model. The hand model is then attached to a new viewport to render it after the main view port. Hi Stephen,\nthat's weird, I completely removed my clone and did a new checkout of the 'master' branch of jMonkeyEngine. Then I built it via cmd \"gradlew dist\". But I still don't see the red box :/ Do you guys have an idea what else the problem is?. I will not try a previous driver version because it works before and other people will have the same probem. But I tested it on different hardware:\n\n(1) AMD Radeon r9 290x @ Crimson 16.12.2 ... not working\n(2) AMD Radeon HD7850 @ Crimson 15.11 ... not working\n(3) Intel Pentium G2020T ... working!\nSo it seems it doesn't work on AMD cards as you said and the older driver version (15.11) also doesn't work :(\nMaybe the problem is not in this PR but in another PR where the way how the bone buffers are filled was changed? => 381d69c\nEdit: It works with software skinning. oh sorry I misunderstood that.\nIt is my first AMD driver problem. Until now I only had nvidia driver problems :D . Hi @shadowislord \nthis is the output log.txt\n. Hi Stephen, no it doesn't\n. Are there any news? My torch is visible again when hardware skinning is disabled. Hi @shadowislord, I can confirm the bug comes with the commit bf18ef3. The previous commit (381d69c) works.. @Jeddic I use the attachment nodes to attached animated weapons. Otherwise the attachment nodes seems useless to me :/ But that is not what you meant right?\n@Nehon thanks nehon, I will check this on my machine. ok I get it now  :). Hi JavaSaBr,\nSorry if you've already answered this question somewhere, but why did you remove the public access modifier from the GL class's statics and methods?. Ok thanks :) I overlooked that. But this also means that you can remove the static and final modifiers from constants. Am I right? => https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html. No sorry I only looked into the changes instead of the PR #790 . Hello, first thanks for the fix. Live shader coding is awesome! But it seems that there is still a bug. Sometimes the asset manager can not reload the material file. The path is correct, but the file cannot be found and it ends in a NPE. I use Eclipse to change my shader files at runtime.\nMy workaround is to add try&catch to the update method of MaterialDebugAppState. But we know, this is just a workaround and not a fix..\nMaybe this has something to do with the asset cache or how Eclipse modifies the file in the \"bin\" folder?\nthis is the stack trace:\ncom.jme3.asset.AssetNotFoundException: MatDefs/Post/Water.frag\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:370)\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:386)\n    at com.jme3.material.TechniqueDef.loadShader(TechniqueDef.java:512)\n    at com.jme3.material.TechniqueDef.getShader(TechniqueDef.java:527)\n    at com.jme3.material.logic.DefaultTechniqueDefLogic.makeCurrent(DefaultTechniqueDefLogic.java:59)\n    at com.jme3.material.Technique.makeCurrent(Technique.java:152)\n    at com.jme3.material.Material.preload(Material.java:851)\n    at com.jme3.renderer.RenderManager.preloadScene(RenderManager.java:663)\n    at com.jme3.util.MaterialDebugAppState.reloadMaterial(MaterialDebugAppState.java:218)\n    at com.jme3.util.MaterialDebugAppState$FilterBinding.reload(MaterialDebugAppState.java:314)\n    at com.jme3.util.MaterialDebugAppState.update(MaterialDebugAppState.java:242)\n    at com.jme3.app.state.AppStateManager.update(AppStateManager.java:287)\n    at com.jme3.app.SimpleApplication.update(SimpleApplication.java:236)\n    at com.jme3.system.lwjgl.QbWindow.runLoop(QbWindow.java:611)\n    at com.jme3.system.lwjgl.QbWindow.run(QbWindow.java:715)\n    at com.jme3.system.lwjgl.QbWindow.create(QbWindow.java:511)\n    at com.jme3.app.LegacyApplication.start(LegacyApplication.java:463)\n    at com.jme3.app.LegacyApplication.start(LegacyApplication.java:424)\n    at com.jme3.app.SimpleApplication.start(SimpleApplication.java:125). Ok, I think my workaround is the way to go as long as I develop my shaders. Btw. it would be nice if modifying a shader would reload all geometries (automatically) that use this shader. And exactly the same for textures. I mean, how cool would it be to change textures and see the changes right in the game?. ",
    "lucienn3": "Same issue here... Could you please fix it ?\n. ",
    "h1ghst0r3y": "Guess that issue is quite important, also looking forward for a fix :)\n. ",
    "sirodoht": "For the record, I tried downloading directly from three different browsers and the same thing happens.\n. It seems my ISP is sabotaging me! Anyway, thank you.\n. ",
    "davidB": "forum entry : http://hub.jmonkeyengine.org/forum/topic/non-empty-git-status-after-first-build-of-jmonkeyengine\n. nbproject/private doesn't work it doesn't match recursively, (I also try with **/nbproject/private)\nprivate/ is for 'nbproject/private' and '.nb-gradle/private'.\n. IMHO\nA general rule is better, than for each project / sub-project explicitly ignore build, private, may be release. And add a explicit \"non-ignore\" for the few exception.\n. Sorry, I don't understand (english is not my mother tongue). So you prefer I restore full list and add some xxx/nbproject/private ?\n. like this ?\n. But lot of this files are hidden by netbeans in default view ;-)\n. If you're ok with the last version, I'll do another PR with only the final commit to have a cleaner history.\n. If you're ok to merge the current PR, let's go (less work for me ;-) )\n. I first try to limit the change to SDK. but it delegate all the stuff to jme'core (read/write are part of the class). And as you can see in the stackstrace there is not lot hook or info coming from core. I agree about having several kind of loader but it's hard to do, and may be impossible without modification of core.\nAn other approach I imagine (for this case) was to provide a classloader with a fake class for missing Control (I'm not sur if it's possible to copy/rename a class at runtime).\n. do you have a better suggestion. I currently experiment custom control, and got corrupted j3o. This fix help me to not loose my work. I also let the first exception so at runtime in game it should failed as expected.\n. No, I can't. I create \"Trash\" (or experimental) Controls, I didn't plan to commit them. I attach them in SceneExplorer. I though I detach them from SceneExplorer, then I delete the class. between all thoses steps I do some start/stop of the SDK due to work on SDK's fixes. And when I reopen the SceneExplorer failed to load the j3o.\nI try to re-create the missing class with Control with the same name and the code from the Control's template. But the loader never find them (may be classloader issue).\nnot tested : I though the behavior is different for missing class used in UserData, because value of user data can be null. And Spatial.clone will not failed if userData has null value, but it failed (NPE) if there are null control : \n```\nclass Spatial\n...\n   public Spatial clone(boolean cloneMaterial) {\n      //...\n            clone.controls = new SafeArrayList(Control.class);\n            for (int i = 0; i < controls.size(); i++) {\n                Control newControl = controls.get(i).cloneForSpatial(clone);\n                newControl.setSpatial(clone);\n                clone.controls.add(newControl);\n            }\n        if (userData != null) {\n            clone.userData = (HashMap<String, Savable>) userData.clone();\n        }\n}\n\n```\nAnd null value for userData => remove : \n```\nclass Spatial\npublic void setUserData(String key, Object data) {\n    if (userData == null) {\n        userData = new HashMap<String, Savable>();\n    }\n\n    if(data == null){\n        userData.remove(key);            \n    }else if (data instanceof Savable) {\n        userData.put(key, (Savable) data);\n    } else {\n        userData.put(key, new UserData(UserData.getObjectType(data), data));\n    }\n}\n\n@SuppressWarnings(\"unchecked\")\npublic <T> T getUserData(String key) {\n    if (userData == null) {\n        return null;\n    }\n\n...\n```\n. I did, but sometimes it doesn' fix.\n. when I detect the problem I did 10+ times to diagnose. As I evaluate how to use Control (as Component like in Entity-Component approach), I change/adjsut the code of control and use Scene's visual tools to test.\n. FYI, I switch my first implementation form Zay-ES to AppState + Control + UserData after I saw your video, with the hope to use SceneComposer & C\u00b0 for level design, preview ... In my previous prototype I use svg, drawn in inkscape, to programmatically generate Entities + Component.\nScene Visual Tool are far form my original image, so I try to do small contribution to help. But may be I wrong, and I should back to level define in svg (or blender) + Zay-Es. What is your advice ?\n(I can move this last comment to forum, if it's a better place).\n. the debug button is only enabled when play physics is selected. and the debug state is keep between two physics play.\n. I like to see all the physic body, and don't have to click on each Control to see them. It's a plus feature, I remove nothing, except the pause button (merged) ;-)\n. Normen win\n. My action extend AbstractNewSpatialAction (and implement NewGeometryAction) to reuse your code but to be able to group them in a submenu.\nWhen I try to only use the NewSpatialAction,  The \"Primitives\" submenu is empty : \npublic JMenuItem getPopupPresenter() {\n        JMenu result = new JMenu(\"Add Spatial..\");\n        result.add(new JMenuItem(new AddNodeAction()));\n        result.add(new JMenuItem(new AddEmitterAction()));\n        result.add(new JMenuItem(new AddAudioNodeAction()));\n        JMenu geometries = new JMenu(\"Primitives\");\n        for (NewSpatialAction di : Lookup.getDefault().lookupAll(NewSpatialAction.class)) {\n            if (!(di instanceof NewGeometryAction)) {\n                result.add(new JMenuItem(di.getAction(jmeNode, dataObject)));\n            } else {\n                geometries.add(new JMenuItem(di.getAction(jmeNode, dataObject)));\n            }\n        }\n        result.add(geometries);\n        return result;\n    }\nAny advice. It's the raison to have an other action type.\n. you can comment the line in the PR files via github.\n. OK, btw some change will be done to improve this features (better default value, may be other primitives or an other GUI). I'll wait feedbacks.\nThanks.\n. I did this refactor, it allow to quickly \n- modify/sync common code between action (way to create material, way to create a primitive)\n- check if every creation are similar (way to set name)\n  without the need to open several files, split screen,...\nAnd Action are lighter, just glue code for GUI.\n. It allow to share code like creation of material without copy.paste. My first implementation was without NewGeometry.java, and I've to edit both action files for every similar modification (add name, change material rules). it becomes quicker after move into the central NewGeometry to do other modifications (add Mode,...) and to support Quad and Line.\n. I'll do the change.\n. like ?\n```\n@org.openide.util.lookup.ServiceProvider(service = NewGeometryAction.class)\npublic class NewGeometryBoxAction extends AbstractNewSpatialAction implements NewGeometryAction {\npublic NewGeometryBoxAction() {\n    name = \"Box\";\n}\n\n@Override\nprotected Spatial doCreateSpatial(Node parent) {\n    Geometry geom = box(pm);\n    parent.attachChild(geom);\n    return geom;\n}\n\npublic static Material material(AssetManager assetManaget, NewGeometrySettings cfg) {\n    Material mat = new Material(assetManaget, \"Common/MatDefs/Misc/Unshaded.j3md\");\n    ColorRGBA  c = cfg.getMatRandom() ?ColorRGBA.randomColor() : cfg.getMatColor();\n    mat.setColor(\"Color\", c);\n    return mat;\n}\n\npublic static Geometry box(AssetManager assetManager) {\n    NewGeometrySettings cfg = new NewGeometrySettings();\n    Box b = new Box(cfg.getBoxX(), cfg.getBoxY(), cfg.getBoxZ());\n    b.setMode(cfg.getBoxMode());\n    Geometry geom = new Geometry(cfg.getBoxName(), b);\n    geom.setMaterial(material(assetManager, cfg));\n    return geom;\n}\n\n}\n```\n. If I create a parent super class, I'll have the same number of files ;-)\n. I'll change public to protected. a super class to avoid copy of material(...) in every Action\n. I'll wait other feedback before doing a new PR.\nthe rmove of NewGeometry.java is available at https://github.com/davidB/jmonkeyengine/commit/d3d5e6f9cba20b6cecc46402a426158c85be6cec\n. I propose wizard in the discussion, but I only got comments from nehon, and like him I prefer submenu quicker when I want to create a set of primitives, and the TopComponent allow to prepare the creation (batch).\n. copy/paste can also be used. in this case no random color, no persistance over session (need to search the model first,...). wizard are always more clicks. The current behavior also have more similarity with blender \"Add\".\n. IIRC, shortcut in SceneViewer are the same as in blender. moving to wizard should be discuss on the forum ?\nIt's a first proposal, a base for discussion and enhancement. It's my first real contribution to jME so I've a lot to learn.\n. Hi, I did a \"fix\" for \"Ineffective access DataObject from EDT\". I did it to be able to create empty scene and add primitives,... on it.\nsee https://github.com/davidB/jmonkeyengine/commit/89816c88d4cb01c54f66d68e48e377c5574452ba\nI'm not sur about usage of SwingWorker in this place. I included url of the netbeans' bugs in the comments.\nShould I include it in my next PR about sdk_scene_addprimitives ?\n. The bug is not on any part of my current work, but in the existing code and in very core part of the SDK. , it's why I ask you. (I 'd got it when I create an empty Scene from wizard)\nsdk/jme3-core/src/com/jme3/gde/core/assets/nodes/AssetChildren.java\nsdk/jme3-core/src/com/jme3/gde/core/assets/nodes/AssetNode.java\n. The empty scene is unsable, I add stuff in explorer, but nothing is displayed (without the fix)\n. 1. create an new empty scene from wizard\n2. open the scene, every things is fine in SceneExplorer/ SceneViewer\n3. Add a Spatial (In my case primitive), the spatial is listed in explorer, but nothing displayed on SceneViewer\n. I change the Look for FileObject into sdk/jme3-core/src/com/jme3/gde/core/assets/nodes/AssetChildren.java.\n. nothing light on/off display wireframe on/off\n. I'll restore, and made a video after lunch.\n. I don't have the issue on stable SDK 3.0.9, only on SDK/nb 8 (from git clone)\nAfter a window resize to prepare the video capture, I no longer reproduce the case, the only part is that the right click on Scenes and Scenes/*.j3o only display disabled \"show javadoc\". \nArgggggg. :-(\n. I'll stay \"aware\" because I've got this issue 100% since 3 days (it's why I\nwork on it this morning), and 0% since I want to make a video capture.\nThanks for your time.\nOn Tue, Jun 10, 2014 at 2:04 PM, normen notifications@github.com wrote:\n\nBtw, the issue with the missing right-click menu items might also be\nbecause they moved a lot of initialization from the layer.xml to\nannotations.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/149#issuecomment-45604726\n.\n. Due to my git filter about nbproject/project.xml the previous PR will not build of fresh clone. Because it's missing a dependencies to 'org.jdesktop.beansbinding'. The issue is that my project.xml also define version as 3.0.10. \nHow to provide a fix ?\n\n+                 <dependency>\n+                    <code-name-base>org.jdesktop.beansbinding</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.23.1.121</specification-version>\n+                    </run-dependency>\n+                </dependency>\n. with version set to 3.0.10 (!= other project.xml)\n. Thx\n. @empirephoenix nvidia-texture-tools are available on linux without wine. Eg: You should find it for archlinux at https://aur.archlinux.org/packages/nvidia-texture-tools/\nBefore using nvcompress, I gave a try to imagemagick to convert to dds and the result was very bad (near useless).\n. What do you prefer about common PhysicsSpace parts : \n- copy/paste code into native PhysicsSpace from jbullet (easier to review)\n- move common code into a parent AbstractPhysicsSpace (easier to maintain)\n?\n. change replicated to native bullet.\n. I use swing because the test was based on TestRenderToMemory.\n. IMHO, when you submit PR, you should try to follow the coding convention (brace,...) of the hosting project (including those that mismatch your personnal preference ;-) ). It'll increase chance of acceptation.\n. Paul, is it possible in your futur version to add a way for non-internal code to know when a spatial is added or removed (smell like ES or listener :-P ).  It will allow non-internal to avoid scanning the tree each frame or to request a side service user should notify when he add or remove some (kind) of spatial.\n. advice applied\n. np, I forgot it.\nI push it when I work on xbuf. 2 notifications about xbuf in the same day, it's a sign :-P \n. Today, I tried/explored several ways to use GLSL150Compat (without success). \nMy experiments:\n1. in GLRenderer.updateShaderSourceData(...) where \"#version\" is inserted, I insert \"#import GLSL150Compat\" if version < 150 && gl3 != null.\n    failed because #import already processed.\n2. in GLRenderer.updateShaderSourceData(...), try to insert content of GLSL150Compat, but GLRenderer should not dependents of AssetManager, so it's a bad idea\n3. in J3MLoader try to create Techniques for GLSL150, but only defaultTechnique can have multiple definitions, and we can't convert shader, because target OpenGL version is unknown.\n4. try to create a basic .vert and .frag with 2 imports : GLSL150Compat and the .vert/.frag for version 110.\n  failed because GLSLLoader only accept .glsllib as import, and it also require to create the duplicate techniques in j3md (only for default techniques)\nWhat I didn't experiement is to create a ShaderUtils.convertToGLSL150(Shader) that do replace like convertTOGLSL130 (so don't use the .glsllib) and call it into GLRenderer.updateShaderSourceData(...).\nI guess the last should work.\n. @Nehon I have to add Unshaded15.{vert|frag} to be able to display Fps/Stats (I also used it to display light point). I saw UnshadedNode.j3md but I didn't know how to use it (for thoses cases).\n. Sorry for the diff noise, with trailing whitespace removal (it's the conf in my company)\n. @shadowislord \nIt's why I guess, but it requires to duplicate the technique in j3md, and will not work for named technique (one technique per name, one Shader version per technique)\n. @shadowislord , @Nehon what should I change in the PR ?\ndiff without space, append ?w=1\n. @shadowislord ,\nGLSL150Compat is not enough. on an other branch I rewrite the PR to use GLSL150Compat instead of UnshadedNode but, it failed at runtime.\n```\nJul 05, 2015 11:42:12 AM com.jme3.renderer.opengl.GLRenderer updateShaderSourceData\nWARNING: Bad compile of:\n1   #version 150 core\n2   #define HAS_COLOR 1\n3   // -- begin import Common/ShaderLib/GLSL150Compat.glsllib --\n4   #if VERSION >= 150\n5   out vec4 outFragColor;\n6   #  define texture1D texture\n7   #  define texture2D texture\n8   #  define texture3D texture\n9   #  define texture2DLod texture\n10  #  if defined VERTEX_SHADER\n11  #    define varying out\n12  #    define attribute in\n13  #  elif defined FRAGMENT_SHADER\n14  #    define varying in\n15  #    define gl_FragColor outFragColor\n16  #  endif\n17  #endif\n18  // -- end import Common/ShaderLib/GLSL150Compat.glsllib --\n19\n20  #if defined(HAS_GLOWMAP) || defined(HAS_COLORMAP) || (defined(HAS_LIGHTMAP) && !defined(SEPARATE_TEXCOORD))\n21      #define NEED_TEXCOORD1\n22  #endif\n23\n24  #if defined(DISCARD_ALPHA)\n25      uniform float m_AlphaDiscardThreshold;\n26  #endif\n27\n28  uniform vec4 m_Color;\n29  uniform sampler2D m_ColorMap;\n30  uniform sampler2D m_LightMap;\n31\n32  varying vec2 texCoord1;\n33  varying vec2 texCoord2;\n34\n35  varying vec4 vertColor;\n36\n37  void main(){\n38      vec4 color = vec4(1.0);\n39\n40      #ifdef HAS_COLORMAP\n41          color = texture2D(m_ColorMap, texCoord1);   \n42      #endif\n43\n44      #ifdef HAS_VERTEXCOLOR\n45          color = vertColor;\n46      #endif\n47\n48      #ifdef HAS_COLOR\n49          color = m_Color;\n50      #endif\n51\n52      #ifdef HAS_LIGHTMAP\n53          #ifdef SEPARATE_TEXCOORD\n54              color.rgb = texture2D(m_LightMap, texCoord2).rgb;\n55          #else\n56              color.rgb *= texture2D(m_LightMap, texCoord1).rgb;\n57          #endif\n58      #endif\n59\n60      #if defined(DISCARD_ALPHA)\n61          if(color.a < m_AlphaDiscardThreshold){\n62             discard;\n63          }\n64      #endif\n65\n66      gl_FragColor = color;\n67  }\nJul 05, 2015 11:42:12 AM com.jme3.app.Application handleError\nSEVERE: Uncaught exception thrown in Thread[jME3 Main,5,main]\ncom.jme3.renderer.RendererException: compile error in: ShaderSource[name=Common/MatDefs/Misc/Unshaded.frag, defines, type=Fragment, language=GLSL150]\nERROR: 0:4: '' : syntax error: incorrect preprocessor directive\nERROR: 0:4: '' : syntax error: unexpected tokens following the preprocessor directive - expected a newline\nERROR: 0:32: 'varying' : syntax error: syntax error\nat com.jme3.renderer.opengl.GLRenderer.updateShaderSourceData(GLRenderer.java:1120)\nat com.jme3.renderer.opengl.GLRenderer.updateShaderData(GLRenderer.java:1147)\nat com.jme3.renderer.opengl.GLRenderer.setShader(GLRenderer.java:1211)\nat com.jme3.material.Material.render(Material.java:1215)\nat com.jme3.renderer.RenderManager.renderGeometry(RenderManager.java:568)\n\n```\nI also tried with the corrected VERSION (double underscore)\n```\nif VERSION >= 150\n```\nUnshadedNodes: +1 point ;-)\nPS: I did the test on mac osx ,who is more \"strick\" than my Linux/Windows.\n. replaced by #294 \n. To see the diff without trailing space change:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/293/files?w=1\n. So the weight buffer should be always  4 x vertex ?\nWhat is the goal of maxWeightsPerVert ?\n. (@slyh80 This discussion should be in the forum so community could share point of view).\nI'm not the author of the blender importer, but I'm work on an other blender exporter. And I did the same choice when I import data into the jme, light are attached to the rootNode and a LightNode is attached in the scene hierarchie.\nMyScene\n   |-- House\n        |-- Porch\n            |-- PorchDoor\n            |-- LightNode (referencing the SpotLight)\n   |-- SpotLight\nbecause in blender the light is global, and the same behavior in jME is to attach it to root, if I move a mode like NPC, player,... under the light I \"expect it\" to be enlighten. With your proposal mobile model need to be moved in the scenegraph to be under the right light zone.\nNow a solution, used by some of us : we post-process loaded data in game : \n- to add effect\n- to modify display regarding current gamedata\n- to replace placeholder model\n- to add/complete physics\n- to optimize \n- fix light : you can use this phase to visit the model and move light to the parent of LightNode. Today I used the exact opposite I move light from root of the loaded model to the rootNode of the scene, because NPC/avatar arent child of the \"floor\" model.\n. Can you edit your ticket and use the right syntax for the block of code see https://guides.github.com/features/mastering-markdown/  (you can use the previex tab to check)\n. It's not related to jMonkeyEngine, it's pure java. They are several way to parse String. I suggest you to find a tuto about java and parse string (reading char by char is often the wrong way).\nlinks:\n- http://docs.oracle.com/javase/7/docs/api/java/io/StringReader.html\n- https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#charAt%28int%29\n. @gouessej can you review this PR ?\n. Merci\n. do you mean for mousePressed and mouseReleased ? or for AwtMouseInput\n(that as no jogl dependency) ?\nOn Wed, Nov 11, 2015 at 8:49 PM, Julien Gouesse notifications@github.com\nwrote:\n\nShouldn't it be done for AWT too?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/379#issuecomment-155891495\n.\n. With this last change, I've got a working version of JME3-JFX with jogl. The last point, is that I need to access the GLWindow to setup Display. To do is I create my class in the com.jme3.jogl package. WDYT to provide a public accessor in JoglNewtAbstractDisplay to canvas ?\n. but the fix use method 'getSurfaceXxxx' that is not available in the\nAwtMouseInput (it uses an AWT Component regardless of AWT GLCanvas)\n\nOn Wed, Nov 11, 2015 at 11:07 PM, Julien Gouesse notifications@github.com\nwrote:\n\nJoglAbstractDisplay still uses an AWT GLCanvas, it is probably affected by\nthe bug. The AWT input should be overridden to use the same fix.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/379#issuecomment-155924695\n.\n. For joglAbstractDisplay, I thouh about 3 alternatives:\n1. use a class extending AwtMouse, lot of copy/paste (3 method of several lines only to change component.getHeight to ((GLCanvas)component).getSurfaceHeight)\n2. use a class extending GLCanvas and override getHeight and getWidth (by getSurfaceHeight,...), I'm not fan to change the behavior, less code than 1.\n3. Maybe configure canvas with\n\ncanvas.setSurfaceScale(new float[]{ScalableSurface.IDENTITY_PIXELSCALE, ScalableSurface.IDENTITY_PIXELSCALE});\n(like I read on jogl forum).\nLast point, how can I test it (for AWT) ?\n. By using only  jME 3.1 API (without fork), we can't use AWT Display. So why keeping both Display  (NewT and AWT) ?\neg. to use JoglDisplay I have to change JmeDesktopSystem.newContextJogl(...)\nPS: I'll not do the redesign (out-of my skill and goals).\n. I'm not on mac today, I'll create a simple sample to test (I got the issue\nwhen I adapt JME3-JFX).\nOn Sun, Nov 15, 2015 at 6:21 PM, Julien Gouesse notifications@github.com\nwrote:\n\nOk a decision must be made about that, you're right. I can accept your\npull request but please can you reproduce the bug with AWT? I received a\nMac Mini but it doesn't work exactly as I expected :s\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/379#issuecomment-156832081\n.\n. It allows to use OpenGL 3.2 core with those materials.\nOn mac application are OpenGL 2 xor OpenGL3+ but you can't mixe. By example, Lighting.j3md is not usable with settings.setRenderer(AppSettings.LWJGL_OPENGL3) because its default technique is only for GLSL 1.1.\n\nSo I add the GLSLCompat create by @shadowislord, as we discussed in a previous PR (where using node was \"rejected\").\nIs it clear ?\n. Last week-end I also should apply the same change on filter FXAA, to be able to use it with OpenGL 3 core (on mac).\nShould I do update this PR, including resolve conflit, or do you plan an other approach to support Open GL 3 for material that are only defined for GLSL 100/110/120 ?\n. @Nehon , @shadowislord Any update ? There are lot of material and post-processor that are not available in Opengl 3 => un-usable with OpenGL3 core on mac or driver that didn't allow mix GLSL110 with OpenGL3 core.\n. It works by adding the a opengl3 techniques and the compact.glsl lib made by Kirill.\n- same as https://github.com/jMonkeyEngine/jmonkeyengine/pull/377\n- discussion start  in https://github.com/jMonkeyEngine/jmonkeyengine/pull/288\n. I didn't check the generated pom. There are missing info to be maven central compliant. I'll complete them.\n. Hi the forum is readable without account.\nyou can find more info about the issue at https://hub.jmonkeyengine.org/t/jmonkeyengine-org-cant-be-reached/35891\nI'm working on an EXPERIMENTAL wiki hosted on github. the link to browse : Wiki\n. It's the expected behavior. To the same behavior than with in blender, in JME you should have : \n- 1 PointLight attached to root, that define what should be enlighted : children Spatial of root\n- Point [Node(0, 5, 2)] + LightControl that set the position of PointLight to the position of Point (every frame).\n. we could upload them, so there are available on the org.jmonkeyengine repository. But choose to not \"link\" them to jcenter. linking is a per artifact action, that should be done on bintray.\n. I don't understand. the 'repo' is not the groupId, 'repo' + 'userOrg' define the destination repository on bintray.\nit's not info that will be available in pom.\n. bintray is not limited to host maven repository / artifact.\n. updates.jmonkeyengine.com/maven is not a bintray repo\nupload directly to jcenter is not the recommended path, we upload into our own repository, and then linked artifacts are availble in every linked repository like jcenter. eg I upload my artifact in my own repository and for artifacts linked into jmonkeyengine/contrib repository or jcenter.\nsee Exposing Your Package to the World through More Popular Repositories (Linking a Package)\n. ok to push the 2 upload in the after_succes section (seems to be the convention from sample I saw)\n. Yes it is required to push to maven central.\n. ",
    "abies": "I will be only able to check that in few days, but as far as I remember, current jme obj loader merges all meshes into one huge mesh depending on material. I have locally modified version which preserves original segregation of objects, which allow multiple threads to do it efficiently. Still, I think there should be a slight speedup even without that - I will check on Sunday.\nAnd tmpVar modification should work in any case - I have tested it even without parallel mode.\n. Won't people want to use it possibly for some of dynamically generated geometry? Plus, if speedup is observed in general case, not only things I was checking, it might be a reasonable speedup even for SDK.\nI'll try to provide proper testcase by end of the week - if I miss the deadline, feel free to close it.\n. Working on that right now\n. This is very 'artificial' test, but I think it shows the speedup clearly. \nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.Node;\nimport com.jme3.scene.shape.Sphere;\nimport com.jme3.util.TangentBinormalGenerator;\npublic class TangentTest {\n```\nstatic ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\npublic static void main(String[] args) {\nfor (int i = 0; i < 10; i++) {\n    {\n        Node root = new Node(\"Root\");\n        for (int count = 0; count < 10; count++) {\n            for (int samples = 4; samples < 50; samples++) {\n                Geometry g = new Geometry();\n                g.setMesh(new Sphere(samples, samples, 1.0f));\n                root.attachChild(g);\n            }\n        }\n\n        long start = System.currentTimeMillis();\n        TangentBinormalGenerator.generate(root);\n        System.out.println(\"Serial \" + (System.currentTimeMillis() - start));\n    }\n\n    {\n        Node root = new Node(\"Root\");\n        for (int count = 0; count < 10; count++) {\n            for (int samples = 4; samples < 50; samples++) {\n                Geometry g = new Geometry();\n                g.setMesh(new Sphere(samples, samples, 1.0f));\n                root.attachChild(g);\n            }\n        }\n\n        long start = System.currentTimeMillis();\n        TangentBinormalGenerator.generateParallel(root, executor);\n        System.out.println(\"Parallel \" + (System.currentTimeMillis() - start));\n    }\n\n}\n\n}\n```\n}\n. But then I cannot implement existing method in the terms of new method. So we would need at least v3 and v4 versions of method.\n. CollisionResults is example where Iterable is used in jme3 in addition of having direct access.\nI think that having extra options, for rapid prototyping versus final optimized access is a good thing.\n. ",
    "husainhz7": "why the third should be left alone?\n. ",
    "shamanDevel": "I think only the DXT1-DXT5 compression methods are patent restricted.\nThe library I have selected uses squish as S3TC compressor. This library runs under the MIT license and is therefore free for use.\nHowever, I'm not very good in internet licensing, so maybe I've interpreted it wrong.\n. So, only the nvidia dds texture tools are allowed to write these textures.\nIs it possible to bundle the texture tools executable with netbeans, similar to junit in the nb installer, and then call it hidden from the user?\n. I have rewritten the dds loader and writer so that no external libraries are used.\nI use the Nvidia texture tools instead, they have to be manually installed.\nSee https://developer.nvidia.com/legacy-texture-tools --> DDS Utilities\nCan the executables nvdxt.exe and readdxt.exe be bundled in the sdk? What's with the licence?\n. I've been working with this extension in my local jmonkeyengine sdk and it works fine.\n. So, if this would be a SDK plugin, it would be allowed, am I right?\nHowever, this requires also some modifications in the SDK so that the FileFilters and IOModule can be extended. I would suggest a SPI that is registered over the Lookup.\n. Yea, I was thinking longer about the name. preOrderTraversal() would break the naming sheme with the other traversal methods. The extra flag is a good solution. I will change it.\nThe use-case is building a tree out of the spatials (e.g. in a UI). There, I need the parent first to create the node and then the children. \n. I use it in two ways:\n1. As a scene dump. The output is much more clear if the parent is listed first.\n2. building a node hierarchie without wrapping, so it is independend from the actual spatials\n. Is this pull request now acceptable?\n. Oops, I totally forgot that this was still hanging around.\nI'll start with a clean pull from the head of the jme3 branch again. Then there should be no merge conflicts and I'll include all the suggestions. You'll see a new pull request soon.\n. Hi, sorry for the late reply, I was in Egypt for a week.\n@empirephoenix  OpenCLObjectManager.getInstance().deleteAllObjects() deletes all objects that were registered in the OpenCLObjectManager ignoring their associated context (It is called in GLRenderer.cleanup() ). I can see that this is an issue because it kills all objects from other contexts if you have multiple applications running. I can think of three ways to support multiple contexts:\n1. Leave the OpenCLObjectManager a singletone, don't call deleteAllObjects() when the renderer is deleted and let the garbage collector do all the work\n2. Either pass the context or an instance of OpenCLObjectManager per context down to each OpenCL object. This allows the object manager to delete only the objects associated with one context\n3. I think, the OpenCL Api provides functions to query the context of every object. This can be used to test each object against the current context before it is deleted\nFurthermore, switching the OpenCL context should be possible with Application.restart(), assuming you also change the PlatformChooser. I haven't tested that yet. However, you would still need to recreate every object.\n@empirephoenix, have I answered your question?\n@gouessej I'm looking forward to see the next release of JOCL. But I already have a question for you. I want to work directly on the low level api so that I do not have the overhead of the high level wrappers (it would double a lot). To retrieve the binaries of a program object, however, CLProgram uses the class InternalBufferUtil, which is package private. Do you know a simple way to create a Buffer of Pointers to Buffers, or do I have to copy'n'paste that class? Thanks.\n. @gouessej you mean PointerBuffer.referenceBuffer(Buffer) ? I think I have overlooked it, I'll try it out tomorrow.\nWhy does it use a native function to access the pointer to the buffer, while InternalBufferUtil uses Unsafe  to get the value of the address field?\n. After I got response from the LWJGL forum, getBinary() now also works with LWJGL3.\nTherefore, all three implementations (LWJGL2, LWJGL3, JOCL) now support every feature of the wrapper.\n(Exception: JOCL does not support the new OpenCL1.2 image types yet, see previous post of @gouessej ).\n. This would be pretty simple to implement, e.g.:\n1. The OpenCLObjectManager needs to be informed when a new GLRenderer is created: create a method initialize() in the ObjectManager that is called from GLRenderer.initialize() .\n2. In this new method, a static counter (AtomicInt) is incremented, counting the number of parallel applications.\n3. In OpenCLObjectManager.deleteAllObjects() (called by GLRenderer.cleanup(), I would decrement this counter. If it reaches zero, the last application was destroyed and I can savly destroy all pending OpenCL objects.\n. I encountered some strange problems while testing OpenCL with multiple Applications running at the same time. Give me a few more days to do more tests and to figure out the issue.\n. Hi, after doing some tests, I can say the following:\n1. Changing the device while the game is running works. With a custom PlatformChooser, you can change the device during restart(). This can be used to specify the OpenCL settings in an ingame menu. But: changing the platform does not work for me, and all objects have to be created again.\n2. Multiple parallel applications with an OpenCL context each do not work.\n   First, only JOGL allows multiple applications, LWJGL2 catches this and prevents the creation of a second one, trying it with LWJGL3 results in a JVM crash.\n   While creating multiple contexts with JOGL works, as soon as a new context is created, the old one is kicked out. Therefore, only the application that was created last has a valid context and all OpenCL calls work. The others will crash with an OpenCLException (Invalid context, mem object, kernel, ...) at some point.\nHence, I have not implemented the proposed changes a few comments above, because I don't even get multiple contexts running in parallel.\nHaving a single context still works fine.\n. @gouessej Sorry for the harsh words in the forum. I've asked in the JOCL forum what might cause this problem\n@empirephoenix Either you can merge now and I create a new pull request when the multi-app issue is fixed and/or JOCL releases the OpenCL2.0 support. Or you wait one more day and let's see if I get help from the JOCL forum.\n. I see, this was added with version 2.4.0. jME3 uses version 2.3.2.\nTo the core members: are there plans to upgrade to the newer JOGL version? I'm not sure how many changes this might introduce to other parts of the binding (GL and AL).\n. poke @empirephoenix Is it time for a merge?\n. I stumbled over this problem while working on some very small test projects. My workaround was to always use a texture, but yes, this method is really missing.\nI hope, this pull request solves it:\n. Can we mark this issue as closed?\n. @Nehon do you mean this fix: #561\n. Can you make a pull request for this?\n. I'm not sure if Bullet 3 OpenCL exposes the native handles to the OpenCL objects.\nIf this is the case, then yes, you can use the new OpenCL wrapper to access the internal Bullet objects.\nHowever, you would have to create the wrapper objects explicitly using one of the three concrete implementations (JOCL, LWJGL2/3).\n. Thank you that you noticed that change in the API.\nTo the core members: Am I allowed to update the dependency of lwjgl3 from 3.0.0b to 3.0.0? Then I can implement the changes.\n. Can we mark this issue as closed?\n. And the fix is in progress, see #805. Fixed in #805 . The warning is now fixed.\n@zzuegg I thought that Android will migrate to the OpenJDK, so all future devices will have support for Java1.8\n. Only LWJGL3 uses Java8 and this is only an optional module, so I also agree that forcing JME to only work with Java8 might be too restrictive.\nOtherwise, there would be various places in the core engine where lambdas are useful: e.g. for the scene visitor or spatial filters. But this is another discussion.\n. I think that it would be the best solution to stick to 1.7 as source and target level and build and use the LWJGL3 module only if the JDK8 is available, as described in the previous posts. \nThen platforms that do not support Java8 (e.g. Ubuntu, Android) can stick to LWJGL2 or JOGL, while at the same time we are ready for the future with LWJGL3.\n. @shadowislord Done\n. @shadowislord Is it possible to specify the JDK version of the travis build for each submodule? Then Travis can do this compatibility check for us.\n. @shadowislord Here is the new pull request: #560\n. @MeFisto94 if I interpret the log of the travis build correctly, then the answer is yes.\nWhen building against JDK8, then lwjgl3 is included and the warning \"bootstrap class path not set in conjunction with -source 1.7\" appears at the core project.\nWhen building against JDK7, lwjgl3 does not show up in the log and so does the error message.\n. @shadowislord Is it possible to deploy both versions, for java 7 and java 8? (What third one did you mean?)\nAnd further, is it possible in Maven or Gradle to include different build artifacts depending on the java version?\nThen the user would not have to worry which version he/she should choose.\n. Hi,\nIs this issue still active?\nI side with manuel-heger, I've used TempVars from time to time in math heavy, but short living classes.\nThe proposed changes to make TempVars\u200b AutoCloseable does not influence the functionality, it only improves the usability. Furthermore, it reduces the chance of errors if the instance is not released by allowing the try-with-resource construct.\nLastly, this only adds maybe 5 lines.. Hi,\nI think the output is as expected. Let's look at your second example first:\nYou set radialSamples = 3, so you get a prism (3 radial vertices). Furthermore, axisSamples = 3, leading to three segments along the axis. This means 4 vertices along the axis (axisSamples=1 -> top, bottom; axisSamples=2 -> top, middle, bottom; axisSamples=3 -> top, 2x middle, bottom). This leads to 3*4=12. So the vertex count is correct.\nThe index buffer is also correct because it stores three integers per triangle. So the actual number of triangles is ib.size()/3 = 36/3 = 12 which is the correct value.\nThe same holds for your first example.. @Saucistophe a question to your code above:\nYou indicate that the cylinders itself change. How can that happen? There is no randomness involved in the creation of Cylinder.. As far as I can see it, TempVars is mostly used locally in methods: get an instance, do some math and release it. There are only very few exceptions, for example the intersection tests in Light.\nThe former would be the use case where I sometimes use TempVars in my code:\nI wrote some controls that update parts of a weather system: exact sun and moon position, their light color and intensity, and so on. Or a particle system for rain and snow effects. These controls update their settings only about every few seconds. These updates, however, are very math heavy. Here is the point where I use TempVars: math-heavy code that is called irregularly. At least, that's  how I see TempVars should be used.\n@Nehon  Do you agree with that?\nAllowing the try-with-resource semantic would reduce the possibility of errors if a user forgets to call release().. Ok, I understand now that I really should not use TempVars in my own code.\nIs this merge request then still needed? Or only if the try-with-resource semantic is also applied in the core itself? This would require changing many classes, but it would also fix some inconsistencies: sometimes, TempVars is used within a finalize block, sometimes without.. Hi everyone,\n@riccardobl  summarized it very well. There are two ways to deallocate the native objects: manually and with the gc. As long as you only use the manual deallocation, the gc is not called every 10 seconds. That's the preferred way.\nThe second way is more tricky. The OpenCL-objects are very tiny. For example, an OpenCL-Buffer only stores the pointer to the native memory and a link to a releaser. Including any JVM overhead, this comes probably down to less than a dozen bytes. While on the GPU, this object can hold maybe a GB of memory and the JVM does not see this memory at all. Same holds for driver-objects like events. Hence the JVM will not release the Java-Objects for a long time, resulting in the out-of-memory errors on the native side. This is why I explicitly call the gc.\nAt least in my experiments, this was the only way that I found.\nAny suggestions are welcome.. No, the OpenCLObjectManager comes only in play when you call OpenCLObject.register(). This tells the ObjectManager that there is an object that you want to be handled by the gc. Only then is Runtime.getRuntime().gc() called every 10 seconds.\nSo as long as you don't call register() and handle it only manually, the gc won't be called.\nNote: OpenCLObject.register() is only a hint: objects are still deallocated by the gc using finalize() as a last resort, if you forget to call register() or release().. Oh, yes, the cast is completely useless. I'll change that.\nWhat do you mean with OpenCLObjectRef.clear()? When should Reference.clear() be called? When the user deletes an object that was registered in the queue?\nHonestly, I'm not very experienced with all the references and gc internals. I copied most of the cody of OpenCLObjectManager from com.jm3.util.NativeObjectManager.. And to your comment above: no, the code should not be wrong in the sense that no memory leak should be produced.\nBut because the gc potentially delays the deletion of e.g. Event extremely, the driver will crash sometimes because it runs out of handles for event objects. At least I experienced that in my code.. So your opinion is to remove this repeating gc() call completely?. So, the pull request is here.\n@gouessej I can't drop the casts related to the ReferenceQueue. The PhantomReference has the following constructur: PhantomReference(T referent, ReferenceQueue<? super T> q). But here, the referent is an OpenCLObject but the queue contains the OpenCLObjectRef instances. So I need to use the more general Object type. \nRemark: This is also how the NativeObjectManager handles the stuff.. The new release of LWJGL3 requires Java8. This is why the Travis-Build fails.\n. A build error is produced otherwise, because another interface declares these methods as public void close() throws IOException which overwrites the declaration of the super interface where it delegates to. So I have to overwrite these methods, because the no-throw version is needed.\nP.S. / offtopic: I'm always confused: override or overwrite? :)\n. Sorry\n. Now it creates a random point within a box of the desired side length (=radius) around the center.\nThe Do-while loop is still necessary to skip the samples outside the sphere. I might be wrong, but I think there is needs to more probability mass on the points with bigger radius than on the inner points. So if you normalize and then scale with a value between 0 and radius, that distribution must not be uniform, but something like u'=sqrt(1-u^2), as TehLeo suggested.. ",
    "Tonkel": "After I found out that \"jme3-jbullet\" was the native bullet implementation, I could take care of that as well.\nShould be complete now.\n. ",
    "wlfbck": "@pspeed42 Sorry, i didn't mean with that to change the interface (and thous break user code), just the underlying code. I noticed for example that a new serializer is created at several points. Maybe i have the time this evening to take a closer look and determine what is actually too much and what isn't.\n. Some more:\n- The serializableSerializer on line 67 is unused in the whole project. The SerializableSerializer class is actually unused. \n- registerClass(Class cls) has no javadoc, but could use mostly the same as registerClass(Class cls, boolean failOnMiss), which might be helpful for newbies because no exception != no error. \n- registerClasses(Class... classes) also has no javadoc\n- Javadoc of registerClass(Class cls, boolean failOnMiss) could use some converting to @return and @param\nThe rest looks okay, but is really confusing^^ I know this sounds a little petty, and i would actually just throw it in a pull request, but committing guidelines told me not to, so meh.\n. ",
    "jmaasing": "+1 for adding a flag or maybe even an Enum or similar for indicating the strategy for walking the tree (pre-order, in-order, post-order). Preferrably matching the description on wikipedia: \nhttp://en.wikipedia.org/wiki/Tree_traversal \nPre-order traversals are convenient for duplicating a tree.\n. Much higher chance of getting an answer if you post these types of questions on the forum rather than using the issue tracker:\nhttp://hub.jmonkeyengine.org/forum/\n. ",
    "Shredder121": "Is it maybe a good idea to add a method rather than replacing it?\nBackward compatible patches are more likely to be applied quickly.\n. Just know that for Ubuntu, only recently (Xenial) there is a public package for Java 8.\nSo the majority is either on Java 7, or an old (read potentially vulnerable) version of 8.\nProbably just 7 since it's quite a hassle to figure out PPAs, and unless you know what you're doing (developers developers), any Java version will do.\n. Keep in mind that you can also keep the source and target to 1.7, Java 7 classfiles also run on Java 8.\nAnd the warning: [options] bootstrap class path not set in conjunction with -source 1.7 is not that big of a deal.\nI also work on a library that uses Java 8 features (java time) but uses target platform 1.7.\nAnecdotally, there is also a library that I use, that targets Java 5, but I don't have JDK 5.\nSo, what we could do, is use something like animal sniffer to detect whether we are using features that are present in the current JRE, what we compile with (JDK 8) which are not present in the JRE we are targeting, what it should run on (JDK 7).\nDoes anyone know whether you can run ant tasks in Gradle? I am not that familiar, I mostly configure using Maven, but the feature set is the same.\nAll in all, what's your opinion on this idea?\n. > Shredder121: Just know that for Ubuntu, only recently (Xenial) there is a public package for Java 8.\nI didn't claim that Ubuntu doesn't support Java 8, I'm just saying that only recently there is support out-of-the-box for Java 8.\nYour original options were the installer for Oracle JDK, or a PPA.\nAnd that means you can only expect the lowest common denominator to be Java 7 on (Ubuntu) Linux.\nSo for all intents and purposes, bumping to Java 8 excludes quite a bit of platforms, and I don't think Java 8 is required yet for some time (the Java 7 class library is quite extensive, so it's still very good for now).\n. You could also use animal sniffer, there are also signatures for android api levels.\nI noticed that someone else already did some glue code for gradle<->ant animal sniffer support\nhttps://github.com/xvik/gradle-animalsniffer-plugin\nThen we can just keep compiling with JDK 8 and not have to set up some elaborate build matrix.\nThoughts?\n. Can't these calculations be put in a static final field or something?\n. Okay then, just wanted to add my 2 cents.\n. I didnt see this one, my comment can be ignored.\n. What language level are we running on?\nJust wondering. :sweat_smile: \n. Just a question, nothing much.\nIsn't it cleaner to not rename the fields?\n. Keep in mind that Java 7 class files can work in both Java 7 and 8 (and higher) JREs.\nIf you bump to Java 8 you don't have that luxury.\nWhich milestone will this end up in? How strict is the JME team with respect to semver?\nYou can also keep the warning around, as long as you're careful it's no problem.\nThen for the time being you don't have to drop Java 7 support.\n. ",
    "saloisio": "From what I can see, the animator is started in startGLCanvas()  and then it is never stopped. In what case will animator.isAnimating() return false?  The frame rate support I added is basic but it does work, and I thought it would be better to have some frame rate support rather than none.\n. The animator is not accessible through any public API. This was the reason I needed to modify the source in the first place. If this is an incorrect assumption please explain how I could gain access to the animator without extending any of the canvas classes. \nIt would be great to have vsync support as well. I did not see any easy way to do this so settled for frame rate setting, which is accurate enough (+- 1 fps) on a Windows 7 OS. \n. Is this ok now?\n. @gouessej have you tested vsync on multiple jme contexts with the JOGL canvas? It doesn't work very well. Only one context is vsynced properly, the other has a very low fps. In my case on a 75 Hz screen I have context one refreshing at ~75 fps and context two refreshing at ~18 fps. When I re-run the test using setFramerate(60) both contexts refresh at ~60 fps. Seems my updates to support setting frame rate is more reliable at the moment.\n. Ok good. So can you merge this?\n. ",
    "luis-moral": "Working on that, first time using pull request... I still dont like git :P\n. ",
    "NetzwergX": "I haven't followed Android development closely, but have the bugs in Android that cause memory leaks with iterators been resolved or do they still persist? Generally, using iterators shouldn't be a problem in newer Java versions since most iterators can be allocated directly on the stack due to escape analysis, but afair JME targets Java down to 1.5.\n. 1.) If a number is chosen, it should be clearly documented why it has been chosen, so that everyone who laters reads the source can follow your thoughts ;)\n. There is an official learning repository that you can use to test out pull requests and such:\nhttps://github.com/octocat/Spoon-Knife ;)\n. > Is there any way you can use the previous formatting so the changes can be seen? \nYou can always add ?w=0 to the url to get a diff that ignores whitespace changes:\nhttps://github.com/simon-heinen/jmonkeyengine/commit/ee801717473936f934a5b34c75bd94744c21cfcf?w=0\nIt's not the same as retaining the original format, but good enough to take a quick look at the actual changes ;)\n. @pspeed42 Absolutely agreed. But relative paths should work. Currently, the MTLLoader is limited to having textures in the same directory as the .obj file - which is very limiting. Most 3D modeling programs have an option for OBJ files to switch from absolute to relative paths, precisely in order to enable reuse. When using 3rd party assets (not made with the SDK, e.g. bought ones or ones made with another program), one would expect JME3 to being able to properly read them.. ",
    "jimbok8": "Please can this be assigned as a bug and if pssoible fixed! Thanks.\n. ",
    "zzuegg": "http://hub.jmonkeyengine.org/forum/topic/batchnode-issues/#post-299985\n. going to check out in the evenig, the only plce which comes into my mind are the bit vlues in the GL4 interface. maybe i switched them..\n. @Nehon: you are right, the bit values for Control and Evaluation Shaders are switched.. Going to fix this, and the tests today evening.\n. Oh, seems it is a dealbreaker for me, wonder why nobody else notices that yet, basically every heightmap should not work anymore in 3.1 (beside the 8 bit one).\nJust as a note, also the ImagePainter needs to support the X8, X16 format, as it is used by the ImageBasedHeightMap to generate the CollisionShapes\n. Same issue with regular BatchNode.java\n. No problem. Adding GL_MAX_VERTEX_UNIFORM_VECTORS and keeping, or removing GL_MAX_VERTEX_UNIFORM_COMPONENTS? \nAlso since i am dooing it should i add the queries for the other shader stages too?\nThere should also be a note in the doc what that number actually says. \nlike \nuniform int someNumber //takes 1 full vector or 4 components\nuniform int someArray[10] //takes surprisingly 10 vectors or 40 components on nvidia while i assumed it would align and take 3 vectors or 12 components.\n. So i just add them all, and its up to a higher layer to decide if COMPONENTS or VECTORS has to be used? \nAlternative is to make our own limit, like MAX_SHADER_VARIABLES and decide in the init step if COMPONENTS or VECTORS is used. \nI personally would prefer first, since it is in line with the gl specs. But more error prone since the user has to check himself. \n. All right, going to update it into that direction.\nIt should be division by 4. On most cards.. \n. oh damn, totally forgot about this. Think i have already implemented it locally. Just have to cherry pick the commits and test quickly.. \n. Ouch, sorry about the autoformatting. That key combination is burned in :(\n. @shadowislord I know, thats why i started the thread about the auto-reformat tool. I really tried, but i was not able to re-add those spaces. Tried reverting to a previous commit and copy/paste from github. \n. It would have to be frame and camera aware to allow rendering to multiple cameras.. And that would probably be nearly the same as comparing the matices directly. \nMight be an option to cache the hashvalue, so that the check is basically only and int==int\n. any news on this, there are two PR open for this issue: 306 and 302\n. Added the missing default empty constructors\n. you can easily ise jitpack for private projects in the time until there is a official stable/snapshot release\n. Hi, just a quick info input,\n-In GLFW a hidden window is required to create a context in the first place\n-FBO's are not sharable between contexts since, even the name suggests otherwise, they are not objects\nNot sure what you usecase is, but if you only want to render to a FBO for nSight, you probably can create your own, render to that and debug it trough nSight. (Note, i never used nSight, only ApiTrace)\n. AFAIK it should be:\n```\nlayout(location = 0) out vec4 fragColor;\n//some shader code\nfragColor=//someColor\n```\n. For pure offscreen rendering you have to create a windowed window, and set glfwWindowHint(GLFW_VISIBLE,false) before glfwCreateWindow\nIt does not show up in the taskbar or anywhere.. but creates a hidden context..\n. Rather strange, there is already some code in the AndroidLocator to remove a leading /\n. As an addon info, on osx, the main thread has to be thread 0.\nIt requires the vm argument -XstartOnFirstThread\n. Pushing to java 1.8 will drop support for all android devices as it stands currently.. \n. IMHO it would be nice to have at least the possibility to manage the cleaning up myself. Like calling BufferAllocator.cleanup() myself rather then having a uncontrollable deamon. . Well, its not the GC, its clearly a deamon thread deallocating the native memory. It does behave similar to the default BufferUtil, and it is also fine that this is the default. But since we are tracking the objects it would be nice offer the possiblity of manual destruction without the need of tracking the buffer usages myself. Like combining the best of both worlds, mindless allocating/nulling and beeing able to trigger the cleanup at a time i know it will not jitter my frametimes.. Maybe out of scope of this PR.. . Actually, if you submit your own color/direction, you are saving 2 object creations compared with the previous version. \n+The divisions should be resolved during compile time. \n. ",
    "Bebul": "I have tried to analyze the updateGeometricState() thoroughly and if I am not mistaken it does not do other things. I hope, the run control is managed through updateLogicalState(), which is different story and I would like to post its optimization in another pull request.\n. 1) number 4 is somewhat arbitrary. When there is only one child, the boundingVolume test is redundant at all. The idea is when there are few children, it can be too expensive to test boundingVolume first.\n2) Thx, you are right. We should avoid allocation.\n. I have tried to address the weaknesses you've found above.\nOnly to make clear the purpose of the new DummyCollisionResults class.\nIt would be of course possible to reimplement all the collision detection stuff with CollisionResults usage completely missing. BUT, it would split the implementation and violate the DRY principle. The DummyCollisionResults provides the singleton which implementation is empty. \nSo there would be no additional allocation inside preliminary optimizing collideWith check.\n.   Are there any additional issues making this Push Request unacceptable?\n  Any response is welcome.\n  Thank you.\n. @shadowislord \n\nWhy are you not using TempVars.collisionResults but instead creating your own public singleton class?\n\nThe TempVars.collisionResults can be used, of course. Using DummyCollisionResults avoids collecting of colliding geometries at all, so it is slightly more effective. It may also help reader to understand the collisionResults are of no interest in this particular case.\nBut we can use TempVars.collisionResults, no problem. Just say.\n. @shadowislord \n\nSo I still stand by my suggestion to use TempVars.collisionResults as that's exactly what it was intended for. If you wish to take the more advanced route @pspeed42  suggested that works too.\n\nThx, you were right, the CollisionResult was still allocated. I have removed the DummyCollisionResults and used new BoundingVolume.collideWith with not results parameter which is implemented using TempVars, but overriden in BoundingBox and BoundingSphere to avoid allocation at all. Only BoundingSphere.collideWith triangle uses the super.collideWith implementation from BoundingVolume, so this is the only case where allocation would still happen.\n. I have created a scene with several (four of five) levels of Node hierarchy and aprox 52000 cube geometries as leaves. The most relevant for this kind of optimization was to see what would happen when I look outside of the scene, which prior to optimization was:\n\nAfter optimization, the updateLogicalState has not figured in the profiler snapshot at all.\nBut it does depends on the scene of course. If it is hierarchical, with several levels of static scene (with no controls inside), it would count we hope.\n. Thanks for fast and detailed response.\n\nFrom my understanding it\u2019s will now be a lot faster to cull chunks scene if it\u2019s properly organized in sub graphs, am I right?\n\nYes, the scene must be constructed in subgraphs based on position. We have used trivial simple scene organized as quad tree.\n\nOne thing I dislike though it the ShadowUtil.rootScene = rq.getRootScene(). Not sure why you did that. I suspect it was to keep the ShadowUtil API unchanged.\n\nYou are right again, I was afraid of changing the ShadowUtil.updateShadowCamera() signature.\n\nSo short story : don't be afraid to change the ShadowUtil api.\n\nOK, nice to hear it. Will do. Thank you.\n. The PR updated to take Nehon's remarks into consideration.\n- multiple relict render shadow functionality removed\n- ShadowUtil.rootScene removedpassed as a parameter in ShadowUtil.updateShadowCamera() instead\n. Considering the issues mentioned:\n1) the shadow processors - you mean renderers, like Directional+Spot+Point+Pssm+BasicLightShadowRenderer? All of these were tested and we believe they work. Moreover, shadow filters use their related renderer as member variable, so the optimization affects them too, also tested. We implemented the occluders recursive collection process first, but then we have realized the same holds for receivers too, as there is no need to collect them all first and select only these inside camera frustum later. The reason why there is still RenderQueue.shadowRecv left is to possibly reuse the collected receivers, as having the list of receivers in the camera frustum can become handy. So it is not necessarily empty! It is also used it in our next to come push request, which builds over this one, so we must wait whether this one is accepted or not.\n2) the optimization is inside RenderManager.renderSubScene which is called from RenderManager.renderScene where the RenderQueue.setRootScene() is set. But the renderScene is called for all scenes attached to viewport:\nList<Spatial> scenes = vp.getScenes();\n        for (int i = scenes.size() - 1; i >= 0; i--) {           \n            renderScene(scenes.get(i), vp);\n        }\n. Are there any additional issues making this Push Request unacceptable?\nAny response is welcome.\nThank you.\n. @shadowislord \n\nAll receivers are already guaranteed to the in the camera frustum since they are rendered from the eye camera.\n\nYes, it was guaranteed, but such huge list of receivers need shadows rendered only for the DirectionalLight.\n  Different and thinner receivers list can be used for other lights.\n  PointLightShadowRenderer.getReceivers and SpotLightShadowRenderer.getReceivers use ShadowUtil.getLitGeometriesInViewPort now, which is the intersection of two camera frustums.\n  When cones of lights intersects only part of eye view frustum, it is more effective.\n\nThere's no need to render them again in the shadow renderer.\n\nAre they rendered again? I believe they are not as it would make shadows twice darker!\n  To prove it I have forced to render receivers twice for SpotLightShadowRenderer and it was immediately darker. The code was:\nGeometryList getReceivers(GeometryList sceneReceivers, GeometryList lightReceivers) {\n        ...\n        ShadowUtil.getLitGeometriesInViewPort(viewPort.getQueue().getRootScene(), viewPort.getCamera(), cameras, RenderQueue.ShadowMode.Receive, lightReceivers);\n        if (proveIt) ShadowUtil.getLitGeometriesInViewPort(viewPort.getQueue().getRootScene(), viewPort.getCamera(), cameras, RenderQueue.ShadowMode.Receive, lightReceivers);\n        return lightReceivers;\n    }\nIn our tests we were able to switch between old and new implementation, so we were sure the shadows are the same, not darker or so.\n\n... so for multiple scenes, only the last scene will have proper shadow casters set.\n\nYou are right at this point. We will fix it.\n. @shadowislord \n\nIf there's more than one scene attached to the viewport, it will only render the casters from the last attached scene. This is because of the RenderQueue.setRootNode() which is not necessary at all, because viewPort.getScenes() should be used instead.\n\nThe fix ed369135fa471495b9d6190e31a9d1094cc628d7 handles the issue reported. setRootScene() is not used anymore. Multiple scenes attached to viewport were tested, both renderers and filters. \n. @Nehon , @shadowislord yes, it does seem the attenuation radius is not taken into account when rendering shadows. The shadow is definitely rendered in spite of light does not reach the frustum. I have had three lights in action, all in different direction, Point, Spot and Directional. Both Point and Spot lights were set to closely reach the Ninja and Golem models but the shadow was casted to long distances where only directional light should shine. When camera has moved to view the long shadow only, the shadow has disappeared abruptly.\n. OK. Can @Nehon close this after fix is done? Feel free to close this.\n. @Nehon : There is one simple example. Three lights, two shadow renderers, shadows of both of them disappearing and appearing again when camera angle changes. Dunno, how to attach source code file?\n```\npackage jme3test.helloworld;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.light.DirectionalLight;\nimport com.jme3.light.PointLight;\nimport com.jme3.light.SpotLight;\nimport com.jme3.material.Material;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.math.FastMath;\nimport com.jme3.math.Quaternion;\nimport com.jme3.math.Vector2f;\nimport com.jme3.math.Vector3f;\nimport com.jme3.renderer.queue.RenderQueue.ShadowMode;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.Node;\nimport com.jme3.scene.Spatial;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.shadow.EdgeFilteringMode;\nimport com.jme3.shadow.PointLightShadowRenderer;\nimport com.jme3.shadow.SpotLightShadowRenderer;\nimport com.jme3.texture.Texture;\nimport com.jme3.texture.Texture.WrapMode;\nimport static jme3test.light.TestDirectionalLightShadow.SHADOWMAP_SIZE;\npublic class HelloPicking extends SimpleApplication {\n  public static void main(String[] args) {\n    HelloPicking app = new HelloPicking();\n    app.start();\n  }\n@Override\n  public void simpleInitApp() {\n    flyCam.setMoveSpeed(100f);\n    rootNode.attachChild(makeFloor());\nNode characters = new Node(\"Characters\");\ncharacters.setShadowMode(ShadowMode.Cast);\nrootNode.attachChild(characters);\n\nSpatial golem = assetManager.loadModel(\"Models/Oto/Oto.mesh.xml\");\ngolem.scale(0.5f);\ngolem.setLocalTranslation(200.0f, -6f, 200f);\ngolem.setShadowMode(ShadowMode.CastAndReceive);\ncharacters.attachChild(golem);\n\nDirectionalLight sun = new DirectionalLight();\nsun.setDirection(new Vector3f(-1f, -1f, 1f));\nsun.setColor(ColorRGBA.White.mult(1.3f));\nrootNode.addLight(sun);\ncharacters.addLight(sun);\n\nSpotLight spot = new SpotLight();\nspot.setSpotRange(13f);                           // distance\nspot.setSpotInnerAngle(15f * FastMath.DEG_TO_RAD); // inner light cone (central beam)\nspot.setSpotOuterAngle(20f * FastMath.DEG_TO_RAD); // outer light cone (edge of the light)\nspot.setColor(ColorRGBA.White.mult(1.3f));         // light color\nspot.setPosition(new Vector3f(192.0f, -1f, 192f));\nspot.setDirection(new Vector3f(1, -0.5f, 1));\nrootNode.addLight(spot);\n\nPointLight lamp_light = new PointLight();\nlamp_light.setColor(ColorRGBA.Yellow);\nlamp_light.setRadius(20f);\nlamp_light.setPosition(new Vector3f(210.0f, 0f, 210f));\nrootNode.addLight(lamp_light);\n\nSpotLightShadowRenderer slsr = new SpotLightShadowRenderer(assetManager, SHADOWMAP_SIZE);\nslsr.setLight(spot);\nslsr.setEdgeFilteringMode(EdgeFilteringMode.Nearest);\nslsr.setShadowIntensity(0.6f);\nslsr.setFlushQueues(false);\nviewPort.addProcessor(slsr);\n\nPointLightShadowRenderer plsr = new PointLightShadowRenderer(assetManager, SHADOWMAP_SIZE);\nplsr.setLight(lamp_light);\nplsr.setShadowIntensity(0.6f);\nplsr.setEdgeFilteringMode(EdgeFilteringMode.Nearest);\nplsr.setFlushQueues(false);\nviewPort.addProcessor(plsr);\n\nviewPort.getCamera().setLocation(new Vector3f(192.0f, 10f, 192f));\nfloat[] angles = new float[]{3.14f/2, 3.14f/2, 0};\nviewPort.getCamera().setRotation(new Quaternion(angles));\n\n}\nprotected Geometry makeFloor() {\n    Box box = new Box(220, .2f, 220);\n    box.scaleTextureCoordinates(new Vector2f(10, 10));\n    Geometry floor = new Geometry(\"the Floor\", box);\n    floor.setLocalTranslation(200, -9, 200);\n    Material matGroundL = new Material(assetManager, \"Common/MatDefs/Light/Lighting.j3md\");\n    Texture grass = assetManager.loadTexture(\"Textures/Terrain/splat/grass.jpg\");\n    grass.setWrap(WrapMode.Repeat);\n    matGroundL.setTexture(\"DiffuseMap\", grass);\n    floor.setMaterial(matGroundL);\n    floor.setShadowMode(ShadowMode.CastAndReceive);\n    return floor;\n  }\n}\n```\n. > Can't reproduce the issue.\nI have tried two things at the moment:\n1. take fe057130a4d432f0e153fac3b7d28e42c07dda69 again and debug testDirectionalLightShadow.java again. Shadows were still bad!\n2. take the latest 6d1ab7af6590f3654f5349367ad2e87ed1162709 and debug testDirectionalLightShadow.java. Shadows working!\n\nCould you give some details on your hardware?\n\nSeems strange that it works now but not during some range of revisions. But it is no longer issue for me now, as it works in actual rev.\nI have notebook with: NVidia GeForce GT 555M (driver completely reinstalled when this issue noticed on start of May, 2015).\n. ",
    "OndrejSpanel": "@kwando \n\nif you don't issue a draw call for most of the objects in your scene graph then those objects should probably not be in the scene graph...\n\nOur use case is a very large (spatially, like 10x10 km) scene full of objects with draw calls, but at any given time only a small part of the scene (like 1x1 km) is visible.\nI understand this use case may be not a typical one, but as long as optimizations for this use case do not harm other use case, I think they might be acceptable?\nI understand your concerns about changing public API. We will check what could be done about this. Until a better solution is found and implemented, we can continue developing this in a fork.\n. Thanks, yes, I am aware of this and I am not using it for production, I just wanted the developers to be aware of the issue, as I am not sure how frequent is the testing with Swing - I guess not much, as this does not look like a typical usage. I just reported it here so that it does not stay in the 3.1 release \n. To clarify: I am not requesting anyone to implement this, I intend to try it on my own, I would just be glad if someone more knowledgeable could review my design, so that I do not run into some obstacle I do not currently see.\nI have briefly looked at the OffscreenBuffer implementation and it seems to me it is implemented on the side of jME, not LWJGL - in the class called LwjglOffscreenBuffer. This class is currently using Pbuffer object provided by LWGL, but I do not see it using anything more high-level. I would like to create an alternative FBO implementation, but perhaps I am not seeing something which will prevent me to do so? Why is a hidden window needed for FBO? Is it because we need to create a separate context for FBO? Why - I thought compared to `Pbuffer, which requires a separate context, FBO can be used in the normal OpenGL context.\nThe only  complication I see is the AwtPanel#drawFrameInThread accessing the data from another thread, but I think this is solvable by other means than creating a separate context - glReadPixels can read data from the rendering thread and byte data can be transferred between threads with some basic synchronization, it is not necessary to share the frame buffer itself.\nAn advanced alternative could to be use a texture to share data, in which case it would be perhaps possible to avoid glReadPixels completely and to directly render from the texture into the AWTPanel - but this is something I am not quite sure about, and perhaps this it is not possible at all.\n. ",
    "elect86": "Hi,\nif interested, we are working on a jvm port of Assimp here. We worked recently to make it work with libgdx thanks to a user who needed and cooperated and I'd like doing the same for jme\nDon't hesitate opening an issue for that :). ",
    "Relic724": "pull... request..? eeek! \nLOL, ok. I'll go ahead and learn how to do this strange new thing (for me). Meh, it's something new, but I'll need to learn how to do it eventually, anyways.\n. I'm not able to compile the SDK in Netbeans. I may not have it configured correctly... thus, I can't actually test it.  So, at my level of knowledge, it might not be wise for me to do a pull request.\nI do however have the suggested edits on a quick youtube vid showing the locations and logic. \nThe suggested fix vid: http://youtu.be/QmsNuWu2xaA\nIf you can give me a heads up on how to correct my installation, i would LOVE it. Just tell me the information you need from me for troubleshooting this or handy tips that I might be doing wrong, and I'll be able to try a pull request.\n. Hello hunterboerner,\nI might be able to help guide you, though I'm kind of vague on the flat shaded...\nOn the off chance that you are referring to pixel shader ops for anti-aliasing you might want to look into JME3's TextureFilter.MinFilter.NearestNoMipMap (or NearestNearestMipMap) and MaxFilter.Nearest. That will tend to give color texture maps a pixelated look similar to Minecraft and old PS1 games.\n// probably would look like this..\nTexture2D offTex = new Texture2D(512, 512, Image.Format.RGBA8);\n    offTex.setMinFilter(Texture.MinFilter.NearestNoMipMap);\n    offTex.setMagFilter(Texture.MagFilter.Nearest);\nIf you are looking to alter how light is calculated off of the surface, you might want to try either using one of the preset jme3 material shaders like good ol' unshaded.\nMaterial mat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\n    mat.setColor(\"Color\", ColorRGBA.White);\n    mat.setTexture(\"ColorMap\", osrdiffuseMap);\nIn that material definition, it kind of translates to saying I want 100% lighting (white) on a color map that I am providing called osrdiffuseMap[edit] which is a Texture2D, btw... I don't even know if that's important to mention...[/edit].  Then I just set the material to the geometry and add it to my base node.  Um, other than that you might still want shading and I think there is one that just shades on the vertex level, but not smoothly on the pixel level (kind of like FF7 for ps1 where you can easily see vertex angles on the shading.) I don't remember which preset material it's called though.  \n[edit]: Note: I haven't worked with the TerrainQuad class yet, so I don't know if you can handle it like a geometry... This tip may be completely useless. In which case -> Doh! \nHope this helps,\nCharles Anderson\n. @hunterboerner Ok, so lighting it is then. It might be easy to import from blender with the material that you are wanting... but... if you would like to affect the mesh procedurally, there will be an amount of code written that may approach \"from scratch\" to work with it. \nSo, with that said, I'll throw out some more tips that might help you along with code:\n1.I usually got confused when folks bandied about terms that had different meanings when used with a different graphics engine setup.  So, a material in blender is a shader in opengl is a material ->material definition with options activated->selection of vertex/fragment opengl shader with supplied data linkups in jmonkeyengine is a texture in DirectX... erg.... AKA. they picked a lot of words that overlapped when they individually made the engines. It makes sense when we figure out what each term means for the specific engine, and throws us for some \"confuzzlement\" if someone speaks with the lingo from another.  For these tips I will be talking on (JME3) materials.\n2.to get the lighting that you desire for your game, make note of the fact that you will be working with (OpenGL) shaders ultimately.  A (Blender)Material might be translated(<- I've been making Netbeans code so my memory is fuzzy, LOL And I'm not a core member, just someone who has worked with it.) to a (JME3)Material and put it in the Materials folder as a .j3m file... which will probably reference a (JME3)Material Definition .j3md file in the MatDefs folder... which will probably reference (OpenGL)Vertex Shader and (OpenGL)Fragment Shader as .vert and .frag files respectively in your Shaders folder.  And all of those files produced are ultimately, OpenGL. yay! That's the core concept to help you along on getting your lighting correctly \"awesome\". If you want to look at the code behind the JME3 presets, you can view the files that are currently under construction here at Github:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/tree/master/jme3-core/src/main/resources/Common\nor in the jme3-core import library for your working installation:\n\n3.yes, you can \"edit\" the coords of a mesh \"on the fly\" procedurally.  Just remember that a (JME3) Geometry is a sublcass of (JME3) Spatial containing its own (JME3) Mesh. (JME3) Material, and (JME3) Bounding Volume. You would probably be focusing on the (JME3) Mesh which contains the (JME3) VertexBuffer, which contains the coords of your vertices.  From there I can only think that you might use the cloneForAnim() method, adjust the coords of the clone and \"swap out\" meshes by queueing it up into the graphics handling thread.  I have not worked too deeply with JME3's threading model so I can't refer you to the proper thread manager class, yet.  I do know that you cannot work on memory locations that are \"locked\" by the GPU. You can prepare a new memory location with altered data and switch the GPU over to the new location when it goes to prepare the next frame, however.  \n4.As far as the Mac issue... I have windows, I'm not core. I just know that I d/l'd my installation from:\nhttp://hub.jmonkeyengine.org/downloads/\nand I noticed that they had an SDK available for mac, but that's about all the help that I can be... so hand off to someone else on that one...., sorry.  \nHope that helps,\nCharles Anderson\n. ah, I think I know what you are meaning by flat shading, now. \nI've worked with Blender enough to get the gist of what you are wanting now. By (Blender?)flat shading you might be referring to the way that surface normals are handled. As an example, lets try refining this on an icosphere, a mesh that kind of resembles a soccer ball -ish shape.  With flat shading in Blender, you can see the edges clearly because (Blender)normals are calculated per (Blender) Face so that each (Blender) Face responds to the light on it's own.  It looks like a good ol' icosphere with flat sides. With smooth shading in Blender, the surface normal becomes interpolated to the (Blender) vertex normal by averaging all the (Blender) Face normals for faces that share the same vertex. Then that is linearly smoothed across a face for all vertex normals in Blender's shading system.  The result is something that might look like a sphere if not viewed too closely. It works this way in Blender, mainly because I don't think they wanted to store normals, in the first place.\nAnd, you are correct in your assumption that JME controls smooth/flat shading, but incorrect that it's not the shaders.  When you assign a material to a geometry in JME, you are also assigning the shader used to calculate the display of the underlying mesh. This isn't immediately apparent, but you can see the relationship when you look at how Mesh and it's underlying VertexBuffer[s] of the various VertexBuffer.type[s] will be shipped off to the associated Material(which boils down to .vert and .frag) for rendering.\nSo, my final tip that I can think of, is your ultimate solution to do what you will want is that you will handle your surface normals (per face) rather than JME3's default (per vertex with linear smoothing). Yes, JME3 handles the data underlying what is shaded: The basic data of coords(vertices), UV position that the vertex has on a texture2D = (Blender) UVMap, Vertex Normals (Not Stored in Blender), and a lot of other things that you can see in the com.jme3.scene.VertexBuffer.class. \nbut\nIt is the shader you choose/create that displays how all that information is displayed in your graphics. The shader uses/ignores (JME3)VertexBuffer[s] and (JME3)Texture2D[s] to calculate/interpolate the color per pixel on the screen. ... whew!\noh... and JME3 also handles shading by linking shader to mesh when you assign your material, if that makes any sense.\nso, get ready to go beyond default settings. Your next step in the learning curve will probably to learn how JME3 passes the vertex data (and other buffers) over to the shaders (which starts with .j3m and progresses all the way down to .vert and .frag <- all of which are viewable in a normal text editor) and be ready to learn OpenGL to create the shader for \"the look\" you want.  You'll be able to do it, and just be ready for brain sprains on the math. LOL.\n[edit] TerrainQuad might be assigning these materials->shaders in it's code, in which case, it's time to extend the class and override some methods with your own material/shader assignments. or, you can create your own class, as you like. [/edit]\nGame On,\nCharles Anderson\n. haha, lol. love the cartman!\nThat would be the classic Left Hand vs. Right Hand coordinate system question. the search terms for that question could also be called Clockwise vs CounterClockwise Culling.  \nDefault for JME3 is Clockwise Culling(eg it displays all triangles that are counterclockwise), if I remember correctly.  That said, it can be set either way that you like by something similar to:\nmyGeometry.getMaterial().getAdditionalRenderState().setFaceCullMode(RenderState.FaceCullMode.Front);  //or .Back for CounterClockwise Culling or .FrontAndBack if you want to look back and see the back side of what you just went through.... lol. [edit] oops I got it backwards on the cullMode Statement, it is Culling, after all, the default is .Back for culling all clockwise triangles, .Never displays both sides[/edit]\nso your vertices order for default behavior would properly be...\n(1,4,5),(1,5,2),(2,5,6),(2,6,3),(4,7,8)....etc. (always counter-clockwise) to display. if the order becomes clockwise, then it becomes culled. [edit] and for the purpose of display, (1,4,5)  is similar in behavior to (4,5,1) is similar to (5,1,4) [/edit]\nGame On,\nCharles Anderson\n. That code looks to be where they make an allowance for the dynamic vertex adjustment you were wanting for your project.  \nWhat you are looking for are (JME3)Material assignments. It's the shader code that can use/ignore these normals for the look you are wanting.\n. Just modify the lighting shaders.\n. Indeed, this is a Forum type topic.\n. [edit] and poof, but yeah, try again is all i can suggest [/edit]\n. @erlend-sh oh, and I'm tossing my hat into the ring for assisting with the forum after the server reset incident. [edit] [/edit]\nI thought it(the forum) would be cleared up by now, but it seems to be taking a bit. I'll help you out if I can be of assistance to speed the recovery. I know the whole php/mySQL/javascript/css pipeline from previous web projects.\n. I guess this is where we make the conversation at on this site? I know that I receive emails on the other pull requests n Merges ...\n. I am just needing anyone from core to say anything.  I don't know if this shows up for your viewing pleasure due to instances where I think that I am doing something... and it's in the wrong place... \nI may have miscommunicated my purpose... This is to establish, to myself, as to how to properly work with Github. so that I can help out in the future....\nSo... \nHello, is anyone out there?\n. Ok! Thanks Kirill! Closing... this ... then... Where's that button?\nglarg .... oh... there it is.\nGame On!\nCharles\n. I didn't do It! I swear! LOL.\nI was burling through my e-mail and saw this. I made Darkmonkey with skinning Netbeans in mind, and I will say there is still some coding to be done. It could be made to work with the opening screen for a JME game, as well, I suppose.  \nA lot of problems come up with Dark Themes, because the Foreground color becomes White(ish) and the Background becomes Black(ish).  It looks to be the case, here. It does not look like the background of the jPanel is drawing it's color from the Background as supplied by the FAC/LAF plugin. Is it taking it's color from somewhere else?\nRegards,\nCharles \n. https://github.com/jMonkeyEngine/jmonkeyengine/blob/2ca55c8b3a37ec806e4512d8aecf43dbb156ccd2/jme3-desktop/src/main/java/com/jme3/app/SettingsDialog.java\nah... this might be it?\nLine 291+\n        /*\n        * init creates the components to use the dialog.\n        /\n       private void createUI() {\n           GridBagConstraints gbc;\n```\n       JPanel mainPanel = new JPanel(new GridBagLayout());\n    try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception e) {\n        logger.warning(\"Could not set native look and feel.\");\n    }\n\naddWindowListener(new WindowAdapter() {\n\n    @Override\n    public void windowClosing(WindowEvent e) {\n        setUserSelection(CANCEL_SELECTION);\n        dispose();\n    }\n});\n\n```\nSo, I don't have DarkMonkey attributed with the System/Native boolean enabled... Is it being overwritten by the true Local/Native LAF?\n. ",
    "jdeyton": "Thanks! Keep up the good work, guys/gals!\n. ",
    "hunterboerner": "@Relic724 yeah, we still want there to be lighting. I guess it may be easier to build the terrain in blender with flat lightning and then import it into JME. If I do that, do you know if I am able to edit the coords of the mesh verticies after the fact (for mutable terrain and stuff)?\n. As a side note, the JME SDK won't open on mac. It gets stuck at Loading Modules.\n. Ok, thanks. When I looked at the JME forums about flat shading, they were always talking about how smooth shading will be used automatically because there are shared vertexes. I don't know what that means, but from what I understand it's not the shaders that are controlling smooth/flat shading, it's JME.\nDoes that make sense?\n. Whew. Looks like I may have to push more of the visual stuff back on my todo list.\nA somewhat unrelated question: I'm having some trouble understanding how the indexes for a mesh work. Say I have a 3x3 heightmap that I want to turn into a mesh, what order do I connect the vertexes in? Would it be 1,4,5, 1,2,5, 2,5,6, 2,3,6, 4,7,8, 4,5,8, 5,8,9, 5,6,9? (Image of what I'm talking about below)\n\noh, and\n\n. Ok, so it looks like the TerrainQuad ends up telling the terrainpatch to calculate new normals in this method:\n```\n/**\n * recalculate all of the normal vectors in this terrain patch\n */\nprotected void updateNormals() {\n    FloatBuffer newNormalBuffer = geomap.writeNormalArray(null, getWorldScale());\n    getMesh().getBuffer(Type.Normal).updateData(newNormalBuffer);\n    FloatBuffer newTangentBuffer = null;\n    FloatBuffer newBinormalBuffer = null;\n    FloatBuffer[] tb = geomap.writeTangentArray(newNormalBuffer, newTangentBuffer, newBinormalBuffer, (FloatBuffer)getMesh().getBuffer(Type.TexCoord).getData(), getWorldScale());\n    newTangentBuffer = tb[0];\n    newBinormalBuffer = tb[1];\n    getMesh().getBuffer(Type.Tangent).updateData(newTangentBuffer);\n    getMesh().getBuffer(Type.Binormal).updateData(newBinormalBuffer);\n}\n\n```\nWhat do I need to change to get the right normals needed for flat shading (or am I looking in the wrong place?)?\n. So do I need to mess with the normals or just modify the lighting shaders?\n. I can't because the forum won't send me a confirmation email :{\n. That would be helpful. I know Charles said he could help me if I emailed\nhim but two minds are greater than one.\nOn Sun, Jan 4, 2015 at 5:57 AM Erlend Sogge Heggen notifications@github.com\nwrote:\n\n@hunterboerner https://github.com/hunterboerner still having problems?\nI've found your user on our forum. If you'd like I can manually approve you\nwith a temporary password.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/205#issuecomment-68630384\n.\n. \n",
    "wcomohundro": "I am just learning jMonkey and poke into odd corners a lot.  In this particular case, I was trying to open files from within jME3-testdata.jar\nI can open other types of files from within a jar.  Are .j3m and .xml files different/special ?\n. If I had not seen the null-pointer exception, I would not have reported this as a bug.\nI would not expect a simple double-click anywhere in the IDE to throw an internal exception.\nThanks for the quick response.\n. ",
    "simon-heinen": "I will check if I can edit the default Eclipse preferences for the auto formatting\n. well looks like its a common problem http://stackoverflow.com/questions/407929/how-do-i-change-eclipse-to-use-spaces-instead-of-tabs ;) I will push an updated version\n. @gouessej Yes you are right about the separation into individual commits, I initially did not plan to commit my changes at all so I only have this final version with all the cosmetic changes by the auto-formatting and the actual refactoring process is not understandable anymore. I will check if I have later some time to go through your questions at least and answer them.\nBtw is there a jme-formatting-rules file for Eclipse I can download?\n. ",
    "NemesisMate": "Can the UUID serialization be added too on the BinaryOutputCapsule?: \n. I understand your point of view. I didn't think on the need of upgrade the clients for have this working and the \"high-performance networking situation\" issue as for my case, actually, UUIDs are the best way. However, adding it to the BinaryOutputCapsule would be possible?\n. You are right, it's not the most efficient way, but my \"best\" is based on some other thoughs. Maybe, it would be better to use a simple double for it and store on disk the last generated ID but this may cause some other troubles and complexities when possibly doing a balanced server for having this ID synchronized. I'm not experienced on creating game servers so I think is easier and can save me time and trouble if I use UUIDs rather than longs (my networking traffic and disk storage is not really critical by the moment).\nAbout adding this, I proposed just because I didn't really know your \"minimal set of primitives\" support philosophy ;).\n. It's true -O-, I can't believe I missed it.\n. Link to the post talking about it: http://hub.jmonkeyengine.org/t/fixed-bettercharactercontrol-flickering-when-not-moving/34650/2?u=nemesismate\n. Is a fix of the perceived Result. I tried to look at the bullet code but I'm not skilled enough at the moment (and neither have time to get that skill) to ensure is working like that. However, I made a few tests (simple, can't ensure at 100%). However, I'm using it in my game and works fine :+1: \n. Talking about assumptions, isn't there a way to know which is the intended order by asking bullet people? (I don't know how feasible is this)\n. Yes, I had the same wonder but without more knowledge I am reluctant to change it (that's why I asked here at first place)\n. I know all that theory, what I don't know is why it uses a LinkedList in first place. If the only reason is because of it was was just adding/removing, then I suppose it must be changed now (hm... or changed only for the sorting case?). Maybe changing it depending on the case would be the better but at cost of obtaining different list types on the different methods (with/without sorting).\nSo, the different solutions would be:\n1. Change LinkedList by ArrayList in both cases (the rayTest and the rayTestRaw).\n2. Change to ArrayList just for the rayTest case (sorted).\nIf you are more eager to one of them just say it and I'll adapt it.\n. You are right, Julien, I think I was a little careless, thanks.\n. Is this still being an issue?, the example link is broken. I'm not sure if the problem you mention (the selection issue) is a jme3 problem or just a an sdk one.\nHowever, the workaround you mention isn't really a workaround but the way to proceed if you want the rotations to be \"applied\" (as the name suggests) when imported.. When talking about the +/- 1 cm I guess you are talking about the existing code (I didn't touch it). About the lack of the sqrt(), I don't have any clue (and that is why I just looked to other open source code and see what others think. And so, I saw: https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/math/Vector3.java), where it is without the sqrt. Well, it is true that they have a much smaller number as error margin.\nWhy don't lower it a little bit?. Agree too, I had to manage this exception all the time when printing the material for debug, is quite annoying (All the times I get it I think I have to change it but there it stills). Ok, I'll find time to post a sample model. However, you have more information in the commit fix.. You can find a sample model here. If you convert it to .j3o (using the importer) with the alpha influencer enabled you'll see how it also set the texture as alpha map (and so, adding transparency where it doesn't - the red part).\nHowever, if you disable the influencer the conversion is done correctly (but in blender isn't seen as it must).\nMy fix solves this problem.. Ok, I missed the var declaration. Fixed now.. To check the issue with this one you can use the example .blend I submited for this other issue.\nYou can see that when you generate it with the blender importer, a gray border is added to the generated texture.. Oh, I made it on the 3.1 branch with intention because is where I tried it (and it is the version I use). But ok, I'll do it.. Done.. Oh!, of course, I just saw the issue on github and decided to post the solution I'm using for a LemurBatchNode (gui node's panels hasn't got any normals) but yeah, I'm agree it can be done better. :P. ",
    "hurzl": "The forum is hardly readable because it has almost the same colour for back- and foreground.\nBranch 3.0 doesn't have a build.gradle. And I get an error here\n..../engine/src/networking/com/jme3/network/kernel/udp/UdpEndpoint.java:130: error: exception IOException is never thrown in body of corresponding try statement\n    [javac]         } catch( IOException e ) {\n    [javac]           ^\nWhen I run gradle build on master I get changed files like project.xml, project.properties. Shouldn't these probably be taken out from git?\nWhat do I have to run after I have built with gradle?\n. 1.8\nSo it is better to use master.\nWhat is the svn version referred to here http://wiki.jmonkeyengine.org/doku.php/jme3:build_from_sources ?\nAnd what about native libraries? I get errors about natives when I ant run\nAnd I don't want to cross-build windows binaries ...\n. These are issues. And if you don't want to get emails you can set this in github.\n. What's to fix in my browser?\n. Yes, that's what I mean by unreadable.\n. I wonder why usually text is black on white or white on black to get the best contrast possible. There might be a reason for that. Maybe black ink was invented for readability.\nMy monitor is at a human level. Setting it so that I can read 171 on 56 is totally inhuman.\n. ",
    "jayfella": "Please - I'm getting email bombed and it has absolutely nothing to do with the engine itself. If you have any questions, please use the forum. This is not the place to do so, and I ask politely that we please continue the discussion there.\n. Just to let you guys know, I put the information on how to contact the server guys on the google docs sheet if I am unavailable.\n. I would appreciate removing the presumed resolution and to display the settings page by default before merging.\n. related: https://hub.jmonkeyengine.org/t/solved-problem-with-switching-to-jbullet-in-jme-3-1-alpha-5-sdk/35698. Where did you find the link?. No. We are aware. Sorry for the inconvenience. It will be fixed asap.. ",
    "rainmantsr": "Hmm - actually I am not 100% sure about it. I just wrapped it;) I think it reuses the results form the broadphase to make a faster sweep/raytest. Bullet uses it internally for the KinematicCharacterController. In my tests it has been faster than the sweepTest against the dynamicsWorld, but not as fast as I hoped;) I am currently working on a small physx wrapper prototype to check if this gives me the performance i need...\n. ",
    "Retzinsky": "I did initially make it part of render state but there was an issue with text. Because the text pages share materials if they're using the same font, if clipping was set for any piece of text it was set for them all with some highly undesirable results. Since I wrote it for a UI project that was a big issue.\n. http://hub.jmonkeyengine.org/t/issues-with-changing-anti-aliasing-samples-after-application-start/34380/3\n. ",
    "grizeldi": "@john01dav does this still hapen in the latest version?\n. This has been fixed in PR #427.\n. We're now at blender 2.79. Why is this still open?. Which of those have been fixed so far? I might see if I can help later this week.\n. So today I managed to fix the most trivial (welcome to jme3.0) one. PR follows as soon as I figure out how to make a build of SDK and test it out.\nFor really complex stuff you can't really count on me because I lack of programming experience and more important: time.\n. Just checked the documentation generator and it also seems to be updated to the \"now not so new anymore\" wiki structure.\nWith that I think #3 is done when/if my PR is accepted.\n. I mean number 3 on the list not issue #3... Darn github do you have to auto detect issues -.-\n. Interesting. I managed to make this work not too long ago on 3.1 stable without patching the engine, can't remeber how though.. So why is this still open?\n. I'll try to figure out where the problem lies.\nDon't expect too much from a beginner though :wink: \n. @Dokthar I know. Checked out the classes yesterday, added some debug printlns, but I still didn't find the void that is called when you rotate something...\n. I had this problem quite some time ago. See here:\nhttps://hub.jmonkeyengine.org/t/cloning-bitmaptext-3-1/36824. Someone move this issue to the sdk repo please.. Also fixed right trigger being useless because it was mapped the same as the right stick.. Still there for me. @midikiman connection for the welcome screen times out because the server for it went bananas a while ago. Fixing missing java fx in openjdk on linux is actually just one terminal line:\nsudo apt-get install openjfx\nAnd it works just fine.. The original report comes from linux.. Sadly I can't. Ubuntu here.. Yup, it was me reporting it to MeFisto ;P\n. @SpaceboyRoss01 is your gamepad by any chance xbox based?. It's out now.. See here https://hub.jmonkeyengine.org/t/is-anyone-else-seeing-broken-link-to-wiki/. There were attempts to add the gradle plugin to the sdk and have default template based on gradle, but that didn't work out, don't exactly remember why anymore. Maybe @MeFisto94 can tell you more.. Can confirm, happens with Slovenian QWERTZ keyboard too.. ",
    "quazi-irfan": "info: jMP menus look fine on Ubuntu 14.04 with Unity.\n. The jME forum is a better place to ask this question.\n. It doesn't happen to me. I am posting with screenshot just to verify if I am doing the right thing.\n\nHere is the log,\nMay 26, 2017 2:23:02 AM java.util.prefs.WindowsPreferences <init>\nWARNING: Could not open/create prefs root node Software\\JavaSoft\\Prefs at root 0x80000002. Windows RegCreateKeyEx(...) returned error code 5.\nMay 26, 2017 2:23:05 AM com.jme3.system.JmeDesktopSystem initialize\nINFO: Running on jMonkeyEngine 3.2-v3.2-prealpha-sdk1-29\n * Branch: v3.2-prealpha-sdk1\n * Git Hash: a64175c\n * Build Date: 2017-03-22\nMay 26, 2017 2:23:06 AM com.jme3.system.lwjgl.LwjglContext printContextInitInfo\nINFO: LWJGL 2.9.3 context running on thread jME3 Main\n * Graphics Adapter: C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\nvltwu.inf_amd64_0221ce4ec0827f74\\nvd3dumx,C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\nvltwu.inf_amd64_0221ce4ec0827f74\\nvwgf2umx,C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\nvltwu.inf_amd64_0221ce4ec0827f74\\nvwgf2umx,C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\nvltwu.inf_amd64_0221ce4ec0827f74\\nvwgf2umx\n * Driver Version: 21.21.13.7654\n * Scaling Factor: 1\nMay 26, 2017 2:23:06 AM com.jme3.renderer.opengl.GLRenderer loadCapabilitiesCommon\nINFO: OpenGL Renderer Information\n * Vendor: NVIDIA Corporation\n * Renderer: GeForce GT 750M/PCIe/SSE2\n * OpenGL Version: 4.5.0 NVIDIA 376.54\n * GLSL Version: 4.50 NVIDIA\n * Profile: Compatibility\nMay 26, 2017 2:23:06 AM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio Renderer Information\n * Device: OpenAL Soft\n * Vendor: OpenAL Community\n * Renderer: OpenAL Soft\n * Version: 1.1 ALSOFT 1.15.1\n * Supported channels: 64\n * ALC extensions: ALC_ENUMERATE_ALL_EXT ALC_ENUMERATION_EXT ALC_EXT_CAPTURE ALC_EXT_DEDICATED ALC_EXT_disconnect ALC_EXT_EFX ALC_EXT_thread_local_context ALC_SOFT_loopback\n * AL extensions: AL_EXT_ALAW AL_EXT_DOUBLE AL_EXT_EXPONENT_DISTANCE AL_EXT_FLOAT32 AL_EXT_IMA4 AL_EXT_LINEAR_DISTANCE AL_EXT_MCFORMATS AL_EXT_MULAW AL_EXT_MULAW_MCFORMATS AL_EXT_OFFSET AL_EXT_source_distance_model AL_LOKI_quadriphonic AL_SOFT_buffer_samples AL_SOFT_buffer_sub_data AL_SOFTX_deferred_updates AL_SOFT_direct_channels AL_SOFT_loop_points AL_SOFT_source_latency\nMay 26, 2017 2:23:06 AM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nWARNING: Pausing audio device not supported.\nMay 26, 2017 2:23:06 AM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio effect extension version: 1.0\nMay 26, 2017 2:23:06 AM com.jme3.audio.openal.ALAudioRenderer initOpenAL\nINFO: Audio max auxiliary sends: 4\nMay 26, 2017 2:23:10 AM com.jme3.material.Material checkSetParam\nWARNING: Material parameter being set: Texture with type Texture2D doesn't match definition types TextureCubeMap\nMay 26, 2017 2:23:10 AM com.jme3.material.Material setTextureParam\nWARNING: The texture Textures/Sky/St Peters/StPeters.hdr has linear color space, but the material parameter Texture specifies no color space requirement, this may lead to unexpected behavior.\nCheck if the image was not set to another material parameter with a linear color space, or that you did not set the ColorSpace to Linear using texture.getImage.setColorSpace().\nMay 26, 2017 2:23:10 AM com.jme3.scene.plugins.ogre.MaterialLoader readTextureImage\nWARNING: Cannot locate Models/Sign Post/signpost_color.jpg (Mipmapped) for material Signpost/SOLID/TEX/signpost_color.jpg. jME Forum is a better place for troubleshooting questions.. Solved with PR #655 . @jseinturier would consider adding the feature to run VR application without having VR headset physically attached to the system?. Are you sure? I haven't tried harder. But @jseinturier said it in the forum that there is no 'HMD off' mode.\nLink : https://hub.jmonkeyengine.org/t/can-not-run-vr-example-initializing-openvr-system-failed/38702/4?u=iamcreasy. What version of windows you are using? You can temporarily try disabling User Account Control(UAC) feature on Windows. Here are the details.. Try a couple more. On my computer java -version yields the following,\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\nBut on your error log is says you are using an older versions or JRE and JVM,\nJRE version: Java(TM) SE Runtime Environment (8.0_111-b14) (build 1.8.0_111-b14)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode windows-amd64 compressed oops)\nTry updating to latest JRE and JVM. Also make sure you are running the installer as an administrator. (Right click > Run as Administrator). Can you post the new hs_err_pidXXX. Also, please post the output of your 'java -version'.\nEdit : You can also try downloading the jmonkeyplatform.zip from sdk/release. Unzip and you will find the executables under bin folder.. Probably it's a NetBeans issue, not a jMP issue. I tried to find the solution and here is what I've found so far, 1, 2 and 3.. I can reproduce this error with 3.1.0-stable and blender 2.78c(Win 64). But I am loading the blend file instead of converting it to j3o.\nI've narrowed the issue down to this following piece of code in Properties.java file. If custom property is 1.1, Value is NaN.\ncase IDP_DOUBLE:\n                int doublePart1 = ((Number) data.getFieldValue(\"val\")).intValue();\n                int doublePart2 = ((Number) data.getFieldValue(\"val2\")).intValue();\n                long doubleVal = (long) doublePart2 << 32 | doublePart1;\n                value = Double.valueOf(Double.longBitsToDouble(doubleVal));\n                break;\nI'll look more into it tomorrow.. @OvermindDL1 I haven't had the chance to look into it any further. But thanks for the reminder.. >  start color, end color and midcolor.\n@empirephoenix Must be a cool one to see :). @pspeed42 Trying to understand the workflow here. Nehon merged the commit on Feb 7th, and you just changed the tag of a merged pull request today. But adding the tag doesn't revert the merge commit.\nIf the merge commit is not acceptable for 3.2 - shouldn't we revert the merge commit in addition to adding the 3.3 tag?. @stephengold Since this is a not a breaking change - shouldn't it be on 3.2 release?. I was thinking I just need to add a very simple getter that returns the protected Spatial in both GhostControl and RigidBodyControl classes.\nBut to see if that's the only thing I needed to do - I checked the other classes in the control folder, and I've found that none of the classes in control folder has getSpatial Method.\ngetSpatial is not only missing in GhostControl and RigidBodyControl class, but it was missing in all classed in this folder: https://github.com/quazi-irfan/jmonkeyengine/tree/master/jme3-bullet/src/common/java/com/jme3/bullet/control\nInstead of getSpatial method, they have other getter methods. Such as, getSpatialTranslation and getSpatialRotation.\nThoughts?. VehicleControl is not a subclass of RigidBodyControl, but it implements PhysicsControl.\nI am supposed to add getSpatial() to the following classes,\n- GhostControl extends PhysicsGhostObject implements PhysicsControl, JmeCloneable\n- RigidBodyControl extends PhysicsRigidBody implements PhysicsControl, JmeCloneable \n- AbstractPhysicsControl implements PhysicsControl, JmeCloneable \n- CharacterControl extends PhysicsCharacter implements PhysicsControl, JmeCloneable\nNote that all 4 classes extends PhysicsControl interface. So would it make more sense to add getSpatial() in the super interface?\n. Should I go ahead and add getSpatial() to the 4 classes?. Pull Request #1041 submitted with requested changed.\nAre we going to remove getSpatial method from these 4 classes and add it to PhysicsControl interface for 3.3 release?. I thought, you would not need it, if getSpatial is marked as default method in the interface.. Default method was added in Java 8. You can have a method body in an interface, but you have to mark it default. Its optional for a class to implement the default methods.. Yes, makes sense. Thank you for the explanation.\n. I was wondering why Travis didn't trigger in this pull request. I was under the assumption that Travis is triggered with all pull requests.. I usually see the green notification saying 'all checks have passed' in each pull request(see screenshot), but I do not see it with this one. Is it seen by only those who submitted the pull request?\n\n. @stephengold What other classes need testing coverage?. It there a way to write it more clearly? I am not sure if it's the best way to write it.. Then perhaps the doc should say, returns the spatial the control is added to, or null if control is not attached to a spatial yet.. Probably moving this statement in the else clause would make the code more readable?. ",
    "jonnius": "I am on Ubuntu Gnome 15.04 with Gnome 3.14.\n. I solveld the problem. According to http://wiki.jmonkeyengine.org/doku.php/sdk:troubleshooting the setting jdkhome=\"jdk\" should have been a comment by default, but it was not. I set an # to make it a comment and now it is working fine.\n. So the problem is not solved. But a workaround is to use system-installed JDK, in my case it is OpenJDK 8.\n. No, it is not. Changing the LAF does not solve the problem.\n. ",
    "riccardobl": "The pbr's fragment uses the vViewDir that is missing, so I thought that maybe it was accidentally removed as result of a refactoring and the result of this fix looks fine to me so I erroneously thought it was ok...\nI think I will leave the task to rewrite the parallax code to someone who knows it better.\n. Ok, I've added an issue as you asked https://github.com/jMonkeyEngine/jmonkeyengine/issues/280\n. amd r9 270x with catalyst drivers on linux.\nI just noticed they released a new version of them, i will update to it and see if something changes .\n. Sorry for the delay.\nI am still investigating, but I think I've found the problem: the scene (made w/ blender) was actually over bright but when the pbr's resulting alpha is 0, the additional light is somehow removed (?).\nTell me if that makes sense to you, because I don't know how lights are managed in the engine.\nEDIT: It happens only when you have multiple lights\nThis is the testcase https://gist.github.com/riccardobl/8d0163a9caac077f15c5\n(I can't share the textures because of the license)\n. Initially i thought to do in this way, but then i realized that editing the ZipLocator has more sense, since '/' should logically represent the root of the filesystem, and all the locators should have the same behavior for developers in order to be easily interchangeable. \n. Ok, i wasn't aware of that. \nI solved with another approach.\n. > Whats the purpose of sharing the material?\nBatching, instancing, everything that need shared materials to work.\n\nand this change will cause all instances of the material to be changed when you change one (e.g. you want to tint one model blue and the other red)?\n\nThis is the expected behaviour for shared materials, if you don't want it, just clone your material like you would do in any other software.\n. > Batching and instancing look for the actual parameters\nThis is not the impression i have  from the code....\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java#L88\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/tools/java/jme3tools/optimize/GeometryBatchFactory.java#L314\n. See https://hub.jmonkeyengine.org/t/solved-are-gimpact-collision-shapes-broken-in-bullet-native/35691/4?u=riccardo\n. Edit: Oh, ok i was wrong, nvm.\n. Yeah, good idea.\nI've updated the pr and applied the change also to jbullet.\n. 15.20 are the latest drivers available for my card in linux.\nThis is the test case: https://gist.github.com/riccardobl/38de2113eb379f04d7880be85165a4f4\n. It turned out being caused by the Post/PreShadow techniques lacking of tessellation shader.\nI close the issue myself, since it's not related to jme.\n. > Can we still use bulletAppState.setThreadingType(BulletAppState.ThreadingType.PARALLEL);\nYes, it has nothing to do with that. \nPARALLEL spawns a thread for each physics space in java and use them to call the update (while SEQUENTIAL does everything in the jme update loop), the code i removed was there to use a function of bullet<2.83 that allows to use multiple threads to resolve the collisions of a single physics space, but there is no way to enable this neither in the current release.\n\nit seams bullet uses experimental Bullet 3 OpenCL now. Is it possible to support it with JME new OpenCL wrapper ? \n\nIt should be possible to use it without any wrapper, since we don't need to call anything from java.\nBut i don't know if this would be a good idea, since opencl drivers are not really well standardized yet...\n. It doesn't. Afaik there is no official way to enable the old threading mode, there are some forks that reintroduce it though.\nFor us it doesn't change anything, since the multi threading has never been enabled in jme.\nI think the only thing we could do would be enabling the opencl support, but as i said the drivers are 'meh' .. so is it better to have physics that works  slow for everyone or that works really fast for some but  slow for most?\n. I added the -Ofast argument to the build script (info here: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html ), and i disabled  _FORTIFY_SOURCE that is on by default in latest Linux distros and enables some sort of protection for buffer overflow, but at the price of performances.\nThis resulted in a huge performance boost, try  it.\nI hope there won't be any problem if I aggregate these changes to this Pr.\n. True, i forgot it... added now.\n. Done.\n. Code and output here: https://gist.github.com/riccardobl/60673730174b3af3cd1a2b701bb76878\n. My bad, i was using an outdated build, the issue has been fixed since commit: 85c119c13249139ae561c3aaeeaa38882bfb76f8\nFrom the commit message it looked something mac specific, so i didn't bother updating.\n. Oh, yes, i forgot: https://github.com/jMonkeyEngine/jmonkeyengine/blob/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-core/src/main/java/com/jme3/opencl/OpenCLObjectManager.java#L98\nI'm not sure that an hybrid approach would be good either.\nMy understanding is that there are two ways to deallocate a native object in this implementation:\n\n\nBy manually deallocating the object like you would normally do in opencl\n\n\nBy letting java's gc handle the deallocation\n\n\nthe gc abuse in OpenCLObjectManager is used to force the gc to deallocate the java pointers (and so their native counterpart) ,for developers that use the second method, that otherwise wouldn't be deallocated because the actual java object seen by the gc is too small to trigger the deallocation.\nThe issue i see in this is that you have no benefit in using method 2.\nImo native objects should be deallocated only manually and the deallocation on gc should be considered as last resort for developer who forget to properly deallocate the memory. Trigger the gc constantly to make up for who forgets to deallocate large objects is imo not a good idea.\nAlso this is not something like aparapi that is supposed to work transparently, you have to know opencl and if you do know opencl chances are that you also have an idea about memory deallocation.. Yes, but i don't know if the rest of the code relies on this, we could end up with objects that can't be deallocated before the natural gc execution... Let's see what @shamanDevel has to say before.. Well this is another problem that I assume is handle correctly in the code. But here we are talking about native memory on the gpu, the direct buffer is used to send the data from java to the cl api, then the cl api uploads it to the gpu vram (at this point you can free the native buffer), then when you have finished using it you should tell cl to deallocate it, the cheat here is to add the deallocation code to the finalize method of the java object that holds its pointer, so that the deallocation is triggered by the java gc when there are no more references to it and when the gc is called... and that's the problem, the gc is not called immediately if you don't call System.gc / Runtime.gc manually.\n. If I allocate an object at the beginning of the application and deallocate it manually at the end of it, wouldn't this cause the gc to be called every 10 frames in the meantime? \nI didn't read the full code, but that's my understanding, only if you deallocate in the same frame the gc is not called.. Ok, i thought all objects were registered automatically. Then it's a non issue i guess, you just don't use the object manager and you are fine.. Nice. I think it might be better to rebase it in a single commit if possible.. Yes indeed, getUserObject in com.jme3.bullet.control.* classes could just return spatial. \nIt used to be set from setSpatial, but the new cloning doesn't call it anymore, i wonder if a similiar issue could affect other controls that relies on the old behaviour \ud83e\udd14 . Correct me if i am wrong, but this patch will pass the current instance of userObject to the clone, what we want in this case is actually the instance of the cloned spatial to which the new cloned control will be attached.\nThis is how i'm currently fixing it in my fork https://github.com/riccardobl/jmonkeyengine/commit/c38569ca6f7ea536af949d05ec83db8980917d1c. Done. I've rewritten the code to make it cleaner and to prevent line 201 from logging npe if the task was cancelled and the queue over.\nhttps://github.com/riccardobl/jmonkeyengine/blob/3e8152c3ec64eceef49b3b41dc9daf915b9f6f8d/jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java#L196-L204. PR has been merged, so i think it's time to close this.. I moved the flag up to line 725, but on second thought this was going to skip the position update for nodes that do not use velocity from translation... \n\nIt's seems that the original issue is just a clonning issue.\n\nSee rows 732 and 738 in the original code, if velocityFromTranslation is enabled, the first update will always turn velocity into NaN.\nI've made some changes, it should be fine now.. I think the null check can be removed, tbh i don't remember if there is a reason for it to be there in the first place.. I've tested this with a newer build of bullet (from their master branch) and nothing changed.\nIt seems that the issue occurs when you try to create a constraint between a dynamic and static rigidbody.\nTry to apply this diff to your test\n```diff\n@@ -107,7 +107,15 @@\n         float size = 0.1f;\n         Vector3f halfExtents = new Vector3f(size, size, size);\n         CollisionShape shape = new BoxCollisionShape(halfExtents);\n-        RigidBodyControl control = new RigidBodyControl(shape, mass);\n+        RigidBodyControl control;\n+        if(mass==0){\n+            mass=1000;\n+            control=new RigidBodyControl(shape,mass);\n+            control.setAngularDamping(1);\n+            control.setLinearDamping(1);\n+        }else{\n+            control= new RigidBodyControl(shape, mass);\n+        }\n         Node node = new Node();\n         node.addControl(control);\n         rootNode.attachChild(node);\n```\nEDIT: \nIt works fine also if you replace the static nodes with kinematic ones. There might be another minor bug here because in the initial frames the hinged nodes seem to be \"pulled in place\" rather than starting the simulation at the correct location.\ndiff\n@@ -107,8 +107,16 @@\n         float size = 0.1f;\n         Vector3f halfExtents = new Vector3f(size, size, size);\n         CollisionShape shape = new BoxCollisionShape(halfExtents);\n-        RigidBodyControl control = new RigidBodyControl(shape, mass);\n         Node node = new Node();\n+        RigidBodyControl control;\n+        if(mass==0){\n+            mass=1;\n+            control = new RigidBodyControl(shape,mass);\n+            control.setKinematic(true);\n+            node.setLocalTranslation(location);\n+        }else{\n+            control= new RigidBodyControl(shape, mass);\n+        }\n         node.addControl(control);\n         rootNode.attachChild(node);\n         bulletAppState.getPhysicsSpace().add(node);\n. So... I haven't found any documentation that says if attaching a costraint to a static body is something supposed to work or not, but I've figured we could use the constructor that asks only for one rigidbody and use a fixed point+pivot for the static body.\nThis is what i've come up with https://github.com/riccardobl/jmonkeyengine/commit/8c4d96cefbd6dbff28d6e68aaf0fd2d212876d3b\n(that will have to be eventally ported to the other joints aswell)\nI have 3 main concerns with it:\n1. The code change in PhysicsJoint.java may break some previous use cases that i'm not aware of\n2. I don't know what i am supposed to do with axisA, so for now i'm ignoring it.\n3. You should be able to move your  static rb as long as you do it before attaching it to the physics space, but with this change, the joint won't follow, so you are allowed to create your constraints only after the rb is in place.\nNeverless, this seems to work fine in my scene and in your test.. Thanks @Ali-RS  and sorry, i didn't have time to do it right away and then i forgot :persevere:. > Why in PhysicsCollisionObject instead of PhysicsRigidBody?\nIt is a property of btCollisionObject in bullet.. It is already set by jme for the ghost controls, i think it should work for characters and soft  bodies.. I know i was the one who suggested the name for this method, but on second thought i think it would be better (more descriptive) to invert the logic and call it setIgnoreContactResponse or setNoContactResponse so that it mirrors the flag name.\nAlso i think hard coded flags should be avoided, by either doing this  or by making set(No|Ignore)ContactResponse native.. Possible patch\ncom.jme3.texture.image.DefaultImageRaster\n```patch\n@@ -155,7 +155,14 @@\n private ByteBuffer getBuffer(){\n     if(buffer == null){\n\n\nthis.buffer = image.getData(slice);\nif(image.getDepth()>1){\nint skip = image.getWidth() * image.getHeight() * codec.bpp * slice;\nthis.buffer = image.getData(0);\nthis.buffer.position(skip);\nthis.buffer = this.buffer.slice();\n}else{\nthis.buffer = image.getData(slice);\n}\n         }\n         return buffer;\n     }\n``\nI need some feedback on this since i don't know if it could break the engine elsewhere.\n. I don't think we are talking about the same thing.\nCan you point to an example on how you would do this by manipulating the vertex buffers?. Ok, this is the opposite of that. What would you do to render the same geomery 1000 times without an additional 1000 elements long vertex buffer?. There are many situations where you can dynamically compute the position of the instance in the vertex shader.. For example the particle emitter in jme can be implemented with a single vertex shaders using an equation, since particles are not aware of each other and they don't respond to the environment.\nOr you can go more complex and think about vector fields. \nOr for example you can render a forest on top of a terrain generated with an heightmap, by sampling the heightmap and adding an offset to xz.\n . Inputs for particles are Origin SpawnTime g_Time gl_InstanceID\nThe equation issomething Origin+ force something g_InstanceID *g_Time  * direction +  gravity * time )^ something -1 `\n\nInputs for forest are Origin HeightMap MinOffset MaxOffset gl_InstanceID \nThe coordinate are xz=origin + random(MinOffset,MaxOffset)*g_InstanceID y=texture(HeightMap,xz/mapsize);\n. I mean, i provided two random use cases, the limit is the ingenuity of the developer.\n:man_shrugging: But you chose that.\nConsider that extending the mesh may be a bit inconvenient expecially when dealing with meshes loaded from the asset manager, but possible i guess..\n. The patch proposes to add a middle class between Geometry and InstancedGeometry that provides only two abstract method used by InstancedGeometry. But ofc this is up to discussion. \n\nIt seems that is no harder to work through a j3o than a custom mesh extension. (Like Quad, Sphere, etc. are already mesh extensions.)\n\nnot sure what you mean here\n\nI'll reiterate once that the performance of small mesh particles done this way would be horrible... so I doubt they are doing this. \n\nThere is no reason for this to be slower than anything else.. > 1000 instances, slightly faster than 1000 draw calls. Waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay slower than a batch of 1000.\nIs this affirmation based on your own measurements?\n\nFor example, you could do everything you want to do with one patch that let's the user specify the instance count on the mesh to override the calculated one. Without creating additional classes, requiring additional weird Geometry subclasses, etc..\nIt's a mesh problem, not a geometry problem.\n\nSure that's why this is an Issue and not a PR, that patch was just an example on how it could be made, never intented to end in the engine.. Ok, that's quite anecdotal.\nI assume you did this with the instancing currently available in jme, this means your instances were carrying an huge vertex buffer and performing several transformations on the vertex shader.\nThere is also a catch, particles usually moves.\nSaid that, you have your reasons, i have mine.\nYou can close the issue if you think there is nothing else that needs to be added.. You don't need a truck to carry a crate of oranges, this doesn't make trucks useless or worst than your car.. You are missing the point. Instancing and batching are not simply interchangeable.\nSmall meshes vs Big meshes is non sense, in a real world scenario your whole render time is not defined by your particles or some other random single component of your whole scene.. Not really, besides maybe a confirmation regarding if this issue is real or if i'm missing something. No, see the image below, left is Additive right is AlphaAdditive\n\n. I'm just reporting what i think might be issue, i'm happy with using BlendMode.Custom and that's what i'm using right now.\nAdditive is GL_ONE GL_ONE for color and alpha, what i was showing is GL_ONE GL_ONE for alpha and GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA for colors. \n. Ok, maybe i didn't explain myself well enough, so let's recap.\nWhile it's true that jme allows to specify a custom blend mode and thus a workaround is possible and sometimes preferable, what is currently called BlendMode.Alpha doesn't always work as expected (it correctly blends RGB but not A). \nI think this is a problem that should be addressed because only someone who knows the internals of the engine would be able to know about this.\nSo:\nIssue: BlendMode.Alpha is not working as expected when the destination has an alpha channel and the alpha is meaningful for the use case.\nAction required: Change BlendMode.Alpha so that it uses a different function to blend the alpha channel,  if this doesn't cause issue with the current use cases.\nOR\nAdd a new blending mode and specify in the comments that BlendMode.Alpha doesn't work as expected when the destination has alpha.\n\nYou can't reopen issues closed by someone else on github (afaik). So, this is how it could look like\nIn BlendMode a new entry for the mode\n```java\n /*\n         * Alpha blending, interpolates to source color from dest color\n         * using source alpha.\n         * The resulting alpha is the sum between the source alpha and the destination alpha.\n         * \n         * Result.rgb = Source Alpha * Source Color +\n         *          (1 - Source Alpha) * Dest Color -> (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)\n         * Result.a = Source Alpha + Dest Alpha\n         * \n         /\n        AlphaSumA,\n```\nIn GLRenderer.applyRenderState(RenderState state)\n```java\n     case AlphaSumA:\n                    blendFuncSeparate(\n                        RenderState.BlendFunc.Src_Alpha, \n                        RenderState.BlendFunc.One_Minus_Src_Alpha,\n                        RenderState.BlendFunc.One,\n                        RenderState.BlendFunc.One                  \n                    );\n                    break;\n```. Done https://github.com/jMonkeyEngine/jmonkeyengine/pull/1036. This is the commit that changed the behaviour https://github.com/bulletphysics/bullet3/commit/dcd02a1e15ed550d931f068aa347bff5c872e395\n\ndisable sphere-sphere contact cache, it is buggy (some contact point stay in the cache, when sphere penetrates more than total margins)\n\nRemoving #define CLEAR_MANIFOLD 1 from btSphereSphereCollisionAlgorithm.cpp restores it, but as you see from the commit message, according to the developer, this is broken... Yeah, pretty weird.\nMaybe we can use gContactStartedCallback \nhttps://github.com/bulletphysics/bullet3/blob/cdd56e46411527772711da5357c856a90ad9ea67/src/BulletCollision/CollisionDispatch/btManifoldResult.cpp#L199\nThat would be called from this line\nhttps://github.com/bulletphysics/bullet3/blob/dcd02a1e15ed550d931f068aa347bff5c872e395/src/BulletCollision/CollisionDispatch/btSphereSphereCollisionAlgorithm.cpp#L90\nBut it might require changes on the java code. PhysicsCollisionEvent \njava\n    public PhysicsCollisionEvent(int type, PhysicsCollisionObject nodeA, PhysicsCollisionObject nodeB, long manifoldPointObjectId) {\nmanifoldPointObjectId is the address for a btManifoldPoint, we don't have it in the gContactStartedCallback, but we have btPersistentManifold, see typedefs below\nWhat is used now\ncpp\ntypedef bool(* ContactProcessedCallback) (btManifoldPoint &cp, void *body0, void *body1)\nWhat we could use to fix the issue\ncpp\ntypedef void(* ContactEndedCallback) (btPersistentManifold *const &manifold)\nor\ncpp\ntypedef void(* ContactStartedCallback) (btPersistentManifold *const &manifold)\nSo we would probably have to change also the methods that are used to retrieve all the infos that are expected by jme (if we can do that with this callback...).. Ok, ignore what i said, I took a better look at the apis, and we can get the btManifoldPoints from btPersistentManifold using btManifoldPoints.getContactPoint.\n. I have other priorities at the moment, but i tried to quicky implement the callback\njmePhysicsSpace.cpp\n```patch\n--- \n+++ \n@@ -150,8 +150,8 @@\n     dynamicsWorld->getPairCache()->setOverlapFilterCallback(new jmeFilterCallback());\n     dynamicsWorld->setInternalTickCallback(&jmePhysicsSpace::preTickCallback, static_cast (this), true);\n     dynamicsWorld->setInternalTickCallback(&jmePhysicsSpace::postTickCallback, static_cast (this));\n-    if (gContactProcessedCallback == NULL) {\n-        gContactProcessedCallback = &jmePhysicsSpace::contactProcessedCallback;\n+    if (gContactStartedCallback == NULL) {\n+        gContactStartedCallback = &jmePhysicsSpace::contactStartedCallback;\n     }\n }\n@@ -183,11 +183,11 @@\n     }\n }\n-bool jmePhysicsSpace::contactProcessedCallback(btManifoldPoint &cp, void body0, void body1) {\n-    //    printf(\"contactProcessedCallback %d %dn\", body0, body1);\n-    btCollisionObject co0 = (btCollisionObject) body0;\n+void jmePhysicsSpace::contactStartedCallback(btPersistentManifold pm) {\n+    btCollisionObject co0 = pm->getBody0();\n+    btCollisionObject co1 = pm->getBody1();\n+    if(co0==NULL||co1==NULL)return;\n     jmeUserPointer up0 = (jmeUserPointer) co0 -> getUserPointer();\n-    btCollisionObject co1 = (btCollisionObject) body1;\n     jmeUserPointer up1 = (jmeUserPointer) co1 -> getUserPointer();\n     if (up0 != NULL) {\n         jmePhysicsSpace dynamicsWorld = (jmePhysicsSpace *)up0->space;\n@@ -197,18 +197,18 @@\n             if (javaPhysicsSpace != NULL) {\n                 jobject javaCollisionObject0 = env->NewLocalRef(up0->javaCollisionObject);\n                 jobject javaCollisionObject1 = env->NewLocalRef(up1->javaCollisionObject);\n-                env->CallVoidMethod(javaPhysicsSpace, jmeClasses::PhysicsSpace_addCollisionEvent, javaCollisionObject0, javaCollisionObject1, (jlong) & cp);\n+                for(int i=0;igetNumContacts();i++){\n+                    env->CallVoidMethod(javaPhysicsSpace, jmeClasses::PhysicsSpace_addCollisionEvent, javaCollisionObject0, javaCollisionObject1, (jlong) & pm->getContactPoint(i));\n+                    if (env->ExceptionCheck()) {\n+                        env->Throw(env->ExceptionOccurred());\n+                    }\n+                }\n                 env->DeleteLocalRef(javaPhysicsSpace);\n                 env->DeleteLocalRef(javaCollisionObject0);\n                 env->DeleteLocalRef(javaCollisionObject1);\n-                if (env->ExceptionCheck()) {\n-                    env->Throw(env->ExceptionOccurred());\n-                    return true;\n-                }\n             }\n         }\n     }\n-    return true;\n }\nbtDynamicsWorld* jmePhysicsSpace::getDynamicsWorld() {\n```\njmePhysicsSpace.h\n```patch\n--- \n+++ \n@@ -62,5 +62,5 @@\n         JNIEnv getEnv();\n         static void preTickCallback(btDynamicsWorld, btScalar);\n         static void postTickCallback(btDynamicsWorld, btScalar);\n-        static bool contactProcessedCallback(btManifoldPoint &, void , void );\n+        static void contactStartedCallback(btPersistentManifold);\n };\n```\nBut this crashes with \nSIGSEGV (0xb) at pc=0x00007f0483d57bb6, pid=4564, tid=0x00007f0483ac1700\nC  [libbulletjme.so+0x295bb6]  btCollisionObject::getUserPointer() const+0xc\non this line \ncpp\n    jmeUserPointer *up0 = (jmeUserPointer*) co0 -> getUserPointer();\nNo idea why.\n. I realized that the callback signature was wrong in my previous patch, i fixed it and made a pr: https://github.com/jMonkeyEngine/jmonkeyengine/pull/1031\nIt seems to be working fine so far in my game. . Go ahead, I don't have any test app since i've been testing this on your TestSphereSphereCollision and on my project.. Might be related to this https://github.com/jMonkeyEngine/jmonkeyengine/issues/910. It seems that passing a value grather that 0 to setCcdSweptSphereRadius makes the test behave as expected (the default value is 0), im not sure about what having it set to 0 mean for bullet... It works for me... how are you running it?. ",
    "afonsolage": "But by adding those kind of checks, will slow down the performance...Since JME3 is focused on performance rather than trivial checks, I think this isn't much necessary.\n. What about instead of using space, which can conflict with paths, use comma?\nDiffuseMap: MinTrilinear, MagBilinear, WrapRepeat, Flip, some/path/to a/texture.png\nDiffuseMap: Flip, Repeat, some/path/to a/texture.png\nDiffuseMap: WrapEdgeClamp, MagNearest, MinNearestNearestMipMap, some/path/to a/texture.png\nTexture path will always be texturePath.split(',')[texturePath.length-1]\n```\npublic class Main {\npublic static void main(String[] args) {\n    Main main = new Main();\n    main.testParser(\"MinTrilinear, MagBilinear, WrapRepeat, Flip, some/path/to a/texture.png\");\n    main.testParser(\"Flip, Repeat, some/path/to a/texture.png\");\n    main.testParser(\"WrapEdgeClamp, MagNearest, MinNearestNearestMipMap, some/path/to a/texture.png\");\n    main.testParser(\"some/path/to a/texture.png\");\n}\n\nprivate void testParser(String texturePath) {\nboolean minTrilinear = false;\nboolean magBilinear = false;\nboolean wrapRepeat = false;\nboolean flipY = false;\nboolean wrapEdgeClamp = false;\nboolean minNearestNearestMipMap = false;\nboolean magNearest = false;\n\nString[] keys = texturePath.split(\",\");\n\nfor (String key : keys) {\n    key = key.trim();\n    if (key.equalsIgnoreCase(\"MinTrilinear\")) {\n        minTrilinear = true;\n    } else if (key.equalsIgnoreCase(\"MagBilinear\")) {\n        magBilinear = true;\n    } else if (key.equalsIgnoreCase(\"WrapRepeat\")) {\n        wrapRepeat = true;\n    } else if (key.equalsIgnoreCase(\"Flip\")) {\n        flipY = true;\n    } else if (key.equalsIgnoreCase(\"WrapEdgeClamp\")) {\n        wrapEdgeClamp = true;\n    } else if (key.equalsIgnoreCase(\"MagNearest\")) {\n        magNearest = true;\n    } else if (key.equalsIgnoreCase(\"MinNearestNearestMipMap\")) {\n        minNearestNearestMipMap = true;\n    }\n}\n\ntexturePath = keys[keys.length - 1].trim();\n\nSystem.out.println(String.format(\"Path: %s, minTrilienar: %s, magBilinear %s, \"\n    + \"wrapRepeat: %s, flipY: %s, wrapEdgeClamp: %s, magNearest: %s, \"\n    + \"minNearestNearestMipMap: %s\", texturePath, minTrilinear, magBilinear,\n    wrapRepeat, flipY, wrapEdgeClamp, magNearest, minNearestNearestMipMap));\n}\n\n}\n```\noutput:\nPath: some/path/to a/texture.png, minTrilienar: true, magBilinear true, wrapRepeat: true, flipY: true, wrapEdgeClamp: false, magNearest: false, minNearestNearestMipMap: false\nPath: some/path/to a/texture.png, minTrilienar: false, magBilinear false, wrapRepeat: false, flipY: true, wrapEdgeClamp: false, magNearest: false, minNearestNearestMipMap: false\nPath: some/path/to a/texture.png, minTrilienar: false, magBilinear false, wrapRepeat: false, flipY: false, wrapEdgeClamp: true, magNearest: true, minNearestNearestMipMap: true\nPath: some/path/to a/texture.png, minTrilienar: false, magBilinear false, wrapRepeat: false, flipY: false, wrapEdgeClamp: false, magNearest: false, minNearestNearestMipMap: false\n. Because the changes on cpp file, as I can see, it changes many functions:\n-    private native float getAngularFactor(long objectId);\n-    private native void getAngularFactor(long objectId, Vector3f vec);\n. And this will break all existing flyCam. At least add a boolean to enable or disable it. In my project, I use flyCam as it is and this change will lead me to reverse it on custom code. \n. ",
    "noncom": "Aaaaalright :) then I think this issue is not an issue and can be closed?\n. @tlf30 I can recommend using https://justgetflux.com/ which is a top-grade configurable blue-light filter. On my Windows 10 it used to drop out after a windowed JME app only rarely and never for more than a couple of secs. But recently it stopped dropping out completely and just works whatever I do.. If I'm right, Unreal particles are done using this technique: https://docs.unrealengine.com/en-us/Engine/Rendering/ParticleSystems. I would not call this a minor use case. That is a great visual effect and opens much possibilities. It would be great to be able to do similar things in my JME games too.. But does not Khronos recommend using GPU instancing? https://www.khronos.org/opengl/wiki/Vertex_Rendering#Instancing \nIt says It will send the same vertices instancecount\u200b number of times, as though you called glDrawArrays/Elements in a loop of instancecount\u200b length, so this is a GPU-based optimization?\nYou mean this is slow?. Hmmm, so you recommend to simply allocate a big vertex buffer and manipulate its vertices in the shader as if these were the particles?. ",
    "MelvinsQuest": "Hey Empire. Thanks, you right, i get it wrong. Just wanted to update the jme fork on my git account from the official one. I will try to undo my commit, but if i stuck you can delete it anyway. (p.s. thanks for the jme3-javafx stuff! ;) )\n. I tried with git-shell from the github-software (the repo is a fork on: https://github.com/MelvinsQuest/jmonkeyengine.git, downloaded with the said software):\nE:\\dev\\repos\\github\\jmonkeyengine [master]> git remote add origin https://github\n.com/jMonkeyEngine/jmonkeyengine.git\nfatal: remote origin already exists.\nE:\\dev\\repos\\github\\jmonkeyengine [master]> git pull upstream master\nfatal: 'upstream' does not appear to be a git repository\nfatal: Could not read from remote repository.\nThanks\n. Last time i synced the official changes with a pull request toward my fork. Maybe i should start over and reinit my repo? \n. It worked! Thanks for your patience.\n. ",
    "mbenson": "I wasn't aware of this PR. They are very similar. Differences that strike me:\n- My version makes the lights' colors optional by providing additional constructors. The constructors that include color put it last, the idea being that when you're constructing a DirectionalLight, its direction is more important to you than its color.\n- I included a Light(ColorRGBA) constructor which is called by the color-specifying constructors.\n- I did not include constructors that specified the mathematical properties of a SpotLight as I feared that was becoming \"just too much.\" If one were going to create such a constructor, I would consider embedding these parameters into some kind of enclosing struct-like object for tidiness' sake (also it would become trivial to reuse these settings combinations if embedded in an immutable object).\n- It still appears to me that the SpotLight constructors have the potential to make multiple calls to #computeAngleParameters(); I took pains to ensure my modifications did not do this, although admittedly I may have missed something.\n. ",
    "axhm3a": "Thank you zzuegg!\nthis solves my issue for now.\n. ",
    "tonihele": "Ah this is why the batched Nifty doesn't work...\nhttp://hub.jmonkeyengine.org/t/tonegod-vs-niftygui/33317/16?u=tonihele\n. It is their subscriber, not JME I think. I updated my findings there.\n. This can be closed? The issue is fixed already. JME 3.1 carries 1.4.2 release which has the issue fixed.. I might be able to do this. At least I have now JME forked and running. Is it ok, if I:\n- Create all chars on same page (I'm not sure does JME even support the pages)\n- Put the font preview inside some scrollpanel to get rid of the eating the screen effect\n- Change the tooltip on \"char range\" not to say about padding\n- Use StringBuilder in com.jme3.gde.angelfont.FontCreator.java\nThis is really @normen 's work of art. Any thoughts?\n. I think you can just workaround this by calling getAdditionalRenderState() on the material once, it'll create an empty one.\n. Stack:\n```\nSEVERE: Failed to convert the assets!\njava.lang.RuntimeException: Failed to convert KMF entry g_Maiden-Torture.kmf!\n    at toniarts.openkeeper.tools.convert.AssetsConverter.convertModel(AssetsConverter.java:399)\n    at toniarts.openkeeper.tools.convert.AssetsConverter.convertModels(AssetsConverter.java:337)\n    at toniarts.openkeeper.tools.convert.AssetsConverter.convertAssets(AssetsConverter.java:206)\n    at toniarts.openkeeper.setup.DKConverter$Converter.run(DKConverter.java:251)\nCaused by: java.lang.NullPointerException\n    at com.jme3.material.plugin.export.material.J3MRootOutputCapsule.write(J3MRootOutputCapsule.java:94)\n    at com.jme3.material.Material.write(Material.java:1237)\n    at com.jme3.material.plugin.export.material.J3MExporter.save(J3MExporter.java:56)\n    at com.jme3.material.plugin.export.material.J3MExporter.save(J3MExporter.java:65)\n    at toniarts.openkeeper.tools.convert.KmfModelLoader.getMaterials(KmfModelLoader.java:779)\n    at toniarts.openkeeper.tools.convert.KmfModelLoader.load(KmfModelLoader.java:156)\n    at toniarts.openkeeper.tools.convert.AssetsConverter.convertModel(AssetsConverter.java:390)\n    ... 3 more\nMar 17, 2016 1:50:43 PM toniarts.openkeeper.Main main\n```\n. I think this is quite simple to test, just create a new material without touching the additional render states and try to use the exporter to save it. Should fail immediately. By default I don't think the materials have additional render states set.\n. Thanks!\n. changing it multiple time <- I don't have exact figures but it really isn't that much. We get about 10 min of game time on our project. Depending on how we play of course :)\n. As discussed further in the forum. The problem doesn't exist in LWJGL 3. I've made a similar cache to be used with LWJGL 2. And tested it to be working.\nI'll try my best to make a PR (for master & 3.1).\n. Okay, I hope I didn't mess up too much. The solution is similar (identical) to the one used already with LWJGL 3.\nPull requests:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/543\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/541\n. My test class (note that it'll only read RGBA format cursor). With 3000 FPS, without these fixes the cursor was soon lost, with the fixes, I could overheat my graphics card before the cursor disappeared.\n```\npackage mygame;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.cursors.plugins.JmeCursor;\nimport com.jme3.material.Material;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.renderer.RenderManager;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.texture.Image;\nimport com.jme3.texture.Texture;\nimport com.jme3.util.BufferUtils;\nimport java.nio.ByteBuffer;\nimport java.nio.IntBuffer;\n/\n * test\n \n * @author normenhansen\n /\npublic class Main extends SimpleApplication {\nJmeCursor cursor;\nboolean cursorSet = false;\n\npublic static void main(String[] args) {\n    Main app = new Main();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    Box b = new Box(1, 1, 1);\n    Geometry geom = new Geometry(\"Box\", b);\n\n    Material mat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\n    mat.setColor(\"Color\", ColorRGBA.Blue);\n    geom.setMaterial(mat);\n\n    rootNode.attachChild(geom);\n\n    // Create cursor\n    cursor = new JmeCursor();\n    Texture tex = assetManager.loadTexture(\"Interface/Idle.png\");\n    Image img = tex.getImage();\n    // width must be a multiple of 16, otherwise the cursor gets distorted\n    int frames = 1;\n    int width = img.getWidth() % 16 == 0 ? img.getWidth() : (img.getWidth() - img.getWidth() % 16) + 16;\n    int heightFrame = img.getHeight() / frames;\n    int height = heightFrame % 16 == 0 ? heightFrame : (heightFrame - heightFrame % 16) + 16;\n\n    // Image data\n    ByteBuffer data = img.getData(0);\n    data.rewind();\n    IntBuffer image = BufferUtils.createIntBuffer(height * width * frames);\n    for (int z = 0; z < frames; z++) {\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                int argb = 0;\n                if (x < img.getWidth() && y < heightFrame) {\n                    try {\n                        int abgr = data.getInt();\n                        argb = ((abgr & 255) << 24) | (abgr >> 8);\n                    } catch (Exception e) {\n                        System.out.println(z + \", \" + y + \", \" + x);\n                    }\n                }\n\n                image.put(argb);\n            }\n        }\n    }\n    image.rewind();\n    cursor.setNumImages(1);\n    cursor.setWidth(width);\n    cursor.setHeight(height);\n    cursor.setxHotSpot(2);\n    cursor.setyHotSpot(height - 2);\n    cursor.setImagesData(image);\n\n    flyCam.setEnabled(false);\n    inputManager.setCursorVisible(true);\n}\n\n@Override\npublic void simpleUpdate(float tpf) {\n    //TODO: add update code\n    if (cursorSet) {\n        inputManager.setMouseCursor(null);\n    } else {\n        inputManager.setMouseCursor(cursor);\n    }\n    cursorSet = !cursorSet;\n}\n\n@Override\npublic void simpleRender(RenderManager rm) {\n    //TODO: add render code\n}\n\n}\n```\n. If this is ok, I make a similar one to master. I guess I should have started there but...\n. It requires java 8 or later: https://github.com/LWJGL/lwjgl3\nThey are also already using some features from java 9 if you check the latest release notes (3.1.2).. Also in case this is all fine and dandy, is there a possibility for this late addition to be added to the 3.2?. Thanks! I'll get back to this in about 10 hours or so.. Right on schedule :). My PR would solve this for LWJGL 3.. I'll create a PR in just a minute, I can't add myself as a assignee. GIT n00b still. Lets see :). Hmm, I did it twice with both branches having the same issue, I don't know what is causing all the white space changes :(  I didn't have any auto-formattings on, at least I shouldn't have had.\nAnd I took the liberty to change the LinkedLists back to ArrayDeques. Since last time this was an allowed move, and seems that they might have been changed back due to some refactoring etc. Anyway, it should be better, marginally.. Ok, now it should be ok. I redid it, and I don't know why this time it worked. But it did, so, great :). Hmm, not super risky I'd say. It was 3.1.5 -> 3.1.6, https://github.com/LWJGL/lwjgl3/releases. I did try the demos and they worked. And actually there was a fix included in this to how JME uses LWJGL 3 context, as I mentioned. So I'd say... yay, go for it :). I'm using the jMonkeyEngine SDK straight with GIT. I didn't have this problem last time I contributed.. I'll redo this... no white spaces. I updated a bit, a minor fix that the delta comes correctly if you move to the corner. Since the mouse position is now always initialized, we don't need that assumption anymore that 0, 0 means unset.. One thing though... I noticed that usually the mouse cursor is placed in the center of the newly created window (a.k.a. your app), but not always. I'm not sure what governs this. But when it is not placed in the window, we will get a mouse position that is negative or bigger than our window. And the mouse listener of course only picks up on the window it self, so it might be that the delta of the first movement is huge. This is also always true if you travel away from your window and come back from another angle, so I'm not sure if this is a feature or a bug then. The initial thing can be handled, but not the deliberate later mouse escapes which at least is a feature. I hope I could explain this clearly :)\nFor full screen of course everything is working better now.. Is this happening with LWJGL 2 too or just with LWJGL 3? And also what is the expected outcome? Is it the viewport is in the wrong position or mouse coordinates are invalid or what?. http://wiki.lwjgl.org/wiki/Using_High_DPI_Mode.html seems to be documentation for the version 2 but the same stuff still exists in the current master repo code. This might be a thing in Windows 8+ too if those super displays are used. I'm not sure is that a thing :) For me this is the first time I hear about this kind of displays. . Well, https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-lwjgl3/src/main/java/com/jme3/renderer/lwjgl/LwjglGL.java#L558 if you apply the Display.getPixelScaleFactor() factor. Does it help then? I'm not sure architecture wise if this is the correct location nor I don't know does it work. And after that the mouse coordinates are probably off.. I dont remember did I test this on Windows or Linux. I do have both. And\nwith NVIDIA and Intel graphics.\nIm currently billions of kilometers away from home. Okay, more than 10\n000km. I could try this earliest on next Sunday.\nI guess one way is looking Nifty GIT for changes somewhere in the files\nlisted in the stack. Or even 1.4.2 vs 1.4.3. I doubt there are lot given\nthe current development pace.\nOn Thu, 21 Feb 2019, 02:19 Stephen Gold, notifications@github.com wrote:\n\nI'm considering this PR for the JME 3.2.3 release.\nHas this change had much testing with Linux? I ask because Toboi reported\na crash running Maud v1.0.0-alpha.6 on Kubuntu. The stack trace made me\nthink it might be related to Nifty 1.4.3, so I rolled back to 1.4.2 in my\nnext release of Maud, and that seemed to resolve Toboi's issue.\nhttps://hub.jmonkeyengine.org/t/seeking-alpha-testers-for-maud/39085/55\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nJ 3896  org.lwjgl.opengl.GL15.nglBufferData(IJJIJ)V (0 bytes) @ 0x00007f41c8aa9c0e [0x00007f41c8aa9bc0+0x4e]\nJ 3953 C1 org.lwjgl.opengl.GL15.glBufferData(ILjava/nio/FloatBuffer;I)V (38 bytes) @ 0x00007f41c8adf584 [0x00007f41c8aded60+0x824]\nJ 3952 C1 com.jme3.renderer.lwjgl.LwjglGL.glBufferData(ILjava/nio/FloatBuffer;I)V (11 bytes) @ 0x00007f41c8ae03f4 [0x00007f41c8ae0340+0xb4]\nJ 3842 C1 com.jme3.renderer.opengl.GLRenderer.updateBufferData(Lcom/jme3/scene/VertexBuffer;)V (312 bytes) @ 0x00007f41c8a8f7ac [0x00007f41c8a8e780+0x102c]\nJ 3744 C1 com.jme3.renderer.opengl.GLRenderer.setVertexAttrib(Lcom/jme3/scene/VertexBuffer;Lcom/jme3/scene/VertexBuffer;)V (573 bytes) @ 0x00007f41c8a6e1f4 [0x00007f41c8a6d240+0xfb4]\nJ 3974 C1 com.jme3.renderer.opengl.GLRenderer.renderMeshDefault(Lcom/jme3/scene/Mesh;II[Lcom/jme3/scene/VertexBuffer;)V (242 bytes) @ 0x00007f41c8aec7a4 [0x00007f41c8aeb500+0x12a4]\nj  com.jme3.renderer.opengl.GLRenderer.renderMesh(Lcom/jme3/scene/Mesh;II[Lcom/jme3/scene/VertexBuffer;)V+145\nj  com.jme3.material.logic.DefaultTechniqueDefLogic.renderMeshFromGeometry(Lcom/jme3/renderer/Renderer;Lcom/jme3/scene/Geometry;)V+49\nJ 3967 C1 com.jme3.material.logic.DefaultTechniqueDefLogic.render(Lcom/jme3/renderer/RenderManager;Lcom/jme3/shader/Shader;Lcom/jme3/scene/Geometry;Lcom/jme3/light/LightList;I)V (21 bytes) @ 0x00007f41c8ae6dc4 [0x00007f41c8ae6c60+0x164]\nJ 4016 C1 com.jme3.material.Material.render(Lcom/jme3/scene/Geometry;Lcom/jme3/light/LightList;Lcom/jme3/renderer/RenderManager;)V (130 bytes) @ 0x00007f41c8b0972c [0x00007f41c8b08ee0+0x84c]\nJ 4028 C1 com.jme3.material.Material.render(Lcom/jme3/scene/Geometry;Lcom/jme3/renderer/RenderManager;)V (11 bytes) @ 0x00007f41c8b1808c [0x00007f41c8b17f00+0x18c]\nj  com.jme3.font.BitmapText.render(Lcom/jme3/renderer/RenderManager;Lcom/jme3/math/ColorRGBA;)V+49\nj  com.jme3.niftygui.RenderDeviceJme.renderFont(Lde/lessvoid/nifty/spi/render/RenderFont;Ljava/lang/String;IILde/lessvoid/nifty/tools/Color;FF)V+180\nj  de.lessvoid.nifty.render.ScalingRenderDevice.renderFont(Lde/lessvoid/nifty/spi/render/RenderFont;Ljava/lang/String;IILde/lessvoid/nifty/tools/Color;FF)V+51\nj  de.lessvoid.nifty.render.NiftyRenderEngineImpl.renderText(Ljava/lang/String;IIIILde/lessvoid/nifty/tools/Color;)V+98\nj  de.lessvoid.nifty.elements.render.TextRenderer.renderLine(IILjava/lang/String;Lde/lessvoid/nifty/render/NiftyRenderEngine;II)V+13\nj  de.lessvoid.nifty.elements.render.TextRenderer.renderLines(Lde/lessvoid/nifty/elements/Element;Lde/lessvoid/nifty/render/NiftyRenderEngine;[Ljava/lang/String;)V+222\nj  de.lessvoid.nifty.elements.render.TextRenderer.render(Lde/lessvoid/nifty/elements/Element;Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+15\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afd6bc [0x00007f41c8afcaa0+0xc1c]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afd81c [0x00007f41c8afcaa0+0xd7c]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.elements.Element.renderInternalChildElements(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+27\nj  de.lessvoid.nifty.elements.Element.renderChildren(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+55\nJ 3991 C1 de.lessvoid.nifty.elements.Element.render(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V (104 bytes) @ 0x00007f41c8afe144 [0x00007f41c8afcaa0+0x16a4]\nj  de.lessvoid.nifty.screen.Screen.renderLayers(Lde/lessvoid/nifty/render/NiftyRenderEngine;)V+31\nj  de.lessvoid.nifty.Nifty.render(Z)V+46\nj  com.jme3.niftygui.NiftyJmeDisplay.postQueue(Lcom/jme3/renderer/queue/RenderQueue;)V+20\nj  com.jme3.renderer.RenderManager.renderViewPort(Lcom/jme3/renderer/ViewPort;F)V+423\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/991#issuecomment-465673172,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AH9UvqnpG2NbNkTwrA8Jy9ikhu1A23eWks5vPYOagaJpZM4ZlFN2\n.\n. Works (Kubuntu 18.10):\nINFO: Running on jMonkeyEngine 3.3-6738\n * Branch: master\n * Git Hash: 784106e\n * Build Date: 2019-03-07\nMar 07, 2019 10:16:37 PM com.jme3.system.lwjgl.LwjglContext printContextInitInfo\nINFO: LWJGL 3.2.1 build 12 context running on thread main\n * Graphics Adapter: GLFW 3.3.0 X11 GLX EGL clock_gettime evdev shared\nMar 07, 2019 10:16:37 PM com.jme3.renderer.opengl.GLRenderer loadCapabilitiesCommon\nINFO: OpenGL Renderer Information\n * Vendor: Intel Open Source Technology Center\n * Renderer: Mesa DRI Intel(R) HD Graphics 530 (Skylake GT2) \n * OpenGL Version: 4.5 (Core Profile) Mesa 18.2.2\n * GLSL Version: 4.50\n * Profile: Core. Works (Kubuntu 18.10, LWJGL 2):\nINFO: Running on jMonkeyEngine 3.3-6738\n * Branch: master\n * Git Hash: 784106e\n * Build Date: 2019-03-07\nMar 07, 2019 10:19:32 PM com.jme3.system.lwjgl.LwjglContext printContextInitInfo\nINFO: LWJGL 2.9.3 context running on thread jME3 Main\n * Graphics Adapter: null\n * Driver Version: null\n * Scaling Factor: 1\nMar 07, 2019 10:19:32 PM com.jme3.renderer.opengl.GLRenderer loadCapabilitiesCommon\nINFO: OpenGL Renderer Information\n * Vendor: Intel Open Source Technology Center\n * Renderer: Mesa DRI Intel(R) HD Graphics 530 (Skylake GT2) \n * OpenGL Version: 4.5 (Core Profile) Mesa 18.2.2\n * GLSL Version: 4.50\n * Profile: Core. This seems to happen only with LWJGL 3, right? At least for me the LWJGL 2 seems to work just fine.. With LWJGL 3 the keyboard and mouse listeners are also tied to the window. When the context is restarted, the window is re-created. This seems to break the keyboard and mouse listeners as they still refer the old window handle. That explains the problems you get with the flycam. This one is easy to fix.\n\nFor our game the restart results in the whole scene gone, both Nifty and the regular scene context. The Nifty is there still alive and kicking, but I just can't see it. Any buttons etc. seem to work.. I pretty please need help :) I was able to fix the keyboard & mouse issues so that it only slightly feels like a hack (re-init them to the new window). But the graphics.... I don't understand, I tried all kinds of stuff. I carefully compared the LWJGL 2 code from jME. And tried to add some renderer update code etc. what was missing. I tried to have the previous window still open and have a shared context between them... I guess the buffers are just wrong or something in the new window.\nI just don't understand it. I don't have enough competence for this I'm afraid. I haven't yet give up on this but I recognize that I'm just taking stabs at it blindly. I can't grasp the actual problem.\nOne crappy workaround would be that we just change the full screen status and the resolution on LWJGL 3 restart. Since that is all you can do without actual context restart.. Just to be clear, I don't think this is just related to just Nifty GUI. We just both happen to use it with the op. We have in app graphic settings made with Nifty GUI. But anyway, the example provided by op should be enough. I didn't actually tried it, but I assume the whole screen goes blank as in our game. That means also normal scene graph stuff just vanishes, right?. Hmm, in the example the scene graph holds, just the Nifty and render statistics disappears.. What happens to our game, is probably just related to the complexity of our Nifty, it somehow hides(?) the regular viewport scene after the restart. But we can forget that for now.\nHere is in pictures what happens with the test code:\nBefore:\n\nAfter:\n\n. The statsappstate is in GUI view port. If I remove the Nifty, the statsappstate still vanishes. So I can conclude that it is not only Nifty that is feeling bad. And having Nifty doesn't cause this.. I can try the solution provided in https://hub.jmonkeyengine.org/t/problem-with-gui-z-order-after-graphics-restart/40985/4. To me it sounds something that we perhaps need to do anyway for consistency. Although again, I don't understand it :) But lets see what it does.. This https://hub.jmonkeyengine.org/t/problem-with-gui-z-order-after-graphics-restart/40985/4 seems to solve the https://github.com/jMonkeyEngine/jmonkeyengine/issues/801. But this issue remains.. Because I use it in the Map as well :( . Sure! Diamonds for the win :). Hmm, yesh, it is an object. Should go in there. Instinctively added value type because Map.... ",
    "Mordag": "I haven't checked this yet, but I thought this still could be an issue in 3.1.\n. Current status can be found here: https://github.com/void256/nifty-gui/issues/364 Seems like that's not going to be fixed anytime soon.\n. It seems like it's not a problem related to nifty. According to the tracker (https://github.com/nifty-gui/nifty-gui/issues/364) it has something to do with jmonkey.\n. ",
    "slyh80": "I just created a minimal test case with only 3 meshes. It crashes reproducably when loading into JMonkey. How can I send the file to you?\n. Sure. Here you go:\nhttps://www.dropbox.com/s/1gn0fjchq38m2x4/building-crash-test.blend?dl=0\n. ~~Maybe this bug also affected earlier versions of blender. I have a relatively complex scene with UV-mapped textures. 3 out of the 50 models have their textures maps slightly scrambled after loaded in JMonkey. In Blender everything look fine; the OGRE loader imported everything fine, too.\nAs soon as this bug is fixed I'll check again and maybe open a separate issue if this problem persists.~~ (Edit: Not related to this issue. I'll create a new one.)\n. Unfortunately this won't work for me. I created the file by appending(!) some meshes from an existing file to a newly created 2.75 blender file. I then removed one mesh after another until the file finally loaded without an exception in JMonkey. Then I undid the last deletion, saved again and verified that JMonkey now fails to load the file again, which it did. So I basically applied your work-around while creating the file already. ;)\nHave a nice wedding and and even nicer honeymoon! :gift:\n. Please also see the discussion regarding the same topic in the jMonkey forums: http://hub.jmonkeyengine.org/t/we-need-help-maintaining-the-sdk/33724/4\nSome users can simply re-save the broken test case and will then have a file that works with jMonkey. After trying out the current test build of Blender 2.76 (from 2015-09-02) I also could save and load my test case and my original more complex scene without errors in jMonkey. So maybe this issue was a Blender bug after all.\n~~I still see incorrectly UV mapped models in jMonkey when directly loading Blender files, though. The same models work correctly when exporting and importing through OGRE. This may indicate an issue either in the Blender loader or Blender itself.  I'll probably create a minimal test case and add a new issue for this.~~ (Edit: Not related to this issue. I'll create a new one.)\n. Why can't I expect the loader to keep my hierarchy intact? Technically it's possible AND makes sense. I want the lights to only affect the children of the node the light is in.\nExample:\nI have a building with 6 floors. On each floor there are 3 point lights. Does it really make sense that all 18 lights affect all objects in all of the scene? What makes sense to me at least -- especially performance-wise -- is to split the scene hierarchically into 6 separate floors that each has 3 lights. At least that's what I would do if I created the scene in code.\nOr is there another way to have 18 lights in one scene in JMonkey?\n. Well, you did it the other way around with the OGRE importer not too long ago.\nWhy do you have local and global light lists on each Spatial object if all lights are to be added to the root node anyway?\nAnd, still, if I wanted to build a 6-floor building with 3 point lights on each floor, how would I do this in jME?\n. And how would I do this if the blender loader puts all lights in the root node, although I thoroughly added them to the correct floor in Blender?\nThe problem is, of course, that Blender's renderer handles lights differently than jME does. Blender treats all lights globally, which makes some sense for its renderer, I guess.\nBut as long as jME has no proper scene editor as, say, the Unreal engine has, I'm stuck with Blender to create my scenes. And that includes creating a relatively complex hierarchy in Blender, although it does not make sense for the Blender renderer at all.\nIt's perfectly fine for me to use Blender to create my scences. Don't get me wrong on this. But the loader should allow me to import my scenes as close as possibly to how I layed them out in Blender. Because that's why I use Blender and the Blender loader in the first place.\n. ((LightNode)rootNode.getChild(\"myCoolLight\")).getLight().setEnabled(false)\nIf there was a method setEnabled(boolean) in the Light class, of course, which for some reason is not.\nWhy are you asking the question? Turning off a light is not harder whether it's attached to the root node or some other node.\n. Now you lost me. Are we really talking about the same problem?\n. So what you are saying is to add the lights to some other special node (\"Node\" node?!) to be able to disable lights. But lights only affect the children of this node, right? So they would do nothing. :) This is why you lost me.\nAs I said, I'm no expert in lighting in jME, so maybe I'm missing something.\n. Ooooh, you mean to place a Node/Empty in Blender, and later in code move the light to the location of this placeholder node. While the light is attached to the root node. Right? And then, if you wanted to disable the light, you could simply remove it from the root node's light list. Did you mean this?\nThat is of course possible. Not exactly what I would to do in my usecase, though. I also don't see an advantage over removing the light directly from its containing node and storing it somewhere.\nIt also would not fix my initial problem, which basically is the fact that a light attached to the root node affects all geometry, and kills the rendering performance to basically 0 fps if there are enough lights in the scene.\nActually moving the lights to their placeholders (or their parent) later in code so they won't do this anymore is not very elegant.\nTo allow turning lights off it would be quite easy to add a setEnabled()-method to the Light class. The graph's light lists would need updating no matter how you do it. You'd have to add a parent to the light, though.\nOr without the setEnabled()-method you could simply add a Map<LightNode, Node> to your code, where the Node is its old containing Node (aka Parent). The Light could easily be found through it's LightNode object (as created by the Blender loader) by name or some other measure.\nBut we digress. Everything written thus far has nearly nothing to do with my initial bug report, which I wrote because the Blender importer misplaces the lights and their LightNodes by adding them to the scene root node instead of their desired place in the hierarchy.\nI understand why you would want to add all lights to the root node for some use cases. But I don't understand why you would want do the same thing with the LightNodes. It breaks the parent-child relationship! (Going back to my original example: Due to this problem if you moved the House, the Porch SpotLight would not move with it.) It makes absolutely no sense!\nI still don't think it makes to much sense for the lights, either.\n(The Ogre importer puts the lights at the correct position in the graph, BTW.)\n. I already use lightmaps for the overall look and only use some realtime lights to improve realism when characters move near certain lights. I really want to position them in blender, because I don't want to use multiple tools to compose my scene. This worked pretty well so for. As long as I don't switch to the blender importer from the OGRE importer. ;-)\nYour argument about different exporters and importers is not valid, though. Blender has a hierarchy model. The Blender loader simply converts Blender's hierarchy to jME objects with the exact same hierarchy -- except for the lights.\nAnd, by the way, the OGRE exporter uses the same hierarchy as Blender. The OGRE importer basically does the same as the Blender importer. And it could easily add all lights to the root node as does the Blender importer.\nJMonkey and Blender are mostly compatible.\nI understand that it's a bit of a problem to use the lights from Blender directly. Currently I add custom properties (remove=true) to certain nodes in blender, which are then later removed during conversion from blender to j3o files in my build process.\nSo right now I already can tell Blender to ignore certain lights (by making them invisible to the renderer) during lightmap baking, and tell my simple conversion tool to ignore certain objects, including most lights. This way I can use blender for all modelling needs. For particle effects or simplified collision models et al I will or already do use placeholders, of course.\n. I'm still not really convinced that adding the lights to the root node is the right way to go. But anyway.\nThe fix for the incorrectly placed LightNodes is as follows. With this patch the lights themselves are added to the root node again:\n```\nIndex: BlenderLoader.java\n===================================================================\n--- BlenderLoader.java  (revision 5566)\n+++ BlenderLoader.java  (working copy)\n@@ -242,10 +251,8 @@\n                 Structure objectStructure = pObject.fetchData().get(0);\n             Object object = objectHelper.toObject(objectStructure, blenderContext);\n\n\nif (object instanceof LightNode) {\nresult.addLight(((LightNode) object).getLight());// FIXME: check if this is needed !!!\nresult.attachChild((LightNode) object);\n} else if (object instanceof Node) {\n+\nif (object instanceof Node) {\n                     if (LOGGER.isLoggable(Level.FINE)) {\n                         LOGGER.log(Level.FINE, \"{0}: {1}--> {2}\", new Object[] { ((Node) object).getName(), ((Node) object).getLocalTranslation().toString(), ((Node) object).getParent() == null ? \"null\" : ((Node) object).getParent().getName() });\n                     }\n@@ -253,6 +260,11 @@\n                         result.attachChild((Spatial) object);\n                     }\n                 }\n+\nif (object instanceof LightNode) {\nLightNode lightNode = ((LightNode)object);\nresult.addLight(lightNode.getLight());\n}\n             }\n         }\n         return result;\n```\n. If it really is deprecated it should be marked as such or removed completely.\n(Unshaded works like a charm, too.)\n. I use it.\n. Did you take a look at the code I mentioned?\n\nWhat could happen in the worst case if a line was moved a maximum of 0.5 \"pixels\" to the left or right?\n. Well, that's because in this case they actually are pixels, not just abstract units. So the suggested fix would in fact just snap the beginning of a centered line to a \"fullsize\" pixel.\nWe are talking about bitmap fonts here, after all.\nThere is one exception:\nIf you manually set the size of the font to something small (<2) by calling BitmapFont.setSize(), some of the centered lines will be off by some (screen) pixels. This is because a scale factor is applied to all positions and sizes, and so the pixels become in fact units.\nBut even for size values well below 1 the result looked far from catastrophic. (Some of the lines were off by about 1 character.)\nI still see no reason to not round the indent value to an integer when centering text. If the size of the font is not changed, everything looks nice and crisp. Currently half of all lines look blurry and crappy.\nIf in fact a user chooses to set the size to a very low value -- for whatever reason, and instead of simply scaling the Node -- the centering is off by some (screen) pixels, which is hardly noticable, if at all.\nTo have the best of both worlds, you could even take the scale into account before rounding:\nif (alignment == Align.Center) {\n                    gapX = (width-lineWidth)/2;\n                    if (getScale() > 0.3f) {\n                        gapX = Math.round(gapX);\n                    }\n                } else if (alignment == Align.Right) {\n. 100 - 77 = 23\n23 / 2 = 11,5\n(100 = box width; 77 = line width)\nSo, no, an even-sized text box wouldn't help a bit.\n. Never mind.\n. I suspect class RenderManager (line 334) as part of the problem.\nfor (ViewPort vp : viewPorts) {\n            if (vp.getOutputFrameBuffer() == null) {\n                Camera cam = vp.getCamera();\n                cam.resize(w, h, true);\n            }\n            notifyReshape(vp, w, h);\n        }\nNote: I'm a layman regarding jME's internals.\nBut resizing all viewports to the window's(!) width and height does not make too much sense for me. Right?\n. ",
    "bgroenks96": "The problem was with the archaic EventBus library that Nifty 1.4.x uses. void256 merged the EventBus library into the Nifty source tree and fixed the bug.\nTo fix this issue:\n1. Get the latest snapshot of Nifty 1.4.2 from this repository\n2. Delete the EventBus JAR from your maven cache or libs folder. This is really important!\n3. Tell Maven, Gradle, Ant, etc whatever you're using to use the latest version of Nifty from the repo mentioned above. The EventBus classes (along with patch) are now packaged in the Nifty JAR.\nAfter that, the problem should be resolved. If you encounter any further issues, please let us know here.\n. ",
    "gilzamir": "Right! Thanks. I will go to edit now!\n. I checked if  car.getControl(AnimControl.class) returns null and see that one do not returns null.  When i see stacktrace, i checked that error is in line 131 (listener.initialize();)  of the class LwjglAbstractDisplay. The  model file is here: https://www.dropbox.com/s/4zttonntxotgg9o/arm.mesh.j3o?dl=0.\n. The problem is a model  in my project folder. Thanks! \n. ",
    "kaloyanDEV": "what was the problem of the model and how you fix it, i m having the same issues in blender model runs but when i convert it j3o only shows model\n. ",
    "ben0bi": "(Now I use charAt but it is still an issue)\n. Sorry my fault. I took second parameter as length, not as endIndex.\nBut why does it make the first parameter to negative? Does it count from endIndex backwards to beginIndex? Funny...\n. ",
    "satscape": "streamCache option is false, I don't call setTime()....just .play() or .playInstance()\nShould streamCache be true? I just wanted to play a sound effect, I didn't realise how complex it is.\nHow do I know if a sound file \"seekable\"...it's an ogg file containing a single one-shot sound effect.\nI'm quite happy to stick with SDK 3.0, it does everything I want and more which including playing sound effects.\n. @shadowislord \nI made helper method to attach sounds to a node:\njava\npublic static AudioNode setAudioSource(Node attachToNode, String name, boolean isOneShot) {\n        AudioNode node = new AudioNode(assetManager, \"Sounds/\"+name+\".ogg\", !isOneShot);\n        node.setPositional(true);\n        node.setLooping(!isOneShot);\n        node.setVolume(1);\n        node.setReverbEnabled(false);\n        node.setRefDistance(100); \n        node.setMaxDistance(10000000);\n        attachToNode.attachChild(node);\n        return node;\n    }\nThen when I want to use it:\njava\nAudioNode audioStep;\n// blah....\naudioStep=AudioHelper.setAudioSource(theNode,\"step\",true);\nThe true is for \"one shot\", so streaming=false. I think I read in the wiki that one off short sounds should not be streamed and long/music sort of sounds should be streamed, has this changed?\n*UPDATE: I changed first line in helper to:\njava\nAudioNode node = new AudioNode(assetManager, \"Sounds/\"+name+\".ogg\", true,true);\nand the exception is no more. Is that the correct way? Just seems odd to stream a 0.3 second sound effect. :-)\n. @shadowislord Thanks, I'll experiment and see what works. In my original code above, I was using the other overload with 3 parameters and setting it to false, so maybe the 4 parameter overload with  ..false,false) will work.\n. ",
    "RYDB3RG": "Hi,\nwsNormal seems to be used in most other PBR shaders (cinder experiments, cmftstudio, pbrviewer)\n. Its barely noticable. Using a testcubemap (which is red on -X) and outputting indirectDiffuse only, it seems to be a bit more red'ish with normal than refl\n. ",
    "alexVengrovsk": "@pspeed42 @Nehon You are right. Sorry for bothering you.\n. Not realy, just let's to make code shorter and to exclude unnecessary method's call.\n. ",
    "nordfalk": "OK, I have used several days on this one!\nHere is what extensive debugging finally brought to me.\nAs you can see from https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-android/src/main/resources/com/jme3/asset/Android.cfg the com.jme3.asset.plugins.AndroidLocator gets as / as path:\n```\nAndroid specific locators\nLOCATOR / com.jme3.asset.plugins.AndroidLocator\n```\nThis means that the locator gets rootPath = \"/\" .... and now look at https://github.com/jMonkeyEngine/jmonkeyengine/blob/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-android/src/main/java/com/jme3/asset/plugins/AndroidLocator.java#L26 , in the case where the AssetKey starts with a \"/\" (like \"/Textures/...\")\nString assetPath = rootPath + key.getName(); // will start with TWO slashes, like \"//Textures/...\nThe // Fix path issues will remove ONE of the slashes, but not the other, which will make the system look in the root of the Linux Android file system :-(\nProposed fix 1: Avoid / as path \n```\nAndroid specific locators\nLOCATOR . com.jme3.asset.plugins.AndroidLocator\n```\n(best would be to set rootPath = \"\" but that isnt possible as it would not be valid syntax)\nProposed fix 2:  ... or change to a while loop instead of an if statement:\n// Fix path issues\n        while (assetPath.startsWith(\"/\")) {\n            // Remove leading /\n            assetPath = assetPath.substring(1);\n        }\nProposed fix 3:  replace \"//\" with \"/\" before removing heading slash\n```\n        assetPath = assetPath.replace(\"//\", \"/\");\n        if (assetPath.startsWith(\"/\")) {\n            // Remove leading /\n            assetPath = assetPath.substring(1);\n        }\n```\nThis bug affects all people that uses the SDK terrain editor (jMonkeyEngine 3.1-beta1-b002-SNAPSHOT) as it wrongly puths forward slashes in the paths of the textures in the .j3o file.\nSee also discussions\n-  https://hub.jmonkeyengine.org/t/solved-jme-3-1-android-terrain-texture-problems/34274/25 (contains a workaround where all textures are set manually)\n- https://hub.jmonkeyengine.org/t/google-cardboard-support/31684/33?u=jacobnordfalk  (issue 3)\n. Until this is fixed in the source the easiest workaround for the wrong path in the AndroidLocator is probably to unregister the locator with the wrong path and register it again with an empty path before you load the scene\n```\n        assetManager.unregisterLocator(\"/\", AndroidLocator.class);\n        assetManager.registerLocator(\"\",AndroidLocator.class);\n    Spatial scene = assetManager.loadModel(\"Scenes/myScene.j3o\");\n\n```\n. ",
    "PiotrSliwa": "I could not reproduce the crash in version 8958459ef99b94bce2487d2ed9699a6e7d8c63df. Does it still occur?\n. ",
    "marshhxx": "Hi @pateman \nI'm experiencing a similar issue on Android. \nI exported a 3ds Max model to OgreXml. The animated model works perfectly but the first time takes about 20s to render. \nI then imported my OgreXml model to jMonkeyPlatform and convert it to j3o binary. The model takes 1s to render but animations are broken.\nDid you solve it adding rootBone.reset(); in the Skeleton.read() method?\nDid you then import the new jars to your project?\nThanks for the help!\n. @pateman Thanks for the help! I try it and worked :+1:\nI found a simpler solution that worked where you don't need to change the library. Have a look at this link http://hub.jmonkeyengine.org/t/android-graphic-glitches/33403/25\nBasically what you need to do is apply \"setHardwareSkinningPreferred\" to your Spatial.\nSkeletonControl skeletonControl = player.getControl(SkeletonControl.class);\nskeletonControl.setHardwareSkinningPreferred(true);\nHope it helps!\n. ",
    "pateman": "@marshhxx, yes, that's basically what solved the problem for me. I didn't really import a modified JAR. I just downloaded the source file from the repo, put it under the same package in my project's source, modified it, and rebuilt the project.\n. ",
    "Ali-RS": "Will take this. . this post may help you.\nhttps://hub.jmonkeyengine.org/t/solved-problem-with-switching-to-jbullet-in-jme-3-1-alpha-5-sdk/35698\nIf you add stack-alloc.jar and jbullet.jar it works like it used to.\n. Why no one merge these commits? \n. Ah, alright\nhope it passes all reviews and be merged to core soon.\nWill study about open cl and open gl  till then :smiley: \n. Thanks @riccardobl \nCan we still use bulletAppState.setThreadingType(BulletAppState.ThreadingType.PARALLEL);\nsee here : https://jmonkeyengine.github.io/wiki/jme3/advanced/bullet_multithreading.html#toolbar\nit seams bullet uses experimental Bullet 3 OpenCL now. Is it possible to support it with JME new OpenCL wrapper ? \nthanks to @shamanDevel \n. Ah.. Yes, got that. Thanks for explanation.\n. I thought it is a bug for that reason posted it here. \nSorry\n. short answer : https://hub.jmonkeyengine.org/t/jmonkeyengine-3-1-alpha-2-released/35197/11?u=ali_rs\nif you search the forum you can find more answers https://hub.jmonkeyengine.org/\n. It may be better to put wiki related issues in JME github wiki page https://github.com/jMonkeyEngine/wiki/issues \n. @mitm001 , @vinf100 \nYou are welcome to put broken links here. I will try to fix them.\n. I uploaded .zip because here it needs to be located from zip. \nI can also upload extracted folder if you want.\n. @Nehon \nAny idea ? \n. Thanks, I will do as you said for my future PRs.\nRegarding this PR, it seems core developers are not agree with putting town.zip file in testdata. Maybe we need to separate jme3-testdata from engine to a new repo in github. I think JmeResources is created for this purpose.\nSo i am going to close this for now.\n. Also https://blog.lwjgl.org/memory-management-in-lwjgl-3/\nIt describes Memory management strategies. \nPlease take a look at Strategy4  description which is the current strategy for JME. . Awesome :smiley: . Yesterday I grabbed a few fbx model, I want to test this new fbx loader.\nA bit hard to copy paste the code from here to my fork, so will appreciate you if you can merge this commit into a temporary branch (like NewFBXLoader) so I can build from it locally. \nThanks. Sorry for late reply \nFinally I found some time to test new fbx loader. \nI tested an animated fbx model which exported from blender. (fbx binary 7400 version) but the animation was broken. (the animation was stretched on arms and legs). \nI do not use Maya, so I could not test it. \n@Eirenliel  have you tried an fbx model exported from blender ? . > Also can you send the file you are talking about for us to test in the new version?\nYes, you can get it here : \nhttps://drive.google.com/open?id=0B35eWZpi0dBoZmtwNjdRUGp6Skk\n. Also, what bone rotation mode does your fbx loader support ?\nQuaternion(WXYZ)  or XYZ Euler or ... ? . Okay.\nCan you please test these two fbx files also : https://drive.google.com/open?id=0B35eWZpi0dBoVTZ1MlVBTTZpaUE\nI have followed this tutorial for exporting them from blender : http://digitalrune.github.io/DigitalRune-Documentation/html/6f749972-9cb2-4274-b283-c327ba45e379.htm \nin one of them i enabled !EXPERIMENTAL! Apply Transform  when exporting and in the other one not.\nI am getting diffrent result for each one in jme. \nI hope they play fine in your code :)\nThanks so much. Thank you.. > vehicle doesn't work only in bullet (native) or for jbullet too?\nOnly in native bullet, \nwhich I think someone was able to solve it. \nsee https://hub.jmonkeyengine.org/t/bullet-vehicle-problems/37578/19?u=ali_rs\n. Thank you @JavaSaBr  :+1: . Here you are\n```\nimport com.jme3.animation.AnimControl;\nimport com.jme3.animation.Bone;\nimport com.jme3.animation.LoopMode;\nimport com.jme3.animation.SkeletonControl;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.light.DirectionalLight;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.math.Quaternion;\nimport com.jme3.math.Vector3f;\nimport com.jme3.renderer.RenderManager;\nimport com.jme3.scene.Spatial;\n/\n\n * @author Ali-RS ali_codmw@yahoo.com\n/\npublic class TestBindPoseDeform extends SimpleApplication {\nSkeletonControl jadeSkelControl;\n\n@Override\npublic void simpleInitApp() {\n\n    //Load model\n    Spatial jade = assetManager.loadModel(\" Path to Jade_Test_BindPose.j3o\");\n\n    //Get SkeletonControls\n    jadeSkelControl = jade.getControl(SkeletonControl.class);\n\n    //STEP 1\n    //Set bind rotation to Jade skeleton for arm bones\n    //Works fine\n    setBindRotation(\"arm_stretch.l\", new Quaternion(0.005047631f, -0.051679127f, 0.05067572f, 0.9973645f));\n    setBindRotation(\"arm_stretch.r\", new Quaternion(0.005047639f, 0.05167912f, -0.050675597f, 0.99736446f));\n\n    //STEP 2\n    //Saves the current skeleton state as it's binding pose. NOT WORKIN !\n    //after calling setBindingPose() the bones return to their initial states\n    jadeSkelControl.getSkeleton().updateWorldVectors();\n    jadeSkelControl.getSkeleton().setBindingPose();\n\n    //STEP 3\n    //Play animation\n    AnimControl animControl = jade.getControl(AnimControl.class);\n    animControl.createChannel().setAnim(\"locomotion_pack:walking\");\n    animControl.getChannel(0).setLoopMode(LoopMode.Loop);\n\n    //attach target spatial to scene\n    rootNode.attachChild(jade);\n\n    /**\n     * A white, directional light source\n     */\n    DirectionalLight sun = new DirectionalLight();\n    sun.setDirection((new Vector3f(-0.5f, -0.5f, -0.5f)).normalizeLocal());\n    sun.setColor(ColorRGBA.White.mult(3));\n    rootNode.addLight(sun);\n}\n\nprivate void setBindRotation(String boneName, Quaternion rot) {\n\n    Bone targetBone = jadeSkelControl.getSkeleton().getBone(boneName);\n    //Keep BindPosition and BindScale, only set BindRotation \n    targetBone.setBindTransforms(targetBone.getBindPosition(), rot, targetBone.getBindScale());\n}\n\n\n@Override\npublic void simpleRender(RenderManager rm) {\n\n}\n\n@Override\npublic void simpleUpdate(float tpf) {\n\n}\n\n\n\n\npublic static void main(String[] args) {\n    TestBindPoseDeform app = new TestBindPoseDeform();\n    app.setShowSettings(false);\n    app.start();\n}\n\n}\n```\nModel download link : Jade_Test_BindPose.j3o\nNote : \nPlease comment/uncomment each step (1,2,3) in the code above to see the different result for each one. \nIn case you have question feel free to ask \nThanks for your time. Sorry for late response. \n\nAll the transforms in the animation bone tracks are relative to bind pose, so changing the bind pose without updating those tracks will alter the animations in ways that you might not anticipate.\n\nYes, I know and my point of modifying bind pose is exactly because of this reason. \nI have an animation data which works correctly on my T-posed characters. But some of my characters bind pose are not in T-pose for this reason I am getting faulty result when I play the animation on them. To fix this I need to modify their bind pose to T-pose so my animation can play correctly on them.\nProblem might be something related to this part :\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/9578b0410eedb0c324d9a8570b5be1c5d38f6ea4/jme3-core/src/main/java/com/jme3/animation/Bone.java#L577. Yes I am aware of your library and other alternative options to solve my problem.\nBut apart from those I am curious why this bug happens after calling setBindingPose(). \nSome thing should corrupt bone SkinningMatrices after call to this method. \nAs mentioned previously on forum topic, the simplest case to reproduce this bug is to load a rigged model which has no animation on it then try to modify bind pose on a bone (this will work), but next if we try to call setBindingPose() on skeleton you will see that bone is returned to its initial pose which had before we modify it's bind pose.\n. Right, \nFixed.. I think we can close this. . @stephengold  I add the test in #1017 . \nCan this PR be merged ?. @empirephoenix  any thought ? . @pspeed42 \n@MeFisto94 \nIf you are OK with this PR, then would you mind to merge it please :) . @empirephoenix  thanks for merging it. \nRegarding \n\nMight another approch be, to drain the XWindow error queue on JME-LWJGL3 init?\n\nI took a look at it but was unable to understand what is going on there. Sorry about that :( \nI just cloned this PR from what @Renanse  did here : https://github.com/Renanse/Ardor3D/commit/3984929e9763f2e80bcbac04f875912e00a26086\nBased on what @Spasi said  here https://github.com/LWJGL/lwjgl3/issues/149#issuecomment-372135525\nAnd tested it on JME. It works just fine. . Don't see any strong reason why it should not be :). Tested your fix, it works fine. \nThanks. . Thanks Stephen. . JME officially supports PBR since 3.2.0 \nYou can take a look at release page for added features: https://github.com/jMonkeyEngine/jmonkeyengine/releases. You can use PBR + gLTF in jme with rig + morph animation. (For morph animation you need to use master branch). \nI have tested bunch of gltf models from Sketchfab (I used Sketchfab Plugin + glTF-Blender-Exporter) and was able to load them with no issue in jme.\n. JME does not support module system at the moment. You should add sourceCompatibility = 1.8in your project if you want to use Java 9 onward. \nIf you wish you can go ahead and make a PR to support module system on JME :). Once I created a pr #565 to add town.zip to jme testdata which was not merged. You can read the reason for the objection there. . Note, town.zip along with some other assets are also available in wiki\nhttps://github.com/jMonkeyEngine/wiki/tree/master/src/docs/resources/Scenes. > Maybe the GLTF Exporter is broken or our importer is broken? It definitely looks like Roughness and Metallicness is swapped somewhere for users importing from blender.\nAt least I know it is broken in their new  glTF-Blender-IO add on. \nhttps://github.com/KhronosGroup/glTF-Blender-IO/issues/200 \n. > com.jme3.anim.AnimClip\n\ncom.jme3.anim.AnimComposer\ncom.jme3.anim.AnimTrack\ncom.jme3.anim.AnimationMask\ncom.jme3.anim.Armature\ncom.jme3.anim.ArmatureMask\ncom.jme3.anim.Joint\ncom.jme3.anim.MatrixJointModelTransform\ncom.jme3.anim.MorphControl\ncom.jme3.anim.SeparateJointModelTransform\ncom.jme3.anim.Weights\ncom.jme3.anim.interpolator.\ncom.jme3.anim.tween.\ncom.jme3.anim.tween.action.\ncom.jme3.anim.util.\ncom.jme3.app.DetailedProfiler\ncom.jme3.app.DetailedProfilerState\n\nThese are created by @Nehon so I believe we can update them to standard JME copyright.. @pspeed42  now that jme core utilise Tweens, do you think it would be good idea to deprecate them from Lemur and put them in jme core ? \nLemur already has dependency on jme core so this wont be an issue for Lemur. \n. > I think they were changed after moving, weren't they?\nYes, the following has changed: \nA new interface added \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/java/com/jme3/anim/tween/ContainsTweens.java\nand Parallel, Sequence, Stretch tweens implement it. \nAnd AbstractTween now also implements JmeCloneable \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/13d00e0df3c10a40728834f36d40af04b8b00482/jme3-core/src/main/java/com/jme3/anim/tween/AbstractTween.java \n@pspeed42  any issues with above changes ? \n@pspeed42 , @stephengold  if you feel this is out of scope of this issue, and it would be better to get asked in forum, please let me know.\n. Ok, I see. Thanks.\n\n\"ContainsTweens\" is not a name I'd have ever picked...\n\nYes, maybe \"CompositeTween\" or \"BranchTween\" would be a better name... anyway it's upto @Nehon  I guess ;)  \n\nnor would I have returned the raw array. Not sure what it's used for, though.\n\nThis is only place I found it is used.\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/d57c362ec3b510c1ba6356f719efa3b1576b95c6/jme3-core/src/main/java/com/jme3/anim/tween/action/BaseAction.java#L27\n\nMany of them were created by @Nehon, but a few have SimSilica copyrights (meaning @pspeed42 created them.)\n\nShould we keep SimSilica copyrights on those 3 classes (Tween.java, Tweens.java, AbstractTween.java) and use JME standard copyrights for the rest ? . Thanks for the fix @stephengold  :). Sorry, unfortunately this is out of my knowledge  :(\nAlso I have no experience with Nifty gui.\n. Thanks Stephen :). That's how @pspeed42 is doing in his pr : https://github.com/Simsilica/SimMath/commit/385d71d3413529cdd5ce9fa6ca8f6a391fea72e1 \nI am creating an equivalent to that in JME. . Adding this check inside isSimilar() should fix it : \nif (!isValidVector(other)) {\n            return false;\n }\n or maybe this one is better ? : \nif (!isValidVector(this) || !isValidVector(other)) {\n            return false;\n }\nEdit: \nNot found isValidQuaternion() check, should we add a similar check for Quaternion ?\n. > Since the tests are for delta > epsilon, can you explain in more detail how the method is broken? (Note: NaN > epsilon is always true.)\n@pspeed42 \nhttps://www.baeldung.com/java-not-a-number\n```\nSystem.out.println(\"NaN == 1 = \" + (NAN == 1));\nSystem.out.println(\"NaN > 1 = \" + (NAN > 1));\nSystem.out.println(\"NaN < 1 = \" + (NAN < 1));\nSystem.out.println(\"NaN != 1 = \" + (NAN != 1));\nSystem.out.println(\"NaN == NaN = \" + (NAN == NAN));\nSystem.out.println(\"NaN > NaN = \" + (NAN > NAN));\nSystem.out.println(\"NaN < NaN = \" + (NAN < NAN));\nSystem.out.println(\"NaN != NaN = \" + (NAN != NAN));\n--\nNaN == 1 = false\nNaN > 1 = false\nNaN < 1 = false\nNaN != 1 = true\nNaN == NaN = false\nNaN > NaN = false\nNaN < NaN = false\nNaN != NaN = true\n```\nBut that's not the case if we use Float.compare(f1, f2) : http://java2s.com/Tutorials/Java/Data_Types/How_to_compare_two_Java_float_values.htm\n\nint compareTo(Float anotherFloat) compares two Float objects numerically. Float.NaN is considered to be equal to itself and greater than all other float values including Float.POSITIVE_INFINITY\n\n. The other way to fix it is to use\nif (Float.compare(Math.abs(other.x - x) , epsilon) == 1) {\n            return false;\n}\nwhich one do you prefer ?. Okay, I am going to update the pr.. Updated the PR. . @stephengold does the new change solve the problem with NaN ? . @stephengold can this be merged ?. Thanks :). It's an improvement for AnimComposer which is aimed for new animation system for JME 3.3. \nI believe it's not completed yet, and @Nehon is the one who works/was working on this system. \npublic void removeLayer(String name) {\n        layers.remove(name);\n    }\npublic Action removeAction(String name) {\n        return actions.remove(name);\n    }\nHaving an option to makeLayer() also there should be an option provided to remove it. Shouldn't there ? \nThe same goes for removeAction(). \nif (actionName == null) {\n            // Clear current action from specified layer\n            l.currentAction = null;\n            return null;\n        }\nthis one lets you stop an specific layer from interpolating it's current action without removing layer itself,  which is meant for this : \nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/eeac6d10eb3a5a128dd7988775b35cd5a756681c/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L162 \nEdit: \n@empirephoenix  currently the only way to stop current action from running is to switch it by other action or set it's speed to 0. \nWith this commit we can explicitly clear out current action from layer or we can remove layer or action completely if we do not need them. This will be helpful when managing multiple layers which are running simultanesouly.. Added an appropriate javadoc for setCurrentAction() method.. Moved removing of current action to a separate method. \n@empirephoenix \nNow for each of these methods \nmakeAction()\nmakeLayer()\nsetCurrentAction()\nwe have a corresponding method to clear it out \nremoveAction()\nremoveLayer()\nremoveCurrentAction()\nHope it will make sense to you. . Can this be merged ?. @stephengold,  JavaDoc added. . @stephengold  thanks so much for merging the PR :). PR #946 has not merged yet, so it shows  All checks have failed. @empirephoenix  thanks :). Thank you Stephen :). Hi @tomreineke\nPlease ask your issues at forum there you can get more help. (https://hub.jmonkeyengine.org/)\nFbx support is not good at JME. It's not only JME that suffers this, even Blender has problem with Fbx models specially animated models. (You know from my experience dealing with Fbx will cause you a headache). (see https://hub.jmonkeyengine.org/t/import-fbx/41456)\nI suggest to convert your model to gltf instead then import them to JME. . I am pinging @erwincoumans just in case he might have some insight of the issue.\nsphere-sphere collisions detection should really be something that provided in any physics library, It's pretty weird that bullet can not handle it. . Any objection ? . Thanks :). @stephengold  if you think this is an issue to not be able to turn of looping if animation is backward then yes I need help to fix it before we merge it to master.\n(In my case I do not need this feature, Actually I do not need backward animation at all in my game) \n. I guess it is because time never become >=  currentAction.getLength() when animation is backward (speed < 0) in this line\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/9357231911213bc93970ac6f0d74602608b1c1b8/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L318\nthus this line never returns false\nhttps://github.com/jMonkeyEngine/jmonkeyengine/blob/9357231911213bc93970ac6f0d74602608b1c1b8/jme3-core/src/main/java/com/jme3/anim/AnimComposer.java#L240\n. I think supporting loop=false on backward animations going to add some dirty code so @stephengold I think it is better to add a note in setLooping() method javadoc and mention that setting loop has no effect on backward animations.\nWhat do you think ? . @stephengold  above changes should solve the issue.\nI will appreciate if you take a look at it and probably run the test I provided in TestAnimMigration.. @pspeed42  may I ask about your idea :)\nCan I merge it (after resolving the conflict introduced with this pr https://github.com/jMonkeyEngine/jmonkeyengine/commit/b9c13a209acd0ec808ea85307d3cfb0fd00d07bb)  ? \nEdit: I have already tested it and all the added features working fine.. > Does not the animation code already loop?\nYes, it already loop but there is no proper way to disable it.. > So you want an animation that plays once and then stops? \nYes\n\nAnd this is not already supported?\n\nYes\n\nI was 99% sure the wave animation in spacebugs runs and then stops on its own.\n\nHmm, unless you set the speed to 0 or replace the animation in somewhere it will loop waving, I am sure.. Okay, thanks so much. \n. I suggest this package also in case you are interested:  com.jme3.anim\nin jme3-core module : https://github.com/jMonkeyEngine/jmonkeyengine/tree/master/jme3-core/src/main/java/com/jme3/anim. ",
    "pdid17": "This issue should be closed with the merging of the PR.. Closed to try again with given guidlines.. The Travis CI checks should pass and this PR will become valid when/if PR #834 is approved. . The build is complete and the branch is ready to be merged.. Sorry, this wasn't clear enough I'll fix it. What it does is sets the near clip plane without altering the user view of the projection. Directly setting Fustrum Near will change the dimensions of the image.. ",
    "TehLeo": "UnitTest: http://pastebin.com/00bFr50P\nI have wrote a test and used approximateEquals. With epsilon 0.00001f approximateEquals will often return false. The test will pass the first 100000 iterations with epsilon = 0.029f.\nExample output:\nRunning with 100k iterations with epsilon 0.025f, the test will stop at iteration: 67821. (output included below) Looking at the results we see that 0.004163742(original) is not equal to 0.004043579(improved) using the epsilon 0.025f(it is with epsilon 0.029f). The bigger the epsilon needs to be to pass the test, the bigger the difference between the two methods is. This does not answer which method is more accurate. We can, however, calculate the quaternion vector product using a mathematical software. In this case SageMath outputs the result: (3806.79915617854, 0.00397302788272214, 182.414682736066) and 0.00397302788272214 is closer to 0.004043579(improved) than to 0.004163742(original).\n------Output with eps = 0.025f\nIteration: 67821\nquat (-0.08545344, 0.2544827, -0.93980426, -0.2114336), vect (-3361.9124, -1759.1035, 357.90723)\nstore60 (3806.7993, 0.004163742, 182.41466), store15 (3806.7993, 0.004043579, 182.4147)\ndiff (0.0, 1.20162964E-4, -4.5776367E-5)\n(true,false,true)\n. The test is now inside the directory.\n. Duplicate of #764 . Could you try to add \ngl.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);\nbefore the line that throws error and see if it helps?\nOther than this, it does not look like you are running opengl es 2.0 which apparently does not support GL_TEXTURE_MAX_LEVEL.\nPS: Before the Jme error happens, there are plenty of errors and warnings. It would be helpful if these were not present:\nSEVERE: Cannot locate texture loading.png (Flipped) (Mipmapped)\nWARNING: The texture ... has linear color space, but the material parameter DiffuseMap specifies no color space requirement, this may lead to unexpected behavior.\n. I have tested with jme 3.2 alpha. And it seems this issue has been fixed in that release. Thus, unless someone else can reproduce it I will close this issue.. Yes, just as shaman pointed out, it got to pick an uniform point on a sphere. The current method, picks a random point in a box, repeatedly until the point is in the sphere. It forgets to add the center.\nHere are two methods:\ndo {\n    store.x = (FastMath.nextRandomFloat() * 2f - 1f);\n    store.y = (FastMath.nextRandomFloat() * 2f - 1f);\n    store.z = (FastMath.nextRandomFloat() * 2f - 1f);\n} while (store.dot(store) > 1);\nstore.multLocal(radius);\nstore.addLocal(center);\nOr a method without a while loop. (ref: https://math.stackexchange.com/questions/87230/picking-random-points-in-the-volume-of-sphere-with-uniform-probability  )\n```\nfloat l = FastMath.pow(FastMath.nextRandomFloat(), 1f/3f);\nfloat u = FastMath.nextRandomFloat()2f-1f;\nfloat o = FastMath.nextRandomFloat()FastMath.TWO_PI;\nstore.z = radiuslu;\nu = FastMath.sqrt(1f-u*u);\nstore.x = radiusluFastMath.cos(o);\nstore.y = radiusluFastMath.sin(o);\nstore.addLocal(center);\n```\n. I've checked your changes. It creates random points within a sphere volume.\nHowever, the points are not uniformly distributed. \nSee the two methods I posted in the comment above.. Almost there. Except the line:\nstore.multLocal(FastMath.nextRandomFloat() * radius);\nI have to say you are really trying to change the code I provided, which is fine, but try to understand the problem as well.\nThe random point was already selected uniformly within unit sphere volume within the while loop.\nWhat is left to do is multiply it by radius and add the center.\nThus change that line back to.\nstore.multLocal(radius);. Yes, all is fine with #764 .. R16F, R32F, RG16F, RG32F are standard formats required by opengl spec.\nThey are useful for various things, such as lookup tables, etc. I am currently using them in my wip volumetric cloud rendering.\nI thought changing the order of the enum might cause issues, but did it to sort values in more meaningful way. I'll redo the request to include the formats at the end.. With the new request: The order of the enum elements is preserved. I have added the 4 formats at the end and added comments for the integer formats.. Yes, sorry for this. First I made a test and uploaded it to pastebin. Then I forgot I have to change this since the new build will use the new method. I'll fix it now.\n. Yes, rotating a vector by quaternion requires such \"high\" epsilon value. \nAs I wrote above, eg. if we want to rotate vector (-3361.9124, -1759.1035, 357.90723) by a quaternion (-0.08545344, 0.2544827, -0.93980426, -0.2114336):\nWe get a results:\nNew method      : (3806.7993, 0.004043579, 182.4147)\nJme old method: (3806.7993, 0.004163742, 182.41466), \nSageMath:          (3806.79915617854, 0.00397302788272214, 182.414682736066)\nFrom these three results(mainly the y-coordinate in this example) and taking SageMath output as a reference, the new method would need quite a high epsilon to be considered equal. In this example eps = 0.046f for the old method and eps = 0.018f for the new.\n. It would be simpler, but would not be uniformly distributed.. ",
    "john01dav": "You could try using my noise library. It's under the BSD license like JME3 is.\n. Would it be better if I did the following:\n- Fix the state management (ie. add more possible states)\n- Rename one of the getState() methods\n- Remove SimpleApplication delegations\n- Move the RunnableWrapper class to SimpleApplication (probably in a separate pull request, in fact I'm going to go do this now)\nAs for BaseAppState, I'm not sure how I can fully integrate this with it (not that I think that is a bad idea) due to the generic type it provides and the enum to keep track of the state rather than set of booleans. \n. The main thing I want to contribute is something to provide easy access to the application class via generics. I don't think it is wise to add a generic type to an existing api class. Perhaps extending BaseAppState with GenericAppState to simply add the generic feature would be wise?\n. I have made the requested changes.\n. I just found out that adding a skybox fixes the issue for some reason (changing the viewport background doesn't).\n. I assumed that it is a JME bug since non of my packages are involved in the stack trace. I'll post it to the form anyway though.\n. Oops, I just noticed that I didn't post this in the SDK project. I'll repost it.\n. Those are some really good points, some of which I wasn't aware of. In light of that, however, what GUI api do you recommend for nice looking (read: not swing or native) Java applications? . ",
    "dmdm22": "You are right, just posted to jme forum:\nhttp://hub.jmonkeyengine.org/t/simple-jbullet-collision-of-two-nodes-geometries/34639\n. ",
    "Eviradnus": "@gouessej Doing so should solve my NPE problem indeed (though I cannot easily test this actually, since it's a random concurrency issue), but the whole loadCleanerMethods() method would become a synchronized bottleneck... which is not a good idea.\nRather, I reckon using something like a double-checked locking would enable the early return short-cut, while avoiding a globally synchronized block.\n. Or, as @empirephoenix said, and if initializing these fields without needing them is not an issue, then a simple static init block may do the job. :)\n. Well, it seems to me the use of this AtomicBoolean loadedMethods is a failed attempt at double-checked locking... but I may be wrong.\nWhatever, do as you please: I'll stick to my try/catch/ignore workaround for now, since it's only about freeing memory (and it happens at most once or twice at startup)... Not that critical.\n. ",
    "gbutler69": "Hey, thanks for the response. It turns out that I completely mischaracterized the issue. The problem has nothing to do with the Dark Monkey theme. The problem was entire an issue of the completely broken Ubuntu 15.10 Gnome/Gtk themes. As you showed in the Start-Up Dialog code, it is hard-coded to use the \"Platform Look-and-Feel\", which, in  my case would be Gtk and whatever theme is selected in Gtk. The problem was completely broken Gtk Theming.\n. ",
    "lightbringer": "Well, it's up to you. I however wanted to make the network layer as transparent as possible, not dealing with breaking up messages in my app code, and the methods accepting other ByteBuffer were already there. I'll create a a new Pull request for the master branch with just the fixes then.\n. Something weird happened here. The update in Node.java was done for another issue, which to my knowledge has been applied elsewhere (PR #403 ). No idea why this pops in this thread. I blame git for being super confusing to me.\nAnyway, I havent't touched the original issue here for a while. But this PR should't have any lines besides a few. The original PR was a bit messy, true.\nI remember there also being another problem with the SavableSerializer I found after submitting this: you can't put more than one Savable in a ByteBuffer, because the Importer will suck the Buffer dry no matter if it belongs to object it's importing. Has that been addressed recently or is that by design?\n. The actual fix is replacing line 228 with a try/catch block (Though my IDE seems to have ignore my wish to make this Java 6 compliant and converted it to a multi-catch). \nLine 236 removes an unnecessary object instantiation.\nThe rest is just auto-formatting screwup. Is their a style file for Eclipse or something similar somewhere in the repo? Haven't found anything.\nThe changes SavableSerializer.java aren't solving the whole problem, as I commented on above.\nComment on sending SceneGraphs over the wire: I think the ability to clone the scene graph is one of the key advantages of JMonkey when developing AI methods that use a forward-model, i.e. agents that want to predict the outcome of an action by cloning the graph, invoking the action on the copy, and observing the resulting world state, without implementing a custom parallel scene graph. (I additionally send these to number crunching cluster nodes). However, this makes e.g.Unity unusable for me. Who thought \"making the SceneGraph a singleton\" is a brilliant idea?\n. > You should not use the scenegraph for logic, only for visuals, you are actually doing an antipattern here. \nNot entirely sure how to read your comment, and what you mean by \"logic\" or how this is an anti pattern. Besides, my application has no visuals - it runs completely headless. I'm not writing a game here ;-)\nThe point of a forward-model is to predict the outcome of an action that you don't know, and you want to replicate the actual environment as closely as possible. Of course, I could implement something that looks like the scene graph but isn't, but I don't see the point of that. See https://en.wikipedia.org/wiki/Internal_model_%28motor_control%29\n\n...at least when working on an open source project. \n\nYeah, discussing pro&con of automatic code styles is like entering the rabbit hole. At one point in my life, I worked on industry projects with 200+ participants on the code base, and every time there was some poorly formatted code checked in, the person to blame had to throw a round. Because that If-Statement there was supposed to cover the whole block. What block? Oh ...\nBut hey, it's your kitchen ;-)\n. ",
    "Triangle345": "The installer seems to be working now on Windows 10.  I'm not experiencing the issue described anymore. After uninstalling the old JME 3 via \"Add Remove Programs\" in the Control Panel. I was able to install the 64 bit JME 3.1 A3 with no issue.\n. So I had the issue with the 64 bit installer I downloaded on Feb 5, 2015..But something on my machine seems to have resolved that issue as well. Overall, I'm not sure what caused it; as at this point this seems to be a non issue.  I need to investigate what state my Windows 10 machine was at the time of the failure. \n. Let me try a few things to reproduce the problem, i'l let you know this evening\n. Give me a day or two on this... still trying to recreate the issue.\n. I am unable to reproduce this. Windows 10 must of been in some odd state at the time of installation.\n. Why not just wipe and reload everything when a change is detected.  The only downside I could think of is a possible wait time for a new j3o to be generated? All though as you mentioned, it might permanently remove non blender made meshes.  Is there a way to \"mark\" something as blender or other tool made so that if a change is detected for that object, it automatically wipes it and reloads? \nSorry for my ignorance as I have not looked at the source for the importer yet.\n. ",
    "JavaSaBr": "I did it to be able to implement centralized configuration of quality of textures in my game.\n. I'm using it in offline client. It gives me the opportunity not to have storage options of different textures. I use Scalar in my loader to scale, which is able to use different algorithms.\n. > Why do you need to override this class? What feature do you miss?\n\nFor my case:\n@Override\n    protected Camera createOffCamera(final int mapSize, final Vector3f worldPos, final Vector3f axisX, final Vector3f axisY, final Vector3f axisZ) {\n        final Camera offCamera = super.createOffCamera(mapSize, worldPos, axisX, axisY, axisZ);\n        offCamera.setFrustumPerspective(90f, 1f, 1, GraphicUtils.SKY_SPHERE_RADIUS);\n        return offCamera;\n    }\nWhy the early returns instead of the more classic \"if\"\nAnti practice for:\nif(cond) {\n            if(cond) {\n                if (cond) {\n                    if (cond) {\n\n}\n            }\n        }\n    }\n\n. 1. protected FINAL...\n. Updated\n. I agree, but I think what catch + warning is better than crash application.\n. This problem is actual in last revision. If I try load a model with bad animation, my application crashes.\n. Also, I develop my editor for jME and I don't want to have the crash after trying opening an invalid model in the editor.\n. But I think my editor should not know details of model implementation in the jME, so I can't check it.\n. Ok, but I think we need to have the checking in the both places ;)\n. @Nehon j3oLoader. Maybe do you have some question about this change?\n. OK, I will change this\n. I updated this pull request.\n. Ok :)\n. I didn't find better place :)\n. I have added it.\n. > Then platforms that do not support Java8 (e.g. Ubuntu, Android) \nUbuntu supports Java8\n. I pack my application with embedded jre8, I think it is the best option for users.\n. I have updated this pull request.\n. I have updated this PR, also I have added supporting OffscreenSurface.. Great!. Ofcourse I can use Reflection API for this, but I believe that adding the method is not a bad option and I offer to add an annotation like a \"InternalAPI\" to the method.. What do you think about the commit?\nhttps://github.com/JavaSaBr/jmonkeyengine/commit/816c50761a606400ca8ef61f80876fa5242b1af7. I have added the annotation @Internal to new methods.. 1. I added the logic which decides what implementation does need to use.\n2. I added a factory because the field \"ALLOCATOR\" must be final.\n3. I just renamed the logger to LOGGER in the LwjglContext :). so, what do I need to do else? Do I need to revert the name of the logger field?. @empirephoenix but at this moment, the field is static and we can't use different allocators at the same time.. 2. This ensures that we will not have cases, when we have allocated buffers from different allocators because it can make some issues for developers when they will try to destroy these.\n3. My logic offers that you will use LWJGL Allocator only in the one case when you use LWJGL3, and I think it is the best option because it is a native allocator of the LWJGL3. If you use another backend, you will use Reflection/Primitive Allocator. You can determine a default allocator for each backend and override it using system property.. I have updated the PR.. I agree with you and I have updated the PR :). Cool :). Java 9 and \nhttp://www.java-gaming.org/index.php?topic=36524.0. I think all agree with this PR.... I have updated this PR.. I have added sorting by GLSL version to select the best tech.. Cool!. Are you going to merge it? :). @Pilvinen I think you can open .fbx in Blender and then save it like a .xbuf file which has good support from jME :)\nhttps://github.com/xbuf/xbuf\n.xbuf have no problems with animation on jME.. @Pilvinen do you think we have no any format which has good support for both programs?. @Pilvinen did you check this addon?\nhttp://amyaimei.deviantart.com/art/Bos-FBX-Importer-Exporter-for-Blender-2-77-Win64-621287370. @Pilvinen \nhttp://growlybearproductions.com/Blender/. @deltasquad451 I don't know. @Perjin my artist who works in Blender have advice:\nhttps://help.sketchfab.com/hc/en-us/articles/206223646-Blender-Animation#fbx. I am going to make several small PRs with changes like this.... I want to add supporting cloneable to ShadowRenderer:\nhttps://bitbucket.org/JavaSabr/jme3-spaceshift-editor/src/2ed5cf7c318237e34d15dd8ca63bf7ded9bbbdc2/jme3-spaceshift-extension/src/com/ss/extension/scene/renderer/EditableDirectionalLightShadowRenderer.java?at=0.9.2&fileviewer=file-view-default\nalso, I want to have a possibility to save/load shadow filters:\nhttps://bitbucket.org/JavaSabr/jme3-spaceshift-editor/src/2ed5cf7c318237e34d15dd8ca63bf7ded9bbbdc2/jme3-spaceshift-extension/src/com/ss/extension/scene/filter/impl/EditableDirectionalLightShadowFilter.java?at=0.9.2&fileviewer=file-view-default\nNow I use reflection API to get access to it :(\n. Ok, I will try to add it to core classes ;). I have removed the comment and have returned a final modification to the method, but I need to avoid an exception if I have no light in a shadow render :(. Thank you very much :). I have no idea why you want to add a constructor with a light as a parameter. I think we should have only a constructor without any parameters and we should have public methods to rebuild the render for any parameters at any time.. But MVC doesn't solve my issue because it doesn't give an answer to my question \"how can I store this information\" :( I have only a j3o file and I need to store positions of all lights, how can MVC help me with it? I have no idea :(\n. you are right, a position for a direction light doesn't make sense, but we have duplicate code in 3 of 5 kinds of light.. The option of using another file to store this information is terrible and I understand your point of view. It's just my attempt, and it will not break compatibility. If you will not approve these changes, I will understand it :) . The main problem is that lights don't have an user data like a spatial. What do you think about to add an user data to lights?. @pspeed42  @empirephoenix so, what do you think about to add user data to the light class?. Do I need to revert some else?. I think when a user saves an object with disabled control, he expects that the control will be disabled when he will load the object again.. https://github.com/jMonkeyEngine/jmonkeyengine/pull/612. Normen, I didn't use bullet engine before, I detected this problem when I started implementing working with it in my editor. I tested my fix on cases of saving/loading my models and it works fine :). of course, I think this memory leak relates to LWJGL allocator, because we don't use deallocate method to old buffers.. So, I have made fix of memory leaks in the PR:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/623\nbut I think these changes make good optimizations... are you going to merge it?. Great :). @empirephoenix a few days passed ;). Thanks, I did some tests, it works fine.. What do you mean?. I need to get address of allocated memory to make a deallocator.\nhttp://imgur.com/a/wV43x. You have the method:  BufferUtils.destroyDirectBuffer(data);. If you will use BufferUtils.destroyDirectBuffer(), this \"deamon\" will skip these buffers.. @empirephoenix any questions?. The main change is to get an address using position '0' of a buffer because the method to get an address returns different addresses for different positions for the same buffer. Also, I don't want to use direct cast from Buffer to ByteBuffer, so I just added instanceof checks.. @empirephoenix any questions? :). @john01dav https://github.com/JavaSaBr/JME3-JFX. @Nehon Hi, so how can I fix a geometry which has an incorrect material in your case?. @Nehon , wow, so I can use the:\nrenderManager.preloadScene(dummyGeom);\nto validate a material, right? cool if it's true :+1: . Any questions?. @empirephoenix  For example, I have an issue with Intel Graphics on Linux, when I use 2.0 GL render, I have a lot of issues with GL features of 3.0+ version if I use core profile 3.2 version, all features of 3.2 version work perfect, but I can't use features from 3.3+ version. I didn't see any workaround for this :(\nI have no the problem with nvidia on linux for example, but I think we can have the same problem with AMD else . I see that without core profile all drivers on linux work how they want to work :D. @empirephoenix any questions else? :)\n. @empirephoenix any questions? :). @Nehon it's in the lwjgl3 module, it has separated compilation and only for java8+. updated dependences :). any questions? :)\n. @Nehon done :). @Nehon Are you going to fix it? or I can make a PR with it. @Nehon https://github.com/jMonkeyEngine/jmonkeyengine/pull/691. @Nehon I have updated this :). @Nehon hm, now I have this problem :)\nhttps://gist.github.com/anonymous/6d5896042c271ff82aae94f7c9751981. @Nehon I have updated this PR, now it works fine on macOS and linux :)\n. @Nehon @pspeed42 what do you think about this? :)\n. @Nehon I have changed saving textures to use a texture keys, also I have re-checked back compatibility, it works fine ;). @Nehon updated again :D . @Nehon ok ;). @Nehon who is the main reviewer of changes in terrain system? :). @MeFisto94 I think it's clear enough because these 2 fixes are in separated files and there aren't a lot of changes.. @pspeed42 could you review these changes, please? . @Nehon can you review these changes, please?. Could @pspeed42 @Nehon @empirephoenix or anybody else review these changes, please?. @Nehon I have updated this PR.. @Nehon anything else? :). any news? :). @pspeed I think @Nehon meant him @pspeed42 ;). any news? :). @Nehon could you review these changes, please? :). @Nehon Only one use case, I think we should have a possibility to present any material as j3m file, that all. If you think that it isn't enough for you, up to you, I can make my own j3md file for my cases. :). @Nehon so ok, but my changes don't break anything and I think you can close this PR ;). @Nehon by the way, in your case a spatial stores data of a sky texture inside itself, I think it isn't the good option.. @Nehon ok . @empirephoenix @Nehon could you review this PR, please?. @Nehon for example, I have a j3o model which includes materials with shaders and controls which don't exist in the main class loader, so when I try to load it, I have class not found exceptions and asset not found exceptions, because the process of loading assets from classpath doesn't look at additional class loaders of asset manager. The same issue with loading controls. \nIs it clear? :). @Nehon thanks :). @Nehon ok. @empirephoenix I just wanted to make minimal changes, I didn't look at the code block :). @Nehon I think changes of this code block should be in a separated PR ;). @Nehon @empirephoenix could you review this, please?. @empirephoenix in the case with ShaderGenerationInfo, I had the same instances of lists in original ShaderGenerationInfo and in cloned version.. @Nehon sorry, I missed creating one collection for a cloned instance.. @empirephoenix could you look at this change, please?. @Nehon could you look at this PR, please? :). @Nehon I need to have a possibility to save material def using binary exporter, and JmeClonable works more transparently for me in the case, so I sure that saving/reading the material def will be correct.. @Nehon I agree with you about we don't need to make changes special for Editor, but these changes don't include specific things for my Editor, I just implemented two standard engine interfaces for some engine objects, that made it more flexible to some use cases. . @Nehon could you review this, please? :). @Nehon about the fix of varying variables... I was wrong, sorry, I can't reproduce this problem without my fix in my editor, only in SDK editor. So I have reverted this change.\nBut I have pushed new changes about declaring variables:\nWhen I add a shader node to technique definition without my changes I have the result:\nhttps://imgur.com/jxu8D2U\nyou can see that the generator doesn't declare input variables of the shader node if we don't have input mappings for this, so we have an invalid shader in the result:\nThe same case with my changes:\nhttps://imgur.com/lgbR3Lw\nso now this shader is valid.\nAbout indent... if you are against changes with formatting, of course, I can revert it, there are differences:\nhttps://imgur.com/aPbVmP9\nhttps://imgur.com/vHWubKH\nI replaced tabs to spaces and added missed spaces.. @Nehon \n```\nMaterialDef tempMatDef {\n    MaterialParameters {\n        Vector4 Color\n    }\nTechnique {\n    WorldParameters {\n        WorldViewProjectionMatrix\n        Time\n        Tpf\n    }\n\n    VertexShaderNodes {\n        ShaderNode CommonVert {\n            Definition: CommonVert: Common/MatDefs/ShaderNodes/Common/CommonVert.j3sn\n            InputMappings {\n                worldViewProjectionMatrix = WorldParam.WorldViewProjectionMatrix\n                modelPosition = Global.position.xyz\n            }\n            OutputMappings {\n                Global.position = projPosition\n            }\n        }\n    }\n\n    FragmentShaderNodes {\n        ShaderNode ConstructColor {\n            Definition: ConstructColor: Common/MatDefs/ShaderNodes/Basic/ConstructColor.j3sn\n            InputMappings {\n                red = WorldParam.Time\n            }\n            OutputMappings {\n            }\n        }\n        ShaderNode ColorMult {\n            Definition: ColorMult: Common/MatDefs/ShaderNodes/Basic/ColorMult.j3sn\n            InputMappings {\n                color1 = MatParam.Color\n                color2 = ConstructColor.outColor\n            }\n            OutputMappings {\n                Global.color = outColor\n            }\n        }\n    }\n\n}\n\n}\n```. @Nehon You can try to load it as material in jME ;). I understand this problem, but I don't agree that it's worth than exceptions... Also I'm going to add a possibility to define default values for unmapped input parameters, it will require the changes... . I'm going to create PRs step by step, I want to avoid big PRs.. @Nehon what do you think about cases when an MPO has a null value?. @Nehon I have updated the condition.. @Nehon I don't use Windows OS, but this problem came from some users of my editor, in the case with game application it isn't the important problem, but I think we need to fix it :). @Nehon @shadowislord @pspeed42 what do you think about this?. @Nehon @shadowislord @pspeed42 I will try to explain here the main problem and my fix:\nWhen we look at the case, when we have a scene with a lot of asset link nodes which are related to the same model, we expect to see that all link nodes will load models with shared data between them. But at this moment the link nodes load different models with different geometry data. So this PR fixes this behavior.\nMy fix includes two main changes:\n1. We used binary importer directly inside reading asset link node before, now we use asset manager to load linked models.\n2. BinaryImporter doesn't support recursive loading models, so I implemented a stack of importers to avoid this problem.. ok, I will update this PR.. @shadowislord I have updated this PR.. @shadowislord @Nehon @empirephoenix could you review this change, please?. @empirephoenix I agree, I have updated it.. @Nehon this PR with minimal changes to support my alternative implementation of shader generator(points #3 and #4).. @Nehon I have updated creating world bindings collection in TechniqueDef, and I have changed the solution with ShaderNodeDefinition to have a possibility to add additional information to there(for example for some specific shader generator). . @Nehon for example, I store the list of imports(if it needs) to a definition to handle it correctly from my shader generator.\nhttps://github.com/JavaSaBr/ss-editor-shader-nodes/blob/8af2a4bd14b4ba0e7a55df64bf123f1075abb72c/src/main/java/com/jme3/shader/glsl/ASTShaderGenerator.java#L772. @Nehon I have updated iterating of world binding collections.. @Nehon so I don't want to replace any your logic of this, I use this solution only in my shader generator, and now ShaderNodeDefinition doesn't include the \"imports statement\", only abstract \"additional values\" which you can use up to you.\nBy the way, if we talk about my solution of this, I can do the analysis of imported shaders, can do deduplication, can add missed world bindings automatically during shader generating and something else.... @Nehon When I finish working on AST generator(I need to refactor/to optimize some things else), I will make a separated PR with performance tests ;) but what about my change in ShaderNodeDefinition? Do I need to revert it in the result?. @Nehon I don't know other option how to extend the definition class to have some additional information here :(. My AST parser is very fast, but in the case with imports, when you load a shader file with imports, you will get a source code with already included imports. I can add a flag to key class to have different logic for this, what do you think?. Ok, I will wait for your commit with it, but I have other cases with additional values... I want to have a possibility to add some help information to a definition for some reasons. . For example, I want to describe required material parameters for a shade node(for defines from imported shaders). I need to place list of strings somewhere in j3sn, for example, in some library we use define NUM_BONES, I need to show for a user, that some shade node requires NumBones material parameter... I can't show it only looking at the source code, because the same shader node can have several versions of shader sources. I want to show it in UI as specific information, in your case, I need to parse documentation to extract only this part =\\ at this moment, I don't know about other cases with additional values.. Ok, then I wait for your change to load shaders without including imports.. @Nehon I have tested your solution, it's ok for me, I have re-created a new PR:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/760\nwith the summary commit with reverted shader node definition class.. @Nehon sorry, it was my mistake :)\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/761. @Nehon I will create a separated PR with AST generator after merging this PR.. @Nehon any news? :). @Nehon could you look at this, please?. ok :). @Nehon oh, ok :). added auto-resolving definitions like:\nifdef HAS_OUTPUT_vertexColor\nattribute vec4 inColor;\nendif\nif defined(HAS_INPUT_normalMap) || defined(HAS_INPUT_parallaxMap)\nattribute vec4 inTangent;\n\nendif. @pspeed42 could you review this, please? :). @Nehon I can't set reviewers for my PRs, so could you look at this fix, please? :). @Nehon what do you need to reproduce it:\nIt's without my fix:\nhttps://imgur.com/jkNgFHI\nIt's my fix:\nhttps://imgur.com/9wiynFr\nYou can see that I have one missed varying without my fix.. @Nehon yeah, my artist creates some shader node materials in Blender and I try to reproduce it in jME using our shader node system, it's good option to find some missed things in our system :). @pspeed42 the documentation is already in the engine, but  I can't read it in some cases. @Nehon yeah, I know about this, but how can I do it in the case of loading material definition?. @Nehon I agree, but I don't see any option how to load it separately, could you provide me advice, please?. @Nehon wow, sorry, I have missed the field \"path\" :)\nhttps://imgur.com/MeUOqiH\nthanks.. @Nehon I have tested these changes, it works fine.. @Nehon so, you think we need to provide a possibility to input values and expressions, right? if yes, I will re-implement it :). @Nehon ok, I will do it :). @Nehon I have updated PR with the implementation of this:\nShaderNode Add {\n                Definition: Add: Common/MatDefs/ShaderNodes/Math/FloatVertexNodes.j3sn\n                InputMappings {\n                    first = %%1.5 * 5.0%%\n                    second = %%pow(2.0, 2.0)%%\n                }\n            }. @Nehon Hi, what do you think about this approach? I don't expect of merging it to release 3.2, but I want to know it's ok or no, if it's ok, I will start to implement integration with UI of this approach.. thank you very much :). @Nehon Hi, you have released 3.2, so could you look at the PR, please? :)\n. @Nehon so, I will recover \"public static final\" in the core interfaces, anything else? :). @Nehon done.. @Nehon have pushed changes.. @Nehon the last comment was 24 days ago, I think nobody against it.. @pspeed42 ok, I will revert public words.. @pspeed42 done.. @Nehon @pspeed42 anything else?. @Nehon done.. @Nehon I have re-created this PR:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/819. @Nehon any thoughts? :). @Nehon @MeFisto94 I don't think so that it can impact the SDK.. @MeFisto94 @Nehon  if we have warnings for missed linked objects, we can load a scene to do with it something, if we don't have it, we should restore missed reference to return availability opening the scene, I think it's not ok.. @Nehon so, I will change the severity level of this warning to error.. @empirephoenix I have no ideas how it can be in the current approach of asset manager.... so, any editor should implement its own asset manager and all loaders, right?. ok, I think I have nothing to add.. @Nehon any news?. @Nehon ok, I will continue to work on this ;). @Nehon https://hub.jmonkeyengine.org/t/buffer-objects-in-jme/40054. @Nehon  I have updated API and implementation:\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/java/com/ss/editor/test/external/BOSceneTest.java\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/resources/MatDefs/UnshadedSSBO.frag\nhttps://github.com/JavaSaBr/jmonkeybuilder/blob/feature/multi_select_in_scene/src/test/resources/MatDefs/UnshadedUBO.frag. @Nehon I will update it later.. @Nehon I have resolved conflicts.. @Nehon only 2 commits are here :). @Nehon attempt #3 :). @Nehon anything else?. Hi, because the public is default access for interfaces.. @Nehon cool, thanks :). I compared this value with LWJGL2.\n. I tested my Editor on Ubuntu 14.04 and Windows 7. This fix works fine.\n. ok, I will remove this.\n. Ok ;)\n. I'm going to remove the calls the method free(), because I have some JMV crashes in this place in some cases.\n. We once create these icons and these icons live during all life cycle of the application, right?\n. I have tried to use this option https://codeshare.io/FHQo2 and it doesn't work.\n. I have no time for researching this problem. :( I'm going to an army in several days for 2 months.\n. ok, it works fine :)\n. it doesn't work without ordering \n. The Intellij IDEA thinks that is better :)\n. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  org.lwjgl.system.JNI.invokePV(JJ)V+0\nj  org.lwjgl.system.jemalloc.JEmalloc.nje_free(J)V+6\nj  org.lwjgl.system.MemoryManage$JEmallocAllocator.free(J)V+1\nj  org.lwjgl.system.MemoryUtil.nmemFree(J)V+4\nj  org.lwjgl.system.Struct.free()V+4\nj  org.lwjgl.system.NativeResource.close()V+1\nj  com.jme3.system.lwjgl.LwjglWindow.setWindowIcon(Lcom/jme3/system/AppSettings;)V+182\nj  com.jme3.system.lwjgl.LwjglWindow.createContext(Lcom/jme3/system/AppSettings;)V+459\nj  com.ss.editor.EditorContext.createContext(Lcom/jme3/system/AppSettings;)V+8\nj  com.jme3.system.lwjgl.LwjglWindow.initInThread()Z+36\nj  com.jme3.system.lwjgl.LwjglWindow.run()V+32\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub\n. I think it's just more readable, I can revert this if it's important for you.. I understand your point of view, I will revert these changes :). the filter didn't save the scene at all before, I just added a flag to configure the behavior.. I'm sure that it doesn't break back compatibility, but I will recheck it again ;). @Nehon so, I have added the flag to have a possibility to save a reflection scene if a user knows what he does\u00b8 but in the most cases, we shouldn't do it. I need to have it in some case when the filter is a part of some scene. . @Nehon by default the filter doesn't save a scene.. I use TerrainExecutorService here.. because we have foreach operation with the collection for each call of the method prepareTerrain().. hm, I have looked at the implementations of LodCalculator and I see that we have that usage:\nfloat distance = patchPos.distance(locations.get(0));\nso you are right that the List is fine in the case ;) I will revert it.. It's just lazy singleton of global executor service for terrain usage with the option to override implementation.. @Nehon do you offer to cast List to SafeArrayList each time?. @Nehon yes, but we need to use the method getArray() for this, but OK, I will revert it.. @Nehon so can I keep these changes here?. enum.values() recalculetes for each call.. It needs for some cases when I generate a mat def on runtime, do you know other options for this?. you are right for most cases, but not for all cases :( . @Nehon I don't talk about serialization j3md to j3o ;) you can use binary exporter to serialize jme objects to other places.. @Nehon ok, how can I store a material with a generated material def? I can't store the generated material def as file... so the material can't use the material def without asset name.. @Nehon it's an example of using Enum.valueOf(index);. @Nehon I have answered as a comment in the changes.. @Nehon I see only one work around, I need to copy-paste all material's classes :(. @Nehon I can remake it to use transform from enum list to string list.... @Nehon but I can't save j3md as file :(. @Nehon I just want to have binary serialization for j3md, I didn't think that is a big problem for you, now I see that you have the strong position about it.. @pspeed42 because I build it on runtime... so I need to save it as \"randomvalue\".j3md in the asset, but it will be like trash file. I want to avoid it.. @Nehon the main difference between your shader node editor and mine is that my editor edits the file like \"shader node project file\" which includes last preview material, last version of j3md and some additional things. Of course in the worst case, I can do it using some crap hack solution, but I think when some jme objects can be saved/cloned and other can't be, it's unexpected behavior for a user. I understand that you don't like to support saving/cloning of j3md things, but my point of view, all jme objects should implement JmeClonable and Savable interfaces.. @Nehon it was a suggestion from IntelliJ IDEA. =/. @Nehon I have NPE with access to this collection when I don't have world bindings on technique definition(for example when I want to save shader node material during editing it, when I removed all world bindings(temporary)). For example, you can look at line 58 in the class J3mdTechniqueDefWriter, we don't check null here. I think we don't work with a lot of instances of technique definitions, this optimization isn't necessary to have null here by default.. What happened when you will have two shader nodes with the same import statements? But I agree that it isn't good to have \"hardcoded(imports/defines)\" additional information here, can I change it to using more generic solution?. @Nehon but in any case, you can't do it with any openGL version, maybe do you have a better idea how to allow it for users?. @Nehon I agree, I will update it ;). I will update it. I think it should be static field.... Why do you use Long[] instead of long[]?. It's ok, but I think we can use the construction ArrayDeque<>() instead of ArrayDeque() ;). you can use long[] in all places.. I think this class shouldn't know about \"org.lwjgl.input.Mouse\" or other implementations.. ",
    "2lost4u": "In my opinion TGALoader should take care of resize of the image, at the algorithm not as a extension, that is if i understood well the problem. ",
    "tomocesnik": "I think that the users could have a need to iterate over the children of a batch node and find out which of them are batched geometries and which are not.\nThe use case would probably be, do something special with batched or non-batched nodes only - kinda similar as how the check in the collideWith() method is done.\n. ",
    "BorealFeast": "Had the same problem. (http://hub.jmonkeyengine.org/t/statsappstate-wont-show-stats-unless-i-disable-the-dark-panel-behind/34122)\nIt seems that the z sorting is inverted, so moving the background over the fps should be a quick fix.\nThe other thing you can do is to disable the dark background.\n. The same problem seems to appear here too:\nhttp://hub.jmonkeyengine.org/t/lemur-components-not-showing-on-alpha3-swing/35354\n. I've made a commit based on your comments.\nOne simple use case for this feature could be the render of negative type particles.\n. ",
    "Fadorico": "So if I understand correctly the first if statement \nif((node.getCollideWithGroups() & node1.getCollisionGroup()) > 0 || (node1.getCollideWithGroups() & node.getCollisionGroup()) > 0){\nshould not be there because we know for sure at that point that those objects are supposed to collide?\n. The last commit takes into account what normen said and checks the group collisions in the broadphase (and modifies the result if needed). Here is the test case that was used for testing:\n```\npackage test;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.bullet.BulletAppState;\nimport com.jme3.bullet.PhysicsSpace;\nimport com.jme3.bullet.collision.PhysicsCollisionGroupListener;\nimport com.jme3.bullet.collision.PhysicsCollisionObject;\nimport com.jme3.bullet.collision.shapes.MeshCollisionShape;\nimport com.jme3.bullet.collision.shapes.SphereCollisionShape;\nimport com.jme3.bullet.control.RigidBodyControl;\nimport com.jme3.math.Vector3f;\nimport com.jme3.renderer.RenderManager;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.Spatial;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.scene.shape.Sphere;\npublic class CollisionGroupsTest extends SimpleApplication implements PhysicsCollisionGroupListener{\nprivate BulletAppState bulletAppState;\n\npublic static void main(String[] args) {\n    CollisionGroupsTest app = new CollisionGroupsTest();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    flyCam.setMoveSpeed(50);\n\n    bulletAppState = new BulletAppState();\n    stateManager.attach(bulletAppState);\n    bulletAppState.setDebugEnabled(true);\n    bulletAppState.getPhysicsSpace().addCollisionGroupListener(this, PhysicsCollisionObject.COLLISION_GROUP_02);\n\n    RigidBodyControl droppedSpherePhysics = new RigidBodyControl(new SphereCollisionShape(1), 1);\n    Geometry droppedPhysicsSphere = new Geometry(\"Dropped sphere\", new Sphere(16, 16, 1));\n    droppedPhysicsSphere.addControl(droppedSpherePhysics);\n    droppedSpherePhysics.setPhysicsLocation(new Vector3f(4, 8, 0));\n    droppedSpherePhysics.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_01);\n    droppedSpherePhysics.setCollideWithGroups(PhysicsCollisionObject.COLLISION_GROUP_02);\n    getPhysicsSpace().add(droppedPhysicsSphere);\n\n    // The top most sphere. This should collide with the dropped sphere but should be overriden by the collide method\n    RigidBodyControl staticSpherePhysics1 = new RigidBodyControl(new MeshCollisionShape(new Sphere(16, 16, 1.2f)), 0);\n    Geometry staticSphere1 = new Geometry(\"Static sphere 1\", new Sphere(16, 16, 1.2f));\n    staticSphere1.addControl(staticSpherePhysics1);\n    staticSpherePhysics1.setPhysicsLocation(new Vector3f(2.5f, 0, 0f));\n    staticSpherePhysics1.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_02);\n    staticSpherePhysics1.setCollideWithGroups(PhysicsCollisionObject.COLLISION_GROUP_03);\n    getPhysicsSpace().add(staticSphere1);\n\n    // The top most sphere. This should not collide with the dropped sphere at all\n    RigidBodyControl staticSpherePhysics2 = new RigidBodyControl(new MeshCollisionShape(new Sphere(16, 16, 1.2f)), 0);\n    Geometry staticSphere2 = new Geometry(\"Static sphere 2\", new Sphere(16, 16, 1.2f));\n    staticSphere2.addControl(staticSpherePhysics2);\n    staticSpherePhysics2.setPhysicsLocation(new Vector3f(2.5f, -4, 0f));\n    staticSpherePhysics2.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_03);\n    staticSpherePhysics2.setCollideWithGroups(PhysicsCollisionObject.COLLISION_GROUP_03);\n    getPhysicsSpace().add(staticSphere2);\n\n    // The box floor. The dropped sphere should collide and land on this\n    RigidBodyControl node3Physics = new RigidBodyControl(new MeshCollisionShape(new Box(Vector3f.ZERO, 100f, 0.2f, 100f)), 0);\n    Geometry node3 = new Geometry(\"Box\", new Box(Vector3f.ZERO, 100f, 0.2f, 100f));\n    node3.addControl(node3Physics);\n    node3Physics.setPhysicsLocation(new Vector3f(0f, -6, 0f));\n    getPhysicsSpace().add(node3);\n}\n\nprivate PhysicsSpace getPhysicsSpace() {\n    return bulletAppState.getPhysicsSpace();\n}\n\n@Override\npublic void simpleUpdate(float tpf) {\n}\n\n@Override\npublic void simpleRender(RenderManager rm) {\n}\n\n@Override\npublic boolean collide(PhysicsCollisionObject nodeA, PhysicsCollisionObject nodeB){\n    Spatial collidedA = (Spatial)nodeA.getUserObject();\n    Spatial collidedB = (Spatial)nodeB.getUserObject();\n    System.out.println(collidedA.getName() + \" collided with \" + collidedB.getName());\n    return false;\n}\n\n}\n```\n. I think that having the first listener (if any) decide the fate of the collision isn't the right thing to do. Out of the two solutions above, I personally think that combining the results of both listeners makes the most sense. However, I'm not completely satisfied with this solution, so i'll write some use cases to show what I'm thinking.\nFor all cases, let listener1 be the first listener and listener2 be the second listener. Let's also assume listener1 is always the first listener to be notified of the collision.\nUse case 1: listener1 says the collision can't happen\nIn this case, listener2 shouldn't be notified of the collision, since we already know at that point that listener1 doesn't want it to happen. We would then return a negative response saying the collision can't happen.\nUse case 2: listener1 says the collision can happen.\nIn this case I think listener2 should be notified of the collision and ultimately decide its fate, since we know that listener1 is fine with the collision. This use case would then branch out into two possible scenarios.\nUse case 2.1: listener2 says the collision can happen as well\nIf listener2 also agrees with the collision, then we can return a positive response and everything is rainbows and sunshine.\nUse case 2.2: listener2 says the collision can't happen\nHere's the case that is making me indecisive. If listener1 says the collision can happen but listener2 says otherwise, the collision shouldn't happen. So the right thing to do here would be to notify listener1 that the collision won't happen after all. However, with the current implementation, I don't see a clear way of doing this, as listener1 would have to undo what it did when it was notified.\nSo what I'm thinking is that their maybe should be two methods in PhysicsCollisionGroupListener; one that returns the result of \"do I think the collision should happen\" and another that notifies the listener of the final decision. Something like\npublic boolean shouldCollide(PhysicsCollisionObject node, PhysicsCollisionObject node1);\npublic void onCollide(PhysicsCollisionObject node, PhysicsCollisionObject node1);\nBut doing this changes the API, so I'm not sure what you all think about this idea.\n. All right that sounds good then. I'll commit a quick change that will call both listeners and then combine the result.\n. I think it would make sense, yes. \n. ",
    "Perjin": "I can make a new pull request against the master branch if you want. (If I do this I can also split this in three pull requests one for the array render buffers, one for the shader nodes bug fix and a different one for the Light changes then you can pick what should get into 3.1.)\n. ",
    "mkleint": "also the shadow shows over objects that are supposed to be closer. I've seen similar effect with Translucent (but not Transparent) objects. A far translucent object was visible through a nearer opaque object.\n\n. attached is the project cut down to the minimum demonstrating the problem. once you run it, 'w'-> forward, 's' ->backward.\nit's a maven based project, opening in regular netbeans/.. should be ok, in netbeans just build and click Run and select the only main class there (named Main)\nI'm running with jdk8 on macosx, let me know if you need more details\ngithub-test.tar.gz\n. ",
    "RelativeNull": "Yep, sorry, just noticed there were 2 different projects. Thanks.\n. ",
    "Georgeto": "My goal is to render a scene, using a transparent background (clear) color, as an 'transparent' image (it has an alpha channel). As the prouced image has an alpha channel, the alpha value of every pixel is relevant. So if i have an opaque object, which texture has an non opaque alpha channel, the resulting alpha value of the objet pixels will have an alpha value != 255, and the object will look weird in the rendered image.\n\nUseAlpha = true\n\nUseAlpha = false\nHowever i can understand, that if you are actually developing a game, this is not a common scenario. Or you could simply remove the alpha channel from your texture. So I should probably just use an modified version of the Lighting Material for my special use case, even though it will be annoying keeping it up-to-date.\nPS: This feature is also requested by FbxMaterial, so i am not the only one ;)\n. ",
    "davidbilge": "I made some modifications too: https://gist.github.com/davidbilge/d19f5fbcc5650ba4432ecf30467c5047\n. Yeah, about setting the renderer: I had to do that because I use my \"CustomJoglOffscreenBuffer\" by configuring a CUSTOMrenderer in my AppSettings - and if I do that, JoglContext complains about an \"unsupported renderer\" in line 189. This is really just a workaround to get my custom implementation to work.\nIf I don't make the GLContext current, I get this Exception:\nException in thread \"jME3 Main\" java.lang.NullPointerException\n    at com.jme3.system.jogl.JoglContext.initContextFirstTime(JoglContext.java:157)\n    at com.jme3.system.jogl.JoglContext.internalCreate(JoglContext.java:221)\n    at com.example.jmonkeytest.CustomJoglOffscreenBuffer.initInThread(CustomJoglOffscreenBuffer.java:59)\n    at com.example.jmonkeytest.CustomJoglOffscreenBuffer.run(CustomJoglOffscreenBuffer.java:100)\n    at java.lang.Thread.run(Thread.java:745)\n. In JmeDesktopSystem#284 the custom renderer name is expected to start with \"CUSTOM\", hence the choice. To be precise, I used settings.setRenderer(\"CUSTOMcom.example.jmonkeytest.CustomJoglOffscreenBuffer\");.\n. Thank you for you effort. I do not actually want to use a custom offscreen buffer. I only did that in this case to be able to pinpoint the bugs in the official implementation. As soon as they are fixed I can easily use the standard way. \nUsing offscreen mode does not work with the jogl backend as of now\u2014it does if the fixes from my custom version are applied, though. \n\nAm 30.04.2016 um 10:47 schrieb Julien Gouesse notifications@github.com:\nYes but actually you can't use a custom renderer without creating your own JMonkeyEngine context and none of the implementation of JmeContext are designed to be extended, which explains why you obtained an UnsupportedOperationException. In my humble opinion, there are two bugs to fix. At first, please check whether creating an offscreen renderer with the JOGL backend works as is (which is probably not the case). Then, I'll do my best to fix your specific use case with a custom offscreen buffer but it will only work with the JOGL backend (which is ok for me as a JogAmp maintainer officially responsible for engine support).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. \n",
    "wlinna": "I guess it makes sense to update it according to the camera position. I'm okay with both removing it from defaults or leaving it as is, so feel free to close this issue. (Nevertheless, I believe that being explicit is better than implicit)\nThanks for the recommendation. I wasn't aware that there was such super constructor available.\n. Sure\nSuppose you have a Geometry with a bunch of PhysicsCollisionObjects attached to it, and none of them is a RigidBodyControl. When you call:\nphysicsSpace.addAll(yourGeom);\nResult: All the PhysicsCollisionObjects are added to physicsSpace.\nNow what if yourGeom had at least one RigidBodyControl? After\nphysicsSpace.addAll(yourGeom);\nOnly the RigidBodyControl is added to physicsSpace. PhysicsCollisionObjects are NOT added. The same applies to removeAll.\nMy pull request changes that. Even if there's a RigidBodyControl, addAll would add all those PhysicsCollisionObjects (and removeAll would remove them).\nDoes this help?. ",
    "ZoltanTheHun": "Hi, this one is a tricky one. I faced the same issue after updating the engine. Thanks for pointing out the rootcause.\n. ",
    "jjYBdx4IL": "it's already merged\n. ",
    "bertleft": "empirephoenix, I came across it tracking down a physics body explosion that occurred on my project when run under Linux but not OsX.\n. ",
    "Batzer": "You are right, it does not make sense if no border color is specified. Thats exactly what we need for our project then, we need to fill the space beyond [0,1] with transparency. And sadly there is no straightforward way to adjust the texture coordinates to overcome this requirement. Is there a specific reason why texture border is not supported by jME3?\n. ",
    "raphaelbruno": "Ok, so, what i do to light to bright on (0, 5, 2) and not on (0, 0, 0)?\nI seen on LightControl, PointLight property is set as empty, is it normal?\n. ",
    "papaspace": "Thanks for checking. I just corrected this.\n. Errmm, yes. Next time I'll check the toString() method for correctness -- Simple things fail first. Thanks for watching.\n. @AlrikG : Sorry for the late reply, I was on an extended vacation. I could create a test case o/r, but on one hand usage is quite simple and on the other hand some differences in the result only become relevant when rendering to texture and reusing that texture in your scene. Tell me if you still prefer having a test case.\n@empirephoenix : \"Why is this required and cannot be done with the current possibilities (and hence allows the increase in code)\"\nOne situation that requires a custom blend mode has been discussed in this forum thread, which has been successfully solved using a custom blend mode. Consider the following. While the predefined blend modes are sufficient in most cases, a fall back to pure OpenGL may be jME's biggest advantage over fixed-functionality engines.\n@empirephoenix , @shadowislord : \"since the custom blending mode now expects OpenGL arguments to be given.\"\nThis is not correct, as the custom blending mode expects integer arguments to be given. The GLRenderer takes these integers to define the blend mode during rendering, simply by invoking glBlendFuncSeparate(...). The respective \"VulkanRenderer\" would do the same, I suppose. From my point of view, this is no hard dependency on OpenGL.\nHowever, in the future, a clean way of separating Vulkan from OpenGL would be to define the integers somewhere internally within the RenderState. So \"upgrading\" the custom blend mode to Vulkan [1] -once JME supports Vulkan- would only require a few steps but in the end OpenGL and Vulkan are very similar here. See: Vulkan quick spec, Vulkan blend factors.\n[1] I do not see a reason for mentioning DirectX here, as we all want a cross-platform engine and DirectX is limited to a single platform.\n. Thank you for your feedback. I would love to see this feature in JME, and obviously other people need it too. Since there seems to be an increasing number of core devs who recommend Enums, I will change this within the next couple of days.\n(My experience with open software is almost zero and I am not sure about which general guideline to follow. The Enum-way seems to make sense if JME is targeting to be able to support renderers other than OpenGL at any time. That is an interesting fact I did not know yet. /monologue)\n. @empirephoenix Hi! Sorry, I didn't expect that high workload over the last couple of weeks. It's slowly getting better though. I promise that the changes will come.\n. That's cool. I didn't even know that this was possible. Thanks for the tip!\nAn update is coming shortly.\n. I should have had more sleep, you're right. But! Then we have the GL dependency again.\n. @AlrikG I had to remove the integers in the enumeration. In fact, the Renderer (in this case GLRenderer) has to figure out the proper integer values on its own. Predefining a fantasy integer does not make sense and breaks the code.\n@shadowislord I have previously found a version of GL.h where these two are commented out. Don't know where that came from, I apologize.\n. You're welcome. Thank you, all, for your valuable input! :). @AlrikG Unfortunately I am not familiar with DXT5. As it seems to work with PNG, the problem is probably in the DXT5 texture itself, or in the way the DXT5 texture is treated by LWJGL.\nAre you sure that your DXT5 texture contains the proper values in the alpha channel? Does it work with the built-in BlendMode.Alpha?. ",
    "nsatragno": "Thanks for the replies everyone.\n\nCan you reproduce this issue with the last version of the SDK ?\nwhat happens with jme 3.1\n\nI cannot repro with the latest beta v3.1.0-beta :smile: \n\nxor with your other card\n\nCannot repro with the integrated intel card either.\n\ndoes that also happen with oracle jvm?\n\nYes (tried with the provided Oracle JVM 7).\nSo I assume this means we can close the issue?\n. ",
    "demoth": "Hi! Is this still valid? . so i'm taking it. well, in master branch this code is commented out. ",
    "DomenicDev": "I will create a pull request for this issue.. Seems like this issue can be closed since the commit has now been successfully merged into master.. I would like to take this issue.\nI have got a question though: What Code does the Key \"PrintScreen\" belongs to?. So it's okay to just increase LAST_KEY to 0xE1 and give PRINT_SCREEN the value of 0xE0 ?. Isn't it that most people rather know PrintScreen than SysRq? Or am I wrong?. I created a pull request for this issue:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/pull/806. Hi Nehon, thanks for merging. Can this issue be closed by now?. Sorry if the documentation isn't that good. If you could tell me what to write instead I would apply it of course. I am just willing to help.. Alright! Thank you very much for that exclusive explanation! Really, thank you!\nI will create a new commit soon and change the JavaDoc corresponding to your description. \n. ",
    "oOMoeOo": "Ok, i guess some outputs are very useless but the one in line 201 indicates an invalid graphics object. Are there any specific requirements for using loggers? If not i'm gonna use the standard java.util.logging.\n. When do you guys think this issue could be merged into the current or next release version? The request was merged into master in august 2016 but i still not see the issue in 3.1.0-stable.. Well that confuses me. I was thinking that issues get merged from master to the current/next release branch O.o\nShould i merge the commit from master to 3.1 in my personal fork and then create a pull request from oOMoeOo/v3.1 to jmonkeyengine/v3.1?. Ok, i cherry picked the commit from master and added it to v3.1. See pull request #631. I hope i've done it correctly and we gonna see the outputs been removed in 3.1.1 ;-). ",
    "jojoofu": "My drivers are up to date and JME 3.0 works on the same computer. Somewhere between 3.0 - 3.1 something got screwed up.\n. I'm not sure where the error starts in my application. The stack trace goes right into the lwjgl branch without cluing me in as to where it begun. \nWhat does that line do ? \nThe same downgraded to 3.0 app doesn't cause this error. A change somewhere mess up the compatibility.\n. ",
    "vinf100": "I cannot report the exact links as there are so many of them. However, from having a look, the broken links are the links which point to internal resources (other help pages in the documentation) in all the pages except the introduction, and the links in the table of the \"Create\" section of the introduction. However, the documentation seems to be fractured between \"github.io\" docs, and \"docs.jmonkeyengine.org\". The links in \"github.io\" work fine, but almost all of the information is in the other one. It is as if the entire page had been copy-pasted from the old wiki the current documentation, but the links inside had not been updated.\n. Just to be clear, the problem is in the \"docs.jmonkeyengine.org\", not \"github.io\".\n. ",
    "mitm001": "As I go through the tutorials I will post broken links here. If you rather I open another issue just let me know.\njMonkeyEngine 3 Tutorial (1) - Hello SimpleApplication\ndownloaded the jMonkeyEngine SDK -http://jmonkeyengine.org/wiki/doku.php/\nInstall the jMonkeyEngine - http://jmonkeyengine.org/wiki/doku.php/\njMonkeyEngine 3 Tutorial (3) - Hello Assets\n1.Download the town.zip - http://jmonkeyengine.googlecode.com/files/town.zip\nThis file has been uploaded to a git hub fork by ali.\nhttps://github.com/Ali-RS/jmonkeyengine/blob/master/jme3testdata/src/main/resources/Scenes/town.zip\njMonkeyEngine 3 Tutorial (4) - Hello Update Loop\nLink to user-proposed solutions: http://jmonkeyengine.org/wiki/doku.php/jm3:solutions\njMonkeyEngine 3 Tutorial (5) - Hello Input System\nLink to user-proposed solutions: http://jmonkeyengine.org/wiki/doku.php/jm3:solutions\njMonkeyEngine 3 Tutorial (6) - Hello Materials\nMaterials forum thread - http://jmonkeyengine.org/forum/index.php?topic=14179.0\njME3 Materials documentation (PDF) - http://jmonkeyengine.googlecode.com/files/jME3_materials.pdf\nCreating textures in Blender - https://www.blender.org/education-help/tutorials/materials/\nVarious Material screenshots - http://www.shaders.org/ifw2_textures/whatsin10.htm\n. Thank you. I will post others there if I find them. I will do it in batches to make it easier. I will have read every web page and visited every link on the wiki over the next several weeks.\nFrom: Ali-RS <notifications@github.com>\nTo: jMonkeyEngine/jmonkeyengine jmonkeyengine@noreply.github.com \nCc: mitm001 mitm001@yahoo.com; Mention mention@noreply.github.com\n Sent: Wednesday, October 26, 2016 11:52 PM\n Subject: Re: [jMonkeyEngine/jmonkeyengine] Broken Links in Documentation (#562)\n@mitm001 , @vinf100 \nYou are welcome to put broken links here. I will try to fix them.\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. We took care of the wiki stuff.  docs.jmonkeyengine.org is nowhere to be found in wiki.\nClose.. Its in the java doc comment for the class. Can search for new advanced water effect for jmonkeyengine 3 on forum for correct link.. I fixed it, submitted the pull request. The blog post was turned into a wiki page so I pointed the url there instead.\nCan close this after commit or whenever.. Just saw this, Ill look into it.. Ill address this in two comments.\nThe only place I found this link http://updates.jmonkeyengine.org/stable/3.0/engine was on the https://jmonkeyengine.github.io/wiki/jme3/eclipse_jme3_android_jnindk.html page. \nIts fixed but the content of that page needs significant work. Android Developer Tools (ADT) in Eclipse is no longer supported and I don't do eclipse so I will troll for someone on the forum to go through it. Doubtful we will get a volunteer though.\nShould probably remove this page if no volunteers.\nStill working on command line page.\n. Np, I updated the command line page.\nhttps://jmonkeyengine.github.io/wiki/jme3/simpleapplication_from_the_commandline.html\nIf you see errors or have suggestions let me know, otherwise this issue is done.\nEdit: Githubs being a bitch today. May take some time for the change to show up.. Its acting up on other repos I contribute to also, I will try again.. Weird thing is, the page is now updated but the build shows as failed. I will post a link on forum to see if there are any changes that need to be made.\nIf you think its good, can close this.. Leave a comment. Am I the only one experiencing this problem with the forum?. np, ill close issue.. Its still down for me, now Saturday. It showed back up for 10 min and been down since.. Closing.. Actually, the SDK mention shouldn't be there. Its mentioned in the next paragraph under getting started. \nI will remove it if want.\n. > Go to https://github.com/jMonkeyEngine/sdk/releases to download the jMonkeyEngine SDK. Read the wiki for a complete install guide. Power up with some SDK Plugins and AssetPacks and you are off to the races. At this point you're gonna want to join the forum so our tribe can grow stronger.\nShould read,\n\nGo to https://github.com/jMonkeyEngine/sdk/releases to download the jMonkeyEngine SDK. Read the wiki for a complete install guide. At this point you're gonna want to join the forum so our tribe can grow stronger.\n\nSince the plugins and assetpacks are nonexistent and likely to never be fixed.\nI can fix that also if you want.\n  . See https://hub.jmonkeyengine.org/t/how-to-disable-audio-for-simpleapplication/39305/20. ",
    "Drtikso": "fixed with NativeLibraryLoader.loadNativeLibrary(\"bulletjme\", true);\nand adding\njme3-bullet.jar\njme3-bullet-native.jar\nto classpath\n. ",
    "AquariusPower": "@pspeed42 both alternative suggestions are interesting (despite I still didnt find info about how it could be a 'user parameter'). Oh, these changes are solely intented towards new-comers, easifying the learning curve.. You made me think about creating a JME debug class specialized in tracking problems we end users could create. It would never be a dependency to let things run. It could unsafelly access everything (even private), mainly whenever an uncaught exception happens, and would not even require the \"modified flags\" to be exposed.\nBut the Spatial.name is just for debug reasons as I learned, therefore it's method name is still confusing. Despite we should not use getName() as a coding base, if we do it, it will still work, but may break things by not reaching Spatials thru the expected way (ex. thru Lemur methods). I guess that will remain in the learning curve then... \nGood to know you are keeping it clear/simple to not clutter and create maintenance troubles.\nI agree with you, I will just close it, thx!\nOops: just found this to anyone interested https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/CONTRIBUTING.md :). do you have a read-only copy of the community forum? \nif not, could this  be a good time to create one?\nsome things we can still read thru google's cache, but many are hard to find even there...\nwell, some ppl will just earn more points on stackexchange I guess :). @JESTERRRRRR \nhttps://hub.jmonkeyengine.org/t/why-it-was-down/38569/44. ",
    "Fluturenet": "Sorry. I meant that The stable installer installs a bundled copy of java that is not executable.\nI don't know if it is a jme or sdk issue.. ",
    "Kecon": "Please discard. Even though I get sentimental sometimes.. ",
    "bensku": "Awesome!\nIs FBA still needed for animations?. Oh. Didn't notice that. Very good!. java.lang.NullPointerException\n    at com.jme3.scene.plugins.fbx.mesh.FbxMesh.applyCluster(FbxMesh.java:127)\n    at com.jme3.scene.plugins.fbx.mesh.FbxMesh.toJmeObject(FbxMesh.java:213)\n    at com.jme3.scene.plugins.fbx.mesh.FbxMesh.toJmeObject(FbxMesh.java:58)\n    at com.jme3.scene.plugins.fbx.obj.FbxObject.getJmeObject(FbxObject.java:113)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.toJmeObject(FbxNode.java:399)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.toJmeObject(FbxNode.java:71)\n    at com.jme3.scene.plugins.fbx.obj.FbxObject.getJmeObject(FbxObject.java:113)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.createScene(FbxNode.java:496)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.createScene(FbxNode.java:503)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.createScene(FbxNode.java:503)\n    at com.jme3.scene.plugins.fbx.node.FbxNode.createScene(FbxNode.java:503)\n    at com.jme3.scene.plugins.fbx.FbxLoader.constructSceneGraph(FbxLoader.java:406)\n    at com.jme3.scene.plugins.fbx.FbxLoader.load(FbxLoader.java:126)\n    at com.jme3.asset.DesktopAssetManager.loadLocatedAsset(DesktopAssetManager.java:259)\n    at com.jme3.asset.DesktopAssetManager.loadAsset(DesktopAssetManager.java:373)\n    at com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:416)\n    at com.jme3.asset.DesktopAssetManager.loadModel(DesktopAssetManager.java:420)\n    \n    at com.jme3.app.state.AppStateManager.initializePending(AppStateManager.java:251)\n    at com.jme3.app.state.AppStateManager.update(AppStateManager.java:281)\n    at com.jme3.app.SimpleApplication.update(SimpleApplication.java:236)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.runLoop(LwjglAbstractDisplay.java:151)\n    at com.jme3.system.lwjgl.LwjglDisplay.runLoop(LwjglDisplay.java:193)\n    at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:232)\n    at java.lang.Thread.run(Thread.java:745)\n\nThis happens when trying to load one rather complex scene exporter from Blender 2.7.8. It happens with older version too, though.. Oh, that explains a lot :) No wonder why it didn't work...\nI guess I need to register SceneLoader to be associated with FBX manually.. ",
    "deltasquad451": "@Eirenliel I seem to be getting an issue with the animations not playing properly, I have a model created in MayaLT with a walk animation.\nHere it is in MayaLT:\n\nWhen I import the model with Jmonkey I get the following:\n\nHere is the model in question:\nhttps://drive.google.com/file/d/0B24ekh4abl8CTEhYeVFmZDZfTWM/view?usp=sharing. @JavaSaBr Does the Bos FBX  support animations though?. ",
    "Pilvinen": "@Eirenliel Any news on the above with deltasquad451? This is currently a major blocker for our project and has been for quite some time. We were already considering switching to Unity because we haven't found a way to get our models working. But we really don't want to do that if there's a possibility to get things working.. @JavaSaBr Unfortunately it's not possible. Blender messes up the rig on import when importing FBX. The FBX support in Blender is horribly outdated and buggy. And on the other hand Maya LT doesn't support exporting as .xbuf AFAIK. But thanks for the tip anyway.\n@Eirenliel Give me an estimate so I can make educated decision where to take my project to which I've invested considerable amount of time and money. 1 months, 2 months, 4 months, 6 months, 12 months, 24 months, never?. @JavaSaBr Unfortunately Maya LT supports only .OBJ, .FBX and .mayaLT. It's Autodesk's way of saying \"screw you\" to indie developers who can't afford Maya full. \n.blend support is good in Jmonkey but this whole Maya <--> Blender and Jmonkey <--> Maya inoperability has really screwed us over. We've tried all kinds of magic tricks for several months and we simply don't have a way to get our rigged and animated models to Jmonkey.\nHad we known this would be such an huge issue from the start we might have chosen differently, but we're now one year into development and frankly I'm at the end of my wits with this issue.\nFBX in a very unfortunate closed format industry standard - but the situation is what it is. Most of the animators out there use Maya or some other Autodesk product - and you guessed it - they all export FBX. Importing to Blender is a no-go otherwise we would simply do it like that and export .blend from Blender.\nI don't know what to do.\nEDIT: \nThe only thing I want to do is to get a pipeline, any pipeline, working which would allow us to:\n1) Make 3D models with Maya LT and Blender\n2) Make animations in Maya LT\n3) Export FBX from Maya LT\n4) ???\n5) Import to Jmonkey. \n@JavaSaBr This happens with Blender. Unfortunately it's not only the mesh but as you can see the bones are all messed up too, scale and everything. It's hopeless.\n@deltasquad451 did play around with BOS FBX but was unable to get it working with that either. It was some time ago so I can't remember all the details of what happened.\nGrowlybearproductions link I haven't seen before but it seems he only had problems with the mesh orientation and scale - and if you take a look at the screenshot I provided from my Blender FBX import adventures you can see it's hopelessly messed up and not just rotation and scale issue. The animation is there but it's... very funky.. ",
    "SkidRunner": "RollingTheMonkey. if you noticed i put comments to encurage creation of controls. I'll clean it up. thank you. actually i could create a state and 2 controls as protected classes if you want most IDEs would show the seporate classes nested in the treeview but the game would still remain in one file. damn I haven't written a un nested multiclass file since Java 1.1...LOL. @empirephoenix @Nehon I have made the changes.\ni could create another pull request and close this one if you would prefer.. > I would appreciate removing the presumed resolution and to display the settings page by default before merging.\npresumed resolution removed.\n@jayfella sorry that was just for my personal testing.. removed AppSettings. removed TempVars. to address concerns of mvvm style coding I could create a protected class here\nclass PlayerBallControl extends RigidBodyControl implements PhysicsCollisionListener {\n    public PlayerBallControl(float radius, float mass) {\n        super(new SphereCollisionShape(radius), mass);\n    }\n    @Override\n    public void collision(PhysicsCollisionEvent event) {\n        if(!this.equals(event.getSource())) {\n            return;\n        }\n        // TODO: handle collision event\n    }\n}\nOf course also creating separate classes for player input and pickups.. ",
    "Troxid": "vehicle doesn't work only in bullet (native) or for jbullet too?. ",
    "djperano": "I can confirm that this is a problem on Windows with AMD hardware when using Lighting.j3md. Our entire scene consists of objects with the Lighting material applied, and when using the LWJGL_OPENGL3 renderer on my boss's workstation we get a black screen. Switching to Unshaded.j3md works, but this is a temporary workaround for us.\nSystem specs:\nWindows 10\nINFO: OpenGL Renderer Information\nVendor: ATI Technologies Inc.\nRenderer: AMD Radeon R9 M370X\nOpenGL Version: 3.2.13417 Core Profile Forward-Compatible Context 15.301.2101.0\nGLSL Version: 4.40\nProfile: Core\n\nOn my Linux/nVidia workstation, both renderers work correctly with Lighting.j3md.. I made a goof... I should have mentioned that the problem occurs when rendering to an offscreen context in our own application. I will ask my boss to run TestPostFilter and see what happens.\nAlso, we're on jME 3.1.. ",
    "neph1": "I'll try this out (hopefully) in a couple of weeks.. (I believe) my fork of jMonkeyVR had full functionality of the application using an AppState, so it should be doable, but requires a bit of refactoring and trickery. I can redo the stuff with your fork, but I need some more time.\n. \"Many of the more complex games do not use necessarly a SimpleApplication compatible livecycle, and would have a lot of work to switch to this right now.\"\nThis is a good argument. I initially had the idea that the main benefit of having an AppState would be runtime switches between VR and non-VR. Looking at other VR enabled games (on Steam at least), however, they are usually started in either mode and changing is not possible while the game is running.. Note: If it wasn't apparent in my comment, I don't think a runtime switch between VR/non-VR is something to strive for. It was just my initial motivation for the AppState.. OK. I thought I could do it in a while, but be my guest! If I remember correctly, the important bit is that the appstate (at least in the case of jMonkeyVR) had to be added before starting the application. Ref TestOpenVR .java : TestOpenVR test = new TestOpenVR(vrAppState);. Mostly refactoring from what I can see + breaking out a controller class? More OOP is positive in my opinion. I've had to spend some time familiarizing myself with the plugin to make my small fixes, so I should hopefully be able to contribute more to this in the future. I'll stay away from the architecture, but I can help fix issues.. No. I think the whole logic for deciding whether to use the mirror view or not is really convoluted. I'd like to find out first why it checks if swap buffers is set. Like I said, reversing the setting worked for me. But that's for a different issue and PR to do. I just wanted to mention that I get it too.. Tested and approved. Nice job!. Migration to lwjgl bindings is complete in this PR: https://github.com/jMonkeyEngine/jmonkeyengine/pull/932. I contemplated that, but why have many different implementations that do the same thing? We just get fragmentation, more support requests and cluttered code. By offseting the support to lwjgl we get less reliant on individual committers. We also increase their usage base which makes them more interested in keeping up support.. As far as I can see, lwjgl is using openvr 1.0.16, which is 2 months old. The latest update of openvr in jme3-vr is 2 years old and is using 1.0.6. How is that evolving more slowly?\nAll I want is to make updating as simple as possible. What if we have two different openvr implementations. Do we have to supply both with every release too?. > The evolution is slow because i'm working on other projects during the same time. Your argument with LWJGL is not fair.\nThat is exactly what I'm talking about. If we rely on one person to update the bindings, what happens when that person is working on other things? By allowing the middleware people doing their thing, we can all work on actually using the things. Wouldn't it be nice if other people did this for you?\nI'm curious as to why you feel that lwjgl is slow to update. Looking at their history:\nhttps://github.com/LWJGL/lwjgl3/commits/master/modules/lwjgl/openvr\nThere are a couple of commits every month.\nAlso, I'd like to know your opinion on the binaries. Should jme then distribute two openvr lib's? Or none?\n. I don't know anything about #927 other than that they were doing the same thing as I was. So I just hinted they don't need to complete it ;). Maybe this is the best compromise for the time being. I'd like for lwjgl to be the default choice and that code sharing is maximized (which it seems to be from the code). The reason is since the rest of the engine is lwjgl based, it makes sense. I agree that jme is sometimes slow to adapt to new versions, but with gradle it's easy for a user to choose any version they like. It also means we can defer a lot of support questions to lwjgl, it's well documented, etc etc. I assume that over time, someone will migrate oculus bindings as well.. I don't have time to work more on this for the time being. But will pick up on it in due time. Thanks.. ",
    "jseinturier": "I've finished the integration of OpenVR 1.0.6. I know that many project aims at providing OpenVR binds for java (even LWJGL 3.1.2 provide now an OpenVR integration). I've made the choice to produce my own java bindings in order to follow the openVR / JME releases as soon as possible.. Hello Nehon. Here is the answers to your questions:\n1. Does this pr modify the core (as in any other jme-xxx module)? Seems your initial approach was to avoid that, and that's great, but did you achieve it?\nNO my jme3-vr module DOES NOT require ANY modification of the core distribution. The main goal of this fork from phr00t previous work was to deal with the original JMonkey distribution without any modification. The commited sources of jme-vr does not modify any core sources.\nMore over, the two aims of the jme3-vr module are:\n1. To use the original JMonkey distribution\n2. To conform to Java best practices (the phr00t distribution relies onmethod and classes that are linked using static methods and field and it is so difficult to modularize the components).\n3. To easy the following of the underlying VR systems (OpenVR, OSVR, ...) and to keep the jme3-vr module up to date.\n4. To minimize the external dependencies (at this time only JNA library is needed out the other JMonkey module).\nThe current commit validate the 4 points above.\n2. What's the used approach? Are you still extending SimpleApplication as phroot did? or is it entirely AppState based? (I could at least check this one out myself though, but hint: option 2 is way better)\nThe used approach is to extends SimpleApplication. As phr00t done, using only AppState is difficult as i need at this time many access to differents modules that are handled by the application itself.\n3. Does it use instancing as phroot did? Seems to be the standard of the industry now.\nYes the jme3-vr module can be used with instanced rendering. However, as the core shaders are not dedicated to instanced rendering, i've provided specific shaders that we have to use if we want to use instanced rendering. It is so not possible to switch between instanced / normal mode at runtime at this time.\n4. You said playstationVR?\nYes, i aims to be compatible with playstationVR (via the old Morpheus project) but this integration relies on a hack of the morpheus project (https://www.reddit.com/r/PSVRHack/comments/58ylma/psvr_apimorpheus_bridge_on_github/) and at this time i've not worked on it.\n5. I have no fifth question but it's to check if you read all my questions?\nI think i've read all of your questions !!\n6. And you ?\nHave you read all my responses ?\nThanks for your interest !. I'm aware that you would have AppState dedicated to VR instead of an application, but i think that the main argument of switching from VR to traditional rendering for a same application is not so easy. Switching from desktop to VR is not only a question of rendering, many aspects of the application will differ: the controllers, the GUI, the observer, ... So for me, to add the capability to Jmonkey to switch at runtime between VR mode or Desktop mode is not relevant as it involves a lot of work and as i'm not sure that is a good approach to to develop an application that can handle VR and desktop (the complexity of the application could be very high). As \nMore over, i've a deadline on March to produce a VR demonstrator based on JMonkey, so i'm not sure to have the time to refactor my code in order to use AppState, but it couldbe possible...\nTo empirephoenix, i've posted a sample application in this thread: https://hub.jmonkeyengine.org/t/official-vr-module/37830/10 I've not integrated the sample within jme3-vr as it requires dependencies that are not needed by the module (for example jme3-plugins for data loading).\n. Ok Neph1. I've just dowloaded your AppState and i'm working on an integration within jme3-vr, it should be done by next monday ;-). Hello all,\nIt has been a lot ow work but i've committed the last version of jme-vr. The module now provide an app state (called VRAppState) that enable to use underlying VR system (at this time OpenVR and OSVR). The is no more need of a specific VR Application. \nYou can get a sample within the forum (see the last post) at https://hub.jmonkeyengine.org/t/official-vr-module/37830/15\nI'm now waiting your decision in order to integrate the jme-vr module to the official JMonkey distribution.\nOn my way, i'm working to prepare the integration of the LWJGL-OpenVR binding (that is provided by LWJGL 3.2) as an alternative to the native OpenVR and OSVR systems.. Hello, How can i merge from the master branch within my own one ?. Its ok, i've merged my branch with the master one and there is no more error.\nI've just a question, i see that my JMonkey engine fork does not integrate later master commits. Is there a way within GitHub to synchronize my fork with the JMonkey official depot ?. Hello,\nI'm very sorry that my modified Spatial class has been embedded within a mergin attempt into the master repository. This modification was only for internal debug purpose (i needed to know where the flags of a spatial was modified when i was debugging instance  rendering).\nI know that Spatial is THE core class of JME and i can confirm that jme-vr does not modify any core class (for now it does not modify any class outside the jmevr package).\nWith my late commit, you can see that there is no more modification of the Spatial class. I'm also thinking that there is no more modification of any JMonkey core class.. I wanted to say that i've used the modified Spatial on the early stage of my jme-vr development. I've no more used this class since. I've just missed the fact that the class was embedded within my pull request...\nFor now, i'm not modifying any class outside the jmr-vr packages.. I've a question. My computer was down for several week and i would like to restart working on jme-vr for now.\nI've dowloaded the jme-vr fork and i've merged it with the latest master revision but when i run gradlew.bat i've got the following error:\nFull Version: 3.2-6220\nPOM Version: 3.2.0-SNAPSHOT\nFAILURE: Build failed with an exception.\n\n\nWhere:\nBuild file 'D:\\jse\\dev\\java\\jmonkey\\git\\jmonkeyengine\\jme3-bullet-native\\build.gradle' line: 26\n\n\nWhat went wrong:\nA problem occurred configuring project ':jme3-bullet-native'.\n\nException thrown while executing model rule: bulletjme(org.gradle.nativeplatform.NativeLibrarySpec) { ... } @ jme3-bullet-native\\build.gradle line 17, column 9\nbuild_caiybjvuz2wy1t4x2oeln1cse$_run_closure2$_closure9$_closure12$_closure13$_closure14\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n\nBUILD FAILED\nTotal time: 1.094 secs\n . Thanks for the answer.\nIf i force Gradle version to 3.5 (within the eclipse IDE with buildship plugin), the project can be compiled without any problem. I'm looking forward with the gradlew script within the distrib.. If i modify the gradle-wrapper.properties within the gradle/wrapper directory by replacing:\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-3.2.1-bin.zip\nby\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-3.5-bin.zip\nthe gradlew script within the distrib works fine. Maybe this modification should be done within the JME master ?. No class outside the jme3-vr package are impacted by the changes made by this commit. This is the main goal of jme3-vr: to provide VR capability to JMonkey without modifying core classes or other module classes. I do not submit a pull request if any class that is exterior to jme3-vr is impacted.\n. As there is no update of underlying OpenVR (still 1.0.6) and as the LWJGL3 OpenVR binding are not integrated within JMonkey, i plan now to make the code more Object oriented and more clear. My aim is to clean the code and the architecture before working on OSVR integration.. Done ;-). Hello,\nI've done a refbase and updates with the current master branch and i don't get any conflict or problem... Do you want me to make another PR anymore ?. Yes i've made a merge in order to check that all was ok... and all seems to be ok ;-). I'm sorry Nehon but i'm lost at this time... I'm seeing that my pull request contains commits from other developpers and i don't know why. Maybe i've done bad refbase at some time... But when i perform merge check on the PR, Github said that the jme3-vr branch can be merged within master branch automatically.\nHow can i solve the problems ? Do i have to restart from scratch my project ?. Hello Nehon, i've made the changes needed in order to merge with the master. I think the problem are solved.. I'm sorry to have wasted your time ;-) I'm now writing a WIKI entry for the VR module, i've forked the wiki project from jMonkeyEngine and i will make a PR by the end of the week.. No, i've posted the example on the JMonkey forum as i did not want to add a dependency to the jme3-vr within the jme3-examples project. But if you authorize me to add such a dependency, i can commit the sample from the forum in to the jme3-examples project.. The sample is committed, i'm going to make the related PR but do i have to wait that this current PR is closed before the new one ?. Yes the VR module needs lwjgl3 and java8. I've reverted the changes on the jme3-examples project (restored gradle file and removed vr related stuff). I think it's ok now, the PR is correct.. The idea of this commit is to have AWT component rendering capability respire the underlying renderer. More over, the use of an app state enable to use the component rendering without creating a specific application.\nMy problem is that the existing AWT related classes seems to only work with lwjgl3 and as i dis not want to break somethings i've committed classes with same lames bu within diff\u00e9rents packages.. Sorry for the mistakes within my previous comment. I wanted to says \"despite\" instead of \"respire\" and the actual AWT classes works only with lwjgl2 and not lwjgl3 or other renderer.. Hello Guys,\nSorry but nobody has accepted or rejected my pull request. Is it possible to accept or reject it ? Thanks a lot.. I'm sorry with this mistake but in fact this PR is not related with VR. This PR deal with the fact that when using LWJGL 3, the AWTCanvas and the related classes that enable to render Jmonkey within an AWT/SWING component are no more available.\nThis PR add new classes that enable to display JMonkey rendering within any AWT component and so that enable to int\u00e9grateur JMonkey rendering within any AWT/SWING application. The interest is that or does notre relies on specific LWJGL version.\nThe link with VR is that i'm also contributing to the VR module and a used the sale branch to make the pull request. Sorry. I've reactivated the forum topic that i have opened months ago ( AWT / Swing rendering with LWGJL 3.1.X) I hope that some guys will enable you to authorize (or reject) this PR.. Hello,\nDoes anyone can have a look to this PR ? I would like to know if it is acceptable ?. I reaffirm my dissatisfaction with this choice of REPLACING existing and functional code on which people rely for their development. It is quite possible to leave different rendering systems (OpenVR JNA, LWJGL, OCCULUS) side by side without modifying the central classes of the VR module.. Hello,\nI'm not agree with the replacement of the native JNA bindings with LWJGL bindings as the JNA ones are here in order to keep up to date the bindings to the latest version of OpenVR. If we only use LWJGL we will not be able to follow OpenVR as we want. \nHowever, we can add LWJGL bindings use as an alternative of Occulu and OpenVR existing mappings.\n. There is at this time differents implementations (OpenVR and Occulus) so removing OpenVR and replacing it by LWJGL will not solve fragmentation. This fragmentation is due to the various solutions provided for VR Rendering and one of the strength of our implementation is to be able to deal with these various solutions.\nFor my own example, if i'am limited to the use of LWJGL bindings to OpenVR (that relies on old version and that evolves quite slow) i don't know if i will be interested by using JMonkey for VR rendering as i will not be able to integrate lasts version of the underlying systems.. We can integrate LWJGL binding for ones that search for stability and support but we can keep the possibility to use other implementations for the ones that are interested.. Hum... The jme-vr module has been updated 7 months ago and relies on OpenVR 1.0.9.\nThe evolution is slow because i'm working on other projects during the same time. Your argument with LWJGL is not fair. Ok today you have the OpenVR 1.0.16 binding because LWJGL has just be updated few days ago but in 6 months as the LWJGL distribution that JMonkey use is not updated regularly the LWGJL bindings will be outdated.\nMy problem is that the main goal for the creation of the jme-vr module was to provide a common interface for JMonkey that can relies on various implementations. This argument is a big sense as it exists at this time various implementations. The fact that i've not be able to update the whole implementations during time is true but it cannot be used to avoid this effort to provide multi implementation capabilities.\n. As i said within PR #927, I reaffirm my dissatisfaction with this choice of REPLACING existing and functional code on which people rely for their development. It is quite possible to leave different rendering systems (OpenVR JNA, LWJGL, OCCULUS) side by side without modifying the central classes of the VR module.\nIf there is a need to use LWJGL OPENVR binding, just update the com.jme3.system.lwjgl package and no not make board effect by modifying classes that are used by other people.\n. Hello,\nI've created PR #937 trying to solve the situation. I've integrated your changes regarding LWJGL binding of OpenVR but instead of replacing all existing JNA bindings i've made another package that implements VR interfaces but that delegates to LWJGL/OpenVR.\nI know your concerns about having 2 different bindings for OpenVR but i think this is actually a good way to go as VR systems are evolving really quick and we have to be able to update VR capabilities even if for example LWJGL is not updated (i know that LWJGL itself is updated regularly but the integration of LWJGL within JMonkey is often delayed).\n. Another question Neph1, what is the purpose of the PR #927 ? They've have changed a lot of things and with their modification nothing is no more working for me... . So Neph1, if you're agree, at this time we can validate this PR (i will change the settings of the VR module in order to use LWJGL/OpenVR implementation by default).\nI've now time to work on VR module (i need to prepare a museum exposition based on VR within the domain of underwater exploration). I can propose you to work on the externalization of JOpenVR from JMonkey (for example by creating an \"Official\" distribution of JOpenVR and by referencing it as an optionnal dependency, as we do for lwjgl-openvr).\nIf it is ok for you we can use this PR as basis.. It has to be close. Solved within another PR. Maybe this PR can be accepted ? . ",
    "muellermartin": "k, thanks for the stable release though!. ",
    "manuel-hegner": "It should not? I was under the impression that this is the way to reduce\nobject allocation/garbage collection in performance critical steps.\nBut I guess if it is not supposed to be used externally this issue is not\nas important.\nPaul Speed notifications@github.com schrieb am Do., 16. Feb. 2017, 23:00:\n\nDo note: generally user code should not be using TempVars. It's a sign of\nbig problems. JME has no choice in some cases but user code almost always\ndoes.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/621#issuecomment-280475463,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALtEXDkG_9MHhSW0GYMQKTfDfLpmCetuks5rdMbrgaJpZM4MDTL9\n.\n. It would not. To enable try-with-resource statements the class only \nneeds to implement Closeable, which is part of Java since 1.5 and part \nof Android since the beginning.\n\nOn 08/05/2017 15:47, empirephoenix wrote:\n\nWont try with ressources break older java api compability? this would \nbe kinda fatal to android and other more exotic platforms\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/621#issuecomment-299871458, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/ALtEXEtNAAjn-j2l6RQO-8TVwf1_BNJEks5r3xz8gaJpZM4MDTL9.\n\n\n. ",
    "dakk": "I thought it was a software bug, so I posted it here; btw I'll post it in the forum. Yes, I just found the problem was in netbeans so it's not a jME bug; I also found that the problem is inside the diffsidebar of netbeans (https://bugs.funtoo.org/browse/FL-2988). I fixed for the moment by disabling the module SVN and GIT, thank you anyway. ",
    "JustDaile": "Some of your links in tutorials are broken these are issues, it all seems outdated. Ogre seems unsupported in 3DS max 2017... How can I import animations using max? I have search everywhere an no luck... ",
    "Jeddic": "I'm running into this problem as well since I updated to master for Spoxel, but only on my Retina Macbook Pro. It has a Geforce 650M graphics card so its not just an amd problem. I attached the output from setting the graphics debug on as well.\noutput.log\n. So I narrowed down the problem a little bit. It looks like there is a World Mat Override for \"NumberOfBones\" that gets applied to models added to the attachment node. If I set: \n    node.addMatParamOverride(new MatParamOverride(VarType.Int, \"NumberOfBones\", null)); on the attachment node then the geometry will appear. My guess is that since number of bones is set at the parent level it is forcing static geometry on an attachment node to calculate skinning which breaks on certain graphics cards. I'm going to test on my other dev machine to make sure this doesn't break something else. I'm not crazy for thinking that attachment nodes shouldn't be animated, right? @shadowislord @AlrikG . Yea, I wasn't very clear. My expectation was that at least by default anything in an attachment node shouldn't be skinned by default and should just follow the node. \n@Nehon I tried master and it seems to be working after your fix, thanks!. ",
    "Saucistophe": "Rays seems to think otherwise:\njava.lang.IndexOutOfBoundsException\n    at java.nio.Buffer.checkIndex(Buffer.java:540)\n    at java.nio.DirectFloatBufferU.get(DirectFloatBufferU.java:253)\n    at com.jme3.collision.bih.BIHTree.initTriList(BIHTree.java:92)\n    at com.jme3.collision.bih.BIHTree.(BIHTree.java:135)\n    at com.jme3.collision.bih.BIHTree.(BIHTree.java:139)\n    at com.jme3.scene.Mesh.createCollisionData(Mesh.java:965)\n    at com.jme3.scene.Mesh.collideWith(Mesh.java:994)\n    at com.jme3.scene.Geometry.collideWith(Geometry.java:457)\n    at com.jme3.scene.Node.collideWith(Node.java:611)\n    at com.jme3.scene.Node.collideWith(Node.java:611)\nIt took me forever to debug it, but I found that changing the number of radial samples makes it work.\nwith 8 samples, ray collision fail about 3 times out of 4; with 9, it works every time.\nI'll try to create a SSCCE.. There you are.\n```java\nRandom random = new Random();\nint ok = 0;\nint ko = 0;\n@Override\npublic void simpleUpdate(float tpf)\n{\n    // Start with a clean node at each frame\n    rootNode.detachAllChildren();\n// Create a wireframe cylinder.\nCylinder cylinder = new Cylinder(2, 8, 1, 1, true);\nGeometry geometry = new Geometry(\"cylinder\", cylinder);\ngeometry.rotate(FastMath.HALF_PI, 0, 0);\n\nMaterial mat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\nmat.getAdditionalRenderState().setWireframe(true);\ngeometry.setMaterial(mat);\n\nrootNode.attachChild(geometry);\n\n// Cast a random ray, and count successes and IndexOutOfBoundsExceptions.\nRay ray = new Ray(new Vector3f(random.nextFloat(), random.nextFloat(), random.nextFloat()), new Vector3f(random.nextFloat(), random.nextFloat(), random.nextFloat()));\nCollisionResults collisionResults = new CollisionResults();\n\ntry\n{\n    rootNode.collideWith(ray, collisionResults);\n    ok++;\n}\ncatch (java.lang.IndexOutOfBoundsException ex)\n{\n    ko++;\n}\nif ((ko + ok) % 100 == 0)\n    System.out.println(\"Ok : \" + ok + \", Ko : \" + ko);\n\n}\n```\nIt's strange that it's occuring randomly, but I get :\nOk : 13948, Ko : 1552\nWhich is roughly 1 cylinder out of ten that's off.\nI stopped the simulation once an incorrect cylinder is generated, and here it is:\n\nResults seem to vary, strangely:\n\nHope this helps.\n. I'm looking into it; I'll try to document the class better.\nFirst of all, the javadoc is not clear about what \"axis samples\" means.\n@shamanDevel thought it means the number of segments, I think it's the number or vertices per vertical edge (the number of segments +1). Here is a 3x3 cylinder rendered:\n\n. @shamanDevel That is indeed the question.\nI came here because my application crashes randomly, and I tracked it down to the cylinder.\nIf you run a simple application with the simpleUpdate above, you'll see the cylinder will render correctly, but one frame out of ten, you'll get an extra triangle or a nasty triangle glitch.\nMy guess is that the buffer is indeed too short, and the rendering uses data that's out of bound and prone to change as memory is allocated.\nI've refactored the cylinder generation code into something more readable, but I still get the glitch.\nI'll push the code by Sunday, I hope I'll find what's wrong by then.. @empirephoenix I'd have used an IllegalArgumentException if it were only for me, but I'm always afraid of breaking the existing behaviour for somebody somewhere. You think I should?. The issue was (probably) that too big a buffer was created for triangles because of incorrect calculations, and that lead to uninitialized, random data in the buffer which randomly generated invalid geometries that crashed rays.\nI didn't test with erroneous parameters, since correct ones were enough to crash the ray thingy.\nLet's go for exceptions, then!. I added a test case; but what's strange is that I can't seem to make if fail with the old implementation of the cylinder.\nIf you check #640 , you'll find the code I've used to raise exceptions once out of ten; for some reason, the unit test is always OK. I think it's useful all the same, but you can dispose of it.. @Nehon I've tested (visually) all the possible combinations on the following conditions:\n\n2, 3, and 10 axis samples\n3, 4 and 10 radial samples\nInverted/not inverted\nClosed/not closed\n\nI only tested with two random radiuses.\nI do not have the same result for textures on closed cylinders: I spread equally the vertical coordinates of textures along the caps and sides.\nBefore, if you had 3 axis samples and 2 caps, the bottom was at 0, the bottom edge at 0.2, then 0.4, 0.6, 0.8 on sampling points, then 1 on top cap.\nNow, it depends of the radii: if the bottom radius is 0.5, height 0.3 and top 0.2, you'll get 0, 0.5, 0.8 and 1.\nI'm not sure this is clear - nor a good idea for that matter - but it does smooth the texture for thin and thick cylinders. Would you want a screen capture?. \nThere you have it.\nThe new one is on the left. Notice how the sides are roughly one third of the surface, and one third of the texture. The cap is big, it uses a big part of the texture.\nOn the old one, the sides always use 3 quarters of the texture and the remaining quarter for the caps.\nThe old one always kept the same texture ratio but has poor repartition of details, the new one has no predefined ratio but provides better repartition of details.. @Nehon My thoughts exactly. If someone complains, I can always add a flag or something.\n@empirephoenix Thank you both for yours on the review :). Sorry about all that.\nI usually use tabs and I did not check that it was the case, my bad.. Tabs as well.. Okay!. Okay!. ",
    "squishybanana04": "Are there any active links or should I self host?. ",
    "thoced": "I will try, I will try to solve this problem. but I do not promise anything\nThoced. Hello, have you disabled the flycam?\nBy leaving the flycam on enable, generally without intercepting the entries of the gamepad, the camera can be directly controlled\nHow do you capture the input of the gamepad ?\nTry using the addRawInputListener method in InputManager.\nFor the future, I think the forum https://hub.jmonkeyengine.org/ is more appropriate to ask your question. You must retrieve the value using the getValue method of the JoyAxisEvent object.\nThe value will be between -1f and + 1f, for example, multiply this value by a factor and apply it to your transformations that will move your character or something else.. A PR is proposed with a correction.  Can you check if this seems correct ?. Hi, I did the test with the code but I do not have this problem. The program continues to function without getting stuck. I'm using JME 3.2. This problem may be related to your issue:\nhttps://github.com/jMonkeyEngine/jmonkeyengine/issues/801\n. yes I tested, the shadowmode is well applied to materials. Indeed, the problem is that the OgreScript does not export a flag to indicate that we want to casts shadows.\nWe could force with the ShadowMode.CastAndReceive parameter but that would not be correct either if the user does not want the shadow to be projected.\nMaybe we should look in the Blender ogre export script and add this possibility. Hello, are you working on the problem right now?. ",
    "Sailsman63": "Well, it was back for a while yesterday, and is now gone again. Pinging, just in case site admins thought that  this was corrected.. Well, I was able to confirm on:\nNVIDIA Quadro FX 880m/PCIe/SSE2\nOpenGL 3.3.0\nGLSL 3.30\nProfile: compatibility.\nWindows 10 PRO\nI've not been able to figure out how to force my laptop to use the integrated chipset instead. (some variant on Intel HD)\nI don't understand for certain why this is happening, but I suspect that some insight may come from the Khronos spec for how glPointSize is handled\nApparently, there is a multiple-step Round-and-clamp process when figuring out the actual rendered size.\nIn particular, I have not been able to figure out if JME enables GL_POINT_SMOOTH by default, which will affect how AA rendering handles points. GL_POINT_SMOOTH is disabled and MSAA is enabled, the render width of the point is reduced from the number specified in PointSize. The math on this is unclear. (formating issues on the page)\nNote: PointSize (The variable) always remains at the size the code sets, even if the GL driver is monkeying with it behind the scenes. See also the notes on POINT_SIZE_RANGE and POINT_SIZE_GRANULARITY. Brief Follow-up:\nI added a Quad behind the points, and adjusted the colors to contrast and blend well. (Red and Blue)\nI found that when using AA, the points' alpha is shifted to more transparent, but they are still rendered as squares.\nThis is consistent with GL_POINT_SMOOTH being disabled.\nI Might be able to hack together an ARM build of LWJGL, and test this out on a RasberryPI, just to get a different GPU involved. That, however, may take a bit.. ",
    "JESTERRRRRR": "nooooooooooooooooooooooooooooooooooooooooo it's gone again. Can't see any of the images anymore. I think it's positioned correctly though.\nDisplay.getHeight() returns 1064 (for my 1080 desktop height - I assume the gap is for the border) no matter what I set the height to in the appSettings, so I can't make the display bigger than the monitors resolution and the GUI element appearing too high up is correct since it's being placed off screen.\nIf you set:\nSystem.setProperty(\"org.lwjgl.opengl.Window.undecorated\",\"true\");\nyou can set the window size bigger, e.g. height = 3000. With this Display.getHeight() returns 3000 but if you stick something on the GUI node at 0,3000 it'll appear in the top left, and anything with a height of 0 will appear off screen. Not sure if this would be considered a problem.. Add this:\ndlsr.setEdgeFilteringMode(EdgeFilteringMode.PCFPOISSON);\nor some of the others from here:\nhttps://javadoc.jmonkeyengine.org/com/jme3/shadow/EdgeFilteringMode.html\nIn here: https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-core/src/main/resources/Common/ShaderLib/Shadows.glsllib#L163-L166\nKERNEL must be >1.0 for it to have an effect, some of the edge filtering modes in the code just above that do not\n\n. ",
    "jmecn": "ok, I'll do it tonight.. @empirephoenix I made a pr again to fix this problem.. I see. Next time I will make separated PR.\nJust modified the code, please check it.. ok, let me see... Oh my.. I finally understand that line now.. @Nehon never use rebase before. But I think I can have a try.. @Nehon sir I have conbined the commits, please check my code.. Why this pr build failed? any reason?. ",
    "midikiman": "Oh, there are some jre dump logs in the directory where I ran the installer, one for each attempt. First one attached, access violation in \"Swing-Shell\" thread.\nhs_err_pid12144.zip\n. Windows 10 home, 64-bit. Turning off UAC made no difference, unfortunately. Guess I'll have to try using jME without the SDK, or go with a different engine.\n. I updated to 131 and uninstalled earlier versions, \"java -version\" reports 1.8.0_131, but the error message in the hs_err file didn't change. It still crashes with a memory access exception (0xc0000005 reading address 0), and reports version 8.0_111-b14. I don't have 111 installed on my machine, so I'm guessing it's using code baked into the installer exe... OK. hs_err, installer log, and screenshot of \"java -version\".\ninstaller-crash-logs.zip\n. Thank you for looking into the problem. It seems from those bug threads that the installer expects to be installing the only version of Netbeans on the system, a flaw that it inherited from the base platform. I'm not sure I want to scrap the version I have yet.\nI unpacked the platform zip file and can run the SDK from there, so I think the issue is resolved. It only finds one of the graphics drivers (this machine has both Intel and nVidia cards installed, it's only listing Intel), and the connection to grab the 'welcome' screen times out, but those are minor quibbles. I think you can close this issue.. ",
    "Bekreth": "Can this ticket be marked as close?. I guess you just have to decline it then. I raised this PR because I felt the documentation was misleading.. ",
    "misterwrong": "I believe I put this in the wrong project. My apologies.. ",
    "atomixnmc": "@empirephoenix This kind of insights on JavaFx make any Java developers tatse the feel of fear... of getting old and get abandoned again. I don't have such kind of problems with JavaFx since I didn't use it with OpenJDK. Anyway, Oracle make everything look bad, the community still there and growing. I still think is a good point if efforts spend to make JME3 work in JavaFx the way it worked in swing. . ",
    "mazerty": "perfect :) thank you !. isn't there a problem with travis ? the build shouldn't fail like this right ? :(. do you know how to retry the build without commiting anything new ? maybe i should cancel the pull request and create it again ?. yes ! the build passed on this one :). ",
    "OvermindDL1": "\nI'll look more into it tomorrow.\n\n@quazi-irfan How's it going?. ",
    "SpaceboyRoss01": "I am using the addRawInputListener method in InputManager.. That part works for moving the player, but not yet the camera. Yes. ",
    "pspeed": "I think you have incorrectly set me as the reviewer . ",
    "realManix": "Test case:\n`public class Main extends SimpleApplication {\npublic static final int WINDOW_WIDTH = 1920;\npublic static final int WINDOW_HEIGHT = 1080;\n\npublic static void main(String[] args) {\n    Main app = new Main();\n    app.setShowSettings(false);\n\n    AppSettings appSettings = new AppSettings(true);\n    appSettings.setWidth(WINDOW_WIDTH);\n    appSettings.setHeight(WINDOW_HEIGHT);\n\n    app.setSettings(appSettings);\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    BitmapText bt = new BitmapText(guiFont);\n    bt.setText(\"jMonkeyEngine3\");\n    bt.setLocalTranslation(0, WINDOW_HEIGHT, 0);\n\n    guiNode.attachChild(bt);\n}\n\n}`\nCase when I set the WINDOW_HEIGHT to 900: https://anonimage.net/image/LBKXFHMSQt\nCase when I set the WINDOW_HEIGHT to 1080: https://anonimage.net/image/CKZEOyJEnz\nOS: Windows 10\nGPU: NVIDIA GeForce GTX 1060 6BG. ",
    "rvandoosselaer": "hi @Nehon , sorry this completely slipped my mind. I updated the PR, it's now an empty constructor for serialisation.. I think it can be used more then only for serialisation; now you can instantiate the mesh and it will have some default behaviour (2 by 2 world units in size). Just like the com.jme3.scene.debug.Wirebox for example. But I do get both your points. I'll have a peek at SM and see for a private constructor, or just an empty one.. ",
    "jandam": "I'm sorry I don't have enough time to create pull request for at least 1 month. I'm working on another project but I decided to contribute to JME at by this form.. ",
    "ZNixian": "@neph1 Should I remove that altogether, then?. @jseinturier Just a heads-up for in future, 'Oculus' is spelt with a single 'c'.. ",
    "ASDFGamer": "Ok, thanks for the quick answer, i was just curious.. ",
    "o-oualid": "those are not templates you can't use them in a project, use this. \nIf you want an easy way use bootMonkey with aegroto's JMEAndroidTemplate.. ",
    "ethiel": "I wouldn't say this is an issue. There is a specific template, as @o-oualid said, which works perfectly fine.. Not from me. Go ahead, if there are no objections. :). ",
    "gdr2490": "A workaround is adding all the materials to one file. This seems to work.. ",
    "thecheeselover": "Strangely, I didn't see any notifications for this thread.\n@thoced Nope, because of this : \"However, doing this creates a circular dependency in the gradle configuration, as it tries in the core project to use classes from the plugins project.\" If it was a simple, then of course I would have done it. However, it is much more complicated. It's actually a conception / architecture problem.\n@gdr2490 Could you explain more, please?. ",
    "b00nation": "this fixes the issue #843. @Nehon, sure, here you go:\nIssue840.zip\nIn the fragment shader change the line:\ngl_FragColor = vec4(1.0);//comment me\n//gl_FragColor = vec4(1.0,0.0,0.0,1.0);//uncomment me\nto\n//gl_FragColor = vec4(1.0);//comment me\ngl_FragColor = vec4(1.0,0.0,0.0,1.0);//uncomment me\notherwise, take a custom MaterialDefinition register a shader and change that one:\n```\npackage mygame;\nimport com.jme3.app.FlyCamAppState;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.material.Material;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.util.MaterialDebugAppState;\npublic class Main extends SimpleApplication {\npublic static void main(String[] args) {\n    Main app = new Main();\n    app.start();\n}\n\n@Override\npublic void simpleInitApp() {\n    Box b = new Box(1, 1, 1);\n    Geometry geom = new Geometry(\"Box\", b);\n\n    Material mat = new Material(assetManager, \"MatDefs/Unshaded.j3md\");\n    geom.setMaterial(mat);\n    MaterialDebugAppState materialDebugAppState = new MaterialDebugAppState();\n    stateManager.attach(materialDebugAppState);\n    rootNode.attachChild(geom);\n    materialDebugAppState.registerBinding(\"MatDefs/Unshaded.frag\", geom);\n    stateManager.detach(stateManager.getState(FlyCamAppState.class));\n}\n\n}\n```\nfragment-shader:\nassets\\MatDefs\\Unshaded.frag\nvoid main(){\n    gl_FragColor = vec4(1.0);//comment me\n    //gl_FragColor = vec4(1.0,0.0,0.0,1.0);//uncomment me\n}\nvertex-shader:\nassets\\MatDefs\\Unshaded.vert\n```\nimport \"Common/ShaderLib/GLSLCompat.glsllib\"\nimport \"Common/ShaderLib/Skinning.glsllib\"\nimport \"Common/ShaderLib/Instancing.glsllib\"\nattribute vec3 inPosition;\nvoid main(){\nvec4 modelSpacePos = vec4(inPosition, 1.0);\n\n\ngl_Position = TransformWorldViewProjection(modelSpacePos);\n\n}\n```\nMaterialDefinition:\nassets\\MatDefs\\Unshaded.j3md\n```\nMaterialDef Unshaded {\nMaterialParameters {\n}\n\nTechnique {\n    VertexShader GLSL150:   MatDefs/Unshaded.vert\n    FragmentShader GLSL150: MatDefs/Unshaded.frag\n\n    WorldParameters {\n        WorldViewProjectionMatrix\n        WorldMatrix   \n        ViewProjectionMatrix\n        ViewMatrix\n    }\n\n    Defines {\n    }\n}\n\n}\n```\n. ",
    "rjbergTU": "Why not remove or deprecate the feature then?\nAlso, I wish I knew this before I suggested disk caching for networking. Sorry to bother you with that.. All right, sorry to bother you then. Just thought it could be useful for games with a lot of huge data files. But you are right, that could be done seperately without changing anything.. ",
    "aegroto": "As far as i remember I tried to compile snapshots releases. The fact that imports are injected once is still creating me issues.\nThe way those imports are added is uncontrollable to the programmer (I think that an alphabetical order is used), being impossible or unreliable to use imports in an already 'importable' file, like on glsllibs used in jME's core. This sort of nestability could be really useful.\nI think that imports should just be copied in source code every time they get involved, then the programmer should be responsible to handle multiple importing with preprocessing annotations. This could lead to some incompatibility with older materials, but will make the import system more versatile.\n. Changing the order could be useful, but what about multiple imports in different shader nodes?. Does changing older solve this issue too? I can't recognize how.. Assume that two glsllib import another glsllib file. How is importing order handled?. Well this is exactly the situation where I found this issue. I have the need to import a glsllib with common helpers functions in other glsllibs which perform specific tasks. Redefining those functions is pretty redundant.. I'll close this issue as the original problem is solved in latest snapshots.. ",
    "joliver82": "Removed to upload a new compilation of android natives to have @stephengold jme-bullet improvements/fixes. I rebuilt the game I'm developing right now which uses vehicle control and some joints and works as expected and even performs a little better than my previous native compilation. Compilation included in jme3 now breaks at least vehicle control.\nI've not tested anything more specific\nAlso... I've noticed issue https://github.com/jMonkeyEngine/jmonkeyengine/issues/915 would it be possible to include also automatic compilation in CI? With the mk's and gradle modifications I've made,  it's as easy as running \"grade updatePreCompiledBulletLibs\" for jme3-bullet-native-android subproject\n. The \"exexCommand == null!\" error may just mean you don't have android ndk installed in the path defined in gradle.properties previously /opt/android-ndk-r10c and now /opt/android-ndk-r16b. I've just moved away my Android ndk and got the exact same error, so properly setting ndk to the gradle path should suffice ;). ",
    "fba-rio": "Oops, you're right. Sorry for my mistake.. ",
    "xahon": "Thanks, @grizeldi. I hope @MeFisto94 will tell more in this thread. ",
    "oxplay2": "My workaround is:\nCreate Ant project for just Assets\nCreate gradle project for sources/libs/etc.\nin gradle dependencies add:\nruntime files(\"..//separateAntAssetsProject/assets\")\nReady! Just Use SDK features for all Assets, while still same SDK you can modify gradle project.. it was simple cube with one bone(p -> automatic weight) using Blender 2.79b.\nWas working using blender exporter, but using gltf exporter was above exception.\nAnyway KinematicRagdollControl will be replaced by DynamicAnimControl?\nbased on \"If you\u2019re on JME 3.2, you can start using DynamicAnimControl any time you want. You don\u2019t have to wait for JME 3.3 to be released.\"\nbut i agree, it might take long time before 3.3\n. ",
    "DanielMartensson": "The solution was:\nUse jme3-jbullet library. Not the jme3-bullet and jme3-bullet-native library. \njme3-bullet and jme3-bullet-native is default in the library folder at SDK 3.2 version.. ",
    "bashburn": "I've only tried it with LWJGL3, but I think it has something to do with the way the viewport is being created.  The grey that you see in the image is from a SkyBox, so I'm expecting that to fill the entire screen. You can see the code that I'm using for this at https://github.com/bashburn/dagfinn-torbin-java. I've done some playing around with using direct LWJGL3 with GLFW to create a window and load a OBJ model, and it fills the entire window. I've been scanning through the jME code to try to find where the difference is. I think it might be something with the camera perspective, but I need to dig a little deeper to determine that.. The problem is that the Display class is no longer in LWJGL3. According to the GLFW documentation, we need to get the framebuffer size to pass to the viewport - http://www.glfw.org/docs/latest/window.html#window_fbsize. In order to do this, we need access to the GLFW Window handle. I'm going to work on finding the right way to get the size from that and get it passed in, since I can't do it directly.. ",
    "iamstuffed": "You can force the renderer, as suggested here: https://hub.jmonkeyengine.org/t/pbr-examples-do-not-work-on-osx/40924/7\nAppSettings settings=new AppSettings(true);\nsettings.setRenderer(AppSettings.LWJGL_OPENGL3);        \napp.setSettings(settings);. Running the demos doesn't work due to the jvmArgs \"-Djava.awt.headless=true\" argument. jvmArgs \"-XstartOnFirstThread\" is needed only for lwjgl3.. ",
    "James-Richardson": "Thanks, Stephen. I look forward to giving it a test once it's in the master repo.. ",
    "chengenzhao": "maybe to provide an engine which builds on vulkan and metal(macosx)?. ",
    "Nebloksiam": "Please delete this pr... I have some animated cursors (.ani) in my project. None of them could be loaded. The animated cursor from jme-testdate does work, I don't know why.\nI've attached a test case\nCursorTest.zip\n. ",
    "DavidYKay": "1: whoops! Didn't mean to PR against the main repo.\n2: Because I've been developing my application against JME 3.2.1 to have a stable starting point. Happy to rebase this on master when it's cleaner and ready to go. \nThanks for your hard work on the engine! :smile: . OK. Closing. Ended up switching to a different engine for my product. Apologies for the confusion!. ",
    "drzhonghao": "I believe that the two methods shall throw the same exception for the same problem. Or else, it becomes inconsistent, and sometimes difficult to understand. . ",
    "Srikrish3103": "Sorry it was by mistake.closing it now. ",
    "Ev1lbl0w": "I had this problem too some time ago and reported it here. It has not yet been fixed AFAIK but for anyone willing to dig deeper, here's what I found out:\n- As @MeFisto94 said, this problem happens because LWJGL and AWT are reporting different refresh rates for the same resolution. Forcing the refresh rate to 60Hz in my case makes jMonkey apps able to go fullscreen.\n- This problem is happening with the nvidia proprietary driver for linux, in my case. Switching to nouveau fixed these problems to me, so I encourage other people to test this as well. Back then I had a legacy driver (340.X), but even with the latest driver (415.X) this problem persists.. What graphics card are you using? What driver are you using? Give us more info about your setup.. ",
    "neo-expert": "I've tested some other openGL projects (OpenTomb and lwjgl3-demos). They do work.\nI just ran the test class \"jme3test.awt.TestCanvas\" - this worked.\nCan we determine which GL-Call actually failed?. the test class jme3test.awt.TestAwtPanels\nfails with following error:\nFailed to create display\nLWJGLException: Parent.isDisplayable() must be true\nStacktrace:\n```\nSEVERE LegacyApplication 10:43:36 Failed to create display\norg.lwjgl.LWJGLException: Parent.isDisplayable() must be true\n        at org.lwjgl.opengl.Display.createWindow(Display.java:301)\n        at org.lwjgl.opengl.Display.create(Display.java:848)\n        at org.lwjgl.opengl.Display.create(Display.java:757)\n        at com.jme3.system.lwjgl.LwjglDisplay.createContext(LwjglDisplay.java:143)\n        at com.jme3.system.lwjgl.LwjglAbstractDisplay.initInThread(LwjglAbstractDisplay.java:113)\n        at com.jme3.system.lwjgl.LwjglAbstractDisplay.run(LwjglAbstractDisplay.java:211)\n        at java.lang.Thread.run(Thread.java:748)\nSEVERE LwjglAbstractDisplay 10:43:36 Display initialization failed. Cannot continue.\n```. For example we could have a modelmatrix in the Spatial class:\nfloat[] modelmatrix=new float[16];\ncan we change the values of this matrix directly from jni?\nIt would be much performanter, because you don't need to call the methods to update the tranformation.. The float matrix is just for simplification.\nthere is a class called \"com.jme3.math.Transform\", we could change it's values instead.\nI am not sure, but for OpenGL we need a modelmatrix anyway? . When we change the values directly, we don't need to call anything.\nI will try it maybe... The question is just, if it is possible to access the class variables from jni, and the synchronization thing. The access to such matrix should be synchronized.... jme3 bullet package uses Spatial class, I think it has jme3-core as dependency.\nI mean when such Matrix is somewhere in the memory, and we can change its float values directly, we don't need to do anything else, they get just changed.\nBut it is just a consideration.\nThe applyTransform method does a lot of work:\n```\npublic boolean applyTransform(Spatial spatial) {\n        if (!physicsLocationDirty) {\n            return false;\n        }\n        if (!applyPhysicsLocal && spatial.getParent() != null) {\n            localLocation.set(worldLocation).subtractLocal(spatial.getParent().getWorldTranslation());\n            localLocation.divideLocal(spatial.getParent().getWorldScale());\n            tmp_inverseWorldRotation.set(spatial.getParent().getWorldRotation()).inverseLocal().multLocal(localLocation);\n        localRotationQuat.set(worldRotationQuat);\n        tmp_inverseWorldRotation.set(spatial.getParent().getWorldRotation()).inverseLocal().mult(localRotationQuat, localRotationQuat);\n\n        spatial.setLocalTranslation(localLocation);\n        spatial.setLocalRotation(localRotationQuat);\n    } else {\n        spatial.setLocalTranslation(worldLocation);\n        spatial.setLocalRotation(worldRotationQuat);\n    }\n    physicsLocationDirty = false;\n    return true;\n}\n\n```. And on the other hand, I think bullet stores these values also somewhere. So we have these values twice in the memory.. ",
    "IamKayrox": "I'm using Windows 10 v1803 with international Spanish layout, I'm using the last version of IntelliJ idea and the project is seted up with gradle. ",
    "TalosDx": "I do not write my project as a module and the only way to use javafx 11 and gradle is to use javafx 11 modules, but when using them java crashes the program saying that the word 'native' is already reserved and cannot be used in the jar file name.\nJust change 'jme3.bullet.native' to something else, for example 'jme3.bullet.app', then java works as it should and builds the project correctly.. Try use javafx on your project or any module.. Show build.gradle. Then show pom.xml. ",
    "tlf30": "I have personally not looked into this very much yet, but I feel like this is an issue is not just in JME, I have seen other libraries with similar issues. \nThe problem is that renaming a jar file of a core library will break backwards compatibility. In my opinion, this needs to be fixed in Java, not JME. . So I just updated one of my jme apps which uses native bullet to jdk 11, and loaded up a javafx ui on it. I have had no issues (except for a couple annoying illegal access notifications).. I'm using maven. Sorry, I was not at a computer. I cannot show the entire pom, it has come company info in it, but here are the relevant parts:\n```\n    \norg.jmonkeyengine\n3.3.0-SNAPSHOT\nUTF-8\n\n\n JME 3 Stuff \n\n${jme3_g}\njme3-core\n${jme3_v}\n\n\n${jme3_g}\njme3-networking\n${jme3_v}\n\n\n${jme3_g}\njme3-bullet-native\n${jme3_v}\n\n\n${jme3_g}\njme3-bullet\n${jme3_v}\n\n\n${jme3_g}\njme3-desktop\n${jme3_v}\n\n\n${jme3_g}\njme3-lwjgl3\n${jme3_v}\n\n\n${jme3_g}\njme3-niftygui\n${jme3_v}\n\n https://mvnrepository.com/artifact/com.simsilica/lemur \n\ncom.simsilica\nlemur\n1.10.1\n\n https://mvnrepository.com/artifact/com.simsilica/lemur-proto \n\ncom.simsilica\nlemur-proto\n1.9.1\n\n\ncom.simsilica\nlemur-props\n1.0.1\n\n https://mvnrepository.com/artifact/org.slf4j/slf4j-api \n\norg.slf4j\nslf4j-api\n1.7.25\n\n\ncom.google.guava\nguava\n27.0.1-jre\n\n https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all \n\norg.codehaus.groovy\ngroovy-all\n2.5.6\npom\n\n\nlog4j\nlog4j\n1.2.17\njar\n\n https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2 \n\norg.apache.commons\ncommons-configuration2\n2.4\n\n\ncommons-beanutils\ncommons-beanutils\n1.9.3\n\n Java FX JME3 UI \n\ncom.jme3\njfx\n2.0.0\n\n\norg.openjfx\njavafx-controls\n11.0.2\n\n\n<repositories>\n    <repository>\n        <id>jcenter</id>\n        <url>http://jcenter.bintray.com</url>\n    </repository>\n    <repository>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n        <id>bintray-javasabr-maven</id>\n        <name>bintray</name>\n        <url>https://dl.bintray.com/javasabr/maven</url>\n    </repository>\n</repositories>\n\n<build>\n    <resources>\n        <resource>\n            <directory>src/main/resources/assets</directory>\n        </resource>\n    </resources>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.0</version>\n            <configuration>\n                <release>11</release>\n                <compilerArgs>\n                </compilerArgs>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-jar-plugin</artifactId>\n            <version>3.1.1</version>\n            <configuration>\n                <archive>\n                    <manifest>\n                        <addClasspath>true</addClasspath>\n                        <classpathPrefix>lib/</classpathPrefix>\n                        <addDefaultImplementationEntries>\n                            true\n                        </addDefaultImplementationEntries>\n                    </manifest>\n                </archive>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n```\nI'm not doing anything special in it. I am using JavaFX11 with OpenJDK11. Bullet loads and works fine. \nEDIT: I made a typo while censoring this snippet. The project uses lwjgl3.. Just tried minecraft, no issue. Although, I agree that it does not seem like a JME3 issue, but so far I have only been able to recreate it with JME3. . I would like to re-clarify that I have not tested with a raw lwjgl app yet.  Their maven setup on their wiki does not work and iirc the ant setup is a nightmare, thus I have not tested it directly yet. . I can confirm that this works as a solution. I just wish windows would get its act together with all of these bugs. . I do not agree that context should be renamed. I see no benefit as there are almost no situations where a naming conflict can occur, and in the situations where a conflict could occur would be caused due to poor design, or extreme edge cases. \nSecondly, it would break many applications that are currently using JME, and break backwards compatibility. \nCan you provide a situation where it would be required to have context renamed?    . Looks good to me!. Not sure why the compare is not working correctly, only a couple lines changed... . Ah, I did not think about that. I'll fix it right now. OK I have line endings fixed.. I would also like to note, that with LWJGL3, the headless context does return from start, which makes inconsistent behavior within the library itself. . OK, I just made a new commit. If waitFor is false, we run it on the main thread, otherwise, create a new thread. How about this solution?. I do not have an apple computer, perhaps someone can test this?. Would it be better to check if we are on OS X, then ignore the wiatFor. Also, does this mean that jme-lwjgl does not work on OS X? \n. ",
    "8Keep": "986\nLet me know of any critique on my first pull request.. I'm available to do whatever should be done. I guess we wait for Stephens response.. No problem! If you come across any more menial fixes with no time to make a pull request, I'd love to take them to get more practice.. Yes, I will do that tonight.. Let me know if this is acceptable.. Lots of commits for very little work. Should I create a new PR with just the end changes?. ",
    "donmccurdy": "Per https://support.allegorithmic.com/documentation/spdoc/unreal-engine-4-144998459.html, I was under the impression UE4 used occlusion/roughness/metallic as R/G/B? Same applies to three.js, and recent versions of Substance Painter can export directly to glTF. But I think you're correct that there is a bug in the Blender Exporter.. ",
    "boonto": "Sure, it was late yesterday.  Here is a minimal example:\n```\nimport com.jme3.anim.AnimComposer;\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.scene.Spatial;\npublic class Main extends SimpleApplication {\n    public static void main(String[] args) {\n        Main app = new Main();\n        app.setShowSettings(false);\n        app.start();\n    }\n@Override\npublic void simpleInitApp() {\n    this.viewPort.setBackgroundColor(ColorRGBA.DarkGray);\n\n//        Spatial cube = this.assetManager.loadModel(\"cube.glb\");\n//        Spatial monkey = this.assetManager.loadModel(\"monkey.glb\");\n        Spatial anim = this.assetManager.loadModel(\"sway.glb\");\n    anim.breadthFirstTraversal(spatial -> {\n        AnimComposer control = spatial.getControl(AnimComposer.class);\n        if (control != null) {\n            control.getAnimClipsNames()\n                   .stream()\n                   .findFirst()\n                   .ifPresent(control::setCurrentAction);\n        }\n    });\n\n    this.rootNode.attachChild(anim);\n}\n\n}\n```\nThis snippet works.\nBut when the cube/monkey is loaded first the program crashes, due to looking for the animations in the previously loaded model's data.\nWhen I encountered it yesterday it even successfully loaded the data and produced wrong animations.\nWith debugging it can be observed starting here.\nHere are the models: resources.zip\nThe cube is just a cube.\nThe monkey is Suzanne with 2 times subdivision applied.\nAnd the sway animation is a 2 bone armature affecting a cube.\nThe models/animations were created in the latest Blender 2.80 beta version.\nAlso the error is on the current master branch. I don't know about v3.2.x.. I don't think thats the case for the GlbLoaders's data. This is what gets accessed by the readData method in the end. . Works!. ",
    "tomreineke": "Thanks for the great suggestion on using gltf.. ",
    "HelloWorldlsla": "Hi stephengold\nThanks for this update, but....\nI think you forgot to change the result of the rayTestRaw()method :)\nAt line 1021\nHave a good day!. ",
    "w1lford": "How would this not be an issue with the code itself when I run the exact example code? Shouldn't the example be fixed so that it works for people in the future?. The example is used in Jmonkey's documentation. Are you going to delete that as well? Why use example code in the documentation that doesn't work?. Or if someone proofread the documentation for JMonkeyEngine this bug wouldn't have to be opened in the first place.. This is easy to test. All you have to do is download the code and run it. I've already done that. Maybe you could do that too and we can try to fix this bug together.. Then why are you on Github at all if you're at your job? Isn't that what you're being paid to do? If you don't have time to actually contribute then why post anything at all? Leave the issue up for other people who have time to look at it.. I'm not going to continue down this road. The only thing I'll say is that you shouldn't just close an issue 3 seconds after it's been made because it doesn't fit your idea of a proper bug report. The end goal here should be improving this engine in any way it can be.. I just tried running on v3.2.2-stable-sdk1 on Mac OS X and I get the same issue. . ",
    "James-Adam": "I'm happy to contribute!\nI'm very interested at taking a look at some of the classes/packages suggested, and will be looking to have tests for these written over the next few days. \nI am specifically taking a look at com.jme3.math.Vector3f currently; this class is around 50% covered as it stands currently, but with no dedicated tests. @stephengold Would you be interested in seeing a new test class written to cover as much of this class as possible regardless of which methods are covered serendipitously by other test classes, or would you prefer tests which cover only the uncovered lines? . "
}