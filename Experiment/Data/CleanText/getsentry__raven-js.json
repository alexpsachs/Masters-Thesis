{
    "bkonkle": "I was under the impression that jQuery/Zepto handled cross-domain requests with jsonp, which was one of the major reasons I went ahead and made the code dependent on them. I'll do some more testing next week.\n. Upon further research, I've learned that jQuery handles cross-domain requests with the \"Origin\" header. If the server responds with an \"Access-Control-Allow-Origin\" header that matches \"Origin\", then the cross-domain request is allowed by the browser.\nI've submitted a pull request to enable this here: dcramer/sentry#340\n. After enabling preflighted cross-domain requests (dcramer/sentry#346), this now works reliably in Chrome, Firefox, and Safari. I haven't tested it in IE yet, but I plan to. My opinion is that this is the modern way to do cross-domain requests, and we should make iframe + form requests a secondary option.\n. I could also add an option to omit the secretKey and send the message to the server for signing. It would be a very simple view to write, and someone could probably write a dead-simple Nginx module to avoid the app server entirely. Whitelisting is definitely the easier choice for now, though.\n. I went ahead and added a signatureUrl option to allow it to operate without a secretKey and hit a url to get the signature.  I also added the option to configure it with a base64 string to obfuscate it. I added a note to the Readme explaining that this option was still insecure, but less obvious.\nNext week I'll try to send a pull request for Sentry to add whitelisting.\n. Thanks!\n. It looks like Chrome is going down the firefoxTraceback path, which would mean that e.arguments is undefined. I've got a test case created to reproduce it, and I'm coming up with a workaround.\n. Fixed in e92dd6f.\n. I plan to spend some time on raven.js this weekend. I'll upgrade my local installation of Sentry and make sure everything's working fine, and then I'll try out the hosted version and see what changes are needed. I'll make sure to add the details to the documentation, and I'll close out this ticket when I'm done.\nThanks for the heads-up!\n. This should be resolved with version 0.4.\n. Implemented in 0d1be8a.\n. I put testMode in because there are issues with Raven.getHeaders on local files. I believe it's needed for some browsers in order for the tests to run. I'll double check that. The rest of this change looks great, though. Thank you!\n. Okay, after some testing in Chrome, Safari, Firefox, Opera, and IE9, here are the quirks:\nFirefox, Opera, and IE9 do not support origin, so it should be dropped.\nIE9 does not support href.\nAll 5 support protocol + host + pathname, so that's what I'll move Raven to.\nI'll merge this in and tweak the url. Thanks for the contribution!\n. I'm going to play around with this and figure out if this or https://github.com/lincolnloop/raven-js/pull/20 is a better fix. I plan to implement one of the solutions this week.\n. Okay, after some testing in Chrome, Safari, Firefox, Opera, and IE9, here are the quirks:\nFirefox, Opera, and IE9 do not support origin, so it should be dropped.\nIE9 does not support href.\nAll 5 support protocol + host + pathname, so that's what I'll move Raven to.\n. Good idea. Thanks for the contribution! I plan on integrating it this week.\n. The Sentry Http interface records the querystring - I wonder if it would be possible to sort by that? If that won't work, then we could put in an option for fullHref or something like that and add the querystring to the url if it's enabled (since location.href doesn't work in IE).\n. Thanks! I'm going to start my day with raven-js and Sentry tomorrow, and I should be able to resolve this.\n. I tested it with Sentry 5.0.9, and I'm not having any problems. Perhaps there was an issue that was fixed between 5.0.0 and 5.0.9? In any case, can you upgrade and try again?\n. Yes, this is a good idea. We haven't had the time to maintain it that we've wanted, so it makes sense to move it over to getsentry and encourage more external contribution.\n. Transfer complete. Can you add @ipmb and I as committers?\nThanks!\n. ",
    "dcramer": "Are we ok with just using the origin headers and the public key at this point, or do we need to do some additional work in Sentry core?\n. This is no longer a concern\n. This is now fixed\n. I think the right answer is going to be adding per-project configuration of origins. I'm not sure the best way to deal with this (I havent had a chance yet to really read into how this works), but we do have a data model that will suit these needs.\nAt Disqus we just did simple referrer checks for our API, and we just bind those to the public key + list of trusted domains. If that seems reasonable I'm completely ok with implementing a simple interface for that\n. @bkonkle I've added you to the getsentry org if you want to make the transfer\nI'll setup a JS team and we'll maintain the current committers on that\n. Thanks guys!  \nAll set!  \n\nDavid Cramer\ntwitter.com/zeeg\ndisqus.com/zeeg\nOn Wednesday, November 14, 2012 at 1:46 PM, Brandon Konkle wrote:\n\nTransfer complete. Can you add @ipmb (https://github.com/ipmb) and I as committers?\nThanks!\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/28#issuecomment-10386542).\n. In the sentry server you currently cant configure global origins per-project, but if you run the server you can configure the global value.\n\nI believe the setting is::\nSENTRY_ALLOW_ORIGIN = '*'\n. Feel free to reopen this if there are any problems related to this.\n(We could probably update the documentation to be more clear)\n. Bumping this up as this came up today.\nI think to support this we have to accept input from raven.js that uses a secret key.\n. Actually I could be wrong. I need to confirm that '*' in the origins field doesn't allow this to work. Either way, keeping this ticket open at the very least to document how to do it.\n. http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\nhttps://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?hl=en_US&pli=1&pli=1\nhttps://github.com/mozilla/source-map\n. @fracmak fyi I'll get this merged in eventually. I want to improve some of our test coverage (to make sure we dont break things), and once I land those changes I'll land this\n. I'm not entirely sure how this was closed out, but I'll get this merged in today\n. I incorrectly associated #38 with this. We'll get tags up soon.\n. This is bad on our part. We'll be releasing a 1.0 soon, and from then on the release process will be more consistent.  \nOn Tuesday, January 15, 2013 at 3:40 AM, lord-spam wrote:\n\nIs it possible to get tags for all versions > 0.5.2? I pushed raven-js 0.7.1 to the cdnjs.com (http://cdnjs.com) but the maintainer asks for tags, not only tar-balls.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/37#issuecomment-12262592).\n. Are you saying its stripping the DSN configuration?\n. Hey Tim,  \n\nI have a feeling this is related to this:\nhttps://github.com/getsentry/raven-js/pull/34\nI'll get some test coverage to reproduce this this week and we'll get this bug squashed. It's very likely that it's only affecting you because of the port number on your host\n\nDavid Cramer\nOn Monday, December 3, 2012 at 4:55 AM, Tim Kersten wrote:\n\nThe response of the 400 error above includes this X-Sentry-Error header:\nX-Sentry-Error:Invalid data: Unable to validate interface, 'sentry.interfaces.Stacktrace': invalid literal for int() with base 10: '8080/javascript/dojoroot/dojo/dojo.js' ()  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/39#issuecomment-10951563).\n. Is there a X-Sentry-Error header present in the response?\n. Oh, what you're seeing here is the x per minute/day event quota kick in on getsentry.com  \n\nSee at the bottom the X-Sentry-Error in the response? \"Creation of the event blocked\" is our barely-acceptable message for saying your quota was reached.  \n\nDavid Cramer\ntwitter.com/zeeg\ndisqus.com/zeeg\nOn Thursday, November 29, 2012 at 9:10 PM, Chris Abrams wrote:\n\nNope: http://cl.ly/image/2z3X2f3N3f1f\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/40#issuecomment-10878823).\n. Closing this out as it's unrelated to raven-js\n\n(feel free to ping me via email, or irc, dcramer@gmail.com)\n. Currently tests are failing locally for this branch:\n$ make test\njshint .\nphantomjs phantom-js-loader.js\nTesting: file:///Users/dcramer/Development/raven-js/test/test.html?lib=jquery\njquery: 8. Raven.dateToISOString: should collect error information and report to Sentry >>> FAILED!\njquery:     1. failed\n        Expected:\n            1\njquery:     2. the logger should be the default value\n        Expected:\n            \"javascript\"\njquery:     3. the offending variable name should show up in the message\n        Expected:\n            -1\n        Result:\n            21\n        Diff:\n            {--1 -}{+21 +}\njquery:     4. the error should be a ReferenceError\n        Expected:\n            \"ReferenceError\"\njquery:     5. the culprit should be the exception.js unit test file\n        Expected:\n            \"exception.js\"\njquery:     6. okay >>> FAILED!\n        Expected:\n            \"outlandishClaim\"\n        Result:\n            \"\"\n        Diff:\n            {-\"outlandishClaim\" -}{+\"\" +}\n        Source:\n            at file:///Users/dcramer/Development/raven-js/test/vendor/qunit.js:341\njquery:     7. okay >>> FAILED!\n        Expected:\n            \"7\"\n        Result:\n            null\n        Diff:\n            {-\"7\" -}{+null +}\n        Source:\n            at file:///Users/dcramer/Development/raven-js/test/vendor/qunit.js:341\njquery:     8. okay >>> FAILED!\n        Expected:\n            \"giveMeAnError\"\n        Result:\n            \"\"\n        Diff:\n            {-\"giveMeAnError\" -}{+\"\" +}\n        Source:\n            at file:///Users/dcramer/Development/raven-js/test/vendor/qunit.js:341\njquery:     9. okay >>> FAILED!\n        Expected:\n            \"3\"\n        Result:\n            null\n        Diff:\n            {-\"3\" -}{+null +}\n        Source:\n            at file:///Users/dcramer/Development/raven-js/test/vendor/qunit.js:341\njquery: Tests completed in 33 milliseconds.  56  tests of  60  passed,  4  failed.\nmake: *** [test] Error 4\n. lgtm\n. It's arbitrary information, but we should document examples sending an email address:\nhttp://sentry.readthedocs.org/en/latest/developer/interfaces/index.html#sentry.interfaces.User\n. I actually assume that all JS error handlers are 50% raven.js ;)\n. Python does this via include_paths and exclude_paths, Ruby does it via project_root\n. I agree, include paths are the way to go\n. Fixed\n. @optimuspaul can you provide an example for how this failed.\nwhen calling captureException we dont want to raise exceptions, but we want to ensure that if we're suppressing them somewhere by accident that they get raised correctly.\n. @optimuspaul why would a success handler get called when an exception happens?\nIm tracing the code manually and I can't comprehend how a failure handler wouldn't get called, so we should definitely try to build a test case around this.\nFrom my (albeit, limited) understanding of the code, this behavior actually seems correct (excluding the original reason this ticket was opened, which may be valid)\n. @troelskn thanks! We'll get a bugfix release out\n. FYI I'm +1 on having angular as a plugin, we just need to get around to sorting all of this out (soon)\n. It's definitely a lot easier if we can just share the same license. Technically it's not required though. The compiled source would just have to include both licenses.\n. Thanks!\n. This is actually due to the stacktrace. We're looking into possible solutions for this that won't completely butcher the algorithm.\u00a0\nAre you using compressed source? If so of start with adding source maps.\u00a0\nThe rest is basically an issue with browser support and it either not passing column numbers or invalid stacks.\nOn Mon, Aug 5, 2013 at 4:41 AM, Karolis Narkevicius\nnotifications@github.com wrote:\n\nAs far as I can tell, all (or most of) my errors are getting grouped into the same bucket and I suspect that's because all of my JS is in a single file.\nShould there be a way to configure the culprit?\nIs there a different way to change the grouping of exceptions caught by TraceKit?\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/127\n. Thats right Karolis (at least with our implementation).  \n\nWe should probably support an API that allows you to push up builds of your JS code with source maps to make that easier.\nI'll dig into the stacktrace stuff as soon as I get a free moment.  \nOn Monday, August 5, 2013 at 9:55 AM, Karolis Narkevicius wrote:\n\nRegarding source maps - they unavoidably make the source public to everyone?\nI suppose I could control access to them via some authentication, but that would become trickier to setup in sentry.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/127#issuecomment-22119813).\n. There's not at the moment. What happens right now is that we discard all information about Javascript and the server tries to scrape the remote source as well as expand on sourcemaps.  \n\nOn Monday, August 5, 2013 at 10:34 AM, Chris Adams wrote:\n\n@dcramer (https://github.com/dcramer) For standalone sentry, is there any way to upload source maps for server-side analysis rather than client-side? I've thought that would be cleaner rather than having fairly large .map files floating around for every extent JS bundle version.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/127#issuecomment-22122445).\n. You can specify tags for an event (which is all the level is).  \n\nWhen you think about the events you're sending, don't think about standard logging, as a lot of the semantics won't apply. Level in fact is just a legacy thing that is more or less deprecated in the UI.\ne.g. if you log an event with error, and the same event with warning, it'll show as the same event in the UI, so level just becomes a tag  \nOn Tuesday, September 24, 2013 at 3:32 PM, deepwell wrote:\n\nWith Raven JS, can you log a message at a non-error level?\nEg: Warning, notice, or debug level.\nI've looked through the documentation and the source code and haven't figured out how to construct the options object for Raven.captureMessage().\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/135).\n. It could be from the referrer.\n\nCan you confirm you've setup the client security options to match the incoming domain?\n. @jonashaag 403 is probably better, iwll take a look when I revisit API.\n. +1\nJust about to push out the secondary package on an internal project over here. Code looks good on my end from brief skim\n. Of note, I wonder if the development flag would make sense in Raven proper? That would greatly simplify this, and maybe we could just imply development if SENTRY_DSN isnt set?\n. As this is coming up more and more, I think we're going to need to push this through.\nOne point of feedback I'd like to make: it's probably worthwhile to drop our DSN \"https+foo\" notation in JavaScript. I think from a usability standpoint its great, but in JavaScript where minifiers are still king its wasteful (as it cant be optimized out).\nWhat if instead we did this:\n```\nvar legacyTransport = require('raven/transports/legacy')\nRaven.config('...', {\n  transport: legacyTransport\n});\n```\nAgain, ideally here the minifiers have enough information to optimize out the unused code (transports) and then we could bake in both (CORs and Legacy) by default for our distributed JS bundle.\n(I'm open to alternatives here, I just want to make sure the systems can optimize out unused code, and we still maintain it well enough to use both the current transport as well as the new cors stuff)\n. Here's what I propose, built on this existing PR:\n- Swap out DSN registration for simple transport declaration\n- Replace v8-xhr with transport that works in all modern browsers using XHR+Cors\n- Add a jQuery transport which isn't bundled by default\n. @realityking just less code. It may not be relevant, but I imagine the XHR transport having an excess of duplicated code.\n. @realityking thats correct. The goal is to optimize around the patterns that are becoming more common: requiring modules vs some offline bundler (require.js, common.js, webpack). In that case we could default the transport but allow them to swap it out, which should allow deduplication tools to remove the module.\n. @ksikka the secret removes the referrer check entirely, thus making it a very easy abuse vector\n. @ksikka I'm not sure what you mean. All public key requests already look for the origin/referer (no matter the scheme). You can use '*' as the allowed domain and it will bypass the actual match.\n. @ksikka ah! yeah we would definitely need to fix that upstream\n. If you just downloaded the raven.js file this would happen. Otherwise sourcemaps are something we consider required for real-world use.\n. See also https://github.com/getsentry/raven-js/issues/323\n. The Ruby APIs match the Python APIs which conform to my made up spec. If anything, the JS API is nonconforming :)\n. Can we add setUser back as well? I wasn't paying much attention to this, but this is actually a pretty big caveat especially if its going to pop up in a minor version release.\n. Ah hrm, maybe this is just a documentation issue on our end then. Doh\n. K addressed in getsentry/sentry@be71a589d0e5614cc45379e575673c770a1505bf\nWe'll want to minor version bump to get the new things first-class I imagine\nThanks!\n. I dont have a strong opinion here. I think two best solutions are:\n1. Initial context is different than local (and it is always merged when event is sent)\n2. We add a merge option\nThere are likely rare situations where you could have multiple middleware (or similar) and want to set context at different levels, and have that merged in, but I'm not sure if it's worthwhile to cater to that situation.\n. We do this for a number of reasons, but you have to consider the simple fact that your use case may not resemble other peoples use cases. It's very easy to accidentally log something that's far too big to: 1. send over the network, and 2. for sentry to store. Even more so with raven.js we're limited on packet size as the current transport uses GET for various reasons.\n. @joeyespo let me confirm, it seems like if the limit is really 100 it's a mistake\n. @robinwassen I actually agree with @mattrobenolt (whether he has terrible people skills or not). There's a few things we try to clearly convince people of:\n1. Sentry is not a a traditional logging platform and your INFO messages should go to stdout\n2. Messages are already huge in Sentry, and while we let you store far more than anything you've probably ever seen before, it doesn't mean you can store everything.\nWe talked about this internally yesterday and the 100 character limit was primarily to ensure people received some kind of error message vs the message getting dropped due to GET constraints. This will get raised to match Sentry's defaults once we have a POST transport available.\n. @bradvogel that's not actually really an error, its just logging it. Were you seeing actual problems from this?\n. You need to configure your project settings to correctly allow this origin.\u00a0\nOn Wed, Oct 8, 2014 at 9:06 AM -0700, \"Anuj Kulkarni\" notifications@github.com wrote:\nHello,\nI get this error when sending request to the sentry.\n400 (BAD REQUEST) \nX-Sentry-Error:Invalid origin: 'http://akulkarni-t430s:8080/myapp' everything else seems to be ok.\n\u2014\nReply to this email directly or view it on GitHub.\n. 429 means you're being rate limited by the server\nOn Wed, Oct 8, 2014 at 9:35 AM -0700, \"Anuj Kulkarni\" notifications@github.com wrote:\nYes I did that, I am actually able to receive notifications correctly. \nNow only issue I am seeing is : I get \nStatus Code:429 OK for get time and time again.\n\u2014\nReply to this email directly or view it on GitHub.\n. No isolation, but basic functional test for one func in fa86837\n. Not entirely sure of how best to improve the tests.\nIdeally we'd:\n- get the $.ajax tests in\n- ensure that deferred behaves the same as before (not just that it captures errors)\n. Messages are generally grouped based on the stacktrace, and fallback to the message string if its not available.\n. Packets are definitely time based. It's optional to send a timestamp attribute with the data, if it's not sent server time will be applied.\nIMO this is a reasonable idea to polyfill, especially if modern versions of Chrome support it.\n. @jaseemabid what browser? And to confirm, this isnt in the console right?\n. I dont think console fires window.onerror, but I could be mistaken. Feel free to reopen if you're having the problem outside of console.\n. @weisk we dont capture any user data in raven.js afaik?\n. I'm mostly certain this isnt related to raven.js, and it's simply masking the error in Chrome.\n. You won't be able to capture exceptions the way you're thinking IIRC.\ntry {\n  1 / 0;\n} catch(ex) { Raven.captureException(ex); }\n. @mattrobenolt do you recall what this is? I know there's a reason for it but I dont remember how error objects work in JS\n. @tremby thanks for taking the time to dig into that. It's not as simple as us updating (we forked TraceKit to fix various things), but we should be able to identify and merge in the changes.\n. @jeffreywescott do you know if theres still incorrect docs somewhere?\n. I am pretty sure PhoneGap works fine with Sentry.\n- We have per project origins, and have had them for a long time.\n- If you use '*' as an origin we ignore the checks.\n. 6.4.4 is more than a year old. What I said above definitely is true in the 7.x series\n. I'm actually +1 on simplicity here. We're removing a lot of complexity in the Python implementation (schema-based DSNs are already deprecated).\n. I'd say if anything the commit logs would have details about why we made changes, but that may not be true. I'd love to use TraceKit, but here's my idea of what it should do:\n(I thought I posted this already, maybe somewhere else)\n- Take the error object and turn it into a more structured version (i.e. with iterable frames)\n- Take plaintext errors and turn them into the above\nThats it.\nI'd love to see all the subscription, patching, and other nonsense dropped. It makes it more complex to integrate. Even window.onerror isn't really needed, or at the very least could be split out into a separate component.\nIn the end, we'd be happy to make raven.js (or whatever it becomes) the default implementation of \"heres how you capture errors in JavaScript\", with it being backed by TraceKit. I'd see that being three components:\n- something akin to tracekit, matching my above description (i.e. just error parsing)\n- something that takes most of raven.js such as the function patching, onerror handler, etc\n- raven.js, which would just be a transport mechanism utilizing the above\nThere will be someone owning raven.js full-time in the near future, but I'm happy to try to provide as much support here as possible until that day.\n. One of the big concerns I believe we had with TraceKit was it's lack of tests (which still seems to be true?)\n. @OliverJAsh iirc things should actually re-throw by default. How do you have things integrated? i.e. if you're using try/catch you'd effectively want to throw afterwards.\n. I'm going to close this out as it's very unlikely we'd provide the error object at this point. The use-case is abusing a function which is only intended to say \"should I send this upstream or not\". More importantly, the error object should long be gone by the time this code path is hit, and if there needed to be something related to that it should happen much earlier in the process.\n. @OliverJAsh we could add a hook for it, but being that generally we re-raise they should get logged by default in environments. Envs where upstream is catching them would be able to implement their own logging via an abstraction.\n. https://github.com/getsentry/raven-js/issues/980. You could call the context methods within setTimeout, but you're still going to likely see issues.\nThere's not really a solution here as JavaScript is a single interpreter and there's no way for us to understand your concept of a callstack (which is effectively what you're tweaking with the setTimeout).\nThe only real situation would be something like:\n- Preserve the current context values\n- Override with context in setTimeout\n- throw error\n- Restore context values'\nWe dont have an API for that, and tbh I'm not sure it's a good enough solution to warrant one upstream as re-throwing errors in such a fashion doesn't seem to be very standard.\n. Yeah. Thats how you could solve it.\n. We need to prioritize this.\n. https://gist.github.com/dcramer/25b09c916a1f82a6838d\n. We also need to document how to mutate filenames (e.g. make them relative) so that if you're in a situation where your stacktraces contain something like a user identifier (e.g. mobile) or dynamic subdomain you can normalize them. From there it should also explain that source/maps need uploaded to Sentry.\n. Respond via support as well, but this seems like Array.prototype.push is invalid.\n. My concern with that would be if we end up with more \"Script error.\" type things. We wouldn't want to have to add an option for every one. In an OO world I would suggest subclassing things and having a ignoreError(...) which does the default behavior and then can override.\n. That seems reasonable\n. imo delete http -- id prefer not to allow an optional http url, even if we do today (we may not im not sure)\n. I'm also seeing something that I have to assume is related:\nvar err = new Error('Own Error'); \nRaven.captureMessage('CaptMessage', {extra: { stackTrace: err.stack }}); \nRaven.captureException(err);\nRepro'd on 1.1.19, confirmed its a client issue.\nThe value sent to the server has the entire object of frames as a string value, thus Sentry discards the stacktrace.\n(There are other issues with this as well, such as the Sentry event having \"undefined\" as the title when clearly it should be able to have a value since err.toString() works just fine)\n. Semi-unrelated: Raven.install docstring is wrong, and I should not have to Raven.install in order to capture exceptions.\nSide note: TraceKit reporting needs removed and we should explicitly call into it with our own window.onerror. This is the fundamental reason for Raven.install() and end-users should not have to care about an API that doesnt make any sense here.\n. I'm still debugging this, as I was unable to make a test. So far all I know is stackInfo is empty when its parsed.\n. I've identified the problem and will get a patch up soon \n. @j15e we mean \"linesOfContext\" as it's not very useful and causes problems with packet size (the server takes care of this)\n. I think I'd prefer proxies just take the input and deal with passing it forward. Can you see that as being unreasonsable?\n. Talked about this over IRC.\nThis is similar to how we used Sentry at Disqus. Basically pass thru everything to a backend, and apply a new DSN on the backend. I'm fine w/ supporting that use case for now, at least until we have a better answer to this behavior.\n. Doh. Thanks!\n. See also #352 which should be a proper API before we document hacks like the gist.\n. thanks!\n. #323 \n. There is also the config.json file in docs root I think that we should add blurbs too\n. lgtm\n. IMO just \"useCors: true\" (or opt-out if we are assuming it works everywhere) Clients dont auto update anyways so should be safe.\n. IMO we do not need flexibility on transports.\nThere are two situations:\n1. You use your builtin transport mechanism\n2. You specify a different way to upload data\nThe primary reason of the current flexibility is because we're not sure CORS is safe, right? So why dont we just focus on making that opt-in (or better yet, opt-out) until we're ready for it to be the only transport mechanism we bake in. We can still provide a hook for \"how do I send data\" but we dont need a complex API for that. Ruby does it via an 'async' option which you specify the calling function.\n. I think thats correct. If it wasn't clear I'm not proposing we remove a public function to override how we send data.\n. I'm generally +1 on this idea, both for Bower and NPM.\n. :8ball: \n. IIRC this will have issues with XHR since custom headers require extra setup\n. CORS requires the server to indicate which headers are allowed, which it does via the OPTIONS request IIRC. So the server would have to support this header in the XHR responses (maybe it does, but I dont recall adding that).\n/cc @benvinegar \n. tbqh im surprised XHR would work at all on 7.7.0, but maybe we didnt correctly check path. Either way thats good to know.\n. This likely isn't supported on Sentry 7. You can upgrade to 8.0.0-rc2, and we'll be releasing 8.0 proper Friday.\n. Is this getsentry.com? If not what version of Sentry? There is a limit on the size of values, and it's possible the combined size of additional data is too much.\n. @sdillinger so most likely whats happening is the combined value of 'extra' is beyond our current limit of 4096 characters. We're going to bump this up to 16k, but it's likely still not going to be overly useful.\n. FYI we're absolutely interested in proper offline support for react-native. Internally we've been talking about the fact that it'd probably be best if we simply made a react-native SDK (which would use raven.js under the hood). e.g. 'sentry-react-native' would become the package, rather than the awkward plugin scenario we have today.\n. To add some clarity, Ben simply means the tracekit feature. The sentry server can and will still fetch source code when it's not uploaded. \n. https://github.com/getsentry/raven-js/issues/519\n. @davidpadbury I'm unsure at this point with how the package has evolved -- @benvinegar would know more but he's semi-afk for the next few days.\nThat said, the collectWindowErrors should still work. Were you seeing otherwise?\n. @kamilogorek yeah it'd be ideal as right now it's odd/seemingly not guaranteed that you're showing the feedback dialog for the right event. If this only requires mangling filenames I'd like to figure out how we move this to server (ala getsentry/sentry#4090).\nI'm wondering if we could just maintain the file:///(.+/)?[^/+].app/ pattern for stripping prefixes?\n. @getsentry/javascript \n. @arusakov implemented the other path names in getsentry/sentry#4090\n. @getsentry/javascript \n. temporary workaround for some legacy users getsentry/sentry#3769\n. @mattrobenolt Yeah I guess maybe there's no way to use that. I was thinking that possibly during compile time it gets bound and we can read it somehow from common.js type stuff.\n. @urbany I dont believe its yet supported top level, but you could use dataCallback and add it there.\n. @urbaniak \nRaven.config({\n    dataCallback: function(data) { data.environment = 'production'; }\n})\n. Review status: all files reviewed at latest revision, 1 unresolved discussion.\n\nsrc/raven.js, line 445 [r1] (raw file):\n\nPreviously, benvinegar (Ben Vinegar) wrote\u2026\n\nI realize we have setRelease, setTransport and others, but I'm concerned about a future where we have setX for every possible config option potentially bloating the library.\nApproving tho ...\n\nfyi commenting blocks the review unless you change the status or use something like 'btw' to prefix it\n\n\nComments from Reviewable\n Sent from Reviewable.io \n. feel free to hijack and/or just merge this when you feel its good\n\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nComments from Reviewable\n Sent from Reviewable.io \n. I like this idea, but I'm going to push for doing this server side (re: getsentry/sentry#4090). We can implement controls on the server to describe simple patterns which can be stripped.\nAdditionally, if we really need this on the client, it might be worthwhile to support prefixes like sentry-php does.\n. Gonna confirm with @mitsuhiko, but I think we can change contexts to allow rich types for arbitrary data. If we do that we can move this out of extra and have it be its own context.\n. @getsentry/javascript \n. Is parse cloud an actual browser runtime or is it node?\n. @yingliangzhang np -- raven-node should work, but if it doesnt feel free to open a ticket there\n. @getsentry/javascript we should talk in person, but I'm +1 on getting an API in for this, but likely under a more friendly interface.\nI put 10 seconds of thought into this, but e.g.\njavascript\nRaven.setContext('foo', {})\n\nWe'd probably also want to call it set vs add since it'd overwrite that keyname\nWe probably don't need interface in the function call. @getsentry/js. Welp maybe @getsentry/javascript. @benvinegar \n\n. At the very least it's not entirely about \"we need the error object\". In some cases the errors that are made available simply are not usable, and this includes modern browsers like Firefox. For example, they may not include the full stack, or may be missing details (like column numbers).\n\nA big asterisk here in that I'm not sure this is blanketly true still today, but was not that long ago.\ntl;dr whats the harm in ensuring predictible behavior, then pretending browsers dont change/have quirks. Can we get a basic test suite for the TypeScript bits in, so we at least know if it is or isnt broken? Theres not much point in having it at all if its not maintained.. Would it be good enough if dataCallback (or similar) just passed along the error object, and you were able to then augment the Sentry payload from there?. I want the error object in a callback per Slack convo. It's non trivial to do today, but it's the right solution. . @kamilogorek IMO we should if we can. It makes it possible to do a lot more behavior by inspecting the object that you otherwise can't reasonable do.. SourceMap can also be set when you upload the artifact, effectively letting you point to an arbitrary sourcemap bundle without ever declaring anything in your minified files. That's probably the main use case for the header.\n(you pass it via headers on the artifact endpoint). I'd prefer something simple like sanitizeKeys over the general processors pattern we implemented elsewhere. I think also supporting regexp is good.. Your best bet is to use the npm module and host it on your own domain. Unfortunately we\u2019re never going to stop the fan club that is \u201cblock all trackers\u201d. We\u2019ve worked to get it removed from some lists but people generally lump sentry in with advertising (nope) or analytics (maybe).\nI\u2019d also note that many of these lists have very limited use. . @grobmeier there's a lot of major positive about using our CDN instead of a local bundle, the last of which is our edge distribution. Long term our CDN will also push configuration down to the client which improves data scrubbing/rate limiting/etc. There's obviously the caveat, but its ultimately a problem that's hard to avoid. If adblockers wanted to they could just block the network requests to sentry.io (some do already), so you're still in trouble.. How would you deal with any other service failing? You should simply check for presence before calling a global.\nwindow.Raven && Raven. And what about the situations where your customer is on bad network? Where a DNS issue happens? You need to deal w/ this problem with external dependencies generically if you're embedding them from another source. My point is that this isn't a new problem.\nI'm closing this thread as there's nothing actionable that will come of this and it notifies a lot of people.. Whats the HTTP response you're getting from sentry itself?. @Avamander the 403 is from your Allowed Domains setting (Project Settings -> General -> Client Security). @Avamander is that the exact request or did you scrub Access-Control-Allow-Origin?. Hrm I hadn't seen a request like that before. Maybe we can simply remove our \"if not origin\" checks. This might actually be a problem in other cases as well.\nhttps://github.com/getsentry/sentry/blob/master/src/sentry/web/frontend/error_page_embed.py#L121. @kamilogorek i didnt actually test this, and created the patch using GitHub's UI. we can simply remove lineno when its not a valid number (current sentry will handle that case)\n. I think soon we will simply remove the external library dependency (since really its only $.each and $.ajax).  \n1.5+ is currently needed because $.ajax didn't support the headers attribute until then.  \nOn Sunday, November 25, 2012 at 2:34 PM, Andrew McCloud wrote:  \n\nIn src/raven.js:\n\n@@ -49,6 +49,14 @@ > } > } > > + // XXX: is there a better place to put this? > + if (typeof($) === 'undefined') { > + throw \"Unable to find required library (jQuery, Zepto, ender)\"; > + } > + if (root.jQuery === $ && $().jquery < '1.5.0') {\nWhy is a version > 1.5.0 needed? Would it be future proof to do some feature detection instead?\n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/pull/35/files#r2217409).\n. Our goal is to kill the zepto/jquery requirement since the ajax/each code should be minor, and we dont need dom/etc\n. fixes the linter in my editor :)\n. Going to remove this block as well since it's seemingly useless.\n. auth should def be something passed into the callback and the default callback would just be responsible for changing the querystring\n. dis too\n. seems like it still matters? you want to patch as fast possible?\n. dsn needs to be configurable via options\n. needs to be configurable via options\n. because the DSN contains the project, and the eventID is bound to the project\n\noften server side project != client side project\n. ",
    "vbabiy": "awesome thanks.\n. ",
    "gtaylor": "Good to see this!\n. ",
    "ipmb": "\n. Tests still fail on Safari 6 after applying c368a8449992e5509a613cc85ef6080db03a72b2. \n. Fixed test in e18c7df29129058df3938dc7013a7d322ea51e8c and merged.\n. #16 will fix this. We don't need a framework at all.\n. ",
    "paularmstrong": "I've been seeing this as well. There's no significant information to track down the cause of it.\nI'd be okay having it as an option.\n. Thanks @kamilogorek!. ",
    "joar": "This is a really great Idea. +1\n. Works perfectly from current master - that's awesome. Thank you for your help :)\n. Sadly I was wrong, Raven.captureMessage works, but not Raven.captureException(exc);. This using raven-js 5.2 and sentry master.\n. Correct me if I'm mistaken: I tthink all CORS setups (fill in allowed domains, send HTTP headers) are managed by sentry, and thus it's not at all very hard to get a working CORS setup on modern browsers.\nOn the other hand, the Image.src method is an ugly hack, and it disguises itself as a sane solution by working fine most of the times, especially in small projects and projects created by the people that decided on the Image.src hack, since i assume they know to avoid it.\nIt's brilliant software, and I think it would be more brilliant if it was using CORS with an Image.src hack as fallback for older browsers.\n. ",
    "rassie": "Probably obsolete since https://github.com/getsentry/raven-js/pull/46 and https://github.com/getsentry/raven-js/commit/e4a3f6331420c07a502c4c3dbe137ce56f03c91f\n. :+1:, concerns me too even though I haven't reached the limit yet. Have to support IE7 and higher.\n. @mattrobenolt json2.js is part of my assets anyway, so no problem there :)\n. So not using POST is CORS-related and -limited, while GET is limited by the URL length (either client-side or server-side)?\n. I haven't upgraded my main Sentry instance to >=5.1.5 yet, but yeah, if it won't work, you'll know. I'm putting great hopes in TraceKit for IE7 ;-)\n. @mattrobenolt If Sentry accepts POST payload, could you still introduce an option for those of us who could get their CORS to work, e.g. running Sentry on the same domain? Maybe even with GET as a fallback, but I still consider POSTing a bit cleaner. Thanks.\n. ",
    "mattrobenolt": "@rassie Correct. Feel free to test out and report back any issues. :)\n. 1.0 will attach the hash value to the url.\n. 1.0 is currently in beta testing and will probably supersede all of these issues. :)\n. @unnali Yep, and it requires Sentry 5.1.5, FYI. This has been completely rewritten to actually work.\n. @unnali Feel free to use: https://gist.github.com/raw/8921330d658b5f9aac94/raven-1.0-beta3.min.js\n. @unnali We're going to publicly release a beta this evening to get some other feedback and make sure it works for everyone before we actually tag a 1.0.\n. @Shyru Does PhoneGap not sending a Referer or Origin header when making a request? At the moment, that's used for validation instead of the secret key.\n. What version of Sentry are you running?\n. @Madumo I'm going to look into this on the Sentry side. I think the code path is rejecting if there isn't a Origin or Referer header at all. I'll poke at this tonight and see what the issue is.\n. Sorry, I haven't had a chance to look into it yet. :frowning: \n. Is this fixed with XHR+CORS in 2.0?\nIt seems like it would be, but we don't test explicitly against PhoneGap, so I'm not 100% sure.\nPlease reopen if this is still an issue and we can try to address.\n. @chrisabrams We have some ideas for implementing source maps after 1.0 is released. So it's on our radar.\n. @chrisabrams We're publicly beta testing it now, so \"when we're happy\". :)\nCheck out https://gist.github.com/4545505 if you'd like to test it out.\n. Follow me on Twitter or hang out in IRC, #sentry.\n. Done. Documentation coming soon.\n. This should be irrelevant in 1.0. Reopen if that's not the case.\n. Hopefully will be irrelevant in our 1.0 release. Reopen if it still happens.\n. @acdha You're completely right. We've actually been diving into this today to figure out what our options are.\nBy default, Script error. is now being ignored, and we're going to document how to make your errors parseable.\n. @acdha Also, it specifically applies on window.onerror. If you explicitly try...catch exceptions and send that, it works.\nWith TraceKit, we're getting a lot of monkey patching of libraries for free and it seems like this is the route we'll have to take. We'll monkey patch functions to wrap them in try...catch handlers.\n. TraceKit does this now.\n. Fixed in 1.0 with 4a1cf50ed9c9493b0a648dacae2484bb873b3312\n. I think the plan for this is to allow auth in the querystring instead of a header in Sentry to avoid all of this nonsense.\n@dcramer can weigh in.\n. This is irrelevant for 1.0. Closing.\n. Just to document here:\nIE8 & IE9 blow. It flat out don't allow setting headers at all for x-domain requests, as explained here: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\nSo, as of today, I don't think this has ever worked in IE8 or 9. It does work though in IE10.\n. I'll make sure to be a bit more diligent with this in the future. Until recently very recently, raven-js hasn't even been too stable. :(\n. lol, did this.\n. TraceKit does this.\n. What is the error being thrown?\n. Is it saying that callee is undefined or something? Could it be fixed by changing that line to:  if (callee && callee['arguments']) ?\n. Lame. Either way, I'm going to try and land a refactor this weekend that will eliminate all of this. For now, I'll just wrap it in a try..catch.\n. @kof Try that out ^\n. Um, I'm not quite sure where you think this is happening now?\n. 0.7.1 is really old. Latest version is 1.0.8 with 1.1 around the corner.\n. What's the interface look like for this?\n. Added with cc0a47186e79110f5013000a6caca46273c1c971. GitHub didn't like my rebased commit message.\n. I would highly highly encourage modifying these values in Apache:\n- http://httpd.apache.org/docs/2.2/mod/core.html#LimitRequestFieldSize\n- http://httpd.apache.org/docs/2.2/mod/core.html#LimitRequestLine\nI'm aware that there are limitations across browsers, and I try my best to keep payloads as small as possible, and will be doing things in the future to help it even more.\nFor now though, a POST request provides it's own set of incompatibilities, especially in regards to IE8 and 9, so it's a lose lose situation, honestly. This is all terrible, and it has been a battle over what a browser will even allow us to do.\n. @rassie, at this point, raven-js wouldn't even work in IE7 without an external JSON library like json2.js or the like. Just FYI.\n. Awesome. I'll be honest, I've done 0 testing at this point for IE7, so I can't guarantee that it works. I've tested with IE8+.\n. Correct. CORS is a much bigger problem, in my opinion, and more tricky to set up/configure/deploy correctly. It's easier to attempt to keep the GET request smaller, and more browsers handle longer querystrings. I will be documenting all of these tips and tricks.\nWe've added some new features to Sentry as well that allows Sentry to fetch the actual lines of context for the error for you, so the client doesn't need to send them. Of course, there's no way for raven-js to automatically know if your assets are at a publicly accessible URL or not without telling it, so we'll probably expose that as an option in the future. This would drastically shorten the payload needed to be sent. Hence why I'd prefer to move forward with a GET instead of dealing with a POST.\nBottom line: a GET request is an issue with potential solutions. POST is just a road block that we can't get around.\n. @rassie, totally! Please let me know. It's not our #1 priority, obviously, but IE7 it is a concern. We just have to make it actually usable in at least the modern browsers before we begin to make a crappy one work. :)\n. It requires a bit of extra bloat and testing to add to the library to support that. If anything, I'd provide two separate builds of raven.js. One that uses POST and one that uses a GET.\nI'll definitely look into it. At the moment, GET is the most sane way of handling everything. It's limitations aren't that severe. Like I said, Sentry has the features now to fetch js sources on it's own, so the client technically doesn't even need to send as large of a payload if the sources are accessible. It already opts out of sending if the Javascript source is minified, so this problem probably isn't as large as it seems.\n. Do you mind sending me an example of a payload generated? I'm curious why\nit's so large in the first place. I've had really good luck keeping them\n~1000 characters.\nSent from my iPhone\nOn Jan 23, 2013, at 4:42, Ivor notifications@github.com wrote:\nThanks for the responses. I understand both POST and GET have problems. I\ntested the current source with a simple error (small stacktrace) and\nnoticed it already didn't work. I'll watch the repo and will test new\nsolutions as they come along.\n@mattrobenolt https://github.com/mattrobenolt I had already tried to\nchange the Apache LimitRequestLine in the first vhost of the bound port,\nbut I still ran into the error. Maybe the wsgi-server has limits too?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/getsentry/raven-js/issues/58#issuecomment-12593828.\n. Thanks @ivorbosloper. I'll use this as a good reference to see where we can cut corners and reduce the amount of characters being sent over the wire.\n. On good news, it captured the error correctly! :+1: \n. @ivorbosloper, we're going to, by default, not send the lines of context, which is the majority of the bloat. Since Sentry now supports fetching the source itself, we can avoid all of that and leave it behind a configuration option to enable specifically for scenarios where your app is running behind a firewall or in some other non-publicly accessible location.\n. Feel free to try out:  http://d3nslu0hdya83q.cloudfront.net/build/master/raven.min.js\nThat's our build from master. It's updated as a post-commit hook. This build by default doesn't make an attempt to send the lines of context, but let's Sentry try and fetch them for us.  You can disable this behavior, which will make the payload large again, by using fetchContext: true as an option to config, like:\njavascript\nRaven.config(..., {fetchContext: true}).install();\n. @riklaunim, so it looks like everything is correct on our end, just the generated payload is too large. There's nothing we can do about this, except suggest fixing your web server to handle it. The alternatives are not worth the amount of effort needed to support them right now. Sorry. :(\n. nginx by default is a pretty high value, I'm pretty sure larger than 4096 characters. If not, let me know and I'll add info to the docs.\n. @wejendorp Not sure I understand your point. This is not typically an issue. Sentry fetches context on the server side, and the client doesn't normally fetch it unless you're operating in a scenario where Sentry won't be able to fetch. For example, in an application behind a firewall, or on a mobile phone, behind HTTP basic auth, etc.\nOr is this what you're referring to?\n. @iknite I'll look into bower today and see if the issue can be resolved on their end.\nIf anything, I'd rather completely vendorize TraceKit rather than maintain builds inside of a build/ directory, but that's just me. :)\n. @iknite, at this point, you know more than I do about bower, so feel free. I'll be checking into it later in the day and try to hunt down the actual issue. A submodule should work, in my opinion.\n. Fixed with d4da53e91242a9b53fbe0a78f0f517fdfc6371c4\n. Oh, hm.. and this Just Works\u2122? Can you point it to a specific sha1 hash in a different repo, by any chance? I'm technically not tracking occ/master.\n. I'm technically pointed to our fork at a specific hash just because sometimes I need to land a patch that doesn't make it upstream for a while, and I'd rather be in control over such a tightly coupled dependency. If I say that raven is just compatible with any version of TraceKit, I'd be wrong. I've basically been working on both projects at the same time to make them work, haha\nThis is the exact sha1 we're tracking, FWIW: https://github.com/getsentry/TraceKit/tree/3c26e0b3a5d30400cf12d34ce0fd53167dbe0e06\n. Sorry to be picky about this, but it's a real touchy dependency and it's important that everything is correct. And client side packaging sucks.\n. @iknite, Ahh, sorry. I beat ya to it. :) d4da53e91242a9b53fbe0a78f0f517fdfc6371c4\nI tagged a 1.0.1 and it installed the dependency when I ran bower install getsentry/raven-js. Is that working as expected?\n. Thanks for helping me out. I'm glad this works now.\nCare to add a note about bower in the install docs? I don't know enough to give proper instructions. \n. @iknite, thanks for the help!\n. Did this. 2fe58470e9e964f01c39d28c21f1ee06d7bef974\n. @acdha This will cause some problems with the new version. A window.onerror handler gets registered automatically to help facilitate capturing stack traces in IE, even if it's not used to capture global errors.\nSo in the case of setting the window.onerror = null, we're going to break some functionality.\nI also want to promote NOT relying on window.onerror anymore since it causes more problems than it's worth. The goal would be to get raven.js initialized and ready before the scripts are loaded. But it's a catch 22 since it will delay rendering the page a tiny bit, but I think it's worth it.\nI've also provided new functions, Raven.context() and Raven.wrap() to help get better errors. Suggestions around that would involve getting Raven included before any scripts so you can take advantage of those anyways.\nEither way, I think the direction is going to be pushing to have Raven treated as a library to fully utilize it. Not something that is tacked onto the end and hope for the best. Browsers aren't good enough to let us do that. :(\n. Raven does some tricks to help capture errors without your assistance now my money patching common callbacks. Like, jQuery success, setTimeout, setInterval, etc, and I'll probably be expanding on that.\nSo again, the objective is to get Raven stood up as soon as possible, so a lot of effort is going to be focused on getting the library as small as possible.\n. I think I'm going to follow this pattern: https://github.com/twitter/hogan.js/tree/master/web/builds\n. @matthewwithanm I'm going to backfill the build for 1.0.5. Let me know if you'd like any of the others backfilled as well.\n. haha, error handling in Javascript is really terrible. Can you provide me an example of how you're throwing the errors?\nFor example, throwing a string doesn't allow us to get any information except the message that was sent. With an actual Error object, we can (attempt) to get a stack.\nSo the more information, the better for this.\n. Is this on a page that I can take a look at somewhere? Or can you put it somewhere? Honestly, that's just not enough information. There are about 10 factors that can go into why an error doesn't get logged, and most of them are out of our hands. :) So if I can see the full context, I can give you a suggestion to help the browser out.\n. Are you running Raven.install()\nAnd for require.js, if you explicitly wanted to wrap modules, you'd do:\njavascript\ndefine(['module'], Raven.wrap(function(module) {\n  // insert cool stuff here\n}));\n. It all depends really on the callstack. When things start going into async land, it gets rough. For example, this would not do as expected:\njavascript\nRaven.context(function() {\n  setTimeout(function() {\n    throw new Error('crap');\n  }, 1);\n});\nThe internal function gets run in it's own context outside of the main context. Node.js solves this with a thing called \"domains\", but sadly, those don't exist in browser land.\nSo if an error is uncaught and bubbles all the way to the top, it usually gets rejected because it's 100% worthless at that point.\n. FWIW, if possible, the most confident way of capturing an exception is to explicitly use Raven.captureException. I understand that that's not always feasible, but just an FYI.\nSo an explicit try...except block is the mos reliable:\njavascript\ntry {\n  throw new Error('something');\n} catch(e) {\n  Raven.captureException(e);\n}\n. @pheuter Nope. :) And that's the fun part. Once an error gets to window.onerror, it's not an actual Error object anymore. It flattens down to just a useless string. And it also imposes cross domain security issues. So basically, once an error hits window.onerror, it's usually discarded since the only information we have may only be: \"Script error.\".\n. No, Javascript does not. It's really terrible, in fact. :) I'm actively researching and exploring ways to exploit the browser to giving us better information. The idea has even crossed my mind to monkey patch Function.prototype.call. But that's probably really bad news.\n. Totally! If you have any recommendations or suggestions to clarify documentation, please let me know. I'm always looking for that stuff.\n. Hmm. I'll play with this over the weekend. Last I tried, it wouldn't let me patch over window.Error. I'll try again in more browsers and see what's possible.\nThanks for the headsup!\nAlso, can you give me that in normal Javascript? I'm pretty sure what it's doing, I just want to double check. I don't write Coffeescript.\n. Now that I think about it, this is a flawed approach. Just overriding the constructor is going to cause Raven to capture every error object, whether it's thrown or not. :)\n. @dmcquay Can you provide an example that Errorception captures? I can probably reverse engineer it.\n. :poop:\n. @BYK, any ideas?\n. @adityar7 It does not. Raven.js tries it's best to monkey patch and intercept things if it can. In some more edge cases, you may need to wrap explicitly, but we try real hard to make things happen automatically.\n. I'll look into this today with the other AMD libs and see if it'll hurt. Thanks for the feedback. :)\nAnd, this is probably the direction things are going to go: #69 FYI\n. Ok, so according to the spec, you're right. It's not required to exist. I'll adjust this. http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n. This will be a plugin. So closing this.\n. Yep.\n. I fixed this in 1be8b4966ef4f4ffccaa2edb011e7ae266aad990\n. I think it makes sense to take the inclusion route here as well, since it'll be much easier to declare what hosts are used by your app, vs which ones aren't.\n. I'll yank with 1.1\n. @jeremyhaile Would you be able to get around it with ignoreUrls instead? If not, I'll keep it around. I was under the impression that nobody used this and it was just adding bloat. :)\n. ignoreUrls takes an array of regex patterns. So you can do whatever you want. :)\n. @jeremyhaile Specifically: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L374\n. @jeremyhaile Fair enough. I'll keep it around. Thanks for letting me know!\n. > ISP-injected noise\nThat sounds good. :+1:\nI'm all for regexes. Do you think it makes sense to essentially merge these two options into one that just works for either urls or message names?\nOr should they still be separate?\n. @jeremyhaile Can you open up a separate issue for that?\n. I reverted this deprecation warning. It's just a bad idea. :)\nThanks for the input guys!\n. What browser? I just tried this in Chrome, and I got the message as \"error\" as expected.\n. Pretty sure this was fixed with 1.1.\n. I'll take a look at this today.\n. @jmagnusson I just tested this and all appears well. Are you using the latest version of raven? And if so, what browser?\n. Are you trying to run from git directly, by any chance? Just including the src/raven.js is probably not the best idea.\nEither way, could you intercept the makeRequest() function and see the data that's being sent?\n. First of all, thanks a ton for the information! :)\nNow, just to clarify, you've posted two different ways of tacking on the extra data. First, you showed it being added directly to captureException(), then second, you showed it added to the config() call. I'm guessing that they're both working incorrectly?\n. Well, technically, an error that is cause, is supposed to be reraised. That is by design. Raven's job isn't supposed to intercept all of your errors and make them go away. Raven is just a middleware, if you will, that logs it. Typically, on an uncaught exception, you want the error to bubble up to the user and break because unexpected things can happen if your code keeps executing. So as a developer, it's your job to still catch your own errors and handle things appropriately.\n. This should all be working just fine. Open a new ticket if it's broken in 1.1.\n. So this message is coming from Sentry itself. raven-js isn't sending it. See: https://github.com/getsentry/sentry/blob/master/src/sentry/coreapi.py#L300\nThat's the reason why you can't hide it with ignoreErrors.\nThe issue is why that condition is happening in the first place.\n. @uglymunkey, check out 03d8925. I haven't been able to actually reproduce this on my own, but we'll see if that works.\n. @jeremyhaile Do you know how to recreate this \"Operation aborted\" error consistently so I can check it out?\n. Open this again if it's still an issue in 1.1\n. @miksago Pull requests welcome. :)\n. @MorrisJohns Yeah, this is out of my hands. Gotta yell at @dcramer. :)\n. Thank you, sir. :)  \n\nMatt Robenolt\n@mattrobenolt\nOn Tuesday, March 12, 2013 at 12:38 AM, David Cramer wrote:\n\nFixed\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/79#issuecomment-14762284).\n. @pieter, what you're saying makes sense. I'll have to investigate this a bit to see what is exactly going on before I make a ruling on it. Unless you can provide a specific test case to prove this and show the adverse effects quicker. :)\n. Closing because this is really old. If there's any information or if this is still a problem, please reopen.\n. You want a callback for after the http request has been made, just to clarify? Right now, we just blindly fire and forget. :) The only reason I ask, is I'm not sure how hooking into TraceKit at all would satisfy this, since TraceKit isn't aware of us actually doing anything with the message.\n. It'd be possible. Image objects have callbacks like, onload and onerror that I can hook up to. If anything, I'd literally just expose those for you.\n. How about dispatching events instead? I'm more of a fan of events instead of callbacks.\n. Something like:\n\njavascript\nRaven.config('...').install().addEventListener('logged', function() { });\n. Thanks. This is on my TODO list, but an issue to track it is better. :) This is something that I've overlooked. I'll get it buttoned up for 1.1.\n. Like this: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L450-L452 ?\n``` javascript\nfunction callback(data) {\n  data.something = 'lol';\n  return data;\n}\nRaven.config('', {dataCallback: callback})\n```\nOr do you want something different?\n. This can be done with dataCallback\n. First impression, the #1 concern is bloat. I'd like to leverage existing browser events if possible. I don't know too much about real events off the top of my head, but if it requires this much bloat to achieve it in a relatively compatible fashion, I'll just stick with callbacks. One of the goals of Raven is to be as light as possible since we don't want to have to promote deferred loading.\n. @bisrael, I have not. I'm currently at PyCon, so I'll have to take a closer look after this weekend.\n. This looks good to me. Sorry it took so long. :)\n. @acdha , it would be behind a log level setting. So you'd say, Raven.config(..., {level: 'warn'}) so you can control how much noise you want. \n. This is done with the console plugin.\n. See: https://github.com/getsentry/raven-js/pull/87#issuecomment-14966977\n. You can change how it's displayed in Sentry. The way that Raven ships it is correct. https://app.getsentry.com/account/settings/appearance/\nAnd if Sentry is displaying it incorrect by default, it's a thing for Sentry.\n. I'm pretty sure I'm doing this backwards based on how it's expected to be received in Sentry. I think this should and can very easily be handled properly on Sentry automatically. Each language has a different \"natural\" order, and that natural order can and should be preserved. So as of now, since it's literally just a slightly confusing use of language, I'm going to keep this closed, and propose a solution for Sentry instead.\n. Yeah, I'm definitely not against it because of unshift().\n@pieter, the current language stuff in Sentry is a hack. It was a hack to hold over until we have proper language support. Sentry already knows which language each event is, so it'd be easy to apply certain rules per language.\nI already have a patch waiting that will start rendering them with language specific stack traces so everything doesn't look like Python.\nThe next step is just handling the stack order per language.\nThe point being, it's not something that I want to solve just for raven-js. It should be solved for all languages, and it'd be very simple to do in Sentry itself. The concept of determining what language an event is has already been done.\nBy doing this, I'm really not worried about breaking Sentry or needing to force someone to upgrade. Really, this is the first that it has ever been brought up from any users, including myself, and nobody has noticed that it was wrong in the first place. :) The data is there, it's just backwards. So I'd hardly say that people should be required to upgrade.\n. We could trim the stack, but how do we determine how much to trim?\nEither way, the limitation is a server-side configuration. The solution is to increase that limit.\nIn this case, I'll yell at @dcramer to increase it for getsentry.com.\n. Pre 1.0 was all with POST and it was a nightmare for compatibility. I mostly regret not documenting all of the reasons so I have better arguments for why it's not a good idea at all.\nOf all options, doing this was the most compatible and less harmful.\nAlso, I can't find any information on how a long_er_ header makes you vulnerable to a DDoS. This method isn't really an uncommon thing. Any tracking software typically works this way.\n. It was definitely a large slew of IE issues, and I'm pretty sure issues in other more modern browsers too. CORS adds a lot of bloat to the code too, for very little gain.\nOne of the options I want to explore though is POSTing from a real form within a hidden iframe or something. It'd require refactoring Sentry a bit to process the payload, but it may be worth it.\n. First of all, this is something that I admit I should document because right now, I forget all of the different reasons and scenarios for why this doesn't work/why this is bad. Pre 1.0, this is how things were done and we fought really really hard and decided to just avoid it and use a GET since there wasn't a sane cross-browser way.\nEither way, this is a problem that I've spent a lot of time trying to solve and realized that it's basically impossible without patching the way Sentry works, which we're not exactly thrilled about doing.\n@bisrael, are you referring to getsentry.com, or your version of Sentry? Because Sentry itself doesn't impose any limitations, it's a limitation at the server level (nginx or Apache).\n. Also, FWIW, any modern browser handles a url of like, 65k characters. The only ones that have smaller limitations are IE's, which also don't even come close to supporting the features that we need to do a proper POST request, so it's basically unobtainable regardless. The solution is to try our best and construct a small enough payload.\n@bisrael fetchContext should only be used on a non-publicly accessible project or something deployed on mobile devices, etc. Sentry will fetch the source and construct the lines of context on it's own, so it's really only needed in cases where the sources are not accessible by your/our Sentry server.\n. @lukecyca I'd probably consider it if it were a separate file so it could be optionally included entirely. Unless it can be done in a lightweight way. But with that said, I'm open to options.\n. The only reason I haven't done this is because we either need to just assume all regex all the time, or type check. I dislike the idea of type checking, but now we've broken the API.\nI like promoting just using all regex, and maybe this is an ok change for 1.1.\nDoes that sound reasonable?\n. @ram-nadella I agree, and I'm currently working on a small project that is (hopefully) going to be able to replace the underlying library I am using in raven-js. This new library won't require patching window.onerror when loaded on the page. :)\nSo consider this a WIP.\n. Not at this time. Give me a week or so, and things should be in a usable state. I'm pretty excited about it.\n. Just do:\njavascript\nRaven.config(..., {collectWindowErrors: false}).install()\n. Were these 10k legit errors? Or was it something messing with a script on the page and causing a bunch of malicious errors?\n. Do you mind explaining how this happened?\nI'm inclined to not add something like this to core, but I'd gladly provide\na callback that would allow you to filter on your own. And maybe provide a\nsmall rate limiting sample.\nSent from my iPhone\nOn Mar 28, 2013, at 4:32, Kaare notifications@github.com wrote:\nYep legit issues + and all the same.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/getsentry/raven-js/issues/92#issuecomment-15583537\n.\n. This is a vey good point, and something that I've thought about in the past for about 5 minutes. :)\nThe only problem with this is identifying when the hash is important or not. It's safe to assume that on average, the hash means nothing to the app, in which case, hashes would make unique urls.\nDo you see just an option being passed through? Like:  Raven.config(DSN, {hashes: true}) ?\nAny other idea?\n. @johtso Then it probably got fixed on the Sentry side.\nWould it make sense to have a config option like, significantHashes that was a boolean to indicate if raven should even send them or not? I think it's a valid configuration since a lot of sites work solely on the fragment, and others would want it entirely ignored.\n. Hashtags are now retained in Sentry: https://github.com/getsentry/sentry/commit/d7ffe4d6be0483f0c5a8b326f5ec09bb8c08e0ca\n. Thanks. :)\n. Sentry will retrieve a source map automatically if it detects it.\nSee: https://www.getsentry.com/docs/sourcemaps/ and http://sourcemap-validator.herokuapp.com/\nFeel free to hop into #sentry on freenode if you're having some issues getting it all working. It's tricky to do right. :)\n. Also, FWIW, I should add this to my docs as well. Thanks for reminding me!\n. @PedroEsperanca, it doesn't have to be public, it just need to be somewhere that the Sentry server can fetch it. So you have 2 options:\n- If it's your own Sentry and they're on the same network, just use an internal hostname for your sourcemaps.\n- For getsentry.com, we can give you the subnets that our network would be fetching from so you can whitelist them without letting anyone else access.\n. If you're using getsentry.com, feel free to contact support, if not, hop in #sentry on freenode. Someone can help you out. :)\n. What about just declaring some global options? Like:\njavascript\nvar raven_dsn = '...';\nvar raven_config = {};\nThen when raven is loaded, it'll check those first and install itself if they exist. This is similar to how Disqus and Google Analytics and other libraries work.\n. I still really hate the idea of a callback. I'd much rather use an event.\n. You just dispatch a global event. Almost identical to the callback. See #84. I just wanted to clean that up and make it a little shorter before pulling it in. :) But that's the idea. I can just add this event with the other ones.\n. oh, haha, derp. Sorry about that.\nThen the only thing, why the changes in console.js? That's literally not even being used yet and definitely irrelevant to this PR.\n. Yeah, I should ignore the /plugins directory from jshint. That's new stuff I'm planning. Can you just ignore it for this, and I'll get the jshint stuff. I like to keep commits relatively isolated.\n. If I just change it to:\njavascript\ndefine('Raven', [], function() { return Raven; })\nDoes that solve the problem? I'm not super familiar with require.js, I just implemented what the spec said. :)\n. Do you know off hand how this affects people from using this with require.js after that change? I actually don't even document it, so I guess I'm not too worried about it. :)\nI'm going to finish up a 1.1 release this weekend, so I can fix this with that.\nThanks for the feedback!\n. @calvinfo @paulgould, I have released 1.0.8 which has this patch. Real sorry for the delay!\n. Thanks. :)\n. jQuery 1.7.1\n. Going to assume this isn't a thing anymore (and wasn't a large enough issue before anyways) since we don't even patch jQuery now.\n. Been done.\n. Master is pretty unstable at the moment. I'll begin publishing these again when it's at a usable state.\n. This shouldn't be relevant anymore. window.onerror isn't mutated until calling install() and is restored when calling uninstall(). Let me know if there's another issue.\n. @bobbyrenwick Can you link me to something public that is showing this happening?\n. See: #282 :)\n. Yes, because there is no solution yet.\n. I'm not quite sure what you're asking. Raven-js has never been on npm. It's not for Node. I just use the package.json to facilitate building the project. If you notice, it's also stating private: true explicitly. \nAs for the component.json, I don't use Component so I'm not sure. If you're trying to access master, you're gonna have a bad time. If you install from a tag, it should be working fine. \nThe problem with Component is that I need to point to a compiled file on master, there isn't a compiled version to reference. But each tag does. \nIf you have better ideas on how to manage distributions with Component, I'm all ears. I have no experience with it personally. \n. Pull requests welcome. :) These are not things I'm familiar with. I don't personally support Component. I maintain our CDN and distributing compiled versions. \n. This should be irrelevant with 1.1 and the bower.json stuff.\n. Makes sense to me. I feel like Sentry shouldn't be stripping this out either. Let me dig into Sentry a bit first and see if we can get around the issue on that side.\nIn my opinion, depending on the app, the hash may be just as critical as the rest of the url and would mean grouping separately all together. For example, most single page apps.\nHaving a tag would not help that grouping much.\n. Fragments are now supported in Sentry with https://github.com/getsentry/sentry/commit/d7ffe4d6be0483f0c5a8b326f5ec09bb8c08e0ca\n. What's the issue this is trying to solve? I based my implementation on jQuery. Not that it's the best example, but I was just following suit. :)\nSee: https://github.com/jquery/jquery/blob/master/src/exports.js\n. I also have plans for plugins, and not having a global Raven will mess them up. Not sure how to solve this, so I'm hesitant without thinking it fully through.\n. Eh, I'll deal with it later. I have some ideas.\n. Hmm, I forgot about this. Thanks for reminding me. :) I'll check it out today.\n. :)\n. Sure, feel free to send that along on your own as extra data.\nSee: http://raven-js.readthedocs.org/en/latest/usage/index.html#passing-additional-data\nThis is not something I'm going to add since dumping localStorage may be like, 5mb.\n. This won't be an issue with recent Sentry since it groups on the url of the actual js file. Also works best with source maps.\n. @jwfearn You are right, but this is very bleeding edge. I'll hold off until some of the others begin to switch. In the meantime, it'll break all existing browsers. My sourcemap validation tool already handles this case. :)\n. New builds are using //#\n. @dcramer I suspect this to be with the referrer check on your end. Not sure how raven-js child mess this up. \n. @noplay this is not related to the change in Sentry.\n. If this is still an issue, feel free to reopen.\n. This should be fixed with #189 as well.\n. I maintain my own fork of TraceKit, https://github.com/getsentry/TraceKit\n. Gonna close this since it's really old. With all of the changes in the past few years, not sure if this is applicable, or a case we want/need to support at this time.\nPlease reopen if this is still a thing.\n. Definitely +1 on browser support. I remember playing with this crossorigin attribute a while back, and IIRC, it was only supported in Firefox. Would love some validation on this. :)\n. Oh boy, this is old. We documented this a while ago. :)\n. Beat you to it. :( 3bea8688a4e5a78cccd89a0e21960e25706533ad\n. I'm +1, aside from the copyright notice at the top of the file. :)\n. I'm +1 as well, I would just like the license removed, since this would fall under the BSD that is all of raven-js. I think that's how licenses work.\n@dcramer, opinions?\nAlso, if someone can verify this behavior, that'd be awesome, since I have no idea.\n. We have our own now in plugins.\n. @dmiddlecamp Would you mind submitting a pull request for this? We already vendorize and hack up TraceKit anyways, so feel free to modify that.\n. Use extra. I'm going to clarify the documentation around this.\njavascript\nRaven.captureException(err, {\n  tags: {\n    foo: \"bar\"\n  },\n  extra: {\n    customString: \"custom stuff\",\n    customJSON: {details: 123}\n  }\n});\n. You can very easily just do:\nTraceKit.linesOfContext = 5;\nI suppose it's not officially a part of Raven, but that works without modifying any libraries.\n. derp. I'll add an option to config to allow you to set this.\n. Is it possible to write a test for this?\n. I don't really write JavaScript, so I don't know how IE even works. I'd imagine it's possible, but I'm not sure.\nEither way, the code looks sane enough and safe. So it's fine. I was more or less trying to understand the problem a bit more.\n. Umm, not quite sure what all is going on here because I'm distracted by the noise of moving everythign into the Raven object, which is wrong.\nWhen compiling the script, a header and footer are applied making a closure out of the entire script, not exposing anything except Raven.\nWhat you did also makes the compressed file size much larger since the names of the functions can't be munged smaller.\nIf you want to resubmit, I'd be happy to look at the other things.\nAlso, try and keep pull requests as simple as possible. One pull request per idea. If, for example, I agreed on some but not all of the things, it's harder to cherry-pick just the things we both agree on. :)\n. So make raven gives you a minified and unminified version. I also distribute builds that are unminifed in the repository. Is that not enough?\n. We've just pushed a 1.1.0-rc1 if you wanna take a look at http://ravenjs.com\nThere aren't docs yet, and I plan on working on those this weekend.\n. 1.1.0 has been released. I apologize for the delay! http://raven-js.readthedocs.org/en/latest/changelog/index.html#id1\n. @acdha There is not at the time.\n. This has been solved with fingerprints and releases at some point in the past 2+ years.\n. Can you see this in unminified? I can't find where this would be.\n. Oh, I see now. This doesn't exist in master. :) For 1.1, Raven won't be trying to automatically patch jQuery for you, so this will go away. But I'm going to leave this open so the jquery plugin doesn't exhibit this same bug. Since this is the first report of it, I'm going to leave it for the time being since you can just patch it yourself.\nI hope to be wrapping up a 1.1 this weekend.\n. The hotfix should be just fine. I can't imagine it causing any issues.\nAnd ignoreErrors is not being removed. :( I planned on removing it, but found out that lots of people actually used it. So sorry for the confusion!\n. @Philmod What version of jQuery were you using that caused this issue? I'm going to submit a patch for this, but I'd like to add it to the release notes.\n. @tmcw Sorry for the confusion. It was a feature that I was going to remove that ended up proving useful. \n. ignoreErrors still exists, so this should not be relevant anymore.\n. lgtm\n. Which version of raven.js is this? 1.0.8 or master?\n. Can you recreate with unminifed source? Or at least witht he sourcemap accessible so I can get the context. :)\n. Can you deploy the raven.min.map along with it so Sentry coudl map it up properly? This error is very unactionable without some context.\n. Feel free to re-open if you find more information.\n. I honestly know nothing about bower or component, so I'd be looking for the best recommendation here.\n. Is it literally identical in format? So does that mean I have to bump versions in both of them, etc. Can you just use a symlink if they're identical?\n. All around, that seems kinda silly. What do other people do in more popular libraries? I'm sure there's a recommended way of doing this.\n. That's fair. Wanna submit a PR? I'd be open to any suggestions/recommendations for contents within the bower.json file as well.\n. This shouldn't be a thing anymore.\n. @dcramer, is this because of the Referer check? Not sure what the status code is when that fails.\n. @gst can you make sure that you are configuring things correctly? You should only get a 400 when something is wrong. Either your DSN is wrong or your Referer doesn't match what you have in the Allowed Domains configuration.\n. We've just pushed a 1.1.0-rc1 if you wanna take a look at http://ravenjs.com\nThere aren't docs yet, and I plan on working on those this weekend.\n. We have released 1.1.0: http://raven-js.readthedocs.org/en/latest/changelog/index.html#id1\n. Oops. :) Would you mind just doing:  [].slice.call(arguments) then since this var is only used once?\n. Thanks. :+1:\n. I'm not 100% sure, but it has something to do with installing from some package managers like bower and component?\nThese js package managers use GH to install from and the version in src/ is incomplete. It needs to be compiled. Unless I can somehow hook a compile step into bower or component, I think they need to stay.\nI also don't use those, so I'm not sure. Any ideas? I'd love to get rid of them, honestly. They're a pain to maintain.\n. Ah. Well, I'll create a patch today to remove all of that junk and I'll cc you on it. Thanks for letting me know. :)\n\u2014\nSent from Mailbox for iPhone\nOn Wed, Oct 16, 2013 at 7:30 AM, Erwann Mest notifications@github.com\nwrote:\n\nI use to use bower, and manage lib.\nYou indeed must have a dist folder but directly with the final js, no version folder, tags are here for that.\nFor example you can do:\nbower install raven-js\nand if you want a previous one:\nbower install raven-js#1.0.6\nI'm just asking to remove the versioning in dist folder. ;)\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/141#issuecomment-26422611\n. I got rid of this with fe47396af554cf9a838d4200525c7584f09b9b32. @kud let me know if this works.\n. Well, you really shouldn't be using the fallback window.onerror anyways. That's a last ditch effort.\n\nRaven explicitly monkey patches things so that it can be done with Raven.captureError.\nToday, if you use Raven.context or Raven.wrap, you're able to pass along your own extras. See: http://raven-js.readthedocs.org/en/latest/usage/index.html#passing-additional-data\nI can add a callback for Raven.onException or something that you can register to patch on more stuff at a global context though.\n. Yes, you would have to prepare the data beforehand. What is your usecase where you'd want to prepare on the fly? Just curious so I can construct a callback that makes sense.\n. Why was this closed?\nTo address your question, yeah, there is a limit to how much data you can send along with an error. But that limit has to do with your Sentry server (or getsentry.com). Very specific to configuring nginx or whatever you're using. Older browsers also have limits for the length of a url.\nAnd yeah, it'll silently fail if it's too long, unfortunately. If you configure your nginx to accept a really long uri and the target is modern browsers, you can make it work though. getsentry.com has a pretty large limit.\n. Ah yes, source maps are basically essential IMO. Let me know if you have any issues with that too. :)\n. Looks sensible to me! Thanks. :+1:\n. It has been a while. We are planning to get together this weekend and figure out the tooling and whatnot for this. I built some stuff that made things more difficult to do releases, so it has been a pain point. We're gonna switch to grunt and whatnot this weekend and get things into some standard tools.\nAlso, finishing ravenjs.com as well for downloading custom built versions from our new CDN. :)\n. :+1: Thanks.\n. What case is this trying to solve?\n. Hmm, could you use the key __raven__ then and write some tests for this?\n. Fixed with 1e5470ac25e742468a43c0d40a7c0143ef56978c\n. I don't have access to getting that header. The way this works in other clients is the client generates the id and sends that along. I'd prefer to take that approach as well.\n. @chrisjbaik Yeah, I'm just going to generate a \"uuid4\" on the client and send that along since you can't read the X-Sentry-ID header.\n. Cool, I\u2019ll get something cut this week. :)  \n\nMatt Robenolt\n@mattrobenolt\nOn Wednesday, January 29, 2014 at 11:38 AM, chrisjbaik wrote:\n\nAwesome. We're planning on potentially using this very soon and that'd be amazingly helpful.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/153#issuecomment-33621580).\n. I'm literally in the middle of writing some new docs for 1.1, so I'll just make a note in the new stuff.\n\nThanks. :)\n. The issues that I have with this are that you're trying to use some functionality which isn't exposed to the global namespace. isFunction() and isUndefined() stand out to me. Also, what's the purpose of essentially copy/pasting Raven.wrap() Not sure what that would be doing in your case.\n. Development makes sense. Is there not a way to just conditionally load the Raven module to begin with? I can push for a development mode if it'd be worth it for 1.1.1 or something.\n. @gdi2290 How about we get a working version in, then we can iterate from there? I think for now, if we can clean up the lint warnings so Travis doesn't complain, I'll merge. Then we can add documentation.\n. @emosenkis I've rolled my own version, but it hasn't been tested very well, which is why it's not published to the CDN. I was planning on pushing the new ones to CDN as \"experimental\" status on next release to get feedback.\n. Awesome. So step one, I'm going to add support for adding chrome-extension:// as an acceptable url in Sentry.\nThen I'm going to look into the issues here. Do you have an example app that I can check out that fails?\n. When publishing your chrome app, do you know the app id? Like, could you use:  chrome-extension://{{ my id }}/ instead of a wildcard? Just trying to figure out how I should patch this into Sentry.\n. If Sentry validates the origin header correctly for the chrome-extension protocol, will that resolve the other issue with CSP and not need to make an XHR request? Or will that still be an issue?\n. Interesting. I\u2019ll loop in some others that understand CSP far more than I do and see what they have to say.  \n\nMatt Robenolt\n@mattrobenolt\nOn Tuesday, November 12, 2013 at 8:49 AM, Zeray Rice wrote:\n\nNope. It's still an issue.\nChrome's CSP doesn't allow to write something like this:\nimg = new Image(); img.src = \"http://example.com\";  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/157#issuecomment-28310522).\n. Oh, nice! Thank you! I can\u2019t guarantee when this will be resolved, but it\u2019s definitely on our mind with a bunch of things around extensions as well. So this will be good information to use to solve it all at once. :)  \n\n\nMatt Robenolt\n@mattrobenolt\nOn Tuesday, November 12, 2013 at 8:55 AM, Zeray Rice wrote:\n\nI wrote an example here (https://github.com/fanzeyi/raven-example-app)\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/157#issuecomment-28311263).\n. The first thing I'll address is auth: at that point, if you're going to be POSTing data and the file is packaged in an extension, you might as well just use the private key. I'd argue that it's less of a hack than allowing an option to disable authentication on the server since ultimately the key can be revoked if there was abuse. Our secret/private key isn't really that private. The only thing that can be done with it is report new errors. It's not an API key or anything to retrieve any other data from Sentry.\n\nNow to address the transport issue: I'm thinking it may make sense to make the transports pluggable. So we can have one for browsers that does the GET method or a separate one for POST that supports CORS.\nThe reason why I don't support a POST right now is because of cross browser capabilities. It's a real pain to make it work correctly everywhere, and GET works the best. So if we were to provide a transport that only supported, say, V8. This could cover the cases of Chrome apps, etc.\nThis would work in a similar fashion to the way transports work in the python client, if you're familiar with that. We would encode the transport into the DSN likely and you can register which transport you want to use.\nFor example:\njavascript\nRaven.registerTransport('https+post', function(data) { /* Send the data with POST */ });\nRaven.config('https+post://....').install()\nDoes that make sense?\n. Whoa, you caught that quick. :) I'm glad this solves the problem. I was actually trying to figure out what other problems this would solve.\n. @nrako The commit you referenced is being used on app.getsentry.com. We haven't cut an \"official\" release in a while. We'd just recommend running Sentry from HEAD, which is what we do most of the time.\nAlso, fwiw, I plan on looking at this closer this week, along with #183 which should solve the rest of the issues.\n. We're definitely holding out for a v7, but we literally run HEAD ourselves for the hosted service. So if you have problems with that, we're definitely more on top of it and more receptive. If you have an issue with the latest tag, we'll likely tell you to run HEAD. :)\n. I believe this should all be good now with Sentry 8.0 paired with raven-js 2.0.0, but we don't explicitly test against this, so not 100% sure.\nPlease reopen if there is more we need to do here.\n. Hmm, so I think we can do something here slightly less hacky, but I'll have to look into it a bit more.\nRight now, I do stuff like this: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L443-L480\nSo I'm already taking the lines of context and I'm making a guess if it's minified or not based on the line length. Your solution to preserving newlines would likely appear is not minified. So instead of bailing at the no column number, I could likely stub in a 0 at that point.\n. Also, sorry for closing and re-opening. That was entirely an accident. :(\n. @benvinegar I think we should re-evaluate this now. I'm not exactly sure how we should handle this, but we could think about it and come up with something.\nI agree that there's some value here in being able to work within source even without a column number, instead of just ignoring it.\nBut I haven't thought about this in a long time, so I'd need to stare at this again.\n. Closing as a more extensive discussion has taken place on https://github.com/getsentry/raven-js/pull/183\n. I'll add the hyphen for the domain, but I explicitly do not want to allow the password part of the spec since raven.js does not use your private key. So this encourages not even trying to send it.\n. Sorry about that guys, I've published a 1.1.1 which addresses this.\n. I see how stacktrace could be undefined, but I'm not sure why this is causing an error.\n``` javascript\n\nJSON.stringify({stacktrace: undefined, foo: 'bar'})\n'{\"foo\":\"bar\"}'\n```\n\nI don't see where I'd be just JSON.stringify on the stacktrace then checking it's length? The only time I JSON.stringify is when sending to the server, and in that case, the key just gets silently ignored.\n. You're definitely using an older version of raven.js. Which version are you running?\n. Even in 1.0.8, I don't see how what you're saying could happen.\nhttps://github.com/getsentry/raven-js/blob/1.0.8/src/raven.js#L449-L451\nAre you running a forked version or something? Nowhere in that code am I trying to mutate data['sentry.interfaces.Stacktrace']\n. This sounds like you're passing along a dataCallback and doing some mutation to the payload outside of raven, actually.\n. If you want to prune your stacktrace, you can do anything you want inside the dataCallback. That way you don't need to maintain a fork or anything like that.\nAside from that, yeah, there are some browser limitations with sending long urls. From what I can tell, it sounds like it's capped around 65k. Most modern browsers are around that same length.\nWhat will happen before hitting 65k though is the server typically won't accept a header line of that length. On getsentry.com we don't have that issue, but it's non-standard. If you're running your own Sentry you'll want to make sure gunicorn or uwsgi will accept that length.\n. That's fair. Lemme hack something together for this. :)\nI should raise an exception that says not to set the password at all. I explicitly made this decisions so that people wouldn't embed their private key in browsers. This just points out that people are at least trying to. :(\n. You can't access it like that in your browser, but it'll work inside of a <script> tag, I promise. :) Protocol relative means to match the protocol of the existing page. So when you try to use it in your browser, it has no context.\nThink of it like using just a path:  /1.1.2/raven.min.js. That doesn't mean anything to a browser unless it's on a page so it has the rest of the context.\n. So this is something that I'm not too familiar with personally, but this directly conflicts with a previous pull request to add the noConflict. https://github.com/getsentry/raven-js/pull/109\nI originally had it this way.\n. Oh, so the issue is because of the new plugins. That makes sense.\nHow are you using it now? Since the plugins were honestly designed to just be concatenated together and served from one script tag. Is this all getting shoved into a build system? Or is it coming from within a script tag and going through AMD?\n. What I'm getting at is that I think if I just change the build system and include plugins within the main closure, this wouldn't be an issue and maintain existing behavior. Would that solve the problem?\n. Yeah, I think that's fair. Due to the new plugin architecture, I think that's a fair trade-off. Can you add to the documentation about the noconflict thing with require.js? That way I can at least point users to that who have the issue.\nI'll put some thought into making plugins AMD aware. There's also this browserify stuff that may make sense, not too sure yet, haven't played with it.\nThanks for the feedback. :)\n. This is in the 1.1.3 release. Thanks. :)\n. Ah, I'll clarify in documentation. You can actually pass arbitrary information like that through extra.\njavascript\nRaven.captureMessage('Hello world', {extra: {planet: {name: 'Earth'}}})\nAnd you get this inside Sentry:\n\n. Good call, thanks!\n. Not sure if it's worth us doing this. I assume we should just defer this 100% of the time to the server and not try to do this logic in the client.\n/cc @dcramer @benvinegar \n. Are you able to reproduce this reliably? It looks like it's probably an issue with the console plugin which is barely tested. So it'd be cool to fix it. :)\n. I'm assuming some browser isn't happy at all with this. Do you at least know which browser?\n. Do you mind sharing what you're doing inside your code? I'm assuming you're just doing:  console.log('stuff') or whatever.\n. I'll take a look at it and see what I can do. Pretty sure I haven't even tested this plugin myself. :) So this is good feedback.\n. Should be fixed by #181 \n. No idea, but @benvinegar probably has a better opinion on this now.\nI've just replaced with #394 to come up with a solution.\n. Thanks. :)\n. iff isn't a typo. iff means if and only if.\n. I never studied those fields. :)\nBut sure, if it helps you, I'll assume others don't understand as well. Update the PR and I'll pull it.\n. Thanks! :)\n. Looks good to me.\nAre you able to add a test to assert this behavior is correct and we don't regress in the future?\n. So if we're being specific to the problem here, the issue is that it has a variable which doesn't have a source property.\nWhat if we did a check for:  isString(sources[i]) || (!isUndefined(sources[i]) && sources[i].source)\nThinking to prevent other edge cases that may pop up. I think this function can just be reworked to handle specifically if it's a string, or if it has a .source. Ignore everything else.\nThoughts?\n. @johnbacon I've published a 1.1.8, fwiw with this patch. Thanks again. :)\n. unshift is also pretty terribly slow. At this point, it'd make more sense to just flip it to a normal for loop and use push. There's no point in being clever and looping in reverse now if we acknowledge that there can be gaps in the array.\n. This looks sensible to me. Thanks for the contribution! :+1:\nI'll cut a new release today.\n. Derp.\n. Can you give me an example where this fails so I can figure out a better way to potentially do it automatically?\n. Ohh, I see. JavaScript sucks. :(\nThanks for the PR.\n. @frekw This is awesome! I'm going to want to look at this over the weekend then I'll give my feedback. :+1:\n. @gmathieu Test it out. :)\n. I'm gonna hack on this tonight fwiw.\n. >  In the meantime, if you need to override the default request creator, you can do so by specifying a transport option in your Raven config.\nAlso, to clarify, this is undocumented for a reason right now. :wink: This is likely the approach we're going, but we're not committing to it just yet.\n. I'm closing this now in favor of our approach that made it into 1.2.0.\nThanks everybody. :)\n. How are you using Sentry without the public key?\n. Oh, interesting.\nSo coming up soon, we're going to be supporting pluggable transports, and I think this would just be resolved by your own transport. Ideally, raven-js would be geared for working with Sentry out of the box then if you want to do something different, your transport would have that flexibility.\nSee: #183 \n. Right, I understand. My point is that I don't want it to work like that out of the box because that will affect all Sentry users.\nBy having a separate transport, you'd be able to plug in one that was dumber than ours that didn't need to send along the auth stuff, for example.\n. This was resolved with https://github.com/getsentry/raven-js/pull/361\n. I don't release anything on the 1.0.x branch anymore, so this isn't needed.\n. Ah, cool. Thanks.\n. OOPS\n. So my primary objection to this is the fact that it duplicates the abilities of dataCallback. Most users don't need to filter data from their client side JavaScript, and the dataCallback allows you to filter your own stuff anyway you want it. If anything, I'd prefer documenting a few \"recipes\" on how to filter certain things as opposed to baking it into core.\nIf you know what patterns and values to filter against in the first place, you could probably simply filter them out yourself. There's a lot of extra logic here to handle many use cases that I don't feel is too relevant for the majority case.\nThe only way I'd see much value in baking this into core would be if we shipped common filters. And in that case, the filters we ship with the other server side libs are not relevant to client side JavaScript. Such as filtering credit card numbers, etc.\n. Yeah, my tracekit is pretty different from upstream anyways. :) There was an issue open for this somewhere. One second.\n. @russelldavis Would this fix https://github.com/getsentry/raven-js/issues/133 ?\n. Sweet. Lemme try this out locally.\n. What's an easy way to reproduce the issue? When doing a normal Raven.captureException(err, {tags: {foo: 'bar'}}) for example, the tags are merged in properly when sent.\n. Still not able to reproduce. :/ Mind adding a breaking example into the examples/index.html file? Doing what you're saying works on master for me.\n. Thanks a lot. :) I appreciate the effort. I like to be able to reproduce the bug in question before I blindly merge shit in so I can understand the context.\n. Yeah, that works just fine in Chrome 33.0.1750.70 beta on master. Which browser you testing this in?\n. Ah, just tried it in Firefox and it didn't work!\n. Ok, awesome, and your patch fixes it for FF. No idea what's happening on the Chrome side. Probably hitting the path of the nicer window.onerror, I'm assuming.\n. Those tests make the test suite 8s now though. :( :cry:\n. Not super concerning. :) Some day, TraceKit will be gone entirely. It's on my 2014 roadmap.\n. No idea. I talked with the one dood pretty regularly for a while, and I disagreed with the direction he wanted to take it and started on a new project that didn't go anywhere.\nI've started this project a while ago, just haven't put much time into it: https://github.com/mattrobenolt/callsite-shim\nMy goal is to finish that, get full browser tests, and port Raven to using that. I'd be happy to collaborate if you're interested.\n. I also troll in #sentry on Freenode if you're interested in chatting about things.\n. Neither do I, hence why it hasn't been touched in a while. :)\n. Awesome, looks sane to me!\n. There were numerous tickets about this in the past that have been closed. There is simply more compatibility with doing a GET request instead of a POST and dealing with CORS and all that other fun stuff that lots of browsers don't handle.\nBUT, moving forward, I'm going to be leveraging the new plugin infrastructure and provide pluggable transports. See #183. This will likely make it in for a 1.2 release when I get around to testing it and trying it out.\n. Thanks!\n. The behavior is such so that it's transparent. Your app is still in charge of handling it's own exceptions. If an uncaught exception goes by without being raised, that may cause undesirable results in your application. So we just log it, then re-raise to maintain existing behavior.\n. Ah. I have it documented for sending tags with each event separately: http://raven-js.readthedocs.org/en/latest/usage/index.html#passing-additional-data\n. Fwiw, it's only checking for the file when you open up the Chrome console to check. It doesn't try to download it automatically otherwise.\u2014\nSent from Mailbox for iPhone\nOn Tue, Apr 1, 2014 at 9:17 AM, David Cramer notifications@github.com\nwrote:\n\nClosed #195.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/195\n. Yeah, ignoreUrls is explicitly used for exceptions. captureMessage doesn't have context of the url.\n\nI guess that could be clarified in the docs. :)\n. @christophercliff I'm ok with doing that, I just need someone to hand hold this and support it since I don't use browserify.\n. Just merged #261. I think there are a few other issues/PR's to address, then I'll cut a release and try to get this onto npm.\nAnyone here willing to test when I publish? Or want to give me instructions to test on my own? I don't want to break the public package that others depend on.\n. This is going to be awkward now having a package called raven and one called raven-js both in npm. :disappointed:\nI need to figure out a way to combine these two or something into something that can be used in both places.\n. @moretti Thanks. I'm going through my backlog of issues and pull requests today so I'll try and cut a new version this afternoon unless there's a major reason I can't.\n. So allow me to explain the problem and why it's not so simple:\nThis module was never intended to be published to npm in the first place. The project was forked and published without our permission. This fork even diverged from master. That's the version 1.1.11 that you see there today, which does not match the 1.1.11 release tagged in this repo.\nAfter that confusion, I've acquired ownership of the repository. I'm hesitant to just publish 1.1.16 to npm since I'm not super familiar with this space and how people use npm for client side dependencies.\nWith that said, @dcramer and I are going to get this sorted out soon and fix this so we can move forward with our version and nor a forked version that we don't support.\nSo again, I apologize for the confusion, but I'm trying really hard not to make people more upset by breaking compatibility.\n. 1.1.17 was published to npm. I have no idea if this really works, so some confirmation would be great. :)\n. Awesome, good to know. I'll be keeping the npm version up to date now as well. :)\n. Hmm, so the tricky part with making json2 a plugin is that right now, all plugins are loaded in after the base raven is loaded and this one would need to come before. I'll put some thought into this, but it's unfortunately not super trivial.\n. Yeah, I know. I just don't particularly want to do that, but it may be the only way. I'll think about it.\n. I'm going to punt on this. At this point, any browser that doesn't natively support JSON is likely too old for raven-js to even work.\nI'm going to group this under https://github.com/getsentry/raven-js/issues/445 since we should explicitly document which browsers and runtimes we support officially, and maybe document about augmenting with JSON2, but it's unlikely that we'll ever actually test this case or provide support.\n. Good call. I assumed this was a non-issue anymore. :) But I guess that was a poor assumption.\n. Can you fill the typo and I'll pull in?\n. Plugins right now rely on Raven existing in the global space. I have no idea what Gulp is, so some information and sample code would be nice.\n. wfm, I don't know anything about Gulp.\n. lol, I should automate this for when I build a release. I bet I can just have sphinx do it since it already knows the version number.\n. This was actually harder than it looked. :(\n. Shouldn't this be something we could patch automatically?\n. I actually wanted to do something like this but by patching the native XHR object.\n. Definitely remove the changes in dist/*. I compile those when I publish releases. It makes patches really messy.\n. Superseded by #261 \n. Do you know how to reproduce this, by the way. I can't make an error message that's not a string. I'd like to know more about where this is actually coming from.\njavascript\nnew Error({foo: 'bar'})\nnew Error()\nnew Error(new Error())\nnew Error(undefined)\nAll yield strings for their message.\n. The only way I can make this happen is if I mutate the message after the Error object has already been created. Like:\njavascript\nvar e = new Error();\ne.message = undefined;\nI don't know Ember's source code at all, but I couldn't grep for anywhere this may be happening. So noidea. :confused: \n. Ohhh. So you're saying it's not even an Error object being passed in in the first place?\u2014\nSent from Mailbox\nOn Sun, May 4, 2014 at 2:16 PM, Matthew Baker notifications@github.com\nwrote:\n\nYa, it happens if you were to do something like this:\n    Ember.RSVP.configure('onerror', Raven.captureException);\nIn that case the message is an XHR object and not an Error, hence the confusion.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/207#issuecomment-42140119\n. Ah, ok, so I'm just checking if it's a string that's passed to captureException. I should just be more strict there and make sure it's an instance of Error instead. Thanks!\n. Cool, so this should be better fixed with bc060ae4be80c1309fa00334c78e75160ec5ccbb\n. I fixed this with 611dc559092ea344d042363dec52a82ff80f4730 instead. Thanks. :)\n. Do you happen to be running this from the console?\n. It definitely won't work from the console. But from within a page, it should be just fine. Is this somewhere that I can look at?\n. Do you think we should do something better for this? Or is this expected behavior, in your opinion?\n. @mlb5000 I think the solution is just to document how to better test that Raven is working. Either provide a Raven.test() or just document and say, \"Do this.\"\n\nThe only use case of running Raven from their console is to test. So we should just give them a better way. :)\n. Just curious, why are you trying to use Raven from within tests? Or are you using chai within production code?\n. That's why I ask. :) Chai does lots of funny things, so I'd rather not cater to it since it's not designed to be used in production, and Raven is designed to only be used in production. They kinda contradict each other.\n. We do what we can! :cake:\n. Not sure what the expected behavior here should be. Why are we using this inside the dev consoles in the first place? I guess I'm lacking the context for why this should be fixed or what's expected.\n. If that's the case, I should just add in a Raven.test() or just document it better so people don't need to do this!\n. That is true, but people don't. And everyone keeps trying to do this, which doesn't work and I don't feel like \"fixing\" it since it's a non-issue once it's up and running. I can just easily add Raven.test() and avoid all this.\n. This should be something simple to satisfy the needs or figure out why it breaks in the first place. So if someone wants to put in the work for that, that'd be awesome.\n. This should have been fixed a while ago.\n. Any ideas how to fix this? I'm not familiar with modern jQuery and this is the first time I've heard of jQuery migrate.\n. Ah, I see. Is this actually causing an issue?\n. Ah, then in that case, you can just filter those from even being sent with the shouldSendCallback :)\n. Oh, somehow I completely missed this.\nYeah, I'm on board with this idea. I assume you'd need some more robust management to set/unset things if the state were to change. It's a bit simpler with setUser, but I'm open to seeing an implementation. :)\n. welp, you're right. I'll write a test to confirm this behavior.\n. ;)\n. Is this just suggesting that I need to do:\nFunction.prototype.bind.call(originalConsoleLevel, originalConsole).apply(originalConsole, args);\ninstead?\n. ``` diff\ndiff --git a/plugins/console.js b/plugins/console.js\nindex aac3e3e..a3cba91 100644\n--- a/plugins/console.js\n+++ b/plugins/console.js\n@@ -19,7 +19,9 @@ var logForGivenLevel = function(level) {\n     // this fails for some browsers. :(\n     if (originalConsoleLevel) {\n\n\noriginalConsoleLevel.apply(originalConsole, args);\nFunction.prototype.bind\n.call(originalConsoleLevel, originalConsole)\n.apply(originalConsole, args);\n         }\n     };\n };\n```\n. It works in Chrome, so that's good enough for me!\n. We see this ourselves, and I have absolutely no idea yet if it's possible to detect and ignore these. But I agree, it's problematic. Just don't have a solution.\n. How would you handle the case of unsetting these?\n\nLemme double check out Python handles this since that's our canonical reference.\n. Are you trying to model this after tags_context and extra_context ? If so, this makes sense.\nAlso, if so, I think I'd prefer to keep naming inline and go with either setTagsContext() or just tagsContext.\n. Aha!\nYeah, we definitely always merge in python and would prefer to model anything in raven-js after python.\n. To be fair, we can also rename setUser to setUserContext as well to conform.\n. welp\n. Yeah, let's do that, rename and leave an alias that I'll deprecate in the future.\n. Awesome! Thanks. :+1:\n. I will trust that this works. :)\nDoes it just need to be included on the page and it'll automatically patch things? Or does it need to be explicitly injected somehow? Angular plugin, for example, needs to be registered into the application before it can be used.\n. Can you confirm that I didn't break it with bdda4e9687a10dc9e622e85a7bf7f7b295435008 ?\n. Ohh, haha, I see what I did. One sec.\n. See: 7aec84452c258b1ca272d6c1e4fe863bb52f838d\nSorry, I was cleaning it up because jshint was complaining.\n. Just for context, that's only written out to window.console. It's not raising an exception or anything.\n. Oh, I've never used karma, so I have no idea. :)\n. Sorry. This is the documentation for master, which has changed to the setUserContext method. I'll be trying to cut a new release this weekend to reflect this. Thanks. :)--Matt Robenolt@mattrobenolt\n    _____From: Nick Merrill notifications@github.comSent: Saturday, June 28, 2014 13:51Subject: [raven-js] Documentation for setting the user context incorrect? (#222)To: getsentry/raven-js raven-js@noreply.github.comI think the documentation here may be out of date, or just incorrect.   It says that the function setUserContext({...}) exists to set the user context, but that breaks for me, while the setUser({...}) function works perfectly.   Minor issue. Sorry for the nuisance, and thanks for creating a great library!   \u2014Reply to this email directly or view it on GitHub.\n. This is fine. Both are supported in 1.1.16. setUser is being deprecated and planned to be removed in 1.2 and replaced by setUserContext.\n. @skovhus What is the exact error message being sent? Is it a different case or something?\n. Yeah, that's good enough. Are all those other browser being reported as this exact literal string? Or do you see other variants? If so, I'll add this one to the list.\n. lol\n. Closed with #224 \n. Can you add this to the tests, please? :)\n. Yup! That works. Thanks. :cake:\n. Thanks. :cake:\n. Yeah, you're right. :) I'll fix.\n. Yeah, it doesn't really matter. It has nothing to do with authentication or anything like that. It's all backed by authentication on the server. This whitelist is just to block out noise from errors that you don't care about.\u00a0--\nSent from Mailbox\nOn Fri, Aug 22, 2014 at 12:30 PM, Robin Andersson\nnotifications@github.com wrote:\n\nI would close this issue as won't fix, because it can't be exploited for anything at all.\nAnd if someone as a script kiddie want to go around the check on your own client, well, just modify the whitelist instead of including stuff from other domains.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/226#issuecomment-53054618\n. Yeah, this is the same as #200, closing in favor of a solution there.\n. welp, this is going to be complicated since plugins are pretty sketchy right now and plugins don't have a concept of uninstalling.\n. See #282 \n. @benvinegar thoughts on this? We don't have any support yet for removing our polyfills.\n. To maintain existing behavior, I'd prefer then to have Raven.debug default to true, and we can be explicit to disable it.\n\nThen we can change this behavior with a larger version bump and mention it in the changelog.\nHow does that sound?\n. Thanks! :cake:\n. I already fixed this in master. See: 3933cb45d2def2880d29fbb3471483a216b73dd7\n. Yeah, I explicitly do not package up plugins with bower. I don't use bower, so I don't know how to do it.\nIf you have a solution, I'd be open to it. The main thing is that I don't want to include every plugin when you install raven with bower. You should choose which you want, and I don't know how to accomplish this with bower outside of individual repositories for each plugin. So that may be what needs to be done.\n. And to answer the other question, there shouldn't be any issue or conflict when using multiple plugins together.\n. Closing in favor of #282 \n. Do you think this can just be better solved by not allowing Raven.config() to be called twice in general? Instead of specific to the angular plugin.\n. No no, sorry, I meant if we moved this logic into src/raven.js itself. Then we wouldn't have to change the angular plugin at all and everybody would benefit.\nI think calling Raven.config() twice should either raise an exception or log something to console.\n. Awesome! Thanks for the contribution! :cake:\n. @zubairov This is very typically your code that is broken. Raven is just monkey patching and wrapping your code, but this monkey patch sometimes makes it look like the culprit is Raven itself when it's coming from the function it's calling.\nLet me know if you can prove otherwise, but I'm pretty confident this is a bug on your end and not with Raven.\n. Also see: #200\n. @jeppebemad Yeah, I should add these into our actual documentation. :) Thanks for the nudge.\n. I'll accept a pull request for this. I'm not an Angular user, so I'm probably not the best person to document this.\nIt can go right in the angular.js plugin file I think at the moment since docs don't really have a section for documenting plugins yet.\n. @jpw Yeah, you should just be concatenating with a newline. And really, if you're concatenating our minified JS, the source map declaration doesn't even make sense.\n. Can you run this against the unminified raven.js ? Also, is this somewhere that I can see and reproduce?\nThanks.\n. Actually, I'm guessing it's just simply this:\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L235\nWhat browser is this happening in?\n. I'm reading random thing on the internet that are suggesting that instanceof in general is not that great. I'll see another way to check if it's an Error object by feature detection.\n. Interesting... that seems to be a bug in Chrome. I run the beta builds and it doesn't error like that. Neither does Firefox. :/\nThat's especially weird because in your case... e is an Error. I was expecting you to be passing something weird into captureException explicitly or something.\nEdit: Ran in Chrome Version 37.0.2062.58 beta fwiw and just returns true as expected.\n. @jpw So this is really messed up and reinforces that I think it's a bug in Chrome, or something on your page that's overriding the Error object.\nFor example, this is what's happening: 1 instanceof {} The error is stemming from the fact that Error itself isn't a function.\nCan you do a console.log(Error) and see what you get?\n. Oh man, don't do that! That'll probably cause you all sorts of problems. ;)\nEither way, I got a better isError check out of it anyways.\n. Can you back out the changes made to the dist/ folder please?\n. Thanks. :) Lemme review this later and I'll get back with you. At first glance, this seems reasonable though.\n. @robinwassen TraceKit is unmaintained, so it's purely vendorized into our project. We already have a ton of modifications to it.\n. @vperron Thanks. :) :cake:\n. Actually, yes. :) You can do this with raven.\nSee: https://github.com/getsentry/raven-python/blob/master/raven/contrib/django/urls.py\nJust include these urls into your project somewhere.\n. If your DSN was something like:\nhttp://key@sentry.example.com/2\nChange it to:\nhttp://key@<your Django url>/2\nDoes that make sense?\n. Yeah, this is fair. The reason is because the url matching and stuff depend on fields that come from the Error object itself. They just don't apply to plain messages. :)\n. These shouldn't really be touched. So they're sorta intentionally undocumented and hidden.\nBut for reference:\n- fetchContext is to enable raven/TraceKit fetching the source files locally. Usually unneeded.\n- linesOfContext is how many lines to capture surrounding the offending frame. Only applicable when fetchContext is enabled.\n- collectWindowErrors to enable/disable window.onerror collection.\n. Works for me! :cake:\n. @robinwassen I'm working on more than just that. We plan on extracting the message out into the original stack trace. Since having a long message with a stack trace shoved into it is still useless.\n. Angular sucks in the way they do this, btw. So this will be a pain. Will try and do this for the next version since it's a pretty big deal.\n. Makes sense. I'll add an option for this, unless you want to send a pull request in the meantime. :)\n. We already maintain our own fork in vendor/TraceKit/tracekit.js. The upstream is not maintained anymore.\n. @robinwassen @joostdevries to be fair, I don't personally test this in IE, but we've definitely collected errors from IE8+. Can you pinpoint what the issue is?\nAnd from what I've seen, TraceKit technically was compatible down to like, IE5.5. Though I've literally never tried that. I'd like to personally strip TraceKit down and remove all of those compatibility shims and just make it exclusively IE8+.\n. I don't know. :) If someone can get me a fixture or something to test with, I'd be happy to look into what the issue is.\n. Closing due to lack of information to debug. @joostdevries If you come across a test case or a fixture, I'd be happy to take a look. Until this, not much I can do.\n. Can you add a trivial test for this? And how do you feel about the name maxMessageLength instead? Seems more descriptive than truncateLength. Truncating what?\nAnd if you're feeling really adventurous, an addition to the docs would wrap it all up. :) If not, no big deal, I'll add it.\n. Other than that, looks good to me. Except hte commit message now reflects the old config name. :) And I'll pull this.\n. Awesome, thank you. :)\n:cake:\n. The server has a hard limit of 1000 chars, but realistically, if you're sending a 1000 char message, you're likely doing something wrong. Like Angular's case.\n. Merging with #243 since the solution isn't really to allow 1000 char messages, it's to fix Angular's shitty behavior. In practice outside Angular, a 1000 char message just doesn't make sense.\n. So what's the resolution here? We have to use arguments.caller and I really really really disagree with this even being removed. It makes certain tools that introspect the call stack really difficult.\n. Yeah, that's exactly it. The plugin monkey patches certain things so it can collect things like that. Without using the jquery plugin, that error would propagate up to window.onerror which is not great. That's also why you see raven.js inside that stack. Because we've monkey patched ourselves in there.\n. Closing becasue this is a non-issue.\n. Yeah, feel free to submit it to this repository. Our version of TraceKit has diverged quite a bit and the original is not maintained anymore.\nPlease see: http://raven-js.readthedocs.org/en/latest/contributing/index.html#contributing-back-code :)\n. This should be resolved with #252 \n. There are absolutely config values that are functions. And RegExp objects.\ndataCallback and shouldSendCallback are functions.\nignoreErrors, ignoreUrls, whitelistUrls, and includePaths are RegExp.\n. So why don't we do this with something other than globalOptions? We could just introduce something like, extraOptions and let people fetch that.\nBut at that point, why not just do like:\njavascript\nRaven.config().extraOptions = {foo: 'bar'}\nOr I'm missing the exact use case here.\n. I mean, it's not super super great, but if it's just a workaround for now, sure. Wouldn't be a bad idea though to come up with a better supported solution.\n. Just throwing this out there for discussion? Is it a bad idea to use just a magic global for this? Or is that not a great idea.\nI'm imagining a general \"logging config\" or something like exists in other languages.\nI also don't write JavaScript  much, which is why I'm asking. This just looks and feels really sketchy and I'm not sure of the best practices.\n. That's fair. I'd like to have more attention into plugins in general.\nIf this solves the immediate issue you have, I'm ok with it since it doesn't change anything in raven.js itself and is purely isolated to the console plugin which very few people (afaik) use.\nI'd be very open to seeing a proposal for a new setup going forward.\n. @dancrumb One last thing, can you rebase and squash these commits? You now have 4 extraneous commits that'll get merged with this. :)\n. @dancrumb Just waiting on a rebase/squash here and it should be good to go.\n. Seems reasonable. Would really like some tests for these cases though.\n. We also put together this, fwiw: https://github.com/defunctzombie/browser-stacks\n. What's the worst that can happen?\n. :confused: If this is all it takes to make browserify happy, sure.\nThere was already https://www.npmjs.org/package/raven-js on npm. Is that a thing that should be maintained? Do things use npm to install this? Literally no idea how JavaScript works anymore.\n. \n. @hugomrdias I can cut a new release later.\n. Raven already noops if you pass a falsey DSN. Is there something else this is doing for Angular?\n. See: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L63\n. I'm going to commandeer this and update. Will get in for 1.2.\nSorry for taking so long on this. :(\n. To be clear, these should have always been merge. I'm just going to make Raven.userContext({}) and whatnot always do merge. And deprecate Raven.setUserContext() to remove in 2.0.\n. Thanks, but you missed the deprecation: https://github.com/getsentry/raven-js/blob/1.1.16/src/raven.js#L329 I didn't break anything.\n. So don't install it from npm. Not sure what you're asking me to do. Would you like to me to update the documentation? The code is not an issue here.\n. This isn't even my repository and have no immediate intent on maintaining it. I have no idea how browser side stuff uses npm so I have no context on how to manage it properly.\nIf somebody would like to step up and help with that, I'd be happy. But until then, it's unmaintained.\n. Also worth noting, that is also published from a fork at https://github.com/defunctzombie/raven-js\n. I have permission to the repository, I just don't know what to do with it. Feel free to submit a pull request along with some documentation for this process so I have information to make a judgement call.\n. See: #183 \n. Closing in favor of #183 \n. So this does change behavior though. window.Raven no longer exists in the AMD loader path. This went back and forth a couple times and settled on it needing to be that way. I'll dig up the related tickets.\n. Just check out the commit history for this file and you'll see the back and forth:\nhttps://github.com/getsentry/raven-js/commits/master/template/_footer.js\nYou can remove the global yourself easily with Raven.noConflict().\n. Specifcally https://github.com/getsentry/raven-js/commit/190d9e6443ecd06b48b7a48a14f51297bd3fb25f is the commit that brought it back to being a global, to support plugins easier.\n. @christophercliff Did you close this on purpose?\n. How so? I'll take the module.exports = Raven approach. I just didn't want to remove the global.\n. Like I've said, I'm open to somebody proposing a better solution. I don't use any of these tools personally so it's a bit foreign to me.\u00a0--\nSent from Mailbox\nOn Fri, Sep 12, 2014 at 2:28 PM, Christopher Cliff\nnotifications@github.com wrote:\n\nIf the global must stay, I'd be happy if you left it as-is and just published every release to npm.\nMaybe a crazy idea: rewrite as CommonJS and use a build tool like webpack to generate the UMD-compatible files for distribution. You could avoid some of these manual compatibility woes.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/pull/259#issuecomment-55410681\n. I can test this later. That seems sorta sane. :) Still gross, but if it works... :shipit:\n. That's literally the point of debug. If you don't want the message, set debug to false. In normal cases, people would like to know that something is disabled. That's why it's only done when debug is true.\n. It was done that way for backwards compatibility since people expect that. I'll change it in 1.2.\n. raven-js should not use your secret key. That's extremely insecure.\n\nThe issue is that your request isn't attaching an Origin or Referer header, so its' falling back to the secret key auth. This was not very pretty in 6.4.4, but in master, it should more explicitly tell you that.\nFeel free to upgrade your Sentry to master. It's what we run on app.getsentry.com.\nI can help you try and figure out why your Origin and Referer header isn't getting attached to your request though.\n. Usually the first guess is that you're making a request across protocols. So maybe your page is https and your DSN is using http. Or vice-versa.\nCan you show me the request that's being attempted?\n. Weird.. so it sent your cookies not not a Referer. It seems that I can't access this louiep.restlessthinker.com to test personally. Is there a way that I can?\n. welp\nThanks. :cake: :sparkles:\n. @matghaleb I know basically nothing about promises in jQuery, but is there a lower level primitive that we can patch here instead that gives us more coverage over other events too possibly?\n. Like, if we can say, automatically patch all promises, no matter if they're from an XHR request or something else.\n. We should definitely be able to patch this stuff: https://github.com/jquery/jquery/blob/master/src/deferred.js\n. We should be able to patch jQuery.Deferred and do something. Is my guess.\n. English is hard.\n. @matghaleb Is it possible to supply a test case for this? Even if it's a jsfiddle or something functional.\nThis is a very highly used plugin and I'd be afraid of breaking it without actually testing it.\n. Hey @ebuildy,\nGood news! We have plugins for both of those. https://github.com/getsentry/sentry-github and https://github.com/neilalbrock/sentry-bitbucket\nWe don't automatically create issues, but this adds a button to do it easily. There are many reasons why we don't automatically create issues. There is a huge opportunity for spamming things.\n. No worries. :) And if you're using getsentry.com, we already have both of those installed. You just need to enable them for your project.\n. I need to figure out what this even looks like since plugins are very gross at the moment.\n. Closing in favor of #282 \n. Interesting. I'll look into this.\u00a0\n--Matt Robenolt\n@mattrobenolt\nOn Tue, Oct 21, 2014 at 4:09 AM, Alejandro notifications@github.com\nwrote:\n\nI'm using chrome and trying to trace an agular error and the first line is:\n    at new ProjectsController (http://127.0.0.1:9001/js/app.js?v=1413888176794:14710:7)\nThere are morelines that work correctly but this one (the first) is ignored when submiting the error to sentry.\nI've been checking the computeStackTraceFromStackProp function and I see that:\n    chrome = /^\\s_at (?:((?:[object object])?\\S+(?: [as \\S+])?) )?(?((?:file|https?|chrome-extension):._?):(\\d+)(?::(\\d+))?)?\\s*$/i\n    chrome.exec(\"    at new ProjectsController (http://127.0.0.1:9001/js/app.js?v=1413888176794:14710:7)\")\ndoesn't recognize the spaces, if I remove the \"new\" word it works properly.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/271\n. @vitalybe We have a version of TraceKit vendorized in that has changed drastically. The mainline is not supported or maintained.\n\nDo you mind submitting the patch here into ours?\n. @vitalybe fwiw, here's our vendorized version: https://github.com/getsentry/raven-js/blob/master/vendor/TraceKit/tracekit.js The same patch should apply.\n. Hmm, after testing this, our regular expression is definitely different than what is used in the original issue.\n``` javascript\n\nvar chrome = /^\\sat (.+?) ?(?((?:file|https?|chrome-extension):.?):(\\d+)(?::(\\d+))?)?\\s*$/i\nundefined\nchrome.exec('    at new ProjectsController (http://127.0.0.1:9001/js/app.js?v=1413888176794:14710:7)')\n[ '    at new ProjectsController (http://127.0.0.1:9001/js/app.js?v=1413888176794:14710:7)',\n  'new ProjectsController',\n  'http://127.0.0.1:9001/js/app.js?v=1413888176794',\n  '14710',\n  '7',\n  index: 0,\n  input: '    at new ProjectsController (http://127.0.0.1:9001/js/app.js?v=1413888176794:14710:7)' ]\n```\n\nThis appears to parse the line correctly.\n. Ohh, turns out this is in master to fix some issues with angular which came from #238.\nClosing this since that PR seems to have fixed this case as well.\n. @cdutson This is likely a bug. I'll look into this. Levels are a pretty underutilized thing, so it doesn't see much attention. :)\n. Let me know if this is still a problem. #342 seems to indicate that it's not.\n. That error looks like it's actually being raised by angular. And I have no idea what that means. I also don't use Coffeescript so I don't really know what that code mean.\nI have no idea how this could be erroring though. Here's the source: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L284-L288\n(It says setUserContext but setUser is just an alias for that for compatibility. See: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L333)\nWhat version of raven.js are you using?\n. @andrewboni What happens when you just do it wiht normal JavaScript in your console?\nLike, literally type in:  Raven.setUser({email: 'foo@example.com', firstName: 'Joe', lastName: 'Schmoe', project: 'foo'});?\nIf that doesn't work, what do you get for:\nconsole.log(''+Raven.setUser)\n. @andrewboni Yeah, that's 100% right. So I'm not sure what you're doing. :)\n. Closing becuase this isn't a raven issue. Seems like something else.\n. @nicbou There's no documentation because it was slapped in to solve one person's request. I don't really know what all it'd be for yet, so it's not something I'm recommending using yet. It will get documented when it has more value to it.\nWhat were you looking into it for? Just out of curiosity.\n. @nicbou And that's the problem, that's not what Raven.debug does, but it should do this in the future. This is why it's not documented since it doesn't really do much yet. Ideally it'd cover the full reporting, just noops at the end and doesn't actually send anything.\n. @nicbou Also, the preferred way to disable it entirely for debugging is to pass a falsey DSN through Raven.config() and that'll noop everything.\nSo you can do like, Raven.config('') or Raven.config(false)\n. @pkaminski Is this not 1.1.6? I don't remember ever explicitly pushing versions to bower.\n. 1.1.17 was released today.\n. Whoa. I didn't know this existed.\nIn what scenario were you not getting those headers sent? I've seen it from file://.\n. Is it possible that you were crossing the http/https boundary?\nLike, if your page is http and you're trying to log to https, I think that'd fail to send the headers.\nFor app.getsentry.com, we recommend using a protocol relative DSN, like:  Raven.config('//key@app.getsentry.com/id').\n. @RestlessThinker this is definitely a good addition, just under normal situations, it shouldn't be needed. :)\nI've had this issue with people when they tried to use PhoneGap and other weird environments. Hopefully this helps them out.\n. Can you not just call Raven.uninstall(), then Raven.config(...).install() again?\n. You could actually just chain all of those and I assume it'd work. I've never tested this though.\nRaven.uninstall().config(...).install() should do what you're asking for.\n. Ah, I see. Yeah, we'd have to effectively have a reset() to reset the state back to original.\n. I've given this the 2.0 milestone so we can solve this in a way that makes sense there.\n. Can you detect if the user is offline?\nIf so, it wouldn't be impossible to collect events and queue them up. When the user gets back online, send them through Raven.captureException again.\nI can probably help with how that'd work or add a hook in to help this.\n. Yeah, lemme think about this. I think there's a nice way that we can either just support this automatically in raven-js, or provide a hook to do it. I think that's fair.\n. Design decision needed. :)\n. It might be better if we remove the test explicitly for this, and we call reset() between each test instead of the way it's done now. :)  Then every test will implicitly be using reset() instead of the shitty way it's done.\n. I'm going to punt on this for now. Now that I've thought about it, this is complicated with monkey patching. Each plugin would need to provide it's own uninstall method to unravel it's patches.\nI just all around don't think this is a good idea.\nIf anything, I think I need to remove Raven.uninstall() since I can't see how we'd ever do this correctly and this is kinda misleading.\nThanks for the contribution, but if anything, this will need to wait for 2.0 to rethink how we could do this better. We've just kind of cornered ourselves into a mess with how things are structured now. :(\nFeel free to reopen if I'm missing some context or something that can be done that solves all the problems without creating a mess.\n. Thanks. :cake: \n. How does this work in non-browserify scenarios? Say, including as a <script> tag, or through require.js?\n. They are automatically loaded, but noop'd until Raven is configured/installed.\n. The problem is we need to covery many use cases:\n- A nice combined build suitable for a <script> tag. I personally like this since it's the most versatile and easy to get up and running. I also don't personally use these fancy package managers and whatnot.\n- Browserify\n- Normal AMD style loader\n- Installing from bower\n- Installing from npm\n- CommonJS\nI understand personally 2 of these cases. <script> because lol JavaScript used to be easy, and require.js (AMD) which has been around for a long time.\n. Take a look at: https://github.com/getsentry/raven-js/blob/master/template/_footer.js for what raven core needs to support. I'd imagine this all needs to carry over into plugins and needing to support somehow all of these cases as well.\n. I think a good first step is providing a plugin interface that Raven understands, with the suggested install/uninstall methods. We can convert the plugins over to that. Then worry about module loading and whatnot after.\nAnother aspect I'm very cognizant of is file size. I try very very hard to keep raven as small as possible, and keep in mind how things will get minified, and compare gzipped sizes.\nSo I like to keep the public APIs small, since public APIs cannot get minified and contribute to overall size. :)\n. @BYK Any opinions? Disqus has switched over to using raven.js through bower now, and through doing that has lost the plugins. I think it's bower + require.js?\nSo curious if there has been any thought or plans on how to make this work.\n. In the case of browserify, I found out, there literally is no window object at all. It mutates the JavaScript to actually remove any attempt at using window at compile time.\n. @terinjokes Then I was misinformed. We had lots of issues checking for window.JSON because that didn't work.\nSee: https://github.com/getsentry/raven-js/pull/261\nI've literally never used browserify, fwiw. I can't keep track of these things, so there is some amount of trust that people who use this are fixing bugs that affect them. :)\n. Thanks. :cake:\n. Closing this in favor of modifications I'm going to make to #255.\n. Hey @oliversong, thanks for the contribution. I chose to implement this as a global getContext() which yields a copy of the entire context, which includes all of these.\nSo you could do something like: Raven.getContext().tags to get the tags, etc.\n. So... I don't know everything here, but I'm pretty sure this will break browserify.\nIn what context did this break for you? Browserify does not let you use window.\n@clayzermk1?\n. Wait, yeah, this 100% won't work. wtf\n. We have to replace these with explicit typeof checks instead of using isObject.\n. To avoid the ReferenceError. Ugh.\n. @vitalybe How's f6e8cbe47671ab3ab3a3e4633d9567501c5088af look?\n. If module existed, it wouldn't fail. This will 100% fail with a ReferenceError if it was left undefined. Which is why I needed to replace it with explicit typeof checks and can't use isObject.\nDid I mention that I hate JavaScript before? :+1:\n. lol Jesus.\nSerious question here because I don't work in this space: why isn't there just a copy/paste thing that every library does? We've gone back and forth on this like, 10 times now.\n. I agree with this to not break backwards compatibility.\n. Yeah, we have a heavily modified TraceKit since we were modifying too much and it's abandoned.\nDon't run grunt dist. There's a lot of floating stuff in master that needs to be addressed before cutting a new release. A lot of minor changes that touch lots of things.\nWith that said, can you just provide a reference stack trace so I can see exactly what it looks like? The diff itself seems reasonable. I just want to personally see what it's filtering out now.\n. Also, fwiw, our regex has been loosened up to catch more stuff than TraceKit's does. Their looks more complex, but we stripped it down so it wasn't as rigid. I'd err on the side of capturing more here.\n. Awesome, that makes sense to me. A PR would be appreciated. :+1:\n. Hmm, in the example you posted, both the old and new fail since the regular expression assumes you'll get a fully qualified url, not just a path.\nSo it doesn't match lib/require.js:1663:33 unless you just redacted for the public.\nBUT, does Chrome dump a full url for the at script.js? Like, will it actually be at http://example.com/script.js in the wild?\n. It still doesn't even match:  at http://example.com/script.js for me.\nI can look into this and match the case, but something's not adding up here. :) It sounds like you have it working somehow.\n. Ah, ok. Yeah, that works now. :)\n. fwiw, the patch itself is fine. Just not a fan of the test since it'll be brittle. Ideally at some point, I'd like to do actual browser testing and let the test suite run in FF, IE, etc. This will be problematic.\nI'd rather test over a fixture with a hardcoded stack trace as a string.\n. If you're comfortable with a: $ git commit -a --amend; git push -f, I'd personally prefer that. But it's not a big deal.\n. Boom, I like this much better. :)\nNow there's no excuse for other stack trace manipulations to not write tests!\nThanks! :cake: :sparkles: \n. @skovhus Yeah, that is true.\nAre you suggesting that it's problematic since script error is too general and may catch other things not related?\nI was going to change it to this, but I see your point.\n``` diff\ndiff --git a/src/raven.js b/src/raven.js\nindex 6128169..d7bbbcb 100644\n--- a/src/raven.js\n+++ b/src/raven.js\n@@ -76,12 +76,12 @@ var Raven = {\n     // \"Script error.\" is hard coded into browsers for errors that it can't read.\n     // this is the result of a script being pulled in from an external domain and CORS.\n\n\nglobalOptions.ignoreErrors.push('Script error.');\n\nglobalOptions.ignoreErrors.push('Script error');\n\n// Other variants of external script errors:\nglobalOptions.ignoreErrors.push('Javascript error: Script error on line 0');\nglobalOptions.ignoreErrors.push('Javascript error: Script error. on line 0');\n// Variants include:\n//   Script error.\n//   Script error\n//   Javascript error: Script error on line 0\n//   Javascript error: Script error. on line 0\nglobalOptions.ignoreErrors.push('script error'); // join regexp rules into one big rule\n globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);\n\n```\n. Fixed with #292 \n. Looks good to me. :cake: :sparkles:\n. I think the idea is more-or-less that we can better guarantee data is sent instead of being aborted or waiting to hear back from Sentry if we're in the middle of sending something.\n\n\nIt's also, IMO, a better API than loading a fake image that we do nothing with.\nI'd at least like to play with it and see if it's worth it or not.\n. Also... actually, sendBeacon uses a POST method. This might be useful since we have lots of limitations with a GET because querystring length.\nAnd XHR based POST has to deal with CORS. I assume sendBeacon is not subject to CORS since it's just fire and forget.\n. With that said, I'm open to a patch if you'd like to attempt this so we can see what it looks like. :)\n. Not sure if that's accurate.\nAccording to: http://www.w3.org/TR/beacon/#sec-sendBeacon-method, it states:\n\nThe User Agent SHOULD transmit data at the earliest available opportunity, but MAY prioritize the transmission of data lower compared to other network traffic. The User Agent SHOULD make a best effort attempt to eventually transmit the data.\n\nThis is obviously testable. But I don't think it's tied to only sending data on unload. I think that's just a common use case to do so and a common pattern for other beacons.\n. Awesome. Thanks! :cake: :sparkles: \n. There are many factors involved and a lot of times what we get at window.onerror is junk which gets thrown away since it's useless.\nIf you can show me a demo/test page, I'll tell you exactly why it's being ignored. It's hard to just guess without actually seeing something.\n. See a similar ticket: https://github.com/getsentry/raven-js/issues/211\nYeah, in the meantime, it can be documented.\n. Yeah, I plan on just documenting a way to do this for those that need it.\nI'd rather not include it in core since most people don't need it, unlike how we collect data on the server side.\nYou can hook in a processor through the dataCallback config parameter. It's a chance to mutate the final object before it's sent off.\n. Ah, cool. I should definitely port the one over from python and document it for inclusion on your own, or distribute as a plugin or something.\n. You can just use the shouldSendCallback and return false all the time. And log from there if you need to.\nSo like:\njavascript\nRaven.config(..., {shouldSendCallback: function(data) {\n  console.log(data);\n  return false;\n});\n. The error is coming from your code, not Raven. It just looks like raven since we've wrapped your code and are just bubbling up the error.\nSee: #200\n. This happens when you're talking to Sentry on a different protocol (http vs https).\nIf your site is http, you must talk to Sentry over http. If it's https, you must talk over https.\nBrowsers won't send a Referer header when stepping across this barrier. We recommend just using a protocol relative DNS:\nRaven.config('//abc:123@example.com/1')\n. Also, no, there won't be a 6.4.5. The next release will be 7.0.\n. Nope, but this issue won't be fixed by 7.0. It's just how browsers work.\n. Ohhh, because with * we allow it to work even without a Referer header.\nI forgot about that.\n. I assume #200 would solve this as well, right? Since we'd just shift everything down the stack.\n. This should be irrelevant now as well.\n. In theory, you'd just accept the packet being sent by raven-js and you can use a DSN that points to your server instead.\nWhat are you trying to log into?\n. You could hook into one of the callbacks before the data is sent over to Sentry in that case.\nshouldSendCallback is the last thing right before the packet is sent over the wire to the server, so you could take the data from here and send it somewhere else if you wanted.\nSee: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L675-L677\nWould that work?\n. This seems reasonable.\nThough, I'm mostly curious about the use-case for this. In what scenario do you need/want to check this status?\n. Other than those couple comments, this seems reasonable.\n. Seems reasonable to me. Thanks. :cake: :sparkles:\n. Can you show me the request that is being sent across the network to the Sentry server?\n. wtf, does Ember do something weird to the Error object?\nCan you set up a page to recreate this? I'm not an Ember user at all, but if I can see what's going on, I could probably fix.\n. You can use: //2e498f35698341f38d53a766c5370106@app.getsentry.com/4291\nIt's for a test account.\n. I'm not entirely sure. :) I'd need to see it. I don't use any of those tools personally.\n. Yeah, no problem. :) I'd like to track down that issue.\n. It's not for source maps, it's just for fetching the actual source code for the lines to send over with fetchContext. Normally this is done with the Sentry server, but this is required in sitations where the app is running on a mobile device or something that the Sentry server can't access to fetch the sources itself.\n. But yes, I could add this to the docs. That's fair. :)\n. Wanna add a test for this? :)\n. Thanks, homie. :cake:\n. @Myztiq We maintain our own fork, and TraceKit upstream is unmaintained.\n. I'm going to assume this has been fixed since we've pulled in latest TraceKit recently.\n. You need to revert that change where you re-compiled a distribution. That makes this really hard to review. See: https://raven-js.readthedocs.org/en/latest/contributing/index.html#contributing-back-code\nWhat problem is this trying to solve that shouldSendCallback can't solve already?\n. So the problem that we have with this is it breaks backwards compatibility. The API of shouldSendCallback has now changed.\nI'm not opposed to this change in general, but I don't want to break existing installations.\nThe normal use case is what we actually document:\njavascript\n    shouldSendCallback: function(data) {\n        // only send 10% of errors\n        var sampleRate = 10;\n        return (Math.random() * 100 <= sampleRate);\n    }\nAnd this change breaks that.\n. wtf I remember doing this specifically for a reason... and now it doesn't make sense. Going to look into this. Maybe I was just crazy when I did that or something, but at first glance this seems legit.\n. The tests do run on Travis. For some reason, it doesn't appear to be running for pull requests though...\n. This should be irrelevant now since we don't call TraceKit.rethrow anymore.\n. I'll take this patch, but this isn't the reason why it was never updated on npm. It wasn't updated on npm because I didn't publish it there in the first place and don't maintain it. So it got out of sync. I still don't have confidence that I can support the release on npm, but I guess I'll need to suck it up and try. :)\n. I guess I also don't use grunt release. Here are the notes I use: https://raven-js.readthedocs.org/en/latest/contributing/index.html#releasing-new-version :)\nI should look at this again and see why I didn't like doing it from grunt. I think I just wasn't super happy with the behavior. Either way, I'd +1 if it'll update the bower.json automatically for me.\n. Closing this since I don't even use grunt release anymore.\n. Because this only works in Chrome. And since all of the code supporting this already is based on parsing stacks with regular expressions, it's less code than supporting a V8 specific way.\nAlso, Error.prepareStackTrace is a global callback. It'll conflict if something else tries to utilize it, which is actually problematic.\n. Thanks! :cake:\n. It should be a complete noop if it's not configured. Are you able to reproduce this in a way that I can check it out?\n. You can call config with a falsey DSN value. So an empty string or the value false.\nRaven.config(false).install() will succeed, but noop the inner workings so it doesn't actually report.\n. Ohhh, I can see how that'd happen. :( I'll come up with something to fix that then.\n. @marcelboettcher Are you using the console plugin too?\n. What specifically from TraceKit are you looking for? Because afaik, we were up to date with TraceKit and I periodically pull in changes when I see them, but TraceKit hasn't had any activity in a long time.\n. My assumption at this point is that some of the changes that we've tacked on top of TraceKit have broken it. I'll look into this tonight and see if I can trace it down. Thanks for looking into this.\n. > Could you please update the vendored TraceKit?\nI plan on it, but this may be a non-trivial task. Hoping to have more time to investigate next week.\n. We've updated TraceKit relatively recently. Please reopen if this is still an issue.\n. This has been done as of 2.0. :cake:\n. I'm going to open a separate ticket regarding raven-node possibly merging in since that's a separate topic and not sure yet if we still think that's a good idea or not.\n. The best way I've seen is the way I do it inside raven.js: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L381-L386\nNot sure the pros/cons though. :)\n. fwiw, I think doing this.stack = new Error(this.message).stack is not the best. You're also not carrying over the name. Also, the stack attribute is typically lazily evaluated. So by initializing it here, you're forcing it to be evaluated. And lastly, this will add an extra frame to your stack trace.\n. This should have been solved with https://github.com/getsentry/raven-js/pull/268\n. Yeah, I agree this is confusing. Do you know how I'd do this in Readthedocs? Ideally, yes, I'd make latest be the latest tagged release, and not master.\n. Alright, then I'll figure out what needs to be done.\n. I've released 1.1.17, so that fixes this immediate issue. I'm going to open another to figure out a better way to publish docs though to prevent this from happening again.\n. This patch is ok, but I don't want to hastily add a global pluginOptions key yet without thinking what this is going to be long term for customizing plugins.\nSee also #323 \n. This is a dupe of #391 and we're basically just blocked on a DDN for 2.0.\n. We don't push to RTD anymore.\n. So I think we should just handle this inside captureException honestly. In raven-node we just do: https://github.com/getsentry/raven-node/blob/master/lib/client.js#L115-L121\nI think that'd be acceptable here as well.\n. I don't have much context about Ember, but since this is isolated to a plugin, it looks fine. I assume someone else will complain if this isn't quite right. :) But seems legit.\n. Yeah, I'm not entirely sure how you'd get that error. If you can provide a failing test case or something, I'd happily take a look.\nWhat you pointed to is wrapped in a try/catch as @benvinegar said: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L406-L410\nSo you should be able to put in complete garbage for a DSN and still get a RavenConfigError back.\nUntil this can be reproduced with something in jsfiddle or a test case, I'm closing this as invalid.\n. For Angular, you need to provide the RavenConfig variable.  See: https://github.com/getsentry/raven-js/issues/235\nIf those instructions work for you, I'll add those into our docs.\nFor everything else, it should get monkey patched and magic will happen.\n. If you're using angular, you'd only need to configure it through the angular hook. You wouldn't need to call Raven.config(...).install() yourself.\nIf you look at the source, the plugin will do that for you if you just provide RavenConfig: https://github.com/getsentry/raven-js/blob/master/plugins/angular.js#L25\nBut to be honest, I know very little about angular personally, which is why I'm not 100% sure how this works. :)\n. So some clarification on the difference:\nWe monkey patch to catch actual exceptions raised from your code. Catching these things from XHR responses aren't exceptions, they're semantic meaning applied to the response code of the http response.\nWhat that response code means to you, is different to others. So to uniformly catch them, I think is incorrect. For example, jQuery reports anything not a 2xx as an error. I don't think every single 400 or 404 or 403 or 503, etc should be reported automatically.\nLike I said, in #204, we could absolutely do this, but it'd have to be an opt-in thing.\n. Ah, damn. Any idea why the linter didn't pick that up in the first place?\n. Ok, apparently jshint does not check for that by default. :/ http://jslinterrors.com/extra-comma Added.\n. Also, just verified, and this would have only affected the unminified builds. Uglify does the right thing and fixed the trailing comma when minifying for the raven.min.js build.\nGoing to push a version bump for this regardless, thanks. :cake: :sparkles:\n. This seems legit.\nFrom all of my understanding, I'm not sure new Image() in this context could introduce a bug since we never append the element to the DOM.\nBut with that said, all sources are saying that new Image() is just super old and to just use document.createElement('img') instead, so that works for me.\nFor posterity, this is my best finding on this: https://stackoverflow.com/questions/6241716/is-there-a-difference-between-new-image-and-document-createelementimg\nThanks! :cake: :sparkles:\n. Crap, this did break tests though. :/ I have no idea why Travis isn't testing pull requests or I would have caught this before merging.\n. You still get cake.\n. :cake:\n. How does this relate to https://github.com/getsentry/raven-js/pull/268 ?\n. I'm not gonna lie, I'm hesitant to pull this change solely because I think all of this _footer.js stuff is wrong. It has become unwieldy and unmaintainable.\nThis is the proposed new version:\n``` javascript\n// Expose Raven to the world\nif (typeof define === 'function' && define.amd) {\n    // AMD\n    window.Raven = Raven;\n    define('raven', [], function() {\n      return Raven;\n    });\n} else if (typeof module === 'object') {\n    // browserify\n    module.exports = Raven;\n} else if (typeof exports === 'object') {\n    // CommonJS\n    exports = Raven;\n} else {\n    // Everything else\n    window.Raven = Raven;\n}\n})(\n  (function() {\n    if (typeof window !== 'undefined') {\n      return window;\n    } else {\n      return this;\n    }\n  })()\n);\n```\nIs this really how every other project works? I'm finding this hard to believe. Why is this not a solved problem that can just be copy/pasted as a whole from some other more, well established project?\n. So jQuery has four pieces that are used for it's build from what I can tell at a quick glance:\nhttps://github.com/jquery/jquery/blob/master/src/intro.js\nhttps://github.com/jquery/jquery/blob/master/src/exports/amd.js\nhttps://github.com/jquery/jquery/blob/master/src/exports/global.js\nhttps://github.com/jquery/jquery/blob/master/src/outro.js\nThis compiles together to generate:\n``` javascript\n(function( global, factory ) {\nif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require(\"jquery\")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ?\n        factory( global, true ) :\n        function( w ) {\n            if ( !w.document ) {\n                throw new Error( \"jQuery requires a window with a document\" );\n            }\n            return factory( w );\n        };\n} else {\n    factory( global );\n}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n/\n * [ Insert all of jQuery here ]\n /\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\nif ( typeof define === \"function\" && define.amd ) {\n    define( \"jquery\", [], function() {\n        return jQuery;\n    });\n}\nvar\n    // Map over jQuery in case of overwrite\n    _jQuery = window.jQuery,\n// Map over the $ in case of overwrite\n_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n    if ( window.$ === jQuery ) {\n        window.$ = _$;\n    }\nif ( deep && window.jQuery === jQuery ) {\n    window.jQuery = _jQuery;\n}\n\nreturn jQuery;\n\n};\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === strundefined ) {\n    window.jQuery = window.$ = jQuery;\n}\nreturn jQuery;\n}));\n```\nI don't know much about this stuff, but can't we just adapt what jQuery does and be done with all of this?\n. This has changed drastically in 2.0.0 since we now send data via POST.\nBut, there is still a limitation depending on your server. If you're using on-premise, it's impossible to determine, but if you're talking to our servers (app.getsentry.com), our limit as of now is 100KB for the body.\nIf the message is too large, it'll be rejected.\n@benvinegar We should add this to docs now.\n. sentry.io has a limit that is effectively arbitrary for ourselves. This limit doesn't apply and may different for anyone running Sentry on-premise. Our limit as of today is 100k, but it's possible that in the future we may increase this size.\nNow, there's no way to communicate this back to the server until it fails to make the request and is rejected. In theory, we could change the error that's kicked back to be JSON and be something like, {\"error\":413, \"limit\":100}, then trim and retry with that information it got. But this would be sorta specific to our implementation since this happens at our load balancer and not in the Sentry server itself.\nit's also worth noting that we don't deal with this in other clients nearly as often since they all gzip their payloads before transmitting, so it's very rare to cross our 100k limit. But for JavaScript, we're not able to do this easily without bloating raven-js with a gzip library. (Ironic that we can't easily gzip from a browser, huh?)\n. Ah, neat. Should be easy to change up.\n. Fixed with #349\n. lol, yeah, definitely a bug.\n. There's nothing that is preventing Raven from sending a Cookie as long as the domain is correct, and what you're suggesting, the domains do match. So unless you're specifying the Cookie to only get sent to a specific path, I don't see why this wouldn't work, and without seeing this in practice, I'm not sure what else I can suggest. :(\nBut inherently, we're not doing anything that wouldn't be covered by normal browser security policies, and those don't prevent Cookies from being sent over images. Cookies are bound to domains and paths, so as long as those check out, it should be fine.\nIf you're still not sure, I can try to debug if you show me some example http request/responses including the Set-Cookie header from the server.\n. tbh, we need to bail on TraceKit entirely and use https://github.com/stacktracejs\nStacktrace.js has been split out into many primitives so we can pick and choose which pieces we want that do exactly that.\n. Yeah, then totally. Our frustrations are from TraceKit in the past. There are only a few things that we need out of TraceKit itself, which is why stacktrace's new stuff was more appealing. Without testing myself, it seems like we'd only need this part of it: https://github.com/stacktracejs/error-stack-parser\nSo whether this comes out of TraceKit or Stacktrace.js, we just want something that's simple and does this ugly job. :)\nI started this a long time ago, which obviously, didn't finish: https://github.com/mattrobenolt/callsite-shim\nIdeally, we'd have an API/library that facilitated that. I think a shim here is ideal since V8's implementation of CallSites are great and should exist everywhere.\nSo if I can help do that with TraceKit, I'm all for it.\n. @niemyjski I'm closing this out since there's nothing really actionable for us to do on our end. But I'm happy to continue the discussion. Feel free to reach out to me on #sentry on freenode.\n. @niemyjski Sweet, I'll check it out soon. :)\n. @dcramer thoughts? I'm initially against this idea, but I don't  have much justification for that gut reaction.\n. @vladikoff So technically, we already support this functionality with raven-python, I just remembered.\nhttps://github.com/getsentry/raven-python/blob/master/raven/contrib/django/views.py#L82-L108\nThis exposes a view in your application to act as a relay for raven-js, but it still requires a full DNS and expects the same /api/\\d+/store/ endpoint. Is there a reason that this pattern can't work for what you're doing? I'd be happy to add an endpoint like this into raven-node if it made sense.\n. I'm going to implement this as a Transport.\n. Yeah, rethrowing happens by default from captureException, and it'd be awkward to rethrow inside shouldSendCallback.\n. For context: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L249\n. I can cut a release of this. Let me review changelog today and I'll make it happen.\nAlso, this will probably be the last version that comes with an ember.js plugin bundled in. I want to figure out how to move it to http://www.emberaddons.com/ and give it better ember support.\n. Oh neat, I didn't know that existed. :) Will try and team up and see what we can do there officially. Thanks.\n. Updated to 1.1.19. :)\n. This looks awesome! I'm going to test this out later before merging.\n. @matteosimone Sorry about that, I verified this in modern Chrome/Firefox, but didn't touch it in IE. I'm going to assume it's ok since nobody suggested otherwise when I asked. :)\nThanks. :cake: \n. I'm going to implement this as a Transport.\n. Not entirely, but we do have fully pluggable transports now and you can implement this however you want. We don't have an official transport to support a proxy though.\nSee: https://github.com/getsentry/raven-js/blob/master/plugins/react-native.js for an example.\n. thx :cake: :tada:\n. I can just expose a new option, {allowScriptError: true} I still want it to be ignored by default, but that'd be the shutoff valve.\nDoes that work?\n. I guess I can just generalize it to something like, noDefaultIgnoreErrors: true then for now? Probably the simplest at this point.\n. @kylemacfarlane Totally understandable. I'll get something cut for you today. :)\n. :rage4: \n. @pkaminski do you think this is reasonable? Not sure if it'd make sense to put something in http.url as the fallback, like <unknown>.\n. Specifically, this is related to fetching the source from the client, not the server. :)\n. After my last comment, :+1:, unless @benvinegar has a major objection.\n. Oops, I'll just add it into flushRavenState(). :)\n. thx :cake: :sparkles:\n. I mostly like this idea, just not sure I like the implementation. I think there is more value we can get out of this.\nSo we have this undocumented Raven.debug thing.\nWhat if we added this console.log line into makeRequest instead?\nThen we can always do a logDebug('debug', 'sending data', data) inside makeRequest().\nI think there's value in being able to log the data being sent regardless of it being configured or not.\nDo you have any thoughts on this?\n. Also worth noting that logDebug already guards against a browser without window.console accessible.\n. @benoitg So turns out, this is a symptom of the console plugin. Not many people use that, so it doesn't see much attention. :)\nBut the console plugin ultimately is patching native console.* calls, and in our case, we're then utilizing console to log our own messages, which turns into a nice recursive thing and causing your stuff to break.\nSee #370 for the fix.\n. Hmmm... how does this work? We have explicitly raven-node to cover the use cases there.\n. Ah, lemme investigate that in a moment and see what we're doing.\n. @danse Did you get this from docs.getsentry.com?\nIf so, it seems that we lost node specific docs when we transitioned to this new site.\n/cc @mitsuhiko \n. This is good for now until we do #323.\nThanks! :cake:\n. :+1: :tada:\n. Ugh. :(\n. The iff was intentional. :( Means if and only if.\n. @benoitg Yeah, I think that's reasonable for now.\n. Seems ok to me. :+1:\n. Evaluating this as a separate issue since #323 was mostly about refactoring to use commonjs, etc. It's a much larger design decision to see if we can merge in raven-node into one big unified package.\n/cc @benvinegar \n. Hmm, could you give me information on how you triggered this? And does it happen with 1.1.19?\n. The only way I could see that happening is if you didn't call Raven.config. In there is where it gets initialized as a RegExp object.\n. Or it's some weird browser specific bug. So that information is useful. :)\n. @hughes Can you reproduce this reliably in a way that I can debug?\n. I'm really at a loss here since I can't see any way this happens unless Raven.config() doesn't succeed.\n@hughes @namxam Can you confirm what you're passing through Raven.config() ?\nThis could only happen if you passed a falsey value to Raven.config().\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L71\nThen at that point, globalOptions.includePaths will still be an Array instead of the expected RegExp object.\n. Ok, so I can reproduce that way.\nIf I don't call Raven.config() anywhere, but proceed to use Raven.captureException(...), it throws this.\nLemme see what's wrong.\n. Yeahhh, I'm seeing now. I'm going to fix tonight for sure.\nThanks for helping me track down.\n. I pushed a 1.1.21 that should fix this. My apologies. :(\n. wtf, I swear I tested this. :(\n. Hey @j15e, there are definitely bugs with Uglify's sourcemap generation.\nCan you run the offending sourcemap through http://sourcemaps.io/ ? I'm curious to see what it says.\n. Yeah, so basically those warnings mean the sourcemap mapped up the the right line, just the column was slightly off. Which is why it's a warning only.\nNow, I'm not entirely sure what's going on, but my guess is it's a bug in uglify similar to this: https://github.com/mishoo/UglifyJS2/pull/833\nThis also shouldn't be an issue with raven.js itself since we don't use any weird control characters in our source.\n. We need to move this off of Heroku one day. :)\nCan you try it again?\n. Closing this since I haven't heard anything else and no other complaints.\nFeel free to reopen if this is still an issue.\n. I'd normally say we should document this, but I'd rather leave undocumented for now until we decide on the name of the parameter, etc.\n:+1:\n. Our documentation here should be sufficient after glancing over it: https://docs.getsentry.com/hosted/clients/javascript/integrations/\nNot sure if this is still confusing, but the changes also done in #392 make it less of an issue since plugins are now installed lazily.\n. That's fair. \nQuestion: how were you attempting to use Raven to where this was confusing? If it's pulled from our CDN, this shouldn't matter since we already bundle it correctly and in the right order. \nAnd at the moment, it's pretty counter intuitive to load plugins by themselves outside of our bundled CDN versions. \nSo just curious what you were attempting to do so I have the full context. :)\n. Hmmmmm, that's a good point about the CommonJS case. That seems like a separate bug though. Would you mind opening another ticket to address that?\n. PR was merged.\n. @benvinegar shouldn't uglify remove this when compiled?\n. And/or can we get our linter to handle this?\n. > But I think it should work with/without minification, IMHO.\nAgreed, was just curious if this issue existed in the minified version, since that is the primary consumer.\n\nI'm in favor of switching to ESLint, as we've done with the main Sentry project.\n\nhttps://github.com/getsentry/raven-js/issues/386 :+1:\n. y u fail tests\n. Yeah, we can cut a new release.\n. plz to merge?\n. Thanks! :cake:\n\nUpdated to use void 0. Never seen that before...\n\nI've used it because that's what Underscore does. See: https://github.com/jashkenas/underscore/blob/6a76a31bfe7c0fdef9e5de2b0898e3ea620fdf48/underscore.js#L1324-L1326\nI'm not entirely sure the differences, but Underscore tends to have the edge cases of these things figured out and I trust them.\nThanks again for the contribution. :)\n. :+1:\n. We need to figure out how to provide configuration for plugins overall. Schedulign this for 2.0.\n. I have literally no idea what would be required in supporting this.\nFor my context, what's the use case here? And do you have any idea what would be needed?\n/cc @benvinegar \n. Hmm, it might be possible that we can add this.\nAt the moment, I'd guess the best way is with the events that are dispatched. We dispatch an event for ravenSuccess and ravenFailure. Does that help?\nI agree we can likely do something better here though, I just don't think this case has come up before.\n. https://github.com/getsentry/raven-js/issues/293 might not be a terrible option here either since iirc sendBeacon() will send in the browser async even when navigating away from the page.\n. @Dignifiedquire This isn't really a solution, but you could map them together based on event ids.\nSo the event sends along the entire data blob. https://github.com/getsentry/raven-js/blob/master/src/raven.js#L815 which has data.event_id.\nAnd you can do Raven.lastEventId()\nI've never tried to do this, but I think all the primitives are there.\nWith that said, I don't think it's unreasonable for us to provide a callback for this. We just don't at the moment. :)\n. Thanks! :cake: :tada:\n. Hmm, could you provide some more information here? I'm not sure why we'd be sending 4 identical messages, if that's what you're suggesting.\nCan you provide a link to these in getsentry.com or send over the raw data packets that are being sent?\n. Yeah, that's not enough information to debug, but I'll leave this ticket open since it's apparently an outstanding issue that I don't want to ignore.\nIf you can share more information, that'd be great or could put together something that reproduces that we could take a look at.\nThanks for the report. :) It's much appreciated.\n. This was fixed with #402 and will be in 1.3.\n. @benvinegar This seems sane to me, but I'm not 100% sure.\nThanks @jlfwong. :cake:\n. Interesting that this didn't come from the loop before it when copying all the properties over.\nThis seems reasonable to me then. I'll cut a new version of this for you. :)\n. Hmm, hey @jlfwong, so I was going to cut a release, then I noticed that this broke a test. Somehow I didn't catch this before merging.\nSo this seems to conflict with https://github.com/getsentry/raven-js/pull/130 considering there was a test to explicitly check and make sure we didn't copy prototype. Can you shed some light here possibly?\n. Also... not sure why Travis isn't running tests for Pull Requests. Then I'd have noticed this before merging. :/ Ugh.\n. I'm inclined to think we can just remove that one test and it should be ok.\n. @jlfwong Can you address my comments above please? :/\n. Thanks. That's my assumption as well.\nI'm just waiting on feedback from @benvinegar as a double check, and we'll be good here.\nThanks again. :)\n. Yeah, I'm going to review everything and will get it cut today.\n. I'm just going to leave this here since we'd much prefer to do this inside the angular plugin, but there's not a good enough hook to do it right yet.\n. @benvinegar Wanna take another look now?\n. Oh, sorry, I meant we should fix this instead of documenting bad behavior. :)\nI'd probably argue that this is just a bug and I agree that two require('Raven') calls shouldn't break things. \n. @benvinegar Related to this? https://github.com/getsentry/raven-js/blob/master/template/_footer.js#L1-L3\n. Or are you saying, that this would never get invoked twice?\n. Is this still a concern/problem now with 2.0?\n. I'll take this though. :) Thanks! :cake:\n. Oh, this is simple. Just need to make Raven.debug false by default.\nI will do this for 1.3.\n. We can do that too. It doesn't matter to me what the interface is.\n. Ok, so to summarize our conversation: We don't want to expose a massive public API (or any public API) at all to suggest that there are a ton of different random transport options.\nI also think it's slightly misleading to expose a random option useCORS. 1, because it's the wrong word. 2, because if we plan on making this the default, it'll go away soon after. So I'd rather not expose a public API at all for configuring this.\nI'd like to see a function that does the transport with no public API that we can test ourselves internally before committing to it being public for the world.\nDoes this summarize well?\n. @benvinegar I just tested locally by repurposing your react-native plugin:\n``` javascript\nfunction xhrTransport(options) {\n    var request = new XMLHttpRequest();\n    request.onreadystatechange = function (e) {\n        if (request.readyState !== 4) {\n            return;\n        }\n    if (request.status === 200) {\n        if (options.onSuccess) {\n            options.onSuccess();\n        }\n    } else {\n        if (options.onError) {\n            options.onError();\n        }\n    }\n};\n\nrequest.open('POST', options.url + '?' + urlencode(options.auth));\nrequest.send(JSON.stringify(options.data));\n\n}\n```\nAnd this worked fine in Chrome now. I'm sure we'll need to do work to detect if this is able to be done, and to use the appropriate API depending on the browser. Like the examples in here: http://www.html5rocks.com/en/tutorials/cors/\n. This has been discussed internally briefly fwiw, and I'm a bit torn.\nWe have 3 primary use cases:\n- Installing from CDN where everything just works in a <script> tag. This can be seen littered throughout our documentation and what we recommend.\n- Installing from bower (I've personally never done this before, only accepted pull requests to provide support). I also have no idea how many people do this since we don't have stats for installs.\n- Installing from npm (We do this internally for Sentry for webpack)\nSo with that said, here are some complications with our CDN stuff (which is our #1 consumer):\nWe provide versioned urls based on the raven-js version, something like: https://cdn.ravenjs.com/1.3.0/jquery,native/raven.min.js which is saying \"give me raven.js version 1.3.0, with the bundled plugins jquery, and native.\" These plugins can be mixed and matched into any permutation. So right now, they are tied to the main raven-js version, and individual plugins get versioned along with that.\nIf we switch everything to supporting commonjs, which @benvinegar is working on, this solves at least the npm case, since a module could be required like, require('raven/plugins/foo') without needing to install a separate package.\nBower, I have no idea if this would be solved with the commonjs path. My guess is it would, but I'm not familiar with that use case personally.\nSo, to summarize:\nI'm +1 to doing this where it makes sense. I don't think we can blanket apply this to all plugins, but it probably makes sense for things like angular and possible ember, or the other large frameworks we support. And for the record, at the moment, I version raven-js according to breaking changes in plugins too, just to be safe, but this means things are a bit intertwined which isn't the best, I admit. I'd personally like to see them split out, but I think there's some work that needs to be done first on our side + figure out which ones it makes sense to do this with.\n. Also, I forgot to ask, for the bower specific repositories, how does that then work with npm? Would we maintain both a repository for bower and one for npm? That seems a bit excessive imo. Could we just do the same as we're doing in here? Include both a {bower,package}.json? Or am I missing some nuance in the ecosystem that makes this less than ideal?\n. And going to assume this is dependent on https://github.com/getsentry/raven-js/issues/323\n. Hmm, I guess that's fair. I was thinking that the internal data blob's format was just that, an internal implementation.\nSomething like https://github.com/getsentry/raven-js/issues/352 would likely alleviate this issue in the future.\nSo since the deed has already been done, not sure what is actionable at this point except from saying \"sorry\". I'm trying to get us onto a better release/versioning process moving forward. (We had a ton of 1.1.x releases that would have broken semver as well), and just now started bumping 1.x instead of 1.x.y.\nThanks for the feedback, and apologies for any inconveniences. Will make sure to do better moving forward! :disappointed: \n. > but you should probably go further and properly document the data structure being passed to the callbacks, including which parts are public and which are private implementation details. Basically, it should be treated as an API (because that's effectively what it is).\nI agree 100%. I've created #417 to get this documented. :)\n. Yes, that's likely what's happening. :) Setup CORS and all will be well. \n. @benvinegar I rebased this against master since there were a bunch of conflicts. Wanna take a look now?\n. I guess a thing to consider, even with POST, is we don't have room for infinite payloads. We only have 100KB to send for the POST body.\nSo in retrospect, not sure if this is a great idea to go to Infinity. Maybe just increase it to 50?\n. Does ^1.1.19 auto update to 1.3? If so, is there one that only will do to latest 1.1.x? Becasue for the most part, I've been treating 1.x as some semi major changes. So I'd have never advised people automatically updating between those major versions without reviewing changelog which is heavily documented.\n. For context, this gets documented in two different places:\nhttps://github.com/getsentry/raven-js/blob/master/CHANGELOG.md#130\nhttps://github.com/getsentry/raven-js/releases/tag/1.3.0\nAnd for the issue at hand, this is reflected in README as well as our official docs.\nLastly, I apologize for the confusion. :( We're going to begin following semver when we drop 2.0 moving forward. We've made a few goofs since I personally was unaware of how liberal users are with dependencies. (I didn't realize it was common to bump minor revisions automatically without reviewing/testing.) Also, I never officially adhered to semver in the past and never claimed to, so that was my fault. But unfortunately, there's nothing I can do now to fix 1.3.0 since it has already been released, so I'm going to close this ticket.\n. Thanks for verifying @joaocunha. :)\nI'm not sure if we'll want to add this into raven-js core though since this window.onunhandledrejection is not a standard at all.\nI'm going to just drop some links about this topic here for reference:\nhttps://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/SRsFwwEgnUQ\nhttps://github.com/domenic/unhandled-rejections-browser-spec\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/onunhandledrejection\nhttps://codereview.chromium.org/1179113007\nI'd want to research and see if this is actually implemented by the popular Promise polyfills and if it's starting to get implemented in browsers (looks like Blink merged in support), I'll happily add some native support like we do for window.onerror. I just want to make sure the API for the callback is stable and doesn't change around.\n. Also, since it passes the promise itself through as data.promise, curious what we could extract from that and pass along as extra data.\n. @benvinegar fwiw: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L292-L293\ncaptureException falls back to just calling captureMessage already if it's not an Error object.\n. \n. This will incur an OPTIONS preflight request for sure.\n. I don't think there's anything we're going to be doing here. At least not in the nearterm.\nIf we did implement it, we'd just accept the \"token\" over the DSN like ever other client does.\nWe don't allow this for raven-js since raven-js is most typically used within a browser, which means, we don't want users to embed a private key. (the token is a private key) and we expect to rely on CORS for auth.\nIf you want to bypass CORS, you can set Allowed Hosts in Sentry to * to just accept everything. Which is basically the same thing as handing out the secret key, so I'm not sure there's much value in adding support for this now.\nIf there's another reason, feel free to re-open and we can evaluate if I'm missing something in the use case.\n. If you pass a string, rather than an Error object to captureException, it just gets funneled through Raven.captureMessage instead, to clarify the difference in behavior here.\nRaven.captureException(new Error('...')) should work just fine, and I've confirmed this.\nDo you have anything in your whitelistUrls config? My guess is it's just simply being ignored.\n. Yup. whitelistUrls gets applied to where the error is coming from. So if it's stemming from a JavaScript file, you'd need to have the CDN in there.\nAlso worth noting a weird behavior if you were tryign to test this in the Chrome dev console, if you just do Raven.captureException(new Error(..)), the filename is reported by Chrome as <anonymous>, so if this wasn't in your whitelistUrls setting, this would be filtered out.\nNot likely useful for production, but just noting it if you were trying to test that way. :)\n. I assume we could do this for React Native without triggering the OPTIONS preflight request?\n. Totally. My hunch is its ok for us to do it for React Native, but @benvinegar will need to confirm. Thanks for letting us know. :)\n. @claygriffiths #92 just added a callback so you could implement your own rate limiting or any filtering that you want.\nBut we should get something primitive in core just to prevent something as you pointed out from breaking the world.\n. lgtm, assuming this fixed some of our existing issues. Kinda hard to tell just by looking. :)\n. Do you have a preference on longer message length or default to no truncation? I'm not even sure that 1000 would cover all the Angular stuff?\n. @benvinegar Alright, it's just disabled by default now instead. I'd rather leave it in for now in case someone wants to explicitly limit it if they were using their own transport or whatever and had a limitation.\n. :+1:\n. :+1:\n. :+1:\n. :+1: :cake: :icecream: \n. This has also been backported into our stable/2.0.x branch: https://github.com/getsentry/raven-js/tree/stable/2.0.x\nSo we'll tag a 2.0.1 and push this out. Thanks!\n. Good catch. :)\nThanks! :cake: :icecream: \n. \n. Would it be worth noting that in older browsers that we don't support, Raven should still fail gracefully? It shouldn't break by including it for an IE7, browser, for example.\n. Well, we do a hard check for native browser JSON support, and this drives isSetup().\nThis check is done right before we attempt to squirt it over the network, but we can move it up right at captureException or whatever to make sure we fail right away.\n. :+1:\n. lgtm\n. :+1:\n. Shitty, but the assertion makes it more palatable. :+1:\n. This is a very unfortunate circumstance, but it's unlikely that we're going to do this unless Microsoft (or someone else) investigated and put together a list of all translation strings. Microsoft has a service to do it: https://www.microsoft.com/Language/en-US/Emt.aspx\nBut we're not going to be pinging out to this for every error message we get to check if it needs translated or not.\nSo either, Microsoft stops doing this (unlikely) or someone collects a database of translation strings that we can pair up with (also unlikely imo).\nThe closest I've found is https://github.com/ebdrup/errortoenglish which, assuming it worked, would need to be translated to python so we can do it on the server. But literally no idea how we'd keep this up to date with new versions of IE, new error messages, etc.\nSo for now, I'm going to close this as won't fix since this is a lot of complexity just for IE.\n. Should we also change this in the console plugin?\n. lgtm now. :rage4: \n. :+1:\n. :shipit: \n. Ship it, big guy.\n. Hmm, so this was changed as a part of the switch to eslint.\nI just ran changed this back to normalized['function'] locally, and eslint now yells at me.\n/Users/matt/code/getsentry/raven-js/src/raven.js\n  794:39  error  [\"function\"] is better written in dot notation  dot-notation\n@benvinegar thoughts? Or does eslint just not care about IE8?\n. Looks like there's this allowedKeywords that defaults to true. :( http://eslint.org/docs/rules/dot-notation#allowkeywords\n. :unamused: \n. How do these affect the generated sourcemaps? Like, depending on where this step happens in the pipeline, it might generate incorrect tokens, etc.\n. :ship:\n. Looks there to me?\n\n. Hey @seagullua, I think we should solve this generically the same way that we do for React Native. See: https://github.com/getsentry/raven-js/blob/master/plugins/react-native.js#L47-L52\nIn theory, we could do the same thing for all of the environments, no?\nI also have 0 experience with these implementations, but I've been trying really hard to provide no support for secret key inside raven-js because then it exposes everyone else from attempting to use it incorrectly. If we remove these checks, it's likely that people will start embedding private keys into their browser JS. I'd rather encompass this behavior into an opt-in approach for mobile apps and whatnot some how. React Native is what we've been experimenting with at the moment.\n. I'm ok with this. I think a flag to explicitly opt into private key would be a good middle ground. :+1:\n. Ah, thanks. :cake: :icecream: \n. Yeah, we handle release as a first class citizen in the API, but internally it gets transformed into a tag. It's more like a \"special\" tag, since we use it for internal purposes to manage releases and whatnot.\n. Also, those docs are misleading. We should update that. A tag \"version\" is not the same thing as a release. It's likely these docs were written before releases were a native thing.\n. fwiw, it's still able to relatively easily overflow the max size for a POST (100k on getsentry.com) as well since we can't do compression on the client request.\n. :tada: \n. \n. Yeah, I like private.\n. @benvinegar I'm going back on my decision. We call the parameter sentry_secret, so I think we should adjust the error message and this parameter to allowSecretKey, and have the error message reference secret as well. I forgot that we laterally called it sentry_secret which gets spit back in the API call's error message as well.\nSee: https://github.com/getsentry/sentry/blob/8.2.1/src/sentry/web/api.py#L205\n. lgtm\n. > IE8 doesn't have Array.prototype.indexOf.\nTIL\nIgnore me then. :)\n. Is there something actionable we can do here? I'm a bit confused. :)\n. Oh, jk, I read the Stackoverflow. It works with the angular-raven package, but not ours. \n. :clap: \n. :godmode: \n. :tada:\n. :cookie:\n. As you pointed out, this is due to the response from rate limiting from the server. The error you see is a side effect of this, because we're not attaching the correct CORS headers on the 429 response.\nSo this isn't a bug with raven-js and is expected behavior. \n. ok\n. Fancy. \ud83d\udc83  \ud83d\udc78 \n. Closing this one since it's a dupe of https://github.com/getsentry/sentry/issues/3120 which you just opened.\n. ok\n. :cookie:\n. yolo\n. > will always throw unless install() was called (most users).\nWhy would this be most users? I'm assuming most uses call install()?\n. I mean, either way :+1: since this is obviously not intended to be there.\n. Mark as in_app = False\n. Let's use the sentry.interface.Stacktrace interface explicitly and avoid sending along an Exception interface for the synthetic exception.\n. Good riddance.\n. :cookie:\n. You'd definitely have to use raven-js (this repo) for browser behaviors, and raven-node for server side. We don't  have a single client that will work on both. The environments are pretty drastically different for our cases.\n. Hey @pornel, just jumping in here because you shouldn't be using raven-js to work with node. We have a separate raven-node which is more suitable there.\nI assume this is still an issue over there, but it'd make sense to bring the issue up over there instead. :)\n. Assuming the rst is correct. \ud83c\udf61 \n. Can we wire this up with tests so that this doesn't ever diverge from the actual API? I can see someone modifying one without the typescript definition very easily.\n. > If we change the Raven.js API, and users download the latest raven-js but nobody updates the DefinitelyTyped repository, they will get type errors during TypeScript compilation.\nYeah, totally. The difference though is that this definition wasn't even maintained by us. So if we're now choosing to take on the burden of maintaining it correctly, we need to make sure we don't break it.\n\nthere is already a test file we can also borrow and run as part of CI. It will at least catch basic stuff and remind us that the definition file fundamentally may need updating. That work?\n\nSeems reasonable, but I have significantly less context about what any of this is. :) I just want to make sure tests catch when we change the API and it breaks the ts definitions.\n. \ud83d\ude10 \n. I can't find any record of why this was done how it was, so let's just go for it. I can't think of a reason otherwise.\n. :cookie:\n. Sentry does support these already, unfortunately. \ud83d\ude20 \n. 895:52  error  \"chrome\" is not defined  no-undef\n  895:66  error  \"chrome\" is not defined  no-undef\ngj\n. :cookie:\n. :cookie:\n. \ud83d\udcbb \n. :cool:\n. ok\n. :cookie:\n. \n. Reviewed 24 of 24 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Yeah, agreed. I don't think raven-js should blow up at all from that. Recording an error should not trigger its own errors. :)\n. How would a NODE_ENV be applicable here? Since your artifacts are compiled. Unless this is a convention I'm not aware of where this will get compiled in during build?\n. jsdeliver is definitely failing to do the right thing. They're missing a file in reference in the sourcemap. At least, that's what I'm assuming the issue is.\nEither way, I'm not sure how this is an issue. What is cdn.jsdelivr.net/g/bundle.map and how does that relate? Typically these errors are just fine. It doesn't break anything, you just can't browse the unminified source in your debug console. But it won't affect any production applications.\nAlso worth noting, that I didn't even know jsdeliver existed until just now. We don't maintain this and this is the first I've heard of it existing.\nThe only issue I can see is that they're missing the file https://cdn.jsdelivr.net/raven/3.3.0/raven.js to go with https://cdn.jsdelivr.net/raven/3.3.0/raven.min.js.map\n. I've opened an issue up over at JSDeliver to see what they can do about it.\n. @wearhere see https://github.com/jsdelivr/jsdelivr/issues/13078 which has been open for over 3 months now. Again, there's nothing more we can do here on our side since we don't control JSDelivr.\n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. yolo\n\nReviewed 3 of 3 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. You could also remove then from .gitignore since it's not needed now.\n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r2.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r3.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. This is correct. See https://github.com/getsentry/raven-js/releases/tag/3.5.1 https://github.com/getsentry/raven-js/pull/695\nIt was a bugfix for the React Native plugin, which doesn't get compiled into dist/.\nThis is a slightly better diff view: https://github.com/getsentry/raven-js/compare/c0100e5...3.5.1\n. Reviewed 9 of 9 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Should we put this in docs as well?\n. \n. This is an incident with our upstream CDN vendor, see: https://status.fastly.com/incidents/2tf2hvkj2z50\n. The copy of TraceKit we have vendored in is already highly modified and we never can just outright update it from upstream. We hand patch in things that we care about when relevant, but we've torn out most of it to make it slimmer and better for us, so I'm not personally concerned with upstream compatibility.. We have our own fully vendored and highly modified version of TraceKit that we use internally, so if you'd like to submit a PR, this is the best place. :). So raven-js itself doesn't fetch frame context, rather, this is a function of the sentry server. The server attempts to fetch the source files to scrape the context.\nThe alternative is to upload files to us via the API as release artifacts paired with our releases API to supply us with frame contexts.\nSo this isn't really a function of the raven-js client (it doesn't have any of this information without making a bunch of XHR requests to get the data), but rather a function of the server.\nAre your sources not available publicly? Do you see a red \"errors\" block? I'd recommend just opening up discussion on the forum to figure out your use case since there's not a bug here, but we definitely try to lace together frame context if we can.. With us not being TypeScript experts, is there a way that we can automate this and have a test to assert that the TypeScript interface is always correct when we change public APIs? That way we can catch issues in CI before things get merged.. It's unclear to me how this is a problem for us. We're intending to monkey patch jQuery, but we'd need to support any version of jQuery. Everything here is guarded and should be safe between any of these versions, so I don't see what we would need to do here.. imo we can do similar, if not the same behavior for a few different status codes. Not just 429.\nWe have cases of someone revoking a DSN, in which case SDKs will continue to spam the old key. Or the project is deleted entirely, with code still out in production continuing to spam. In theory, we could be more aggressive about these errors and just 100% shut down the SDK, but that might just be more complexity in code base.\n\n400 status would be if the project_id didn't exist or some other fatal error. This would be safe to abort entirely or back off. This is not recoverable without re-configuring the client to fix the problem.\n401 status is for unauthorized, and this is when the project id would match, but the DSN is invalid. So either the credentials are flat out wrong, or they have been revoked. This would be safe to abort entirely or back off. This is not recoverable without re-configuring the client to fix the problem.\n403 status is overloaded for a couple reasons, one of them being Event dropped due to filter, so we wouldn't want to change behavior for this.\n429, obvious. That's why we're here. But one thing worth noting, in lots of cases, we spit back a Retry-After header that would be applicable to use as a backoff time, if it's easy to read this. The response will say Retry-After: 10 to say, \"chill for 10 seconds\". If you can read this, it'd be preferable over backing off since this is an accurate time for when the rate limit is going to expire. If the header doesn't exist, exponential backoff is fine.\n\nAnd on that note, I'm pretty sure raven-js now can be re-configured at runtime to change the DSN. If so, I think this reconfiguring should reset this backoff and start fresh. Since a new DSN likely would have a different outcome.\nJust my thoughts on this. :). I don't have as strong of an opinion about this anymore. I don't prefer it was at least by major version. But ultimately it's all of your responsibility to not break live code by chsnging it from under them automatically. \nWith that said, right now, Fastly will cache this forever. So I'll have to do a little bit of work to make that not so. And what would the TTL be for these? 1 hour? Less? More?. Or alternatively not really noticing until 24h later. \nWhat we could do is issue an explicit PURGE to Fastly to drop it out of their cache, and then rely on 24h browser caches. . > Note that we already pass some sort of purge header here, apparently for fastly. I'm not really sure how fastly<->s3 interaction works here though.\nThis is just to help purging based on surrogate key. Which we won't really be able to use here. It was to be able to say, \"purge all of version x.x.x because we messed up real bad.\" without needing to purge all the individual files. But this header just existing doesn't mean anything is purged.. Isn\u2019t the context in the comments? I don\u2019t have anything else to add other than what has been said already. It\u2019d be mostly fragile CDN configuration change to be able to support this. . It may be worth mentioning that they can also set their own header entirely. For example, basic auth could be leveraged here if they set the header to Authorization and set the key to Basic ..... . Yeah, he threw up the original PR, and I carried it through with https://github.com/getsentry/sentry/pull/4630\nIt made it into 8.13 release.. Worth noting too, is that since this is a CDN, we'd lose the ability to cache \"forever\" as we do now, and we'd have to have lower TTLs in order to propagate changes in a timely manner. So this would probably mean either dropping down to a 24h TTL or a 1h TTL depending on how quickly we want to propagate changes. Both of which are a performance hit for users that are now requesting these files.. You mad? https://github.com/getsentry/raven-js/commit/f1c518d091055220758c8c4f2965230fdcd7aef8. Are you able to use the \"Copy as cURL\" command from Chrome and try to send the request from cURL and see if you get anymore information? Maybe throw a -v onto the command.. javascript\nif (typeof($) === 'undefined')\n. $.fn.jquery\nThere's no need to initialize an actual object.\n. Array.prototype.indexOf doesn't exist in all browsers. And the point about jQuery is correct.\nJust do something like:\njavascript\nfor (var i=0, j=self.options.ignoreErrors; i<j; i++) {\n  if (self.options.ignoreErrors[i] === message) return;\n}\n. +1, they aren't used.\n. +1 to this as well. label and data are getting leaked as globals.\n. I'm not ok with $.each ;)\n. We might want to nip this $.each in the butt too. Just do a normal for loop.\n. I'm pretty sure this is because arguments is a reserved word, so it needs to be accessed with []\n. js convention is to set a variable for the length as well so it's not calculated on each iteration, like:\nfor (var i = 0, j = self.options.ignoreUrls.length; i < j; i++) {\n. A generic each() is something like this:\n``` javascript\nfunction each(obj, callback) {\n            var i, j;\n        if (obj.length === undefined) {\n            for (i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    callback.call(null, i, obj[i]);\n                }\n            }\n        } else {\n            for (i = 0, j = obj.length; i < j; i++) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    }\n\n```\nI have this in my no-jQuery branch.\n. There is no underscore. :(\n. Because it's only really needed to facilitate the XHR stuff. It's not used for anything else except $.each, which is super easy to include our own.\n. \n. Does everyone else hoist .length though? I'm genuinely curious about this now.\n. http://jsperf.com/caching-array-length/123\nIt's all basically the same.\n/me shrugs\nI just do it this way out of habit now. Maybe I can stop it.\n. Actually (digressing a bit), wouldn't the interpreter have to actually check .length on every iteration since there's always a chance that the array was mutated while being iterated. If it's cached, it definitely doesn't have to keep checking. In Chrome for, there's about a 1M ops/s difference, but really, this is bikeshedding. It's a ~10% difference on something that is called once on an array of a few items. :)\n. Hmm, he made a point that it only does certain optimizations when \"under pressure\". And he slapped a while (true) in front of the function call, which makes sense. No need to prematurely optimize if it doesn't matter.\n. This version string doesn't matter since we're not publishing to npm.\n. This prevents npm from accidentally publishing the package.\n. fwiw, substring(0, 1) is generally a tiny bit faster.\n. Wouldn't you want to check the hasOwnProperty thing here before doing this?\nLike:  func.hasOwnProperty(property) && wrappedFunction[property] = func[property];\n. Do you need to set the key to the options? I'm assuming you want to introspect this somehow and keep track that it doesn't get wrapped twice with the same options?\nWhat would happen if:\nRaven.wrap(\n  Raven.wrap(function(){}, {foo: 'bar'}),\n  {foo2: 'bar2'}\n);\nSince it's being wrapped twice with two different contexts, it looks like something is going to get clobbered here.\n. I have a helper for isUndefined.\n. Is it necessary to check again for isUndefined? Wouldn't just patterns[i] && patterns[i].source be enough?\n. provide\n. What's wrong with window.JSON here? window is referring to this. Which you can see in the _footer.js ending closure. Wouldn't that context be correct in your case?\n. This is being done on purpose. We need to globally expose Raven unless explicitly calling Raven.noConflict().\n. This is just being redundant, since the flushRavenState() is always being run which resets it.\n. We can't make this change. This is very significantly different in behavior.\n(JSON && JSON.stringify) will now raise a ReferenceError instead of returning undefined as window.JSON would.\n. I already have is isObject() helper.\n. No, we can't do this. It also needs to exist on the global scope for AMD to make plugins work.\nSo until someone else redesigns those, we can't do this.\n. isObject here as well.\n. Is this because the package.json is now raven-js ?\n. wtf is that garbage\n. Ugh, I'll accept that if it stops this back and forth argument. So gross though.\n. Can we move this part to outside the try...catch ?\nI don't want to swallow an exception caused by wrapObjectKeys or something. Just bad practice since we only want to capture the exception from _oldAjax.call\n. Might as well inline the var key = keys.pop() here now.\n. Wouldn't we want to check that $.Deferred is not undefined first? Or does it not matter?\n. Hmm, this test will be brittle since it's tied specifically to how it's handled by Chrome. Could we mock an exception object instead?\n. Technically they can be, but they don't pass for all browsers yet. That's an ideal goal though, so I'd rather not back in more platform specific things than we need to. :)\n. Not sure why you added this.\n. We can just apply a hammer to this and just do:  (.*?)\nSo the full line would be:\njavascript\n/^\\s*at (.*?) ?\\(?((?:file|https?|chrome-extension):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i\nYour test case still passes with this.\n. This can be removed since changing the regexp.\n. These added parens are now unnecessary too.\nEverything else looks good. :)\n. This also needs to check if key is inside name's prototype.\n. I guess at this point, we should probably just make this entire function safe and check if it's a function before wrapping. If it's not a function, just noop and return cb.\n. This is also not necessarily guaranteed to be a real object.\nSee:\n``` javascript\n\ntypeof []\n'object'\ntypeof null\n'object'\n``\n. Because sadly, this doesn't just work everywhere that XHR is accepted, so this is specific to V8.\n. Yes.\n. Can you change this toisUndefined(crypto)?\n. What's the point in checking this? You're setting it to a default inglobalOptions` already. So it should always exist, correct?\n. I'd say either remove this check, or remove the default. I think it makes more sense here to remove the default.\n\nI'd rather let this feature go undocumented for the time being, since it'd make more sense to allow this to be done through a new transport, but that hasn't been fully thought out yet for raven.js.\nSound reasonable?\n. >  I added this check because I saw that in the testing, there's assumptions that you can override the globalOptions object completely (there were direct assignments to globalOptions).\nAhh, this is only being done in tests. globalOptions doesn't exist in a production build in the public scope, so there's no way to clobber it.\n. Add this also into the flushRavenState() in raven.test.js plz.\n. Can we modify this test then to assert that window.makeRequest wasn't called? Since that's the changed behavior here.\n. And here.\n. This is the only part that I'm not super happy about.\nI think the transport should get another auth key with all the pieces. If we send this as a form or XHR, I assume we wouldn't want them to be a part of the querystring, correct?\n/cc @dcramer \n. Yeah, was leaning towards that. Updating...\n. Wanna configure eslint or whatever the new hotness is for here? Apparently this isn't covered by jshint. :)\n. Done.\n. Why not use isUndefined(document)?\n. Why is this being exposed?\n. Could we maybe use window.location.href instead? And avoid the document issues?\n. Correct. \n. But it gets hoisted, yo.\n. \n. Can you change this to if (RavenConfig.debug !== void 0) {? This matches how we check for \"is undefined\" elsewhere. \n. Should qualify this with a ^ so it doesn't replace this randomly in the string.\n. Same here, Justin Case.\n. Would we want to do { args: args.slice(1) } instead? Since this is already sending the first argument as the message.\nAlso, I think I'd prefer to send the key as arguments rather than args since arguments is what it's really called. :)\n. Ah, that's probably reasonable. :+1:\n. Words.\n. This doesn't really matter now since things are patched when calling install().\n. But it only patches when calling install(), so if you want to do that, then you'd need to load and install sooner.\n. Is there value in nesting these inside the plugin vs just outside?\n. This should have been extra, not tags, just for future reference.\n. This would just be a local, and we're not using underscore or lodash inside this loop, so should be fine.\n. I'm not an expert here, so lemme get this straight:\n- You're checking for either XMLHttpRequest that has the proper support. Is XMLHttpRequest guaranteed to exist? I assume if it's undefined, we'll have an issue calling new XMLHttpRequest()\n- Then falling back to checking for XDomainRequest, which is IE specific. This is great, but then inside makeXhrRequest, XDomainRequest isn't used or even attempted to be used. So it's not clear to me what good this check is doing.\n. I'm just going to assume that this is going to be problematic to fall back to the image request, because the goal of XHR is to be able to transmit more data. And if we attempt to fall back, it's unlikely things are even going to work.\nSo I guess we need to make a decision here: do we just 100% remove the image transport, and assume if there's no CORS support, maybe we just ignore entirely?\n/cc @dcramer \n. > Realistically \u2013 yes, unless someone has removed it (e.g. the host page or a browser extension)\nWhat about the IE case though since they use XDomainRequest? Or do I misunderstand this?\n. Yeah, we want to start sending more.\nOr at least, not be so paranoid about it. See: https://github.com/getsentry/raven-js/pull/419 as one thing.\n. Ah, ok. I see. IE's XMLHttpRequest object just isn't capable of issuing a CORS request.\n. I agree. So we'll have to implement the stuff to make sure we trim our data packet before sending to make an attempt.\nOtherwise, we'll just get a 413 on the response and Sentry won't log it anyways.\nSo not sure the best solution here.\n. Yeah, this only affects V8, and unfortunately, it's a global option.\nV8 just defaults to a limiting, 10 frames. We've personally hit an issue with this in Sentry since React generates some long stack traces.\nIn theory, we'd push all browsers to capture Infinity frames, then slice() out of that, but that's not how reality works. :(\n. Couldn't this just be, RSVP.on('error', Raven.captureMessage) ?\nSame below for: window.addEventListener('unhandledrejection', Raven.captureError)\n. Oh, and we're canonically Raven.captureException. Raven.captureError is just an alias, but no other docs reference that.\n. RIP tiny. :(\n. Oh, you'd need to bind or something now, wouldn't you? Bleh.\n. We need to also restore the XMLHttpRequest.prototype.open that was replaced.\n. Let's just comment a bit more on why this is a memory leak, and why it's unique to XHR.\n. We probably shouldn't throw errors like this since they'd then get caught and in turn reported to Sentry. Thoughts?\nOr we have a rule to ignore RavenConfigError's. This wasn't an issue before because RavenConfigError was only ever thrown before raven was even hooked up. Now we'll be throwing errors that will be caught and logged.\nNot sure if bad or not, just pointing it out.\n. I could see validity in the Missing DSN case, since that's before Raven is configured, but for missing event id... I'm not sure. I feel like we could just return a true/false instead for success/failure?\n. \n. I think this last \"Alternatively\" is redundant since that's the default value, so no action would need to be taken.\n. Maybe explain what kind of abuse is at stake here? And explain that we use the Referer/Origin header to validate. Without setting this, someone could embed your DSN on their site and report exceptions to your account, etc.\n. These sources are pointing to the wrong files. So we need to fix sourcemap generation.\n. lol \"both\"\n. Ideally, I guess we'd want to reflect the new dist builds in here as well, but not a blocker by any means.\n. I'd call this a CHANGE since it's a change in behavior that didn't happen before, and may or may not be unexpected.\nBut your call.\n. Would be worth noting the Error.stackTraceLimit being set.\nhttps://github.com/getsentry/raven-js/pull/419\n. Why not just do:\njavascript\n['[object Error]', '[object Exception]'].indexOf(objectPrototype.toString.call(what)) > -1\nThen we only need to toString() once and if we need to add to this, just add to this array. This array could also be popped out into a constant for like, var ERROR_TYPES = ['[object Error]', '[object Exception]']\nOther than this, seems reasonable.\n. what\n. Oh, ignore me. This is a fixture.\n. Are these always prefixed with \"Uncaught\" ? Or do you see others out there?\n. Do you think it's worth restricting the regex down then to /^(?:Uncaught )? instead of being liberal with .* ?\n. What could explode here?\n. > wrapepd\n. I assume it'd never be valid for obj.timestamp to be 0?\n. :rage4: \n. Unlikely worth it since this would happen to the user, not the person who actually cares about raven-js.\n. This won't ever match since we make _globalEndpoint protocol relative inside of  _getGlobalServer.\n. Or rather, I'm operating under the assumption here that the url for the http request got normalized and added the protocol. Maybe that's a bad assumption?\n. What abotu checking for the public key anywhere int he url? That'd only exist in a url if it were bound for the sentry server since it should effectively be a UUID anyways.\n. I mean, the same argument can be said about the checking for the presence of _globalEndpoint in a request bound for their servers.\nIf we want to be precise, we should validate the actual hostname, etc. It'd be marginally more expensive since doing this validation on every XHR request. So tradeoffs.\nimo it's unlikely for someone to be kicking off requests to their own servers with the public key in the url, but it's your call.\n. Yeah, I'd just do len + (out.length * sepLength) >= MAX_OUTPUT_LEN and not add sepLength here.\n. separator not seperator \ud83d\udc0e \n. Yeah, whatever, I'm just paraphrasing aka paracoding.\n. Why 'tagName' in elm instead of elem.tagName?\n. Was this intentional?\n. This can be removed.\n. It seems that these don't allow passing strings as well as regexp.\n. captureException technically allows a string as first argument as well, and we fall back to captureMessage.\nBUT this might be a good thing to enforce in the type definition. The fallback was done because things can throw strings and whatnot.\n. We allow anything as the first argument, and we just coerce it to a string.\nAgain, similar vain as last comment, we might just want to enforce this in the type definition.\n. This still doesn't cover the case of:\njavascript\nignoreUrls: [\n  /foo/,\n  'bar',\n]\nDoes it?\n. :pray:\n. I'd flip the order of these since we recommend uploading over us fetching them.\n. This is wrong syntax.\n. wrong syntax\n. wrong syntax\n. There are obviously more changes here.\nMy first impression was \"why are we doing a big version bump just for adding TS declarations\", then realized there are lots of things.\n. Isn't the bigger breaking change that we remove the ability to fetch context from the client?\n. Yeah, I'm torn. That, to me, falls under something like, us adding a feature into a plugin. Does that mandate a minor version bump for something that affects a small % of users? I dunno.\n. Should just link over to the angular2 docs page. I believe :doc:Angular 2.x ` would work.\n. Why did this change? And also introduced a trailing comma. I think that's still a bad thing?\n. This is likely worth mentioning version compatibility with Sentry server. Doesn't this change bump the server requirement to 8.6?\n. I'm not entirely sure off hand, that's just why I raised the question. It may be completely fine, I just don't know without investigating.\n. Shoudl this be noted in the release notes?\n. From https://github.com/getsentry/raven-js/commit/879ec45412dd8c3cbec1c020b6dee093afda705c\n. Can we use this as an actual dependency inpackage.jsonnow? I don't even know how that works and we don't have any dependencies yet, so I opted to just vendor. Ideally, we'd just point to this package on npm.\n. This will be an rst syntax error. The~needs to match the width of the text.\n. I'd suggest that weconsole.logor something that this is happening. That way we're not dropping things in the dark without any insight as to why if someone were to debug. Including ourselves..X-Sentry-Error` was added too, so you can attempt to fetch this and expose this as a \"reason\" for debugging and logging.. The actual reason.\nSo an example string would be like:\nInvalid project_id: 10\nor\nInvalid api key. > (Does Retry-After say something about rate limiting? Or completely independent?)\nThis is only related to rate limiting and won't exist on any other response as of today.. As commented: https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560\nThis was just yanked from Node core, so I'm not entirely sure what this is doing. Just standing on top of giants here. . They need to match exactly, it can't be longer either.. In what cases would you ever want a major/minor bump that retained the latter bits?\nLike, 1.9.3 > 2.9.3? When doing a major/minor, it should reset the latter bits to 0, so that going from 1.9.3 yields 2.0.0 or 1.10.0. . ",
    "gvido": "Ah, probably should have checked the one open pull request that does the same thing.\nSorry about that :)\n. ",
    "zimbatm": "I see. It must be IE, I couldn't reproduce the error in Chrom/FF/Safari/Opera under OSX. I pushed another change instead that just disables the getHeader function instead of the whole HTTP interface.\n. ",
    "peeter-tomberg": "The error is easily reproducible with RequireJS: \njavascript\nrequirejs.onError = function(err) {\n    Raven.captureException(err);\n}\nrequire(\"undefined\");\n. ",
    "ghost": "I get nothing but 400s out of captureException with 0.6, too. Is this really unresolved or am I having an unrelated problem? \n. https://github.com/zloirock/core-js/issues/140 was resolved, though I wouldn't close this issue until a suitable workaround can be automated. awesome project!\n. Here's an example Gist implementing @benvinegar original workaround, with backoff for latent network connections (handy if you're loading this library via the Sentry integration for Segment).\nhttps://gist.github.com/jhabdas/102bd7e7b856726b3c6e\n. We ran into this issue; it's pretty simple to fix. Simply make sure that Raven only loads when it exists in the window. \njs\nif (window.Raven) {\n  // Load Raven\n}\n. ",
    "kivikakk": "I get 400s only with 0.7.1 and Sentry 5.1.4. :| Unsure if related.\n. I'm guessing this is the tracekit branch? I'll give it a go!\n. @mattrobenolt Thanks; have installed 5.1.5, will see if I can get them going through.\n. holy crap, it worked! Well, you've got another beta tester. :fireworks:\n. Okay, I'm feeling a lot better about this now.  Thanks for the pointers and responsiveness!  Looks like we may select Sentry after all. :3\n. @mattrobenolt Great!\n. ",
    "kud": ":+1: \nI really need it so I will probably fork the project and see what I can do.\n. Okay cool.\nPerfect, thank you David.\nOn 30 November 2012 23:00, David Cramer notifications@github.com wrote:\n\nI incorrectly associated #38https://github.com/getsentry/raven-js/issues/38with this. We'll get tags up soon.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/37#issuecomment-10905771.\n\n\nErw\u00e4nn\n\u2756 www.kud.fr \u2756\n\u2599\n\u259f\n                                      \u259a\n\u2597\n                      \u25ae\n. I use to use bower, and manage lib.\nYou indeed must have a dist folder but directly with the final js, no version folder, tags are here for that.\nFor example you can do:\nbower install raven-js\nand if you want a previous one:\nbower install raven-js#1.0.6\nI'm just asking to remove the versioning in dist folder. ;)\n. No problem!\nI will use more and more raven-js (via bower), i'll let you know if I find anything wrong. ;)\n. It's not about bower or anything else, it's about to have a clean repo.\nYou should have only one version of your application in dist/ and people can choose the version they want via tags or commits. It's a git logic in fact.\n. What do you mean exactly by varions plugins?\nYou can do like lodash does: https://github.com/lodash/lodash/tree/master/dist having multiple distributions depending on what the optimisation you want to do.\n. My main problem is that in fact:\n\nWhy do you need to have all these versions?\n. Hahaha, okay! so just clean up this folder to have one version, if you want a specify version you select the correct tag or commit and we're ok:D\n. Sounds good to me! Thanks a lot.\n. ",
    "tiwilliam": "+1 Thanks. This resolved my 400 backend response.\n. ",
    "Freyskeyd": "Okey, i'm gonna try tomorrow.\nThat's can be interesting to get issue report on android/ios app.\nthank's\n. ",
    "Shyru": "I just tried doing the same thing with the current raven version (1.1) but had no luck.\nI always got the an HTTP error 400 with \"Missing required attribute in authentication header\". The missing attribute is sentry_secret.\n(BTW, we are using the hosted sentry and I configured the client security with *.\nWhen loading the phonegap page in a browser a test event was correctly transmitted to sentry so generally this seems to work.\nI think the problem is that when the image is loaded from the phonegap page, no referrer is given. This probably causes the sentry server to switch to a mode where the sentry_secret must be transmitted and no referrer check is done.\nSo I tried adding the secret key to the dsn, but then raven-js triggered an error because this is discouraged. (I think because sentry is mostly used in public websites).\nI then modified my version of raven.js and added this line after 1495:\nqs.push('sentry_secret=<my_secret>');\nAfter retrying with this in place it worked successfully.\nSo how should we go on about implementing this correctly in sentry-js? We could add an additional method that allows to set the secret and document that this should only be used on non-public websites or inside phonegap or something similar. Or we could modify the config() method to only throw the mentioned exception if the code is executed in a browser and not inside phonegap. Then one could specify the secret in the dsn as normally.\nI would be glad to implement whatever solution you deem fit. Just say what would be best, and I would fork and make a pull-request.\nThanks for looking into this!\n. @mattrobenolt No, phonegap does not send a referer. I checked this with safari's webinspector. I think it is the normal browser behavior to not send referrers when files are loaded from the filesystem with file://-urls. After all, which referer should they send?\n. ",
    "noplay": "I have the same issue, we want to use it with cordova but due to fact cordova use file:// url it's not allowed\n. Sentry fix this in a recent commit:\nhttps://github.com/getsentry/sentry/commit/9e5ecfe87f4ebd35b155f729d0f9ebb3b671fa15\n. Sentry make a change and it's work for us with cordova:\nhttps://github.com/getsentry/sentry/commit/9e5ecfe87f4ebd35b155f729d0f9ebb3b671fa15\n. ",
    "abuzzell": "Same problem here, although, oddly, IOS Cordova works, but Android does not. \n. ",
    "kof": "same here ... why isn't this resolved? Its actually pretty trivial to fix on the client by enabling optionally pass the host instead of going over location.href ...\n. hmm wrong, its using origin from headers sent by the browser ....\n. anyways this should be resolved somehow.\n. huh it seems like * works already on sentry server, sorry for bugging you.\n. I asssume you do in in the wrong place\nYou need to go to the ui, project settings and put * into client security textarea\n. this is server side configuration.\n. TypeError\n. No, it is \"TypeError: Type error\", I logged callee, it is a function ... I suppose there is no access to arguments property ... it must be a known bug/issue.\n. https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments\n\"The arguments object is a local variable available within all functions; arguments as a property of Function can no longer be used.\"\nI suppose safari has deprecated it.\n. You need to go away from using it.\n. haha now the sam some lines below\ncallee = callee.caller;\n. I wrapped this line in try/catch too, now it works.\n. Now this issue appears in other browsers too. You should either stop using fn.arguments or remove \"use strict\" statement where this deprecation becomes to a real throwing issue.\n. I have the 0.7.1 version, probably the issue doesn't exist any more, will update and see next week how it goes.\n. 1. I think there is nothing bad in publishing to npm. Some projects can be used in node AND browser. I am currently installing browser only modules via npm too and build them from there. However I start using component. I think supporting both is a good thing\n2. I have tried to make component install getsentry/raven-js which should go to master as well as  component install getsentry/raven-js@1.0.8 which should go via tag ... both has just downloaded the component.json file ....\n. Your component.json is wrong, here is what you need:\n{\n  \"name\": \"raven-js\",\n  \"repo\": \"getsentry/raven-js\",\n  \"version\": \"1.1.0-pre\",\n  \"dependencies\": {},\n  \"description\": \"Raven.js is an **under 5KB** standalone JavaScript client for Sentry.\",\n  \"scripts\": [\"dist/1.1.0-pre/raven.js\"]\n}\nWhy are you creating this builds for each version in dist?\nWhy don't you just build 1 file which always corresponds the current version of the changeset?\nThe problem is you need to change every time scripts path and version for every release.\n. Just installed it via npm using tag, but now I need to hardcode the version number in the code where I require the module, because I need to go to dist/verrsion\n. ",
    "TrevTheDev": "I have the same issue and SENTRY_ALLOW_ORIGIN = '*' is not working for me.\n. @kof thanks! that resolved my issue.\n. ",
    "Madumo": "Hi,\nAs you can see, I configured the allowed domains to * on the server (this is a self hosted sentry server):\n\nThen, just to try it, I set it up in the debug console of safari, running my cordova project on the iOS simulator, and I still get the same error as above:\n\nAnd here is the network request informations, you can see the \"X-Sentry-Error   Missing required attribute in authentication header: sentry_secret\"\n\nAm i doing something wrong? :(\nThanks!\n. Sentry 6.4.4\n. @mattrobenolt Hi, I would just like to know if you have any update on that bug. Did you find something? Was it what you thought?\n. ",
    "michal-filip": "I too have the same issue when using phonegap. Adding API key to application is detected and prevented in the raven library - so far I see no easy workaround.\n. ",
    "henry74": "Is this resolved? \n. So I've installed angular-raven using bower, but I'm curious whether I need the angular plugin included with the raven-js source files.  If so, how do I actually include the plugin code into my angular project?  it's not clear what I'm supposed to do with the plugin code snippet.\nThanks,\nHenry\n. Is the ability to dynamically change/set the ExtractContext hash available in some fashion or another?\n. Okay so I think I found the issue - you have to use the key name: 'key' within tags or it won't work.  I thought I could define whatever key I wanted.  Can you confirm this is the case?\n. Never mind, I see both of them work. Closing this and kicking myself.\n. ",
    "davidlanger": "Tested it in Cordova/Phonegap: Works.\nDoes not work from file:// in normal browser\n. ",
    "chrisabrams": "This was the case for me; thanks @dcramer \n. Thanks @dcramer \n. This is very much needed.\n. @mattrobenolt What is the target date for 1.0?\n. Sure I'll check it out. @mattrobenolt how can I stay up to date on beta/1.0 news?\n. It seems that your github link does not go to the latest built from source.\n. Nevermind that still does not fix the problem.\n. Nope: http://cl.ly/image/2z3X2f3N3f1f\n. Heh I'll talk to the PM about uppping the quota. Thanks @dcramer\n. ",
    "fracmak": "I replaced the -1 line numbers with null to keep the logic simple\n. ",
    "jeremyhaile": "+1\n. I've got tons of errors I ignore. Why is this being removed?  For example - I was continually getting an error that I finally traced back to be some random Firefox plugin that generated a spurious error. There was nothing I could do about it - so I added it to ignoreErrors.\n. Hmm - good question. If I add a URL like \"http://static.ak.facebook.com/\" to ignoreUrls, does it ignore all errors that come from any directory/file that starts with that URL?\n. OK - I'm going to try deleting ignoreErrors from our configuration and see what errors I start receiving and if ignoreUrls allows me to ignore them or not. I'll let you know what I find.\n. Yeah - I'm already running into errors that I can't (or don't care about) fixing and that can't be excluded using ignoreUrls. Here is one such IE error I'm already receiving. The recommended fix according to Microsoft is \"upgrade to IE8\"  And the URL is showing up as my page URL, which I obviously don't want to exclude. http://support.microsoft.com/kb/927917?wa=wsignin1.0\n. No problem - appreciate the quick replies!\n. It would be nice if ignoreErrors used regexes like ignoreUrls does instead of exact match strings. In some cases, I'm running into errors that have a strange error code attached that is not always the same number. Or errors that contain the same string but have different prefixes in different browsers.\n. I agree keeping it separate - I can't think of cases where I wouldn't explicitly be writing a regex for the URL vs the message.  Also - if I'm writing URL regex, it's inefficient to compare it to every message. \nI also like your idea of checking if it's a string or regex before doing the comparison. \n. I'm having an issue with ignoreErrors (perhaps fixed with regex?) where I'm receiving hundreds of \"\" errors in Sentry.  But my ignoreErrors is set to:\n  ignoreErrors: ['',......]\nOn the server it says:\n\n\n9 minutes ago javascript\nAny idea why this wouldn't be filtered?  Let me know if I should open a separate issue for this. (and perhaps the regex issue as well)\n. Yes - I've also updated ignoreErrors to ignore errors '' and null, but I'm still getting  on the server side. Also, there is no stack trace or location with these errors.It also occurs in IE, Chrome, Safari and Firefox.\nI've temporarily made this event public in the interest of solving the mystery: https://app.getsentry.com/sideqik/sideqik/group/3377745/\nPlease let me know if that helps you in any way - as I'd like to make it private again once you take a look.\n. I still get tons of these errors. I wish I could ignore them.\n. Hey @mattrobenolt - sorry I've been slow to respond here. I haven't found a consistent way to reproduce. It definitely seems to primarily occur in IE, although not exclusively. \nIf you check out this KB article you can see a couple of examples that may replicate the issue - although I haven't had a chance to test them with raven specifically: http://support.microsoft.com/kb/927917\n. Exactly - we had agreed on it in #73 - but wanted to open a specific issue for tracking it, since it's a new enhancement.\n. @terinjokes did you do any work on this? branch?  Can't wait to roll this out.\n. @terinjokes great - thanks!\n. @terinjokes any update on that branch? and a pull request?\n. ",
    "flecno": "Is it possible to get tags for all versions > 0.5.2? I pushed raven-js 0.7.1 to the cdnjs.com but the maintainer asks for tags, not only tar-balls.\n. ",
    "io41": "No, it's confusing something about the source url. When it posts to sentry, an error 400 is returned. Here's part of the data posted to the app.getsentry.com end point:\njavascript\n{..., \"filename\":\"http://localhost\", \"lineno\":\"8080/javascript/dojoroot/dojo/fa/fa.dojo.js\"}\nThe file referenced in the json blob above is available on http://localhost:8080/javascript/dojoroot/dojo/fa/fa.dojo.js\nIt seems to not handle port numbers in the url correctly.\n. The full json sent is:\njavascript\n{\"message\":\"errorThrowingCode is not defined\",\"culprit\":\"FA/quicksearch:52\",\"sentry.interfaces.Stacktrace\":{\"frames\":[{\"function\":\"Object.FA.quicksearch.quicksearch\",\"filename\":\"FA/quicksearch:52\",\"lineno\":\"5\"},{\"function\":\"onClick\",\"filename\":\"eval at <anonymous> (http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/dojo.js\"},{\"function\":\"_1229._onClick\",\"filename\":\"http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/fa/fa.dojo.js\"},{\"function\":\"_25e\",\"filename\":\"http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/dojo.js\"},{\"function\":\"_1a01._onClick\",\"filename\":\"http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/fa/fa.dojo.js\"},{\"function\":\"HTMLTableCellElement.<anonymous>\",\"filename\":\"http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/dojo.js\"},{\"function\":\"HTMLTableCellElement._f77\",\"filename\":\"http://localhost\",\"lineno\":\"8080/javascript/dojoroot/dojo/fa/fa.dojo.js\"}]},\"sentry.interfaces.Exception\":{\"type\":\"ReferenceError\",\"value\":\"errorThrowingCode is not defined\"},\"project\":\"3569\",\"logger\":\"javascript\",\"sentry.interfaces.Http\":{\"url\":\"http://localhost:8080/account/\",\"querystring\":\"\",\"headers\":{\"Referer\":\"\",\"User-Agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/25.0.1346.0 Safari/537.21\"}}}\n. The response of the 400 error above includes this X-Sentry-Error header:\nX-Sentry-Error:Invalid data: Unable to validate interface, 'sentry.interfaces.Stacktrace': invalid literal for int() with base 10: '8080/javascript/dojoroot/dojo/dojo.js' (<class 'sentry.exceptions.InvalidData'>)\n. @dcramer thanks! I've applied & tested that patch against the latest master and it does indeed fix it.\n. ",
    "acdha": "When you see \"Script error.\" with the line number :0 it means that the browser is choosing not to give you the error message to prevent leaking information cross-origin to attackers. This is great for preventing a hostile website from trying to get information after <script src=\"https://yourbank.example.com/\u2026\"> but it's a hassle for sites which shard their JavaScript onto a separate hostname, enough so that Facebook & a few other large properties approached the browser vendors about providing an alternative. Unfortunately it's not trivial:\n1. Set CORS headers on all of your JavaScript files - i.e. static.example.org would set Access-Control-Allow-Origin: http://www.example.org.\n2. Add the crossorigin attribute to your script tags on www.example.org:\n\nYou will then receive full error information from Firefox 13+; I'm not sure about the status of WebKit or IE but as of a few months ago this was not supported. See https://developer.mozilla.org/en-US/docs/HTML/Element/script#attr-crossorigin for more information and links to the mailing list posts and bug trackers. \nUntil support matures, the approach #14 took of simply ignoring messages which can't be worked on is probably your best alternative short of not sharding anything important - it's also necessary since even if you avoid this problem for your code you will see a HUGE amount of noise from JavaScript errors in buggy browser extensions, malware, buggy antivirus, tampering proxies, and even things like external Facebook / Twitter / disqus, etc. failures caused by anything from transient bugs to horrible network connectivity.\n. @mattrobenolt: this is really an aside as I think the most common cause of this actually has nothing to do with raven - it's simply a case of sites using domain sharding and not being able to see their own code's errors.\n. This is also a problem for IE8. There are two problems: the first is simply that IE<10 has a non-standard XDomainRequest object rather than proper XHR support for CORS; the second is that XDomainRequest doesn't allow any custom headers, including authentication.\nIn practice, this means that $.ajax will never work unless your Sentry instance is accessible through the same hostname (proxying might be an option for some deployments). XDomainRequest could work except for authentication:\njavascript\nvar xdr = new XDomainRequest();\nxdr.open(\"post\", 'http://sentry.example.org/api/42/store/');\nxdr.send('\u2026encoded message\u2026');\nWe could simply change Sentry to look for authentication credentials in the message, or add a flag to control whether projects require authentication to store messages, the latter being the approach I'm inclined towards as authentication is moot when the URL is public knowledge.\n. I haven't looked into the sentry source yet but I was planning to have Varnish proxy /_sentry/ and add the authentication header while doing so.\n. I ended up with this in my Varnish config:\nvcl\nbackend sentry {\n    .host = \"sentry.example.org\";\n    .port = \"80\";\n}\nand in vcl_recv:\nvcl\nif (req.url ~ \"/_sentry/\") {\n    set req.url = regsub(req.url, \"/_sentry/\", \"/\");\n    set req.http.Host = \"sentry.example.org\";\n    set req.backend = sentry;\n    return(pipe);\n}\nThis allows me to configure Raven using the public URL http://www.example.org/_sentry/<project id>, avoiding the usual CORS BDSM without having to fork Sentry.\n. I completely agree about getting the best results by using Raven as a library but I'm not sure how easy it is to get away from window.onerror \u2013 it's so easy to forget an entrypoint which can trigger an error and even limited information is better than nothing. I have been wondering whether it might be better to have a very simple Sentry call mode which could be used in something like that early handler to help catch localized CDN errors which are otherwise quite tedious to track down.\nThe window.onerror = null part can be omitted \u2013 that was a premature optimization which I'm not actually deploying. \n. +1 to @jeremyhaile's suggestion - either making it use regexps or perhaps refactoring it into something like ignoreErrorPatterns would help denoise a few bits of extension / ISP-injected noise which I see on our public site.\n. I think it having it be separate would be \u200bless confusing - otherwise it\nseems almost certain that someone will open an issue because their regexp\nmatched more than they expected.\nI do like the idea of either renaming it to make it clear that what you're\nproviding is a regular expression or explicitly checking for string vs.\nregexp to decide whether to test using == or .test() to avoid surprises.\n. I'm -0 on this - seems like it'd be noisy and only helps developers who'd be in a position to do it the right way instead.\n. I wouldn't object to you adding it but I do wonder whether it would just encourage people to send poorly crafted log messages rather than integrate logging correctly.\n. I'm with @pieter on not feeling unshift() performance is worth optimizing for \u2013 it's probably better to reverse() since it's so easy but for any plausible stacktrace size it's just not worth taking on additional complexity for.\n. This was mentioned as an aside in #73. I'm :+1: on including it since it should be easy just to do a type-check on each entry in both arrays. \n. Why is type checking such a bad idea? I wouldn't want to get carried away\nwith it but a simple if (foo.test) { \u2026 regexp \u2026 } else { \u2026 string \u2026 }\nseems unlikely to cause much confusion.\n. Definitely an important point. I think one major omission in your pull request would be browser support. Awhile back I updated the list at https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#Browser_compatibility and I believe the necessary browser releases have happened on in the WebKit/Firefox world but that there's no way to get stacktraces on any version of Internet Explorer.\nI would also recommend fleshing out the first paragraph to have a note along the lines of \u201cFor security reasons, browsers will not provide detailed error messages or locations to scripts from other domains: Raven will receive a message but it will simply say \u2018Script Error.\u2019 with no further information\u201d\n. I'll update the devmo page: Chrome hosed the WebKit implementation but it does work in Safari:\nhttp://jsfiddle.net/josh3736/vHmeb/\n. @polmiro See https://code.google.com/p/chromium/issues/detail?id=159566 \u2013 it looks like they have a fix in Canary slated for Chrome 30. Until then you can only get unwrapped errors from Firefox and Safari or try to figure out some way to move things under a common wrapper at the top of the call-tree.\n. @dcramer For standalone sentry, is there any way to upload source maps for server-side analysis rather than client-side? I've thought that would be cleaner rather than having fairly large .map files floating around for every extent JS bundle version.\n. The attached test fails on master and passes with this branch.\n. ",
    "adurieux": "I agree with your last point. Until now, the solution I was using was either:\n- using a server-side proxy on the same domain\n- or use JSON-P if the length of the query payload is not too big\n- or (wait for it) pass a URI-JSON-encoded version of the data after the # sign of a same-domain iFrame. Its inner javascript would decode and reconstitute the post-# data and mock a regular raven log to the sentry server. \nDo you know if there is ways to disable authentication on the sentry server since this is the only thing that prevents it ?\n. +1\n. ",
    "SBoudrias": "In fact, the problem is that Git tags aren't kept up to date with each release. That would be a good thing indeed; for bower, and every user who want to checkout changes between two versions - and just for dev to track down regressions between versions.\n. Hi @mattrobenolt, tested this build this morning and this was working great on my app.\nAlthough, I'm concerned by the fact you infer if define is a function, then require is a function. If I'm correct, only RequireJS AMD loader use the require function, other like curl, lsjs and dojo may break (didn't test it though). But anyway, I guess the point is mostly that inferring is a - most of the time - bad thing. Any though?\n. ",
    "tommoor": "FYI: seems to be causing this: https://app.getsentry.com/buffer/group/2937248/\n. This would be lovely.\n. ",
    "ivorbosloper": "Thanks for the responses. I understand both POST and GET have problems. I tested the current source with a simple error (small stacktrace) and noticed it already didn't work. I'll watch the repo and will test new solutions as they come along.\n@mattrobenolt I had already tried to change the Apache LimitRequestLine in the first vhost of the bound port, but I still ran into the error. Maybe the wsgi-server has limits too?\n. @mattrobenolt This failing image:\nhttp://sentry.example.com/api/3/store/?sentry_version=2.0&sentry_client=raven-js/1.0-beta11&sentry_key=XXXXXXXXXXXXX&sentry_data=%7B%22project%22%3A3%2C%22logger%22%3A%22javascript%22%2C%22platform%22%3A%22javascript%22%2C%22sentry.interfaces.Http%22%3A%7B%22url%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fexample%2Fdashboard%2F%22%2C%22querystring%22%3A%22%22%7D%2C%22sentry.interfaces.Exception%22%3A%7B%22type%22%3A%22ReferenceError%22%2C%22value%22%3A%22testjavascripterror%20is%20not%20defined%22%7D%2C%22sentry.interfaces.Stacktrace%22%3A%7B%22frames%22%3A%5B%7B%22abs_path%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fmedia%2Fmain.js%257C0%2F1%2Fravenjs%2Fraven-1.0-beta11.js%3Fversion%3D5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5%22%2C%22filename%22%3A%22raven-1.0-beta11.js%3Fversion%3D5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5%22%2C%22lineno%22%3A182%2C%22function%22%3A%22%22%2C%22post_context%22%3A%5B%22%20%20%20%20%7D%22%2C%22%22%2C%22%20%20%20%20report.subscribe%20%3D%20subscribe%3B%22%2C%22%20%20%20%20report.unsubscribe%20%3D%20unsubscribe%3B%22%2C%22%20%20%20%20return%20report%3B%22%5D%2C%22context_line%22%3A%22%20%20%20%20%20%20%20%20throw%20ex%3B%20%2F%2F%20re-throw%20to%20propagate%20to%20the%20top%20level%20(and%20cause%20window.onerror)%22%2C%22pre_context%22%3A%5B%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20lastException%20%3D%20null%3B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20notifyHandlers.apply(null%2C%20%5Bstack%2C%20null%5D.concat(args))%3B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20%7D%22%2C%22%20%20%20%20%20%20%20%20%7D%2C%20(stack.incomplete%20%3F%202000%20%3A%200))%3B%22%2C%22%22%5D%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fexample%2Fdashboard%2F%22%2C%22filename%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fexample%2Fdashboard%2F%22%2C%22lineno%22%3A79%2C%22colno%22%3A3%2C%22function%22%3A%22HTMLDocument.%3Canonymous%3E%22%2C%22post_context%22%3A%5B%22%5Ct%7D)%3B%22%2C%22%3C%2Fscript%3E%22%2C%22%22%2C%22%20%20%20%20%22%2C%22%20%20%20%20%3C!--%20End%20Javascripts%20--%3E%22%5D%2C%22context_line%22%3A%22%5Ct%5Cttestjavascripterror.test()%3B%22%2C%22pre_context%22%3A%5B%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%20src%3D%5C%22%2Fmedia%2Fdashboard_templates.js--en%257C0%2F0%2F2%2Fexample%2Fdashboard%2FfieldTemplates.html%3Fversion%3D7fbfdf17eea44c847117669bf80c0c90701a694e%5C%22%3E%3C%2Fscript%3E%22%2C%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%20src%3D%5C%22%2Fmedia%2Fdashboard_templates.js--en%257C0%2F0%2F3%2Fexample%2Fdashboard%2FstockTemplates.html%3Fversion%3D184fb0aca156d483e58f25d74dacfdafd7a5c25f%5C%22%3E%3C%2Fscript%3E%22%2C%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%20src%3D%5C%22%2Fmedia%2Fdashboard_templates.js--en%257C0%2F0%2F4%2Fexample%2Fdashboard%2FyieldTemplates.html%3Fversion%3Ddb197fcf83bb9efc9f765074055645069d78b0b0%5C%22%3E%3C%2Fscript%3E%22%2C%22%3Cscript%3E%22%2C%22%5Ct%24(document).ready(function()%20%7B%22%5D%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fmedia%2Fmain.js%257C0%2F1%2Fravenjs%2Fraven-1.0-beta11.js%3Fversion%3D5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5%22%2C%22filename%22%3A%22raven-1.0-beta11.js%3Fversion%3D5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5%22%2C%22lineno%22%3A1121%2C%22colno%22%3A27%2C%22function%22%3A%22HTMLDocument._fn%22%2C%22post_context%22%3A%5B%22%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(e)%20%7B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20TraceKit.report(e)%3B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20e%3B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20%7D%22%2C%22%20%20%20%20%20%20%20%20%7D%3B%22%5D%2C%22context_line%22%3A%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20fn.apply(this%2C%20arguments)%3B%22%2C%22pre_context%22%3A%5B%22%22%2C%22%20%20%20%20var%20_oldReady%20%3D%20%24.fn.ready%3B%22%2C%22%20%20%20%20%24.fn.ready%20%3D%20function%20traceKitjQueryReadyWrapper(fn)%20%7B%22%2C%22%20%20%20%20%20%20%20%20var%20_fn%20%3D%20function%20()%20%7B%22%2C%22%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%22%5D%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Fajax.googleapis.com%2Fajax%2Flibs%2Fjquery%2F1.7.1%2Fjquery.min.js%22%2C%22filename%22%3A%22jquery.min.js%22%2C%22lineno%22%3A2%2C%22colno%22%3A14784%2C%22function%22%3A%22n%22%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Fajax.googleapis.com%2Fajax%2Flibs%2Fjquery%2F1.7.1%2Fjquery.min.js%22%2C%22filename%22%3A%22jquery.min.js%22%2C%22lineno%22%3A2%2C%22colno%22%3A15553%2C%22function%22%3A%22Object.o.fireWith%22%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Fajax.googleapis.com%2Fajax%2Flibs%2Fjquery%2F1.7.1%2Fjquery.min.js%22%2C%22filename%22%3A%22jquery.min.js%22%2C%22lineno%22%3A2%2C%22colno%22%3A9773%2C%22function%22%3A%22Function.e.extend.ready%22%2C%22in_app%22%3Atrue%7D%2C%7B%22abs_path%22%3A%22http%3A%2F%2Fajax.googleapis.com%2Fajax%2Flibs%2Fjquery%2F1.7.1%2Fjquery.min.js%22%2C%22filename%22%3A%22jquery.min.js%22%2C%22lineno%22%3A2%2C%22colno%22%3A14348%2C%22function%22%3A%22HTMLDocument.c.addEventListener.B%22%2C%22in_app%22%3Atrue%7D%5D%7D%2C%22culprit%22%3A%22http%3A%2F%2Flocalhost.example.com%3A8000%2Fexample%2Fdashboard%2F%22%2C%22message%22%3A%22testjavascripterror%20is%20not%20defined%22%2C%22sentry.interfaces.User%22%3A%7B%22user%22%3A%22ivor%40example.com%22%2C%22id%22%3A%221%22%7D%7D\nThis decodes into:\n\"project\":3,\n\"logger\":\"javascript\",\n\"platform\":\"javascript\",\n\"sentry.interfaces.Http\":{\"url\":\"http://localhost.example.com:8000/example/dashboard/\",\"querystring\":\"\"},\n\"sentry.interfaces.Exception\":{\"type\":\"ReferenceError\",\"value\":\"testjavascripterror is not defined\"},\n\"sentry.interfaces.Stacktrace\":{\"frames\":[{\"abs_path\":\"http://localhost.example.com:8000/media/main.js%7C0/1/ravenjs/raven-1.0-beta11.js?version=5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5\",\"filename\":\"raven-1.0-beta11.js?version=5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5\",\"lineno\":182,\"function\":\"\",\"post_context\":[\"    }\",\"\",\"    report.subscribe = subscribe;\",\"    report.unsubscribe = unsubscribe;\",\"    return report;\"],\"context_line\":\"        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\",\"pre_context\":[\"                lastException = null;\",\"                notifyHandlers.apply(null, [stack, null].concat(args));\",\"            }\",\"        }, (stack.incomplete ? 2000 : 0));\",\"\"],\"in_app\":true},{\"abs_path\":\"http://localhost.example.com:8000/example/dashboard/\",\"filename\":\"http://localhost.example.com:8000/example/dashboard/\",\"lineno\":79,\"colno\":3,\"function\":\"HTMLDocument.<anonymous>\",\"post_context\":[\"\\\\t});\",\"</script>\",\"\",\"    \",\"    <!-- End Javascripts -->\"],\"context_line\":\"\\\\t\\\\ttestjavascripterror.test();\",\"pre_context\":[\"<script type=\\\\\"text/javascript\\\\\" src=\\\\\"/media/dashboard_templates.js--en%7C0/0/2/example/dashboard/fieldTemplates.html?version=7fbfdf17eea44c847117669bf80c0c90701a694e\\\\\"></script>\",\"<script type=\\\\\"text/javascript\\\\\" src=\\\\\"/media/dashboard_templates.js--en%7C0/0/3/example/dashboard/stockTemplates.html?version=184fb0aca156d483e58f25d74dacfdafd7a5c25f\\\\\"></script>\",\"<script type=\\\\\"text/javascript\\\\\" src=\\\\\"/media/dashboard_templates.js--en%7C0/0/4/example/dashboard/yieldTemplates.html?version=db197fcf83bb9efc9f765074055645069d78b0b0\\\\\"></script>\",\"<script>\",\"\\\\t$(document).ready(function() {\"],\"in_app\":true},{\"abs_path\":\"http://localhost.example.com:8000/media/main.js%7C0/1/ravenjs/raven-1.0-beta11.js?version=5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5\",\"filename\":\"raven-1.0-beta11.js?version=5c38ee8f0eb13dfa5e7d4a54e675a15ceef9ffb5\",\"lineno\":1121,\"colno\":27,\"function\":\"HTMLDocument._fn\",\"post_context\":[\"            } catch (e) {\",\"                TraceKit.report(e);\",\"                throw e;\",\"            }\",\"        };\"],\"context_line\":\"                return fn.apply(this, arguments);\",\"pre_context\":[\"\",\"    var _oldReady = $.fn.ready;\",\"    $.fn.ready = function traceKitjQueryReadyWrapper(fn) {\",\"        var _fn = function () {\",\"            try {\"],\"in_app\":true},{\"abs_path\":\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\",\"filename\":\"jquery.min.js\",\"lineno\":2,\"colno\":14784,\"function\":\"n\",\"in_app\":true},{\"abs_path\":\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\",\"filename\":\"jquery.min.js\",\"lineno\":2,\"colno\":15553,\"function\":\"Object.o.fireWith\",\"in_app\":true},{\"abs_path\":\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\",\"filename\":\"jquery.min.js\",\"lineno\":2,\"colno\":9773,\"function\":\"Function.e.extend.ready\",\"in_app\":true},{\"abs_path\":\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\",\"filename\":\"jquery.min.js\",\"lineno\":2,\"colno\":14348,\"function\":\"HTMLDocument.c.addEventListener.B\",\"in_app\":true}]},\n\"culprit\":\"http://localhost.example.com:8000/example/dashboard/\",\n\"message\":\"testjavascripterror is not defined\",\n\"sentry.interfaces.User\":{\"user\":\"ivor@example.com\",\"id\":\"1\"}}\n. @mattrobenolt I could test a new version and close the issue. Great project btw :)\n. ",
    "riklaunim": "I have an app using emberjs and some jQuery widgets (like jQuery File Upload widget). The hierarchy is short and quite often I run out of limit:\nhttp://wklej.org/id/955778/\nhttp://wklej.org/id/955780/\nAnd that's even with that raven.min.js.\n. Yes, that what we are going to do - configure nginx and whatever is between it and sentry to let it pass.\nAt least tracebacks will be meaningful :+1: \n. ",
    "coderanger": "This specific message is from gunicorn, not nginx/apache. Actual fix discussed at https://github.com/getsentry/sentry/pull/874\n. ",
    "wejendorp": "I agree, it seems like an overly optimistic solution.\nI wanted to test out sentry, but can't use an error tracer that fails because it attempts to get a bit of context.\n. I wasn't aware of that, and I'm sorry for not taking the time to understand what was going on.\nAll I know is that I was attempting to swap errorception for sentry, and only managed to get a \"Hello world\" error through to the server, never a stacktrace from my (angular) app.\nSo I thought it quite ironic that the error handling script was failing.\n. ",
    "iknite": "Maybe configuring the dependencies in your component.json could be just what I need (I've just thought about that)\nI can play with that a little and check if it works \n. Just in case bower declines your PR, we can go this way\n. ok, will test it in iknite/unforked-repo, and see the results, \nThanks!\n. Don't be, attention to detail is the path of the samurai\u2122'\nYeah, it sucks but I'm keeping the faith, at least we have some... \n. Now you have it.\nThanks for the feedback\n. finally!!\nWhat a long headhache for this small thing\n. of course!\n. I don't know why it keeps pushing the old PR, since I've made a fetch from latest commit\n. Sure no problem! thanks for the project :)\n. ",
    "matthewwithanm": "I just need the latest. Thanks!\n. No problem! Any idea when the next release'll be? Seems like it's been a while.\n. Cool. Thanks for all the hard work (:\n. Thanks!\n. :+1: to putting each plugin in its own module. The second option (Raven.plugins.jQuery) would mean they'd always be included in browser builds\u2014even when you don't want them.\nAlso, if you already plan on using webpack, it can target UMD.\n. ",
    "pheuter": "Indeed.\nI am throwing an error like so:\njavascript\nthrow new Error(\"Error\");\nSometimes it logs in sentry and sometimes it doesn't.\n. The app is actually written in CoffeeScript that gets compiled to JavaScript using require.js. The main entry point looks like so:\ncoffeescript\nRaven.config('http://key@url.com');\nRaven.context(function() {\n  define(['cs!csmain']);\n});\nI've tried without the context wrapper as well and that didn't seem to change anything. It still logged throw calls that were made higher up in the call stack while ignoring those down below.\n. I forgot it in the snippet, but I am calling install() after config()\nI have not tried wrapping around modules, but I figured if it already works in some places, why not in others?\n. Ah, I see. Perhaps there's a way to utilize window.onerror?\n. Right. Of course it would be great to automatically capture errors, but JavaScript doesn't make it an easy game to play...\n. Sucks. Oh well, I appreciate the clarification!\n. Will do, the configuration and usage docs have been pretty straightforward and easy to follow.\n. ",
    "paulyoung": "I wonder if there's a way to extend Error to make this work.\n. @mattrobenolt, this is the approach we're taking using CoffeeScript.\nCoffeeScript\nwindow.Error = class extends Error\n  constructor: ->\n    error = super\n    Raven.captureException error\n    return error\nThen just use throw new Error \"Test Error\"\n. Updated comment above for clarification.\n. Here you go:\n``` javascript\nvar hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super = parent.prototype; return child; };\nwindow.Error = (function(_super) {\n__extends(_Class, _super);\nfunction _Class() {\n    var error;\n    error = _Class.super.constructor.apply(this, arguments);\n    Raven.captureException(error);\n    return error;\n  }\nreturn _Class;\n})(Error);\n```\n. ",
    "dmcquay": "FYI, errorception found a way to handle this. Would be cool if raven-js could do the same.\n. I don't have any inside knowledge about errorception. I am using the service and it seems to work as advertised. That's all I know.\n. ",
    "BYK": "I inspected how they work and it looks like they simply attach themselves to window.onerror and don't care about the stack trace. At least for these kind of things.\nHijacking the Error object works for Firefox but @mattrobenolt's point about capturing all of them, even the ones that are not thrown is a valid concern.\nA dirty workaround for this might be storing created Error instances by hijacking the global constructor and also listen to onerror and compare the message, fileName and lineNo arguments with the properties of the stored Error objects. If a match is found, remove that from the queue and report.\n. I think we can close this now.\n. Which version should we put there though? The one that has all the plugins?\nI'll be honest, I think the thing bower is doing right now is fundamentally wrong. You can specify direct URLs when isntalling packages via bower right, why not fall back to that until they introduce a post-install script feature for building?\n. Yeah what I'm saying is there are multiple builds for the same version due\nto various plug-ins.\nOn Oct 21, 2013 1:04 AM, \"Erwann Mest\" notifications@github.com wrote:\n\nIt's not about bower or anything else, it's about to have a clean repo.\nYou should have only one version of your application in dist/ and people\ncan choose the version they want via tags or commits. It's a git logic in\nfact.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/141#issuecomment-26698718\n.\n. The combinations we have are much more than that so I'm actually completely\nagainst the idea of putting compiled/built filed into the repo.\nOn Oct 21, 2013 1:25 AM, \"Erwann Mest\" notifications@github.com wrote:\nWhat do you mean exactly by varions plugins?\nYou can do like lodash does:\nhttps://github.com/lodash/lodash/tree/master/dist having multiple\ndistributions depending on what the optimisation you want to do.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/141#issuecomment-26699733\n.\n. We don't and I want to send this whole folder to oblivion :D\nOn Oct 21, 2013 1:33 AM, \"Erwann Mest\" notifications@github.com wrote:\nMy main problem is that in fact:\n[image: screen shot 2013-10-21 at 10 32 04]https://f.cloud.github.com/assets/655838/1370824/507b680e-3a2b-11e3-81e8-1c6240e00d1a.png\nWhy do you need to have all these versions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/141#issuecomment-26700130\n.\n. \n",
    "adityar7": "While evaluating all error-notification services, I noticed that some Javascript-specific services (such as https://qbaka.com/) do track the stack trace and display the user action that led to a particular error. Too bad errorception doesn't do that since it seems superior in every other way.\nWe'll be using Sentry for our Django code, and I stumbled upon this issue while looking for info on how Sentry works for Javascript. Does the current implementation of raven-js require the code to explicitly catch all JS errors and report them to Sentry?\n. @mattrobenolt Got it working by fixing some syntax. Thanks!\n. ",
    "jmagnusson": "Hopefully it's on my end. I have Raven 1.0.5 and testing has been done on OS X with Chrome. I just tested it in the latest versions of Firefox and Safari, but it seems that sentry doesn't actually record the event for those two browsers, even though the GET request is sent just fine with a 200 response code. The Chrome request is handled by sentry, but without the tags sent along as previously mentioned.\nOther info:\nSentry 5.4.1\n* is used in CORS-setting in Sentry\nThis is what the Raven-related code looks like:\n``` javascript\nrequire(['startup'], function() {\n    require([\n        'cs!app/state',\n        'app/config',\n        'raven'\n    ], function(\n        appstate,\n        appConf,\n        Raven\n    ) {\n    var host = window.location.host,\n        ravenOpts = {tags: {host: host}};\n    // Initialize the error handler\n    Raven.config(appConf.sentryDSN).install();\n\n    try {\n        appstate();\n    }\n    catch (exc) {\n        // TODO: Why doesn't tags appear in Sentry?\n        // TODO #2: Maybe alert user that an error has occurred\n        Raven.captureException(exc, ravenOpts);\n        throw exc;\n    }\n});\n\n});\n``\n. I've also tried the latest master (5f92fc02f6) combined with the TraceKit version this repo links to (2964a1e` at the time of writing). No success.\nI should also add that captureMessage works fine in all three browsers. captureException only works in Chrome as I previously mentioned.\n. Removing install() from the code above so that window.onerror handler isn't added didn't make a difference either.\nPassing my ravenOpts directly to Raven.config didn't send along tags either (not even for captureMessage).\n. I first tried the tagged 1.0.5 version found here, then also tried the src/raven.js and vendor/TraceKit/tracekit.js using the require.js shim config like this:\njavascript\nrequirejs.config({\n    paths: {\n        jquery: 'ext/jquery',\n        tracekit: 'ext/tracekit', // Error reporting\n        raven: 'ext/raven', // Error reporting\n    },\n    shim: {\n        jquery: {exports: 'jQuery'},\n        tracekit: {exports: 'TraceKit', deps: ['jquery']},\n        raven: {exports: 'Raven', deps: ['tracekit']},\n    }\n})\nBoth \"flavors\" had the same problems which I mentioned previously.\nHere's the data being sent with makeRequest:\nURL (same for all tested browsers):\nhttp://our.sentry.dev/api/5/store/?sentry_version=2.0&sentry_client=raven-js/1.0.5&sentry_key=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&sentry_data=<json>\nGist with sentry_data for the different browsers can be found here\nOur main.js where raven-js handler is added:\n``` javascript\nrequire(['startup'], function() {\n    require([\n        'cs!our/app/state',\n        'our/app/config',\n        'raven',\n        'underscore.string'\n    ], function(\n        appstate,\n        appConf,\n        Raven,\n        _s\n    ) {\n        var host = window.location.host,\n            ravenOpts = {tags: {host: host}};\n    // Initialize the error handler\n    // Raven.install adds a global error handler to window.onerror\n    Raven.config(appConf.sentryDSN, ravenOpts).install();\n\n    throw Error('Testing captureException with raven-js');\n    appstate();\n});\n\n});\n```\n. And thanks for making this awesome script! :-)\nActually I noticed that the catch-statement was never reached. It seems that the global window.onerror handler added by Raven.install re-raised the exception and script execution stopped after that. Maybe I could create a simple test so that it can be replicated.\n. :+1: \n. Ah I totally missed shouldSendCallback. Thanks for that. Might not look exactly as clean but it solves my problem!\n. ",
    "sinyagin": "Hello \nI use 1.0.8.\nCould you help me how can I send tags with function ?\nfunction traceKitWindowOnError(message, url, lineNo) \nvar options = {\n                logger: 'my-logger',\n                tags: {\n                    bank_id: \"999999\"}};\n            Raven.config(sentryUrl, options).install();\nIt doesn't send  tags\n. ",
    "jfirebaugh": "I'm seeing this too -- https://app.getsentry.com/id/id/group/4714283/.\n. ",
    "uglymunky": "Any update on this?\n. cool, thanks.\n. On the server, we massage the data a bit, then pass it into a Monolog/Kibana setup where we consolidate logs from our various apps.\nCould you explain a bit more about what you mean by: \"you'd just accept the packet being sent by raven-js and you can use a DSN that points to your server instead.\"?\nAlso, to be clear, I want errors to continue to get logged to my Sentry account, I just want this to happen in addition to that.\n. Looks like it should do the trick.  Thanks!\n. ",
    "mwcz": "I've been seeing this in spades lately.  I suspected it was because I'm on Sentry 8.4, but RavenJS 1.1.16.  I know, I know, I'm working on upgrading!\nhttps://github.com/getsentry/raven-js/commit/03d8925c74b70b7cfcd7ea64dc741ce4d8c7844d is in 1.1.16 though, so I'm not sure why I'm seeing it.\nWhatever the cause, I haven't been able to reproduce it either, but I do have 374k events which I'm happy to share if any further debugging is needed.\n. Sorry, I didn't know the history!  Here's my take on this specific issue:\nIf someone's code is entirely in AMD format, they'll never need the window.Raven global.  Contrarily, if none of their code is AMD, they'll get the global.\nBut in the project I work on, some code is AMD, and some isn't, so it makes sense (for me) to expose the global and register the AMD module.  Raven's already doing that, cha-ching, except it doesn't expose the global until the AMD module has been requested with a require(['raven']) call.  If the global is going to be exposed so that synchronous code can use it, it shouldn't be reliant on asynch code to establish the global.\nIf you'd like to use jQuery as an example, they register an AMD module and expose a global separately.\nI wish there was just One Right Way too... I guess it's because JS has never had a module system, so people invented them (hence \"14 competing standards\" syndrome).  That legacy of suckage has a cost.  You've gotta accomodate a wide variety of historical abuses and competing module standards if you want to appeal to the widest audience.  ES6 introduces a real module system, but the older module system's aren't going to vanish overnight.  Can you imagine if Python had four different types of import?\nif pmd:\n    pmd.load(mymodule)\nelif pypack:\n    ppyack.include(mymodule)\nelif require:\n    require.once(mymodule)\nelse:\n    import mymodule\nlol indeed\n. Cool, sounds good to me!  Here's the stacktrace I was dealing with.\n[\"Error: fake error\",\n \"    at script.js\",\n \"    at Object.context.execCb (lib/require.js:1663:33)\",\n \"    at Object.Module.check (lib/require.js:879:51)\",\n \"    at Object.Module.enable (lib/require.js:1156:22)\",\n \"    at Object.Module.init (lib/require.js:787:26)\",\n \"    at callGetModule (lib/require.js:1183:63)\",\n \"    at Object.context.completeLoad (lib/require.js:1557:21)\",\n \"    at HTMLScriptElement.context.onScriptLoad (lib/require.js:1684:29)\"]\nThat's what the lines variable contained.  The current regex expects the name to be there, so lines[1] doesn't get included, and the error gets attributed to require.js, when it actually occurred in script.js.\nFor super convenience here's a script you can paste into your console to see the difference in behavior.\n```\n// current regex\nvar chrome = /^\\sat (.+?) ?(?((?:file|https?|chrome-extension):.?):(\\d+)(?::(\\d+))?)?\\s*$/i\n// sample stacktrace\nlines = [\"Error: fake error\",\n    \"    at script.js\",\n    \"    at Object.context.execCb (lib/require.js:1663:33)\",\n    \"    at Object.Module.check (lib/require.js:879:51)\",\n    \"    at Object.Module.enable (lib/require.js:1156:22)\",\n    \"    at Object.Module.init (lib/require.js:787:26)\",\n    \"    at callGetModule (lib/require.js:1183:63)\",\n    \"    at Object.context.completeLoad (lib/require.js:1557:21)\",\n    \"    at HTMLScriptElement.context.onScriptLoad (lib/require.js:1684:29)\"];\nchrome.exec(lines[1]); // nothing\nchrome.exec(lines[2]); // works fine\n// new regex\nchrome = /^\\sat (.+)? ?(?((?:file|https?|chrome-extension):.?):(\\d+)(?::(\\d+))?)?\\s*$/i\nchrome.exec(lines[1]); // works!\nchrome.exec(lines[2]); // still works!\n```\nIf you like, I can put together a PR with a test case that includes a sample stacktrace with Chrome's phrasing, like this one, and the regex fix.\n. Crud, I'm sorry!  I \"cleaned up\" the URLs before posting, to hide some internal hostnames and stuff, and accidentally ruined them.\nHere's an actually working example!\n```\nvar lines = [\"error: fake error\",\n \"    at https://example.com/js/script.js?v=2.0.15:13:11\",\n \"    at object.context.execcb (https://example.com/js/lib/require.js?version=unknown.1415632459870:1663:33)\",\n \"    at object.module.check (https://example.com/js/lib/require.js?version=unknown.1415632459870:879:51)\",\n \"    at object.module.enable (https://example.com/js/lib/require.js?version=unknown.1415632459870:1156:22)\",\n \"    at object.module.init (https://example.com/js/lib/require.js?version=unknown.1415632459870:787:26)\",\n \"    at callgetmodule (https://example.com/js/lib/require.js?version=unknown.1415632459870:1183:63)\",\n \"    at object.context.completeload (https://example.com/js/lib/require.js?version=unknown.1415632459870:1557:21)\",\n \"    at htmlscriptelement.context.onscriptload (https://example.com/js/lib/require.js?version=unknown.1415632459870:1684:29)\"]\nchrome = /^\\sat (.+?) ?(?((?:file|https?|chrome-extension):.?):(\\d+)(?::(\\d+))?)?\\s*$/i;\nconsole.log(    chrome.exec(lines[1]      )); // no worky :(\nconsole.log(    chrome.exec(lines[2]      )); // still works!\nchrome = /^\\sat (.+)? ?(?((?:file|https?|chrome-extension):.?):(\\d+)(?::(\\d+))?)?\\s*$/i;\nconsole.log(    chrome.exec(lines[1]      )); // works!\nconsole.log(    chrome.exec(lines[2]      )); // still works!\n``\n. It looks likeat http://example.com/script.jsdidn't match because it's expecting:LINE_NUMBERat the end.at http://example.com/script.js:777` matches.\nchrome.exec(\"    at http://example.com/script.js:777\")\n[\"    at http://example.com/script.js:777\", undefined, \"http://example.com/script.js\", \"777\", undefined]\nI'll start on that PR.\n. PR opened with a test case!  I did a small tweak to the regex I posted before...  it's now:\n(\\S*)\nI didn't notice earlier but in the working example I posted, the function name was being extracted as \"object.context.execcb (\" for example, when it should have been \"object.context.execcb\".  \\S is non-whitespace characters, so that problem's gone.\nBy the way @mattrobenolt I really enjoyed the video of your talk at JSConf.  A buddy of mine went, and told me about it.  We have our own hand-rolled client logging solution at Red Hat, but I'm working on migrating us to Sentry+Raven because it's much better.\n. Sure thing, I can make that happen.\n. Hey, do you want a second commit on this PR, or a fresh PR with the two commits squashed?\n. Sure thing, I don't care about the historical integrity of that branch. :)  See if this test is more to your liking.\n. Cake AND sparkles?!  Dang!  Raven contributions get the best emojis.\n. I wrote it that way because I assumed it'd be run from the command line only, through v8, so it would act just like Chrome.  But that might be a bad assumption!  I don't know Mocha very well.  I'm guessing from your comment that the tests can be run in-browser too.\n. ",
    "ThisIsMissEm": "We've actually done this at @state, so, I could probably get the document going, unless there's something specific you have in mind?\n. Well, we've actually just downloaded the compiled file, we're not (yet) building raven-js ourselves and linking in that.\n. @adambiggs Another solution is to create a wrapping AMD module for Raven-js which does the configure & install call, which means you only import raven-js once, but can import your own module multiple times, afaik.\nI think this may be related to: https://github.com/getsentry/raven-js/pull/109 and https://github.com/getsentry/raven-js/issues/91#issuecomment-15560074\n. I think it'd still be possible to have an plugin architecture. You just need to make sure that they can register with Raven... We actually have stuff that we do with raven which is pretty much a plugin, or maybe more a wrapper to give us certain functionality.\n. The main thing that this addresses is the fact that an AMD module shouldn't change the environment when it is loaded. \n. @mattrobenolt @dcramer Any follow up on this?\n. I'm guessing this isn't going to land any time soon, right?\n. ha, fair enough :)\n. Why have this go into raven-js? Why not just have it as a separate library?\n. @benvinegar perhaps just add in an optional callback at different stages of instrumentation?. hmm.. I might have a crack at this one day; I'm thinking just: \nif (typeof config.preFetchDataHook === 'function') config.preFetchDataHook(/* args */)\nWhich I'm sure isn't too much. Maybe this is me being optimistic though.. ",
    "robinwassen": "@mattrobenolt - I guess you can close this issue since it is fixed since long? \nhttp://raven-js.readthedocs.org/en/latest/install/index.html\n. I agree with @pickhardt on this - we have quite heavy logging in our client side code and occasionally passwords happen to slip into the logs which is not ok. \nSo it would be nice to be able to add filters so passwords get filtered out automatically. But I will check out the dataCallback to solve this until this has been included.\n. I guess this can be closed now.\n. @DrorY: I use bower and gulp to include raven-js in our project without any problem, so I would guess that you are concatenating the files in an incorrect order or not including raven.min.js with gulp.\n@mattrobenolt: gulp is a build system similar to grunt, I would assume that it is safe to close this issue as a non-issue.\n. I would close this issue as won't fix, because it can't be exploited for anything at all.\nAnd if someone as a script kiddie want to go around the check on his own client, well, just modify the whitelist instead of including stuff from other domains.\n. I would advice against using this patch this way, the reason is that it is a local patch on the included TraceKit file instead of into the TraceKit project.\nSend this patch to TraceKit instead and update the TraceKit version used by raven-js when the pull request has been merged. \n. @mattrobenolt Fair enough! Then it makes more sense :)\n. This can be closed now!\n. The truncate length is configurable after this pull request: https://github.com/getsentry/raven-js/pull/246\nAlso proposed that the truncate length should be set to 1000 by default instead of 100 in this issue, for exactly the same reasons as you mention: https://github.com/getsentry/raven-js/issues/247\n. It is the underlying library TraceKit that fails with generating stack traces in IE, I am actually looking into maintaining that library and improve the IE support if possible.\nEven fails quite hard with the stack traces in IE11.\n. @mattrobenolt The errors are reported in to Sentry fine, the problem is that TraceKit does not generate as nice stack traces for IE as it does for the other browsers. Also sometimes doesn't send the name of the function that generated the error.\nHere is an example of the whole \"stack trace\" for an IE9 error (it does localize to Swedish because the user's PC is set to Swedish, nothing you can do about that AFAIK):\n\n. Also, the documentation of maxMessageLength should probably state that the max length allowed by Sentry is 1000 chars.\n. @dcramer See: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L22\n. Also worth mentioning is that the following attitude by @mattrobenolt is very user hostile:\n\nThe server has a hard limit of 1000 chars, but realistically, if you're sending a 1000 char message, you're likely doing something wrong. Like Angular's case.\n\nHaving that attitude does not really comply with providing a good service, especially in handling error message which in their nature are quite chaotic.\n. ",
    "pieter": "I think this was added in #55, which IMHO is wrong since it disables some of the core functionality of TraceKit.\n. No it's not, look at the screenshot in #86. It says \"most recent call first\" but shows the last call first. It's nothing to do with the appearance setting.\nEither Raven-JS is sending it in the wrong order, or the string in Sentry is incorrect and should be reversed.\n. You really shouldn't go that route. You may not like it, but the current API is just \"stacktraces are backwards from JS\". You can't just change that in Sentry, you'll break clients that currently do the right thing. It'll be impossible for clients to always do the right thing, since they can't just guess the version of Sentry and then send stack traces accordingly. You're basically introducing a new major API version that is incompatible with older versions.\nSure, you could add another parameter to sentry &stacktrace_order=naturaly or similar, but really, what's the point?  It's much easier to just let Raven-JS send the traces in the right order. You won't need a new sentry version, you won't break other clients, you don't need a fuzzy stacktrace-order-according-to-language resolver.\nIf you're really concerned about performance of unshift(), just call reverse() at the end. But it won't matter for the max 100-ish element arrays you'll get here.\nAlso, the language thing might be more confusing than you think. The order preference is per account, so if you have both a Python and a JS project in your account, one of them will show incorrect and the other will show correct, whatever option you choose. It's not just a misleading string, it's really wrong data we're sending here.\n. ",
    "terinjokes": "@mattrobenolt What's the status on this? Pending a resolution on #91?\n. Is there any work on this? I don't want to double efforts if someone else is already working on it.\n. I did some work for this, but haven't pushed to a GitHub branch yet. I'll push today.\n. @mattrobenolt this is not true at all.\n. Just a heads up: as far as I know navigator.sendBeacon doesn't support setting custom headers (such as X-Sentry-Auth), so Sentry might need to continue support authorization via query parameters.\n. ",
    "nikolawannabe": "This also makes captureMessage and captureException behave differently when raven is included but not configured.  Currently, if you include it but don't configure it, you'll get an exception when calling captureMessage, but not when calling captureException.\n. ",
    "optimuspaul": "This actually totally broke our site, cost use thousands of dollars. The exception needs to be raised for TraceKit and jQuery to work properly.\n. jQuery Ajax handlers were not calling their success or failure handlers unless the exception was re-raised. When I took out the try catch everything worked the same way it did before we implemented raven on our site. I'll attempt to build a gist that shows this failing.\n. I can't figure out what is going on either, it should work.  I'm passing it down the line to the dev team that actually wrote the code that is failing.  I'll reply if there is anything to look at.\n. ",
    "bisrael": "That's my point, it doesnt really solve the problem.\nI hooked into trace kit as a proxy for when raven has probably fired, since i hook in after raven.install, i should get called just after raven fires off the request, i also do a small timeout for good measure.\nIdeally, we'd be notified whether the request failed or succeeded.\nIt would be nice to be able to retry failed requests.\nNot sure how this would get accomplished since you use Image().src\nTL;DR: yes.\n. That would be great.\n. searching the source of the current master repo says \"yes\"\n\nBlake Israel\nOn Wed, Oct 22, 2014 at 1:58 AM, danse notifications@github.com wrote:\n\nUhm, i cannot find mention of this neither in the doc nor in the tests, is\nthis still supported?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/81#issuecomment-60055138.\n. is it possible to do this through globalOptions?\n it wasnt clear when reading through the source (yes i read your source :smiling_imp: )\n. Bloat is definitely a huge concern. I'm redoing this with DOM Events and we'll take a look at how that works.\n. I updated the code to fire native events on the document.\n. I also updated the top post with how it works now\n. @mattrobenolt - have you had a chance to look over the changes?\n. usually when you do a Raven.captureMessage or captureException, you could put a console.log there if you like, or write a small wrapper for yourself, would be like two lines of code for the developer.\n\nEdit: Really the developer should be wrapping calls to Raven.capture* anyways, otherwise you're really coupling yourself to the Raven implementation.\n. I put some console.logs in right where you change the push to unshift, and the stack traces raven creates appear correct with push. at least as far as the array is concerned.\nAre we sure that sentry does not want the stack trace sent in reverse order though?\nThe sentry docs are rather unhelpful, especially where the protocol is concerned.\n. Backend of Sentry also wont allow lines longer than 4096.\nJust today i turned on fetchContext = true and the requests would more or less get ignored because the url was 11k chars long. This was on a stack trace 10 levels deep.\n. @mattrobenolt - yeah i was doing all this locally, i'll have a chat with our admin about long gets.\n. ",
    "erikcw": "I agree.  A callback mechanism would be very helpful.  Please make it compatible with the \"global\" error handler.  Maybe it could be passed into the Raven.config options object.\nRaven.config('https://public@getsentry.com/1').install()\n. ",
    "cheeaun": "I think this is missing from the docs.\n. :+1: \n. ",
    "vperron": "Hello, I know the PR is closed and all, but I have stumbled upon libraries that use those messages and have not found much documentation about it...\nDid I miss something or would it be nice to actually document the feature ?\n. Sure. I read that part of the contributing/ docs a little quick, sorry. \nEDIT: and didn't get the notification for your lightning-speed answer.\n. ",
    "defunctzombie": "No.\n. ",
    "heynemann": "Increasing the limit also exposes your sentry farm to DDos attacks. It's going to be hard to tell sysadmins to increase this to a very big number.\nThe idea of doing a POST seems more reasonable to me, given that Sentry already supports CORS.\nWhat do you think?\n. Mostly I got that from http://docs.gunicorn.org/en/latest/configure.html#security, but it seems reasonable that if you allow for a lot of data to be sent to your servers it's even easier to do a SlowHTTP attack (not that it makes that much of a difference, though for that kind of attack).\nI'm going to research the matter further. If you could remember why it was terrible using CORS, I'd be really interested in hearing it. I'm assuming browser compatibility with it (IE).\n. We could try adding the option for the user to specify a channel, like\nFacebook does (\nhttp://developers.facebook.com/docs/reference/javascript/#channel). It\nwould definitely help.\nIt would be awesome if sentry did provide a channel that could be inferred\n(or passed as argument for different deployments of sentry). This way the\nuser's wouldn't have to do anything. Using the channel is pretty simple as\nwell.\nWhat do you think?\nBernardo Heynemann\nDeveloper @ globo.com\nOn Tue, Apr 23, 2013 at 12:01 PM, Matt Robenolt notifications@github.comwrote:\n\nIt was definitely a large slew of IE issues, and I'm pretty sure issues in\nother more modern browsers too. CORS adds a lot of bloat to the code too,\nfor very little gain.\nOne of the options I want to explore though is POSTing from a real form\nwithin a hidden iframe or something. It'd require refactoring Sentry a bit\nto process the payload, but it may be worth it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/88#issuecomment-16863635\n.\n. I think both are equally important.\n\nConsider the scenario where I want to load user data into Raven:\nwindow.RavenCallback = function(raven) {\n    raven.config(dsn).install();\nmyAuthFramework.userDataLoaded(function(userData) {\n    Raven.setUser({\n        email: userData.email,\n        id: userData.id\n    })\n});\n};\nThat's just one of the possibilities. I'm just saying there's stuff you can't anticipate, so a callback is definitely a way to add a nice degree of extensibility to raven js.\n. Is there anything we can do to improve this pull request?\n. How do you propose that works? How do I subscribe to the event?\nI'm willing to change this pull request to get it approved.\nThe callback we are sending is actually an onLoaded event in disguise. Would you rather call it RavenOnLoad? We can definitely change that.\n. Did you check this updated pull request? It uses a global config, the same you asked for.\nI still think having the event is very useful. Maybe have both?\n. Running the tests were giving warnings ;( We thought useful to improve the codebase. If you think that's not the case we can definitely revert that.\n. ",
    "bregenspan": "Sorry for the bump, just wanted to register strong support for the idea in https://github.com/getsentry/raven-js/issues/88#issuecomment-16863635 of POSTing from a real form in a hidden IFRAME.  Some libraries use some approach like CORS with fallback to IFRAME, but that feels like overkill to me given that the drawbacks to the form approach should be pretty limited/nonexistent.\n. @douwem awesome, thanks for adding that! Better interface than a more general setter for sure.\n. ",
    "lukecyca": "Having this functionality would make a big difference to me. I would like to see raven.js support this as an option so that we could use it in situations where it does work.\nI run my own sentry server, and it is behind my application's reverse proxy. This let's me use https://myapp.example.com/sentry/api/6/store as the endpoint. Since it appears to be at the same hostname as https://myapp.example.com, I don't have to worry about origin restrictions.\nI'm sure the downsides to using GET have been beaten to death already, but briefly:\nThe rest of my application uses REST practices and always uses appropriate HTTP methods. It targets only fairly modern browsers, and so I can certainly rely on XMLHttpRequest. Most importantly, I am using mod_security (HTTP firewall for apache/nginx/IIS) which blocks raven.js' GET requests because they are apparently similar to some XSS exploits. I've had to disable many of the rules to get raven.js to work, which is very unfortunate.\n@mattrobenolt: If I rewrote this patch to be an option that can be set via Raven.config(), would you consider it?\n. ",
    "ram-nadella": "Nice.\nThanks for the update. Any ETA? Happy to contribute if necessary.\n. ",
    "dknecht": "HI Matt-  How is this going?  We would be interested in testing. \n. ",
    "ryanwitt": "+1\n. ",
    "costa": "@mattrobenolt I hope you're still the maintainer. Hi, may I use the aforementioned option in production? I mean, two years have passed and it didn't make into the config docs, I wonder why.\nWhile on the subject, I'm trying to make use of Sentry for a client-side plugin which means I do not own the page I'm collecting errors from. Now as far as I can see Raven.noConflict doesn't exactly cover for multiple Sentry apps on the same page \u2014 and I have to use the (undocumented) option above. Is there anything else \u2014 in your opinion \u2014 I should be aware about? Thank you very much.\n. ",
    "jsyrjala": "@costa Documentation for the collectWindowErrors option got added in this pull request https://github.com/getsentry/raven-js/pull/1050. ",
    "kaareal": "Yep legit issues + and all the same.\n. That would be great :+1: \nSo we got some twitter messages stored on the clientside, and we do some compression on the messages to make them fit into localstorage. So when restoring the compressed messages from localstorage, a little corruption of the data can lead to a lot of failures. \nAnother example I have seen, is around dragging and dropping, a badly configured jquery-ui can produce quite a few events.\n. ",
    "raananraz": "Hi, Thanks for taking the time to answer :)\n1. It can be done via configuration (like you stated above)\n2. Overwritting a \"url\" paramters in the tags object when calling captureException \n   e.g. \n   captureException(err, { url : \"http://mydomain.com/#hashtag\" });\n. Thanks!\n. ",
    "parhamfh": "I've submitted a suggested solution in the following pull request. From what I've gathered Raven sends the correct URL including the hashes, so I'm guessing that the hashtag gets stripped in Sentry. This solution should not change any old behaviour, it only adds a hashtag field which shows up in the Tags section of the event view in the Sentry interface.\nhttps://github.com/getsentry/raven-js/pull/108\n. You are right about that! From my investigation it seems that on the clientside Raven sends the full URL including the hashtag. Also, in the Sentry app, the event message title (in bold) retains the hashes in the URL even if it was stripped in the events URL field. So that was further evidence that suggested that the problem lied in Sentry.\n\n. ",
    "johtso": "Is this issue now resolved? I get the anchor correctly tracked by Sentry.\nI was actually having the opposite issue. Wanting the anchor to be ignored. Is this possible?\n. ",
    "esperancaJS": "So the source map must be public? Doesn't this defeat part of the purpose of uglifying since anyone can now recreate the beautified code ?\n. Oh ok! I started a today trying to integrate my app with sentry. Got some things to figure out now\n. After many experiments I have found that this happens when  Header > Referer is http://localhost:*\n. ",
    "Onefox": "Hello, i got a source maps working with the chrome debugger but sentry still don't use them and only give me a trace to the min version :/ \nthere is nothing in the sentry log and nothing echoed in verbose mode..\nthe irc is a bit quiet \n. ",
    "guilhermef": "Hey @mattrobenolt, it's ok like this ?\n. ",
    "calvinfo": "Yup, we moved off AMD awhile ago, but from my understanding - that should take care of it. :)\nThe relevant piece of code in require.js just looks to see whether a name has been defined for the module. If the module is anonymous and didn't get loaded from a require call, require.js will complain.\nIt does mean that you are giving the library the name Raven for people using require.js. As a library, that seems pretty reasonable to me.\n. Oh, and I should add from the jquery comment that you may want to make it lower-cased 'raven' if your library has a lowercase name: \njavascript\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\nif ( typeof define === \"function\" && define.amd ) {\n    define( \"jquery\", [], function () { return jQuery; } );\n}\n. Awesome, thanks for the super fast response :D. I'll let our require.js users know once it's in the hosted version so they can turn on sentry.\nOff the top of my head, I don't happen to know what the exact behavior is - I think it depends on how they are requiring their current raven script. From my understanding they'll need to replace stuff like:\njavascript\nrequire(['path/to/libs/raven'], function () { [...] });\nWith something like\njavascript\nrequire(['raven'], function () { [...] });\nI remember our require.js setup had a bunch of settings related to pathing though, so if your paths are set up correctly there might not be a change at all.\nThanks for taking care of it!\n. Awesome, thank you! :)\n. @mattrobenolt - one last thing, do you have any idea when the patch will get added to the hosted version?\n. cool, thanks!\n. ",
    "paulgould": "Yeah, we're waiting for the hosted version to be updated before we can start using sentry\n. ",
    "troelskn": "This issue seems to be still present. Regression happened here: https://github.com/getsentry/raven-js/commit/39eca1e43573b668f335940c874c597b1f1b68c6\n. ",
    "adambiggs": "Found a solution, but it's not ideal...\nI was trying to manually set window.onerror = null in dev mode, but even that didn't work. The problem was I was require()ing Raven in a couple modules, and each time Raven was re-binding to window.onerror.\nSo instead I stopped using noConflict(), included it as a global dependancy in the requirejs config, and removed it as a local dependancy from the other modules. This allowed window.onerror = null to be set without Raven re-binding the event later.\nPretty messy fix though :(\n. ",
    "bobbyrenwick": "@mattrobenolt, I've upgraded to 1.1.11 and I'm not calling install() and I still end up with raven handling errors.\n. :+1: \n. ",
    "axelson": "Is there a workaround for this? Even when I never call Raven.config() or Raven.install() or if I call Raven.config(false) the jquery or onerror handlers seem to be still be installed. The only workaround seems to be never loading the raven js in the first place (which is less than ideal).\n. Are you providing #282 as just background? I don't see any workarounds in there.\n. ",
    "elsigh": "My only fix is to use require() in an if block (the rest of my code now uses import :(\n. ",
    "lawlmart": "Is there an update on this?\n. ",
    "JoannaFalkowska": "Any update? It STILL doesn't work correctly.\nEDIT: Sorry for my tone. Had a long day.. In your version it's impossible to conditionally set up an Angular ErrorHandler. Either you set it up in every case, and then it swallows your errors no matter what, or don't but still list it in providers, which od dev causes entire module to crash.\nAs far as I know it's impossible to use or not use an Angular provider based on a condition.\nI've done many iterations of fix attempts today.. It's possible to prevent Raven from sending requests and even from catching errors, but that doesn't stop the Angular ErrorHandler from swallowing errors (= at least losing track of actual lines from where errors were thrown).\nI suppose you're right and it's not much of a Raven issue after all.. isSetup is now read-only, so the above method no longer works.\nI found a following workaround, which seems to work, although I have no idea why.\n```\nlet isProduction = process.env.ENV === 'build'; // variable provided by webpack\nRaven\n.config('https://@sentry.io/', {\n  shouldSendCallback: function () {\n    return isProduction;\n  }\n})\n.install();\nif (!isProduction) {\n  Raven.uninstall(); // this is necessary! for some reason\n}\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err: any): void {\n    console.error(err); // this still fires after uninstalling!!! it's because it's already listed as Angular provider \n    Raven.captureException(err)\n  }\n}\n```\nIt's still an awful solution because it hijacks all my errors so I don't know from which line they were thrown. At least I guess it's not as terrible as not seeing them at all.. ",
    "tremby": "What are you trying to do? I'm doing this, which is working just fine:\njs\nif (process.env.RAVEN_DSN) {\n  require('raven-js').config(process.env.RAVEN_DSN, {\n    environment: process.env.NODE_ENV,\n  }).install();\n}\nWhere process.env.RAVEN_DSN is the DSN of course, and which is only set when building for environments where I want Raven running, via webpack.EnvironmentPlugin.. To be honest that sounds to me like an Angular issue rather than a Raven one.\nHaving said that, I agree that a more general solution would be a good addition.\nJust a thought: have you tried setting a pattern in the ignoreUrls option which matches all URLs? Would that do what you need? Something like ignoreUrls: [/./]?\nOr maybe set sampleRate to zero?. 1/0 gives Infinity. Not an exception!\nRunning\njs\ntry {\n  throw new Error(\"test\");\n} catch(ex) { Raven.captureException(ex); }\nhas the same effect as what I describe above -- I get an undefined error on the Sentry side.\nI get the same again if I run the code example given at https://raven-js.readthedocs.org/en/latest/usage/index.html#how-to-actually-capture-an-error-correctly\njs\ntry {\n    doSomething(a[0])\n} catch(e) {\n    Raven.captureException(e)\n}\n. I get the same behaviour in Chrome 40.\n. I've figured it out.\nTraceKit doesn't build a stack trace from an exception which originated in a Javascript console (for example Firefox or Chrome developer tools). As soon as I put some test code like this in an actual script the messages come through properly. I'll lodge this with TraceKit.\nIn the mean time it might be worth adding something to the documentation about this.\n. I tried the latest TraceKit, and it handles an error from the dev console just fine.\nSo could you please update TraceKit?\n. As explained above, the version in this repository cannot generate a stack trace for an exception caused on a browser's JS developer console. The TraceKit.computeStackTrace function returns {} in that case, while the latest TraceKit's version returns a useful object.\nThis is very confusing if trying to test if Raven is working.\n. While you guys are here, what I was trying to investigate when I noticed this duplicate code is how exactly \"release\" is handled. Some Sentry docs suggest using a tag \"version\", but then Raven JS has this config option to pass \"release\", separate from tags, and it's rendered as if it were a tag in Sentry as far as I can tell. Is \"release\" special in some way? Can you point me at code or docs?\n. Okay, all understood. I'll switch my code to send \"release\" instead. Found how to send it properly in PHP Raven, too. Thanks!\n. ",
    "paulredmond": "For those coming here trying to figure it out still, it was a config option I missed at first shouldSendCallback:\n```js\nimport Raven from 'raven-js';\nconst env = 'prod';\nconst release = '12345';\nRaven\n  .config('https://@sentry.io/1234', {\n    environment: env,\n    release: release,\n    shouldSendCallback: () => {\n      // Do your logic here...\n      return ['prod', 'staging'].indexOf(env) !== -1;\n    },\n  })\n  .install();\n```\nIf shouldSendCallback is false sentry will not report. No need for conditional reporting logic in your code with this \ud83d\udc4d .. ",
    "davidfurlong": "Make your DSN the empty string. It will disable reporting. With redux sentry middleware our entire redux state gets sent in extra. Now we're getting this. Any idea of a current estimate on max size? Looks like one request was around 240KB. > It's currently 100kB. You can use dataCallback to strip something that's unnecessarily big and you know you can skip it.\nYeah thanks I found the relevant docs. isn't dataCallback a config option, and not for individual raven _sends? Is the best practice to set the config and then unset it for an individual request? Additionally I feel that the best policy is to report the error to sentry without the heavy extra payload (or breadcrumbs or stack) rather than simply failing on the client... As many errors which can be caught in the use error reporting libraries should be reported to the error monitoring service IMO, . Yeah I see that that is an issue - I looked at doing this myself. But Im\nnot suggesting trying to prune dynamic parts of the data - Im suggesting\nonly sending the parts that are truly essential and which cannot\ncollectively be too big. My suggestion would be: on a '413 Request entity\ntoo large' sentry retries the same request, but this time without sending\nextra, breadcrumbs and stack (and any other data which could be\n(realistically) unbounded in size).\nOn Thu, Oct 19, 2017 at 1:32 PM, Kamil Og\u00f3rek notifications@github.com\nwrote:\n\nIt is indeed a global callback, which will be called for every event.\nAdditionally I feel that the best policy is to report the error to sentry\nwithout the heavy extra payload (or breadcrumbs or stack) rather than\nsimply failing on the client...\nIt's not that easy to do. We cannot simply calculate the size of the\nrequest and strip something if it's too large. We have to be performant and\nlow in size. Adding something like this would require serialization of a\nwhole payload, calculating the size and recursively trying to get it down\nto \"sendable\" size, which can be just too heavy process if someone will\nsend tenths of errors in a very short period of time.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/339#issuecomment-337880491,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAlhcP5xGZObiITHpqQV039kBtdbPaY4ks5stzNIgaJpZM4D2Amd\n.\n. > 413 detection may very well be something that should live inside of Raven, but in the mean time, this would be a nice escape hatch and would let the community explore ways to handle 413 errors.\nThis topic is especially interesting to me, since raven-for-redux force users to manually trim down their data in order to avoid hitting the size limit, and I currently feel like I may be doing more hard then good, since I am leading them down a path which may very well be silencing real errors in their apps.\n\nI agree that 413 should live inside of Raven, but even just making it easier to implement your own 413 handling would be a big improvement. \nCurrently struggling to balance:\n- Sending as much relevant redux state\n- Not going over the size limits (both 100K and the imposed size limits per top level value in extra (I destructure my redux state for this)\nThe issue is that our redux state can vary tremendously in size & 413s can be occurring despite the trims. Redux state is a nice to have when debugging, but if it leads to a nontrivial probability the error wont be reported due to a 413, then its not worth it IMO. So no redux state in sentry :(. Sending just a bounded size subobject of the redux state is tricky and much less useful than having a more complete version. Additionally trimming dynamically makes it harder to debug because you don't know whether missing data is the source of the bug, or just a result of trimming..... I almost want encode and compress the whole state. With the new @sentry/node and @sentry/browser packages, how are we supposed to handle code that can be run on the server or the client (ismorphic)?. I'm getting the same thing. Why is raven-js/src in my webpack prod bundle???. Cheers, hope this helps track down the issue!\n```js\n// client.prod.js\nprocess.traceDeprecation = true;\nconst webpack = require('webpack');\nconst path = require('path');\nconst autoprefixer = require('autoprefixer');\n// Webpack plugins\nconst LodashModuleReplacementPlugin = require('lodash-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst WriteFilePlugin = require('write-file-webpack-plugin');\nconst ExtractCssChunks = require('extract-css-chunks-webpack-plugin');\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer')\n  .BundleAnalyzerPlugin;\nconst configuration = {\n  name: 'client',\n  target: 'web',\n  devtool: 'source-map',\n  output: {\n    filename: '[name].[chunkhash].js',\n    chunkFilename: '[name].[chunkhash].js',\n    path: path.resolve(dirname, '../build'),\n    publicPath: '/',\n  },\n  entry: [\n    'babel-polyfill',\n    'bootstrap-loader',\n    path.resolve(__dirname, '../src/clientRender.js'),\n  ],\n  resolve: {\n    extensions: ['.json', '.js', '.jsx', '.css'],\n    alias: {\n      handlebars: path.resolve(__dirname, '..', 'handlebars', 'runtime.js'),\n      components: path.resolve(__dirname, '..', 'src/components/'),\n      reducks: path.resolve(__dirname, '..', 'src/reducks/'),\n      shared: path.resolve(__dirname, '../../api/shared/'),\n      containers: path.resolve(__dirname, '..', 'src/containers/'),\n      consts$: path.resolve(__dirname, '..', 'src', 'consts', 'index.js'),\n      features: path.resolve(__dirname, '..', 'src/features/'),\n      helpers: path.resolve(__dirname, '..', 'src/helpers/'),\n      react: path.resolve(__dirname, '..', 'node_modules', 'react'),\n      '@fortawesome/fontawesome-pro-solid$':\n        '@fortawesome/fontawesome-pro-solid/shakable.es.js',\n      '@fortawesome/fontawesome-pro-light$':\n        '@fortawesome/fontawesome-pro-light/shakable.es.js',\n      '@fortawesome/fontawesome-free-brands$':\n        '@fortawesome/fontawesome-free-brands/shakable.es.js',\n      '@fortawesome/fontawesome-pro-regular$':\n        '@fortawesome/fontawesome-pro-regular/shakable.es.js',\n      'react/addons': path.resolve(\n        __dirname,\n        '..',\n        'node_modules',\n        'react',\n        'addons'\n      ),\n      moment: path.resolve(__dirname, '..', 'node_modules', 'moment'),\n      'moment-timezone': path.resolve(\n        __dirname,\n        '..',\n        'node_modules',\n        'moment-timezone'\n      ),\n      'react-dom': path.resolve(__dirname, '..', 'node_modules', 'react-dom'),\n    },\n  },\n  resolveLoader: {\n    alias: {\n      hbs: 'handlebars-loader',\n    },\n  },\n  module: {\n    noParse: /node_modules\\/quill\\/dist/,\n    rules: [\n      {\n        test: /bootstrap-sass[/\\]assets[/\\]javascripts[/\\]/,\n        loader: 'imports-loader',\n      },\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        use: 'babel-loader',\n      },\n      {\n        test: /.(jpg|png|gif|svg|ico|ttf|eot|svg|woff(2)?)(\\?v=\\d+.\\d+.\\d+)?$/,\n        use: [\n          {\n            loader: 'url-loader',\n          },\n        ],\n      },\n      {\n        test: /.(webm|mp4)$/,\n        exclude: /node_modules/,\n        use: ['file-loader'],\n      },\n      {\n        test: /antd..css$/,\n        use: ExtractCssChunks.extract({\n          fallback: 'style-loader',\n          use: [\n            'css-loader',\n            {\n              loader: 'postcss-loader',\n              options: {\n                config: {\n                  path: './postcss.config.js',\n                },\n              },\n            },\n          ],\n        }),\n      },\n      {\n        test: /.css$/,\n        exclude: /antd..css$/,\n        use: ExtractCssChunks.extract({\n          fallback: 'style-loader',\n          use: [\n            'css-loader',\n            {\n              loader: 'postcss-loader',\n              options: {\n                config: {\n                  path: './postcss.config.js',\n                },\n              },\n            },\n          ],\n        }),\n      },\n      {\n        test: /.scss$/,\n        use: ExtractCssChunks.extract({\n          use: [\n            {\n              loader: 'css-loader',\n              options: {\n                modules: true,\n                localIdentName: '[name][local]',\n              },\n            },\n            {\n              loader: 'postcss-loader',\n              options: {\n                config: {\n                  path: './postcss.config.js',\n                },\n              },\n            },\n            'sass-loader',\n          ],\n        }),\n      },\n      {\n        test: /.less$/,\n        use: ExtractCssChunks.extract({\n          use: [\n            {\n              loader: 'css-loader',\n              options: {\n                modules: true,\n                localIdentName: '[name]__[local]',\n              },\n            },\n            {\n              loader: 'postcss-loader',\n              options: {\n                config: {\n                  path: './postcss.config.js',\n                },\n              },\n            },\n            'less-loader',\n          ],\n        }),\n      },\n    ],\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production'),\n      },\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      names: ['bootstrap'], // needed to put webpack bootstrap code before chunks\n      filename: '[name].[chunkhash].js',\n      minChunks: Infinity,\n    }),\n    new ExtractCssChunks(),\n    new ExtractTextPlugin({\n      filename: 'styles.css',\n      // allChunks: true,\n      disable: false,\n    }),\n    // Nice to haves / Optimizations\n    new WriteFilePlugin(),\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static',\n      openAnalyzer: false,\n      generateStatsFile: true,\n    }),\n    new LodashModuleReplacementPlugin({\n      shorthands: true,\n      collections: true,\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true,\n      debug: false,\n      options: {\n        postcss: [\n          autoprefixer({\n            browsers: ['last 3 version', 'ie >= 10'],\n          }),\n        ],\n      },\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      beautify: false,\n      mangle: {\n        screw_ie8: true,\n        keep_fnames: true,\n      },\n      compress: {\n        warnings: false,\n        screw_ie8: true,\n        conditionals: true,\n        unused: true,\n        comparisons: true,\n        sequences: true,\n        dead_code: true,\n        evaluate: true,\n        if_return: true,\n        join_vars: true,\n      },\n      comments: false,\n    }),\n    new webpack.IgnorePlugin(/glyphicon.*/),\n    new webpack.ContextReplacementPlugin(/moment[/\\]locale$/, /en|de|nl/), // LOCALIZATION\n    new CompressionPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: /.js$|.css$|.html$|.eot?.+$|.ttf?.+$|.woff?.+$|.svg?.+$/,\n      threshold: 10240,\n      minRatio: 0.8,\n    }),\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production'),\n      'process.env.BABEL_ENV': JSON.stringify('es6'),\n    }),\n  ],\n};\nmodule.exports = configuration;\n```\n```js\n// .babelrc\n{\n  \"presets\": [\n    [\"env\", {\n      \"modules\": false,\n      \"targets\": {\n        \"uglify\": true,\n        \"browsers\": [\"last 2 versions\", \"ie >= 10\"]\n      }\n    }],\n    \"react\",\n    \"stage-0\",\n    \"jest\"\n  ],\n  \"compact\": \"true\",\n  \"env\": {\n    \"production\": {\n      \"only\": [\n        \"src\"\n      ],\n      \"plugins\": [\n        \"transform-react-remove-prop-types\",\n        \"transform-react-constant-elements\",\n        \"transform-react-inline-elements\",\n        \"transform-flow-strip-types\"\n      ]\n    }\n  },\n  \"plugins\": [\n    [\n      \"import\",\n      {\n        \"libraryName\": \"antd\",\n        \"libraryDirectory\": \"es\",\n        \"style\": \"css\"\n      }\n    ],\n    \"universal-import\",\n    \"transform-runtime\",\n    \"transform-decorators-legacy\",\n    \"transform-react-display-name\",\n    \"transform-react-stateless-component-name\"\n  ]\n}\n```. Thats what I figured.. Any ideas how I may debug the issue?\nOn Tue, May 8, 2018 at 5:36 PM Kamil Og\u00f3rek notifications@github.com\nwrote:\n\n@davidfurlong https://github.com/davidfurlong wellll... it's kinda\nlarge and very project-specific \ud83d\ude05I won't be able to extract the main\nissue from this thing. I somehow need someone to provide a minimal possible\nconfig that exposes the culprit itself.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/1238#issuecomment-387445300,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAlhcDF-a858KfGJmbN_ASgNxZ82QwVCks5twbtsgaJpZM4SPBAh\n.\n. \n",
    "paragjnath": "I have used this way. It seems working for me\nif (environment.production) {\nRaven.config('https://@sentry.io/')\n.install();\n}\nand in providers\nproviders: [environment.production ? { provide: ErrorHandler, useClass: RavenErrorHandler } : [], ...\nPlease let me know if I am doing anything wrong here.. I have used this way. It seems working for me\n`if (environment.production) {\n  Raven.config('https://@sentry.io/')\n  .install();\n}\nand in providers\nproviders: [environment.production ? { provide: ErrorHandler, useClass: RavenErrorHandler } : [], ...`\nPlease let me know if I am doing anything wrong here.. ",
    "sirtawast": "New docs here: https://docs.sentry.io/clients/javascript/usage/#raven-js-additional-context. ",
    "jwfearn": "Cool!\n. ",
    "burivuhster": "I've sent pull request to this fork. Could you please take a look at this?\n. ",
    "thruflo": "/me nods re: browser support, seems very wobbly in everything but FF.\nSidebar: I've been having some fun trying to debug Chrome.  Maybe my OS is too old (Chrome 27.0.1453.116 on OSX 10.6.8) but it only sends the Origin header with the request to get the first script tag in the page, e.g.:\n<html>\n  <head>\n    <script src=\"//d3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js\"></script>\n    <script>\n      Raven.config('https://public@getsentry.com/1').install()\n    </script>\n    <script crossorigin=\"anonymous\"\n        src=\"//s3-eu-west-1.amazonaws.com/thruflo-random-stuff/err.js\">\n    </script>\n  </head>\n  <body>\n  </body>\n</html>\nThis fails to add the Origin header to the thruflo-random-stuff/err.js request.  Move that tag above the raven.min.js tag and Chrome does add the header.  Also prepend the script dynamically and it adds the header, i.e.:\n<html>\n  <head>\n    <script src=\"//d3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js\"></script>\n    <script>\n      Raven.config('https://public@getsentry.com/1').install()\n    </script>\n    <script>\n      (function(d, t) {\n        var g = d.createElement(t),\n            s = d.getElementsByTagName(t)[0];\n        g.crossOrigin = 'anonymous';\n        g.src = '//s3-eu-west-1.amazonaws.com/thruflo-random-stuff/err.js';\n        s.parentNode.insertBefore(g, s);\n      }(document, 'script'));\n    </script>\n  </head>\n  <body>\n  </body>\n</html>\nDespite a successful CORS response to the err.js request (with Access-Control-Allow-Origin header, etc.) Chrome still then just reports a cryptic a Script Error.\no_O\n. ",
    "bgSosh": "So does this mean that there is no way to get it working cross-origin in chrome? (that jsfiddle doesn't work with chrome v27)\n. ",
    "polmiro": "Any news on this? I am also using a CDN for our assets. I can only make it work with Firefox 13+ so far. Any alternatives? I can only think of wrapping every callback witn Raven.wrap, but it would be quite an overhead and error-prone.\n.  Alright, thanks for the info @acdha \n. ",
    "umurkontaci": "Removed the license info, I'm not sure if MIT is compatible with BSD but it'll be fine, I guess.\n. @dcramer \n. I think raven-js has a set of plugins in the folder. And it does live in the separate library already but I think it is too little code to live somewhere else.\n. ",
    "benvinegar": "This should be possible using shouldSendCallback. Something like:\n``` javascript\nvar unloadOccurred = false;\nwindow.onbeforeunload = function () {\n  unloadOccurred = true;\n}\nRaven.config('YOUR DSN', {\n  shouldSendCallback: function () { \n    return !unloadOccurred; \n  }\n}).install();\n```\nSee Configuration in the docs for more.\n. As of 2.1.x, Raven.js supports column numbers in every \"modern\" browser besides IE8 and Android 4.1 \u2013\u00a04.3 (browser support table). Microsoft has also officially deprecated IE8 (and IE9 and IE10) in January 2016.\nGiven that no other user has brought this up in 2+ years, I don't think this is a concern anymore. I'm going to close.\n. Everyone who's commented on this \u2013\u00a0what's wrong with the solution by @karolisdzeja?\nUltimately, I'm not sure how we can add a feature to the Raven.js source that is supposed to work when Raven.js source isn't on the page. I think this will always ultimately be a custom solution; at best we could add a \"how to\" to our docs.\n. There's other downsides with doing this:\n\nBy relying on window.onerror to catch errors before Raven is loaded, stacktraces are not available for every browser\nbesides not having a stack trace, this will affect grouping negatively\nthis is why install() does try/catch instrumentation\nSynthetic traces will not work (they will all appear as originating from this code)\nNo breadcrumb collection\n\nSo, you're trading potentially better performance for lower quality error reports. If async execution is important, I'd sooner recommend you bundle Raven with your own code so that it is served together.. I think we'll probably just document an async snippet, like the ones provided above, but mention that it comes with tradeoffs.\nJust one other comment. Those tradeoffs might seem acceptable, but I deal with a lot of support tickets from users about low-fidelity errors they are experiencing that are (incorrectly) believed to derive from Raven.js. My fear is that if I encourage people to use the async approach, I'll have more and more people asking me \"why is there no stack trace\" and other complaints when it's because this approach is lower fidelity. I'm willing to accept that, but it's a tough pill to swallow. \ud83d\ude13. @oroce \u2013 yeah, this is 100% not a concern with people in this thread, but people who might pursue this strategy without understanding the caveats properly (e.g. just copy/pasting).\nI'll keep this issue open, with a plan to add the snippet to the Install docs \u2013\u00a0and I'll put a bunch of warnings all over the place.\nThanks again for your participation here / convincing me to do this.. Doesn't seem applicable anymore.. @numaanashraf \u2013 I think this patch is still in limbo and will likely end up closed. In the meantime, if you need to override the default request creator, you can do so by specifying a transport option in your Raven config.\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L748\n. Documentation for the transport config option is available here.\n. I agree with @mattrobenolt \u2013\u00a0I don't see us adding this into the core of Raven.js, because the behavior can be achieved with some custom code on top of dataCallback, and we're actively trying to keep Raven.js as small as possible.\nAlso, Sentry server scrubs sensitive data by default. So most users will not need this feature \u2013 which might explain why we haven't seen anyone comment in almost 1.5 years.\nFor these reasons I'm going to close this ticket for now.\n. This is not something that can be solved generically by Raven.js. You can't tell if <script src=\"/dist/jquery.js\"></script> has succeeded or not, without, say, looking if $ is present.\nIf you want to do this yourself, you could do something like:\nhtml\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>\n<script src=\"/dist/raven.js\"></script>\n<script>\nif ($) {\n    Raven.config('YOUR DSN').install();\n}\n</script>\n. Yeah, I'm going to prioritize this.\n. Fixed in #449\n. Docs finally added in #405\nYou can read them here: https://github.com/getsentry/raven-js/blob/master/docs/integrations/angular.rst\nAnd they'll soon be published at https://docs.getsentry.com\n. d0077c117001e2e4ac56bf5265e3c88569b9c45d. There is now Raven.setDSN that lets you change the DSN mid-page.. > I was actually a little surprised this wasn't already part of raven since it's pretty impressive in a lot of other cool ways. Depending on an app's architecture, there could potentially be a non-trivial percentage of the errors that are the RESULT of being offline.\nTotally fair. But I'm not sure it should be done by default. There are many scenarios where, if a script doesn't load, the app isn't going to work no matter what. And I would say most apps just straight-up don't work offline, and don't expect to. Whether that's good practice or not is another thing.\nIt's sort of why we don't log AJAX errors by default, even though a good chunk of Raven users have written code to do so. But we'll try to make it easy to do so if you want. And I'd like to do the same thing here.\n\nAlso, what's the \"DDN\" label mean?\n\nNot sure. @mattrobenolt?\n. We've since changed the plugins dramatically \u2013\u00a0they no-longer self-execute, can be tested, etc.\nClosing this ticket.\n. It is expected, albeit perhaps not straightforward.\ncontext basically produces a function that does this:\njavascript\ntry {\n  myFunc.apply(this, arguments);\n} catch (e) {\n  Raven.captureException(e, { tags: { foo: 'bar' } });\n}\nIf inside myFunc, Raven.captureException is called (but doesn't throw an exception), it has no knowledge of the tags you've set higher in the stack via context. context is just an alternate form of wrap, and poorly named; it doesn't \"set a context\" that is interpreted further below.\n. I don't see us using sendBeacon for a few reasons:\n\nIt means we can't respond to anything the server returns (e.g. we can't back off if the server responds with 429 Too Many Requests)\nIt means we can't have user-defined error/success callbacks\nWe'd still need to fall back to XHR for Safari, IE, and Edge anyways \u2013 which means multiple implementations, code bloat\n\n\nMain use case for this IMO is to catch errors which happen on or before unloading\n\nThe only way I see this working is if we ourselves instrument unload/beforeunload to record that, \"yes, the page is unloading\". Then we could switch to sendBeacon knowing that it might be the only reliable way to transmit data from that point, and we don't care about the response anyways (the callback would never fire since we're changing pages).. @mk0x9 \u2013\u00a0note that since this ticket was created in 2014, the Sentry server itself does automatic scrubbing of personally-identifiable information (PII).\nAlternatively, you can do it manually by using dataCallback to inspect (and remove) potentially sensitive outbound data.\n. It's been 2 years, nobody else has advocated for this change here, and we're probably going to change the API soon anyways. Closing.. Can any of you elaborate on \"won't work properly\"? Perhaps with a test case / JSBin example?\n. > So I'm a paying customer of sentry\nIn the future you should use the support email link from inside your account. This verifies you have an account with a support tier, and puts your issue inside our support queue where it gets prioritized / assigned.\n\ncare to elaborate on your solution? :smile:\n\nThe JSBin example you've provided calls install(), and appears to work as documented (every exception is caught and reported).\nThis edited version drops the call to install(), and works the way I believe you're intending (only manual calls to captureException are reported).\nIf this isn't what you're looking for, I strongly recommend moving this outside of GitHub and into a support thread. Just link to this issue and we can continue the conversation.\n. To raven-js there is no difference between:\nhtml\n<script>\n  throw new Error('Do not catch this')\n</script>\nAnd an external script that throws an uncaught exception, e.g.:\nhtml\n<!-- this one throws and I want to catch it (my application files for example) -->\n<script src=\"https://gist.githubusercontent.com/henrybaxter/af28cceb30b4bda21a55/raw/4c5f2891bcf3011221b6b6572ffd8fc29eeb042e/throws.js\"></script>\n... where throws.js contains throw new Error('catch this'). They are both uncaught exceptions; the origin of the file makes no difference. You need to use try/catch in both examples. (Again, assuming install() has been omitted.)\nIf your goal is to globally catch all of your exceptions, but not exceptions occurring from other people's source files, you should use the whitelistUrls or ignoreUrls configuration options and call install().\n. > install() plus whitelisting only my external source files => I miss manually caught exceptions on my main page\nIf you mean exceptions would be excluded from inline scripts, then yes. All your code is running \"on your main page\".\n\nFor example, if I'm writing a tracking script or a split testing service, I want to report only on the things I do wrong, not what else is going on on the page, nor the endless possible list of first or third party source files included in the page that I cannot know about.\n\nThere are many users of raven-js/Sentry that use this scenario. They whitelist their own script URLs. If your tracking script is wholly embedded inline inside a <script/> tag, that will be trickier. But you really should not be encouraging users to embed much (if any) code inside an inline <script/> tag. For example, the Google Analytics script snippet is like 10 lines of code, which simply pulls down an external script that contains most of your application.\nIn any case, I think this needs to go to another GitHub issue (if not a support ticket), because I don't think what you're describing matches the original issue (that Raven.captureException \"doesn't work\" without first calling install()).\n. Closing this because Raven.captureException works without calling .install today.. Echoing @matthewwithanm \u2013 :+1: to having each plugin in its own module.\n. Do you have a sample page?\nI just tried browserify-ing the following code:\njavascript\nRaven.config('http://foo@@example.com/1').install();\nAnd, using the same Raven script (1.1.15), I get the following:\nUncaught RavenConfigError: Invalid DSN: http://foo@@example.com/1\n. Yeah, I don't think the format of the DSN matters (although I did try a real one w/ the same errant @@). The parsing is wrapped in a big try/catch.\nReally feels like an environment thing.\n. More or less implemented in #381\n. Not sure how best to test this, or if there are any plugin tests to begin with.\n. #268 is a broader, better solution, IMHO. It also covers cases where jQuery library users choose to use $.Deferred themselves.\n. There's also not a really easy way to say \"limit this to 100kb\". Users can pass extra values with arbitrarily deep objects and sub-objects, so we'd need an algorithm that basically traverses the entire tree and decides where to trim large items. And there's a ton of tricky cases to handle, e.g. how does it know that an array of 100 small items is less bytes than an array of 10 items with large items? This algorithm could become really complex, really fast.\nWe've experimented with payload size, and found that for a typical maxed out stack trace, and 100 breadcrumbs, the payload is roughly ~15 KB. That's not a lot of bytes for a ton of information. Users only really hit the 100kb limit if they add arbitrarily large arrays/objects to extra manually.\nI think if anything, we should add a note to the extra config warning that there is an upper size limit, and users shouldn't indiscriminately add complex objects of unknown size.\n. We've added a transport configuration option that lets you override the default transport mechanism (documentation).\nCan you take a look and verify that this will work for you?\n. :+1: \n. @statianzo \u2013\u00a0Closing, and thanks.\n. I can verify that the Android browser from Android 4.1 through 4.4, seemingly from 3rd-party Android phones (e.g. Samsung, HTC) are similarly affected by this issue. I cannot confirm if Nexus phones are affected.\n. @d10 \u2013\u00a0I've experimented with that, but I can't find a real browser to verify that it works. I've tried emulating Android 4.1 \u2013\u00a04.4 on BrowserStack and using the stock Android browser, but they report errors just fine.\n. @rollokb \u2013\u00a0that commit looks great. Let me know how it goes in production; I'd be glad to merge it into master afterwards.\n. > Seems to be working fine, but only with Events which I've trigged myself. Still getting absolutely no information about the contents of the Event.\nThe problem is likely here:\ndiff\n+        for (var property in event) {\n+            if (event.hasOwnProperty(property)) {\n+                options.extra[property] = event[property];\n+            }\n+         }\nBy checking hasOwnProperty, you're not going to get any properties that derive from Event.prototype. Unless these affected browsers are doing as you do in your test \u2013\u00a0placing properties directly on the Event object they create \u2013 we won't see any data.\nThe flip side is, if you remove that check, we're going to get a bunch of properties that have nothing to do with the error. But it might be worth seeing that that looks like.\n. Cool. Again, I appreciate you digging into this.\n. Via kmiyashiro/grunt-mocha\nhttps://github.com/getsentry/raven-js/blob/master/Gruntfile.js#L193\n\nIt seems to handle event properties incorrectly (i.e, it sees all Event props as its own).\n\nYou could try mocking an Event object that is behaves the same as is observed in Chrome/some other browser. (Hopefully the legacy browsers sending these objects feel similarly.)\nYou could also try getting the tests to run Phantom2 to see if the behavior is more accurate. I believe they run 1.9.8 right now.\n. @rollokb \u2013 any news on this?\n. > I got hundreds of those today from Facebook Browser v80 on Android 4. That is not really old, is it?\nI'm pretty sure \"Facebook Browser\" is just Facebook wrapping whatever the internal web browser is.\nBasically, this error only crops up in a bunch of international versions of Android phones. Take a look at your device list when you see such errors, you'll notice they have device codes like Samsung GT-S8600 \u2013 which are not North American/Western models.\nThey appear to be using some fork of a browser that purports to be \"Chrome Mobile\" or \"Android Browser\" (user agents are easily faked), but appears to have a different Error object signature. I've had a hard time reproducing the error (including trying to purchase some of these phones for use in the office), but I'll likely give it another go sometime soon.\n. So, as of 3.7.0, we now generate synthetic traces for [object Event] and other caught non-Error objects. I'd recommend trying 3.7.0 and seeing what results you get.\n. > @benvinegar I have 3.7.0 installed, but getting this error\nYou would still get it. The difference is that it should generate a synthetic stack trace. However, if it is caught because it bubbles up to window.onerror, the stack trace might not be helpful (but it would tell you that's how it's being caught).\n. :+1: \n. @benoitg: Is the root issue here that you would like to debug your usage of Raven.captureMessage, without sending the data to Sentry?\n. Okay, thanks for giving me a better understanding. And I appreciate you taking the time to put together this PR and work through it with us.\nSo, after looking everything over, I kind of agree with @mattrobenolt that this should be enabled by setting Raven.debug to true. I don't like that there's implicit debug logging without enabling it. And it seems like the only blocker to using Raven.debug is that isSetup spams a bunch of redundant log messages when debug mode is enabled.\nSo how about this ...\n- We change isSetup to only output a warning once per page.\n- Then we change makeRequest to output what would have been logged, if Raven.debug is true, regardless of whether Raven is configured.\nAfterwards, we could encourage users developing locally to always have Raven.debug = true.\nI can also complete the remaining work to make this happen. Your call.\nThoughts?\n. > I believe someone without a server configured, and now wanting a console output to be a bit of a corner case for most applications.\nI think my preference is to avoid extra configuration parameters \u2013\u00a0at least, until we're sure we need it. Right now Raven.debug does so little (literally only affects 2 calls to logDebug), so I think this is fair game.\nI'm going to go ahead and make the changes I suggested, but by all means, lets come back to this in the future if it needs additional tweaking.\nThanks @benoitg.\n. Merged as part of #368\n. @benoitg I just fired up an example, and it seems to work for me:\nhtml\n<script src=\"../src/raven.js\"></script>\n<script>\nRaven.captureException('test'); // NOTE: Raven not configured\n</script>\nI get this on the console:\nRaven about to send: Object {project: undefined, logger: \"javascript\", platform: \"javascript\", request: Object, message: \"hi\"\u2026}\nError: Raven has not been configured.\nAm I missing something?\n. Right. But everything I've read suggests that console.error shouldn't interrupt control flow:\nhttp://stackoverflow.com/questions/25377115/what-is-the-difference-between-throw-error-and-console-error\nhttps://developer.mozilla.org/en-US/docs/Web/API/Console/error\nI'd rather find the true source of the bug, if possible. Are your pages public anywhere? Or can you try to recreate in a limited example?\n. It's also worth pointing out that this would have absolutely triggered test failures:\njavascript\nit('should log an error message, the first time it is called', function () {\n  hasJSON = true;\n  globalServer = undefined;\n  isSetup();\n  isSetup();\n  assert.isTrue(window.logDebug.calledWith('error', 'Error: Raven has not been configured.'))\n  assert.isTrue(window.logDebug.calledOnce);\n});\n. @benoitg Awesome \u2013\u00a0I knew there was a deeper issue here. We are going to put together a patch to address this.\n. Seems like it'd be easier to just store var originalConsole = console at the top of raven.js.\n. :+1: \n. Yeah, you're right. The problem is that console itself doesn't get replaced \u2013\u00a0it's the methods on console. So we didn't fix anything.\nWe'll likely need to preserve all of the console methods.\n. I decided to put together a more permanent solution. Take a look at #375.\n. Closed in favor of #375 instead.\n. @benoitg Awesome. And thanks for submitting the other PR and not letting us get lazy about this. I really appreciate it, seriously.\n. :+1: \n. Source map issues like the one described are triggered by the Sentry server, not raven-js. And as mentioned earlier, it is typically a problem with source map generation.\nIf you are a hosted sentry.io customer, I recommend emailing support. Otherwise, reach out on the forums.. :+1: \n. Thanks!\n. Re Uglify \u2013\u00a0not sure. But I think it should work with/without minification, IMHO.\n\nAnd/or can we get our linter to handle this?\n\nIt appears the laxcomma JSHint rule was deprecated:\nhttp://jshint.com/docs/options/#laxcomma\nI'm in favor of switching to ESLint, as we've done with the main Sentry project.\n. Note this will require a dist build after merging.\n. You don't. It was just there to demonstrate \"this is a React app\". It should probably be removed.\n. Yes. It's odd that React native would name it bundle.js and not something like bundle.js.map.\n@qbig \u2013\u00a0btw, if you need a hand with sourcemaps and/or our React integration, you should contact support (if you are a hosted customer) or leave a message on the Sentry Google Group.\n. > We don't support PhantomJS\nWell, that's not necessarily true. Some users use Raven.js + PhantomJS in part of their automated testing. But I think for this issue, which is 2 years old, has no actionable information, and no one else has surfaced, we can safely close.. @hermansje \u2013\u00a0in this example, you are using both the Angular and console plugins. Angular logs errors onto console.error, which is what causes Raven.js to pick it up a second time via the console plugin.\nAlso, the error is technically different, because only the first report contains a stack trace. The second doesn't have a trace because it is just being logged via captureMessage (via the console plugin). I don't consider this a bug; just a quirk of Angular that doesn't play nicely with the console plugin. At best, it is a separate issue.\nClosing this ticket because the original submitter did not provide example code, and I don't think this example qualifies.\n. > I don't understand why the test to ensure the prototype isn't copied exists at all. It seems reasonable to me to just remove that test\nAgreed. I think this patch is correct (hi @jlfwong).\nHopefully this doesn't bite anyone randomly when upgrading.\n. :+1: (i think)\n. :+1: \n. Chrome no longer triggers onerror if you throw errors in the console. You have to at least wrap it in setTimeout now, which feels like someone has to at least go out of their way to make trouble (and I'm not sure we ought to stop them, since people legitimately test Raven.js this way).\nClosing unless I'm missing something.. Something seems fishy about this. require-ing a module shouldn't invoke that module twice. It is executed once, and the exported value is stored for a subsequent require.\nIs it possible to get some example code exhibiting this phenomenon?\n. > Or are you saying, that this would never get invoked twice?\nIt shouldn't. But I'm dumb / could be wrong.\n. We've made a bunch of CommonJS improvements in 2.0. Since this ticket doesn't report any concrete problems we can check against, I'm going to close this ticket.\n. Oh, I see, the problem is in the diff:\n\nIf you load and install Raven using commonJS you should be aware that multiple require's will overwrite the window.Raven instance and thus give you a Raven instance that is not configured.\n\nAnd yeah, this is fixed.\n. How about this. You can either use the callback method setTransport, or you can use the transport config key, which accepts either an object or a string keyword.\ne.g.\njavascript\nRaven.config({\n  transport: 'xhr-post'\n}).install();\nor\njavascript\nRaven.config({\n  transport: Raven.POST // or XhrPost or XHRPost\n}).install();\nI think XHR and POST are more important keywords than CORS.\n. One goal I know @mattrobenolt had with Raven.addPlugin was to allow it so that you could load Raven + plugins before libraries like Angular. Unless I'm missing something, with this change, that won't be possible.\nBut it seems that this patch would be necessary for #414 \u2013 i.e. the pain about gaining access to Raven in the Angular ecosystem before install is called is real.\n@mattrobenolt \u2013\u00a0thoughts? Maybe we have to rethink install/addPlugin?\n. @Sija \u2013 if you can rebase this / resolve conflicts, I'm fine with merging.\n. Why couldn't we have RavenProvider just be an alias to the global Raven, and then you call Raven.config().install() in there?\ne.g.\njavascript\n function RavenProvider() {\n     this.$get = ['$window', function($window, $log) {\n         return $window.Raven;\n     }];\n    return Raven;\n }\nthen:\njavascript\n// configuring Raven during the `config()` phase\nangular.module('app', ['app.config', 'ngRaven'])\n.config(function (RavenProvider, EnvironmentConfig) {\n  RavenProvider.config(EnvironmentConfig.raven).install();\n});\nI'd prefer to avoid having to recreate API wrapper methods inside RavenProvider, if possible.\n. Also ... I don't think this patch works without #413\n. We absolutely want to do the Angular-specific thing here (and to be clear, my experience here is basically messing w/ tutorials). But specifically, I want to avoid this, where every Raven API method is reproduced inside of this plugin. E.g. if we introduce config and install methods, how long until we have to add the others?\nBut if I'm reading about providers correctly, it seems like this is a special one-off configuration pass, and this should be the exception, not the rule.\nWould love it if some other Angular developers could chime in on this. cc @sija\n. > Off the top of my head, a possibility could involve some context binding..\nThis only seems necessary if we think a method like Raven.captureException needs to be called from the config call (possibly, but hopefully not).\nI'd also prefer to avoid wholesale copying over method references. Your first suggestion about returning Raven would have worked fine. Note that Angular calls new on the provider, so you effectively get:\njavascript\nnew function () {\n   this.$get = function () { ... };\n   return Raven;\n}\nWhich is fine ... the object created by new is discarded.\n. Hmm, yeah, lol :)\n. Yeah, restricting it to config and install is more amenable to me.\nLet me discuss the patch w/ @mattrobenolt (and/or others) and get back to you.\n. Question: is this also acceptable?\njavascript\nfunction RavenProvider () {\n  this.Raven = window.Raven;\n  this.$get = [..];\n}\nthen:\njavascript\n// configuring Raven during the `config()` phase\nangular.module('app', ['app.config', 'ngRaven'])\n.config(function (RavenProvider, EnvironmentConfig) {\n  RavenProvider.Raven.config(EnvironmentConfig.raven).install();\n});\n. @kukac7 \u2013 I'm putting up some examples today. Sorry, bear with me.\n. > and the above problem you could have something to say?\nThe 2.1.0 release from earlier this week builds proper distributable version of angular.js (/dist/plugins/angular.js).\n\nwhich one is good?\n\nIt should be Raven.config(config).addPlugin(Raven.Plugins.Angular).install();\n. @ethanresnick Sentry has full client SDK documentation that you can use as a reference point. Raven.js implements this spec.\nHere's a detailed description of the stacktrace interface.. I've tested / verified the latest version with a grab bag of browsers:\n- Chrome 46\n- Firefox 41\n- IE10, IE11\n- IE8, IE9 (XDomainRequest)\n- Edge\n- Safari 5\n- Android 4.0.4 Stock Browser\n. Hmm, so now that I see StackTrace is a singleton ... and it maintains state (e.g. TraceKit.remoteFetching and TraceKit.linesOfContext), that means that two distinct Raven instances will just fight over TraceKit state ...\nSo, beginning to wonder if this is a good idea or not (class instances).\n. > Already implemented\nIt is? I think we have an example implementation in the docs (tips and tricks), but there's nothing in the /plugins folder.. Now, an argument could be made that an unhandled promise rejection shouldn't be caught by Raven ... because sometimes you intentionally choose not to handle rejection.\nAn example in non-Promise world would be to create an XMLHttpRequest without a traditional error handler (e.g. no error property in $.ajax). If you forget the error handler this way, there will be no console exception. But, if you use promises with $.ajax and omit catch, the same failure will throw an error.\n. Why you talkin' that way 'bout my momma?\nBut that's a great example, and in this case, absolutely it should be caught.\nNow ... do we add this to the \"react\" plugin? Or do we add a \"promises\" plugin, and then instruct React users to use this? Or just make it on by default? cc @mattrobenolt \n. @joaocunha \u2013 so @mattrobenolt and I have had a discussion about this. It seems like ~~React~~ your module loader has wrapped loading the module in a try/catch, and instead of re-throwing the ReferenceError, it passes it down via the Promise rejection. Because the error isn't actually thrown, our onerror handler doesn't catch it and we instead get this Unhandled promise.\nSo ... we feel this might be a ~~React~~ module-loader-specific thing. ~~We're going to dig further into React, make sure we have a good handle on this, then get back to you.~~\nIf anyone has similar examples re: uncaught promise rejections, we'd love to hear 'em.\n. @joaocunha \u2013\u00a0looking at the code above, it looks like you could do the following as a workaround:\njavascript\nwindow.onunhandledrejection = function(data) {\n    Raven.captureException(data.reason);\n}\n. Oops wrong button :)\n. Note that we've since documented how to work with Promises in the docs: https://docs.getsentry.com/hosted/clients/javascript/usage/#promises\n. @jabooth \u2013 thanks for linking this.\nI'm still not sure that this should be done by default, though. I think the code example we've added to the docs is fine for now.\n. @joaomilho \u2013\u00a0Oops. I'm looking for a specification for PromiseRejectionEvent, but I can't seem to find out.\nBut from your example above, and from the relevant Bluebird tests, it looks like the Error object is the reason property. In which case, I'd do:\njavascript\nwindow.addEventListener('unhandledrejection', (err)  => {\n  Raven.captureException(err.reason);\n});\nI'm going to update the docs.\n. @joaomilho \u2013 So, I played around with this, and the thing is, reason is non-standard and could contain anything. It could be a string, it could be an error, etc.\nThe examples from MDN actually demonstrate passing both an error and a string: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\nThe problem here is that Raven.captureException purely captures Error objects, and Raven.captureMessage captures strings.\nPerhaps the best solution is:\njavascript\nwindow.addEventListener('unhandledrejection', (err)  => {\n  var reason = err.reason;\n  if (err instanceof Error) {\n    Raven.captureException(reason);\n  } else if (Object.prototype.toString.call(reason) === '[object String]') {\n    Raven.captureMessage(reason);\n  }\n});\nWe could also introduce a function, say, Raven.capture that tries to call the appropriate function based on the type of the passed arguments.\n\nEdit: @mattrobenolt points out that Raven.captureException automatically falls back to messages, so this if statement is not necessary. Just use captureException.\n. Bam, perfect.\n. @joaomilho \u2013 any chance you could throw up a JSBin of a fully-functioning example?\n. > I'm using Babel (which uses core-js), to get it to work there I've had to ...\nPainful. If I'm reading this correctly, I guess this is because Babel sees the native Promise, and doesn't bother to polyfill. Except, native Promise doesn't support onunhandledrejection in (any?) browsers.\nHmm, I wonder how we should document this ... or perhaps open a ticket on Babel?\n. > Oddly enough, I see the rejection on raven.js:278 in the wrapped function.\n@jessepollak \u2013\u00a0Raven.js wraps async methods in try/catch for uncaught exceptions (literally throw X), but that does not cover uncaught promises. The stack trace via the console still shows the wrap, though.\n\nwhat's the TL;DR solution here?\n\n@MarkMurphy \u2013 We're going to make it a config option soon-ish, but in the meantime you can implement yourself pretty easily:\nhttps://docs.sentry.io/clients/javascript/usage/#promises\n. @llonchj \u2013\u00a0data.headers here is descriptive data about the event, not the actual headers used in the HTTP request to communicate with the Sentry server.\nIf you add this line, it means that the event itself via the UI will show \"X-Sentry-Token\" in the \"HTTP Request\" section:\n\n. @d10 \u2013 sorry for the slow reply, we were focused on putting out 2.0.0 at this time and were actively trying to avoid any API changes.\nI agree that this should be possible, but I think it requires an overhaul of how Raven handles events (e.g. replacing the undocumented DOM events API that exists currently).\nProbably something we'll look at in 2016.\n. > This is against branch 2.x\nLooks like you accidentally targeted master in GitHub. Unfortunately GitHub doesn't let you change the target branch, so you'll have to re-open this as a new PR against 2.x.\n. Oh, and @mattrobenolt reminds me \u2013\u00a0we can't accept this patch.\nIf we specify this Content-type header value, browsers will trigger an OPTIONS preflight request as part of CORS. It also means this request will not work at all in IE8 and IE9, since they have more limited CORS implementations.\nmore here: http://stackoverflow.com/a/12320736\n. Yeah React Native basically ignores cross-origin rules. We can implement this in the React Native transport.\n. Matches the UMD project's header, so it's k. But a heads up\u00a0\u2013\u00a0we may not cut another 1.x branch, and on the 2.x branch we're using a tool to generate this header for us.\n. > Yeah. We should close this here and do this in UI/processing.\nWhy? Users will get \"Script error\" basically forever because of extensions. I'd rather surface it in developer tools console, because it is likely not to be extensions if it is the developer's own browser.. No, they're suppressed client-side by default. Specifically, \"Script error\".. > Because I don't think anyone is going to notice them in the developer console.\nBased on feedback, support issues, etc., I believe many folks have their console open when they're first setting up Sentry. For example, I've spoken to people who've attempted to (erroneously) trigger errors from the console \u2013 unaware that Chrome will purposely suppress those from reaching onerror, so they're never picked up by Raven.. Per the title, I think #861 solves the crux of the title / conversation in this issue. Closing.. @Sija @odedfos \u2013 can you comment on #414? Like, will that PR address this issue?\n. @alexjilkin \u2013\u00a0can you give us some context on what's happening here? Why would you need to configure Raven twice?\n. @mattrobenolt \u2013\u00a0I'll add a test, since the TraceKit specs don't actually cover this.\n. :+1: \nShould help those Angular messages.\n. Mmm. Yeah, let's remove it ... and if it truly becomes a problem, reinstate it. (I'm guessing it wont.)\n. Works for me.\n. So, this isn't very Bower-friendly, but you can link to or copy one of the pre-built plugin bundles from the Raven CDN, e.g. https://cdn.ravenjs.com/2.0.0/console,ember/raven.min.js\nYou can also build your own by cloning the raven-js repo and running grunt build.\nBut ... you're right. We should probably have script-includable plugin files built inside the dist folder for usage with Bower.\n. :+1: \n. :+1: \n. @jpatel3 \u2013 Raven 2.0 requires Sentry server version 8. You can use Raven 1.3 in the meantime.\n. It might be hard to spot, but we made this note on the Raven 2.0.0 blog post announcement, and added a note in the raven-js README:\n\nRaven.js v2.0 requires Sentry v8.0.0 or later.\n\nBut I agree, it should be more obvious.\n. > Reading the Raven implementation it looks like you all are wrapping open(). You're probably aware this requires the consumer to define their event handlers before calling open() while the object's interface doesn't impose order for async requests.\nYeah, you're right.\nI wrapped send originally ... but I remember running into something that caused me to switch to open. For the life of me I can't remember what it was right now.\n. > Our team opted to target send() and wrap the event handler asynchronously. This has seemed to handle any order of calling send(), open() and defining the event handlers. Of course it relies on the request being async.\nAh, I think this might be related to what I was encountering. I believe onreadystatechange gets called as soon as you call send, synchronously, to indicate that the request has started, and this was causing me difficulties.\nI'll definitely re-explore this pronto and see if we can get the right behavior in place for 2.1.0.\n. Sweet, taking a look now.\n. After I run grunt dist, I get the following:\n```\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\ndist/angular.js\ndist/angular.min.js\ndist/angular.min.js.map\ndist/console.js\ndist/console.min.js\ndist/console.min.js.map\ndist/ember.js\ndist/ember.min.js\ndist/ember.min.js.map\ndist/require.js\ndist/require.min.js\ndist/require.min.js.map\n\n```\n... and an empty directory, dist/plugin.\nCan we change it so that the plugins are built into dist/plugins/* (note plural plugins, matching src/plugins)?\nThe temp directory build/plugins should also be the plural form of plugins.\n. @floriangosse \u2013\u00a0do you mind me asking, are you using Bower with RequireJS? Or just loading these scripts as-is?\n. Also, I notice every file here has the same UMD wrapper, caused by this Browserify config.\nAfter a discussion with @mattrobenolt, I think what we want is for each of these plugins to have its own unique UMD wrapper, whereby each plugin can be loaded via CommonJS, AMD (Require.js), or globally on the window via Raven.Angular, Raven.Console, Raven.Ember.\nWe'd also prefer to remove the auto-install behavior of the plugin build we created for the CDN; we did that to preserve backwards compatibility with CDN users, and it's not something we want to continue (we have a long-term goal of moving plugins into their own repositories so they can be versioned independently).\nIn that scenario, you'd have something like:\nhtml\n<script src=\"bower_components/dist/raven.js\"></script>\n<script src=\"bower_components/dist/plugins/angular.js\"></script>\n<script>\nRaven.config('DSN').addPlugin(Raven.Angular).install();\n</script>\nAt this point, we're talking about quite a lot of changes, so it's not necessary for you to put this together for us (we'll it). But if you want to charge forward anyways we'd be glad to assist.\n. Closed in favor of #476, which was merged. I kept your original commit though @floriangosse \u2013\u00a0thanks again for your contribution.\n. @philipbjorge \u2013 Damn. I'm sorry about this. We did two release candidates for 2.0.0, and I had hoped that these kind of issues would get revealed earlier ... but I don't think we had enough testers onboard.\nI'm going to make it my priority to fix this today.\n. @philipbjorge \u2013\u00a0Any way I can see this live?\n. Confirmed failing case:\n``` javascript\ndocument.addEventListener('ravenSuccess', function () {\n  foo(); // undefined\n});\nfoo(); // undefined\n```\nThis triggers an infinite loop where, in Raven.js's XMLHttpRequest code, it calls a success callback, which triggers another error, which calls the XMLHttpRequest code, which calls a success callback, which triggers another error, which ...\nIt's worth noting that these event handlers are undocumented, and we're going to replace them with something that doesn't depend on the DOM event implementation ... but all the same, should fix this.\n. ^I'm not sure what the right fix here is. Even if we use the \"original\" XMLHttpRequest, if the user does anything asynchronous in the callback (e.g. via setTimeout), they'll trigger the onerror handler anyways, and we can still arrive at an infinite (asynchronous) error feedback loop.\nBasically, using the unwrapped XMLHttpRequest will decrease the likelihood of this occurring, but getting to a bad place is still possible.\n. @jgerigmeyer \u2013 so, I've been playing with this for a bit (debugging Google Maps' minified code), and the issue appears related to the addEventListener wrapping we do in 2.0.0 (as part of our goal to get more complete stack traces in all browsers).\nStill digging 'cause this is tricky to step through. I recommend reverting to 1.3.0 in the meantime.\n. @jgerigmeyer \u2013 we will push 2.0.2 with the fix this afternoon. Thanks for your help.\n. It should probably be dist/raven.js. I forgot that there are some final built things like the version.\nI'll make an update.\n. Okay, just experimented w/ this. It's not as simple as just pointing to dist/raven.js \u2013 Browserify wants to look up the original src files, whose paths don't match up because of the new raven.js location.\n. > Would it be worth noting that in older browsers that we don't support, Raven should still fail gracefully?\nDo we know that, though? If I make that statement, I feel we're committing ourselves to testing every deprecated browser to ensure that Raven.js fails gracefully.\n. @mattrobenolt \u2013 could you look at latest changes? I attempted your feedback (or tried to).\n. @qbig \u2013\u00a0I notice this is when running on Android. Do you get the same exception from the iOS simulator / iOS devices?\n. @qbig \u2013 any news on this?\n. Sentry now has a first-class React Native plugin that combines both JavaScript and native (iOS) frames in stack traces.\nClosing this issue.. Thanks @mseeley!\n. A wild @gabalafou appears.\n. Have you tested this w/ the console plugin (plugins/console.js)? The purpose here was to use the original prototype method \u2013\u00a0not just the console object \u2013\u00a0in case log or warn itself is overwritten by Raven and we end up in some kind of infinite loop.\n. For background, this was the original problem: #373\nAnd my patch: #375\nI think ... \"skip debug logging in IE<10\" is a potential solution. Does this strictly affect apply? What about call?\n. We can't use Function.prototype.bind \u2013 it's not supported by IE8 (which Raven.js is supposed to support).\nI'd probably try and find a way to remove the bind call from console.js too. I imagine this was added mistakenly, but at least you have to opt-in to using plugins.\n. @gabalafou \u2013\u00a0if you change it to bail out if it cannot call the original prototype method, e.g.\njavascript\ntry { /* log thingy */ } catch (err) { /* skip debug logging IE<10 */ }\nI'll accept and merge. Thanks for your help btw.\n. Brilliant. Let me just verify this and we're golden.\n. Hmm, in hindsight, I really should've asked you to squash these first. Oh well.\n. @mattrobenolt \u2013\u00a0Yeah.\n. Closed, see #484\n. @Sija \u2013 That's a good idea. I'll make that change, barring any objections from comments here.\n. cc @mattrobenolt\n. Okay, going to merge this in for a 2.1.0-beta release today. If we hit any snags we can follow up w/ fixes before 2.1.0 goes out officially.\n. Thanks for reporting this.\nMy first inclination is to have both plugins just dig into Raven's internals and wrap this._globalOptions.dataCallback (option 1), since that will quickly fix the problem and doesn't require us to modify Raven's public API. Since these are plugins maintained by us, I think touching the private API is okay.\nThe flip side is that this is a recurring problem, and I'd like to see a longer term fix (e.g. addDataCallback or some other generic event API). But we've introduced a lot of thrash to Raven recently, and I think I'd like to hold out just a little longer on this.\n. cc @mattrobenolt \n. Hmm, thinking about this more, just wrapping the internal callback can still result in situations where the callback is clobbered.\nFor example, if you call setDataCallback after install, it would clobber any plugin's callbacks:\njavascript\nRaven\n  .config('DSN')\n  .addPlugin(Raven.Plugins.Angular)\n  .install()\n  .setDataCallback(myDataCallback);\nAdmittedly, that's not how we document this in the docs, but it could happen. Hmm.\n. Wow, how'd I miss this ... for every 2.0.x release ... facepalm\nThanks!\n. @geotob \u2013\u00a0Sounds like #446\nHow are you loading these files? <script> tags? Or with a module loader?\n. @GeoTob Thanks for clarifying. I've already merged that PR and I am going to put out a 2.1.0-beta release shortly that should solve this.\nClosing because dupe.\n. @GeoTob \u2013\u00a0you're totally welcome to, but yeah, I'd probably wait for 2.1.0 to land / go live. I'm also perfectly content doing the docs myself (it is my job, after all), in which case I'd be awfully glad to have you as a reviewer. Your call.\n. This happened. Examples:\n\nEmber\nAngular 1\nAngular 2. This was a bug w/ our Chrome parsing, not Firefox (addressed in 3decf8fbda54ab73c4a729aaf80ba60802af9538). I can't seem to find anything wrong w/ Firefox atm.\n. We haven't been able to reproduce this, either in tests or with Firefox exceptions we're seeing in Sentry. Closing until we have a reproducible example.\n. My only concern here is that we blow up memory usage by automatically collecting extra attributes, since raven-js can't gzip like raven-node does.\n\nThe callback approach seems easiest, but we'd need dataCallback to accept a 2nd argument (the original error), but we've already started using that argument to pass an \"original\" callback if one existed previously. I'm not fond of a dataCallback signature that looks like function (data, originalCallback, originalError).\nSigh.. Is that a +1 or is that \"I'm on the case\"?\n. Okay, cause it looked like a detective chipmunk.\n. > It's not obvious if Raven itself is causing the error, or if it is just dying handling another error?\nI don't want to rule anything out, but judging by the error message, \"evaluating f.abort\", I feel like this is a legitimate error. This is a very simple line of code, and it only fails unless this or func have changed in an unexpected way \u2013\u00a0neither of them are altered inside this function.\nIs there only a single frame? Is this application public, or somewhere where I could run it / attempt to trigger this bug? I'd be glad to debug if I could reproduce somewhere.\n. @christopherstott \u2013\u00a0any news on this?\n. > The 'redbox' would not show up and also no error message would be logged to Android Studio console if Raven is configured in the index.android.js file.\nOkay. I haven't yet experimented w/ React Native on Android. Was this on a real device, or using an emulator?\n\nOr is it recommended to comment out Raven/Sentry code during development ?\n\nIt should work in development, but I'd probably create a different Project for development so that your development errors don't mingle with your production ones.\n. @qbig \u2013\u00a0is this issue solved by #492?\n. Sentry now has a first-class React Native plugin that combines both JavaScript and native (iOS) frames in stack traces.\nClosing this issue.. \"Not ready for production use\" is a little extreme. I'll probably remove that.\nWhat we meant is \u2013\u00a0we don't have a good history of people running this on production apps, and we've found React Native to have middling support for source maps (they've added it, killed it, and re-added it between minor revs), so we can't give it a full, ringing endorsement. But we have run it ourselves with some success (for demo/example purposes), and we'll be glad to work with you to make sure that it is successful.\n. Removed in #703 \n. You get the same rejected frames in both development and production?\n. @lklots \u2013\u00a0was this Android too? Or do you get the same trace from iOS?\n. AFAIK it's still relevant. I think we should keep open.. One last thing \u2013\u00a0could you re-write this the avoid using the spread operator (or any ES6+ code).\nI recognize that this runs fine w/ React Native, but I want to introduce some unit tests for this plugin, and requiring advanced JavaScript features complicates the test build.\n. So, if you use your secret key with a regular POST, it will work. But you're not supposed to share your secret key, and I believe the key will be visible if embedded in your React Native app.\n. Is there any possibility of either of you putting together a repository with a reproducible example?\nQuestions I'd have:\n- Does the error occur when install() is called? Or later during test execution?\n- Does the error occur on a particular type of event, e.g. an event listener or XHR handler?\n. We should probably do what you've done, which is try/catch the __raven__ access.\nI notice that the folks at Bugsnag put try/catch around their entire wrap function. Looks like it was to solve the same problem.\nSo I'm in favor of going ahead with that solution. I can put a fix together w/ a test shortly and cut it w/ the same release. Or if you're so inclined, I'll accept a PR too :)\n. @bluecollarcoder \u2013\u00a0to be clear, I prefer the solution of putting the try/catch in Raven.wrap when accessing the __raven__ property.\n. @dkiriakakis I'll get a fix together today and we'll cut a release ASAP.\n. @justin-steele-idexx Thanks for bringing this TraceKit change to our attention.\nBut ... we have been thinking strongly of removing the source fetching feature in Raven.js (TraceKit). Sentry has supported source code uploading for some time now, and we'd prefer users use that mechanism instead.\nIf you use source fetching, we'd really appreciate your feedback on this, i.e. if you feel strongly that we should keep it.\n. What @dcramer said.\n\nResearch how many customers are actually uploading source files\n\nWe will.\nAnecdotally, we feel this number is very small, because:\n- it was never enabled by default\n- we removed it from the documentation months ago without anyone bringing it up\n- for ages the Raven.js transport used HTTP GET, which meant a ~4k URI limit on data that could be sent in the error payload \u2013 additionally\u00a0transferring pre/post source context scraped by TraceKit would have gone above this limit in many, many cases\n\nNotify customers of your intent to remove automatic fetching ~3+ months ahead of when you remove it\n\nWe would likely have a major point release of Raven.js, i.e. version 3.0.0, where the functionality is removed. The server would still accept the data (for some time).\n\nClarify that source maps are not just for \"source maps\" but for source files as well.\nShow more examples of how you would upload source files and how to manage the release lifecycle.\n\nGood feedback, and I agree.\n. Closing because we removed client-side source fetching in 3.0.0.\n. Are you looking for us to provide an example of the monkeypatch solution? Or are you seeing if there's a change / feature that could be made to Sentry to support this workflow?\n. Right. One thing re: monkeypatching \u2013\u00a0be careful not to touch internal methods (see #502).\n. I thought the source maps are generated against the Browserify output \u2013\u00a0not the original code.\n. @bradvogel \u2013\u00a0Your custom error needs to inherit from the Error prototype, e.g.\njavascript\nfunction CustomError = function(message) {\n    this.message = message;\n};\nCustomError.prototype = Error.prototype;\nOtherwise Raven does not consider this an error \u2013\u00a0it only knows that it is a function object, and cannot make any assertions about its properties. For example, your custom error will not have a stack property, even if it is thrown via the throw keyword.\n. Oh, I think I've misread. Your example was meant to (intentionally) demonstrate a non-error that passes through to captureMessage, where it is not filtered. Right?\n. In which case, I'm not sure what we can do. We extract the URL from an Error object's properties. A message / freeform object has no such property, so Raven.js does not know from which file the message originated from.\n. Right. In your example though, onerror isn't catching the error \u2013\u00a0Raven wraps setTimeout with try/catch and likely catches it there (never reaching onerror). We do this because some browsers' onerror implementations do not provide stack traces (Safari, Edge, some versions of IE).\n. > Will whitelistUrls automatically start filtering global exceptions once we upgrade to 3.4.0?\nIt already does? For normal exceptions (Error), at least. This changes it so that generic messages caught via captureMessage will also apply whitelistUrls (note that you need stacktrace:true set in config).\n. Maybe a momentary hickup with the registry? I can install raven-js from Bower just fine:\nbash\n\u279c  bower install raven-js\nbower raven-js#*                cached git://github.com/getsentry/raven-js.git#1.1.19\nbower raven-js#*              validate 1.1.19 against git://github.com/getsentry/raven-js.git#*\nbower raven-js#*                   new version for git://github.com/getsentry/raven-js.git#*\nbower raven-js#*               resolve git://github.com/getsentry/raven-js.git#*\nbower raven-js#*              download https://github.com/getsentry/raven-js/archive/2.1.1.tar.gz\nbower raven-js#*               extract archive.tar.gz\nbower raven-js#*              resolved git://github.com/getsentry/raven-js.git#2.1.1\nbower raven-js#~2.1.1          install raven-js#2.1.1\n. lol wrong project \u2013\u00a0free contribs!\n. Thanks btw!\n. \ud83d\udc4d\nThanks for the PR! Will review this soon.\n. Was there any reason you omitted the CommonJS instructions (from the Angular docs)? Do they not apply?\n. > Raven should be loaded before your application code so an initialization bug doesn't slip by, so this documents how to do just that.\nYou can still use Raven.js + CommonJS using a bundler (e.g. webpack/browserify), and still initialize it before your application runs. This is how we run Raven.js on getsentry.com.\n. Yeah, I agree with @mattrobenolt that we can't verbatim accept a DSN w/ a secret key.\nOpting in could be an acceptable solution. So, I'm thinking, we change the warning message to link to somewhere in the docs, i.e.:\njavascript\nthrow new RavenConfigError('Do not specify your private key in the DSN. See: https://docs.getsentry.com/hosted/clients/javascript/config/#secret-key');\nThis links to a subheading in docs/config.rst that explains:\n- why Raven.js does not allow a secret key by default\n- scenarios when a secrey key could be acceptable (e.g. Electron, React Native, other things)\n- how to disable the secret key protection, e.g. by specifying allowSecretKey: true (or something else)\nThoughts @mattrobenolt?\n. Implemented in #525\n. What is the tag name (key) you are using?\n. Hey @sagiavinash \u2013 here's an example JSBin where I've set a tag with key fullstory_url, then thrown an exception: http://jsbin.com/pakonewuwe/1/edit?html,js,output\nThe url appears as a tag inside the Sentry UI just fine:\n\nClosing for now, but I'll re-open if you have a reproducible example I can look at.\n. Most of that article refers to NodeList and forEach, specifically. And many of the arguments are subjective, involve speculative examples, and the performance claims aren't backed up with benchmarks.\nFor example:\n\nI don\u2019t know about you, but that\u2019s a lot of work for such a mild task.\n\nIs it? Re: this claim above and \"needlessly creates an array\" \u2013\u00a0in Chrome 48 and Firefox 44, [].slice.call is significantly faster than Array.prototype.slice.call according to this JSPerf benchmark: http://jsperf.com/array-prototype-slice-call-vs-slice-call/15.\nYou can't evaluate the written code as-is and assume that's what the JavaScript engine underneath executes. For all we know, Chrome/Firefox sees that the array isn't assigned to a variable and never actually instantiates anything.\nRelated: How the grinch stole array.length access\n\nI don't mean this comment to be discouraging. I appreciate you taking the time to look through the code and submit this PR in an attempt to improve the project. But I consider all raven-js changes to be somewhat high-risk, and I'd prefer not to include changes that don't have measurable, objective improvements. I consider this a sideways change at best.\n. Whoa whoa whoa @mattrobenolt! Talk about haste! There are plenty of good reasons why this code is duplicated!!!!\n. jk :+1: \n. @mpretty-homepass \u2013\u00a0what version of Raven.js are you using? We changed the React Native HTTP transport to POST requests in 2.2.0.\n. @mattrobenolt \u2013\u00a0sure, but this issue was created before 2.2.0 was released. I'm pretty confident that is the cause.\n. Sweet!\n. So, we're definitely going to change the event API and get away from DOM events. I'm cool with adding these events; it's just a question of whether it makes sense for us to merge this ahead of those API changes, and wait until the API is done.\nIt will likely look like:\njavascript\nRaven.on('send', function () { ... }); // or presend/beforesend\nRaven.on('exception', function () { ... });\nRaven.on('message', function () { ... });\nRaven.on('success', function () { ... });\nRaven.on('failure', function () { ... });\nAnd then also:\njavascript\nRaven.off('send'); // all send events\nRaven.off('send', listener); // specific listener\nAlso, this will allow people to add multiple event handlers, which wasn't possible earlier.\n. > When these changes are supposed to land in a production-ready version?\nSee: #521, which is targeted against a 3.0 release. We'll probably release 3.0 within a week (hopefully). After which we can re-evaluate this PR.\nAs an aside, if you need to use presend today, you get almost the same thing out of Raven.setDataCallback.\nRe: the message event \u2013\u00a0was there a reason you wanted to bind to message events? Or were you just filling out the API for consistency?\n. I've added a discussion about changing the events API: #524 \n@romainneutron \u2013\u00a0appreciate your thoughts there\n. Would you mind changing the 3rd parameter to be an object, options? (Then extract levels from options.) That would let us have a standard API for plugins (3rd argument is always options).\n. Cool. My only comment is: can we come up with a better name than preventDefault. That name is so synonymous with DOM events that I'd prefer we avoided it.\nSome quick ideas:\n- { rethrow: true }\n- { useDefaultExceptionHandler: true }\n. Maybe. Another possibility (to fix #468) is we verify the request is sent before calling the original error handler. I'm not sure if that's a good idea or not though \u2013\u00a0e.g. if the crash takes ~500ms to actually appear / manifest in the app.\n. Well, I like rethrow if the default behavior is not to rethrow :) So maybe your suggestion (flipping the default back) is fine. I just need another opinion from a React Native developer to chime in here.\n. @nevir \u2013\u00a0Hey, just a heads up I was out for vacation but I'm back to look at this now.\nI just want to fire up this patch and verify the behavior personally before accepting. Probably by EOD tomorrow.\n. @nevir \u2013\u00a0btw, now that we've figured out what the default behavior should be (with __DEV__), is there still a need for the rethrow option?\n. @nevir \u2013 first off, thanks for sticking with this. Will definitely merge in.\nOne last question re: __DEV__ and the global exception handler: if Raven.js is absent in a React Native app, and an exception is thrown, does it not call the global handler / crash the app?\n. If you don't mind, let's pull out your __DEV__/global exception handler changes and put that in another PR where we can continue this conversation. I don't want to hang up your pathStrip changes, which I think are separate.\n(If this is a pain in the ass I can do it for you.)\n. I understand the predicament where the app crashes before the HTTP request can go out ... but I'm not sure we should just swallow the exception entirely. Maybe waiting for the HTTP response (w/ a short timeout) is best (e.g. rethrow in .5 secs).\n. \ud83d\udc4d\n. Hey there. I'm back from a vacation and can look at this now.\nSo is the situation here that you want window.onerror reporting, but you don't want the built in wrapping?\nIf you don't want any global error reporting, the standard solution is to just not call install.\n. > So I just use Raven without the .install for manual capturing?\nYes.\nWe should really clarify this in the docs.\n. I also wonder if we should change the API to be like raven-node's, where install is instead called patchGlobal \u2013\u00a0way clearer.\n. Okay. We'll consider it. In the meantime I'm going to close this PR because I think a solution was achieved with the existing API.\n. Re-opening against master, which'll effectively be \"3.x\"\n. Closing because against wrong branch.\n. Right now this is against master (2.x), because it should be backwards compatible \u2013\u00a0especially if we gate this feature behind an option (e.g. Raven.config({breadcrumbs: true}).\n. Closing because this is a dupe of #477.\nBut \u2013\u00a0complaint is totally legitimate, and I'll get off my butt with a solution soon.\n. See: \"Proposed rollout\" above\nWe'll keep those callbacks active for some time (with a deprecation warning). But we will remove them from the docs so that people don't use them going forward.\n. Discussion moved to #803.. @mattrobenolt \u2013\u00a0it wasn't clear to me whether we should refer to this as allowSecretKey or allowPrivateKey. I went with \"private\" since that's what the error string referred to.\nThoughts?\n. Done.\n. @grabbou \u2013 thanks for your investigation. I've submitted #527 which should address this.\n. IE8 doesn't have Array.prototype.indexOf.\nI'll make an update \u2013 we don't need to get that fancy.\n. Note that we still don't parse out the frame correctly \u2013\u00a0these NS errors have a different stack format than regular Firefox errors.\n. I still think we can move ahead with accepting this though, since most frames will still be read correctly.\n. > Might be the directory 'dist' missing in 'app/bower_components/raven-js/plugins/angular.js'?\nThat would definitely do it.\nIf somebody here could provide me with a concrete example, I'd be glad to dig into this.\n. @RobertBaron @mebibou \u2013 in both examples you need to configure Raven before initializing your app. Plugins aren't initialized until Raven.install() is called.\nThis is in all the documentation examples, for example:\nhtml\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js\"></script>\n<script src=\"https://cdn.ravenjs.com/3.6.1/angular/raven.min.js\"></script>\n<script>Raven.config('https://<key>@app.getsentry.com/<project>').install();</script>\nAlthough it could be made more explicit that your application script (e.g. app.js) must come afterwards.\n. @Sija \u2013\u00a0given that people keep tripping up on this, I'm fine with merging. Though I'm worried about the case where someone might have declared Raven before Angular. But at least CDN users need to upgrade manually.\n. The 3rd approach involves using a different plugin, e.g. getsentry/raven-objc.\nI think it's nice to be able to use Raven.js if possible, especially for cases where you're using the same React code on the web / on mobile devices. So I'm going to propose exploring #2.\ncc @qbig @grabbou @dcramer \n. Total shot in the dark \u2013\u00a0I wonder if it's possible to do some kind of synchronous processing inside Raven.js while the HTTP request is being transmitted (e.g. synchronous XHR), so that control flow doesn't return to React Native. But I'm guessing that React Native doesn't actually support synchronous XHR.\n. > Another alternative would be to push the error to AsyncStorage instead of over the network and then crash, and only send it once the app starts back up.\nI'm in favor of this.\n. What are the odds that writing to AsyncStorage has the same problems as firing an HTTP request? i.e. that the process terminates before the write occurs\n. >  (I'm assuming it just wasn't necessary in raven-js yet?)\nYeah, it will just use the creation time when received on the server end. But in this case it makes sense to just start collecting it (and more accurate). I think we may also have issues where breadcrumb timestamps don't match this event creation time because of clock skew issues. \n. Okay, so just had a discussion with @mattrobenolt about this. We made this change because clients often have clocks that are just ... wildly inaccurate. Since we don't have control over that, the creation time is used.\nI think in the case of React Native, where there's more control over the client (?), and because you're restoring from a previous event, it makes sense to send a timestamp. But I'm not sure if we should change the default behavior without more thought.\n. So, I'm always super hesitant to add more API methods, and I'd like to avoid it as much as possible. Given that, I think you could get away with just adding a single sendPayload method.\nBasically, you use shouldSendCallback to capture the payload and cancel sending (always return false). Then when you restore, use the newly minted sendPayload method to transmit the data.\nIt's a little hacky, but it lets us prove this out a little more without committing to a bigger API.\nThoughts?\ncc @mattrobenolt \n. Hey @nevir \u2013 is this something you're actually doing?\n. Hey @nevir \u2013 sorry for the delay here. We're going to make this change part of captureMessage. See #544 \n. Oh my bad, I've misinterpreted. This is still different.\n. cc @mattrobenolt \u2013\u00a0mind poking at the latest diff\n. Anyone know if this is still an open issue?. @howard \u2013 Hey, thanks for submitting this. My only comment is that I'm retiring the current DOM-based event system, which is undocumented, for the event system described in #524 (and implemented in #521). This event system will get rolled out in Raven 3.0. I'd rather keep it undocumented until that time.\n. @jamiecounsell \u2013 the blocker here is the new timeout event introduced in this patch. If the timeout state triggered the existing ravenFailure event instead, then I can modify this PR and merge it.\nI don't want to introduce new events because the existing events are not usable by React Native, and the API will definitely change.\n. Duplicate of #436, closing.. This is here? You added it last year: 38ef00eb86dfd9d9ad35313b567fe6a579ebf062\n. @vincentwoo \u2013 the tricky thing about that, is that we'd need to try/catch inside captureMessage, at which point the file might be raven.js or vendor.js or some file from which the message didn't actually originate.\nWe'd have to throw an error, catch it, and traverse up the stack trace and try to estimate at which frame the message originated from (discounting Raven frames). This can be tricky because of minified code.\n. Cool. Thanks for the contribution.\nI'm generally okay with this patch, and I think the code is cleaner afterwards anyways (by introducing wrap* helpers). When I get the opportunity I'll just poke at it a bit more to feel more confident that it doesn't change any behavior.\n. @chicoxyzzy \u2013 some quick feedback.\nBesides performance, Raven.js tries to keep its filesize low. And if these optimizations work, we're exchanging file size for performance (by switching [].slice.call for inline arg copying). So, I need to be sure that 1) they are actually faster, and if so, 2) those optimizations are worth the added filesize.\nKeeping that in mind, here's the changes I'd like made:\n- Revert the arg copying from addPlugin. This function is called at most once per-page (if at all), and thus will likely never be optimized. It also iterates at most through 1-3 plugins (today).\n- Similarly, _logDebug is Raven's internal logging tool, and it is only used if logging is enabled (debug: true). Furthermore, Raven emits very few log messages. You should revert the arg copying here as well.\n- That leaves one place \u2013\u00a0wrapTimeFn. I think, in this instance, the optimization is valid. We're wrapping multiple built-in methods (setTimeout, setInterval, requestAnimationFrame) that could be called many, many times over the lifecycle of a page, and it ought to be as fast as possible. Keep the arg copying, but please add a comment explaining why this is done (e.g. link to the Bluebird article).\nThe other refactorings in this patch are fine. If you can make the changes above, I'll gladly merge.\ncc @mattrobenolt \n. Yeah, sorry ... I was heavily working on this code at the same time :(\n. Fixed in #550 \n. Hi there. This is a Sentry server issue, and 90% of the time has to do with the value of sourceMappingURL not matching the name you've given the uploaded artifact.\nWhen you examine the issue inside Sentry, if it fails to find a matching source map, it will typically put a red error message at the top of the issue that you can expand to help you debug.\nIf you need more help, and you are a hosted Sentry customer, I recommend trying the support options here: https://docs.getsentry.com/hosted/support/\n. wfm\n. One downside of this integration test \u2013\u00a0it will attempt to request from http://example.com/api/1/store, but it fails because XHR from file:/// (where tests are served) cannot be initiated to http://. So no XHR actually takes place, but there is a warning message when running tests:\n\nXMLHttpRequest cannot load https://example.com/api/1/store/. Origin file:// is not allowed by Access-Control-Allow-Origin.\n\nI'd stub this but ... the purpose of these integration tests is to be as true-to-life as possible, and should attempt actual XHRs. I wonder if I can just cancel/abort it in such a way that no attempt is made.\n. cc @mattrobenolt \n. Discussion: should we flush if any breadcrumb occurs in between keypresses? e.g. navigation change or XHR. For navigation change, I think we should. My concern w/ flushing on XHRs is lookahead search boxes \u2013\u00a0where an XHR could trigger in between keypresses, making for a really messy timeline.\nAnother idea: I switch the debounce so that the first keypress creates the breadcrumb, any we don't create a second one until the debounce clears. That should prevent shit from being out of order, and will simplify code because then I don't have to write manual flushes all over the place.\n. > Another idea: I switch the debounce so that the first keypress creates the breadcrumb, any we don't create a second one until the debounce clears. That should prevent shit from being out of order, and will simplify code because then I don't have to write manual flushes all over the place.\nYeah I don't know why I didn't do that to begin with facepalm\nChanging.\n. Hey there. That looks like the culprit is being incorrectly assigned (it doesn't seem related to the error message at all).\nOne thing that changed in Raven 2.x is that we automatically instrument callback functions with try/catch. The result is that we catch a lot more errors, and they seem to sometimes be attributed to the try/catch block. Case in point: _ignoreNextOnError is literally the first line inside the catch block.\nSo \u2013\u00a0yes this is a problem. But the error is (very likely) a legitimate one, badly attributed to the wrong line of code. We'll try to figure out a solution.\n. @reintroducing \u2013 they would still prioritize themselves in your queue of issues.\nIf you see this again, let me know and I'll re-open \u2013 or better yet, if you are a hosted Sentry customer, ping me using our support channels and I can take a closer look.\n. Thanks @dhritzkiv. Putting together a patch now.\n. Fixed in 3f21412aef10dd57ae93f5932cd2f649485bf748\n. Hi @szyablitsky \u2013\u00a0I'll have a fix for this shortly and we'll push a new release.\n. So, looking at the Turbolinks code, this is definitely being caused by a call to pushState \u2013\u00a0I'm guessing it's passing a non-string value for URL (since that's the only argument we inspect, and we do call .match on it). I've added a tighter check in #569.\n. Okay, better yet, we experimented a little more w/ pushState and saw that it coerces objects to strings. I think the integration test better captures the behavior now.\n. > Why would this be most users? I'm assuming most uses call install()?\nYes. This is why we've gotten this far without anyone complaining (I discovered this myself).\n. So, this is something I'd like to do, but I'm concerned about bloating our DOM serializing function to the point that it begins to add noticeable overhead to click handlers.\nBut, I will explore.\n. @soroushhakami \u2013 we started with outerHTML first but deprecated it for this utility method.\nThe reason we didn't go with outerHTML (as @mitsuhiko commented on): \n- the CSS selector format can show more information with less characters\n- outerHTML can include noisy temporary data, e.g. \n  - long data-reactid strings  (in React 0.14 and earlier)\n  - dynamically generated title attributes intended for tooltips\n- we would get a lot of empty  elements, depending on how the addEventListener target is configured\n- we had buttons w/ the same class / content, that are only contextualized via ancestor information\nBasically, outerHTML seems nice when you show a bunch of hypothetical examples where it looks nice, but our experience of running it live for a few weeks was that it was insufficient.\n. @nblasgen\u00a0\u2013\u00a0if you can provide a failing test case, I'd be glad to look at what's up.\nBut right now the code is supposed to capture IDs, and there is a test that verifies this.\n. - TypeScript definitions added in #610 (and out w/ Raven.js 3.1.0)\n- SystemJS / Angular 2 docs pending in #615\n. We added a breadcrumbCallback config option in #788, so I think this ticket can be closed.. Alternatively we could keep the frame, but tag it as in_app so that it doesn't affect fingerprinting or appear in the UI in the default stack view.\n. @mitsuhiko \u2013\u00a0If you mean, why don't we identify them as being from raven-js via the culprit/filename,\u00a0the problem is that we cannot reliably identify our frames when the code is minified, which most raven-js users are doing.\nWe could potentially do this, on the server, after source maps have been applied ... but not everyone uses source maps. I also wouldn't make such a change until we move stack trace parsing onto the server.\nBut you did just tip me off to a problem: Raven.wrap is a public API method, and it could be used in places where it is NOT the top-most frame ... meaning we'll kill the wrong frame. To fix this, we'd need a dedicated \"asyncWrap\" function or something.\n. This was partially implemented in #582\n. > Let's use the sentry.interface.Stacktrace interface explicitly and avoid sending along an Exception interface for the synthetic exception.\nI mean, this is ideal, but to do so means a colossal refactor of Raven.js :( Let me dork around and see what it looks like.\n. Example of Raven.captureMessage('lol', { stacktrace: true }) in the UI (triggered from console so no source maps etc):\n\nEdit: hmm, should have marked those Raven frames as in_app.\n. This is no longer WIP. My plan is to test this live on app.getsentry.com for a short while, then we'll roll it into 3.4.0.\n. @simon-weber yep trying to push this through. Big changes like this make me nervous so I just need to QA ourselves first.\n. Okay, after some testing I've decided that attempting figure out the \"tail\" Raven frames has more cases than I've considered, so I've reverted that part of the code.\nThis now strictly just does synthetic stack traces via Raven.captureMessage (or as a fallback if captureException is given a string or non-error).\ncc @mattrobenolt @macqueen \u2013 can you look at this again?\n. 3.6.0.\n. cc @mattrobenolt \n. @grapho \u2013\u00a0console statements are collected and passed as breadcrumbs.\nI can see how it can be irritating that, as a result of instrumenting console.log, the URL in devtools will no longer take you to the original log statement in your source. We could make instrumenting console.log optional. Or alternatively, introduce Raven.log as an alternative API for recording your own breadcrumbs.\n. I guess I rarely actually used the link to the console statement and didn't even notice it was gone :) I personally use the Chrome debugger most of the time.\n\nif there is a way i can use the breadcrumbs or an equivilant api in a development setting\n\nYou can use Raven.captureBreadcrumb today if you just want to set a breadcrumb. The API isn't really fleshed out though yet. This is still a new feature and we're still trying to work out some bits.\nIf this is not a serious blocker, I'd like to keep this issue open for a bit and see if we get any more feedback.\n. > There might be tons of console.log that we don't want sent to Sentry.\nReal talk \u2013\u00a0do you actually want to disable this? I'm not trying to sound passive aggressive here, I just want to know if this is a serious problem right now and you want to disable it.\n\nI think this is a major issue, especially that its not documented anywhere and\n\nIt is documented in the Raven.js changelog. We also published a blog post announcing breadcrumbs that mentions that console.log statements are now logged, and this post was broadcasted in-app to all hosted Sentry users. I'm sorry that we didn't manage to reach you, but I think a genuine effort was made to communicate this.\nNote also that this is why Raven.js 3.0.x was a major version bump, because it introduced potentially breaking changes. I hope that people are reviewing the changelog before upgrading to a major version.\n\n... can't be disabled.\n\nIn the meantime, you can still run Raven 2.x.\n\n@benvinegar I appreciate you are willing to keep the ticket open, it might be worth investigating some more:)\n\nI want to collect more feedback before rushing into a solution. Especially since 3.0.x has been live for a couple weeks and most of the feedback we have gotten has been positive.\n. > @benvinegar this issue is not a serious blocker at all.\nYeah, I had a feeling you were curious more than anything.\n\nThat being said. there might still be some use in introducing maybe a developmentMode config flag, which would allow messages and errors to pass through to the dev console (aka disabling some of the \"global\" handling).. while keeping the raven.js client quiet in the background, so we could still manually send error reports, by explicitly triggering the raven apis, if we wish.\n\nYeah, the problem with that is that there is an argument for wanting console statements in production for debugging too. I'd rather just make it configurable. And, we will. I just want to get more feedback / measure impact first.\nAnwyays, appreciate both your comments here, really.\n. As of 3.5.0 you can disable automatic collection of console breadcrumbs:\njavascript\nRaven.config('your dsn', {\n  autoBreadcrumbs: {\n    console: false\n  }\n});\nOr you can disable automatic breadcrumb collection entirely:\njavascript\nRaven.config('your dsn', { autoBreadcrumbs: false });\nMore on this in docs.\n. We've been struggling with TypeScript declarations lately. Submissions welcome.. \ud83d\udc4d\n. Sigh. So, Raven.js 3.x instruments setTimeout (and other built ins), which I guess has become read only as of React Native 0.26.\nI don't have an easy solution at the moment. React Native has been a moving target and I'm not sure we can keep up with their non-stop API / behavior changes.\n. > We also release an rc roughly 2 weeks before each release, testing the rc and reporting bugs to us would be very valuable.\nWhen I first saw this issue I didn't really think it was a bug per say. At a glance I just thought it was a decision the team had made to make built-ins read-only. In hindsight, I should have done more investigation and reported it. This is my bad.\nFWIW, we have done some minor contributions to React/React Native, including issues [1, 2], patches, etc. We're trying :)\n. I think the JavaScript events associated with CSP were killed from the spec. I couldn't find any mention of this in the latest spec, and Google has turned up empty.\nRe-open if you find something indicating otherwise.. @d6u \u2013\u00a0if you could submit a PR with an update to the regex along with a test case, I'd be glad to merge.\n. What command are you using to generate source maps?\n. Could you try with --dev true? I suspect this is because of getsentry/sentry#3224.\n. Is there a sections block in your generated source map?\n. @ferndopolis \u2013 You are likely running into getsentry/sentry#3224.\n@respectTheCode \u2013\u00a0Are you using hosted Sentry? If you could contact us at support@getsentry.com, we might be able to dig further.\n. Update on this thread \u2013 we've closed getsentry/sentry#3224, aka Sentry server now accepts and parses indexed souce maps generated by the React Native bundler. I've verified this myself with a production app (--dev false) using an iOS device.\n. Closing this since it's a Sentry server issue anyways.\n. What version of Raven.js? The latest master (3.0.4) doesn't have a target near line 707. Were you loading Raven.js from the CDN (e.g. cdn.ravenjs.com)?\n. @gabn88 \u2013\u00a0it's hard for me to make progress on this without a page to reproduce the error.\nI suppose I can just bail out if there's no target on evt, but I'm not comfortable making that change without seeing the error that triggered it first (i.e. how did evt become undefined in a basic click/keypress handler?).\n. Yeah, wow ... I can't believe I forgot about this. We'll fix.\n. > Do you mind if I open a PR?\nYou are strongly encouraged :)\n. Fixed in #595\n. @sirugh \u2013 do you mind squashing these two commits? And then I'll be glad to merge.\n. > Also have you experimented with github's squash and merge functionality? It's pretty neat.\nBut then I'd get less GitHub contributions :)\n. Thanks @sirugh!\n. Cool. Would you mind separating this out into its own test, rather than override the original? I want to also verify that the original regex works.\nAlso ... there is talk of just having a generic file processor for Raven.js (see: #600). I'm wondering if we should just implement that and be done with it (rather than make it a React Native specific thing).\n. I re-did this PR to only include the IE8 bugfix (and not the removal of the source fetching code).\n. Not going to merge into master, but will release. Closing.\n. Interesting, so 'history' in window is true, but it's null or something. I'll just beef up this check.\n. Thanks @aviddiviner for pointing this out. I started fixing this, when I realized that many of these paragraphs are woefully out of date, and I'm going to need to do some serious work. rolls up sleeves\n. > allow plugins to access raw, untruncated data\nI think we just move truncation to the end.\n. > Is there a reason why it's done twice (in _processException and in _trimPackage) now?\nNot sure, maybe @mattrobenolt knows.\n. Hey @jrencz \u2013\u00a0any chance you could provide me with some sample values for both minified and un-minified Angular errors? I'd be glad to make this fix and put together some unit tests for verification.\n. @jrencz Yes. #667.\n\nThere's also the $injector:modulerr which has recurring message:\n\nI decided to skip this for now. Is it common to get runtime module loading errors in production?\n. > This error is only expected in development.\nThat's kind of what I expected, but I thought I'd check. (But at the same time people often test Sentry on development code, so this is probably something we'd want to address anyways in the future.)\n. Either way, we'll close this and open up that behavior as a new ticket.\n. @pornel \u2013\u00a0have you considered serializing the object before Raven does inside dataCallback?\n. > Disregard this, it was coming from a 3rd party widget we have on our site. Apologies for the noise.\nI mean, if there is a way we could play nicely with that widget, I'd be interested in making it happen. Anything you can tell me?\n. Is it still live on spothero.com or has it been taken down? If you can point me at a live example I'd be glad to poke around and debug.\n. I did explore this but came up empty, unfortunately.\nI recommend using the ignoreErrors config to just suppress anything containing \"Permission denied\".. Yep, I verified it builds:\n\n. So, you should note that this is already a problem today:\u00a0if we change the Raven.js API, and users download the latest raven-js but nobody updates the DefinitelyTyped repository, they will get type errors during TypeScript compilation.\nBut ... there is already a test file we can also borrow and run as part of CI. It will at least catch basic stuff and remind us that the definition file fundamentally may need updating. That work?\n. > Seems reasonable, but I have significantly less context about what any of this is. :) I just want to make sure tests catch when we change the API and it breaks the ts definitions.\nIf I add a new API method, it's going to require that I add a new rule, and an existing test won't catch this. The only possibility of automating this is by doing our own static analysis of public Raven methods (e.g. using Esprima) and verifying that a TypeScript definition exists for each. That is just way, way too much work for what we're getting out of this (right now).\nBut, a test like the one I linked will at least catch definition file regressions. I think that is an acceptable place to start.\n. @mattrobenolt \u2013\u00a0as always, thank you for pushing me to do this. Adding this test highlighted some issues and I think we're in a good place now.\n. \ud83d\ude05 \n. Mmm, I should add something about making them available via HTTP.\n. @mattrobenolt \u2013 mind taking another look? Made a few changes.\n- Added a section on hosting source maps\n- Moved the VPN section as an admonition of the new \"hosting source maps\" section\n- Moved \"Validate Source Maps\" to the Troubleshooting section\n. It's a little gross, but this is possible. If you do setExtraContext(undefined), it will remove all existing extra context. Then you can re-add the context with a second call to setExtraContext(myContext). You can use this to remove values.\n\n2) If not, is it possible to add such functionality to raven?\n\nI'll have to think about what's a nice way to expose this without further bloating the API. I definitely don't want removeExtraContext, removeUserContext, removeTagsContext, etc.\n. If it doesn't have an underscore, it's public and we'll preserve it between minor revs (but if it's not clear in general I try to avoid deprecating public methods even in major versions).\n. So, you can do this today with shouldSendCallback:\njavascript\nRaven.config('https://xyz@app.getsentry.com/12345', {\n  shouldSendCallback(data) {\n    return !/^(.*CloudFlare-AlwaysOnline.*|.+MSIE 8\\.0;.+)$/.test(window.navigator.userAgent);\n  }\n}).install();\nI'm hesitant to add a bunch of convenience methods for stuff like this since it will add overhead to Raven.js, and it is frequently communicated to me how keeping Raven.js small is really important to users.\n. You can get the metadata, but not the content: https://docs.getsentry.com/hosted/api/releases/get-release-file-details/\nMay I ask why you want the sourcemap? Is it for validation?\n. Hey @gabrielhpugliese \u2013 yeah, it's recommended just to wipe and start over.\nI'm going to close this ticket in the meantime (it's also a server issue not a Raven.js issue).\n. Hey @toepoke \u2013\u00a0super busy atm, but when I get a chance I'll check out that repo and see if I can put together Webpack instructions for Angular 2.\nQuick question though: why Webpack? Angular seems to be pushing SystemJS hard.\n. ~~Hey @toepoke \u2013\u00a0is there some kind of Angular 2 webpack example out there I can start from?~~\nEdit: my bad i missed your example, ignore\n. > Rendering objects as expandable tree structures would be nice too!\nBreadcrumbs are intentionally designed to be lightweight \"hints\" ... we want to avoid just straight-up rendering big trees of embedded data. There is a payload data limit.\n. Hey @RobertBaron \u2013\u00a0are you using localStorage/sessionStorage? Seems to be a common error attributes to setting too much in web storage: https://github.com/getify/h5ive/issues/6\n. Since it appears this is not a Raven.js issue (it is merely alerting) I am closing this ticket.\n. @nevir \u2013 possible to update this to reflect changes in #636?\n. Here goes nothing!\n. Hey @danielmohacsi \u2013 you can specify your own transport using the transport config option. You could specify a function that reaches into your own code so that the originating script is yours and not raven.js.\n. Ah, so the issue here is with the function wrapping. This happens once you call .install(). You can choose not to call install() and strictly rely on your own window.onerror implementation, e.g.\n``` javascript\nRaven.config('your dsn'); // don't call install()\nvar existingOnerror = window.onerror;\nwindow.onerror = function (msg, url, line, col, err) {\n  if (err && err.stack) {\n    Raven.captureException(err);\n  }\n  existingOnerror && existingOnerror.apply(this, arguments);\n};\n```\nBut note that this will not get stack traces from some browsers like Safari and Microsoft Edge, and you will no longer get breadcrumbs. More on window onerror here: https://blog.getsentry.com/2016/01/04/client-javascript-reporting-window-onerror.html\n. Aside, we are looking at introducing configuration around this, but it won't be a one off for XMLHttpRequest. Raven.js instruments a bunch of functions \u2013\u00a0we'll let you opt into whichever.\n. Hey @lolJS \u2013 have you tried any of the solutions found here?\n. > Me too ... how come you guys aren't on this already ?!\nSentry is an open source project maintained by hundreds of contributors.\nIf you're a Sentry.io customer, I recommend contacting us through paid support channels \u2013\u00a0we typically respond faster.\nI'm taking a look now.. @squallstar \u2013 the workaround for now is to use your \"private\" DSN, which omits origin checking.. > If we even send requests to Sentry using private DSN, we still probably get that error, because it's the way the browsers work.\nUnless I'm mistaken, the error is because of what Sentry returns. Which I'm guessing you agree with, because you opened getsentry/sentry#5184.\n. Also, to clarify \u2013 this error should mean the transfer was successful, just that the XMLHttpRequest that generated the request cannot read the response. But if you are doing error checking on XHR failures, I can see how this would be problematic. Is that the case?. Hey @calebmer \u2013\u00a0we're aware of this situation. There's a number of issues already open tackling this subject, including a PR #626.\nClosing as duplicate.\n. Hey @arusakov \u2013 yeah, probably. But to be honest I think we're going to start moving towards having dedicated repos/packages for raven-js environments, including React Native.\ne.g. sentry-electron (we're also starting to get rid of the Raven name)\n. Thanks for letting us know \u2013\u00a0I'll take a look.\n. Yeah, the new UMD header assumes that if you are using requirejs, you should use requirejs to load raven-js. This doesn't work if you just load it anonymously via the CDN.\nFrom the requirejs docs:\n\nBe sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load scripts that have define() calls in them.\n\nSo, if we want this to work, we'll need both raven-umd[.min].js and raven[.min].js. OR we are going to just accept that the CDN build is just completely different from the bower/npm builds, and doesn't bother with the UMD header since it can't be used as a module as an anonymous script anyways. I'm leaning towards the latter.\n. Although it's probably worth mentioning that if you are using requirejs, you should probably just add raven-js as a dependency via npm or bower, rather than go through the CDN.\n. >  I assume the call to define in the top block does work when loaded properly from requirejs?\nIt should.\nI've opened a ticket about dropping the define/require stuff from the CDN build: #644\n. Closing issue in favor of #644.\n. Hey @arusakov \u2013\u00a0looks pretty good, but I would like to explore making this its own repository before merging. I'll probably do that sometime this week.\n. @arusakov \u2013 I appreciate the contribution, but our plan is to develop a plugin that leverages both raven-node and raven-js (so it can be used on both server and client). We'll refer back to this for posterity.. Review status: 0 of 3 files reviewed at latest revision, 1 unresolved discussion.\n\ntest/vendor/tracekit-parser.test.js, line 269 [r1] (raw file):\n\nJavaScript\n            var stackFrames = TraceKit.computeStackTrace(CapturedExceptions.PHANTOMJS_1_19);\n            assert.ok(stackFrames);\n            assert.deepEqual(stackFrames.stack.length, 3);\n\nOops, forgot some assertions here\n\nComments from Reviewable\n Sent from Reviewable.io \n. Hey @galuszkak \u2013 Raven.js uses Browserify itself to build it's distributables (e.g. CDN builds), so I'm guessing there's something happening here besides \"doesn't work with Browserify\".\n. I've verified this works with:\n- galuskzak/ravenjs-bug (Ionic)\n- toepoke/raven-webpack (Webpack)\n- benvinegar/angular2-tour-of-heroes (SystemJS)\n. This release should really only affect people using npm \u2013\u00a0so the CDN builds are kind of superfluous. But hey ...\n. Damn, thanks for catching this \u2013\u00a0and right before we put out 3.2.1 too. I'll update that release w/ this patch.\n. Note that this bug also requires you to set maxMessageLength in Raven.config \u2013\u00a0it's 0 by default, and if it's 0 it skips accessing undefined.length.\n. Merging \u2013 I've also added a test that I'll land on top.\n. See also 31d99f95829080760b18f81a1c23f16a8929ace0\n. Pretty impressive that nobody noticed this:\n\n. @kamikaze \u2013 what does your import statement in your app look like?\n. If it helps, I have a sample integration with Angular 2's \"Tour of Heroes\" demo app, here. I've just cloned this and run it with raven-js 3.2.1 and it builds/functions fine.\n. You have this:\nimport {Raven} from 'raven-js';\nThe docs have this:\nimport Raven from 'raven-js';\nTry that and it should work.\n. Try:\nimport Raven = require('raven-js');\n. Are you using the SystemJS dynamic loader, or the static build tool (builder)? I'm guessing the latter, which I haven't tried.\n. Hmm, yeah I found the other style worked w/ the loader ... maybe I have a different SystemJS version.\nTechnically, it should be import Raven = require('raven-js').\n. See #706. We'll get this out in a release either today or tomorrow. I still think you should look into removing this cyclical reference rather than relying on this implementation, though.\n. @megabyzus \u2013 sorry, I was out on vacation for a bit and couldn't get to this in time. Prioritizing now.\n. @frewsxcv \u2013\u00a0are you actually using console.assert?\nMy concern with this patch is that it creates console.assert if it doesn't already exist.\n. I understand that it's specified, but I'm curious if you're actually using this live, and if so, how.\nBTW, any idea why MDN is saying this at the top?\n\nThis feature is non-standard and is not on a standards track ...\n. > Would you prefer I check if it already exists at the global level before creating it?\n\nYes.\nI'd also prefer if you created a method, wrapAssert inside of src/console.js so that later I can re-use it inside our breadcrumb collecting code (I won't ask you to implement that part). It will also be easier to test.\nThanks.\n. > It looks like that header was added in 2014 when the initial write of that wiki page happened, which presumably predates the WHATWG standard.\nAh, yeah, I'm super lazy and really should have just looked at that :) But I'd encourage you to submit an edit to this page citing the addition to the spec.\n. Okay, so, to be good internet citizens, wrapAssert needs to call the original console.assert. This is in case another 3rd-party script might also be using console.assert, i.e. another logger. \nSecondly, this PR also requires some kind of test. Take a look at test/plugins/console.test.js.\nSorry for the asks \u2013\u00a0this is the pain of developing for Raven ^_^\n. Yep, totally understandable. I'll pick it up at some point.\n. This will likely be addressed by #626\n. If you use Webpack to assemble your code, Sentry server will automatically do this for you.\nOtherwise, you want to look at the includePaths config option:\n\nAn array of regex patterns to indicate which urls are a part of your app in the stack trace. All other frames will appear collapsed inside Sentry to make it easier to discern between frames that happened in your code vs other code. It\u2019d be suggested to add the current page url, and the host for your CDN.\n\nYou can see how includePaths is applied inside Raven.js here.\n. Since this is handled by includePaths, closing this issue.\n. @aldarund \u2013 can you paste the outbound XHR body (omitting DSN, etc)?\n. Those errors mean that somehow rs and app got appended as top-level keys, instead of inside the extra object. I'm not sure how that happened; you may have to step through manually.\nFor example, this works fine for me:\njavascript\nRaven.captureException(new Error('lol'), { extra: { foo: 'bar' }})\n. Closing because I cannot reproduce, and no other users have reported encountering this behavior.\n@aldarund \u2013\u00a0if you can provide an example that I can run that reproduces this problem, I'd be glad to re-open and debug.\n. Thanks!\n. Reviewed 3 of 3 files at r1.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nsrc/raven.js, line 445 [r1] (raw file):\n\n``` JavaScript\n    return this;\n},\n\n```\n\nI realize we have setRelease, setTransport and others, but I'm concerned about a future where we have setX for every possible config option potentially bloating the library.\nApproving tho ...\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 3 files at r1.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nComments from Reviewable\n Sent from Reviewable.io \n. cc @mattrobenolt \u2013 mind just quickly signing off?\n. Merging. Any updates can be made in a follow-up.\n. This regex is far more liberal than before, and would break if you had x.app as a generic subfolder in your project directory structure, but I think that is a better risk than trying to match on the exact path (which frequently changes between iOS releases).\n. cc @nevir \n. > not that it matters, but you're missing \"from\" here\nclose enuf\n. @zachdunn \u2013 Hey, I replied to the latest thread with my best attempt for explaining why this should be unblocked. I'm hoping they'll be reasonable.\n. Hey Vladimir,\nThanks for the heads up. We'll put together some examples and update the thread.\n. The ravenjs.com entry was removed from Easylist some time ago \u2013\u00a0closing.\n. Thanks!\n. @kamilogorek So, some background. This has become an increasingly important pattern and ... while in 2016 we were having discussions about doing this on the server, I don't know that that's going to happen anytime soon.\nI'm willing to revisit this. Or as @dcramer also suggests, just having a top-level path prefix option that does the job for you. This issue isn't critical, as this can be done currently using dataCallback; it's just not super convenient and error prone (bad).. @razvanmitre \u2013 try the following:\njavascript\nimport Raven = require('raven-js');\nThis seems to work for most people, but in my AngularJS project with dynamic SystemJS loading, I need the original statement. Would love it if someone from SystemJS could chime in on this.\ncc @guybedford\n. @sija \u2013 I've read all these pages before, I understand the difference, and I am convinced using the require keyword is how it ought to work. It's how it works with loaders like Webpack and others. See #645.\nThe issue is that I cannot get my sample app, a complete \"Angular 2 Tour of Heroes\" example, to load raven-js via SystemJS dynamic loader without using a regular ES6-style import.\nIf someone can help me understand what's going on in that repo, I would be extremely grateful and I can update the docs accordingly.\n. I definitely tried that. I think TypeScript said something to the effect of, \"raven-js is not a module\".\nSorry, I don't have time atm to mess around with this again or I'd explore more. Perhaps next week.\n. @guybedford \u2013 I wasn't familiar with this flag, thanks. I'll start experimenting with it.\n(And thanks for chiming in \ud83e\udd18)\n. Hey Mixmax gang \u2013\u00a0breadcrumb configuration is on my radar, starting with just flat-out turning them on/off. This makes sense too.\n. Just a heads up that 3.5.0 now collects 100 breadcrumbs by default (you can reduce by changing maxBreadcrumbs). We also have breadcrumb filtering coming to the Sentry UI soon. I'd see if those changes will make this tolerable for you.\n. Thanks @cotsog \n. Since we don't control JSDeliver, I'm going to close this issue.\nWe strongly recommend using the official Raven.js CDN.\n. What is the deployment method for Raven.js on these sites? For example, are you using a standard <script> include for Raven.js on your legacy site, but bundling Raven via CommonJS + Webpack/Browserify/etc for your React/Redux app?\n. Okay, so what I would do is this:\n1) In your original app/webpage, use the global <script> include as you were \u2013\u00a0just make sure it happens before you initialize your new React app\n2) In your React app, do:\njavascript\nvar Raven = require('raven-js');\nRaven\n  .config('your dsn')\n  .install()\n  .noConflict(); // only once during instantiation\nThe call to noConflict should make it so that your React app's Raven instance doesn't mess with the previously loaded/config-ed/installed instance.\n. Are you uploading source map artifacts to Sentry? Or are you hosting source maps on your servers, which are downloaded by Sentry?\nIf it's the latter, there can sometimes be version mismatches between what's reported and what's downloaded (i.e. if a browser has cached an old JavaScript file/source map, but the version on the server has been updated due to a recent deploy).\nSource map interpolation on our end is tested pretty vigorously (our tests are based off of Mozilla's own source-map project), so when there's a line mismatch like this it's almost always the case of either:\na) Sentry getting the wrong source map (from a scenario like the one described above)\nOR \nb) the source map was generated incorrectly\nIt sounds like inconsistency is what's affecting you, so my guess is that it's issue a).\n. Sentry uses the sourceMappingURL from the JS files it locates, which can either by via artifacts or from your web server. \nFor complete consistency, you should upload both your source files and source maps if you aren't already.\n. By source files, I meant \"app.min.js\" ... like, your minified \"source\" file / distributable. Sorry for the confusion.\nYour original sources (or sources-sources, laugh) are probably embedded inside your source map. Or ought to be. More on this in our docs.\n. > Is that correct?\nYes.\n. Closing this issue because source maps are strictly handled by Sentry server, not raven-js.\nYou're welcome to re-open on the Sentry forums if this is still an issue.\n. shouldSendCallback would work here, but we could also introduce a maxErrors config option or something that could reset every URL change (e.g. for single page apps).\n. If you can put together a PR with that change I'll accept.\n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Thanks!\n. Wow, I didn't even realize raven-node did that. Hmm ... yeah, I think we can make the same change.\n. Please see conversation in #483 \u2013 totally missed this issue earlier, sorry.. Sure, but part of me would prefer to put it in extra rather than have another interface block in the UI that takes up only 2-3 rows.\n. So, one reason we've avoided this is because we follow semver, and we've introduced \"breaking\" API behavior in Raven.js in the past (although very rarely, and typically very conservatively).\nIt would be nice to allow people to say, /latest/3.x/, /latest/2.x/ or something.\n. Which version of Angular? And if it's 1.x, are you using the Angular plugin (plugins/angular.js)?\n\nHowever, we're feeding off the CDN and not forking the source. That said, point taken, you seem to be indicating this is a bug.\n\nYou can use the example above via setDataCallback (lets you mutate the outbound data object).\n. There should still be an exception type/value. For example, I'm seeing the following:\njson\n{\n  \"type\":\"Error\",\n  \"value\":\"[$compile:tpload] Failed to load template: partials/phone-list-derp.html (HTTP status: 404 Not Found)\\nhttp://errors.angularjs.org/1.4.7/$compile/tpload?p0=partials%2Fphone-list-derp.html&p1=404&p2=Not%20Found\"\n}\nUnless the regex is  matching, but returning empty strings for those values (match[0] and match[1]), in which case the original type/values are overwritten with nothing.\nI'm experimenting with this locally, and I'm having difficulty triggering the types of errors where the regex matches this way. @biggestT, @megabyzus \u2013 do you have example exceptions that trigger this scenario?\n. To clarify: Sentry doesn't need a message attribute. It will use the exception type/value to assemble the message. If all three of those values are blank, however, you would see <no message value>.\n. > Sentry: 8.3.3\n@megabyzus @biggestT \u2013\u00a0okay, I totally missed this piece of information. You're using older on-premise versions.\nAnd yeah, this is the cause. In Sentry 8.6 we made some changes so that the message interface is no longer necessary. I should have noted this in my release notes for raven-js. An oversight on my part; I am developing against getsentry/sentry master almost 100% of the time.\nSo, a couple ideas here: \n1. revert back to raven-js 3.4.x ... OR\n2. upgrade your Sentry to 8.6 (tougher)\nI also recommend, if you are using on-premise Sentry, you should be pinning you raven-js versions explicitly.\n. @vladgurovich \u2013\u00a0totally fair; we'll try to better assess behavior changes as they correspond with Sentry server versions going forward.\n. This code should definitely guard against originalCallback not being defined. Feeling bad I didn't notice this during review.\nThanks for reporting, we'll have a patch soon.\ncc @nevir\n. Dupe of #692. Patch incoming.\n. This change will mean that if FATAL_ERROR_KEY is not in data, transmission will only take place if originalCallback exists and returns true (i.e. user-defined callback). Otherwise this will return undefined and transmission will not take place.\nI'm not 100% sure if this is the intended behavior or not. Need someone more familiar to chime off on this (@nevir).\n. Re-reading the code, I understand now that this code branch is reached if we're dealing with a non-fatal, in which case we should return true (process the exception) unless an original shouldSend handler is present, in which case we use the return value from that.\n. wfm! 3.5.1 going out soon\n. Since the React Native plugin isn't built into /dist, this PR is strictly just a bunch of version bumps.\n. lol\n. I noticed the language here was pretty bad / out of date. For Backbone + React, the library can be loaded anywhere (before OR after React, Backbone, jQuery, etc).\n. I don't have any news on this yet; we're basically swamped.. We now have quite a few users using React Native, so I feel it's appropriate to drop the warning provided that we explain the plugin's limitations.\n. Re-documented in #901 as an admonition block.. Yeah this seems reasonable, although could you change it to setDSN to match the private method _parseDSN?\n. It would be nice if this could be done via config (i.e. call config a second time) so we wouldn't have to introduce another API method, but ... it's unclear what would happen to your previously set configuration (e.g. does it reset to defaults). I can see a case where just being able to toggle the DSN, free of other side effects, is useful. So going ahead w/ merging.\n. Reviewed 2 of 2 files at r2.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. > it never showed up in our Sentry dashboard\nIf you can give me steps to reproduce, or even better, give me an example page, I'd be glad to investigate and fix.\n. I just want to comment that the token remove doesn't appear in the Raven source code, so this is probably an unrelated error. (If this impacted all IE users, we'd definitely hear about it.)\n. Thanks for the update!\n. Reviewed 1 of 1 files at r1, 2 of 2 files at r2.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Well, we added a lot of stuff:\n- try/catch instrumentation (for complete stack traces in more browsers)\n- breadcrumbs (and auto breadcrumbs instrumentation/configuration)\n- XHR transport\n- User feedback dialogs\n- Synthetic traces via captureMessage\n... to name a few. We've also removed stuff, like the client-side source/sourcemap fetching from TraceKit (Sentry does this all server-side). But for the most part TraceKit is still there, and is still a big footprint in the client code.\nIMHO, that's a lot of value for \"growing by about a third\". After gzip, 3.6.1 is under 9kb. I've experimented with small changes that reduce the minified filesize (i.e. aliasing vars), but after gzip, the actual bytes remain the same.\n. > Our main pain point with sentry is the poor stack trace/context in ie9 and below. Will upgrading to v3 improve this?\nSo, Raven 2+'s adds stack traces from IE10, Safari 7-9, and Microsoft Edge (there was an onerror regression from 11 -> Edge). It's definitely worth upgrading for those alone.\nIt's technically possible to generate stack traces from IE8/9 using arguments.callee hacks, but this doesn't work if any of your code uses strict mode. If you don't use strict mode, and this is something you'd like to see, we could add it.\n\nI'm not sure if it accounts for much of the code increase, but the user feedback feature, IMHO, should be a plugin. I can't see any organisation wanting to use it without making a conscious decision to opt in.\n\nIt's mostly implemented via an external script. Raven.showReportDialog just loads that script using a dynamic script include (source).\n. > It's technically possible to generate stack traces from IE8/9 using arguments.callee hacks, but this doesn't work if any of your code uses strict mode. If you don't use strict mode, and this is something you'd like to see, we could add it.\nOops, I forgot this was already in the source (via TraceKit).\n. Relevant to this discussion: #716\n. So, after #716, I took some measurements from raven-js and some client libraries from competing crash reporting tools:\n| file | raven-js | A | B | C | D |\n| --- | --- | --- | --- | --- | --- |\n| minified | 21.6 kB | 21.2 kB | 31.6 kB | 26.8 kB | 10.4 kB |\n| minified + gzip | 8.5 kB | 6.9 kB | 11.2 kB | 10.4 kB | 4.7 kB |\nraven-js fits right in the middle. But when taken into consideration how actively developed it is, and how much functionality it provides (most of these libraries do not have breadcrumb instrumentation), I'm pretty happy with the current situation.\nI'm going to close this issue for now, but I appreciate you raising it \u2013 it resulted in #716 and forcing me to take stock of the situation.\n. Definitely a hack, I just want to push this out for 3.6.1 and we can come up with a better implementation later.\n. Probably. Like, here? Maybe under \"Browser Compatibility\"?\n\nReview status: :shipit: all files reviewed at latest revision, all discussions resolved, all commit checks successful.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Filesize changes:\n| Type | Before | After | % Change |\n| --- | --- | --- | --- |\n| unminified | 88,284 | 82,131 | -6.9% |\n| minified | 23,140 | 21,695 | -6.2% |\n| minified + gzip | 8,946 | 8,529 | -4.7% |\n. I'll keep this ticket open, but for the moment, we don't have plans to add Flow type definitions.\nI'd be glad to assist in someone developing their own 3rd-party definitions, though (if such a thing is possible).\n. Sweet \u2013\u00a0appreciate you doing this.. Thanks! If you could address my comment and update, I would be glad to merge.\n. Reviewed 1 of 2 files at r1, 1 of 1 files at r2.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Impact of these changes:\n| Type | master | less-bytes (PR) | Change (%) |\n| --- | --- | --- | --- |\n| minified | 21.7 kB | 20.9 kB | -3.7% |\n| minified + gzip | 8.52 kB | 8.32 kB | -2.3% |\n. @mattrobenolt \u2013 would like to get your thoughts before I merge\n. Hi @kether667 \u2013 can you explain what the impact of this is? And if there is an error, a proof of concept demonstration (e.g. on jsbin.com)?\nNote that if you're linking directly to plugin files using <script> tags, you should be using dist/plugins/*, NOT src/plugins/*.\n. As @trueter has discovered, it can be disabled like so:\njavascript\nRaven.config('your dsn', {\n  autoBreadcrumbs: {\n    console: false\n  }\n});\nThis configuration option is further documented here: https://docs.sentry.io/hosted/clients/javascript/config/\nI'll add something to the main documentation page to make this more obvious (leaving this issue open for now).\n. Breadcrumbs are \"a trail of breadcrumbs\" \u2013\u00a0events that occurred before the event. You can use them to trace back the steps of what occurred on the page: console statements, XHRs, DOM interactions, etc.\n. Closing because the question was addressed.\nFor future reference, \"usage\" queries should be asked on our forums: forum.sentry.io.. Hey @pkaminski. Your description makes sense. When I get the next opportunity I'll develop a patch. Interestingly, despite breadcrumbs being out for months, you're the first person to raise this issue.\n. Review status: 0 of 1 files reviewed at latest revision, 2 unresolved discussions.\n\nCONTRIBUTING.md, line 27 [r1] (raw file):\n\nPreviously, LewisJEllis (Lewis J Ellis) wrote\u2026\n\nWe recommend JSBin here but JSFiddle in the template; let's either pick one or list both in both places?\n\nSwitched to JSFiddle.\n\n\nCONTRIBUTING.md, line 112 [r1] (raw file):\n\nPreviously, LewisJEllis (Lewis J Ellis) wrote\u2026\n\nMaybe this is some markdown-fu that I don't know, but what are all these near-end-of-line asterisks for? Looks like maybe a regex gone wild\n\nThis was me not paying attention to line wrapping in my editor. Fixed.\n\n\nComments from Reviewable\n Sent from Reviewable.io \n. Hey @blazzy \u2013 I don't think \"regression\" is the right word, because this was never documented behavior, and we did a major version release (2.0.0) indicating the APIs were not compatible. 2.0.0 came out way back in December of last year, and this is the first issue anyone's raised on this topic, so I don't think this usage was common.\n\nI've come across at least one library out there in the wild that instructs users to simply pass Raven.captureException to it.\n\nIf you can point me at it I'd be glad to raise an issue or make a fix myself.\n\nIn the current version users can just bind Raven to a function themselves before passing it to an exception handler of some kind. Or wrap it in another function. But maybe raven-js should do that for us?\n\nBind/use a closure \u2013\u00a0yes.\nRaven.js doing it for you \u2013\u00a0probably not, unless there's a really strong argument for it that I'm missing. Note that it would be another potentially-breaking API change: it would override any subsequently-bound object, and add another frame to any synthetic-generated stack traces (we can't use bind since Raven.js supports IE8).\n. > I have a hard time imagining what else might be bound to that function that would be overridden\nI agree, it's very unlikely, but I thought I'd mention it as a possibility.\n\nThis was the library that prompted me to ask the question: redux-catch.\n\nThanks, I'll take a look.\n. I've opened a PR to update the docs in redux-catch: sergiodxa/redux-catch#3\n. @tinovyatkin \u2013\u00a0thanks for reporting this.\n. It's not a bug. The highest frame is from a function that wraps async functions in try/catch. That try/catch statement (line 673) is catching an error, whose value is apparently undefined.  Because it is not a real error object, there is no stack information, so Raven attempts to create a synthetic trace \u2013\u00a0which is how it gets any frame information at all.\nYou could get this stack trace from some piece of code (or library) that is doing this:\njavascript\nsetTimeout(function () {\n   // do stuff above\n  throw error; // `error` is undefined\n}, 500); // *some* async method, not necessarily setTimeout\n. These errors are frustrating, but ultimately we can only get what the browser and the code gives us \u2013\u00a0which isn't very much.\nI'd look at breadcrumbs and other error metadata to see if there are other ways you can pin down what's happening. You could also audit your code for errant throw calls.\n. @JimJty \u2013 get anywhere with this?\n. This was likely fixed in #872. Please re-open if you've upgraded to the latest Raven.js and still see this.. @swaroopa94 \u2013\u00a0Sentry collapses library frames by default (e.g. those from React). Click the \"Full\" button at the top right of the stack trace, and you should see the other frames that appear in your screenshot.\n. What is /sentry/scripts/views.js?\nIf you're a Sentry.io customer, it's probably easiest for you to email support so that we can look at your account and see what's going on.\n. @swaroopa94 \u2013 it has come to my attention that this is a sample event we put into every account so you can just see what an event looks like without having to send us data. You can delete it safely.\n. @swaroopa94 \u2013\u00a0from the list of issues, click the checkbox next to it, then click \"Delete\" above.\nYou not seeing the error sounds like it might be a dupe of #755 (issues not appearing on devices), so I'm going to close this one.\n. @vehas \u2013 the stack trace is what React Native gives us through its own error handler. We certainly don't re-write the stack trace to say [native code].\nThis is probably just a limitation of React Native production builds on Android. Anecdotally, iOS seems to give much more.\n. > @benvinegar I don't think it because of React Native on Android, in fact I managed to get the log of a crash on production Android app. It looks like this\nNote that that those values don't include filenames (e.g. touchableHandlePress@321:1163). You're looking at a level that the React Native plugin cannot (the Android crash dump) because it is a pure JavaScript solution.\nAn error object is passed through the handler via ErrorUtils.setGlobalHandler. It takes the values and passes them to Sentry. If they are not formatted correctly, there's not much we can do. Note also that \"[native code]\" does not appear in the Raven source code. AFAICT, this is not a case where we see a value we don't recognize and just convert it to [native code].\nUnfortunately I'm not an Android developer, so there's not much I can do here other than to say \u2013\u00a0if you find something that's incorrect, that can be addressed from the JavaScript layer, I'd be glad to accept PRs.\nOne thing you could try is making a dump of the raw error from the React Native plugin and see if it differs from the crash that appears in Sentry.\n. Hey everyone here \u2013\u00a0I would love to take this fix upstream, but I need:\n\nSome actual test frames from real RN on Android data to put into tests\nSome verification that the fix is working \u2013\u00a0I'm getting mixed answers here\n\nCan someone help?. @khanghoang \u2013 I'm just looking for a set of frames, e.g. dumped/printed from a RN app on Android, that I can use to create an automated test case to prevent future regressions.\ne.g. like those found here.\nIf anyone can provide this, I will gladly merge in the fix, the test, and publish a new version.. Does everybody else's traces look like the one posted by @misterecco?. Participants on this thread: could you check out #875 and let me know if that works for you? The test is using the sample stack trace from @misterecco.. @khanghoang \u2013 using #875?\nCan you dump the stack trace somewhere?. Basically, I can't accept @denstepa's fix until I (or someone else) can write a test that demonstrates/explains why we are matching this:\n[^@]*bundle\nIt's probably related index.android.bundle, but this part of the regex is for matching on origin, e.g. https:// ... I need to see a raw example that we can build a test on.. Needs more work. The entire bootstrap process has changed.\n. Would you mind updating the title of this issue? It's currently \"Raven\", which could be a little more descriptive. Maybe \"Sentry not capturing 3rd-party errors\"?\n\nIt works as expected for most errors but some errors don't get uploaded to Sentry.\n\nSentry server has a filter that ignores errors from known 3rd-party extensions. You can find it in your Project Settings \u2192 Data Filters. You should verify that it is not turned on, because it could be interfering here.\nAlso, can you open up web inspector, go to the Network tab, and verify whether Raven.js sends an outbound HTTP request for this error? Based on your stack trace example, it sure seems like it was caught client-side, so I'm wondering if this is sent to the server and subsequently rejected:\nwrapped @ raven.js:379\n. > I didn't re-indent the file in order to keep the diff obvious, but obviously it would be good to indent everything inside the new module block.\nIndenting is fine. I just need to verify that this all works fine with an Angular 2 quickstart application and I'll go ahead and merge.\n. @cesarlvielma \u2013\u00a0that looks like an error to me? The stack trace indicates Angular passed an error to the RavenErrorHandler. The rest of the stacktrace appears from Angular \u2013 click the \"Full\" button in the top right to see the whole thing.\n. > error.originalException\n@combmag \u2013\u00a0it should be err.originalError. The property name changed between Angular 2 release candidates\n\nanyway , some errors do not show origin issue code,\n\n@cesarlvielma \u2013\u00a0Do you have an example of such an error that I can use to test?\n\nshow me only vendor stack trace (Angular2 for this case) and not my .ts file where error is coded.\n\nNot sure I follow. If you want the original stack trace, your build has to generate source maps and Sentry has to be able to locate them. See our source maps docs.\n. @cesarlvielma \u2013\u00a0afaict, the example you have above is showing you the origin of the error. It's originating from the throw keyword.\nThe reason you're not seeing the original-original origin is because Zone.js (an Angular 2 dependency) caught the error earlier in a promise handler and is re-throwing it here. Unfortunately, Raven.js can't get you any closer \u2013 it's just a limitation of JavaScript.\n. I encountered this issue personally, and it was pretty confusing. Going to add this for 3.9.0.\n. >  I think it would be really helpful to have a proper React-Native end-to-end example available somewhere.\nMakes sense. I can put one up on GitHub.\n\nBut the sourcemap uploading doc glosses over artifact names, and instead mentions these parameters ...\n\nArtifacts in Sentry are basically just aliases to locations on the web. Sentry originally (and still) fetches sources and source maps from the public web over HTTP, and so artifacts should be viewed from this context.\nHave a JavaScript file located at https://example.org/js/app.js? Cool, Sentry will fetch it. But if you don't want it to fetch it, you can upload an artifact literally named https://example.org/js/app.js, and Sentry will look for and use that instead. Same for source maps. That's all artifacts are, and hence why they have seemingly confusing \"names\" \u2013\u00a0artifacts are almost always \"named\" as URLs.\n\nBut given the drop-in nature of what I build for the other two systems, it's hard for me to justify attempting to build a third system given the state of the docs and the amount of trial-and-error and manual work-per-release I'd expect I'd be doing to get it to work.\n\nI'd love to know what about those processes felt easier. Any feedback would be much appreciated.\n. Aside: is this really considered drop-in?\nEdit: to elaborate, is the source map issue so painful that it was easier to construct this dedicated library (and deal with source maps on another service) instead? If that's true then we are really dropping the ball here \ud83d\ude13\n. > By drop-in usage, I meant react-native-trackjs and react-native-fabric-crashlytics can be used like this and start reporting exceptions:\nSure, same here with our RN plugin. Except if you want source map support (and you should), you have to additionally upload them, which yeah, is extra work unfortunately.\nI'll look into adding an end-to-end example.\n. Sentry now has a first-class React Native client, with mixed JavaScript + iOS frames in stack traces (Android coming soon). It is far better documented, and I'd strongly recommend using it going forward.\n(Sorry, I knew this was coming and didn't feel like investing in an example when it'd become moot relatively soon.)\nClosing this issue.. @romainneutron \u2013\u00a0looks to have been a bad assumption on my part, and doesn't work.\n. Added in #763\n. Sweet! I'll probably merge this as-is, but follow-up and change the config options so that xhr becomes http and includes both fetch and XMLHttpRequest.\n. > I don't know why. If anyone has an idea...\nThe tests are run in Phantom (1?), which probably doesn't have fetch. It likely errors (method does not exist) and never completes, hence the timeout.\n. > About renaming fetch+xhr to http setting, are you sure this is a good idea? Sounds like a BC break for users.\nWe would make it backwards compatible.\nFor now, let's just keep the option \"xhr\" ... and have it encompass both XMLHttpRequest and fetch. That way, if someone has explicitly disabled the \"xhr\" option, they won't magically have \"fetch\" requests appear in their breadcrumbs when they upgrade to the next version.\n. Oh, hey, did you mean to close this? Seems merge-able to me.\n. If I recall, this was because window doesn't exist in React Native apps. I could be wrong about that (it might've just been document).\n. shrug\nFWIW, this is not a pressing issue.\n. Totally onboard with this PR, but it needs to be covered by one of our integration tests. I can do that but it might take me some time to get around to it.\n. @niftylettuce \u2013 do you have a website where I can reproduce this error?\n. @kenvunz \u2013 thanks for the heads up. I'll see how this works using file:// from my desktop web browser.\n. Since there's no origin checking on mobile devices for Cordova apps, there's very little difference between using a \"secret\" key or using a public key. These keys permit write-only access of event data; they do not confer any other API access.. @Chuckv01 \u2013\u00a0you need to make sure your module loader is pointing to dist/raven.js, and not the files located in src.\n. Yeah remove the 3.7.1 commit and I'll approve.\nI'd also add one more entry for CHANGES: https://github.com/getsentry/raven-js/pull/721\nSomething like \"NEW: File size improvements\"\n. @bertyhell \u2013\u00a0I appreciate the contribution, but our preference is to point people at our public installation documentation rather than re-create it here.\n. @bertyhell \u2013\u00a0I updated the README here. Note that I probably wouldn't have done so without your PR, so thanks.\n. What version of React Native are you all using?\nAnd, did this just start occurring? Or are you new Sentry users and this has never worked?\n. > I am suspecting it might be generated by Sentry itself somehow, as I can't find any references to it in our own code\n\n...\nAny suggestions on how to analyse this further and/or rule out Sentry/ravenjs as the source of this issue?\n\nWell, if \"ruling out\" means \"can't find any references to it\" in code, elt.parentNode isn't found in the Sentry source either.\nIt might be caused by a 3rd-party browser extension or browser malware.\n. > Intuitively I would expect ignoring at this level should prevent the event being sent, while ignoring from the Sentry dashboard would stop it from cluttering the UI but still count towards the quota?\nThis is correct.. I'm going to investigate adding something to our 3rd-party inbound filter to reject this, probably on user agent match (\"GSA/22.*\").\nAny comments/objects on that? Note that events filtered by our official filters do not count towards your organization quota.. Yeah, I'm just debating how to put this in our filters.\ne.g. do we add Google Search app as a \"legacy browser\", giving you the ability to reject all errors from that browser?\nOr do I add an entry for \"(evaluting elt.parentNode)\" in our 3rd-party extensions filter?\nI'm leaning towards the latter: this is not a 3rd-party extension per-say, but it's probably more in line with what people expect from that filter (throw out errors that don't belong to them).. > The only risk is that it would block legitimate errors if someone uses the elt short name in their code and somehow manages to trigger a similar error, but I think those cases would be rare.\nI comment in getsentry/sentry#4823 about this. TL;DR the risk is low because this is a Safari-specific error message, so if you had a legitimate error with the same variable/property names, it would manifest in other more popular browsers.\n. So, getsentry/sentry#4823 is now merged, which means that as soon as it deploys (within hours), you can enable the \"Filter out errors known to be caused by browser extensions\" inbound filter to filter/suppress this error. It will not count towards your quota.\nYou can find this at: Project \u2192 Project Settings \u2192 Inbound Filters\n\n. @brunis \u2013\u00a0can you tell me more about the application you're using Raven.js with? For example, are you using any notable frameworks/libraries, or is this plain \"vanilla\" JS?\n. Yeah, this is going to need to be implemented using some cross-window communication with the Sentry server using window.postMessage.\nI appreciate the contribution offer, but the implementation will be tricky + live across multiple repositories ... we'll probably figure this out on our end.\n. > Seems to be easy to include the additional data in the fetchData property, but I'm not sure if there needs to be additional changes to the server in order for it to be presented correctly.\n@genne \u2013\u00a0I can see how this feels like an easy thing to add, but there's a lot of small feature suggestions like this that over time will serve to bulk up the library past it's relatively small 8kb footprint today.\nIf you're interested in this data, I'd recommend looking into window.performance. You can use dataCallback to basically dump window.performance data into extra_data, which can give you insight into resource loading times that occurred on the page for a given captured exception/message. Note though that there are data limits on extra_data, so I don't recommend just dumping the entire object in there \u2013\u00a0you should probably reduce it to the bits you want.\n. @ThisIsMissEm \u2013 I'd have to do both a pre and post callback for that to work. That's pretty complicated, and again, more code.. Sorry for the delay on this \u2013\u00a0many Sentry developers (myself included) were out on holidays over the past few weeks, and I generally err on making sure we're all available when pushing releases.. Closing because this is a PR against dist/*, which we can't accept.\nIf you can find a way to modify Browserify to output this, I'm game.. cc @pkaminski\n. @Sija \u2013\u00a0the problem is that determining what is the \"same\" error is non-trivial. We could probably make a \"best guess\" effort from the client, but there's a risk that it could fail on seemingly similar errors.\nThat being said, we're going to explore such a solution, see what it looks like, and revisit this.\n. Now that #861 is enabled by default for everyone, I think we can come back to this. It's simple to implement, and there's an argument for having it in some situations (e.g. when pages are open in a tab for 24 hours straight).\nOne last ask: we should reset the captured error count whenever there's a URL change (e.g. via pushState).. Heard from a user yesterday for whom they could benefit from this.. We should move forward; it keeps coming up.\nI'd personally prefer if this were maxEventsPerPage or something (reset every page change, as I mentioned). Also, should not call this maxErrors but rather maxEvents since you can also send info or warning level events.. Truly unifying these APIs is probably impossible. A common core is more realistic. We'll probably need to sit down and document what features are in both and see how we can get there.\nEdit: I did think for a bit about how we could make this more generic, e.g. so we could use it server-side as well, but nothing comes to mind. maxEventsPerSession isn't right since a session can persist many pages. I mean, maxEventsPerPage could be used per Express-view.. My guess is that there is an event handler that would similarly throw \"permission denied to access property\", but it's failing inside Raven first.\nThe simplest thing we can do is just try/catch accessing this and bail out if there's a failure, but I'd really love if we could recreate the scenario first (e.g. on jsbin).\n. See #857. @bud-mo \u2013\u00a0ugh, this is particularly painful, because neither ESLint nor our preprocessors made this safe. We will immediately release 3.8.1 with this fix and follow-up to make sure processes are in place so that it doesn't occur again.\n. Introduced in 36719312109f39247e7a724a9d92a0394210016c\n. Can you paste the raw JSON of the exception as recovered by Sentry (it's linked in the UI)? (Omitting anything sensitive.)\n. @sjafri5 \u2013\u00a0ah, yeah, I see. This is occurring because this is a Stacktrace interface, not an Exception. Which occurs when a synthetic trace occurs.\nI've created a second issue to track this: #776. Closing this issue \u2013 thanks for bringing this to our attention.\n\nFor future reference, you should only send errors to captureException, e.g. Raven.captureException(new Error('test')). If it is not an error, Raven tries to make the best sense of it, like generating a \"best guess\" trace.\n. It's up now \u2013\u00a0bleh. Thanks for pointing this out.\n. Raven.js overrides those methods for breadcrumbs. You can turn them off by doing { autoBreadcrumbs: false } during configuration. See more in Config.\nThe console plugin turns console.anything into Sentry errors. It pre-exists breadcrumbs, so at some point it was useful ... but we don't recommend using it today.. The console plugin turns every console message into a Sentry event. It isis separate from the breadcrumbs functionality, and must be activated manually (read: not enabled by default).. @takahashi64 \u2013\u00a0I'm not sure that we're going to do this or #576 for a few reasons:\n\nBreadcrumbs are intentionally supposed to be lightweight hints, they have character limits, and XPath statements can grow arbitrarily large. Also, the code for generating a full XPath string will likely bloat the library re: filesize.\nI've erred on not showing the exact click content for privacy reasons (e.g. in case the links clicked contains sensitive data).. We did add breadcrumbCallback, but it doesn't pass the original \"object\" that created the crumb, so you unfortunately can't construct your own XPATH string.\n\nI think the only workaround presently is to basically instrument the DOM yourself and leave your own custom breadcrumbs.. > Sure, done. Just to confirm, we're fine with making changes to our vendored copy of TraceKit in this way? Don't know the background on that beyond what Matt described, but sounds like it should be okay.\nMatt is 100% correct. The code is barely recognizable as TraceKit anymore (which is why we imported their entire test suite).. Raven.js no longer wraps jQuery as of #849, so this issue is closed.. To clarify, your suggestion is put it back the way it was (before 05ebd0)? Or should we have a proper ES2015 module export file for that platform somewhere?\nBasically, we're struggling with the TypeScript definition file. I basically kept tweaking things until I could get it loading in every possible loader. But it's becoming harder and harder to keep up with all of this. If someone from the Angular or TypeScript community could give us a definitive best practice for how the typings file should work, we'd be glad to make the requisite changes.. Sweet.. @TheSavior \u2013 thanks for the PR.\nMy only concern is this: we will now have dataCallback, shouldSendCallback, shouldSendBreadcrumbCallback, and potentially also breadcrumbCallback. I don't like that we have \"should send\" variants of callbacks when one callback could do both a) data mutation and b) data \"cancellation\". This bloats both the API and Raven's filesize.\nMy preference, I think \u2013 give me more time on this \u2013\u00a0is that we just call this breadcrumbCallback and move to make dataCallback work the same way in a future major version (e.g. 4.0).\nThoughts?\ncc @LewisJEllis @MaxBittker @mattrobenolt . @TheSavior \u2013 my argument of having a proper breadcrumbCallback is that someone could augment the breadcrumb based on their current application state. That's something they couldn't do if the mutation was done \"postmortem\" once dataCallback hits.\nFor example, we have a pretty popular Redux plugin that captures Redux actions as breadcrumb events. A developer could use breadcrumbCallback to augment the breadcrumb with more detail drawn from their Redux application state.\nBasically, I see some possibilities for usefulness, people will probably ask for it at some point, and given that it's really not really much extra trouble might as well.. Yeah, it does. But my argument is that, by that point \u2013 minutes or even (super rare edge case) hours after the breadcrumb fired \u2013\u00a0the application state has changed. What I'm saying is, at the point at which the breadcrumb is captured, mutate it.\n(Presumably they wouldn't dump their entire app state into the breadcrumb, they can't because breadcrumb entries are particularly memory constrained, but they could pull some specific valuable pieces out.). @TheSavior \u2013\u00a0Thanks again. I'm going to release 3.9.0 with this today.. Awesome!. Ah, yeah \u2013\u00a0at first I thought this was just an out of date comment, thanks.. @LewisJEllis \u2013 can you just peruse through and quickly sign off that the built files roughly matches what's added to the changelog? Thanks.. @cldwalker \u2013\u00a0using showReportDialog with uncaught exceptions is ... what it's for. Can you clarify?. Technically it works for uncaught exceptions too. You could do the following:\n```javascript\nRaven.setDataCallback(function (data) {\n  // means an error was triggered\n  Raven.showReportDialog(); // uses last event id\n});. Something to keep in mind:\n```javascript\nfunction Foo() {};\nFoo.bar = 'test';\nFoo.prototype.baz = 'another test';\nFoo.prototype.toString = '[object Derp]';\nJSON.stringify(new Foo());\n// {}\nnew Foo() + '';\n// [object Derp]\n```\nThe implementation would reduce many objects into just {}, and clobber their original toString values.\nAdditionally, since messages are grouped by message content (when there is no stack trace), this would create a new issue for every object that differs slightly (e.g. any different key/value or additional/missing property). Almost nobody actually wants this behavior \u2013\u00a0it has the potential to explode your issue list dramatically.\nThis is why there are other patches/issues open that explore extracting properties and passing them as extra_data. This way the values are there, but they do not affect grouping.. > What do you think about a flag passed into Raven.config() such as stringifyObjectErrors: true (with false as default, so no breaking changes are made) that allows the user to specify whether message objects should be stringified?\nFeels too specific an option. There are many ways an object could be stringified, or other things that  users may want to do with that object.\nFor your particular problem, a solution might be:\n\nwe expose the original \"error\" object to dataCallback (doesn't exist yet)\nyou set a dataCallback that sees if the original \"error\" is [object Object], and if so, overrides msg to be the stringified object content, and overrides fingerprint\n\nSomething like:\njavascript\nRaven.config('your-dsn', {\n  dataCallback: function (data, origCallback, origError) { \n    data = data || origCallback.apply(this, arguments);\n    if ({}.toString.call(origError) === '[object Object]') {\n      data.msg = JSON.stringify(origError);\n      data.fingerprint = ['{{ default }}', data.msg];\n    }\n    return data;\n  }\n).install();\nThoughts?. @sierran \u2013\u00a0Raven reports what Angular 2 provides. There's not much we can do here if this is the stack trace.. @sierran \u2013\u00a0if you can put together a limited demo that exhibits this behavior, I would be glad to debug, but otherwise I have very little to go on and will be forced to close this issue.. Closing because of lack of information.. Duplicate of #782\u00a0\u2013\u00a0mind adding a +1 there?. Thanks!. Hey, I appreciate you all working on this in earnest, but I'm not sure this is the approach I want us to take:\n1) We are trying to avoid increasing the number of callbacks. We'd rather have a few powerful callbacks that can do a lot rather than have many that are just a little bit different.\n2) This provides no way of chaining multiple error callbacks.\n3) The name could be confused with a failed Raven POST (there is an undocumented ravenError global DOM event that already fires on a failed request, for example).\nThe Sentry team just had a quick discussion about what we want to do here, and it may mean a re-thinking of the event/callback system entirely (and potentially a new major rev, e.g. Raven.js 4.0.0). I'm going to type up all my thoughts in a big issue ASAP and we really want to get your feedback there when it's up. Updates soon .... We are going to re-do callbacks (see discussion in #803), and for the reasons listed above we can't merge this.\nI also didn't point this earlier, but thrown non-error objects (e.g. strings or {}) end up through the captureMessage path anyways, so this wouldn't be caught by this (even though they are \"errors\").\nI appreciate the contribution, but in the interest of keeping open PRs manageable going to close this.. Just updated with a proposal: \"Middleware-inspired approach\".\n~~This approach solves a lot of problems, but I'm concerned that requiring developers to invoke next could make it error prone.~~\nJust edited the proposal to allow users to specify a next-less callback, in which case we treat the callback as synchronous and just evaluate the return value. This would be similar to how Mocha behaves differently if your test function declares a done parameter.. Another thought:\nWhy not just have every callback accept some kind of params object, instead of declaring individual arguments? That way we can add as many \"parameters\" as we want, depending on the callback. That means the signatures change to:\njavascript\nRaven.on('success', function (params, next) { ... });\nWhere params is an object with contextual parameters. For example, for the data callback we have:\njavascript\n{\n  payload: { ... } // outbound data object\n  error: { ... } // error that created this payload\n}\nWhereas the success callback has:\njavascript\n{\n  payload: { ... } // outbound data object\n  request: { ... } // request object (if available)\n  response: { ... } // response object (if available)\n}. This isn't going to work. These are dist files generated from source every release, aka this would just be undone when we release a new version.\nWe'll need to either get a patch accepted upstream in json-stringify-safe (unlikely), or we need to modify the build process to semicolon-ify our dist files going forward.. This is happening because you called captureException with a non-Error object. When that happens, Raven.js attempts to create a \"synthetic trace\" trying to show you the cause of the error. This trace indeed contains Raven.js frames, and also yours (js/modules/raven.js appears to be a wrapper around the base library). Which in this case leads back to your unhandledRejection handler \u2013\u00a0it is getting a non-Error object and passing it to Raven.\nIt's working as expected, but can be confusing if you're not familiar with how it works. We may add a \"synthetic\" attribute to frames generated this way, so we can show as much in the UI. Or more likely, we'll add something to the FAQ.. This is a moot point because, as you mention, Sentry does not (yet) support batched requests.\nRe: flooding the server, Raven.js now backs off if the server responds with a 429 Too Many Requests (see #839).. To me this is not a bug in Raven, this is a real error (unhandled promise rejection) somewhere in your code that is being caught by Raven. I'm guessing this is caused by some AJAX library (jQuery?) that uses a Promise-based API, and the failed XHR is not being handled (e.g. .fail()).. @orlando \u2013 a couple things:\n\nThere is a new React Native plugin in the works that will provide this information automatically.\nI find the naming of \"contexts\" interface confusing. There are already setUserContext, setExtraContext and setTagsContext, not to mention getContext and clearContext. I am not fond of bloating the API further with setContextsInterface, which further strains the meaning of \"context\" and adds a new term, \"interface\", which has not been exposed in the naming scheme before.\n\nOption 2 makes me want to just punt until the new RN client is out.. @silver2k \u2013\u00a0need to address #820 first.. Thanks for the report. Sorry, we've been slow to explore Electron and verify its functionality, but your test repo will be super helpful.. @LewisJEllis \u2013\u00a0I agree with the approach you outlined.. @tacman \u2013\u00a0for breadcrumbs Raven.js overrides console.log which causes log statements to appear to come from Raven.js. It definitely does not use jQuery.unique, so I suspect the deprecation notice is being triggered by somewhere in your own code / other library. . @romainneutron \u2013\u00a0I think we'll just remove this code, it serves less and less purpose today.. The line you're pointing to is for showReportDialog. It takes different parameters than the user context, which does indeed take username.\nBasically, RavenUserContext should not be used for showReportDialog. I'll make a new PR since people are waiting for a point release.. @LucaVazz - RavenUserContext is also supposed to accept arbitrary key/values which are respected in the Sentry UI \u2013 any idea how to to declare that?\nAside: I definitely accepted that PR way too early.. extra can take nested values, e.g. arrays and objects.. Any chance of an update to this PR (or a new one)? I'm not a TypeScript developer, so I'm concerned I'd get this wrong.. Yeah maybe a new one so we can keep the history here with the original context / original PR.. This was determined to be a bug with zone.js, which is fixed in zone.js 0.76 (changelog). See #808 for more.. This is not a bug in Raven.js \u2013 this is just the point at which Raven captured the error by wrapping a function call in try/catch.\nI added a comment in getsentry/raven-js#847 to try and address this.. Well, the goal of ignoreUrls is to target the origin of an error. I'm not sure it's correct to say \"if a single frame is from X then omit the entire error\".\nHaven't looked into it yet, but I'm guessing this is related to SyntaxError \u2013\u00a0we don't have a top-most fileUrl so we attempt to extract it from the stack trace.. > It looks like n is only one or two though from these two lines?\nn can be arbitrarily large, afaik. The point you linked to is where there is no stack (retrieved by the parser), so one is \"created\".\n\nIs it potentially viable to just pass over frames with no source and do one check against the first frame with a source?\n\nThat's probably the best solution. Going to explore that.. > but it looks like there will only ever be one or two regexes.\nYeah, but the regexes are \"joined\" regexes from n input regexes, e.g. /testOne/testTwo/testThree/.../testN/.. Let's just say I'm sensitive to this issue because I may have once deployed an inefficient regex into production that crashed browsers on certain inputs.. ... not that that is what as at stake here (since we're talking about just upping the set of linear inputs). Merely speaking to the sensitivity :). @harshil07 \u2013\u00a0how was this stack trace dumped? Was it dumped from JavaScript?. @CanKattwinkel \u2013\u00a0can you give me a quick explanation / link me to something on why these are necessary?. Thanks!. cc @connor4312 \u2013\u00a0mind chiming in on this?. Okay, CI isn't running npm test (will fix), otherwise we'd see:\n```\n\nraven-js@3.9.1 test-typescript /Users/benvinegar/Projects/raven-js\nnode_modules/typescript/bin/tsc --noEmit --noImplicitAny typescript/raven-tests.ts\n\ntypescript/raven-tests.ts(1,21): error TS2307: Cannot find module 'raven-js'.\n```\nSo, this is the problem I have every time I try to touch our module definition: I cannot come up with a consistent export that works wherever.\nCan someone here help me? Am I invoking tsc incorrectly?. Also, why rename to RavenJS? I'd kind of prefer if it was just Raven.. @LucaVazz \u2013 again, really appreciate your continued effort on this. I've re-enabled the tsc test in CI to help facilitate.. Okay, so the blocker for me right now has little to do with this PR (sort of).\nIt's that if you try to do this in a SystemJS project:\nimport Raven from 'raven-js';\nSystemJS will look for .default on the imported Raven instance, and none exists (because we're not building one that way in our Grunt build).\nThat's why, up until now, we've advocated doing:\nvar Raven = require('raven-js');\nWhich does not look for a default property and works. It looks like I can still use this require statement even with the export changes you've done in this definition file. Can anyone confirm?. Haven't forgotten about this. I'll merge it for the next minor release (3.13.0).. Ooh, good catch.. Thanks!. @matteius \u2013 Hey, we appreciate the issue, but this ticket probably belongs on getsentry/sentry. This is strictly for JavaScript client stuff.. @kevinvandijk \u2013\u00a0did you see my comment above re: CodePush being listed twice?. It's undocumented, but if you're using a bundler you should be able to import/require src/raven and have multiple instances. See src/singleton.js.\nIf you do this, I recommend hard-pinning the version of Raven.js you're using.. > please don't remove it \nWe intentionally re-wrote the Raven library to work this way in late 2015 (it was previously all global), so I doubt it will change.\n\nMy remaining question is, do both instances need to call install()?\n\nYes.\n\nIs it safe for them to both do so?\n\nTake a look at the tests; they're all written against instances.. This is not a Raven.js bug. This try/catch is wrapped around your code (or your libraries' code), and is triggering here because an error was thrown.\nMake sure you click the stack expand buttons on the top right, because some frames may be suppressed by default.\nIf you still don't see a stack trace, and you're a hosted sentry.io customer, you can email support@sentry.io and we can take a look at the issue and try to expand on what's going on. If not, consider posting the full JSON payload of the error to our forums. Note that not all browser errors result in a full stack trace.. >  then why doesn't it log the error related to my code, instead of showing me this RavenJS code?\nRaven uses try/catch to extract stack traces from places where there would otherwise be none. As a consequence, it appears it the stack trace itself.\nYou would see the same thing if you try/caught your own code:\n```javascript\nfunction foo(fn) {\n  try {\n    fn();\n  } catch (e) {\n    console.error(e);\n  }\n}\nfoo(function thisBreaks() {\n  throw new Error('oops');\n});\n```\nThis produces:\nError: oops\n    at thisBreaks (<anonymous>:4:9)\n    at foo (<anonymous>:3:5)\n    at <anonymous>:3:1\nWe could intentionally remove Raven frames from the stack to reduce confusion (they are already tagged as \"library\" frames to separate them from app frames in the Sentry UI).  But then that would remove detail about how the error was caught, making it tough for us to explain what happened.\nMy guess: this is  being caused by some kind of browser add-on, which might explain why you're only seeing it from one user. Browser security models often suppress stack traces / error detail from add-ons and extensions.. Re-opening this because it appears to be an extension of some kind that is affecting multiple users.. Closed \u2013\u00a0this is now rejected as part of Sentry's \"Browser Extensions\" inbound data filter.. This will go out in 3.10.0.. @dmose Thanks for the contribution. Will review.. @JeanCarriere \u2013\u00a0anything more to go on here? Do you use iframes at all? Are you using custom DOM events?. @JeanCarriere \u2013 Custom DOM events seem like a likely culprit. I'll investigate.. Should there be a max duration, e.g. 2 minutes or something?. I moved the back off check to run after filters have run ... because, if you were going to filter out an error anyways (e.g. whitelistUrls or shouldSendCallback), you don't need to know that it would have been suppressed from the back off state.. @mattrobenolt \u2013\u00a0can you look at this again? I think I've addressed all your feedback (except X-SentryError, which I'd like to follow up with separately).. Is there anything I'm missing?\nThere is one additional behavior change (besides the main fix), which is that the \"Raven about to send:\" logging message now occurs after the check. Is it important that we see this message if Raven bails out because it is not configured? My current inclination is towards \"no\", given that isSetup outputs a debug message itself.. The Raven import is effectively a singleton that you can import from everywhere, once it is initially configured. TheRavenErrorHandler example from the docs is merely to configure Raven to report uncaught exceptions in the ng2 ecosystem. Reporting manually should not require going through the ErrorHandler.\nClosing this because it's not an active issue, and a discussion topic that is more appropriate for our forums.. Hey @rbndg \u2013 could you clone your repo and put it up on GitHub so I can inspect what's going on?. ping\nAny news here \u2013 can you provide me with an example repro?. I need a full repro. I've been using create-react-app internally to demo Sentry and it's worked fine for the past few months.. > I'm kind of assuming the public/index.html is the right place, but knowing how you're doing it successfully would be great!\nThat's what I've done. I add a <script> link to the public CDN build of Raven.js, and also add a <script> with the .config() and .install() calls below.. I haven't been able to investigate yet. In the meantime, I recommend coercing the Firebase error object into a string or something non-Error like.. @varungupta85 \u2013 is it possible you could put together a simple Firebase example I could use to debug this? I haven't used Firebase in years and I'm going to need some help to move on this.. > Raven.js 3.6 requires Sentry server 8.6.0 or later\nSentry 8.4.x does not support breadcrumbs. Check the release notes.. > maybe mention that their error will be earlier in the stack trace?\nNot always. In this example, Raven is the only frame.\nThis \"freed script\" error means that a function existed (say, accessible via an iframe), then was removed from the page when the iframe was removed. The function is still attempted to be executed asynchronously via something like setTimeout(freedFn, 10000) \u2013 and because setTimeout is async, Raven is the only frame (wraps freedFn in a try/catch).. One last note: this comment was intentionally made to be 4 lines long because Sentry records 5 frames of before/after context by default. Doing so results in the first line being try {, which looks nice.. I am super hesitant to accept changes that rely on internal properties and methods. We don't know if these will change or not. Maybe with the blessing of @yyx990803.\nI'd sooner say: let's attempt to use formatComponent if it's available, otherwise it becomes \"anonymous component\".. @nddery @rtheunissen \u2013 it's out now in 3.11.0. Sorry for the delay; I try to make sure I only publish new versions when I am available to triage any potential new issues that pop up as a result of the release.. Raven.js is written in CommonJS project and trying to declare it with default export, by everything we've seen, is likely not going to work. See #898.. @LucaVazz \u2013 I appreciate the contribution, but I felt this template was a little more intense than I was going for. I've added something a little more concise in #902.. lol. Refs #435. Integration tests incoming.. @mattrobenolt \u2013 can you confirm we return seconds?. Ugh.. Witness my \"one weird trick\" to get bonus GitHub contributions.. getsentry/sentry#4969. Is there any limit on the amount of data that could be returned by this store?\nI'm concerned that, in doing so, we'll probably trigger a bunch of 413 Request Too Large errors for users that have gigantic stores. In which case, I'm not sure I should make this default behavior (it could be configurable though).. > but I'd imagine being around a 1mb\nIt's 100 KB presently.. @uptownhr \u2013\u00a0any news on this now that I've commented that the size is 1/10th of your estimate :)\nI understand why people want this, but the flip side is that if Sentry rejects like 50% of your errors because the size is too big, people will be upset.. Aside, if dataCallback let you pass Raven.js options instead of modifying the final-to-be-transmitted data payload, it'd probably be way more usable for situations like this.. There's no point in making this check looser if Sentry is just going to blow up on the object anyways. (e.g. if it's an array of errors).\nI still don't have a reproduction case (per the other thread in ember-cli-sentry).. @mattrobenolt \u2013 thoughts on this?\nMy long-term is concern is about /latest/ in general, which is: we basically can't have breaking changes, ever. I'd sooner prefer we did /3.x/, /4.x/, etc.. > And what would the TTL be for these? 1 hour? Less? More?\nI suspected cache was an issue, which was why I reached out. 1 hour seems reasonable \u2013 but even 24 hours would probably be fine. I guess only concern is if we push a bug and need to fix it immediately.. I think it's your call.. Really, we'd only consider putting one together for the Angular 1 plugin. PRs welcome.. Refs ~gorhill/uBlock#2415~  el1t/uBlock-Safari#30. > would be kind of nice to have unit tests for this regex as kinda-documentation\nIt's partially covered here:\nhttps://github.com/getsentry/raven-js/blob/master/test/vendor/tracekit.test.js#L151. Okay, the scope of this has increased once I realized there was a gap in coverage.\nIt now covers both uncaught thrown strings AND objects.. > Would this be a problem with react-native in that case?\nIf you're using source-map and got that result, seems so. I'd open an issue on the react-native project. If you could put together a minimal example for them, they'd probably act on it quickly.. > because Sentry tries to send full stack-trace and HTTP request logs to the backend server.\nRaven.js does not send HTTP request logs, unless you're doing something custom.\n\nThe SDK should truncate the body if it's too large.\n\nIt truncates frames. It doesn't send HTTP request bodies so it wouldn't know to do this.\nAre you appending your own data manually or using a plugin like redux-raven-middleware? Please attach a copy of a sample outbound report and I can act on this.\n\nI'm using the version 3.6 with your SaaS offering.\n\nThis version is pretty out of date now.. > TONS OF HTTP REQUESTS\nSo ... those look like breadcrumbs, and we limit those to 50 per page. If your URLs are explosively large, they could present a problem. So you could set maxBreadcrumbs: 20 or something.. Ah, that's very helpful. Yes, we should truncate this client-side.. Note, in the meantime you can use breadcrumbCallback to truncate (or disable) HTTP breadcrumbs. See config.. I could try and cut 3.13.2 tomorrow morning.. @f0rr0 \u2013\u00a0sorry, have been busy. It's not as easy as hitting a button, alas.. We released 3.14.0 today.. See comment here.. This issue has a lot of history, and I think we addressed it on Sentry server (e.g. it will parse chrome-extension:// frames correctly now).\nClosing.. I've confirmed this on my end. AFAIK, \"regular\" exception (e.g. captureException, onerror) handling seems fine.\nWill look into a fix asap.. > On the contrary, removing our window.onerror (so it is just left with Raven) does not send anything to Sentry via its \"regular\" method (i.e. not calling captureException() manually ) on IE8.\nYeah, @LewisJEllis corrected me on this yesterday \u2013\u00a0our example test page \"intentionally\" has whitelistUrls set to reject the error. I did not see an exception thrown because it was suppressed.. https://github.com/getsentry/raven-js/releases/tag/3.12.2. @adamjang \u2013 this sounds like you're somehow using the files in /src, instead of /dist. The /dist files have been transformed by Browserify for consumption in the browser.\nCould you share how you're loading these files?\nFWIW, here's an example JSBin of 3.12.1 being loaded via a <script> tag pointed at the CDN: http://jsbin.com/naseqojebo/edit?html,js. That's really bizarre because raven.js itself has a require statement at the top.\nWhat kind of module bundler are you using?. We (Sentry) definitely use Webpack pointed at the original Raven.js src files (our config). And nobody else has brought up anything.\nIs it possible you could put together a reproducible example?. \ud83c\udf40\ud83e\udd4a. I just added Vue to the list.. What's wrong with just adding the module as 'ngRaven'?. > all good angular modules export their angular module name\nDo you have external examples of this? Sorry, I don't write Angular regularly, and if you couldn't tell I've become very hesitant of people just telling me \"don't worry, it's supposed to be like this\".. I can address this quicker if you could give me a minimal example page that illustrates fires this rejection.. Yeah, sorry \u2013 let me rephrase. I don't regularly do Angular development, so if fixing the bug requires me to bootstrap an app and mess around to recreate the bug scenario it's going to take me more time. That's totally cool though \u2013\u00a0it just means I'm going to be slower to address this.. The API is really bloated and I'd prefer not to add wrapDataCallback (because then it follows that we'd also need wrapShouldSendCallback and the others).\nCan this be done without that?. > the setXCallback APIs should be deprecated.\nUnfortunately, we have a goal with this project which is to change the APIs as infrequently as possible. And if we're going to do it, it better really be worth it. In this case, I'm not ready to change these APIs until we commit to moving towards the middleware style advocated in #803.\nIt's also not clear to me what problem this PR is solving, because there are no tests or example failure cases.. Okay, after a long conversation on IRC, I think this closes up some holes in the callback system.\nCan you maybe add a cursory set of utils tests for wrappedCallback, and I'll accept.. @HazAT \u2013 just verifying, but this shouldn't conflict with getsentry/react-native-sentry, correct? (It has its own Raven.js plugin.)\n@graingert \u2013 thanks and sorry for the slowness.. > Seems travis build is failing, but works for me and my build locally on TS 2.1.6, annoying. Any ideas?\nI am probably the last person to offer ideas :)\nAt this point in time, after the debacle of #898, I am hesitant to accept any change to the TS module definition.. Please expand and read the comment from Raven.js from that stack trace:\n// Attempt to invoke user-land function\n                // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n                //       means Raven caught an error invoking your application code. This is\n                //       expected behavior and NOT indicative of a bug with Raven.js.. np!. Two options:\n\nYou can always just do Raven.setExtraContext at any time.\nYou can use the dataCallback config option to pass your collected extra data onto the outbound data payload. Please check the docs.. Goal is to deploy this Monday morning.. Released here and available on npm.\n\nClosing this PR since we're not actually merging anything; I just wanted to verify CI passed before publishing.. @LewisJEllis \u2013\u00a0can you quickly look again?. Note the 3.12.2 dist changes didn't get propagated to master \u2013 I did all that on a separate branch (branching from 3.12.1, not HEAD@master).. So, obviously this was caused by #827. Can anything from tsconfig.json be used in your local config?\nFolks, I need a hand. I don't write TypeScript, and I rely on the community to get these definitions right.\n@LucaVazz @graingert @connor4312. I'm guessing it's related to this:\njs\n\"compilerOptions\": {\n  \"module\": \"commonjs\",\n  // ...\n}. If I don't have a resolution by EOD I'll back out #827 entirely and publish 3.13.1.. > the reason is your .d.ts describes an ES module, but your source code is a CJS module\nYep, I understand. So the \"fix\" is to tell the tsc to treat your entire project as CJS (module:  \"commonjs\"), as the tests do? But I presume people can't do that for perfectly good reasons.\nSo is the only solution to go back to the old definitions? Can we amend the existing ones quickly to use the previous export statements?. It's definitely going to stay as CommonJS.\nCan anyone try 3.13.0 with the changes Ben suggested above?\n. Thomas, sorry :)\n. I'm going to revert for now, publish 3.13.1, then look into getting this done for the future.. 3.13.1 is published. Keeping this open because I want to solve this TypeScript problem properly \u2013 and hopefully for the last time.. > Maybe it could do something with that exception (eg process it without callbacks?)\nThis is definitely ideal.. cc @mattrobenolt \u2013 does what @graingert and I've written make sense?. > For example, basic auth could be leveraged here if they set the header to Authorization and set the key to Basic .....\nI don't think we ever merged the Sentry PR that lets you do that (which might also be a @graingert joint).. @mattrobenolt \u2013 ah, I see, I misread settings.\nI made an update. That work?. Right \u2013\u00a0I see the PR here. Alas, I still need a test, or at least a sample stack trace that the environment you're describing generates.. > basically i don't get why to keep local copy of traceKit instead of using the repo as dependency or using your own fork, but if you want to keep it you should manage it and update that to have the latest changes.\nYou're welcome to read through the history to see what's changed to the file in order to understand. The TL;DR is that our version is wildly forked, and contains less than half of TraceKit's original code. We literally cannot use the upstream repository at this point.\n\nhere is complete stack trace sample:\n\nThanks.. Moved to #908 where I've added tests (but retains your original commit). The current workaround is the only solution \u2013\u00a0dataCallback passes the original callback, and if you don't call it, no previous callbacks will work.. Arguably should have tests for Firefox and Safari, but it doesn't affect existing tests for those browsers so ... shrug.. I think @developit's solution should be sufficient for most people. I don't know that this should be core behavior, since it all depends on how you use console.error.. Thanks!. > I tried to set my own handler in window.onerror, calling Raven.captureException, but I lose the breadcrumbs feature.\nYou will have a really bad time if you try to do this.\n\nTo get the best of both worlds, I would like an option to allow to call Raven.install without instrumenting try catch.\n\nYou won't \u2013\u00a0try/catch does a lot more than just \"catch errors\". But yes, we can provide that option.\nI'd sooner recommend that when you are live debugging, you come up with a way to just disable Raven, e.g. magic global variable or something.. > What features am I missing?\nIf you want to understand, I recommend reading all of this article on onerror. The TL;DR is that the instrumentation circumvents CORS errors in most cases.\nAdditionally, Sentry will generate \"synthetic\" traces in cases where a non-error object is thrown, e.g. throw \"error\". This can't be done if you exclusively call captureException from onerror - all the synthetic traces will just trace back to your own handler.\n\nI would love it, but I have no idea how I could detect that the debugger is open, and I'm not even sure it's possible. I could set a cookie, but I could miss some errors if the debugger is closed.\n\nYeah you could set it via a cookie, or set a magic variable using a Chrome extension. No question, this would require effort.. Anyways, we'll keep this issue open, but I wanted to highlight that the try/catch is doing more than you think, and while live production debugging can be trickier sometimes as a result (but only if you're pausing on uncaught exceptions, you can still just set breakpoints anywhere), you will lose clarity in your Sentry issues.. > It seems this is addressed by #938, isn't it?\nYes \u2013\u00a0closing. Thanks for pointing this out.. Raven.js has no Angular dependencies. This is probably related to your project / package.json.. > After a month without response, now it just works.\nThat's great, but re: \"a month without response\", I didn't really have anything to contribute without a reproducible case.. Can you share the stack trace of the error?. I'm curious why you want to add this, because \"Script error\" provides nothing useful other than \"there is some kind of error on the page and it could come from anything\", e.g. browser extensions or other things you don't have control over.. > It'll also catch errors from 3rd parties and sometimes there are hints about what has happened in breadcrumbs or tags (we log a lot additional metadata).\nThat's true. The problem is you'll never know whether something is a real problem or a browser extension. And Raven.js takes steps that other libraries don't to unmask \"Script error\" (this is what the try/catch instrumentation is about, see here).\nI'm going to keep this open until I get more feedback indicating this is a pressing problem. Because this has been default Raven.js behavior for years and ... it comes up very rarely.. > For us, if the browser extension is acting up we still want to know that to\nbetter support our customers.\nYeah, I would say that 99.9% of Sentry users would prefer not to see this. If you go through old issues on this project, you'll see that many of them pertain to suppressing errors from extensions, malware, ad scripts, etc.\n\nThis is an opt-in option, so it doesn't change any defaults, but gives the user more control.\n\nSure. But there's still a cost to this project \u2013\u00a0more code to maintain (even if it's small), more options to document, more tests, etc. There are many other PRs still open for other features that affect even larger subsets of users that remain open for similar reasons.\nAs mentioned, will keep open to get more comments. I recommend continuing to use the fork for now.. So, re: 797a0eb, does this suggest that the original implementation had a bug that was not under test?. > I don't think this is a huge change and it may come handy for some.\nYeah, that's my issue: some. If we continually build features that only affect 1% of the possible userbase, we'll end up with a very bloated library very fast.\nBut that being said, there's no way for an end-user to alter this behavior without some kind of code change. If you want to move forward with this, that's your call, but I'd prefer we called the option allowScriptError since we've never had other default ignore rules and I don't see us adding new ones.. Looks good, but I think we should clarify that \"Angular\" is \"Angular 2+\" somewhere. The naming scheme is newly introduced and I'm not sure everyone will piece it together.. These docs are pulled into Sentry (onboarding) using some convoluted scheme ... I just need to make sure changing the file paths won't mess something up otherwise lgtm.. > can we do if (!isObject(data)) continue instead?\nAgreed.. I'll try to publish a release today.. The Vue plugin basically dumps part of the app state (propsData) as extraData. That app state could be arbitrarily large (e.g. nested objects/arrays).\nWe realistically need to summarize/limit it in an intelligent way (e.g. only pass shallow objects). This would be good for other plugins too (e.g. Redux middleware).. I don't want to have 3 (or more) instrumentX config options, so I'd rather do this as a higher-level config option, e.g. \njavascript\nRaven.config('your-dsn', {\n  instrument: {\n    timers: false,\n    eventTargets: false,\n    http: false // XMLHttpRequest/fetch - better name welcome\n  }\n});\n... kind of like how we've done with autoBreadcrumbs.. It still instruments with try/catch (or at least, it should).\nYou don't have to implement the option: I just want the API to have a place to expand to when we introduce it in the future.. Looks p good, I think last thing is I'd add an integration test that verifies the built-ins haven't been overridden. Our integration tests are pretty wacky, so I don't mind putting that part together.. Hey, I'll try to investigate this tomorrow.. > happy monday @benvinegar!\n. Looks like editing the integration tests is too tricky because you can't set a config object as-is ... I'd have to completely re-work them.\nIf you could quickly add some cursory tests that verify the instrument config works as expected, that's good enough for me. Here's an example of what that looks like for autoBreadcrumbs.. I guess the last thing is: doing {instrument: { eventTargets: false }} will also disable breadcrumb recording.\n\nAs for event targets, it doesn't seem necessary within the React Native context where these mostly don't exist -- I imagine people would want this off by default in RN.\n\nShould we re-evaluate this assertion?. Is this something we could discuss in the Expo slack channel?. @LewisJEllis @MaxBittker \u2013 could one of you publish 3.15.0?. @LewisJEllis I'm okay with special casing DOMException and DOMError rather than, say, JSON-ifying all non-Error-Error objects.. Wrong project, dupe of getsentry/sentry#4447. The problem with this is that this will coerce values from the error into the message string, which means that the grouping will become terrible because the message will differ per-object. This will cause a ton of noise and probably make your issue stream unusable.\nI'd much sooner we explored coercing [object Object] values into extra_data, but that is also problematic because if the value is too large it could cause the payload to exceed the (currently) 100kb payload limit and trigger a 413 Request Entity Too large error.. I should add that without try/catch, we can't generate a \"synthetic trace\" in cases where a non-error object is thrown (e.g. throw \"error\"). The synthetic trace lets you see where the bad object was thrown from, which can be crucial in tracking down bugs.. Thanks!. Hey, thanks for your contribution. But I can't merge this without some kind of parser/unit test.. What is a \"fetch\" error? Raven.js doesn't capture XHR failures, but do fetch failures trigger exceptions? Can you provide a reproducible case?. Ugh, I'm pained this got lost / took us so long. #992 is merged and docs are updating, so this is now closed.. You should use whitelistUrls to limit errors to those occurring from your scripts. This will massively reduce the number of errors coming from extensions/3rd-parties.\nYou should also enable inbound filters inside Sentry (server) if you haven't already.\nUnfortunately, this is not really a Raven.js issue \u2013 it needs help identifying what's from an extension and what isn't, which is done via configuration \u2013 so I'm closing this issue.. @derek-duncan \u2013 if you can provide a reproducible case on GitHub/Gist, we'd be glad to continue investigating. For now closing.. @HazAT \u2013 Can we add some kind of cursory test? Then I'd be glad to approve.. @Oupsla \u2013\u00a0translations are contributed by the community, managed through our Transifex account. You can sign up to submit a correction for this string there.\n(Also this string is part of the main Sentry project, not Raven.js.). > I'm sure there is demand for this. What's your opinion on this subject?\nAs long as nothing breaks for users, I'm happy to approve more PRs.. The goal of breadcrumbs is to be lightweight hints, and are intended to be small in size (a few fields, max). We can't add freeform values of potentially unbounded size because we will quickly blow through the (current) 100KB payload limit, which will cause the event to be rejected.. We agree, and we'll make it happen.. It's supposed to be import Raven = require('raven-js') \u2013\u00a0Raven.js is not exported as a proper ES6 module.. > Maybe I can't use Sentry at all then and should change brands?\nCould be. Plenty of people are using these modules successfully and have contributed TypeScript language updates to continue working with them. Unfortunately, I'm not a TypeScript expert and it's tough for me to understand why this works for one person and not another. It may depend on how you're configuring tsc.. > Can we get a basic test suite for the TypeScript bits in\nThere is.. > Also I had to use Raven.captureException(err); instead of Raven.captureException(err.originalError);\nThanks. I'll update the docs.. So, this is the text that is showed to brand new users of Sentry, right as they're signing up and after they've chosen a platform. We shouldn't link to external resources here, because people could exit the onboarding flow and that would be bad.\nI'd also rather not inform them about \"Script error\", or any other concepts that might deviate them from the mission of just getting this running in their application.\nI'd sooner say something like:\nIt is additionally recommended (but not required) to wrap your application start using `Raven.context`. This can help surface additional errors in some execution contexts.. We absolutely should, the only reason I waffled on this was that the dataCallback signature is getting bloated and was trying to think of a clever way to represent it. Also, whatever you do, you have to remember about all the other callbacks: shouldSendCallback (sigh) and breadcrumbCallback (where we should show the original object being \"breadcrumbed\", if it exists e.g. XHRs).. Hey, so our feeling is that this should be a plugin, which we'd be happy to make happen by translating this patch to a plugin form.. Sounds good.. I'm nervous about this change without rigorous cross-browser testing.. > Why don't we have this in js as well, and preferably also in react native? I think with the arguments variable we could log at least the locals of the function generating the exception, which would still be immensely useful.\nUnfortunately this isn't possible today in browser JavaScript. The arguments object is lost by the time execution enters try/catch or the onerror global error handler.\nWe've long experimented with making this possible, but short of re-writing your code during a compilation step to expose every conceivable variable to Raven.js (e.g. using a babel plugin) \u2013 which would make all but trivial applications pretty much unusable \u2013 there's not much we can do.. Can you provide me a minimal example that re-creates this behavior so I can investigate?. Thanks!. There was a short period where a new version of Raven.js was committed to master (and documentation was updated) but not deployed to NPM, CDN, tagged on Git, etc.. Hey! We have a plan to kind of ... redo how you set these attributes (because we don't want 10 setX methods).\nIn the meantime, there is a workaround. You can use dataCallback:\njavascript\nRaven.config('your-dsn', {\n  dataCallback(data) {\n    data.server_name = window.device.uuid;\n  }\n}).install();\nNote the property uses underscores here. This is intentional, because that's what the Sentry server receives; this data object is the outbound payload transmitted to Sentry.. I'd recommend looking at the source code.\nHere's Raven's XHR transport. And here's what arguments it is passed.. @jt3k \u2013 I mean, sure. You can send the data elsewhere and log it with some other tool/service. But you're going to have to figure this out yourself.\nClosing because this is a usage question and not an issue with Raven.js.. Can we get a test for this? There's some CodePush tests here.. > My suggestion is to add line numbers to what I see in the console\n@joshribakoff \u2013 do you have a working example of how to achieve this?\n\nIf this is a \"wont fix\" can you please explain why?\n\nIt's marked as \"won't fix\" because AFAIK, what people are asking for is not possible without just disabling breadcrumbs. If you're aware of a way to do this, we're all ears.. callee is deprecated and not available when an application is using strict mode. More here.. Additionally, it's not clear to me how you're getting line and column numbers here. Those expanded callee properties you see (e.g. [[FunctionLocation]]) do not appear to be standardized (seems like they're part of V8).. > Maybe its not standardized but it does work currently\nIt won't work if code enables strict mode, which seems like common practice today. It also doesn't appear that this works in Firefox (with strict mode disabled). Here's the arguments object there (using your code above) \u2013\u00a0callee is present, I don't see a means of querying file or line number:\n\n\n(function () { console.log(new Error().stack); })();\n\nYeah, I think this could work. I guess we'd need to extend the breadcrumb interface accepted by Sentry server to have first-class properties for filename and line number, then reflect that in the UI. And we'd need to apply source maps so that the source file isn't always app.min.js (example) and the line number is 1. That's a lot of work for a relatively small feature, so it's probably pretty low on our priority list.\nIn the meantime, you might be able to implement this yourself using the breadcrumbCallback config option, which fires every time a breadcrumb is recorded. You could inspect whether this was a console call, then throw an Error and slice off the correct number of frames to arrive at the filename/line number to attach to the breadcrumb property list. It won't look pretty in the UI (would be represented as a standard key/value property), and it wouldn't have source maps applied, but if you can go without that it should work.. Is this a raven-node or a raven-js issue? You've linked to raven-node code.. Can you provide a complete working example? What is the error you're matching on?. @sn0lan-vpm so, after investigation, this is likely because of #1007. \ud83d\ude4f . Is there a definition of ErrorEvent somewhere in the  Angular docs? Apparently this is not \"inheriting\" Error in the right way.. > Is there any reason we shouldn't update isError to return true for ErrorEvent objects?\nYes. Because it's not actually a descendent from Error (it's a descendent of Event). It doesn't have a stack property, for example (AFAICT, playing around in the console). Which means it may not actually get processed correctly.\nIt would be great to see an example of how this error is generated live, so that we can figure how best to process it.. Sure, I believe this can be solved \u2013 I just meant that it is not as simple as just augmenting isError to return true.. See, my concern here is that people will call these methods in such a way that they'll blow their quota and be mad the sample rate didn't help them, even if they disabled it using this option. I'm not convinced you should be able to disable it.\nLet's keep this issue open for a while to see if other users find this problematic before rushing to a solution.. >  Right now there's no way to achieve that.\nI mean, there is (you could implement your own rate limiting in shouldSendCallback), but it's tricky.\nFWIW, I can think of a ton of potential scenarios Raven.js doesn't handle well. We wait until there's enough momentum/feedback before implementing them, or Raven.js will not remain manageable nor be capable of staying under 10kb.. We should clarify in docs that strings are partial matches, and that you can use regexes to achieve explicit pattern matching. That should be sufficient; it's not clear to me that one set of behavior is more expected than the other.. Yep, good point! Will do.. \ud83d\ude31 . > I guess that would require a major version bump since it removes a big chunk.\nYes. I wouldn't rush on this, and probably take advantage of the semver major change to introduce other breaking changes we've discussed.. Do you have a page that reproduces the behavior you're seeing? Or is there more detail you can provide?. Dismissing @MaxBittker's review because his comments appear addressed and this seems good to merge.. I think moving to Webpack and Yarn is a logical choice. All of our other projects use both; it would be nice to standardize.. +1 that it triggers failure and more-or-less remains backwards compatible.. lgtm (ignoring that something on Sauce appears to have failed). Approved, but in the future, we should try to separate autoformatting changes from behavior changes. It's worth having separate PRs.. It would be nice if this link resolved while browsing the repo, but the docs are meant for browsing on docs.sentry.io. If we change this, the docs will no longer link correctly when building locally. Plus, there's a ton of other module links we'd also have to change.. @mitsuhiko re-read my comments, I think this has to be re-thought. > The reason why I didn't want to append them together, is that : in between.\nYeah, I hear you. But I think everyone just expected it to work this way (I for one thought it did).. We should also keep in mind that if people were doing this: /^Strictly the message without type$/, those regexes will no longer work.. @vierno so, I agree Raven shouldn't choke when it gets an argument like this, but I'm curious if there's any actual defined behavior for fetch(123) or fetch(undefined)? The browser lets me do it, but it's not clear what's actually happening.. > the browser uses the string representation of the argument as the url. So fetch(undefined) gives the same result of fetch(\"undefined\")\n@vierno \u2013\u00a0Ah, thanks for the clarification.. @kamilogorek raven-node has an option to do it; we should probably do the same. evt.reason is often not accurate (or actually an error), so if we could do some smoothing out in our integration that could be ideal.\nI think we should table it.. \ud83c\udf89 Awesome (also cause the tests are green, laugh).. @kamilogorek I think we should only append the : if there is a valid error type, such that we never test on smoething like : <message>.. Question: should we also have skipWhitelistsUrls and/or skipIgnoreErrors? (No.)\nI feel like we should explore how this could be done more elegantly. I'd almost prefer an option like force: true bypass all checking altogether. At least that scales to be useful for more scenarios, both today and in the future.. \ud83d\ude4c Huge!. FWIW, I explicitly inlined these to improve minified filesize (a few %, but every bit counts). You're welcome to change it, but know that it was done deliberately, and will have an impact.\nAside, we should verify minified filesize stays within a certain threshold as part of CI. That threshold can change, of course, but it will require you to manually bump it to \"sign off\" when increasing it. I basically want to make sure we don't forget about it.. @kamilogorek I would cut a new patch release with the minified code restored; we shouldn't wait for \"actual\" code changes / a new release before making this right.. > good point, except maybe this implies that regexp always are exact matches?\nWe could elaborate, but I think the example is sufficiently clear. Not a big deal; this is an objective improvement.\n. \ud83d\udc4d . Damn.. >  +Note: You must have the source map directive (//# sourceMappingURL=...app.js.map) present on the last line of the minified file in order for un-minfication to occur. \nThe SourceMap HTTP header can also be present.\nHmm, I guess that header isn't mentioned anywhere in the docs.. > Does this mean you can set the SourceMap HTTP header when uploading the minified js file, in place of having sourceMappingURL=.... at the end of the minified file? Is that correct? (Just want to make sure I'm on the same page before I start writing documentation)\nI think so but I've never verified personally.\nDon't forget you can also have the minified files hosted publicly return the SourceMap header, but have the source maps privately hosted on Sentry (or vice versa, though there's hardly a good reason to do that).. Damn, nice.. @HazAT Why not keep install as a no-op (with maybe a console warning)? Why is it necessary to remove this method?. If I'm running 4.x, and I install 5.x, under what conditions will I have to change my code (public async API)?. Underscore has a proper _.isObject.\n. Not sure if this is a style choice or not, but generally we don't quote object keys:\nstacktrace = {\n  frames: [{ ... }]\n}\n. Not sure why you'd bother with removing jQuery/Zepto as a requirement. What's the harm?\n. callee is deprecated.\nFrom MDN:\n\nNote: You should avoid using arguments.callee() and just give every function (expression) a name.\n\nhttps://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/callee\n. Specifically IE8 and below doesn't support it:\nhttps://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf#Browser_compatibility\n. Are you not using JSHint? Wat.\n. Good interpreters optimize this for you. I would never optimize something like this unless it came up in a profiler.\nHere's a presentation from a Chrome developer in which he explains how this case is optimized in V8: http://s3.mrale.ph/jsconf2012.pdf\n. Oh, right, this is a Sentry client. For some reason I thought I was reviewing a patch for Sentry itself.\n. O_o\n. When I wrote that comment (deleted), I wasn't aware this was a Sentry client. My bad.\n. Yeah, yeah \u2013 recanted.\n. That's a good point. I believe V8 looks ahead to see if the loop will\nmutate the property. If there's a function call in there, it will even look\ninto that function.\nI recommend watching the video:\nhttp://blip.tv/jsconf/jsconf2012-vyacheslav-egorov-6141593\nOn Thu, Nov 29, 2012 at 12:58 PM, Matt Robenolt notifications@github.comwrote:\n\nIn src/raven.js:\n\n\n}\n  +\n  +\nif (traceback) {\nstacktrace = {\"frames\": traceback};\nfileurl = fileurl || traceback[0].filename;\n} else if (fileurl) {\nstacktrace = {\n\"frames\": [{\n\"filename\": fileurl,\n\"lineno\": lineno\n}]\n};\n}\n  +\nfor (var i = 0; i < self.options.ignoreUrls.length; i++) {\n\n\nActually (digressing a bit), wouldn't the interpreter have to actually\ncheck .length on every iteration since there's always a chance that the\narray was mutated while being iterated. If it's cached, it definitely\ndoesn't have to keep checking. In Chrome for, there's about a 1M ops/s\ndifference, but really, this is bikeshedding. It's a ~10% difference on\nsomething that is called once on an array of a few items. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/pull/38/files#r2270783.\n. Worst case is that it introduces (a broken) $.Deferred when it wasn't there before. But yeah, I'd probably leave it if it's not defined.\n\nAside, $.Deferred was introduced in jQuery 1.5 in 2011.\n. Whitespace between operators, plz.\n. Eh, I feel with all the global variables etc, can just wait until we do the refactor.\n. Sure.\n. If I declare this in the \"global\" scope, will it be wrapped at build time?\n. Possibly ... but it wouldn't surprise me if location is similarly undefined. I'll check.\n. On second thought \u2013\u00a0isUndefined is declared halfway through the file, and I like the declaration of hasDocument at the very top in that big var statement.\n. I know it does, but it seems gross to assume that a function is hoisted on the very first JavaScript statement in a file.\n. nooo\n. typo: gaurantee\n. > Is XMLHttpRequest guaranteed to exist?\nRealistically \u2013\u00a0yes, unless someone has removed it (e.g. the host page or a browser extension).\nBut I'll add the check.\n\nThen falling back to checking for XDomainRequest, which is IE specific. This is great, but then inside makeXhrRequest, XDomainRequest isn't used or even attempted to be used. So it's not clear to me what good this check is doing.\n\nYep, that was a mistake.\n. It seems to have worked well so far? Or is the plan to increase the amount of data going forward?\n. > What about the IE case though since they use XDomainRequest? \nThe XMLHttpRequest object still exists, and can be safely queried for presence of withCredentials.\n.  I'd rather we got notified of an issue, even with partial information due to data constraints, rather than have it disappear into the ether.\n. One idea: we could deploy the fallback, see if we get any actual hits from it, to assess its usefulness.\n. > So we'll have to implement the stuff to make sure we trim our data packet before sending to make an attempt.\nLet's do that when we increase the stack size \u2013\u00a0not here.\n. lol tabs\n. oops this shouldn't have been committed\n. oops\n. A line note of what? Not sure I follow.\n. Do we really need to modify this? Why is it not sufficient to just slice frames before transmitting?\nNote this means that multiple error instances of Raven.js will clobber each other's Error.stackTraceLimit.\n. re-reads PR message\nOh, I see re: V8. Hmm.\n. Yeah let's go with 50.\n. So ... yes.\nBut I think the example as-is is more obvious to somebody who is not experienced with JavaScript / not yet very familiar with the Raven API.\nI'd prefer to leave it as is.\n. Oops. I'll change.\n. Oh, also, lol, this is no longer true because Raven is a class instance and must be the value of this when captureException is invoked.\nThis was another breaking API change.\n. Yes. In retrospect, I guess we could have done some magic to make this happen. But FWIW, none of the docs demonstrate passing the function reference as-is as a callback argument.\n. Why would the DSN differ from what's specified via Raven.config?\n. Wouldn't you want them reported to Sentry? It means that you misconfigured Raven (for dialog purposes) and you might never otherwise find out.\n. Note that if you have Raven configured to accept an error, you will have set a DSN, and will thus never hit Missing DSN.\n. I feel it should be reported.\n. I think it's really hard to get into an infinite loop situation here, because when calling showReportDialog:\n1) If you don't have a DSN, then Raven wasn't installed and the global error handler isn't present \u2013 the exception is thrown but nothing catches it and control flow ends.\n2) If you don't have an eventId (or there was no lastEventId), then Raven will throw an exception, and this will be caught by the global error handler. Now if showReportDialog is called a second time, now there is a lastEventId and the function will no longer error.\nAlso, if you have an onerror handler, and inside that handler you throw another error (e.g. RavenConfigError), onerror doesn't get called again in an infinite loop \u2013 it just stops there:\nhttp://jsbin.com/qoqoviduru/1/edit?html,js\nThe user would have to use a setTimeout call to leave the onerror stack to reach this infinite loop scenario:\nhttp://jsbin.com/moxulabigi/1/edit?html,js,output (warning, this will freeze your browser)\nBut I mean, if they did this, any kind of bug in their code would trigger the infinite/setTimeout scenario \u2013 not strictly this RavenConfigError. So altogether, I think this scenario is really unlikely, and would be their fault anyways.\nI'm going to move ahead with merging the branch. It's flagged experimental anyways.\n. Fixed\n. Fixed\n. Done\n. Done\n. I'd preserve the value of this in case that's a factor later: defaultHandler.apply(this, arguments)\n. We should not pass arbitrary / unknown arguments to captureException ... I think declaring the arguments in setGlobalHandler, and just passing the first argument (the error) is fine:\njavascript\nRaven.captureException(error);\n. should be node_modules\n. Is it safe to assume that everybody just uses ember-cli with Ember today?\n. If rethrow is false, this will still throw in __DEV__.\nHow about:\njavascript\nvar rethrow = 'rethrow' in pluginOptions ? pluginOptions.rethrow || __DEV__;\n. So, this relied on passing a unique message to prevent bubbling to mocha's onerror ...\nBut, my tests send custom messages. So I made it additionally accept a unique integer.\n. It is browser specific. Chrome/Android browser add Uncaught. Firefox does not.\nI'm just emulating what we do if there is an Error object (which has a name property). The name property does not include \"uncaught\".\n. It's not guaranteed message is a string. I could verify that though.\n. Oops\n. oops\n. Yeah, I know. So let's stick with no-op (and I'll amend comment)?\n. What if we just did a substring match then? e.g. url.indexOf(self._globalEndpoint !== -1)\n. I could also use parseUrl and verify that host name and path match, omitting protocol.\n. That's a decent idea, but there's the possibility that somebody might somehow construct a URL to their own servers with the key ... \n. Mmm. Let's go with looking for the token. I'd rather keep the impact super minimal and stick with indexOf if we can.\n. Hmm, I guess this'll add seperator length one more than we want ... (since it's joined between elements, not appended)\n. That is def more readable. Changing.\n. Note that your code leaves out nextStr.length. Should be:\nlen + nextStr.length + (out.length * sepLength) >= MAX_OUTPUT_LEN\n. Probably just overthinking. If tagName is falsy, we are in trouble, so yeah that check is fine. Changed.\n. @dcramer gave me impression that type should strictly be for schema. (Makes me wonder why we don't just call it schema.) Since there is no data to enforce here ... not sure what to do.\n. updated (these are mocks for tests anyways)\n. Oops comment\n. Err, this isn't necessary ... yet.\n. So, by incrementing and passing skipframes to captureMessage, we can generate a new stack by throwing an error from inside captureMessage, slice off skipframes frames, and then we can send that w/ the payload to Sentry. As in, we can now attach valid stack traces alongside captureMessage calls.\nI was going to do that in a separate PR.\n. You could add an else if check for attachEvent. But I mean ... if both addEventListener and attachEvent are both missing, we're going to have a bad time anyways.\n. Sinon generally has a bad time stubbing built in methods like addEventListener. Your solution is bueno.\n. ugh\n. I'll keep it as is. All this means is that the TypeScript type checker will stop you from writing Raven.captureException('derp'). It could still happen at run time and gracefully fallback as intended.\n. I think it's better this way. You should do the coercion yourself, if you know what it is (and you do if TypeScript is complaining).\n. Ugh you're right, just tested it\n. Fixed. We're learning TypeScript!\n. I'd rather put a \"recommended\" tag by #2. I think #1 logically is the first thing to explain to someone, and it's far easier to set up.\n. We already removed that in 3.0.0 \u2013\u00a0it's in the changelog. We just removed extra extraneous code that we missed.\n. > My first impression was \"why are we doing a big version bump just for adding TS declarations\", then realized there are lots of things.\nIf \"big\" is \"minor version\", then yes. It's not a bug fix / patch. It's a forward-compatible API change (if you use TypeScript).\n. > That, to me, falls under something like, us adding a feature into a plugin.\nThat should be a minor bump too, yeah. It's an argument for moving these into their own repo.\n. Oops, intended to do that but forgot. Done.\n. Sigh, again hesitant to add more API methods \u2013\u00a0even though I know this solves some serious problems.\nWe've talked about just merging shouldSendCallback / dataCallback in a major version change (4.0).\n. I don't think it's necessary to check prevCallback again. So I think this can be written as:\njavascript\nreturn prevCallback.apply(null, arguments) && callback.apply(null, arguments);\n. Also, I think it may be more prudent to invoke the callbacks with the current value of this (taken at the top of addShouldSendCallback) rather than pass null.\n. I removed this because I felt this test had no application any longer now that we were not additionally storing message for exceptions.\n. I just moved it up higher (and kept the comment)\n. Mmm, in hindsight, I probably did this because in some version I did something else with msg so I wanted the conversion higher. I'll just restore this code.\n. Source map generation for tests is/has been broken so I just disabled it to make my life easier debugging this. I'll revisit in future.\n. Oh, I didn't even realize that was a server change. Hmm, what's the right move here given that this could be breaking for on-premise users. Do we go to a full version bump (4.0.0)?\ncc @dcramer \n. Also, does this mean the server will reject the event? Or just complain that the message interface is missing?\n. @dcramer says this is fine.\n. You cannot explicitly declare things as RavenOptions any more (exporting this depended on default export support), but it will still be type-checked since it is passed as a parameter to Raven.config\n. I suppose couldn't hurt to add.\n. javascript\nvar stringify = require('json-stringify-safe');\nFrom the library docs, should work fine.\n. Got it, thanks.\n. There's also a change to the 2nd match group, from (.+?) to (.*?).\n\nChanges in data callback are only refactoring\n\nYeah that's just so I could easily write a test to verify the regexes work.\n. Oops\n. Consistency with other captureX methods, which are chainable.\n. Not sure I understand this comment anymore (re window.onerror) ... uhhhh\n. Ah, that comment was true until I added the trimHeadFrames stuff.\n. There's a try/catch block above for __raven__ that also bails and returns func. Rather than repeat that code, lets move the check into that try/catch block.\n. Note we typically express this in the post-gzip size, since that's what goes over the wire in ... 100% of cases.\n. Tru\n. feels redundant to say \"check out Configuration and Usage for information about configuration and usage\", going to ship as-is\n. Had to change this test because Phantom 2 throws a network error that DOES get collected as a (error) breadcrumb. Better that this test not attempt to make an XHR at all.\n. It is 99.9999% unlikely to happen since we are controlling the environment, but sure.. I agree this is better.. Agreed. How about:\n\nBy default, Raven.js instruments browser built-ins and DOM events to automatically collect a few useful breadcrumbs\n. Added category, and linked to the spec.. Done.. Yeah, right now you can't disable \"error\" breadcrumbs.\n\nThis is part oversight and part \"people wanted to disable automatic breadcrumb collection because they didn't like overriding some built-ins\" (particularly console). The error breadcrumbs don't require instrumentation.\nI suppose I'll add it at some point. I added an issue: #782. Need to check for explicit false here. We don't want the case where a no-op callback returns undefined and so we throw away the payload.. The safest thing should be:\n\nIs this an object? Then continue and replace the original object.\nIs this strictly false (could also allow null)? Then reject this object altogether.\n\nWe might not have this behavior in dataCallback yet (edit: we don't). This is just part of the plan to align on a single consistent, expected behavior for both.. > Is this the behavior we want for the breadcrumbCallback?\nNo. We're going to update how dataCallback works in a follow-up. Basically, your work here on breadcrumbCallback will be the model for how callbacks should work \u2013\u00a0presuming we all feel confident about it.. Yes^. \"replace\" is a better descriptor than \"mutate\" \u2013 you can mutate the input crumb and not return anything, different from replacing the value. Does this mean we need to expose every set method? Why just setTagsContext?. What is config here? Is it an object? Or is it just true/false?. By including this here, it makes testing particularly hard. The tests should be able to import the methods here and test them without side effects.. CodePush|CodePush\nRepeats CodePush twice?. \ud83d\udc4d . Why remove these from tests?. Typo: Breadcrum. At 387 lines, this definition file is almost as complicated as Raven.js itself. Is it normal for libraries to expose something so rigid? I'm terrified this file will become really painful to maintain.. Will this allow for free-form objects?. What can we do to guarantee that users, no matter what environment, will be able to import this project fine? Do we have to document, \"please see our tsconfig settings\"?\nWould you expect the export/module TypeScript definition change to result in a new major rev (4.x.x)?. Uh, I mean, it basically just can't go here. We'll have to come up with something else.\nI think one big issue is: Raven should really be configured before you even initialize Angular. That way it can pick up an error in the Angular initialize process. I understand it's convention to pipe your configuration through Angular, but ... it makes this all really horrible.. > One way to ensure a bit easier maintainability would be to switch the main Raven-JS to TypeScript. It wouldn't be a change that drastically, especially considering that TypeScript transpiles down to vanilla JS in the end.\nThis will not happen :). What typically appears there?. Okay. That could be useful for completely different reasons.\n(Does Retry-After say something about rate limiting? Or completely independent?). Unfortunately in Phantom (and Phantom 2) just calling Object.defineProperty on this MouseEvent instance triggers an error. I've tried __defineGetter__ as well \u2013\u00a0no luck.. Please remove this.. If we're to add such a template, I'd rather it not be part of this PR.. Good suggestion, doing it.. > what about !!a != !!b\nAre they equivalent?. We assemble these objects ourselves, and other pieces of the code make the same assumption so I feel it's safe:\ne.g. here's _trimPacket:\n```javascript\n    _trimPacket: function(data) {\n        // For now, we only want to truncate the two different messages\n        // but this could/should be expanded to just trim everything\n        var max = this._globalOptions.maxMessageLength;\n        if (data.message) {\n            data.message = truncate(data.message, max);\n        }\n        if (data.exception) {\n            var exception = data.exception.values[0];\n            exception.value = truncate(exception.value, max);\n        }\n    return data;\n},\n\n``. This was not matching on justError, e.g.throw new Error('test').. Yes, but we didn't handle that case either.. But you did remind me of one thing, which is that you could dothrow new String('lol')that would evaluate as anobject`.\nGonna revisit.. This is covered by the CHROME_48_BLOB test:\nhttps://github.com/getsentry/raven-js/blob/master/test/vendor/fixtures/captured-errors.js#L327\nI've also verified the format is the same in my Chrome 56 (on the console):\njavascript\nsetTimeout(function callback() {\n  [1].forEach(function iterate() { oops(); });\n});\nEmits:\nUncaught ReferenceError: oops is not defined\n    at iterate (<anonymous>:2:36)\n    at Array.forEach (native) # <-- bingo\n    at callback (<anonymous>:2:7). I quickly experimented w/ having a helper onerror function that could be called from either the XDomainRequest handler or onreadystatechange, but it quickly ended up taking up more code so nm .... Assigning 'myApp' temporarily to module (which is a reserved word kind of) seems silly. If you could remove this line, and just do:\njavascript\nangular.module('myApp', [\n  ngRaven,\n  // ...\n]);\nI'll accept this patch.. I'd prefer people verify the tests locally before submitting a PR. Often people submit PRs, see Travis fails, then go \"oh well\" and never resolve the failures and leave the PR to stagnate \u2013\u00a0ends up being a waste of everyone's time.. webpac?. I don't see anything changed here?. Nah we're not gonna get that fancy. I'd sooner drop the maxBreadcrumbs default to 50..  We show 5 lines of context before/after. The comment is intentionally exactly 4 lines so that everyone will see the try + this comment.. Seems low risk, but yeah, I agree. \n\nI'm not sure why we don't just make urlprops an array and iterate through\n\nI was feeling fancy. Let's just go with array.. \u0ca0_\u0ca0. @HazAT \u2013 would you mind adding a comment about why we do this for react native, and why it's okay if Object.isFrozen isn't called in environments where it isn't supported (maybe link to this PR?). Last thing and then I'll merge.. What is this whitespace abberration. and spelling (\"commonJS\"). Only problem with this is that it will skip empty strings. It's probably safer to explicitly check for undefined. Or alternatively, change truncate to not explode on undefined values.. > By the way, an empty string does not need to be truncated\nGood point. Okay, I mean given that there are tests, we can proceed as-is.. I generally link linking to the version found in node_modules because collaborators often don't have node_modules/.bin on their PATH.. Ah. I definitely recommend commenting why you chose these options (\"something something timeouts\").. If breadcrumbs are disabled, this won't get called / won't reset.. Same comment as above.. Keep this console.log?. I don't like conditionally allowing undefined \u2013\u00a0that seems dangerous, e.g. it could become undefined for all browsers and we'd never catch it.\nI'd prefer if we did a user agent check, e.g. look for IE10 or Edge14 and do an alternate assertion.. Same here as above.. This seems problematic. What if document isn't defined? Won't accessing it to make a null comparison throw an exception?\nWhy not do:\njavascript\nif (typeof document === 'undefined' || document.location == null) return '';. \ud83d\ude3e Sigh, I can't believe Edge still doesn't provide this (a proper onerror error object argument).\ncc @patrickkettner. \ud83d\ude47 . > by using the captureMessage and captureException.\nDrop unnecessary the. Should just be \"by using captureMessage and captureException\".. I recommend putting a semicolon before the snippet to prevent people from shooting their own foot:\n;(function(a,b,g,e,h){.... You could also mention that some cross-origin errors are more likely to be swallowed (and maybe link to our \"what is script error\" blog post).. Ah, I see your comment below, but I think this can also affect production.. Should we be re-throwing? Or pushing these errors into Raven's internals?\nIf we re-throw, it means there's a possibility other onerror instrumentation will pick up on this twice (e.g. if New Relic browser agent was loaded before ours).. There's a safer way to do this, at least, in Webpack, Browserify and other loaders. You can define a global variable (e.g. TEST), that if undefined does a no-op, and have that code branch stripped during minification.\nAs it is, we're relying on a \"DO NOT REMOVE\" comment to ensure that this potentially dangerous setTimeout never reaches production. I think we can do something a little stricter.. Okay. Just worried this might be brittle. Should probably comment explicitly what's happening here.. ",
    "Thibaut": "I'm interested in this too. Custom payloads are very helpful for debugging.\n. ",
    "dmitry-dedukhin": "Raven calls TraceKit.noconflict() so I have no access to global TraceKit var.\n. Thank you very much!\n. ",
    "jbuckner": "I'm not too familiar with how the tests work, but let me see what I can do. This was done with trial and error in IE8/9 in quirks mode. Is it possible to run tests in IE quirks mode?\n. ",
    "hamishcampbell": "Erwoops. Should've looked before leaping.\nIn that case, my only issue is it would be useful to have a build command that only produced the concatenated (un uglified) source so I can let the dojo build system handle that side of it.\n. ",
    "Baggz": ":+1: \n. ",
    "ksonnad": ":+1: \n. As the user, I'd prefer the callback for maximum flexibility.  Regexes can't handle every scenario, and the URL isn't the only attribute we may want to examine.\n. ",
    "KidkArolis": "The thing is, I get stacktrace for most of my errors, but completely different exceptions get grouped anyways, I can't figure out why.\nFor example the following 2 errors are grouped\nError 1\nException\nValue: Uncaught TypeError: Cannot call method 'trigger' of undefined\nLocation: /app/www-built/boot.js in ? , line 38909\nRaw\nStacktrace (most recent call first)\n/app/www-built/boot.js ? in ?\n    this.getScript.trigger(\"destroyPopover\");\nError 2\nException\nValue: Uncaught TypeError: Cannot read property 'buckets' of undefined\nLocation: /app/www-built/boot.js in ? , line 38819\nRaw\nStacktrace (most recent call first)\n/app/www-built/boot.js ? in ?\n    var n = i(t.first(e.ALL.buckets).end).format(\"hh:mm a\");\nThe only thing in common between these 2 errors is that they originate from the same file (most of everything else, including the browser URL after # is different in both cases)\n. Regarding source maps - they unavoidably make the source public to everyone?\nI suppose I could control access to them via some authentication, but that would become trickier to setup in sentry.\n. ",
    "Philmod": "Yes, I've just tried, using this file (https://raw.github.com/getsentry/raven-js/master/dist/1.0.8/raven.js) : \n\nDoes it help you?\n. I hot-fixed by adding a condition (handler && handler.handler), but I don't know the consequence of that.\n. Ok, sounds great.\nThis hot-fix is not a problem, right?\nI shouldn't ask here, but I couldn't find the answer. what is the status of that : \"DeprecationWarning: ignoreErrors is going to be removed soon.\"\nWhen it will happen? What will be the replacement? Will it be possible to user regex?\nThanks man,\nPhilippe\n. Yes, I do. Is there a way to use regex there?\n. 1.0.8\nOn 29 August 2013 14:02, Matt Robenolt notifications@github.com wrote:\n\nWhich version of raven.js is this? 1.0.8 or master?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/131#issuecomment-23523275\n.\n\n\nPhilippe Modard\n415-722-1245\nphilippe.modard@gmail.com philippe.modard@modygo.com\ntwitter.com/philmod\nre.vu/philippemodard\nwww.linkedin.com/in/philippemodard\nIBAN BE70 0639 3284 8025  -  BIC: GKCCBEBB\n. It's on production, and happens really rarely. It just showed up on Sentry\nsometimes.\nOn 29 August 2013 14:07, Matt Robenolt notifications@github.com wrote:\n\nCan you recreate with unminifed source? Or at least witht he sourcemap\naccessible so I can get the context. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/131#issuecomment-23523644\n.\n\n\nPhilippe Modard\n415-722-1245\nphilippe.modard@gmail.com philippe.modard@modygo.com\ntwitter.com/philmod\nre.vu/philippemodard\nwww.linkedin.com/in/philippemodard\nIBAN BE70 0639 3284 8025  -  BIC: GKCCBEBB\n. I do that.\nOn 29 August 2013 14:19, Matt Robenolt notifications@github.com wrote:\n\nCan you deploy the raven.min.map along with it so Sentry coudl map it up\nproperly? This error is very unactionable without some context.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getsentry/raven-js/issues/131#issuecomment-23524397\n.\n\n\nPhilippe Modard\n415-722-1245\nphilippe.modard@gmail.com philippe.modard@modygo.com\ntwitter.com/philmod\nre.vu/philippemodard\nwww.linkedin.com/in/philippemodard\nIBAN BE70 0639 3284 8025  -  BIC: GKCCBEBB\n. ",
    "tmcw": "So, additionally, in the hosted version of this script, I get an 'ignoreErrors is going to be removed soon', but that message isn't present in the version here.\n. Multiple entry points for @sentry/browser would likely fit some of the usecases here - if you generated multiple dists and recommended that people require @sentry/browser/dist/sentry-ember.js or @sentry/browser/dist/sentry-vue.js, then you could have one release but slim outputs.\nFor our app, we use React, so Vue/Ember is dead code, and same with breadcrumbs. Sentry so far hasn't been one of the big parts of the system, but the recent size bump pushes it closer to the line. Other modules tend to either eat the maintenance cost, or, like aws-sdk, allow sub-requires, or like React, use process.env or another env transform to remove unused code.. ",
    "santialbo": "This was my fault. For reference: I was using the src script insead of the dist one.\n. ",
    "russelldavis": "This has been fixed (by #189)\n. This just bit me in the 1.1.0 release. This probably warrants a 1.1.1 patch release.\n. I'm loading the plugins via requirejs (using shim config). Your proposal would sort of solve the problem, but it seems like it defeats the purpose of them being plugins (i.e., making them optional).\nAnother option would be to make the plugins support AMD.\nBut, imagine a third party developer releases a raven-js plugin. It won't be included in your build, and it might not support AMD. That brings us back to the original problem, which is why I think removing noConflict() is the right solution.\n. Thanks. Yeah, browserify is nice. It avoids annoying issues like this (see the 'Disappearing globals' section in this post which talks about another library that had this exact same problem).\nAnyway, taking a quick look at the docs, I don't see an obvious place to mention this. Considering my change is what I would consider standard (cf. jquery), perhaps it's enough to just point anyone questioning it to this PR?\n. Yep, this should fix #133 \n. It only breaks when the exception gets propagated to window.onerror. So, try adding throw err after your call to captureException. Or add options to Raven.context or Raven.wrap, e.g.\nRaven.context({tags: {foo: 'bar'}}, function() {\n    throw new Error('foo');\n});\n. (In addition to the above, it would break when calling Raven.captureException twice within 2 seconds, as in #133).\n. Doh... yeah, lemme find a breaking example.\n. No prob, I do the same. It's the only sane way to do it. (:\nSo, I was able to reproduce using the Raven.context example I posted above. I committed it to examples/index.html. When clicking the 'test options' button in my branch and inspecting the resulting request to sentry, it correctly has \"tags\":{\"foo\":\"bar\"} in the query string. When doing that in the master branch, it does not. Are you seeing something different?\n. Ah, I think I know what was going on -- newer versions of Chrome (must be >= 33, since I'm on 32 and seeing the old behavior) now pass the exception to window.onerror, which as of 8b5236475e9ccdf9d54eff1b7ff7af04cb19b274 takes a different code path, which doesn't trigger the bug.\nLooking at that code though, there may be a separate bug there, since that code isn't clearing lastException and related vars. I'll take a closer look and do some tests to be sure.\n. Yeah, I'm also sad about the time to run the tests. It's an unfortunate consequence of TraceKit having to wait two seconds for report to run it's full course. I suppose we could make that time configurable and have the tests set it to a lower number.\n. Cool. Speaking of Tracekit, do you happen to know any of the maintainers and/or what's going on with that repo? I'm wondering if we should open an issue there to let others know that it's been abandoned. Not sure what the proper etiquette is around that, but the issues and pull requests are piling up, with no responses whatsoever.\n. Awesome. I don't have a ton of free time, but I'd be happy to help a bit when I can. Will look for you in #sentry.\n. Note that the current symptom of this is that in browsers where the exception arg is passed to window.onerror, Raven's handleStackInfo function gets called twice for every exception. I think this will normally result in two requests getting made to sentry, but haven't tested yet outside of example/index.html, and in that case, the second error never gets sent because the exception arg gets passed as null (see http://stackoverflow.com/questions/5913978/cryptic-script-error-reported-in-javascript-in-chrome-and-firefox). This ends up getting filtered out in processException due to message being null.\n. (you'll probably want to set breakpoints in tracekit's onerror function to get a feel for what's happening here)\n. ",
    "bencevans": ":+1: \n. Receving warnings when installing from Bower now:\n\u279c  [REDACTED] git:([REDACTED]) bower install --save raven-js\n...\nbower raven-js#*            deprecated Package raven-js is using the deprecated component.json\n...\nbower raven-js#*              resolved git://github.com/getsentry/raven-js.git#1.0.8\nbower raven-js#~1.0.8          install raven-js#1.0.8\n. I'm quite happy to submit a pull-request if it won't be done otherwise, just need to know whether to move the component.json file or duplicate it? Due to people using TJ's 'component' module system.\n. I'd recommend duplicating as that can't hurt anyone using the component.json currently.\n. jQuery seem to have just gone with the bower.json file without a component.json ... https://github.com/jquery/jquery\n. ",
    "deepwell": "That makes sense, thank you for the clarification. I just need to adjust my mental construct and it covers what I want.\n. My use case is to write some code that wraps Raven (generic error handler), reload the page and test it with Dev Tools (instead of trying to simulate an error), by calling App.logger.error('my message'). @skovhus is right, it's only for testing, but if a developer can't get past this testing step, they will assume their code or the library is broken and try other versions and other browsers (I know because that's what I did).\nIn my experience, the Dev Tools always match up with actual code, so myself and most developers use them to quickly test if code is working. The fact that Raven doesn't work when triggered from the Dev Tools but does work when triggered from running code is an odd and confusing exception for us developers. Raven.test() would help, but then we'd still have to figure out this is an issue with the library, find that part of the documentation, and then try it out to verify it works. IMO not ideal.\nFor ease of use, and relieving developers from solving another problem (figuring out dev tools doesn't work but directly in the code it does), I ask that you fix this issue. As a user of Raven on many projects, this just looks like a bug to me.\n. ",
    "jonashaag": "Well that's embarrassing. I forgot to include \"localhost\" in the list of allowed domains and was testing this on a local copy of the site. Problem solved.\nStill... is 400 the correct response in this case? Not maybe 404? Or something indicating \"not allowed\"?\n. ",
    "peterdemin": "@dcramer, have you changed 400 to 403?\n. ",
    "mverleg": "I just ran into this problem with code 400\n. ",
    "gst": "same with me :( \n. @mattrobenolt : I had to use the exact URL I've set in my SENTRY_URL_PREFIX ; which I had set to my computer hostname (http://myhostname:9000) ; while I initially tried http://localhost:9000 in my browser.. replacing localhost with my computer hostname has make it to succeed. \n. ",
    "podkot": "Ok, PR is updated\n. ",
    "padolsey": "Thank you for the quick response!\nYou're right -- we shouldn't really be using window.onerror -- but there seem to be some exceptions that are otherwise very tricky to catch because of their async nature (although am working at \"hooking\" into these areas).\nA Raven.onException would be incredibly useful I think -- it'd enable people to add metadata at the time of exception too, which I don't think is possible with context/wrap (with them, you have to prepare the metadata beforehand).\n. I should have mentioned that before, sorry. \nI want to send, along with the exception, details of the DOM events leading up to the exception. I have a function which intercepts dispatched jQuery events, logs them (throwing them away after 5000ms). If an exception occurs within 5000ms of the DOM event I will send info about that dom event within the extra data. Stack traces on minified sources don't give enough info to determine where the problem is (e.g. error @ line 1, which contains 10000 characters) -- so I was thinking of sending some additional info along, and \"dom events leading to an error\" seemed like the wisest choice at the time. (interested if you have any thoughts about this)\nThis reminds me of another issue (#58). If my payload, including the dom-event stuff, is too big will it just error out?\n. Sorry for closing -- was about to add an explanation -- realised that the dom-event thing is moot (or should be) if we use source maps.\n. Thank you for the info regarding the payload length.\n. ",
    "akzhan": "Writing of some JavaScript that uses Raven but doesn't know which plugins already set, for example.\nMy lazy.coffee plugin (not published yet), for example, uses Raven.wrap. But someone uses Raven native plugin so setTimeout already wrapped and event generated twice.\n. I suppose that wrappers with separate contexts (known as options here) should be known and logged as separated wrappers.\nA lot of wrappers has no options so have context = undefined, and will be compressed into one.\n. I can update it to use key __raven__.\n. ",
    "chrisjbaik": "Is this planning on being implemented anytime soon?\n. Awesome. We're planning on potentially using this very soon and that'd be amazingly helpful.\n. ",
    "PatrickJS": "I updated the PR to use angular.isFunction() and angular.isUndefined()\nI copied to code in order to use captureMessage that checks for the development flag.\njavascript\n    captureMessage: function captureMessage(message, data) {\n       if (_development) {\n         $log.error('Raven: Message ', message, data);\n       } else {\n         $window.Raven.captureMessage(message, data);\n       }\n     },\n. if Raven accounted for a development mode (logging errors rather than sending them to Sentry) we can simplify it like so \njavascript\nmodule.factory( 'Raven', [ '$window', function($window) {\n  return $window.Raven\n}]);\nmodule.factory('$exceptionHandler', ['Raven', function(Raven) {\n  return function(exception, cause) {\n    Raven.captureException(exception, cause);\n  };\n}]);\n. I can also allow the user to asynchronously load Raven.js during Angular's configuration phase if they're too lazy to include Raven before Angular. I originally removed that feature because I wanted to make sure Raven to captures all errors before Angular bootstraps including when Angular fails\n. I can check if Raven is in the global space then load Raven if it's not. Similar to how I handle d3 \nhttps://github.com/gdi2290/angular-d3/blob/master/angular-d3.js\nI can allow the user to configure Raven just as they normally would with any other Angular module\njavascript\napp.config(function(RavenProvider) {\n  var settings = {};\n  RavenProvider.config('DSN', settings) //etc\n}\nLike I said the only problem is that Raven isn't loaded until angular bootstraps (after DOM is ready) I can also load raven.js it outside of Angular and check there. \n. I updated the pull request 4 hours ago it was missing a semicolon. Travis didn't run again I'm not too sure why\n. +1\n. ",
    "emosenkis": "What's the status of this? I see there's an angular.js in the plugins folder, but it's not available in the CDN and it doesn't look much like the above code.\n. ",
    "fanzeyi": "@mattrobenolt Of source I can know the app id, and it would not change. ^^\nThank you.\n. Nope. It's still an issue.\nChrome's CSP doesn't allow to write something like this:\nimg = new Image();\nimg.src = \"http://example.com\";\n. I wrote an example here\n. ",
    "frekw": "I'm having a very similar problem as well.\nI'm trying to get Raven (running on the hosted version of Sentry) working in an application running Chromium Embedded Framework where apps are run as file:// URI:s (but with a custom URI scheme).\nThe image approach won't work because Chromium won't set Origin or Referer header for GET requests when running from file://.\nI tried to patch makeRequest to honour an useXHR option using X-Sentry-Auth headers for validation, but it blows up because of sentry_secret missing (which seems to be the same issue @Shyru was having with PhoneGap; https://github.com/getsentry/raven-js/issues/29). Relevant gist can be found here: https://gist.github.com/frekw/8540890\nI think an option to disable validation for posting log entries in the backend on a per project basis would be the way to go.\nWhile it would be possible to patch parseDSN to allow sentry_secret is useXHR is set, leveraging the sentry_secret for auth in raven-js seems like a bad idea since many of these sandboxed apps (e.g Chrome extensions or the type of app I'm working on) can easily be disassembled. They are usually zip-files containing the static assets, but with a custom extension (e.g .crx instead of .zip).\nI'll be happy to give any assistance I can to get this working, because me and my team would really like to use Sentry for error reporting.\n. Oh, I should have read the docs better. I just assumed full API access as soon as a public and private key are being used. Then I don't see any problems with distributing the private key in the bundle. :)\nI'm unfamiliar with the python library but I think it sounds like a good idea being able to plugging in new transports and choosing via the DSN.\nIf you want to, I can see if I can find some time to have a go at implementing a plugin API for transport tomorrow? \nI don't think it should be too difficult to get going. If we use today's method (let's call it http[s]+get) as the default unless explicitly set, it should be fairly simple to retain backwards compatibility as well and it should only be a matter to add some tests for the new functionality.\n. Ok @mattrobenolt, I've added a pull-request introducing registerTransport.\nSome changes were needed in addition to your suggestion:\nTransports are split up into setup  and send since each transport may need different configuration to be passed into Raven.configure, and we want to validate that config during the Raven.config step instead of when we try to send data. The setup method can also choose to accept triggerEvent as a second parameter, since that was the best way to get a hold of the private triggerEvent method Raven uses.\nI'm not too happy about passing in triggerEvent to each transport registered, but that was the only way to accomplish this change without adding triggerEvent to the public API (not sure if that's a good idea or not).\nI'd love your thoughts on this!\n. ",
    "nrako": "Great! I need that sentry fix getsentry/sentry@9e5ecfe for node-webkit which like cordova doesn't send any referer. @mattrobenolt do you know when this will be part of an official sentry release?\n. Thanks for the infos @mattrobenolt. We end up patching the latest release with what we needed. I don't feel very confident with using HEAD, but since there CI tests we might, we'll see. But hopefully the release will be back? I guess for a v7?\n. That should surely increase our confidence to run HEAD thanks :)\n. ",
    "wildermuthn": "I too would love to get this working for node-webkit\n. ",
    "wearhere": "Hi everyone, I can't quite follow what is expected/not expected to currently work, but I just wanted to report my findings from including raven-js 1.1.16 in a Chrome extension:\n1. I did not have to patch Raven at all i.e. I didn't run into the transport issues initially described by @fanzeyi.\n2. I was able to use the public DSN seemingly despite the comments above from @mattrobenolt et al. about having to include the private/secret keys.\n3. I reproduced @fanzeyi's initial report that Sentry doesn't allow you to add an 'Allowed domain' of chrome-extension://*/ or even chrome-extension://{{ your id }}. So, I had to allow all origin URLs using *. :(\n4. Despite the above, I was able to whitelist and include Chrome extension URLs. My extension modifies Gmail, so I configured Raven like this:\njs\n   Raven.config(clientDSN, {\n     whitelistUrls: [/^chrome-extension:\\/\\//, /mail.google.com/],\n     includePaths: [/^chrome-extension:\\/\\//, /mail.google.com/]\n   });\nThat is, the first match pattern of each array whitelists/includes the background scripts, the second the content scripts.\nSo, from my perspective it looks like the the only bug is that we can't restrict the origin URLs (#2 above). Any chance you could help with that @mattrobenolt? :)\n. +1\n. Hey @benvinegar, cool to see this fixed. Will whitelistUrls automatically start filtering global exceptions once we upgrade?\n. Cool! What version is this targeting? We're past 3.4.0 now.\n. Thanks for looking into it @mattrobenolt! JSDelivr is a popular CDN. I assumed that you guys had uploaded Raven there but I realize now that I got confused about the contributors while hopping between their repo and here. The error doesn't break anything, it's just annoying in our console :)\n. Fair enough @benvinegar. The only thing that's nice about JSDelivr is that you can bundle different scripts together. For instance\nhtml\n<script src=\"//cdn.jsdelivr.net/g/jquery@2.1.4,underscorejs@1.8.3,raven@3.3.0\"></script>\nfetches jQuery, Underscore, and Raven altogether. This saves on bandwidth by compressing the scripts together.\n. Oh I know, I wasn't complaining. Thanks again for your research here. I was just explaining why someone might choose to use JSDelivr vs. the official CDN, I agree it would be nice to follow the official recommendation.\n. Similar to how, in raven-node, it's possible to instantiate Raven.Client multiple times.. Cool thanks!\nI'm cool with it being undocumented but please don't remove it :) I think it's a really nice feature of both the Node and JS clients for users that are using module loaders/bundlers, and adds little complexity to the library's use.\nMy remaining question is, do both instances need to call install()? Is it safe for them to both do so?. Terrific, thanks!. Hey @kamilogorek, when you say\n\n[messages] are usually meant to be sent by developers themselves\n\nIs your assumption that stacktraces are unnecessary because the messages uniquely identify the error?\nIf so, I think I can describe two scenarios where that is not the case. First, the developer (me) might mess up and capture the same message in two different places.\nAlso, the same message might be captured from two different code paths:\n``js\nfunction shared(arg) {\n  if (!arg) error.captureMessage('arg` must be defined');\n}\nfunction foo() {\n  shared(null);\n}\nfunction bar() {\n  shared('hi');\n}\n```\nIn this case having a stacktrace for the message would help identify how the error occurred.. @kamilogorek let me ask this, is there any downside to always capturing the stacktrace?. Ok thanks for the info!. ",
    "oroce": "Ohh that would be awesome. thanks.\n. I slightly redid the gist above: https://gist.github.com/oroce/ec3786ba7eff59963842220c3ffc56b4\nThere's no leaking variable.  I kept the window.onerror handler, but feel free to use window.addEventListener('error', fn).\nThe biggest help at point be having traceKitWindowOnError as an exported function from Raven. Since that's the function which gets called when an error happens: https://github.com/getsentry/raven-js/blob/master/dist/raven.js#L2074\nI know we wouldn't have that very proper stacktrace but we would have something better than what we have now.\n. @benvinegar you are completely right. In applications which aren't public (aka google won't reach the pages) the classic (blocking) raven way is completely fine but as soon as you have a public facing site where the google page insight points do matter, we need to optimize how we load third party code (this is the price we are willing to pay in favour of ux, speed and better search result position).\nMoreover bundling raven into our bundle is a solution, but as soon as you get into optimizing your frontend code with above the fold optimizations, like splitting your bundle into multiple ones using tools like factor-bundle or you include multiple bundles to gain more speed, the above solution can be a better one imo, but I'm open for suggestions.. @benvinegar I totally get where you are coming from, I know what I'm doing so I don't expect stacktrace when there shouldn't be. For newcomers, less experienced ones or just users with different usecase it can be leading for sure.. ",
    "DominicTobias": "I hope this would be a plugin or something for people who don't care about <= IE7 which should hopefully be most people. I eagerly await the ability to POST though as the report size is often exceeding max param length for me :)\n. Great, thanks!\n. ",
    "pvdz": "I see it happen in makeRequest. It receives the data, then picks data['sentry.interfaces.Stacktrace'] from it, which will be undefined. The rest is history.\n. Oh hm. 1.0.8. I see that it's 1.1.1 now. Okay, if it's plugged or no longer relevant then nevermind :)\n. Heh, git blame says the change is my own (I was pointing at somebody else ;)). Sorry for the noise.\n. (Also, no, the problem is that the stacktrace is somehow not set on firefox, which caused a problem in \"my\" stack trace pruning code. We had to limit this because the size of the request url was being exceeded for IE10. Reducing the stack fixed this problem. I think I saw a related ticket in getsentry when I searched for stacktrace just now..)\n. IIRC and fwiw, we were seeing this problem on IE10 without using a local Sentry. But as I didn't even remember coding that snippet myself, it's been a while ago so who knows what changed.\n. I'll have a look at the callback btw. Thanks :)\n. ",
    "AlbanMinassian": "Thank\n. ",
    "juriejan": "Thanks! I also need this. You might want to re-build the distribution file. It doesn't contain the change yet.\n. Thought I was missing something obvious. Fixed as per comments.\n. I've rolled back and created a single commit without compiling the distribution.\nI'm currently using this in a mobile application (Cordova based) and I'd like to display a dialog to users where they can confirm that an error report should be sent. The callback allows me to respond after they have made their selection.\n. Oops!\n. ",
    "machadogj": "@mattrobenolt does this work in the same way for captureException?  and btw, I think it would be better if in the docs you specify something like:\nRaven.captureException(e, {extra: { foo: { bar: \"baz\" }}}). @ismay do you think this could be somehow related? (In the sentry UI it does look different though)\nhttps://forum.sentry.io/t/complete-lack-of-context-on-syntaxerrors/1521. ",
    "Gabri3l": "It works the same for captureException, just tested that!. ",
    "zywyz": "I try to use it with captureException and it doesn't work, I have two lines as below:\nRaven.captureException(error, {extra: { captureException: 'captureException' }})\nRaven.captureMessage(error, {extra: { captureMessage: 'captureMessage' }})\nand I can see both errors in sentry, but only capture message has extra tag.. I found another solution which works for me, so I don't need help anymore.\nBut according to reason why it doesn't work for me I have no idea as I can see for you it works.\n``\nRaven.config(https://${key}`, { environment, release }).install()\nexport function logError(errOrMessage) {\n  const error = is(String, errOrMessage) ? new Error(errOrMessage) : errOrMessage\nRaven.captureException(error, {extra: { captureException: 'captureException' }})\n}\n```\nand in index.html\n<script src=\"https://cdn.ravenjs.com/3.26.3/raven.min.js\" crossorigin=\"anonymous\"></script>\n. ",
    "kamilogorek": "\n@zywyz just tested it and everything works fine. Can you provide repro case that doesn't work for you?. @kireerik it definitely will be implemented (most likely as a documentation how-to), but I cannot give you an accurate date estimate now.. https://docs.sentry.io/clients/javascript/install/#async-loading. Hello, thanks for reporting the issue.\nWe are in the process of working on the next major release of our SDK.\nBecause of that, we had to put working on the current version (except major or security bugs) on hold.\nWe'll try to get back to all the reports as soon as possible, so please be patient. \nThanks for your understanding,\nCheers!. Tested it and it appears to be fixed now. Wrapped functions return their culprit correctly. Closing.. > 4+ years later.. is it possible to start using another mechanism, perhaps console.trace?\nIE10 doesn't support console.trace.. Afaik IE10 supports 'use strict' and Trackit now wraps .caller calls in try/catch so this shouldn't even throw(?).\nhttps://github.com/getsentry/sentry-javascript/blob/89bca28994a0eaab9bc784841872b12a1f4a875c/packages/browser/src/tracekit.ts#L1461\nhttps://github.com/getsentry/sentry-javascript/blob/89bca28994a0eaab9bc784841872b12a1f4a875c/packages/browser/src/tracekit.ts#L1347. Addressed here https://github.com/getsentry/raven-js/pull/1165. Agree with Ben on this one. It seems like a lot of overhead without providing enough functionality to justify it. I'll leave it marked as a \"Feature\" so we can get back to this discussion one day if we decide that it's a good time to revisit this.. There's a great post on how to achieve it: https://coderwall.com/p/m3-cqw/subclassing-error-in-javascript-is-harder-than-it-seems\nI don't think we will add this to our docs anytime soon, so closing it for now.. >  Any idea of a current estimate on max size?\nIt's currently 100kB. You can use dataCallback to strip something that's unnecessarily big and you know you can skip it.. It is indeed a global callback, which will be called for every event.\n\nAdditionally I feel that the best policy is to report the error to sentry without the heavy extra payload (or breadcrumbs or stack) rather than simply failing on the client...\n\nIt's not that easy to do. We cannot simply calculate the size of the request and strip something if it's too large. We have to be performant and low in size. Adding something like this would require serialization of a whole payload, calculating the size and recursively trying to get it down to \"sendable\" size, which can be just too heavy process if someone will send tenths of errors in a very short period of time.. We can most likely utilize Node's serializer here as well. Just a note to myself.. Mutating filenames is already described in Node/React/Cordova SDKs. We'll unify everything so this one will be already covered.. There's discussion going on about the same issue here https://github.com/getsentry/raven-js/pull/927. This is fixable in new SDK using event hints and custom error handling.. @hiroshi please see https://github.com/getsentry/sentry-javascript/issues/1401#issuecomment-418631326\nIt's a feature of new sentry-javascript SDK, which has been released as a RC Today. It won't be ported back to raven-js/node.. It's already doable as inbound filter in sentry. Design changed a bit, so closing this one. We don't support PhantomJS. We'll be reworking this part in the next major version and are aware of the culprits. Closing it for now.. @jmahony not yet, we'll announce the release somewhere at the end of Q3. Closing due to inactivity. Feel free to reopen if still relevant.. Please refer to https://github.com/getsentry/raven-js/pull/821#issuecomment-328533400. Please refer to https://github.com/getsentry/raven-js/pull/821#issuecomment-328533400. We already discussed this, and we'll go with a separate releases for every plugin.. Is this issue still relevant? Please feel free to reopen if so. Cheers!. Already implemented. By XHR failures you meant literally reporting errors during request itself? I understood it as instrumentation, which we have for XHR.\nIn that case you're right that we don't have it as a plugin. We should most likely also support fetch then.. Hey @colbygk,\nIt should modify prototype by default, but allow for passing users implementation, as it's done in console plugin right now https://github.com/getsentry/raven-js/blob/master/plugins/console.js\nAlso see:\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L1131-L1153. Closing due to inactivity. Feel free to reopen if still relevant.\nAlso can be done with custom transports or integration now.. It looks like the original issue has been already resolved. Hey @avesus, no, not yet, as nowadays people are using various promises implementation, which makes it hard to do.\nWe sure can do it natively, but then this code will be unusable by someone using Bluebird, Q or any other implementation.\nFor now this https://docs.sentry.io/clients/javascript/usage/#promises is what we recommend, but this may change one day.. Docs are rather clear now https://docs.sentry.io/clients/javascript/integrations/angularjs/ (all examples show correct order), and there's also this line which should be sufficient:\n\nThese examples assume that AngularJS is exported globally as window.angular. You can alternatively pass a reference to the angular object directly as the second argument to addPlugin:. I believe this should be done in the dashboard? @getsentry/javascript . There's discussion going on about similar issue here as well \u2013 https://github.com/getsentry/raven-js/pull/927. > unaware that Chrome will purposely suppress those from reaching onerror, so they're never picked up by Raven.\n\nI didn't know that! : O. Looks fine to me. Apparently, original issue has been answered here already, so closing this one. Feel free to reopen if it's still relevant in any way.. Closing due to very long inactivity. Feel free to reopen if it's still relevant.. Already fixed. @benvinegar is this still relevant issue?. Closing due to very long inactivity. Feel free to reopen if it's still relevant.. Original issue has been already fixed. @dcramer is this still relevant?. > The issue is that we do not generate the eventID immediately\nWe do now. https://github.com/getsentry/sentry-javascript/issues/796#issuecomment-420251623. Closing due to long inactivity. This thread also contains few workarounds just in case. Please feel free to reopen this issue if it's still relevant in any way.. Please refer to https://github.com/getsentry/raven-js/pull/912. This PR is outdated, therefore I'll close it for now. @howard @jamiecounsell, if you'd like to work on updating it, please let me know. I created https://github.com/getsentry/raven-js/issues/1033 to track this feature.. I'll close this one for now, as we're aware of this missing piece and we'll be revisiting how this thing is working in the next major version.\nRef: https://github.com/getsentry/raven-js/issues/783\nRef: https://github.com/getsentry/raven-js/issues/577. I'll close this one for now, as we're aware of this missing piece and we'll be revisiting how this thing is working in the next major version.\nRef: https://github.com/getsentry/raven-js/issues/783\nRef: https://github.com/getsentry/raven-js/issues/576. @TuxujPes it'll be possible in the next major release, however not in this one, as it requires some public API changes that we can only introduce in major releases.. Somewhere near the end of Q3 (excuse me such a long response time, was on vacations).. @hiagodotme @TuxujPes @adamreisnz this feature is already available in new SDK - https://docs.sentry.io/learn/filtering/?platform=javascript#before-breadcrumb. @1999 it add's 12.7kB when compared to raven-js, don't use non-gzipped sizes for comparison, as it's not relevant.\nAlso v5 (https://github.com/getsentry/sentry-javascript/pull/1919) is going to be <15kB, so you won't have to worry about your payload increase.. ping @d6u. still interested in sending a PR?. No worries, thanks!. Closing due to long inactivity. Please feel free to reopen this issue if it's still relevant in any way.. Closing this one in favour of this issue https://github.com/getsentry/raven-js/pull/670. @felixfbecker\njs\nSentry.configureScope(scope => scope.setUser({}))\nUser interface has no required attributes \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/index.ts\nand setUser doesn\u2019t merge with existing data \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/hub/src/scope.ts. Good catch, will change that :). @felixfbecker done \u2013 https://github.com/getsentry/sentry-javascript/commit/67360d0f8460d9c07bbdff2319042e726032d375. @benkermode use ignoreErrors config - https://docs.sentry.io/clients/javascript/config/. We can utilize my node serializer here maybe. We'll see.. > the official statement is that this is intended because that's not what breadcrumbs were designed for? o_O\nThere's nothing stopping you from doing a correct console.log(JSON.stringify(data, null, 2)) to solve this issue.\nHowever, right now we have a breadcrumb hints that allows users to change this behavior with ease: https://github.com/getsentry/sentry-javascript/issues/1401#issuecomment-418631326. To setup Raven for Electron applications right now, you can use:\n\nraven-node for main process\nraven-js for renderer process\nhttps://github.com/40thieves/webpack-sentry-plugin to setup source maps\n\nIn order to use source maps correctly, it's required now to manually update filepaths, as @arusakov already mentioned.\n```js\nfunction normalizeUrl (url) {\n  return 'app:///' + url.replace(/.*\\//, '');\n}\nRaven.config('DSN', {\n  dataCallback: function (data) { \n    data.culprit = normalizeUrl(data.culprit);\n    data.exception.values.forEach(function (value) {\n      value.stacktrace.frames.forEach(function (frame) {\n        frame.filename = normalizeUrl(frame.filename)\n      });\n    });\n    return data;\n  }\n}).install();\n```\nI'll work on fixing this directly in raven, so we won't need any plugins for this.. Not relevant for new SDK. Is this issue still relevant? Please feel free to reopen if so. Cheers!. Agree with @dcramer that this should be done on the server-side.\nClosing this issue for now, but please feel free to continue discussion and reopen it if necessary.. Prefixes sounds good and should be rather easy to integrate here.\nFor a reference: https://docs.sentry.io/clients/php/config/\nCreated an issue for this task https://github.com/getsentry/raven-js/issues/1036. Our TypeScript typings change quite a lot since this was reported. Please feel free to reopen this issue if it's still relevant in any way.. Sampling is already a thing now. MaxEvents is discussed here https://github.com/getsentry/raven-js/pull/767. Duplicate of https://github.com/getsentry/raven-js/issues/911. Released as 3.26.4 \\o/. Thanks @mruzekw!. Unfortunately, this feature is very \"data heavy\" in both ways. SDK size and events payload. I don't think we're going to implement this anytime soon, but I'll leave this marked as a \"Feature\" so we can come back to this one day.. They even have integrations with Sentry :). @guillaume86 event processors and beforeSend methods are async. You can already do this :)\n```js\nSentry.configureScope(scope => {\n  scope.addEventProcessor(async (event, hint) => {\n    const screenshot = await makeScreenshot();\n    const screenshotUrl = await uploadScreenshot(screenshot);\nreturn {\n  ...event,\n  extra: {\n    ...event.extra,\n    screenshot: screenshotUrl\n  }\n}\n\n});\n});\n```\nOr you can use beforeSend, or write a custom integration. It's up to you. https://docs.sentry.io/platforms/javascript/. @guillaume86 you'd have to ask here for this https://github.com/getsentry/sentry :). @leroydev have you seen this thread? https://github.com/getsentry/raven-js/issues/949#issuecomment-309964423. I haven't dig into the issue yet, just found a similar one. Will do that soon.. @leroydev does this resolve your issue?. This issue has been closed due inactivity. Please feel free to reopen it if this is still relevant. Thanks.. This can be achieved through custom transport in new SDK. I don't see any particular reason why we'd not want to include this config option (with it being set to Infinite by default). What do you think about it now @benvinegar?. @benvinegar updated the code, docs and TS definitions.. Ah, right. I didn't realise that.\nAlso we won't have location changes when we'll unify node/browser, which mean that we'd have to diverge an API once again in this case... I'm not sure about integrating that perPage in this case.\nMaking it a \"total\" number of events would be much easier and could be pulled to other SDKs as well easily.. Linked this PR discussion to proper docs. I'll close this one for now, as we're aware of this missing piece and we'll be revisiting how this thing is working in the next major version.\nRef: https://github.com/getsentry/raven-js/issues/783\nRef: https://github.com/getsentry/raven-js/issues/576. This is fixed in new SDK:\njs\ninit({\n  dsn: '__DSN__',\n  beforeSend(event) {\n    // event.event_id is now always available\n  }\n});. Closing as discuss will be moved to v4 docs. Linked this issue there.. @mreq it will be fixed with the next release, as it's already fixed in the sources https://github.com/getsentry/raven-js/blob/master/vendor/json-stringify-safe/stringify.js#L14-L15. We can get back to this discussion once Sentry will support this. Closing for now.. Already fixed in latest version:\n\nAlso different test case in Sentry Dashboard:\n\n. Hey, sorry for the inconvenience @y-lohse. We're working on the next major version right now and we'll make sure that it won't create issues like the one you described above.. As @benvinegar mentioned above:\n\nRaven should really be configured before you even initialize Angular. That way it can pick up an error in the Angular initialize process.\n\nWe shouldn't write code that'll allow to miss catching errors in any scenario. Especially during initialization, as it's the crucial part of the app.\nI'll close this issue alongside with #413 and #414 but please, feel free to continue discussion here and reopen an issue if you think it's still something we should work on.\n. It was patched with https://github.com/getsentry/sentry-javascript/pull/1083/. Duplicate of https://github.com/getsentry/raven-js/pull/1002/. What's exactly the issue? Can you provide your config/repro case? Without it, I cannot tell much.. @joshmreesjones what's the issue exactly? What's your setup? Your config? Can you provide reproducible repository? It's very hard to debug without knowing any of those things :). Hey @jamesmanning, it'll work just fine out of the box. You can read how to use error boundaries here though - https://blog.sentry.io/2017/09/28/react-16-error-boundaries\nOne thing to keep in mind is that React does bubble all the errors in development mode, even those caught by error boundaries (here's more context you can read about https://github.com/getsentry/raven-js/issues/1249#issuecomment-372344133). React-native plugin will be soon deprecated. Please use https://github.com/getsentry/react-native-sentry from now on.. We already pass. @ArmorDarks I wish i remember what happened here... \ud83d\ude05\nThe issue with $store is that it can easily exhaust our 200kB limit for a single event, as they tend to grow kinda fast.. Closing this due to inactivity and main issue being solvable using dataCallback.. We already improved those checks quite a bit.. @benvinegar @mattrobenolt can you provide any context on this? Should this be solved/updated?. Agree. Closing this for now, and we can continue discussion here https://github.com/getsentry/raven-js/issues/911 if necessary.. Closing due to inactivity. Please feel free to reopen and provide a PR if it's something you'd still like to use.. What do you mean by \"crash the browser\"? Like... an actual crash? How did that happen? Can you provide some more details?. We'll rethink the approach to this issue in the next major release. Right now, however, it'd be too much overhead to do this operating for every single event and it may impact the performance of our SDK.\nWe do provide all the required tools so that developers can do that themselves if they are willing to - https://github.com/getsentry/raven-js/blob/deff2f06b40d10389705167c25efc2e737240e3e/packages/raven-js/src/utils.js#L486-L553\nIf you want to calculate the size of the breadcrumbs every single time and truncate them if they are too heavy, feel free to do that. Here's how you'd approach something like this:\n```js\nconst utils = require('../node_modules/raven-js/src/utils'); // or just extract it to your own file, its up to you\nconst MAX_SIZE = 50 * 1024;\nfunction truncateBreadcrumbs (data) {\n    // Handle edge-case to prevent an infinite loop\n    if (utils.jsonSize(utils.stringify(data)) > MAX_SIZE) {\n      data.breadcrumbs = data.breadcrumbs.split(0, -1);\n      return truncateBreadcrumbs(data)\n    } else {\n      return data;\n    }\n}\nRaven.config('YOUR_DSN', {\n  dataCallback: function (data) {\n    return truncateBreadcrumbs(data);\n  }\n}).install();\n```. @MaxBittker can this one be closed? Or do you have any reason to keep it and move forward with writing it?. Are we sure that we want to send those kind of errors in the first place?\ncc @benvinegar @MaxBittker . We use format now. Closing due to inactivity.. @graingert is this something that's still relevant for you and you can provide an example mentioned above?. This is fixed now. Closing.. TS Definitions are already available now.. Fixed. It's a code error, not SDK's. Closing this one.. Fixed both things. Thanks!. It'll be fixed with an async loader. This is somewhat similar behaviour to https://github.com/getsentry/raven-js/pull/534\nIt allows to captureException, but doesn't restrict a console log level.\nIs this something that would be useful @wolever @developit ? Or do you think solution presented here is more reasonable?\ncc @benvinegar . Makes complete sense. Snippet is small enough, so that it can be used ad-hoc by anyone when necessary.\nClosing it for now, alongside with https://github.com/getsentry/raven-js/pull/534. Closing due to good explanation above.. You're right @eMerzh, however I verified your version and it works just fine for me.\nThis is the code that gets run in Raven, which you can copy/paste into devtools:\n```js\nfunction isString(what) {\n  return Object.prototype.toString.call(what) === '[object String]';\n}\nfunction joinRegExp(patterns) {\n  // Combine an array of regular expressions and strings into one large regexp\n  // Be mad.\n  var sources = [],\n    i = 0,\n    len = patterns.length,\n    pattern;\nfor (; i < len; i++) {\n    pattern = patterns[i];\n    if (isString(pattern)) {\n      // If it's a string, we need to escape it\n      // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n      sources.push(pattern.replace(/([.*+?^=!:${}()|[]\\/\\])/g, '\\$1'));\n    } else if (pattern && pattern.source) {\n      // If it's a regexp already, we want to extract the source\n      sources.push(pattern.source);\n    }\n    // Intentionally skip other cases\n  }\n  return new RegExp(sources.join('|'), 'i');\n}\nvar patterns = joinRegExp([\n    // Intercom,\n    /js.intercomcdn.com/i,\n    /widget.intercom.io/i,\n])\npatterns.test('https://js.intercomcdn.com/frame.6bbb8132.js') // true\n```\nIf it still doesn't work, can you use dataCallback and paste it one of the requests that has been sent but shouldn't?\njs\nRaven.config('__DSN__', {\n  dataCallback: function (data) {\n    console.log(JSON.stringify(data, null, 2));\n    return data;\n  }\n}).install(). @benvinegar it sounds reasonable to me and contains docs updates, TS definitions and updated default. I don't think this is a huge change and it may come handy for some.\nI'd say that I'm +1 for this change, but it's your call.. Let's put it on hold for now before we unify raven-node/js, as this is something that'd could not be unified.. Linked this PR discussion to proper docs\n. It won't fail anymore, but it also won't use fetch \u2013 https://github.com/getsentry/raven-js/blob/master/src/raven.js#L1805\nI believe we can add fetch transport if it's available for that case, but it'll also mean handling it in all the places (promises vs. callbacks). Fixed in https://github.com/getsentry/raven-js/pull/1157. Documented in the latest docs. @bjunc \nhttps://github.com/getsentry/sentry-docs/pull/310\ntl;dr\n\nWhat is the size limit, 100k\n\n200kB, or 64kB you use keepalive:true in fetch\n\nIs there a way to bump the limit on Sentry?\n\nno, it's not JS SDK limitation, but rather a whole system's\n\nhow to intercept and change the payload before sending it out to Sentry\n\nold SDK: dataCallback\nnew SDK: beforeSend or event processors once we document them fully\n\nI was considering something along the lines of the json-size NPM package. If the data is less than \n\n100k, then send the whole thing. If not, go through and prune\nSee my implementation of this approach here: https://github.com/getsentry/sentry-javascript/issues/874#issuecomment-379731186 which can be easily modified to be used in the Vue. We'll most likely provide more straightforward solution moving forward.. @StudioMaX are you by any chance able to isolate and provide a snippet that I could use to reproduce this issue? It's be very helpful here.. Addressed in https://github.com/getsentry/raven-js/pull/1310\nWill publish patched version by the end of the week.. Released as 3.25.0. Agree with @benvinegar on this one. Hopefully we'll come up with a better way of passing objects data to the dashboard one day.. Closing due to inactivity. There was no report of similar issues in over a year.. Weeeell, yes, it'll work, but it'll bundle both packages in your file. Unless you tree-shake them with rollup or something :). Let's move discussion to https://github.com/getsentry/raven-js/issues/1009. Is this issue still relevant? Please feel free to reopen if so. Cheers!. Thanks, @M1ke, however right now we're in the process of rolling out v4 of our SDKs. We'll definitely get back to this issue one day :). > can you guarantee that the current URLs will never change content\nYes, that's a guarantee.. Agree with @LewisJEllis, it'd be nice to add some more context to this one, so that users know why it's recommended. @benvinegar . @benvinegar updated the recommendation and added reasoning behind it. Gotcha. Updated.. @benvinegar @dcramer was there a consensus whether we should expose error object itself in dataCallback or not?. Effectively duplicate of https://github.com/getsentry/raven-js/issues/980. @seromenho still interested in tackling this issue?. Your implementation itself is very good, the thing that has to be done is extracting it to a separate file, wrapping it in exported function and hooking into Raven using addPlugin method https://github.com/getsentry/raven-js/blob/master/src/raven.js#L507-L516\nThe best implementation you can base on is React Native plugin https://github.com/getsentry/raven-js/blob/master/plugins/react-native.js as it shows how to add dataCallback to store the data before sending, how to drain those events and how to register a plugin.\nAlso allowOfflineStorage won't be necessary anymore, as every plugin is opt-in.\nLet me know if you need any more pointers or feedback.\nCheers!. Done through hints in new SDK. I will verify this once we get all required browsers tested on SauceLabs. @benvinegar all green \ud83d\udc4c . Ping @survivorm. I tried to reproduce it right now and it works just fine. captureException calls are handled correctly inside any method attached to Angular's controller.. Please feel free to reopen if this is still the case.. Thanks @gkaran!. Yes, it should work, but it's touching \"private\" properties, which you shouldn't rely on.\nI'll close this one for now, but please feel free to reopen if you have any more questions.. I cannot find any reference about avoiding $delegate method in the docs \u2013 https://docs.angularjs.org/guide/decorators\nClosing due to inactivity, but please feel free to reopen if it's still relevant.. @Rimbaud13 could you please rebase it?\nAlso re: your question, it'll have to be applied there manually, so feel free to open an issue there.. Rebased here https://github.com/getsentry/raven-js/pull/1042. Fixed.. @daangeerdink @jdelaune @rosslavery @tgensol could someone provide a the smallest possible code that could help me reproduce this?\n@sod I just checked, and Safari 10.1.2 is providing correct message in the scenario that you mentioned above.\n. Fixed in 3.19.x. @PhilippSpo which browser is this event coming from? ErrorEvent is not supported in some old mobile browsers and IE so we had to fallback to regular solution.. Thanks @shcallaway . Thanks for investigation @michal-rumanek, I'll try to handle this issue soon (don't have spare time this week).. Fixed in https://github.com/getsentry/raven-js/pull/1162. Can you provide some context Ben? Fetch is mostly Promises API so it should behave the same.\n```js\nfunction bar () {\n  return fetch('https://jsonplaceholder.typicode.com/posts/1')\n}\nbar()\n  .then(x => x.json())\n  .then((y) => throw new Error('foo'))\n  .catch(err => console.log(err.stack))\n```\neg. this code prints stack correctly.. Ref https://github.com/getsentry/raven-js/issues/1009. Sounds reasonable. There are scenarios where you'd want to send an error to the dashboard, despite having 20% sample rate. It's also pretty straightforward to implement.\n```\nRaven.captureMessage('Wubba Lubba Dub Dub', {\n  skipSampleRate: true\n});\nRaven.captureError(new Error('Bird Person'), {\n  skipSampleRate: true\n});\n```\nThoughts @benvinegar?. On the other side, I can definitely see a scenario, where global handlers should be set to let's say 20% sample rate, as one may have a pretty crowded site, but they'd want to make sure that captureException from on their payment component will always reach our servers. Right now there's no way to achieve that.. I created this simple example and it works just fine.\nhtml\n<!doctype html>\n<html>\n  <body>\n    <div id=\"app\">\n      <clock-x></clock-x>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```js\nimport Vue from 'vue'\nimport Raven from 'raven-js'\nimport RavenVue from 'raven-js/plugins/vue'\nRaven.config('https://public@example.com/1', {\n  dataCallback: function (data) {\n    console.log(data);\n    return data;\n  }\n})\n  .addPlugin(RavenVue, Vue)\n  .install();\nVue.component('clock-x', {\n  data() {\n    return {\n      currentTime: +new Date()\n    }\n  },\n  template: <div>\n    {{ currentTime }}\n    <button v-on:click=\"updateTime\">Update time</button>\n  </div>,\n  methods: {\n    updateTime() {\n      this.currentTime = +new Date()\n      throw new Error('Time is irrelevant')\n    }\n  }\n})\nnew Vue({\n  el: '#app'\n});\n```\nCan you please provide reproducible code example?. Please feel free to reopen if this is still the case.. @Dewep what version of Vue are you using? We had a similar issue before, and we got a note that it should be fixed in Vue 2.5.0 \u2013 https://github.com/getsentry/raven-js/issues/1061#issuecomment-337226900. @Dewep you can verify if your issue has been fixed updating your package.json with:\n\"raven-js\": \"getsentry/raven-js#4c41fefbccf7c45f1fb52152773e80b0ef1de95f\". @Dewep you're totally right. This should do now https://github.com/getsentry/raven-js/pull/1118 :). I'm not sure about this. Although it sounds fair, both scenarios can be achieved in both cases.\n```\nWith partial match:\n/^some error$/ => exact message\n'some error' => partial match\nWithout partial match:\n'some error' => exact message\n/some error/ => partial match\n```\nChanging this would require a major bump, as there definitely are people who are relying on partial matching right now.. Addressed in https://github.com/getsentry/raven-js/pull/1056. @LukasKlement @rtm @mkoczorowski, this issue is not on Raven.js implementation side, but rather on Zone.js. Thankfully they already patched it 5 days ago, and things are working correctly now.\nIt just has to be released as a patched version to npm. Please see 2 recent commits from Sep 6th \u2013 https://github.com/angular/zone.js/commits/master\nYou can test it yourself locally by changing your zone.js in your package.json to git@github.com:angular/zone.js.git#d4e5ae8f6e72f0b4ef8e816e369530b72e582ba7, eg.\njson\n\"zone.js\": \"git@github.com:angular/zone.js.git#d4e5ae8f6e72f0b4ef8e816e369530b72e582ba7\". To be more specific (as there are still plenty of reports of this issue), this is the commit that'll fix it \u2013 https://github.com/angular/zone.js/commit/d4e5ae8f6e72f0b4ef8e816e369530b72e582ba7. @thomas88 @nitish24p the issue lies in a way that react-boilerplate bundles and serves it's scripts chunks. Raven.js works just fine when you run production server npm run start:production on bare-bones react-boilerplate repo.\nTo be more specific, Script Error is thrown, captured in onerror by TraceKit and handled by Raven.js here https://github.com/getsentry/raven-js/blob/e5a6e72c761d58f7057561b4e67b3e0e29c6e618/src/raven.js#L405-L411\nWe don't handle it (line below), therefore it gets swallowed and not sent to the dashboard.\nI'll try to investigate it more soon.. We already released RC of our new V4 SDK, therefore we had to clean up some issues, as they were not relevant anymore. Please feel free to report if this is still a thing.. @sbezkostnyi 3.17.0 bump doesn't affect Raven's code, therefore no new source maps were generated and the one from 3.16.1 will work just fine.\nPlease see changelog for more details: https://github.com/getsentry/raven-js/blob/12637139fca5346e41844d5e1cb3d556244d8e49/CHANGELOG.md#3170\nPlease feel free to reopen this issue if you still have any questions.\nCheers!. Agree. We should also consider removing ESLint rules that are touching anything related to code style, as they might clash with Prettier. For example by using https://github.com/prettier/eslint-config-prettier. @HazAT all updated. Same changes are reflected in https://github.com/getsentry/raven-node/pull/364\n\nused prettier options from sentry repository and extended eslint config to use eslint-config-prettier. This way prettier won't collide with any stylistic rules of eslint, see fe8a6fb. Those rules were found using their CLI https://github.com/prettier/eslint-config-prettier#cli-helper-tool. Done. No react-native plugin in new SDK. Closed due to inactivity. @devteamexpress please feel free to reopen if you can provide reproducible example. Cheers!. Duplicate of https://github.com/getsentry/raven-js/issues/1016.\n\nPlease see https://github.com/getsentry/raven-js/issues/1016 and referenced pull request in that issue.. It'll be addressed in the next release. Thanks for pointing that out!. Rebased and merged :shipit: . Hey @jazzzz, can you provide a reproducible example? I cannot make it fail like you described.. I'm sorry, but I cannot help without a repro-case. I tried to do it myself as well and wasn't able to brake it in the same way you mention in the original post.\nPlease feel free to reopen if you somehow manage to achieve it.. Are you by any chance able to extract a specific part of the code that's causing this issue?\nIt's very hard to debug or even track things like this.\nCan you also post a link to the event you posted a screenshot from above?. You're more than welcome to give it a shot @austinpray :) Would appreciate it. > Right off the bat the webpack output is 10kb heavier than the grunt output\nThat runtime overhead... You may also give Rollup a try, it should be much more suitable for our needs + we should be easily able to force it work on IE8 with a small help from Babel.\n\nwebpack is not ie8 compatible, so we have to shim the es5 methods it uses in the module loading boilerplate. This adds another 20kb to the bundle.\n\nWe're fine with moving forward to just support IE10+. We can always create additional bundle with shims for people that want to still support IE10. However, dropping IE8-9 this would require us to bump major version, which will happen in few months, and not right away.. @saiichihashimoto we are <10kb gzipped. Changing build system won't reduce that much, as we don't have any external dependencies.. Done.. > ... if the timeout state triggered the existing ravenFailure event instead, then I can modify this PR and merge it.\nPer this comment, I believe it should be fine. Although we don't document event system anywhere now, and I'm sure if we will anytime soon.. @ManiacalAce you can utilize this PR https://github.com/getsentry/raven-js/pull/540/ to obtain this behaviour. Instead of forking it, you can use transport config option to modify it. See config docs here https://docs.sentry.io/clients/javascript/config/. Done through close method in new SDK.. Something is still breaking... looking into it\n. We. Are. Green!\n. Hey @mathagician!\nThings that need to be done:\n- add profixes code to the lib\n- add tests covering this change\n- update docs\nTests and docs can be based on existing options, which should be (hopefully) readable enough to be reused.\nWhen it comes to code, we need to:\n- pass a prefixes option, which will be an array of strings \u2013 see prefixes section here https://docs.sentry.io/clients/php/config/\n- store it internally as any other option eg. this._globalOptions.prefixes\n- write a normalizeUrl, stripPrefixes or something like this function, that'll take a string, check if there are any prefixes, if so, iterate over them and strip anything that has been matched\n- apply this function to culprit and all frames from the data payload\nHere is a perfect examples where this function should be applied: https://github.com/getsentry/raven-js/issues/634#issuecomment-332812362\nAnd here's how it's done on for react-native https://github.com/getsentry/react-native-sentry/blob/8b6bea853343d9dfde24735ed55fbf57d5ca2e94/lib/raven-plugin.js#L243-L264\nLet me know if you need any more help with it :)\nCheers!. Updated. I totally missed that @benvinegar, thanks for pointing that out. Fixed, merged code change only and updated PR here https://github.com/getsentry/raven-js/pull/1048. \n\nNice timing @mapohjola :D . That's good though, as it reminded me that I have to reconfigure our Travis :)\nFixed it. Your future PRs should go through it correctly now as well.. Thanks Daniel. Closing this one then.. Done.. Thanks for the PR @kpandya91. Could you please verify that it's indeed broken? It works fine for me here https://docs.sentry.io/clients/javascript/integrations/ember/ and on every other integrations page.. Addressed in https://github.com/getsentry/raven-js/pull/1050. There's similar issue in raven-node now \u2013 https://github.com/getsentry/raven-node/issues/307\nWe have 3 separate calls during installation process:\njs\nprocess.on('uncaughtException', ...) // global error handler\nprocess.on('unhandledRejection', ...) // global promises handler\ninstrumentor.instrument(..., ...) // global breadcrumbs handler\nOnly unhandledRejection is configurable by using captureUnhandledRejections.\nHowever, for raven-js, we call:\nTraceKit.report.subscribe // global error handler\nself._instrumentTryCatch()  // global try/catch handler\nself._instrumentBreadcrumbs() // global breadcrumbs handler\nAnd only latter 2 are configurable through autoBreadcrumbs and instrument options.\nSo we have:\n- global error handlers on both SDKs\n- global breadrcumbs on both SDKs\n- global try/catch on JS (@benvinegar why don't we instrument setTimeout/setInterval on node? Is there no need to do that there?)\n- global promises handler on Node (unhandledrejection is not supported on IE/Edge/Firefox https://caniuse.com/#feat=unhandledrejection and if we'd want to use polyfill like https://github.com/rtsao/browser-unhandled-rejection we'd not be able to support IE11 anyway, as it doesn't support native Promises)\nI'd love to unify both of those setups, eg.:\ncaptureUncaughtExceptions/captureUncaughtErrors\ncaptureUnhandledRejections\ncaptureBreadcrumbs/autoBreadcrumbs\ninstrument + instrument as a dict (as it's done now for raven-js)\nThoughts? @getsentry/javascript . More ref: https://github.com/getsentry/raven-js/issues/782. @danielhusar it's right there in the docs https://docs.sentry.io/platforms/javascript/#removing-an-integration :)\njs\nSentry.init({\n  integrations(integrations) {\n    return integrations.filter(i => i.name !== 'GlobalHandlers');\n  }\n});. Hey, it's a known issue on zone.js side, please see https://github.com/getsentry/raven-js/issues/1016. Will do @ffxsam!. Hey @ankurk91, thanks for contributing, appreciate it.\nIn order to fix the test, you need to call errorHandler with additional 3rd argument, just as Vue.js does, see https://github.com/getsentry/raven-js/blob/master/test/plugins/vue.test.js#L22 and https://github.com/getsentry/raven-js/blob/master/test/plugins/vue.test.js#L53\nThree things should be changed:\n- could you please remove this redundant object on line 31 here? https://github.com/getsentry/raven-js/blob/master/test/plugins/vue.test.js#L31 (it's not used anyway, so you can just delete it)\n- make your lifeCycleHook: info optional, as this is how Vue.js handles it (info may not be passed, so we don't want to create undefined lifecycleHook). Just check if info is passed, and only then add this property to extra attributes\n- rename this field to lifecycleHook, this is how Vue and Angular spell it (lifecycle, not life cycle \u2013 although both are correct in english)\n- write separate, 3rd test for this case, to make sure that it's indeed sent only when info is defined. It's my silly config mistake, tests are passing just fine :)\nCould you please fix L25:35 indentation please? (it should be taken care of by prettier, not sure why it wasn't \ud83e\udd14).. Had to rebase it locally and pass through prettier for code formatting.\nMerged it by hand \u2013 https://github.com/getsentry/raven-js/commit/4bd15d4ec636c5ba2108486ffc07c9f1e187dafd\nThanks!. @dancrumb make sure that you're actually talking about raven-js.\nRaven-node doesn't have those methods, where raven-js does \u2013 https://github.com/getsentry/raven-js/blob/master/src/raven.js#L593-L597\nIt'll be unified in the next major version.. @benvinegar only Ruby and Python have some sort of ignore options, and both of those SDKs use exception type only.\nThe reason why I didn't want to append them together, is that : in between. Although I'm almost sure that all the browsers show messages in the same type + ': ' + message format.. @benvinegar updated.\n@mitsuhiko agree on the function usage, but it'd also require extracting global errors to a separate array, as they should always be used:\njs\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nglobalOptions.ignoreErrors.push(/^Script error\\.?$/);\nglobalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\nLet's keep this feature in a separate issue.. True that, I missed that scenario. Hopefully most of people are using string based tests.. This bug has been introduced in 0.8.17, so it shouldn't affect you (although, are you sure that you've locked dependencies and npm doesn't install 0.8.17 itself?).\nWhat I'd do to exclude zone.js from the equation, is using their master branch and test it locally.\nIn you package.json change zone.js entry to:\n\"zone.js\": \"git@github.com:angular/zone.js.git#7ef13a734639690bd3c649ab48682002d3c3a18d\nRemove all lock files, node_modules directory, reinstall and see if this changes anything.. Investigation. Closing this one in favour of one cumulative issue https://github.com/getsentry/raven-js/issues/1064. Agree that 1st option is more optimal. Please keep this comment in mind though https://github.com/getsentry/raven-js/pull/1057#issuecomment-332503372. Hey @HeroProtagonist! This issue is already in-progress \u2013 https://github.com/getsentry/raven-js/pull/1072 :)\nHowever, we more things to choose from:\n- https://github.com/getsentry/raven-js/issues/774\n- https://github.com/getsentry/raven-js/issues/1011\n- https://github.com/getsentry/raven-js/issues/1036\n- https://github.com/getsentry/raven-js/issues/1033\n- https://github.com/getsentry/raven-js/issues/423\nFeel free to ask if you need any help :). > if propsData contain cyclic data structures, it throws an exception during the error handler\nCan you provide a test example for this? Data is stringified using https://github.com/isaacs/json-stringify-safe which handles cyclic data structures as well.. Thanks for letting us know @ankurk91! Cheers! :). Investigation. Closing this one in favour of one cumulative issue https://github.com/getsentry/raven-js/issues/1064. Hey @teleclimber, would you mind providing a test case and PR with updated regexp?. Thanks. Yes, precommit passed the file through prettier, and because it wasn't edited in a long time,  it has been updated to up-to-date code style.\nIt's totally fine the way it is, but could you just split those changes and yours into two separate commits? It'll be easier to distinguish them later.. I just verified everything using latest angular-cli and wasn't able to reproduce this issue.\nRepository: https://github.com/kamilogorek/angular-cli-raven-example. @marcelgoya, no, it installs 0.8.18 as it should:\n\nI also though that it may be due to error being thrown from within a template as @joelnotified mentioned here https://github.com/getsentry/raven-js/issues/1058 but I also couldn't reproduce it.\nAdded this case here: https://github.com/kamilogorek/angular-cli-raven-example/commit/22a572fc2624c1d8dac42747cf32b5fcfbc42b93. @joelnotified I was able to fix your repro case by removing strict lock from @angular/core and zone.js and using \"@angular/core\": \"^4.2.4\" and \"zone.js\": \"^0.8.14\" instead (it'll bump them to 4.4.4 and 0.8.18).\n@marcelgoya one step at the time :). @marcelgoya can you try to use zone.js 0.8.18 and angular/core 4.4.4 in your package.json, remove package-lock.json/yarn.lock and reinstall all node_modules again? (I've seen that you already did that with zone.js, but wanted to double check, as I see they update their changelog to reflect that https://github.com/ionic-team/ionic/blob/master/CHANGELOG.md). It'd be great if someone could help me by providing reproducible code base. I'm not able to break it anymore using @angular/core: 4.4.4 and zone.js: 0.8.18, and it's very hard to track the issue without being able to see it.. @doender Yes, it works just fine. You can try it yourself using this repo https://github.com/kamilogorek/angular-cli-raven-example and replacing it's dependencies with your list.. It was zone.js 0.8.17 issue. You can still break my repo by locking it's version to 0.8.17 and reinstalling dependencies. Anything above that version works just fine.. With React? Could you please open new issue and describe it there?. Totally missed that, sorry @teleclimber and thanks @wvds!. Thanks!. I'm on it. 6 \u03bb: nvm use 6.9.2\nyNow using node v6.9.2 (npm v3.10.9)\n6 \u03bb: yarn init -y\nyarn init v1.1.0\nwarning The yes flag has been set. This will automatically answer yes to all questions which may have security implications.\nsuccess Saved package.json\n\u2728  Done in 0.06s.\n6 \u03bb: yarn add raven-js\nyarn add v1.1.0\ninfo No lockfile found.\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 1 new dependency.\n\u2514\u2500 raven-js@3.18.1\n\u2728  Done in 0.70s.\nSorry for the inconvenience, it was broken here https://github.com/getsentry/raven-js/commit/38e853a71cf36fe6c2be583a9c79f14c3664cd6d#diff-b9cfc7f2cdf78a7f4b91a753d10865a2 because of small npm issue during their minor release. All fixed now :). Thanks @teleclimber!. Hey!\nThanks for contributing. There are just two things that need some changes.\nWe also need a test case for this scenario.. Thanks!. Unfortunately this test is failing on IE10/11/Safari10, but I'll try to fix it. Unfortunately, our setup at the moment doesn't allow to run SauceLabs tests for non-organization members. We're working on fixing this setup as well.. What's wrong with setting it up using?:\njs\nwindow.onunhandledrejection = function(evt) {\n    Raven.captureException(evt.reason);\n};\n. Ah, it's raven-js, not raven-node... I jump between those too often, sorry.\nI'll take a look into this soon.. It is kinda easy @MaxBittker,\njs\nwindow.addEventListener('unhandledrejection', function (evt) {\n  Raven.captureException(evt.reason)\n})\nHowever, only Chrome supports it... even though it's 2018 already :|. Released as 3.23.0 \\o/. For integration issues, please contact us here https://forum.sentry.io/. Thanks @pisinr, I'll review it Today. Travis is failing because of SauceLabs keys, we're aware of this issue, so it's fine :). @HeroProtagonist thanks! feel free to do that. There are just a few issues I pointed out and it should be mostly ready to go.\n  . Not relevant for sentry-javascript SDK v4.. @benvinegar this also resolves your concern from here https://github.com/getsentry/raven-js/pull/1057#issuecomment-333982993. @staticshock could you please add one quick test to make sure both scenarios work? https://github.com/getsentry/raven-js/blob/master/test/raven.test.js#L478-L490\nSome of the scenarios where it should match:\n```\ninput: 'CustomError: random 123 message'\n/^CustomError: random 123 message$/\n/^random 123 message$/\n/^Custom Error/\n'CustomError: random 123 message'\n'123 message'\n'CustomError'\n``. @staticshock I think that in the end, initial version was more readable, so let's stick with it.\nThis double check issue I mentioned shouldn't be hit a lot of times anyway.\nWe can call itstringifiedError,errorStringor something more descriptive thantestString` though :P\njs\nif (\n  !!this._globalOptions.ignoreErrors.test && (\n  this._globalOptions.ignoreErrors.test(message) ||\n  this._globalOptions.ignoreErrors.test(stringifiedError))\n)\nOther then this all looks good! Thanks for updating tests :). Thanks! :). \ud83d\udc4c . Thanks @paksu! Could you also add this option to the docs? https://github.com/getsentry/raven-js/blob/master/docs/usage.rst. @getsentry/javascript should we delete this attribute before sending a payload to the server or will it just be skipped during processing in there?. Let's get rid of it before sending the payload then @paksu.\nMy only concern with this solution, is that we're somewhat mixing options with data and I'm not sure if we should do this. On the other hand adding additional options argument is even worse. I'm +1 for either leaving \"as is\", or wrapping all \"functionality related options\" to be passed as {options: {}} attribute.. Looks good to me! What do you think about this solution @getsentry/javascript? It's a clear separation of data/options, which we can reuse in other js SDKs solutions.. Thanks for contributing @HeroProtagonist! Just a few minor requests and we're good to go :). Aaaand it's merged! Thanks @HeroProtagonist! :). https://github.com/geelen/react-snapshot#the-implementation\n\nThe fake browser is JSDOM, set to execute any local scripts (same origin) in order to actually run your React code, but it'll ignore any third-party scripts (analytics or social widgets)\n\nSolution:\nEither use npm version of Raven and bundle it with your code, or check for it's presence before installing\njs\nif (window.Raven) {\n  Raven.config(...).install()\n}\nCheers!. I don't use New Relic on daily basis, therefore could you please provide a reproducible test case which I could use for debugging this issue?. I'm already on it here \u2013 https://github.com/getsentry/raven-js/pull/1089\nAlso verified and build with extracted utils is still <10kB.\nIf it'll ever become an issue, we can use rollup to bundle without browserify's overhead.. Not sure why this happened really. I'll fix this with the next release and make sure that it's minified. Thanks for pointing that out.. Fixed in 3.19.1.. @deiga Travis doesn't expose ENV vars to PRs coming from external contributors (non-org accounts), as they could be easily extracted and used on other projects. We're working on getting around this soon.\nI'll review your PR today, thanks! :). > @kamilogorek Could you use https://docs.travis-ci.com/user/encryption-keys/ to add the SAUCE env variables?\nNot really, it will still fail. Per docs:\n\nPlease note that encrypted environment variables are not available for pull requests from forks.\nYou need to run npm test, since the tests are still dependent on build built first :)\n\nI got bitten by my own setup... \ud83e\udd26\u200d\u2642\ufe0f\nThanks! Will reverify it Today :)\n. Not that I know of. We'll most likely write a bot that'd run those tests for us instead.. @deiga can you grant me write access your fork? I rebased your changes and added some changes that would like to include here, as I don't want to open a new PR :)\nhttps://github.com/deiga/raven-js/settings/collaboration. @deiga merged :) You can take a look at my latests commits to see what had to be changed in order to run everything on SauceLabs\n\n. I think that if someone is brave enough to use RegExp, then they know what ^$ means :D. I removed the token as there are still some issues with providing GH statuses, as they require some funky permissions.\nhttps://github.com/siddharthkp/bundlesize/issues/93\nhttps://github.com/siddharthkp/bundlesize/issues/148\nRunning it through TravisCI should be good for now.\n```\nDone, without errors.\n WARN  github token not found\n    You are missing out on some cool features.\n    Read more here: https://github.com/siddharthkp/bundlesize#2-build-status\nPASS  ./dist/raven.min.js: 9.74KB < maxSize 10KB gzip \n```. @mitsuhiko reworded.\nAlso I see that Travis was still failing and after some googling, I found the fix. How not to love this ecosystem... https://github.com/karma-runner/karma-sauce-launcher/issues/73\n. Looks good, thanks!\nCan you change the name of the test to include replaceState as well? Right now it only says\n\nshould record history.[pushState|back] changes as navigation breadcrumbs'\n\nCan you also rebase it on top of master branch? It should fix the Travis issue.. It should be if [ \"$TRAVIS_SECURE_ENV_VARS\" == \"true\" ]; then npm run test:ci; else exit 0; fi\n(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\nI'll pull those changes and test them anyway. Thanks! :). Thanks @shcallaway! Would you mind adding 2 more tests for captureException with an ErrorEvent with and without an error as arguments?\n(We're aware of Travis issue, and it will be solved soon). Thanks! Just one small thing though. I'm not sure if crap is the correct word to use in the codebase \ud83d\ude05 Would appreciate changing it to anything not vulgar :). Also if you rebase your changes on top of master, Travis should be fixed now. Fixed it and merged manually to master :) Thanks!. @shcallaway you do, you are an author, not me :)\nSee here: https://github.com/getsentry/raven-js/commits/master. \nand\n\n. No worries. Thanks for your work! Appreciate it :). Thanks!. Thanks @HeroProtagonist! We also need to add sentry as one of the possible keys, to be used in a dictionary. Otherwise when you for example enable just console, it'll catch those sentry breadcrumbs as well now.. Thanks for your patience @HeroProtagonist, had some other things to work on lately.\nI believe this shallow copy can stay as is, because trimming just affect the content of every breadcrumb, not total length.. Thanks @shakeelmohamed! :). Thanks! Can you remove your changes from dist files? It changes file signature which we don't want.. Hey, unfortunately as of now, there's no way to do this.\nDuplicate: https://github.com/getsentry/raven-js/issues/702. Thanks!. Oh... didn't know that, my bad then. I just looked at npm badge which is around the same number and called it good.. I'll look into this. Fixed in https://github.com/getsentry/raven-js/pull/1106\n@jleider @davidpolberger would love to get a confirmation that it works with your setup using updated commit in package.json\n\"raven-js\": \"getsentry/raven-js#cf89f867b0834c1e5f8c146714549db7e2078577\". Thanks @davidpolberger! I'll release new version soon.. Thanks for reporting that @thedavidmeister!. Sure, I'm not quite convinced if this is the best solution as well.\nOpened PR so that we can discuss + run tests on SL.. @benvinegar maybe you can chime in?. @jan-auer it's the same call when it comes to type coercion in JS\n```js\nfunction foo () {\n  return 'hello'\n}\nfoo.toString()\n// \"function foo() {\n//   return 'hello'\n// }\"\nFunction.prototype.toString.apply(foo)\n// \"function foo() {\n//   return 'hello'\n// }\"\n```\nalso:\njs\nfoo.toString === Function.prototype.toString\n// true. No, I patch F.prototype.toString :). Approved via Slack. Fixed in https://github.com/getsentry/raven-js/pull/1108. Thanks. It looked nice before prettier mangled it :(\njs\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\nThanks for sending a PR, however, we use this snippet in 4 different places in the codebase, and I'd rather leave it as it is now.. @PedroEsperanca this is solved right? If not, please feel free to reopen.. Can you remove those redundant files please?\nAlso what's this ESLint error exactly?. It breaks locally as well:\n\nUse npm run test to run all the tests, not npm run test:unit. If you want to run those one-off separate test, remember to run build first grunt build.test\n. Fixed in https://github.com/getsentry/raven-js/pull/1157. How do you import angular plugin with RequireJS exactly? Can you just provide the configuration code that you use?. You import our plugin as RavenAngular (2nd argument), but you are trying to use it as Raven.Plugins.Angular.\nChange this line to .addPlugin(Raven.Plugins.Angular) instead and it should work just fine :). Instructions work, if you use them with script tags (as presented there), not while using RequireJS loaders.\nGlad it helped :). Can you provide a call stack?\nDoes it happen just by importing it or do you run config/install as well?. > could it be some hard caching on CDN?\nI don't think so, as there was no major changes for a long time now.\n\nI'll try again later to see if this has been resolved.\n\nPlease feel free to reopen this issue if something is not right.. It's coming from one of your chrome extensions. Can you bisect them (enable/disable some) to see what's causing the issue? I cannot debug it without knowing which extension it is and it's source code.. Hey @amitghodke90. What does isProduction returns?\nCan you use dataCallback method in the same way and see if the error is catched?\njs\nRaven .config('https://fb1c28b8571842a0ac559dcf12e17510@sentry.io/238981', {\n  dataCallback: function (data) {\n    console.log('caught error:', data);\n    return data;\n  }\n}). You still have the second part of the task :). > Can you use dataCallback method in the same way and see if the error is catched?\nRight now, the information you provided is simply not enough to debug this issue.. @ryno1234, @lukemelia may be correct here, as we indeed just assign key:value pairs during merge, see: https://github.com/getsentry/raven-js/blob/master/src/utils.js#L90-L98. No, that's not correct. We're keeping breadcrumbs in an array, so you can have any key you want.\nWhat you have to do though, is clone your objects if you want to modify them in the future.\neg. this will behave incorrectly as you described above:\n```js\nvar state = { state : 'initializing' }\nRaven.captureBreadcrumb({\n  message: 'Application state changed',\n  data : {\n    application: state\n  }\n});\n// Some time passes... and you update state object above\nRaven.captureBreadcrumb({\n  message: 'Application state changed',\n  data : {\n    application: state\n  }\n});\n```\nNow, since state is the same object in both places, only the final value will be used in both cases.\nIf you want to fix it, don't use shared objects and clone them instead.\n```js\nvar state = { state : 'initializing' }\nRaven.captureBreadcrumb({\n  message: 'Application state changed',\n  data : {\n    application: Object.assign({}, state)\n  }\n});\n```\nor an old JS trick\njs\ndata: {\n  application: JSON.parse(JSON.stringify(state))\n}\nThis is JS-specific behaviour.\nWe'll update this in the next major version, so I'll let myself close this one. Let me know if you have any more questions. Cheers!. Raven.js doesn't collect user's IP, unless it's manually added to the context by a developer. Did you mean raven-node by any chance?. There's no code in a whole code-base that's directly collection an IP \u2013 https://github.com/getsentry/raven-js/blob/master/src/raven.js\nIt may only be done through userContext, which has to be set by developer, therefore the issue is not a part of the Raven.js.. Hey @coluccini, ServiceWorkers doesn't have an access to XHR APIs, therefore it cannot communicate with an outside world \u2013 https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n\nIt is designed to be fully async; as a consequence, APIs such as synchronous XHR and localStorage can't be used inside a service worker.\n\nI'll look into how this can be handled soon.. @nimishsinghal You can use https://github.com/bevacqua/swivel (or implement it on your own using https://ponyfoo.com/articles/serviceworker-messagechannel-postmessage) to pass a message when an error occurs.\nTo catch an errors themselves, use onerror or error event inside your ServiceWorker self.onerror = ... or self.addEventListener('error', ...), and when it happens, send a message to the parent (your code) and trigger Raven.captureException or Raven.captureMessage with the data you get from the passed message.. There is, but you need to create payload/urls yourself, as it's outside of SDK scope \u2013 https://docs.sentry.io/clientdev/overview/. Let's leave it open. I'll try to create a proper doc/feature one day.. There's already a PR for this https://github.com/getsentry/raven-js/pull/1115\nI'll try to merge it before the end of the week.\n\nCan we use https://github.com/github/fetch so that modern browsers use fetch implementation and use XHR APIs for fallback?\n\nNot really, it'll increase a total size of raven, which we want to mitigate.. Release 3.21.0 includes Fetch support now \\o/. Thanks! Merged manually and added sampleRate as well cc @SimonSchick.. Will do before end of the day :). @SimonSchick done https://github.com/getsentry/raven-js/releases/tag/3.20.0. Hey @zivl, can you provide a minimal repr-case I could use?\nThe code you mentioned is used here:\njs\nif (current.stacktrace || last.stacktrace) {\n  return isSameStacktrace(current.stacktrace, last.stacktrace);\n}\nwhich makes sure that we have at least one object to work with.\nThen isSameStacktrace checks for similar thing again here:\njs\nif (isOnlyOneTruthy(stack1, stack2)) return false;\nI'm not sure how we'd end up with stack1 === null.. If we change it to &&, then it'll always return true for payloads where one thing has stacktrace and second does not (eg. captureException was last event, but now we compare it to captureMessage)\nCurrent code:\n```js\nif (current.stacktrace || last.stacktrace) {\n  return isSameStacktrace(current.stacktrace, last.stacktrace);\n} else if (current.exception || last.exception) {\n  return isSameException(current.exception, last.exception);\n}    \nreturn true;\n```\nA reason why I want to see some repro-case, is that this clause\njs\nif (isOnlyOneTruthy(stack1, stack2)) return false;\nAlready guards for non-truthy imputs, therefore it should never be possible to get null.frames call.\nYou can find all tests for _isRepeatData starting line 3325 in tests/raven.test.js to see what has to pass. Using && breaks some cases.. Resolved in https://github.com/getsentry/raven-js/pull/1150. Can you provide an actual error?\nCode you pointed already guards for situations like the one above (simplified example):\n```js\nvar urlProp = 'url';\nvar data = {\n  url: null\n}\nif (data.hasOwnProperty(urlProp) && data[urlProp]) {\n  throw new Error('Look ma, no url prop')\n}\n// this will not throw, as data[urlProp] returns null, and if statement won't trigger the code inside it\n``. It's definitely something that I want to do soon.\nHowever, it'd require us to most likely migrate to webpack/rollup and make sure that bundle we provide still doesn't exceed our 10kb budget.\nI cannot say when it'll be shipped though, as there are some other things that I'm working on right now as well.. Can you please provide a whole stack trace and/or a minimal repro-case?\nWe test our releases on >= IE10, including installation itself and it works just fine when using without any frameworks. I need more information to debug this.. Thanks @asgerjensen. Will investigate as soon as possible.. Fixed in3.20.1. Looks good to me. Thanks!. Fixed in3.20.1. Thanks for the update.. There's a whole section about possible options that can be passed tocaptureMessage` \u2013 https://docs.sentry.io/clients/javascript/usage/#passing-additional-data\nI'll close this one as we're working on rewriting some stuff and it'll be updated alongside with docs. Cheers!. Duplicate of https://github.com/getsentry/raven-js/issues/911. Hey @WhatAKitty, can you provide a reproducible test case that we could use to test this behavior?. As we released Release Candidate of our SDK v4, we clean up some of the issues. Please feel free to let me know and I'll reopen this issue if this will ever happen in the new version. Cheers!. It's already mentioned here https://docs.sentry.io/clients/javascript/sourcemaps/#hosting-source-map-files :). Do you use raven-js in any of your Node apps? We have raven-node for that scenario, and it already takes care of unhandled rejections and describes them in the documentation.\nhttps://github.com/getsentry/raven-node/blob/master/lib/client.js#L117-L124\nhttps://docs.sentry.io/clients/node/usage/#promises. We're working on v4, and it will definitely be easier to understand naming convention and what SDK to use where :). Not yet, but we'll work on this soon. Duplicate of https://github.com/getsentry/raven-js/issues/169. It makes sense now. I missed isSameException part. Thanks!. @zivl  I'll release a new version once https://github.com/getsentry/raven-js/pull/1162 gets merged. Hopefully today :). Released in 3.21.0. > A simple solution would be to use only chrome and chrome.app in order to check if the extension is a Chrome App.\nHow's this different than var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime; that we already use?\nWe're open for a PR's if you'd like to fix it :). Closing due to clean up. Please feel free to reopen if it's still an issue. Cheers!. Thanks! I'll have to test it locally soon, so I just skimmed through the code.\nbtw. How's 9.96KB smaller than 9.80KB? :P \n. Thanks, @jaylinski! I won't merge it before the end of the year, as most of the company (including me) is taking a break for holidays, and it's very major change. I'll test it throughout on my local env and let you know if everything is fine. If yes, then I'll merge it as a first thing in 2018  :)\n\nI also just noticed this commit: 5d2685f\nDoes this commit have any implications on this PR?\n\nShhh...! it's a secret ;) No, it doesn't change anything for this PR :). @jaylinski thank you for being so patient. I had a lot of things to handle recently + whole Christmas/new year time.\nWe tested everything separately and it's all working smooth! Thanks for your contribution, it'll become very useful soon :). Yes, we'll move to ES6/TypeScript soon, as we're working on Raven v4 :). Thanks for the contribution. Would you mind providing some tests to cover this change?\nI'll have to take a look at this change in the spare time, but I'm not certainly sure if it's desired to make this change now, as it can drastically increase payload size when logging large objects (and we have payload limits for each event sent).. Thanks for the PR.\nWe don't want to introduce more configuration options. Fetch should be chosen by default when available.\nWe also need some tests to cover this change.. Fixed in https://github.com/getsentry/raven-js/pull/1157. Tests are broken in IE10/11 and mobile chrome. I'll fix them before merging.. Yes, please refer to https://docs.sentry.io/clients/javascript/config/\nwhitelistUrls, ignoreErrors, ignoreUrls options.. Good catch @michal-rumanek, we indeed shouldn't modify that's passed down to other handlers.\nWe also don't need to double check here:\n```js\nif (ex && utils.isErrorEvent(ex)) {\n  ex = ex.error;\n} \nif (message && utils.isErrorEvent(message)) {\n  message = message.message;\n}\n```\nand we can write it like this instead\njs\nif (utils.isErrorEvent(ex)) ex = ex.error;\nif (utils.isErrorEvent(message)) message = message.message;\nas passing undefined to utils.isErrorEvent won't do any harm.. @shcallaway thanks for your patience, I was working on https://github.com/getsentry/sentry/pull/6709 for last few days and had to move SDK aside for a while.\nLet's get it merged asap.\n\nClearly, the original developer assumed that message would be a string. \n\nBut what if the original developer already handled (or uses a solution that does that) case like this? We'd change expected (well, not so expected :P) behaviour.. @shcallaway I asked other devs and we'd prefer to stick with original arguments.\nCan you please change it so that we can merge it Today? :). Fixed it myself, rebased and merged manually. Preserving correct author info of course :) https://github.com/getsentry/raven-js/commit/315dab5bcba87ae05a416e2b5f76aadad873da39\nThanks for contributing! . Released in 3.21.0. Thanks for the report @Valandur.\nCould you also post an output from the request itself?\nTo obtain it:\njs\nRaven.config(__your-dsn__, {\n  dataCallback: function (data) {\n    console.log(JSON.stringify(data, null, 2));\n    return data;\n  }\n}).install()\nThanks!. release cannot be used as a tag, as it's protected attribute set via config (or setRelease method)\nPlease see https://docs.sentry.io/clients/javascript/config/#optional-settings\njs\nRaven.config(\"https://{public_key}@sentry.io/{app_id}\", {\n  release: \"test version\"\n}).install();\nor\njs\nRaven.config(\"https://{public_key}@sentry.io/{app_id}\").install();\nRaven.setRelease( \"test version\");. That's exactly what's happening. I'll try to send a PR to create more meaningful message so it's more obvious next time :). @Valandur also for the reference, here's a list of protected tags \u2013 'release', 'dist', 'user', 'filename', 'function' \u2013 https://github.com/getsentry/sentry/blob/master/src/sentry/tagstore/base.py#L19-L22. I'd say the implementation is fine now, thanks! :)\nWould you mind adding some tests for the main functionality?. No rush, take your time :)\nUnfortunately, I have some other tasks to tackle, so I cannot help this week as well.. Not relevant for sentry-javascript SDK v4.. @AgDude Sentry core and node packages are already released as beta. We also merged major browser sdk rewrite (https://github.com/getsentry/sentry-javascript/commits/master quite a lot of commits :p) Today and now in a process of cleaning things outs.\nv4 will be extensible in a lot of ways, therefore adding offline integration (we'll write it ourselves anyway) will be a breeze :) \nIt should be released as a major version early Q3, around September/October.. @joelryan2k veeeery rough sketch of what it can look like. We'll definitely release an official integration, but we still have a lot of things to polish first.\n```js\nimport { configureScope, captureEvent } from '@sentry/browser';\nimport { serialize, deserialize } from '@sentry/utils/object';\nclass Offline {\n  constructor() {\n    // initialize storage\n    this.storage = someApi;\n    // get items\n    this.queue = this.storage.getEvents();\n    // drain them\n    this.drainQueue(this.queue);\n  }\ninstall() {\n    configureScope(scope => scope.addEventProcessor(async (event) => {\n      if (isOnline()) {\n        return event;\n      }\n      await this.storeEvent(event);\n      return event;\n    }))\n  }\nstoreEvent(event) {\n    return this.storage.storeEvent(serialize(event));\n  }\ndrainQueue(queue) {\n    // send each one to sentry\n    queue.forEach((event) => captureEvent(deserialize(event)));\n  }\n}\n```. Created https://github.com/getsentry/sentry-javascript/issues/1633 to keep a track of this feature. Very nice implementation, especially that you include tests and docs as well, thanks! As this is completely new functionality, can I get another \"ay\" from someone? cc: @getsentry/javascript \nAs you are already modifying docs, can you update transport section, so it also lists options as one of the properties it receives? . Yes, this one. It's listing url, data, auth, and 2 callbacks, but no mention of options which allow developer to access all global options.. Thanks, @RuslanZavacky! I love when PRs include code, tests and docs. Great work! :). Released in 3.21.0. Resolved by https://github.com/getsentry/raven-js/pull/1183. Hey, it's fully supported. Travis sometimes fails on us and timeout some SauceLabs tests, which are marked as failed, not skipped. Restarted build manually and we are back to green :). Hey, are you able to determine where in this plugin's code it triggers?\nWithout this (or a full stacktrace) it's almost impossible to track it down.. Unfortunately, we're not able to work around someone else's code. Feel free to reopen if there's something we can help with. Thanks!. Self-merging, as I just wanted to make sure it passes on all browsers (it's almost impossible to run those tests locally now). Forgive me.. Added in https://github.com/getsentry/raven-js/pull/1177. Hey @LucasReSilva, I won't be able to help you unless you provide some kind of test case, reproducible codebase or error stack trace.\nRight now, with just those gifs, I can't do anything.. Are you using our Angular.js plugin? https://docs.sentry.io/clients/javascript/integrations/angular/\nIf not, you'd have to handle non-standard zone.js errors in your code, so they throw regular error objects or a message, instead of { error: 'something' } object we can see now.. Unfortunately, this is Google JS API issue. Instead of throwing regular errors, they are throwing objects in { error: 'some_message' } form.\nWe cannot handle every possible scenario (eg. this one being the case), as it's often framework/library specific, so it has to be handled by a developer.\nIn this case, it should be pretty straightforward:\n```js\nfunction isErrorOrErrorEvent (wat) {\n  return Object.prototype.toString.call(wat) === '[object Error]' || Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    var error = err.originalError || err;\nif (isErrorOrErrorEvent(error)) {\n  Raven.captureException(error);\n} else {\n  Raven.captureMessage(error.error || error);\n}\n\n}\n}\n```\nHope this helps and let me know if you have any more questions.. @ggarek mostly because it's very error-prone. Unlike other JS libs, we don't have a control over what people are doing in their code.\nTrying to stringify very large objects (who knows, maybe someone attaches a reference to their react's store so they can access it in error handler?) is not only time and performance consuming, but it can easily surpass 200kB payload limit for a single event that we have.. I'm not very keen to add more and more config options. Especially that we already have transport attribute which can achieve all of this. In addition to that, it'd make fetch and XHR two completely separate entities, and they should always work in-line, as we default to XHR if no fetch is available.\nSetting sane defaults is totally fine, but I'm not convinced for the rest. @MaxBittker @HazAT what do you think about it guys?. @RuslanZavacky I asked @HazAT for an opinion, and we can move forward and merge it. I'll try to release it tomorrow after I make sure that there's nothing left that I could add to the next version :). @HazAT right, it was https://github.com/getsentry/raven-node/issues/406 :P I just wanted to unify it with Raven.js. A reason why we don't do that is that when you pass a very large object, payload size can exceed 100kB which is our current limit for a single event. This will also create way too many issues in the UI, which on the other hand will create too much noise. We'll try to revisit this in the next major version.. Hey @taylor-cedar, it'll be pulled down to Raven.js once we get this one working for Node -\n https://github.com/getsentry/raven-node/pull/416 :). Thanks!. Thanks @dawnmist! :). Hey @pradeepramesh123, I'm not sure if you meant Java or JavaScript.\nIf former, then go to https://docs.sentry.io/clients/java/\nIf latter, go here https://docs.sentry.io/clients/javascript/\nAlso if you have any more questions, please post them here https://forum.sentry.io/ as GitHub issues are not meant for customer support.\nCheers!. You most likely missed a whole second part of the documentation here https://docs.sentry.io/clients/javascript/integrations/angularjs/#angularjs-configuration, therefore, your error handler is never registered\nFeel free to reopen if this issue reappears.\nCheers!. It's not possible at the time. Feel free to submit a PR that's modify autoBreadcrumbs config option described here https://docs.sentry.io/clients/javascript/config/. Sure @rajatvijay :). Done in new SDK's console integration. Could you also please rebase your changes?. Hey @helfer, sorry for the delay, it was a busy time recently + all the holidays and vacations.\nThe new version will be released by the end of the week.. 3.22.0 has been released. cc @helfer . Fixed. Will be released with the next version today :). @jharris4 fixed in 3.22.0. cc @RuslanZavacky. Fixed in 3.22.1, sorry for the inconvenience. . Fixed in 3.22.1, thanks!. I'll self-merge it, as I just wanted to run it on Travis (messed up initial fix :(). What version of TS are you using?. I verified that issue and it's caused by not importing Raven, even though it's used above.\n```js\nimport * as React from \"react\";\nimport * as Raven from \"raven-js\";\nexport class Example extends React.Component {\n  public componentDidCatch(\n    error: Error,\n    errorInfo: { componentStack: string }\n  ) { \n    this.setState({ error: true }); \n    Raven.captureException(error, { extra: errorInfo }); \n  }\npublic render() {\n    return this.props.children;\n  }\n}\n```\nWill effect in index.ts(10,5): error TS2304: Cannot find name 'Raven'. error because it cannot find proper typings for that constructor.\nAdding import * as Raven from \"raven-js\"; at the top of the code will fix the issue.. Feel free to reopen if it's still an issue. ooooh so you'd actually want to include the types \"in\" the SDK so they can be used when included via CDN?. @humphreybc, unfortunately, we won't change this now, as it's changing overall SDK size and the majority of our users use vanilla JS.\nHowever! New major version of Sentry JS SDK  (aka Raven.js 4.0) will be completely rewritten in TypeScript, so bear with us please :). It's updated so rarely, that we don't have any automation in place for it. So yeah, manually.. Fixed \\o/. Please post usage questions to our forum https://forum.sentry.io/\nGitHub Issues are not intended for that purpose.\nIf you're using React 16, read this, as it may resolve your issue https://blog.sentry.io/2017/09/28/react-16-error-boundaries. Whoops, missclicked. Thanks, this is actually a very good point which we missed.\nI'm happy to merge it, however, can you add one more sentence and mentioned that it's only required when uploading your own artifacts? If you have sourcemaps on the remote server, release is not required.. Reworded slightly, added proper links and merged manually. It's still your commit though :)\nhttps://github.com/getsentry/raven-js/commit/2d5656ea8773b6b4d59fc954e77a4c064d9cba7d\nThanks!. Correct, we don't have types for plugins. Feel free to open a PR for them, although, they are so small, that interfaces can be in most cases just written inline.. All integrations in new SDK are completely written in TypeScript - https://github.com/getsentry/sentry-javascript/tree/master/packages/browser/src/integrations/pluggable so this shouldn't be an issue anymore.. @WORMSS probably that new SDK is all written in the TypeScript :). Thanks, @jiananshi! For usage questions, please direct them to https://forum.sentry.io/\nCheers!. @robbie-hinman @JohnMH user-feedback dialog is loaded through iframe, thus anything related to it's behavior has to be fixed directly in here https://github.com/getsentry/sentry SDK has nothing to do with it functionality wise.\nI also tried to send a report with http:// dsn and it preserves Sentry's https:// protocol just fine\n\nDid I misunderstand something?. Thanks for the comment. We don't officially support IE8, but it's good to have something in place if someone will want to look for an answer here.\nCheers!. Will do! Thanks for pointing that out.. Can you provide a reproducible example? And/or link to sentry.io of mentioned events?\nI tested the one above and it works just fine.\n\nKeep in mind, that Sentry might aggregate events together if they have the same stacktrace (upper right corner of the events panel).\n. No problem at all @honeydripper. Glad it worked now :) Cheers!. Hey @vicrep, this should be covered by TraceKit that we use. However, I see that you're not creating CustomError correctly (you are missing prototype chain assignments). Could you give this code a shot and let me know if you still have the same issue? (also, please provide stacktrace and culprit screenshots if possible).\n```js\nexport class SentryError extends Error {\n  public name: string;\nconstructor(public message: string) {\n    super(message);\n    this.name = new.target.prototype.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n```. Well, that's definitely unexpected behavior haha. Thanks for the investigation.\nNeither Raven.js, nor Tracekit is doing anything that could cause an issue like this.\nI wonder if it's TypeScript compiler then or some part of your Webpack config.\nAre you able to provide some minimal reprop case that I could use to fiddle with it? It'd be nice to find the main cause for a future reference.. I was indeed nasty TraceKit regexp bug.\nhttps://github.com/getsentry/raven-js/pull/1237 will fix it once merged, so let me close this one.\nThanks for investigating it @vicrep. Cheers!. Thanks for submitting the issue. We are working on v4 that'll unify all our JS SDKs together, so no situations like this will occur :) Let me close this issue as we're aware of this. Thanks!. Hard to say, as it's a lot of work. Most likely sometime in Q2, so not that far away, but we'll try to keep everyone posted on the progress :). Hey, it's because we don't want to collect stack traces for messages, as those are usually meant to be sent by developers themselves.\nWe do however default to true for exceptions that somehow end up being a messages: https://github.com/getsentry/raven-js/blob/dd10b7439551fdfdd9077d08452429e04676f3d2/dist/raven.js#L486. > Is your assumption that stacktraces are unnecessary because the messages uniquely identify the error?\nIn most cases yes. That's why we allow for optionally passing stacktrace: true alongside captureMessage if that's not the case :)\njs\nRaven.captureMessage('Something something, that I\\'m not sure where it was called', {\n  stacktrace: true\n});. Mostly just noise and payload size when collecting multiple stack traces as breadcrumbs (which is the default behavior). We'll re-evaluate this approach when working on v4 (which is happening at this very moment).. https://github.com/getsentry/sentry-docs/pull/293/files#diff-64e6a9b0f6a67d42d206ebc1cca68229R61. Thanks!. You missed a comma after stacktrace: true, therefore all tests fail :P\n423:13  error  Parsing error: Unexpected token trimHeadFrames. Fixed it myself and rebase manually. Thanks! :). https://github.com/getsentry/raven-js/commit/50beaa5fc41601d5e6076c8c5b77741a637aab67 first at the top. I'll make a release within next 20-30min.. Released as 3.22.2. \nReleased as 3.22.2. Hey, thanks for creating a request. Right now it's not possible, as we have strict payload limits per event sent to Sentry. We're aware of this feature and will try to investigate whether it's feasible to implement this.\nYou can also take a look at this initial issue (which is a duplicate of this one), where's one service described, that's integrating with Sentry nicely and that can provide this feature for you https://github.com/getsentry/raven-js/issues/719. Released as 3.22.2. What's your Raven.js setup config? Are you using it directly or through our Angular plugin?. Unfortunately, it's not enough information for me to debug this issue.\nI can only almost certainly assure that it's not a Raven.js issue.\nThe reason why you see it as the last frame of the stack is that we wrap all function calls in try/catch to catch all the exceptions.\nWe don't use any Angular digest cycle methods in our plugin as well - https://github.com/getsentry/raven-js/blob/master/plugins/angular.js, therefore, it's not possible to trigger this kind of errors on our side.\nYou can use instrument: false option in Raven's config to remove this frame and see what's the source of the issue.. What do you mean exactly? With the former answer? Yes, thanks, but there's nothing unusual in the config that could say anything.\nCould you give my tip from the last sentence a try?. Before:\n\nAfter:\n\n. Hey @jharris4, this is an error that can happen while working with WebWorkers or PostMessage calls, that are using structured cloning algorithm - https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\nRaven is using neither of them. Also when you take a look at line 360 that you provided, you can read:\n// Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means Raven caught an error invoking your application code. This is\n        //       expected behavior and NOT indicative of a bug with Raven.js.\nTherefore, there's a very large chance that actually your code is trying to invoke the method that's causing this behavior :)\nCan you past whole stack trace of the error with the snippets of code that's called?\nCheers!. I'll try to take a look at it sometime in the future. It'd be great if someone could be able to come up with a reproducible scenario.. Unfortunately, any of provided stack traces are of any use, as they are all obfuscated as mentioned above. They all differ with the input though, so they are not the same:\n\nThe object can not be cloned.\nFailed to execute 'postMessage' on 'Window': function (a){if(qe.$a.hasOwnProperty(a))return qe.$a[a]} could not be cloned.\nFailed to execute 'postMessage' on 'Window': function (){var r,o,a=arguments[0],s=arguments[1],u=\"[\"+(e?e+\":\":\"\")+a+\"] \",l=G(arguments,2).map(function(e){re...<omitted>...)} could not be cloned.\n\nI'm not sure if there's anything we can do about it, as it's the user-code exception and we shouldn't patch nor hide it - it's meant to be reported and fixed in the codebase. . Thanks @mscuthbert! To be honest, I'm not even sure where to start, as I can't tell where this error originates from.\nWe already have a release candidate for our new v4 SDK, which fixes and unifies a lot of things. I'd love to get this error reported using this new version, as it should be easier to track things in there.\nI'll leave this issue open until someone comes back with same issue on new SDK :). We are trying our best to make sure that other developers can rely on our code. Hopefully no major issues when we release v4 :). @n-sviridenko its already out, check the main repo page :). Closing this due to inactivity and not enough that we can do about this really. Due to new GitHub auto-suggest feature, this issue will still popup when anyone tries to report DataCloneError.. Nice find! It was very hard to spot. Can you please move the comment about why do this just above the incrementation itself? Thanks!. Thanks!. Ah, excuse me for the delay @leth. Released as 3.22.4.. Version 1.0  is not supported for years now, sorry.. \ud83d\ude2e sorry about that! We changed build system recently and rollup apparently did something funky. Will release a new version asap! (definitely today!). It should work now, as I redeployed fixed files on CDN. I'll release 3.22.3 though, as I cannot do the same for npm.. Published as 3.22.3. Thanks for the report!. We'll change most of the linting rules in v4, so I'll close this one due to inactivity, sorry. Thanks!. Nice! I'll try to give it a look this week :) Cheers!. Sorry for the delay @zivl, we're kinda swamped with work now. I'll try to get this done soon.. Thanks for your patience @zivl, got completely swamped in other things. Reviewed now :). Thanks @zivl! :). Thanks!. Can you provide your webpack config so I can recreate this locally?. Spring cleaning: Closing due to inactivity. @davidfurlong same question:\n\nCan you provide your webpack config so I can recreate this locally?. @davidfurlong wellll... it's kinda large and very project-specific \ud83d\ude05I won't be able to extract the main issue from this thing. I somehow need someone to provide a minimal possible config that exposes the culprit itself.. 23kB is an accurate measurement right now. We'll start on working to reduce it once we iron out all the details of the 4.0.0. @AWare we are tracking this issue here https://github.com/getsentry/sentry-javascript/issues/1552\nCheers!. Can you post your config/setup, so I can recreate this issue locally?. Spring cleaning: Closing due to inactivity. Can you provide the code that you use to trigger this error?. @pfrendo there's nothing that shouldn't work with require as well.\nKeep in mind that named imports are meant to be used with side-effect free (aka idempotent) functions. In case of Raven, you always want to import a whole thing, as we're exporting one singleton object anyway.. We'll fix this in v4 which will be completely written in TypeScript. I'll have to close this issue for now.. @ohana54 @f-roland fixed and released patched version. I call it dontdeployonfriday thing :(. Fixed in 3.23.1\n\n\n. Thanks for contributing to our lovely codebase! :)\nTook your changes, made some stylistic changes and unified some code, made sure it works and merged manually to master (still as yours commit of course) - https://github.com/getsentry/raven-js/commit/8f8a62487c7ef245e55561e94c319a23ff7625e4\nWill release it next week.\nCheers! :). Updated, thanks. I just tested it using your code sample, without any modificaitons, and it's all where it should be :)\ncaptureException\n\n\n\ncaptureMessage\n\n\n\nAs @SimonSchick mentioned, extra in your captureX calls should be an object, otherwise, it's treated as an array of single character values (see screenshot).\nCan you post paste link to the broken events or screenshots of them?\n. @wwwouter two things. Make sure that your actual ErrorBoundry is catching what it should (eg. don't trigger error from the same component that implements it - it won't work).\nHowever, more important is that React does bubble all the errors in development mode and this is what happens in your case.\nThe first event, that doesn't have tags is triggered using global error handler and only second one is yours. It took me a while to debug as it's not obvious, but this is how React works. It doesn't happen in production.\n```js\nconst BadComponent = () => {\n  throw new Error(\"BadComponent\");\n};\nclass ErrorBoundary extends React.Component {\n  componentDidCatch(error) {\n    Raven.captureException(error, {\n      tags: {\n        something: \"awesome\"\n      } \n    }); \n    Raven.captureException(new Error(\"foo\"), {\n      tags: {\n        something: \"awesome\"\n      } \n    }); \n  }\nrender() {\n    return this.props.children;\n  }\n}\nReactDOM.render(\n  \n\n,\n  document.getElementById(\"main\")\n);\n```\nHere are two screenshots of the output\nDevelopment\n\nProduction\n\nHope it helps.. Well, not really ignored. It's correctly caught by Raven, as it's a proper error. It's React that bubbles it up to the global error handler in development, where, in production, it doesn't.. That's exactly what happens. See my first screenshot :). No worries :) Ok, so there are 2 things going on.\n\nShouldn't there be two for test8a?\n\nNot in this scenario:\njs\n  componentDidCatch(error) {\n    Raven.captureException(error, {\n      tags: {\n        something: \"awesome\"\n      }   \n    }); \n    Raven.captureException(new Error(\"foo\"), {\n      tags: {\n        something: \"awesome\"\n      }   \n    }); \n  }\nWhen configured like this, notice that first captureException is exactly the same error as the one caught by the global handler. This means that they are duplicates. If you set Raven.debug = true, then you can see that it's being dropped, as we calculate duplicates based on the exception itself and a stacktrace, which in this case are the same.\n\nIf you change the order, so it's:\n- global hander for thrown error\n- your custom error, eg. new Error('foo')\n- captureException for didCatchException\nThen it's not treated as a duplicate, as 2 consecutive exceptions are never the same. In this case, we send all 3 of them.\n\n\nSo if one has a tag and the other hasn't, does this result in 1 issue with 2 events?\n\nThat's correct. As mentioned above, events are calculated based on exception and stacktrace value, and tags are associated to the specific event.\n\nIf so, should't the tag be visible? Or should there be 2 issues, with both 1 event?\n\nIf we'd do that, it'd be very noisy. We try to group them as much as possible and assume that the same exception with the same stacktrace will always have the same tags, as it's basically thrown in the same place.. I'll just merge it myself if I may. What can go wrong \u00af_(\u30c4)_/\u00af . \ud83d\udc4d . Thanks, that's a great review @MaxBittker! How about captureException structure now? :). Duuuuh! That's much more clever! Thank you :D. Thanks, @MaxBittker! I'll release it tomorrow though, as I don't want to put out an eventual fire at night :P. Thanks for the report @DeadSuperHero \nI spent few hours trying to debug this using a top-down approach (Sentry => CreateReactApp) and unfortunately, I have to say that the main issue is with UglifyJS2 plugin :(\nHere is the same event sent to Sentry, from Chrome\n\nand from Firefox:\n\nAfter Sentry parses them and compares to provided Source Maps, the results are as follow. Chrome:\n\nand Firefox:\n\nAs you can see, Firefox is \"off\" by 2 columns. I assume it may have something to do with ({}).notAFunction vs. {}.notAFunction calls and how given engines parses them, as this is how UglifyJS wraps your code.\nAfter further investigation, here's a side by side comparison of Chrome vs. Firefox error's stacktrace with SourceMaps turned on:\n\nHowever, when you run npm run eject to modify Create React App config and you disable webpack.optimize.UglifyJsPlugin, it's parsed correctly by both engines:\n\nThere's nothing we can do about it, as we follow Source Maps implementation specs and we cannot modify parser behavior to take such things into account.\nI'd suggest filling UglifyJS? UglifyJSWebpackPlugin? CreateReactApp? issue and link them to this thread.\nCheers!\n. Fun fact. Passing code below through webpack and uglify plugin will break Firefox sourcemap resolution as well.\nvar obj = {};\nobj.wat();\n\n. @DeadSuperHero https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/266. Hey @Ineigo, unfortunately, I wasn't able to reproduce this issue with the code below.\nAre you able to provide a repro-case that I could use to debug this issue?\n```html\n<!doctype html>\n\n\n\n\n\n\n\n\n\n\nGo!\n\n\n<script>\n  Raven.config('http://asd@asd.com/123', {\n    dataCallback: function(data) {\n      var message = data.request.url;\n      try {\n        message = data.exception.values[0].value;\n      } catch(e) {}\n      data.message = '[JS]: ' + (data.message || message);\n      return data;\n    },\n    shouldSendCallback: function () {\n      return false\n    }\n  }).install();\n\n  window.addEventListener('load', function () {\n    Raven.setUserContext({\n      cookies: document.cookie\n    });\n\n    $(\"form\").validate({\n      rules: {\n        username: 'required'\n      }\n    });\n\n    $('input').trigger('error');\n  });\n</script>\n\n\n\n```. Spring cleaning: Closing due to inactivity. That seems to be a very strange behavior of JS modules.\nWhen you use:\n```js\nimport ExtendableError from 'es6-error'\nclass CustomError extends ExtendableError {\n  constructor(code, message) {\n    super(message)\n    this.name ='CustomError'\n    this.code = code\n  }\n}\nfunction isPlainObject(what) {\n  return Object.prototype.toString.call(what) === '[object Object]';\n}\nfunction isError(value) {\n  switch ({}.toString.call(value)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return value instanceof Error;\n  }\n}\nfunction isErrorEvent(value) {\n  return Object.prototype.toString.call(value) === '[object ErrorEvent]';\n}\nvar ex = new CustomError('code123', 'not working');\nconsole.log('isPlainObject:', isPlainObject(ex))\nconsole.log('isError:', isError(ex))\nconsole.log('isErrorEvent:', isErrorEvent(ex))\n```\nIt'll incorrectly report true/true/false.\nHowever, when you'll substitute import statement with the code itself\n```js\nclass ExtendableError extends Error {\n  constructor(message = '') {\n    super(message);\n// extending Error is weird and does not propagate `message`\nObject.defineProperty(this, 'message', {\n  configurable: true,\n  enumerable : false,\n  value : message,\n  writable : true,\n});\n\nObject.defineProperty(this, 'name', {\n  configurable: true,\n  enumerable : false,\n  value : this.constructor.name,\n  writable : true,\n});\n\nif (Error.hasOwnProperty('captureStackTrace')) {\n  Error.captureStackTrace(this, this.constructor);\n  return;\n}\n\nObject.defineProperty(this, 'stack', {\n  configurable: true,\n  enumerable : false,\n  value : (new Error(message)).stack,\n  writable : true,\n});\n\n}\n}\n```\nit'll correctly report false/true/false.\nI'll try to debug why it's the case and if I won't be able to find out, we'll just swap checks to go through isError first.. @zivl When you test it locally, and create your own custom-error.js file with that code and import it as a module, it works correctly.\nThe issue is that this library doesn't export it's code \"as is\", but precompiles it using Babel.\nSooo it ends up being \"kinda\" error but not really. It's a plain object that inherits specific properties and has a prototype set to the Error itself.\nThere's no way around this unfortunately other than changing check order, as it's like a \"schrodinger error\". It is and is not an Error at the same time.. @zivl released in 3.23.3. Thanks for the report!. @pkaminski are you able to determine what's the part of the code responsible for triggering this error?\nI can capture regular SyntaxError in Safari just fine.\n\n\n. The main issue I have with RegExp is that it can help people easily shoot themselves in the foot, as this sanitizer goes through all keys of the payload sent to Sentry. Including exception, message, frames, etc. etc.\n@MaxBittker I added defaults at first, but then thought that there may be scenarios where people actually want to let them through, and changing this behavior later, would mean a breaking API change.\nOn the other hand, we already have some default values in the Sentry, so even if a user sends them through, they'll get sanitized. This means that adding them as a default value and merging passed config keys in the SDK as well shouldn't do any harm.. @dcramer added support for RegExp.\n@MaxBittker handled cyclic references, updated docs and changed behavior to bail quickly with the input if incorrect keys type is used.. Rebased and merged manually - https://github.com/getsentry/raven-js/commit/9bd9ca92d0a13030d8586e868962f0e41756c918\nalso created a guard for fill method, just in case https://github.com/getsentry/raven-js/commit/7fbb94a80f31b10d238fe657546b865fc5222fe1\nThanks!. It's hard to help without any code/config/version info that I could use to debug the issue :)\nYou may mask part of your DSN with ********* if you need to.. @zivl it can be resolved simply by adding this line to the singleton.js file:\njs\nmodule.exports.Client = RavenConstructor;\nWe already do this in Node, so we may also do it here as well.. @mariawix @zivl https://github.com/getsentry/raven-js/pull/1272\nLet me close this one :). Published as 3.24.0 :). Plugins will be substituted with integrations. As Ben mentioned in one of the linked issues above, I'm not able to fix this issue unless I can reproduce it. I tried to use quick start example from Angular 4, Angular 5 and Ember and I wasn't able to trigger this issue.\nUnless someone is able to provide a reproducible code configuration, it's just a guesswork and probably won't be effective at all.\nAnd yes, ErrorEvent is fixed now. You can pass it directly to captureException and we'll handle it ourselves.. @shcallaway can you post a link to this event? I'll try to track it this way. @shcallaway I'm working on something else right now, but I'll get back to you early next week. Thanks for very detailed investigation! :). After some research, I found that ways to trigger this issue are:\njs\ncaptureException('');\ncaptureMessage('');\nRaven.wrap(function () {\n  throw '';\n});\nto trigger the exact issue, including mentioned server validation notification, throw '', but it has to bubble up to the global on-error handler.\nI'm working on the solution. . @justinappler @shcallaway do you have some example events that I could take a look at by any chance? Any link to an event on your's organization sentry.io account will work.. Released as 3.26.3. Would appreciate a feedback with everyone's findings.. Glad to hear that, thanks @shcallaway!. @justincy can you bump to 4.1.1 and see if that helps? We patched a lot of things since initial release.\nOne of this things could resolve your issue:\n\n[browser] fix: Check for anonymous function before getting its name for mechanism\n[browser] fix: Fallback to Error object when rejection reason is not available\n[browser] feat: Better mechanism detection in TraceKit. @justinappler yes, this is a huge oversight on our side. Fixing it as we speak. Will get back to you once it's live.. @justincy this one will be very hard to track from what I can see. You are using dynamically loaded web-components, which are built on top of Polymer.\n\nYou are loading html files, which are on the other hand loading a) external JS files and b) calling  code itself. When it throws, it's understood as externally executed javascript or (not sure, never used Polymer imports) eval script.</p>\n<p>Those are impossible to be parsed correctly, as every browser will just throw <code>Script error</code> with line/column/function === undefined/0.</p>\n<p>You can use breadcrumbs to find out what happened, but it has to be somehow fixed in the end-user code, as we cannot do a thing about it. There has to be an additional error handling for executing dynamic imports.</p>\n<p>Taking look at https://sentry.io/familysearchorg/fs-home-prod/issues/735066771/events/34939741148/</p>\n<p>What happens in the specific order:\n- <code>fs-user-service.html</code> is imported\n- it then imports <code>fs-permissions.html</code>\n- which imports <code>fs-permissions.js</code> and it throws first error\n- then <code>fs-user-service.js</code> is imported (because of execution order) and it throws\n- and finally, second <code>fs-user-service.html</code> <code>&lt;script&gt;</code> tag is called, with inlined script and it on itself throws an error. @MaxBittker I wanted it to be in line with node's implementation for now. It'll be updated and taken care of correctly in v4 :). @dmk255 ah! Yes, thank  you. I forgot the <code>config</code>. Although it shouldn't use <code>install</code> as it'd then literally <code>install</code> all the error/promise handlers. We want to avoid it in this scenario, as multiple reporters are meant to be used manually via <code>captureException</code> and <code>captureMessage</code>.</p>\n<p>Updated: https://github.com/getsentry/raven-js/commit/f3b3500ebe7c0a5f87f0351fc5cb1e2b058a1e8c. What <code>install</code> does is add all the handlers to the current page - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L239-L266\nWhat that implies, is that when you call <code>install</code> twice, you'll get multiple handlers and errors will be caught by both of them. Unless the previous one will be removed, which can be done using <code>uninstall</code> OR page will be reloaded and all the handers wiped out.</p>\n<p>Everything I said is true only when you actually rely on handlers and don't just use <code>capture</code> methods yourself, as those are created per-instance.. Thanks for the PR. Do you have any particular use-case for this change? <code>truncate</code> should stay as is, because it's meant to be used with <code>string</code> only. If it somehow gets object passed, we should fix it in this specific place.\nWe also have <code>serializeException</code> (which can be used for any objects really) that's a safer way to serialize objects and truncate them to a specific size (kinda).. Not relevant for new SDK anymore. &gt; It would be nice to add some metadata that this was an unhandled promise rejection</p>\n<p>We do have that in mechanisms now. Hey, thanks for the PR. This sounds like a reasonable idea, however, in order to make it visible in Sentry's UI, we need to pass this information in the <code>extra</code> object.</p>\n<p><code>js\ncaptureException(ex, {\n  extra: {\n    unhandledPromiseRejection: true\n  }\n})</code></p>\n<p>It'd also be great if you could send the same patch for <code>raven-node</code> here https://github.com/getsentry/raven-node/blob/master/lib/client.js#L123-L138</p>\n<p>Thanks!. Thanks!. We. Are. Doneee. :shipit: . @kblcuk you have an access to the request itself in all middlewares, thus you can parse user manually in any way you need</p>\n<p>```js\n// express example</p>\n<p>function yourCustomUserParser (req, res, next) {\n  Sentry.configureScope((scope) =&gt; scope.setUser({\n    username: req.specialUserField.username,\n    id: req.specialUserField.getId()\n  }));</p>\n<p>next();\n}</p>\n<p>// order matters\napp.use(Sentry.Handlers.requestHandler());\napp.use(yourCustomUserParser);</p>\n<p>app.get('/', function mainHandler(req, res) {\n  throw new Error('Broke!');\n});</p>\n<p>app.use(Sentry.Handlers.errorHandler());\napp.listen(3000);\n<code>``. @SimonSchick not when used alongside</code>requestHandler<code>, as it's creating a Sentry Hub on the new domain for each request. And then</code>getCurrentHub<code>, which is used internally by</code>configureScope` is detecting it: https://github.com/getsentry/sentry-javascript/blob/d9bb595ca6b450332ead51b750c37f63e69860ba/packages/hub/src/hub.ts#L326-L360</p>\n<p>The main part:\nhttps://github.com/getsentry/sentry-javascript/blob/d9bb595ca6b450332ead51b750c37f63e69860ba/packages/hub/src/hub.ts#L354-L358. Reposted where it belongs https://github.com/getsentry/sentry/issues/9714. Doable through bradcrumb hints in new SDK now. That's odd. We never got an issue like this reported and nothing changed in recent version updates.</p>\n<p>Can you confirm 100% that it indeed logs <code>false</code> in <code>shouldSendCallback</code>?\nI can see that you're using process envs, so I assume you are doing some kind of SSR as well?. It shouldn't. That's very strange behavior.</p>\n<p>I tried to reproduce this using simple React example with your Raven config and wasn't able to do that.\nIs there a chance that you could somehow strip your codebase to the bare minimum that'd allow me to look into this issue?</p>\n<p>If that's not possible, could you place breakpoints on line 1892, 1894 and 1920 and provide some data/calls stacktrace?</p>\n<p>https://github.com/getsentry/raven-js/blob/e002e4f1ab05fd629925d0ea40e79910e8c33d96/src/raven.js#L1890-L1894\nhttps://github.com/getsentry/raven-js/blob/e002e4f1ab05fd629925d0ea40e79910e8c33d96/src/raven.js#L1892-L1896\nhttps://github.com/getsentry/raven-js/blob/e002e4f1ab05fd629925d0ea40e79910e8c33d96/src/raven.js#L1918-L1922</p>\n<p>It's very hard to debug this without being able to actually trigger the issue locally.. The motto of the day: \"There's no bug that can't be tracked.\" Or. \"Just frontend things...\"</p>\n<p><em>What happened (shortened and censored version):</em>\n1. Codebase imports <code>Raven</code> and calls <code>.config</code>\n2. <code>Raven.debug</code> tells me that it's already configured\n3. <code>RavenConfig</code> global is available (sometimes) and contains DSN (?!)\n4. No reference to <code>RavenConfig</code> anywhere in the codebase, nor in any of the packages</p>\n<p>...let's skip this part...</p>\n<ol>\n<li>There's https://github.com/rangle/redux-segment package included and Segment's SDK HTML snippet</li>\n<li>Which then fetches it's <code>analytics.js</code> package</li>\n<li>This package grabs your config and downloads https://github.com/segment-integrations/analytics.js-integration-sentry</li>\n<li>Which is globally exposing DSN and other options https://github.com/segment-integrations/analytics.js-integration-sentry/blob/93577492ce8528673c325559880021de9e87ab4f/lib/index.js#L51-L54</li>\n<li>It's then read by Raven, and automatically configures it https://github.com/getsentry/raven-js/blob/master/src/raven.js#L833-L841</li>\n<li>When you try to call <code>config</code> for the second time, it doesn't override previous options (which is a correct behavior)</li>\n<li>Therefore when you capture an exception, it's using your Segment.io configuration, not the on from the codebase</li>\n</ol>\n<p><em>What to do:</em>\nEither use Raven directly, Segment's integration or use <code>Raven.noConflict</code> in your <code>utils/raven</code> file and use <code>captureException</code> manually.. I'm glad it helped :) Cheers!. @axnsan12 I reevaluated this issue again after trying to approach it more generically in the PR above, and I realized that it's not the issue of Raven.js.</p>\n<p>First thing is that we already do cover 403s here - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L2055-L2072</p>\n<p>However, when you take a look at your stacktrace, the error is not originating from there, but from those lines https://github.com/getsentry/raven-js/blob/master/src/raven.js#L1364-L1367</p>\n<p>Which on the other hand is calling zone.js method here - https://github.com/angular/zone.js/blob/master/dist/zone.js#L1048-L1067\n<code>zoneify</code> is a function that wraps all native methods, and one of them is, well, <code>fetch</code>.</p>\n<p>There's something wrong going on with the wrapping in this library, not in our implementation.</p>\n<p>I created a boilerplate Angular 5 setup with the Raven, blocked my domain and 403 was handled correctly (trigger onError callback and log the error back to console), without any issue.</p>\n<p>I'm more than happy to take a look at it once again, but I'd need you to provide a reproducible codebase that I could use to trigger this error.. Ok, let's dissect what's happening here, as everything is working just fine, but manual rethrows make it look odd (ignore my previous comment, zone.js just made it harder to debug due to its \"wrap everything i can\" nature).</p>\n<ul>\n<li>call <code>Raven.config().install()</code></li>\n<li>throw an error in the component</li>\n<li>error is caught by <code>handleError</code> method</li>\n<li>call <code>Raven.captureException(err);</code>, it's sent to sentry (403 is not that important here)</li>\n<li>then rethrow this error with <code>throw err;</code></li>\n</ul>\n<p>And now, what's actually happening:</p>\n<ul>\n<li>by calling <code>install()</code> you attach global error handlers</li>\n<li>when doing <code>captureException</code> inside your <code>handleError</code> method, you capture it with Raven</li>\n<li>when you rethrow it, it's not captured by <code>handleError</code> method anymore, as it's not in the bubble chain - what happens then, is that error is caught by global <code>onerror</code> handler that you attached using <code>install()</code> method</li>\n<li>our <code>onerror</code> handler captures your rethrow and tries to send it</li>\n<li><em>however</em>, because it's the very same error that you just caught yourself, it's deduped and dropped (see <code>allowDuplicates</code> option - https://docs.sentry.io/clients/javascript/config/)</li>\n<li>you don't see any logging, because you don't use <code>debug mode</code> as described in our docs (please note that previous method - <code>Raven.debug = true</code> was broken in TypeScript which you use, so you can use <code>Raven.config(DSN, { debug: true })</code> now with newest <code>3.24.2</code> release as well)</li>\n</ul>\n<hr />\n<p>Here is how your console will look in various configurations (note that I used 401 [invalid dsn] to simulate 403 behavior - it will be the same).</p>\n<hr />\n<p><code>js\n// No `install` - rethrown error wont be caught\nRaven.config(DSN)</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 24 48\" src=\"https://user-images.githubusercontent.com/1523305/38931731-76e071aa-4314-11e8-9673-85701fe29d13.png\" /></p>\n<hr />\n<p><code>js\n// No `install` - rethrown error wont be caught\nRaven.config(DSN, {\n  debug: true\n})</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 25 11\" src=\"https://user-images.githubusercontent.com/1523305/38931730-76bd6e4e-4314-11e8-961e-07d55750ea85.png\" /></p>\n<hr />\n<p><code>js\n// Current behavior\nRaven.config(DSN).install()</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 23 31\" src=\"https://user-images.githubusercontent.com/1523305/38931733-7725cf3e-4314-11e8-9407-ef3c90e3f493.png\" /></p>\n<hr />\n<p><code>js\nRaven.config(DSN, {\n  debug: true\n}).install()</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 24 07\" src=\"https://user-images.githubusercontent.com/1523305/38931734-7748c476-4314-11e8-9662-d662ffa71eb7.png\" /></p>\n<hr />\n<p><code>js\nRaven.config(DSN, {\n  allowDuplicates: true\n}).install()</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 23 49\" src=\"https://user-images.githubusercontent.com/1523305/38931735-77675f3a-4314-11e8-950b-9ee2d10788c0.png\" /></p>\n<hr />\n<p><code>js\nRaven.config(DSN, {\n  allowDuplicates: true,\n  debug: true\n}).install()</code></p>\n<p><img alt=\"screen shot 2018-04-18 at 14 24 30\" src=\"https://user-images.githubusercontent.com/1523305/38931732-7702ab44-4314-11e8-9c64-596cc23d17cd.png\" /></p>\n<hr />\n<p>Hopefully it makes everything much clearer. Let me know if you have any more questions.. It can be done through event processor and hints in new SDK. . Thanks!. https://github.com/getsentry/raven-js/blob/b478429449ea2eea3267e5d1b2ce2abbb8e1d8b0/src/raven.js#L1645-L1660</p>\n<p>It should be changed to something like:</p>\n<p>```js\nvar exception = {\n  type: type,\n  value: message,\n  stacktrace: stacktrace,\n}</p>\n<p>if (options.mechanism) {\n  exception.mechanism = {\n    type: options.mechanism\n  }\n}</p>\n<p>var data = objectMerge({\n  // sentry.interfaces.Exception\n  exception: {\n    values: [exception]\n  },\n  culprit: fileurl\n}, options);\n```</p>\n<p>(note that it's not known whether we'll use <code>type</code>, <code>name</code>, or something else.. WIP: https://github.com/getsentry/raven-js/tree/mechanism. Already done in new SDK. @kumavis https://github.com/kumavis/raven-js/blob/d36dea71f683feea03a625507563b3cac912e521/src/raven.js#L2058-L2061 . &gt; Question: can you set a log level on a type: 'http' breadcrumb? will this be rendered correctly in Sentry?</p>\n<p>Yes, you should be able to do this just fine. I was trying to find this explanation and post it here. Thanks :). @kumavis I'll release a new version once this fix gets merged - https://github.com/getsentry/raven-js/pull/1302\nHopefully on Monday morning (as I try not to release on Fridays if its not a major issue) :). @kumavis released as <code>3.24.2</code>. @kumavis would you mind giving new v4 SDK a try? We are only supporting security/major issues in old raven-js for quite some time now. In new SDK it's handled here though - https://github.com/getsentry/sentry-javascript/blob/56e76485229c7f9609e0ccc3a2c20033fd7ae456/packages/browser/src/integrations/breadcrumbs.ts#L260. Yes, we'll either write our own solution one day, or implement <code>AsyncWrap</code> once it's spec is finalized and implemented in V8 - https://nodejs.org/en/docs/guides/domain-postmortem/#looking-ahead</p>\n<p>As of now, I don't think there's any willingness to remove deprecated API from the engine, as there's no clear alternative.</p>\n<p>Also, the wrong repository. It should be raven-node, and there's already a discussion on that topic :)\nhttps://github.com/getsentry/raven-node/issues/264. Purged CDN cache. https://cdn.ravenjs.com/3.24.1/raven.min.js should work just fine now. Can you re-verify please?. @laukstein it should, I always forget about it and should probably automate it at one point :P\nFixed :). @donce thanks for the report. I was able to reproduce this issue locally.</p>\n<p>Because we are using <code>&lt;script&gt;</code> tag to embed it - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L874-L877, there's not much that we can directly.</p>\n<p>There's however, a very easy way to fix it in the electron code itself.</p>\n<p>Add this snippet to your main process code:\n```js\nconst {session} = require('electron');</p>\n<p>session.defaultSession.webRequest.onBeforeSendHeaders({ <br />\n  urls: [\"https://sentry.io/api/embed/error-page/<em>\"]\n}, (details, callback) =&gt; {\n  details.requestHeaders[\"Referer\"] = \"</em>\";\n  callback({ requestHeaders: details.requestHeaders }); \n});\n```</p>\n<p>You can change <code>Referer</code> to be anything you'd like, as we default to <code>*</code> (anything) in the Sentry.io settings. You can also change this setting in your admin panel - https://sentry.io/kamil-ogorek/testing-project/settings/ (with your org/project of course)</p>\n<p><img width=\"805\" alt=\"screen shot 2018-04-10 at 19 36 52\" src=\"https://user-images.githubusercontent.com/1523305/38573492-8d0f01ea-3cf6-11e8-940f-67d701e7a8cb.png\"></p>\n<p>Let me know if it helps.. Hey @seanlinsley, thanks for reporting this issue and adding a \"workaround\", as it exposes the issue that shouldn't be there :) https://github.com/getsentry/raven-js/pull/1304/</p>\n<p>As for the original issue, you can either add this exception to <code>whitelistUrls</code>, or disable them when you want to verify the communication between your app and Sentry server.</p>\n<p>```js\nvar config = {\n  whitelistUrls: [/yourserver.com/something/]\n};</p>\n<p>if (isDevelopment()) {\n  config.whitelistUrls.push('<anonymous>');\n}</p>\n<p>// or</p>\n<p>var config = {};</p>\n<p>if (isProduction()) {\n  config.whitelistUrls = [/yourserver.com/something/];\n}</p>\n<p>Raven.config(config).install();\n```</p>\n<p>Adding something like <code>{force: true}</code> would be too much overhead, as we'd have to pass it around everywhere, take all the other options into account and make sure to cover all the API variants.. We don't have a control over V8, SpiderMonkey, Chakra or any other browser's JS engine and there's no reliable way to evaluate what's the source of such calls.</p>\n<p>Chrome returns <code>&lt;anonymous&gt;</code> where IE returns <code>Unknown script code</code>. It's not only the console calls, it's the same for <code>eval</code> code for example.</p>\n<blockquote>\n<p>I'd expect to find that a lot of Sentry users rely on the old behavior.</p>\n</blockquote>\n<p>We didn't get a single report nor support ticket related to the issue you mention.</p>\n<blockquote>\n<p>How are you supposed to be 100% sure that Sentry is working in production (w/ its usual production configuration) without being able to trigger an event from the console?</p>\n</blockquote>\n<p>If you really need it, you can always do this in the console:</p>\n<p><code>js\nRaven._globalOptions.whitelistUrls = [];\nRaven.captureMessage('test')</code>. Closing due to inactivity. Feel free to reopen if still relevant.. re: https://github.com/getsentry/sentry-javascript/pull/1301#issuecomment-380430156. Hey @ronaldozanoni, thanks for the PR. However, I'm not sure if we can merge this in.</p>\n<p>There are few reasons for this:\n- It's not a standardized event\n- It can clash with <code>click</code> events when implemented incorrectly (you'll get the same breadcrumb twice if you forget to <code>preventDefault</code> with some libraries, as <code>tap</code> is based on <code>touchEnd</code>, which is triggered alongside <code>click</code> itself) - note that this check https://github.com/ronaldozanoni/raven-js/blob/2c094b4ec41c601bbaafcf842283b809a4d802fd/src/raven.js#L944 won't work, as touch events and click events have differently shaped <code>event</code> objects\n- both <code>zepto-touch</code> and <code>jquery-mobile</code> are few years old and without any future support\n- It can be implemented on the developer's side if required - https://docs.sentry.io/clients/javascript/usage/#recording-breadcrumbs</p>\n<p><code>js\ndocument.addEventListener('tap', function (event) {\n  Raven.captureBreadcrumb({\n    message: 'someMessage', // or stringified element based on this util https://github.com/getsentry/raven-js/blob/master/src/utils.js#L274-L305\n    category: 'ui.tap',\n  });\n});</code></p>\n<p>Sorry, but unfortunately, it seems that there's more cons than pros for doing that.. @MaxBittker could you take a look at it as well please? :). I'm not sure what feature are you missing right now. We already provide things like <code>dataCallback</code> or <code>transport</code> that should allow you to do most of the things you'd ever need.. Yeah, I myself had no clue that errors triggered in console are not caught by <code>onerror</code> handlers :&lt;. &gt; Why is that? Shouldn't be exception interface (type, message) first thing to check to distinguish errors?</p>\n<p>Unfortunately, it leaves too much space for inconsistencies.</p>\n<p>If you have an error message that's not pure (eg. using dates, server responses, some payload) it may lead to thousands of events flooding users events list and we'd be unable to group them in any way.. &gt; Is that better than having thousands of different events merged together without a possibility of unmerge?</p>\n<p>It's not an accurate statement. You can see all events that were grouped together as a separate instance. Just click on the events number, eg. - https://sentry.io/kamil-ogorek/testing-project/issues/532218039/events/</p>\n<p><img width=\"577\" alt=\"screen shot 2018-04-25 at 12 26 30\" src=\"https://user-images.githubusercontent.com/1523305/39240390-eab24800-4883-11e8-875b-d3383433ec2c.png\"></p>\n<blockquote>\n<p>In my opinion, most people use Error type and message in a way to distinguish error between each other</p>\n</blockquote>\n<p>You're right, but imo it's a rare case to \"abstract\" the errors and have the same stack with various errors. There's, unfortunately, no easy way to cover all cases and we chose the one, that's helpful to majority of people in our experience.. Closing due to inactivity. Feel free to reopen if still relevant.. Done through console integration. @akashnimare completely?</p>\n<p><code>``js\ninit({\n  dsn: '__YOUR_DSN__',\n  integrations: [new Sentry.Integrations.Breadcrumbs({\n      beacon: true,\n      console: false,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n  })] \n}). @akashnimare it will be once we merge this https://github.com/getsentry/sentry-javascript/pull/1571 :). @didnotwant it's not possible to do it separately for</code>warn/info/log/error<code>. It's either whole</code>console` wrapped or none.</p>\n<p><code>js\nSentry.init({\n  dsn: '__YOUR_DSN__',\n  integrations: [new Sentry.Integrations.Breadcrumbs({\n      console: false\n  })] \n})</code>. @mitsuhiko it's because you can pass the <code>timestamp</code> as one of the attributes to <code>createBreadcrumb</code> - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L635-L640</p>\n<p>Would you rather just override user's data by swapping the order of a merge?</p>\n<p><code>js\nvar crumb = objectMerge(obj, {\n  timestamp: now() / 1000\n});</code>. <code>__serialized__</code> is only present when a plain object has been passed to <code>captureException</code> - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L476-L480 and it's meant to just briefly show what was inside this object to make it easier to track the error (in short - it means that we caught something that wasn't an error in the first place and we try to gracefully fallback to other solution)</p>\n<p>If you want to pass additional data, like the one above, use <code>Raven.setExtraContext</code> or <code>Raven.captureException(ex, { extra: { [your_data] }})</code> instead.</p>\n<p>see: https://docs.sentry.io/clients/javascript/usage/#passing-additional-data. @iOiurson yes, it's ~100kB per event right now and we don't truncate it ourselves, because it can be costly.</p>\n<p>You can use <code>Raven.config('__DSN__', { debug: true });</code> to see the reason why your event has not been sent.</p>\n<p>More details regarding payload limit in previous conversations:\nhttps://github.com/getsentry/raven-js/issues/339\nhttps://github.com/getsentry/raven-js/issues/874\nhttps://github.com/getsentry/raven-js/issues/937</p>\n<p>I also posted a workaround that can be modified to your needs here - https://github.com/getsentry/raven-js/issues/874#issuecomment-379731186. Limits has been documented. Thanks for filling the issue @michaelstalker! Addressed in https://github.com/getsentry/raven-js/pull/1313. Can you please repost this issue here? https://github.com/getsentry/sentry-electron\nThanks!. It's impossible to tell at the first glance, without the content of <code>inject.js</code>. But it's most likely than not that it's not a raven.js issue. I need more details to help you.. @rodolfo3 it's caused by the React that's bubbling the event to global handler in Development Mode only, but not in production. Please read the explanation here: https://github.com/getsentry/raven-js/issues/1249#issuecomment-372701891</p>\n<p>I'll leave this issue open to remember that I have to mention this in the docs.. Whoops.. @mlecoq ah, we lost it, it was there in the old docs \u2013 https://docs.sentry.io/clients/javascript/integrations/react/#expanded-usage \ud83d\ude05</p>\n<p>Fixed it \u2013 https://github.com/getsentry/sentry-docs/pull/840</p>\n<p>Thanks!. Can you elaborate more on:</p>\n<blockquote>\n<p>Just as a side note: I catch my Errors myself, then unwrap an instance of the standard Error and then call Raven.captureException() with it.</p>\n</blockquote>\n<p>I'm trying to understand how you do this, as if you do this manually, you should also be able to filter the errors yourself in the first place. Thanks!. Makes sense. In this case, I can only recommend skipping calling <code>install</code> directly, and just turn on instrumentations (+ unhandled promise handler if you need it)</p>\n<p><code>js\nRaven.config('__DSN__', {\n  some: 'config'\n});\nRaven._instrumentTryCatch();\nRaven._instrumentBreadcrumbs();</code></p>\n<p><code>Raven.captureException</code> will still work as expected, so you can handler all errors yourself.</p>\n<p>https://github.com/getsentry/raven-js/blob/master/src/raven.js#L241-L268</p>\n<p>We are working on the next major release, and introducing new options/api methods right now is not perfect.. Thanks for the PR @CaptObvious! There are 2 things that I'd like to ask you for:</p>\n<ul>\n<li>can you add an appropriate tests? it's the critical path for every handled exception, therefore we have to make sure it's covered as much as possible</li>\n<li>can you move this patch to tracekit codebase? (we have our copy in /vendor directory) It looks like <code>computeStackTrace</code> method is a much more appropriate place for this change</li>\n</ul>\n<p>Cheers!. Hey @kellycampbell. I'm not very familiar with Cordova, however, I'm pretty sure that the issue is caused by not sending a <code>Referer</code> header alongside your request (it's not required for events, thus they work just fine for you).</p>\n<p>Please see this related issue for Electron, it should explain the cause - https://github.com/getsentry/raven-js/issues/1297#issuecomment-380186018. I know that https://github.com/wymsee/cordova-HTTP can do that for sure. Closing due to inactivity. Feel free to reopen if still relevant.. @CaptObvious moved your commit to this PR so I could add tests and make some minor changes :). &gt; You could have done that in the previous PR - I had the setting enabled to allow maintainers to edit it.</p>\n<p>I don't like to force push to someone else's forks and I had to do this, as I rebased some changes from master. Commit is still authored as yours though :)</p>\n<blockquote>\n<p>Out of curiousity, why .slice() over .substr()?</p>\n</blockquote>\n<p><code>substr</code> cannot accept negative ranges, as <code>slice</code> do, which is imo more descriptive. Eg. <code>slice(-300)</code> is a simple \"give me last 300 characters\", where <code>substr(value.length - 300)</code> sounds more like a \"give me all the characters that are left, starting at position 300 counting from the end of the value length\".\nI just find it easier to read :). @CaptObvious released as <code>3.25.0</code>. Thanks @exherb!. It's a simple fix that doesn't require any tests, so I'll let myself merge it. Fixed in <code>3.25.1</code>, sorry for the inconvenience. Hey, you can do this with:</p>\n<p><code>js\nRaven.config(__DSN__, {\n  shouldSendCallback: function () {\n    return false;\n  }\n})</code></p>\n<p>or to be more generic with one switch</p>\n<p>```js\nconst RAVEN_DEBUG = true;</p>\n<p>Raven.debug = RAVEN_DEBUG;\nRaven.config(<strong>DSN</strong>, {\n  shouldSendCallback: function () {\n    return !RAVEN_DEBUG;\n  }\n})\n```. Hey @zivl, unfortunately, we're not able to add any new features in near future, due to us working on next major release. It'd just add more work that'd pile up pretty soon.</p>\n<p>You can, however, achieve this behavior very easily using numerous user-agent parsers and <code>shouldSendCallback</code> method.</p>\n<p>https://github.com/faisalman/ua-parser-js</p>\n<p>```js\nconst UAParser = require('ua-parser');\nconst ua = UAParser(navigator.userAgent);\nconst ignoredOS = ['Ubuntu', 'Debian', 'Chromium OS'];</p>\n<p>Raven.config(<strong>DSN</strong>, {\n  shouldSendCallback: function () {\n    if (ignoredOS.includes(ua.os.name)) return false;\n    return true;\n  }\n});\n```. Sure, will do!. It's easily doable through event processors in new SDK. @karensg https://docs.sentry.io/learn/hints/?platform=browser#before-send</p>\n<p><code>js\ninit({\n  dsn: '__DSN__',\n  beforeSend(event) {\n    // Ignore IE 11, but gather Edge errors\n    if !('ActiveXObject' in window) return null;\n    return event;\n  }\n})</code>. @karensg you can make an integration to drop those events for you instead of relying on <code>beforeSend</code> - https://docs.sentry.io/platforms/javascript/?platform=browser#eventprocessors. @karensg </p>\n<p>```js\n// integrations/iefilter.js</p>\n<p>import { configureScope } from '@sentry/browser';</p>\n<p>class IEFilter {\n  install() {\n    configureScope(scope =&gt; {\n      scope.addEventProcessor(async (event) =&gt; {\n        // Ignore IE 11, but gather Edge errors\n        if !('ActiveXObject' in window) return null;\n        return event;\n      });\n    });\n  }\n}\n```</p>\n<p>and then:</p>\n<p>```js\nimport IEFilter from './integrations/iefilter';</p>\n<p>init({\n  dsn: '<strong>DSN</strong>',\n  integrations: [new IEFilter()]\n})\n```. The \"culprit\" is just a leftover from an old, old API. It's always called transaction now.\nRegarding invalid transaction, I'm already aware of it and will definitely fix it before the major release.</p>\n<p>Excuse me such a long response time, was on vacations.. @ilfa sorry for such a long response time, we were swamped. I'm not sure if I understand the issue tbh. Do you by any chance still have this fiddle link? \ud83d\ude05. Closed due to inactivity. Please feel free to reopen this issue if this also happens in v4 sdk. Cheers! :). Related:\n- https://gist.github.com/MaxMilton/e2338b02b7381fc7bef2ccd96f434201\n- https://github.com/getsentry/raven-js/issues/169. Things to do/consider:</p>\n<ul>\n<li>[x] build and remove <code>setTimeout</code> from loader (needed for tests)</li>\n<li>[x] do we really need to run the tests on Travis? It'll be rarely if ever changed tbh</li>\n<li>[x] minify and add to docs. It doesn't seem to timeout anymore, so we should be fine with leaving it on TravisCI for now.</li>\n</ul>\n<p>I guess it's done... 'ish?. ^bump @benvinegar . 5 bullet points crossed with one PR?</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/1523305/40479540-1feeacfa-5f4c-11e8-9cee-f53ce2d3e2ab.png\" />. Closed as duplicate of https://github.com/getsentry/raven-js/issues/623. Looks good. Could you also add a quick test covering this scenario? (I also just realized that we don't have tests for this util at all...). Rebased and merged manually. Thanks!. Perfect, thanks!. Hey, thanks for filling the issue and sending a PR for it. The overall idea is good and we'll definitely include something of that sort in the next major release (coming soon). We do already have <code>breadcrumbCallback</code>, however, the problem with it is that we don't provide raw data that could be used.</p>\n<p>If we'd have something like:\n<code>js\nRaven.config(__DSN__, {\n  breadcrumbCallback (breadcrumb, data): {\n    console.log(data.raw.response); // whole response object that could be read\n    if (breadcrumb.type === 'xhr') {\n      breadcrumb.data.request_id = data.raw.response.request-id\n    }\n    return breadcrumb;\n  }\n});</code>\nwe could achieve exactly what you need.</p>\n<p>Unfortunately, your solution is too specific and requires more of a generic approach so it could cover a wider range of scenarios. Adding more and more config options can easily get out of hand and overwhelm users.</p>\n<p>I'll have to close your PR, but will keep this issue open and definitely keep it in mind, so we update behavior of <code>breadcrumbCallback</code>. I also allowed myself to change the title to describe the main issue and we'll use it to track any updates.</p>\n<p>Cheers!. Done through breadcrumb hints in new SDK. Ref: https://github.com/getsentry/raven-js/issues/1341#issuecomment-393283238. <code>name</code> property is for easier filtering when using callback function. Not everyone is aware of <code>constructor.name</code> and having a property is not a large overhead imo.. TBD:\n- [ ] ~debug why http requests are emited twice (see http itegration for node)~ not sure, but I wrote a small workaround for this which will do for now I guess \u00af_(\u30c4)_/\u00af\n- [ ] ~debug why captureException is not creating a breadcrumb~ it wasn't implemented in the raven-node at all, will fix it there\n- [x] remove uninstall calls\n- [x] extract functions from http/console calls as they are nasty now. For the reference:\nhttps://github.com/getsentry/raven-js/pull/1354\nhttps://github.com/getsentry/raven-js/pull/1355\nhttps://github.com/getsentry/raven-js/pull/1357. Fixed in https://github.com/getsentry/sentry-javascript/issues/1345. SHIP IT!. @swftvsn fixed and released as <code>3.23.2</code>. @willem-delbare just did exactly that. 3.26.0 and 3.26.1 are deprecated now and 3.26.2 has been released.. https://docs.sentry.io/clients/javascript/config/#optional-settings</p>\n<blockquote>\n<p><em>breadcrumbCallback</em> - A function that allows filtering or mutating breadcrumb payloads. Return false to throw away the breadcrumb.</p>\n</blockquote>\n<p><code>js\nRaven.config(__DSN__, {\n    breadcrumbCallback (crumb) {\n      if (crumb.type === 'http') {\n        crumb.data.url = crumb.data.url.replace(/(https:\\/\\/example.com\\/)\\d+(\\/*)/, \"$1#scrubbed#$2\")\n      }\n      return crumb;\n    }\n})</code></p>\n<p>There you go :). Thanks for the PR!</p>\n<p>SDK won't work at all without the <code>dsn</code> (only captureX calls will work, but they won't send anything and will throw an error anyway due to <code>isSetup</code> call). It should rather be changed in the code itself, not in the typing.\nHowever, to change this, we'd have to bump major version and we are already working on the new SDK, to I don't think we should merge it now.. Hey. You can either use not documented <code>ravenHandle</code> event (eg. <code>document.addEventListener('ravenHandle', (stackInfo, options) =&gt; { ...exception... })</code> \u2013 https://github.com/getsentry/raven-js/blob/master/packages/raven-js/src/raven.js#L1639-L1642\nOr you can use regular <code>dataCallback</code> - https://docs.sentry.io/clients/javascript/config/ which will trigger for both, exceptions and messages.. @oyshan this will be exactly the thing that we'll add to our UI soon. For now, you can use SDK part of this thing to detect it yourself.</p>\n<p>In <code>dataCallback(data) { ... }</code>, <code>data.exception.mechanism</code> contains this information. <code>mechanism.handled</code> is a boolean which indicates whether it was a global handler on an integration/user's triggered.</p>\n<p><code>js\ndataCallback(data) {\n  if (data.exception.mechanism.handled === true) {\n    // captureMessage, captureException or an instrumentation\n  } else {\n    // onerror or onhandledrejection\n  }\n}</code>. See: https://github.com/getsentry/raven-js/issues/1360\nI believe it's the same kind of issue as the one you described.. Done through breadcrumb hints in new SDK. Rebased and merged manually. Done in new SDK.. Not relevant, as it can be a separate integration.. Done through logger in new SDK.. We'll stick with domain in new SDK as well, as they are not going away soon.. @jdrydn we provide all the necessary tools for anyone to make it happen if they are not willing to use domains. <code>domain</code> is used only when <code>requestHandler</code> is attached (eg. in express app)</p>\n<blockquote>\n<p>to some sort of portable context, so we didn't have to use domains if we didn't want to</p>\n</blockquote>\n<p>There's <code>hub</code> and <code>scope</code> for handling the context, which can be used to achieve literally anything end-user needs when it comes to custom event data:\n- https://docs.sentry.io/enriching-error-data/scopes/?platform=javascript\n- https://docs.sentry.io/enriching-error-data/context/?platform=javascript\n- https://docs.sentry.io/platforms/node/#eventprocessors\n- https://docs.sentry.io/platforms/javascript/advance-settings/</p>\n<p>Let me know if you have any specific questions and I can definitely help you with them.. Plugins will become their own integrations, so it's not relevant right now.. Done in new sdk.. They are not anymore - https://github.com/getsentry/sentry-javascript/blob/22e7b9ea26d0e2bbc2043de230e9161e08c31a96/packages/node/src/transports/base.ts#L56-L63. Hub/scope modules widely changed how this works in new SDK, so it shouldn't be an issue anymore.</p>\n<p>@daton89 please post an issue on https://github.com/getsentry/sentry about this, as SDK has nothing to do with the server communication itself.. @dauledk new major release, aka. Sentry SDK v4. In RC now :)</p>\n<p>https://github.com/getsentry/sentry-javascript/tree/master/packages. Re original issue:\nhttps://github.com/getsentry/sentry-javascript/blob/ea3b09d2d91d33485a8b94145827c9df15fd8d17/packages/node/src/hub.ts#L21-L38\nhttps://github.com/getsentry/sentry-javascript/blob/ea3b09d2d91d33485a8b94145827c9df15fd8d17/packages/node/src/handlers.ts#L151-L162. Done in new SDK.. Done in new SDK.. Too hard to tell anything without a repro case. Closing it for now, as we don't know if it's still relevant with new SDK. Feel free to reopen if it is.. Done in new SDK.. Done in new SDK through event processors and hints.. Released as <code>4.4.0</code>. Done in new SDK.. Too hard to tell anything without a repro case. Closing it for now, as we don't know if it's still relevant with new SDK. Feel free to reopen if it is.. @mrnagydavid as it's not JS SDK issue, but rather sentry's docker instance itself. It's just not a correct place to report this kind of issue. (my bad about \"no repro case\" part). Since the last post in the original thread, Sentry 9 was released and is available on the Docker's hub, which may fix the initial issue.. @nghiepit what exactly is not working? <code>3.26.2</code> is <code>raven-js</code>, not <code>raven-node</code> used to report the initial issue.. Unified in new SDK. Original issue was resolved.. Done in new SDK.. Done in new SDK through event processors. Use <code>import Raven from 'raven-js';</code> instead of <code>import * as Raven from 'raven-js';</code> and it will work.\nWe don't export named functions yet and Raven itself is a singleton.. Doable with event hints in new SDK.. https://github.com/getsentry/sentry-javascript/blob/3c10d9c05de63edfc2372fe2528d164a6e08d6a7/packages/utils/src/object.ts#L206-L210</p>\n<blockquote>\n<p>Checking for a <code>toJSON</code> property would also improve error logging when logging specific objects like ObjectId's from MongoDB, which currently are displayed like this:</p>\n</blockquote>\n<p>@adriaanmeuris It's coming :) . &gt; @kamilogorek will version 4 allow some form of custom data harvesting from the error object?</p>\n<p>@blittle yes! :) We'll have custom event processors which will allow for any manipulation that you'll ever need. It'll have an access to the caught exception, as well as to the current state of the event that we'll end the end send to the server.. Already doable in new SDK through event hints. Test <code>index.html</code> file within <code>packages/browser</code> directory:</p>\n<p>```html\n<script src=\"build/bundle.min.js\">\n\n  const client = new Sentry.BrowserClient({dsn: '<strong>DSN_ONE</strong>'});\n  Sentry.init({\n    afterSend(event) {\n      client.captureEvent(event);\n    },\n    dsn: '<strong>DSN_TWO</strong>'\n  });</p>\n<p>Sentry.captureException('ex');</p>\n<p>setTimeout(() =&gt; {\n    throw new Error('boom')\n  }, 500);\n\n```. Merged manually. Hey @focusaurus, thanks for the very useful repository, it definitely sped up the process.\nAs you already noticed, it's caused by calling stringify on a whole kwargs object, which also includes context data. However, the main issue here is that hapi request object is using a lot of references, to other objects and doesn't only contain request information we need.\nWe extract things like host, port, path etc., however, we parsed only req object and mentioned in the docs that request object should follow http interface https://docs.sentry.io/clientdev/interfaces/http/ but it's apparently not always the case. We'll try to guard against it in next patch version. I already tested it with your repro case and it works fine.\nFixed in https://github.com/getsentry/raven-js/pull/1404. @focusaurus released as 2.6.3. There has been an update to Sentry recently - https://github.com/getsentry/sentry/pull/8121 which changed this a bit. Could you please revisit whether this issue still exists? Also we changed it a bit in new 4.0.0 SDK, and would really appreciate giving it a try. Cheers!. It's not SDK's issue per se, but the way we handle transaction and culprit in the Sentry now. https://github.com/getsentry/sentry/pull/8121/commits/f745aa0bc19c4ffb92e29fda135f4c0b9706436f#diff-4bf345e0795c0e86cfdb6a13f60bcb64R571 to be more specific. We'll discuss an approach to update this.. We decided that transaction has to be something more meaningful than just file/function name. From now on, we'll explicitly configure transactions for every framework/environment based on the endpoint we hit (eg. in express/koa, which is already implemented here - https://github.com/getsentry/sentry-javascript/commit/22c870635a2b308d2db51759e64c7ce24a68bcc3 and here https://github.com/getsentry/sentry-javascript/commit/b8cb9e08b22baa06f4efa33284fff560b9ab9092), route in React, controller in Angular/Ember etc. We'll build this up as we go and any help in forms of PR/feedback is appreciated :) Cheers!. Can be done with event hints in new SDK now. Event and Breadcrumb hints are objects containing various information used to put together an event or a breadcrumb. For events, those are things like event_id, originalException, syntheticException (used internally to generate cleaner stacktrace), and any other arbitrary data that user attaches. For breadcrumbs it's all implementation dependent. For XHR requests, hint contains xhr object itself, for user interactions it contains DOM element and event name etc.\nThey are available in two places. beforeSend/beforeBreadcrumb and eventProcessors. Those are two ways we'll allow users to modify what we put together.\nExamples based on your cause property (I use message for ease of reading, but there's nothing stopping you from modifying event stacktrace frames).\nbeforeSend/beforeBreadcrumb:\n```js\nimport { init } from '@sentry/browser';\ninit({\n  dsn: 'https://some@dsn.com/123',\n  beforeSend(event, hint) {\n    const processedEvent = { ...event };\n    const cause = hint.originalException.cause;\nif (cause) {\n  processedEvent.message = cause.message;\n}\n\nreturn processedEvent;\n\n},\n  beforeBreadcrumb(breadcrumb, hint) {\n    if (breadcrumb.category === 'ui.click') {\n      const target = hint.event.target;\n      if (target.ariaLabel) breadcrumb.message = target.ariaLabel;\n    }\n    return breadcrumb;\n  },\n});\n```\neventProcessor (this will be not used that often, but is great for writing custom plugins or share them across multiple projects - in form of an integration, more on this soon):\n```js\nimport { getCurrentHub } from '@sentry/browser';\ngetCurrentHub().configureScope(scope => {\n  scope.addEventProcessor(async (event, hint) => {\n    const processedEvent = { ...event };\n    const cause = hint.originalException.cause;\nif (cause) {\n  processedEvent.message = cause.message;\n}\n\nreturn processedEvent;\n\n});\n});\n```. Can you show me an example of desired output?. The platform itself doesn't support this use-case, so there's only this much we can do on the SDK side. In JS, there's only one \"main\" exception, and we don't have an easy way to display more.\nI'd add this as an extra data in the event itself, which'd give you enough information on the UI:\n```js\nbeforeSend(event, hint) {\n  const processedEvent = { ...event };\n  const cause = hint.originalException.cause;\nif (cause) {\n    processedEvent.extra = {\n      ...processedEvent.extra,\n      cause: {\n        type: cause.type\n        message: cause.message,\n        stack: cause.stack\n      }\n    }\n  }\nreturn processedEvent;\n}\n```. @Turbo87 like this? :)\n\n. It's PoC so far. I'll make it happen before the final release :). @sbezkostnyi you can freely call Raven.captureBreadcrumb yourself to capture anything and it'll be merged together with all future events (unless you go over the breadcrumbs limit, which will trim initial entries) \u2013 https://docs.sentry.io/clients/javascript/usage/#recording-breadcrumbs. @sbezkostnyi, example code and output of all events sent\n```js\nRaven.config(\n  \"https://fake@dsn.io/123\"\n).install();\nRaven.captureBreadcrumb({\n  category: \"console\",\n  message: \"crumb1\"\n});\nRaven.captureBreadcrumb({\n  category: \"console\",\n  message: \"crumb2\"\n});\nRaven.captureBreadcrumb({\n  category: \"console\",\n  message: \"crumb3\"\n});\nRaven.captureException(\"foo\");\nsetTimeout(function() {\n  throw new Error(\"bar\");\n}, 500);\nthrow new Error(\"baz\");\n```\n\n\n\n. Yes, you can rewrite stack frames to make this happen - https://docs.sentry.io/clients/node/sourcemaps/#updating-raven-configuration-to-support-source-maps\n(it's almost exactly the same in javascript sdk)\nPlease feel free to reopen if it's still relevant.. captureException is not meant to be used with strings and when you do this, we redirect the input to captureMessage ourselves. That's why it's not tracked as lastCapturedException.. Can you provide your test code that I can use for investigation?. I'm still not sure what's the issue here. Return value is always the instance of Raven itself.\nWhen you captureException or captureMessage, it'll generate eventId that'll be sent and returned from the sever if everything went correctly.\nYou can see on the screen below that ID sent, ID returned by the server and ID from lastEvent call are exactly the same, despite using captureException with a message instead of Error object.\n\n. This is how it was architected a few years ago and changing it now, would be a breaking change. It'll be done in next major release (v4.0).. You're welcome!. Where do you get RavenPluginAngular from? And why do you pass ngRaven to your module call? \ud83e\udd14\nHere are docs how to config plugins https://docs.sentry.io/clients/javascript/integrations/angularjs/. Oh jeez... my bad, sorry about that \ud83d\ude05 We'll revamp plugins section once we release v4. NOTE: Investigate \"endless loop with emitWrapper\". Current Vue integration code is available here. https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/pluggable/vue.ts\nIt contains this snippet (old plugin also had it):\njs\nconst oldOnError = this.Vue.config.errorHandler;\nif (typeof oldOnError === 'function') {\n  oldOnError.call(this.Vue, error, vm, info);\n}\nWhich means, that you can write:\n```js\nVue.config.errorHandler = function (error, vm, info) {\n  console.log(error, vm, info);\n}\n// configure Sentry SDK here\n```\nAnd we'll trigger an old behavior as well.. Feel free to just copy our code to a custom handler. I believe that logging errors to console for the end user is not a desirable behavior for majority of developers.\nYou can also easily turn off this integration locally, so that errors will be logged through original handler instead.. > I also appreciate how the issue still remains closed, while actually it wasn't resolved.\nWhat I'd appreciate more is if you'd help us and fill a PR to either fix or document it \ud83d\ude42. @BlitZz96 we have docs on the integration already - https://docs.sentry.io/platforms/javascript/#alternative-way-of-setting-an-integration :)\nYou can also write it as:\njs\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  integrations(integrations) {\n    if (process.env.NODE_ENV === 'production') integrations.push(new Sentry.Integrations.Vue({ Vue }));\n    return integrations;\n  }\n});. There's a license in every separate /package we release and can be found there.\neg.\nhttps://github.com/getsentry/raven-js/blob/master/packages/raven-js/LICENSE\nhttps://github.com/getsentry/raven-js/blob/master/packages/raven-node/LICENSE\nhttps://github.com/getsentry/raven-js/blob/master/packages/core/LICENSE\nhttps://github.com/getsentry/raven-js/blob/master/packages/browser/LICENSE\nhttps://github.com/getsentry/raven-js/blob/master/packages/node/LICENSE. Thanks for pointing that out @manticorp. Fixed. Closing due to inactivity. Feel free to reopen if still relevant.. Hello, thanks for reporting the issue.\nWe are in the process of working on the next major release of our SDK.\nBecause of that, we had to put working on the current version (except major or security bugs) on hold.\nWe'll try to get back to all the reports as soon as possible, so please be patient. \nThanks for your understanding,\nCheers!. Hello, thanks for reporting the issue.\nWe are in the process of working on the next major release of our SDK.\nBecause of that, we had to put working on the current version (except major or security bugs) on hold.\nWe'll try to get back to all the reports as soon as possible, so please be patient. \nThanks for your understanding,\nCheers!. Fixed in new SDK - https://github.com/getsentry/sentry-javascript/pull/1520/\nThanks!. Hello, thanks for reporting the issue.\nWe are in the process of working on the next major release of our SDK.\nBecause of that, we had to put working on the current version (except major or security bugs) on hold.\nWe'll try to get back to all the reports as soon as possible, so please be patient. \nThanks for your understanding,\nCheers!. @kerwin-personalyze there are 2 issues with the code.\n\n\nYou are using the development version of React, which has known \"issue\" (they say it's feature, but plenty of people think of it as unexpected behavior), which rethrows all errors, even those caught by error boundaries, to the global error handler.\n\n\nBecause of this, you are calling showReportDialog with incorrect eventId, as it's getting overridden by the second react error (which is not sent to Sentry, as it's a duplicate, and we dedup exactly same errors)\n\n\nCaptured event:\n\nDialog call:\n\nIf you'll use production bundle, it'll fix itself.\nYou are also calling showReportDialog() in one place and captureException in other. It can make it use incorrect eventId if any error happens in between.\nIt's better to store an eventId that you want and pass it directly.\n```js\nRaven.captureException(new Error('boom'));\nvar eventId = Raven.lastEventId();\n...\nRaven.showReportDialog({ eventId: eventId });\n```\nKeep in mind that your componentDidCatch is called second, not first (hello again react), so eventId that you see being sent to Sentry in network tab actually comes from global error handler.\n. Closing due to inactivity. Please feel free to reopen if it's still relevant.. Hey, it's caused by React bubbling up all the errors from ErrorBoundries to the main onerror handler in development mode. Once you build your app and use production code, it won't report 2 separate events.\nCould you give it a try?. Hello, thanks for reporting the issue.\nWe are in the process of working on the next major release of our SDK.\nBecause of that, we had to put working on the current version (except major or security bugs) on hold.\nWe'll try to get back to all the reports as soon as possible, so please be patient. \nThanks for your understanding,\nCheers!. Initial frame is coming from jsdom, not our SDK. We are very defensive about accessing global object\njs\nvar _window =\n  typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nThe error originates here https://github.com/jsdom/jsdom/blob/master/lib/jsdom/browser/Window.js#L204-L206 and there's not much we can do about fixing it.. Updated and merged manually. @dcc635 captureUnhandledRejections is for promises only, not any errors.. Unfortunately not in this version, it'll be in the next one though.\nThere's an \"unofficial and dirty way\" to do this if you really need it.\n```js\nRaven.config(DSN, {\n  some: 'other config'\n});\nRaven._patchFunctionToString();\nRaven._instrumentTryCatch();\nRaven._instrumentBreadcrumbs();\nRaven._isRavenInstalled = true;\nError.stackTraceLimit = 50;\n```\n(you can skip calling any of those internal functions (except isRavenInstalled) if you don't need breadcrumbs and just want manual calls). Released as 3.26.4. Released as 3.26.4 \\o/. We are not tagged using just a version number anymore due to mono-repo infra. It's raven-js@3.26.3 - https://github.com/getsentry/raven-js/tags. Can you provide a repro case? Or do you just mean that ?:\njs\ntry {\n  // some code\n} catch (error) {\n  // error\n ^ this should be automatically sent to sentry\n}. I just tested it, and everything works just fine.\n\n```js\nRaven.config(\"https://some-dsn@sentry.io/1337\").install();\ntry {\n  fail();\n} catch (e) {\n  console.log(e)\n  throw new Error('rethrown error')\n}\n``. Closing due to an inactivity. Feel free to reopen if still relevant.. @tokichie type definition was off. Just updated it now, thanks!. I don't know what's Ali Captcha tbh, but in order to debug this, I need a repro case in any shape or form.. Closing due to an inactivity. Feel free to reopen if still relevant.. This may help I guess https://blog.sentry.io/2018/06/20/how-droplr-uses-sentry-to-debug-serverless (it's using old raven version, which had a callback, but I'm mostly pointing to acallbackWaitsForEmptyEventLoop` flag.\nThere's no official way yet, as we're still trying things out in beta, but it's doable with this code:\n```js\nimport { init, getDefaultHub } from '@sentry/node';\ninit({\n  dsn: 'https://my-dsn.com/1337'\n});\nexports.myHandler = async function(event, context) {\n  // your code\nawait getDefaultHub().getClient().captureException(error, getDefaultHub().getScope());\n  context.fail();\n}\n``. @vietbui it's calledgetCurrentHub` now, as we had to unify our API with other languages SDKs.. @albinekb yes \u2013 https://docs.sentry.io/learn/draining/?platform=browser. @LinusU https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/baseclient.ts#L145-L152 \ud83d\ude42\nYou have to use client instance directly to get it though. The reason for this is that decided that the main scenario is a \"fire and forget\" type of behavior, thus it's not an async method. Internally however, we do have async API which we use ourselves.. @LinusU we'll most likely create a specific serverless package for this scenario. We just need to find some time, as it's the end of the year and things are getting crowdy now. Will keep you posted!. @mtford90\n\nwhen exactly would I use this better solution? As far as I know it's not possible to know when the lambda will be shutdown - plus it seems silly to wait for an arbitrary amount of time for shutdown to allow sentry to do its thing - especially on expensive high memory/cpu lambda functions.\n\n(talking about draining)\nIt's meant to be used as the last thing before closing down the server process. Timeout in drain method is maximum time that we'll wait before shutting down the process, which doesn't mean that we will always use up that time. If the server is fully responsive, it'll send all the remaining events right away.\nThere's no way to know this per se, but there's a way to tell the lambda when it should be shut down using handler's callback argument.\nAlso @LinusU, I re-read your previous comment, specifically this part:\n\nWould it be possible to have a special method that sends the event as fast as possible, and returns a Promise that we can await? That would be perfect for the serverless scenarios!\n\nThis is how we implemented our buffer. Every captureX call on the client, will add it to the buffer, that's correct, but it's not queued in any way, it's executed right away and this pattern is only used so that we can get the information if everything was successfully sent through to Sentry.\nhttps://github.com/getsentry/sentry-javascript/blob/0f0dc37a4276aa2b832da451307bc4cd5413b34d/packages/core/src/requestbuffer.ts#L12-L18\nThis means that if you do something like this in AWS Lambda (assuming you want to use default client, which is the simplest case):\n```js\nimport * as Sentry from '@sentry/browser';\nSentry.init({ dsn: 'YOUR_DSN' });\nexports.handler = (event, context, callback) => {\n    try {\n      // do something\n    catch (err) {\n      Sentry.getCurrentHub()\n        .getClient()\n        .captureException(err)\n        .then((status) => {\n          // request status\n          callback(null, 'Hello from Lambda');\n        })\n    }\n};\n```\nYou can be sure that it was sent right away and there was no timing/processing overhead.. @jviolas totally! :). > @kamilogorek I couldn't find getCurrentHub() in the docs on your website, is this API guaranteed not to break without a major semver bump? \u2764\ufe0f\nYes, it's guaranteed. It's the part of the @sentry/hub package which is described here - https://docs.sentry.io/enriching-error-data/scopes/?platform=browser\nWe are discussing kinda \"advanced uses\" here in this thread and we haven't got to the point of documenting them yet. We'll do this eventually :). @vietbui @albinekb @Andriy-Kulak @LinusU @dwelch2344 @jviolas @rreynier @guillaumekh @rdsedmundo @ondrowan @pimterry @zeusdeux not sure who's still interested in this use-case, so excuse me if I shouldn't call you.\nStarting 4.6.0, there's no more client/hub dance. You can just call any our captureX method and then use Sentry.flush() to await the response once everything is sent to the server. All scope/extra data should be preserved without any dev interaction.\nHere's an example with succeeded/timed-out requests.\n\nHope it helps! :). @LinusU hopefully yes, but we are swamped with other languages SDKs right now \ud83d\ude05. @zeusdeux is there any way you could provide some debug info/repro case for this?\nYou are overriding captureException method which adds the event to the buffer, and then you should await on the flush return value. Have you tried to use it the \"regular way\"?. @zeusdeux exactly, just call our native Sentry.captureException(error) without any overrides.\nSo your helper will be:\n```js\nimport * as Sentry from '@sentry/node'\nexport function init({ host, method, lambda, deployment }) {\n  const environment = host === process.env.PRODUCTION_URL ? 'production' : host\nSentry.init({\n    dsn: process.env.SENTRY_DSN,\n    environment,\n    beforeSend(event, hint) {\n      if (hint && hint.originalException) {\n        // eslint-disable-next-line\n        console.log('Error:', hint.originalException);\n      }\n      return event;\n    }\n  })\nSentry.configureScope(scope => {\n    scope.setTag('deployment', deployment)\n    scope.setTag('lambda', lambda)\n    scope.setTag('method', method)\n  })\n}\n```\nand in the code you call it:\n```js\nimport * as Sentry from '@sentry/node'\ntry {\n  // ...\n} catch (err) {\n  Sentry.captureException(err);\n  await Sentry.flush(2000);\n  return respondWithError('Something went wrong', 500);\n}\n```. @tanduong can you provide repro case? Just stating that it doesn't work isn't too helpful \ud83d\ude05. Sweet! We'll definitely take a look at it in the next release (coming soon!). Thanks!. Done! https://github.com/getsentry/sentry-javascript/pull/1525\nThanks for letting us know! :). It's very hard to tell without a reproduction steps to be honest. There are just too many things that can cause this. Can you post some links to mentioned events in our Sentry UI so I can take a look at them?. New SDK has improved handling of \"difficult\" errors quite a bit. It'd be awesome if you could update one day and get back to me if this issue is still the case. Please feel free to reopen if it's still relevant though. Cheers!. @palto it has been all ironed out. All previous and current version should be fixed now.\nmd\n$ bower cache clear\n$ bower install raven-js. @HazAT is working on porting them all there. It'll be fixed in ~30min.. Should be fixed now. Thanks for the report!\njs\n$ bower cache clear\n$ bower install raven-js --save. @baw you can override it using breadcrumb hints if desired. Please refer to this comment - https://github.com/getsentry/sentry-javascript/issues/1401#issuecomment-418631326. Data in dataCallback is exactly what's sent to Sentry. However, as you mentioned already Sentry GUI performs some data manipulation, so it can be correctly displayed to the end user.\nYou can read the code here https://github.com/getsentry/sentry/blob/c269e6cbb41bf4e22ad4c9fe633d01ea7cb8c549/src/sentry/lang/javascript/processor.py (and in a whole lang/javascript directory)\nExcuse me such a long response time, was on vacations.. We don't encourage using it directly, therefore we don't mark them in types.\nI'll be changed in the next major release though - https://github.com/getsentry/sentry-javascript/blob/de2ee7e6a93d1eace1e37c094bcc25a776939f50/packages/types/src/index.ts#L85-L91\nExcuse me such a long response time, was on vacations. Feel free to reopen if still relevant.. It happened because we were not able to retrieve source maps and/or scrape the code itself. See screen below:\n\nExcuse me such a long response time, was on vacations.. Thanks for the details. I'll look into this.\nhttps://fetch.spec.whatwg.org/#http-network-or-cache-fetch point 8.5.\n\nIf the sum of contentLengthValue and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\nThe above limit ensures that requests that are allowed to outlive the environment settings object and contain a body, have a bounded size and are not allowed to stay alive indefinitely.. global.SENTRY_RELEASE from webpack plugin is meant to be used when bundling browser projects, thus it's assigned to global - https://github.com/getsentry/sentry-javascript/blob/409f3b429d86cae3e32f77771cac9eec5029c1a5/packages/raven-js/src/raven.js#L80-L81\n\nFor Node though, we just allow users to pass this data through env variable, as it's very uncommon to bundle a whole project together on the server.. It's doable through breadcrumb hints now.\njs\ninit({\n  dsn: 'https://some.dsn/123',\n  beforeBreadcrumb (breadcrumb, hint) {\n    if (breadcrumb.category === 'ui.click') {\n      const target = hint.event.target;\n      if (target.ariaLabel) breadcrumb.message = target.ariaLabel;\n    }\n    return breadcrumb;\n  }\n})\nSoooo eaaaassssyyyy :D. Sure you can. https://docs.sentry.io/clients/javascript/usage/#tracking-users\nExcuse me such a long response time, was on vacations. Feel free to reopen if still relevant.. Fingerprints are used to group together a bunch of contextually same, but not exactly the same errors. We don't want to skip them in this case - https://docs.sentry.io/learn/rollups/#customize-grouping-with-fingerprints\nNonetheless, really appreciate the PR and excuse me such a long response time, was on vacations.. @kevinehosford fingerprints should indeed be skipped. When we have two different errors with the same fingerprint, we still want to capture them both. They'll be grouped together on the server as one \"error\", but as completely different events.\nWith your change, the second event would be skipped and not sent to Sentry.. Can you re-report this issue to https://github.com/getsentry/sentry please? Trimming is done here. Thanks!. Sounds like a really neat solution! :). We are working on the next major release, thus there are no updates to raven-js, unless it's major bug or a security issue. Feel free to post a PR though. Thanks! :). Closing due to inactivity. Feel free to reopen if still relevant (although new SDK has correct types for sure).. What do you mean by invalid DSN exactly? Because a typo can be in a \"shape\" of the DSN or in the key/user/project number. Latter won't be recognized as an error, where former should.. Closing due to inactivity. Please feel free to reopen if it's still relevant.. Excuse me such a long response time, was on vacations.. And that's exactly what we need in this case. It should be a self-contained function, not relying on the inheritance. Official docs also use this as an example - https://angular.io/api/core/ErrorHandler#description. Thanks!. @jacobrask thanks for the report. Can you reverify it using the latest master branch? I just checked, and it's correctly included once now.\nCurrent sizes (gzipped):\nbundle.js 34.6 kB\nbundle.min.js 18.1 kB. Double-checked it today and it doesn't seem to be a case anymore. Also, our async loader will take care of bundle size. Feel free to reopen if it's still relevant.. Thanks! And excuse me such a long response time, was on vacations.. Fixed by your PR, thanks!. Thanks! Fixed https://www.npmjs.com/package/raven/v/2.6.4 :). Thanks! And excuse me such a long response time, was on vacations.. > And another apparently undocumented thing: How to get the console plugin with npm?\nWith npm, they are provided in plugins directory, so it's require('raven-js/plugins/console').\n\nHow do you configure levels in that case?\n\nIt's not possible, good catch, I didn't realize that before.\nPlugins will be gone in favour of much easier \"integrations\" in the next major release (scheduled for 2nd half of Q3). Please keep an eye on our blog/repository for future information.. Closing due to inactivity. Please feel free to reopen if it's still relevant.. New SDK is completely rewritten in TypeScript. This should solve all the issues regarding modules :). Unfortunately not, unless you patch internal send function https://github.com/getsentry/sentry-javascript/blob/master/packages/raven-node/lib/client.js#L327-L347 as raven-node is fully sync. It'll be possible in the next major release (around the end of Q3), with the introduction of async event processors! :)\nI'll let myself close this one, but please feel free to reopen it if it's still relevant.. I just tested it locally very quickly (just add server.listen(3000) at the end, and it appears to work just fine:\n\nSo the issue is in the AWS itself. It's probably just freezing the thread what's stopping Sentry from sending an error. Please take a look at this post - https://blog.sentry.io/2018/06/20/how-droplr-uses-sentry-to-debug-serverless\n. Express middleware is pretty straightforward in our case.\nOriginal:\n```js\n  errorHandler: function() {\n    var self = this;\n    return function ravenErrorMiddleware(err, req, res, next) {\n      var status =\n        err.status ||\n        err.statusCode ||\n        err.status_code ||\n        (err.output && err.output.statusCode) ||\n        500;\n  // skip anything not marked as an internal server error\n  if (status < 500) return next(err);\n\n  var eventId = self.captureException(err, {req: req});\n  res.sentry = eventId;\n  return next(err);\n};\n\n},\n```\nso you should just need to change the callback part, and use it as a middleware instead\n```js\napp.use(function ravenErrorMiddleware(err, req, res, next) {\n  var status =\n    err.status ||\n    err.statusCode ||\n    err.status_code ||\n    (err.output && err.output.statusCode) ||\n    500;\n// skip anything not marked as an internal server error\n  if (status < 500) return next(err);\nRaven.captureException(err, { req: req }, (sendErr, eventId) => {\n    res.sentry = eventId;\n    callback(err);\n    next(err);\n  });\n});\n``. Not at all, it wasself.captureExceptionto preserve the context, but in case ofRaven.captureException,Ravenis already a correct one, so there's no need forthis/self.. Closing due to inactivity. Please feel free to reopen if it's still relevant.. @ondrowan thanks for the repro case, it's very useful! We found out that the issue is withserverlesswrapping everything in adomain, which we ourselves use in express middlewares (that's why it works with justnode handler.js`).\nWe are working on the fix as we speak.. @FredrikSeidl no, but we have a better solution for it now :)\nhttps://docs.sentry.io/learn/draining/?platform=browser. The initially reported issue is resolved I guess, so let me close it. Feel free to ping me if this still needs to be reopened. Cheers!. Moving to https://github.com/getsentry/sentry-javascript/issues/1488. It'll be possible in the next major release, which is scheduled for the second part of Q3 :). It's doable through breadcrumb hints in the new SDK now.\njs\ninit({\n  dsn: 'https://some.dsn/123',\n  beforeBreadcrumb (breadcrumb, hint) {\n    if (breadcrumb.category === 'xhr') {\n      // hint.xhr is a whole XHR object that you can use to modify breadcrumb\n    }\n    return breadcrumb;\n  }\n}). > in the new SDK\naka sentry-javascript, so this exact repo. There are beta versions and rc-0 available. We won't port this functionality to raven-js.\nAlso please see https://github.com/getsentry/sentry-javascript/issues/1401#issuecomment-418631326. @filipows yes, there's a hard limit of 200kB for a whole event sent to Sentry.\nhttps://docs.sentry.io/clients/javascript/usage/?platform=browser\n\nBe aware of maximum payload size - There are times, when you may want to send the whole application state as extra data. This can be quite a large object, which can easily weigh more than 200kB. This 200kB is currently the maximum payload size of a single event you can send to Sentry. When this happens, you\u2019ll get an HTTP Error 413 Payload Too Large message as the server response or (when keepalive: true is set as fetch parameter), the request will stay in the pending state forever (eg. in Chrome).. @filipows sent a PR - https://github.com/getsentry/sentry-docs/pull/470/ :). @filipows also see this: https://github.com/getsentry/sentry-docs/pull/310/files#diff-1412e3df3283d554d6037ceef9fe1c80R302 (probable cause of this difference). Thanks! It's enough for now. I'll give it another look later on when I'll be working on this part.. It's a very small change, so I'll merge it myself, as I need it for tests. We don't have a UI implementation on sentry.io for a feature like this. Right now it's only possible to send user feedback that's linked to a specific error.. Thanks!. @fabien0102 https://www.npmjs.com/package/raven-js/v/3.27.0 :). Thanks!. Merged manually. I'll update with next PR. Rate limiting is (well, will :p) be handled in the core - https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/baseclient.ts#L335-L338\nIs this what you're looking for?. > My main issue is that users are seeing the sentry rate limiting error being logged to console.\n\nIt's because chrome devtools is always logging XHR failures, regardless whether you log them yourself or not.\n\"Sending\" itself is handled here - https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/backend.ts#L135-L159\nEspecially this part - https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/backend.ts#L148\nWhich allows user to provide any custom transport mechanism. And mechanism itself is any class that follows this interface (basically it only needs captureEvent method) - https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/transports/base.ts\nSo if you want to handle some specific errors yourself for instance, you can do it like this:\n```js\nimport * as Sentry from '@sentry/browser';\nclass MyAwesomeTransport extends Sentry.Transports.BaseTransport {\n  captureEvent(event) {\n    return fetch(this.url, {\n      body: JSON.stringify(event),\n      method: 'POST'\n    }).then(response => ({\n      status: response.status === '413' ? 'rate_limit' : 'success'\n    })).catch(err => ({ status: 'failed' }));\n  }\n}\nSentry.init({\n  dsn: 'DSN',\n  transport: MyAwesomeTransport\n})\n```\nDoes this help? :). Closing due to inactivity. Feel free to ping me if this still needs to be reopened. Cheers!. Oh snap... \ud83d\ude05\nhttps://github.com/getsentry/sentry-javascript/commit/4934f15dc622b79f51ca08269a7100a698de6fd9\nWill release patched version asap. Thanks for the report!. errorHandler in our new SDK @sentry/node is even simpler, which let you modify it yourself.\n```js\nconst { getHubFromCarrier } = require('@sentry/node');\napp.use(function sentryErrorMiddleware(error, req, res, next) {\n  if (res.status < 400) return next(error);\n  getHubFromCarrier(req).captureException(error, { originalException: error });\n  next(error);\n});\n```\nThis will handle your usecase. We don't plan to change defaults anytime soon, as it's just too easy to modify it by end-user. Cheers!. @atk you're absolutely right. Created an issue for that \u2013 https://github.com/getsentry/sentry-javascript/issues/1849. @kevinehosford excuse me, I completely misunderstood this... \ud83d\ude05That's totally reasonable. Exception and stacktrace based events are handled before this check, so you are totally right. Same messages, different fingerprints shouldn't be deduped. Sorry about being so stubborn and closing previous PR :)\nCould you also port this to https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/dedupe.ts please? If not, I'll merge this one and port it myself tomorrow. Thanks!. Unfortunately not. There's no public API that we could hook into, which would give us this information. Even though those warnings look like a regular console.warn calls, they aren't, and they are not overridable.\nMaybe we'll be able to do it with ReportingObserver API when it evolves in next few months/years - https://developers.google.com/web/updates/2018/07/reportingobserver#future\nWe are able to capture CSP violations though: https://blog.sentry.io/2018/09/04/how-sentry-captures-csp-violations\nCheers!. We do have a support for ReportingObserver already in place - https://github.com/getsentry/sentry-javascript/pull/1525 so we'll be monitoring any updates to the API.\nI'll let myself close this one because of this. Thanks! :). @HazAT \n\n. Merged manually. @Aquilosion you have to add node typings to your project.\n```\nnpm install @types/node\n....\n\"compilerOptions\": {\n    \"types\": [\n      \"node\"\n    ],\n}\n```\nSorry for the inconvinience, it'll be included in the docs. Cheers!. @Aquilosion I'll double-check it today and get back to you.. @Aquilosion \njs\n{ \n  \"compilerOptions\": {\n    \"lib\": [\"dom\"]\n  }\n}\ndom typings contain those APIs, forgot about that. Tested with your project, it works just fine. We'll document this :). I'll merge it for now, as I need it for testing purposes. Very nice! :shipit: . Node 5/7/9 are not supported anymore - https://github.com/nodejs/Release\nI left node 4 for raven-node though, as it's working just fine.. @SimonSchick we do have some types that may interfere, therefore I sometimes used different syntax. It's always better to unify though, so all external and native modules are now using prefixed syntax. Thanks for pointing that out.. Thanks for the report. Fixed in https://github.com/getsentry/sentry-javascript/pull/1543. @mehulmpt can you please give our new v4 a try? I'd love to know if it also happens there.\nWe are focusing on releasing it to the public and don't have a capacity to take care of the issue above right away.. We are releasing all final versions of SDKs and updated Docs EOD tomorrow.\nIn the meantime, you can find all text here https://github.com/getsentry/sentry-docs/pull/293 (which is probably not readable from the \"outside\").\nFor your config, it'll be something like:\n```js\nimport * as Sentry from '@sentry/node';\nSentry.init({\n  dsn: 'DSN',\n  release: require('./package.json').version,\n  beforeSend (event) {\n    // console.log(event);\n  }\n});\n``. Thanks for the report. Fixed in https://github.com/getsentry/sentry-javascript/pull/1543. I don't seestrong-error-handler` anywhere in the code you provide. There's a note about it on the docs page\n\nIf you\u2019re using Loopback 2.x LTS, make sure you\u2019ve migrated to strong-error-handler, otherwise no errors will get to raven-node.. I realized that, but strong-error-handler is used in all versions >= v2.\n\nAre you able to provide a reproducible test-case I could use to debug this?. No rush, I'll leave this issue open till then :) (unless it takes months :p). Closing due to inactivity \ud83d\ude05 Feel free to reopen if it's still relevant.. Should be fixed in https://github.com/getsentry/sentry-javascript/pull/1548. Thanks for the report!. @polco done :). Can you provide an example code that I can use to reproduce this issue in our tests?\nAlso please take a look at https://docs.sentry.io/learn/hints/?platform=javascript and our new SDK v4, which allows for custom handling of cases like this through event processors and event hints.. Closing due to inactivity.. > It's really hard to understand why a simpler error-reporter needs to have such a substantial footprint \ud83d\ude10\n@mindplay-dk because it's not simple.\nHere's the code for just capturing errors in all the browsers and unifying them into a usable data structure: https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/tracekit.ts. > If you want, I can add a PR for that.\nI'd love that @cromefire :). @pascaliske esm build is still in the experimentation phase and we haven't documented it publicly yet. We'll do it once everything is tested throughout and will post our findings here.. Thanks, appreciate it @pascaliske! We will try to provide ESM support as soon as possible :). @cromefire ESM build should be available in 4.5.1 now. Still not documented as we want to make sure it's battle-tested, but so far so good. I checked regular webpack build with babel loader and it works like a charm.\n\nBeyond that, it's a matter of collecting a few bits of browser information, wrapping in the expected JSON format, and posting it - which shouldn't be more than a few KB min+gz. Should it?\n\n@mindplay-dk we don't perform any stack-trace resolving on the client-side. It's all done on the server, that's why you need to upload source maps in the first place to get support for them.\nWhat we do though is:\n- event processors to provide custom hooks that allow you to modify/filter/enhance data sent to Sentry\n- take care of all native API wrapping\n- capture breadcrumbs from all user interactions, network calls, navigations\n- extract user agent data\n- extract additional error data from linked errors, so you can make multiple-error levels like in other languages\n- listen to both global error handlers\n- provide multiple network transports, so that user will always get the best one for his current environment\n- take care of tenths of edge cases and various error (even custom ones) objects and various native implementations\n- provide fallbacks to spare or broken error information\n- buffer events so that you won't flood your own Sentry instance or run out of free events if something goes wrong\nJust to name a few. I really wish it would be as easy as \"catch error, add some data and send it through\".\nIn the real world though, there are tens of inputs, tens of sources error can come from (which all provide different data) and tens of environments which vary in behavior.\nWe'll definitely keep working on how to get this down to ~10-15kB, but it'll take some time. We only have so many resources (read people/time) we can spend now.\n\nI know that it's common to deploy megabytes of JS these days, but we have strict content policies at work, to ensure we ship projects that load fast on mobiles, and I can't justify spending more than half of our JS budget on error-logging - maybe 10% tops, so something like ~15-20 KB seems reasonable.\n\nYou can use our loader then \u2013 https://docs.sentry.io/platforms/javascript/loader/ :). > But there is sadly no solution for webpack\nWhat do you mean exactly? Having a package that could co-exist with the loader, which could be imported and bundled, but then communicate with asynchronously loaded SDK once error or captureException call happens?. @cromefire yes, because it's meant to be used as a \"snippet\". However you can find it's code here https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/loader.js. We have a solution coming that will let you use loader alongside minimal and will effectively add only a few kB to your final bundle.. @BenoitZugmeyer see \"Migration\" section here - https://github.com/getsentry/sentry-javascript/releases/tag/4.0.0\nThanks for pointing that out. We indeed missed that integration (which definitely will be turned on by default). We'll fix this asap.. Fixed in 4.0.3 \ud83c\udf7b. Thanks! Is this possible to provide a minimal repro case I could use to debug this issue?. Also if you'll use v4 of our SDK, you can skip this patching by removing the integration \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/functiontostring.ts\n. @semperos @cldwalker everything will work just fine, however, our reports won't be that precise.\nWhat this integration does is that for every wrapped native function (XHR callbacks, all type of event listeners, setTimeout, setInterval, rAF), we have to patch toString method to provide the original user function's name.\nIf we don't, then some user-land functions (eg. beforeSend callback, eventProcessors) can be reported as Sentry's. For example when an eventListener will throw an exception, and it was added like document.addEventListener('click', function someHandler () { ... }) it won't be reported as someHandler, but as wrap instead, as this is our method's name. . Closing due to inactivity. Feel free to reopen if it's still relevant and you're able to provide a repro-case. Thanks!. >  Is the new SDK only compatible with Sentry 9?\nCorrect. However, it's easy to write your custom transport in case you need to support older versions.\nhttps://github.com/getsentry/sentry-javascript/tree/master/packages/node/src/transports\n```js\nclass SentryEightTransport extends Sentry.Transports.BaseTransport {\n  public constructor(options) {\n    super(options);\n    this.client = new http.Agent({ keepAlive: true, maxSockets: 100 });\n  }\ngetRequestOptions() {\n    const originalOptions = super.getRequestOptions();\n    return {\n      ...originalOptions,\n      headers: {\n        ..originalOptions.headers,\n        // override your headers here\n      }\n    }\n  }\nasync captureEvent(event) {\n    return this.sendWithModule(http, event);\n  }\n}\n```\nAnd here's a reference for how headers are created - https://github.com/getsentry/sentry-javascript/blob/a83da5870f314a60516678f9a5d41c4b8a0df448/packages/core/src/api.ts#L53-L63. @gregwym fwiw, we decided to accept legacy DSNs as well (will be released in the next release). @nttdocomo please try 4.0.3+, we fixed it in yesterday's patch release.. @kre8or69 no, it has been added after the release - https://github.com/getsentry/sentry-javascript/commits/master\nWe'll release new version Today or Tomorrow. We have to patch few more things first.. @paltman can you provide a link to one of reported events in Sentry?\nWhen you throw a string, we are unable to retrieve a correct stack-trace because of how browsers implement this kind of code handling.. Closing due to inactivity.. We used default already, but apparently, some browsers have a strange implementation where it provides report's body, but message/reason/crashId is still undefined anyway.\nFixed in https://github.com/getsentry/sentry-javascript/pull/1576. Thanks!. Yes, ReportingObserver events are the very same events you'd get for regular exceptions. You can use eventProcessing to filter one you don't need - https://github.com/getsentry/sentry-javascript/blob/9c131a04dec99fd9716d3b9e850082680f21e497/packages/browser/src/integrations/reportingobserver.ts#L94-L127\njs\ninit({\n  dsn: '__DSN__',\n  beforeSend(event) {\n    // Detect if we got a ReportingObserver event\n    if (event.message && event.message.startsWith('ReportingObserver')) {\n      // And check if the observer's report had a body, if so, check whether sourceFile points to chrome-extension. If so, drop the event.\n      if (event.extra.body && event.extra.body.sourceFile && event.extra.body.sourceFile.startsWith('chrome-extension')) return null;\n    }\n    // Otherwise, just let it through\n    return event;\n  }\n})\nOr see this comment to see how to do it as a separate event processor - https://github.com/getsentry/sentry-javascript/issues/1329#issuecomment-423979370\nHope that helps. Cheers!. @vincentwoo https://docs.sentry.io/learn/hints/?platform=browser#before-send. You're right. Updated :) Thanks!. Can you provide a reproducible example? I tried to trigger this issue with no luck.\nWe wrap eventListeners here https://github.com/getsentry/sentry-javascript/blob/9c131a04dec99fd9716d3b9e850082680f21e497/packages/browser/src/integrations/trycatch.ts#L67-L81 with a try/catch and call wrapped original here https://github.com/getsentry/sentry-javascript/blob/9c131a04dec99fd9716d3b9e850082680f21e497/packages/browser/src/integrations/trycatch.ts#L121-L137 where if we don't have a function, we'll return what we got from the user https://github.com/getsentry/sentry-javascript/blob/9c131a04dec99fd9716d3b9e850082680f21e497/packages/browser/src/integrations/helpers.ts. Aaaah, it's this\n\nWe already patched it here https://github.com/getsentry/sentry-javascript/commit/aca120cfc650946ee7325b8761657cedca8d09f9\nTo be released this week :). @nomadtechie you have \"pause on caught exceptions\" turned on, and there's a reason why we put that code inside try/catch block :)\nDo you have a repro-case that I could use to take a look at this anyway?. That is correct and intended behavior. There's no way around it if we want to provide console API as a part of the breadcrumbs.\nIf you want to see the source of the console logs, you have to either blackbox raven.js (if its not part of the breadcrumb) - https://gist.github.com/paulirish/c307a5a585ddbcc17242\nOr turn off console integrations if it's bundled, see: https://github.com/getsentry/sentry-javascript/issues/1307#issuecomment-423479337 (note my last comment as well)\nCheers!. We are gathering all the patches and will release Tomorrow or Thursday. Definitely not on Friday :P. @josephfarina can you provide a direct link to this event in the Sentry?. @josephfarina could you paste original https://sentry.io/ link (not publicly shareable one)? I have an access as an employee, so I can actually verify your issue :). Are you using any Promise polyfill or additional async library? This issue happened because there was no reason attribute available on the rejected promise. Which means either it wasn't a Promise, but rather a fetch call (which breadcrumbs show) and or you somewhere reject it (or use throw) with something other than Error object.\nCould you give our new SDK version a try once we release 4.0.6? We landed a patch to handle similar scenarios here https://github.com/getsentry/sentry-javascript/pull/1587 which should help you (just need to wait for it to be released, hopefully still this week).. Closing due to inactivity.. https://docs.sentry.io/platforms/javascript/?platform=browser#removing-an-integration\njs\ninit({\n  dsn: '__YOUR_DSN__',\n  integrations (integrations) {\n    return integrations.filter(integration => integration.name !== 'ReportingObserver');\n  }\n})\nThat'll help :) Cheers!. I can reproduce the issue. Will try to fix it asap.. @qtiki what happens is that getDsn is called on the object returned by getCurrentHub.\nHubs are stored on either domain (when using node and server handlers) or on global object, which changes from env to env.\nIn your specific case, getGlobalObject returns global first, which is node's global object, but then, when you initiate browser-env, it creates window object, which is then used by getGlobalObject instead (which contains no Hub, as it was attached to global).\nCan you change getGlobalObject function in node_modules/@sentry/utils/misc.js to always return global and let me know if that helped? Just as a quick test.. Rushing never pays off... fixed. -_-. I can see that you're using http polling in your code. Can you provide some minimal repro-case that I could use to debug this issue?. I created a simple codebase that utilize socket-io and @sentry/node only and despite letting it run for few minutes and gathering hundreds of breadcrumbs, I wasn't able to reproduce it. I'll be more than happy to take a look at it if you provide a minimal reproducible scenario.\n```js\n// server.js\nvar app = require(\"express\")();\nvar http = require(\"http\").Server(app);\nvar io = require(\"socket.io\")(http);\nsetInterval(function() {\n  io.emit(\"event\", { some: \"data\" }); \n}, 1000);\nhttp.listen(3000);\n```\n```js\n// client.js\nrequire(\"@sentry/node\").init({\n  dsn: \"https://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  debug: true,\n  beforeBreadcrumb(breadcrumb) {\n    console.log(breadcrumb); \n    return breadcrumb;       \n  }\n});\nrequire(\"socket.io-client\")(\"http://localhost:3000\", {\n  transports: [\"polling\"]\n}).on(\"event\", (data) => console.log(data));\n```. Perfect, thanks @darkobits. I'll investigate it.. @gaastonsr you do as the second argument :) https://docs.sentry.io/learn/filtering/?platform=browser#before-send\njs\nSentry.init({\n  dsn: \"DSN\",\n  beforeSend: (event, hint) => {\n   if (IS_DEBUG) {\n     console.error(hint.originalException || hint.syntheticException);\n     return null; // this drops the event and nothing will be send to sentry\n   }\n   return event;\n  }\n});. I know it's not perfect, but it's a tradeoff we had to make. We cannot control source code of users apps, and we're not able to retrieve original fetch method declaration either.\nYou can go around this manually using custom integrations though:\n```js\nimport { init } from '@sentry/browser';\nclass CustomFetchIntegration {\n  install() {\n    // put code from this method here and remove native detection\n    // https://github.com/getsentry/sentry-javascript/blob/72a8bce6e500068206674c76835ea7b4154872a4/packages/browser/src/integrations/breadcrumbs.ts#L185\n  }\n}\ninit({\n  dsn: 'YOUR_DSN',\n  integrations: [\n    new Sentry.Integrations.BreadcrumbIntegrations({ fetch: false }),\n    new CustomFetchIntegration()\n  ]\n});\n```. We supported this use-case in old SDK, however, in v4, we're prioritizing API and docs unification as the major thing. And unfortunately, we are not able to provide this functionality in Python SDK for example. We can put some logger warning in there though.\njs\nif (typeof finalEvent === 'undefined') {\n  logger.warn('`beforeSend` method has to return `null` or a valid event');\n}. Looks nice, thanks!. @orestisioakeimidis we are still tracking some memory issues on Node 6 (current code is here https://github.com/getsentry/sentry-javascript/pull/1795/ ). > And we can't go back to previous Raven version due to CDN issues ...\n@Nabellaleen what issues exactly?\nDocs on scopes: https://docs.sentry.io/learn/scopes/?platform=browser\n\nsetExtra might be the workaround, but you need to clear extra, that is annoying.\n\nYou don't need if you use withScope.\n\nI suggest wrapping Sentry in a client so you can set tags, userContext etc as you send the error.\n\nYou can still achieve this with mentioned withScope with ease.\nThere're a lot of reasons why we changed API. But it basically allows us to use event processors and handle states more efficiently in complex apps.. I believe main issue was resolved. Feel free to let me know if it should be reopened.. You can if you use promises the client directly, as we return async function from capture calls internally \u2013 https://github.com/getsentry/sentry-javascript/issues/1449\n\nIf captureException accepted a scope parameter!\n\nWe've been there already and it was very hard to maintain and extend.\n\nThere're a lot of reasons why we changed API. But it basically allows us to use event processors and handle states more efficiently in complex apps.. Just verified it, and everything looks fine.\n\n\nCan you provide a reproducible case I could use to debug this?. @cjmaio @nathany I reproduced the issue, and I'm almost certain that you set devtool in webpack config to either eval, eval-source-map or cheap-eval-source-map. Is this correct?\nIf so, then everything is executed within large eval statement, which prevents script from reporting a correct error.. Thanks for letting me know! Cheers! :). @nathany not yet, as there's open issue for this in Chrome (that's why it's working in Firefox/Safari).\nhttps://github.com/webpack/webpack/issues/5681\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=765909. https://github.com/getsentry/react-native-sentry is the only SDK that provides support for React native now. Please direct your question there. Thanks!. It's not that simple. I described it in here https://docs.sentry.io/clients/node/typescript/. > Another reason: bundling application into single file on node side practically never happens, usually application is executed without bundling anything\nIt happens a lot in serverless environments :)\nEverything you want to do can be easily achieved with:\njs\ninit({\n  integrations: [new Sentry.Integrations.RewriteFrames({\n    iteratee: (frame) => ({\n      ..frame,\n      filename: frame.filename.startsWith('/') ? `app:///${path.relative(root, frame.filename)}` : frame.filename;\n    })\n  })]\n})\nUsing basename itself worked fine for us since we introduced support for node source maps, that's why I ported it here in the same way.. Agree with root part. I'll change that. Aand no, RewriteFrames is not enabled by default, it's a \"pluggable\" integration. Thanks for the suggestion. No, app:/// is mapped to ~/, but they are not equivalent, so we have to use app:///. You can already achieve this using custom iteratee, I don't want to pile up more and more options.. Merged manually. There should be no reason ever to know that, as we attach our handlers synchronously.\nI was able to catch an error with the code above:\n\nCan you provide a repro-case which I could use to debug this issue?. It should be fine in this case. As long as you won't call init, we won't be able to capture exceptions.\nI copied your repro-case and was able to catch both errors locally. Is this issue still relevant or can I close it?\n\n. Thanks! However, as I mentioned, main error handlers are attached synchronously, so there\u2019s no real reason to return a promise to be honest :). @egor-sorokin you mean Angular4/5? If so, did you specify a correct provider as per our docs describe it? https://docs.sentry.io/platforms/javascript/angular/\nI was able to get everything working with this sample code from ng init\n```js\nimport * as Sentry from \"@sentry/browser\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule, ErrorHandler } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\nSentry.init({\n  dsn: 'http://example@example.com/123'\n});\nexport class SentryErrorHandler implements ErrorHandler {\n  handleError(err: any): void {\n    Sentry.captureException(err);\n  }\n}\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [{ provide: ErrorHandler, useClass: SentryErrorHandler }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n. @egor-sorokin can you take a look at our old plugin code and try to \"port\" it to your project? https://github.com/getsentry/sentry-javascript/blob/master/packages/raven-js/plugins/angular.js#L12-L49\nIt should be rather straightforward. We don't document Angular 1.x anymore, as there are not many reports of people using it. We may need to do it though, if there are issues like the one mentioned above.. It supposes to be fatal \ud83d\ude05\nSee: https://github.com/getsentry/sentry-javascript/blob/6fbeff9a5e0b564f4e35e5a2ea5e0b11a4edacb5/packages/types/src/index.ts#L26-L41. @ryanbraganza it's because breadcrumbs allow for critical level. fatal is mostly for process-crashing exceptions in node. We should probably create a subtypes for event/breadcrume one day.. @ryanbraganza I updated it manually and had to leave both fatal and critical to make it unified with new SDK (just to not confuse people). Left an appropriate comment, so that VS Code and other IDEs can show them instantly to people - https://github.com/getsentry/sentry-javascript/commit/14da010dd318a71f1f063637c544f845c7dac8c1#diff-1056ddce6c161939983b84b5363a003fR330\nThanks for reporting the issue!. Merged manually. @htulipe whoops, it was there in the old docs \u2013 https://docs.sentry.io/clients/javascript/integrations/react/#expanded-usage \ud83d\ude05\nFixed it \u2013 https://github.com/getsentry/sentry-docs/pull/840\nThanks!. It's correct. NodeClient returns the promise if you interact with it directly (more advanced cases with custom clients mostly).\nIf you're using @sentry/node as a standalone SDK though, all calls are done through @sentry/minimal internally, which is documented correctly as well - https://getsentry.github.io/sentry-javascript/modules/minimal.html#captureexception\nRegarding your second question, we already have it documented: https://docs.sentry.io/learn/draining/?platform=browser\nCheers!\n. I'm working on getting all integration tests running on IE10/11 as we speak. Once I finish that, we'll patch all incompatibilities.. @JustinTRoss yes, everything is fixed in 4.1.0. See our changelog: https://github.com/getsentry/sentry-javascript/blob/master/CHANGELOG.md#410 :)\n\n[browser] test: Fix all integration tests in IE10/11 and Android browsers. @JustinTRoss raven-js always supported IE10/11, and there should be no issues there. @adrlen it should work in the exact same way. Can you:\na) turn on debug mode debug: true and see if there are any logs regarding filtered events?\nb) use snippet below to get event data that should be dropped but was sent through anyway?\n\njs\nSentry.init({\n  beforeSend(event) {\n    console.log(JSON.stringify(event, null, 2));\n    return event;\n  }\n})\nThanks!. Closing due to inactivity. Feel free to reopen if it's still relevant.. Sounds like a useful integration. I'll mark it as a feature and leave open until we have some spare time to tackle it.. Closed by https://github.com/getsentry/sentry-javascript/pull/1624. Thanks! Fixed linter issue and merged manually.\nhttps://github.com/getsentry/sentry-javascript/commit/b55d70e2e3e025d69a3a3a9626603b66d126a136. That's so embarrassing... \ud83e\udd26\u200d\u2642\ufe0f fixed in #1627 . Travis is not playing nice today with me... I'll have to retrigger the CI.. Hey @mike131, please see:\nhttps://docs.sentry.io/platforms/javascript/#eventprocessors\nhttps://docs.sentry.io/learn/filtering/?platform=browser\nhttps://docs.sentry.io/learn/configuration/?platform=browser#before-send\ntl;dr\njs\nSentry.init({\n  dsn: '__DSN__',\n  beforeSend: function (event, hint) {\n    if (hint.originalException && hint.originalException.type !== 'ReferenceError') {\n      return null;\n    }\n    return event;\n  }\n})\nIf you need more usage related help, please reach to our support on Sentry's forum instead - https://forum.sentry.io/\nCheers!. They are exactly the same, we just didn't document them just yet :) (whitelistUrls, blacklistUrls, ignoreErrors)\nsee: https://github.com/getsentry/sentry-javascript/blob/50918f98b09662f5000bdcfb6341187b3e97f66f/packages/core/src/interfaces.ts#L30-L131 for common options + https://github.com/getsentry/sentry-javascript/blob/50918f98b09662f5000bdcfb6341187b3e97f66f/packages/browser/src/backend.ts#L13-L27 for browser-specific ones. @reintroducing ignoreUrls === blacklistUrls and as for includePaths it's not available anymore, as we have eventProcessors for cases like this. See: https://docs.sentry.io/learn/filtering/?platform=javascript and https://docs.sentry.io/platforms/javascript/#eventprocessors. Right now it'd be kinda \"more complex than I'd like it to be\", but we already merged a \"rewriteFrames\" integration, which will make it very easy. It'll be released before Friday this week :)\n``js\nSentry.init({\n  integrations: [new Sentry.Integrations.RewriteFrames({\n    iteratee: function (frame) {\n      // check for paths here and override frames, eg. (1:1 copied from raven-js)\n      // https://github.com/getsentry/sentry-javascript/blob/50918f98b09662f5000bdcfb6341187b3e97f66f/packages/raven-js/src/raven.js#L1708-L1717\n      return frame;\n    }\n  })]\n}).rewriteFrames` has been already released, so let me close this :). @reintroducing we don't have docs for pluggable integrations just yet, but code should be straightforward enough to read through :) https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/pluggable/rewriteframes.ts\nAnd here's your example:\njs\nSentry.init({\n  integrations: [new Sentry.Integrations.RewriteFrames({\n    iteratee: function (frame) {\n      if (frame.filename) {\n        frame.in_app = /https?:\\/\\/d2yt77z1f5bzb8\\.cloudfront\\.net/i.test(frame.filename)\n      }\n      return frame;\n    }\n  })]\n})\nProsz\u0119 bardzo :). I can confirm that it's an issue when working with express. I'll take care of it this week.. @samholmes because of pipeline-like nature of Express (its middlewares), a user has to pass the scope through all the pipes and carry it over with the request. Otherwise, there's no way to isolate them from each other.\nHere's how to work with custom data in Express.js:\n```js\napp.use(Sentry.Handlers.requestHandler());\n// Set any data for all the requests\napp.use((req, res, next) => {\n  Sentry.getHubFromCarrier(req).configureScope(scope => {\n    scope.setTag('process_name', 'webserver')\n    scope.setExtra('whatever', 'you-need');\n  });\n  next();\n});\n// set data per endpoint\napp.get(\"/foo\", req => {\n  Sentry.getHubFromCarrier(req).configureScope(scope => {\n    scope.setTag(\"foo\", \"my-value\");\n  });\nthrow new Error(\"foo!\");\n});\napp.use(Sentry.Handlers.errorHandler());\n```\nAlso, one thing you have to remember is that if you want to use captureMessage/captureException and preserve your data, you also need to call them on the requests hub, Sentry.getHubFromCarrier(req).captureMessage(\"foo\");\nWe'll make sure to document it better. Also we'll release 4.1.0 this week, and then global\njs\nSentry.configureScope(scope => {\n    scope.setTag('process_name', 'webserver')\n})\nWill work as well :). https://github.com/getsentry/sentry-docs/pull/447. and https://github.com/getsentry/sentry-javascript/pull/1637. @samholmes ignore my previous comments. We fixed everything internally and starting 4.1.0 (to be released today or tomorrow), everything will \"just work\" :). Hey, just initialization itself will attach all necessary handlers, you don't need to do anything else.\njs\nSentry.init({ dsn: '__DSN__' }). Can you provide a repro-case which I could use to debug this?. Closing due to inactivity. Feel free to reopen if it's still relevant.. Nah. Hey @devpreview, source maps are working correctly. It's just that Console API is wrapped by Sentry to provide you with the breadcrumbs in your events. There's, unfortunately, no known ways to provide original console calls information (line/column/file).\nTo turn them off:\njs\nSentry.init({\n  integrations: [new Sentry.Integrations.Breadcrumbs({ console: false })] \n});\nhttps://docs.sentry.io/platforms/javascript/#removing-an-integration\nhttps://docs.sentry.io/platforms/javascript/default-integrations/#breadcrumbs\nCheers!. js\nSentry.configureScope(scope => scope.addEventProcessor(event => ({\n  ...event,\n  environment: 'something'\n})))\nor in ES5:\njs\nSentry.configureScope(function (scope) {\n  scope.addEventProcessor(function (event) {\n    event.environment = 'something';\n    return event;\n  });\n});\nCheers!. Right, sorry \ud83d\ude05. Updated, rebased and merged manually. Thanks @steelbrain! https://github.com/getsentry/sentry-javascript/commit/fdb64e21f9852cc7f5cbaaa9d8e7933c121591f5. Can you provide a link to the event in Sentry?. It's very hard to tell what went wrong with no access to the codebase itself. Based on the event above, there was a http request that errored out (400 response code), which rejected some kind of promise (see: unhandledPromiseRejection:true extra) - (can't tell if it was native promise or some custom http library).\nHowever, the problem here is that I'm almost certain that the shape of the error that was used in rejection handler was not standard/malformed, as it didn't even contain standardized message attribute, thus Error: <no message> in the event data.\nI'd try to investigate what and how is triggering and handling errors to /exec/:id/start endpoint and go from there.. Closing due to inactivity. Feel free to ping me if this still needs to be reopened. Cheers!. Fixed in https://github.com/getsentry/sentry-javascript/pull/1644\nThanks for the PR anyway! :). @jlison it is used on the main Node's page \u2013 https://docs.sentry.io/platforms/node/ :)\njs\nconst Sentry = require('@sentry/node');\nin commonjs is equivalent of\njs\nimport * as Sentry from '@sentry/node';\nin ESM.. Thanks @ghostd. @leth answer is in the issue linked above. Cheers!. Correct. See: https://github.com/getsentry/sentry-javascript/blob/6c93dc1243f15801b93c35233671d277fb7ae420/packages/types/src/index.ts#L159-L185. > but I still get lot of noise in sentry\nWhat exactly?\n\nIs there any way to disable them up ?\n\nYou did exactly how it should be done:\njs\ninit({\n  dsn: 'DSN',\n  integrations: function (integrations) {\n    return integrations.filter(i => {\n      return i.name !== 'GlobalHandlers' && i.name !== 'ReportingObserver';\n    })\n  }\n})\nor just\njs\ninit({\n  dsn: 'DSN',\n  defaultIntegrations: false\n})\nIf you want to disable all of them.. Correct, however, those are \"additional integrations\", defaults are always installed, unless you pass defaultIntegrations: false.. It's always better to filter-out unwanted defaults instead of overriding them all. This way, you'll get any new defaults if we add some in new releases without doing anything.\nIn your case it'd be:\njs\ninit({\n  dsn: 'DSN',\n  integrations(integrations) {\n    // get all integrations\n    return integrations\n      // remove `GlobalHandlers`\n      .filter(i => i.name !== 'GlobalHandlers')\n      // override `ReportingObserver` with custom config\n      .concat(new Sentry.Integrations.ReportingObserver({\n        types: ['crash'],\n      }))\n  }\n}). @Ashish-Bansal \njs\ninit({\n  dsn: 'DSN',\n  integrations(integrations) {\n    // get all integrations\n    return integrations\n      // remove `GlobalHandlers`\n      .filter(i => i.name !== 'GlobalHandlers')\n      // override `ReportingObserver` with custom config\n      .concat(new Sentry.Integrations.ReportingObserver({\n        types: ['crash'],\n      }))\n  }\n})\non itself will be sufficient, as it gets all default integrations as an argument, so you dont have to defaultIntegration:false if you use function instead of an array.. We were thinking about an approach like this but came to the conclusion that the most common scenario is adding some integrations on top of defaults (eg. some JS framework integration), therefore this should be the easiest to express. integrations: [new SomeIntegration()] is the most straightforward way and allows us to add more defaults in the future.\nIf we'd go with integrations: [] == no integrations at all, a lot of users could miss out on new Sentry features, where defaultIntegrations: false is very explicit, and usually used only for bundled, stand-alone instances, like own error-reporter for embedded widgets etc.\nThanks for comments anyway, always appreciate a good feedback! :). That's exactly how you do this.. https://docs.sentry.io/platforms/javascript/default-integrations/#reportingobserver\nhttps://developers.google.com/web/updates/2018/07/reportingobserver\nI can confirm that indeed, you have an intervention on your page (linked in the issue above):\n\nThe message is not always available, as it's very fresh API and it's not implemented fully correctly everywhere yet. It'll get better with time and without any required actions from the end-user, which is what we want.\nYou can either fix issue above, ignore it (not recommended, as it'll ignore all browser reports with unidentified messages as well) or turn of this default integration with:\njs\ninit({\n  integrations(i) {\n    return i.filter(x => x.name !== 'ReportingObserver')\n  }\n})\nHope that helps. Cheers!. In old raven-js you can use dataCallback or ignoreErrors configs - https://docs.sentry.io/clients/javascript/config/\nIn new SDK, beforeSend - https://docs.sentry.io/learn/filtering/?platform=browser. @egor-sorokin you want both instances to track the same errors?\nOr one instance to track globally occurring errors and one to be used as a stand-alone thing?. As integrations live on clients themselves now, you can do new BrowserClient({ integrations: [new Sentry.Integrations.GlobalHandlers()] }) which will attach and install global error handlers. Be aware that it'll capture all global errors though, which as already mentioned may have some security implications.. @mmcardle you can also achieve this without overriding global handlers\njs\nSentry.init({\n  beforeSend(event, hint) {\n    // do your stuff here...\n    // hint.originalException is `err` that you'd get in your original `unhandledrejection`\n  }\n})\nor\njs\nSentry.configureScope((scope) => {\n  scope.addEventProcessor((event, hint) => {\n    // do your stuff here...\n  })\n}). Unfortunately rejecting a promise with Request object instead of standard PromiseRejection is not a common scenario and we cannot predict it.. The initially reported issue is resolved I guess, so let me close it. Feel free to ping me if this still needs to be reopened. Cheers!. We doesn't officially support IE9, so I cannot confirm nor deny what part of SDK works there, but if this change will help, then sure, it's reasonable change anyway :). Unfortunately never heard of it and cannot find any useful info myself as well :(. Thanks. Good luck finding the issue!. @kochis yes, node has now it's own section and is a separate platform - https://docs.sentry.io/platforms/node/express/. onFatalError is only meant to perform a cleanup before we exit the process, not fully prevent it. This is how Node.js is behaving by default (always crash the process and let it restart).\nIf you want to have a complete control over it, you have to turn off this integration and add handler yourself.\n```js\nSentry.init({\n  dsn: 'https://key@mysentry.mycompany/2',\n  integrations(integrations) {\n    return integrations.filter(integration => integration.id !== 'OnUncaughtException')\n  }\n});\nglobal.process.on('uncaughtException', (error) => {\n  const hub = Sentry.getCurrentHub();\n  hub.withScope(async (scope) => {\n    scope.setLevel('fatal');\n    hub.captureException(error, { originalException: error });\n  });\n});\n``. @dj-hedgehog it should beintegration.name !== 'OnUncaughtException'notintegration.id !== 'OnUncaughtException'`. Second format is still unreleased, sorry about that \ud83d\ude05. I tried to repro this issue using local simulator with as close of a setup as possible with no luck.\n\nThere's unreleased commit that fixes this behavior for old IE (https://github.com/getsentry/sentry-javascript/commit/f48596e9806563fa119a3c9c09b49bb87784300e) maybe it can help here as well.\nWould that be possible to patch your local bundle and test it out with mentioned update?\n. Thanks!. @felipeardila1010 it's Apple's XCode Simulator \u2013 https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/iOS_Simulator_Guide/GettingStartedwithiOSSimulator/GettingStartedwithiOSSimulator.html. Fixed in 4.1.0\n\n[node] fix: Dont wrap native modules more than once to prevent leaks\n\nhttps://github.com/getsentry/sentry-javascript/blob/master/CHANGELOG.md\nCheers! :). The initially reported issue is resolved I guess, so let me close it. Feel free to ping me if this still needs to be reopened. Cheers!. @aguynamedben we'll release it Today/Tomorrow after merging some outstanding code. It'll definitely be done before the end of the week.. Can you provide a repro case for this issue? I tested it locally and everything works just fine.\nCode:\n```js\nimport * as Sentry from \"@sentry/node\";\nimport * as express from \"express\";\nconst app = express();\nSentry.init({\n  dsn: \"http://example@example.com/123\",\n  debug: true,\n  beforeSend(event) {\n    console.log(event);\n    return event;\n  }\n});\nSentry.configureScope((scope: any) => {\n  scope.setTag(\"pm2_cfg\", \"ARSIPLUGIN_DEV\");\n  scope.setTag(\"node_env\", process.env.NODE_ENV);\n  scope.setTag(\"entity\", \"1234\");\n});\napp.use(Sentry.Handlers.requestHandler() as express.RequestHandler);\napp.get(\"/\", (req, res) => {\n  throw new Error(\"foo\");\n});\napp.use(Sentry.Handlers.errorHandler() as express.ErrorRequestHandler);\napp.use(\n  (\n    err: any,\n    _req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    if (res.headersSent) {\n      return next(err);\n    }\n    if (!err.status) {\n      err.status = 500;\n    }\n    const msg = ${err.status} ${err.message};\n    console.error(msg);\n    res\n      .status(err.status)\n      .type(\"txt\")\n      .send(msg);\n  }\n);\napp.listen(3000);\n```\nRun it with pm2 start ts-node -- app.ts and pm2 logs or just pm2 start ts-node --no-daemon -- app.ts to get stdout directly.. Modified my repro code to use your route (async, just mocked apiclient.request response, but it shouldn't matter at all:\n```js\nimport * as Sentry from \"@sentry/node\";\nimport * as express from \"express\";\nconst app = express();\nSentry.init({\n  dsn: \"http://answer@aasd.com/123\",\n  debug: true,\n  beforeSend(event) {\n    console.log(event);\n    return event;\n  }\n});\nSentry.configureScope((scope: any) => {\n  scope.setTag(\"pm2_cfg\", \"ARSIPLUGIN_DEV\");\n  scope.setTag(\"node_env\", process.env.NODE_ENV);\n  scope.setTag(\"entity\", \"1234\");\n});\napp.use(Sentry.Handlers.requestHandler() as express.RequestHandler);\nconst asyncRoute = async (\n  req: express.Request,\n  res: express.Response,\n  _next: express.NextFunction\n) => {\n  const r = await new Promise(resolve =>\n    resolve({\n      isSuccess() {\n        return true;\n      }\n    })\n  );\n  if (r.isSuccess()) {\n    // the following line will break because of that method name has a typo\n    res.json({ CURRENCY: r.getColmnIndex(\"CURRENCY\", 0) });\n  } else {\n    res.json({ CURRENCY: \"n/a\" });\n  }\n};\napp.get(\"/async\", asyncRoute);\napp.use(Sentry.Handlers.errorHandler() as express.ErrorRequestHandler);\napp.use(\n  (\n    err: any,\n    _req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    if (res.headersSent) {\n      return next(err);\n    }\n    if (!err.status) {\n      err.status = 500;\n    }\n    const msg = ${err.status} ${err.message};\n    console.error(msg);\n    res\n      .status(err.status)\n      .type(\"txt\")\n      .send(msg);\n  }\n);\napp.listen(3000);\n```\nAnd it still works \ud83d\ude05\n. Thanks! Ping me anytime you need some help. Cheers!. Please read an explanation here - https://github.com/getsentry/sentry-javascript/issues/1654#issuecomment-430125781. Can you provide your config and pattern/error that's failing the test?. Unfortunately, it's not enough to reproduce this issue, sorry about that.. @sacredwx @dannyshaw fix for this has been merged today https://github.com/getsentry/sentry-javascript/commit/3ce404b00a2d94cec34663ea158ac5954bbe0070\nThe issue was happening only when the error was thrown inside event listeners, as we incorrectly detect the source of the error.\nWill release it Today/Tomorrow.. Released as 4.4.0. Can you provide a repr-case with mongoose scenario please? I never used moleculer before.. @jansauer we are still missing some docs on Koa (I'll add them soon). In the meantime, can you test it out locally?\njs\napp.on('error', (err, ctx) => {\n  Sentry.withScope(scope => {\n    scope.addEventProcessor(async (event) => parseRequest(event, ctx.request))\n    Sentry.captureException(err);\n  });\n});\nYou can also see how parsing is implemented here https://github.com/getsentry/sentry-javascript/blob/414647c57da47570fece1b907ae9747320331f8d/packages/node/src/handlers.ts#L148-L212 as Koa may use some other attributes than express (although afair, it's mostly consistent).\n(requires version 4.2.2, as we exported helper function there to make it easier for developers).. @gregwym this should work just fine, although I'm not sure about Koa's internals tbh.\nI'd try to create a very barebone app with this handler and try to send some requests to make sure it preserves correct order of push/pop scope calls when async await is introduced.. How exactly is it broken? Can you provide some config? logs? repro case?. Should be fixed in 4.2.2. Thanks for confirmation @AndreasGassmann!. There's HTTP Request interface available which you can use to send any information of this kind - https://docs.sentry.io/clientdev/interfaces/http/?platform=javascript\n```js\nfunction someRequestHandler(err, req, res, next) {\n  Sentry.withScope(scope => {\n    scope.addEventProcessor((event) => {\n        const request = event.request || {};\n      request.url = request.url || global.location.href;\n      request.headers = request.headers || {};\n      request.headers['User-Agent'] = 'anything goes here';\n  return {\n    ...event,\n    request,\n  };\n});\n\nSentry.captureException(err);\n\n});\n}. If you provide headers['User-Agent'] itself, Sentry should parse all the tags on its own. Is this not the case for node? I'm pretty sure it should work.. I just verified, and even in @sentry/node, you can easily override it for testing purposes and it's parsed just fine.\njs\nSentry.init({\n  dsn: \"https://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  beforeSend(event) {\n    event.request = {\n      url: \"http://something.com\",\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\"\n      }\n    };\n    return event;\n  }\n});\n\nNote that url is required when using Request interface.\n. We assume that there're no user-agent data for node by default, as it's not a common scenario.\nIf you really need context data like the one above, you can make it happen by changing event.platform to be javascript instead of node (keep in mind that it can affect source-maps resolution and few other things, so it's better to either stick to tags or only use it when you know that some things may look \"off\")\nhttps://github.com/getsentry/sentry/blob/c9be6ccf366e716ccdd4cc4f9e5b1f94094d732a/src/sentry/lang/javascript/plugin.py#L17-L18. @Turbo87 it's broken for external contributors, as some of our hooks talk through github tokens that are not accessible to people outside organization. Hey @benalman-toast! Unfortunately, we have a commonly agreed upon API, for all our supported languages. This change would require an update to Rust, C, Pyhon, .Net, PHP and all our other SDKs and documentation.. (whoops.)\nIt's fine in JS or Python, but overloading in Rust is not that nice though. We are trying to be as simplistic as possible, with giving the end user tools to create their own utilities if necessary.\nWe will still probably need to shave down some APIs, as bundle size is crucial nowadays, but we are already not shining in this part \ud83d\ude05\nDon't want to sound too picky, but it can already be written as a one-liner with for (const key in errorInfo) scope.setExtra(key, errorInfo[key]); (I know it doesn't check for hasOwnProperty but in most cases, it's data you have control over anyway.\nAlso, in your case, you probably want to limit the additional data to only current scope, so it'd be:\njs\ncomponentDidCatch (error, errorInfo) {\n  this.setState({ error, errorInfo })\n  Sentry.withScope(scope => {\n    for (const key in errorInfo) scope.setExtra(key, errorInfo[key]);\n    Sentry.captureException(error);\n  });\n}. @antoinerousseau sorry for taking that long. It's because your componentStack matches our default data sanitizers \ud83d\ude05\nhttps://github.com/getsentry/sentry/blob/0f600d86646a4d6a51390634121d4004e01f41c3/src/sentry/constants.py#L168-L171\nAuthenticated string matches auth substring.\nGo to your project's privacy settings in Sentry and turn off default scrubbers.\n\n. Hey!\n\nOr maybe someone could provide meaningful explanation for such a behaviour?\n\nYes, we have a very concrete explanation behind this. The reason for this is that we decided, that the main scenario is a \"fire and forget\" type of behavior, thus it's not an async method. Internally, however, we do have async API which we use ourselves, so we're able to act appropriately based on the server response.\n\nThe interface for the main Sentry object (import Sentry from \"@sentry/node\") returns the event UUID, and runs asynchronously with no callbacks (as far as I can tell)\n\nThat's correct.\n\nThe interface for NodeClient (import { NodeClient } from \"@sentry/node\") returns a promise that resolves to a SentryResponse\n\nThat's also correct.\n\nMy personal preference would be to have the main Sentry object return the responses in the same way as the NodeClient, so that I can make sure all sentry calls complete before shutting down the app.\n\nWe cannot do this, as in the simplest scenario, the user shouldn't interact with the report requests, as it can make it fragile (where Sentry is used in critical scenarios, thus shouldn't be modified in any sense).\nWe still want to provide an \"advanced mode\" for anyone willing to play with the client directly though.\nBecause of that, the main Sentry class doesn't have an access to the request data (as it didnt come from the server yet), but UUID only.\nUUID is used to display Report Dialog (https://docs.sentry.io/clients/javascript/usage/#javascript-user-feedback) which can provide additional information for the developers.\ntl;dr - there's a reason about this and we'll most likely don't change that anytime soon \nCheers!. Silly me. Thanks for catching that! I merged your first PR :). Thanks @Turbo87!. Thanks!. @sentry/core is not requiring logger relatively, but from @sentry/utils package. Just installed fresh @sentry/browser module and verified it:\n\nCan you delete all node_modules and reinstall the packages? Maybe npm left some older versions of sub dependencies? (it shouldnt happen, as we use exact versions, but hey, it's npm :p). Thanks! :). @ollyfg there's an official API for draining events for shutdown process - https://docs.sentry.io/learn/draining/?platform=browser. Fixed in https://github.com/getsentry/sentry-javascript/pull/1703\nWill be released in the next patch. Cheers!. @uded use debug: true in your init call and see if there's maybe an infinite loop of dropped events somewhere. Also, when you do that, paste the output of a whole console here, as this will tell us what integrations are successfully installed.. Closing due to inactivity. Please feel free to reopen if it's still relevant.. Can you paste your config? (Init call). Fixed in https://github.com/getsentry/sentry-javascript/pull/1732. No, just remove Breadcrumbs integration - https://docs.sentry.io/platforms/javascript/#removing-an-integration :)\njs\nSentry.init({\n  dsn: 'https://e48ff4f83fb34d579a0ece3c3cdb32d3@sentry.io/1',\n  integrations(integrations) {\n    return integrations.filter(integration => integration.name !== 'Breadcrumbs');\n  }\n});. @pljeskavica right, thanks for catching that! PR https://github.com/getsentry/sentry-docs/pull/568. I can reproduce the issue locally. We can fix it by using smaller and way faster https://github.com/WebReflection/flatted instead, which doesn't choke on stringifying a google maps object (already tested it locally and it works).. Apparently, it's not that easy to just swap them around, as we have to preserve information about NaN, undefined and have a custom Error serializer.\nIs anyone able to provide a dataset that our SDK chokes and I could use it in test cases?. @AdriVanHoudt I tried with no luck.\n```html\n<!doctype html>\n\n\n\n\n\n\nHello\n<script>\n  Sentry.init({\n    debug: true,\n    dsn: \"https://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  });\n\n  console.warn('foo', 1, $('button'));\n\n  Sentry.captureException(new Error('f00'));\n</script>\n\n\n\n``. We decided that in the4.3.1` by default, we will serialize all argument objects just to 2 levels deep. This means that something like:\njs\nconsole.log(\n  'a',\n  1,\n  ['b', 2, { foo: 'foo' }],\n  { bar: 42 },\n  { baz: [1, 2, 3] }\n)\nWill become:\njs\nconsole.log(\n  'a',\n  1,\n  ['b', 2, '[Object]'],\n  { bar: 42 },\n  { baz: '[Array]' }\n)\nBreadcrumbs meant to be a very lightweight hints for developers what went wrong, and not be a fully-fledged data provider.\nIf someone wishes to get more data and know what he's doing (keep in mind that there's a payload limit), one can always use addEventProcessor and/or beforeBreadcrumb where it's hints have access to all raw arguments, eg.\njs\nbeforeBreadcrumb (crumb, hint) {\n  if (crumb.type === 'console') {\n    // hint.input === raw arguments passed to console calls\n    // do anything to them, parse, stringify, whatever\n  }\n  return crumb;\n}. Closed by https://github.com/getsentry/sentry-javascript/pull/1741 release to come Today. @AdriVanHoudt released in the newest version, would you mind giving it a try?. Fixed in recent releases. Please see: https://docs.sentry.io/enriching-error-data/context/?platform=browser#extra-context\n\nBe aware of maximum payload size - There are times, when you may want to send the whole application state as extra data. This is not recommended as application state can be very large and easily exceed the 200kB maximum that Sentry has on individual event payloads. When this happens, you\u2019ll get an HTTP Error 413 Payload Too Large message as the server response or (when keepalive: true is set as fetch parameter), the request will stay in the pending state forever (eg. in Chrome).. Changed to opt-in in recent releases. > Do I need anything else to make this work?\n\nNo, it should be all. Can you paste a working repro-case which i can use to debug this?. @RXminuS i can look into that if you're able to provide a repro case.. @huyl repro case pretty please. Duplicate: https://github.com/getsentry/sentry-javascript/issues/1720. Duplicate of https://github.com/getsentry/sentry-javascript/issues/1707\nI'll get this fixed soon.. > This is pretty easy to reproduce:\n\nInstall the above version of sentry\nThrow an error containing a reference to a DOM node using the DOM APIs:\nthrow new Error(document.querySelector(\"#cool\"));\n\n\nTried exactly this and cannot reproduce the issue.. Reopened so i wont lost this thread, as im out of office till January.. @buremba we fixed 2 important issues with decycle method in 4.5.4, you may want to give it a try - https://github.com/getsentry/sentry-javascript/blob/master/CHANGELOG.md#454. You can remove this integration with ease - https://docs.sentry.io/platforms/javascript/#removing-an-integration. In our experience, people don't want to be notified more than it's necessary. If we'd take any other data into consideration (eg. request payload or tags) for the exceptions that happened on the same line and was already logged, this could flood their account when high-load occurs or they're ddos'ed.\nThere's nothing that stops you from creating an event processor and implement custom behavior though, which was our main goal. Give the flexibility to hook into the system itself.. Main question was answered and we decided that it's a \"won't fix\". Feel free to reopen if still need any help. Cheers!. Correct. We are using TypeScript 3, however minimal version to make it compile is 2.4.. > Is my usage wrong?\nNo, it looks just fine. Can you provide a repro case which I can use to debug this?. Which is correct, because first two lines are logs, not exception throws :) you should see them as your last error breadcrumbs in our UI only.. https://docs.sentry.io/error-reporting/quickstart/\nhttps://docs.sentry.io/error-reporting/capturing/\nFor uncaught errors, you don't need to do anything else than just init call.. > So the integrations just capture those message as breadcrumbs but not create an error and I must call Sentry.captureException every time?\nYes, because it's a console log, not an exception, thrown error or rejected promise. Logs are logs, errors are errors. Console calls are rarely used in production, thus they are not captured in any way other than logged as breadcrumbs.\n\nIs there a way to use it need not change my previous code too much?\n\nWe will create console integration, which will change console into a reporter soon.. Unified with https://github.com/getsentry/sentry-javascript/issues/1716. Thanks @BlitZz96!. Or just Sentry.captureException(new FormValidationException(node, input)) if you don't need anything inside try block and just want to send custom error.. Main question was answered. Feel free to reopen if still need any help. Cheers!\n. @spobrien I'm not sure what you're actually trying to achieve. Can you please describe it more generically?\njs\ntry {\n  await handler();\n} catch (err) {\n  Sentry.withScope(scope => {\n    scope.setTag('eventName', name);\n    Sentry.captureException(err);\n  });\n}\nThis syntax will work just fine.. @spobrien there are pushScope and popScope methods that can be used to manually manipulate the stack, but it can get out of sync really easily without async handlers.\nUnfortunately without passing some data around it's very tricky to get your scenario working as expected. There has to be a place where it's stored and passed to us in the end.. @spobrien through node domains - https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L227-L236\nhttps://nodejs.org/api/domain.html. Cheers! Feel free to reopen or ask more questions if needed.. I don't use Angular on daily basis, so can you please provide a minimal repro-case that I can use to debug this? Thanks!. Closing due to inactivity. Please feel free to reopen if it's still relevant.\n. Related to https://github.com/getsentry/sentry-javascript/issues/1727\nLet's keep the conversation there so it's easier to track everything. Thanks!. I meant https://github.com/getsentry/sentry-javascript/issues/1449. https://docs.sentry.io/enriching-error-data/context/?platform=browser\nhttps://docs.sentry.io/enriching-error-data/scopes/?platform=browser\njs\nSentry.withScope(scope => {\n  scope.setExtra(\"my-extra\", \"my value\");\n  scope.setLevel('warning');\n  Sentry.captureMessage('test');\n});\nCheers!. @Sija we had this API before and it was hard to extend and support at the times. We created a separate scope/hub concept, so that we can unify it across all supported languages (eg. right now, you can move between python, .net, rust, js, node, electron, without learning anything new). This also allows us to create more complex scenarios when needed and allow users for more custom integrations with a whole system.. Yes, you still can create multiple clients - https://docs.sentry.io/platforms/javascript/advance-settings/\nHowever, linking them to specific routes is more complex. We use domains internally and read current hub based on the current execution context - https://docs.sentry.io/platforms/node/express/\nYou'd need to utilize our parseRequest handler which is available on Sentry.Handlers.parseRequest and make use of https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L227-L237 and https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L269-L276 code to get it stitched together.. It'd require a lot of rewrite, but I'll leave this issue opened just in case we find some time to do this one day.. This is fixed in v4 of the SDK. Please update to the newest version.\nLet me know if you have any issues migrating to v4 and I'd be glad to help.\nCheers!. Yes, you can either use npm (https://docs.sentry.io/error-reporting/quickstart/?platform=browsernpm) or cdn (https://docs.sentry.io/error-reporting/quickstart/?platform=browser). Hey,\nIt's a duplicate of https://github.com/getsentry/sentry-javascript/issues/1449 please follow the thread there.\nCheers!. And https://github.com/getsentry/sentry-javascript/issues/1709. Are you using Private DSN by any change? \"something@something\"? If so, then it's deprecated since v8 of Sentry (v9 is the current one) and is not available on new SDKs.\nCopy a new DSN from https://sentry.io/settings/ instead.. I know, because raven-js supported old version of the DSN.\nPublic DSN: https://yourkey@sentry.com/projectId\nPrivate DSN: https://yourkey:yourpass@sentry.com/projectId\nIf there's a colon in your DSN, then it's private and you should use public one. Also you don't have to mask them, they are public :). Hmm... that's a strange one, as Beacon doesn't require authentication at all.\nIn the meantime, you can use Fetch transport instead.\njs\nSentry.init({\n  transport: Sentry.Transports.FetchTransport\n}). Original question was answered. Feel free to reopen if you still have more questions.. @getogrand feel free to help us out with a PR :). https://docs.sentry.io/enriching-error-data/breadcrumbs/?platform=browser + as someone already answered on the SO:\njs\nvar log = bunyan.createLogger({\n  name: 'myapp',\n  streams: [{\n  level: 'debug',\n  stream: {\n    write: function(record) {\n      Sentry.addBreadcrumb({\n        message: record.msg,\n        level: record.level\n      });\n    }\n  }]\n});. Original question was answered. Feel free to reopen if you still have more questions.. @gaterking thank you! It works like a charm. I tested it locally and calculated the diff:\n```\nno-compression:\nbundle.js 312.1kB => 263.5kB (-48.6kB, -16%)\nbundle.min.js 91.5kB => 66.3kB (-25.2kB, -28%)\ngzip:\nbundle.js 60.5kB => 54.6kB (-5.9kB, -10%)\nbundle.min.js 24.1kB => 21.4kB (-2.7kB, -11%)\n```\nCan you remove one outstanding comment from tsconfig?. Thanks! :). Thanks. What result did you got from reading and implementing https://docs.sentry.io/clients/javascript/sourcemaps/ ?. Thanks!. Duplicate of https://github.com/getsentry/sentry-javascript/issues/951 with some ideas in there.. We do reverse them in @sentry/browser as well, but in a more generic place - https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/parsers.ts#L61-L86\nThe thing is that we had to decide what to filter on. The origin of the error? Or the place where it was initiated? We chose later, as those are errors that user has control over.\nwhitelistUrl is in most cases used when someone embeds 3rd-party JS code and it lives it's own life, eg. some widgets, tracking, ads etc. In this cases, the only way to control them is indeed whitelisting/blacklisting (all frames will be coming from the library itself).\nIf you need to filter it in any other way, you can use beforeSend or addEventProcessor where you can check all frames for it's source.. Cheers! :). @pnewell in what place exactly? url tag in the Sentry UI, eg. here?\n\nIf so, there's no way in the SDK itself to set it automatically, but you can override both, request url and tag like so:\njs\n// preferably on every route change\nSentry.configureScope(scope => {\n  scope.setTag('url', document.location.href)\n});\nAnd if you need to override request parameters as well\njs\nSentry.init({\n  dsn: '__YOUR_DSN__',\n  beforeSend(event) {\n    event.request = event.request || {};\n    event.request.url = document.location.href;\n    return event;\n  }\n});. Main question was answered. Feel free to reopen if still need any help. Cheers!. @pnewell can you provide a link to the event itself? (I will be able to see it as a Sentry employee, so full link is fine). Closing due to inactivity. It's your local npm cli issue, not our specific package. Output from the install from now:\n```sh\n\nnpm i @sentry/browser --verbose\nnpm info it worked if it ends with ok\nnpm verb cli [ 'C:\\Program Files\\nodejs\\node.exe',\nnpm verb cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\nnpm verb cli   'i',\nnpm verb cli   '@sentry/browser',\nnpm verb cli   '--verbose' ]\nnpm info using npm@6.4.1\nnpm info using node@v8.12.0\nnpm verb npm-session 4c20ac39e0ae08c0\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2fbrowser 39ms (from cache)\nnpm timing stage:loadCurrentTree Completed in 289ms\nnpm timing stage:loadIdealTree:cloneCurrentTree Completed in 1ms\nnpm timing stage:loadIdealTree:loadShrinkwrap Completed in 4ms\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2fcore 11ms (from cache)\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2ftypes 13ms (from cache)\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2futils 15ms (from cache)\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2fminimal 12ms (from cache)\nnpm http fetch GET 200 https://registry.npmjs.org/@sentry%2fhub 16ms (from cache)\nnpm timing stage:loadIdealTree:loadAllDepsIntoIdealTree Completed in 93ms\nnpm timing stage:loadIdealTree Completed in 104ms\nnpm timing stage:generateActionsToTake Completed in 4ms\nnpm timing audit compress Completed in 17ms\nnpm info audit Submitting payload of 708bytes\nnpm timing action:extract Completed in 86ms\nnpm info lifecycle @sentry/browser@4.3.2~preuninstall: @sentry/browser@4.3.2\nnpm info lifecycle @sentry/browser@4.3.2~uninstall: @sentry/browser@4.3.2\nnpm info lifecycle @sentry/browser@4.3.2~postuninstall: @sentry/browser@4.3.2\nnpm timing action:unbuild Completed in 20ms\nnpm timing action:remove Completed in 29ms\nnpm timing action:finalize Completed in 5ms\nnpm timing action:refresh-package-json Completed in 51ms\nnpm info lifecycle @sentry/browser@4.3.2~preinstall: @sentry/browser@4.3.2\nnpm timing action:preinstall Completed in 1ms\nnpm info linkStuff @sentry/browser@4.3.2\nnpm timing action:build Completed in 2ms\nnpm info lifecycle @sentry/browser@4.3.2~install: @sentry/browser@4.3.2\nnpm timing action:install Completed in 5ms\nnpm info lifecycle @sentry/browser@4.3.2~postinstall: @sentry/browser@4.3.2\nnpm timing action:postinstall Completed in 7ms\nnpm timing stage:executeActions Completed in 327ms\nnpm timing stage:rollbackFailedOptional Completed in 1ms\nnpm timing stage:runTopLevelLifecycles Completed in 748ms\nnpm verb saving [ { name: '@sentry/browser', spec: '^4.3.2', save: 'dependencies' } ]\nnpm info lifecycle undefined~preshrinkwrap: undefined\nnpm info lifecycle undefined~shrinkwrap: undefined\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm info lifecycle undefined~postshrinkwrap: undefined\nnpm WARN foo@1.0.0 No description\nnpm WARN foo@1.0.0 No repository field.\n\nnpm timing audit submit Completed in 988ms\nnpm http fetch POST 200 https://registry.npmjs.org/-/npm/v1/security/audits/quick 989ms\nnpm timing audit body Completed in 1ms\n+ @sentry/browser@4.3.2\nupdated 1 package and audited 18 packages in 1.425s\nfound 0 vulnerabilities\nnpm verb exit [ 0, true ]\nnpm timing npm Completed in 2048ms\nnpm info ok\n```\nYou may try to:\n- remove all node_modules directories\n- clear your npm's cache npm cache clean\n- npm i @sentry/browser in newly initiated directory.. @liz282907 it seems that video is private\n\nCan you also provide your config and/or repro-case?. It works just fine \u00af_(\u30c4)_/\u00af\n\n. Closing due to inactivity.\n. What environment are you running this code in? Those are native Node.js modules and should always be available.. > Could this be related to the import method? If so, why does this library functioning depend on doing import * as Sentry?\nNo, and it doesn't. You destructured scope inside withScope call with { setExtra }, which makes it lose the correct context.\nChange your code to:\njs\n    withScope((scope) => {\n      Object.keys(info).forEach(key => {\n        scope.setExtra(key, info[key]);\n      });\n      scope.setExtra('window', {\n        height: window.innerHeight,\n        width: window.innerWidth,\n      });\n      scope.setExtra('body', {\n        height: body.clientHeight,\n        width: body.clientWidth,\n      });\n      captureException(error);\n    });\nand it will fix itself right away.\nCheers!. We never use deconstruction in the documentation for that purpose. It\u2019s a JS feature that will always break object/classlike behavior like this, thus I don\u2019t think it has to be mentioned anywhere tbh.. Correct, we realised this in our electron sdk, thanks for poining that out. Already merged. Will be released in the next patch version.. @icewind7030 can you provide a minimal repro-case which I can use to debug this? Including build, package.json and all required files?. @icewind7030 I reviewed the issue, and apparently Vue, during a build time is producing file references to its runtime without a relative path indicator (./ - see that ./src/main.js has it) which is how we distinguish between in-app and external frames. You can see a correct source of the issue when you toggle to a Full view.\n\nTo fix this, we'd need to include an edge case in the Sentry itself and from what I see, you are using on-premise instance (based on the url in your .sentryclirc file), which will take a while to patch.\nYour best bet for now is tracking issues through the full frames view.. Anytime. I'll try to get it fixed in main Sentry repo one day. Cheers!. TypeScript is hard.. Added tests around this to prevent issues like this in the future - https://github.com/getsentry/sentry-javascript/pull/1760. @munderwoods it's' already patched in the newest release. @stripathix as Daniel mentioned, neither \"use strict\" nor JSLint would help, as it's not a code issue.\nThe thing is that all of our libraries are written in TypeScript, thus they use its builtin polyfills for some language methods/syntax. We changed it, so that tslib, which is a library containing all those runtime polyfills is bundled only once, during a final build, instead of per-depencency basis as it used to be.\nTo make it more visually clear. Before it was something like (kinda):\nbrowser (bundled its own tslib) and has dependency on:\n  - core (bundled its own tslib)\n  - hub (bundled its own tslib)\n  - utils (bundled its own tslib)\nNow, we changed it so it's only done once:\nbrowser (bundled its own tslib) and has dependency on:\n  - core (references tslib from the main package)\n  - hub (references tslib from the main package)\n  - utils (references tslib from the main package)\nThis made a whole bundle smaller, as we removed tslib duplication.\nFor some strange reason, it worked for all our packages from mono-repo, but not for utils. And reference to tslib, which is generated fine (see @sentry/utils/dist), was not transcribed to reference parent package instance as it should, despite it being compiled by TS compiler just fine.\nAnd yes, we have TSLint, Prettier, use strict (see @sentry/browser/dist) and none of it helped :). @GuusDeGraeve well, that's not something that should ever happen... fixed in 4.6.1 and added a very straightforward test for it so it won't happen (hopefully!) again.. Use console.error directly instead. Your config will create infinite loop here. Also take Sentry.init outside of constructor if possible. \njs\n@Injectable()\nexport class SentryErrorHandler extends ErrorHandler {\n    handleError(error) {\n        const err = error.originalError || error;\n        if (SOME_DEV_MODE) console.error(err);\n        Sentry.captureException(err);\n        throw error;\n    }\n}. @Oikio @mlakhara would it be possible to provide a repro-case by one of you? I'm not working with Angular on daily basis and it'd take me quite a long time to even reproduce this.\nThanks!. @mlakhara @Oikio so the issue is that Angular attaches A LOT of additional data to it's error object (over 2 millions characters when stringified - yup, 2 millions).\nThe way around it now, is to remove it from the breadcrumbs, so we will remove it, but still have an error in the crumb. This way we won't have to serialize it.\njs\nSentry.init({\n  beforeBreadcrumb(crumb) {\n    if (crumb.category === \"console\") {\n      for (const arg of crumb.data.extra.arguments) {\n        delete arg.ngDebugContext;\n        delete arg.ngErrorLogger;\n      }\n    }\n    return crumb;\n  }\n});. Still need to write some tests around it though.. @abraxxas can you help me reproduce this issue? How exactly are you triggering this memleak?\nI tried your description with no luck, it just produces stats events, never leak one.. @abraxxas confirmed. Node 10 + ~300req for each resource does the job. Will investigate further. Thanks!. ~~@abraxxas ignore my previous comment (the one I removed), it's totally on our side :)~~\nIt appears to be the issue in Node's core itself. Please refer to this comment https://github.com/getsentry/sentry-javascript/issues/1762#issuecomment-444126990. @abraxxas @tpbowden there's an issue with leaking domain module in Node's core itself. We'll keep monitoring it and try to come up with a temporary solution before it's fixed in the core. Related issue: https://github.com/nodejs/node/issues/23862. Merged manually. Thanks! :)\nAlso updated yarn.lock to use latest yarn version, as it adds integrity field.. https://github.com/getsentry/sentry-javascript/commit/263f2092544a6be850e867a9c1234d69f75198a4. @piotrblasiak https://repl.it/@kamilogorek/node-eventid\n```js\nconst Sentry = require('@sentry/node');\nSentry.init({\n  dsn: 'https://foo@fake.dsn/123'\n});\nconst eventId = Sentry.captureException(new Error('foo'));\nconst lastEventId = Sentry.getCurrentHub().lastEventId();\nconsole.log(eventId);\nconsole.log(lastEventId);\n```\nlastEventId should be exposed in @sentry/node as well. My oversight. I'll patch it in the next release.. Already done that above :) Will ping you once it's published.. Released as 4.4.0 @piotrblasiak . @hokaccha you have a typo in your config blacklistUrl misses S, as in blacklistUrls.\nHowever, it's still broken on our side when it's used for event listeners as you just did. Fix is coming - https://github.com/getsentry/sentry-javascript/pull/1769. Released as 4.4.0. Updated changelog and merged manually. Can you post a repro of this issue? There's no sentry.io reference hard-coded anywhere in the SDK.. Closing due to inactivity.. Duplicate of https://github.com/getsentry/sentry-javascript/issues/1764\nAlso see this comment from Today: https://github.com/getsentry/sentry-javascript/issues/1764#issuecomment-441584499. https://blog.npmjs.org/post/180599338975/401-scoped-packages. Node domains which we use should do that on their own. Is there a chance you could provide a repro-case and node version details I could use to debug this?. @CharlieEarnup you have to add app.use(Sentry.Handlers.requestHandler()); as the first handler of your Express app. We mention that in our docs: https://docs.sentry.io/platforms/node/express/\n\nNode domains is not the answer\n\nThere is no way to separate context between requests without the domains.\n\nwe should be able to use Sentry sdk without domains\n\nYou can, you just won't have a separation of context data.\n\nso i just want to send whatever i want to sentry, whenever i want.\n\nYou can do that. Track your own scopes and pass them to captureException handler through the client directly.\nhttps://docs.sentry.io/platforms/javascript/advance-settings/\njs\nimport { BrowserClient } from \"@sentry/browser\";\nconst client = new BrowserClient({ dsn });\nclient.captureException(exception, {}, yourOwnScope);\n\nI don't think a scope system can really works in a concurrent environment like JavaScript.\n\nIt can with some restrictions and pre-requisites. . @CharlieEarnup it's definitely not here \u2013 https://github.com/getsentry/sentry-javascript/issues/1773#issuecomment-449094541. >do you mean it needs to go above the routes as well?\n@CharlieEarnup it states very clearly in the docs. requestHandler => your handlers => errorHandler => your error handlers\n```js\n// The request handler must be the first middleware on the app\napp.use(Sentry.Handlers.requestHandler());\n...\n// The error handler must be before any other error middleware\napp.use(Sentry.Handlers.errorHandler());\n```\n\n@adrienboulle you don't know the half of it that Api is getting deprecated for a reason.\n\nIt's soft deprecated for 5 years now with no real alternative (other than async hooks which are not there yet).\n\njuste declare a scope variable in the request object\n\nIt won't catch async errors without domains. Thats the reason why we use implicit binding and call everything in run context (see domain docs linked above).. > @CharlieEarnup exactly, and Sentry is supposed to be a tool, not a framework, i handle my code errors by myself I wont rely on a third party for that\nI don't get what's the issue here tbh. If you don't want to use requestHandler, then you can skip it and use the client directly, without any context, scope etc., just Sentry.captureException itself.\n@CharlieEarnup \n\nit's actually very unclear because nowhere does it communicate that you need requestHandler to support errorHandler.\n\nhttps://docs.sentry.io/platforms/node/express/\n\nI'm pretty sure \"must\" means \"you need to use\" :)\n\nIf you absolutely cannot take any chances with uncaught errors, sure domains work, but for most they are way overkill.\n\nIn our experience, most people want a \"plug and play\" solution. Using requestHandler + errorHandler gives you async error handling, scope separation and additional request context for every error. We provide a manual Sentry.NodeClient instance for those that want to use our SDK just as a simple error reporter.. Thanks!. > I ran into this as well when calling scope.setUser where as email and username where undefined on the object.\n@SimonSchick we'll patch it all this or next week. Already know the cause and how to approach it.. Fixed in 4.2.2. Just verified it and everything works just fine. Are you able to provide repro case where it doesn't work?\n. Updated. Thanks for the review @SimonSchick!. @juanhenriquez this is perfectly fine and should work just fine. Can you provide a repr-case where it fails?. > Anyone has an idea why? Is there a way to see which ignoreErrors pattern cause the drop?\nScript error. This will be the pattern in this case - https://github.com/getsentry/sentry-javascript/blob/92e0149bcafbfcf15a9dd499c0f3081d57b3103c/packages/core/src/integrations/inboundfilters.ts#L11\nSee if this may be of some help https://blog.sentry.io/2016/05/17/what-is-script-error. @EyalSi are you able to provide a repro case I could use to debug this? There might be some crossorigin issues maybe?\nIf not and it's resolved, feel free to close the issue :). Closing due to inactivity.. @htulipe you got it! :)\nhttps://github.com/getsentry/sentry-docs/pull/840. I never used Choojs nor Bankai. Could you please post a repro-case for this issue?. Closing due to inactivity.. @SimonSchick totally agree. Thanks for the catch, updated :). One missing change + spoiled Travis cache on Node 6. Fixed.. Can you post a direct link to the event?\n(you also missed some paths in the stacktrace screenshot you masked earlier  \ud83d\ude05)\nAny particular reason why you don't use Sentry.captureException directly, but rather want to create your own event?. @guischdi the reason why you get this error is that local file paths are not reachable to remote servers.\nSentry is trying to fetch and resolve /something/local/src/app.js and read the source-code from it to provide better error mappings (it works in the same way with sourcemap files).\nTo upload your files, you can use our CLI https://docs.sentry.io/cli/ or Webpack plugin https://github.com/getsentry/sentry-webpack-plugin\nHere are some old docs on source maps, but the concept is the same for new SDK https://docs.sentry.io/clients/node/sourcemaps/ (it all applies in the same way to your current issue).\nThere's also an existing integration you can use to rewrite paths in every frame https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/pluggable/rewriteframes.ts\nSo for example:\njs\nSentry.init({\n  dsn: \"https://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  integrations: [new Sentry.Integrations.RewriteFrames()]\n});\nWill change /something/local/src/app.js to app:///app.js (app:/// is our internal prefix), so when you upload app.js to your sentry release artifacts, it will be read correctly without a need to fetch external files.\nBasically what you need to do is:\n- set a release in init call\n- upload your sources to the same release in the Sentry\n- make sure that frames in errors you catch correspond to those from your upload files\nHope it clears some things for you. Feel free to ask anything if you need more help.. @guischdi can you past full link to both events? Not shareable ones? I can access them through admin permissions.\nAlso, I'll be out of office for the next 3 weeks, so I'll try to get back to this one when I'll come back.. You can already achieve this behavior with the code below after your requestHandler.\n```js\nfunction sentryExtraContextMiddleware(req, res, next) {\n  Sentry.getCurrentHub().configureScope(scope =>\n    scope.addEventProcessor(async event => {\n      if (Object.prototype.toString.call(req.extraContext) === '[object Object]') {\n        event.extra = {\n          ...event.extra,\n          ...req.extraContext,\n        };\n      }\n      return event;\n    }),\n  );\nnext();\n}\napp.use(sentryExtraContextMiddleware);\n```\nWe don't want to add custom attributes to the request itself, as we'd have to keep documentation in-sync, as well as provide this feature for every framework.. Anytime!. I changed the name to safeNormalize, as it's not serialization per-se but rather data normalization + we have safeSomething convention in few places already.. The only difference now (which is actually a feature! :D) is that keys path in circular objects/arrays are stored in the context of the objects itself, not a whole scope. Thus, ~ means the root, and not ~.extra.object as it incorrectly was before.\n\nNo scope data before:\n\nNo scope data after:\n\n\nSimple scope before:\n\nSimple scope after:\n\n\nCircular scope before:\n\nCircular scope after:\n. It works just fine for me.\n\nAre you able to provide a reproducible example?. Closing due to inactivity.. Hey, please read https://github.com/getsentry/sentry-javascript/issues/1577#issuecomment-424033663\nCheers!. Just checked on the fresh env:\n```sh\nfoo \u03bb: npm -v\n5.6.0\nfoo \u03bb: node -v\nv9.4.0\nfoo \u03bb: npm install @sentry/node@4.4.1\nnpm WARN saveError ENOENT: no such file or directory, open '/Users/kamilogorek/Projects/sentry/repros/foo/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/Users/kamilogorek/Projects/sentry/repros/foo/package.json'\nnpm WARN foo No description\nnpm WARN foo No repository field.\nnpm WARN foo No README data\nnpm WARN foo No license field.\n\n@sentry/node@4.4.1\nadded 17 packages in 2.437s\nfoo \u03bb: cat node_modules/\\@sentry/node/package.json | grep main\n  \"main\": \"dist/index.js\",\n```\n\nCan you try to remove node_modules, then run npm cache clean and then try again? It may be spoiled cache which messes up npm instance.. Hey @kishor-bhatt, you can do this using extra context \u2013 https://docs.sentry.io/enriching-error-data/context/?platform=javascript\njs\nSentry.withScope((scope) => {\n  scope.setExtra(\"response\", API_responseObj);\n  Sentry.captureException(err);\n});. Anytime!. \ud83d\udc4c . Can you provide a repro-case for this behavior?. @Getz85 @ntelkedzhiev please read https://github.com/getsentry/sentry-javascript/issues/1449#issuecomment-438237271, https://github.com/getsentry/sentry-javascript/issues/1449#issuecomment-440213796 and https://github.com/getsentry/sentry-javascript/issues/1449#issuecomment-440231440\nThere's no reason why you'd ever need to catch Sentry's http errors that I'm aware of.\nIf you want to change the default delivery behavior, you can use custom transports https://codesandbox.io/s/8z4o9yvl6j\nOr if you really need to catch them, read comments linked above.\nWe don't catch our own errors, thus we won't create an infinite loop of failed requests.. > The exception caused by captureException is not caught, so the 'uncaughtException' event is fired, and generally the app crash (so it's not really \"fire and forget\").\nIt crashes because you override error handlers which are handled by, well, this SDK.\nYou cannot rely on SDKs behavior if you modify its main entry point.\nRun this code in node:\n``js\nconst Sentry = require('@sentry/node');\nSentry.init({\n  dsn:https://test@sentry.io/unknown_project_56465`,\n  debug: true\n});\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\ntry {\n  throw new Error('An error occurs!');\n} catch (err) {\n  Sentry.captureException(err);\n}\nsleep(10000).then(() => console.log('Waiting sentry exception'));\n```\nYou'll see that logger explains what happens correctly:\nSentry Logger [Error]: SentryError: HTTP Error (405)\nSentry Logger [Warn]: Event dropped due to being internal Sentry Error.\nEvent: SentryError: HTTP Error (405). @Getz85 \n\nI didn't knew that Sentry listened to 'uncaughtException'. \n\nThat's the only way to capture unhandled errors in Node.js, and per our docs:\n\nMost SDKs will now automatically collect data if available, some require some extra configuration as automatic error collecting is not available due to platform limitations.\nMy goal was to log this uncaughtException with Sentry, but it's automatically done by the SDK? \n\nWe filter out internal errors (aka. Sentry errors), as they may cause an infinite loop of \"send report => server error\". If you want to override delivery behavior and handle those errors as well, you can provide your own transport class \u2013 https://docs.sentry.io/error-reporting/configuration/?platform=javascript#transport-options\n\nSo what if we want to have additional steps in our own uncaughtException event, without catching the Sentry error?\n\nConfigure OnUncaughtException integration documented here - https://docs.sentry.io/platforms/node/default-integrations/#onuncaughtexception\n@ntelkedzhiev \n\nWhy would you depend on logging out your errors in process.on('unhandledRejection', ...) when it is global for the whole node.js app? I would say the majority of apps in production will overwrite it and most of them will throw the error. Also what happens if there is another library that also depends on the 'uncaughtException'?\n\nYou should know what tools you are injecting in your app and how they behave. There's no way to provide automatical unhandled errors handling, without setting custom unhandledException handler. There's none.\nI'm pretty sure you'll find the answer to your question in my previous paragraphs as well.. I\u2019m out on vacations till January, will reply once I\u2019m back :). @KevCJones can you give it a try with 4.4.2? We released a patch to serializer which takes Date objects into account \u2013 https://github.com/getsentry/sentry-javascript/commit/dece6ee52fc854e15a6908bbe83cf6c56bb905e6#diff-a88b07b3d334ad11919cdcaf8b58d2b1R291. Can you paste the output of console.log(angularRaven) here? I'm wondering what webpack is doing with this require statement. Code looks fine though.. That's odd. It's not the object we are exporting \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/raven-js/plugins/angular.js\nIt's somehow getting transformed into some kind of Angular instance(?) :o. Is there a chance you could provide a small repro-case for it?. Fixed in 4.5.0, everything is guarded for circular references now. Cheers!. @feorex Angular attaches debug context in their development environment which is enormous object. We found the issue and patched it. Release is processing now. Will ping you (few minutes) once it's up.. @feorex  could you please give a 4.6.4 a try and let us know if everything is fixed for you?. :ok. PR with a fix is coming. Will release tomorrow morning as we want to get some more patches in. Sorry for the inconvenience. I was pretty sure that safely storing users data will be enough to prevent circular refs. Apparently not :<. Patch has been merged in. We'll release 4.5.0 Today.\nhttps://github.com/getsentry/sentry-javascript/commit/aff8415d10db9064a681f5a80ad7eb0fa8e513f9. This should be fixed in 4.6.0 :). Sorry, it's not possible right now. You can report this request to https://github.com/getsentry/sentry and ask them for this feature.. Thank you!. Thanks!. Closed due to inactivity. Fixed in the 4.5.0 \u2013 https://github.com/getsentry/sentry-javascript/commit/3c45c2ff5803892934361975f1264a06fa318da7. It already is released. Npm page has some delay.. Thanks!. https://docs.sentry.io/platforms/javascript/sourcemaps/generation/ + the rest of \"Source Maps\" sections on the left should help. Fixed in 4.5.4 \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nSorry for the inconvenience :) . @adriaanmeuris @vvo could you please give a 4.6.4 a try and let us know if everything is fixed for you?. @vvo we fixed prototype inheritance, but missed one bit. Should be fixed in 4.6.4. Should be fixed in 4.5.4 \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nCan you verify that please?. Fixed in 4.5.4 \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nSorry for the inconvenience :) . @atk can you point them out?. My ack match pattern failed me again :< Thanks @atk! Updated remaining flags.. @maikthomas it's still in the SentryEvent type and can be set in beforeSend, but we removed it from config, as it's not unified across all our SDKs.\nIn beforeSend (all events):\njs\nSentry.init({\n  dsn: '__DSN__',\n  beforeSend(event) {\n    event.logger = 'someOtherLogger';\n    return event;\n  }\n});\nIn eventProcessor (all events):\njs\nSentry.configureScope((scope) => {\n  scope.addEventProcessor((event) => {\n    event.logger = 'someOtherLogger';\n    return event;\n  });\n});\nIn eventProcessor (single event):\n```js\nSentry.withScope((scope) => {\n  scope.addEventProcessor((event) => {\n    event.logger = 'someOtherLogger';\n    return event;\n  });\nSentry.captureException(new Error('this error will have changed logger'));\n});\n``. Thanks!. Not in this major release. Sentry SDK doesnt contain a standalone functions which could be tree-shaken.. Fixed in4.5.4` \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nSorry for the inconvenience :) . Really?... can you provide a repro please? Every scenario I tested worked just fine.. Works just fine with your repro \u00af_(\u30c4)_/\u00af \n. Thanks for the detailed description. We are aware of this, however, it's a breaking change, since it'd \"de-group\" quite a lot of errors for some high-volume users.\nThere's a PR for fixing this already and we'll merge it before releasing v5 \u2013 https://github.com/getsentry/sentry-javascript/pull/1831\nCheers!. @matomesc can you provide a link to any event in your Sentry project that uses this release? (original url, not shareable one)\nYou are using inlineSource, so you should be just fine even without uploading source maps though.. You missed 2nd part of the docs \u2013 https://docs.sentry.io/platforms/node/typescript/#2-changing-events-frames\nYour frames are pointing to C:\\dev\\projects\\<redacted>\\server\\build\\index.js in Object.<anonymous> at line 87:7 which we cannot resolve, as it's a local address.. Ah, I completely missed the fact that you are using local windows instance. Because of that, this check will never be true https://github.com/getsentry/sentry-javascript/blob/28b8164877cf151bba42374d90309441f5d7bb7d/packages/core/src/integrations/pluggable/rewriteframes.ts#L28-L32\n(we check for / as its nodes convention to use full-path for user-generated frames, and native frames starts without /).\nOnce deployed to any unix based system, it will work just fine, but not on windows local file system.\nYou have to provide custom iteratee, something like this (make sure that paths are correct):\n``js\nfunction framesModified (frame) {\n    if (frame.filename && frame.filename.startsWith('C:')) {\n      const base = relative(process.cwd(), frame.filename);\n      frame.filename =app:///${base}`;\n    }\n    return frame;\n}\nSentry.init({\n  integrations: [new Sentry.Integrations.RewriteFrames({\n    iteratee: framesModifier\n  })]\n})\n```\nTo verify that you are sending a correct payload, you can use beforeSend config option, or:\n```\n// https://docs.sentry.io/platforms/javascript/pluggable-integrations/#debug\nSentry.init({\n  integrations: [new Sentry.Integrations.Debug({ stringify: true })\n})\n```\nAnd check exception.values[0].frames data. It should have filename of each frame set to app:///<something> where <something> is the same filepath as the one you upload using sentry-cli.. Fixed in 4.5.4 \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nSorry for the inconvenience :) . @neemah can you post a small repro-case please? I'd love to add a test around it.. @neemah add debug: true to your Sentry.init({}) call, this may give some more insights. @dottodot maybe you can somehow provide a repro-case?. @peterpro I'm aware of the issue, but I need a concrete repro case \ud83d\ude05. @peterpro it'd be awesome if you could come up with the smallest possible case where our SDK fails. Eg. raw NestJS handler that throws + captureException call. Once I can reproduce it locally, it should be trivial to fix. . I'm asking about the code that I can run locally and reproduce the actual error. Without it it's impossible to debug.. Great catch @jpreynat fixed in https://github.com/getsentry/sentry-javascript/pull/1907/. Can you provide your full Sentry config (im not sure if you are missing DSN or just truncated the config) and link to an even which should have but doesnt a release attached?. It's TraceKit's responsiblity to extract proper frames info from the error itself \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/raven-js/vendor/TraceKit/tracekit.js\nWe made some changes to it in new @sentry/browser SDK though, so you may want to give it a try first before we do any more investigation.. I never used Capacitor nor Ionic 4 tbh. Are you able to provide the smallest possible repro-case I could use to debug this? I don't have enough time to learn how to set it up.. Not really, I don't have much spare time these days. Will try to investigate it some day, sorry.. Sorry, but I don't have enough time to tackle this issue right now.\nIf you'd like to investigate, I'd suggest to:\n- use beforeSend callback and see if it's 2nd arugment hint, has a hint.originalException attribute, if so, investigate it's stack and see if the information is there at all\n- if it's not, then there's not much we can do\n- if it is, then set a breakpoint in computeStackTrace method of https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/tracekit.ts and step by step from there how it digest error.stack information. Thanks for the report, you are totally right, missed that one \u2013 https://github.com/getsentry/sentry-javascript/pull/1871. > Is it expected that logging exceptions with objects that aren't errors should be logged as level info?\nThey are logged as errors now :)\n\n. Strings yes, they'll be redirected to captureMessage calls, thus they have a default level of Info. If you need, you can change levels as well.\njs\nSentry.withScope((scope) => {\n  scope.setLevel('warning');\n  Sentry.captureException(new Error('something'));\n});\nor with a shortcut in captureMessage, Sentry.captureMessage('shouldnt happen', 'warning');. Thanks for reporting the issue. Fixed in https://github.com/getsentry/sentry-javascript/issues/1872. They are handled in the same manner as any other errors that bubble up to onerror \u2013 https://github.com/getsentry/sentry-javascript/blob/89bca28994a0eaab9bc784841872b12a1f4a875c/packages/browser/src/backend.ts#L80-L90\n\nIf it is, how do we change our application code to get around it?\n\nYou can use our InboundFilter integration documented here \u2013 https://docs.sentry.io/platforms/javascript/default-integrations/#inboundfilters\ntl;dr\n``js\nSentry.init({\n  dsn: '__YOUR_DSN__',\n  ignoreErrors: ['AbortError']\n});. @gfx umm? https://github.com/getsentry/sentry-javascript/blob/67360d0f8460d9c07bbdff2319042e726032d375/packages/minimal/src/index.ts#L44. @gfx no worries :). I was thinking about it and did it like this the first time, but in this case, it's tightly coupled and our SDK won't work without an instance here at all. It's also hard to track withoutdebug` mode turned on, and you want a quick feedback to make sure it's integrated with the framework correctly.. @HazAT convinced. Updated the code.. Updated, fixed and merged with https://github.com/getsentry/sentry-javascript/pull/1878/. Do you have a repro-case I can use to debug this? I tested source maps quite a lot of time in Sentry using Node and it worked just fine.. \nChanges required for your repro to work:\n\nremove nodeExernals from externals, as it's meant to be run in node env\nadd integrations: [new Sentry.Integrations.RewriteFrames()] to your Sentry.init call\nchange include: ['.'] to include: ['./build'] in your webpack config\n\nhttps://docs.sentry.io/platforms/node/sourcemaps/#updating-sentry-sdk-configuration-to-support-source-maps\nAlso because you are using windows locally, you may want to look at this comment \u2013 https://github.com/getsentry/sentry-javascript/issues/1857#issuecomment-461354079\n(dsn are public, so no need to hide it on my screen :p). Closing due to inactivity. Thanks for the detailed response @o2genum, appreciate it!. Thanks!. > because of the absence of migration guide\nhttps://github.com/getsentry/sentry-javascript/releases/tag/4.0.0\n\neven some kind of documentation for extra tags\n\nhttps://docs.sentry.io/enriching-error-data/context/?platform=javascript#tagging-events\n\nuser context\n\nhttps://docs.sentry.io/enriching-error-data/context/?platform=javascript#capturing-the-user\n\nand other features which were properly documented in the website.\n\nhttps://docs.sentry.io/error-reporting/capturing/?platform=javascript\nhttps://docs.sentry.io/error-reporting/configuration/?platform=javascript\nhttps://docs.sentry.io/enriching-error-data/context/?platform=javascript\n\nnow I understood that I need to use Integration but I cannot find any documentation for it too.\n\nhttps://docs.sentry.io/platforms/javascript/#integrations\nhttps://docs.sentry.io/platforms/javascript/#eventprocessors\nCheers! :). You can fix it with:\nFrom the command-line:\nsh\n$ mocha --globals __SENTRY__ --check-leaks\nor\njs\nmocha.setup({\n  globals: ['__SENTRY__']\n});. Updated with the latest changes to decycle and added appropriate tests. Thanks!\nhttps://github.com/getsentry/sentry-javascript/commits/master. Feel free to issue a PR that'll implement this change :)\nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/pluggable/vue.ts. Fixed in https://github.com/getsentry/sentry-javascript/pull/1885 Will be released around next week.. Thanks @miluoshi, awesome work! Will keep it open for everyone else and integrate it into our code base one day. Cheers!. @miluoshi pulled your integration to https://github.com/getsentry/sentry-javascript/pull/1906/commits/0e43b69c062aa16c387453798091ca07e044a8ed :). Fixed in 4.5.4 \u2013 https://github.com/getsentry/sentry-javascript/releases/tag/4.5.4\nSorry for the inconvenience :) . > Is there a way to initiate a client with a specific version for a specific captureException or something like this?\nI'm not sure what are the details around events you capture, thus I'm not sure how you are distinguishing them.\nYou can create a custom integration that would do that - https://docs.sentry.io/platforms/javascript/#integrations\n```js\nclass CustomCLIReleases {\n  constructor() {\n    this.name = 'CustomCLIReleases';\n  }\nsetupOnce() {\n    Sentry.addGlobalEventProcessor((event, hint) => {\n      const self = getCurrentHub().getIntegration(HappyIntegration);\n      // Run the integration ONLY when it was installed on the current Hub\n      if (!self) return event;\n  if (this.shouldModifyRelease(event)) {\n    return {\n      ...event,\n      release: this.generateNewRelease(event)\n    }\n  }\n\n  return event;\n});\n\n}\nshouldModifyRelease(event) { ... }\n  generateNewRelease(event) { ... }\n}\nSentry.init({\n  dsn: 'DSN',\n  integrations: [new CustomCLIReleases()]\n});\n```\nSooomething like this.. Patched in 4.6.2 (release in process). @shaninja there is \u2013 https://github.com/getsentry/sentry-javascript/commit/d539303c99ec5b36e2f6baa8c5f26c80fbb21876\nJavaScript keeps on giving \u00af_(\u30c4)_/\u00af \nThankfully we add test for every scenario we patch, so it shouldn't be a thing soon'ish.. @ericnograles thanks! Yes, TravisCI cannot run SauceLabs tests from external contributors, but you don't have to worry about them.\nDocs are here \u2013 https://github.com/getsentry/sentry-docs/blob/master/src/collections/_documentation/platforms/javascript/vue.md\nCan we change the name of the option to attachProps and reverse logical check?\nWe already have attachStacktrace configuration option in the SDK and it would align nicely.\nThanks!. Also inheritDocs doesnt work here, as this attribute is not inherited. If you could write proper doc line for it would be great :). Awesome, thank you! :). Hey @janthurau when using a hub directly, you need to take care of scope yourself, as you are well, going around the implementation :)\nhttps://github.com/getsentry/sentry-javascript/blob/67360d0f8460d9c07bbdff2319042e726032d375/packages/core/src/baseclient.ts#L139-L146\njs\ntry {\n  Sentry.configureScope(scope => {\n    scope.setExtra(\"test123\", \"test\");\n    scope.setExtra(\"test345\", \"ff\");\n  });\n  throw new Error(\"test\");\n} catch (e) {\n  const hub = Sentry.getCurrentHub();\n  const scope = hub.getScope();\n  await hub.getClient().captureException(e, null, scope);\n}\nIf you don't need to await on the result, it's just:\njs\ntry {\n  Sentry.configureScope(scope => {\n    scope.setExtra(\"test123\", \"test\");\n    scope.setExtra(\"test345\", \"ff\");\n  });\n  throw new Error(\"test\");\n} catch (e) {\n  Sentry.captureException(e);\n}\nIn the next version, we will make this way easier for the end users and you will be able to await on the result in much simpler way\njs\ntry {\n  Sentry.configureScope(scope => {\n    scope.setExtra(\"test123\", \"test\");\n    scope.setExtra(\"test345\", \"ff\");\n  });\n  throw new Error(\"test\");\n} catch (e) {\n  Sentry.captureException(e);\n  await Sentry.flush();\n}\nCheers!. Hey, does this also happen with older versions and a regression was introduced recently? Or was this always the case?\nIn the meantime (if you want of course) remove this integration and catch errors manually with try/catch and Sentry.captureException in your time-related functions.\njs\nSentry.init({\n  dsn: '__DSN__',\n  integrations(integrations) {\n    return integrations.filter(i => i.name !== 'TryCatch');\n  }\n})\nI'd love to have a small repro-case that I could use to profile this if possible :). I honestly don't think it's the issue of our integration. Here's an example of wrapped function calls which takes <1ms without any hiccups (followed your instructions from the above :))\n\nOur wrappers only catch the errors and attach a simple object with function name to it, it doesn't perform any breadcrumb updates, therefore it's a rather fast operation \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/helpers.ts#L32-L138\n. You are totally right \u2013 https://github.com/getsentry/sentry-javascript/blob/eeab4c154acfb11c317025a941ad487cec27f668/packages/raven-node/lib/client.js#L582-L583\nThanks!. @jnns can you give 4.6.0 a try? We fixed some filtering issues Today :). I think we should expose flush/close on the browser as well. Just to be inline with node and give users a way to wait for the response (eg. in electron's renderer process or some mobile solutions).\nOther than this \ud83d\udc4d . Merged by hand. @sahilanguralla yes, you can :)\nHere are the docs for your usage https://docs.sentry.io/platforms/javascript/advance-settings/#using-a-client-directly\nCheers!. Fixed already in 4.6.1, sorry for the inconvinience. @veratim1996 can you provide a repro-case where the expected behavior fails? I assume your code snippet is already a fixed code correct?. You are trying to pass a whole SyntheticEvent as the payload, which is not serializable, as React polls the same shared object for all events. It's an odd edge-case, but added a guard for this \u2013 https://github.com/getsentry/sentry-javascript/pull/1900\nThanks for the repro!. Makes perfect sense. Thanks!. I'm not sure if I fully understand your needs, but basically you want multiple clients with a separate DSNs?\nHave you seen this docs? https://docs.sentry.io/platforms/javascript/advance-settings/\n\nyou can attach globalHandlers integration to every client and then use inboundFilters integration to decide which error should go where.\n\nhttps://docs.sentry.io/platforms/javascript/default-integrations/#inboundfilters. Unfortunately, JS environment doesn't support things like this. You'd have to as I mentioned previously, fiddle around with manual filtering of the events based on some custom data.. Cheers!. AngularJS integration taken from https://github.com/getsentry/sentry-javascript/issues/1880. Sounds good, however, I'm not sure if this should be behind our debug: true flag.\nIn the end, you are consciously attaching error handlers, which redirects error stream to the Sentry.. We don't modify default logging behavior, and for uncaught exceptions it's node itself what's triggering a log call.\nI think the best solution here would be to just make a note about it in the docs and leave \njs\nprocess.on('unhandledRejection', (reason, p) => {\n  console.log('Unhandled Rejection at:', p, 'reason:', reason);\n});\nsnippet in case someone wants to re-enable the warning.. Done https://github.com/getsentry/sentry-docs/pull/785. There's not a single call to config in our codebase.\nI won't be able to fix it without some sort of repro-case, as I don't use AWS on daily basis.. Not sure how this is broken? \ud83e\udd14 \n\n\nProblem is that axios attaches request and response objects to the error and sentry is attempting to somehow serialize that which as side effect breaks Stream object in Node.\n\nThat is correct \u2013 https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/extraerrordata.ts\nThis can be turned off with v if necessary:\njs\nSentry.init({\n  integrations: integrations => integrations.filter(integration => integration.name !== 'ExtraErrorData')\n});\n\nLatest axios version has toJSON method on error to get something more serialisable.. so that might be option to address that.\n\nWe already have this in v5 (coming soon) \u2013 https://github.com/getsentry/sentry-javascript/commit/7e081b527e5c8f56d655239461134e2f12753ad8#diff-a88b07b3d334ad11919cdcaf8b58d2b1R211. Yes, event is even delivered to Sentry:\n\nCan you log Sentry.SDK_VERSION inside catch statement? npm sometimes tend to cache old packages.. It shouldn't matter at all.\n```js\nconst Sentry = require(\"@sentry/node\");\nconst axios = require(\"axios\");\nconst stream = require(\"stream\");\nSentry.init({\n  debug: true,\n  dsn: \"http://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  beforeSend(event) {\n    console.log(event);\n    return event;\n  }\n});\nasync function start() {\n  console.log(\"stream is OK:\");\n  console.log(stream.Stream);\n  try {\n    await axios.get(\"/crash\");\n  } catch (e) {\n    console.log(Sentry.SDK_VERSION);\n    Sentry.captureException(e);\n  }\nsetTimeout(() => {\n    console.log(\"--------------------\");\n    console.log(\"stream is broken:\");\n    console.log(stream.Stream);\n  }, 3000);\n}\nstart();\n```\nnode v11.9.0. Whaaaaat. Oh my, that's nasty. Will dive in into Node 10, as we apparently miss some tests if they all pass on Node 10.. @jardakotesovec found the culprit. Could you give 4.6.3 a try?. Should be fixed in the latest version \u2013 https://github.com/getsentry/sentry-javascript/commit/afe627e5161076762bba822c1e2d6dbd77a0c053#diff-4ac32a78649ca5bdd8e0ba38b7006a1eR7. You are totally right, this shouldn't throw. Updated the behavior in 4.6.3 to noop in production mode when Sentry is not initialized (enable: false in configand log debug information indebug: true` config mode.\nCheers!. My merge failed, that's what you get when you do release at the end of your work day, eh... Sorry about that, will release once we have few more bugs patched. Most likely at the end of the week or somewhere early next one :) \n\nIn either case it would be useful to document the following:\n\nTotally agree, however we are working on v5 (which will be released very soon) and it has some changes regarding enabling/disabling behavior, so we don't want to modify the docs right now.. > Is there any difference between not initialising Sentry vs initialising Sentry but with enabled: false?\nenabled: false disables any event processing and effectively sending to Sentry, but still attaches all the handlers, where not initializing skips global error handlers as well.. > (Please note, assign method doesn't create a copy of object - it makes reference to original object's properties and this logic can affect the angular app context).\nIt doesn't, but it walks recursively through all the branches. I missed the initial value normalization. Will release patch version Today.. @akozlov84 could you give 4.6.3 a try?. @akozlov84 if you have your code locally, can you move the normalizeValue(obj) and this if statement above object cloning? So it ends up as:\n```js\nvar normalized = normalizeValue(obj);\nif (typeof normalized === 'string') { return normalized; }\nvar copy = ...\n```\nI'm pretty sure that the logical path is just incorrect there and it should bail out earlier, on that exact check, so decycle wont be called in the loop.\n\nOn first step the variable \"copy\" has the \"Error\" copied, but the \"ngDebugContext\" property of the \"copy\" object isn't the copy - it's just reference to angular context, and furthe the logic will try to override some of the properties.\n\nCorrect, however copy will still be walked through and should be cloned and decycled anyway \ud83e\udd14 \nI'd love to have a repro for it so we can write even more tests for this method.. @akozlov84 could you please give a 4.6.4 a try and let us know if everything is fixed for you?. Thanks!. Merged manually.. Feel free to introduce a PR for this change, will be more than happy to merge it :)\n. Yes, as hostname is derived from it anyway \u2013 https://expressjs.com/en/api.html#req.hostname\n\nContains the hostname derived from the Host HTTP header.\n\nHowever, we want to add port only if it's not a default (80 for https, 8000 for https).. This wouldn't work, as options contains other arrays and objects which are references, and deconstructing doesn't do a deep clone.\nYou have to manually initialize them during init call yourself.\njs\ninit({\n  ...config.sentry,\n  integrations: [...config.sentry.integrations]\n})\nor something similar.. Deep cloning in JS is only possible with JSON.parse(JSON.stringify(input)), but it loses any non-serializable values like functions.\nOtherwise, we'd have to copy each option one by one and it's still not guaranteed, as someone can pass few levels deep objects there as well, eg.\njs\nconst options = {\n  transportOptions: {\n    headers: {\n      key: 'value'\n    }\n  }\n}\nCopying just this alone would require something like:\njs\nconst clone = {\n  // top-level\n  ...options,\n  transportOptions: {\n    // top-level transportOptions\n    ...options.transportOptions,\n    headers: {\n      // and nooow we are at max depth\n      ...options.transportOptions.headers\n    }\n  }\n}. Cheers!. > I would like to question whether \"passing the error to error handling middleware (by calling next and passing the error )\" is really the job of Sentry.Handlers.requestHandler(). Perhaps it should only report the error?\nrequestHandler doesn't send reports, it only creates a domain which is used in order to separate context between the requests.\nIt's a job of errorHandler to take that context, the error and make an event out of them which then can be sent to Sentry.\nI'm not sure if I follow along with how it changes the behavior based on the environment. Can you elaborate more? Preferably with code examples? Thanks!. @neemah could you please give a 4.6.4 a try and let us know if everything is fixed for you?. I totally agree. Dynamic nature of JS makes it really hard to work within such use-cases.\nThanks for letting us not it fixed it for you.. Can you provide a link to the issue in your sentry account?. Oh. This one will be hard to track then. Can you post a JSON representation of the event (should be just below the title in Sentry issue)? Please make sure there're no confidential data :). This stack basically means that we called wrapped function (either something from setTimeout/setInterval or some event listener) and it blew up (wrapped function, not sentry wrapper).. There's not much we can get from it tbh. Your best bet is to take a look at breadcrumbs and see what listener is attacked to div.ant-menu-submenu-title > span > span.nav-sub-text element, as it was the last action that triggered the error.. https://github.com/getsentry/sentry-javascript/blob/f50e025b1e94699f440cd850cb463327022fde70/packages/raven-js/src/raven.js#L1023\nhttps://github.com/getsentry/sentry-javascript/blob/f50e025b1e94699f440cd850cb463327022fde70/packages/raven-js/src/utils.js#L357\nThose are the only 2 places we read tagName in our code and they both have a guard that prevents from reading this attribute if the source is null or undefined, thus this error cannot originate from the SDK itself.. There's a chance that it's getting de-duplicated.\nYou can use debug: true in your init call to see what's going on.\nIf it indeed is getting deduped, you can remove this integration using:\nSentry.init({\n  integrations: integrations => {\n    return integrations.filter(integration => integration.name !== 'Dedupe');\n  }\n});\nhttps://docs.sentry.io/platforms/node/default-integrations/. @stemail23 you are calling captureMessage directly on client correct?\nThere indeed is an issue which we should take care of. @sentry/minimal is what's generating the syntatic stacktrace, which is required for attachStacktrace. When using client directly, it's skipped, as there's just no hint containing this syntheticStacktrace available.\nIn the meantime, you can go around it with helper like this:\njs\nfunction captureMessageWithStack(message, level = 'info') {\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    client.captureMessage(message, level, {\n      syntheticException: exception,\n    })\n  }\n}. Correct, exactly the same. You may want to try changing redirect mode to, as error states \"follow\".\nHowever, it's not supported out-of-the-box as it's not a usual case.\nTo change this, use custom transport, here's how - https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/examples/app.js#L21-L29\nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/browser/examples/app.js#L53\n```js\nimport * as Sentry from '@sentry/browser';\nconst fetchOptions = {\n  redirect: 'follow'\n};\nclass CustomTransport extends Sentry.Transports.BaseTransport {\n  sendEvent(event) {\n    return this._buffer.add(\n      global.fetch(this.url, {\n        body: JSON.stringify(event),\n        method: 'POST',\n        ...fetchOptions\n      }).then(response => ({\n        status: Status.fromHttpCode(response.status),\n      })\n    )\n  }\n}\nSentry.init({\n  dsn: 'dsn',\n  transport: CustomTransport\n});\n```\nThe thing is that redirect: true should be set by default so not sure why it's not applied in the browser. You may also want to try play with referrerPolicy or some headers.\nOther thing you may try is to use our fallback transport, XHR.\n```js\nimport * as Sentry from '@sentry/browser';\nSentry.init({\n  dsn: 'dsn',\n  transport: Sentry.Transports.XHRTransport\n});\n``. Cheers!. @asabhaney when usingrequestHandler, the hub is not attached to the request, but to thedomain`, as it allows us to catch async errors in context-separated manner as well.\nYour code will work just fine if you replace Sentry.getHubFromCarrier(req) to Sentry.getHubFromCarrier(domain.active) instead.\n(remember about const domain = require('domain') at the top).\nHowever, getHubFromCarrier is not necessary if you are using requestHandler at all, as getCurrentHub() will detect whether there's an active domain, and read from one if so \u2013 https://github.com/getsentry/sentry-javascript/blob/f50e025b1e94699f440cd850cb463327022fde70/packages/hub/src/hub.ts#L335-L359. Not as of now, there's open issue for this \u2013 https://github.com/getsentry/sentry-javascript/issues/1622\nYou can create a custom integration that'd do that though.\n```js\nclass ResolveSourceMaps {\n  constructor() {\n    this.name = \"ResolveSourceMaps\";\n  }\nsetupOnce() {\n    Sentry.addGlobalEventProcessor(async (event) => {\n      if (getCurrentHub().getIntegration(ResolveSourceMaps)) {\n        await this.processSourceMaps(event)\n      }\n      return event;\n    });\n  }\nasync processSourceMaps(event) {\n    // do your work here\n  }\n}\nSentry.init({\n  dsn: \"https://363a337c11a64611be4845ad6e24f3ac@sentry.io/297378\",\n  integrations: [new ResolveSourceMaps()]\n})\n```\nKeep in mind that it can be very costly and you should cache all your I/O reads.. Correct. Just wanted to be a little more explicit, as we don't have function nor filename which are used in tests for in_app logic. I still left it on a separate line now though, as it's more readable with this long comment this way.. Thanks for catching that. I completely forgot that document is just a reference to window.document and it has to obey the same rules as every other property.. This was my initial concern and that's why I added that check in the first place. Apparently checking for Edge version using userAgent is trivial.\nAlthough it still looks ugly :(. Edge already fixed that in v15 :), but SauceLabs has some issues running the tunnel on Edge 15, so I had to use v14 for now...\nEdge v14\n\nEdge v15\n\nChrome\n\n. Thanks for the insights @patrickkettner!. I just realised that uncaught/caught wording... would appreciate native speaker input.. Thanks @crccheck!. This will always return true, as typeof 'Request' is always string.\nUse 'Request' in _window to verify that Request is available.. Can you use url = '' + url instead? We use this syntax throughout the codebase.. You're right, thanks!\n\nvs.\n\n. Can we also change it so that testString doesn't become :message if it's undefined? per https://github.com/getsentry/raven-js/issues/1075#issuecomment-334356750. I'm not sure if we should pass this testString here and not create it inside matchFilters instead.\nI know that it's done that way so that we can match both captureException and captureMessage, however we also need to cover this case \u2013 https://github.com/getsentry/raven-js/pull/1076 which with this solution won't cut it.. Can you leave one as a string instead of an array to make sure that both types work?. Can you please match code style with the rest of the codebase?\nMostly multiple vars and index inside for statement.. JS engines already optimise it themselves, so there's no need to store the length :). This code will double-check the same string if type is not defined, but I think we can live with it. \nAlthough an alternative would be something like this, which also do the job, but doesn't improve a readability really\njs\nif (!!this._globalOptions.ignoreErrors.test) {\n  var testString = (type ? type + ': ' : '') + (message || '')\n  if (this._globalOptions.ignoreErrors.test(message)) return\n  if (testString !== message && this._globalOptions.ignoreErrors.test(testString)) return\n}\nI can live with the code we have now.. Missing 1 indentation level. Incorrect indentations here as well.. > will the rethrow\n. > browser's\n+ dangling handler word (not sure if it's rendered 1:1 or lines will be realigned on the page). same here, dangling an. This won't be true anymore with this PR, as Raven.captureException({foo: 'bar'}), will end up calling Raven.captureMessage https://github.com/getsentry/raven-js/blob/master/src/raven.js#L378-L389. Same here. And here. Wrap return statement in curly braces. Same here. I'd call this initialCall to give it more meaning. Also please add comment about why it's 2nd frame, not the top one \u2013 similar to here https://github.com/getsentry/raven-node/blob/master/lib/client.js#L337. You can use assert.isTrue(Raven._send.calledOnce); and assert.isTrue(Raven._send.calledTwice); to be more consistent with the next test (which uses callOnce attribute).. I didn't want to change all instances to utils.something in the codebase, but rather just pull them out like this to make this PR \"easier\" to digest.. It'd not cover an exact match on message only test.\n/^Some Random Message$/ wouldn't work, because testString would be TypeError: Some Random Message in this scenario.. Those two config files are in 90% the same. Can we move common config to something like karma-base.config.js and then import it in karma-integration.config.js and karma-unit.config.js?. This code is required in order for tests to work on SauceLabs.. You are 100% correct. Thanks! :). Updated. Yes, it has been added here https://github.com/getsentry/raven-js/pull/1099. \u00af_(\u30c4)_/\u00af . Yeeeeah, it's kinda confusing now. You have to return either payload (an object) or a falsy value to throw it away. This is how we already annotate dataCallback, therefore I kept the pattern here.. I don't know TS syntax much, so is this request already optional by using &, or does it have to be annotated somehow? Because it can be omitted in the code.. We still need a check for this._hasDocument here before accessing location. this can be merged into one if (this._hasDocument && _document.referrer). Thanks. Merging it for now and we'll update as we go.. This is isError test, not isErrorEvent and should be moved to line ~122 w. additional supportsErrorEvent() clause, eg. if (supportsErrorEvent()) assert.isFalse(isError(new ErrorEvent('')));. Type in offlineStoragelugin. Typo here as well. We can call removeItem instead to be more direct. It'll fallback to [] anyway during processing. I'm not sure if I understand your comment here.\nThere shouldn't be any duplicates here already, as failure event is triggered at the end of _sendProcessedPayload which already checks for duplicates first.. What's the purpose of falling back to _lastData?. Is there any alternative event that I don't know of, but could be used here? :P . Right :). Makes perfect sense. We use Prettier for styling, so editorconfig is superfluous here. We support all browsers from this matrix https://github.com/getsentry/raven-js\nCould you please update the config reflect it?. We need this functionality, as we generate all variants of a the plugin+core bundles for our hosted CDN \u2013 http://ravenjs.com/. It misses all plugins and integration tests. Can we utilize https://github.com/TrySound/rollup-plugin-uglify for this?. I'm fine with removing it if all tests are passing on HeadlessChrome/HeadlessFirefox. This assertion looks redundant, because you trigger those calls yourself 2 lines above. Same here. https://github.com/getsentry/raven-js/blob/master/vendor/json-stringify-safe/stringify.js. Isn't this the same as just setUserContext(user?: Object)? I'm not very familiar with TS.\n. Can we set the default for options at the top of the method while also making a copy?\noptions = options ? Object.merge({}, options) : {}\nand then just leave (options.trimHeadFrames || 0) + 1?\nWe also don't need a double objectMerge, as it can be done in a single call when we do so:\njs\nobjectMerge(options, {\n  stacktrace: true,\n  trimHeadFrames: (options.trimHeadFrames || 0) + 1\n})\nAlthough I'm not sure if we cannot just reverse it, even though it's reference and write\njs\nobjectMerge(options, {\n  stacktrace: true,\n  trimHeadFrames: (options.trimHeadFrames || 0) + 1\n})\nwithout making a copy, as objectMerge is just reassigning values by key anyway.. How so? It's completely valid through2 syntax.. Ah, I completely missed the point and forgot that buffer size is limited. Good catch, thanks\n. Can you please change this to \"args\": \"after-used\" instead?. We didn't have no-unused-vars rule till this PR\n. Could you separate this code from a PR into a new one? It's changing the internal code for the plugin (constant vs. provider), therefore it should be taken care of on its own.. Blob is blob:http://url/for/some/endpoint, which is matched by blob.*?:\\/:) We have a test for it in place. Added appropriate note and reformatted variables slightly so it's easier to move around.. Also made it two separate commits so it's easier to track precise changes. double only. s/the/them. Not really, but it'll silence the error unless you set Raven.debug = true; to see the log.\nChanged to \"you may want to\".. Updated. And added this note.. I'd always avoid mutation methods. It's very error-prone. Even though it's just a \"local modification\".. To be more explicit, it can be changed to\njs\nbreadcrumbs = [...breadcrumbs, finalBreadcrumb].slice(-maxBreadcrumbs);\n\"Add new breadcrumb to the end and take last N items\". This won't work if you pass a string that'll be the same as previous one, as you're comparing DSN class to a raw string.\nShould be changed to something like:\njs\nif (typeof nextOptions.dsn === 'string' && this.options.dsn.toString() !== nextOptions.dsn) .... This is duplicated, but it's totally fine in this case I guess. Maybe use SendStatus here?. And SendStatus here as well?. missed const breadcrumbs =, unless you just wanted to trigger the event loop. I'd change it nonetheless, as it's confusing.. Same here. Let's try not to operate on some internal state and always get/set state \ntransparently to be more obvious for readers.. Can be moved to one assignment call\njs\nconst prepared = {\n  ...event,\n  sdk: this.getSdkInfo()\n};. This entry is used for a \"Framework selection panel\" when creating a new project, so we cannot really add it here. I'd include Raven import here to not confuse users, as right now it somehow just magically appears out of nowhere :). Incorrect indentation. Double-ticks has to be used as it's RST, not markdown. Are you aware that it'll only show up here https://docs.sentry.io/clients/javascript/integrations/ and not in the sidebar? I'd not add it to the sidebar anyway, as it's more a helpful tool than framework integration.\nLet's maybe add a section in in Tips and Tricks that can mention it and link to the integration page?. Or just completely move it to Tips and Tricks section instead of a separate page? As, as I've mentioned before, it's not really an integration :). Added. Fixed. I thought about it, but I think it may be slightly confusing, as it looks like something coming from the browser itself and people may start to google for it :D. \ud83c\udf89 . That's exactly what it does. And MAX_SERIALIZE_EXCEPTION_DEPTH is set to 3, so the only way to \"break\" it is consciously calling serializeException(something, 10e100) or some other very large number that will take too much memory to calculate :p\nAnd it's only in serializeObject, as for checking the size itself, we use safe-json-stringify which we use for Raven, which handles cyclic objects itself.. It's behavior change some time ago afaik. We now always call delete data.trimHeadFrames when calling send https://github.com/getsentry/raven-js/blob/master/src/raven.js#L1808. Agree. Rearranged. Correct :) https://www.joezimjs.com/javascript/great-mystery-of-the-tilde/. Dates are treated as object with the representation of [object Date]. It's taken care of by JSON.stringify which extracts the date from it\njs\nJSON.stringify(new Date('02/03/2017'))\n// \"\"2017-02-02T23:00:00.000Z\"\"\nThere are definitely some other types that we can add in the future, but right now, they'll be gracefully handled by stringify.. Because I trust in every line of code that Substack writes tbh, nothing more - https://github.com/substack/utf8-length/blob/master/index.js :P. Let's leave it like this for now, as Raven-node is already using this string and change it if we'll get any reports of it being confusing :). Double @sentry/core import (line 1 and line 5), unless there's a need for a proper imports order (which is a code-smell anyway imo). It's gone \\o/. Same here. Duplicated core import, unless specific order required (would be nice to mention that if that's the case). Typescript has pattern matching? : o. This shouuuldn't ever break as processStack is initialized with [], but I'd check top && top.client anyway, just for the sake of safety. Same applies to all the calls below.. Silly me \ud83e\udd26\u200d\u2642\ufe0f . So this is the source of snippet that Armin posted yesterday :D Smart!\n. It didn't. Thanks for catching that!. We could extract this 100 to a constant as well, but it's not necessary. I don't mind leaving it as is.. No, I didn't realize implementation of truncate that we already had didnt count ellipsis as the character so I just unified it.. It was :). Agree, I'll error out if max is not a number.\nAs for the second question, I think leaving it as is should be fine. Reason being:\na) we won't blow up when we send something else as instead of a string value\nb) it'll be captured in the breadcrumb as [object Object] which may indicate that there's something funky going on and that could help developers find the culprit\nc) in raw json event that we have available in Sentry, it should contain all the object attributes, which is basically everything someone might need to find out what was the error's value (in case it's some strange object like, in this case, jQuery Error - https://github.com/getsentry/raven-js/issues/1275)\nwdyt?. I'm not sure if we shouldn't use /captureException$/ here or not, as someone may use a different object's name when not using our singleton. But it sounds like a very odd edge-case.. I described the reason in the initial comment :)\n\nsetTimeout has to be cached, as we wrap it ourselves later on for instrumentation purposes.\nAnd because it's, well, wrapped, it calls ignoreNextOnError internally, which was making a quite large mess with this patch.. If we abstract it away to a separate method, we'd have to update all stack interactions as well, eg. this one - https://github.com/getsentry/raven-js/blob/master/src/raven.js#L572-L580 as it'd add another frame.. I blindly followed my previous implementation of isErrorEvent. Fixed all of them.. Haha, I'm surprised you found it! :D. . I know, I know :P. I just wanted to be consistent \u00af_(\u30c4)/\u00af\n\nhttps://github.com/getsentry/raven-js/blob/next/packages/browser/src/sdk.ts#L2\nhttps://github.com/getsentry/raven-js/blob/next/packages/node/src/sdk.ts#L2. Yup, removed it.. Fair point. Fixed https://github.com/getsentry/raven-js/commit/aca0802d3d325b080fc7b36aa13cf10916d77a53\nWe try not to polyfill anything and leave it to the user to do so. I cannot think of anything from the top of my head.. \ud83d\udc4f . :clap:. @param tags. @param user. @param here is a callback function that will receive scope as an argument, not the scope itself. Fair point. Changed. Unfortunately, silly prettifier removes it from the source, so I had to add a silly perl addition to the build command :S. Added. We are overriding onerror handler on line 14, so it won't be picked up by anything else initially. Only when we re-trigger it, so I think it shouldn't be caught twice by any other instrumentation.. The reason why I did it this way, was exactly to not use any webpack, browserify or other loader. As this will rarely (if ever) change, I wanted a whole thing to be a \"single line\" in package.json npm scripts. This way we can move it out from the repo, move it to packages, port it to v4.0 or do anything we want without remembering about any configs, loaders or similar things. Just take the source, pipe it to\njs\ncat src/loader.js | sed '/build_marker/{N;d;}' | npx google-closure-compiler-js | perl -e \\\"print ';'; print <STDIN>;\\\"\n(which has no dependencies, as npx is a standard thing in npm now), and we're good to go.. We can leave this._handleStackInfo.apply(this, arguments); by changing mechanism assignment to\njs\noptions = options || {};\noptions.mechanism = options.mechanism || {\n  type: 'onerror',\n  handled: false\n}\nwhich will also get rid of objectMerge call. This can be removed. This as well. : O. afor. We can make it export { Integrations, Transports }; in one call.. It'll break if fetch throws. We should put it in try/catch clause I guess. Or will async wrap it in reject call? \ud83e\udd14 . .execSync('git rev-parse --short HEAD', { encoding: 'utf8' }) so you don't need to .toString() it.. === 0. Fragile, but I don't think it needs to be more complex than this.\nAlso regexp should be \\d+\\.\\d+.\\d+(?:-\\w+(?:\\.\\w+)?)?, as 2nd part of a group is optional.\nBefore:\n\nAfter:\n\n. js\nreturn {\n  ...event,\n  sdk: {\n    name: SDK_NAME,\n    packages: [\n      ...((event.sdk && event.sdk.packages) || []),\n      {\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  }\n}\nSo we don't mutate. I'd wrap every await processor(processedEvent) call in try/catch, as I think we should let it run if one of processors fail anyway\njs\nfor (const processor of this.eventProcessors) {\n  try {\n    processedEvent = await processor({ ...processedEvent });\n    if (processedEvent === null) {\n      // tslint:disable-next-line:no-null-keyword\n      return null;\n    }\n  } catch (e) {\n    continue;\n  }\n}\n(processor({ ...processedEvent }) is not necessary, but may be useful, to make sure we never mutate, as processors that mutate AND throw, may leave event in a strange state). Same as above. It'd be nice to provide a reason why we skip some of the events and use logger to let user know about it. Can we drop it already?. Ughh... can't we just create a new method for this? I really don't like using boolean arguments to functions, as for people not using typescript, it provides no meaning before they dive into source code. here we use sentry_client and above we used sentry_version. We should unify it somehow.. you can skip it and make dialogOptions = {} a default. You default to false, but this url actually need headers (another reason to make it a separate method :p). Updated. options.shutdownTimeout is checked twice. also let's move 2000 to DEFAULT_TIMEOUT at the top. We can refactor this to:\njs\nconst options = (getCurrentHub().getClient() as NodeClient).getOptions() || {};\nconst timeout = Number.isInteger(options.shutdownTimeout) ? options.shutdownTimeout : DEFAULT_TIMEOUT;. We have a forget util which can be used here. We don't use SENTRY_REQUEST_TIMEOUT anywhere, so not sure if this is necessary. Remove this and we're good to go. We don't use v prefix with releases on github nor on npm. I didn't change any tests in #418ae83772f79c1966d133b06ad1cbd3e738fb53, just unified the code style with no changes in the logic itself. Also copied the same tests to node package - https://github.com/getsentry/sentry-javascript/commit/418ae83772f79c1966d133b06ad1cbd3e738fb53#diff-4c3c51aefa8e193ce4fd8de20e74b194\nThe only change was the Error orders in one of the tests, because it failed when I merged your second PR (although logic seems fine now) - https://github.com/getsentry/sentry-javascript/blob/efa7a33c5c5f84f5f9af1978df499ec802f6ccac/packages/browser/src/integrations/linkederrors.ts#L67\nTop to bottom, eg. [Three, Two, One].. From our docs:\n\nWhen set a proxy can be configured that should be used for outbound requests. This is also used for HTTPS requests unless a separate https-proxy is configured. \n\nI think that user specified options should always override env variables, thus order is like this.. Otherwise we cannot assign httpProxy and friends to transportOptions and I wanted it to be consistent with other SDKs and not ask users to pass it directly there, eg.:\njs\ninit({\n  transportOptions: {\n    httpProxy: 'http://something:8008'\n  }\n})\n(which would be a better option imo, but it's not how it works in other SDKs). No and no. Just wanted to unify it JUST in case someone passes circular object as the fingerprint or level, as they are public API. I know it'll most likely never happen, but there's almost 0 cost to this and we won't blow up in the face to anyone :p . And you are totally right about in usage here, however, we should keep the filter in place, just fixed one. The issue here is that different browsers return different keys (how lovely, right? :p)\n```\nChrome:\nObject.keys: [\"something\"]\nObject.getOwnPropertyDescriptors: {stack: {\u2026}, message: {\u2026}, something: {\u2026}}\nFirefox:\nObject.keys: [\"something\"]\nObject.getOwnPropertyDescriptors: { fileName: {\u2026}, lineNumber: {\u2026}, columnNumber: {\u2026}, message: {\u2026}, something: {\u2026} }\nSafari:\nObject.keys: [\"something\", \"line\", \"column\"]\nObject.getOwnPropertyDescriptors: {message: Object, something: Object, line: Object, column: Object, stack: Object}\n```\njs\nvar foo = new SyntaxError('asd');\nfoo.something = 42;\nvar nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\nObject.keys(foo).filter(key => nativeKeys.indexOf(key) === -1);\nThis seems to be the most unified way now.. suggestion\n    const transportOptions = this.options.transportOptions || { dsn: this.options.dsn };. Are we sure that we want to store it in the buffer here instead of doing it somewhere else? This way we are forcing users to write this code in all custom transports, otherwise it will skip the buffering completely.\nOn the other hand, it gives them control over buffering... \ud83e\udd14 . Noice.. What kind of magic is this?. This looks strange. \"If we have httpProxy in the options, then assign httpProxy from transportOptions, otherwise use fallback from options\". What if we don't have it in the options but we do in transportOptions? . Do we need a limiter if we have a cache though? Not sure. This can be moved to try/catch above. We should parseInt here, just to be safe. 30? o_O. This will always say [object Object] which isn't the best I guess. Maybe we can put custom string here?. This one is probaaably fine though. JavaScript \ud83d\ude48. Can we use isError from @sentry/utils/is here instead? It checks for some additional types that are compatible with Error.. No, this way. If it's a primitive, then capture it as a message, if complex value (obj/arr) then fallback to eventFromException. It will also handle serialization so we don't have to do it here.. Can we move it to the top into the build section?. This sentence (and the one below) sounds kinda confusing. I'd reword it somehow.. What if we'd write it in PascalCase instead? type is always a constructor of the error object. \ud83d\udc4c . It's because data[i].e, is an array of arguments retrieved from onerror handler, where data[i].p is a rejection.reason attribute itself. apply always accepts an array as the second argument. It can be changed to tracekitUnhandledRejectionHandler.call(_window, data[i].p);. We can modify https://github.com/getsentry/sentry-javascript/blob/a6176f513fc4f4173573f9844d05a0867cba08d0/packages/browser/src/loader.js#L183-L200 to store all arguments as well and apply them in the same manner if we want to unify this. I'd change the name to be more precise, something like fallbackType.\njs\nconst fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledPromiseRejection' : 'Error';\nconst fallbackValue = typeof stacktrace.original !== 'undefined' ? `${stacktrace.original}` : '';\nSimple if (stacktrace.original) check would fail for reject(0).. Remove only.. It's impossible to break forEach iteration so return statements are redundant here. We should use for instead which can use break call.. This can be moved to default parameter. if (isArray(obj) || isPlainObject(obj)) would work better here imo.. I wonder why we didnt introduce serialize(stacktrace.original, { normalize: true }) in the first place \ud83d\ude05. suggestion\nbasically, the way we describe it in the docs, you should be fine by just updating it. This is a **breaking** release. suggestion\nsince we removed some methods from the public API and removed some classes from the default export.. This test is odd. It should not have a dsn, yet it says ({ dsn }) \ud83e\udd14 \nAlso sendEvent is async, so it will reject, not throw.. I'm not fully convinced about this SyncPromise stuff tbh. It adds a level of indirection when in reality we could just use the fully procedural code here as well.. Try not to nest promises if possible.\njs\n    this.getBackend()\n      .eventFromException(exception, hint)\n      .then(event => this.processEvent(event, hint, scope))\n      .then(finalEvent => (eventId = (finalEvent && finalEvent.event_id) || undefined));. Not sure why we attach an event_id here if we always overrides it below anyway.. Both comments apply here as well.. It will never be null, as const prepared = { ...event } will always return at least empty object.. We should probably reject it instead. Same here.. No need to return here, but in case we want to do it (we should just return resolve() imo), then we should also return in all eventFromX calls as well.. That's a tad too complicated. It should be somehow extracted.. I'd modify applyToEvent to assign event here and always have just one return at the bottom.. As I'm thinking about it now, is there a scenario where we won't have at least event_id here? \ud83e\udd14 . suggestion\n * Returning a Promise<SentryEvent | null> will work just fine, but better be sure that you know what you are doing.. suggestion\n * Event processing will be deferred until your Promise is resolved.. No point in wrapping promises in try/catch. Double catch can make it hard to track bugs. We already had this issue once with buffers, remember?. Why do we hide Parsers? It could be used in some external frameworks integrations. I think we can just check once for the state.\njs\nif (this.state === States.REJECTED) {\n this.handlers.forEach(h => h.onFail(this.value));\n} else {\n this.handlers.forEach(h => h.onSuccess(this.value));\n}. It can be void. This one is odd, as attaching handler always executes it anyway. What's the point of keeping track of them then?. Duplicated code below. It would be nice to add SyncPromise here as well.. suggestion\n    // We append the script to the body because if you use an `onload` callback it could happen that. suggestion\n    // the `onLoad` of the already injected SDK will be called, which breaks the setup flow.. suggestion\n      // We want to replay all calls to Sentry and also make sure that `init` is called if it wasn't already. That's why it's wrapped inside try/catch, so we don't have to do this :). Done. We can use just event, as it has no new data added (just remove this line and change addEx call and return event. What does it test? There are no assertions. It's partially true. If you pass setTags({}) it will send old tags, as nothing will get merged. There should also be mention about unsetting.. If you pass '' or 0 it will unset as well, so we should either explicitly check for no arguments at all or say If passed any falsy value, user will be unset.. ",
    "mqklin": "@kamilogorek it works for me only if I put captureMessage before captureException (so weird):\nRaven.captureMessage('Something happened', {extra: {some: 'data'}});\nRaven.captureException(error, {extra: {some: 'data'}});\nIf I don't put captureMessage, I don't get {extra: {some: 'data'}} in my captureException. @Kl0tl very nice, thank you. ",
    "nelsonmhjr": "+1\n. ",
    "Sija": "+1\n. Related to #414 and #413 \n. @benvinegar seems legit for me, although I could imagine case where you'd want Raven provider to be available, even without calling .config() \u2014 like setting Raven.debug flag for instance\n. Wouldn't be nicer to have 'em (plugins) in separate namespace, like Raven.Plugins? You could inspect just this namespace to find out which plugins are loaded at the given moment.\n. LGTM :+1: \n. See #413, @benvinegar Is it ready to tackle?\n. Maybe fn = fn && (('__raven_wrapper__' in fn) ? fn.__raven_wrapper__ : fn); would work better?\n. @benvinegar: \ud83d\udc4d for config option \u2014 ideally allowing to filter out unwanted entries by hand (or rather function)\n. @LewisJEllis if I understand correctly JS6 fat arrow => binds receiver to this which should be the case.. @LewisJEllis true! I missed that part \ud83d\ude10 . @anagami AFAIK dist/* files are being built only for releases.\n. See #586\n. No trouble at all, sir! There's nothin' better than a good deed on Monday ;)\n. Rendering objects as expandable tree structures would be nice too!\n. This would be handy as a transport in other environments too (think no internet situations)\n. javascript\n/*! Raven.js 3.2.1 (492f4bf) | github.com/getsentry/raven-js */\nFYI script headers are still pointing to previous version.\n\nUpdate: nvm, I just noticed it's fixed in 265cc07.\n. @benvinegar See http://stackoverflow.com/questions/33305954/typescript-export-vs-default-export & https://basarat.gitbooks.io/typescript/content/docs/tips/defaultIsBad.html for reference\n. @benvinegar did you try:\nts\ndeclare module 'raven-js' {\n  // ...\n  export = Raven\n}\nand later on:\njs\nimport * as Raven from 'raven-js';\n// or\nimport Raven = require('raven-js');\nas per https://github.com/Microsoft/TypeScript/issues/5565#issuecomment-155216760?\n. Duplicate of #711.\n. IMHO this implementation is too naive to be useful. Usually you'd want to throttle only one kind of an error, and not all of them regardless of their type.\n. @benvinegar I agree, good starting point could be simple heuristics based on filename, lineno, colno and function properties.\n. @mscuthbert Same here, I've got one yesterday (Chrome Version: 40.0.2214, Windows 7).\nFull stacktrace below:\nDataCloneError: Failed to execute 'postMessage' on 'Window': function (){var r,o,a=arguments[0],s=arguments[1],u=\"[\"+(e?e+\":\":\"\")+a+\"] \",l=G(arguments,2).map(function(e){re...<omitted>...)} could not be cloned.\n  at _reportEvent(/:1:35652)\n  at eval(/:1:35652)\n  at eval(/:1:35652). @kamilogorek Couldn't extra options be forwarded to the scope (like in the OP's example)?. @HazAT issues linked within the PR description ain't auto-closed (it works only when format matches <keyword> #issue_id), just FYI. Wouldn't it redefine global _ var used by underscore or lodash?\n. Understood.\n. Looks like forgotten debug call\n. @mattrobenolt AFAIK for IE 8 it is, yes\n. debug?\n. let => var. BreadCrumb for consistency should be written as Breadcrumb.. typo: Ravan. ",
    "sodevious": "+1\n. ",
    "jwheare": "@benvinegar the solution looks fine, but it would be better if this was officially supported and documented. I'm happier just having to trust the Sentry team over evaluating a random gist.\n. Actually, a much better solution would be something like Twitter's JS SDK code: https://dev.twitter.com/web/javascript/loading\nSetup a function queue on page load that then gets consumed when the external js has been loaded, replacing the proxy object. And make sure all API calls go through something like a .ready() call to the proxy.\nThis ensures that any call can be queued up before the js has loaded rather than just captureMessage, without having to proxy every function individually.\nI'd love to be able to just load raven.js asynchronously/deferred and not have to worry.\n. Other problems with the gist: it clobbers window.onerror and introduces a few uncontained global variables.\n. It also doesn't make use of the full-featured traceKitWindowOnError function that raven.js uses when it loads.\n. ",
    "vinhlh": "They all have trade-offs, so it would be great if we can document all available strategies, so depend on per specific web application, we will apply different strategies.\nWith async strategy, we should load the script after onload event, instead of loading async only, to prevent blocking onload event, rendering.\n```js\n/\n * Setup Js error lazy tracking\n * - Pros: doesn't block rendering, onload event\n * - Cons: lower quality error reports for lazy errors\n \n * @author vinhlh\n \n * @param  {object} window\n * @param  {object} labJs\n * @param  {string} ravenCdn\n * @param  {string} sentryDsn\n */\n(function(window, labJs, ravenCdn, sentryDsn) {\n  var errors = [];\n  var oldOnError = window.onerror;\nwindow.onerror = function() {\n    errors.push(arguments);\n    oldOnError && oldOnError.apply(this, arguments);\n  };\n  window.addEventListener('load', function() {\n    labJs\n      .script(ravenCdn)\n      .wait(function() {\n        window.onerror = oldOnError;\n        Raven.config(sentryDsn).install();\n        errors.forEach(function(args) {\n          window.onerror.apply(this, args);\n        });\n      });\n  });\n})(window, $LAB, 'raven-js-3.8.1/dist/raven.js', 'https://xxx@domain.com/9');\n``. @benvinegar \nIf we even send requests to Sentry usingprivate` DSN, we still probably get that error, because it's the way the browsers work. \nSentry servers are still able to get these requests but the clients just aren't able to read the response (instead, a crossorigin error).\nWe still have another error when trying modifying the origin to something like file://react-native\nRefused to set unsafe header \"Origin\". Correct @benvinegar . ",
    "kl0tl": "Here\u2019s the snippet we use to queue calls to Raven methods transparently: https://gist.github.com/Kl0tl/ed0a9e74462a2294f4c8842f5389d8ea.\nThe mock could certainly be improved but we don\u2019t need to replicate more functionalities. Object.defineProperty allows us to hook right after Raven attaches itself to the window but maybe the script load event is enough. Would be nice to have an official way to enable this.. ",
    "zanona": "Hey guys, just wondering if there is anything wrong with the way Raygun does that asynchronously?\nI am not sure, but it seems to handle edge cases well? I might be wrong though :). Same error here guys! there are no errors being triggered on the page without sentry, however this same error on raven pops up when activating sentry.\nStack: Web Components\nBrowser: Chrome 54\nRaven Load method: https://cdn.ravenjs.com/3.8.0/raven.min.js\n\nThe bit that is causing the error on Raven is as commented out below. I had to use another alternative which is very odd.\n\n. Thanks @LewisJEllis, that\u2019s very insightful.\nThere are two things that are confusing me a bit.\n\nI am already binding all the class methods to its instance as this on the framework side;\nNo errors are throw without sentry and the functionality works as expected?\n\nIn the end raven error is not blocking any functionality since the methods still works just as fine, but seeing those errors throw in there was a bit strange.\nI will to see if I can reproduce that in isolation and provide you with an example anytime soon.\n. Thansk @LewisJEllis will do.\nI have event tried to wrap the error in a try\u2026catch but it was getting anything from that and the error still being displayed on raven, so that is indeed strange.\nI will hopefully be able to provide a reproduction soon. Thanks\n. That's great! Thanks so much for this.\nThe only shame is that I thought that by only providing User-Agent header it would automatically parse the browser and operating system from there. It seems that's not the case and I need to also add something like the below to the event. Perhaps we have to add the same module that you guys use to parse in order to do this from our end?\njs\n...\nevent.request = {\n  url: 'http://localhost'\n  headers: {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'}\n};      \nevent.contexts = {\n  os: {version: null, name: 'Windows 10'},\n  browser: {version: '69.0.3497', name: 'Chrome'}\n};\nreturn event;. Thanks so much for investigating.\nActually I just spotted that I also had it under tag. I was looking for it in the nice icons that show on the top of the issue as per below. Those will only display if setting the contexts field of the event object, I'm afraid. \n\n. That's great. Thanks so much for the help and speedy response.\nI am closing this since your initial example resolves the issue.. ",
    "pladaria": "This is very simple using a dynamic import. Still in stage3 but supported by webpack.\nWe simply use the promise as a queue. Once fullfiled all callbacks are executed in order.\n```javascript\nconst RavenPromise = import('raven-js'); // async load raven bundle\n// initial setup\nRavenPromise.then(Raven => {\n    Raven.config('url-to-sentry', options).install();\n}):\n// exported log function\nexport const logMessage = (level, logger, text) => {\n    RavenPromise.then(Raven => {\n        Raven.captureMessage(text, {level, logger});\n    });\n};\n```\n. ",
    "kireerik": "Similarly to @zanona I would also prefer to have a simple tracking code like Raygun or Google Analytics has. Here is an example for analytics.js:\n```HTML\n\n\n    window.ga = window.ga || function () {\n        (ga.q = ga.q || []).push(arguments)\n    }\n    ga.l = +new Date</p>\n<pre><code>ga('create', 'UA-XXXXX-Y', 'auto')\nga('send', 'pageview')\n</code></pre>\n<p>\n```\n@benvinegar Does something like this possible with Raven.js? Maybe in the future?. @kamilogorek Sounds great (I don't like the workaround as a solution). No problem!. @MaxMilton Nice one! I have created my own flavor based on yours:\nJavaScript\n<script async src=\"https://cdn.ravenjs.com/3.22.1/raven.min.js\" crossorigin=\"anonymous\" id=\"raven\"></script>\n<script>\n    (function (sentryDataSourceName) {\n        var raven = document.getElementById('raven')\n        , isNotLoaded = true\n        , errors = []\n        raven.onreadystatechange = raven.onload = function () {\n            if (isNotLoaded) {\n                Raven.config(sentryDataSourceName).install()\n                isNotLoaded = !isNotLoaded\n                errors.forEach(function (error) {\n                    Raven.captureException(error[4] || new Error(error[0]), {\n                        extra: {\n                            file: error[1]\n                            , line: error[2]\n                            , col: error[3]\n                        }\n                    })\n                })\n            }\n        }\n        window.onerror = function (message, source, lineNumber, colmnNumber, error) {\n            if (isNotLoaded)\n                errors.push([message, source, lineNumber, colmnNumber, error])\n        }\n    })('https://<key>@sentry.io/<project>')\n</script>\nI also have some question:\n- Is it needed to define the crossorigin attribute on the script tag?\n- Is it enough to pass jsut the error object instead of the other solution?\nWhat do you think? What is the author's (@kamilogorek) opinion on this?. Now by clicking the links I see this is a Sumo related issue.\nI am extremely sorry for creating this issue.\nGood luck with the development of the product!\nI just found it recently and it is excellent.\nP.S.: Oh I just found the stack trace too. I didn't thought that line is expandable as well. (There was no \"+\" sign.). ",
    "MaxMilton": "For anyone interested, I've put up a gist of yet another way to load ravenjs asynchronously:\nhttps://gist.github.com/MaxMilton/e2338b02b7381fc7bef2ccd96f434201\nIt's based on the code by @oroce but with the key differences being I use a regular <script async src'='...\"> tag in the document head for better performance (browsers can schedule fetching the resource earlier) + I don't bother wrapping it in an IIFE and other little tweaks.. @kireerik when you put crossorigin=\"anonymous\" on scripts it allows you to fully capture errors (from that external script) with the window.onerror event. It also prevents the browser from sending credentials with the fetch request, which is typically what you want with 3rd party resources. MDN reference 1, MDN reference 2.\nYou can just pass the error and it will work most of the time. The caveat being old browsers (e.g. Firefox before version 31) don't pass the columnNo or Error Object properties to the window.onerror event. So if you want really good compatibility then you need to do that extra bit. MDN reference.\nEDIT: Bonus tip: turns out when you put crossorigin without any value it's treated the same as crossorigin=\"anonymous\".. FYI, I've updated my previous gist to something that's much more production ready:\n\nlots of comments to explain what's actually going on\nbig clean up + use descriptive variables names (always a nice bonus :wink: )\nwrap in IIFE to not pollute the global namespace\nfix incorrect params passed to error array item\n\nSee the gist if you want to understand everything OR if you prefer a quick copy+paste, here's the minified version:\n```html\n Sentry JS error tracking \n\n\n(function(b,e,c,d){b.onerror=function(a,b,d,f,g){c||e.push([a,b,d,f,g])};b.onunhandledrejection=function(a){c||e.push([a.reason.reason||a.reason.message,a.type,JSON.stringify(a.reason)])};d.onreadystatechange=d.onload=function(){c||(c=!0,\nRaven.config(\"<strong><em>PUBLIC</em>DSN</strong>_\").install(),\nb.onunhandledrejection=function(a){Raven.captureException(Error(a.reason.reason||a.reason.message),{extra:{type:a.type,reason:JSON.stringify(a.reason)}})},e.forEach(function(a){Raven.captureException(a[4]||Error(a[0]),{extra:{file:a[1],line:a[2],col:a[3]}})}))}})(window,[],!1,document.getElementById(\"raven\"));\n\n\n```\nReplace ___PUBLIC_DSN___ with your DSN and paste this somewhere in the head near your closing </head> tag. Or if you're a hipster who doesn't use <head> and <body> tags anymore then just paste it near the top after any critical/app resources (e.g. CSS). Ideally it should be before any other JavaScript so you can capture errors from scripts loaded after this code.\nIn my quick tests there hasn't been any issues so I don't see any reason not to use this over the default synchronous version.\nIf anyone has an idea for a better approach I'm keen to hear it.\nEdit: Sorry for editing this comment so many times. It's at a stable level now. Was fun getting it to this state! :smiley: . ",
    "dalyr95": "Once the sentry library is loaded, error reporting quality is exactly the same as loading it sync? (I assume so, just checking). Also in the docs you might want to add, you can't use Raven till the lib is loaded, maybe provide a callback function in the options so you can set user context etc?. ",
    "lili21": "agree with @dalyr95 . a callback function would be useful. maybe a custom raven load event.. @danielcompton can only get user information through backend api ?. ",
    "xt0rted": "I have a similar request as @dalyr95. Right now the only way to call setUserContext() is to modify the loader snippet which isn't as clean as being able to pass in a callback on the main config object.. My solution was to add 'undefined'!=k.setup&&k.setup(); immediately after the call to .install(), then I added a function called setup to SENTRY_SDK with my post init code.. ",
    "danielcompton": "With the async loader, I was able to set the user context and other info by passing it as a second argument to Raven.config:\njs\n<script>\n    Raven.config(\"https://<mydsn>@sentry.io/<projectid>\", \n      {\"release\":\"0.3.1\",\n       \"environment\":\"dev\",\n       \"user\": {\"id\":\"7b031fa0-32ff-46fe-b94b-e6bc201c3c5f\",\n                \"organisation-id\":\"b1a50c41-b85e-4c50-9cec-c55ff36cf6d1\"}}).install();\n</script>\nI think everything already exists for this, it just could be better documented.. ",
    "panaggio": "Unfortunately nope :( It happened just 3 times, with different users. I'm trying to reproduce, and I'm investigating what I could do to gather more debug information next time it happens.\n. Sentry reports only Chrome:\n\n2 Chrome 31.0.1650.63 (under Windows)\n   1 Chrome 33.0.1715.0 (under MacOS)\n\nThose two Windows users are different users. It didn't happen twice with the same person so far.\n. AFAICS, we make only one use of console.error on that page, and that's all. And yep, it's something like `console.error('foo'):\nconsole.error('Error parsing JSON: \"' + xhr.responseText + '\". Exception: \"' + e);\nCan't see how this could lead to any strange behavior.\nWe use the minified version of jquery-migrate, which makes use of console, but doesn't make any different use of it, besides using console.warn, which is covered by console plugin.\nWe also use http://dygraphs.com/dygraph-combined.js on that page. Reading the code, I can't see any issues there either. It seems to make a \"standard\" use of console too.\n. ",
    "QuentinFchx": "Got the same issue reproductible. Will check if I can get more informations.\nhttps://github.com/getsentry/raven-js/pull/181 works for me.\n. It happens when Raven tries to wrap properties of the jQuery object. https://github.com/getsentry/raven-js/blob/master/src/raven.js#L187\njQueryMigrate uses Object get and set https://github.com/jquery/jquery-migrate/blob/master/src/migrate.js#L40 to warn you when you try to access deprecated properties such as:\njQuery.browser https://github.com/jquery/jquery-migrate/blob/master/src/core.js#L87\njQuery.attrFn https://github.com/jquery/jquery-migrate/blob/master/src/attributes.js#L14\nIf I did not miss the point, not sure we can do anything here\n. It \"should\" not. jQuery migrate just console.warn without modifying the behaviour.\n. The only \"issue\" is that we're sending this to sentry if ever we're using the console plugin :p\n. ETA ? :)\n. It would also be nice if the console plugin would not override the logger property. Or default to console only if no logger property is set.\n. @benvinegar if I may, according to the angular ErrorHandler source code (https://github.com/angular/angular/blob/master/modules/@angular/core/src/error_handler.ts#L51)\noriginalError might be undefined.\nIf you just throw a random error, let's say in a component's constructor, the originalError prop will be empty.\nWhy don't we just send Raven the err passed as an argument?\n. It has been reported on the zone.js project. You can track it here. The issue seems to have been fixed with zone@0.7.6. Can you check and close accordingly?. ",
    "arty-name": "What do you think about replacing iff with if and only if then? This might help poor gals like me who hadn't studied logic or math of philosophy in English. This term doesn't seem to get wide adoption outside of these fields.\n. Great! I'll have to create another PR though since I've already deleted this branch.\n. ",
    "johnbacon": "Take a look at that and see if it's acceptable.\n. A buddy and I were working on a slightly more robust solution. Expect to see it soon!\n. I have no problem moving to a normal for loop and away from unshift. As you stated, this seems to confirm there is still a significant performance difference between unshift and push.\nThe changes will be pushed again soon.\n. ",
    "Stereobit": "Sure. Checkout http://jsfiddle.net/k7uaT/\nYou can add/remove raven to see the problem.\n. ",
    "drd": "Any news on this patch? I was just about to hack raven so I could proxy requests to our sentry server  and it looks like a simple modification of the default transport plugin here would serve me well.\n. ",
    "cellofellow": "Don't want to complain but I need this patch.\n. ",
    "tom-parker": "Is this likely to be dropping anytime soon?\n. ",
    "raimo": "+1\n. ",
    "gmathieu": "Anything we can do to keep this moving?\n. ",
    "realityking": "@dcramer What advantage would a jQuery transport bring over plain XHR?\n. @dcramer I may be a bit slow right now (it's late...) but wouldn't any code size benefit require, that the XHR transport isn't bundled by default either?\n. @dcramer Gotcha, I had forgotten your comment from 2 days ago. Thank's the explanation :)\n. ",
    "TheSavior": "We would really like to see support for custom transport. We are using a proxy to pass these requests through to Sentry and don't want to support the DSN scheme in our proxy.\n. :+1: \n. We would love to see raven-js using a newer version of TraceKit that has better browser support! :+1: \n. @niemyjski Saucelabs is probably your best bet for running the test suite in multiple browsers. I believe it is free for open source Github projects.\n. Excited!\n. We have gotten this as well from a super generic user agent, no special devices:\nMozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\nRaven 3.9.0. We make a bunch of requests to an analytics endpoint as well. We also want to filter those out but want to do that before they count against the 100 breadcrumbs. I'm planning on opening a PR that adds another callback for filtering breadcrumbs.. So I was thinking about this stuff too when I was writing this PR. I actually switched between a few different approaches when thinking about what I would want if I was the maintainer of the project. \nI originally started with breadcrumbCallback but decided that if I was maintaining this project, I wouldn't want to have an API where you could do the same thing in multiple places. Any cleaning of data that can be done in the breadcrumbCallback could be done in the dataCallback by looping over the breadcrumbs. \nIn that way, it feels like a callback to manage the breadcrumbs is a bit different. That's how I ended up landing on following the shouldSend approach that just lets the user filter. \nI'm happy to switch the approach back to filter/mutate, I just want to make sure we get the reasoning right.. That's a use I hadn't considered here.\nHowever, does dataCallback not run in the same event loop as when it is fired? I've seen posts of people who put their application state into the extra interface in dataCallback.. Got it, right. Breadcrumbs fire on actions and build up until an exception occurs. Obviously the dataCallback is called when the exception occurs, possibly well after the breadcrumb was captured. Okay, I understand what you are saying. \nI'll switch the PR to breadcrumbCallback.. Yep, done. Thanks. What do we expect returning a falsey, non false value to do? Does it stick the falsey value into the breadcrumbs array? Would you expect a falsey value to use the original crumb that was passed into the callback? \nI could also imagine throwing if we don't get an object or false since it means the callback isn't built correctly. However, throwing in raven is obviously problematic since that is what tracks exceptions. Throwing in the breadcrumb handler though seems theoretically more okay than other places.. Perhaps another related question is that if we don't want to throw, that undefined would cause it to use the original data object. What should happen if the callback returns a string? What does dataCallback do?. dataCallback looks like it gets used like this:\n```\n        if (isFunction(globalOptions.dataCallback)) {\n            data = globalOptions.dataCallback(data) || data;\n        }\n    // Why??????????\n    if (!data || isEmptyObject(data)) {\n        return;\n    }\n\n```\nwhich means that returning a falsey value uses the original data object. If a string or other malformed object is returned, it will send that to sentry.\nIs this the behavior we want for the breadcrumbCallback?. Great, I'll update.. To be consistent with dataCallback, I'm also using the original value if the callback returns an empty object.. The test below this is for replacing, this test probably shouldn't return in the callback to actually test mutation.. ",
    "ksikka": "What's the security risk - if any - of putting the sentry_secret in the DSN?\n. @dcramer can we fix this by changing the sentry API logic to allow SSL AJAX POST requests without a secret but with an origin/referrer check?\n. @dcramer When the method is POST, we're in this else branch:\nhttps://github.com/getsentry/sentry/blob/53fd3882707e6510c8980b1c92f37b01a71afcc1/src/sentry/web/api.py#L227\nWe assume that the API request is a server-side request, so a sentry_secret is required.\nI'm asking, should we change the API code so that if it's an SSL AJAX POST, the API does not require sentry_secret?\n. ",
    "numaanashraf": "@dcramer @mattrobenolt Any updates on this?\n. ",
    "devel-pa": "I am not using Sentry, only RavenJS.\n. No, is nothing very complex, HTTP/HTTPS.\nI need a regular log of the JS errors from the browser in a text file, near the rest of the server error. \n. I have no sentry account, just testing how it's working for a possible integration. As for data I have to ask my superiors.\nThe exception looks like this:\n\"exception\": {\n        \"type\": \"TypeError\",\n        \"value\": \"line.hasValues is not a function\"\n    },\nIf what I can provide is not enough let's close the issue.\nThanks\n. ",
    "pickhardt": "You're arguing code over configuration. I'm arguing code plus configuration: include useful configuration options, while also giving people the freedom to write their own code. It's true that the dataCallback could do this, but by that argument you shouldn't add any options since they could also be duplicated by dataCallback. In my experience, people don't want to write their own code if they don't have to. They appreciate having the options already there, ready to use.\nAnother argument you make is that most users don't need to filter data from their client-side JavaScript.  Do you have data on this? I also think most don't need to, but it's also likely that a significant fraction would choose to, given the option.\nFinally, common filters are a good idea. Off the top of my head, I'd include options for email addresses, SSNs, and physical addresses.\n. Actually, this should be !== 0. The intent is to filter the query params but not the base URL.\n. ",
    "soroushhakami": "Removing this line solved it for me:\n//# sourceMappingURL=raven.min.map\n. One easy alternative could be to just do\ntarget = elem.outerHTML;\nthat will output the element clicked exactly as is. You'll loose the tree structure - but in my personal experience that doesn't help as much as seeing the full, actual element that I'm used to seeing in my code all the time and therefore more quickly can recognize. \nThat would solve https://github.com/getsentry/raven-js/issues/576 as well\n. Ah I see, makes sense, thanks for the explanation! \ud83d\udc4d \n. ",
    "christophercliff": ":+1:\nFYI, there is a fork published to npm, but it's rather out of date: https://www.npmjs.org/package/raven-js\n@mattrobenolt Any interest in losing the fork and making the main repo CommonJS compatible and publishing releases to npm?\n. I assumed that was a mistake. Why leak the global when you're using a module system?\n. Yeah, I suspect this isn't the best way forward.\n. If the global must stay, I'd be happy if you left it as-is and published every release to npm.\nMaybe a crazy idea: rewrite as CommonJS and use a build tool like webpack to generate the UMD-compatible files for distribution. You could avoid some of these manual compatibility woes.\n. ",
    "clayzermk1": ":+1: for browserify support\n. @mattrobenolt\n\nI need to figure out a way to combine these two or something into something that can be used in both places.\n\nCommonJS :wink:. I think it all boils down to whether raven's dependencies would work browser-side (I don't think they do currently).\n\nAnyone here willing to test when I publish? Or want to give me instructions to test on my own? I don't want to break the public package that others depend on.\n\nI would be more than happy to give it a go! :smile: Testing is easy, npm install raven-js should pull it down, check the package.json that the version matches the code base (make sure you tag the release in git before doing an npm publish).\n. @mattrobenolt Thank you for publishing this! I just upgraded to it and have had no problems building or running it yet.\n. :+1: This patch got browserify working for me.\n. Thanks for the merge!\n. OK, give that latest commit some eyes. I added a global to the AMD section per UMDJS. I think that should do the trick. I don't use AMD so I have no way to easily test the AMD side of things. Do you have an AMD environment to give it a quick run through? I can confirm that it is working with browserify.\n. Nice, thanks for all your help Matt! :beers:\n. Bump on this, any chance we can get these changes merged so I can stop using my fork? :stuck_out_tongue_winking_eye:\n. Thanks for the merge @mattrobenolt!\nHit me up if you'd like help testing, etc.\nCheers :beers:!\n. Just for reference, I had no trouble with a build of master that used the isObject calls using browserify.\nJust for a sanity check, I'll build f6e8cbe tomorrow and check it out on browserify - I don't anticipate any issues.\n. f6e8cbe looks to be working fine here.\n. :+1: can confirm that this is necessary to get this working.\n. Yeah :neutral_face:\nI noticed it and since it was from something I suggested, I figured I'd clob it in here. I have it on a separate commit and referenced the issue from the commit message.\n. https://github.com/umdjs/umd?\n. Specifically: https://github.com/umdjs/umd/blob/master/commonjsStrictGlobal.js?\n. I think anyone using browserify will be fine with https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js which seems a little cleaner and more straightforward. What would you like to support: CommonJS or browserify? From the issues, it seems as though most people are interested in browserify.\n. ",
    "moretti": "Any update? Essentially you just have to merge the PR that @clayzermk1 submitted (https://github.com/getsentry/raven-js/pull/261), remove \"private\": true from package.json and update the npm package.\n. Yeah I agree, it's confusing, it would be nice to figure out a way to combine them! :smiley: \nI can test the package once it's published, I think it should work fine, though.\n. The simplest way for combining these projects would be to define two different entry points: one for node.js and another one for browsers. This can be done by editing the \"main\" and the \"browser\" field in package.json: \nhttps://github.com/substack/node-browserify#browser-field\nHave a look, for example, at superagent's package.json:\nhttps://github.com/visionmedia/superagent/blob/master/package.json\n. ",
    "twolfson": "For what it's worth, since the opening of this issue I now prefer to always separate raven from the rest of my JS. If there is anything that would cause the compiled JS to fail and block raven from getting set up, then that is bad. As a result, I usually put it in its own script tag and initialize it before the other JS.\nhtml\n<script src=\"raven-with-init.js\"></script>\n<script src=\"index.min.js\"></script>\n. ",
    "piuccio": "@mattrobenolt any update on this?\nAll you need to do is\ngit checkout 1.1.16\nnpm publish ./\nThis will publish 1.1.16 on npm, the code will be exactly the same as the github tag.\nYou are already a maintainer of raven-js it should work even if the repository is different.\nWould be nice if you could publish 1.1.16 and then work on next versions or merging with raven-node. It would be very useful for many of us.\n. Thanks @mattrobenolt \n. Oh and please keep in mind that npm has to be published manually. It's still on version 1.1.11\n. please update npm from time to time, I'd appreciate :smile: \n. ",
    "grrowl": "+1 would be great if npm could be updated. We just pushed some code using .setUserContext(), a function which isn't documented against a version, but is unavailable while relying on the npm published version.\n. Understandably. Basically it should be CommonJS (the fork has removed noConflict support but this isn't neccessary -- jquery has both noConflict and AMD/CommonJS support), and will require some changes to package.json.\nI appreciate not breaking compatibility and measuring twice, cutting once. Good luck, hopefully a contributor can kick in some time if you need it.\n. ",
    "fson": "@dcramer @mattrobenolt I'm currently using Raven.js installed from npm with webpack, so I could chime in with some experiences. I installed Raven.js 1.1.16 directly from GitHub (so I'm not using the fork published in npm, which is outdated).\nIssues I had to work around:\n- Latest release didn't have the main field in package.json and the name field was raven.This has been fixed in master since then, but a new release is needed.\n- webpack understands even AMD modules, so this was not really an issue with it, but you'll want something like UMD wrapper to ensure compatibility with CommonJS, AMD and globals.\n- Make sure that Raven.js doesn't set any globals, when CommonJS or AMD is used. UMD wrapper should take care of this. I had to resort to noConflict as a workaround.\n- Expecting this at the root scope to be window. This does not work when using a module system. Because Raven.js depends on the actual window global, that could fixed by removing this this wrapper and referencing window directly. The issue is caused by this wrapper:\njs\n;(function(window, undefined){\n  // ...\n})(this);\nWorkarounds for using with webpack\nThese issues are quite easily fix. In the meanwhile, it's already possible to use the current version Raven.js with webpack and npm:\n- install from GitHub:\nnpm install getsentry/raven-js#1.1.16 --save\n- use imports-loader to define this \u2013 put this in module.loaders:\n{\n  test: require.resolve('raven/dist/raven.js'),\n  loader: 'imports-loader?this=>window'\n}\n- if you are using the latest release version (1.1.16) from GitHub, you'll need to add an alias to compensate for the missing main field and name being raven and not raven-js:\nresolve:\n    alias: {\n      'raven-js': 'raven/dist/raven.js'\n    }\n  }\n- call noConflict so you don't expose Raven as a global:\nrequire('raven-js').noConflict();\n. ",
    "chromakode": "Works great, thank you.\n. Thanks! :+1: \n. ",
    "j-manu": "Making hasJSON a function solves that right? isSetup is called from install() and send() both of which will be called only after both raven.js and json2.js is parsed (since they are in a single file). So the order of including json2.js doesn't matter. \n. @mattrobenolt I just did :)\n. ",
    "skovhus": "Works for me. @mattrobenolt lets close this issue.\n. I'm getting \"undefined\" for Firefox and Chrome 36.0.1985.103 when I try this out in the dev tools.\nThe URL to Sentry looks something like %2C\"exception\"%3A%7B\"value\"%3A\"undefined\"%7D%2C\"message\"%3A\"undefined\"%2C\"e\n. I agree. Does not make much sense besides testing... : )\n. Maybe. People can always use captureMessage to test their setup.\n. I understand. :+1: \n. @mattrobenolt so I cannot reproduce the error, but as you see some users with different browsers get this error. The message shown in Sentry is Javascript error: Script error. on line 0, so I guess that's the exact error message. And as the Script error in L66 is not a regexp, our error is not the ignoreErrors list.\n. @mattrobenolt But I guess I can get the message from our nginx if you want it. But shouldn't it be the same as reported by Sentry?\n. I see these variations:\nJavascript error: Script error on line 0 (IE)\nJavascript error: Script error. on line 0 (all the other browsers)\n. For once, the feedback from IE seems sane... : )\n. #224 \n. @mattrobenolt sure, something like this?\n. @mattrobenolt two things:\n1)\ni realize now that when adding a string to the whitelist filter, you don't start the regexp with a ^ or end it with $, e.g. the string can appear anywhere in the exception message. So:\nglobalOptions.ignoreErrors.push('Script error.');\nglobalOptions.ignoreErrors.push('Script error');\nIs actually covering ... Javascript error: Script error on line ... error already. But also This is a script error that should be handled...... : /\nIs this deliberately? It is rather confusing. Maybe this also confused when writing the two rules as the first rule is covered by the second one.\n2)\nThe thing I don't understand is why these errors still end up in Sentry... Testing locally by throw new Error('Javascript error: Script error on line 0')shows that the current default whitelist in raven-js works, but in production it ends up in Sentry. Any thoughts? \n. @mattrobenolt Any comments?\n. This is a non issue. The convention for the sourceMappingURL line is that it starts with single line comment (e.g. //). Example http://backbonejs.org/backbone-min.js \nTake a look here https://github.com/gruntjs/grunt-contrib-concat\nHope it works for you. \n. @mattrobenolt I think we should close this.\n. Look interesting... But some unit test could be awesome. :+1: \n. Let us brainstorm a bit about this... :thought_balloon: \nSo Raven-js needs a registry of all installed plugins. And a plugin needs a common interface. It could be something like this:\n- unique name for the plugin for referencing\n- install: function(window, Raven)\n- uninstall: function(window)\nThen in a Browserify scenario, it could look something like this:\n``` javascript\nvar raven = require('raven-js/raven.js');\nvar plugin1 = require('raven-js/plugins/1');\nvar plugin2 = require('raven-js/plugins/1');\nvar options = {\n    ignoreErrors: [],\n    plugins: [plugin1, plugin2]\n}\nRaven.config('https://public@getsentry.com/1', options).install()\n```\n@mattrobenolt something like this?\n. The question is if we will continue with custom build where plugins are 'baked in'. If we do then the plugins list would already be prepopulated.\n. Looks like your comment got removed by some XSS detector... :)\n. Currently when including one of the custom builds with raven and some plugins, the plugins are automatically loaded, right? In the new solution we only want them to be loaded when raven is being installed.\n. Ok. So what is your take on the plugins in a non-browserify world? I guess the custom builds where everything is included is pretty nice.\n. Makes sense. : )\nOne challenge with package managers might be to get a reference to for example Backbone, as it might not be saved to window.Backbone. In some of the cases it might be necessary to pass in reference directly to the plugins. But we should be able to extend the outlined plugin system with this.\nBut I agree @mattrobenolt , we would start with a first plugin version where we support that plugins can be uninstalled together with Raven-js. But let's get some input on the package manager use cases. \n. Yes, it might hide too much.\nSo either we are explicit and make the four rules regular expressions. In my eyes that is the correct thing to do... We will not be hiding anything else that the four cases.\nElse we could be less strict and just add Script error as a string. That would be more in line with the current behaviour. Very generic, but may hide some errors that should not be hidden.\n. A pull request for being more explicit https://github.com/getsentry/raven-js/pull/292\nIf you want to merge it, I will try it out on our site and check if we get some new external domain/CORS errors that the old less strict default ignoreErrors list filtered out. \n. :+1: \n. Thanks :smiley: \n. What are we trying to solve here? sendBeacon is for sending data to a web server prior to the unloading of the document. Although that is great for analytics where we want to avoid a navigation delay, I'm not sure it makes sense in the context of Sentry-js. \nhttps://dvcs.w3.org/hg/webperf/raw-file/tip/specs/Beacon/Overview.html\n. Sure, it is worth to try out. : )\nBut I don't like the missing support for Safari and Internet Explore. \n. ",
    "pkuczynski": "true ;)\n. Good job! :+1: \n. I was thinking about it for a while, as I originally wanted to extend plugins/jquery.js and add this pattern there. However I am not entirely sure if people would sometimes not treat an ajaxError (like 404 or 403) as one of the expected and valid responses and react to it accordingly. Then we would unnecessary attempt to record an error. In the other hand users could whitelist URLs to avoid this or we could provide an extra option to enable/disable global Ajax error handling\nWhat do you think? I could submit a patch once you agree on the right solution...\n. @mattrobenolt so what do you think?\n. Works beautifully! Thanks :)\nYou could also add this in the docs.... Beautiful! Thanks :). ",
    "mlb5000": "I'm not entirely sure where this originated; it may have arisen from the use of the Ember.js plugin.\n. Ya, it happens if you were to do something like this:\nEmber.RSVP.configure('onerror', Raven.captureException);\nIn that case the message is an XHR object and not an Error, hence the confusion.\n. Ya, sorry for the ambiguous message.  This was closely related to #209 where it never occurred to me that TraceKit just does nothing when the provided object isn't an Error object.\n. Nice, thanks.\n. Ya, it's run from the console.  captureMessage works just fine from there, but captureException doesn't.  Despite that, errors raised within the site and dealt with the same way don't dispatch when captureException is called either.\n. This also does nothing but rethrow the exception:\nRaven.TraceKit.report(new Error('this is a test'));\n. This was the result of the Ember.RSVP \"error\" object not actually being a Javascript Error, but was instead an XHR object.  Needless to say TraceKit took one look at it and threw it away.\n. I'm honestly not sure what the best way to handle this is.  Maybe print a warning to the console so people will see it during development?\n. This seems to be an issue with requirejs...does this not work when require is present anymore?\nUncaught Error: Mismatched anonymous define() module\n. This appears to have broken as of v1.2.0\n. @benvinegar It's probably not the desired solution, but removing the entire else if section that detects define from the minified block at the top allowed me to inject into the page directly. Testing now whether or not it actually functions as expected.\n. @benvinegar ha, I knew someone would say it! It's really just for the benefit of injecting into arbitrary pages, some of which may have requirejs. I do agree it's a bit odd to not be able to drop it into the page. I assume the call to define in the top block does work when loaded properly from requirejs?\n. ",
    "sberney": "I fail to see how running at the console would be different than any other time. Isn't it a function that sends a message to the server? If not, it's clearly not anything I want to use.... ",
    "foxx": "Sorry posted from wrong account.\nPossibly something to do with the way that chai.js generates stacktrace.\nHere is the result of an Error();\nError: LOL\nmessage: \"LOL\"\nstack: \"Error: LOL\u21b5    at <anonymous>:2:7\u21b5    at Object.InjectedScript._evaluateOn (<anonymous>:641:39)\u21b5    at Object.InjectedScript._evaluateAndWrap (<anonymous>:580:52)\u21b5    at Object.InjectedScript.evaluate (<anonymous>:495:21)\"\nget stack: function () { [native code] }\nset stack: function () { [native code] }\n__proto__: d\nHere is the result of an chai.AssertionError;\nssertionError {message: \"expected false to be truthy\", showDiff: false, actual: false, expected: undefined, stack: (...)\u2026}\nactual: false\nexpected: undefined\nmessage: \"expected false to be truthy\"\nshowDiff: false\nstack: \"AssertionError: expected false to be truthy\"\nget stack: function () { [native code] }\nset stack: function () { [native code] }\n__proto__: AssertionError\nconstructor: function AssertionError(message, _props, ssf) {\nname: \"AssertionError\"\ntoJSON: function (stack) {\n__proto__: d\nNotice how stack seems to contain different info\n. Stupidly, using chai in production code.. however a colleague pointed out to me that it's not really designed for that.. so I've gone ahead and replaced it with a simple assert() wrapper. Probably can be marked as an invalid bug, purely on the basis that it's not really something that should be used in prod.\n. Agreed. Thanks for the quick reply btw, you guys do great work, much appreciated :)\n. ",
    "DouweM": "In line with the setUser method, I'd go with setExtra and setTags. Otherwise, :+1: on the feature!\n. API and semantics (merge rather than overwrite) based on raven-ruby.\n. Seems to behave the same way: https://github.com/getsentry/raven-python/blob/683acffedc322f3f6ede606490d0e03e9a3a0b74/raven/base.py#L427\n. Or hmm, it doesn't, it completely overrides the extra/tags, instead of adding onto them. That's different from how the Ruby version behaves.\n. All right, I'll change that then. Annoying how the Ruby version don't adhere to that then :/\nI don't mind the renaming, but shouldn't we rename/alias setUser to setUserContext then as well?\n. All right, changes coming up in a minute, currently trying to whip up a backbone plugin :)\n. Changes made.\n. You should ping the Ruby guys their API is nonconforming by the way ;)\n. @dcramer Name-wise, yes, but check the source! In the Ruby implementation, new tags are merged with existing tags; in the Python implementation, new tags overwrite existing tags!\n. Already taken care of :) https://github.com/getsentry/raven-js/pull/219/files#diff-a4cb6d8063a6aea4bba2d6f10472b5f4R316\n. This is really something to consider for the canonical Python API, but do we want to be able to not override, but add to the extra attributes?\nI'm setting some generic extra attribute at Raven setup:\njs\nRaven.config(dsn, {\n  extra: {\n    request_id: \"<%= request.headers[\"X-Request-ID\"] %>\"\n  }\n}).install();\nAnd then later, depending on the exact place Raven is included, I'm setting some more extra attributes that aren't necessarily (known to be) available at config-time:\njs\nRaven.setExtraContext(\n  {\n    accommodation_id:   \"<%= current_accommodation.id %>\",\n    accommodation_host: \"<%= current_accommodation.host %>\"\n  }\n);\nRight now, the last call overrides the first, meaning request_id is lost, but I'd like the latter to append onto the existing extra attributes. Note that this is already how the Ruby Raven behaves, where I use a very similar scheme of two Raven.extra_context calls.\nIf we don't want to make this the default, how about adding an extra options object like { merge: true } or just an extra merge boolean arg to the setExtraContext and setTagsContext methods? This would be backward compatible, and could be added to all implementations that currently only do override.\n. It's probably rare in the larger scheme of things, but because of the sort-of layered way our app is built, I would really appreciate a merge option. I also use this feature with the Ruby version, and I'd imagine it'd be useful with Python web frameworks as well.\n. Just include this in the page this after Raven and Backbone and you should be fine. \nI've tested it with our fairly large Backbone app and it seems to work great. It's possible I've forgotten to cover some edge cases, but it definitely shouldn't break anything.\n. The function builder looks nicer, but you broke it! Watch closely what happens with callback, _callback and callback._callback. Raven.wrap() should still wrap callback and oldOn should be called with the new wrapped callback.\n. Fixed version:\n``` js\nfunction makeBackboneEventsOn(oldOn) {\n  return function BackboneEventsOn(name, callback, context) {\n    var _callback = callback._callback || callback;\n    callback = Raven.wrap(callback);\n    callback._callback = _callback;\nreturn oldOn.call(this, name, callback, context);\n\n};\n}\n```\nI went the verbose if/else way because of the jquery plugin btw, not because I preferred it, but this case is somewhat more straight forward than the one in the jquery plugin.\n. Looks good to me!\n. ",
    "Yogu": "Whow, that was quick. Thanks!\n. ",
    "amk221": "Yes, I did try it and it worked, but I'm not 100% sure of the concequences in other browsers\n. ",
    "kylezeeuwen": "I just had same error and fixed by adding raven-js to the list of files downloaded in your karma config file:\nfiles: [\n .... \n 'http://cdn.ravenjs.com/1.1.16/angular,jquery,native/raven.min.js'\n],\n. and now Im getting a full test pass but one error line per test:\nERROR: 'Error: Raven has already been configured'\n:)\n. Hi @silentFred , it was 5 months ago so I don't really recall what my solution was, but I have found this snippet in our karma \"setup utils\" library that apparently I added in Oct 2014 that looks relevant:\n```\nloadApp: () ->\n  addRavenErrorStub = () ->\n    window.Raven =\n      config: ->\n        install: ->\nbeforeEach addRavenErrorStub\n  beforeEach window.angular.mock.module ''\n```\nThis is written in coffeescript, but basically says before loading your app replace the window.raven object with a stub that has a config function, and that config function returns an object that has an install function, which does nothing. That should stub out raven for you in your karma tests. \nHTH\n. ",
    "silentFred": "@kylezeeuwen did you manage to get rid of 'Error: Raven has already been configured'?\nI am trying to exclude raven from my karma tests but not having any luck.\n. @mattrobenolt cool, thanks. I'd still want to prevent loading raven in tests. I would come in handy when excluding other sources as well that act up during tests. Any suggestions?\nAt the moment i'm trying to exclude raven using config:\n \nexclude: [].concat(\n                clientApp + 'util/raven.js'\n            )\n\n. ",
    "Dianna": "To elaborate on kylezeeuwen's answer for anyone who sees this down the line, you can put this function:\nfunction sharedTestSetup() {\n  beforeEach(function() {\n    window.Raven = {\n      config: function() {\n        return {\n          install: function () {}\n        };\n      }\n    };\n  });\n};\nin a separate file and load it in your karma.conf.js before your spec files. Then you can call sharedTestSetup() in any tests (within the describe function before any other code) that the Raven error is an issue. I'm not sure if it's the most elegant solution (I'm fairly new to karma+jasmine), but it's about as dry as I could make it.\n. ",
    "okonet": "Related to #257 \n. Related to #257\n. The problem is that the API docs are for the version 1.1.16, where the setUserContext method is documented. If you'll install a version from npm, it will throw an error.\n. You can use npm packages in your client-side for a quite long time now thanks browserify and webpack\nThere is also a way to change an npm package owner: just write to npm orgs and claim it should be official one.\n. Regarding management: package.json should become a main property with the relative path to the JS file which should be included. Should I create a PR?\n. ",
    "thomasbachem": "I guess this is a duplicate of #200.\n. ",
    "hughes": "This is somewhat related to #105 and might be why @bobbyrenwick was still ending up with raven handling.\n. Wonderful thank you!\n. I also noticed this today. Confirmed 1.1.19 works and 1.1.20 is broken, using the PhantomJS 1.9.8 browser.\nTypeError: 'undefined' is not a function (evaluating globalOptions.includePaths.test(normalized.filename)')\n. A few more details:\n- This is happening in my integration tests, where I don't actually call Raven.config since I don't need error reporting. Maybe what's most unexpected here is that raven is doing anything at all\n- The angular-raven package is present in the app\n. Yeah, angular-raven will run exceptions through Raven.captureException regardless of whether raven has been configured.\n. While the Q.includePaths.test error is now gone, it seems to have been replaced by a problem with globalOptions.ignoreErrors.test(message) at https://github.com/getsentry/raven-js/blob/master/src/raven.js#L618\nUncaught TypeError: globalOptions.ignoreErrors.test is not a function\n. Raven.captureException('foo') -> shows Error: Raven has not been configured.\nRaven.captureException(new Error('foo')) -> shows Uncaught TypeError: globalOptions.ignoreErrors.test is not a function\n. ",
    "zaizhuang": "Sure works for me \n. ",
    "TvoroG": "Did I correctly understand you?\n. OK, I'll do it tomorrow :)\n. ",
    "jeppebemad": "Cool - thanks :)\n. ",
    "sekimura": "hi there. I'm the one who use Raven-js with angular. https://github.com/gdi2290/angular-raven this Readme page helped me and had enough info to configure it correctly.\n. @cerdman https://github.com/getsentry/raven-js/blob/master/src/raven.js#L724 there is Raven.isSetup() to check if Raven is configured or not. Although I am not sure how it could be helpful to configure angular-raven plugin.\nI wonder if adding a link https://github.com/gdi2290/angular-raven to docs could be enough or not. Thoughts?\n. ah. gotcha. I feel you. I just picked up an easy task which I can contribute to.\nIf you're not comfortable to push the package to npm using \"private\": true in package.json could be a good idea too. It won't publish it with that option. Also, I believe npm has a command to unpublish it. \nCheers!\n. ",
    "cerdman": "I am willing to help however as this error is insanely annoying in headerless testing (only place i get it) and i really dont want to mock/stub the entire ravenjs lib...\nIf I figure out a workaround to check for Raven already being config'd in angular.js plugin in the context of window shall I pr?\n. ",
    "jpw": "Thanks for having a look! :)\nThis is in the latest Chrome, Version 36.0.1985.125 on OS X.  Sadly it's not somewhere you can see.\nI'm not sure how to use the unminified raven-js source with it's unminified jQuery plugin, but your line number guess looks correct -- in the minified source it's;\ncaptureException:function(a,b){if(!(a instanceof Error))return O.captureMessage(a,b);\n...the following console tinkering seem to illustrate what's going on;\n```\n\ntry{var v=new Jasdfasd;}catch(e){ console.log(e instanceof Error)}\n< TypeError: Expecting a function in instanceof check, but got #\ntry{var v=new Jasdfasd;}catch(e){ console.log(e instanceof ReferenceError)}\n< true VM14173:2\n< undefined\nReferenceError instanceof Error\n< TypeError: Expecting a function in instanceof check, but got #\nReferenceError\n< function ReferenceError() { [native code] }\nError\n< Object {init: function}\n```\n. Aaargh yes, I've just found something clobbering Error in the code base facepalm\n\nSorry for any trouble!\n. ",
    "nihn": "Hmm, maybe its stupid question but could you tell me in what form should I pass server adress to Raven.config to avoid invalid dsn error and pass errors to django? :) \n. Thank you very much :).\n. ",
    "joostdevries": "@robinwassen Let me know if you're opening/maintaining a fork, I'd be happy to help out\n. Here's an example of IE9. I have to say the script is hosted on a different hostname so maybe if I change some CORS headers I get better results. (although I thought IE did not respect CORS issues for scripts)\n\n. I'll try to get to it this week.\n. @mattrobenolt was already working on docs, will now add a test and change the name.\n. @mattrobenolt Added a test with 2 assertions, one for the default value and one for a custom value.\n. just a sec, i'll ammend\n. done.\n. VERY MUCH :+1: on this. One thing I noticed is that the failed promise is actually also propageted to Ember.onerror (at least for my app) so you might need to implement the same logic there.\n. fixed.\n. ",
    "hariombalhara": "When is this getting tagged ?\n. ",
    "joeyespo": "Just ran into this too.\n\nThe server has a hard limit of 1000 chars, but realistically, if you're sending a 1000 char message, you're likely doing something wrong.\n\nSure, that's probably true. But we lost some crucial information from an error that came from a 3rd-party library because of this. Why arbitrary limit it to 100?\nWhat if you set the default to the 1000-character limit from Sentry, and then make a note in the docs explaining why long messages are bad and that they should be investigated. Discovering this limitation after an error with a long message occurs is no picnic.\n. @dcramer Thanks for the response.\nI do agree with that. Like I said though, this came from a 3rd-party, not our own code. Problems inevitably happen when you set arbitrary limits on otherwise unbound data. At the same time, I understand why Sentry has these limits. What I have issue with is this JS library's 100 character max, which is yet another limit, and a 10x decrease at that.\nTo battle random production fires with code that's mostly out of your control, client libraries really shouldn't be setting their own opinionated limits, but rather allow the maximum the backing service provides. That will decrease the probability that crucial information is lost.\n. @dcramer :thumbsup: Thanks for taking the time to look into this. I didn't realize messages got dropped if they were too long (and that the client can't really know how long to make it, which is why it's set to a safe 100 characters). That's a good practical reason to keep it until the POST transport is available to match Sentry's defaults without the risk of losing anything.\n. :+1: \n. For me it was to allow running locally without needing to set the SENTRY_DSN environment variable.\nI worked around it with\njs\nvar sentry = null;\nif (Ember.ENV.SENTRY_DSN) {\n  sentry = Raven.config(Ember.ENV.SENTRY_DSN).install();\n}\nand then check and use the sentry variable rather than the Raven global for manually capturing exceptions and messages. Although perhaps this is the better way to do it.\n. The sentry_data URL parameter looks like this\njson\n{\n  \"project\": REMOVED,\n  \"logger\": \"javascript\",\n  \"platform\": \"javascript\",\n  \"request\": {\n    \"url\": \"http://localhost/#/admin\",\n    \"headers\": {\n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\"\n    }\n  },\n  \"exception\": {\n    \"value\": \"undefined\"\n  },\n  \"message\": \"undefined\",\n  \"user\": { REMOVED },\n  \"event_id\": REMOVED\n}\n. No idea. Let me see what I can do.\nIs there some kind of dummy SENTRY_DSN I can test with?\n. Perfect.\nI forgot to mention. We're using Bower, not the CDN, to pull in the library. It also minifies and bundles raven with our other dependencies to be served as one unit. We're also in the process of switching to Ember-CLI, which does this automatically out-of-the-box.\nWould that be causing the library to break?\n. Ok. I'll set up a new Ember CLI project and see what happens.\n. Hmm. Works fine with Ember-CLI.\nGoing to close this for now since we're migrating to that. Reproducing might take a lot of work since it's not quite a small app. I'll re-open if we continue to see this after the migration.\nThanks for guiding me through this.\n. I tried that originally. You'll still get [object Object] in these cases since some libraries are calling reject with an object.\n. I just simplified this a bit by using captureMessage instead of making a new Error. The stack trace was just Ember's stack trace, so that wasn't really helping anyone by sending it to Sentry afterall.\n. @mattrobenolt Haha, I'm sure someone will. Such is continuous improvement. Thanks!\n. No prob :smiley: \n. Thanks, @benvinegar!\n. @benvinegar Yeah, it seems like noise at this point. Raven should be loaded before your application code so an initialization bug doesn't slip by, so this documents how to do just that.\n. > You can still use Raven.js + CommonJS using a bundler (e.g. webpack/browserify), and still initialize it before your application runs.\nGood point. I'm sure there's a better way than what I have here.\n. Pretty sure. I wouldn't be able to document a custom build tool here very well anyway.\n. Ember CLI actually uses Bower. Fixed in 1bece626cf6717736443b965ab1d2ce48e80dc49. \n. I squashed this fix btw and rebased the PR onto latest master.\n. ",
    "motherwaym": "I'm not sure this is a big issue as I'm pretty new to JS error tracking and I'm not sure I need a stack trace from an AJAX callback. I just wanted to report my findings.\nNow adding the jquery plugin and throwing an error gets me a stack trace:\n$('#ajax2').click(function(e) {\n    $.ajax({\n        url: '/doesntExist123',\n        error: function(xhr,settings,errorMsg) {\n            throw new Error(errorMsg);\n        }\n    });\n});\nyields:\n```\nStacktrace (most recent call first):\nat error (/_display/:55:13)\n  at wrapped (/1.1.16/jquery,native/raven.js:1279:17)\n  at fire (/jquery-1.9.1.js:1037:5)\n  at self.fireWith (/jquery-1.9.1.js:1148:7)\n  at done (/jquery-1.9.1.js:8076:5)\n  at callback (/jquery-1.9.1.js:8598:8)\n```\nI'm not really clear on what the jquery plugin is supposed to accomplish, other than helping in this case. Perhaps you can shed some light on that.\n. ",
    "jaketlarson": "4+ years later.. is it possible to start using another mechanism, perhaps console.trace?\nNot sure if the exceptions thrown when .caller is called could actually affect page execution but it is a bit noisy.. @kamilogorek ah okay, wasn't aware that IE10 required support.\nCould we remove 'use strict' from the output bundle in this case, until we can avoid errors due to .caller?. ",
    "Poplava": "So, I've tested another variants...\nUncaught Error: hello username UserView.js:23\n    Marionette.ItemView.extend.events.click #someId UserView.js:23\n    jQuery.event.dispatch jquery.js:4641\n    jQuery.event.add.elemData.handle\nSame problem.\nThis regExp is for a narrow usage :(\nWe need to improve it.\n. I realized that https://github.com/getsentry/raven-js/commit/8d1cdb43d26b27d72b1d7314b5c697f4d9bc044d#diff-05367d6a2553cabeca57c6ca111093fcR634 commit fixes this issue for chrome variable.\nNeed to fix it for gecko\n. Pull request: https://github.com/getsentry/raven-js/pull/252\n. Sure. I'll write tests. I found all possible types of FF stack traces. It will be easy. mb I'll do on this weekend.\n. ",
    "dancrumb": "Ack... I guess I missed lines 681-682 and 686. I'll rework the clone.\n. Or... I could scratch the clone entirely and just trust users not to mess around with the internals of what they get back... your call really... \n. So, a specific use case is the console plugin. I don't want it logging 'info' messages to Sentry. Thus, I want to pass it an ignoredLevels array.\nextraOptions is a fine approach and way simpler :D\n. Cool... I'll use that as a workaround for now and then create a more complete pull request for sensibly supporting plugin configuration\n. Since Raven is designed to run in entirely unknown environments then I\nthink the number of globals should be limited to the absolute minimum.\nWhile I see where you're coming from for with regard to a general logging\nconfig, in the browser, your pretty much limited to console for out of\nband logging (i.e. not writing to the document.\nI think you're right that it's a little sketchy. We're relying on users\nglomming a configuration object onto Raven. However, the plugins are a\nlittle loosey goosey at the moment anyway: no documentation of specific\nplugins or the general plugin framework.\nI'd be happy to spend some time on that, but right now, I'm keen to just be\nable to tweak the console reporting so that I don't get rate limited to\noblivion\nOn Aug 28, 2014 5:53 PM, \"Matt Robenolt\" notifications@github.com wrote:\n\nJust throwing this out there for discussion? Is it a bad idea to use just\na magic global for this? Or is that not a great idea.\nI'm imagining a general \"logging config\" or something like exists in other\nlanguages.\nI also don't write JavaScript much, which is why I'm asking. This just\nlooks and feels really sketchy and I'm not sure of the best practices.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/251#issuecomment-53816800.\n. I created https://github.com/getsentry/raven-js/pull/328 to replace this\n. Why was this closed? I have this problem as well. Thanks... That's what the issue was \ud83d\ude00\n\nOn Mon, Jan 29, 2018, 03:21 Kamil Og\u00f3rek notifications@github.com wrote:\n\n@dancrumb https://github.com/dancrumb make sure that you're actually\ntalking about raven-js.\nRaven-node doesn't have those methods, where raven-js does \u2013\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L593-L597\nIt'll be unified in the next major version.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/1055#issuecomment-361185240,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AANhT_k3_FmFW3XjRHXhvwbr4wtaj70Vks5tPY2agaJpZM4PjyYZ\n.\n. \n",
    "hugomrdias": "would be nice to remove private = true from package.json \n. yeah i saw that package, with this PR raven will work with npm and since this repo is the official one we could ask nicely for that package to be removed. \nand yes ppl use npm to install raven especially with more and more ppl using browserify and commonjs to build client side apps. instead of using bower and npm we can just use npm for everything.\nremoving private = true would be nice even without having the repo submitted to the npm registry, since we can use github urls directly to install raven.\n. @mattrobenolt can you commit the dist files pls ?\n. ",
    "wheresrhys": "@mattrobenolt Could you please do a 1.1.17 release with this fix in it.\n. Fair enough. A few questions arising from that though:\n- Our main pain point with sentry is the poor stack trace/context in ie9 and below. Will upgrading to v3 improve this?\n- I'm not sure if it accounts for much of the code increase, but the user feedback feature, IMHO, should be a plugin. I can't see any organisation wanting to use it without making a conscious decision to opt in.\nOn the other hand, breadcrumbs looks like an excellent feature, probably worth the extra kb by itself.\n. Thanks for the info. Fell a lot more confident about the upgrade now :smile:\n. ",
    "fixe": "Setting Raven.debug to false fixes my issue. Don't know if anyone would benefit from the changes that I've made so I'm closing this PR.\n. ",
    "michaeldjeffrey": ":+1: \n. ",
    "triblondon": "Could you consider adopting the change in https://github.com/getsentry/raven-js/pull/206/files#diff-a4cb6d8063a6aea4bba2d6f10472b5f4L7 as well, otherwise it won't work with browserify.\n. ",
    "bradvogel": "I guess this feature request is just asking to suppress that error message if debug: true. Otherwise I need to do:\n```\nvar clientDSN = MyEnvironment.isLocal() ? false / Disable / : 'https://@app.getsentry.com/30415';\nRaven.config(clientDSN, {});\n// Suppress the 'Error: Raven not configured' when disabled on localhost.\nRaven.debug = false;\n// Install after 'debug' has been disabled.\nRaven.install();\n``\n. Seems strange then that debug is enabled by default?\n. @nicbou How are you redirecting logging to the console when developing locally? Comment from https://github.com/getsentry/raven-node/issues/5#issuecomment-5854977 seems to indicate this is out of the scope of Raven and we should create a wrapper library.\n. Hi Ben :). The throw object is actually out of our control. It's throw by third party code running on the page. So ifbadfile.jsis throwingCustomError, it's automatically getting forwarded to Sentry, regardless of us usingwhitelistUrlsto try to filter out _all_ errors frombadfile.js`.\nMy thought is that the window.onerror handler should filter all incoming exceptions through whitelistUrls before determining if they're a proper Error object. Right now it gets passed to captureMessage which is exempt from the whitelistUrls filter.\n. Ok I see. But the bug makes sense - right? I just need a way to suppress all errors from third party scripts from making it into Sentry.\n. :)\n. ",
    "RestlessThinker": "Hi Matt,\nI upgraded to the master branch, yes the response is a lot more helpful\nnow.  Can you help figure out why Origin and Referer isn't getting\nattached? After some digging it's not an XHR request and it seems it gets\nsent from an image src which is not attached to the dom so would it not\nsend those headers? Thanks and I look forward to your reply!\nOn Mon, Sep 29, 2014 at 7:27 AM, Matt Robenolt notifications@github.com\nwrote:\n\nraven-js should not use your secret key. That's extremely insecure.\nThe issue is that your request isn't attaching an Origin or Referer\nheader, so its' falling back to the secret key auth. This was not very\npretty in 6.4.4, but in master, it should more explicitly tell you that.\nFeel free to upgrade your Sentry to master. It's what we run on\napp.getsentry.com.\nI can help you try and figure out why your Origin and Referer header isn't\ngetting attached to your request though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/263#issuecomment-57153138.\n. Here is the request:\n\nRemote Address:23.23.95.139:443\nRequest URL:\nhttps://heroshmeam.restlessthinker.com/api/1/store/?sentry_version=4&sentry_client=raven-js/1.1.16&sentry_key=b57223c3f9a3423fbbd24cd2741ab12b&sentry_data=%7B%22project%22%3A%221%22%2C%22logger%22%3A%22javascript%22%2C%22platform%22%3A%22javascript%22%2C%22request%22%3A%7B%22url%22%3A%22https%3A%2F%2Flouiep.restlessthinker.com%2Frestlessthinker%2F3054%2Fvantage%2Fsocial_queue%22%2C%22headers%22%3A%7B%22User-Agent%22%3A%22Mozilla%2F5.0%20(Macintosh%3B%20Intel%20Mac%20OS%20X%2010_9_5)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F37.0.2062.124%20Safari%2F537.36%22%2C%22Referer%22%3A%22https%3A%2F%2Flouiep.restlessthinker.com%2Frestlessthinker%2F3054%2Fvantage%2Fsocial_queue%22%7D%7D%2C%22message%22%3A%22ReferenceError%3A%20foo%20is%20not%20defined%5Cn%20%20%20%20at%20restlessthinker.HeroShmeam.QueueRoute.Ember.Route.extend.model%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Fsocial_queue%2Frouter.js%3Fv%3D2566f51%3A22%3A9)%5Cn%20%20%20%20at%20apply%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A7770%3A43)%5Cn%20%20%20%20at%20superWrapper%20%5Bas%20model%5D%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A7356%3A31)%5Cn%20%20%20%20at%20EmberObject.extend.deserialize%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A37891%3A41)%5Cn%20%20%20%20at%20Object.HandlerInfo.runSharedModelHook%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A40174%3A77)%5Cn%20%20%20%20at%20Object.subclass.getModel%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A40398%3A37)%5Cn%20%20%20%20at%20https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A41875%3A35%5Cn%20%20%20%20at%20invokeCallback%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A10286%3A37)%5Cn%20%20%20%20at%20publish%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A9956%3A25)%5Cn%20%20%20%20at%20publishFulfillment%20(https%3A%2F%2Flouiep.restlessthinker.com%2Fstatic%2Fjs%2Flib%2Fember%2Fember.js%3Fv%3D2566f51%3A10376%3A21)%22%2C%22event_id%22%3A%22b9ca2f35d91a47bdbedc9b5281708428%22%7D\nRequest Method:GET\nStatus Code:400 BAD REQUEST\nRequest Headersview source\nAccept:image/webp,/;q=0.8\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:en-US,en;q=0.8\nCache-Control:no-cache\nConnection:keep-alive\nCookie:sudo=\"H83t19bbqboV:1XYy8d:Xw36gSqKoRgghygDsGjNw9b3pAc\";\nsentrysid=\".eJxrYKotZNSI4GJgYChJLS5Jzs_PzkyNYANyy_OLslNTQnnjE0tLMuJLi1OL4jNTvBlDuYpLilITc4vzi0oKmUJZUhJLUguZQ4WQlCUlJmen5qWEKhWn5pUUVeqVlmTmFOuB5PVccxMzcxyBLCeoGpbi0pT8CB6gfR4WxiWGlklJhUn5YaV6AAWkMyo:1XYy8e:J8pMpsAUN_QzBmPnfWlX33kKAC0\";\ncsrftoken=EAzLlZKSscUUDQBhoK9lYN0YDD6RTjhX\nHost:heroshmeam.restlessthinker.com\nPragma:no-cache\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36\nQuery String Parametersview sourceview URL encoded\nsentry_version:4\nsentry_client:raven-js/1.1.16\nsentry_key:b57223c3f9a3423fbbd24cd2741ab12b\nsentry_data:{\"project\":\"1\",\"logger\":\"javascript\",\"platform\":\"javascript\",\"request\":{\"url\":\"\nhttps://louiep.restlessthinker.com/restlessthinker/3054/vantage/social_queue\",\"headers\":{\"User-Agent\":\"Mozilla/5.0\n(Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko)\nChrome/37.0.2062.124 Safari/537.36\",\"Referer\":\"\nhttps://louiep.restlessthinker.com/restlessthinker/3054/vantage/social_queue\"}},\"message\":\"ReferenceError:\nfoo is not defined\\n    at\nrestlessthinker.HeroShmeam.QueueRoute.Ember.Route.extend.model (\nhttps://louiep.restlessthinker.com/static/js/social_queue/router.js?v=2566f51:22:9)\\n\n   at apply (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:7770:43)\\n\n   at superWrapper as model\\n\n   at EmberObject.extend.deserialize (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:37891:41)\\n\n   at Object.HandlerInfo.runSharedModelHook (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:40174:77)\\n\n   at Object.subclass.getModel (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:40398:37)\\n\n   at\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:41875:35\\n\n   at invokeCallback (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:10286:37)\\n\n   at publish (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:9956:25)\\n\n   at publishFulfillment (\nhttps://louiep.restlessthinker.com/static/js/lib/ember/ember.js?v=2566f51:10376:21\n)\",\"event_id\":\"b9ca2f35d91a47bdbedc9b5281708428\"}\n. Not at the moment, that domain is on aws only accessible from an internal\nnetwork here. I don't think the AWS load balancer would be removing those\nheader fields as in other calls on that page do have the referrer header.\nAny other ideas?\nOn Tue, Sep 30, 2014 at 12:14 PM, Matt Robenolt notifications@github.com\nwrote:\n\nWeird.. so it sent your cookies not not a Referer. It seems that I can't\naccess this louiep.restlessthinker.com to test personally. Is there a way\nthat I can?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/263#issuecomment-57348331.\n. Every scenario I tried I couldn't get the headers to show up. I'd setup a new instance on Heroku and AWS, the client still wasn't sending origin. I've also been trying to integrate raven-js into a logging framework that we use so anything at log.fatal() or log.error() gets captured to Sentry. Take a look at: https://github.com/RestlessThinker/log4javascript-raven/blob/master/demos/raven.html\n\nThanks for accepting!\n. I checked for that too, things were all on https.  I wasn't aware of that protocol like DSN, I should try that to see if that works\n. ",
    "anujku": "Yes I did that, I am actually able to receive notifications correctly.  Thats great !\n. ",
    "matghaleb": "@mattrobenolt Thx for your feedbacks. I'll look more carefully at jQuery.Deferred code and I'll let you know as soon as possible.\n. I just wrote a new PR https://github.com/getsentry/raven-js/pull/268 patching jQuery.Deferred.\nLet me know your feedback about it.\n. @mattrobenolt, I just updated my pull request fixing some bugs and supporting more jQuery versions.\nyou can test the new plugin from this jsfiddle: (working fine from jQuery 1.6.4 to 2.1.0)\nhttp://jsfiddle.net/6u6nrmq0/\nand compare the results with the current version:\nhttp://jsfiddle.net/n6jgbztz/\n. ",
    "ebuildy": "Ho sorry, didnt see it, thanks you. \n. ",
    "superalex": "Thanks! :+1: \n. ",
    "vitalybe": "This seems to be an issue with TraceKit. I've opened an issue and proposed a fix here: https://github.com/occ/TraceKit/issues/66\n. Looks good :)\n. ",
    "cdutson": "Thanks. I thought I was doing something wrong, but the fact that it's logging it both as a warning AND an error seemed kinda busted to me. Glad I'm not totally crazy.\n. ",
    "andrewboni": "I'm using Raven 1.1.16 (latest) with Angular 1.2.19.\nHere's what I get when I type that in:\n\nSo it seems to work fine there?\n. ",
    "nicbou": "I was looking to disable Raven.js logging when debugging our web application (or output it to console only). I think it makes sense to have the documented feature as it was undoubtedly the cleanest way to do this.\n. Thanks for the reply. In that scenario, it might be worth documenting that solution.\n. Unfortunately, that was a long time ago at another company, so I don't really remember. \n. ",
    "eMerzh": "Same issue here ... i really need to disable sentry for env like in local or dev server ... but setting Raven.config(false) prevent angular module to initiate....\n. not sure if it's the correct info but here it is, \nTypeError: Cannot read property 'id' of undefined\n  at p(/frame.6bbb8132.js:1:24680)\n  at c(/frame.6bbb8132.js:5:17676)\n  at ? (/frame.6bbb8132.js:5:17977)\n  at ? (/frame.6bbb8132.js:5:17954)\n  at ? (/frame.6bbb8132.js:2:22577)\n  at ? (/frame.6bbb8132.js:2:22013)\n  at p(/frame.6bbb8132.js:2:22782)\n  at ? (/frame.6bbb8132.js:2:22741)\n  at p(/frame.6bbb8132.js:2:22716)\n  at Array.<anonymous>(/frame.6bbb8132.js:17:31025)\n  at l(/frame.6bbb8132.js:9:14939)\n  at ? (/frame.6bbb8132.js:17:29055)\n  at ? (/frame.6bbb8132.js:17:21202)\n  at ? (/frame.6bbb8132.js:17:28379)\n  at ? (/frame.6bbb8132.js:17:19674)\n  at ? (/frame.6bbb8132.js:17:28022)\n  at ? (/frame.6bbb8132.js:29:12478)\n  at onUserPresent(/frame.6bbb8132.js:5:15963)\n  at HTMLDocument.l(/frame.6bbb8132.js:17:31968)\n  at apply(raven.js:449:28)\n. @kamilogorek  , not sure i understood this correctly, but @goodmike  used strings in the ignoreUrls array, and suggest to use /my.pattern/ instead ?\nbut it seems that it was already what i did in my initial message no ?\njs\nvar ravenOptions = {\n//..\n     ignoreUrls: [\n    // Intercom,\n    /js\\.intercomcdn\\.com/i,\n    /widget\\.intercom\\.io/i,\n     ],\n//...\n};\n. ",
    "pkaminski": "I assume you meant 1.1.16 -- but that was released on July 26 (AFAICT), and\nthere's been a lot of PRs merged since.  I guess I'm asking you to cut a\nnew release and Bower will take care of itself...  Thanks.\nOn Mon, Nov 3, 2014 at 7:49 AM, Matt Robenolt notifications@github.com\nwrote:\n\n@pkaminski https://github.com/pkaminski Is this not 1.1.6? I don't\nremember ever explicitly pushing versions to bower.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/275#issuecomment-61497691.\n\n\nPiotr Kaminski piotr@ideanest.com\n  \"That bun is dirty.  Don't eat that bun.\"\n. Seems reasonable to me, assuming that nothing bad happens in Sentry when the field isn't set.  Since the condition happens very rarely I don't think it's worth overthinking this -- just make sure it doesn't crash and take the original exception with it.  :smile: \n. Ideally, you'd mark 1.3.0 as bad and release 2.0.0 instead, but I don't see how to do that with Bower so I guess this issue will just have to serve as a warning to anybody else who runs into this.\nI agree that #352 would help, but you should probably go further and properly document the data structure being passed to the callbacks, including which parts are public and which are private implementation details.  Basically, it should be treated as an API (because that's effectively what it is).\nThanks!\n. +1 on any/all of these options.  Option 1 would match the Node library's behavior (I believe), but having a hook that gets access to the original error would also be useful in other cases.\n. Ping @benvinegar?\n. Huh, guess jQuery isn't as popular as it used to be...  Thanks in advance, I think this is the last thing blocking my upgrade to v3.x.\n. I haven't been able to repro on my own machine yet, so not entirely sure.  A user did some troubleshooting, though, and it appears that it may be caused by uBlock Origin blocking a Mixpanel script, and serving HTML instead for some reason.  (This is obviously not rational behavior and doesn't happen in uBlock Origin on other browsers, so I'm not 100% sure that's the cause...  I'll be digging deeper today.). I reproduced the error after installing uBlock Origin in Safari and eventually tracked it down to a spot in the Mixpanel library where they throw a raw object:  https://github.com/mixpanel/mixpanel-js/blob/master/src/utils.js#L533\nI don't know why this code path only gets triggered with Safari's uBlock Origin, but it's clearly Mixpanel's fault for not throwing a proper error.  I'll work around it for now and file a bug with them.  Sorry for the confusion!. ",
    "ashclarke": "A patch release with all the changes since July would be great - We're about to integrate this, via bower, so it would be ideal if we were as up-to-date as possible! :+1: \n. ",
    "seronal": "Calling Raven.uninstall() does not really work since it does not clear all the global variables that  Raven.config() sets up such as globalServer, globalOptions etc. My workaround is manually clearing them in Raven.uninstall() by modifying it the following way:\njavascript\nuninstall: function() {\n        TraceKit.report.uninstall();\n        isRavenInstalled = false;\n        globalServer = undefined;\n        globalUser = undefined;\n        globalKey = undefined;\n        globalProject = undefined;\n        globalOptions = {\n            logger: 'javascript',\n            ignoreErrors: [],\n            ignoreUrls: [],\n            whitelistUrls: [],\n            includePaths: [],\n            collectWindowErrors: true,\n            tags: {},\n            extra: {}\n        };\n        authQueryString = undefined;\n        return Raven;\n    }\nWould this be the ideal way? \n. That's a great point. Two small issues:\n1) We would be replacing flushRavenState() in test file, and startTime is hardcoded to be 0 for testing purposes in there.\n2) We do not touch hasJSON variable in reset() function right now, since I assume it would not change during normal use. However in tests, since it's explicitly set sometimes, it needs to be reset too.\nWe can easily solve second one by resetting hasJSON in reset(). I could not come up with a clever solution for the first one though. The only way I could think of is keeping flushRavenState function and calling Raven.reset() inside, and then setting any explicit values we need for testing:\njavascript\nfunction flushRavenState() {\n    Raven.reset();\n    hasJSON = !isUndefined(window.JSON);\n    startTime = 0;\n}\nWhat do you think?\nEdit: On second thought, I see that startTime is only used in relation to now() function call. So we can do the following for test file now() function:\njavascript\n// patched to be predictable\nfunction now() {\n    startTime = 0;\n    return 100;\n}\nWe'll basically reset startTime everytime now() is called for test cases. Do you think this would work, or is it too hackish? :)\n. I've merged latest master, and made the discussed changes. @mattrobenolt can you take a look at this again? Thanks.\n. ",
    "bahmutov": "+1, we are testing our internal Sentry server and would like to send the same exception to several Sentry servers as backup. It would be nice if the Raven clients did not share global data!\n. Ok, the logs are now visible - it was an Ops issue on Zeit part. ",
    "Ramblurr": "A related question I'll ask here to avoid a new issue.\nIs it supported to change other config options after the initial config? In particular I want to change serverName as for various reasons that data isn't known at first when we call Raven.config()\nSomething like\n```\nRaven.config(initialConfig);\n// later\nRaven.config({ serverName: 'foobar'}); // re-config\n```\nI'm tempted to use Raven._globalOptions.\n. ",
    "danse": "Great, thanks for the collaboration. I could detect the user being online even just testing Sentry reachability. For this i could listen the transmission failure events, but then how to retry?\nAbout using captureException, that would be fine, but i would like to keep the excellent handler raven provides for unhandled exceptions. I would need to add some middle logic between raven error detection and error transmission\n. While refactoring, keep in mind the possibility of offline use, see #279 \n. Then it should be mentioned. I was struggling with this, i believe that Sentry redirected me to this project when i specified that i wanted to monitor a Node component\n. Maybe it is just my bad, as i never suspected that Node had its own client i was misinterpreting the documentation. I was getting to raven-js through the configuration page for my project, https://app.getsentry.com/docs/platforms/, but now i realise that clicking on the Node icon one gets correctly redirected to raven-node, while there is a distinct JS icon\n. :sunflower: \n. ",
    "lauritzen": "I'm looking for the same funtionality as well. After examining the docs it seems that a work around could be to use shouldSendCallback, something like this:\njavascript\nshouldSendCallback: function(data) {\n  localStorage['queued-errors'] = (localStorage['queued-errors'] || []).push(data);\n  return false;\n}\nAnd then listen for network connectivity and process the queue using Raven.captureException:\nwindow.addEventListener('online', checkAndProcessQueue);\n. ",
    "cappslock": "This is piggybacking a bit, but I have a similar issue. We can't report errors when the client loses connection to the host (though they are not necessarily offline). Trolling around, I see that there's a ravenFailure event being triggered on the window, but I can't get enough data from this event to accomplish what I'm trying to do: retry sending the error on failure.\nI see a few possible approaches to this:\n1. A per-instance or per-message retry option, which might specify how often to retry sending events, how many times to try before giving up, etc.\n2. A callback/callback(s) on the captureException(),sendMessage()`, etc. methods which is/are triggered on success/failure\n3. Promisifying those methods (meh)\n4. Triggering events (where?) on failure and providing enough context in the event data to attempt a re-send of that event\n. ",
    "webberig": "You should probably have an offline storage facility so the error messages can be sent later in time. Possibly even after the user closes the app and later reopens it while online. Similar to an \"offline first\" approach:\nhttp://offlinefirst.org/\n. ",
    "oliviertassinari": "I have faced the same issue. At first, I wanted to solve it similarly to how I'm solving the offline google-analytics issue with a service worker. The approach is well explained by Google here.\nHowever, when targeting Cordova, Service Worker might not be available.\nAnd a hacky solution is needed. I have came up with this one: \nhttps://gist.github.com/oliviertassinari/73389727fe58373eef7b63d2d2c5ce5d\n``` js\nimport raven from 'raven-js';\nimport config from 'config';\nconst SENTRY_DSN = 'https://XXXX@app.getsentry.com/YYYY';\nfunction sendQueue() {\n  const sentryOffline = JSON.parse(window.localStorage.sentryOffline);\nif (sentryOffline.length > 0) {\n    raven._send(sentryOffline[0]);\n  }\n}\n// ... \n```\n. There is a Sampling Data section in the docs. According to it, we can use something like:\njs\nshouldSendCallback: function(data) {\n    // only send 10% of errors\n    var sampleRate = 10;\n    return (Math.random() * 100 <= sampleRate);\n}\nHowever, that's not much useful, as we already get a sample of the errors when going beyond the quota.\nOn my side, I'm allocating a slot quota per minute / hour:\nhttps://gist.github.com/oliviertassinari/114792721df8b7ef2cf2ecf3e4dea621\n. @slorber It's production tested at @doctolib. It might worth extracting that into a small library.. I'm wondering about the motivation for that change.\nWould that help with error grouping?\nLet's say I want to take advantage of long-term caching with a filename following that pattern: base-HASH.js:\n- base-9a30999620b8f160c305.js\n- base-ampvizn820399620b8fe.js\n- ...\n. > In my opinion, this is definitely a regression and the serious reason not to update to the new version.\n\ud83d\udcaf I was just about to upgrade up until I noticed that:\n- before: https://bundlephobia.com/result?p=raven-js@3.27.0\n- after: https://bundlephobia.com/result?p=@sentry/browser@4.0.1\n\nAt least the package size is smaller, but I think that \u26a0\ufe0f +10 KB of gzipped JavaScript in a bundle is significant. We will wait, keep up the good work :). @jacobrask You can stick to the older version of the library, it's what we do at https://www.onepixel.com/, it's working fine \ud83d\udc4c. \n\n. I'm writing a small plugin to solve https://github.com/getsentry/raven-js/issues/279. This API method would be useful.\n. ",
    "cudasteve": "I agree with @webberig.  I was actually a little surprised this wasn't already part of raven since it's pretty impressive in a lot of other cool ways.  Depending on an app's architecture, there could potentially be a non-trivial percentage of the errors that are the RESULT of being offline.  Being able to report on those is pretty critical in a lot of implementations.\nSo my vote is that this should be baked in and automatic.  When there's an error sending the message to sentry, the message should be stored and tried again later (either on a timer, on an event, or even just on the next message transmission if you want to keep it simple).\nAlso, what's the \"DDN\" label mean?\n. > I'm not sure it should be done by default.\nYa that makes sense.\n\nBut we'll try to make it easy to do so if you want. And I'd like to do the same thing here.\n\nSo, in the interest of helping make a design decision, here's some thoughts:\nIf I'm understanding the docs correctly, the transport config option allows one to basically take control of the last part of the pipeline where Sentry sends the data to the server and become responsible for making that transmission happen.  In that case, that seems like the best place to plugin an offline queue.  Instead of sending the data to the server, send it to a queue that uploads to the server in the background.  That would be if someone were writing their own code to make it happen.\nIn a similar vein, would it be simple enough to also expose a config option (includeOffline?) that would replace the default HTTP transport with an official Raven-rolled offline-capable queue?\n- For browser compatibility, maybe store the queue in localStorage and have it check for connection on a timeout.\n- For better performance and stability, maybe leverage service workers to manage the queue so errors could even be uploaded after the page is closed.  But is it a little presumptuous for a utility library to be spinning up its own service workers at this point?\n. @Freundschaft No, not yet.  As I understand it, for now you'll have to override the transport option or use the shouldSendCallback to build a queue for sending later.\n. For the particular use case that led me to this issue, using ignoreUrls to not collect breadcrumbs from XHR requests to that URL would work well for me.  But I agree that it's probably best to keep a distinction in the API between the filter applied to errors and filter applied to XHR breadcrumbs.\nFor example, in my use case, I WANT to debug everything, but there's certain very frequent API calls that I want to prevent from taking up any of my 20 valuable breadcrumb slots.\n. A breadcrumb mutate/suppress callback could be really useful in another way too.  You could use it to create really descriptive breadcrumbs by letting the implementer turn a Sentry-generated \"ui.click button#buy-more-stuff-18462816\" into \"Clicked Buy Now button\"\n. ",
    "Freundschaft": "has this functionality now been built in somehow to raven?\n. @cudasteve thanks!\nsomeone got a working sample implementation? if not I'll try to write one and post it here\n. ",
    "ddddm": "@Freundschaft this would be very helpful. we are facing the same problem\n. Our solution:\nPass shouldSendCallback to Raven init\nIf there is no connection, out logStorageService will save the event's data\n``` javascript\nvar options = {\n    ...\n    shouldSendCallback: function(data) {\n        if (connectionStatus.check() && Raven.isSetup()) {\n            return true;\n        } else {\n            // store log data somewhere\n            logStorageService.set(data);\n            return false;\n        }\n    }\n    ...\n};\nRaven.config(SENTRY_KEY, options).install();\n```\nQueue trying to send logs\nQueue fires this code every 25 seconds, eventually delivering all of the events to Sentry\njavascript\nqueue.enqueue(function () {\n                    logStorageService\n                        .getKeys()\n                        .then(function (keys) {\n                            if (keys && keys[0]) {\n                                logStorageService\n                                    .get(keys[0])\n                                    .then(function (log) {\n                                        Raven.captureMessage('', log);\n                                        logStorageService.remove(keys[0]);\n                                    });\n                            }\n                            ...\n                        });\n                });\n. ",
    "matsomahoney": "++1 please\n. ",
    "marcelom56": "+1\n. ",
    "peresbruno": "+1\n. ",
    "waynebloss": "Some examples above showed a call to a \"private\" function. However, I am not able to call Raven._sendProcessedPayload or Raven._send.\nLooking at your source code, I am not even sure how Raven() is being constructed as an object. I don't see \"new Raven()\" anywhere.\nHow can I call these functions?. Nevermind, the problem was only happened when raven.min.js and not raven.js so that answers that question.. So, I hunted down the minified name for the _sendProcessedPayload function and here's what I ended up with in my code (for now):\n```js\n  /*\n   * HACK: Using a private function that gets minified!\n   * Pinned Raven-js to version 3.8.1.\n   /\n  Raven._sendProcessedPayload = Raven._sendProcessedPayload || Raven.Y;\n...\nfunction processQueue(items) {\n    // Stop if we're not online.\n    if (!canSend())\n      return;\n    // Process the given items or get them from the queue.\n    items = items || queue.getItems();\n    if (!items || items.length < 1)\n      return;\n    // First in, first out.\n    var next = items.shift();\n    // Send the next item.\n    Raven._sendProcessedPayload(next, function processed(error) {\n      // If no errors, save the queue and process more items.\n      if (!error) {\n        queue.save(items);\n        processQueue(items);\n      }\n    });\n  }\nfunction shouldSend(data) {\n    if (canSend())\n      return true;\n    if (data.extra.retry)\n      return false;\n    data.extra.retry = true;\n    queue.add(data);\n    return false;\n  }\n...\nsetInterval(processQueue, OFFLINE_QUEUE_TIMEOUT);\n```\nThis is far from ideal due to the horrendous HACK and also because more errors could be captured while I'm processing this queue, so they would be sent out of order...\n. Final note on this for today: I think you should make _sendProcessedPayload public. It picks up right where _send exits when shouldSendCallback returns false, so it's the obvious choice to call if you want to retry a send...\nHowever, I don't like that it modifies the payload. So, it's not the ideal method.. ",
    "panbhag": "Has this feature been added to the library yet.. ",
    "alexcroox": "I ran into a need for this today as I have an offline capable feature. I store all my own data using indexdb but it would be nice to have an out of the box offline functionality for Sentry. If it it could use it's own local database to store events and periodically/on network changes attempt to send and clear out the db that would be super useful.. ",
    "alvaromb": "Any plans to merge this? Let me know if I can help you guys.\n. ",
    "oliversong": "Ah I didn't notice this but it looks like someone implemented an \"Update\" method here - #255. Up to the devs to see whichever they like better.\n. Nice! Thanks!\n. ",
    "themasch": "Oh, I really skipped the \"prior to the unloading of the document\" part of the spec. Thats kind of sad because I thought of it as a lightweight XHR POST Request. \nThis implementation could cause problems for single-page-apps though, because the page (that might have errors which need to be loggen) never gets unloaded. \nSo, after reading that important part of the spec, I think my idea might be rubbish/waste of time. \n. > To be still an effective mechanism for developers, the User Agent should make the best effort to\n\ntransmit the data including making multiple attempts to transmit the data in presence of transient\nnetwork or server errors, even though it uses POST to transmit the data.\n\nMakes it sound like a valid solution. I'm not quite familiar with the sentry/raven protocol. Does the payload contain a time? Because when using sendBeacon, the data may be transmitted later, in case with bad connection even hours later. The spec doesn't specify how long the browser has to try to send the beacon. \nAdditionally, CORS-Rules apply as well, but that - naturally - only counts for headers (like Cookie, etc) since theres no body read (MUST ignore any entity bodies returned in the response). If I'm correct, this means Beacons are really just a fire&forget XHR POST request thats queued & clever timed by the UA. \nA simple polyfill should be pretty easy.\n. ",
    "tgr": "Main use case for this IMO is to catch errors which happen on or before unloading - errors in an unload handler, errors in a beforeunload handler, or errors in a click handler that would prevent the browser from navigating away (but due to the error it doesn't). Since the browser starts unloading as soon as the error occurs, image requests might or might not be sent depending on the browser and the timing. Also, some browsers delay unloading if there is a pending image request, which degrades perceived page performance.\n. In most cases, it would. I am experimenting with using Sentry in an environment where all scripts get minified and bundled together, so I don't think there is any way to guess whether something is inside raven.js just from the stack trace (although that might depend on the browser, e.g. Chrome's stack trace API seems to provide direct access to the function objects in the stack so it could easily identify a custom function).\nI guess the solution to that could be source maps and overriding the culprit on the server side.\n. It looks like the intent was to pass the options object to handleStackInfo. I don't think it works though; it seems extra options just get lost.\n. The options are passed via lastArgs; I didn't notice that.\nUpdated the patch to keep the options argument but remove unnecessary exception handling. TraceKit.report was only used in two places: in Raven.captureException, where the exception was caught anyway, and in TraceKit.wrap, where it was rethrown anyway, so this change should make no difference (apart from fixing #300).\n. The patch broke a bunch of tests; I'll rewrite it.\nIs it intentional that the tests are not integrated into GitHub via Travis or something similar?\n. ",
    "jedrichards": "Looks like Google Analytics let you set sendBeacon as the transport:\nhttps://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits#specifying_different_transport_mechanisms\nFurthermore they say,\n\nCurrently, analytics.js only uses navigator.sendBeacon if the transport mechanism is set to 'beacon'. However, in the future, analytics.js will likely switch to using 'beacon' as the default mechanism in browsers that support it.. Also got something similar going on,\n\n\nWe are loading Raven 3.14.0 via your CDN. Testing on Chrome 57 macOs. Also calling fetch like fetch(requestObj) .... I just changed my fetch call signature from,\nfetch(new Request(ops))\nto,\nfetch(url, ops)\nand it fixed it.. ",
    "jaseemabid": "I've been observing the same. Reporting uncaught exceptions is the only one thing I expect and that is not happening. It deals with caught exceptions just fine. \n. @mattrobenolt \nMy setup, \nRaven.config(\"<config URL>\", tags={'url': '/hello'}).install();\nRaven.setUser({\n    id: 'admin',\n    group: 'wheel'\n});\nThis works fine - undefined fn hello\ntry {\n    hello();\n} catch(e) {\n    Raven.captureException(e)\n}\nThis wont work - Nothing reported \nfoo()\nSame here:\nthrow new Error(\"Testing Raven\")\n. @dcramer I was testing in a console. Is that ignored? Latest chrome stable on mac.\n. Works fine if it originated from a script, but not if its from the console. This IMO could be documented.\n. ",
    "weisk": "Well, we just log all failed ajax requests, sending the whole request and response to Sentry. Yes we can work around it by manually rejecting fields in the request body, but it would be much more convenient to have a feature as the sentry 'processors'.\nThe python client, for example, has the feature:\nhttp://raven.readthedocs.org/en/latest/config/index.html?#raven.processors.SanitizePasswordsProcessor\n. (^ sorry, clicked by accident)\nOk thanks @mattrobenolt ! I really missed that dataCallback option, it will do the trick!\n. ",
    "mk0x9": "@mattrobenolt what's the status of the issue?\n. ",
    "dmose": "One of the reasons client-side scrubbing is compelling is because there have been instances in the past of organizations (e.g. governments) trying to force software vendors to log data that they have on the server-side.\nOne problem with using dataCallback is that it's fragile in the face of evolving data formats.  Which is to say that if new fields are added containing messages, or things like stack argument collection in JS gets better, then it's unclear how someone maintaining a scrubber would know to update their scrubber.. Presumably, the python code that wants to be ported to fix this is https://github.com/getsentry/raven-python/blob/c69abaa1506a426802e979c7f8c6a4ab0ef9c4d7/raven/processors.py. This is now merged into master.  Not sure what the conventions are for raven-js, but I'm guessing this can now be closed.\n. Thanks for the quick turnaround on the merge, BTW!\n. I added the resource: parsing in https://github.com/getsentry/raven-js/pull/837/files, and I'd expect the patch for this to be very similar, if someone wanted to port it. . :-)  Yeah, it took me a while to figure out where I needed to patch the code, so I figured I'd try and save future new contribs the same pain. . ",
    "jbourassa": "You are very right! Awesome, thanks for the quick response.\n. ",
    "josh-devops-center": "This code is not available in the latest stable 6.4.4. Will there be a 6.4.5 released?\n. Any estimated date for the 7.0 release?\n. In case someone stumbles across this issue, I tested and verified using 7.0 I'm able to run my webserver in HTTPS and sentry in HTTP. This is due to the check for GET and then is_valid_origin(origin, project) for which I use '*'\n. ",
    "rodolfo3": "I'm getting this replacing Raven by @sentry/node on server-side. Is there any additional configuration to do?\nooops, I just get it from https://github.com/getsentry/sentry-javascript/issues/1560. ",
    "vkovalskiy": "Should not Raven suppress Raven has not been configured error message when we actually checking it's configuration status by isSetup method?\n. ",
    "lowik": "+1\n. ",
    "marcelboettcher": "@vkovalskiy +1 that does not make any sense to me, too\n. @mattrobenolt I'm running in the same problem for the same use case of a local environment. Any progress on this? I agree that Raven should not throw any error when not installed.\nThanks for your good work!\n. @mattrobenolt no, I don't - should I?\n. ",
    "jgerigmeyer": "I think I've addressed all the comments, but please let me know if I missed (or mis-interpreted) anything!\n. :+1: Thanks for digging into it! I started wading through their minified code, and quickly found myself over my head... :)\n. :+1: \n. Done.\n. Done.\n. Understood, and fixed. I was just copying how Backbone handles this check internally (https://github.com/jashkenas/backbone/blob/master/backbone.js#L223), but we might as well make it more robust here.\n. ",
    "STRML": "On further review it looks like this is for source map fetching only, which IMO should not be used on any production app. Perhaps it would be good to note this in the docs for fetchContext, which sets remoteContext to true.\nI appreciate that it would take some refactoring to introduce an async call into the flow, possibly depending on a heavy Promises library.\n. Gotcha. Thanks for the quick response.\nOn 1/14/15 6:10 PM, Matt Robenolt wrote:\n\nIt's not for source maps, it's just for fetching the actual source code for the lines to send over with fetchContext. Normally this is done with the Sentry server, but this is required in sitations where the app is running on a mobile device or something that the Sentry server can't access to fetch the sources itself.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/getsentry/raven-js/issues/310#issuecomment-69951797\n. \n",
    "Myztiq": "Should I instead file this ticket in the Tracekit repo? I realized that it's actually a standalone dependency moments after submitting.\n. Moved issue to TraceKit: https://github.com/occ/TraceKit/issues/68\n. ",
    "niemyjski": "@mattrobenolt, @Myztiq, I'm helping maintain TraceKit upstream.. If you want to recreate all the issues / pull requests in the master I'll participate in the discussion and merge them in!\n. If it's not let me know\n. @mattrobenolt have you had time to look into this?\n. I'm maintaining tracekit and I'd love to bring in your changes but I have some questions.\nI'm curious as to why you use the last exception stack first instead of the passed in error object (tracekitWindowOnError). Also, why you refactored out processLastException (cleans it up in some cases but makes it more confusing in some areas) and your calling notify stack handlers in two of the three situations. \nI also noticed you added a rethrow argument to report\n/**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @param {?boolean} rethrow If false, do not re-throw the exception.\n     * Only used for window.onerror to not cause an infinite loop of\n     * rethrowing.\n     */\n    function report(ex, rethrow) {\nDo you have a unit test that reproduces this? What caused this behavior?\nIn the computeStackTraceFromStackProp method, I believe your gecko regex is incorrect. We've updated ours as well as a few other people have as well.\nIn computeStackTraceByWalkingCallerChain I noticed that you are not doing the check for item.func and parsing the parts. Was there a reason this was removed?\n. I agree with you guys and this is what I want too. We have a guy working on making tracekit plug able... I initially tried to use the new version of stacktracejs in our project but I ran into many issues and the developer was unwilling to help. Currently it requires a specific es6 poly fill library which is 18KB for promises. Then another 30 or so KB for source maps which only works with commonjs.. Things get crazy really quick when you use a module loader cause nothing supports umd... There were more reasons why I said screw it and went and took over support for tracekit...\nFor these reasons.. I'd love to work with you guys on sliming down tracekit, making it plugable, easier to test and normalize stack traces. If you choose not to help or do something else that's ok, cause we will continue to go down this path, just a little slower\n. @dcramer, This is something I want and am working on. The previous maintainer was working on tests and he said he would send them to me. I just sent him a message about 4 days ago. If you guys have any tests please do a pull request, otherwise I may look into seeing what it would take to grab third party ones and covert them :). Also, if you guys have any feedback on what works best to test multiple browsers via unit tests please let me know.\n@mattrobenolt, It's on my todo list to look into that part and see what we are missing (if anything), we just added support for windows mobile 8 and winjs. He only support ie10 or newer which is kind of unacceptable for an error stack parser.. This thing needs to work on everything.. The way I want tracekit is a core experience (parsing / normalizing) that's all tested and works on ie6 (wish it would die), like we currently are doing. Then build upon the core with plugins that add the same functionality that we currently have and much more.. Unless we do a 2.0 (which we probably would do. I don't want to break too many people by changing a function name to parse instead of xyz, but big changes need to happen). For example, in our callbacks, we need to be passing back the normalized stack trace as well as the original error object, as you might want to do something else with the original error / gather extra metadata etc. We'd love for you guys to participate on our repo! \n. @TheSavior @mattrobenolt I wanted to let you know that I'm pushing a release very soon and you guys should update to it. I've added over 20 unit tests for different browsers and found a bunch of bugs with opera, IE and chrome.\n. ",
    "asser": "I've run into this as well. Basically we want to only use Raven.captureException() and ignore all exceptions that are not explicity handled by our code. But we get a lot of random other things in as well.\nIt seems that collectWindowErrors: false in options should be the way to avoid this but it doesn't work.\nAfter digging around the code it appears TraceKit automatically installs an error handler when TraceKit.report.subscribe() is called. If I remove the call to installGlobalHandler() I can still capture exceptions with Raven.captureException() but global errors are not caught.\nI'm not sure that would even be the correct solution but would it be possible to add a configuration option to avoid TraceKit installing that global error handler?\n. ",
    "henrybaxter": "This is really important to us as well, +1\n. Here is my use case:\n- catch inline exceptions manually only\nWhat configuration allows this to happen? I don't want any uncaught errors, but I want captureException to report something.\nHere is the relevant jsbin: https://jsbin.com/kugowopeso/edit?html,js,output\n. So I'm a paying customer of sentry, and I took the time to elaborate on my issue...care to elaborate on your solution? :smile: \n. Thanks Ben, didn't mean to be snarky there - and you're absolutely right, your solution fixes the problem outlined. Unfortunately I forgot an essential detail, so let's try this again:\nhttps://jsbin.com/bojasu/2/edit?html,js,output\nMy use case is actually:\n- catch inline exceptions manually\n- catch exceptions in my source files\n- do not catch global exceptions\n- do not catch exceptions in other people's source files\nI appreciate us keeping this an issue on github, I think it may help others!\n. Ok so just for the record, what I'm asking for is not possible, right? Because\n1. install() plus whitelisting main page and my external source files => I get uncaught exceptions on my main page\n2. install() plus whitelisting only my external source files => I miss manually caught exceptions on my main page\n3. omit install() => I miss uncaught exceptions in my external source files\nFor example, if I'm writing a tracking script or a split testing service, I want to report only on the things I do wrong, not what else is going on on the page, nor the endless possible list of first or third party source files included in the page that I cannot know about.\n. ",
    "basicallydan": "Hmm, perhaps I'm not understanding properly how to use it then. If I don't want Raven to be doing anything, e.g. on a local environment, what is the proper way to disable it?\n. ",
    "joealcorn": "I looked into this a bit earlier today. I haven't been set up a bare minimum test case, but the issue lies in isSetup calling logDebug with the console plugin enabled, which calls captureMessage, which calls isSetup, etc. In fact, calling Raven.config(false).install() using the latest backbone, console, jquery, native bundle has the same issue\n. ",
    "colindresj": "This is still happening for me.\nTo be clear, I'm not testing with the dev console. I'm throwing a real exception from within source code and TraceKit.computeStackTrace goes through all it's attempts to get the stack, and doesn't succeed, which results in just {}. The exception is a real exception with a stack property. \nAdditional info: tested on Chrome and Firefox, simulated commonjs environment via webpack, single page React app\n. ",
    "davesque": "I appear to be having an issue like this as well.  Here's a screenshot to show what I did.  I was using raven-js 1.1.19 and Chrome 43.  I made one single modification to raven-js which was to expose TraceKit in the global scope (window.TraceKit = TraceKit;).\n\nUpdate:\nActually, it appears that my method for subclassing errors was somehow causing issues:\n``` javascript\nfunction makeError(name) {\n  function E(message) {\n    this.name = name;\n    this.message = message;\n  }\nE.prototype = Object.create(Error.prototype);\nreturn E;\n}\nvar TestError = makeError(\"TestError\");\nthrow new TestError(\"blah...\");\n```\nOf course, this doesn't really explain why TraceKit would make an empty stack trace object for that legitimate exception.  Subclassing errors in JS is such a shit show.  I don't even think I'm going to bother unless anyone else has a better method.\n. ",
    "jeffreywescott": "For what it's worth, I was also seeing this. It's a documentation error. Here's what I tried (from a script, not the console):\njavascript\nRaven.config('https://<YOUR_PUBLIC_DSN>')\ntry {\n    throw new Error(\"test exception\")\n} catch(e) {\n    Raven.captureException(e)\n}\nInstead, you need:\njavascript\nRaven.config('https://<YOUR_PUBLIC_DSN>')\nRaven.install()\ntry {\n    throw new Error(\"test exception\")\n} catch(e) {\n    Raven.captureException(e)\n}\nBasically, TraceKit doesn't have any \"handlers\" installed until you call Raven.install(). So when TraceKit.report() gets called by Raven, there are no handlers and nothing happens.\nI hope this helps other people, or I hope that someone can tell me if I've got this wrong somehow.\n. As it turns out, I'm wrong. I just missed the part of the docs where it says to call .install() because it was a chained command (easy to miss).\nFor clarity, I'd recommend on this page to say something like:\n\"Now need to set up Raven.js to use your Sentry DSN by calling .config() and .install().\"\n. ",
    "tomyam1": "I'm also getting this exception with message: undefined. \nI'm using getsentry.com and raven 1.1.9.\nFrom reading this issue and similar issues 313 and 211, I suspect this is related to an issue with TraceKit.\n@mattrobenolt - Could you please update the vendored TraceKit? \n. Thanks. Looking forward for it.\n. ",
    "navnitkapa": "Sentry.captureMessage('error message', {});\n you can see it by expanding error you can send data into object.. ",
    "Nisk": "Doesn't work with Sentry 6.4.4, your changelog mentions nothing about fixing it somewhere along the way.\n. ",
    "bendrucker": "Browserify can also build for UMD. It has the advantage of being able to expose build configure via package.json that parent packages can consume. Webpack has some very compelling features for building browser apps but I'm still very wedded to browserify since I publish a ton of modules.\nFor actually generating these UMD builds and getting the ./dist dir out of master, check out https://github.com/bendrucker/publicist\nIt's very much geared towards my style right now but I'd be happy to make it more configurable.\n. ",
    "askaliuk": "Useful. +1\n. ",
    "hussfelt": ":+1: \n. @mattrobenolt sorry about that, someone told me about that abbreviation during the day and I forgot to get back here with a comment. I think it would be beneficial if that was written out - I never heard about iff before :)\n. ",
    "KennethSundqvist": "I've never used Readthedocs.\n. ",
    "slorber": "Hoooo no it's my fault!\nI used to put the DSN string into a Play Framework template and it requires to escape the @ so I put a double @@ into the DSN string.\nHowever, it seems to me there is a problem when you throw a RavenConfigError as it requires me to debug to get the reason\n. Hi @benvinegar .\nMy DSN string is not as simple as yours\nRaven.config('https://a92f6c9edba00000000255132945c7e2@@app.getsentry.com/38297',options).install();\nI replaced some DSN parts but this is what I had when the error occured.\nMaybe try to include the password? Because I did also attempt to put the password in the DSN to try...\n. oooh yeah @matthewwithanm @benvinegar actually I remember! \nThe original error says Cannot read property '6' of null and it is catched by the try/catch.\nBut when rethrowing, I just got:\nError\n    at http://localhost:8080/appLibs.js:77951:30\n    at Object.require.raven-js (http://localhost:8080/appLibs.js:78366:3)\n    at s (http://localhost:8080/appLibs.js:1:262)\n    at s (http://localhost:8080/app.js:1:142)\n    at s (http://localhost:8080/app.js:1:122)\n    at http://localhost:8080/app.js:1:313\n    at Object.require.app.appConstants (http://localhost:8080/app.js:47956:13)\n    at s (http://localhost:8080/app.js:1:262)\n    at http://localhost:9000/:16171:30\nIt is like there was a problem during the rethrow, a bit like if the code was:\njavascript\n try {\n        while (i--) dsn[dsnKeys[i]] = m[i] || '';\n    } catch(e) {\n        throw new Error();\n    }\nI don't know so much Javascript, just thought it may be related to this line: RavenConfigError.prototype = new Error();\nDuring my tests I used an up-to-date chrome version on Ubuntu, and my app use Browserify\n. Hi,\nAbout Cordova. I'm wondering how do you filter on origins currently, because I tried to allow origin \"file://\" but it does not work, I always get error {\"error\":\"Invalid origin: file://\"} unless I set * as allowed origin on sentry API. How to be secure with Cordova apps?. +1 for this\nMy usecase:\n- A SPA build with React\n- Only the first errors are often meaningful\n- After first errors, React may issue a lot of errors repeteadly that are useless for debugging: I'd like to filter those. Not sure it will do the job for my usecase @benvinegar because you only compare current error with last error. Sometimes we have n errors that repeat themselves but they are not necessarily consecutive, it's the case often when using React: once it's in a bad state errors can be thrown from everywhere and are not necessarily always the same.\nMaybe it would be better to keep a little history of last errors, and to use it in combination with a rate-limiting system like one proposed by @oliviertassinari https://github.com/getsentry/raven-js/issues/530#issuecomment-248257321. Thanks @oliviertassinari that seems good for filtering React useless and repetitive errors, will use something similar!. Hi,\n@benvinegar I'm sorry but this error occurs for one of my user, not myself so I can't debug it further from what I see in Sentry. I don't know what you mean by \"expand buttons\", but I don't see such buttons in Sentry interface.\nIf this error is coming from my own code wrapped by Raven, then why doesn't it log the error related to my code, instead of showing me this RavenJS code? I know that my code is not bug-free, but I expect Raven to show me my own errors locations, not the location where Raven does wrapping and error reporting, and this is the bug to me.\nThe JSON is https://gist.github.com/slorber/a8ad18a347e5a590388fd2bd31f506be\nI noticed this error occured only 2 times, for Firefox 50 only for now.\nI am a hosted Sentry customer so I'll ask for support. ok thanks, i'll just ignore this error and see if it comes back again. Hey @jan-auer @kamilogorek , just wondering what is the difference between culprit and transaction.\nI'm still using 0.36 (version used by Expo) and started to see long absolute and unhelpful culprit urls. Will upgrading fix this issue? This seems related to what is reported here: https://github.com/getsentry/sentry-javascript/issues/1400 . Hey, I'm using RN package with Expo and also have this long culprit url issue that we didn't have before. Not sure this is related but if you know the solution please tell me.. thanks, I'm relying on https://github.com/expo/sentry-expo so I'll need to wait for an upgrade if the lib to test that. ",
    "pratik60": "I like monkey patched!\nSlightly confused, so I now have two places where I basically set up the app....One for native javascript, then another for angular so Raven Angular Script can hook onto it?\nYes, lets update the docs....Examples always help\n. @mattrobenolt => Hey Matt and others\nIf you want to catch ajax errors, you gotta do this as well\n$(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {\n    Raven.captureMessage(\n        thrownError || jqXHR.statusText,\n        {\n            extra: {\n                type: ajaxSettings.type,\n                url: ajaxSettings.url,\n                data: ajaxSettings.data,\n                status: jqXHR.status,\n                error: thrownError || jqXHR.statusText,\n                response: jqXHR.responseText.substring(0, 100)\n            }\n        }\n    );\n});\nhttps://github.com/getsentry/raven-js/pull/204/files\nI was just looking around, and in the plugins - jquery file\nI see this\nvar _oldAjax = $.ajax;\n$.ajax = function ravenAjaxWrapper(url, options) {\n  ...\n  ...\n})\nWould really have thought that jquery plugin would have done the magic (monkey patching), but it was the pull request which did the job for me. \n. @mattrobenolt Gotcha, would be a good optional settings though. I think I might take a shot at sending a PR for this. Thanks :-)\n. ",
    "bud-mo": "I have edited the file on GitHub, I was not able to do some tests.\nCan I keep the cake? :innocent:\n. ",
    "samgiles": "I just saw: #183 .....\n. @dcramer if you're happy to take this approach I'll take some time at work to get it 'mergeable'.\n. ",
    "beeftornado": "I have been using the solution from #183 for a while, but I must say I like this solution much better. It is really a must have if you want to communicate with your own sentry server with a self signed cert. Chrome will block it. I must POST the data to a proxy on the same server which then forwards it on to sentry. I really wish they would officially offer a way to send the data other than GET, which generally has a very small maximum request length.\n. I think one thing that would be helpful is if you could customize the authstring that is sent. If you choose to send the data via POST in your custom handler it requires the special header. I created this quick patch on top of @samgiles PR to allow the makeRequest method also generate its own auth string.\nhttps://gist.github.com/beeftornado/12f3bb79b400a6e7dbf8\nIt would be used like this for example, which is POSTing it. (Very rough proof of concept)\njavascript\ntransportMechanism: function(data, server, authParts) {\n  var failure, success, xhr;\n  xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", server, true);\n  xhr.setRequestHeader(\"X-Sentry-Auth\", 'Sentry ' + authParts().join(','));\n  xhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n  xhr.onload = success = function() {\n    return $.noop();\n  };\n  xhr.onerror = xhr.onabort = failure = function() {\n    return $.noop();\n  };\n  return xhr.send(JSON.stringify(data));\n}\n. I'd recommend also checking if the user wants https here so they could also use http+post\njavascript\nif(!dsn.pass && dsn.protocol == 'https+post')\n. I'd make pass optional for people who just want http.\njavascript\nvar qs = [\n    'sentry_version=4',\n    'sentry_client=raven-js/' + Raven.VERSION,\n    'sentry_key=' + this.dsn.user\n];\nif (this.dsn.pass) {\n    qs.push('sentry_secret=' + this.dsn.pass);\n}\n. And I would add\njavascript\nRaven.registerTransport('http+post', V8Transport);\n. ",
    "jakubzitny": "Hey guys, have you considered adding a check for the Sentry message size limit into Raven?\nWhat do you think would be the best way to check / truncate the extra data that's over the limit?\n(cc @benvinegar @mattrobenolt)\n. Thanks for the reply @mattrobenolt.\nI understand the situation, but what if this was configurable? When configuring or instantiating the Raven client I'd add a parameter specifying the limit for one event and the client would automatically trim the contents somehow. Would it make sense?\n(cc @vojtatranta)\n. Yeah that's true.\nActually, the large objects in extra is exactly our case. We're attaching some logs (little bit similar to breadcrumbs), that can really be \"misused\" by a developer and filled with unneccessarily big objects. That's why we're contemplating about the limits there and what'd be the best way to trim it.\n. ",
    "davishmcclurg": "I just ran into this with an error that had a bunch of breadcrumbs. It would be nice if the client would re-send the error without breadcrumbs or extra data so that it doesn't disappear completely.. ",
    "captbaritone": "Clearly the best solution to the problem of excessively large payloads, is to trim them down, and we have nice APIs to do just this (Raven.setDataCallback). However, it can still be difficult to know exactly how to transform your data. This difficulty is compounded by the fact that you must err on the side of extreme caution since if you do go over, it fails silently. As users of Raven+Sentry this is the last thing we want! \ud83d\ude04 \nSo, at the very least it would nice to know when you've sent an exception that was rejected by Sentry. I understand the infeasibility of doing this on the server, but as @davidfurlong points out, it could easily be done on the client.\nI took a look at implementing this outside the library, but I don't think it's currently possible without depending upon some private implementation details of Raven.\nSomething like this does seem to work, but it relies on being able to access the default transport implementation via Raven._makeRequest (Not a good solution)\nHack:\n```JavaScript\nfunction captureMessageWithoutContext(message) {\n  Raven.setDataCallback((data, originalCallback) => {\n    Raven.setDataCallback(originalCallback);\n    data.breadcrumbs.values = [];\n    return data;\n  });\n  Raven.captureMessage(message);\n}\nconst originalTransport = Raven._makeRequest;\nRaven.setTransport(opts => {\n  const originalOnError = opts.onError;\n  opts.onError = error => {\n    originalOnError(error);\n    if (error.request.status === 413) {\n      captureMessageWithoutContext(\n        \"Failed to submit exception to Sentry. 413 request too large. \" + error\n      );\n    }\n  };\n  originalTransport(opts);\n});\n```\nI think if we included the actual XHR error, or even just the status code, in the ravenFailure event, it would be possible to implement this kind of recovery outside of Raven itself.\n413 detection may very well be something that should live inside of Raven, but in the mean time, this would be a nice escape hatch and would let the community explore ways to handle 413 errors.\nThis topic is especially interesting to me, since raven-for-redux force users to manually trim down their data in order to avoid hitting the size limit, and I currently feel like I may be doing more hard then good, since I am leading them down a path which may very well be silencing real errors in their apps.. Curious what kind of timeline I should expect until this is included in a release. My module raven-for-redux currently triggers this bug. I could fix it on my end pretty easily, or wait for the next release.. Great! I won't bother trying to fix in my library then.. I think it would be best to move everything into raven.js. I can work on this.. Cool. I'll hold off.. Both links work fine for me. What response are you getting?. Hey! I maintain raven-for-redux, and I'm starting to look at building a version of that library to support the new SDK. I'm looking forward to having an API that can work consistently for Node (server side rendering) React Native and the Browser. Previous incompatibility has been a source of confusion for my users.\nI think the only thing I see missing is a way to lazily configure the scope. With raven-for-redux we let users attach their entire app state as context. Since the entire state may be too large, or may need to redacted in some way, we allow the user to specify a state transform function which we will run before the report is sent. This is too expensive to do on every state update, so previously we relied on Raven. setDataCallback to run the transform lazily (only when it was time to actually submit a message/error).\nIf you do support registering a callback like this, it would also be good to support unregistering the callback, since in a server side rendering context we may want to (lazily) set this scope once per request.\nAn API method like Sentry.configureScope, except lazy, could probably get the job done:\n```JavaScript\nimport createStore from 'redux';\nconst store = createStore(/ ... /);\nconst unsubscribe = Sentry.configureScopeOnError(scope => {\n  scope.setExtra('state', transformState(store.getState()));\n  scope.setUser(deriveUserFromState(store.getState()));\n});\n```\nAnother option would be to expose some way to register a generic onError callback which will be called before the scope data is collected. With this, we could build our own configureScopeOnError:\n```JavaScript\nimport createStore from 'redux';\nconst store = createStore(/ ... /);\nconst unsubscribe = Sentry.onError(()=> {\n  Sentry.configureScope((scope) => {\n    scope.setExtra('state', transformState(store.getState()));\n    scope.setUser(deriveUserFromState(store.getState()));\n  });\n});\n```\nThese are just the ideas the jump to mind immediately. Maybe you see another way to do it, or a clearer API?. ",
    "Akash91": "Why is this not there in documentation ?. ",
    "wjdp": "Just come across this after several users sent in support requests about a frontend application. I'm rather surprised raven doesn't handle this given sentry's tagline \"Stop hoping your users will report errors\".\nAlso a hit to our adoption of sentry!\n(We're getting big-ish breadcrumbns ~600k when catching Vue exceptions). @marocchino How would I get the above working in my project?\nI have your snippet in raven-vue.d.ts in the root of my project and then the following in my root TS file:\nimport Vue from \"vue\";\nimport * as Raven from \"raven-js\";\nimport * as RavenVue from 'raven-js/plugins/vue';\nRaven\n    .config(\u2026\nThis gives the following:\nTS2497: Module ''raven-js/plugins/vue'' resolves to a non-module entity and cannot be imported using this construct.. Just solved the above by:\n\nimport RavenVue from 'raven-js/plugins/vue';\nSame definition from @marocchino \nSetting allowSyntheticDefaultImports to true in my tsconfig.json (See https://github.com/Microsoft/TypeScript/issues/3337). @milky2028 Looking at my source I've ended up with\n\n1   \u2502 import Vue from \"vue\";\n   2   \u2502 import * as Raven from \"raven-js\";\n   3   \u2502 import RavenVue from 'raven-js/plugins/vue';\nand this file\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: local/xyz/js/raven-vue.d.ts\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 declare module 'raven-js/plugins/vue' {\n   2   \u2502   import Vue from 'vue';\n   3   \u2502   import { RavenStatic } from 'raven-js';\n   4   \u2502   function vuePlugin(raven: RavenStatic, vue: Vue): RavenStatic;\n   5   \u2502   export = vuePlugin;\n   6   \u2502 }. But given this is now fixed, probably not much use :laughing: . ",
    "beaugunderson": "with recent Chrome the limit is even smaller (65536 bytes) due to a bug: https://github.com/getsentry/sentry-javascript/issues/1464\nedit: not a bug! part of the fetch() spec, so { keepalive: true } should probably not be the default, or the docs updated to reflect that limit.. We're also hitting this now... @pgrm how did you solve this?. Ah, this was my own fault for attempting to implement the monkeypatch given in the comments of the issue re: the Sentry message size limit.. If anyone needs a workaround:\njs\nRaven.config('<DSN>', {\n  fetchParameters: {\n    keepalive: false\n  }\n});. update: the 64kb limit is part of the fetch() spec when keepalive is true, so keepalive: true should probably not be the default, or the docs should be updated.. thanks so much @kamilogorek! \u2728. OK, I see the issue here--there is a ... shown in the output, but if the last attribute is another object that's minimized by default you never see the ..... E.g.\n\n. Hm, maybe the ... is only there because I upped the limit in our onpremise install, so now it's being truncated a different way.. ",
    "cesarandreu": "Found out the docs are in the sentry repo, so I made a PR there: https://github.com/getsentry/sentry/pull/1487\n. ",
    "chrisirhc": "I just ran into this, it seems that Chrome is treating the request as a cross-origin request and sending the Origin header and skipping cookies (this is default behavior unless withCredentials: true is passed).\nI'm not sure why this is happening even though it's a same origin request. Looks like a Chrome bug.\nI'm guessing Chrome is doing this as long as there's a hostname and protocol in the request URL.\n. Could be related to https://code.google.com/p/chromium/issues/detail?id=412163 since I saw that crossOrigin technique in the code here.\nNote, this isn't evident in the Firefox browser.\n. Updated PR based on comments.\n. Ah apologies, I wasn't checking notifications. Thank you!!\n. Definitely sounds reasonable to have it undocumented. I added this check because I saw that in the testing, there's assumptions that you can override the globalOptions object completely (there were direct assignments to globalOptions). Doing so would remove the default globalOptions.crossOrigin. I was afraid there would be users that relied on this, assuming that all defaults in globalOptions are optional in testing.\nBut in real-world usage, globalOptions are merged from the config argument, so that shouldn't be an issue. Hence, I can remove this check.\n. ",
    "rhoggSugarcrm": "@mattrobenolt did you decide to upgrade to the new version?\n. ",
    "vladikoff": "Yeah transport would work, but will require a copy paste of Raven's default transport.\nI just fork with \ndiff\n-            '/' + path + 'api/' + this._globalProject + '/store/';\n+            '/' + path + this._globalProject;\nIt seems like no one else needs this feature and can use a custom transport if really needed. Closing...\n. @Githraine Are you using the latest version of Raven? . @Githraine you need this fix in ~2-3 places in raven: https://github.com/scothis/raven-js/commit/152598ae8511eafcd1534139aea320e0a8f5d7c4. @leordex have you found a fix for this?\n. I think this was fixed! :). ",
    "mathieumg": "\nIt seems like no one else needs this feature.\n\nI do! :)\n. @mattrobenolt Is that transport published somewhere or available through Raven? Thanks!\n. Thanks for the quick answer. \nBy reading https://github.com/getsentry/raven-js/blob/a895bbcd58f7e5fbf79083ce2386201933e244a9/plugins/react-native.js#L169-L202 this means the whole request logic has to be re-implemented somehow only because we want a different URL.\nIs something akin to the options.via approach here on the roadmap?\nThank you!\n. @romainneutron Looks like it's in 3.9 now!. ",
    "OliverJAsh": "My mistake!\n. Actually we don't rethrow the error for captureException: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L240-251\n(We only throw if the exception is different from the original, i.e. one produced by the internals of TraceKit.report.)\nWe do, however, re-throw the error for wrap: https://github.com/getsentry/raven-js/blob/d3e70256b6d1dfcfd20ddae89d0d7acd3403b579/dist/raven.js#L1254. In these cases, I am catching the rethrown error myself.\nSo my original request remains: I would like access to the original error object from inside of shouldSendCallback, so I can choose how to log it for both raven.wrap and raven.captureException.\n. It would also be nice to know if the error was caught or uncaught, i.e., if it came from window.onerror then it is uncaught, otherwise it is caught. This would allow me to add logging for caught exceptions, i.e. by raven.context/wrap:\njs\nshouldSendCallback: function (data) {\n    if (data.isCaught) {\n        console.log('Caught error:', data.originalError.stack);\n    }\n}\nUncaught exceptions are already logged by the browser.\n. @dcramer How would you propose logging the errors captured by Raven (along with their stack traces)?\n. Another reason you might want access to the original exception in this callback is because the error might contain metadata which you need to use in your shouldSend logic.\nWe often catch errors to report them with extra metadata, but we then want to throw them again (to let the browser handle it as an uncaught exception) but prevent Raven from logging the error again when it reaches onerror.\nWould you consider this a plausible use case @dcramer? Could we re-open?\n. For example:\njs\n                        raven.captureException(err, {\n                            tags: {\n                                feature: 'weather'\n                            }\n                        });\n                        err.reported = true;\n                        throw err;\n. Something like this, perhaps?\n``` js\nraven.install();\nvar swimlane = function (options, fn) {\n    try { fn(); } catch(e) {\n        setTimeout(function () {\n            // 1. copy global options\n            // 2. update global options with new options\n            throw e;\n            // 3. restore the copied global options from 1\n        });\n    }\n};\nswimlane({ tags: { module: 'foo' } }, foo());\nswimlane({ tags: { module: 'bar' } }, bar());\n```\nNot sure how crazy this is.\n. On second reading it turns out isError already does do what I suggested. My issue must be something else. Sorry for the confusion!. Just stumbled into this. It would have been really useful to have a migration guide mentioning this and various other changes. I had to piece things together between GitHub issues, the v4 release notes, forum discussions, etc. I'm sure enough people will have to take this journey to warrant a full migration guide being written.. I'm not sure either.\nEnabling Sentry doesn't have the effect of disabling logging for uncaught exceptions, so maybe the same should be true for unhandled promise rejections. (Although this difference in behaviour is more of an inconsistency in Node than Sentry.)\nWhen I enable Sentry I understand it's reporting my errors, but I tend to think of console logging as a separate thing, especially in dev. \ud83e\udd14 . Docs would suffice. At least then Sentry isn't doing anything special. It's really Node that's the problem here.. > or uncaught exceptions it's node itself what's triggering a log call.\nOn second thoughts, I'm not sure that's true.\nSentry registers an uncaughtException handler which disables the default Node behaviour (log + exit).\nThe handler (defaultOnFatalError) is triggers its own log call: https://github.com/getsentry/sentry-javascript/blob/4.6.3/packages/node/src/handlers.ts#L282.\nIf we're \"restoring\" logging for uncaught exceptions, I believe we should do the same thing for unhandled promise rejections.. Can we re-open this? As per my last comment, I now believe Sentry should restore logging for unhandled promise rejections, like it does for uncaught exceptions.. Thanks!\nIt looks like the npm version doesn't include the changes you merged: https://unpkg.com/@sentry/browser@4.6.3/dist/index.js\nAny ideas why?\n\nIn either case it would be useful to document the following:\n\nAny thoughts on this?. Got it, thanks.\nIs there any difference between not initialising Sentry vs initialising Sentry but with enabled: false?. > I'm not sure if I follow along with how it changes the behavior based on the environment. Can you elaborate more? Preferably with code examples? Thanks!\nDoes this help?\n``` js\n// ./index.js\nconst express = require('express')\nconst Sentry = require('@sentry/node')\nconst app = express();\n// Comment this out to disable\napp.use(Sentry.Handlers.requestHandler());\napp.get('*', () => {\n    setTimeout(() => {\n        throw new Error('foo')\n    })\n})\napp.listen(3000);\n```\nbash\nnode ./index.js\ncurl localhost:3000\nWhen the requestHandler is:\n- enabled: server stays alive, curl receives response containing error\n- disabled: server crashes, curl errors with \"Empty reply from server\". My workaround for now is to always enable requestHandler, and to conditionally enable Sentry, optionally provide the Sentry DSN + enable option. This at least gives us consistent behaviour.. Hi, do you have any thoughts on this? It's currently blocking us from upgrading.. ",
    "dwelle": "I second this.. our error objects contain metadata which are needed to determining whether to prevent the error from being sent to sentry.. ",
    "joachimroeleveld": "I also see the usecase for a filter function that can filter out errors based on more granular information via a callback.. ",
    "alexlafroscia": "I don't think you're wrong, I'm seeing the same problem.  Sentry hasn't cut a new release since the PR that updated the Ember plugin, so the new functionality exists on Github but not in the library.\n. ",
    "tmayr": "That makes sense, most of my confusion came from being able to select it on the CDN and not see the change reflected.  \nMakes sense to move it to EmberAddons, in fact, there's an addon doing a similar thing, look for ember-cli-sentry, to work around the CDN version I'm using ember-cli-sentry with the updated code of the ember bundle.\nI do believe the addon took the initial code from the bundle.\n(https://www.npmjs.com/ember-cli-sentry)  \n\nTomas Mayr\nOn Wednesday, June 24, 2015 at 3:30 PM, Matt Robenolt wrote:\n\nI can cut a release of this. Let me review changelog today and I'll make it happen.\nAlso, this will probably be the last version that comes with an ember.js plugin bundled in. I want to figure out how to move it to http://www.emberaddons.com/ and give it better ember support.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getsentry/raven-js/issues/348#issuecomment-114973884).\n. \n",
    "matteosimone": "do you need any further work on this one?\n. no problem, did not see that function up there\n. ",
    "Jacse": "What's the status on this?\n. ",
    "anhofmann": "Yes, I realized that opening an issue on github was a stupid idea, sorry :)\nAlso, if someone has the same problem: I was using version 1.1.15 and upgrading to 1.1.19 fixed it.\n. ",
    "kylemacfarlane": "+1 as I was the person who requested this.\nThe use case is for very important pages such as payment pages. The last thing you want to tell a customer is \"I don't know, there's no error on our end...\"\nIn the past I had a situation where my IE8 polyfills had broken the feature detection in braintree.js and thus broken the checkout for all IE8 users. A competing product logged those errors but with Sentry I would never have known.\n. Was this ever implemented? I ran into this problem again today where Sentry didn't report any errors on payment pages but a competing product did.\nSure a \"script error\" isn't helpful but in this case the user agents reported by the competitor have been very helpful.\n. @panrafal No I'm not a part of this project so I'd rather not. The fix itself is very easy but the hard part would be getting the test suites running and writing the tests.\nHowever looking at recent merges it looks like this project accepts a lot of stuff without tests anyway?\n. ",
    "panrafal": "@kylemacfarlane do you plan to implement it? Many script errors are user facing and we need to monitor them. This keeps us from switching to Sentry entirely.\n. @sija Lols, long time no see :). For us it's useful to know how many users are affected and in what circumstances by these errors. It'll also catch errors from 3rd parties and sometimes there are hints about what has happened in breadcrumbs or tags (we log a lot additional metadata).\nIn general, we prefer to know \"too much\" than to know \"too little\".. For us, if the browser extension is acting up we still want to know that to\nbetter support our customers.\nWe're using this on our fork for a few months now and we see value in never\nignoring any errors. This is an opt-in option, so it doesn't change any\ndefaults, but gives the user more control.\n\u015br., 12.04.2017, 22:36 u\u017cytkownik Ben Vinegar notifications@github.com\nnapisa\u0142:\n\nIt'll also catch errors from 3rd parties and sometimes there are hints\nabout what has happened in breadcrumbs or tags (we log a lot additional\nmetadata).\nThat's true. The problem is you'll never know whether something is a real\nproblem or a browser extension. And Raven.js takes steps that other\nlibraries don't to unmask \"Script error\" (this is what the try/catch\ninstrumentation is about, see here\nhttps://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n.\nI'm going to keep this open until I get more feedback indicating this is a\npressing problem. Because this has been default Raven.js behavior for years\nand ... it comes up very rarely.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/927#issuecomment-293699673,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABNcpF9heQkcehjARUXLDVLRvckhuWJXks5rvTWQgaJpZM4M4w9n\n.\n. \n",
    "peterlinnartz": "@dcramer Thanks for addressing this. Any way we can get a release with this fix?\n. ",
    "j15e": "Do you mean sourcemap fetching that enables readable exception stack trace? Very useful feature for us, otherwise a compiled JS stack trace is pretty useless.\n. Oh ok great! Thanks for the quick reply.\n. No fatal error but lot of warnings, never used the tool before so I am not sure wether this is normal or not :\nhttp://sourcemaps.io/validate?url=https%3A%2F%2Fs3.amazonaws.com%2Fsourcemap-app%2Fsourcemap-app-4c6cbfc20d7bd6d98810fa2ca7676571.js#warnings\n. ",
    "statianzo": "I believe #585 fixed this\n. ",
    "asbjornu": "One particular sample from our logs show the following information:\n- Browser: Dolfin 3.0\n- Device: Samsung GT-S8600\n- OS: Bada 2.0\n. ",
    "bnjmnt4n": "This would be a great feature to get, and it doesn't seem relatively difficult to implement. Perhaps a quick check if message.toString() == '[object Event]' and then a for-in loop to access properties of the event object. This would be great in helping debug issues with a site in Android 4.1 - 4.4.\n. Ping? Any updates?\n. ",
    "Morpho": "That would be a great feature! We have the same problems with old browsers!\n. Great! It is driving me nuts as well! +1\n. ",
    "rollokb": "This was driving me crazy so I wrote a patch for this https://github.com/rollokb/raven-js/tree/feat/old-webkit-Event-handling\nI'm going to test it out in production for a bit before submitting a pull request.\n. Seems to be working fine in production.\nEdit:\nSeems to be working fine, but only with Events which I've trigged myself. Still getting absolutely no information about the contents of the Event.\n. You're probably right. I was caught out by this when testing with PhantomJS.\nUpdated the branch \nhttps://github.com/rollokb/raven-js/blob/feat/old-webkit-Event-handling/src/raven.js#L1109-L1121\n. Slightly of-topic, but how is PhantomJS being loaded on this project? It seems to handle event properties incorrectly (i.e, it sees all Event props as its own). \n. ",
    "dani3l": "I got hundreds of those today from Facebook Browser v80 on Android 4. That is not really old, is it?\n. still happens on 3.9.1 a few hundred times a day, on facebook & android browser.name\nno stack trace whatsoever.\nshould we just ignore it ?. ",
    "gkorland": "We're getting many of these errors on Android 4.x with Android Browser\n. We are not getting those errors on rare browsers, we just got it on Windows 10 with Chrome  51.0.2704\n. ",
    "webschik": "Hi, guys!\nAlso I've got the Raven report\njs\n...\n\"exception\": {\n  \"values\": [\n    {\n      \"value\": \"[object Event]\",\n      \"stacktrace\": {\n        \"frames\": [\n          ...\n        ]\n      }\n    }\n  ]\n}\nin mobile browser on Android. The user agent is\nMozilla/5.0 (Linux; U; Android 4.4.2; de-de; GT-N7100 Build/KOT49H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n. I'm using the next hack as temporary solution:\n``` js\n    Raven.install();\nif (Raven._processException) {\n    const oldProcessException = Raven._processException;\n\n    Raven._processException = function (event, message) {\n        if (message && typeof message === 'object') {\n            // detect that it's an event\n            if (String(message) === '[object Event]') {\n                // message\n                message = stringifyEvent(message);\n\n                // type\n                event = event || 'event';\n            } else {\n                // stringify the other objects\n                try {\n                    message = JSON.stringify(message);\n                } catch (e) {\n                    //\n                }\n            }\n\n            arguments[0] = event;\n            arguments[1] = message;\n        }\n\n        return oldProcessException.apply(this, arguments);\n    };\n}\n\nfunction stringifyEvent (event) {\n    const data = {\n        eventPhase: event.eventPhase,\n        type: event.type,\n        isTrusted: event.isTrusted,\n        returnValue: event.returnValue,\n        timeStamp: event.timeStamp\n    };\n\n    if (event.target) {\n        data.target = {\n            src: event.target.src,\n            tagName: event.target.tagName || 'UNKNOWN_HTMLELEMENT',\n            className: event.target.className,\n            readyState: event.target.readyState\n        };\n    }\n\n    if (event.path) {\n        data.path = event.path.map((el) => {\n            const tagName = el.tagName || 'UNKNOWN_HTMLELEMENT';\n            const className = (el.className || '').replace(/\\s+/, '');\n\n            // DIV.class-1.class-2\n            return `${ tagName }.${ className }`;\n        });\n    }\n\n    return JSON.stringify(data);\n }\n\n. @AlexanderMatveev, it's ES2015 syntax.\nYou can [replace it](http://babeljs.io/repl/#?babili=false&evaluate=false&lineWrap=false&presets=es2015%2Cstage-2&code=Raven.install%28%29%3B%0A%0A%20%20%20%20if%20%28Raven._processException%29%20%7B%0A%20%20%20%20%20%20%20%20const%20oldProcessException%20%3D%20Raven._processException%3B%0A%0A%20%20%20%20%20%20%20%20Raven._processException%20%3D%20function%20%28event%2C%20message%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28message%20%26%26%20typeof%20message%20%3D%3D%3D%20'object'%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20detect%20that%20it's%20an%20event%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28String%28message%29%20%3D%3D%3D%20'%5Bobject%20Event%5D'%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20message%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20message%20%3D%20stringifyEvent%28message%29%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20type%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20event%20%3D%20event%20%7C%7C%20'event'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20stringify%20the%20other%20objects%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20message%20%3D%20JSON.stringify%28message%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20%28e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20arguments%5B0%5D%20%3D%20event%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20arguments%5B1%5D%20%3D%20message%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20oldProcessException.apply%28this%2C%20arguments%29%3B%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20stringifyEvent%20%28event%29%20%7B%0A%20%20%20%20%20%20%20%20const%20data%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20eventPhase%3A%20event.eventPhase%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20event.type%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20isTrusted%3A%20event.isTrusted%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20returnValue%3A%20event.returnValue%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20timeStamp%3A%20event.timeStamp%0A%20%20%20%20%20%20%20%20%7D%3B%0A%0A%20%20%20%20%20%20%20%20if%20%28event.target%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data.target%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20src%3A%20event.target.src%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tagName%3A%20event.target.tagName%20%7C%7C%20'UNKNOWN_HTMLELEMENT'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20className%3A%20event.target.className%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20readyState%3A%20event.target.readyState%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if%20%28event.path%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data.path%20%3D%20event.path.map%28%28el%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20tagName%20%3D%20el.tagName%20%7C%7C%20'UNKNOWN_HTMLELEMENT'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20className%20%3D%20%28el.className%20%7C%7C%20''%29.replace%28%2F%5Cs%2B%2F%2C%20''%29%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DIV.class-1.class-2%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%60%24%7B%20tagName%20%7D.%24%7B%20className%20%7D%60%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20return%20JSON.stringify%28data%29%3B%0A%20%20%20%20%20%7D)\n. @AlexanderMatveev, it's weird, because this works for my project. Probably we need more investigations there\n. @pfrendo, I've got the same error in the next code:\nnpm i raven-js@3.22.4\n```\n```\nimport {config} from 'raven-js';\nconfig('test-dns', {}).install();\n```\nThe solution here is to export the whole Raven module (in the first case config gets the wrong this):\n```\nimport * as Raven from 'raven-js';\nRaven.config('test-dsn', {}).install();\n```\n. I'm using Typescript 2.7.2 and webpack 3.11.0. ",
    "AlexanderMatveev": "+1 for this\n. @benvinegar I have 3.7.0 installed, but getting this error\n. @webschik Looks like a typo in this line:\njavascript\nreturn `${ tagName }.${ className }`;\nAnd are you sure about this construction is allowed:\njavascript\ndata.path = event.path.map((el) => {\nUP: Getting \"Unexpected token =>\" error with this fix\n. @webschik \n\n. @webschik Added this hack and looks like nothing changed, still getting just \"[object Event]\" error.\n. @webschik \nHere is the scripts order:\nhtml\n<script type=\"text/javascript\" src=\"[raven.min.js version 3.7.0]\"></script>\n<script>\n    Raven.config('https://[...]@sentry.io/[...]', {\n        release: '[...]'\n    }).install();\n</script>\n<script type=\"text/javascript\" src=\"[fix.js without first Raven.install() line]\"></script>\n. ",
    "yurynix": "Had the same with Raven 3.6.1 on hosted Sentry for UA: Mozilla/5.0 (Linux; U; Android 3.1; en-gb; GT-P7500 Build/HMJ37) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13\n. ",
    "danielcardoso5": "I also have several events, most of them are from an Android or Facebook browser. Even Facebook 95.0, which should be recent, is triggering this error. Android 4.. is the main OS and many of the devices where it's reported are Samsung-GT[something]. I'm using the 3.7.0 version.\n. ",
    "seeden": "Same here. . ",
    "rfviolato": "Same just like everyone here. If this info helps:\n\nUA: Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; GT-I8190L Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 [FB_IAB/FB4A;FBAV/87.0.0.17.79;]\nBrowser: Facebook 87.0.0\n. ",
    "riqui99": "the same here, any solution?? :S\n. ",
    "avdeev": "I have same issue\n\n. ",
    "danieleleoni": "I'm currently have the same issue... there are a lot of this errors and I'm reaching sentry threshold very soon \ud83d\ude1e . ",
    "sibblegp": "I'm getting dozens of these issues, all with Chrome 45 on Windows 10.. ",
    "quique0194": "It's still happening on raven 3.15.0, on facebook & android browser\nShould we just ignore it?. ",
    "devcorpio": "Anyone found a solution? In my case appears this in sentry:\n`[object Event]\nat trimHeadFrames(./node_modules/raven-js/src/raven.js:562:1)\n  at _logDebug(./node_modules/raven-js/src/raven.js:488:1)\n  at G._promiseRejectionHandler(./node_modules/raven-js/src/raven.js:430:1)`\nunhandledPromiseRejection: true\nUser agent:  Mozilla/5.0 (Linux; U; Android 6.0.1; en-US; vivo 1610 Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.5.8.1112 Mobile Safari/537.36\nDevice family: vivo 1610\nDevice model: 1610\nDevice brand: vivo\nAndroid 6.0.1\nUC Browser 12.5.8\nMy raven-js client version is: 3.25.0\nI attached a screenshot of the error (happens many times with many old browsers)\n\n. ",
    "hiroshi": "@kamilogorek \n\nThis is fixable in new SDK using event hints and custom error handling.\n\nCan you elaborate this? Any links to document?\nAt least which version we need?\nI prefer to have code snippet of those \"event hints\" and \"custom error handling\" settings for this issue.\nThanks!. ",
    "fardog": "Thanks!\n. ",
    "benoitg": "No objection to using logDebug per see.\nThe problem I do have is having this dependent on Raven.debug.  Aside from the documentation issue, setting Raven.debug true will spam the console with errors sent by isSetup(), which is called everywhere.\nA solution if we don't want to change the output of the rest of the code until the meaning and behaviour of Raven.debug is clearer, I propose to add an override parameter to logDebug that would ignore Raven.debug\nAs for calling it from makeRequest(), there is essentially not a single line in makeRequest we actually want to run when isSetup() is false.  That's why I put the check in send(). \nNow when isSetup() is true: \na) If you really want to log the value of src, I can move it into makeRequest (making essentially the whole body of makeRequest conditional).\nor\nb) If logging src isn't important, I'd just change the conditions in send to send to log if either isSetup is false OR Raven.debug is true\nWould that work for you?\n. @mattrobenolt  Ok, I think I made (or obsoleted) most changes discussed.\nI don't want to be pushy, but the nature of this patch forced me to rebase 3 times already, with non trivial changes each time, so I'd be most grateful if you could review as quickly as possible.\n. @benvinegar The scenario is that when developing (think on localhost) applications that use sentry, you have several issues (in order of decreasing importance):\n1. Things like captureException are not totally neutral.  When when sentry is operationnal, captureException is like a catch with a log.  When sentry isn't configured (which is typically the case locally), it becomes a silent catch that makes exceptions invisible.\n2. When using Raven.captureMessage, your logging becomes invisible.  You can double log it (console.log + Raven.captureMessage), but can't use console.warn, console.error, etc. as that would still get caught but the console plugin.  You end up with 3 lines (one to compose the string, one to console.log it, and one to captureMessage it), instead of one.\n3. When coding raven logging, as a developer you can't see if any of the extra data you pass as context is correct without separately logging it, which is cumbersome.  Especially important since it will ultimately only be available as strings once in Sentry (I can't count the number of times when a piece of data in my context ended up being [object Object] in actual sentry events.\n4. While this is rare, I've had code misbehave only once sentry was actually configured, because most of raven.js's processing wasn't actually executed (can't remember the specific issue, but as raven.js ultimately does things like capture backtraces, it's not surprising that sometimes we can hit corner cases).\n. @benvinegar Well, honestly I'd prefer that it depend on a different configuration parameter than Raven.debug (Raven.disableUnconfiguredConsoleOutput) whose default would be false.  I believe someone without a server configured, and now wanting a console output to be a bit of a corner case for most applications.\nThat being said, your proposal does solve my problem also (setting Raven.debug when server in not configured isn't much of a burden for most people, ASSUMING this time we document Raven.debug), so if you disagree with the above, feel free to go ahead with your original proposal.\nIf you need anything from me, feel free to ask.\n. @benvinegar Doesn't seem to be working.  Still investigating, but at first glance logDebug error in isSetup seems to stop any further processing.\n. @benvinegar it's not working for me in the real world.  Maybe an interaction with raven plugins.  I only get \"Error:  Raven has not been configured.\"  Pull request #369 fixes it for me.\n. @benvinegar The test above wouldn't have caught it.  I DID get the error output.  But it inhibited further logging by captureMessage\n@benvinegar  The whole thing is open source (https://github.com/ImaginationForPeople/assembl/)  , but making an unreleased version with non-working dependencies is not something I have time to do.\nSo, while I haven't managed to reduce it to a test case that has the same symptoms, here is one that does fail.  Different symptoms, but probably the real source of the problem (in any event, a real bug my patch in #369 does not fix anyway):\n``` javascript\n\n\n\nRaven.debug = true;\nconsole.error(\"Something\");\nRaven.captureException('test'); // NOTE: Raven not configured\n\n```\nIt outputs a \"Uncaught RangeError: Maximum call stack size exceeded\"\nIf you change to Raven.debug = false, the error is \"Something\" is correctly output from within  Raven's plugin/console.js\nI always wondered if that plugin interacted with logDebug, hence my original use of console.log().\nI have no clue why in a bigger app I get different symptoms however.\nAs for the fix, I'd just make logDebug not use levels and use console.log(), which isn't caught by the plugin.\n. Ok, I confirm that #370 fixes the issue, thanks.\n. Ok, I confirm that #370 fixes the root cause for me, so this pull request is obsolete.  Thanks @mattrobenolt, @benvinegar \n. Humm, actually, I either spoke too soon or am too tired.  Here my original test case still doesn't pass on chrome:\n``` javascript\n\n\n\nRaven.debug = true;\nconsole.error(\"Something\");\nRaven.captureException('test');\n\n```\nDoes it work for you guys?\n. @mattrobenolt @benvinegar If the root issue is too hard to fix, may I suggest again that (at least temporarily) logDebug only call console.log instead of obeying it's level parameter?  This will avoid triggering the console plugin, and still give us our output.\nWhat do you think?\n. Patch in https://github.com/getsentry/raven-js/pull/374 \n. @benvinegar this one does pass my test case.\n. @benvinegar Thanks for taking the time to tell me!  It's most appreciated.\n. I wanted to, but I didn't manage to assert the called state on functions indirectly called by the test (maybe I just don't know the sinon test framework well enough, everytime I tried, functions indirectly called asways assert called called false, whether or now they were called).  If someone points me in the right direction, I'm quite willing to make the change.\n. ",
    "danharper": "For anyone else looking, this is how we've solved it for Cordova: https://gist.github.com/danharper/a89685cc1028759345b8\n. I'm using Babel (which uses core-js), to get it to work there I've had to:\n1. delete window.Promise at the very start of the app, before loading any other code to ensure core-js's Promise polyfill is used instead\n2. register a handler as window.onunhandledrejection = .. instead of window.addEventListener('unhandledrejection', ..)\nMy handler looks like:\njs\nwindow.onunhandledrejection = e => {\n  console.warn('Unhandled Promise Rejection', e.reason)\n  Raven.captureException(e.reason, {\n    extra: { unhandledPromise: true }\n  })\n}\nAnd to delete the native Promise, I've got a file src/disableNativePromises.js\njs\nif (window.Promise) {\n  console.debug(`This browser provides a native Promise. I'm disabling it to force use of core-js to allow \"onunhandledrejection\".`)\n  delete window.Promise\n}\nand I'm loading that as the first file in my entry config for Webpack:\njs\nmodule.exports  = {\n  entry: [\n    './src/disableNativePromises',\n    'babel-polyfill',\n    './src/index'\n  ],\n  // ...\n}\n. It's a core-js issue, not Babel (Babel just uses core-js for most polyfills afaik).\nBut yeah, the issue is core-js currently doesn't take the Promise rejection events into account when deciding whether it should replace the native Promise implementation.\nThere's a discussion thread here: https://github.com/zloirock/core-js/issues/140, and there's a warning in their readme here.\n. ",
    "HazAT": "We have a new Cordova SDK https://github.com/getsentry/sentry-cordova\nDocumentation: https://docs.sentry.io/clients/cordova/\nFeedback is highly appreciated, closing this.\n  . Hey,\nCheck out our official client for react-native -> https://github.com/getsentry/react-native-sentry\nClosing this here since it's obsolete.\nIf you're still having troubles, please create an issue there.\nThanks. We have a new Cordova SDK https://github.com/getsentry/sentry-cordova\nDocumentation: https://docs.sentry.io/clients/cordova/\nFeedback is highly appreciated, closing this.. Hey,\nCheck out our official client for react-native -> https://github.com/getsentry/react-native-sentry\nClosing this here since it's obsolete.\nIf you're still having troubles, please create an issue there.\nThanks. Hey,\nCheck out our official client for react-native -> https://github.com/getsentry/react-native-sentry\nClosing this here since it's obsolete.\nIf you're still having troubles, please create an issue there.\nThanks. This has been fixed and will be in the next release.. We have a new Cordova SDK https://github.com/getsentry/sentry-cordova\nDocumentation: https://docs.sentry.io/clients/cordova/\nFeedback is highly appreciated, closing this.. Hey,\nCheck out our official client for react-native -> https://github.com/getsentry/react-native-sentry\nClosing this here since it's obsolete.\nIf you're still having troubles, please create an issue there.\nThanks. Hey,\nCheck out our official client for react-native -> https://github.com/getsentry/react-native-sentry\nThis now has native android support and a gradle built step which builds and uploads sourcemaps.\nI am closing this since this is mainly react-native related if the issues persist create an issue in the other repo please.\nThank you. LGTM \ud83d\udc4d \nBut I think @benvinegar or @LewisJEllis should give their final seal of approval.. We have a new Cordova SDK https://github.com/getsentry/sentry-cordova\nDocumentation: https://docs.sentry.io/clients/cordova/\nFeedback is highly appreciated, closing this.. I've closed this in favor of https://github.com/getsentry/raven-js/pull/985\nIt basically the same thing with a test.\nThx @yury . @davidfurlong I think there is no super easy solution for this. @sentry/browser should also run in node, but you will probably miss some of the hooks we attach to in @sentry/node. \nThe correct way would be to write a standalone SDK like https://github.com/getsentry/sentry-electron. Hey,\nThanks for reporting this, since I would say your conditions are a bit special I would just go with setting Raven._hasDocument = false.\nWe can't possibly support everything there might be in regards to global objects and all libraries that go with or without react-native.\nSo I hope this is fine with you, if this issue comes up in future more often we will think about it fixing it differently.. We have a new Cordova SDK https://github.com/getsentry/sentry-cordova\nDocumentation: https://docs.sentry.io/clients/cordova/\nAlso with Ionic support.\nFeedback is highly appreciated, closing this.\n. But other than that, nice job \ud83d\udc4d . @zifeo If you disable the native part, we do fallback to just use raven-js\nhttps://docs.sentry.io/clients/react-native/config/#additional-configuration\nSo yes, it is deprecated in raven-js and we should probably put it into our react-native-sentry repo.. @zifeo I assume you are running a react-native project with just raven-js.\nI would recommend removing raven-js and add react-native-sentry, disable the native integration if you like (I recommend using it though) and see if it works. \nThe public API should mostly be the same as raven-js except the naming Raven -> Sentry.\nIf there are still problems we can move the fix to the react-native repo.. @zifeo Have you tried adding this fix to the https://github.com/getsentry/react-native-sentry/blob/master/lib/raven-plugin.js ?\nIf this fixes it we should fix it there.. @zifeo Yeah, we want to deprecate the react-native integration here in raven-js, so we should move the change to https://github.com/getsentry/react-native-sentry. @zifeo I don't have a running CodePush example up and running, so if you already have and you are using react-native-sentry go ahead. If you don't I will do it.. @zifeo I went ahead and created a PR\nhttps://github.com/getsentry/react-native-sentry/pull/236. \n. Note:\nWe cannot use yarn workspaces yet since it requires the root package.json to be private:true.\nyarn install v1.3.2\ninfo No lockfile found.\nerror Workspaces can only be enabled in private projects\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.. I don't know why but travis has a hard time with this PR\nIt works without problems in my fork: https://travis-ci.org/HazAT/raven-js. I will close this here since you already created an issue in the right SDK\nhttps://github.com/getsentry/react-native-sentry/issues/377. @jan-auer @kamilogorek @mitsuhiko This is ready for the first review, all the functions and tests have been updated. There are still many TODOs in the code but mostly for docs so please ignore the docs for now for the first review. \nPlease review the architecture and general usage.. @justinappler It's live right now. @justincy can you make sure at the bottom of the event (in the SDK section) that it says 4.2.3 or even better you send me a link to one of those events to daniel@sentry.io. @justinappler @andrew-dixon 4.4.2 should fix the issue.. https://github.com/getsentry/sentry-cordova and https://github.com/getsentry/sentry-electron are both using our new SDKs internally. We already got a lot of feedback and the public API and in general should be pretty safe now.. @captbaritone Thank you for taking the time to look at our new SDK.\nI hope that I understood the question correctly if so I think I will have a good solution for this.\nFor the new SDKs we came up with something we call integrations.\nAn Integration basically can be anything that hooks into the flow of the client sending an event, even emitting event.\nSo I think what you want to do is build an integration.\nSee this integration for example: https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/sdkinformation.ts\nWe introduced eventProcessor which is basically a \"stackable\" dataCallback.\nThey will be executed in the order in which they where installed.\nso you could do something like this:\njavascript\npublic install(): void {\n    getCurrentHub().addEventProcessor(async (event: SentryEvent) => {\n        // mutate event before sending in here\n        // return mutated event OR null of you want to discard it\n    });\n}\nThis integration (in node) also configures a scope: \nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/integrations/onunhandledrejection.ts\nAnd the usage of you integration would also be super easy:\n```javascript\nimport * as Sentry from '@sentry/browser';\nimport { ReduxIntegration } from \"raven-for-redux\";\ninit({\n  dsn: 'DSN',\n  integrations: (integrations) => {\n     // integrations include all default integrations we provide\n     // you could do this:\n     integrations.push(new ReduxIntegration(/ you can pass anything here e.g. store/));\n     return integrations;\n  }\n});\n```\nI hope you get the idea, integrations are very powerful and make our SDKs super extensible in a logical understandable way.\nPlease let me know if this helps.. @SimonSchick Thanks for your feedback, also I like to mention that we are working the docs as we speak, it's planned that we ship the new docs today which should clear up everything but nevertheless I'd like to give you answers to your questions directly.\n1.: We dropped the \"arbitrary\" second parameter in captureException since it was unclear for many users what to pass in there, level worked, but not all properties of an event did, so we decided to drop it. captureMessage on the other hand now has a second parameter which only takes the level, which is now the preferred use-case for the scenario you described.\nThere is another way to set the level, even for a captureException call but I'd like to know if for your specific case, captureMessage is sufficient. (you can enable attachStacktrace you will get the stacktrace also with captureMessage).\n2.: Like I mentioned, scope docs are in the works, but you can think of it like a stack which is holding context information. The example you provided is almost correct and works the way as you expect.\n2.1.: For this case (while not documented here yet), we introduced a way to push and pop a scope. Every SDK after init creates the \"root\" scope, but if you want to send specific context information with an event you should push a new scope like this:\njavascript\nSentry.getCurrentHub().pushScope();\nSentry.configureScope(scope => {\n  scope.setUser({ id: 'superuser' });\n});\nSentry.captureException(err);\nSentry.getCurrentHub().pushScope();\nIn this code example we push a new scope (which is a clone of the current scope) onto the stack, all capture calls will have this context information set in configureScope until you call pop again.\n2.1.1: A scope lives in memory and is not persisted to disk or something like that, defining global context can be done in the root scope.\n2.2.: Yes, configureScope is synchronous.\n\nYou can set a global tag simply with \njavascript\nSentry.configureScope(scope => {\n  scope.setTag(bla, 'blub');\n});\n\nCalling clear in a scope, resets everything in there, tags, extra, breadcrumbs fingerprints, clear is helpful in scenarios where you push a new scope, want a fresh and empty state, call clear in the new pushed scope and after popping it, you will still have the global scope keeping all your stuff set before.\nThis was a bit of a long comment but I hope this makes stuff more clear.. @SimonSchick We are disscussing if we should add something like: \njavascript\ncaptureException(exception, scope => {\n  scope.setTag('bla', 'blub');\n  scope.setLevel('warning');\n}); \nwill keep you posted.. Update: It's already in master and the next rc will contain it.\nWe exposed withScope and added level on the scope, so the final code looks like this:\n```javascript\nSentry.withScope(scope => {\n  scope.setTag(bla, 'blub').setLevel('warning');\n  Sentry.captureException(new Error('bla'));\n});\n``\nThis example will have the tag and level only set for this exception.\nIf you want to set something globally, you still need to useconfigureScope.. @SimonSchick Correct,withScopepushes and pops for you, whileconfigureScopeonly gets you the current scope to change.\nWhile we generally support creating an custom client, we discourage this API since there are some drawbacks that come with it, e.g.: no integrations by default, we guide people to useinit.\nSo you really need to know what you are doing.\nAlso, we'd like to so it not as part of our \"public API\" contract.\nWhat you did in your example is basically what we do withwithScope`.. New plan, can we please split this PR into 3 PRs?\n1 PR => Core changes + Integration interface and rest of meta changes\n1 PR => Browser Integrations\n1 PR => Node Integrations. \n. Hey,\nAre you installing the package from npm?. kk, got it, fixing it right now :)\nSorry for the inconvenience \ud83c\udf7b . Sorry for the inconvenience, version 3.26.1 is released and should fix this issue.\nCan you please confirm that it works?. Hey, this is a duplicate of https://github.com/getsentry/raven-js/issues/1350\nWe moved raven-js into a subfolder packages/raven-js.\nWe are working to resolve the issue with bower.. Sorry for the inconvenience, version 3.26.1 is released and should fix this issue.\nCan you please confirm that it works?. Hey, this is a duplicate of #1350\nWe moved raven-js into a subfolder packages/raven-js.\nWe are working to resolve the issue with bower.. Sorry for the inconvenience, version 3.26.1 is released and should fix this issue.\nCan you please confirm that it works?. @kamilogorek We should consider deprecating 3.26.0 and 3.26.1 after we released 3.26.2 with this fix.. Thanks for reporting this, should be a quick fix.\n~~cc @jan-auer https://github.com/getsentry/raven-js/blob/master/packages/raven-js/src/raven.js#L1201\nIdeas why this is null?\nWe should add a test for this and fix it.~~\nNVM me, there is already a PR up for this https://github.com/getsentry/raven-js/pull/1359. Thx :). @ArmorDarks @erfanimani does the warning in the docs makes sense guys?\nhttps://github.com/getsentry/sentry-docs/pull/625. I will take a look at this, thx for reporting \ud83d\udc4d . Hey, please upgrade to 4.0.0-beta.1 this should fix the problem.\nAlso if you have any kind of feedback about the \"next\" sdks, we would highly appreciate it \ud83d\udc4d . Sorry it's, 4.0.0-beta.3 I messed up the releases.. This change wasn't included in @sentry/browser, but we have integrations now which should make this change more clear: https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/globalhandlers.ts\nWe are open to receive a PR for this :) . \ud83d\udc4d . @vietbui \nIn 4.0.0-rc.1 we introduced a function on the client called close, you call it like this:\n```js\nimport { getCurrentHub } from '@sentry/node';\ngetCurrentHub().getClient().close(2000).then(result => {\n      if (!result) {\n        console.log('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n})\n```\nclose will wait until all requests are sent, it will always resolve (result = false timeout was reached), up until the timeout is reached (in this example 2000ms).\nThis is our official API.\nWhile the prev approach will still work, the close method works for all cases.. @rdsedmundo Can you elaborate why this approach isn't working for you?\n```javascript\nimport * as Sentry from '@sentry/node';\nSentry.getCurrentHub().getClient().close(2000).then(result => {\n      if (!result) {\n        console.log('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n})\n```\nThis is our official approach and basically Sentry.flush().\nref: https://docs.sentry.io/error-reporting/configuration/draining/?platform=javascript. @rdsedmundo I am not sure if I maybe misunderstanding something but if you do\n```javascript\nimport Sentry from './sentry'; // this calls Sentry.init under the hood\nexport const handler = async (event, context) => {\n  try {\n    ...\n  } catch (error) {\n    Sentry.captureException(error);\n    await Sentry.getCurrentHub().getClient().close(2000);\nreturn formatError(error);\n\n}\n}\n``\nIt's exactly likeawait Sentry.flush` only that you define the timeout.\nThe promise resolves after 2000ms for sure with false if there was still stuff in the queue. \nOtherwise close will resolve with true if the queue has been drained before the timeout is reached.\nOr will the container be reused before all promises are resolved? (I can't imagine that). No, close doesn't dispose the client, it's just here for draining the transport queue.\nI agree that the name close in this context may be misleading but at least in JS/Node close doesn't do anything with the client and it's perfectly fine to still use it afterward.\nEdit: If that was actually the \"issue\" I will update the docs to make this clear.. OK, we just discussed this matter internally in the team. \nYou guys were right and while JavaScript right now doesn't behave the way we documented it \ud83d\ude48 we will introduce a flush function which will do exactly what you expect.\nSo right now you can use close without any issues (not sure if we are going to change it to dispose/disable the client in the future).\nBut there will be a flush function which is there to just flush the queue.\nI will update this issue once the feature landed.. Thanks all for all the possible solutions, tl;dr for everyone coming here\nUse: await Sentry.flush() to send all pending requests, this has been introduced in 4.6.x.\nClosing this, please feel free to open a new issue in case anything is missing (but this thread is already super long).\nCheers \ud83d\udc4d \ud83c\udf89 . @djmaze All versions are now in the repo, sorry for the inconvenience.. @rowlando All versions + tags are in the repo now, sorry for the inconvenience.. Thanks \ud83d\ude05 . Thx @vietbui I will close this issue now.\n@alexbowers Please note that there is a limit of how much you can send with each event, if it's over 200kb we discard it so be mindful what you put in there.. Sorry, it's not possible to chunk events, 200kb is the absolute limit.. Please consider adding new functionality to this package https://github.com/getsentry/sentry-javascript/tree/master/packages/browser\nsince this will be our new SDK for the future.\nThere is this integration which handles breadcrumbs.\nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/breadcrumbs.ts\n. We will probably not add this feature in raven-js anymore.\nFor our new SDK @sentry/browser there are options that might help you, even though I don't know the reason for you getting the breadcrumbs.\nFor init\nthere is:\n```javascript\n  /\n   * A callback allowing to skip breadcrumbs.\n   \n   * This function is called for both manual and automatic breadcrumbs before\n   * all other callbacks. Note that the SDK might perform other actions after\n   * calling this function. Use {@link Options.beforeBreadcrumb} for\n   * notifications on breadcrumbs instead.\n   \n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns True if the breadcrumb should be added, false otherwise.\n   */\n  shouldAddBreadcrumb?(breadcrumb: Breadcrumb): boolean;\n/\n   * A callback invoked when adding a breadcrumb, allowing to optionally modify\n   * it before adding it to future events.\n   \n   * This function is called after {@link Options.shouldAddBreadcrumb} and just\n   * before persisting the breadcrumb. It must return synchronously.\n   \n   * Note that you must return a valid breadcrumb from this callback. If you do\n   * not wish to modify the breadcrumb, simply return it at the end. To skip a\n   * breadcrumb instead, use {@link Options.shouldAddBreadcrumb}.\n   \n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns The breadcrumb that will be added.\n   /\n  beforeBreadcrumb?(breadcrumb: Breadcrumb): Breadcrumb;\n/*\n   * A callback invoked after adding a breadcrumb.\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   /\n  afterBreadcrumb?(breadcrumb: Breadcrumb): void;\n```\nso you can do \njavascript\ninit({\n    dsn: \"__DSN__\",\n    shouldAddBreadcrumb: () => { return false }\n});\nWe do not want users to change breadcrumbs we store by default, but we exposed global options so you can control what will be added and what not.. For new SDKs it's here: https://github.com/getsentry/sentry-javascript/pull/1497. @tvanier Preparing an RC release today with beacon as the default transport \ud83d\ude04 . Hey, thanks for pointing this out, https://github.com/getsentry/sentry-javascript/pull/1512 fixes it.. @eele94 We will soon release new docs\nHere is the latest version: \nhttps://github.com/getsentry/sentry-docs/pull/293/files#diff-ba07bb28fab750ed13e063f7cef81e8b. For new projects use we guide people to use: @sentry/browser\nOfficial blog post + docs will be shipped tomorrow.. Hey, you should be able to use an event processor.\nSo in any point in time you can do:\njs\nSentry.configureScope(scope => {\n  scope.addEventProcessor(async event => {\n    // Add anything to the event here\n    // returning null will not send the event\n    return event;\n  });\n});\nHope this helps.. @pkuczynski \nUpdated the section\nhttps://docs.sentry.io/platforms/javascript/#eventprocessors. Hey, thanks for bringing this up.\nWhile we understand and generally agree with your concerns about bundle size I think it's fair to first compare the gzip bundle sizes instead of the uncompressed minified file size:\n@sentry/browser is 21.3799 KB\nraven-js 13.44 KB\nAlso, while this might not be applicable to everyone, we provide and usually guide people to use our CDN Loader which will set up the SDK for you on your website.\nsee : https://docs.sentry.io/quickstart/?platform=browser\nThe footprint and impact on your pageload time of this script it <1KB gzipped while keeping the same functionality.\nso tl;dr:\nWe are aware of it, we know there is room for improvement but it's not top priority right now.. @klaemo \nHehe, no worries \ud83d\ude05 \nLike I said, we are aware and it's not like we don't want it to be smaller. \nHighest prio for us was to ship the new SDK, we will work to improve the bundle size over time.\nThere are many more steps we can take, e.g.: use tslib, combine strings ...\nSo there is a lot of space for improvements.\nSorry, the link I posted before is already outdated \ud83d\ude43 \nI was referring to the Loader: https://docs.sentry.io/platforms/javascript/loader/\nWhile the Loader also has it's limitations due it's async nature and in the end, it still fetches and injects the SDK (even if it's async) it's an alternative we offer because people asked for it. . @rayzru Just released 4.0.5, but please keep posts related to the topic.. @jacobrask It's definitely on our list and we also think there are some low hanging fruits where we can easily reduce our bundle size.\nMore and more people asking for this so we will probably tackle this sooner than expected.. @vkrol We had to revert the changes that @gaterking made, at least for the npm package.\nThe bundle on CDN on the other hand should be smaller.\nWe will for sure re-add the changes but we need to talk about it since we need a dep on tslib for example.\nAlso how typings were generated was broken.. @gaterking @kamilogorek Fixed it already https://github.com/getsentry/sentry-javascript/pull/1751\nWe just had to do an \"urgent\" release that's why we reverted it.. @mindplay-dk It's mostly because JavaScript and Browsers are a mess ^^\nWe need to do a lot of fixing up broken/wrong stack traces.\nThe simple task of \"just catching errors\" is also way more complex than it seems.. @aguynamedben Cool example, thank you very much for this.\nWe will soon release a new way of how to strip sensitive data in SDKs, stay tuned.. Released 4.0.5 cc @Hakonwibergh . @Hakonwibergh I would go ahead and open an issue in the sentry repo: https://github.com/getsentry/sentry/issues. You forgot it somewhere ^^\nhttps://github.com/getsentry/sentry-javascript/pull/1603\nhttps://github.com/getsentry/sentry-javascript/pull/1603/commits/a3c439bafd6792319018bfda72e43720cfd9b9e4. I would say the best approach would the use beforeSend\n``js\nSentry.init({\n  dsn: \"DSN\",\n  beforeSend: event => {\n   if (IS_DEBUG) {\n     console.error(event);\n     return null; // this drops the event and nothing will be send to sentry\n   }\n   return event;\n  }\n});. I will merge this as soon as I debugged my plugin in the evening ^^. Not with an integration yet, you have to usebeforeSendoption and filter it yourself.. This should be fixed in4.1.1, sorry about that.. Can you change your import toimport * as Sentry from \"@sentry/node\";and try again?!. Please update to4.1.1, it's fixed there :). @yohaia4.2.x. Please update to4.1.1, it's fixed there :). I think what you really want to do is, instead of callinginityou want to probably create your ownClientand send off your captured errors to your Sentry installation.\nIf you callinit` we hook into a lot of global hooks, (error handler, unhandled promises, breadcrumbs) you would receive all event from the parent application which is on one hand a security concern and on the other hand it sends errors to you that may not be related in any form to your app.\nCreating your own Client works the same as with init\n```js\nimport * as Sentry from '@sentry/browser';\nconst client = new Sentry.BrowserClient({\n  dsn: 'DSN',\n});\n//\nclient.captureException(new Error('bla'));\n```\nIs that what you actually want?. @egor-sorokin To give you a full example see:\n\n```js\nimport { BrowserClient, Hub } from \"@sentry/browser\";\nconst client = new BrowserClient({\n  dsn: \"https://123@sentry.io/123\",\n  maxBreadcrumbs: 100,\n  environment: \"dev\",\n  beforeSend(event) {\n    console.log(event);\n    return null;\n  }\n});\nconst hub = new Hub(client);\nhub.configureScope(scope => {\n  scope.setTag(\"a\", \"b\");\n});\nhub.addBreadcrumb({ message: \"crumb 1\" });\nhub.captureMessage(\"test\");\ntry {\n  a = b;\n} catch (e) {\n  hub.captureException(e);\n}\nhub.withScope(scope => {\n  hub.addBreadcrumb({ message: \"crumb 2\" });\n  hub.captureMessage(\"test2\");\n});\n```\nThe hub is your central point now, you should be able to use all functions that are described in the docs.. @egor-sorokin I agree this should be somewhere in the docs, but rather in an advanced section, here for example: https://docs.sentry.io/platforms/javascript/\n. @egor-sorokin That's actually a security concern what you are trying to do.\nThere may be a workaround for this but imagine the following:\nSomeone adds your Package to their App, they are using Sentry and your Package is able to intercept errors that they throw in their App. \nThis is not good.\nThere is no \"isolated to just my app/package\" error handling, JavaScript doesn't provide a way to do this.. Can you try to call init after you initialized your Vue app?\nOr not passing it at all, but still calling init after new Vue with just new Sentry.Integrations.Vue()?!. I will take a look what's going on, thanks for trying it out. . So I just tried it out here:\nhttps://codesandbox.io/s/03mx928290\nIt works as expected, I do not get [undefined].\nOpen the console, and check for the event output.. You have to use\napp.use(Sentry.Handlers.requestHandler())\napp.use(Sentry.Handlers.errorHandler())\nlike explained here: https://docs.sentry.io/platforms/javascript/express/\nCheers!. @dj-hedgehog Does this help?\nhttps://docs.sentry.io/learn/draining/?platform=node. How does your import / require statement look like of @sentry/browser?. You can write your own transport class and still use Sentry.. No, but I referrerPolicy error, I think.\ntbh I am not sure where this is coming from though.. There is an option called attachStacktrace for init see: https://docs.sentry.io/learn/configuration/?platform=browser#attach-stacktrace\nAfter that you call captureMessage and you will get a stacktrace.. While attaching a stack seems simple, it actually adds a overhead to performance and payload.\nIn regards to capturing any extra data with an event, you can do it either by using configureScope or withScope see: https://docs.sentry.io/learn/scopes/?platform=browser\nAlso if this seems not to be enough you can write your own integration.. Can you post your setup, how does your Sentry.init look like?\nI can't really reproduce this see:\nNode: https://codesandbox.io/s/42z1088z3w\nBrowser: https://codesandbox.io/s/zkko3l484x\nFirst of all, I don't understand we shouldn't send http errors to Sentry, at least on node.\nAnd secondly our Dedupe Integration should also take care of this.. @aguynamedben sentry-electron 0.14.0 has been released with this fix.. @maxpaj yes. Thx for reporting this, fix will soon be released.. Fixed in 4.2.1. Can I ask you guys what kind of packager are you using?. Yeah, I am currently digging into this, webpack outputs this warning, our SDK works.\nI am looking for workaround that webpack doesn't spit out this warning.. OK, I've found a workaround:\nhttps://github.com/getsentry/sentry-javascript/pull/1679/commits/9cf2c4bc18fe0d58579d79ffc02a2b760c275bb1#diff-f42b1df1354d117face937b0ba20beb0\nThis should fix it, releasing a fix soon.. @Prtkpwr You should be able to use it right now anyway, it's \"just\" a warning.\nWe are still testing stuff to make sure we do not regress.. 4.2.2 is on it's way now. Thanks for reporting this, this is very odd.\nIf I build everything locally my file exactly looks like your fixed file.\nWhen I download the npm package I get the inline imports.\nInvestigating this now, thanks for reporting this.. @juanhenriquez 4.2.2 is on it's way now, max 1h. @KevCJones TBH I haven't checked exactly what was going on and why we had requires in the code there. The code diverged from already from master, I just made sure that we did not re-export the functions that weren't supposed to be exposed at first. . To be honest, the only reason it's an integration instead of a package on its own is the maintenance \"cost\".\nI am not really familiar with Ember CLI but I don't see a reason why this shouldn't work with @sentry/browser.. Just a quick update on the initial topic:\nWe decided to add additional functions on the scope\nsetTags, setExtras & clearBreadcrumbs\nVersion 5.0.0 will include those and therefore make the boilerplate code obsolete.\nI am closing this issue, PR can be tracked here:\nhttps://github.com/getsentry/sentry-javascript/pull/1919. It should be fine to just do:\njavascript\nSentry.init({\n...\n  integration: [new Sentry.Integrations.InboundFilter({ ignoreErrors: ['regex'] })]\n...\n});\nBecause we make sure that we only have one integration with the same name in our list of integrations.. We have to fix the option to make it work, this is a bug.\nRight now setting the option in the integration is a workaround.. Here is a working example of how to setup angular, can't reproduce this https://codesandbox.io/s/jpm71lq17w . Probably related: https://github.com/getsentry/sentry-javascript/issues/1798. See comment: https://github.com/getsentry/sentry-javascript/issues/1798#issuecomment-454415368. @williamxsp Thank you very much, will take a look at this today.. 4.5.2 has been released, this version should fix the issue.. We will discuss if we make ReportingObserver opt-in instead since this is causing more issues than it helps.. Why should this be wrong? This is perfectly fine.. Thank you :). This has already been fixed but not released yet.\nThanks for reporting.. This has been fixed in 4.3.4. Fixed with 4.3.4 sorry for the inconvenience.. @stripathix It's more that the tooling is hard, we still do not fully understand what caused the issue. Somehow the import of tslib was broken in our utils library (but only there). We fixed it by working around the need for tslib to be imported there. I don't think \"use strict\" und TSLint (we use it) helped us there. We added a test so we catch something like this before we release stuff.. @Galkon I replied on the electron issue already 0.16.0 should fix the issue.. @MartijnHols We are currently working on a major release that should significantly reduce the memory footprint our SDK. If you feel adventurous you could try it out https://github.com/getsentry/sentry-javascript/pull/1919. Hey, so here is a working example:\nhttps://codesandbox.io/s/z3wyllkpq4\nHope this helps.\nThe thing that's missing is to make your new Hub the current global hub.\nUsing getCurrentHub instead of new Hub makes sure it works that way.\nI am closing this if you are still having troubles let me know.. just tried it\n\u279c yarn add @sentry/browser@4.4.0\nyarn add v1.3.2\ninfo No lockfile found.\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfile.\nwarning Your current version of Yarn is out of date. The latest version is \"1.12.3\" while you're on \"1.3.2\".\ninfo To upgrade, run the following command:\n$ curl -o- -L https://yarnpkg.com/install.sh | bash\nsuccess Saved 7 new dependencies.\n\u251c\u2500 @sentry/browser@4.4.0\n\u251c\u2500 @sentry/core@4.4.0\n\u251c\u2500 @sentry/hub@4.4.0\n\u251c\u2500 @sentry/minimal@4.4.0\n\u251c\u2500 @sentry/types@4.4.0\n\u251c\u2500 @sentry/utils@4.4.0\n\u2514\u2500 tslib@1.9.3\n\u2728  Done in 3.34s.. Not sure if it's a cache or something but it's there\nhttps://www.npmjs.com/package/@sentry/core\nhttps://www.npmjs.com/package/@sentry/browser. @adrienboulle So your point basically is we are lacking documentation on how to use the internals of the SDK if you want to manage everything yourself?. Thanks for this amazing PR \ud83d\udcaf \nAt first glance this really looks solid, the CI errors are because it's a \"third party\" PR.\nWe will test it locally and merge it soon.\nutils do not have a single entry point because we wanted to harvest \"deep imports\" to use different files in browser and node.\nEdit: Something that's not necessary but, do you already have some number of how much we size we save using esm over the es5 build?. Would love that, like I said before the code changes you did so far look really solid :) . Hey, sorry for the delay. We did not forget about this but we still need some time to merge this.\nWe want to release a patch release first, the next minor bump will include this.. @cromefire Thanks for reacting so quickly, could you please just restore the deleted raven-js file and merge master in. All tests should work then.. @cromefire \n\n. Thanks again, awesome work!. We dropped the second \"magic\" arbitrary object in captureException the new official way of doing this is setting stuff on the scope like:\njs\nSentry.withScope(scope => {\n    scope.setExtra('debug', false);\n    // scope.setTag\n    // scope.setUser\n    // scope.setLevel\n    Sentry.captureException(e);\n});\nSending the req or something else, either requires to add it in the beforeSend option.\nOr add a custom eventProcessor to the scope:\njs\nSentry.withScope(scope => {\n    scope.addEventProcessor(event => {\n      // change anything in the event here\n    });\n    Sentry.captureException(e);\n});\nHope this helps.. Btw. this should help to migrate: https://github.com/getsentry/sentry-javascript/releases/tag/4.0.0. You can call captureEvent but you need to fully build the event by yourself. \nThis function basically exists only if someone wants to build their own SDK which does something like that.\ncaptureException under the hood does way more to extract the stack trace and so on.. @vhu I guess our docs can be improved here:\nhttps://docs.sentry.io/platforms/node/koa/\nBut you would do something in the lines of in your custom scope.addEventProcessor do:\nSentry.Handlers.parseRequest(event, req);\nIf that solves it we can add it to the docs.. So something is wrong with the CI, other than that this looks good.. I think what you want is \njs\nSentry.init({\n...\ndefaultIntegrations: false\n});\nIf this is set to false, Sentry acts as a Client to our API. Only the stuff you call with captureMessage / captureException shows up. No by default breadcrumb or error tracking.\n. How do you guys init code look like?\nAlso, how do you capture the error or are these global errors that the SDK catches?. @mogelbrod Thanks for the code, that really helps.\nWhat version of react are you using?\nEdit: OK, I noticed error boundaries are a React >= 16  thing, still what minor version are you using.\nbtw this error is for sure on our side, our SDK does not perform well when captureException receives a non error object.. In this example, we use the error boundary and it works correctly:\nhttps://codesandbox.io/s/1z54l6m05l\nWe will still fix this though.. The clarify the outcome of this issue.\nThere were some cases where we internally did not handle promise rejections correctly, this has been resolved in version 4.5.0, so if you are using currently the latest version 4.6.4 this should no longer happen.\ntl;dr Was a bug, got fixed.\nClosing this issue.. Sorry about this issue guys but are you able to provide a small repro case for this?\nWe have tests in place that test for this so we need to be able to reproduce this in order to fix it.\nAlso please make sure to use the latest version > 4.5.0. I tried it with a clean angluar 7 project, not doing more than here locally:\nhttps://codesandbox.io/s/jpm71lq17w\nWorks without any issues. Please provide a repro case.. @candidosales Thanks for the repro case, confirmed, also crashes for me.. 4.5.2 has been released, this version should fix the issue. Closing this for now.. @candidosales Hey, was trying your example app and the error wasn't sent :|\nBut I found the issue and fixed it, sorry about that, see: https://github.com/getsentry/sentry-javascript/pull/1842. Just to also update this here, version 4.5.3 fixed this issue.. I think these issues are related: https://github.com/getsentry/sentry-javascript/issues/1798. See comment: https://github.com/getsentry/sentry-javascript/issues/1798#issuecomment-454415368. 4.5.2 has been released, this version should fix the issue. Closing this for now.. @mogelbrod Provided the right answer, thanks :) \nWhile we know this is more code to write we think this API is more clear and explicit.\nBefore the second was basically, pass an object in, \"maybe\" we pick it up and put in the event.\nClosing this since it's not an actual bug.. Closing this issue since it seems to be resolved.. This should have been fixed in the latest version 4.5.0.. @sgotre Can you elaborate?. Did you try to run our electron SDK? https://github.com/getsentry/sentry-electron. Thanks, that makes sense.\nWe need to document and fix this.. Thank you for this nice bug report and repro case :)\n@kamilogorek Maybe we should check if the topmost frame is [native code] and skip to the next if that's the case.. I am not really sure if our SDK is the culprit of this error.\nCan you provide a repro case for this?. Can you please next time use our predefined issue template?\nI am not sure which version of the SDK you are running, and neither do I know how to reproduce this.\nOur new SDK no longer supports passing an object as a second object to captureMessage.\nIf you want to send additional data you have to use scopes now, see: https://docs.sentry.io/enriching-error-data/scopes/?platform=javascript. Can you provide a repro case for this please?. Please upgrade to the latest version 4.4.2 the error should be solved there.. Hope this example helps:\nhttps://codesandbox.io/s/l7qrkjn7nm. Hmm not sure, but we do pass in the options: https://github.com/getsentry/sentry-javascript/blob/c56f9a180a5890a02cd26884df8ec35f74895491/packages/browser/src/backend.ts#L57. Good catch, we will probably add this again.. Can you please update to 4.5.0 and see if this is still an issue?. New release 4.5.2 coming today will fix this.. @kamilogorek Can you add a 5.0.0 section to the changelog and merge this.\nI've created a new branch called major/5 which should have all changes for the next major release.\nIf you added the changelog, feel free to merge it into this branch, I will create a PR to master afterward to track the major release.. This should already be in master, not released yet. yeah, we'll do a release.. We happily accept PRs for this :) . This is already really helpful, thanks \ud83d\udcaf \nWhen we find some time we will implement a pluggable integration for this.. @Sija thx, good to know\nWant to reply manually anyways when release is published.. We will deploy a new version today. stay tuned.. @pavlokit @candidosales Version 4.5.3 has been released. Sweet \ud83d\udc4d . Hey, indeed we did not implement this function yet.\nIt's not an often requested feature, can you elaborate the use-case why you would need a uninstall function?\nThe reason being not adding an uninstall function is that we actually do not have an install function anymore, there is only init. And we thought that if people for whatever reason want to uninstall the SDK they should do a page reload and not call init anymore.\n. I am not sure where this issue is going, no one stops you from just importing the function you want to use like \nimport { captureMessage } from '@sentry/browser';\nWe also provide a (non documented yet) esm build which should help with tree-shaking.. So I think the problem is that you try to bundle both together, we never built the packages that this works (and probably never will).\nThe only thing you could do is have two bundles, one with @sentry/node for node and one with @sentry/browser for the frontend code.\nThere is sadly no way around this I think :/. You could do this by binding a new client afterward like:\n```js\ninit ...\n// After some while\nconst client = new BrowserClient({\ndsn: ...\nintegrations: [...Sentry.defaultIntegrations, new Sentry.Integrations.Vue({ Vue })]\n});\nSentry.getCurrentHub().bindClient(client);\n```\nThis should do it.\n. Please do not delete the branch yet, we delete it when we merge 5.0.\ndo not delete the branch yet. Just tried it and works just fine, please provide a more detailed repro case.\nAre you calling captureException or is it a global error?\nWhat is $release in this case?\n\n\n. Draft pull request doesn't work yet \ud83d\ude1e . Hard to say, in that case, you could use our CDN \nhttps://docs.sentry.io/error-reporting/quickstart/?platform=browser\nAnd import Sentry before your App bundle, that way you will also catch \"syntax\" / \"reference\" errors that happen in your bundle.\nHow you use Sentry itself doesn't change since we add Sentry to the window.. Hey, thank you for the feature request.\nIn general, this is not a bad idea but we will not likely implement something like this in the near feature.\nThis would be one package more to maintain we would need to polyfill or \"gatekeep\" some functions which seem unnecessary work.\nWhat you could do is, I suppose you have two builds/bundles running one for node and one for browser.\nYou could just import and use @sentry/minimal, share this code between browser and node but at the entry point of browser/node you either call:\nbrowser.js\nimport { init } from '@sentry/browser';\ninit ...\nnode.js\nimport { init } from '@sentry/node';\ninit ...\nThe minimal package delegates all the call to the client initialized.\nHope this helps, closing this since this is not on our roadmap right now.. I am still not fully conviced :|\nThis will be a global unhandled error ... stopping the users application.\nOne can argue now what's worse, having Sentry not sending some errors or Sentry being responsible that your app breaks?!\nI am still more on the side of logger.error since throwing an error now is theoretiacally also a breaking change.. This is correct, we create a global var called __SENTRY__ where we keep the state stored.\nWe need this, this is where the Hub lives, is there any particular problem with it?. Why are the tests not running at all? \ud83e\udd14 \n. hey @benvinegar :)\ninstall wasn't really used in @sentry/browser already.\nOnly to set Error.stackTraceLimit = 50;\nsee: https://github.com/getsentry/sentry-javascript/pull/1919/files#diff-dda6e6fb49918cb8c88c1e6af83e4585L34\nSo with that change we really only remove implicit internal functionality, since the only call to install was in init: https://github.com/getsentry/sentry-javascript/pull/1919/files#diff-867baf4b7df6e7e6158b92082b86d68fL25\nInstead now we set the stackTraceLimit in the global error handler integration.\nKeeping this as a noop doesn't really add anything since it, as mentioned before, install was only used in raven-js.\nWith the new SDKs we made install implicit by just calling init.. @benvinegar There are no code changes needed, the \"Static API\" didn't change.\njs\nSentry.init({dsn: \"DSN\"});\nSentry.captureException(new Error('test')); // This was never a promise\nInternally if you created your own Client, something like:\njs\nconst client = new Browser_Client({dsn: \"DSN\"});\nclient.captureException(new Error('test')); // <- this no longer returns a promise\nthe API of Client no longer returns Promise instead now only returns string | undefined (event_id).. hey @neemah sorry for the headache this is causing.\nBut can you elaborate a bit more what you are doing?\nI tried to run a simple example see:\nhttps://codesandbox.io/s/0x4lor4zq0\nBut can't reproduce this.\n. Thanks for your patience on this guys, serialization in JS is hard.\nClosing this issue.. Depending on the bundler you use you need to work around this yourself, sorry.\nWe will not add something to our SDK that fixes a dev hot reload behaviour and we will not change init so it cleans everything up since this might have a lot of other implications.\nIt's probably something like:\nif (module.hot) {\n  module.hot.accept(function() {\n    global.__SENTRY__ = undefined;\n  })\n}\nSorry, hope this helps.. @OliverJAsh Oh, good catch, we will fix this, thank you.\nAs a workaround you could do this:\njs\nSentry.init({\n  ...\n  integrations: [\n    new Sentry.Integrations.OnUncaughtException({\n      onFatalError: error => {\n        console.error('Test onFatalError');\n        console.error(error);\n      },\n    }),\n  ],\n  ...\n});. Closing this since it's not a bug.\nAdditionally the next major version makes Dedupe optional, which means there is no deduping by default.. What tool are you using to evaluate this?\nand\nIs it possible for you to upgrade to @sentry/browser?. @mitsuhiko This PR is already manually merged in major/5 branch, we will create a new PR.. Can you please explain what you mean by Client-side notifications?\nHow does you code look like and what are you trying to do?. Can you please enable debug to see what's going on:\njs\nSentry.init({\n    debug: true,\n    dsn: \"DSN\"\n});. Of course makes sense \ud83d\udc4d . I tried it with rollup but failed and didn't want to spend much time on it.\nSince the outcome should be the same I would say we stick with webpack.. Tried to rewrite it, but because I use a local import here instead of package import it fails with:\n[ts] Return type of public method from exported class has or is using name 'Event' from external module \"/Users/haza/Projects/HazAT/raven-js/packages/core/lib/Interfaces/Event\" but cannot be named.\nThis is the way it should be imported import { Client, Event, IAdapter, IBreadcrumb, IUser } from '@sentry/core'; then it works.. So the fancy thing about this is that I can write this.adapter everywhere in my code and have a check if an adapter is set. But yeah, it is not necessary .... So I took this merge function basically from raven-js and I guess we want to keep the same logic.. I would make it \"public\" when we actually need it somewhere else.. So yeah, sentry-wizard could help here, it would create the file for you but it is not yet implemented for \"generic\" projects.\nIf install @sentry/wizard and select \"Create Sentry Cli config\" I could make it so it creates the file locally.\nAlso, I am not sure if we should promote sentry.properties or .sentryclirc or both?\n@mitsuhiko @jan-auer . Thanks for the review, so about this function. I wasn't able to import the existing implementation and I want to have a fancy typescript and also thinking about if it would be possible to prevent circular refs upon setting it instead of reading.\n. Resolved offline, we make another PR which handles instrumentations separately. . We can make it optional and fallback to the initialScope. We have one global install with create all other related tests push a seperate scope.\nSo this should be fine.. One is import and one a re-export, not sure if you or I missed something \ud83d\ude05 . http://www.typescriptlang.org/docs/handbook/functions.html\nOverloads :) . There was an issue when running it with SDK loader thatevent was null/undefined.. I was thinking that we only pass in the options and if we need some fancy behavior our DSN class supports, we create a DSN object in the backend. \nSee: https://github.com/getsentry/raven-js/pull/1323/files#diff-261a7b228c5d644e74c94c3f99ba8a9eR147\n. Isn't this too much if we store references to global in the mechanism?. install & uninstall can be just public install(): void { it's shorter. handler must stay like this cause we pass it around.. Since we are not exporting this, I think we can move it directly into the call of initAndBind. nit: We always end comments with a .. This should be this.handler.bind(this). This should be this.handler.bind(this). _window.addEventListener('unhandledrejection', this.handler.bind(\n      this,\n    ) as EventListener);. _window.removeEventListener('unhandledrejection', this.handler.bind(\n      this,\n    ) as EventListener);. As discussed, these can all be new integrations and call Raven._xxx(); in install(). \nBonus points for storing internal the old impl and reset it in uninstall().. Do you remember why we need this exactly again?. nit: Array.isArray is only supported by IE 9 + right? We should just keep that in mind.. You can remove all the TODO and dead comments in this file.. Can we please add unit tests for this.. Can we please add unit tests for this.. Can we please add unit tests for this.. Do we need this rule here?. Can we remove this also to have more consistency in the codebase.. The complexity and code structure of this file is not optimal, can we refactor this somehow, it's really hard to follow what's really happening here.. Can we refactor the whole file a bit, I don't really like the nested function stuff, it's hard to read and understand.. \ud83d\udc4c . Need to update this.. Need to update this.. We have to somehow migrate this into the existing .travis.yml. Update url.. Need to update this.. Remove/change.. Shouldn't we add a return here, just for safety?. I missed this in a prev PR, but can we rename this to __sentry__ \ud83d\ude2c . async handles everything \ud83d\udcaa . So I am not sure about this, not really happy that this is by in the core. \nEither we need some kind of event system so SDKs can react to this or something because this way we would have no way to turn them off.. Since we no longer need install can we make it optional in the interface?. Do we really need express as a dep?. Also, can we really lock the versions instead of doing ^.. Should be @sentry/hub. not really sure what you mean, we need sentry_client for sending a POST.. Good catch, thx. We could de-dupe it by having this object top level, and for minified we inject uglify into plugins.. \ud83d\ude48 . nit: This should be caps. Not that it matters but in the docs it's also caps.. Problem here is that options.shutdownTimeout can be undefined, that's why there is a double check. The Number.isInteger check doesn't really help.. Woohoo \ud83c\udf89 . we always need import { getCurrentHub } from '../hub'; in node, since the current hub could live on a domain.. \ud83d\ude48  -> Doc please. \ud83d\udc4d . \ud83d\udc4d . Did you actually turned it off or only the comment \ud83e\udd14 ?\nI guess linter attacked ^^\nJust remove it and write something in the merge message.. Can we add a reason here, like \"beforeSend discarded event\". Also here, reason e.g.: \"Caught exception in before send\". There is one https.Agent too much, right?. suggestion. I am not sure about the order making sense here.. Do we really need this?. Good point, we never actually used unkown yet because we started with typescript < 3.\nBut it makes sense here.. Do we really need this here?. Same here, do we really need this here?. Right, I removed it.. Typescript complains it's already a number, let's leave it like this we do not validate any other options.. We check that both buffers are empty and readuce (boolean) combine both buffers.. Since we never want undefined ever in type/value, this is fine.. Had to add this, since there is no other way to get the promise \"string\" otherwise.\nSee also: https://github.com/getsentry/sentry-javascript/pull/1838/files#diff-c3aa68526c753b964239284a89d48813R1472. It's better for the exception to not have stacktrace as a key at all if we do not have any frames.. Why do we I need to pass [data[i].p] as an array here?\nIf I don't do this it doesn't work. This is my only question \ud83e\udd14 . Test fail with:\nRangeError: Maximum call stack size exceeded\n          at new WeakSet (<anonymous>)\n          at new Memo (/Users/haza/Projects/sentry-javascript/packages/utils/src/memo.ts:12:92)\n          at decycle (/Users/haza/Projects/sentry-javascript/packages/utils/src/object.ts:259:110)\n          at Object.<anonymous> (/Users/haza/Projects/sentry-javascript/packages/utils/src/object.ts:283:228)\n          at JSON.stringify (<anonymous>)\n          at Object.safeNormalize (/Users/haza/Projects/sentry-javascript/packages/utils/src/object.ts:292:32)\n          at Object.<anonymous> (/Users/haza/Projects/sentry-javascript/packages/utils/test/object.test.ts:400:31)\n          at Object.asyncFn (/Users/haza/Projects/sentry-javascript/node_modules/jest-jasmine2/build/jasmine_async.js:82:37)\n          at resolve (/Users/haza/Projects/sentry-javascript/node_modules/jest-jasmine2/build/queue_runner.js:52:12)\n          at new Promise (<anonymous>)\nif I do this. This is correct, problem is that in node this needs to be \"async\" meaning that we can do file io in node. The function is defined in the interface of Backend, so even though this fully sync in browser, it isn't in node.\n. Changed test to use noop transport.. I improved the syntax but this has to be done otherwise we get a build/lint error \n```\nError: ../core/src/baseclient.ts:278:5 - error TS2322: Type 'SyncPromise' is not assignable to type 'SyncPromise'.\n  Types of property 'handlers' are incompatible.\n    Type 'Handler[]' is not assignable to type 'Handler[]'.\n      Type 'Handler' is not assignable to type 'Handler'.\n        Type 'SentryEvent | null' is not assignable to type 'SentryEvent'.\n          Type 'null' is not assignable to type 'SentryEvent'.\n278     return SyncPromise.resolve(prepared);\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n. ![image](https://user-images.githubusercontent.com/363802/52338536-f9c53000-2a0a-11e9-85a5-2d64780d452d.png)\n\ud83e\udd37\u200d\u2642\ufe0f . Yes, if you have a plain client and the event fails to send because we `reject`.. We have to think about this :/\nParser expose `SyncPromise` we not really want that, do we know who relies on the parsers?.suggestion\n- [utils] fix: Don't mutate original input in decycle util function\n```. This is how all other SDKs behave, latest init calls wins.. I know we didn't do this before, but can we add more checks here in both cases something like:\nif (event.stacktrace && event.stacktrace.frames && event.stacktrace.frames.length > 0). \u2764\ufe0f  JS. jtfr, I know we talked offline but for documentation this will break IE 10 for sure.. Can you please remove this file.. You have to make sure the version use the latest master so 4.6.3 otherwise it installs old versions. Then the tests should also succeed. \nsuggestion\n  \"version\": \"4.6.3\",. suggestion\n    \"@sentry/core\": \"4.6.3\",. suggestion\n    \"@sentry/hub\": \"4.6.3\",. suggestion\n    \"@sentry/utils\": \"4.6.3\",. ",
    "chadwhitacre": "I experienced confusion due to the two projects being separate: https://github.com/CenterForOpenScience/osf.io/pull/6655#issuecomment-267757394.. I suspect this is a limitation of the runtime. If so, I propose documenting it.. (P.S. I searched \"inspect frame\" in GitHub and Discourse before reporting.). Thanks @mattrobenolt. Since this is in the context of karma tests, the sources are not generally present when viewing the report after the fact in Sentry, no. I'll see if I can work around that limitation somehow ...\nP.S. I'm surprised to hear that the frame context comes from scraping source files loaded from the server. That seems really limited. How do you know the value of variables just from scraping the source files? I guess I'll give it a shot and find out .... ",
    "mcwhittemore": "I think I'm having the same problem but sourcemaps.io is down. Is there another way to do this validation?\n. Running! Thanks\n. ",
    "xcambar": "This is still happening today with Raven-js 3.3.0, on an Ember app, for this sourcemap:\nhttps://admin.review.two15.co/assets/vendor-2570766b6b874d0eac92d07243b12447.map\nFWIW, I was wondering whether gzip compressing the sourcemaps could be an issue for Sentry, if that can help...\n. ",
    "ludalex": "I have the exact same issue as @xcambar, on raven-js at 3.9.2.. ",
    "tarjei": "I disagree, here's a stab at a paragraph:\nInstallation\nTo install a plugin just include the plugin after Raven has been loaded and the Raven global variable is registered.\n\nThe text above is sufficient. Not stating this explicitly makes users (at least me) wonder if a plugin installation worked or not and when the plugin should be loaded. \n. No problem :)\nI'm bundling raven using webpack and commonjs (i.e. Raven = require('raven')). I also added some extra plugins at a point.\nOne thing that hit me later was that if you require raven twice then it looses the initial configuration. If possible, the CommonJS(i.e. NPM) version of Raven should have a check so that multiple requires do not overwrite the initial instance.\n. A paragraph realting to usage with CommonJS is probably also a good idea :)\nSuggestion:\nCommonJS\nIf you load and install Raven using commonJS you should be aware that multiple require's will overwrite the window.Raven instance and thus give you a Raven instance that is not configured.\n. I created PRs for both issues. \n. Thank you for accepting the branch - and THANK YOU for RavenJS and Sentry!\n. Thanks :)\n2016-01-12 7:54 GMT+01:00 Ben Vinegar notifications@github.com:\n\nOh, I see, the problem is in the diff:\nIf you load and install Raven using commonJS you should be aware that\nmultiple require's will overwrite the window.Raven instance and thus give\nyou a Raven instance that is not configured.\nAnd yeah, this is fixed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/409#issuecomment-170817045.\n\n\n\nTarjei Huse\nMobil: 920 63 413\n. Re args.slice(1): I would prefer to keep all all the arguments in extras because you can have a complex object in the first argument of console.xxx() as well. You do not want to have to recommit your code just because you forgot that the first argument should be a string...\n. ",
    "qbig": "Hi @benvinegar could I ask why we would need the line\nvar React = require('react');\nin index file ?\n. I see. got quite confused as my code looks like this\nvar React = require('react-native');\nrequire('regenerator/runtime');\nvar {\n  AppRegistry\n} = React;\n. Thanks ! @benvinegar \n. Hi @benvinegar , according to docs\nSo for example, if you have http://example.com/app.min.js, and the file contains the reference to app.map.js, the name of the uploaded file should be http://example.com/app.map.js.\nBut in the generated bundle file for react native, it always ends with \n//# sourceMappingURL=bundle.js\nDoes this mean that I had to name my sourcemap output to \"bundle.js\" as well ?\nlike\n--sourcemap-output android/app/src/main/assets/bundle.js\n. Hi @benvinegar . Thanks for the super prompt update. The crashing is fixed :) But as I was not receiving any event, I added an \"throw new Error('test')\", just to verify that sentry is properly setup. But I wasn't getting any event still. The following is the error log.\n01-14 02:43:35.120 7612-7641/com.rnmenu E/AndroidRuntime: FATAL EXCEPTION: mqt_js\n                                                          Process: com.rnmenu, PID: 7612\n                                                          com.facebook.react.bridge.JSExecutionException: TypeError: undefined is not an object (evaluating 'e.exception.values[0].stacktrace.frames') (line 20 in the generated bundle)\n                                                              at com.facebook.react.bridge.ReactBridge.callFunction(Native Method)\n                                                              at com.facebook.react.bridge.CatalystInstance$3.run(CatalystInstance.java:180)\n                                                              at android.os.Handler.handleCallback(Handler.java:733)\n                                                              at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                              at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:31)\n                                                              at android.os.Looper.loop(Looper.java:136)\n                                                              at com.facebook.react.bridge.queue.MessageQueueThread$1.run(MessageQueueThread.java:137)\n                                                              at java.lang.Thread.run(Thread.java:841)\n. @benvinegar I have tried on iOS simulator. It wasn't throwing the same exception. ~~But I wasn't getting any events either.~~  ok. I could get event now. Would try on android again. Let you know how it goes.\n~~With RN0.18, it's not crashing anymore. So maybe can close this issue~~ \n. I was testing with Android emulator(Genymotion), and I have limit the length of the stacktrace to 1000 characters. But it only works on dev Mode. Once I build it to a release version apk, JS error would simply crash the App and no msg would be logged to Sentry.\nJavaScript\n    ErrorUtils.setGlobalHandler(function(){\n      var error = arguments[0];\n      defaultHandler.apply(this, arguments)\n      console.log(JSON.stringify(error));\n      error.stack = error.stack.substring(0,1000);\n      Raven.captureException(error);\n    });\nI suspect this is caused by the different behaviours of defaultHandler.apply(this, arguments) in dev and prod mode and the app crashed before any stacktrace was sent to Sentry\n. @mattmo Thanks for the workaround. @benvinegar It was on an genymotion simulator. Would give it a try on real device and update here.\n. @benvinegar Could you give some pointers for \"demo/example\" you mentioned if possible? I am still struggling to get everything up and running and with sourceMap working properly. Would really appreciate it.\n. under production\n'componentDidMount@index.android.bundle:20:29289\\nnotifyAll@index.android.bundle:2:16763\\nclose@index.android.bundle:5:37399\\ncloseAll@index.android.bundle:2:26227\\nperform@index.android.bundle:2:25616\\nperform@index.android.bundle:2:25529\\nperform@index.android.bundle:2:12574\\nx@index.android.bundle:2:12746\\n[native code]\\ncloseAll@index.android.bundle:2:26227\\nperform@index.android.bundle:2:25616\\nbatchedUpdates@index.android.bundle:5:32722\\nc@index.android.bundle:2:11627\\ni@index.android.bundle:4:14431\\nenqueueSetState@index.android.bundle:4:30838\\nsetState@index.android.bundle:7:22697\\npush@index.android.bundle:10:20969\\n[native code]\\n_pressRow@index.android.bundle:20:21385\\n[native code]\\nonPress@index.android.bundle:20:22080\\ntouchableHandlePress@index.android.bundle:14:27793\\n[native code]\\n_performSideEffectsForTransition@index.android.bundle:8:31014\\n[native code]\\n_receiveSignal@index.android.bundle:8:29581\\n[native code]\\ntouchableHandleResponderRelease@index.android.bundle:8:27603\\n[native code]\\nu@index.android.bundle:5:15647\\ns@index.android.bundle:5:15579\\nc@index.android.bundle:5:15700\\nf@index.android.bundle:5:7177\\nforEach@[native code]\\ni@index.android.bundle:5:10729\\nprocessEventQueue@index.android.bundle:5:8418\\ni@index.android.bundle:6:13482\\nhandleTopLevel@index.android.bundle:6:13583\\n_receiveRootNodeIDEvent@index.android.bundle:6:12894\\nreceiveTouches@index.android.bundle:6:13344\\nvalue@index.android.bundle:1:80194\\nindex.android.bundle:1:78741\\nE@index.android.bundle:1:51499\\nvalue@index.android.bundle:1:78713\\n[native code]\\nglobal code'\nunder dev mode\n'SetMealView_componentDidMount@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:60461:16\\nnotifyAll@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:3753:18\\nclose@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:15009:31\\ncloseAll@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:4466:19\\nperform@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:4407:14\\nperform@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:4393:18\\nperform@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:3508:38\\nflushBatchedUpdates@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:3588:20\\nReactUpdates_flushBatchedUpdates@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:2784:18\\n[native code]\\ncloseAll@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:4466:19\\nperform@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:4407:14\\nbatchedUpdates@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:14791:20\\nenqueueUpdate@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:3621:32\\nenqueueUpdate@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:10845:27\\nenqueueSetState@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:11054:14\\nsetState@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:23191:29\\npush@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:31712:14\\n[native code]\\n_pressRow@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:59985:26\\n[native code]\\nonPress@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:60022:43\\ntouchableHandlePress@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:44082:41\\n[native code]\\n_performSideEffectsForTransition@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:26899:26\\n[native code]\\n_receiveSignal@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:26817:38\\n[native code]\\ntouchableHandleResponderRelease@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:26618:20\\n[native code]\\nexecuteDispatch@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13662:25\\nforEachEventDispatch@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13650:3\\nexecuteDispatchesInOrder@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13671:21\\nexecuteDispatchesAndRelease@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13024:42\\nforEach@[native code]\\nforEachAccumulated@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13934:12\\nprocessEventQueue@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:13256:19\\nrunEventQueueInBatch@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:18629:33\\nhandleTopLevel@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:18656:21\\n_receiveRootNodeIDEvent@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:18516:39\\nreceiveTouches@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:18601:48\\n__callFunction@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:2466:21\\nhttp://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:2392:22\\nguard@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:2348:3\\ncallFunctionReturnFlushedQueue@http://10.0.3.2:8081/index.android.bundle?platform=android&dev=true:2391:6\\ncallFunctionReturnFlushedQueue@[native code]\\nglobal code'\n. @benvinegar  Hmmm. Somehow, under dev mode, raven is only keeping the [native code]... part ...\n. @benvinegar glad to hear your thought :+1: \n. @benvinegar updated accordingly :+1: \n. @benvinegar So how is eg. python client handle the CORS headers etc ?\n. Just wondering why would the key be visible ?\n. or maybe an temporary fix to limit the length of stack trace to like 1000 characters ?\n. @benvinegar Nice! I just figured out that, if I limit the length of the stacktrace message, I can get log info !\n. ",
    "mightyguava": "Updated to use void 0. Never seen that before...\n. Np. Huh... looked it up. I think it's because void 0 is 3 characters shorter than undefined.\n. Okay\n. ",
    "MaxBittker": "thanks kamil \ud83d\ude00 . https://github.com/getsentry/raven-js/pull/861. also linking this issue with related to similar problems: #530\n. hi @johnsoft - I tried your patch with typescript 2.0.3 and had the error \na 'declare' modifier is required for a top level declaration in a .d.ts file at line 9\ndo you know what this is about?\n. \ud83d\udc4d thanks ya'll. @MeredithAnya is this ready to merge?\n. hi @niftylettuce , I looked into this, and I believe that the error originates in build.core.X.js. It's both the first entry in the stack trace, and the error persists without raven.min.js loaded on the page at all. \n\n. (going to squash away the 3.7.1)\n. https://github.com/getsentry/raven-js/releases/edit/untagged-68aa474374fdb37da27b is ready, if you can do steps \n- grunt publish to recompile all plugins and all permutations and upload to S3.\n- npm publish to push to npm.\nI can finish this release today.\n. @benvinegar lmk when you get the chance to publish to s3 and npm and I'll bump all of the docs and includes\n. fixes \nhttps://github.com/getsentry/raven-js/issues/679 \nhttps://github.com/getsentry/raven-js/issues/530\nhttps://github.com/getsentry/raven-js/issues/435\nin a naive way that could leave something to be desired. (time-based throttling and per-fingerprint throttling)\n. @Sija I don't necessarily disagree, might take another look at this tomorrow. interested in @benvinegar 's opinion here\n. #771 hopefully means that this won't happen again\n. lgtm\n. this catches the regression we had in 3.8.0 and now passes \nhttp://eslint.org/docs/rules/comma-dangle\n. I think this is an improvement \ud83d\udc4d \n. Hi Nate - could you post the entire stack trace? Because I associate this error with canvas/dom apis, I have the feeling that this is not a raven.js issue (but could be wrong). Does your page use the canvas?. not quite enough for me to reproduce this, and still inclined to think that this is an error originating in the other code that raven is hiding or displaying in a confusing way. could you try disabling raven? \none easy way to do this if you use CDN raven and run an adblocker is to add it to your adblocker rules, or otherwise just commenting it out of your build. Thanks nate! . \ud83c\udf89 \n. \ud83d\ude4c . @Bashek appreciate the PR, please let me know if installing from master fixes your problem\n\"raven-js\":\"git://github.com/getsentry/raven-js.git\",\n. sentry can't fetch resources from localhost.\ntry uploading release artifacts with sentry-cli or curl. \nhttps://docs.sentry.io/clients/javascript/sourcemaps/. it actually also needs the source file in this case as well, so it can see the //# sourceMappingURL=<url>\nwhich is how it knows where the sourcemap is. Hi @polco - as you may have noticed it's been hard for us to review type annotation improvements because we don't internally use this ecosystem and there seem to be many permutations on the ways people import modules and build their bundles. I appreciate this patch and want to help get it merged but definitely need to try it out on my own first and get some feedback from people using the types already - so bear with me. \nI see that this makes it possible to import the internal interfaces which is great, what other effects does the patch have? . Hi polco - just wanted to say that I haven't forgotten about this but have been busy. \ud83d\ude2c \n. hi @mhenr18  - thanks for the report - I appreciate the fiddle and was able to reproduce this right away. At first glance it seems like the solution here is pretty clear- raven shouldn't run in strict mode - I'll make a patch and discuss with @benvinegar if there are any other consequences I'm not considering.. i got a kick out of that ASP.NET code sample \ud83d\ude1b . . Hi @graingert - this makes good sense to me but it's not high priority yet because I don't believe this pattern is very common in JS. good suggestion and worth implementing eventually though!. what did the cordova filenames look like before you changed them? glad you were able to use the workaround but I agree that it's a confusing situation. . I think I agree that only one modal should be triggered - thanks for filing this issue. my 2c is doing this in shouldSendCallback is a pretty clean solution for now\n. just a bump, I think it would be nice to handle this. is it as easy as an event listener?. thanks evan, think i addressed. doh, thanks @kamilogorek. good catches! . oh yeah, seems like you need creds or something to fix the status and travis . for context, removed this because we serve a few billion requests/month via http://ravenjs.com/\nso jsdeliver is kind of silly here . no harm done obviously :P it did prompt me to ask matt to look up that other number which was cool to see!. i think the npm badge is installs vs cdns are end-user serves so it's not quite \"apples to apples\". eslint doesn't know who it's dealing with \ud83d\ude02 . prettier really did a number on that . can you explain this patch? It doesn't make sense to me and breaks the shebang, so i'm closing it for now.. @austinpray I think you accidentally committed some extra files here . @themre, was it react dev tools or \"React-Sight\"?. >When Sentry encounters such a directive, it will resolve the source map URL relative the source file in which it is found, and attempt an HTTP request to fetch it.\n^to me, this is the misleading sentence. I think this has come up before, there was a discussion somewhere on a material css or angular github issue.\nBasically, it's caused by our breadcrumb function wrapping somehow. You can disable dom element click event breadcrumbs and i believe that will fix the issue for now as a workaround. I don't believe it has yet but it would still be a good improvement we're planning to make. somewhat related special cases?\nhttps://github.com/getsentry/raven-js/issues/360\nhttps://github.com/getsentry/raven-js/issues/939. Thanks for opening the issue and sorry for the inconvenience @subramaniashiva - \nWe'll get a patch out asap, but in the meantime, to be clear to anyone finding this issue, the fix it to pin your version to 3.22.4. this is a big change so I want to give it a proper review and test drive it \n(although obviously there's a lot of confidence gained by its success in raven-node). I think you improved captureException and it could be merged in its current form, but I took a crack at another layout for the function that reduces some of the logic and might be better:\nhttps://github.com/getsentry/raven-js/pull/1259/files. agreed 100% on not releasing it tonight . On a roll Kamil! haven't reviewed the implementation in depth yet, but I think it's worth discussing the API/behavior/guarantees/terminology of this feature, because it's really important and this client could become the gold standard for our other clients going forward.\nThis is not to say that we need to get this perfect in this PR, just that it would be good to identify our goals for the best possible API here so this can work towards that in a backwards-compatible way.\nAfaik (and I could be very wrong, @bretthoerner @HazAT ) the only clients which support this right now are python and ruby.\nPython\ndocs:\nhttps://docs.sentry.io/clients/python/advanced/#sanitizing-data\nimplementation:\nhttps://github.com/getsentry/raven-python/blob/master/raven/processors.py\n\nsanitizes a fixed list of keys (AFAIK, not configurable by the user without making a new instance of the processor and passing that in)\nfilters extra data and http data including query params\n\nRuby:\ndocs:\nhttps://docs.sentry.io/clients/ruby/config/#configuration\nimplementation:\nhttps://github.com/getsentry/raven-ruby/blob/master/lib/raven/processor/sanitizedata.rb\n\nhas some default patterns including password and credit card-like strings.\nalso accepts a few configs including regexes and predicates I think?\nfilters query strings & json blob\n\n. approved pending the \u2018max\u2019 thing \ud83d\udc4d\ngood fix and nice to dedupe some code . also, this PR reminds me of: https://github.com/getsentry/raven-node/pull/308. nice! . 3.7.0 to 3.8.0 is 21.2 KB->20.8 KB, the breadcrumb additions added a decent amount of code\n. still need (options && here, now that options is checked above?\n. maybe we should say \"for information about configuration options and advanced usage\" \n. ^this is a big improvement imo\n. what about !!a != !!b?. i think green is the best color for bikesheds . note to self/being paranoid - do we want to nullcheck values here first?. would be kind of nice to have unit tests for this regex as kinda-documentation, but i don't think its important and the other tests cover it . possible improvement would be truncating differently based on how many total breadcrumbs there are (maxurl length = (12500 / breadcrumbs.values.length)) but definitely not a big deal . this would make it harder to search for exact matches in breadcrumb urls though so shrug. we might want to make this warning more explicit directly above the line that they'll see - worried that this will be pushed out of or to the edges of context frames. maybe 2 words about what this does, or a link to the docs instead?. should say \"they should fix their code\" . wouldn't hurt to comment these branches with the browsers they're active on. these factories are way better though \ud83d\udc4d \n. in_app and filename are the only changed keys here, right? would it be simpler to just make the normalized object assign filename : frame.url || stackInfoUrl, and rely on the existing logic for in_app? or does in_app actually return a false positive in this case?. ehh i think i would just say \"if you use Redux Saga, be aware that it implements its own error handler and  exceptions raised from sagas will not bubble up to the browser uncaught exception handler\". if there's gonna be a code example, is there any extra data worth throwing on the error in the second arg to captureException?. i don't like rst\n. are you sure though? the other ones were working before. i fixed it. bleh. sentry is sentry event breadcrumbs?. this looks so confusing in the diff view. \ud83d\ude06 . should this be any->boolean? we don't generally care about correctness with these right? i'm afraid people will return undefined by accident and throw everything away. we should comment that this could mean raven wrapped or filled. > You will need to disable default behaviour\nis there harm in leaving it?. maybe mention captureUnhandledRejections here? \n. small nit, i would say \"we've\" not \"we\". \ud83d\udc4d . maybe a test case for when you use exactly the limit? (it shouldn't ellipsize, but this isn't a big deal). what do you think about \"[Empty Object]\" or \"{}\"?\n. should /work/ with?. how does this deal with cyclic objects? (if it just keeps following the links until it bottoms out, that's not that bad). great tests here, helped me out a lot understanding the behavior \ud83d\udc4d  . is it correct to say that the old assertions would also have passed here?. just checking my understanding of this change. could this condition be rearranged or broken up differently?\nit got a lot harder to read for me.\nyour comment helps, but maybe if this was multiple lines and the comment was broken up per line it could be easier to understand for someone trying to understand in the future. maybe this logic should go in its own function? only because captureException is so central and might be the first thing someone reading the code would encounter. it might help if these cases were rearranged so that this simple message one was last?. are you only using ~- this for subtracting 1? I trust it's right, just want to understand.\n. any other value types here we could want... dates? . or are those objects?. \ud83d\udcaf . i mentioned this in the test but I think this string could be improved a bit to be more declarative/official looking. it looks like you handle this right in the logic though. why not use ).length - 1? (it's NBD, just curious). [Object (no keys)]\n[Object with no keys]\n?\nI don't know what kind of precedent we could follow here, but I think people might google for it either way (and ideally they'd find this repo?). I don't think this is that important since it shouldn't be super common, I'm just throwing out other options . the main win here is that these have been removed . oh, i didn't realize raven-node uses it already, that's good enough for me. could you characterize the properties of these errors a little bit more explicitly (like, \"it has the prototype of an error but also passes isPlanObject because X\", or maybe link the the issue? i'm not sure i would understand based only on this test. if it's not an array, maybe just bail out here and return array? to reduce the risk involved in shipping this code?. i know we use asterisks elsewhere, but i think something explicit like [value sanitized by raven.js]could be better.\nprobably not worth breaking with the precedent though . how does this deal with cycles? or will the data be guaranteed by this point not to have any? how strong is that guarantee? (afraid of freezing a browser in some weird scenario). (worth being explicit here that this doesn't scrub or match on string values or query encoded data). also worth mentioning that sentry itself can do do server side sanitizing and this is different. basically i think people are really gonna want to know what guarantees they get from this feature so it's worth writing a longer explanation . do you care about this off by one? . was this change just tangential, or is it part of the fix?. (thinking it was just a tangential fix). max should never be dynamically resolved - it's taken off of global options. Maybe it could be better to just error here like you were instead of silently not truncating. \nAlso - the places that truncate gets used, we probably don't want to return anything besides a string - right? If we were to pass through exception.value as an object, does the rest of the code even accept that? maybe it's better to return undefined or an empty string?\nwe could also coerce str to a string if it's not. . ah, that sounds good to me then! thanks for explaining . meh, i think this is good unless some minification or babel transform on class or function names could break this string equality . curious why you changed these two usages of setTimeout to the original version. not required for the correctness of this PR, just a nice sanitation thing? . when the fetch itself fails (and hits this onerror), do we rethrow the error?. are there any other asynchronous errors that wouldn't wouldn't hit this? I see that  the fetch and XMLHttpRequest paths call opts.onError so I guess that's handled.. captureException might very well throw again here - do we want to rethrow lastException in its own parallel setTimeout block so it will still be rethrown?. isn't that the case in https://github.com/getsentry/raven-js/issues/1287?. lastException is only set in captureException, but _sendProcessedPayload is used from captureMessage as well. I'm guessing this is ok because an error from inside raven wouldn't be part of an infinite loop?. for instance, if captureMessage resulted in an error thrown from the transport, this could rethrow a previous exception, right? that seems bad . also, could this check fail if two errors are sent through in quick succession? don't have an immediate solution for that scenario but I could imagine an infinite loop as a result if it goes ABABABABABAB. i could imagine more test cases with 2 errors being sent through im quick succession, or transports that call opts.onError. (nothing wrong with this of course, just double checking). /threat/treat/s. actually i think this whole line could be dropped. capture exception has gotten quite long, maybe it would be good for this kind of logic to be in another method? \nso here we could do like\nreturn this._captureDomError(ex, options) or something?\nIt's also fine how it is for the time being\n. why is this guard needed? why can't is just be return {}.toString.call(value) === '[object DOMError]' ?. oh... that's good reason \ud83d\ude05 . yeah, nice work @CaptObvious . ",
    "dignifiedquire": "In theory sendBeacon could help but as the browser support for that does not seem to be very complete I don't think that will help us. \nI could hack something together on top of the events for success and failure  but the issue is still that I need to map those then onto the corresponding captureException call. \n. ",
    "siassaj": "This would be very simple to do, already the codebase has:\n```javascript\n// other functions\n_send: function(data) {\n// do lots of stuff\n\nthis._sendProcessedPayload(data);\n\n},\n// other functions\n_sendProcessedPayload: function(data, callback) {\n// do lots of stuff\n\n(globalOptions.transport || this._makeRequest).call(this, {\n  url: url,\n  auth: auth,\n  data: data,\n  options: globalOptions,\n  onSuccess: function success() {\n    self._triggerEvent('success', {\n      data: data,\n      src: url\n    });\n    callback && callback();\n  },\n  onError: function failure(error) {\n    self._triggerEvent('failure', {\n      data: data,\n      src: url\n    });\n    error = error || new Error('Raven send failed (no additional details provided)');\n    callback && callback(error);\n  }\n});\n\n}\n// other functions\n```\nBut we are never actually passing the callback through. \nAnd I have a similar scenario when I need to navigate away once some actions are taken by the user, any of which could cause an exception. Ideally Raven.captureException/captureMessage would return a promise but in the meantime accepting a callback in the options is fine.. In the meantime for anyone else interested this works, although I can't say it's super fantastic:\n```javascript\nlet capture = (e) => {\n  return new Promise((resolve, reject) => {\n    Raven.captureException(e);\n    let requestEventId = Raven.lastEventId();\nlet successFunc = (e) => {\n  let responseEventId = e.data.event_id;\n  if (requestEventId === responseEventId) {\n    window.removeEventListener(\"ravenSuccess\", successFunc);\n    resolve();\n  };\n};\n\nlet failureFunc = (e) => {\n  let responseEventId = e.data.event_id;\n  if (requestEventId === responseEventId) {\n    window.removeEventListener(\"ravenFailure\", failureFunc);\n    reject();\n  };\n};\n\nwindow.addEventListener(\"ravenSuccess\", successFunc);\nwindow.addEventListener(\"ravenFailure\", failureFunc);\n\n});\n};\n```. ",
    "jmahony": "Is this functionality released yet?. ",
    "hermansje": "I noticed the same behaviour with Raven 2.1.0: each plugin posts to Sentry, so errors that pass through multiple plugins, are sent multiple times.\nI made a plunk to demonstrate this with the angular and console plugins:\nhttp://plnkr.co/edit/5GfQus0IcdAmrkBTYiC9?p=preview\n. ",
    "straube": "I'm adding the User Feedback dialog to my error pages and I found that I was supposed to set the Allowed Origin, under Client Security. But just after struggling with some 403 errors. Since we use PHP/Laravel, that setting was empty by now. It would be nice having a line indicating to set that in User Feeback installation instructions.. ",
    "jlfwong": "For more context, this was causing real problems for us because we async load react components. If you do a deferred.resolve(SomeComponent), then try to render SomeComponent later, it won't have SomeComponent.prototype.render defined.\n. Thanks for the merge!\n. I don't understand why the test to ensure the prototype isn't copied exists at all. It seems reasonable to me to just remove that test\n. Thanks! (hi @benvinegar!)\nIs a new release going to be cut?\n. ",
    "teklakct": "Thanks, I missed it\n. ",
    "jonlil": "What can I do to help? Need this asap!. Not have to, but set methods that are like bootstrap setters is wise to expose here.\nSince $get exposes Raven, users still have full access to Raven but not during config phase\nI added setTagsContext because I needed it by the time of writing, but later on i figured out that its possible to add tags with config function.. It's a bool, do you have any convention?. Have any suggestions?. Really good point with catching uncaughtExceptions. \nWhat I have done in one project was to handle config, install and addPlugin in my build script with gulp. But that adds a lot of moving external parts to maintain for you.\nIf you want, I could share my build as an example.\nIn that case I think we should remove config and install from RavenProvider and revert line 90. ",
    "vivoplus": "Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved, some commit checks failed.\n\nComments from Reviewable\n Sent from Reviewable.io \n. ",
    "ajwhite": "On paper that looks like a fantastic idea. However, I'm not entirely sure if that will work because the provider will be returning an instance of Raven, rather than itself, which would lag the injector $get method that the provider must expose for the service.\nExample: https://repl.it/BYVE/2\nThis may potentially work if $get was added as a property on Raven, such as:\njs\nfunction RavenProvider () {\n  Raven.$get = ['$window', function ($window) {\n    return $window.Raven;\n  });\n  return Raven;\n}\nBut I have my doubts since a provider, I believe, is initialized similarly as a service where Angular initializes it with new, where internally new window.Raven will be attempted during the initial loading of the provider.\n. > I want to avoid this, where every Raven API method is reproduced inside of this plugin.\nAbsolutely. There's a way to do this. Off the top of my head, a possibility could involve some context binding..\njs\nfunction RavenProvider () {\n  Object.keys(Raven.prototype).forEach(angular.bind(this, function (ravenMethod) {\n    this[ravenMethod] = angular.bind(Raven, Raven[ravenMethod]);\n  }));\n  this.$get = [..];\n}\nI'll come back to this with a more realistic solution, but the above is a possibility depending on how Raven is structured.\n. > the object created by new is discarded.\nBut wouldn't that inherently mean that this.$get becomes discarded?\n. I know you're not too keen on copying over method references, and avoid copying all references.. but they could be specified to avoid attaching unnecessary methods\njs\nfunction RavenProvider () {\n  ['config', 'install', '...'].forEach(angular.bind(this, function (ravenMethod) {\n    this[ravenMethod] = angular.bind(Raven, Raven[ravenMethod]);\n  }));\n  this.$get = [..];\n}\n. :+1: \n. It works, it's just not really conventional. Providers are typically expected to expose the functionality on themselves. \n. I could use a solid end-to-end example. I've gotten /main.jsbundle and /main.jsbundle.map in my release artifacts, with the proper sourceMappingURL at the end of the bundle; but I still cannot get the stack traces to work with the source maps.\n. Thanks for the update @benvinegar. Using this new project will resolve the minified source issue?. I'm having a similar issue with source maps within a React Native project on Sentry.\nSource code not found errors\nEach report comes with this warning:\n\n\"Original\" stack trace\n\n\"Minified\" stack trace\nAs you can see, they're expandable, so the sourcemap appears to be working\n\nAnd there certainly are artifacts for the release\n\n. Seems potentially related to https://github.com/getsentry/sentry/issues/3224, via https://github.com/getsentry/sentry/issues/3976?. ",
    "hackel": "Any progress on this issue in the last year?  It seems rather critical.  The only way I've been able to get this to work is with this terrible hack:\njs\napp.config((RavenProvider, $env) => {\n    RavenProvider.$get[1]().setEnvironment($env);\n});\nI suspect this only works because Raven is still in the global scope, which it really shouldn't be once ngRaven has loaded.\nDoes anyone have a better solution?  I'm tempted to add a gulp module that spits out a custom configuration for each environment, but it seems like that shouldn't be necessary.. ",
    "kukac7": "bower + raven.js 2.x + angular\nOnly the dist/raven.js files in the package, I think the plugins/angular.js file should be added because of the ngRaven will not be loaded.\nSo I add it to the file bower.json:\n\"overrides\": {\n    \"raven-js\": {\n      \"main\": [\n        \"dist/raven.js\",\n        \"plugins/angular.js\"\n      ]\n    }\n  }\nI get this error: Uncaught ReferenceError: module is not defined module.exports = angularPlugin;\nIt compresses the files by gulp.\nWhat is the problem?\nThanks!\n. @benvinegar \nRaven.config(config).addPlugin(Raven.Plugins.Angular).install();\nor\nRaven.config(config).addPlugin(Raven.Angular).install();\nwhich one is good?\nand the above problem you could have something to say?\nthank you!\n. @mjrdnk thanks, it's been solved.. ",
    "mjrdnk": "@kukac7 try this:\njson\n\"overrides\": {\n    \"raven-js\": {\n      \"main\": [\n        \"dist/raven.js\",\n        \"dist/plugins/angular.js\"\n      ]\n    }\n}\nThis works for me.. ",
    "ethanresnick": "Can this issue please get some love? I'm trying to do something that I'd expect to be simple\u2014look at the error's stack trace in shouldSendCallback and use that to decide whether to log it\u2014but it's a bit of a pain without documentation. After reading the Sentry source code, I think I've figured it out. Maybe someone can at least confirm the following?\n\n\nThe stack trace lives either in data.stacktace or data.exception.values[0].stacktrace (Does data.exception.values ever have more than one item?)\n\n\nThe stack trace itself has frames property, which holds an array, each item of which has these properties, except that sometimes some of those properties (colno, function) may be missing\n\n\nIs that right?. Thanks @benvinegar, that's helpful, and I've solved my particular problem.\nStill, I think issue should be addressed, since the docs you linked only cover substructures in data, but not it's overall shape (e.g., if you know that data.exception exists, you know it'll follow the exception interface, but the existence of data.exception doesn't seem documented somewhere, nor the fact that data.exception doesn't always exist, etc etc).. ",
    "prewk": "This is probably related to my problem:\n\nIf you\u2019re hosting your scripts on another domain and things don\u2019t get caught by Raven, it\u2019s likely that the error will bubble up to window.onerror. If this happens, the error will report some ugly Script error and Raven will drop it on the floor since this is a useless error for everybody.\n\nhttps://docs.getsentry.com/hosted/clients/javascript/usage/#cors\n. ",
    "ogonkov": "@mattrobenolt i just hope that next release with changed requirements to Sentry would follow semver.\n. ",
    "joaocunha": ":+1:, pretty useful to know if a specific browser, for example, is having issues with transport layers or something like that (CORS).\n. In our case, it happens in a React Component context:\n```\nimport React, {Component} from 'react';\nyoMammaStinks(a[0]);\nexport default class InlineText extends Component {\n  render() {\n    return (\n      \nbar\n\n    );\n  }\n}\n```\n\n\nEven tho the error is raised, it's not tracked by Raven.\n. Great to know you guys found the starting point. Really appreciated.\nIn the meanwhile, should we be using the React build of Raven? How do we do that with npm and CommonJS? We are currently loading react-js with ES6's import Raven from 'react-js'.\n. @benvinegar also, let me know if you need more info about our stack. We're using an express server, Webpack and Redux. Adding to that, we're not doing isomorphic/universal JS at the moment. These are the dependencies we currently have in:\n\"dependencies\": {\n    \"assets-webpack-plugin\": \"^3.1.0\",\n    \"autoprefixer\": \"^6.0.3\",\n    \"autoprefixer-loader\": \"^3.1.0\",\n    \"babel\": \"^5.8.29\",\n    \"babel-core\": \"^5.8.29\",\n    \"babel-eslint\": \"^4.1.3\",\n    \"babel-loader\": \"^5.3.2\",\n    \"babel-plugin-react-transform\": \"^1.1.1\",\n    \"babel-plugin-typecheck\": \"^1.3.0\",\n    \"babel-runtime\": \"^5.8.29\",\n    \"basic-auth\": \"^1.0.3\",\n    \"better-npm-run\": \"0.0.3\",\n    \"body-parser\": \"^1.14.1\",\n    \"bourbon\": \"^4.2.6\",\n    \"classnames\": \"^2.2.0\",\n    \"clean-webpack-plugin\": \"^0.1.3\",\n    \"component-cookie\": \"^1.1.2\",\n    \"compression\": \"^1.6.0\",\n    \"concurrently\": \"^0.1.1\",\n    \"cookie-parser\": \"^1.4.0\",\n    \"css-loader\": \"^0.21.0\",\n    \"declarative-promise\": \"^0.1.12\",\n    \"es6-promise\": \"^3.0.2\",\n    \"exports-loader\": \"^0.6.2\",\n    \"express\": \"^4.13.3\",\n    \"express-webpack-assets\": \"0.0.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"history\": \"^1.12.6\",\n    \"humps\": \"^1.0.0\",\n    \"imports-loader\": \"^0.6.5\",\n    \"intl\": \"^1.0.1\",\n    \"ip\": \"^1.0.1\",\n    \"jade\": \"^1.11.0\",\n    \"json-loader\": \"^0.5.3\",\n    \"jsonwebtoken\": \"^5.4.1\",\n    \"lodash\": \"^3.10.1\",\n    \"lru-memoize\": \"^1.0.0\",\n    \"map-props\": \"^1.0.0\",\n    \"morgan\": \"^1.6.1\",\n    \"multireducer\": \"^1.0.2\",\n    \"node-sass\": \"^3.4.1\",\n    \"normalize.css\": \"^3.0.3\",\n    \"normalizr\": \"^1.4.0\",\n    \"oauth\": \"^0.9.14\",\n    \"parse-link-header\": \"^0.4.1\",\n    \"piping\": \"^0.3.0\",\n    \"postcss-loader\": \"^0.7.0\",\n    \"precss\": \"^1.3.0\",\n    \"pretty-error\": \"^1.2.0\",\n    \"qs\": \"^5.2.0\",\n    \"query-string\": \"^3.0.0\",\n    \"raven\": \"^0.8.1\",\n    \"raven-js\": \"^1.3.0\",\n    \"react\": \"^0.14.0\",\n    \"react-a11y\": \"^0.2.6\",\n    \"react-addons-update\": \"^0.14.2\",\n    \"react-dom\": \"^0.14.0\",\n    \"react-helmet\": \"^2.1.1\",\n    \"react-inline-css\": \"^2.0.0\",\n    \"react-intl\": \"^2.0.0-beta-1\",\n    \"react-list\": \"^0.7.3\",\n    \"react-redux\": \"^4.0.0\",\n    \"react-router\": \"^1.0.0-rc3\",\n    \"react-transform-hmr\": \"^1.0.1\",\n    \"redux\": \"^3.0.4\",\n    \"redux-api-middleware\": \"^1.0.0-beta3\",\n    \"redux-logger\": \"^2.0.4\",\n    \"redux-router\": \"^1.0.0-beta3\",\n    \"redux-thunk\": \"^1.0.0\",\n    \"sass-loader\": \"^3.1.1\",\n    \"serve-favicon\": \"^2.3.0\",\n    \"serve-static\": \"^1.10.0\",\n    \"strip-loader\": \"^0.1.0\",\n    \"style-loader\": \"^0.13.0\",\n    \"svg-inline-loader\": \"^0.3.0\",\n    \"truncate\": \"^2.0.0\",\n    \"url-loader\": \"^0.5.6\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-middleware\": \"^1.2.0\",\n    \"webpack-hot-middleware\": \"^2.4.1\",\n    \"whatwg-fetch\": \"^0.10.1\"\n  },\n  \"devDependencies\": {\n    \"browser-sync\": \"^2.9.11\",\n    \"browser-sync-webpack-plugin\": \"^1.0.0\",\n    \"eslint\": \"^1.7.3\",\n    \"eslint-config-airbnb\": \"^0.1.0\",\n    \"eslint-loader\": \"^1.1.0\",\n    \"eslint-plugin-import\": \"^0.8.1\",\n    \"eslint-plugin-react\": \"^3.6.3\",\n    \"react-transform-catch-errors\": \"^1.0.0\",\n    \"react-transform-hmr\": \"^1.0.1\",\n    \"redbox-react\": \"^1.1.1\",\n    \"redux-devtools\": \"^3.0.0-beta-3\",\n    \"redux-devtools-dock-monitor\": \"^1.0.0-beta-3\",\n    \"redux-devtools-log-monitor\": \"^1.0.0-beta-3\",\n    \"webpack-dev-middleware\": \"^1.2.0\",\n    \"webpack-hot-middleware\": \"^2.4.1\"\n  },\n. @benvinegar We changed the API and, as it was not matching the new specs, it raised some errors. Straight from core-js: https://github.com/zloirock/core-js/blob/master/modules/es6.promise.js#L127\n\nIt seems it won't ever capture exceptions in that context.\n. That workaround does work indeed, thanks!\n. @mattrobenolt a bit more references. Bluebird is using it:\nhttp://bluebirdjs.com/docs/api/error-management-configuration.html#global-rejection-events\nhttp://bluebirdjs.com/docs/api/suppressunhandledrejections.html#suppressunhandledrejections\nhttps://github.com/petkaantonov/bluebird/commit/e09381ac0f503405d332d0535f4536e5bdf0c68a\n. > register a handler as window.onunhandledrejection = .. instead of window.addEventListener('unhandledrejection', ..)\n^ Same here.\n. ",
    "colbygk": "Quick question about best practices here in hopes that I can contribute a PR to address this issue:\nWhat are the expectations of a plugin of this sort w.r.t. modifying the prototype for XMLHttpRequest or any other plugin for raven-js? Should prototype modification be avoided and only executed on a passed object to the plugin?\ne.g. a plugin outline:\njavascript\nfunction xhrPlugin(Raven, xhr) {\n  if (!xhr) return;\n  xhr.onerror = ...\n  ...\nOr, should it modify the prototype of XMLHttpRequest instead?. ",
    "jabooth": "It seems steps are been taken to standardise the window.onunhandledrejection callback: \nhttps://github.com/tc39/ecma262/pull/76\n. ",
    "joaomilho": "I've tried it and all it presents from the object in Sentry's interface is \"[object PromiseRejectionEvent]\".\nUsing the same code as in the docs:\nwindow.addEventListener('unhandledrejection', (err)  => {\n  raven.captureException(err);\n});\nerr looks like this (latest chrome mac):\n\n. So, just to be 100% clear,\njs\nwindow.addEventListener('unhandledrejection', (err)  => {\n    Raven.captureException(err.reason);\n});\nwould be enough, right?\nAnother question, since I'm using fetch, all errors will go to my catch handler. But if the error wasn't meant to be, it will not pass to it a response.\nExample:\njs\n// checkResponse will return the response or throw it based on \"ok\"\nfetch(myFetchConfig).then(checkResponse)\n      .then((response) => {\n        ///... some correct code\n        someFnThatDoesntExist()\n      })\n      .catch((response) => {\n        // try to do something with response, like response.json().then(...)\n      })\nIn this case, I'll get an err object instead of a response object in my catch. So I'll get an error in sentry related to trying to use the response object, like \"TypeError: response.json is not a function\" instead of \"Uncaught ReferenceError: someFnThatDoesntExist is not defined\".\nWhat do you this is the best approach to handle it?\n. Doing a simple check solves it, like:\nif(!(response instanceof Response ))\n          throw response\nBut it seems incorrect to me to do it on every catch handler.\n. @benvinegar added to my backlog, but can't promise a deadline ;)\n. ",
    "jessepollak": "I'm running into this issue and I've added the window.onunhandledrejection and it's not doing anything. Oddly enough, I see the rejection on raven.js:278 in the wrapped function.\n\nAny ideas?\n. ",
    "MarkMurphy": "what's the TL;DR solution here?\n. ",
    "artnez": "Just a heads up for anyone coming across this thread. There is a bug in Chrome 51 and higher (as recent as Chrome 56) where unhandled promise rejections are never fired on localhost. If you're testing locally then you may never see this event fired!\nSee: https://bugs.chromium.org/p/v8/issues/detail?id=4874. ",
    "bendenoz": "Just updated the issue above about Chrome.\nIt doesn't work for me in Chrome 56 if webpack devtool option is set to eval, which was the default setting for local development.\n. ",
    "akhayoon": "Just a note. If you are using Redux-Thunk with async/await, you can catch these unhandled promise rejections by catching redux-thunk errors manually. \ncode here https://gist.github.com/akhayoon/24be6ca9634d228893b8c4bd79f0f33c. ",
    "avesus": "@kamilogorek @benvinegar have you implemented the config option? It took a year, isn't it?. ",
    "morisan": "wrong repo!\n. ",
    "llonchj": "@dcramer kindly give me more insight about your comment?\n. @dcramer worked on my tests using sentry 7.7.0\n. @dcramer I am unsure. Do you suggest any code change to be merged?\n. ",
    "varenc": "yo @dcramer, I'd love some concreteness on this! Couldn't find it in the docs but some recent commits make me think this is being explicitly supported now?. thanks for the info! I wasn't sure... the docs here say that window.json needs to be defined for ravenjs which it isn't in a web worker.  Should I also import something like json2.js to make it work? some testing show it's working despite this though I fear I'm not testing thoroughly enough.. thanks for this doc update! =). ",
    "LewisJEllis": "@varenc we do support/work in webworkers now, as of #792. #855 was also related.\nI'll make sure to add a mention of this to the docs before I close this issue.. That really just means to say \"we need a JSON global variable\", which webworkers do have; describing it as window.JSON is perhaps overly specific. Anything modern enough to have webworkers is modern enough to have JSON, so you should be fine.. Your failing example looks like a classic case of not binding this. This will do what you want:\njavascript\nsetTimeout(this.onOverlayClick.bind(this), 100);\nas will this:\njavascript\nvar self = this;\nsetTimeout(function () { self.onOverlayClick(); }, 100);\nas does your example with the arrow function thanks to how arrow functions handle this binding.\nJust doing\njavascript\nsetTimeout(this.onOverlayClick, 100);\nwill not bind this, and then things get weird from there. I'm not exactly sure, though, why the eventual outcome is this error specifically; @zanona do you have a minimum reproducing HTML page that we can play with it on?. @sija - yes, I indicated that in my previous comment/linked to the MDN page on that behavior - that's why zanona's snippet in the screenshot doesn't trigger the problem\n@zanona - interesting; at best this is a confusing scenario for users to debug, and at worst it's a bug in raven-js. It might be a case of \"error elsewhere ends up looking like error in raven-js\" (like in #756 for example), but if everything works as expected without raven-js then I can't be sure of that. Either way there's something to improve, so please do let me know if you can provide a repro (even if it's not necessarily small/simple).. Note also that some users have reported (in #812) simply using raven-node in their electron apps. I haven't investigated what the difference in functionality might be, just pointing out the option/alternative.. It's not quite exactly node according to this:\n\nMost but not all Cloud Code can be directly ported to node.js. Parse Cloud Code is based on the V8 JavaScript engine, but it does not run node.js. In particular, Cloud Code environments are loaded and unloaded individually for each request, while node.js services typically serve multiple requests at a time.\n\nbut nonetheless window definitely won't be a thing, so raven-js won't work. You could try raven-node, but I doubt that will work; Parse cloud code has its own methods for sending requests according to their docs and this blog post. They do note that \"You can use your favorite npm module to make HTTP requests, such as request\", but I'm not sure what that means regarding the node-native http/https modules.\nI haven't used Parse cloud code before, so for all I know it'll work with raven-node out of the box, but I'm guessing that this will at least require some trickery to make the node http/https modules available to raven-node, and may need a custom client using Parse's http API.\n. \n\nReview status: 0 of 1 files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Review status: 0 of 1 files reviewed at latest revision, 2 unresolved discussions.\n\nCONTRIBUTING.md, line 27 [r1] (raw file):\n\n``` Markdown\n* If you are using the Raven CDN (http://ravenjs.com)\nLastly, it is strongly encouraged to provide a small project reproducing your issue. You can put your code on JSBin or, for bigger projects, on GitHub. Make sure all the necessary dependencies are declared in package.json so anyone can run npm install && npm start and reproduce your issue.\n```\n\nWe recommend JSBin here but JSFiddle in the template; let's either pick one or list both in both places?\n\nCONTRIBUTING.md, line 112 [r1] (raw file):\n\n``` Markdown\nThis is a checklist for core contributors when releasing a new version.\n\n[ ] Verify TypeScript language definition file is up to date\n```\n\n\nMaybe this is some markdown-fu that I don't know, but what are all these near-end-of-line asterisks for? Looks like maybe a regex gone wild\n\nComments from Reviewable\n Sent from Reviewable.io \n. \n\nReviewed 1 of 1 files at r1, 1 of 1 files at r2.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Right, document doesn't exist in react native apps, which is why we're defensive against that, but do we care about any environments where window doesn't exist? I don't have a compelling example, but right now if window doesn't exist raven-js blows up.\n. I know :p\nMainly writing it down on the off chance that it becomes relevant with electron investigation.\n. Electron integration is gonna be a bit trickier because we need to have both node and browser stuff going on. I don't think blindly throwing one or the other in somewhere is going to work too well at the moment, but right now you're throwing raven for browsers into what's essentially just a node process. You might have more luck throwing raven-js in a renderer process or throwing raven-node in the main process, but I haven't played with raven+electron enough yet to have much confidence in the expected behavior of either of those.\n. Fixed by #785.. Thanks for reporting - apparently this is our previously-unfound motivating example for #747. We can add some defensiveness to not blow up when window doesn't exist.. @pbadenski this should be fixed in v3.9.0 now - give it a try and let me know if you run into trouble.. Ah, damn. I'm not sure how I missed that window reference, but I opened #792 to fix that.. @pbadenski this should actually be fixed in 3.9.1; I've confirmed it myself with a webworker reporting exceptions to sentry.. Sure, done. Just to confirm, we're fine with making changes to our vendored copy of TraceKit in this way? Don't know the background on that beyond what Matt described, but sounds like it should be okay.. I definitely agree that we want to avoid ending up with four or five or six different callbacks to worry about. Talked to Ben about this and I think I agree that we can simplify the whole picture to just dataCallback and breadcrumbCallback in a reasonable way that doesn't nuke backwards-compatibility.\nIf we keep dataCallback's behavior mostly as-is but make it so an explicit false return value cancels sending (filters the exception), we can eliminate shouldSendCallback, but let's not worry about that change here. @TheSavior let's change shouldSendBreadcrumbCallback to just breadcrumbCallback. If breadcrumbCallback returns false filter it, otherwise breadcrumbCallback can mutate the breadcrumb object in-place or return a new value for it (sort of like dataCallback). This will help keep the number of callback hooks down.. I tested and confirmed that, after fixing this window reference, an error thrown in a webworker was reported to Sentry successfully.. Should be closed by #794, published in v3.9.1; give it a try and let us know if you run into any trouble.. @Zamiell thanks for the note, glad to hear; out of curiosity, is that in both the main and renderer processes, or just in the main process? I can imagine raven-node working in the main process but am less sure about renderer processes.. Oh geeze - thanks for the report. I can definitely see this happening; I've even gotten myself into similar loops while working on breadcrumb support for raven-node.\nAt the very least we should warn about this in the docs and mention that you can do console: false to disable console breadcrumbs to get around it. I agree with you, though, that it would be nicer to still be able to log from within the breadcrumbCallback during dev.\nI'm not sure if it's reasonable to unwrap/rewrap console methods before/after each breadcrumbCallback invocation, but I think a potentially viable solution would be to:\n- flip a raven-instance-level flag before we invoke the breadcrumbCallback\n- flip it back when the breadcrumbCallback finishes\n- only run the breadcrumbCallback check if that flag is off\nThis way, we'll still capture any breadcrumbs generated (synchronously) by the breadcrumbCallback, but we won't filter them according to the breadcrumbCallback. I think this could be a reasonable compromise that enables the development workflow you're after without preventing anything someone would actually want to do in prod (assuming in prod nobody really wants breadcrumbCallback to generate more breadcrumbs). The caveat is that it doesn't help the asynchronous case at all, but I'm not inclined to worry about it since breadcrumbCallback's behavior is centered around its synchronous return value.\nI'll update the docs with a heads up for now and wait for Ben's thoughts on code changes.. Take a look at the allowSecretKey config field, documented here: https://docs.sentry.io/clients/javascript/config. If you enable that option and then use a secret DSN, things should start working.. It looks like n is only one or two though from these two lines? Is it potentially viable to just pass over frames with no source and do one check against the first frame with a source? In that case I wouldn't worry about perf at all, though honestly I don't even think I'd worry about perf if we regex'd every frame every time except in deep recursive/stack overflow cases.. Planned solution sgtm, but just to clarify - my link to two lines was to master and got out of date which caused confusion; I should've used a specific revision. Here's a more permanent link. n is number of regexes, m is number of frames - m can certainly be arbitrarily large, but it looks like there will only ever be one or two regexes. Is there a situation where n can be arbitrarily large?. Ah, I see here now. Okay, thanks.. Seems reasonable, and not a big change to ask for anybody still using an old jQuery or whatever the case is.. The ignoreErrors and shouldSendCallback config fields documented here should be sufficient for your purposes. Let us know if there's a specific thing you're trying to filter where these options don't work.. Hi @cbrunnkvist - thanks for the clear report. It looks like you're referring to raven-node, but this repo is for our browser JS SDK. There's already a similar issue at getsentry/raven-node#138 and I'm working on sorting out this confusing situation as part of getsentry/raven-node#257.. LGTM. I also wanted to be sure that sentry server actually follows the header convention and does seconds; you probably know it does off hand but I found that code path in the rate limiting stuff and verified.. Does this belong here or on https://github.com/getsentry/sentry?. @uptownhr I think dataCallback might be what you're looking for? Check docs here.. Note that we already pass some sort of purge header here, apparently for fastly. I'm not really sure how fastly<->s3 interaction works here though.. Core issue boils down to json-stringify-safe using Array.prototype.indexOf (see isaacs/json-stringify-safe/issues/6), while IE8 only has String.prototype.indexOf. We're going to vendor in the json-stringify-safe dependency and modify it to avoid this.. Not immediately sure why this is failing, will look more tomorrow.. @benvinegar figured out/fixed why it was failing & added tests.. We've had/discussed this thought previously in #868; the difficulty is that as soon as we make /latest/raven.min.js and people depend on it, we can never have backwards-incompatible changes.\nOpen to ideas; maybe we could do something like  https://cdn.ravenjs.com/3.x/latest/raven.min.js as Ben suggested here.. I'd rather just add a line || toString === '[object DOMException]' to our existing isError (or refactor to a switch/case) than introduce a dependency when we don't otherwise have any.. No we don't, we vendored it in #883 for IE8 compat, I just forgot to remove it from package.json until #917.. cc @benvinegar, had to change a require somewhere the first time around but should be good to go now. Thanks for the report, @periodic. I haven't looked at our fetch instrumentation, but I'm familiar with fetch taking either a url string or a Request object, so this sounds plausible. I'll investigate. . Interesting, I was surprised to hear that there's an environment with fetch but not XHR, but after reading up on SW docs and this chromium issue on the XHR removal it makes sense.\nI'll add this to the todos.. Published 3.15.0, see #955.. This is sort of related to #879 - there are a couple situations where we're relying on Object.prototype.toString and either\n- could be formatting things better (here we get [object DOMError])\n- blow up when passed an object without a prototype (bad case in #879)\nWe resolved this in raven-node by using node's util.inspect, but would need to add an implementation of something similar to raven-js to use the same strategy.\nThe other possibility for this case in particular is that we should make isError return true when passed a DOMError, but I don't personally understand everything about what makes a DOMError special or what the resulting captureException behavior would be.. So I did some digging on this and I think what we should do is:\n- Not worry about tackling the bigger picture #879/util.inspect problem here; out-of-the-box util.inspect impls are too big and it's not pressing enough to take on making a thinner/stripped down alternative\n- Stop special-casing DOMException to pass isError like we started doing in #919 \ud83d\ude15 \n- Have some special logic in captureMessage for doing a nicer string formatting of DOMException/DOMErrors along the lines of what you suggested\nRegardless of what we actually do, we should try to treat DOMError and DOMException the same way (see \"Remarks\"), which we're not currently doing. This is sort of tricky because a DOMException is instanceof Error in Chrome, Firefox, Safari but not in Edge or IE. Also, '' + (new DOMException('hi')) gives us \"Error: hi\" whereas '' + (new DOMError('hi')) just gives \"[object DOMError]\" as you've observed; we can construct \"DOMException: hi\" and \"DOMError: hi\" instead.\nNote that we don't re-throw when failing the isError check, we just hand it off to captureMessage where we'll make a synthetic stack trace. If we instead made DOMErrors pass isError, we won't get a stack trace at all (which is currently the case for DOMException).\nSo right now, DOMExceptions get a reasonable message but no stack, and DOMErrors get a reasonable stack but no message. We can make both get both.\n/cc @graingert - considering reverting #919 because we actually don't get a stack trace for DOMExceptions right now, but we would make a synthetic trace if a DOMException failed isError. Curious if you have thoughts and what your initial motivation was for that PR.\nAlternative path is to make DOMErrors also pass isError and try to go from there.\n/cc @benvinegar . Realized this also relates to #360.. Hey @captbaritone, appreciate the comment & offer but you might hold off a bit; this isn't too pressing and we've had some minor internal discussion on this that just hasn't yet made it to a decision/follow-up comment yet, mainly because the question of \"what about pieces that could be shared between here and raven-node\" also plays into this.. You might also refer to the ignoreErrors option in the config docs. Between those two options you should be able to solve this but feel free to reopen if not.. This is necessary largely to ensure that the same error results in the exact same stack traces across different browsers, so that we can accurately group multiple occurrences of the same issue together across different browsers. This also relates to how we get more than just \"Script Error\" when cross-origin scripts throw errors (see Ben's blog post on that) and we collect some of our automatic breadcrumbs from this instrumentation.\nAll that aside, the potential \"unnecessary work\" you describe is extremely minimal, feature detecting window.onerror behavior is hard to do cleanly, and we'd rather not try to keep an up-to-date matrix of which browser versions do what with window.onerror when we can instead just normalize across all browsers.. Have you tried using allowSecretKey and your secret DSN?\nWe note in our raven-js config docs:\n\nif you are using Raven.js in an environment like React Native or Electron, where your application is running \u201cnatively\u201d on a device and not accessed at a web address, you may need to use your secret DSN string. To do so, set allowSecretKey: true during configuration.\n\nTry:\njavascript\nRaven.config(<dsn including secret key>, { allowSecretKey: true });\nThis will stop the sentry backend from doing the CORS validation.. Ah, okay. I think this relates to getsentry/sentry#5184 then, being worked on.. > Also lets make sure we update the other Repos and docs afterwards\nofc, am following https://github.com/getsentry/raven-js/blob/master/CONTRIBUTING.md#releasing-new-version. Published to ravenjs cdn, docs, npm, etc, and opened PRs for other places to bump version numbers.. Thanks for the report and details, @mirague.\nCould you include a minimum complete example of where you do the importing, where you instantiate/configure Raven, and where you throw? I'd like to reproduce this locally to investigate and want to make sure I start from the same place.. I can't reproduce this. The following:\njavascript\nRaven.config(myDsn, { environment: 'one' }).install();\nconsole.log(Raven._globalOptions.environment);\nRaven.setEnvironment('two');\nconsole.log(Raven._globalOptions.environment);\noutputs:\none\ntwo\nWe store config values on _globalOptions here and use the environment property here.\nI'm not sure what you might be observing here, but all indications are that this should work. Can you double check what you're doing, or provide a more detailed repro?. Object.isFrozen is IE9+, but we support IE8. Object.assign is ES2015, use our objectMerge helper instead.. Yea, sure, I don't have any opinion on what the right thing to be doing is here w.r.t. react-native etc, just want to make sure we keep compatibility in good shape.. Please refer to this link, provided in the comment immediately above the code in question, for why we don't do it this way.. 2 avenues that might be relevant:\n1) If you know, in some path of your application code, that a particular request you're dealing with might have that http header of interest, you could manually capture a generic breadcrumb in that codepath. Not ideal/automatic/all-encompassing, but is simple and could be passable depending on your use case.\n2) You could do your own additional monkeypatch of XHR instrumentation (on top of the one we do already) to automatically capture an additional breadcrumb with header details. This isn't exactly straightforward, would be fragile, and I don't really recommend it, just mentioning it as a possibility.\nIf you want to further discuss either of these options (or other JS-side stuff), feel free to keep commenting here, but anything beyond these would have to be a product decision at the sentry core backend level and is outside the scope of the JS SDK, so I'm going to close this. If you want to discuss that further, I recommend opening an issue on getsentry/sentry.. I'm good with adding it, but I feel like it's missing a \"here's why\" or \"more on that\" link. Do we have any further explanation of this anywhere deeper in the docs we could link to? I'd at least want to include a link to the blog post here, or some sort of explanation for why we recommend that. We make a similar \"run your app in a context wrap\" recommendation in raven-node (also without a ton of explanation), and I get the feeling (from a few issue tracker discussions) that there's been a bit of user confusion around it.. 2 things I can think of that we should consider this against:\n1) We already do something like this completely automatically in raven-node: any additional properties of the error object are added to the extra data. Source here; this PR, is, of course, more flexible, but we're generally averse to introducing new callback hooks without good reason because we could easily end up with 10 of them which would be hard to keep straight.\n2) I can't find the issue right now, but I'm almost certain that we've gotten a request in the past to provide the error object as an argument in dataCallback/shouldSendCallback, and I think @dcramer made a comment against it on the notion that error object should be long since parsed/forgotten by the time we get that far. I'll keep looking for this issue.\n. hasOwnProperty a bit safer here?. Use assert.isFalse here? Or at least strictEqual.... Maybe move this comment about data.exception guaranteeing other keys to be before this var decl; in its current position it doesn't obviously apply to data.exception.values[0], which made me wonder if that was a safe access until I looked at the original where it did obviously apply.. We list 5 thing here but 4 options on the config page, missing a config option corresponding to previous errors. Is this configurable? Should it be? Do we report prior errors as breadcrumbs when autobreadcrumbs are otherwise disabled?. ___PUBLIC_DSN___ instead of your-dsn. Is there anything other than message and data someone might want to include here? Maybe link to https://docs.sentry.io/clientdev/interfaces/breadcrumbs/ for info about level, category, etc. Yes, it should just keep the original crumb value in that case. This is roughly consistent with dataCallback's behavior (see here), aside from the explicit false return case. The user can either return false to filter, return their new breadcrumb object value, or just modify it in-place and return nothing.. Just to be clear, there's also an implicit third case to Ben's comment which is \"if this is neither an object nor false/null, then just use the original crumb value\".. One other note since we brought null into the picture - since typeof null is object, we should be careful to do the \"is it false/null\" case first, so that in the second case when you do something like if typeof result === 'object', we won't mistakenly treat null as an object.\nEdit: nevermind, the isObject helper takes care of this.. I'd prefer this alternative function body:\njavascript\nreturn !!(!!a ^ !!b);\nThe xor operator makes it more obvious what's going on IMO, and this will always return a boolean; current version has some edge cases where it won't like isOnlyOneTruthy('', '') (returns empty string). Or if we're cool with always returning 0 or 1 instead of a boolean, we can further simplify to !!a ^ !!b.. Couldn't we end up with a string (or even an error-like string) here? This prints \"string\":\n```javascript\nwindow.onerror = function (message, filename, lineno, colno, ex) {\n  console.log(typeof ex);\n};\nvar x = \"hello\";\nx.stack = ['a'];\nthrow x;\n``. shouldn't this say 3.13.0?. @benvinegar late to the party here but this is slightly unsafe - ifObject.prototypehas a property added to it *and*datahas an own property of that same name, we might truncate something we don't mean to. Simplest fix is to add&& prop.hasOwnProperty(prop)but I'm not sure why we don't just makeurlprops` an array and iterate through. Call it one way or the other and I'll make a PR.. We do want to keep this here; in the case that both a Request object input and an init options object are passed, the init options object's method should override that of the Request object.. ",
    "shakefu": "We're using:\njavascript\n        Raven.config(g.SENTRY_JS_DSN, {\n                release: g.CDN_ASSET_VERSION,\n                whitelistUrls: [\n                        g.DOMAIN_NAME,\n                ],\n        }).install();\nWhere DOMAIN_NAME is our site URL. Do we need to whitelist the CDN we use for JS as well?\n. Yeap, that did it. Thanks very much for your help!\n. ",
    "grabbou": "That however breaks on latest React / Android - adding console.log in react-native plugin gives me status: '0', message: 'Payload is set but no content-type header specified' which is coming from native java module.\n. I've decided to open an issue regardless, haven't expected such quick answer!  ( #526 ) I am not sure if the above concerns also apply to React Native since native code is involved on both platforms (e.g. okhttp on android)\n. I am experiencing that error as well - js code on iOS does not send anything because crash is just too fast for it to talk to Sentry (my guess). \nGoing to create a 3rd party module for that since I need a working solution today and if that's somehow aligned with getsentry guys vision, I'd be more than happy to work on merging that :) \nFunctionality-wise it will act just like raven-objc uncaught exception handler. \n. Here's the gist https://gist.github.com/grabbou/742e08f633557edf7358\nYou will have to download errio module from npm (so far seems to be the easiest way to serialize entire error with its stack) but we could potentially use some react-native internals for parsing errors to string back and forth. \nThen, simply do:\n``` js\nimport {AppRegistry} from 'react-native';\nimport errorReporter from './errorReporter';\nclass App extends React.Component {\n  componentWillMount() {\n    errorReporter();\n  }\nrender() {\n    return (...);\n  };\n}\nAppRegistry.registerComponent('App', () => App);\n```\nWorks well so far (at least it solved the iOS issue mentioned earlier). Happy to submit a PR with refined code once anyone from @getsentry/raven-js checks if it's worth contributing.\nIf you'd like to give it a go and add Raven errors handling (when it fails, do not clearException) as well as change AsyncStorage from being a single item to being an array so we can store multiple exceptions (e.g. 5 crashes w/o internet), that'd be cool. We might look into that later, but so far it's good enough for our use-case.\n. FYI you can fetch source maps in development just like React Native.\nI would expect potential sentry React Native client to also support native uncaught exceptions via the raven-objc as in some cases, we also write Objective-C. That should be easily configureable.\nWe could use rnpm plugin for uploading source maps to sentry automatically (our rnpm is getting merged into rn core soon, so that seems like a good alternative)\n. That's already fixed (not sure if pushed), check recent pull requests :)\n. > AsyncStorage doesn't block - and in typical use on iOS it adds 200ms\nSo far in production the number of exceptions reported that way equals the number of exceptions reported by Sentry native. I might be just lucky though, not relying on that too much since I also have native handlers as a fallback.\n\nDownside is that this approach is complicated\n\nI don't think it's complicated - it just requires quite a few additions to your native code, but AFAIK that's the most stable way to do it. If we decide to bundle native code for React Native, we could do a blocking write on native side and crash after that happens which should not produce any issues later (you can e.g. write to NSUserDefaults and read that from Javascript with Settings module or just add in your own methods)\n\nthink it's nice to be able to use Raven.js if possible, especially for cases where you're using the same React code on the web / on mobile devices. So I'm going to propose exploring #2.\n\nBesides that, what I like in JS approach is you can send source maps and get nice stack traces for free.\nI am giving my +1 to this https://github.com/getsentry/raven-js/pull/533#issuecomment-202632104 - I think it should cover most cases, the code is pretty portable and write/read is like 15 lines of code.\n. One thing I don't understand in this PR (please enlighten me) is -> if you overwrite error handler and do not call it in production - app is never going to quit because of React Native JS exception. If that's something major, how you are supposed to reload the app then? (actually I just came up with an idea to reload the app just like refreshing browser w/o quitting!)\n. ",
    "whq731": "+1 \n. ",
    "mitsuhiko": "Yeah. We should close this here and do this in UI/processing.. @benvinegar i thought script errors are still sent to sentry just that they have basically no info?. I wonder if it would make sense to have an API where you can send configure failures to sentry so they can surface in your UI (like we already do with symbol processing errors). Because I don't think anyone is going to notice them in the developer console.. Nothing bad sticks out but I'm also not particularly familiar with how we include the plugins.\n. See also https://github.com/getsentry/raven-js/issues/577\n. @benvinegar why do we not just completely remove all frames that originate in raven-js?\n. This keeps coming up on the support tracker as well. I think we should add a method to disable it.\n. \ud83c\udf6a \n. Can you clarify what \"does not work\" exactly means in this context?\n. What if we do something else here and just check for Object.isFrozen(crumb) and continue? In theory since a frozen crumb means it already passed the react native bridge we should not need to do any changes to it.. I would check for the existence of isFrozen and skip if we have that function and the object is frozen. That entire branch only matters for react native. . @k-funk which headers in particular are relevant for you? Capturing all headers is excessive but maybe we can identify common ones that are interesting.. For what it's worth I think we should support that being a function instead of regexp optionally.. Additional unhandled attributes show up as warnings/errors in the UI.. So I was looking at this before and I rejected doing it for a reason. I do not remember which one :(\nLet me recollect my thoughts before I approve this.. Also further notes: this is likely to affect more parts. We should setup a general policy of being super careful about doing assumptions about objects we deal with. We had similar problems where objects passing the react-native bridge end up being frozen and the code did not deal with this well.\nMaybe it makes sense to add some helpers for potentially foreign objects and a naming convention to make it clear when objects might be tamper proof.. @bjfletcher do you know how bower finds a package? how does it decide to pull from master of this repository?. I\u2019m conflicted. It sounds like a major bump would be the right thing. . Your event appends default as fingerprint and not {{ default }}. As such you are not actually appending a default value at all.. So maybe the docs are not very good on this and we're actually working on visualizing what happens on grouping. This is what is supposed to happen:\n\nsend no fingerprint or fingerprint set to [\"{{ default }}\"]: default grouping applies\nset fingerprint to [\"some-value\"]: all events are grouped together\nset fingerprint to [\"{{ default }}\", \"some-value\"]: all events are subdivided below the default group for some-value.\n\nThe latter means that if you for instance have an event that looks completely the same as another they would normally end up in the same group. However if you add as last argument to fingerprint a value like your current HTTP request path you could force errors to go to separate issues with one issue per request path.\nDoes that make more sense?\nAnd to clarify something: {{ default }} is the default fingerprint, default is just some random value. Your events sent default as fingerprint and not {{ default }} so the default fingerprint is never added.. This should be revisited with https://github.com/getsentry/sentry/pull/12355. i would probably give this the type \"ui\" in addition to category \"ui.click\" so that we can give it an icon.\n. That's at least what the mocks currently do.\n. Should these not be \"http\"?\n. This regex needs a group to be what I think you want:\njs\n/^(\\[object Object\\]|#<Object>)$/. Can you use # instead of // here?. I want to change sentry-cli first to always load sentry.properties before we promote that more.. pretty sure blob is blob:foo and not blob://fo. That depends on the browser. Current chrome adds the http origin to it, but blob:UUID is perfectly permissible and shows up in Firefox for instance.\nYou can try with (URL.createObjectURL(new Blob([new Int8Array()]))).toString(). Apparently blob urls are now supposed to always have an origin.  Since they are rare I might be okay with that but please add a comment why blob is okay.. I do not think this applies here. Because there is only one raven and thus one callback so this should actually go into the currently active client.. More importantly I think install() will go away entirely in the future when we kill Raven. The bridge stuff in react-native and co will not be in install anyways but a default instrumentation that cannot be disabled.. Or alternatively we make the scope optional if there is a reason to do it.. This should be top.client.. If it returns domain local data it should be getDefaultHub.. ",
    "claygriffiths": "I believe this was implemented in #92, but it is definitely not filtering out repeat errors. \nFor instance, if you have an exception being thrown on a browser event such as mouse drag then you can be in a world of hurt.\n. Aha! Sorry for not looking into that more.\nIf anyone is looking for a solution this what I'm using to filter out exceptions. It is absolutely by no means perfect but it will work in the meantime.\n``` javascript\nvar RavenLimiter = {};\nRaven.config('#####', {\n    shouldSendCallback: function(data) {\n    if ( data.message in RavenLimiter ) {\n        return false;\n    }\n\n    RavenLimiter[data.message] = true;\n\n    setTimeout(function() {\n        delete RavenLimiter[data.message];\n    }, 5000);\n\n    return true;\n\n}\n\n}).install();\n```\n. ",
    "frewsxcv": "A function I would find helpful would be something like captureMessageOnce such that it only sends the message to Sentry once, and won't send it again.\n. @michalczaplinski See https://github.com/getsentry/raven-js/issues/654. Disclaimer: I've done minimal testing with this and haven't tested on older browsers.\n. > @frewsxcv \u2013 are you actually using console.assert?\nYes. It's specified by the WHATWG Console Spec. It's also available in all modern browsers (including IE11).\n. Would you prefer I check if it already exists at the global level before creating it?\n. > I understand that it's specified, but I'm curious if you're actually using this live, and if so, how.\nFor example:\njs\nvar $someElement = $(\".element-class\");\nconsole.assert($someElement.length);  // make sure the selector is valid\nor\njs\n$.get(url, function (data) {\n    var name = data.name;\n    console.assert(_.isString(name) && name.length);\n    ...\n});\n. > BTW, any idea why MDN is saying this at the top?\nIt looks like that header was added in 2014 when the initial write of that wiki page happened, which presumably predates the WHATWG standard.\n. > I'd also prefer if you created a method, wrapAssert inside of src/console.js so that later I can re-use it inside our breadcrumb collecting code (I won't ask you to implement that part). It will also be easier to test.\nLatest commit has these changes.\n. Sorry, I don't think I can spend any more time looking into this. Feel free to close this if you don't either.\n. ",
    "nblasgen": "I had a similar request from @benvinegar and he pointed out that you can use:\nRaven.config('your dsn', {\n  shouldSendCallback: function () {\n    return false;\n  }\n}).install();\nAnd that will stop Raven from reporting.  Switch the return status to TRUE and it will start reporting.  At least this is what I've been told.  We plan to use this plus a deployment sed command to flip the boolean at deployment time.\n. I've added ID tags to all my buttons.  Surprised that they don't show up in the breadcrumbs.  Even if it was a custom tag, I'd be happy with it.  But ID tag seems to be ideal due to its uniqueness.\n. ",
    "chancez": "I did something similar to the above to allow install() to suceed, and to avoid making any http requests to actually send the errors (window.SERVER_FLAGS is how I pass my sentryURL from my backend to the frontend).\nif (!window.SERVER_FLAGS.sentryURL) {\n  // Never bother sending data to sentry\n  Raven.setShouldSendCallback(function() { return false });\n  // Allow Raven.install() to succeed\n  Raven.isSetup = function() {\n    return true;\n  }\n}\nRaven\n.config(window.SERVER_FLAGS.sentryURL, {\n  release: window.SERVER_FLAGS.version,\n  debug: true,\n})\n.addPlugin(Raven.Plugins.Angular)\n.install();\nThis seems to be working fairly well, and still lets Raven run, but it simply doesn't report. I really dislike having to hack isSetup but its the only way I could find that was minimally invasive to get ngRaven loaded.. I was able to find a work around which basically stubs out a few methods on the Raven object, which allows the angular plugin to properly be installed, despite having no DSN.\nSee my comment here: https://github.com/getsentry/raven-js/issues/436#issuecomment-279906940. Functions returning a boolean tend to be prefixed with is. So isDevelopment. I'd rather not have to get gulp to handle the instantiation. Is it possible with the current PR design to just call it install the plugin manually before calling Raven.install()?. ",
    "jo-tham": "For others who stumble upon this\nIf you are using webpack to build your application, you use environment variables to configure raven by using the environment plugin\nhttps://webpack.js.org/plugins/environment-plugin/\ne.g.\n```\nif (process.env.NODE_ENV === 'dev') {\n  Raven.setShouldSendCallback(() => { return false; });\n  Raven.isSetup = () => { return true; };\n}\nRaven\n  .config(process.env.RAVEN_DSN, {\n    debug: process.env.RAVEN_DEBUG,\n  })\n  .addPlugin(require('raven-js/plugins/angular'), angular)\n  .install();\n```. ",
    "jimmykane": "More easy at 'app.module.ts'\nimport {environment} from '../environments/environment';\n...\nproviders: [\n    LocalStorageService,\n    EventLocalStorageService,\n    EventService,\n    ActionButtonService,\n    WeatherUndergroundWeatherService,\n    GeoLocationInfoService,\n    AppEventColorService,\n    // {provide: ErrorHandler, useClass: RavenErrorHandler}\n    {provide: ErrorHandler, useClass: environment.production ? RavenErrorHandler : ErrorHandler} // See here\n  ],\nand \nRaven\n  .config('key', {\n    shouldSendCallback: function () {\n      return environment.production;\n    }\n  })\n  .install();\nThis way you have the localdev messages in your console (else Sentry grabs some) and at production you get the ones you want to have \n. ",
    "igregson": "At least in Chrome (not sure about other browsers), another way to prevent Raven from \"hijacking\" the dev console is to blackbox raven.js:\nhttps://gist.github.com/paulirish/c307a5a585ddbcc17242\nhttps://developer.chrome.com/devtools/docs/blackboxing\n\n. ",
    "maraujop": "@benvinegar I believe this issue is solved with the addition of setDSN in version 3.6.0 and therefore can be closed.. ",
    "Nevon": "I would really appreciate this. I have somewhat extensive browser support requirements, so without knowing which browsers you support, it's hard to know if something isn't working because of my code or because of you.\n. If you just want to delete some property, you can get the context, unset the context like Ben said and then re-set it without the property you wanted to remove.\n```\nsetExtraContext({\n  foo: 'foo',\n  bar: 'bar'\n})\n// later\nconst { extra } = Raven.getContext()\nRaven.setExtraContext(undefined)\nlet {bar, ...newExtra} = extra\n// newExtra is now { foo: 'foo' }\nRaven.setExtraContext(newExtra)\n```\nI agree with Ben that exposing a bunch of remove<Something>Context would be kind of ugly. I would argue that setExtraContext should replace the entire extra property on the context. If you wanted to preserve the existing extra context, you should take care to read it and extend it yourself. That said, it would be a very API breaking change.\n. I got it from the source. I wasn't aware that it wasn't documented. Given that it's not prefixed with an underscore and is exposed on the Raven object, I would assume that it's meant as a public method. Perhaps @benvinegar can let us know if this is considered an internal method that we shouldn't be using.\n. ",
    "wilgert": "You can override the main files in your bower.json like this:\n\"overrides\": {\n    \"raven-js\": {\n      \"main\": [\n        \"./dist/raven.js\",\n        \"./dist/plugins/angular.js\"\n      ]\n    }\n  }\nNever mind, that doesn't help at all. Because it still does module.exports.\n. ",
    "jpatel3": "@benvinegar Thanks for pointer. Resolved it. \nI think it will be helpful to see this compatibility matrix somewhere..\n. Missed it. \nI got the configuration from https://docs.getsentry.com/hosted/clients/javascript/integrations/angular/ \n. ",
    "blaskovicz": ":+1: @benvinegar for the pointer on switching to v1.3 of RavenJS. I just hit this issue too.\n. ",
    "mseeley": "Cheers Ben :+1: :)\n. ",
    "stiller-leser": "Hey,\nfirst off: Thanks for the implementation. Looks like this is going to help us a lot. I know this is a beta-feature, but I thought I'd give it a shot anyways: Is there a way to localize the error-embed? It did not look like setting a locale via Raven.setUserContext would do the trick.\n. ",
    "philipbjorge": "We just ran into this and it effectively crashed our embedded google maps.\nFor whatever reason, panning google maps would trigger the following stack trace in the console.\n\nWhen I set a breakpoint at the site, it seemed to be caused by the following situation:\nWe had a 3rd party library that within a setTimeout was attaching an eventListener. This was causing a recursive wrap.\nIn addition to the Raven exception, our google maps panning would also break (images wouldn't load and center gets reset).\n\nThis affected Firefox + Safari on OSX but not Chrome.\nWithout Raven on the page, there are no JS errors while interacting with our map. Simply the addition of Raven breaks everything.\n. ",
    "sdillinger": "Yes.  Sentry.com. \n. ",
    "sylvinus": "Hi!\nI'm having this warning again with Raven 3.4.0, both minified and unminified versions.\n. ",
    "aderushev": "any updates here?. ",
    "nevir": "React Native's default behavior (on iOS) for global exceptions is to re-throw the exception in Obj-C land, causing an immediate crash (and no chance for Raven to upload the exception)\n. Hell yes!\nOn Wed, Mar 22, 2017, 22:49 Ben Vinegar notifications@github.com wrote:\n\nSentry now has a first-class React Native plugin\nhttps://github.com/getsentry/react-native-sentry that combines both\nJavaScript and native (iOS) frames in stack traces.\nClosing this issue.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/468#issuecomment-288623754,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAChnTs_jdE55WhZzhdMLSuwiaPbGXJyks5rogfxgaJpZM4HDAt9\n.\n. @dcramer you may want to consider a React Native variant of the ObjC & Java libs for better RN support, as well (see #533 for a rationale) \n. :+1:  PTAL\n. rethrow is a good'un\n\nShould/can I change default behavior to not rethrow as part of this as well?\n. Alright, I'll stick with just the option for now, that can be layered on later\n. Well, I can do the options.rethrow === false approach (e.g. rethrow: true being the default) if the name sticks :P\n. Here's the easy way out of noRethrow\n. Aha, ok. So, after further testing, iOS react's dev mode does use the global exception handler to display error redboxes.\nIt seems like the better behavior here is for default behavior to rethrow in dev mode (for redbox), and not to rethrow otherwise (to prevent the exception from bubbling out). That preserves the behavior of raven-js 1.x, at least\n\nPushed an update with that behavior\n. Probably not!  updating to cut that out\n. Updated - PTAL\n. I'm unsure how to appropriately test the pathSplit option without a pretty substantial refactor (or only testing _normalizeData in isolation, which misses most of it) - so skipped a test there :S\n. Uncaught JS exceptions do crash the app by default (i.e. including Raven prevents that)\nwant me to bring the option back? :P\n. The problem is that if the app is allowed to crash, the exception will be never caught.\nOr Raven could defer the default handler until the exception is reported, but you risk additional state corruption; there's no way to pause the rest of the VM\n. (A better solution might be to have react-native support in the ObjC and Java clients; but that sounds thorny)\n. Sounds good, updated to just that commit\n. Added #533 to kickstart the conversation \n. I think I've just argued myself into hiding the PR behind a flag, at the very least - but I'm going to let it sit until the right approach is settled on\n. The thing that worries me about option 2 is that it's a bit deceiving for people who feel strongly about crashing hard.\nThe usual rationale for doing that (AFAIK) is to avoid letting the app get into a broken state, and especially to avoid it persisting any of that broken state.  Waiting for the exception to send (or persist - offline support) gives the application plenty of time to do something bad\n. AsyncStorage doesn't block - and in typical use on iOS it adds 200ms\nlatency to any write\nOn Mon, Mar 28, 2016, 16:55 Ben Vinegar notifications@github.com wrote:\n\nAnother alternative would be to push the error to AsyncStorage instead of\nover the network and then crash, and only send it once the app starts back\nup.\nI'm in favor of this.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/533#issuecomment-202632104\n. In favor of that over hitting the network, though!\n\nOn Tue, Mar 29, 2016, 09:45 Ian MacLeod ian@nevir.net wrote:\n\nAsyncStorage doesn't block - and in typical use on iOS it adds 200ms\nlatency to any write\nOn Mon, Mar 28, 2016, 16:55 Ben Vinegar notifications@github.com wrote:\n\nAnother alternative would be to push the error to AsyncStorage instead of\nover the network and then crash, and only send it once the app starts back\nup.\nI'm in favor of this.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/533#issuecomment-202632104\n. > What are the odds that writing to AsyncStorage has the same problems as firing an HTTP request? i.e. that the process terminates before the write occurs\n\n\nWould need some research on whether FB waits for any pending writes before crashing in earnest (I doubt it, though)\n. Alright, I'm looking at tackling option 2 + AsyncStorage today.  Here's my rough plan:\n- Refactor Raven to expose:\n  - Raven.snapshotException: Builds the entire payload that should be sent to Sentry (e.g. including breadcrumbs)\n  - Raven.sendSnapshot: Sends the snapshot\n- When a global error occurs:\n  1. Snapshot the error\n  2. Write the snapshot to AsyncStorage\n  3. Rethrow the error\n- When the plugin initializes:\n  1. Read the snapshot from AsyncStorage (if it exists)\n  2. call Raven.sendSnapshot\n  3. Remove the snapshot from AsyncStorage\nThis should hopefully make #279 a lot more straightforward, too\n@benvinegar I'm noticing that the current payload does not seem to include a timestamp for the error; though it does for the breadcrumbs.  The API does support a timestamp though, right?  (I'm assuming it just wasn't necessary in raven-js yet?)\n. Alternatively, this could be implemented as a transport (that passes through to the original one?).  I would need to think a bit more about how that would be structured, though\n. \ud83d\udc4d \n. > But I'm not sure if we should change the default behavior without more thought.\nSounds good - I'll bake it in from the plugin side only\n. Does the general approach of Raven.snapshotException -> Raven.sendSnapshot sound good to you?\n. Yeah, sounds good to me; less surface area for me to potentially screw up.\nThanks for the feedback!  Saved me a bunch of potentially wasted time/effort :)\n. Closing in favor of #626\n. Yup!\n. We currently\njs\nconsole.warn(`something happened, but I don't want to trip the global exception handler. Here's the error:`, error);\nworks great w/ this patch, so far\n. No worries on delay - I've been juggling a bunch of other unrelated things - will circle back to these outstanding PRs probably in a week or so if you don't end up taking them over yourself :P\n. PTAL - rebased this\n. Caught this back up\n. Ping on this\n. Closing in favor of #670\n. Ack, sorry!  Will get to this in the new few days\n. Alright, rebased it off of the latest! PTAL\n. Sweet!\n. > This way it is possible to preserve OR override the behavior of any previously set callback, without adding new API methods (e.g. addDataCallback and addShouldSendCallback).\nYay!  Much better\n\nI'm not 100% on doing this, but I think it could be a satisfactory solution \u2013 especially since we've gone this far without it. Would love to get the community's feedback.\n\nIt would definitely cover my needs for #626\n. Hmm, well, in our case we've got information that would be difficult to convoy via a server side transform (platform)\nThis is a react native app that runs on iOS and Android, and makes use of code push to deploy JS bundle updates.  Both platforms end up with a file named main.jsbundle, but we need to be able to disambiguate those for source mapping (each platform has slightly different compiled JS source).\nWe're making use of this transform to rewrite it to main.ios.jsbundle etc (and upload source maps accordingly).  Does/will sentry server support per-platform maps?\n. Doh! Sorry about that :(\n. > Re-reading the code, I understand now that this code branch is reached if we're dealing with a non-fatal, in which case we should return true (process the exception) unless an original shouldSend handler is present, in which case we use the return value from that.\nYup!  This looks correct\n. ",
    "gabalafou": "Funny-- that file notes the same behavior about IE9:\n// IE9 doesn't allow calling apply on console functions directly\nAlternatively, you just don't try to log anything when the original throws? i.e.,--\ntry { /* log thingy */ } catch (err) { /* skip debug logging IE<10 */ }\n. I just copied what console.js does\n. It affects both apply and call. (I checked.) \nNot sure if you submitted your comment before my most recent update (looks like they may have crossed each other). \n. IE8 may not have Function.prototype.bind, but it does have Function.prototype.apply-- check out my latest update :)\n. ",
    "luiscvalmeida": "@benvinegar please fix your comment, where you specify: addPlugin(Raven.AngularPlugin), it is now addPlugin(Raven.Plugins.Angular), same to the console plugin.\n. ",
    "thomasjachmann": "This is also true for the react-native plugin. There, setTransport also works the same and might lead to similar problems.\n. @benvinegar Right. That means the dataCallback option and setDataCallback function should only be used by the user while the plugins should use a different way to register their data enhancements. On the other hand, a user might want to achieve just this: Use the plugin's exception handler but not it's data callback. But this is rather hypothetical.\n. too late but :+1:\n. ",
    "GeoTob": "@benvinegar how did I miss #446, sorry! And there's a PR for it too, great:) And yes, <script> tags it is... who uses module loaders cough\n. I could contribute some docs for requirejs+angular later, and for loading via <script>  tags (#476) if there's a tagged beta build (?). I assume that set up and config for the other plugins will be largely the same?\n. Sounds good @benvinegar , happy to review when you push 2.1.0. Depending on how long you're planning to have 2.1.0 in beta it may be good to put a warning in the docs... something like:\nTo use any of the plugins, we highly recommend using the pre-built source from our CDN (www.ravenjs.com). Support for local hosting will be added in the upcoming 2.1 release.\n. ",
    "joshma": "It wouldn't match the node library, which may be enough reason to rule it out, but IMO just reading the error.extra field could be a 4th option. It's easy to use and avoids accidentally collecting too much data.. ",
    "robertsami": "Agreed with 4th option, but also putting in a vote for the second option listed by @mattrobenolt \"Provide a new hook to preprocess the Error where these can be extracted\". Avoids memory issues, preserves flexibility, and does not lead to a dataCallback signature you're not fond of :). Some more motivation from my end -- there are a few places in our codebase where we throw new Error('msg for sentry') with the intention that this will both notify the user that something went wrong as well as log the message and stack trace to sentry.\nCases where we hard error tend to be the most unexpected, so Ideally we could add some extra data to the sentry logs. EG in a default branch of a switch statement, if that branch was unexpected, we would like to hard error and attach the data that we were not expecting as well as any other surrounding useful context.\nEven if in most the extra param is simple, stringify-ing them in the error message is not ideal since then the errors would not de-dupe.. ",
    "blittle": "I just added a PR for the second option. Would love feedback!. @keithhalterman I have another PR that exposes the error object inside dataCallback, but it seemed the consensus in https://github.com/getsentry/raven-js/issues/483 was to have a separate callback all-together. I think it makes sense to keep it separate because the dataCallback gets called for non error events where the error object passed to dataCallback would be null. This way seems to keep things cleaner.. @benvinegar thanks for the feedback. Looking forward to reading the write-up!. As long as you are considering a breaking API change, would it be worth considering the way Redux does middleware life-cycle events? http://redux.js.org/docs/advanced/Middleware.html. Looks good to me!. We've been looking for this type of functionality for a while: https://github.com/getsentry/raven-js/pull/802 and https://github.com/getsentry/raven-js/issues/483\nWe've gotten around the problem by running a forked version of raven in prod. But we'd really like to get back to the official version. @kamilogorek will version 4 allow some form of custom data harvesting from the error object? Is this something you would like help on? I submitted a PR a while back and would be happy to do so again. . I moved this above the isError check because the errorCallback would potentially get called with the error object of a previous error for a currently thrown non-error. Another way of doing this would be to bubble the exception itself upwards into _send. This seemed easier and until now this._lastCapturedException was only used for debugging.. data.stacktrace exists for events captured by _processException and captureException but not for captureMessage which shouldn't have an error object. In other words, errorCallback is only getting executed for errors, not generic messages. I think that is hopefully implied to the user by the name errorCallback. ",
    "mattmo": "I imagine you'll want to only install raven when not in dev mode. e.g. in index.XXX.js\nif (!__DEV__) {\n  Raven\n    .config('https://https://<key>@app.getsentry.com/<project>', { release: RELEASE_ID })\n    .install();\n}\nSeems like the Raven documentation should be updated to reflect this. \n. ",
    "corbt": "I'm trying to ensure that my React Native app works right in situations with spotty data coverage. Unfortunately it looks like the Raven transport with React Native doesn't try to persist exceptions to disk when there isn't a network connection. Would you consider buffering exception reports in AsyncStorage until a connection is available to upload them?\n. @grabbou cool, when you have that ready please let me know!\n. @dcramer that sounds great. Robust offline support is important. The highest priority for me personally is confidence that I'm actually getting reports from the errors my users are experiencing so I can react to them.\nOther nice-to-haves would be 1) some way to better automate the source map generation/upload and 2) automatic capture iOS and Android native errors as well as the Javascript ones.\n. I do think it's important for both minimizing possible damage and providing the best possible user experience to let the JS crash and RN restart as soon as possible after a crash happens.\nOption 3 seems like a solid way to accomplish that, and also presumably would make it easier to integrate sentry into an app as well (because you only have to add code in one place, on the native side).\nAnother alternative would be to push the error to AsyncStorage instead of over the network and then crash, and only send it once the app starts back up.\n. ",
    "ehfeng": "Related issue raised in React Native repo. \nhttps://github.com/facebook/react-native/issues/5378\n. Yes, the size limit is currently 100kb.\nI'd like to understand how your event is larger than 100kbs. Are you attaching a large number of tags or body data? Or is the naive configuration of vue.js sending 100kb+ events?. ",
    "lklots": "I am having a similar issue. Haven't looked into carefully although I imagine the trace library is to blame. Here is the output I get for the same error in dev + production on android:\nError: broken test\n  at ? ([native code])\n  at ? ([native code])\nAnd the the dev stacktrace:\nbroken test\n/index.bundle in onRefresh at line 71525:16\n[native code] in onRefresh\n/index.bundle in invokeGuardedCallback at line 16706:12\n/index.bundle in executeDispatch at line 16462:38\n/index.bundle in executeDispatchesInOrder at line 16485:16\n/index.bundle in executeDispatchesAndRelease at line 15925:42\n/index.bundle in executeDispatchesAndReleaseTopLevel at line 15936:35\n/index.bundle in forEachAccumulated at line 16842:8\n/index.bundle in processEventQueue at line 16141:19\n/index.bundle in runEventQueueInBatch at line 20593:33\n/index.bundle in handleTopLevel at line 20609:21\n/index.bundle in _receiveRootNodeIDEvent at line 20480:39\n/index.bundle in receiveEvent at line 20502:48\n/index.bundle in __callFunction at line 3824:28\n/index.bundle at line 3728:22\n/index.bundle in guard at line 3682:3\n/index.bundle in callFunctionReturnFlushedQueue at line 3727:6\n[native code] in callFunctionReturnFlushedQueue\n. this was on android. let me get you the ios stacktrace as well\n. ",
    "srshah19": "+1 Facing the same issue when running on Firefox using Selenium\n. Unfortunately I will not be able to share the repo. But I can try and explain what is happening:\nOur app is a Django Project.\n1. Using Raven JS directly from the CDN in the base template.\n2. Calling the Raven.captureException(error); on a function().then().catch() block.\nSelenium tests only fail when using Firefox. Here is the exception: Unexpected Exception: Error: Permission denied to access property \"__raven__\".\nDoes this help? \n. Thanks @benvinegar ! \n. ",
    "bluecollarcoder": "Error seems to happen during install(). If I remove that call, tests work; if I add it back in, tests fail. I ran across this problem on an internal project. I will try to put together an example.\n@srshah19 If you have something that you could share, I would appreciate it.\n. After some more digging, it seems that the problem is caused by line 249:\n// We don't wanna wrap it twice!\nif (func.__raven__) {\n    return func;\n}\nA console log right before this line shows that func is a native function (in this case it is the window.addEventListener function). So it would seem that a combination of WebDriver and FF throws exceptions when trying to modify a native function. Adding a try..catch before this line to handle the error case fixes the problem:\ntry {\n  func.__raven__;\n} catch (e) {\n  return func;\n}\n@benvinegar However, I am not certain that this is the right long-term fix. Please advise.\n. Also for completeness, I should mention that the caller function that is triggering this exception is line 683:\nreturn orig.call(this, evt, self.wrap(fn), capture, secure);\nin the function _wrapBuiltIns. Removing self.wrap() or moving it into the try block also fixes the problem.\n. @benvinegar I don't quite understand the reasoning and logic behind wrapping addEventListener and removeEventListener. It's going to take me some time to grok it and put in a fix. I can certainly do it, but might take a little while.\n. In that case, I will work on it later this week.\nJust so I understand the fix, what is the correct behavior if func is a native function (thus throwing the exception)? Should it be returned as is (like in my workaround), or should it be wrapped anyway (like in the original logic)?\nIf the correct behavior is to wrap it, then we would still need to mark a function as wrapped without causing the permission exception. Maybe instead of attaching a flag to the function itself, we would need to use a collection that holds the wrapped functions.\nLet me know your thoughts.\n. @benvinegar Ha. Just saw that you posted a blog post about function wrapping. Very timely, thanks.\n. ",
    "dimithecoder": "What's the status with this issue? Will it be fixed in an upcoming release?\n. ",
    "browniefed": "Running an older version of Selenium and running into Permission denied to access property '__raven_wrapper__' \nIt appears to be this error that is cropping up. I'm running latest 2.1.1, importing via commonjs (webpack) and calling install.\nEDIT: This was meant for people googling. This was caused by an older firefox, and after upgrading firefox and selenium this no longer happens.\n. ",
    "Githraine": "This just popped up for us today.  Is anyone else seeing this issue?. @vladikoff \nIt literally just started failing today.  If Raven updated then it did so silently.\nEDIT:\nit does look like FF updated today.\nWe never made changes to Raven before and had no issues...\nusing cucumber (2.4.0)\nFF 53\nThanks. ",
    "rsleggett": "I also have this issue with webdriver-manager and firefox 53.0.3. ",
    "justin-steele-idexx": "I only feel strongly that you should;\n- Research how many customers are actually uploading source files\n- Notify customers of your intent to remove automatic fetching ~3+ months ahead of when you remove it\n- Improve your documentation:\n  1. Clarify that source maps are not just for \"source maps\" but for source files as well. I went to the following links before realizing it: https://docs.getsentry.com/hosted/clients/javascript/ , https://docs.getsentry.com/hosted/clients/javascript/config/ , https://docs.getsentry.com/hosted/clients/javascript/usage/ , and finally https://docs.getsentry.com/hosted/clients/javascript/sourcemaps/ which is the only page to call out \"You will want to upload all dist files (i.e. the minified/shipped JS), the referenced sourcemaps, and the files that those sourcemaps point to.\" \n  2. Show more examples of how you would upload source files and how to manage the release lifecycle.\nBasically the feature is pretty great for starter organizations (no friction to install sentry and automatically have context to your stack traces), but if it's enough of a pain that it's worth removing, I'd suggest doing it with care.\n. Ah, if the server can do it (in all but firewalled instances, which your documentation does cover), I see no real concern with removing what is essentially duplicated functionality. :+1: We're obviously one of many, though. I had no idea that the service would take care of fetching it if the JS failed to pull it.\n. ",
    "simon-weber": "I'm mostly just looking to bring it up in case a) it's something sentry folks have thought about before, or b) it's helpful for future users to find the discussion.\nIt's not a huge pain point for me right now, so I'm definitely not trying to pressure other people into working on it :grin: \n. @benvinegar Any updates on this? This would be a huge help for me :grin: \n. ",
    "javve": "Very weird! I can see it now as well! Thanks for the quick support and sorry pinging you with self-solving issues :)\n. ",
    "seagullua": "I think that the best case would be not to parse secret from the DSN but provide it as an optional parameter in the options array. In such case, the check for secret will remain, but for such case as described it will be possible to use the secret.\n. Update. This error Access is denied is thrown ALWAYS when the application with raven-js is loaded in IE9 inside iFrame. In such conditions the raven-js stops application from working\n. It was the issue with CORS in IE9, the raven-js was in the middle\n. ",
    "sagiavinash": "fullstory_url\nOn Mar 22, 2016 2:57 AM, \"Ben Vinegar\" notifications@github.com wrote:\n\nWhat is the tag name you are using?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/509#issuecomment-199493362\n. \n",
    "ianbrode": "Thank you for detailed response, Ben. I should treat such articles more sceptical and attentive and double check my assumptions before committing them. \n. ",
    "mpretty-cyro": "@benvinegar hey, sorry for the massive delay in my response. I was using 2.1.1, have updated to the latest code (2.3.0) and it looks like the problem I was having is fixed (I don't need to trim the stack trace anymore).\n. ",
    "romainneutron": "Wow, this is definitely a better API. When these changes are supposed to land in a production-ready version?\n. Sorry for the late reply. This sounds good. I wanted to use message event to customize message based on some pattern before sending them to Sentry.\nYour proposal looks good, can't wait to test this\n. @benvinegar I just updated the PR and fixed the tests. I added the fetch polyfill to the test iframe but forgot the es6-promise polyfill to get it work correctly :/ So tests are now passing\nAbout renaming fetch+xhr to http setting, are you sure this is a good idea? Sounds like a BC break for users. Anyway, if you're sure, I can make the change in this PR. Let me know\n. PR updated, should be alright now :)\n. Anything left here?\n. Nice, when will it be available in a tagged version? . ",
    "davidpadbury": "I just noticed that my indentation wasn't matching your conventions. sorry!\n. Hey @benvinegar! Yeah... I think when I first approached this I thought there was more going on in install, but I guess not now I've read it. So I just use Raven without the .install for manual capturing?\n. I think that would have helped me a bunch.\n. Thanks David.\nI took a stab at adding a config flag for the native wrapping. I'll have a quick bash at something to prevent the window.onerror behavior too.\n. @dcramer I've just been looking at how we can use the same configuration to prevent attaching to window.onerror and reading through the usage of TraceKit.\nPerhaps I'm missing something, but to disable it attaching the onerror handler it looks like we can just avoid calling TraceKit.report.subscribe in our setup. Something like:\nif (this._globalOptions.collectWindowErrors) {\n    TraceKit.report.subscribe(function () {\n        self._handleOnErrorStackInfo.apply(self, arguments);\n    });\n}\nI think our usage of TraceKit.computeStackTrace and the call to TraceKit.report.unsubscribe should still work just fine.\nWhat do you think?\n. @dcramer @benvinegar currently with collectWindowErrors set to false, TraceKit will not notify it's subscribers that an unhandled error was received, so in turn these errors are not pushed to Sentry.\nMy problem is that it still adds a window.onerror handler in it's subscribe method, which we always call on a Raven.install. It just with this config doesn't call us back when an unhandled error is captured.\nTo give some context to my issue, we use raven-js in a library that we publish for others to use on their sites. We'd rather not manipulate any globals at all, particularly things like window.onerror which isn't your typical EventTarget and can only be assigned.\nThanks @dcramer for the quick response. Have no problem waiting a few days.\n. Hey @SirRawlins, I've just gone with not doing a Raven.install which avoids the TraceKit bits and calling captureError with every error we catch.\n. ",
    "SirRawlins": "I'm looking to do exactly the same as @davidpadbury - we're looking to bundle raven.js into our own lib which is then in-turn distributed and installed by customers.\nI want a way to track exceptions within our plugin but without touching the customers own codebase.\n@davidpadbury aside from window.onError how are you avoiding double-import of raven.js for those who already have it on their own site? name-spacing your version? (happy to chat off-list)\n. Thanks @davidpadbury I ended up using the whitelistUrls option before install() so that it only tracks errors inside my distributed libs filename, seems to work nicely.\nTo tackle raven.js being included twice should the customer already be using it in their app I check to see if Raven is defined before pulling the script in, I then instantiate a locale instance using the noConflict().\n``` javascript\n    /\n\n     * Raven.js error logging allows us to better track what errors\n     * happen to ocurr once the file is included in the wild.\n     \n/\nvar configureRaven = function() {\n    // Create a noConflict in case already instantiated.\n    var SorryRaven = Raven.noConflict();\n\n    // Configure this instance to hit our Sentry accuont.\n    SorryRaven.config('https://fe8e83188d1d452d9f56e445a82102b6@app.getsentry.com/74508', {\n        whitelistUrls: [ /status\\-bar\\.min\\.js/ ] // Only track errors in the status bar itself.\n    }).install();\n};\n\nif (typeof(Raven) === \"undefined\") {\n    // Raven does not exist, we should load it ourselves\n    // before we configure it to catch errors.\n    $.getScript( \"https://cdn.ravenjs.com/2.3.0/raven.min.js\", function( data, textStatus, jqxhr ) {\n        // Raven has now been loaded and we can configure\n        // it to be used to catch errors.\n        configureRaven();\n    });\n} else {\n    // Raven is already loaded into the window, use it\n    // to configure and catch errors for the plugin.\n    configureRaven();\n}\n\n```\nLeaving that snippet here in the hope someone may find it useful or which to improve upon it.\n. ",
    "jbellenger": "What impact do you think this will have on the callbacks passed in Raven.config ?\n. ",
    "georgms": "Will this also include a way to set and handle timeouts (as in #540)?\n. :+1: \n. ",
    "9mm": "Interestingly I just ran across this same issue.\n. CC @grabbou\n. ",
    "kushal": "There's a broader issue here, I think, at least in 0.22. I now have to explicitly supply a Content-type header to fetch(), at least in dev mode, when I did not have to previously and don't have to iOS.\n. ",
    "cpawali": "+1\n. ",
    "mailmrmanoj": "Fixed ..\nhttp://stackoverflow.com/questions/35980078/module-ngraven-not-available\n. ",
    "ekaram": "Per the current documentation, the sentry angular plugin should now work\nhttps://docs.getsentry.com/hosted/clients/javascript/integrations/angular/\n. ",
    "jacobparra": "Might be the directory 'dist' missing in 'app/bower_components/raven-js/plugins/angular.js'?\nAccording to docs [https://docs.getsentry.com/hosted/clients/javascript/integrations/angular/#bower] it should be:\n<script src=\"/bower_components/raven-js/dist/plugins/angular.js\"></script>\n. ",
    "merrickfox": "Following the documentation angular can't find the module for me. The stack overflow solution works for me though.\n. ",
    "RobertBaron": "@benvinegar https://plnkr.co/edit/S1Dk9t?p=preview this is a simple sample of the error, \nBased on https://github.com/getsentry/raven-js/blob/master/docs/integrations/angular.rst\nIt says:\nNote that this CDN build auto-initializes the Angular plugin. \nBut importing only that as the docs says throws an error, please check the log in the plnkr\n[$injector:nomod] Module 'ngRaven' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\nMaybe this is just a misinterpretation of the docs?\n. +1\n. Hi @benvinegar thanks for your reply! I am gonna try that and push to prod to see if that was the issue, it could be, thanks for your time, I will be updating this issue with the results for further reference. Thanks again.\n. ",
    "mebibou": "Any news on this? I think the angular plugin only works for CommonJs, since  this is actually never called when just including the file. Please fix so we can use the plugin\n. Here is the simplest example following your integration page that does not work: https://plnkr.co/edit/M5nt6Y?p=preview\n. Oh ok this actually goes against the Angular way where we usually do this kind of configuration in a module that would require ngRaven, but doing this way makes it impossible. \nI think you should specify this in the documentation as it is not specified at all.\n. ",
    "ashgibson": "Don't forget to add the bit in bold below\nRaven\n    .config('https://@sentry.io/')\n    .addPlugin(Raven.Plugins.Angular)\n    .install();. ",
    "elincognito": "@theatrain besides that you need to  add an override on your package.json if using gulp inject or anything similiar that includes packages dependencies onto your html automatically.\nThe following bellow was my fix since i use gulp-inject\n\"overrides\": {\n        \"raven-js\" : {\n            \"main\": [\n                \"dist/raven.js\",\n                \"dist/plugins/angular.js\"\n            ]\n        }\n    },. ",
    "dansabin": "I found a good workaround for grunt as well since everything was uglified and minified:\nMy app.js looked like:\n```javascript\n'use strict';\nangular\n  .module('sraApp', [\n    'ngRaven'\n  ]);\n```\nI made another file called raven.js\njavascript\n// redacted sensitive info\nRaven\n  .config('https://<code>@sentry.io/<myapp>')\n  .addPlugin(Raven.Plugins.Angular)\n  .install();\nAnd in the index.html instead of inline scripts:\n```html\n build:js(.) scripts/vendor.js \n bower:js \n\n\n endbower \n Outside of auto-managed bower, but still inside compile -> vender.js \n\n endbuild \n build:js({.tmp,app}) scripts/scripts.js \n\n\n endbuild \n```\nNow when I grunt build:dist which uglifies/minifies grunt will optimize my script so the plugin can be registered. Doing inline scripts won't cause the optimization so window.angular won't be right for the plugin to autoload itself. \nOverall the flow is as follows (documentation is correct)\n\nbring in angular\nbring in raven\nbring in raven/plugins/angular.js\nconfig/addPlugin/install ngRaven but done properly to take into account uglification/minification\n\nAlso another thing to note that most configs can happen later (though you miss tags on any issues during bootstrap)\nFor example a heroku config loaded after the fact.\n```javascript\n'use strict';\nangular.module('sraApp')\n  .run(function (Raven, HEROKU_APP_ID, HEROKU_APP_NAME, HEROKU_RELEASE_CREATED_AT, HEROKU_RELEASE_VERSION, HEROKU_SLUG_COMMIT, HEROKU_SLUG_DESCRIPTION, NODE_ENV) {\n    Raven.setRelease(HEROKU_RELEASE_VERSION);\n    Raven.setEnvironment(NODE_ENV);\n    Raven.setTagsContext({\n      release_date: HEROKU_RELEASE_CREATED_AT,\n      git_commit: HEROKU_SLUG_COMMIT,\n      slug_description: HEROKU_SLUG_DESCRIPTION,\n      application: {\n        name: HEROKU_APP_NAME,\n        id: HEROKU_APP_ID,\n      }\n    });\n  });\n```. ",
    "xeroxoid": "Any update on this? Also got problems here with our karma test suite.. ",
    "ashconnell": "@xeroxoid We also had problems with this during karma tests and were able to get around it.\nIn our case we were skipping the Raven.config().addPlugin().install() routine in the test environment because we didn't want them to be sent to sentry.\nThe problem with that is raven-js doesn't do things \"the angular way\" with modules - and instead only registers the ngRaven module if you called Raven.config() with a DSN. \nThe addPlugin() method only registers the angular module if the config was setup correctly (eg with a defined DSN url).\nTo fix this, we made it so that Raven.config().addPlugin().install() is always run even on our test suite, we use our normal DSN url and then use the config.shouldSendCallback method to block sending to sentry in the test environment.\nThis allows raven-js to properly register the angular module. \nHope that helps!. ",
    "bradseefeld": "We're doing the same, but we pass a fake DSN in instead (this is for our dev env). Something like https://foobar@app.getsentry.com/1 works fine (raven appears to do some amount of enforcement on the properties of the URL, so the username must be present along with the path).. ",
    "genintho": "So agreeing !!1\n10 hours after having deployed \n\n. I \"fixed\" this issue by editing https://github.com/getsentry/raven-js/blob/master/dist/raven.js#L1237 and always passing a message \nJavascript\nvar data = objectMerge({\n            message: message,\n            // sentry.interfaces.Exception\n            exception: {\n                values: [{\n                    type: type,\n                    value: message,\n                    stacktrace: stacktrace\n                }]\n            },\n            culprit: fileurl\n        }, options);\n. ",
    "abc123s": "\n\nCall the native handler after sending the exception, or timing out\n\n\nIn case it's helpful to others, here's an attempt at approach 2 described above. Despite the risk of waiting <1 sec before crashing, it made more sense for my use case; a user may not immediately re-open the app (or may just decide to uninstall!) in the event of a crash.\nhttps://gist.github.com/abc123s/2d4bef879f79ff77b54703085bb077b0\n. @nevir \nI have a question on the changes in the this commit.\n1. In lines 87-104 of plugins/react-native.js, isn't it possible for originalCallback to be undefined, causing the plugin to crash for non-fatal errors?\n. ",
    "igrayson": "Rebased this\n. Updated this again\n. ",
    "leordex": "No, it doesn't work like that too. fn contains an empty function.\n. This error occurs when Selenium clicks on the link looks like <a href=\"javascript:\" onClick={js function}>text</a>. I removed element a and insert button in his place and error disappeared.\n. ",
    "howard": "We've started using Raven.js with this change in production. So far, we haven't found any problems with thousands of users having come in contact with it.\n. ",
    "jamiecounsell": "Is it possible to look into merging this? Upgrading to 3.0 may take some time, especially for some of the projects I and others are relying on Raven for. My current approach will be to use a static copy of raven.js with the change included here, but I would like to be able to rely on the package. Thanks for the consideration! Happy to discuss or contribute if it helps.\n. @benvinegar thanks for the prompt response. I will look into this!\n. ",
    "robinschuere": "I created a workaround by adding a new jsFile (named ngRaven) with the following code\n```\nimport angular from 'angular';\nexport default angular\n    .module('ngRaven', [])\n    .name;\n```\nthis module is added in the index.js file before the import of the angularplugin file from raven-js.\nimport { ngRaven } from './ngRaven';\nimport { angularPlugin } from './node_modules/raven-js/plugins/angular'\nit's dirty but it works\n. ",
    "vincentwoo": "Seconding this. Also, right now Sentry doesn't capture the filename of the source file originating the log message, which makes it impossible to see which asset version produced the event.\n. (https://sentry.io/coderpad/browser/issues/697415238 if any Sentry employees want to look directly). I appreciate the snippet, but am concerned that I could not find this in the docs: https://docs.sentry.io/search/?platform=browser&q=beforesend. Sure, here you go https://sentry.io/coderpad/execution/issues/719350317. ping!. ",
    "chicoxyzzy": "I've finally broke my PR :(\nI'll try to fix it\n. Is it ok if I'll just create another one and close this one?\n. recreated as #551\n. ",
    "ckj": "Woop\n. ",
    "reintroducing": "Thanks for the update @benvinegar.  Let me know if there is anything I can do to help try and track this down.\n. It is worth noting however that since I posted this I've not seen any more of these issues but that could be because they've already been reported and now are not showing up as new rather attaching themselves to prior events that have already triggered.\n. Disregard this, it was coming from a 3rd party widget we have on our site.  Apologies for the noise.\n. I'm not sure what other information you'd need but here is the screenshot or what I was seeing in IE: https://www.dropbox.com/s/y6b5osba3qy26a6/Screenshot%202016-06-16%2010.57.25.png?dl=0\nWhat other type of information can I provide to help with this?\n. Yep, its still live.  You can re-create it by loading https://www.spothero.com/search in IE11 or Edge. Its intermittent so you may have to refresh a couple of times.  It will either happen on page load (like that screenshot shows) or if you click the \"Need Help?\" widget on the right or not at all :)  It's a fun one!\n. So I was just thinking about something like this:\n```\nsetExtraContext({\n  foo: ...alot of object data here,\n  bar: ...more different object data her\n});\n// later...\nremoveExtraContext('bar');\n// what remains in context is just 'foo' data\n```\nAlternately you can also take in an array to removeExtraContext and iterate over keys and remove them if one is provided.\nThe hope is not to remove everything in context, just the extra data that was added when, in my case, a modal was opened, but when it was closed i just want to remove the modal data and not remove all the other stuff i added to the context when the page originally loaded.\n. @Nevon Thanks, thats actually what I was hoping to do but never found Raven.getContext().extra in the docs.  Could you point me to where you pulled that from?  I could certainly do the managing and updating of the extra object myself but had no idea how to retrieve it.\n. @benvinegar Could you please comment on the above just so we know if this is usable or not even though its not documented?  Appreciate it.\n. Thanks @benvinegar.  Is it possible to get this added to the public facing docs so everyone is aware of it? Might be useful to show a usage example as well as outlined here.\n. Apologies for the late reply, I went on vacation and just getting back to this.\nWe are uploading the artifacts to Sentry and tagging the releases based on our release versions. The source map URL also stays in our production JS though and the maps get uploaded to the production server as well.\nIs it possible that is confusing Sentry?\n. The source files are minified with the sourceMappingURL in them, not original source (that would be a ton of modules to upload). Does that matter?  If not, I can add the minified JS to the upload as well in hopes of that helping.\nRight now we're only uploading the .map files to Sentry.\n. OK, lol, so let me just make sure i'm getting this right:\n1. Upload app.min.js and app.min.js.map to sentry\n2. Upload app.min.js and app.min.js.map to our production server\nIs that correct?\n. OK, will give that a shot, thanks @benvinegar.\n. Thank you, I meant to close it yesterday but forgot, my apologies.\n. Thanks @kamilogorek, but ignoreErrors (out of the 3 i mentioned at least) is the only one that seems to be there. Are the others not supported anymore?. @kamilogorek Thanks for the quick responses. Roger that on ignoreUrls, my apologies for not looking at the names better, I thought they'd map 1:1.\nAs for includePaths, this was our config:\nincludePaths: [\n    /https?:\\/\\/d2yt77z1f5bzb8\\.cloudfront\\.net/i\n]\nHow would that translate to the eventProcessors?. Hey @kamilogorek, where can i find docs on RewriteFrames? Or, in particular (addition to?), how would i use RewriteFrames to achieve what I was doing with includePaths before? Dziekuje :). ",
    "macqueen": "\ud83d\udc4d \n. \ud83d\udc4d \n. Reviewed 2 of 3 files at r6, 3 of 3 files at r7.\nReview status: all files reviewed at latest revision, 2 unresolved discussions, some commit checks failed.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r8.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, 2 unresolved discussions.\n\ntest/plugins/angular.test.js, line 39 [r1] (raw file):\n\n``` JavaScript\n        });\n    it('should extract type and the angularDocs URL minified exceptions', function () {\n\n```\n\nnot that it matters, but you're missing \"from\" here\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 25 of 25 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 24 of 24 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 4 of 4 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 2 of 3 files at r1.\nReview status: 2 of 3 files reviewed at latest revision, 1 unresolved discussion.\n\ndocs/integrations/vue.rst, line 29 [r2] (raw file):\n\nPreviously, benvinegar (Ben Vinegar) wrote\u2026\n\nOops\n\nhaha\n\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 27 of 27 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 3 of 3 files at r1.\nReview status: all files reviewed at latest revision, 1 unresolved discussion.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 2 of 2 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 1 of 1 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. Reviewed 7 of 7 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n.  \u00af_(\u30c4)_/\u00af\n. ",
    "bradleypriest": "That was quick. Awesome. \n. Running into this myself, we'd love to be able to add the ember component name, or input HTML name to the breadcrumb.\nWhat about leaving the default and exposing a config somewhere?\nThese would all give us the power.\n- Passing the event to the captureBreadcrumb funcation as an extra param.\n- exposing this._lastCapturedEvent globally\n- exposing htmlTreeAsString as an overwritable method/config\n. ",
    "takahashi64": "Hi there. For complex UI, the click breadcrumbs don't have enough detail - can you not include the XPATH of the element that is clicked? Otherwise its sometimes not possible to work out which element was clicked.. Originally brought up this issue in https://github.com/getsentry/raven-js/issues/576. @benvinegar that makes a lot of sense yeah. Is there someway to make Raven extensible/pluggable so I could add custom logging to the sentry reports? For complex UI, it would really help if we knew what the user was doing. Thanks.. ",
    "adamreisnz": "I'd like to chime in here as well. Instead of adding Angular or Ember or whatever framework specific data, I would prefer a custom tag, e.g. data-sentry-id=\"Some text here\" which would give us the most control over how to identify certain elements. The classnames currently don't give us any useful information, and we don't use ID's for elements. Adding ng- stuff won't help either because there's so much of it in the codebase.. +1 for showing ID's, or a custom tag like data-sentry-id=\"Some text here\". I have investigated more, and it was an error in Angular that was causing the error. However, while the error was processed in Raven (as could be deduced from the stack trace), it never showed up in our Sentry dashboard. That's a pretty annoying situation, as I would have expected Sentry to report these kind of errors.\n. @benvinegar this site should be experiencing the exact same problem. It's also hooked up to Sentry, and I haven't fixed the IE issue in it yet;\nhttps://jolinejolink-cms-staging.firebaseapp.com/\nIf you open it in IE10 or 11 it should break complaining about object.remove not being a function, but you'll notice that it doesn't log any issue in Sentry.\n. Sorry, forgot to close this issue. We have since tracked it down to another source, so it wasn't related to Sentry!\n. @benvinegar Ok, I will assume it's from a browser extension then, thanks.\nIs there a way to somehow avoid browser extensions from triggering sentry errors?\n. I am suspecting there are 2 possible scenario's based on all the information we have:\n1) Safari (or a 3rd party extension/app on iPad) runs some mysterious internal browser code on the site which triggers the error, and when it fails it's picked up by Sentry. Because the code is in the browser and not in any of the actual vendor/app scripts, Sentry can't pinpoint the source of the error and as such the error report is pretty useless. \n2) Less likely, Safari renames variables in the scripts when running them and that's why we see elt.parentNode instead of something else. However, I think this is very unlikely, as it doesn't make sense and doesn't explain the fact that Sentry can't pinpoint the error source.\nSince manipulation of the DOM parent node is such a common thing, it would be easy to find some reference in your own (or vendor) code that has el.parentNode or element.parentNode.\nBut I think the giveaway that something else is going on is the unusual elt prefix. I haven't been able to find that in my own code, nor in vendor code (Angular), so that's why I think it must be something weird external.\nAnd in addition, the fact that quite a few people have found this issue since I created it, even people that don't use Sentry, leads me to believe it's quite a widespread problem, which makes it even more likely that it's something Safari or plugin specific.\n. Just had another occurrence of this error:\nbrowser: Mobile Safari 10.0.2 (Safari/600.1.4)\ndevice: iPhone\nos: iOS 10.0.2\nTypeError: null is not an object (evaluating 'elt.parentNode')\n  at None (/:1:350)\n  at global code (/:1:1237)\nI guess we can be pretty sure now that it's an issue isolated to specific versions of Safari somehow.\n. @benvinegar I think that'd be great, it seems this error is captured by a lot of apps out there and is basically just noise that we can't really do anything about anyway in our apps. I was going to create an ignore rule for it in all my apps, but if it can be done on a Sentry level that'd be excellent.. I agree, judging by the responses in this thread, this error seems to be unique enough to make it safe to filter on the \"(evaluating elt.parentNode)\" string.\nThe only risk is that it would block legitimate errors if someone uses the elt short name in their code and somehow manages to trigger a similar error, but I think those cases would be rare.. ",
    "alexlouden": "Just wanted to add - I'm using react & styled-components so my class names are automatically generated, would be great to have some more context (without having to manually captureBreadcrumb):\n. ",
    "TuxujPes": "@kamilogorek any updates on this?\nIs there a possibility to fine-tune click \"message\"?\nMaybe, more data can be passed into breadcrumbCallback for people to pick what they need without sending it to sentry by default? Maybe even a whole dom element?\n. @kamilogorek that sounds great. Any estimations on major release date?. ",
    "hiagodotme": "\n+1 for showing ID's, or a custom tag like data-sentry-id=\"Some text here\"\n\nThey could analyze if there is this information and take it along. If it exists, leave the selectors with a button for more information.\n. ",
    "1999": "FYI: just don't forget that using new SDK brings you +50Kb for the bundle size #1552 . @kamilogorek I'm a bit afraid of PRs with more than 200 changes files, this seems more like a completely new SDK rather than a new version. Also, what's the ETA release date of it?. ",
    "jskrzypek": ":+1:\n@Splaktar there is a typing here if you're using typescript: DefinitelyTyped/DefinitelyTyped:ravenjs/ravenjs.d.ts\nFor angular2 support this should probably be added to the repo\nBeyond that I think all that's really needed is perhaps a plugin like the angular plugin. I think there's probably no need for a separate sdk, unless you're suggesting a rewrite in typescript or ES2015 or something.\n. Woohoo! :beers: \nThanks, @benvinegar!\n. ",
    "ryanrussell": "+1 for an easy-to-implement angular2 example in the \"Configure your application\" web gui when you create a new project.\n. ",
    "grapemix": "+1\nIf possible, please adding example of webpack.config.js too.\n. ",
    "stephen": "I am +1 on a callback for mutating/suppressing outbound xhr breadcrumbs. For our usecase, I'd like to (when available) attach a request id header that's sent back from our api. Currently, we emit a separate breadcrumb with that information, but it'd be nice to have a supported way to do that.\n. ",
    "grapho": "@benvinegar  I promise I am not irritated... if there is a way i can use the breadcrumbs or an equivilant api in a development setting..  place of console.log, i would love to know how?\n. i could get used to placing breakpoints and debugger statments instead.. if that is the perfered work around?\n. ~~One more thing that I did not mention, there some JS frameworks like Ember.js, tend to strip out console() methods from production builds.  I am not sure if that would be a problem for sentry per se, but it does kinda lessen the benefits of the feature (at least for production code).  Just food for consideration.~~\nabove comment appears to be incorrect, sorry.\n@benvinegar  I appreciate you are willing to keep the ticket open, it might be worth investigating some more:)\n. @benvinegar  this issue is not a serious blocker at all.\nHere is my current solution.  I realized I can just not initialize the raven.js client when in development mode... raven/sentry reporting, is only really useful to most people (i imagine) in production apps anyway.\nThat being said. there might still be some use in introducing maybe a developmentMode config flag, which would allow messages and errors to pass through to the dev console (aka disabling some of the \"global\" handling).. while keeping the raven.js client quiet in the background, so we could still manually send error reports, by explicitly triggering the raven apis, if we wish.\nLet me know how you feel about that.  Otherwise I would not worry too much about it, as this issue was mostly caused by my inexperience with raven and how/when to be using it.\n. ",
    "shaharmor": "I think this is a major issue, especially that its not documented anywhere and can't be disabled.\nThere might be tons of console.log that we don't want sent to Sentry.\nIts up to the developer to choose what to send and when\n. Wrong repo i guess \ud83d\ude04 \n. ",
    "lincolndbryant": "Please make the breadcrumbs feature optional, wrapping console methods is risky and prone to conflicts with many other libs and 3rd party scripts that also try to.\n. Sounds super risky.  We've found other 3rd party scripts wrapping console.log and trying to stringify DOM elements or other large/cyclical structures; leading to performance degradation or errors.  You are free to record more complex info in your own app then append it to the reported messages via the dataCallback feature.\n. ",
    "sarathdr": "autoBreadcrumbs is not there in typescript declaration file. Is it intentional?\nhttps://github.com/getsentry/raven-js/blob/master/typescript/raven.d.ts. ",
    "halilb": "I was trying to integrate Sentry to my app that's using react-native 0.26. Removing 'use strict'; from raven.js helped me going on.\nThis is not a real solution but i wanted to point that out if anyone else needs a temp one.\n. ",
    "mkonicek": "@benvinegar Sorry about the breakage. I'm releasing React Native 0.26.2 to npm now with this fix:\nhttps://github.com/facebook/react-native/pull/7704\nWould what do you think about contributing unit tests to React Native that would catch breakages like this? We also release an rc roughly 2 weeks before each release, testing the rc and reporting bugs to us would be very valuable.\n. ",
    "mcrowe": "@halilb Thanks for that hack, it worked for me. Hopefully RN 0.27 will merge this fix in.\nTo summarize for anyone else with this problem. You can fix it temporarily by opening node_modules/raven-js/src/raven.js and commenting out the line that looks like this 'use strict';. However, this should be fixed in the next version of React Native, at which point you should probably undo that change.\n. @vjeux It does, indeed, work on 0.26.2. To be honest, I'm too nervous to release an update of my app on a point release of RN. Are they considered solid releases?\n. @vjeux That's awesome, actually. Now that I understand that convention, I feel a lot better about upgrading. Thanks!\nThanks for all the hard work on RN, by the way. Sure some updates have been tough. But I still feel that making quick progress is more important.\n. @Kerumen . Sorry. My description was a suggestion for how to fix the library, rather than a workaround for users, which is why it was confusing. \nTo understand how to change the behaviour yourself, I'd recommend reading through this library's React Native plugin: https://github.com/getsentry/raven-js/blob/master/plugins/react-native.js#L59 . You'll see where it calls ErrorUtils.setGlobalHandler and passes the error along to Raven.captureException. You can override this in your own code, and avoid calling defaultHandler.apply. Then the error will be reported, but the app won't crash.\nTo restart the app when there is an error, I used CodePush which already has a utility CodePush.reloadApp. If you aren't using CodePush you'll likely be able to reimplement that functionality, or find a library to do it for you.\n. ",
    "vjeux": "@mcrowe: we published 0.26.2 which fixes the problem. It's live. If you can try it out that would be great\n. Point releases are our hotfixes. We only cherry-pick things that are terribly broken. You can see the list here:\nhttps://github.com/facebook/react-native/commits/0.26-stable\n0.26.1 contains three small commits and 0.26.2 contains one commit: the one to fix this bug.\nI understand your fear though, we've done a pretty bad job at upgrading releases where we break a ton of stuff all the time.\n. ",
    "d6u": "Sorry. I currently don't have the capacity.\nOn Sep 28, 2017, 5:35 AM -0700, Kamil Og\u00f3rek notifications@github.com, wrote:\n\nping @d6u. still interested in sending a PR?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "respectTheCode": "react-native bundle \\\n--platform ios \\\n--entry-file index.ios.js \\\n--bundle-output release/main.jsbundle \\\n--assets-dest release \\\n--dev false \\\n--sourcemap-output release/sourcemap.js\nand then I hacked the xcode project to include the jsbundle from that command instead of building a new jsbundle.\n. The app I am testing with is running rn 0.24.0 but I will give it a shot. We can't release an update in dev mode though.\n. Same thing in dev mode.\n. Im not familiar with the source map format but it doesn't look like it.\n. I have resorted to storing all of my source maps on s3 and then wrote a script to lookup the code reference from the uglified trace on Sentry. Its an ugly hack but its better than nothing.\n. We are using hosted Sentry so I sent support an email. I will update this issue if they can find a solution.\n. ",
    "ferndopolis": "I am having similar issues with React Native sourcemapping.\nOn development bundle no problem source maps read prefect on Sentry, and does not contain the sections block.   \nWith production bundle --dev false, sourcemap contains version: 3 and all the mapping stored in a sections block.  On Sentry the error reports as Sourcemap was invalid or not parseable: /sourcemap.js and when I validate on sourcemaps.io I get Internal Server Error \nLet me know if there is anything that I can to do to help resolve this issue. Thanks \n. @benvinegar, yes that is the issue we are facing and as @kerumen mentions we can't settle for using --dev true in production.  I am at the moment using a similar hack like the one mentioned by @respectTheCode.\n. ",
    "gabn88": "Can confirm it also happens on Chrome Mobile 45.0 and 46.0.\n. I think, but are not sure, that error within my javascript is not created by an event such as a click, but just by code that is executed on page load. The tricky part is that I cannot reproduce any error in chrome on linux. I have seen the Sentry event now for 60 times already, so it is reproducable on the mobile (Android) device(s). Will continue investigate this...\n. It has evt.target in the dist of this repo? Ah, in the src it is this part:\n```\n       self._lastCapturedEvent = evt;\n        var elem = evt.target;\n    var target;\n\n```\nAround line 635\n. Any news on this? I had already 174k of these errors in 5 months time..\n. It is not a basic click/keypress handler. There are some timers running on the webapp that trigger events when the time is reached. So practically speaking, there is no target when the event triggers. \nBut I think there are many cases where an event is not triggered by a click/keypress/touchstart, etc...\nSometimes even a reload of the page can trigger an event, so that it just executes on page load.\n. ",
    "sirugh": "Thanks @benvinegar I was just writing up something. Do you mind if I open a PR?\n. @benvinegar squashed!\nAlso have you experimented with github's squash and merge functionality? It's pretty neat.\n. I also considered the case where we somehow got here but aren't in IE. Perhaps we should first check for attachEvent? And I'm not sure what we should do if we don't have either...\n. I was unsure if there was a better way to do this. this.sinon.stub(document, 'addEventListener', false) didn't seem to do what I wanted.\n. else {\n  \ud83d\ude35\ud83d\ude2d\n}\n. ",
    "anagami": "Hi!\nwhat about dist/** files?\ndist/raven.js look like missing this fix\n. Hi!\ni also have many same error from Firefox 3.6\nhttps://github.com/getsentry/raven-js/blob/master/src/raven.js#L817 \ntarget.addEventListener(type, listener[, useCapture]);\n\nNote: useCapture became optional only in more recent versions of the major browsers; for example, it was not optional before Firefox 6. You should provide this parameter for broadest compatibility.\n. \n",
    "Kerumen": "It's been 3 hours that I'm looking for a solution and I didn't find that... Thanks, it's working now!\nSorry for the trouble.\n. Ping @nevir, it would be awesome if you could update the PR. Thanks!\n. Ping @benvinegar \n. I have the same problem, in production no errors are logged.\nI don't understand your workaround to get this working.\n. Thanks. I still have some troubles with CodePush and Sentry. \nCan you help me? I reached you on Twitter :) Thanks!\n. ",
    "DinkoMiletic": "I can confirm that fix works.\n. ",
    "jrencz": "\nI think we just move truncation to the end.\n\nIf I'm not mistaken it's already there: https://github.com/getsentry/raven-js/blob/05671a8c9bb50ffad93deca3f677a6fee5d1a767/src/raven.js#L1205\nIs there a reason why it's done twice (in _processException and in _trimPackage) now?\n. I'm using Angular 1.4.3 inside Ionic 1.2\nError message when I'm using ionic.bundle.js (stringified JSON object reduced to one key):\n[ngRepeat:dupes] Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: element in elements | orderBy: 'createdAt' track by element.id, Duplicate key: 25, Duplicate value: {\"id\":\"booking-40\"}\nhttp://errors.angularjs.org/1.4.3/ngRepeat/dupes?p0=element%20in%20elements\u202600%3A00%22%2C%22ends_at%22%3A%222016-06-09T23%3A59%3A59%2B00%3A00%22%7D%7D\nwhen I'm using ionic.bundle.min.js:\nError: [ngRepeat:dupes] http://errors.angularjs.org/1.4.3/ngRepeat/dupes?p0=element%20in%20elements\u202600%3A00%22%2C%22ends_at%22%3A%222016-06-09T23%3A59%3A59%2B00%3A00%22%7D%7D\nI tweaked the expression a bit so it matches both:\njs\n/^\\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\\] ([\\s\\S]*)((?:https?:\\/\\/errors\\.angularjs\\.org[\\s\\S]*))$/\nIt matches both cases correctly (i.e. type, value, doc url or type, empty string and doc url).\nbut it can probably be optimized\nNote that http://errors.angularjs.org/1.4.3/ngRepeat/dupes?p0=element%20in%20elements\u202600%3A00%22%2C%22ends_at%22%3A%222016-06-09T23%3A59%3A59%2B00%3A00%22%7D%7D does not bring any meaningful information when accessed. Am I wrong or does Angular shoot itself in the foot by collapsing the url as well?\n. There's also the $injector:modulerr which has recurring message:\n[$injector:modulerr] Failed to instantiate module A due to:\nError: [$injector:modulerr] Failed to instantiate module B due to:\nError: [$injector:modulerr] Failed to instantiate module C due to:\nError: [$injector:nomod] Module 'C' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\nwhich will still be problematic and IMO it should be handled differently.\n. @benvinegar any progress here?\n. > I decided to skip this for now. Is it common to get runtime module loading errors in production?\nBy all means not. This error is only expected in development.\n. It may also appear in some kind of staging environments if code is loaded lazily some way. angular1 does not allow lazy module loading but people tend to get creative\n. @benvinegar thank you\n. It looks like this line: https://github.com/getsentry/raven-js/blob/228f590a5e83cea15f8eb5f1157c61fcc7ad3ca7/src/raven.js#L337 is to blame.\nFunction known as e in trace is also part of raven.js\nIt's: https://github.com/getsentry/raven-js/blob/228f590a5e83cea15f8eb5f1157c61fcc7ad3ca7/src/raven.js#L963-L979. @didnotwant you can use beforeBreadcrumb or eventProcessor to filter out those you don't want for some reason.\nIn Breadcrumbs integration code you can see that it passes the level value in the SentryBreadcrumbHint object to Breadcrumbs.addBreadcrumb:\nhttps://github.com/getsentry/sentry-javascript/blob/65965ff30b4c978c4f200ef8bb5c88d220059324/packages/browser/src/integrations/breadcrumbs.ts#L118-L160\nYou can use the hind to prevent the breadcrumb from being sent. May be related to #1366 (same kind of extensibility/configurability needed). To a certain extent: yes.\nThey both can be solved within the same effort of allowing users to replace parts of the default breadcrumbs mechanism implementation to fit their needs.. Referring to https://github.com/getsentry/raven-js/issues/1341#issuecomment-393283238\nIf there was raw data then for autoBreacrumbs of type ui it would (probably) be the Event.\nEvent has target so there's access to the Element.\nSo I'd be able to match the element and alter/remove breadcrumb if it's likely to contain data I don't want to expose. I did some more reading and now I see I forgot about the window.onunhandledrejection. Core-js does support it.\n\nboth v2 & v3-beta uses onunhandledrejection if it's present. Only if it's absent then it falls back to console.error\ncore-js 3 will dispatch event (which will be handled by the event listener Raven already attaches) so there's no need to (and in fact it will be harmful because of potential duplication) to attach a handler.\n\nso I ended up with a Raven plugin like this:\n```js\nexport default (Raven, window) => {\n  if (\n    // There's no core-js.\n    //\n    // Check if we're in expected environment at all.\n    typeof window.core === 'undefined' ||\n// Or it's in a version that already emits `unhandledrejection` event.\n//\n// Core-js 2.x doesn't emit events. It will not call console.error if\n// handler is present.\n// Core-js 3.0 will first it emit the custom event (which Raven will handle)\n// and then it will call the handler if it exists. So it better don't.\n// Not attaching the handler will fail where `EventTarget.dispatchEvent`\n// is missing (https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent#Browser_Compatibility):\n// - Chrome <4\n// - Edge <11\n// - Firefox 1\n// - IE <9\n// - Opera <9\n// - Safari <3.2\n// - Android <4\n// `console.error` will still be called in those. Let's not duplicate then.\nNumber(window.core.version.split('.')[0]) >= 3 ||\n\n// Or core-js Promise polyfill is not in use\n//\n// Note: core-js uses the same criterion (a bit more complex) to detect if\n// native or the polyfilled promise should be used.\n// That's why in core-js equipped projects Promise polyfill is used in\n// everything but Chrome 49+\ntypeof window.PromiseRejectionEvent === 'function' ||\n\n// Or Raven private API did change significantly.\n//\n// Let's become a little bit immune to Raven internal changes.\n// If the handler private method name changes let's not try to use it.\n// Plugin is still susceptible to changes in method behavior, but it's\n// not likely it will change in an unwanted manner - it's dead simple.\n// It's beneficial to use the private method because otherwise the plugin\n// will have to be adjusted if Raven internals about how unhandled\n// rejections are reported would be replicated (e.g.: `mechanism` vs\n// pre-3.26 `extra.unhandledPromiseRejection`)\ntypeof Raven._promiseRejectionHandler !== 'function'\n\n) {\n    // Then do nothing.\n    return;\n  }\nconst originalOnUnhandledRejectionIfAny = window.onunhandledrejection;\n// Potential risk:\n  // Raven starts doing it on its own and there will be duplication.\n  window.onunhandledrejection = function (...args) {\n    Raven._promiseRejectionHandler(...args);\nif (originalOnUnhandledRejectionIfAny) {\n  originalOnUnhandledRejectionIfAny.apply(this, args);\n}\n\n};\n};\n```\nIt fits my needs but maybe a piece of logic like this may still be included as a plugin in raven distribution. At least until core-js 3 is released and popular. @kamilogorek was this included in sentry browser or do I need to find a way to add it back on my side If I want it back?. @HazAT It looks like with default configuration \nhttps://github.com/getsentry/sentry-javascript/blob/c56f9a180a5890a02cd26884df8ec35f74895491/packages/browser/src/integrations/globalhandlers.ts#L35-L41\nthe handler is being attached:\nhttps://github.com/getsentry/sentry-javascript/blob/c56f9a180a5890a02cd26884df8ec35f74895491/packages/browser/src/integrations/globalhandlers.ts#L75-L78\nSo there's no need for additional integration. I was about to rise the \"what about the scope listeners\" argument but I found out it's invalid.\nI'll leave it here for the sake of anyone looking for the answer in the future:\nYes, it's true Scope#set* does Scope#notifyScopeListeners \neg.\nhttps://github.com/getsentry/sentry-javascript/blob/28b8164877cf151bba42374d90309441f5d7bb7d/packages/hub/src/scope.ts#L106-L114\nso that one will be called many times in case setter is called in a loop.\nBut Scope#notifyScopeListeners has a mechanism built-in to discard consecutive calls:\nhttps://github.com/getsentry/sentry-javascript/blob/28b8164877cf151bba42374d90309441f5d7bb7d/packages/hub/src/scope.ts#L53-L66\nSo the only downside is syntax regardless of how heavy scope listeners would be.. ? is the only meaningful change here, isn't it? Changes in data callback are only refactoring \n. ",
    "kornelski": "It crossed my mind, but I'm using raven via express/connect middleware, which doesn't have a nice hook for it. I'd have to mangle the actual error instance that goes through the chain of error handlers.\nI have raven's error handler first, and after that my error handler that displays the error (I have them in this order to guarantee errors are reported to Sentry even if I screw up error handling later in the chain), so if I convert the error object before raven, my own handler will have to work with serialized representation too (so instanceof won't work).\nI could fudge it, but I think good serialization of Error objects could be expected from raven. You probably have already some custom serialization code to deal with cycling structures and other things that JSON.stringify won't touch.\n. Oh, I'm using whatever is the raven npm package.\n. ",
    "felixfbecker": "How is it possible to clear user data on a user logout? Raven allowed Raven.setUserData(undefined), but the user parameter on scope.setUser() is required and merged with existing data.. That's literally what it says in the docblock though: https://github.com/getsentry/sentry-javascript/blob/57b3ce9f975b31359163581fe69791e19f7f870a/packages/hub/src/scope.ts#L88. ",
    "nateberkopec": "I think it's a really common use case for sites to have specific browser targets (in essence, not oldIE). Surely there's a way to implement this as an ignoreUserAgent config opt without too much weight?. ",
    "benkermode": "What is the data object that is passed to shouldSendCallback? I want to target specific error messages and suppress them from being sent.. ",
    "gabrielhpugliese": "Just trying to fix a mistake I made. I've uploaded the map with the wrong\nURL.\nBut it is ok. Thanks.\nOn Tue, Jun 21, 2016, 5:26 PM Ben Vinegar notifications@github.com wrote:\n\nYou can get the metadata, but not the content:\nhttps://docs.getsentry.com/hosted/api/releases/get-release-file-details/\nMay I ask why you want the sourcemap? Is it for validation?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/618#issuecomment-227561102,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABMd0sa0ah6f1Ivd71k-9Z8JAm2Bk-K3ks5qOEkOgaJpZM4I6zWD\n.\n. Ah and I deleted the map ofc\n\nOn Tue, Jun 21, 2016, 7:18 PM Gabriel Pugliese gabrielhpugliese@gmail.com\nwrote:\n\nJust trying to fix a mistake I made. I've uploaded the map with the wrong\nURL.\nBut it is ok. Thanks.\nOn Tue, Jun 21, 2016, 5:26 PM Ben Vinegar notifications@github.com\nwrote:\n\nYou can get the metadata, but not the content:\nhttps://docs.getsentry.com/hosted/api/releases/get-release-file-details/\nMay I ask why you want the sourcemap? Is it for validation?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/618#issuecomment-227561102,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABMd0sa0ah6f1Ivd71k-9Z8JAm2Bk-K3ks5qOEkOgaJpZM4I6zWD\n.\n. \n\n",
    "toepoke": "Hi @benvinegar,\nThanks for getting back.\nWebpack is probably short-term.  We've looked at both the Angular2 CLI and rollup as a solution, but they both feel immature at the moment, so we need a plan B.  Webpack is plan B.\nWould appreciate it if you could take a look when you have time.\nMany thanks,\nFranz.\n. Hi @benvinegar,\nApologies for only just responding, I was on hols last week.\nThanks for your efforts, I'll check it out.\nKind regards,\nFranz.\n. ",
    "fungilation": "Disagree. Chrome is doing it in improved console.log since 60/61, it can be \"safe\".. ",
    "peterdivvito": "+1. ",
    "arabold": "Wait, what?! I'm confused as Sentry is logging my console logs automatically. But then it logs everything as useless [object Object] and the official statement is that this is intended because that's not what breadcrumbs were designed for? o_O\nBut for everybody else who ends up in this thread wondering how to fix this, there's a simple solution: Set the breadcrumbCallback as described in the JavaScript Configuration. This should allow you to stringify your log the way you want.. ",
    "SergeyKorochansky": "I also bumped into this issue. Thank you for PR!\n. @nevir Thanks for PR. I merged your PR in our fork and it works great!\n. ",
    "blackxored": "@abc123s Indeed, I'm actually having that exact error atm.\n. ",
    "TSMMark": "For the record, #692 addresses @abc123s's issue. @Looveh are you able to catch exceptions and report them to Raven this way?\n```js\nconst onReportToSentry = () => {\n  try {\n    throw new Error('This exception should be captured and sent to Raven manually!')\n  } catch (e) {\n    Raven.captureException(e)\n  }\n}\n```\nI have found that the above works for me, but UNCAUGHT exceptions cause the app to close and are not tracked. This is a huge issue.. ",
    "danielmohacsi": "Hi @benvinegar, thanks for getting back to me so quickly!\nI think I was not 100% clear. My problem is that if my partner does an XMLHttpRequest to any particular server, Chrome's network panel will show my bundled code (which contains Raven-js) as the initiator.\nConsider the following scenario:\n1. http://www.example.com includes my code from http://danielmohacsi.com/best-code-ever.js.\n2. My code includes Raven-js, and installs it.\n3. example.com initiates a request to http://www.example.com/data.json\nAs a result, Chrome will show that the request's initiator was my code, because Raven wraps XMLHttpRequests automatically. \nThis would not be a problem, but some of our customers do not really have the required technical background, and whenever they see something like that, they think that we are trying to steal some confidential information.\nDo you think I can handle that scenario and make sure that http://www.example.com's requests are not showing my code as the initiator with the transport config option?\nI don't have any problems with Sentry requests going to app.getsentry.com, as they are initiated by my bundled code anyway.\n. Cool! Thanks for the insights! I really want to make sure that I'm not even touching the browser's XHR implementation. Although it would be nice to use all the cool features Raven provides, but XHR wrapping was the one thing which prevented me from updating to the latest version.\n. ",
    "lolJS": "@benvinegar I have tried these solutions. Most recently I have tried including Raven JS as an npm module and bundling it into my app. I'm still having no luck. Please let me know if there's any additional information I can provide to help debug the issue.\niOS 9.3 Cordova (iOS 4.1.1) App using WKWebview\n. ",
    "TomSeldon": "@benvinegar I'm having the what seems like the same issue, is there any update on this?\nAfter upgrading a Cordova app from UIWebView to WKWebView, Sentry requests are now failing due to error:\n\nXMLHttpRequest cannot load https://sentry.io/api/$ID/store/?sentry_version=7&sentry_client=raven-js%2F3.8.0&sentry_key=$MY_KEY. Origin null is not allowed by Access-Control-Allow-Origin.\n\nIf I make an OPTIONS request to that URL, I can see that Access-Control-Allow-Origin is set to whatever the requesting URL is. e.g. from Postman the header value is \"chrome-extension://some-garbage-chars\", whilst if I make an OPTIONS request via http://www.test-cors.org/ then the  Access-Control-Allow-Origin header is set to http://www.test-cors.org/.\nAs the webview is serving the file from a file system, is it just that because the origin is null, you're not returning a Access-Control-Allow-Origin header? \nCould you just set the header to \"Access-Control-Allow-Origin: *\", or would that cause other issues?. ",
    "alexfoxy": "Has this been resolved? I have the same error.. Is there any update on this?. ",
    "weepy": "Me too ... how come you guys aren't on this already ?! . Possibly related ? https://github.com/Telerik-Verified-Plugins/WKWebView/issues/87\n. Oh I see - I didn't realise that! \nI've created a ticket on Sentry.io - thanks!\n. ",
    "squallstar": "Hi everyone, I'm still having this issue:\nXMLHttpRequest cannot load https://sentry.io/api/138422/store/?sentry_version=7&sentry_client=raven-js%2F3.10.0&sentry_key=f18abefeb96a41f9ab3080a40dac0426. Origin null is not allowed by Access-Control-Allow-Origin.\nis there an update on this?. @CombeeMike https://github.com/getsentry/raven-js/pull/1165. ",
    "arusakov": "Thank you for response @benvinegar. I'm going to create PR soon.\n. #637 \n. @joerick Your solution is about \"how to setup Raven in electron app\". But we talk about source maps support here.\n. @dcramer \nIt's interesting. But one simple pattern in server code is not enough.\nfile:///(.+/)?[^/+].app/ pattern is good only for Electron apps for Mac OS X. For Windows app we need another pattern (maybe another for linux app). I need to research it.\n. @dcramer @benvinegar \nOk, I research it. Paths can be:\n**/NAME.app/Contents/Resources/app/main.js - Mac OS X\n**/NAME/resources/app/main.js - Windows and Linux\nBut you can bundle app to asar archive:\n**/NAME.app/Contents/Resources/app.asar/main.js - Max OS X\n**/NAME/resources/app.asar/main.js - Windows and Linux\nOrigin http://electron.atom.io/docs/tutorial/application-distribution/\n. @VladimirPal \nYou can see this in PR. Use electronPlugin._normalizeData as dataCallback for raven-js.. I faced this problem before.\nI think, that every library with own .d.ts files must compile TS with all flags, with max checking.\nnoImplicitAny for this case.\nnode_modules/typescript/bin/tsc --noEmit --noImplicitAny typescript/raven-tests.ts\n@ilya-pirogov Can you improve PR by this way?\n. \ud83d\udc4d \n. ",
    "joerick": "In the meantime, this is working okay for me:\n```\nmodule.exports.setup = function () {\n    if (process.type === 'browser') {\n        // main process\n        const raven = require('raven');\n        const client = new raven.Client('https://622ec62626b041af8d8deadbeefdeadbeef:3fd2f9b05a5f4efca80386fdeadbeefdeadbeef@sentry.io/100000');\n        client.patchGlobal();\n    process.on('uncaughtException', (err) => {\n        const dialog = require('electron').dialog;\n\n        dialog.showMessageBox({\n            type: 'error',\n            message: 'A JavaScript error occurred in the main process',\n            detail: err.stack,\n            buttons: ['OK'],\n        })\n    });\n} else if (process.type === 'renderer') {\n    // renderer process\n    const Raven = require('raven-js');\n\n    Raven\n        .config('https://622ec62626b041af8d8bbdeadbeefdeadbeef@sentry.io/100000')\n        .install();\n}\n\n}\n```\nI call it from both main and renderer processes. I added a dialog box as Electron doesn't show one after sentry gets installed.\n. Hello! Just tried to integrate this into my Electron app by chucking the following code in my main process\nconst Raven = require('raven-js');\nRaven.config('https://622ec62626b041adeadbeefdeadbeefdeadbeef@sentry.io/100000').install()\nGetting the following error:\n\nGuessing the defensiveness should be extended to singleton.js?\n. Thanks, yeah I've been doing a little more digging and it seems the problems extend beyond singleton.js. I'll do a little experimentation using raven-node in the main process like you said. Apologies for derailing discussion!\n. ",
    "steverandy": "I have an electron app that need sourcemap support too.\nI'm using remote hosted JS file now, but if sentry can support local JS files (source+sourcemap), it will be much better.\n. @jan-auer do you know if the sdk support sourcemap? I can't find any documentation for the sourcemap.. ",
    "jan-auer": "There is a full Electron SDK now: https://github.com/getsentry/sentry-electron. Apart from the general approach, shouldn't you invoke f.toString() instead of the prototype function in the tests?. @kamilogorek I get that. But you're patching toString for those functions - I assume (?) - and then calling the non-patched version in tests. . gotcha. \ud83d\ude80 it. \ud83c\udf89 \ud83c\udf86 . CDN releases make this a little more complicated, plus there might be other things to change (e.g. dist/ folder vs Github releases page). We should revisit this once we have answered all the open questions.. Will move this to the Electron repo and remove it here since it is a first-class SDK now. . @kamilogorek This is ready now.. Very, very, very good catch \ud83d\udc4d \nFor some reason I though that the function didn't use this.... @kamilogorek can you please re-review.. Generally looks good, though I agree about edge cases. Would be great if we could run it through our browser test matrix to verify - maybe as part of the standard test suite?\nRegarding configuration: Your approach is probably already better. We could also go with a way Google Analytics handles this. Just assume a global object that has configuration.. @kamilogorek Updated.. Quick note in between: We need to update the tracking issue and bring our design documents up to speed soon after this.. Can you please rebase (!) onto master and then change the PR base? . Good god. We even ignored the Travis failure \ud83d\ude48 . \"will also handle Promise errors\" or \"unhandled Promise rejections\". I'd also add editor.rulers and editor.tabSize here.. This doesn't really make sense as you have to re-run dist on changes, no? . Pinning npm and yarn this restrictively might cause pain once they release a new major version and there are no incompatibilities. Same goes for node - v9 and v10 are already in development and should actually work perfectly fine... Is there a specific reason you specify an upper bound?. Typo: countExpects. No need to return this here.. Event though the promise executor function is invoked immediately, I'd move this line (storing the original sendProcessedPayload inside of it to avoid the looks of a possible race condition. And then also immediately map it back in the callback before calling resolve. \nSame goes for the other methods with the same pattern.. Intentionally not implemented yet? . Maybe it's a little bit late now, but might rollup be a better alternative to webpack for building a library? . Could use async here and in the other methods in this class. But I also like the verbosity, if that's what you're after.. In all these tests you rarely test if the arguments are passed in correctly (i.e. the options, I guess?). It would be quite easy to do this using snapshots.. If you leave it like this, remove async. Other way would be to put this in a try catch, since you're in an async function:\nts\nexpect.assertions(1);\ntry {\n  await sentry.captureMessage('fail');\n} catch (e) {\n  expect(e.message).toBe('Failed because we told it too');\n}. I'm questioning this getter here, is there a really strong reason to have it instead of a regular function adapter()? . This could also be a (possibly exported) constant in this file. It seems weird to have it as an instance field.. What's happening here? . Disclaimer: I assume that install() performs some actions to initialize the adapter and make it ready for event submission etc...\nI'm a bit worried about this function. The return value is not specified explicitly here, but apparently it is Promise<boolean>. This indicates two things:\n * The installation might take a while in which the client is not necessarily ready\n * It can fail in two ways: By resolving false or by rejecting some Error. In both cases, the use should not be allowed to use the client anymore\nIn most of your examples, you however do stuff like this:\nts\nSentry.create('https://53039209a22b4ec1bcc296a3c9fdecd6@sentry.io/4291')\n  .use(Browser)\n  .install();\nSentry.getSharedClient().setTagsContext({ cordova: true });\nSentry.getSharedClient().captureBreadcrumb({ message: 'HOHOHOHO' });\nSentry.getSharedClient().captureMessage('PICKLE RIIIICK!');\nSentry.getSharedClient().captureException(new Error('YOYOYOY'));\nSo this means that by the time you start configuring the shared client, it's not necessarily installed and you might have an unhandled promise rejection. Instead, I would propose to resolve to the client instance here and maybe even remove the getSharedClient() method:\n```ts\npublic install() {\n  if (await this.adapter.install()) {\n    return this;\n  }\nthrow new Error('Client installation failed');\n}\n```\nThat way, the user is more encouraged to wait for the result:\nts\nconst client = await Sentry.create('https://53039209a22b4ec1bcc296a3c9fdecd6@sentry.io/4291')\n  .use(Browser)\n  .install();\nclient.setTagsContext({ cordova: true });\nclient.captureBreadcrumb({ message: 'HOHOHOHO' });\nclient.captureMessage('PICKLE RIIIICK!');\nclient.captureException(new Error('YOYOYOY'));\nOne more thing, if you really want to be safe, introduce an internal flag in the client whether installation has succeeded, before allowing methods like captureException. . Strictly, you should actually console.log.apply(console, args) or simply console.log(...args).. Just a suggestion: I'd call it mergeIn, as merge usually refers to shallow-merging all keys of two or more objects.. Are you sure you want this behavior? Usually merge or assign functions as well as the object spread operator ignore sources that are falsy. . Isn't this implicitly defined if you extend Error?. By default, jest applies the \"jsdom\" environment which essentially polyfills some browser APIs. However, this means that even though your tests pass, the code might not run in an actual node process. However, since you want to run it in both the browser and node, it might make sense to run tests in both environments and use the --env option to switch between them. If you don't want to do this, declare \"testEnvironment\": \"node\" here as this is more of a common demeanor. \nExample for running both (needs npm-run-all as devDependency):\njson\n{\n  \"dist\": \"npm run clean && tsc -p tsconfig.json\",\n  \"test:browser\": \"jest --env=jsdom\",\n  \"test:node\": \"jest --env=node\",\n  \"test\": \"npm-run-all dist test:browser test:node\"\n}. @sentry/core uses false here. Purpose?. Sure, but you could do this.adapter().blabla anywhere in the code as well and it's a bit more expressive. Otherwise someone making a quick change to this file might miss that part. \nAnyway, I'll leave it up to you.. You could add a link to https://sentry.io/api/ here. you you. This can be confusing. @HazAT can sentry-wizard help here? . this.options.dsn is always what was passed in before. What we could do is something like\nString(this.options.dsn) === String(nextOptions.dsn). Yeah, we could do that. The idea was that Backend.sendEvent is so stupid, that it doesn't have to interpret the response from the server and just return the status code. The Frontend can then interpret it and decide what to do (e.g. retry, ...) \nIt's just, with Raven this is not possible yet because we have no access to the status code.. What is duplicated here? . Yeah, the string comparison seems to work. Adding a test for that.. Erm, nvm. A test doesn't make sense because in worst case it will always update.... Ah right, breadcrumbs is no longer readonly :) . That would be a race condition (\"lost update\"). I agree we should fix the API somehow, but there is no way to fix this with the current asynchronous functions. The only correct way would be:\njs\nawait this.loadBreadcrumbs();\nthis.breadcrumbs = [...this.breadcrumbs, xyz];. Just put @sentry/utils here. You can still do the deep-import in the code. Remove the commented-out part, please.. Implementing it like this would mean that you could be bleeding from one client into another. I think this should still go through this backend's own frontend to be safe. Also applies to the other functions below. Most importantly, this implementation means I can no longer just create an instance of the client without attaching it to the scope.\nI understand the intention of doing this - to capture global exceptions and unhandled rejections in the currently active scope - but this is certainly the wrong place to do this.. You could move these re-exports out of the frontend file, as it doesn't really belong here. Same for create.. Just curious, why aren't the test cases isolated anymore? I saw the s.restore(), but just worried that due to jest's parallel execution, this could lead to interesting effects.... TODO. TODO. This is a duplicate of the export in domain. However, it actually belongs here and not in domain. \nAlso, TODO.. Shouldn't all these return an event ID based on recent discussions? Also, the return type is still async, however addBreadcrumb is not, whereas both might be asynchronous internally (due to specific SDK implementations).. Update URLs here to @sentry/shim. Note this might break with SystemJS.. This cannot return Shim, as it might be an older or newer version. Just return any here. Just a matter of preference, but since scope is the one consistent (and non-optional) argument to all functions, I'd make it the first.. We probably also want the DSN here.. That's not to be solved here. . Can we fix this in captureEvent and change the top-level signature to SentryEvent | undefined? This is way too deep and also defies type checking.. WFM. We can assume that the DSN must be valid at that point, so there's also no need to catch exceptions anymore. . prettier. Really?. Going forward, we should probably also provide a rollup build without that dependency for our CDN, just like the @sentry/browser package. This would allow users to include a single javascript file to shim sentry instead of having to install multiple packages for use cases without sophisticated bundlers.. Did that lockfile get here by accident?. Ah, alright then :). That's just a string. Changed the mechanism assignment as requested, but would rather not use arguments as this kills many potentials for optimizations in the JavaScript VM.. A couple of nit picks related to this constructor:\n - Can we please make these fields and assign them explicitly? I know this is more code, but we use that consistently throughout the code base.\n - Function arguments are position dependent and do not scale as nicely. If you really need to pass scope data here, I'd propose to put a typed data object as optional function argument\n - The scopeChanged parameter seems strange in this position. It might be nice(r) to just leave the funciton.. nit: For forward compatibility, it might be nice to have a signature like .on(type: string, callback: (scope: Scope) => void). Didn't you just want to do this after configureScope?. nit: Can we name the parameter maxBreadcrumbs or similar?. Rename this class to something like BaseScope or ScopeImpl to distinguish it from the interface. Otherwise code using either of the two might become confusing.. This should use the Scope interface.. Also, yeah, that's not too nice \ud83d\ude22 . nit: That is not necessary.. Can we add an assertion here or even a fallback so we don't blow up in case stack is empty?. This should replace instead of merge.. nit: maxBreadcrumbs > 0, after which you can remove Math.max down below. Alternatively, use a default value in the parameter list (maxBreadcrumbs: number = 0). Can we just use an object in this case? There is no need for state.\nIf you don't like the syntax, you can also always this.handle = this.handle.bind(this) in the constructor.. The other way around, I suppose?. Also, should we instead use serialize here?. Aaah, gotcha. ",
    "ncaq": "@steverandy Source Maps \u2013 Sentry Documentation. ",
    "VladimirPal": "Can you suggest any temporary decision for electron?. @arusakov Thank you, already did it.\n```javascript\n// raven-electron-plugin.js\nconst PATH_MATCH_RE = /[^/]+$/;\nfunction normalizeUrl(url) {\n  const match = url.match(PATH_MATCH_RE);\n  return match ? ~/${match[0]} : url;\n}\nfunction electronPlugin(Raven) {\n  Raven.setDataCallback((data) => {\n    electronPlugin._normalizeData(data);\n  });\n}\nelectronPlugin._normalizeData = function normalizeData(data) {\n  if (data.culprit) {\n    data.culprit = normalizeUrl(data.culprit);\nconst stacktrace = data.stacktrace || data.exception && data.exception.values[0].stacktrace; // eslint-disable-line\nif (stacktrace) {\n  stacktrace.frames.forEach((frame) => {\n    frame.filename = normalizeUrl(frame.filename);\n  });\n}\n\n}\n};\nmodule.exports = electronPlugin;\n```\njavascript\n// index.js - endpoint on my app\nimport Raven from 'raven-js';\nRaven.addPlugin(require('./raven-electron-plugin'));. ",
    "galuszkak": "Just for help this is minimal not working example:\nhttps://github.com/galuszkak/ravenjs-bug\n. Works for me. \ud83d\udc4d \n. ",
    "davorpeic": "Hey @galuszkak did you tried to update your ionic2 to RC1? Can't get raven-js to work with my ionic2 app, angular2 documentation is useless as it seems that ravenjs is not working with aot :(\n. @filipsuk Hi, yes, I wrote my tips here #735 and now is working fine\n. +1\n. Yeah, I also managed it to work, but this time I deleted node_modules and running install again, strange that with simple install didn't, nevermind, now it works\n. Hi @vintage , can you share a little bit about your ionic2 setup? I just updated my project to RC1, imported raven as you mentioned, but can't get to build with 'ionic serve', I get this error\nbundle failed: 'default' is not exported by node_modules/raven-js/src/singleton.js (imported by src/app/app.module.ts).\nI even tried to define manually Raven and default in namedExports (rollup.config.js) but with no luck :(\nthanks\n. Hey @vintage this is awesome, really appreciate the effort, but, I have the same setup, so that took me to next level :D, I decided to update to RC2 recently published, so I updated all needed modules in package.json, deleted local node_modules (I think this did it), and run npm install again. Now I'm working on getting actual error to get logged in sentry, but at least no js errors related to raven :D \nthanks!\n. Hey @Chuckv01 did you managed to get this working as @benvinegar instructed? \n. Hm yeah, its a workaround, I hope they will fix this bug as it is useless in ionic2 :(\n. ",
    "filipsuk": "@davorpeic did you manage to get it working with new Ionic2? Thanks\n. ",
    "kamikaze": "@benvinegar \nmain.ts\n`\nimport { enableProdMode, provide, ExceptionHandler } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nimport {Raven} from 'raven-js';\nRaven\n  .config('my-dsn')\n  .install();\nclass RavenExceptionHandler {\n  call(err:any) {\n    Raven.captureException(err.originalException);\n  }\n}\nbootstrap(AppComponent, [\n...\n  provide(ExceptionHandler, {useClass: RavenExceptionHandler}),\n...\n]);\n`\nseed.config.ts\nSYSTEM_BUILDER_CONFIG: any = {\n    defaultJSExtensions: true,\n    packageConfigPaths: [\n      join(this.PROJECT_ROOT, 'node_modules', '*', 'package.json'),\n      join(this.PROJECT_ROOT, 'node_modules', '@angular', '*', 'package.json')\n    ],\n    paths: {\n...\n      'raven-js': 'node_modules/raven-js',\n...\n      '*': 'node_modules/*'\n    },\n    packages: {\n...\n      'raven-js': {\n        main: 'dist/raven.js'\n      },\n...\n    }\n  };\nI'm using mgechev/angular2-seed\n. @benvinegar \nnow I've got in browser console:\nraven_js_1.default is undefined\n. @benvinegar \nThanks, now it works... but why?\n. how do I know? Actually I think there are both... for npm run build.dev (loader) and build.prod (builder). But I'm just guessing while reading seed.config.ts\n. ",
    "mentatxx": "\nimport Raven = require('raven-js')\n\ndoes not work any more\nBut import * as Raven from 'raven-js'; does\n. ",
    "momoadeli": "Thanks for this (I'm coming from issue # 651).  Needless to say, there is indeed a cyclic reference in our rejection.config.context which is generating the circular reference error.  This, ideally, should not disrupt raven.js but I can see the pros and cons of how this is addressed.\n. @mattrobenolt, any thoughts on when this will be available via CDN?  I'm currently on v3.2.1.\nMany thanks.\n. @benvinegar, thanks for the reply.  Point taken.  Until then, do you have a timeline for release?  Apologies for being repetitive--as developers ourselves we understand the demands you're under.  Thanks!\n. @genintho, thanks! However, we're feeding off the CDN and not forking the source.  That said, point taken, you seem to be indicating this is a bug.\n. Has anyone had a chance to review this?  Many thanks!\n. @benvinegar Apologies, just saw your comments and questions.  I have my setup in the OP, however, here it is again (I believe the CDN below includes the AJS plugin/intergation per documents):\nraven.js 3.5.0 <script src=\"https://cdn.ravenjs.com/3.5.0/angular/raven.min.js\"></script>\nSentry: 8.3.3\nException Handler: AngularJS 1.5.8\nI can easily reproduce the problem.  Merely initialize a variable to an undeclared one somewhere and run the app:\nvar testVar = notDeclared\nThe sentry results are:\n\nI get the same results with our without my own exception handler (note if I pass 'exception.stack' to captureException instead of 'exception' only, I get a better Sentry title but the guts are culled.--see image below):\n```\n    var globalExceptionHandlerModule = angular.module('globalexceptionhandlermodule',[]);\nglobalExceptionHandlerModule.factory('$exceptionHandler', ['$log', function($log) {\n\n    return function myExceptionHandler(exception, cause) {\n      // logErrorsToBackend(exception, cause);\n      $log.error(exception, cause);\n      Raven.captureException(exception);\n      // Raven.captureException(exception.stack);\n    };\n\n}]);\n```\n\n. @benvinegar Yes, this issue has been resolved.  Thanks!\n. Solved the issue.  Chrome seems to be hoisting variable differently and as such FF/raven.js was throwing an exception. Problem fixed.  Not a raven.js issue. This can be closed.. ",
    "michalczaplinski": "This makes total sense. Are there any plans to implement that?. ",
    "aldarund": "@benvinegar well, the issue was a bit different. Error was referring to previous code,  although in sentry it was showing most recent code the actual code that was executed by user was old one.\n. ",
    "tehshane": "This may old news by now, but I came across a semi-elegant solution that might work where broken dependencies are a problem, in addition to what @lgdexter suggested.\n``` javascript\nvar dependencies = ['dependency1', 'dependency2'];\ntry {\n  // Tries to load the ngRaven module directly. \n  // If Raven is blocked, this throws an exception.\n  angular.module('ngRaven');\n  // The module loaded, so we can depend on it.\n  dependencies.push('ngRaven');\n} catch (ex) {\n  // An exception fired, so ngRaven isn't available\n}\nangular.module('myApp', dependencies);\n```\nWithin the app itself, one would still need to check if window.Raven exists, of course.\n. ",
    "urbany": "Is there a way to currently send the environment through client side raven-js?\n. @dcramer thanks for the quick reply, can you give me an example on how to do that? What I want is to send the current app environment on each error report.\nThanks in advance : )\n. @dcramer awesome, thank you very much!\n. ",
    "vladgurovich": "FYI, @benvinegar @zachdunn the list maintainer has asked for some site examples where its broken\nhttps://forums.lanik.us/viewtopic.php?p=100775#p100775\n. > We \"solved\" this by downgrading to raven-js 3.1.1 (version without the commit that removed the explicit setting of message was introduced).\n....\n\nAnd yeah, this is the cause. In Sentry 8.6 we made some changes so that the message interface is no longer necessary.\n\n@benvinegar these seem like breaking changes that shouldve had more signal than a minor version bump IMHO\n. ",
    "razvanmitre": "Yes it is working. Thank you.\n. ",
    "guybedford": "import Raven from 'raven-js'; is the correct syntax here. Did you try running TypeScript with the synthetic default exports flag - https://github.com/Microsoft/TypeScript/pull/5577. Also for the best SystemJS support always use the system module format output of TypeScript compilation which will provide this integration path anyway.\n. ",
    "simonweil": "Yes, this is exactly my setup.\nOn Aug 12, 2016 12:54 AM, \"Ben Vinegar\" notifications@github.com wrote:\n\nWhat is the deployment method for Raven.js on these sites? For example,\nare you using a standard ",
    "cjmielke": "I just found this older issue that had the same problems, and offers an implementation for those curious : \nhttps://github.com/getsentry/raven-js/issues/435\n. ",
    "nicinabox": "Happy to!\nOn Wed, Aug 10, 2016 at 16:43 Ben Vinegar notifications@github.com wrote:\n\nIf you can put together a PR with that change I'll accept.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/680#issuecomment-239014154,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPCCHDPXuZvpklaHovQ1eo28ZxV7t39ks5qekYTgaJpZM4Jhmkq\n.\n. \n",
    "adepue": "Yeah the latest/major version seems nice.  Basically take the bug fixes as them come, but breaking changes we have to opt into.\n. ",
    "biggestT": "@benvinegar I also encountered this issue with Sentry 8.2.3, Angular 1.4.11, Raven.js 3.4.1 and using the Angular plugin. \nSince this commit: https://github.com/getsentry/raven-js/commit/fbf1d1b3272fd712a6ee5a61d28f2a7b151a24e4 Raven doesn't set data.message and the angular plugin: https://github.com/getsentry/raven-js/blob/master/plugins/angular.js#L55-L63 never sets data.message either if it doesn't match the pattern (which none of the exceptions I tried to throw within my angular components did). From my understanding this is the cause of all the <no message value> entries. \nNot sure if the best fix is to just keep setting it as in the fix mentioned above or if the angular.js plugin should be changed.\n. @benvinegar I haven't been able to throw any exceptions that matches the pattern but what I see is that if they don't match no message key is in the payload. In the payload there is an exception key that looks like this:\n\"exception\":{\"values\":[{\"type\":\"Error\",\"value\":\"test\",\"stacktrace\":{\"frames\":[{ ... [long stacktrace omitted]  ..\nSo the type and value is there but it seems like my self hosted Sentry (v8.2.3) needs an explicit message key in order to display a title in the GUI. We \"solved\" this by downgrading to raven-js 3.1.1 (version without the commit that removed the explicit setting of message was introduced). With that we get both the above exception key in the payload as well as a \nmessage key which makes the GUI present a title for all Exceptions we have encountered so far.\n. ",
    "logicalicy": "Thanks!\n. ",
    "marcomorain": "Thanks!! \ud83c\udf89\n\nMarc O'Morain\n  marc@marcomorain.com\nOn Thu, 25 Aug 2016, at 04:02, Ben Vinegar wrote:\n\nClosed #698[1] via c39b7e1[2].\n\u2014 You are receiving this because you authored the thread. Reply to\nthis email directly, view it on GitHub[3], or mute the thread[4].\n\nLinks:\n1. https://github.com/getsentry/raven-js/issues/698\n2. https://github.com/getsentry/raven-js/commit/c39b7e148c6bece28198866becf7b9616b322b38\n3. https://github.com/getsentry/raven-js/issues/698#event-766876132\n4. https://github.com/notifications/unsubscribe-auth/AAbWAbD8D75hDiVWp40XHtdqYMRYqXTgks5qjQXGgaJpZM4JpyKb\n. OK, something really odd is up - if I don't use typings to install type definitions, but instead include a copy of raven.d.ts directly in my project everything works as expected, using import * as Raven from 'raven-js'.\n. I've removed typings from my project and started using npm directly for @types imports. It seems to all be working now without the documented setup. Strange, but it works.\nThanks @vintage \n. ",
    "cancan101": "Potentially a Duplicate of https://github.com/getsentry/raven-js/issues/424\n. ",
    "AndreasBackx": "@benvinegar could we get any information on this? Would love to have translations available.. ",
    "JumpLink": "It would also be create if we could customize the text of the dialog. ",
    "HudsonAfonso": "+1. ",
    "backstageel": "+1. ",
    "shroomist": "+1 looking forward to customisable form. @kamilogorek Thanks, that solved it for me. ",
    "dortort": "+1. ",
    "roaringbits": "+1\nI fixed this myself by altering the HTML of the dialog after calling show for now . ",
    "sonaye": "Can be done through #customizing-the-widget. Just landed in raven-js  https://github.com/getsentry/raven-js/commit/84ed55cca61e48bbf6b114842f4fa913ede800f4, waiting for the release.. ",
    "wong2": "1.1.9\n. ",
    "graingert": "You might want to try https://github.com/facebook/mention-bot\nOn 7 Sep 2016 07:43, \"David Cramer\" notifications@github.com wrote:\n\n@getsentry/javascript https://github.com/orgs/getsentry/teams/javascript\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/705#issuecomment-245189868,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAZQTBKRK3K-0vETgd7O8Co3LB1OOEGkks5qnl0fgaJpZM4Jt8Rr\n.\n. @adamjang have you tried updated to webpack 2? Webpack 1 is deprecated.. @ImJustToNy probably best to use the CJS version from npm. @benvinegar ping ^. @benvinegar it's just not the done thing in CJS Angular. @benvinegar all good angular modules export their angular module name: https://github.com/getsentry/raven-js/pull/889/files#diff-0662f5969b7a6e9ed13ffcc6eb5f765bR122. @benvinegar https://github.com/getsentry/raven-js/pull/889/files#diff-0662f5969b7a6e9ed13ffcc6eb5f765bR122. @benvinegar messaged you (benv) on freenode IRC. @benvinegar rebased... again.... @benvinegar :tada: :tada: :tada: :tada: . So it's angular-ui-bootstrap modal $uibUnscheduledDestruction and any $http rejection. I'm moving to react, so no not really :p\n\nOn 9 Oct 2017 14:18, \"Kamil Og\u00f3rek\" notifications@github.com wrote:\n\n@graingert https://github.com/graingert is this something that's still\nrelevant for you and you can provide an example mentioned above?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/890#issuecomment-335155466,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAZQTJn9JomwJCuQ97MRD-V7yFv53r5wks5sqh1AgaJpZM4Mdwza\n.\n. @benvinegar I don't think this stops adding any of the proposed changes from #803 but it fixes a real problem that exists now.. @benvinegar ping ^. @benvinegar I did add those, and it's not that much extra code, in exchange I re-factored the duplicate setXCallback APIs\n\nthe setXCallback APIs should be deprecated.. @benvinegar the issue is, setDataCallback supports two ways of changing the data sent:\n\nThe Good way: return a new object with the new data\nThe Naughty way: alter the internals of the object 'mutation' \ud83e\udd2e\n\nhowever the angular and react-native clobber method 1 of the original functions by not returning the data through the stack of functions.. @benvinegar happy to rename wrapXCallback methods to _wrapXCallback methods. @benvinegar any update on this?. @benvinegar any update on this?. @benvinegar any update on this?. @benvinegar hey no worries I'm just glad for the existence of the project!. @benvinegar @HazAT yeah it looks like that should be updated too. It won't break it but now it will behave slightly different.. the reason is your .d.ts describes an ES module, but your source code is a CJS module. you should be able to say that Raven is a CJS module, or switch to ESM completely.. Options:\ndeclare as CJS\nts\ndeclare module \"raven-js\" {\n    export = Raven\n}\nThen move all the exported interfaces to a new .ts file (that typescript users can import) and import into raven.d.ts\ndeclare as ESM\nThen to support const Raven = require('raven-js'); add Raven back to module.exports with Raven.default === Raven and Raven.__esModule === true:\n```js\nimport objectAssign from 'object-assign';\nconst assign = Object.assign || objectAssign;\nconst Raven = ...\nexport default Raven\nmodule.exports = assign(Raven, module.exports);\n```. @benvinegar I'd recommend the ESM + module.exports = Object.assign trick.. Yep it works (I'm using it)\nOn 23 Mar 2017 06:11, \"Ben Vinegar\" notifications@github.com wrote:\n\nMerged #901 https://github.com/getsentry/raven-js/pull/901.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/901#event-1011807739, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAZQTNblo9CLDFnKLccklm2a5aXSYpCWks5rog0lgaJpZM4MmMDo\n.\n. hmm probably not worth adding this until https://github.com/yefremov/iserror/pull/8\n\nYou don't need an isObject check here.. @LewisJEllis you already depend on json-stringify-safe. Closing in favour on #919 . My text editor can only edit text files, so cannot produce files without an eol-last character. This adds extra noise to PRs.. @benvinegar @GEMI fixed by #889 . @GEMI to me it looks like you're trying to register angularPlugin as a module, but this is not how the angular plugin is supposed to be configured.\nplease gist the code where you import/require('raven-js/plugins/angular'). You need that so that other cjs angular module can consume your app. @benvinegar ah I see what you mean, fixed.. you don't need to worry about this, travis does it for you.. ah it won't be changed in the 'Show outdated' view, you need to see the whole changeset again.. @benvinegar what is this isObject check for? There's no way to override what Object.prototype.toString does. without being an object. (ES2016, @@toStringTag). yeah, it's a bit mysterious. Node has moved to a special internal isError that cannot be implemented in plain JS, because objects can override the behaviour of Object.prototype.toString via @@toStringTag\nOf course legacy JS could still replace Object.prototype.toString.. this means that if someone logs an error in an unload, or beforeunload handler the request will still hit sentry.. no idea how this passed linter before... is your eslint mis-configured?. this function is wrong. It should be using _enc and it seems to want to add the require at the end of every chunk. it's just luck that transform is getting called once with one buffer here.. so is through(process.exit) doesn't mean it's a good idea.\nIt's currently just luck that the current code works. If browserify presented you with a stream with multiple chunks you'd intersperse it with these require calls.. fixed in https://github.com/getsentry/raven-js/pull/1229/files. https://www.npmjs.com/package/localstorage-fifo ?. ",
    "apechimp": "@benvinegar I've updated the PR to make the naming consistent and add a test. Let me know if it's acceptable.\n. ",
    "yingliangzhang": "@dcramer Ah It's node. Thanks for pointing that out. \n. Thanks @LewisJEllis for explaining. I'm quite new to Parse Cloud as well and I've never used raven. I'll try raven-node and see how it goes.\n. ",
    "ilya-pirogov": "@arusakov Done. How does it look now?\n. ",
    "VStas": "Same problem here. I'm waiting for this PR.\n. ",
    "mruzekw": "@nicksp @benvinegar I might take this up. We use both in my work project, so it would be of value to us.. Added types to flow-typed based on the existing Typescript defs.\nhttps://github.com/flowtype/flow-typed/pull/1297. ",
    "marcelgood": "Ah, didn't see #711 \n. ",
    "seanlinsley": "It turns out there's quite a few companies that provide screen recording as a service. We're currently using https://logrocket.com in addition to Sentry.. One workaround is to pass a string to captureException:\n```js\nRaven.captureMessage('test')              // doesn't work\nRaven.captureException(new Error('test')) // doesn't work\nRaven.captureException('test')            // works. It seems to me that commands from the console should be properly associated with the site's domain, instead of being marked as anonymous.\nI'd expect to find that a lot of Sentry users rely on the old behavior. How are you supposed to be 100% sure that Sentry is working in production (w/ its usual production configuration) without being able to trigger an event from the console? Expecting users to always embed a call in their source code & then later remove it after testing is complete is too heavy-handed, IMO.. ",
    "guillaume86": "What about leaving the storage up to the implementator? Just ask the dev to provide a fonction that receive image data and returns an url. Sentry could then use that URL to display it in the event detail view.\n(Of course it could also be implemented entirely as a plugin if sentry allowed to define custom fields with types like image/url, is there a feature request somewhere for this?). Yes I mean a special field with integration into the sentry UI (show a thumbnail + open on click). . ",
    "scothis": "Thanks @benvinegar, the PR is updated\n. ",
    "lukasz-karolewski": "my bad, I was using src/plugins instead of dist/plugins... sorry\n. ",
    "proclaim": "well, that's the same thing to me, I'm using 3.6.1\nAccording to this post: https://github.com/damiencaselli/ember-cli-sentry/issues/48 this is not a new issue. I tried setting Raven.debug = true still the same.\nI'm eager to find a solution for this too!\n. ",
    "trueter": "Found this: https://github.com/getsentry/raven-js/issues/584#issuecomment-240259604\n. ",
    "tachang": "Cool that does it. The documentation doesn't go much into the whole breadcrumbs thing. Is that the backtrace?\n. ",
    "Taewa": "I am having the same issue but using @sentry/browser instead of Raven.\nSo far I couldn't find where it is documented. (Also checked interfaces.d.ts file but no luck)\nAny idea ?. Just found out the solution\n. Thanks @pascaliske \nI actually solved by using captureMessage(message: string) which you mentioned.\nIt'd be helpful for the future visitors :)\n. ",
    "blazzy": "Fair enough on the undocumented behavior and how long ago the change was. I have a hard time imagining what else might be bound to that function that would be overridden, but I guess we all do some crazy things in the browser. This was the library that prompted me to ask the question: redux-catch.\n. ",
    "JimJty": "Thanks, I'll do some more troubleshooting on my end.\n. ",
    "swaroopa94": "Yes i did that but displaying the errors which is also not relevant.\n\n. i too don't know where is that file is can you tell me where it is located ?\n. ya how can i delete that one?\nAnd I have to write the following method in every page of my appllication to get the crash report?\n Crashlytics.recordError({\n      code: \"123\",\n      message: \"it broke again\",\n    });\n. ",
    "antoinerousseau": "@vehas how did you work around this? got the same issue on my LG G3\n. I'm trying to add that stack as an extra, but it gets filtered out:\n\nHere is my code:\njs\n  componentDidCatch(error, info) {\n    console.log('componentDidCatch', info.componentStack)\n    Sentry.withScope((scope) => {\n      scope.setExtra('extraTest1', 'ok')\n      scope.setExtra('extraTest2', true)\n      scope.setExtra('extraTest3', 1337)\n      scope.setExtra('componentStack', info.componentStack)\n      scope.setExtra('extraTest4', {ok: true})\n      scope.setExtra('extraTest5', {ok: {ok: 'ok'}})\n      Sentry.captureException(error)\n    })\nAnd here is the componentStack value (as you can see it's not that long):\nin Calendar (created by Uncontrolled(Calendar))\n    in Uncontrolled(Calendar) (at src/index.js:127)\n    in div (at Events.js:145)\n    in Events (created by Connect(Events))\n    in Connect(Events) (created by Route)\n    in Route (at Authenticated.js:169)\n    in Switch (at Authenticated.js:143)\n    in div (at Authenticated.js:142)\n    in div (at Authenticated.js:123)\n    in Authenticated (created by Connect(Authenticated))\n    in Connect(Authenticated) (created by Route)\n    in Route (at App.js:134)\n    in Suspense (at App.js:133)\n    in IntlProvider (at App.js:130)\n    in App (created by Connect(App))\n    in Connect(App) (created by Route)\n    in Route (at web/index.js:52)\n    in Router (at web/index.js:51)\n    in Provider (at web/index.js:50)\nWhy does it get filtered out? Newlines? Size? I'd like to include it in my report anyway :/. Also, when I only set my componentStack extra, I get this:\n\n. @kamilogorek any clue about this?. @kamilogorek oh ok, thank you very much!. ",
    "khanghoang": "@benvinegar I don't think it because of React Native on Android, in fact I managed to get the log of a crash on production Android app. It looks like this\n```\nE/ReactNativeJS: Can\u2019t find variable: a\nE/AndroidRuntime: FATAL EXCEPTION: mqt_native_modules\n                                                          Process: com.ehlife, PID: 4225\n                                                          com.facebook.react.common.JavascriptException: Can\u2019t find variable: a, stack:\n                                                          onPress@1142:836\n                                                          touchableHandlePress@319:1163\n                                                          _performSideEffectsForTransition@165:8280\n                                                          _receiveSignal@165:6789\n                                                          touchableHandleResponderRelease@165:4275\n                                                          a@120:72\n                                                          c@119:421\n                                                          i@119:616\n                                                          f@117:163\n                                                          g@117:291\n                                                          i@122:84\n                                                          processEventQueue@117:1298\n                                                          s@123:92\n                                                          handleTopLevel@123:178\n                                                          @115:847\n                                                          perform@132:528\n                                                          batchedUpdates@213:481\n                                                          a@125:346\n                                                          _receiveRootNodeIDEvent@115:819\n                                                          receiveTouches@115:1193\n                                                          value@58:3762\n                                                          @58:1998\n                                                          b@58:626\n                                                          value@58:1970\n                                                          at com.facebook.react.modules.core.ExceptionsManagerModule.showOrThrowError(ExceptionsManagerModule.java:95)\n                                                          at com.facebook.react.modules.core.ExceptionsManagerModule.reportFatalException(ExceptionsManagerModule.java:79)\n                                                          at java.lang.reflect.Method.invoke(Native Method)\n                                                          at java.lang.reflect.Method.invoke(Method.java:372)\n                                                          at com.facebook.react.bridge.BaseJavaModule$JavaMethod.invoke(BaseJavaModule.java:322)\n                                                          at com.facebook.react.cxxbridge.JavaModuleWrapper.invoke(JavaModuleWrapper.java:158)\n                                                          at com.facebook.react.bridge.queue.NativeRunnable.run(Native Method)\n                                                          at android.os.Handler.handleCallback(Handler.java:739)\n                                                          at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                          at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:31)\n                                                          at android.os.Looper.loop(Looper.java:135)\n                                                          at com.facebook.react.bridge.queue.MessageQueueThreadImpl$3.run(MessageQueueThreadImpl.java:196)\n                                                          at java.lang.Thread.run(Thread.java:818)\n\n```\nI think above log is okay because I tried the same crash on iOS production build and here is the iOS crash log\n2016-10-31 17:45:25.585 [fatal][tid:com.facebook.react.RCTExceptionsManagerQueue] Unhandled JS Exception: Can\u2019t find variable: a\n2016-10-31 17:45:25.597 EHLife[40850:506254] *** Terminating app due to uncaught exception \u2018RCTFatalException: Unhandled JS Exception: Can\u2019t find variable: a\u2019, reason: \u2018Unhandled JS Exception: Can\u2019t find variable: a, stack:\nonPress@1147:837\ntouchableHandlePress@321:1163\n_performSideEffectsForTransition@298:8280\n_receiveSignal@298:6789\ntouchableHandleResponderRelease@298:4275\na@119:72\nc@118:396\ni@118:591\nf@116:163\ni@121:84\nprocessEventQueue@116:1273\ns@122:92\nhandleTopLevel@122:178\n<unknown>@114:847\nperform@131:503\nbatchedUpdates@216:456\na@124:321\n_receiveRootNodeIDEvent@114:819\nreceiveTouches@114:1193\nvalue@35:3089\n<unknown>@35:1325\nb@35:602\nvalue@35:1297\n\u2018\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x0000000104e8e34b __exceptionPreprocess + 171\n    1   libobjc.A.dylib                     0x0000000103d9e21e objc_exception_throw + 48\n    2   CoreFoundation                      0x0000000104ef7265 +[NSException raise:format:] + 197\n    3   EHLife                              0x0000000103559c65 RCTFatal + 393\n    4   EHLife                              0x00000001035531ec -[RCTExceptionsManager reportFatalException:stack:exceptionId:] + 549\n    5   CoreFoundation                      0x0000000104e1505c __invoking___ + 140\n    6   CoreFoundation                      0x0000000104e14ee1 -[NSInvocation invoke] + 289\n    7   CoreFoundation                      0x0000000104e2ced6 -[NSInvocation invokeWithTarget:] + 54\n    8   EHLife                              0x0000000103556f25 -[RCTModuleMethod invokeWithBridge:module:arguments:] + 604\n    9   EHLife                              0x000000010357d3a1 -[RCTBatchedBridge _handleRequestNumber:moduleID:methodID:params:] + 219\n    10  EHLife                              0x000000010357cc0b __33-[RCTBatchedBridge handleBuffer:]_block_invoke.329 + 492\n    11  libdispatch.dylib                   0x0000000108d6a810 _dispatch_call_block_and_release + 12\n    12  libdispatch.dylib                   0x0000000108d8c12e _dispatch_client_callout + 8\n    13  libdispatch.dylib                   0x0000000108d71523 _dispatch_queue_serial_drain + 1018\n    14  libdispatch.dylib                   0x0000000108d71cf3 _dispatch_queue_invoke + 1118\n    15  libdispatch.dylib                   0x0000000108d7209b _dispatch_queue_override_invoke + 376\n    16  libdispatch.dylib                   0x0000000108d73a0e _dispatch_root_queue_drain + 506\n    17  libdispatch.dylib                   0x0000000108d737b4 _dispatch_worker_thread3 + 113\n    18  libsystem_pthread.dylib             0x00000001091324de _pthread_wqthread + 1129\n    19  libsystem_pthread.dylib             0x0000000109130341 start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. @benvinegar I got your point, but it's a single bundle of javascript code so that IMO there is no need for filename (you can see that there is no file name for ios, but it works just fine on iOS). \nBecause our company uses Sentry for RN on production so we will try our best to figure out what we can do about this.. @denstepa keep us in the loop, thanks . @danieldkim I think it will be better if we can test @denstepa's fix with RN <0.40.x since there are breaking changes in 0.40.x.. @benvinegar I can help you to create minimum RN project that can reproduce the bug. Is it what you're looking for?. @benvinegar the problem is still there :(\n\n. @benvinegar yes, I used #875 and it still didn't work. I think it's relative with this one https://github.com/getsentry/raven-js/issues/731. @harshil07 I think it's relative to this one https://github.com/getsentry/raven-js/issues/731. ",
    "denstepa": "We faced the same issue, and this fix https://github.com/denstepa/raven-js/commit/885f0a1c88401975aa062f2d71a7dbc7462eda94 helped us to get stacktraces and source maps working for android in production mode. The problem was with path to file that was index.android.bundle, without file:/// in the beginning as it was for iOS\nI will try to check if it could causes problems in other browsers etc and will do pull request a bit later. ",
    "danieldkim": "I tried out @denstepa's fix (with RN 0.40.0).  It kinda works but the Sentry UI gets confused trying to map it to the original source and messes up the top frame of the stack trace.  The raw JSON looks a bit better but the colno attribute is off.  The context_line attribute does, however, seem to have the appropriate data.  It doesn't seem to be related to the colno so I'm not sure how that data is derived.  In any event, although that code snippet in the context_line is from the raw bundle it's useful and better than nothing.. OK that's fine but I don't think there any breaking changes in that 0.40.0 that would affect this issue.. ",
    "ACBrown": "@benvinegar I'm not sure how to create the test frames, but I can confirm that the fix is working for me. I'm currently using @denstepa's fix in my Android app in prod (running react native 0.37).. ",
    "misterecco": "@benvinegar I also confirm that the fix is working for me. @benvinegar Here is a stacktrace from my app\nError: test\n  at render(/home/tomek/qed-workspace/geosurvey.collect.react/src/components/GpsMonitorScene.js:78:24)\n  at _renderValidatedComponentWithoutOwnerOrContext(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:1050:29)\n  at _renderValidatedComponent(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:1075:15)\n  at renderedElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:484:29)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:346:40)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at children(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:264:10)\n  at this(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:74:41)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:212:6)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at renderedElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:496:6)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:346:40)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at children(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:264:10)\n  at this(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:74:41)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:212:6)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at renderedElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:496:6)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:346:40)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at renderedElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:496:6)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:346:40)\n  at child(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at renderedElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:496:6)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:346:40)\n  at nextChildInstance(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:68:25)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactChildReconciler.js:157:10)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:227:6)\n  at nextNestedChildrenElements(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:345:6)\n  at nextElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:331:25)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:130:24)\n  at prevChild(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:166:25)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactChildReconciler.js:143:10)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:227:6)\n  at nextNestedChildrenElements(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:345:6)\n  at nextElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:331:25)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:130:24)\n  at prevChild(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:166:25)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactChildReconciler.js:143:10)\n  at prevChildren(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:227:6)\n  at nextNestedChildrenElements(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:345:6)\n  at nextElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js:331:25)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeBaseComponent.js:130:24)\n  at prevComponentInstance(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:166:25)\n  at transaction(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:982:8)\n  at nextParentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:944:34)\n  at transaction(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:847:8)\n  at _currentElement(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:710:6)\n  at prevComponentInstance(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactReconciler.js:166:25)\n  at prevComponentInstance(/home/tomek/qed-workspace/geosurvey.collect.react/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js:982:8). @benvinegar The fix added in 3.14.0 release doesn't seem to work.\nI'm sorry if it's because of the stacktrace I posted before (which was most probably not obtained correctly).\nHere are two raw stacktraces straight from logcat. I hope they will be more useful in resolving the issue (@denstepa's fork still seems to be working fine). I'm using react native v0.42.3\nRN_str_1.txt\nRN_str_2.txt\n. @ajwhite If you still get Source code not found errors you can try using --rewrite option when uploading source map with sentry-cli. ",
    "ptgamr": "@benvinegar I have an android app which also has this issue. I'm happy to provide the dump/printed if you could guide me how to get it?. ",
    "brunolemos": "@denstepa can you help us write a test to get this deployed?. There are libs that get this information, like https://github.com/rebeccahughes/react-native-device-info, but I see #809 wasn't merged, so I'm not sure we can set this somehow. cc @orlando . @orlando thanks for your insight!\nI was able to fully implement it without a fork, here is my solution:\nCode\n```js\nimport DeviceInfo from 'react-native-device-info'\nimport Raven from 'raven-js'\nimport RavenNative from 'raven-js/plugins/react-native'\nimport pkg from '../package.json'\nRavenNative(Raven)\nif (!DEV) {\n  Raven\n    .config('https://...@sentry.io/...', {\n      release: pkg.version,\n      dataCallback: data => {\n        data.contexts = data.contexts || {}\n    data.contexts.device = Object.assign(data.contexts.device || {}, {\n      name: DeviceInfo.getDeviceName(),\n      family: DeviceInfo.getBrand(),\n      model: DeviceInfo.getModel(),\n    })\n\n    data.contexts.os = Object.assign(data.contexts.os || {}, {\n      name: DeviceInfo.getSystemName(),\n      version: DeviceInfo.getSystemVersion(),\n    })\n\n    return data\n  },\n})\n.install()\n\n}\n```\nResult\n\n\n. All right, sentry just released a more complete React Native integration!\nIt will now send device details and catch native crashes.\nhttps://blog.sentry.io/2017/03/14/react-native\nhttps://docs.sentry.io/clients/react-native/\nEDIT: iOS only by now \ud83d\ude12 So the code above is still useful.. @benvinegar I'm not receiving the original second parameter, so I had to do this const _originalDataCallback = Raven._globalOptions.dataCallback.\nBut looking at the code, I think it's because I'm setting the dataCallback at the config method. If I use Raven.setDataCallback the original method will probably be passed.. Confirmed. It's better to use \njs\nRaven.setDataCallback((data, originalDataCallback) => {\nthan pass dataCallback in the config.\nThis way the originalDataCallback will be passed.\nNow I have the same problem as https://github.com/getsentry/sentry/issues/3976 . ",
    "bood": "@benvinegar \nHave this issue too (react-native 0.42.3, raven-js 3.14.1), and here is a raw example I get from the input of computeStackTraceFromStackProp, i.e. ex.stack\nIt looks to me that the issue is that the url part does not have a special origin, so the regex cannot match. What @denstepa's fix does is simply match with a bundle suffix, cannot say it's appropriate or not. Any reason why not we just treat the string between @ and : as the url?\nThis is the one when the bundle lives in asset\nvalue@lexie/main.jsbundle:399:1437\nvalue@lexie/main.jsbundle:399:1130\nvalue@lexie/main.jsbundle:399:1076\nvalue@lexie/main.jsbundle:127:672\nclose@lexie/main.jsbundle:216:291\ncloseAll@lexie/main.jsbundle:134:1270\nperform@lexie/main.jsbundle:134:704\na@lexie/main.jsbundle:227:255\nperform@lexie/main.jsbundle:134:617\nbatchedUpdates@lexie/main.jsbundle:210:485\no@lexie/main.jsbundle:126:412\nrenderComponent@lexie/main.jsbundle:227:1034\nc@lexie/main.jsbundle:173:141\nr@lexie/main.jsbundle:324:116\nrun@lexie/main.jsbundle:320:419\nrunApplication@lexie/main.jsbundle:320:1009\nvalue@lexie/main.jsbundle:30:2778\nlexie/main.jsbundle:30:1013\nlexie/main.jsbundle:30:106\nvalue@lexie/main.jsbundle:30:985\n[native code]\nThis is the one when the bundle lives in cache\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:399:1437\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:399:1130\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:399:1076\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:127:672\nclose@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:216:291\ncloseAll@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:134:1270\nperform@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:134:704\na@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:227:255\nperform@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:134:617\nbatchedUpdates@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:210:485\no@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:126:412\nrenderComponent@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:227:1034\nc@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:173:141\nr@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:324:116\nrun@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:320:419\nrunApplication@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:320:1009\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:30:2778\n/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:30:1013\n/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:30:106\nvalue@/storage/emulated/0/Android/data/com.a.b/cache/bundle/lexie/1.1.0/main.jsbundle:30:985\n[native code]. ",
    "valeryq": "@benvinegar +1. I have this on Android.\nError: CUSTOM ERROR\n  at ? ([native code])\n  at ? ([native code])\n  at ? ([native code])\n  at ? ([native code])\n  at forEach([native code])\n  at ? ([native code])\nFor iOS it's okey:\nError: CUSTOM ERROR\n  at onPress(/Users/vagrant/git/src/routes.js:220:28)\n  at e(/Users/vagrant/git/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js:125:45)\n  at touchableHandlePress([native code])\n  at e(/Users/vagrant/git/node_modules/react-native/Libraries/Components/Touchable/Touchable.js:742:34)\n  at _performSideEffectsForTransition([native code])\n  .... ",
    "chetankothari": "I am still facing the issue. Would like to check on the status of this.\nUsing: \nraven-js: 3.15.0\nreact-native: 0.42.3\nWould be glad to give any additional info required. \nThanks :). ",
    "alexkring": "I am facing this issue as well. It's really a blocker for us right now, given that we cant get crash reports on sentry for android without this working. I'm going to look for a solution, let me know if you guys find anything.. @denstepa's fix mostly works, but the only thing that appears to be off, is that the very top of the callstack, where the exception occurs, is off. It points to the wrong line of code. All of the other parts of the stack trace point to the correct line of code. So maybe his fix works, but there is some other bug as well? . ",
    "f0rr0": "Same here, I tried @denstepa's fix as well. Not working . @benvinegar @MaxBittker when will this be released?. @benvinegar that'll be awesome thanks. @benvinegar any word on that release?. @benvinegar ??. @benvinegar sorry for bugging you, really appreciate this thanks. ",
    "LowieHuyghe": "I can confirm what @alexkring says. Using the Nextdoor/raven-js fork I actually get a stacktrace instead of the [native code]. Also the first row of the callstack indeed seems to be off.. ",
    "mik4el": "Thx for your feedback! The data filters were not active. However I have a hard time recreating the error I got earlier so will close the issue for now.\n. ",
    "ashnamuh": "Sorry, It's issue of raven-node\n. Sorry. It's my mistake. \n. ",
    "NoNameProvided": "After updating every dependency now, and retrying it works. Thanks.\n. Just a heads up, it's compatible now, so the issue can be closed.. ",
    "whatisaphone": "Hey, sorry for the delay, we've been busy here.\nEither I made a typo, or that was a difference between typescript 1.x and 2.0. I added the modifier it was complaining about, and it now works fine with typescript@2.0.6.\n. @LucaVazz Yep, this can be closed. While Typescript support is being looked at, I'd like to reflag my PR #736 from last year. Right now we're stuck on raven-js@3.2.0 because of this issue. After that version there was a regression and RavenOptions changed from exported to private.\nEven in that old version, we have to import it in a very hacky way:\nimport { RavenOptions, RavenStatic } from 'raven-js';  // this is messy because we're waiting on a raven-js bugfix\nconst Raven: RavenStatic = require('raven-js');  // tslint:disable-line\n\nIdeally with proper typings, we'd be able to do something like this:\nimport Raven, { RavenOptions } from 'raven-js';\n\nexport function captureMessage(msg: string, options?: RavenOptions) {\n    Raven.captureMessage(msg, options);\n}\n\nMy PR #736 demonstrates how this can be done.. Hi, I'm the author of #736 from last year. Our company uses typescript extensively. We have a project that is currently stuck on raven-js@3.2.0. Today I tried this swapping in this PR via git+https://github.com/polco/raven-js.git#7822eed5d747ab073d20017bc335cd06de73a827. I verified that no existing code breaks, and that it restores the ability to access the types (using the same code we currently use on 3.2.0). It also updates the tests, which is an improvement over my quick and dirty PR.\nYou can see a simplified diff here that highlights what the real changes are. The approach taken by this PR is the same approach I've seen taken for other libraries that support being used both via a global and a module, such as sinon and [lodash]. (module and namespace mean the same thing in typescript.)\nAs far as I'm aware, exposing the types in this manner has no negative effects, and will not cause any changes for existing users of the library. Is there anything I can do to help get this merged?\n[lodash]: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/298a8afdbb74605296b47e24bae15cdc527fa1f0/types/lodash/index.d.ts#L241. @MaxBittker \nNo problem, glad to help!\n@LucaVazz \nThat PR contains export default Raven; which is incorrect. There are two ways of declaring a default export in JS:\n\nMethod one, CommonJS:\nCommonJS export \u2013 module.exports = <object>\nCommonJS import \u2013 var Raven = require('raven-js')\nES6 import \u2013 import * as Raven from 'raven-js'\n\nTypeScript declare export \u2013 export = Raven\n\n\nMethod two, ES6:\n\nCommonJS export \u2013 exports.default = <object>\nCommonJS import \u2013 var Raven = require('raven-js').default\nES6 import \u2013 import Raven from 'raven-js'\nTypeScript declare export \u2013 export default Raven\n\nThis library uses method one and so the declared export is already correct.\nThe rest of the PR doesn't look offensive to me, but I don't know enough about Sentry to say whether it's all correct. Ideally all the new definitions should have tests to go along with them.. ",
    "LucaVazz": "With #977 this could be closed, right @johnsoft?. You are right, wired that I somehow didn't catch that RavenUserContext is also used for the \"general\" Context-Information about the user...\nWhile we are at it: I also just noticed that RavenUserContext lacks the ip_address-member.. I think L31-33 shows the correct way to declare the extra Key/Value-Interface.\nAlthough I don't understand, why @connor4312 did not declare it the same way a few lines down for extra... Maybe he can clarify this?. And yet another minor thing I noticed while reading through: RavenGlobalOptions and RavenOptionsboth have a memberstacktrace. It should therefore be moved intoCommonRavenOptions`.\nNot related to raven.d.ts: It is correct with respect to the actual js-source, that the global options except a member named serverName while the \"local\" options when sending an error except server_name. (See here) But why? Is this really intended or a Bug?. @benvinegar Can you clarify this, I'm also not sure if extra can take anything or just key/value-pairs?. okay, then any is the right chocie, as is noted in the TypeScript Documentation about .d.ts-Files:\n\nIf you\u2019re tempted to use the type Object, consider using any instead. There is currently no way in TypeScript to specify an object that is \u201cnot a primitive\u201d.. Yeah, that should do it. As you said, it should be typed as strict as possible.. I have an update nearly finished. Would you rather have it appended to this PR or as a new one?. If I remember it correctly, a tsconfig.json is needed in ./typescript to successfully run tsc; somehow the file got lost...\nI will add it later. \nAs far as I can tell you are invoking tsc correctly nonetheless.\n\nRavenJS is only a local name inside raven-tests.ts, so it should be possible to change it without a problem. \n. I took me a little longer then I expected to get around to doing this...\nNow tsc works without errors and I made any wherever I could more specific.. Regarding SystemJS: On the one hand I don't see a reason why the way you outlined wouldn't work anymore.\nOn the other hand I'm unfortunately not really experienced with SystemJS so someone else should better verify it..... the last two commits integrated changes suggested by @evilj0e in https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14674. see #827 (specifically here). I think with #977 this is now fixed and this PR could be closed. Do you agree @Bashek?. With #977 this should be already fixed. Do you agree with that and closing the PR @jimmythecoder?. As @benvinegar said in #898, the updated TS-Definitions are currently on hold an reverted out of the latest realese because of problems when importing them. I'm sorry for the inconvenience, hopefully it is fixed soon.. Ouch, I'm really sorry to have caused this trouble.\n@graingert could you please open a PR with the CJS-Variant you suggested to get it fixed?. @polco @johnsoft This should make it possible to re-merge #827 to get the extended typings, right? Could you please verify that?. But if the overload is removed, the difference in the documentation is lost.\nAs the function behaves (a bit) differently, if you pass it nothing or a RavenUserContext, I wanted to also reflect that in the inline-/tooltip -documentation. It sure is...\nI will look into it again if it is (reasonably) possible to be more specific about the data passed to these various callbacks. That was not intentional. \nAs to why it did happen... Good question.. Regarding the RavenUserContext or RavenBreadcrumb?. Well, I agree with what @connor4312 previously said: More specific type definitions are always better.\nUnfortunately I don't see a way to compress the type definitions for Raven more...\nOne way to ensure a bit easier maintainability would be to switch the main Raven-JS to TypeScript. It wouldn't be a change that drastically, especially considering that TypeScript transpiles down to vanilla JS in the end.. No, this tsconfig settings only define the structure and compilerOptions for this module. Users should be able to import the module fine as long as our type definitions are correct, regardless if their project's tsconfig settings match these or not.\nIn my opinion this is still a non-breaking change, as long as users used the interface correctly. I didn't change anything major at the tests (as I said, the Deletion was unintentional) and they still pass.. okay then ;)\nBut still, I don't think that it would be that hard to maintain this file onwards. In my opinion it is \"just\" another documentation of the Raven Module, like a more specific version of JSDoc which you already use.\nMaybe @connor4312 has some additional opinion...?\n. fixed in 1f55f01c57428510b95bb02e07e5ab195fcc6102. fixed in 3e51fc6af572f038fd2c0ed9d9119325b6247908. I think that is a really good idea @connor4312!\nI have added a Proposal for a PR-Template which includes that. What do you think of it @benvinegar?. I just noticed that in fact it already is called directly by npm test \ud83d\ude01 . I see, then I will try that in a separate Request.. ",
    "combmag": "error.originalException is undefined. What i had to do is error.stack to push the stack trace but then i'm not sure how to push the stack trace to raven since `Raven.captureMessage`` has only a message and options (which according to the typings there is no stack trace option\n. hey @benvinegar i recreated the pr at https://github.com/getsentry/raven-js/pull/746 \n. @benvinegar this is the pr for the typings\n. ",
    "cesarlvielma": "I solved it partially using  err instead err.originalError\nclass RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    Raven.captureException(err);\n  }\nanyway , some errors do not show origin issue code, \n@benvinegar  Using Full option , show me only vendor stack trace (Angular2 for this case) and not my .ts file where error is coded. \n. I have configured my source maps correctly, i know that because i am able to see now some errors correctly like : \n\nBut some errors appears do not show me origin issue code like : \n\nUsing 'err.originalError' fails for me  as i said above, Err.originalError is undefined when i show it on console. I am using 'err' instead and i am able to see some errors like first image. If i can get a piece of code to reproduce it , i will to post it. \nAny way thanks to your response.\n. ",
    "vintage": "I've just integrated raven-js in my Ionic 2 project. I didn't really have any problems installing it and configuring. I've followed the instruction from https://docs.sentry.io/clients/javascript/integrations/angular2/  and the only change is to skip SystemJS configuration and to import Raven like this:\nimport Raven from 'raven-js';\nOther than that the magic just happened and it works.\n. Hey @davorpeic I'm also using RC1 currently. Here is my full config from app.module.ts. I didn't do any changes in any other file in the project to make the Raven works. Let me know if it doesn't solve your problem!\n```\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { Http, HttpModule } from '@angular/http';\nimport { IonicApp, IonicModule } from 'ionic-angular';\nimport { Storage } from '@ionic/storage';\nimport { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate/ng2-translate';\nimport Raven from 'raven-js';\nimport { MyApp } from './app.component';\n// Pages\nimport { AboutPage } from '../pages/about/about';\nimport { AchievementListPage } from '../pages/achievement-list/achievement-list';\nimport { CountryListPage } from '../pages/country-list/country-list';\nimport { HighscorePage } from '../pages/highscore/highscore';\nimport { HighscoreGeneralPage } from '../pages/highscore/highscore-general/highscore-general';\nimport { HighscoreMonthlyPage } from '../pages/highscore/highscore-monthly/highscore-monthly';\nimport { HighscoreDailyPage } from '../pages/highscore/highscore-daily/highscore-daily';\nimport { HighscoreHardcorePage } from '../pages/highscore/highscore-hardcore/highscore-hardcore';\nimport { MainMenuPage } from '../pages/main-menu/main-menu';\nimport { ScoreSubmitPage } from '../pages/score-submit/score-submit';\nimport { SettingsPage } from '../pages/settings/settings';\nimport { ShopPage } from '../pages/shop/shop';\nimport { TutorialPage } from '../pages/tutorial/tutorial';\nimport { GamePage } from '../pages/game/game';\nimport { GameHardcorePage } from '../pages/game-hardcore/game-hardcore';\n// Components\nimport { AnswerButton } from '../components/answer-button/answer-button';\nimport { GameSlot } from '../components/game-slot/game-slot';\nimport { GameStats } from '../components/game-stats/game-stats';\n// Components (game types)\nimport { ItemRecipeGame } from \"../components/game-types/item-recipe/item-recipe\";\nimport { ItemPriceGame } from \"../components/game-types/item-price/item-price\";\nimport { ChampionSkillsGame } from \"../components/game-types/champion-skills/champion-skills\";\nimport { ChampionAttackTypeGame } from \"../components/game-types/champion-attack-type/champion-attack-type\";\nimport { SkillChampionGame } from \"../components/game-types/skill-champion/skill-champion\";\nimport { ChampionNameGame } from \"../components/game-types/champion-name/champion-name\";\nimport { ChampionTitleGame } from \"../components/game-types/champion-title/champion-title\";\nimport { ChampionNationGame } from \"../components/game-types/champion-nation/champion-nation\";\n// Pipes\nimport { PointsPipe } from '../pipes/points';\nimport { TimeLeftPipe } from '../pipes/time-left';\n// Services\nimport { AchievementService } from '../providers/achievement/service';\nimport { AdService } from '../providers/ads/service';\nimport { ChampionService, SkillService } from '../providers/champion/service';\nimport { CountryService } from '../providers/country/service';\nimport { GameplayService } from '../providers/gameplay/service';\nimport { ItemService } from '../providers/item/service';\nimport { MusicService } from '../providers/music/service';\nimport { ScoreService } from '../providers/score/service';\nimport { SettingsService } from '../providers/settings/service';\nimport { ShopService } from '../providers/shop/service';\nimport { GameTypeService } from '../providers/game-type/service';\nRaven\n  .config('https://xxx@sentry.io/yyy')\n  .install();\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    Raven.captureException(err.originalError);\n  }\n}\nlet appConfig = {\n  statusbarPadding: false,\n  backButtonText: '',\n  prodMode: true\n};\nexport function createTranslateLoader(http: Http) {\n  return new TranslateStaticLoader(http, './assets/i18n', '.json');\n};\n@NgModule({\n  declarations: [\n    MyApp,\n// Pages\nAboutPage,\nAchievementListPage,\nCountryListPage,\nHighscorePage,\nHighscoreGeneralPage,\nHighscoreMonthlyPage,\nHighscoreDailyPage,\nHighscoreHardcorePage,\nMainMenuPage,\nScoreSubmitPage,\nSettingsPage,\nShopPage,\nTutorialPage,\nGamePage,\nGameHardcorePage,\n\n// Pipes\nPointsPipe,\nTimeLeftPipe,\n\n// Components\nAnswerButton,\nGameSlot,\nGameStats,\n\n// Components (game types)\nItemRecipeGame,\nItemPriceGame,\nChampionSkillsGame,\nChampionAttackTypeGame,\nSkillChampionGame,\nChampionNameGame,\nChampionTitleGame,\nChampionNationGame\n\n],\n  imports: [\n    IonicModule.forRoot(MyApp, appConfig),\n    HttpModule,\n    TranslateModule.forRoot({ \n      provide: TranslateLoader,\n      useFactory: (createTranslateLoader),\n      deps: [Http]\n    })\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    AboutPage,\n    AchievementListPage,\n    CountryListPage,\n    HighscorePage,\n    HighscoreGeneralPage,\n    HighscoreMonthlyPage,\n    HighscoreDailyPage,\n    HighscoreHardcorePage,\n    MainMenuPage,\n    ScoreSubmitPage,\n    SettingsPage,\n    ShopPage,\n    TutorialPage,\n    GamePage,\n    GameHardcorePage,\n// Game types\nItemRecipeGame,\nItemPriceGame,\nChampionSkillsGame,\nChampionAttackTypeGame,\nSkillChampionGame,\nChampionNameGame,\nChampionTitleGame,\nChampionNationGame\n\n],\n  providers: [\n    { provide: ErrorHandler, useClass: RavenErrorHandler },\n    Storage,\n    AchievementService,\n    AdService,\n    ChampionService,\n    SkillService,\n    CountryService,\n    GameplayService,\n    ItemService,\n    MusicService,\n    ScoreService,\n    SettingsService,\n    ShopService,\n    GameTypeService\n  ]\n})\nexport class AppModule {}\n```\n. ",
    "kleeb": "anyone tried integrating with rollupJS?\ngetting\nrollup failed: 'Raven' is not exported by node_modules/raven-js/src/singleton.js\nusing Ionic2 with Angular2, \nadded such settings: in commonjs rollup plugin\ninclude: ['node_modules/raven-js/**']\nnamedExports: {'node_modules/raven-js/dist/raven.js': ['raven-js']}. Thanks Chris.\nI am doing it slightly different in the Ionic project:\nin copy.config.js I added copy job\ncopyRaven: {\n    src: ['{{ROOT}}/node_modules/raven-js/dist/raven.min.js', '{{ROOT}}/node_modules/raven-js/dist/raven.min.js.map'],\n    dest: '{{BUILD}}'\n  }\nand simply added raven.min.js to the index.html. . ",
    "umbrae": "@kleeb delayed but just FYI I got this working with rollup - I was having that error when it wasn't being pulled through the commonjs plugin.\nOnce I had:\njavascript\ncommonjs({\n  include: \"node_modules/raven-js/**\"\n})\nIn my plugins in my gulpfile, it built and imported just fine with import Raven from \"raven-js\";.\nI'm using rollup-plugin-commonjs 8.0.2.. ",
    "mikelambert": "I've built RN extensions for uploading JS extensions to trackjs and crashlytics that work, but have heard good things about Sentry's support of sourcemaps, so was interested in exploring it. But given the drop-in nature of what I build for the other two systems, it's hard for me to justify attempting to build a third system given the state of the docs and the amount of trial-and-error and manual work-per-release I'd expect I'd be doing to get it to work. Thus the desire for an end-to-end example (even if it's just a production app I can peek at source for)\n. Sorry, I should have been clearer. Here's my longer story.\nI built trackjs and crashlytics RN wrappers 4-5 months ago in beginning my RN journey, as those were familiar to me pre-RN. I'm not honestly sure why I didn't consider Sentry at the time (unaware of it? pricing concerns? did it lack RN support?)\nNeither trackjs nor crashlytics have sourcemap support. And one RN-fabric-crashlytics contributor (who was adding sourcemap support) has mentioned Sentry does a much better job here. So given my personal interest in sourcemaps for my app, I am looking into Sentry.\nBy drop-in usage, I meant react-native-trackjs and react-native-fabric-crashlytics can be used like this and start reporting exceptions:\nimport X from 'react-native-X';\nX.init(...);\nIt's not fair to compare them, given that sourcemaps require additional support to upload in Sentry, which neither of those do. But I believe that uploading can be done via the build scripts, and hopefully relatively easily. For example, Crashlytics does it with a run script you add to ios build, and with a gradle plugin that does it on android builds:\nhttps://fabric.io/kits/ios/crashlytics/install\nhttps://fabric.io/kits/android/crashlytics/install\nI was hoping to do something similar here (since I do not want to upload sourcemaps manually every time I do a release, as I'm likely to forget them until it's too late). But lacking an end-to-end example, I was anticipating a lot of trial-and-error setup, before I could even get to writing something that automates the process for me. And sourcemaps weren't that critical to me yet, to dive down that rabbit hole... :)\n. ",
    "maxcodes": "Thanks for looking into this @benvinegar. I also got stumped by \"artifacts\" and had to contact support. Please update this issue when the example is ready :)\n. ",
    "thomsbg": "Integration test added!\n. ",
    "niftylettuce": "@benvinegar go here and click ADD on any product on the right https://ourharvest.com/recipes/chicken-lettuce-wraps-1453850615/\n. Thanks @MaxBittker \n. Wow, can't believe I made the same mistake twice here, so many packages.  Will open in raven-node... ",
    "alexbonhomme": "Hey!\nDid you get something new  @benvinegar ?. ",
    "nwestfall": "I can confirm this is happening in an electron project as well\nRaven.captureException(\"Sentry Feedback Error\")\nRaven.showReportDialog()\nIn console\n\nFailed to load resource: the server responded with a status of 403 (FORBIDDEN). \n",
    "timfish": "Ditto. It would be great to have this working in Electron and Cordova, the two main platforms we're targeting.... Ah, should have checked the v5 branch first!. ",
    "bboldi": "I have tried the same thing with ionic (cordova) it works from browser, does not work when run on android / ios . ",
    "sashahilton00": "Have just stumbled across this whilst using Electron, here is the solution that I am using:\n```\nconst {app, BrowserWindow, session} = require('electron')\nfunction setup () {\n  session.defaultSession.webRequest.onBeforeSendHeaders((details, callback) => {\n    details.requestHeaders['Origin'] = 'www.example.com'; //Set the Origin to whatever you want.\n    callback({ cancel: false, requestHeaders: details.requestHeaders });\n  });\n}\napp.on('ready', setup);\n```\nN.B. This will add an Origin header to all requests in Electron.. ",
    "leroydev": "Any news on a way to fix this for Cordova? \ud83d\ude03 . @kamilogorek That involves deploying the secret key to all end devices, which doesn't seem like the cleanest fix... @HazAT I might be overlooking something, but it seems like the Sentry Cordova client library hasn't got support for showReportDialog yet (which would make this issue still relevant).. ",
    "Chuckv01": "@davorpeic not exactly. I ended up including the library the old-fashioned way using script tags in index.html.\n. ",
    "bertyhell": "Cool, thx\nAt least I feel a little useful then :)\nOn Fri, Nov 11, 2016, 01:50 Ben Vinegar notifications@github.com wrote:\n\n@bertyhell https://github.com/bertyhell \u2013 I updated the README here\nhttps://github.com/getsentry/raven-js/commit/e52a0a7724c0c92272c48c088ec73f334b9741d0.\nNote that I probably wouldn't have done so without your PR, so thanks.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/754#issuecomment-259851925,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABoa-Ho4K0RS2ea0f7PJJhWs6TGGbr3Zks5q87u_gaJpZM4KjTlt\n.\n. \n",
    "Looveh": "From my understanding this should have been fixed by #626 but a relaunch doesn't send any stashed reports either.\n. Just tested on iOS and the problem seems to be the same there\n. Confirmed to occur on React Native v0.35.0 for me.\nNew to Sentry.\n. ",
    "vikeri": "Experiencing the same issue\n. ",
    "briancalvium": "Any update on this? I am trying this out and have only been able to get errors working in DEV on iOS\n. New to sentry as well, using raven-js 3.8.1, RN 0.27.2. ",
    "dugwood": "Sorry to bother you, but I'm seeing the exact same issues since I've installed Prebid.js on my website. I caught errors in a dedicated script, but I can't figure out what is causing this. Do you have more info in your Sentry's log?\nThe error only occurs on iOS devices, AFAIK. Including iPhones, so the 3rd-party extension doesn't seems to be the issue here.\n. @suavelizard do you manage to see it in your console? If so, can you point us to a demo of your application? I'll narrow it down :-)\n. Same thing in my debug code, line 1, column is random, on the main url. Seems like an inline code... And a real bug in iOS, for a specific Javascript code.\n. @CanRau can you run a console.log(el) to see what you have in the el.parentNode?\nDoes this function exist in your own code or it's part of something else? Everyone here has the issue on elt, without an elt variable anywhere. But your issue may help understanding the issue we're facing.\n. I'll try the same code on a Safari of one iPhone I have here... hoping it'll trigger the same behaviour! Thanks for the code!\n. ",
    "suavelizard": "I got the same issue also on iOS/Safari with an Angular application. No way to track this down.\n. No I'm also only getting it through Sentry\nTypeError: null is not an object (evaluating 'elt.parentNode')\n  at ? (/cart:1:351)\n  at global code(/cart:1:1238)\nI think it may be something to do with an input field.\n. Breadcrumbs:\n- ui.click\n  footer.page-footer.ng-scope > div.email-capture.row.ng-scope\n  TypeError: null is not an object (evaluating 'elt.parentNode')\n- ui.click\n  div.email-capture.row.ng-scope > div#email-section > p\n  exception\n  TypeError: null is not an object (evaluating 'elt.parentNode')\n. ",
    "CanRau": "i'm not using sentry but my own little window.onerror handler is sending me the same message, coming from an ipad running safari, as i've got only one js file I think I tracked it down to this helper function\n```\n    function remove(el) {\n        if (!el.parentNode) return false;\n    return el.parentNode.removeChild(el);\n}\n\n```\nline number and column number point to this function even though in the function it's el.parentNode and not elt.parentNode\nso maybe this info might help someone to track this down\n. hmm the thing is I got this error by mail so I can't reproduce it myself right now and just placing console.log(el) in production might lead to other issues, besides it's not my console^^\nso i would have to add the output to the error being sent..\nmaybe you got a hint?\n. sounds valid..but my error message told me line and column which referenced the remove function above, could be coincidence though...\nI thought safari is not actually renaming or rewriting the script but the error reference?!\n. ",
    "Yann577": "I am also trying to find what causes this. We have some stats on our website that shows this started happening on October 25th, the day after Apple and Safari got updates:\nhttps://support.apple.com/en-ca/HT201222\nIt also happens exclusively on Safari on IOS on our side, according to the requests User-Agent\n. ",
    "kerrpeter": "I get a similar error message occasionally on Safari on IOS devices and they first started on Oct 26th.\nHowever I don't actually use Sentry, I use my own logging of any Javascript errors. So it sounds like this is coming form some update  as Yann577 mentions, but I've no idea what.\n. ",
    "tobsn": "I found this post here by googling for the error... I'm not using raven but I have the same issue popping up starting at the same mentioned time. I'm using jquery, sisyphus, mixpanel, jquery.inputmask, jquery.blockUI, and bootstrap on the page and there is no elt.parentNode in ANY of those sources, I looked everywhere.\nAt the same time I'm also seeing these errors coming in right after each other only from iPhone/iPad:\nTypeError: null is not an object (evaluating 'document.getElementById('top-ad').style')\nTypeError: null is not an object (evaluating 'document.getElementById('mojivaiframediv').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_banner').style')\nTypeError: null is not an object (evaluating 'document.getElementById('q-footer').style')\nTypeError: null is not an object (evaluating 'document.getElementById('ads_top').style')\nTypeError: null is not an object (evaluating 'document.getElementById('aframe0').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_adTop').style')\nTypeError: null is not an object (evaluating 'document.getElementById('bannerad').style')\nTypeError: null is not an object (evaluating 'document.getElementById('adSpace').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_topAd').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_banner').style')\nTypeError: null is not an object (evaluating 'document.getElementById('bannerad').style')\nTypeError: null is not an object (evaluating 'document.getElementById('ads_top').style')\nTypeError: null is not an object (evaluating 'document.getElementById('aframe0').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_topAd').style')\nTypeError: null is not an object (evaluating 'document.getElementById('mojivaiframediv').style')\nTypeError: null is not an object (evaluating 'document.getElementById('q-footer').style')\nTypeError: null is not an object (evaluating 'document.getElementById('adSpace').style')\nTypeError: null is not an object (evaluating 'document.getElementById('wid_adTop').style')\nTypeError: null is not an object (evaluating 'document.getElementById('top-ad').style')\nMy guess is that all those errors and the elt.parentNode is caused by some adblocker... along the errors above I now constantly see from Android devices:\nUncaught SyntaxError: Unexpected identifier\nNot sure whats going on, those errors started popping up over the last 2 weeks from pages that had no errors thrown since they were put live.\n. See above, seeing this exclusively on iOS 10 latest public stable (iPhone/iPad).\nFunny enough i tested with 5 devices and it didn't happen. FYI it's sometimes a web view sometimes not.\n. ",
    "borg4242": "Chiming in as I see the same problem on prod sites + have some supplemental info + this thread is the #1 result on Google.\n- We only see this with Safari 600.1.4 (iOS 8?).\n- We managed to get the call stack but it's not very helpful:  {/hereisourpageurl/:1:351 global code@/hereisourpageurl/:1:1238}.\n- Our HTML doesn't have JS in the first few lines so these numbers don't make sense in that context.\n- We're not using Santry and mostly using established JS libs like jQuery -- nothing bleeding edge. Our code doesn't have elt.parentNode anywhere, not in the libraries we use either.\n- We do use New Relic that is known to inject JS in the code and it does have e.parentNode, but it does not inject it to the first line and e.parentNode is around column 12000 so it's probably not the culprit.\nI'd wager this is an iOS 8 Safari specific issue, for some code that's written in JS and injected into the HTML. Could be someone using iOS Safari behind some corporate firewall that injects JS that is not compatible with iOS8?\n. ",
    "lucke84": "Some more data from yet another website's traffic (got it via the magical sentrycli by Opera):\n+---------------------+--------+-----------+-------+------+\n| browser             | device | os        | count |    % |\n+---------------------+--------+-----------+-------+------+\n| Mobile Safari 9.3.5 | iPad   | iOS 9.3.5 |   231 | 73.1 |\n| Mobile Safari 8.1.3 | iPad   | iOS 8.1.3 |    21 |  6.6 |\n| Mobile Safari 8.3   | iPad   | iOS 8.3   |    16 |  5.1 |\n| Mobile Safari 8.1.2 | iPad   | iOS 8.1.2 |    15 |  4.7 |\n| Mobile Safari 9.3.4 | iPad   | iOS 9.3.4 |    11 |  3.5 |\n| Mobile Safari 9.3.3 | iPad   | iOS 9.3.3 |    10 |  3.2 |\n| Mobile Safari 9.3.2 | iPad   | iOS 9.3.2 |     8 |  2.5 |\n| Mobile Safari 9.3.5 | iPhone | iOS 9.3.5 |     2 |  0.6 |\n| Mobile Safari 8.1.1 | iPad   | iOS 8.1.1 |     1 |  0.3 |\n| Mobile Safari 8.1   | iPad   | iOS 8.1   |     1 |  0.3 |\n+---------------------+--------+-----------+-------+------+\nTotal: 316\n. ",
    "bflora2": "I have been receiving a lot of these same error reports as well (I do not use Sentry).\n- They started by at least Oct 28 (maybe a little earlier, some of my earlier reports have already been deleted)\n- The error is being received from iOS 8, 9, and 10\n- The error ONLY occurs on Safari 600.1.4\n- The error ONLY occurs for users agents that contain \"GSA/20.3.136880903\"\n- The error occurs well after my page has finished loading, but I don't know what triggers it\n- The error is occurring for less 1% of my iOS visitors, but IP addresses that report the error tend to report it again in later sessions\nThis leads me to believe Safari 600.1.4 introduced a change that broke someone's browser extension (GSA?). I plan to filter the error and ignore it.\n. ",
    "paknudsen": "Getting thousands of these errors. \n@bflora2 seems to be spot on.. ",
    "umair1191": "I am getting the same error for IPads \nTypeError\nnull is not an object (evaluating 'elt.parentNode') I am using Sentry and in the details it shows:\nRemote file took too long to load: (15s, https://www.*********.com/******_form.php?opt=MA==) Collapse \n{\n  \"url\": \"https://www.**********.com/*******_form.php?opt=MA==\",\n  \"timeout\": 15\n}\nscreenshot\n. ",
    "wuservices": "I'm getting this issue too. Similar report at https://discuss.newrelic.com/t/typeerror-null-is-not-an-object-evaluating-elt-parentnode/43075. @borg4242 said he was using New Relic browser and I am also, but are all of you?\nBuilding off the comment by @bflora2, the GSA in the user agent seems very key here and I've looked at a handful of instances of my errors and this lines up. The IPs were from various home ISPs too, so some kind of appliance (especially one that could MITM and add code) wouldn't make sense.\nhttp://superuser.com/questions/739863/ipad-user-agent-changes-depending-on-location-work-home indicates that GSA means Google Search App on iOS. The errors I'm getting are all from iOS 10.0-10.1.1 so this would make perfect sense. I'm not sure how the app works, but maybe it can inject code into the web view and perhaps that's what's erroring out.\nI fired up the simulator to try and reproduce this initially, but since it seems GSA related, I can't test without an actual iOS device since you can't install apps in the simulator.\nAnybody care to verify this hypothesis?. ",
    "jgstratton": "I'm seeing the same elt.parentNode in my bug reports.  Always GSA on iOS. Like wuservices, I don't have a device to test this on.. ",
    "pembo13": "Just wanted to add to this. I'm using Rollbar for my monitoring, and I'm also catching this error on iPhones. No trace of this particular reference in the project code however.. ",
    "Terbiy": "Here is one more GSA. In last 100 events in our project the most repeated one was GSA/21.1.139288856.. ",
    "mrredbit": "Seems to be related to zoom in/out in the GSA. Whenever I zoom in/out my website, this event triggered.. Hi knorthfield, try zooming in/out in the GSA. Whenever I simply zoom in/out my website with no browser extensions, this event triggered, hope this help.. ",
    "Paxa": "We ran into same issue, it happen when open page with Google app for iphone  https://itunes.apple.com/us/app/google-app-search-made-just/id284815942?mt=8 \nBut website working just fine, so we just ignore it. shouldSendCallback should help you.\njs\nRaven.config('https://<key>@sentry.io/<project>', {\n  shouldSendCallback: function (data) {\n    // do something with data.exception\n  }\n}).install();. ",
    "elicia-nc": "We're hitting our quota in Sentry due to so many of these events. Is there a way to filter this event? Ignoring the event still counts toward the quota.. ",
    "Antman261": "Why not\nRaven.config('https://<key>@sentry.io/<project>', {\n  ignoreErrors: [ \"null is not an object (evaluating 'elt.parentNode')\" ]\n}).install();\nIntuitively I would expect ignoring at this level should prevent the event being sent, while ignoring from the Sentry dashboard would stop it from cluttering the UI but still count towards the quota?. ",
    "stonyau": "After a few hours of \"investigation\", I accidentally found out that the only way you can reproduce this bug is simply downloading \"Google Search\" on your iPhone. I guess someone has figured it out.. ",
    "heejongahn": "I'm getting multiple null is not an object (evaluating 'element.tagName') errors in my project. The code I've written doesn't reference any of element.tagName at all(lib codes might). Maybe it could be related to this issue and I could just ignore it, I guess?. ",
    "arya-s": "I'd like to contribute this, but would need some pointers.\nMy idea was to set it inside showReportDialog as an option, but since the actual modal lives on the sentry backend and is embedded via a script tag, I wasn't sure how to pass it on.\nMaybe have it set on window.Raven and then in the backend check if window.Raven exists and if so, check if there's an onClose callback? \n. ",
    "NugzarGaguliya": "I think it will be very useful! Please, implement this.. ",
    "GeeWee": "This would be a wonderful addition, to e.g. reload the page after submissions.. ",
    "jessla": "@mattrobenolt I don't have write access to this repo so I can't merge :upside_down_face: \ud83c\udf55 \n. one of the diffs looks funky because I switched the file names:\nangular.rst -> angularjs.rst\nangular2.rst -> angular.rst. > Looks good, but I think we should clarify that \"Angular\" is \"Angular 2+\" somewhere. The naming scheme is newly introduced and I'm not sure everyone will piece it together.\nI added https://github.com/getsentry/raven-js/pull/928/commits/b43bcd99c876726a9f38acde5dcdffd735bd1707 and https://github.com/getsentry/raven-js/pull/928/commits/476e57588dd2edf8700e2c0059ce77764f71f91d to address this. also fixed references in docs/sentry-doc-config.json\nhttps://github.com/jessla/raven-js/commit/0bbaccc8c23936ff8f862406a2a72a04b2697981. ",
    "Luke-SF": "This is a serious issue, if for example you have some jQuery ajax that due to some network issue or temporary problem takes minutes or never complete, an error is never ever sent through Sentry!. ",
    "amureki": "@benvinegar thank you! Can you also update documentation for this? . ",
    "joshjeong": "created a PR\n. ",
    "beck": "\nIMHO this implementation is too naive to be useful\n\nThis would stop the bleeding.\nFor my use-case, the platform is a site builder and sometimes raven-js picks up a user's 3rd party failures. I'm brought to this ticket because the latest event resulted in ~40k events, which hits the rate limit, stats look like the platform is down, and legitimate events are dropped.\nThis would allow us to set an upper-bound on the pathological scenarios.. Using Sentry.io, the overage fees are priced per event, making this feature is essential. Especially if the consuming platform limits the ability to use whitelists, blacklists, and filters to cull all abusive scenarios.. ",
    "sjafri5": "{\"id\":\"14c7e18582fa4f1284ee5f2d338f060e\",\"project\":2,\"release\":\"0.1.1\",\"platform\":\"javascript\",\"culprit\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle in captureException\",\"message\":\"test error rj\",\"datetime\":\"2016-11-17T16:18:18.000000Z\",\"time_spent\":null,\"tags\":[[\"level\",\"error\"],[\"logger\",\"javascript\"],[\"sentry:release\",\"0.1.1\"],[\"sentry:user\",\"ip:10.0.2.2\"]],\"errors\":[{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"},{\"url\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"type\":\"js_no_source\"}],\"extra\":{\"session:duration\":51667},\"fingerprint\":[\"{{ default }}\"],\"metadata\":{\"title\":\"test error rj\"},\"received\":1479399498.0,\"sdk\":{\"client_ip\":\"10.0.2.2\",\"version\":\"3.8.0\",\"name\":\"raven-js\"},\"sentry.interfaces.Breadcrumbs\":{\"values\":[{\"category\":\"console\",\"timestamp\":1479399446.167,\"message\":\"Running application \\\"buffet_ios\\\" with appParams: {\\\"rootTag\\\":1,\\\"initialProps\\\":{\\\"fakeIFrame\\\":\\\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/fakeIFrame.html\\\",\\\"host\\\":\\\"172.16.3.132\\\"}}. __DEV__ === false, development-level warning are OFF, performance optimizations are ON\",\"type\":\"default\",\"level\":\"log\"},{\"category\":\"sentry\",\"level\":\"error\",\"event_id\":\"1ba37bbc03c4467b8689d123038c0e97\",\"timestamp\":1479399446.321,\"message\":\"test error rj\",\"type\":\"default\"},{\"category\":\"console\",\"timestamp\":1479399446.331,\"message\":\"test error rj\",\"type\":\"default\",\"level\":\"error\"},{\"category\":\"sentry\",\"level\":\"error\",\"event_id\":\"44f0c782c0e5456f9f2fe74eab8a23a5\",\"timestamp\":1479399446.345,\"message\":\"component did mount!\",\"type\":\"default\"},{\"category\":\"fetch\",\"timestamp\":1479399446.347,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443/api/v1/dashboard?timezone=CST\",\"status_code\":\"200\",\"method\":\"GET\"}},{\"category\":\"xhr\",\"timestamp\":1479399448.939,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443/api/v1/dashboard?timezone=CST\",\"status_code\":\"200\",\"method\":\"GET\"}},{\"category\":\"fetch\",\"timestamp\":1479399479.076,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443//login\",\"status_code\":\"null\",\"method\":\"POST\"}},{\"category\":\"xhr\",\"timestamp\":1479399479.571,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443//login\",\"status_code\":\"0\",\"method\":\"POST\"}},{\"category\":\"console\",\"timestamp\":1479399479.572,\"message\":\"errror huh Network request failed\",\"type\":\"default\",\"level\":\"log\"},{\"category\":\"fetch\",\"timestamp\":1479399496.026,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443//login\",\"status_code\":\"200\",\"method\":\"POST\"}},{\"category\":\"xhr\",\"timestamp\":1479399497.707,\"type\":\"http\",\"data\":{\"url\":\"https://172.16.3.132:8443//login\",\"status_code\":\"200\",\"method\":\"POST\"}},{\"category\":\"console\",\"timestamp\":1479399497.708,\"message\":\"recovery failed\",\"type\":\"default\",\"level\":\"log\"}]},\"sentry.interfaces.Message\":{\"message\":\"test error rj\"},\"sentry.interfaces.Stacktrace\":{\"has_system_frames\":true,\"frames\":[{\"abs_path\":\"[native code]\",\"in_app\":true,\"filename\":\"[native code]\"},{\"function\":\"value\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":1297,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"b\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":602,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":1351,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"value\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":2142,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"b\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":602,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":61,\"colno\":2177,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"callImmediates\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":64,\"colno\":1942,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"callImmediatesPass\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":64,\"colno\":1828,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"callTimer\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":64,\"colno\":689,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":68,\"colno\":944,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":196,\"colno\":891,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"u\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":196,\"colno\":137,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":380,\"colno\":1393,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"value\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":380,\"colno\":2004,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"[native code]\",\"in_app\":true,\"filename\":\"[native code]\"},{\"function\":\"resetTo\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":250,\"colno\":15174,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"[native code]\",\"in_app\":true,\"filename\":\"[native code]\"},{\"function\":\"replaceAtIndex\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":250,\"colno\":14495,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"setState\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":28,\"colno\":323,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"enqueueSetState\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":226,\"colno\":1050,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"u\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":226,\"colno\":69,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"s\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":127,\"colno\":1039,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"batchedUpdates\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":219,\"colno\":456,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"perform\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":134,\"colno\":590,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"closeAll\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":134,\"colno\":1142,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"abs_path\":\"[native code]\",\"in_app\":true,\"filename\":\"[native code]\"},{\"function\":\"B\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":127,\"colno\":2005,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"perform\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":127,\"colno\":1833,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"perform\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":134,\"colno\":503,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"perform\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":134,\"colno\":590,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"closeAll\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":134,\"colno\":1142,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"close\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":225,\"colno\":281,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"notifyAll\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":128,\"colno\":461,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"value\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":614,\"colno\":990,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"t\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":582,\"colno\":69,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"captureException\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":true,\"lineno\":584,\"colno\":5785,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"},{\"function\":\"captureMessage\",\"abs_path\":\"file:///var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\",\"in_app\":false,\"lineno\":584,\"colno\":6142,\"filename\":\"/var/mobile/Containers/Bundle/Application/85BC5F5C-62AD-4ECF-AC70-90E1A90E5896/buffet_ios.app/main.jsbundle\"}],\"frames_omitted\":null},\"sentry.interfaces.User\":{\"ip_address\":\"10.0.2.2\"},\"type\":\"default\",\"version\":\"7\"}\n. ",
    "danhart": "@benvinegar if it's not recommended to use it today, maybe autoBreadcrumbs shouldn't be true by default? Or are you trying to avoid breaking changes to the lib's API?. ",
    "pbadenski": "Unfortunately doesn't yet. Now fails at uuid generation:\nvar crypto = window.crypto || window.msCrypto;\nException below:\njavascript\nReferenceError: window is not defined\n    at uuid4 (http://localhost:8080/c212583dd96f840b5048.worker.js:2279:19)\n    at Raven._getUuid (http://localhost:8080/c212583dd96f840b5048.worker.js:2022:15)\n    at Raven._sendProcessedPayload (http://localhost:8080/c212583dd96f840b5048.worker.js:2032:69)\n    at Raven._send (http://localhost:8080/c212583dd96f840b5048.worker.js:2018:15)\n    at Raven.captureMessage (http://localhost:8080/c212583dd96f840b5048.worker.js:1038:15)\n    at callback (http://localhost:8080/c212583dd96f840b5048.worker.js:43102:16)\n    at Object.console.(anonymous function) [as error] (http://localhost:8080/c212583dd96f840b5048.worker.js:3121:22)\n    at http://localhost:8080/c212583dd96f840b5048.worker.js:3218:26\n    at Generator.next (<anonymous>)\n    at step (http://localhost:8080/c212583dd96f840b5048.worker.js:3151:192)\n    at http://localhost:8080/c212583dd96f840b5048.worker.js:3151:362. Works beautifully, thank you!. Beatiful, thank you!. ",
    "adrienverge": "Hi @benvinegar, thanks for your answer.\nI've spent a lot of time on this and I now see two points here:\n1. Should SystemJS be used to load raven-js bundle?\nFirst, as copied from here, raven-js is a third party global resource. The Raven object lives on window in the browser. Therefore it is maybe not correct to import it in an Angular 2 application.\nSo I'm wondering whether it's correct or not to load it from SystemJS using System.config({ packages: { 'raven-js': { main: 'dist/raven.js' } } ...; maybe the best way is to import it through <script src=\"/node_modules/raven-js/dist/raven.min.js\"></script> in the HTML file, leave systemjs.config.js alone, and let good old typings do the job at compilation time.\nWhat do you think? @Chuckv01 @NoNameProvided @davorpeic \n2. Typings shipped with raven-js\nI really don't think import Raven = require('raven-js'); is the \"normal\" way to import a bundled JS library. Most libs I've seen define modules in their declaration files, so they can be imported in many fashions (including import Raven from 'raven-js';).\nI'm working on a rewriting of the .d.ts file, I'd be happy to make a pull-request depending on the output of this dicussion. It would look like:\n```ts\ndeclare module \"raven-js\" {\n    export default ravenjs;\n}\ndeclare module ravenjs {\n    interface RavenStatic { ... }\n    interface RavenOptions { ... }\n    ...\n}\ndeclare var Raven: ravenjs.RavenStatic;\n```. ",
    "kienpham2000": "@benvinegar FYI I figured out this issue, I loaded the install at index.html and all sub-components got the lib loaded now. Thanks!. ",
    "cldwalker": "Sure. The JS example shows an example of caught exception usage. It seems there isn't a way clien-tside for an uncaught exception to automatically trigger showReportDialog. I searched the forum but haven't seen anyone attempt to use it in that way. Perhaps I could override some internal sentry uncaughtException handler but that seems brittle from a usage and perhaps even a timing perspective (having the right eventid). @kamilogorek Hi. To echo @semperos, any information you can give on reduced functionality when this integration is disabled would be appreciated. ",
    "friday": "That doesn't seem to work @benvinegar:\n\nRaven.setDataCallback() is triggered before the event id is created (which I'm assuming is happening on the server)\nBy reading the source I figured out another way though.\n~~~document.addEventListener('ravenSuccess', function () {~~~\n~~~Raven.showReportDialog();~~~\n~~~}, false);~~~\nEdit: Although that^ works, this should be safer, to make sure you have the right event id:\njs\ndocument.addEventListener('ravenSuccess', function (event) {\n  Raven.showReportDialog({eventId: event.data.event_id});\n}, false);. @mpj: The \"success\" part of ravenSuccess refers to the request for the error report. It's not documented, but you can see how it works here (and why you couldn't search for it): https://github.com/getsentry/raven-js/blob/d88422c2e5409bef914975b3dbd858e09d866f27/src/raven.js#L730 \n (called from here: https://github.com/getsentry/raven-js/blob/d88422c2e5409bef914975b3dbd858e09d866f27/src/raven.js#L1636).\nIt could be potentially dangerous if they removed the event or started using it differently, so you're probably right to be sceptical. Also: I stopped using showReportDialog (for other reasons), so I don't know the status of the code I posted.. Update: I tested this and it still works. I also updated the code above to use the actual event id rather than the last one.. @esbenvb: console.log() doesn't return anything, so that's why it won't work.\nMy example may still be broken though. I'm not using this any more, as mentioned, and it's internal undocumented API so using it is risky.. ",
    "mpj": "@benvinegar @friday I am having this problem too. However, I'm sceptical of the solution that @friday posted - partly because it's not obvious what ravenSuccess entails as an event, and also, I cannot seem to locate that string anywhere in the raven-js source. . @friday thanks SO much for your assistance, very helpful!. ",
    "cpoetter": "@friday Thanks soo much! I was trying for hours to make this work! \ud83c\udf89. ",
    "esbenvb": "Seems to me that the solution above does not work anymore @3.26.4 :( \n```js\nRaven.config('https://be0af717412a423f84c9f8a7ab6a43a0@sentry.io/1245111').install()\ndocument.addEventListener(\n  'ravenSuccess',\n  event => {\n    console.log(event) && Raven.showReportDialog({ eventId: event.data.event_id })\n  },\n  false\n)\n```\nI don't get the event in my console and I see no dialog. The events are reported properly to Sentry though.\nI also tried the other approach, like\njs\nRaven.setDataCallback(function (data) {\n  // means an error was triggered\n  Raven.showReportDialog(); // uses last event id\n});\nI get an error: RavenConfigError: Missing eventId\nThen I tried\njs\nRaven.setDataCallback(data => {\n  // means an error was triggered\n  Raven.showReportDialog({ eventId: data.event_id }) // uses last event id\n})\nWhich gives me the same error message\nThat's strange, because if I don't call the showReportDialog, I can get the event ID from the data.\nI get undefined when reading the property directly, but if I log the data object, the event_id is there. BUT As soon as I add the showReportDialog it's not there anymore. \njs\nRaven.setDataCallback(data => {\n  console.log({ eventId: data.event_id }) // {eventId: undefined}\n  console.log({ data }) // {data: {.... event_id: 12345}}\n})\njs\nRaven.setDataCallback(data => {\n  console.log({ eventId: data.event_id }) // {eventId: undefined}\n  console.log({ data }) // {data: {.... }}     <---- no event-ID in object\n  Raven.showReportDialog({ eventId: data.event_id })\n})\n. Great! Next time, a note in the documentation, telling that a feature is coming in the next version and not currently supported, would be great - so we don't spend time debugging something that works as intended :). ",
    "keithhalterman": "Good point @benvinegar. \nOur organization has groupings with 100K+ [object Object] errors, few of which came from the same source. In our case, we'd prefer each message being separate rather than many issues tangled together. Since sentry only holds a sample of the last 20 or so issues within a bucket (normally great when different issues aren't grouped together), we're losing a lot of important error reports.\nWhat do you think about a flag passed into Raven.config() such as stringifyObjectErrors: true (with false as default, so no breaking changes are made) that allows the user to specify whether message objects should be stringified?  . I really like that option. Access to the original error would make it easy to tailor sentry groupings and reported error data based on the original error data and the needs of each organization.\nAs a bonus, this would allow users to add additional properties to error objects and process them into sentry extra data if needed (another roadblock we've hit). \nHas this feature already been proposed/decided upon?\n. Looks like Pull Request #802 will solve this issue. This is great! Exposing the original error object in dataCallback will also help solve the issue in pull request #797. ",
    "sierran": "Sorry i did not answer so long but i was on holiday The problem magically solved with angular ^2.4.0 and raven-js ^3.11.0. I do not know where the problem was but after the package updates everything went back to normal and the error log is full. Thank you for your interest in the topic.. ",
    "jensenbox": "I figured as much.\nthe crux of the issue really is when:\nvar thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\nturns into: var thisPos = stack.indexOf(this)~thisPos ?\nstack.splice(thisPos + 1) : stack.push(this);\nI suspect that there could be a corner case regarding the tilde character\nin the compressor I am using. It is mashing them together.\nThanks for listening :)\nOn Thu, Dec 15, 2016 at 4:42 PM, Ben Vinegar notifications@github.com\nwrote:\n\nThis isn't going to work. These are dist files generated from source.\nWe'll need to either get a patch accepted upstream in json-stringify-safe\n(unlikely), or we need to modify the build process to semicolon-ify our\ndist files going forward.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/804#issuecomment-267487284,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALjUY-w577qigiQ4wk6duZvAh91ED_Jks5rId6FgaJpZM4LOufs\n.\n\n\n-- \nChristian Jensen\n2311 Watkiss Way\nUnit #1\nVictoria, BC V9B 6J6\n+1 (778) 996-4283\nchristian@jensenbox.com\n. ",
    "mreq": "This problem still exist when using raven in Rails 5 with the uglifier gem. If you run into this, use the minified version in the pipeline.. ",
    "ldelossa": "Thank you! . ",
    "Starscream27": "Having the same issue.\n\n. ",
    "rajendra2": "@Starscream27 , here is one workaround I am using in the meantime. \nvar options = { 'release' : 'a2.1.0', 'autoBreadcrumbs':{'xhr':false}}\nRaven.config(PUBLIC_DSN, options).install()\n. @QuentinFchx , yes it seems to have fixed with zone@0.7.6. I am not getting the crash anymore. . ",
    "log2-hwan": "zone.js 0.7.2 works fine for me. \nSeems zone.js 0.7.4 has issue.. ",
    "alexandrehebert": "@rajendra2 thanks, worked for me. ",
    "kiruto": "@rajendra2 worked for me! Thanks! !. ",
    "paynoattn": "@rajendra2 your fix worked for me, though is this going to stop sending error breadcrumbs to raven?. ",
    "orlando": "Great @dcramer,\nI like that interface. One thing to keep in mind is how we handle calling this method with no arguments or with the second argument missing.\nBut let me know what changes we should do to get this merge.\nThanks!. hey @dcramer any update on this?. @benvinegar great!. Thanks for the info. Can't wait to kill my fork.\nThanks again!. @brunolemos I ended up using my fork https://github.com/orlando/raven-js. You only need device information from JavaScript, in Java you should use the raven-java library. ",
    "connor4312": "Not that I'm aware of, unfortunately. If you're not opposed to writing TypeScript, you could move your tests to use TypeScript and thereby assert that all functionality that's tested in typed correctly, but there's not a way to statically determine that typings are correct based only on the original JavaScript.. The extra event was originally typed to any, I didn't change it was I wasn't sure if it was able to take other data types. If it does, awesome! Stricter typings are always great.. It might make sense to have it take { [prop: string]: any } to enforce that the top-level type is a plainish object.. Looks mostly fine as far as the typings themselves go, I've not verified that all data types are correct against the Js implementation.. You can remove the overload and just have user?: RavenUserContext. That's a lot of anys! Can we get some more specific typings on them?. Yea, so. I would mention that although the length may be comparable to raven.js itself, the complexity is significantly lower; it's static definitions, not procedural code.\nThat said, it is a maintenance burden, and it's definitely your prerogative whether that's something you want to take up. Someone will have to take it up, if nothing else maintaining definitions in DefinitelyTyped. It could be reduced by making pull request templates and having an issue checkmark for \"[x] I updated typings/raven.d.ts if I added to or changed the API\". I'd be happy to assist with reviews for those if you'd like.. \ud83d\udc4d . We can probably make this a script like npm run test:ts, or make it called by npm test directly. ",
    "FdezRomero": "Can anyone review this and merge if it's ok? The current Typescript definition doesn't allow to configure autoBreadcrumbs as well as other missing options.\nThanks!. ",
    "colinfindlay-nz": "I'm also needing this. How often is a point release done? This is a reasonably big blocker for using Raven with TypeScript.. ",
    "macvag": "The same behavior is happening and on backbone app with require.js. ",
    "Zamiell": "For anyone else reading this, I've had success in ignoring raven-js completely and using the native Node client (raven-node) in my Electron application.. I'm using it in both, and it seems to work just fine.. @justincy I didn't avoid it. I am exposing my private key.\nFrom this issue we can see:\n\nThe security implication is only that someone can send events on your behalf, which your only resolve is to revoke the API key and ship a new one. There's no other access given by default with client keys.\n\nI'm using it in an open source project, so even in the situation where I revoked my API key and got a new one, it would be trivial to discover the new key. With that said, I don't know if I would even consider this an attack vector, so I am completely fine with exposing it.. ",
    "justincy": "@Zamiell How did you avoid exposing the private key in the DSN? raven-node expects a DSN with a private key.. We just turned on Sentry and are seeing lots of <unlabeled event> errors\nhttps://sentry.io/familysearchorg/fs-home-prod/issues/735066771/events/33764492600/\nLooks like we're using v4.0.4. We're using the new Loader which is supposed to automatically give us the latest. I guess that's not happening?. @kamilogorek Do you have an ETA for the fix?. Thanks. I see now that we're getting reports from v4.2.3 of the SDK but unfortunately we're still seeing <unlabeled event>. Thanks for the info. That's very helpful. We'll look more into it.. ",
    "lubelski": "yeah, that sounds pretty decent.  I would just recommend that in the condition that you've yodawg'd yourself in the breadcrumb callback, it should throw a console.warn saying as much.  Raven would have to block that from getting into a separate loop because that call would get breadcrumbed, but if that warning could only happen once globally, then you'd get one warning in your console, one extra breadcrumb somewhere in your logs, and I think everything else would work as expected.  . ",
    "finleysg": "I think the best approach at this time is to wrap raven-js in a custom ErrorHandler. I have this hacked together as a starting point:\nimport { Injectable, ErrorHandler } from '@angular/core';\nimport { RuntimeSettings } from './runtime-settings.service';\nimport { Response } from '@angular/http';\nimport * as Raven from 'raven-js';\n\n@Injectable()\nexport class BhmcErrorHandler extends ErrorHandler {\n\n    constructor(private settings: RuntimeSettings) {\n        super();\n        if (!settings.isLocal) {\n            const options = { 'release': settings.version, 'autoBreadcrumbs': { 'xhr': false }};\n            Raven.config(settings.ravenDsn, options).install();\n        }\n    }\n\n    handleError(err: any): void {\n        if (this.settings.isLocal) {\n            super.handleError(err);\n        } else {\n            Raven.captureException(err.originalError);\n        }\n    }\n\n    logError(err: any): void {\n        if (this.settings.isLocal) {\n            console.error(err.toString());\n        } else {\n            Raven.captureException(err);\n        }\n    }\n\n    logResponse(response: Response) {\n        if (this.settings.isLocal) {\n            // TODO: handle text or blob responses\n            console.info(`${response.status}: ${JSON.stringify(response.json())}`)\n        } else {\n            // TODO\n        }\n    }\n\n    logWarning(message: string): void {\n        if (this.settings.isLocal) {\n            console.warn(message);\n        } else {\n            Raven.captureMessage(message, {level: 'warning'});\n        }\n    }\n\n    logMessage(message: string): void {\n        if (this.settings.isLocal) {\n            console.info(message);\n        }\n    }\n}\n\nOther than doing sanity checks, it doesn't make sense to me to pump logs to Sentry during development.. ",
    "springuper": "That's helpful, @LewisJEllis. Will try your solution.. ",
    "y-lohse": "Hi, I had the same issue and solved it with the same solution, so thanks for that!\nHowever, at least for us the issue suddenly appeared with v3.21 and the switch to fetch \u2014 I guess inside a cordova app, fetch and XHR don't behave exactly the same, at least when it comes to Origin headers.\nI was also unable to force the Origin header, whether through the headers option for raven or the fetchOptions.headers.\nSo in hindsight, I think this should be considered a breaking change and warrant a new major version.. ",
    "tacman": "Possibly related, but honestly I can't tell if this is a raven issue or raven reporting an issue from somewhere else.\nJQMIGRATE: Migrate is installed with logging active, version 3.0.0\nraven.js:80 JQMIGRATE: jQuery.unique is deprecated, use jQuery.uniqueSorta.(anonymous function) @ raven.js:80\njquery-migrate.js:64console.tracec @ jquery-migrate.js:64\n\n. Thanks, Ben.  That makes sense, we'll check it out.\nOn Mon, Feb 6, 2017 at 3:57 PM, Ben Vinegar notifications@github.com\nwrote:\n\n@tacman https://github.com/tacman \u2013 for breadcrumbs Raven.js overrides\nconsole.log which causes log statements to appear to come from Raven.js.\nIt definitely does not use jQuery.unique, so I suspect the deprecation\nnotice is being triggered by somewhere in your own code / other library.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/817#issuecomment-277810826,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAl0QbqJkZ0WeJNhuAcj3Z8Wnk2gfsoxks5rZ4kkgaJpZM4LcyP2\n.\n. \n",
    "CanKattwinkel": "I think you need to export RavenErrorHandler for aot / ngc. \nThis should solve your error. But using Raven-JS with Angular CLI is still blocked by https://github.com/getsentry/raven-js/issues/822. Same for me with  @angular ~2.3.1 and angular-cli: 1.0.0-beta.24 . Workaround is here: https://github.com/getsentry/raven-js/issues/808#issuecomment-269020804. Because the ahead of time compiler can't access the class if its not exported. This results in the following error:\nERROR in Error encountered resolving symbol values statically. Reference to a non-exported class RavenErrorHandler. Consider exporting the class (position 38:1 in the original .ts file), resolving symbol AppModule in /home/xxx/projects/xxx/src/app/app.module.ts\nReproduce: \n1. ng init\n1. apply example implementation from docs\n1. run ng serve --aot\n. ",
    "Kosmonaft": "I was having the same issue.\nExporting solved it.\nFrom: \nclass RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    Raven.captureException(err.originalError);\n  }\n}\nTo:\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    Raven.captureException(err.originalError);\n  }\n}. ",
    "natenorberg": "Yeah, here you go:\nat o.prototype.captureMessage(~/raven-js/src/raven.js:382:0)\nat o.prototype.captureException(~/raven-js/src/raven.js:329:0)\nat r(~/raven-js/src/raven.js:282:0)\nI'm not positive it's a raven issue either. We do have a couple canvases in the app, but it looks like they shouldn't have been rendered when the error was thrown.. I'll keep an eye on it I guess. I haven't ever seen it locally, so I wouldn't really be able to tell if disabling raven changes anything :/\nThanks for taking a look. ",
    "harshil07": "From the looks of it, this is a parsing error in the TraceKit lib. \nfor more color: Here is the full stack trace on the exception. \n01-11 13:07:18.229 27974 28007 I ReactNativeJS: value@index.android.bundle:1042:2531\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: value@index.android.bundle:1042:2375\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateComponent@index.android.bundle:437:5562\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:437:4870\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateRenderedComponent@index.android.bundle:437:6841\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _performComponentUpdate@index.android.bundle:437:6606\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateComponent@index.android.bundle:437:5845\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:437:4870\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:435:474\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _reconcilerUpdateChildren@index.android.bundle:433:963\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateChildren@index.android.bundle:433:1835\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:433:1723\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:413:821\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateRenderedComponent@index.android.bundle:437:6841\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _performComponentUpdate@index.android.bundle:437:6606\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateComponent@index.android.bundle:437:5845\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:437:4870\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:435:474\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _reconcilerUpdateChildren@index.android.bundle:433:963\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateChildren@index.android.bundle:433:1835\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:433:1723\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:413:821\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateRenderedComponent@index.android.bundle:437:6841\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _performComponentUpdate@index.android.bundle:437:6606\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateComponent@index.android.bundle:437:5845\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:437:4870\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:435:474\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _reconcilerUpdateChildren@index.android.bundle:433:963\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateChildren@index.android.bundle:433:1835\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateChildren@index.android.bundle:433:1723\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:413:821\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveComponent@index.android.bundle:428:581\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _updateRenderedComponent@index.android.bundle:437:6841\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _performComponentUpdate@index.android.bundle:437:6606\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: updateComponent@index.android.bundle:437:5845\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: performUpdateIfNecessary@index.android.bundle:437:5086\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: performUpdateIfNecessary@index.android.bundle:428:945\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: s@index.android.bundle:424:919\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: perform@index.android.bundle:432:597\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: perform@index.android.bundle:432:597\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: perform@index.android.bundle:424:2066\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: k@index.android.bundle:424:2238\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: [native code]\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: closeAll@index.android.bundle:432:1250\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: perform@index.android.bundle:432:684\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: batchedUpdates@index.android.bundle:505:465\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: o@index.android.bundle:424:391\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: _receiveRootNodeIDEvent@index.android.bundle:415:648\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: receiveEvent@index.android.bundle:415:758\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: value@index.android.bundle:326:2830\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: index.android.bundle:326:1065\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: d@index.android.bundle:326:133\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: value@index.android.bundle:326:1037\n01-11 13:07:18.229 27974 28007 I ReactNativeJS: [native code]. @benvinegar i added a console.log(ex.stack) to the raven library. and then looked at it via react-native log-android. ah yes @khanghoang i didn't see that one earlier. I will close this in favor of that issue. Looks like someone is working on a PR for that issue.. ",
    "matteius": "Ah gees -- my bad!  Opened: https://github.com/getsentry/sentry/issues/4786 and David Cramer closed 1 minute later \ud83d\udc4e . ",
    "JeanCarriere": "Hum I do use some iframes (loading external content like google documents)\nOne module of my application uses custom dom events (https://github.com/serkanyersen/ifvisible.js/ )\nThe stack trace I get does not give more information :(. ",
    "JTCunning": "I'm going to look at this PR in about 3 years and be very glad we did this.\nThanks <3. ",
    "sqwk": "Turns out that this was caused by additional wiring in of ng-bootstrap's typeahead module. I solved the problem by manually escape user input using lodash's escapeRegExp(). ",
    "Yabes": "Same problem here, Raven doesn't send anything. I didn't try to log errors with Raven.captureException.\nMy code is fairly simple:\nApp.js\njsx\nimport Raven from 'raven-js';\nRaven.config('<my-sentry-url>').install();\nHowever, when I copy/paste the Raven-js code in my console, it catches and sends errors.. ",
    "fcoury": "Did anyone solve this issue after it being closed? I am having this exact same issue.. I am running into this very same problem with raven-js and redux plugins. My app state has around 180kb. Is there a way to bump the limit on Sentry?. @bjunc the benefit I see is that I can inspect the user's redux state when the error was triggered. That helps a lot with the insights about the issue. . @bjunc I am trying to learn how to intercept and change the payload before sending it out to Sentry. Do you know where I add such intercepting code?. @bjunc just found dataCallback option. I am going to play with it a bit.. @bjunc for now I settled with removing the fields unconditionally but this seems like a good approach as well. I wish Sentry provided an add-on to allow going over the limit.. ",
    "joshmreesjones": "I'm also having this issue.. ",
    "jamesmanning": "@benvinegar what's the Right Way to add raven to an app that's been created with create-react-app?  Because of the need to load before bundles, I'm kind of assuming the public/index.html is the right place, but knowing how you're doing it successfully would be great!. @benvinegar perfect, thanks!  Does it Just Work even with react 16 or would someone need to add specific support for the error boundaries?. ",
    "yann-yinn": "edit : This is a way to include raven only in production mode :) \nIn your index.html : \njavascript\n  <% if (process.env.NODE_ENV == 'production') { %>\n    <script src=\"https://cdn.ravenjs.com/3.26.2/raven.min.js\" crossorigin=\"anonymous\"></script>\n    <script>Raven.config('https://ba44729431a044d6915d8012e94d8a56@sentry.io/1230983', {\n        environment: \"%NODE_ENV%\",\n      }).install();\n    </script>\n    <% } %>. ",
    "varungupta85": "Hi, Any updates on this issue? Is the reported behavior expected? Thanks!\ncc @benvinegar . Thanks for the reply @benvinegar . Just wanted to know if the reported behavior is expected and looks like it is not. I will change the Firebase error object into a string in the mean time as you recommended.. hi @benvinegar do you mean a complete react native app that you can readily run on a simulator or just some sample firebase code (with instructions) that you can plug into your test app?. Just realized that there are some extra troubleshooting steps added to debug problems related to sourcemaps. I tried to verify the sourcemap locally using the steps mentioned. Using the above stack trace, I used line number as 164234 and column as 7766. I got { source: null, line: null, column: null, name: null } as response. When I use line number as 1 and column as 7766, then I get \njavascript\n{ source: '/Users/abc/Projects/GalarmApp/node_modules/react-native/packager/react-packager/src/Resolver/polyfills/prelude.js',\n  line: 4,\n  column: 36,\n  name: 'now' }\n as the response which is also not the correct source location.\nI have verified tha the sourceMappingURL is present in the bundle file.. Some more investigation notes, I tried the same test with iOS sourcemap. I tried to decode an error atmain.jsbundle:682:12831`. So, I used the line number as 682 and the column number as 12831 and it resolved to the correct code location. \nSo, is with the reported line number and the column number in the Android error?\nWould this be a problem with react-native in that case?. ",
    "yyx990803": "All of these three internal properties (_isVue, $options._componentTag and $options.__file) are unlikely to ever change. Their usage also won't throw any errors even if they do change - the worst case scenario is returning anoymous component. So I'd say it's safe to use this method here.. ",
    "nddery": "Any chance of seeing a patch release with this fix ? We've been wondering why Sentry had been so silent... ",
    "rtheunissen": "@benvinegar also waiting for this to be released, we have multiple cases on production that aren't reaching Sentry because of this issue.. ",
    "jjingrong": "Hey @momoadeli , could you share a bit on how you managed to fix it for FireFox extensions?. ",
    "cbrunnkvist": "Oh crap, you're right. I think the browser URL completion got me again :-O\nI'm glad to see that it has already been raised and is being discussed. I'll follow the other repo ticket(s) instead, thanks.. ",
    "bretthoerner": "They did confirm for me in Slack.\nOn Feb 22, 2017 6:05 PM, \"Ben Vinegar\" notifications@github.com wrote:\n\n@mattrobenolt https://github.com/mattrobenolt \u2013 can you confirm we\nreturn seconds?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/pull/862#issuecomment-281846684,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAG2MW8AHGFhhVodbghBCTnlbnKHEsBks5rfM1TgaJpZM4MJCqW\n.\n. \n",
    "uptownhr": "https://github.com/getsentry/raven-js/compare/master...uptownhr:patch-1. @benoitg definitely a valid concern. Give me some pointers on where I can make this configurable and I can work on this. \nHowever, it would be a nice experience to just see state information off the bat. Not sure what sentry's request size limit is, but I'd imagine being around a 1mb - which probably be enough for 99% of the users. \nYour call :). @benvinegar I agree, and don't have an answer for it yet. It would really be unfortunate.\nQuestion - does the user have an entry point/hook to include in custom data?. ",
    "ArmorDarks": "@kamilogorek what do you mean by saying \"We already pass\"? The official plugin just passes component props and does not pass store.. Unfortunately, that won't work. I hope you bothered to check this.Vue.config.errorHandler content and read Vue documentation. See https://github.com/vuejs/vue/issues/8433. > You can also easily turn off this integration locally, so that errors will be logged through original handler instead.\nThat's what I did for now. I think that issue should be mentioned in the docs with a proposal to disable this function for the development environment until Vue will fix referenced above issue.\nOtherwise, other developers will waste their time too to figure out why suddenly after Raven.js Vue plugin installation all Vue error gone for good.\nNote, that console.log in this case won't do, since built-in Vue' logger is quite different and logs much more useful information.. Yeap, I've actually missed the irony of the situation :D. I also appreciate how the issue still remains closed, while actually it wasn't resolved.. ",
    "benoror": "Hi @benvinegar, any update regarding this? Or any chance to give a hint and/or point out where the change should be made? Regards!. Maybe passing something like:\njavascript\n|| !!what.stack\nSomwhere around here (src/utils.js#L14) or here (plugins/ember.js#L22)\n(disclaimer: educated guess). ",
    "buremba": "I use Angular plugin with default configurations but you're right, the version is pretty out of date. I upgraded to the last version and let you know if it occurs again. Thanks.\nHere is a sample:\ncurl 'https://app.getsentry.com/api/app_id/store/?sentry_version=7&sentry_client=raven-js%2F3.9.2&sentry_key=KEY' -H 'Pragma: no-cache' -H 'Origin: https://app.rakam.io' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.6,en;q=0.4' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36' -H 'Content-Type: text/plain;charset=UTF-8' -H 'Accept: */*' -H 'Cache-Control: no-cache' -H 'Connection: keep-alive' -H 'DNT: 1' --data-binary $'{\"project\":\"nope\",\"logger\":\"javascript\",\"platform\":\"javascript\",\"request\":{\"headers\":{\"User-Agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"},\"url\":\"https://app.rakam.io/report-playground?query=select%201,2,3&options=%7B%22chartType%22:%22geo-cluster%22,%22limit%22:1000,%22enableStatistics%22:true,%22tableOptions%22:%7B%22enabled%22:true%7D,%22chartOptions%22:%7B%22latitude%22:0,%22longitude%22:1,%22title%22:2%7D,%22variables%22:%5B%5D,%22segments%22:%5B%5D,%22measures%22:%5B0,1,2%5D,%22dimensions%22:%5B%5D%7D&queryOptions=%7B%7D\"},\"exception\":{\"values\":[{\"type\":\"TypeError\",\"value\":\"Failed to execute \\'appendChild\\' on \\'Node\\': parameter 1 is not of type \\'Node\\'.\",\"stacktrace\":{\"frames\":[{\"filename\":\"https://app.rakam.io/static/components/raven-js/dist/raven.js\",\"lineno\":372,\"colno\":29,\"function\":\"HTMLImageElement.wrapped\",\"in_app\":false},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":3,\"colno\":20753,\"function\":\"HTMLImageElement.o [as _leaflet_click27]\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":17248,\"function\":\"e._onMouseClick\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":1,\"colno\":5028,\"function\":\"e.fireEvent\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":23910,\"function\":\"e.togglePopup\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":23724,\"function\":\"e.openPopup\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":23431,\"function\":\"e.openPopup\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":1,\"colno\":21249,\"function\":\"e.addLayer\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":1,\"colno\":29748,\"function\":\"e._layerAdd\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":19069,\"function\":\"e.onAdd\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":20008,\"function\":\"e.update\",\"in_app\":true},{\"filename\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"lineno\":2,\"colno\":21514,\"function\":\"e._updateContent\",\"in_app\":true}]}}]},\"culprit\":\"https://app.rakam.io/static/dist/scripts/1.1-353348d0887eb92338a9.js\",\"extra\":{\"cluster\":\"4c8e91d0-471e-4041-a11f-f818b2b757a1\",\"name\":\"rakam-prod\",\"type\":\"ui\",\"session:duration\":3993424},\"breadcrumbs\":{\"values\":[{\"timestamp\":1488365533.259,\"category\":\"ui.click\",\"message\":\"td > i.margin-horizontal-5.pointer.fa.fa-play-circle.green\"},{\"timestamp\":1488365533.335,\"type\":\"http\",\"category\":\"xhr\",\"data\":{\"method\":\"GET\",\"url\":\"https://api.mixpanel.com/track/?data=%3D&ip=1&_=1488365533262\",\"status_code\":200}},{\"timestamp\":1488365533.497,\"type\":\"http\",\"category\":\"xhr\",\"data\":{\"method\":\"POST\",\"url\":\"https://webapp-1290649538.us-west-\n.......... TONS OF HTTP REQUESTS. They're quite large because these Mixpanel calls have a big base64 encoded query parameter that includes the event body. I believe that the best option here is to discard some third party analytics service calls such as Mixpanel or truncate the url if it's too large but it seems that both of them requires some work do be done in this repo, right?. It looks like I also removed Mixpanel HTTP calls in the snippet since they may include some user sensitive data but that part is particularly large.. After hours of debugging, we finally found the root issue and had to remove Sentry from our product. We use Nuxt.js and the version of this library is 4.5.3.. @kamilogorek We upgraded to 4.6.1 but the issue still exists. Please see https://cl.ly/57191404a1af. ",
    "derekrprice": "We are seeing this today with many large breadcrumbs, and it crashes the browser.  I would argue that Sentry.io should NEVER crash the browser regardless of what the user does.  Could you please add some sort of automatic client-side checking and truncation of the packet size before throwing an error in the client, like Sentry's Python integration did.. I think this issue needs to be reopened.. It threw an error in the browser, effectively crashing the JS application running there.. As for details on how to reproduce, log a lot of large breadcrumbs, then hit another error.  Raven throws its own exception and does not log the original error, either to the console or to the server.. Ok, looking closer at this on my end, I may have been a bit alarmist.  Sentry's thrown error is not crashing the application since it starts with our own JS error, but it IS true that the large number of breadcrumbs are preventing sentry from logging the error to the server.  I think truncating the breadcrumbs in the client to ensure that the stack trace gets logged to the server should be standard.  I would rather see the stack trace with a note about truncated breadcrumbs than nothing at all when my users are encountering real errors.. ",
    "octagonal": "I'll have a look at this!. ",
    "Wilkolicious": "Thanks for looking into this!\n@benvinegar \n\nI've confirmed this on my end. AFAIK, \"regular\" exception (e.g. captureException, onerror) handling seems fine.\n\nOn the contrary, removing our window.onerror (so it is just left with Raven) does not send anything to Sentry via its \"regular\" method (i.e. not calling captureException() manually ) on IE8.\nDebug time:\n- Nothing is wrapped on IE8 (or it's not called at any point) like it does on ffx and Chrome & IE9+, so I believe Raven falls back to its global onerror handler, which is traceKitWindowOnError?\n- This notifies handlers, which in this case is _handleOnErrorStackInfo\n- Calls _handleStackInfo\n- Calls _processException\n- Calls _send\n- Calls _sendProcessedPayload\n- Calls _makeRequest\n- Calls stringify\n- serializer() seems to be fine\n- The JSON.stringify seems to fail\n- Stuck a try-catch around it and received the same error message: Object doesn't support this property or method\n-  Nothing is sent. Fantastic work gents, will get this into production.. ",
    "adamjang": "@benvinegar I agree, seems like I am using uncompiled files. I am using import Raven from 'raven-js' to import the NPM package.  Everything was working normally until I upgraded from 3.8.1 to 3.12.1. I've installed 3.12.0 and that seems to work. . I'm using webpack v1.12.2.. ",
    "erkiesken": "Had the same error, and had to resort to including dist version like so to fix it in raven-js 3.12.1:\nimport Raven from \"raven-js/dist/raven.js\";\nUsing webpack 2.2.1 and babel 6.24.0, but node_modules stuff is excluded from babel-loader.. ",
    "jimmythecoder": "Seems travis build is failing, but works for me and my build locally on TS 2.1.6, annoying. Any ideas?. ",
    "tomasklingen": "The typescript declaration file has changed.\nThe new way to import is: import Raven from \"raven-js\";. Same. Pinned raven-js in my package.json to \"raven-js\": \"~3.12.2\" for now.\nIt is working in the raven-tests.ts file because it's really just testing the .d.ts file.. Anything that needs to happen before this can be approved?\nBtw. I'm willing to add more type definitions later on for more than just breadcrumbs. I'm sure there is demand for this. What's your opinion on this subject?. ",
    "pierrickouw": "It's working, thanks !. Actually, I still have an issue:\nimport Raven from \"raven-js\"\n// when compiled \nraven_js_1.default.config(constants_1.SENTRY_URL, {\n                 ^   \nTypeError: Cannot read property 'config' of undefined. ",
    "michaeljones": "I have the same issue. The code appears to be doing module.exports = Raven but the typescript is using export default so they seem to be incompatible unless I am missing something? Perhaps there is a setting in typescript that allows for this? The raven typescript tests appear to use import ... from ... so perhaps it is possible to make it work?. And this line should have a backslash at the end of it, I think:\nhttps://github.com/getsentry/raven-js/blame/master/docs/sourcemaps.rst#L169. ",
    "RahavLussato": "hi @benvinegar i took this change from here: https://github.com/csnover/TraceKit/blob/master/tracekit.js\nit solve situation when you work with webpack with devtool: 'eval' mostly on staging, the code that generated starts with \"webpack\" and the current regex don't match it and i don't have stack trace because of that.. @benvinegar sample: webpack:///./~/react-dom/lib/ or webpack:///./src/components/ it just will always start with wbpack://, basically i don't get why to keep local copy of traceKit instead of using the repo as dependency or using your own fork, but if you want to keep it you should manage it and update that to have the latest changes.. here is complete stack trace sample: \nTypeError: Cannot read property 'error' of undefined\n  at TESTTESTTEST.eval(webpack:///./src/components/test/test.jsx?:295:108)\n  at TESTTESTTEST.render(webpack:///./src/components/test/test.jsx?:272:32)\n  at TESTTESTTEST.tryRender(webpack:///./~/react-transform-catch-errors/lib/index.js?:34:31)\n  at TESTTESTTEST.proxiedMethod(webpack:///./~/react-proxy/modules/createPrototypeProxy.js?:44:30)\n  at eval(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:796:21)\n  at measureLifeCyclePerf(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:75:12)\n  at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:795:25)\n  at ReactCompositeComponentWrapper._renderValidatedComponent(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:822:32)\n  at ReactCompositeComponentWrapper._updateRenderedComponent(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:746:36)\n  at ReactCompositeComponentWrapper._performComponentUpdate(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:724:10)\n  at ReactCompositeComponentWrapper.updateComponent(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:645:12)\n  at ReactCompositeComponentWrapper.performUpdateIfNecessary(webpack:///./~/react-dom/lib/ReactCompositeComponent.js?:561:12)\n  at Object.performUpdateIfNecessary(webpack:///./~/react-dom/lib/ReactReconciler.js?:157:22)\n  at runBatchedUpdates(webpack:///./~/react-dom/lib/ReactUpdates.js?:150:21)\n  at ReactReconcileTransaction.perform(webpack:///./~/react-dom/lib/Transaction.js?:140:20)\n  at ReactUpdatesFlushTransaction.perform(webpack:///./~/react-dom/lib/Transaction.js?:140:20)\n  at ReactUpdatesFlushTransaction.perform(webpack:///./~/react-dom/lib/ReactUpdates.js?:89:32)\n  at Object.flushBatchedUpdates(webpack:///./~/react-dom/lib/ReactUpdates.js?:172:19)\n  at ReactDefaultBatchingStrategyTransaction.closeAll(webpack:///./~/react-dom/lib/Transaction.js?:206:25)\n  at ReactDefaultBatchingStrategyTransaction.perform(webpack:///./~/react-dom/lib/Transaction.js?:153:16)\n  at Object.batchedUpdates(webpack:///./~/react-dom/lib/ReactDefaultBatchingStrategy.js?:62:26)\n  at Object.enqueueUpdate(webpack:///./~/react-dom/lib/ReactUpdates.js?:200:22)\n  at enqueueUpdate(webpack:///./~/react-dom/lib/ReactUpdateQueue.js?:24:16)\n  at Object.enqueueForceUpdate(webpack:///./~/react-dom/lib/ReactUpdateQueue.js?:157:5)\n  at TESTTESTTEST.ReactComponent.forceUpdate(webpack:///./~/react/lib/ReactComponent.js?:84:16)\n  at forceUpdateIfPending(webpack:///./~/react-deep-force-update/lib/index.js?:28:43)\n  at traverseRenderedChildren(webpack:///./~/react-deep-force-update/lib/index.js?:6:3)\n  at eval(webpack:///./~/react-deep-force-update/lib/index.js?:36:5)\n  at eval(webpack:///./~/react-transform-hmr/lib/index.js?:84:28)\n  at wrapped(webpack:///./~/raven-js/src/raven.js?:295:29). i fixed it, its should be webpack. ",
    "rafaelrruiz": "But a performance hit they can choose if they go with latest.\nOn Wed, Mar 29, 2017 at 11:14 AM, Matt Robenolt notifications@github.com\nwrote:\n\nWorth noting too, is that since this is a CDN, we'd lose the ability to\ncache \"forever\" as we do now, and we'd have to have lower TTLs in order to\npropagate changes in a timely manner. So this would probably mean either\ndropping down to a 24h TTL or a 1h TTL depending on how quickly we want to\npropagate changes. Both of which are a performance hit for users that are\nnow requesting these files.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/911#issuecomment-290176996,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHkdLZQNaz0YBU73obGaQGt5EgsdkMQWks5rqp-DgaJpZM4MtPYU\n.\n. \n",
    "ismay": "I think only allowing the latest tag on major versions like https://cdn.ravenjs.com/3.x/latest/raven.min.js makes sense. That way you know that breaking changes require a manual update and minor versions and patches get updated automatically. The shorter cache TTL is a downside that I'm willing to live with. People that want a longer cache time can always use the exact version.\nIn my opinion this would be a great addition, quite annoying to have to redeploy my entire app everytime ravenjs gets an update.. @acanimal I'm doing exactly the same thing as what you're intending to do (except without next but just with regular react). See my repo for the way I've made it work here: https://github.com/ismay/ismaywolff.nl. And yes, I'm using isomorphic-fetch.. Well I'm not exactly sure what you're running into, but here's what I'm doing (which I think would work in your situation as well):\n\nclientside entry point (uses raven-js)\nserverside entry point (uses raven)\nany shared code uses the Raven global, which is available in both environments (see here for example: https://github.com/ismay/ismaywolff.nl/tree/develop/src/shared/services/raven\n\nError reporting works for me both client and serverside. I haven't run into the XMLHttpRequest error that you describe. Might be due to isomorphic-fetch, which I am using.. Ok, so the problem was that the Error I was triggering to test Sentry was a fetch error. Which didn't have a stacktrace with line numbers (as the error is created asynchronously, see here). Which meant that Sentry couldn't refer to a particular line.\nI'd say in this case Sentry or Raven are not to blame technically. But:\n\nA clear error message (i.e. something like: no line/column numbers found in stacktrace, or invalid stacktrace) would have saved me a lot of work. The current error is quite non-descript.\nYou could just fail gracefully and state that a stacktrace couldn't be found, so the error can't be mapped to a specific line. And don't display this state as being in error, as everything that happened here is still according to the js spec (i.e. errors don't have to have a stack property).\n\nAlso, it seems weird that the error reporting is so reliant on a non-standard feature, see MDN. Maybe it would be good to warn users of this as well, as non-supporting browsers would send errors that Sentry apparently can't process.. Could be. I'm not a maintainer, so I'm not sure. Would be good to hear from the Sentry team on this.. See here: https://bugs.chromium.org/p/chromium/issues/detail?id=718760 for more details on the error (and a reproduction). Fetch is a new browser api: https://developer.mozilla.org/en/docs/Web/API/Fetch_API. Oh and yeah, they can trigger exceptions, just not always with a stacktrace.. See here for an explanation why: https://stackoverflow.com/a/43804340. Bug has been submitted to chromium: https://bugs.chromium.org/p/chromium/issues/detail?id=718760. ",
    "developit": "FWIW, here's what I'm doing:\njs\nvar old = console.error;\nconsole.error = function(e) {\n  if (e instanceof Error) Raven.captureException(e);\n  old.apply(this, arguments);\n}. ",
    "greatelv": "\n@MaxBittker In that case, \nCan i resolve the fetch issue using release artifact ? \nOur product is none hosted native web-app such as electron\nI already uploaded source file in that release artifact but It was not work well.\nIn your link (https://docs.sentry.io/clients/javascript/sourcemaps/)\nThis guide only said about .map file (not source file).. \nIt is status of release artifact. ",
    "jazzzz": "\nYou will have a really bad time if you try to do this.\n\nI tried and did not see any issue, apart from the missing breadcrumbs. What issues did I miss?\n\nYou won't \u2013 try/catch does a lot more than just \"catch errors\". But yes, we can provide that option.\n\nWhat features am I missing?\n\nI'd sooner recommend that when you are live debugging, you come up with a way to just disable Raven, e.g. magic global variable or something.\n\nI would love it, but I have no idea how I could detect that the debugger is open, and I'm not even sure it's possible. I could set a cookie, but I could miss some errors if the debugger is closed.. @benvinegar thanks for the explanations! I will use a cookie to completely disable Sentry when I use the DevTools.. It seems this is addressed by #938, isn't it?. @kamilogorek sorry, I tried to isolate a reproducible example but could not. I only reproduce it in a huge app I cannot provide.. ",
    "gtzinos": "Hello, any progress on this issue ? We can't install your package via npm. . You have a tutorial to install it on angular app (https://docs.sentry.io/clients/javascript/integrations/angular/). Please create a new one for angular 4.0 because it doesn't work in new version.. After a month without response, now it just works.. ",
    "periodic": "\n. I added a dummy handler that throws an exception to test my Raven JS library upgrade, got the following:\n\n. ",
    "quicksnap": "Also encountering this. First time using Sentry, too.. doh!. I downgraded to Raven 3.10.0 and now I can report errors correctly.. ",
    "timtyrrell": "We haven't been getting errors for a long time because of this... I can confirm that 3.13.1 is the last version that works with Request.. thanks!. ",
    "goodmike": "I'm experiencing a similar issue, with errors generated by scripts running in other domains. For instance, https://cdncache-a.akamaihd.net/loaders/2484/l.js?pid=2484&ext=SurfBuyer&nocache=1&zoneid=88602545.\nWe have an array of regex-ready strings assigned to ignoreUrls. One of them is\n'akamaihd.net/loaders/\\d+/l\\.js\\?(?:.+=.&)ext=(?:DNSUnlocker|SurfBuyer)'. \nThe url reported in the error is from our domain, which we can call https:my-website.com, but the first line of the stacktrace cites the script from cdncache-a.akamaihd.net:\nTypeError: null is not an object (evaluating 'this.frame.contentWindow.postMessage')\n  at sendMessage(/loaders/2484/l.js:46:388)\n  at get(/loaders/2484/l.js:47:215)\n  at ? (/i/items/z7b85/js/z7b85.js:22:139)\n  at Zb(/i/items/z7b85/js/z7b85.js:23:373)\n  at ia(/i/items/z7b85/js/z7b85.js:6:171)\n  at ? (/i/items/z7b85/js/z7b85.js:22:443)\n  at c(/loaders/2484/l.js:10:30)\n  at this(raven.js:379:34)\n  at nrWrapper(/cart:21:11531)\nI'm attaching a slightly comically redacted screenshot of the error page from sentry.io in case it helps.\n\nI confirmed that our regex string should match the url of the script by entering the following into the Chrome console:\n```\n\n\nurl = 'https://cdncache-a.akamaihd.net/loaders/2484/l.js?pid=2484&ext=SurfBuyer&nocache=1&zoneid=88602545';\nregexString = 'akamaihd.net/loaders/\\d+/l\\.js\\?(?:.+=.&)ext=(?:DNSUnlocker|SurfBuyer)';\nnew RegExp(regexString).test(url)\n<- true\n```\n\n\nAm I misunderstanding how ignoreUrls works?. OK OK. The problem is that although I thought I was providing strings to go directly to RegExp(), in fact there is an intermediate step in raven.js. The function joinRegExp transforms strings by escaping some characters: https://github.com/getsentry/raven-js/blob/master/src/raven.js#L1822\nI\u2019ve spent a little time trying to massage the pattern strings in our config, but after failing to find strings that will produce the desired RegExp, I\u2019m going to replace them with RegExp literals. \nI think that perhaps the documentation for ignoreUrls ought to discourage the developer from supplying strings unless they are very simple. RegExp literals should be supplied instead.. ",
    "bbrzoska": "@benvinegar I can understand where you're coming from, pertaining to other PRs with features. However, I can hardly see this change as a feature, as it's more of a way to opt-out of a default behavior.\nBrowser Extension errors can suggest a problematic configuration, and might point to a root cause of a client's problem. It's a different class of errors, to be sure, but they still can be a useful indicator of \"possible problems\" as a whole. If a client calls our support team saying they cannot use our application, then once we run out of common debugging practices, the mere number of those \"script errors\" logged by a given client can enable us to make assumptions, driving the client to investigate his own setup, prior to investigating our end further.\nI'd also like to make a plea to common sense, as arguably the lifespan of the past and future discussion about this case might just be a larger total time cost than the maintenance of those 3 new lines of code. . ",
    "mayfield": "Would love to have sentry in my ServiceWorkers.  They tend to be a blackholes for errors otherwise.. Another PR option that I'm using in my app already: #1156 . Isn't payload size ultimately the user's issue?  E.g. console.log(tooLongAString) and console.log(tooBigAnObject) are semantically equivalent. . Fixes #1123 . ",
    "josketres": "I'd also like to have sentry in my ServiceWorkers!. We are also having this problem. I have can share some data from the last 10 days (22k events of this type, 13k users). I hope it helps you to reproduce it.\n\n\n\n. ",
    "austinpray": "Opened a little PR for this. In your office visiting rn. Figure I can take care of this while I'm here seeing as though I just did this exact thing at my job.. I'm getting sort of discouraged.\n\nRight off the bat the webpack output is 10kb heavier than the grunt output\nwebpack is not ie8 compatible, so we have to shim the es5 methods it uses in the module loading boilerplate. This adds another 20kb to the bundle.\n\nI know you guys are trying to keep the output small as possible, so this sorta seems like a dealbreaker to me.. Yep you right . I got rid of the accidentally added files! Eslint stuff explained inline. Also just now noticing that there are some tests that are failing on travis but not locally. if you change })[\"catch\"](function () { to }).catch(function () {\n you get an eslint error. ",
    "StefanoVuerich": "check https://github.com/reactjs/react-codemod/issues/141. ",
    "bjunc": "Our SPA makes many calls to a REST API, and all of that data gets stored within Vue (some of it is more than we need, but that's REST for you).  Over the course of the app's life, the sum of all that JSON could add up.  100K is a lot of JSON, but I can't let a Raven limit dictate what the app loads/doesn't load from the server for the fear that it might go over 100k.  Not sure I would call that \"naive\" on the part of Vue, but rather on the part of Raven for assuming the app state would never go above 100k.  \nFor us, we've simply disabled this part of the plugin by calling delete data.extra.propsData before send.  It hasn't really hindered our ability to diagnose problems on the front-end, but it would be a nice feature to have (maybe a shallow version of objects are sent, or the data is clipped before the request reaches 100k).. @fcoury maybe I don't know what I'm missing as far as the benefits of having the data in Sentry, but I just delete the propsData before send (see above).  Even since moving from REST to GraphQL, it's not worth the hassle of worrying about going over 100k, and not capturing the exception.. @fcoury I know what it's supposed to be able to do.  I'm simply saying, since I don't get to do it, I don't really \"miss\" it.  I would like it, for sure (that's why I created the issue in the first place).  \nAnyway, have you considered attempting to prune the data on your end, before sending?  That's on my todo list, but I haven't gotten around to it.  Basically, write a prune method that is called in the exception callback that recursively goes through the data until it hits 100k.. @fcoury I haven't really looked into it, but if I were to start somewhere, I was considering something along the lines of the json-size NPM package.  If the data is less than 100k, then send the whole thing.  If not, go through and prune (maybe something along the lines of _.cloneWith). @kamilogorek can you share the exact link for this?  What's the TL;DR?. @kamilogorek \nGreat, thank you.. ",
    "brentvatne": "That makes sense @benvinegar! I'll send PR with this change shortly. @benvinegar - It seems like xhr (or http as you put it in example) instrumentation config lives on autoBreadcrumbs already. Should I leave it out of the instrument config then?. @benvinegar - updated, let me now if that works for you!\nedit: awkward wording, I did actually test it :P I meant if the change is OK for you. @benvinegar - would be great if you could -- I'd like to get this landed as soon as possible so Expo users can use Sentry easily so if it will take you some time I can dig into it. ping @benvinegar :). happy monday @benvinegar!. cool, thanks! done. @benvinegar - yeah let's do that. \ud83c\udfb8 . ",
    "StudioMaX": "Bump. I get a lot of reports about this error, which occurs only in Safari (iOS/OSX).. @kamilogorek unfortunately, I cannot reproduce the error that occurs in my case. I tried partially to implement this commit https://github.com/getsentry/raven-js/pull/1181/files#diff-a4cb6d8063a6aea4bba2d6f10472b5f4R461 on my project for debugging, but when someone throws this error, JSON.stringify() for [object DOMError] says that this object is empty (json {}).\n```javascript\n  captureMessage: function(msg, options) {\n      // Convert the message into a string\n      var exceptionMessage;\n      if (typeof msg === 'object' && msg !== null) {\n          exceptionMessage = '' + msg + ': ' + JSON.stringify(msg); // <--\n      } else {\n          exceptionMessage = '' + msg;\n      }\n   // ...\nvar data = objectMerge(\n  {\n    message: exceptionMessage\n  },\n  options\n);\n\n```\nStacktrace here: https://sentry.io/share/issue/602b3ae3524a4450a80033bfb4b437c6/. ",
    "azizhk": "Ok found out there is a shouldSendCallback option. Let me try if that helps. Then you can go ahead and close this issue.. ignoreErrors is checked only against the message and not against the type.\nhttps://github.com/getsentry/raven-js/blob/b8afab1d156467cb2cca0a166385fe9a94aff2cb/src/raven.js#L1290. ",
    "tamtamchik": "@benvinegar sure I understand your arguments, that's why I did it as an optional flag disabled by default. On our project, we enabled it just for a short period of time to see what's the cause of thousands of [object Object] errors (turned out ADs).\nI'm pretty sure it's not a common case, but enabling the flag is easier than compiling personal build. J\nJust close the PR if you don't feel like adding it, no worries. \ud83d\ude03 \nPS. I don't like the name of the flag myself, but my English is not so good in creating variables names.. ",
    "kylemellander": "So, looking into this issue a bit here, it seems that when sent from a file system, some browsers send CORS requests as null instead of file:///. That is causing this error, which we are also experiencing.  Would it be a viable solution for us to set the header to Access-Control-Allow-Origin: * for the requests going out when the origin is a file system?  Or allowing the user to set a header for the requests so that those who need this can add it in?. We have done this with our secret dsn and it still is giving us the same error (also had allowSecretKey set to true). ",
    "annejhetson": "\n. Hey @benvinegar, I just wanted to keep you in the loop on this issue that my cowork created.. ",
    "stripathix": "This makes it work in Cordova:\nRaven.config(, { allowSecretKey: true });. I have tried both, but none of it works. It works with raven-js.\nhttps://*@sentry.io/181355 \nhttps://*:*@sentry.io/181355. I get same Beacon error if I use public DSN.\nhttps://3465be5d330a4a29ba860b6da7c27abc@sentry.io/181355\n[Error] Beacon API cannot load https://sentry.io/api/181355/store/?sentry_key=3465be5d330a4a29ba860b6da7c27abc&sentry_version=7. Failed HTTP authentication. Thanks, I will try that.. Hi @kamilogorek Please, can you explain what does this mean \"TypeScript is hard.\" was this problem caused due to typescript? \"use strict\" and JSLint would have caught this during development. :-)\n. Hi @kamilogorek, could you please help with this. . File name in stack frames looks wrong\n{\n              \"filename\": \"[native code]\",\n              \"lineno\": null,\n              \"colno\": null,\n              \"function\": \"forceError\",\n              \"in_app\": true\n            }. One more sample error console looks like this. Raven.js  does not gets any information of error.\n\nOn sentry it looks like this\n\n. @kamilogorek \nWith @sentry/browser it's even worse that's why I moved to Raven. \nBelow is how it looks like when app is running as Hybrid app using capacitor + Ionic 4 + VueJS + @sentry/browser\n\n\nBelow is the link of error which is logged when I use @sentry/browser.\nhttps://sentry.io/share/issue/d0c7e9529ac94dba9c4b7b04e16361ba/\nThis is how the console looks like\n\nSentry Setup\nSentry.init({\n    release: \"WSVue-\" + AppConst.application.version + \"-\" + AppConst.application.bundleVersion,\n    dsn: \"https://f5f708eca78141d1b09aec3c5eade8f1@sentry.io/181356\",\n    transport: Sentry.Transports.FetchTransport,\n    integrations: [new Sentry.Integrations.Vue({Vue})],\n    environment: \"DEVTEST\",\n    beforeSend: function (exception) {\n        return exception;\n    }\n});\nAlthough it looks beautiful when running application is running as a website\n\nBelow is same error logged when app is running as website\nhttps://sentry.io/share/issue/4133deab3fc240f2bc85c680fae922a0/\n. @kamilogorek  Not a problem I have created a test project for reproducing the issue. Capacitor is exactly similar to cordova. Same debugging process.\nhttps://github.com/stripathix/ionic-vue\nTo trigger an error just click on Trigger Error button\n\nTo run the application I have added steps on README.md. It's pretty easy. Almost similar to Cordova environment.\nTo debug hybrid app it's exactly similar to Cordova debugging. Just run the app on the simulator and then from safari open Inspector for an app running on the simulator.\nBelow is the link of error logged when app was running a hybrid mobile app.\nhttps://sentry.io/share/issue/a19f3ecd72eb4e6fa216e4146ad91038/\n\n. hi, @kamilogorek did you got chance to look into this?. ",
    "acanimal": "@ismay can you make a short summary or point me to the right files? Thanks. ",
    "tstirrat15": "I did this:\n```javascript\nimport {\n  configureScope as configureBrowserScope,\n  captureMessage as browserCaptureMessage,\n} from '@sentry/browser';\nimport {\n  configureScope as configureNodeScope,\n  captureMessage as nodeCaptureMessage,\n} from '@sentry/node';\n// TODO: figure out whether this is actually okay.\n// NOTE: process.env.BROWSER is being provided by webpack's DefinePlugin in this case.\nexport const configureScope = process.env.BROWSER ? configureBrowserScope : configureNodeScope;\nexport const captureMessage = process.env.BROWSER ? browserCaptureMessage : nodeCaptureMessage;\n``\nThe jury's still out on whether it's a dumb idea. My understanding of ES6 exports is that you don't want to make them conditional, because you want them to be statically analyzable, but I think this should have the desired effect?. Yeah... and I found that it really doesn't work that well, because the node packages expectfs` to be available, so it fails in the client bundle import.\nHopefully tree-shaking does its thing :man_shrugging: . Got it. Thanks!. Is this in the documentation? If not, is there a place that I can add it to the documentation? This isn't entirely intuitive.. Gotcha. I knew about ignoreErrors, but my concern is that that's a gliobal ignore, where I was really wanting to make sure that there wasn't something I could do to fix this particular case.\nThere's also still a possibility that there's a bug in our code. Thank you for your response!. ",
    "Enalmada": "Thank you sentry team for your consideration on this issue.  Having isomorphic support would help the massive next.js community become sentry users.. Thank you sentry team for considering this feature request.  Doing it would help us convert the massive next.js community to becoming sentry users.. ",
    "sheerun": "This won't really work as node and browser versions have different useful plugins. I think a necessary solution is aliasing in webpack like here: https://github.com/zeit/next.js/issues/1852. I think CI failures are unrelated to implementation. Isn't it more like error than warning? What is the use case of returning undefined?. All good but honestly I don't like the basename(frame.filename) part. Wouldn't better default be paths relative from project root? Especially they are uploaded this way by sentry-cli.. You don't need to figure out root directory by yourself, it can be passed as a flag to @sentry/node. This would be additionally beneficial as this way of implementing this would be backward compatible (no root provided, no paths rewritten).. Another reason: bundling application into single file on node side practically never happens, usually application is executed without bundling anything. I guess this method it's fine if RewriteFrames is not enabled by default. Maybe little verbose and requires to import path and still write a bunch of code when almost always you mean to rewrite all paths relative to some dir. Maybe something like this would be better:\njavascript\ninit({\n  integrations: [new Sentry.Integrations.RewriteFrames({ root })]\n})\n(of course iteratee could stay for advanced use cases)\n. @kamilogorek Just one more question about decision to use app:/// prefix. It seems that sentry-cli upload-sourcemaps uploads files with ~/ prefix by default. Does Sentry treat these two on server side as equivalents? If not, isn't ~/ prefix a better default?. maybe prefix option set by default to app:/// would be reasonable? this could be as well useful if uploaded sourcemaps need some directory prefix\ninit({\n  integrations: [new Sentry.Integrations.RewriteFrames({ root, prefix })]\n}). Side note: I tried to implement it as an integration but it's harder than expected because @sentry/node doesn't export helpers for extracting pre_context, post_context etc. given line number and filename. Yeah, this is most likely what is crashing our app.. We're using newest @sentry/node. Closing as duplicate of #1668. https://blog.github.com/2018-10-21-october21-incident-report/. Could you provide some workaround? I'd like to ignore this particular error to break the loop but the only option I can find in new sdk is blacklistUrls which blacklists url, not errors, and it is said to be not available for JavaScript SDK in docs: https://docs.sentry.io/learn/configuration/?platform=javascript . The issue is not about sending this to Sentry but infinite loop of sending this.\nI've noticed that this loop happens only when using following config option:\nintegrations: [new Sentry.Integrations.RewriteFrames({\n    root: process.cwd()\n  })]\nso maybe Dedupe integration fails because stacktrace is modified. Here's reproduction:\n```js\nvar Sentry = require(\"@sentry/node\");\nclass MyTransport {\n  captureEvent(event) {\n    console.log(\"here\");\n    return Promise.reject(\"429\");\n  }\n}\nSentry.init({\n  debug: true,\n  dsn: \"https://123@sentry.io/123\",\n  transport: MyTransport,\n  integrations: [\n    new Sentry.Integrations.RewriteFrames({\n      root: process.cwd()\n    })\n  ]\n});\nSentry.captureMessage(\"Test Message\");\n```. Also I'd like to notice that Dedupe integration should be irrelevant for this to work. I think that transport errors should be simply \"manually\" reported to sentry and not rethrown, this way they won't even have a chance to go into this loop and there's no need to fix dedupe implementation.. Another note: even without this integration error is reported two times instead of once. Here's reproduction:\n```js\nvar Sentry = require(\"@sentry/node\");\nclass MyTransport {\n  captureEvent(event) {\n    console.log(\"here\");\n    return Promise.reject(\"429\");\n  }\n}\nSentry.init({\n  debug: true,\n  dsn: \"https://123@sentry.io/123\",\n  transport: MyTransport\n});\nSentry.captureMessage(\"Test Message\");\n```\nSentry Logger [Log]: Integration installed: Dedupe\nSentry Logger [Log]: Integration installed: InboundFilters\nSentry Logger [Log]: Integration installed: FunctionToString\nSentry Logger [Log]: Integration installed: Console\nSentry Logger [Log]: Integration installed: Http\nSentry Logger [Log]: Integration installed: OnUncaughtException\nSentry Logger [Log]: Integration installed: OnUnhandledRejection\nSentry Logger [Log]: Integration installed: LinkedErrors\nhere\nSentry Logger [Error]: 429\nhere\nSentry Logger [Error]: 429\nEDIT: never mind this just reports message first and 429 second, it's just Sentry Logger reports wrong name. https://blog.github.com/2018-10-21-october21-incident-report/. Similarly 429 error is reported to sentry, causing infinite loop in some cases: #1668\nI think there should be a blacklist of some sentry errors that are not reported again to sentry, this one and 429 are good first candidates.. ",
    "Vadorequest": "Also interested in an isomorphic solution, tried to load raven on the server side only, using \"require\" and not \"import\" but it still causes issues somehow like: (Using Next 5)\nModuleNotFoundError: Module not found: Error: Can't resolve 'console' in '/Users/vadorequest/dev/loan-advisor/node_modules/raven/lib/instrumentation'\n    at factoryCallback (/Users/vadorequest/dev/loan-advisor/node_modules/next/node_modules/webpack/lib/Compilation.js:276:40)\n    at factory (/Users/vadorequest/dev/loan-advisor/node_modules/next/node_modules/webpack/lib/NormalModuleFactory.js:235:20)\n    at resolver (/Users/vadorequest/dev/loan-advisor/node_modules/next/node_modules/webpack/lib/NormalModuleFactory.js:60:20)\n    at asyncLib.parallel.e (/Users/vadorequest/dev/loan-advisor/node_modules/next/node_modules/webpack/lib/NormalModuleFactory.js:127:20)\n    at /Users/vadorequest/dev/loan-advisor/node_modules/async/dist/async.js:3888:9\n    at /Users/vadorequest/dev/loan-advisor/node_modules/async/dist/async.js:473:16\n    at iteratorCallback (/Users/vadorequest/dev/loan-advisor/node_modules/async/dist/async.js:1062:13)\n    at /Users/vadorequest/dev/loan-advisor/node_modules/async/dist/async.js:969:16\n    at /Users/vadorequest/dev/loan-advisor/node_modules/async/dist/async.js:3885:13\n    at resolvers.normal.resolve (/Users/vadorequest/dev/loan-advisor/node_modules/next/node_modules/webpack/lib/NormalModuleFactory.js:119:22)\n    at onError (/Users/vadorequest/dev/loan-advisor/node_modules/enhanced-resolve/lib/Resolver.js:65:10)\n    at loggingCallbackWrapper (/Users/vadorequest/dev/loan-advisor/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at runAfter (/Users/vadorequest/dev/loan-advisor/node_modules/enhanced-resolve/lib/Resolver.js:158:4)\n    at innerCallback (/Users/vadorequest/dev/loan-advisor/node_modules/enhanced-resolve/lib/Resolver.js:146:3)\n    at loggingCallbackWrapper (/Users/vadorequest/dev/loan-advisor/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at next (/Users/vadorequest/dev/loan-advisor/node_modules/tapable/lib/Tapable.js:252:11). ",
    "4knort": "\nWell I'm not exactly sure what you're running into, but here's what I'm doing (which I think would work in your situation as well):\n\nclientside entry point (uses raven-js)\nserverside entry point (uses raven)\nany shared code uses the Raven global, which is available in both environments (see here for example: https://github.com/ismay/ismaywolff.nl/tree/develop/src/shared/services/raven\n\nError reporting works for me both client and serverside. I haven't run into the XMLHttpRequest error that you describe. Might be due to isomorphic-fetch, which I am using.\n\nwhere is repo. ",
    "slvtrs": "FWIW, I ran into a similar issue from createEventObject() in my expokit app using sentry-expo.\nThe Raven._hasDocument = false; fix worked for me, although I'm not doing any special document mocking (that I'm aware of) so I'm not sure why I hit this issue in the first place.. ",
    "jelling": "Can you show your config? I'm having issues with Angular 2 + Sentry after following their documentation. . ",
    "ishitatsuyuki": "Minimal to be functional:\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err: any): void {\n    Raven.captureException(err);\n  }\n}. ",
    "filipgorczynski": "According to same problem that we had with this installation and @ishitatsuyuki comment here is Pull Request.. ",
    "mirague": "@LewisJEllis Absolutely!\nInstallation\nCreate a new project\nember new myproject\nInstall Raven\nbower install raven-js\nImport\nIn ember-cli-build.js I've added this snippet:\n```\n// ember-cli-build.js\nmodule.exports = function (defaults) {\n  // ...\n// add these lines:\n  app.import('bower_components/raven-js/dist/raven.js');\n  app.import('bower_components/raven-js/dist/plugins/ember.js');\nreturn app.toTree();\n};\n```\napp/index.html (configuration)\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  {{content-for \"head\"}}\n  <link rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\">\n  <link rel=\"stylesheet\" href=\"{{rootURL}}assets/myproject.css\">\n  <meta name=\"sentry:revision\"></meta>\n  {{content-for \"head-footer\"}}\n</head>\n<body>\n  {{content-for \"body\"}}\n  <script src=\"{{rootURL}}assets/vendor.js\"></script>\n  <script>\n    Raven.config('https://redacted@sentry.io/redacted', {\n      release: $(\"meta[name='sentry:revision']\").attr('content'),\n      ignoreErrors: ['TransitionAborted']\n    }).addPlugin(Raven.Plugins.Ember).install();\n  </script>\n  <script src=\"{{rootURL}}assets/myproject.js\"></script>\n  {{content-for \"body-footer\"}}\n</body>\n</html>\nNote: The release is populated based on a <meta> tag defined on runtime by Ember.\nNote 2: Replace myproject with your project name as supplied to ember new.\nThrow an Error\nFor the test I've generated a Component (ember generate component my-component) and pasted a throw new Error('Foo') in the didInsertElement() hook:\n```\n// app/components/my-component.js\nimport Ember from 'ember';\nconst { Component } = Ember;\nexport default Component.extend({\n  didInsertElement() {\n    throw new Error('Foo');\n    // or this.iDontExist();\n  }\n});\n```\nThen in any template (e.g. application.hbs) you render the component:\n```\n// app/templates/application.hbs\n{{my-component}}\n```\nExtra info (not part of the above scenario)\nBy doing the above I managed to reproduce this. The bug may be contained to components only. I tried throwing an error already in a router like this:\n```\n// app/routes/index.js\nimport Ember from 'ember';\nconst { Route } = Ember;\nexport default Route.extend({\n  beforeModel() {\n    this.iDontExist();\n  }\n});\n```\nThe above did show the error in the console and also fired an XHR request to Sentry, making the error show up on my Dashboard correctly.\nLet me know if you experience the same behaviour by having an error occur inside a component.\n. ",
    "trojanh": "Hi @benvinegar , I appreciate that you are personally looking into this issue for Ember.\nDid you try the above code ? Were you able to reproduce the issue? Do let us know if there is anything else you need to fix this issue.. ",
    "Oupsla": "Hello @benvinegar !\nAfter some researches, I have found that the translation is correct but the missing word is scraped when the user feedback is opened on mobile.. ",
    "stenmuchow": "Seems when all my files get combined thru uglify its removing some key code. . ",
    "k-funk": "In my case, the relevant header is custom, so I'd either need to be able to configure to capture that one, or get all of them.. Any way for me to identify xhr requests defined by my server with that HTTP Header, either by enhancing breadcrumbs or some other way?. ",
    "M1ke": "I'm keen on this feature; would there be anything we could do PR-wise to speed it along?. ",
    "LinusU": "@benvinegar @kamilogorek any updates on this? \nIn the meantime, can you guarantee that the current URLs will never change content, so that we can start using this even though it's not documented? e.g.\nhtml\n<script src=\"https://browser.sentry-cdn.com/4.3.0/bundle.min.js\" integrity=\"sha384-cOcwme53k92SVDcGENwB19CkMgqrWCk7uwWQj+Wk7ojGnnHsDtE7NZHHyIuls0lp\" crossorigin=\"anonymous\"></script>. @HazAT could we reopen this, please? I think it's important to have a way to work with this on Lambda, which is becoming an increasingly common target to deploy to.\nThis is currently blocking me from upgrading to the latest version...\nPersonally, I would prefer being able to get a Promise/callback when reporting an error. Having a way to drain the queue without actually closing it afterward would be the next best thing...\nWhat was the rationale of removing the callback from captureException?. > what is the solution and sentry or raven solution are you using?\nI'm using the following express error handler:\n```ts\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  let status = (err.status || err.statusCode || 500) as number\nif (process.env.NODE_ENV === 'test') {\n    return next(err)\n  }\nif (status < 400 || status >= 500) {\n    Raven.captureException(err, () => next(err))\n  } else {\n    next(err)\n  }\n})\n```\nI'm then using scandium to deploy the Express app to Lambda\nedit: this is with Raven \"raven\": \"^2.6.3\",. The dream API would be something like this \ud83d\ude0d \njs\nSentry.captureException(err: Error): Promise<void>. Seems that what I actually want is something more like:\njs\nconst backend = client.getBackend()\nconst event = await backend.eventFromException(error)\nawait client.processEvent(event, finalEvent => backend.sendEvent(finalEvent))\nIn order to skip all the queueing and buffering...\nI get that the design is tailored to \"fire and forgot\", and for running in a long-running server, and it's probably quite good at that since it does a lot of buffering, etc. The problem is that this is the exact opposite that you want for Lambda, App Engine, and other \"serverless\" architectures, which are becoming more and more common.\nWould it be possible to have a special method that sends the event as fast as possible, and returns a Promise that we can await? That would be perfect for the serverless scenarios!\n```ts\nclass Sentry {\n  // ...\nasync unbufferedCaptureException(err: Error): Promise {\n    const backend = this.client.getBackend()\n    const event = await backend.eventFromException(error)\n    await this.client.processEvent(event, finalEvent => backend.sendEvent(finalEvent))\n  }\n// ...\n}\n```. > we'll most likely create a specific serverless package for this scenario\nThat would be amazing! \ud83d\ude0d . Seems like the following changes would work for me then \u263a\ufe0f \n```diff\n-import Raven = require('raven')\n+import * as Sentry from '@sentry/node'\n// ...\n-Raven.config(config.SENTRY_DSN)\n+Sentry.init({ dsn: config.SENTRY_DSN })\n// ...\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n   let status = (err.status || err.statusCode || 500) as number\nif (process.env.NODE_ENV === 'test') {\n     return next(err)\n   }\nif (status < 400 || status >= 500) {\n-    Raven.captureException(err, () => next(err))\n+    Sentry.getCurrentHub().getClient().captureException(err).then(() => next(err))\n   } else {\n     next(err)\n   }\n })\n```\nTo be honest, every line got a little bit uglier \ud83d\ude06 but I guess that it's better under the hood...\n@kamilogorek I couldn't find getCurrentHub() in the docs on your website, is this API guaranteed not to break without a major semver bump? \u2764\ufe0f . @HazAT isn't the problem that close(...) will prevent the client from being used again? Lambda reuses the same Node process so the calls would be something like this, which I guess will stop working after the first call to close?\n\nSentry.init()\nSentry.captureException()\nSentry.getCurrentHub().getClient().close()\nSentry.captureException()\nSentry.getCurrentHub().getClient().close()\nSentry.captureException()\nSentry.getCurrentHub().getClient().close()\nSentry.captureException()\nSentry.getCurrentHub().getClient().close()\n.... Personally I feel that\n\njs\nawait Sentry.getCurrentHub().getClient().captureException(err)\nis cleaner than:\njs\nSentry.captureException(err)\nawait Sentry.getCurrentHub().getClient().close(2000)\nclose really reads like it will close the client...\nFull example:\n```typescript\nimport * as Sentry from '@sentry/node'\n// ...\nSentry.init({ dsn: config.SENTRY_DSN })\n// ...\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  let status = (err.status || err.statusCode || 500) as number\nif (process.env.NODE_ENV === 'test') {\n    return next(err)\n  }\nif (status < 400 || status >= 500) {\n    Sentry.getCurrentHub().getClient().captureException(err).then(() => next(err))\n  } else {\n    next(err)\n  }\n})\n```. Aha, that's not good at all \ud83d\ude1e . Nice!\nAre there still plans on making a minimal package just for capturing exceptions from Lambda and other serverless solutions? I think that that would still be a really nice addition \u2764\ufe0f . ",
    "b264": "Pretty sure the root cause has to do with why I cannot use\nimport { Raven } from 'raven-js';\nand instead have to use\nimport Raven from 'raven-js';\nEvery other import in the entire project uses the braces, and doesn't have this error.. That instead raises\nTypescript Error\nImport assignment cannot be used when targeting ECMAScript 2015 modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.. It sounds like the problem then is Raven.js is not exported as a proper ES6 module.  Maybe I can't use Sentry at all then?. This came from https://docs.sentry.io/clients/javascript/integrations/angular/. I got it to work with\n```\nimport * as Raven from 'raven-js';\n// ...\nRaven\n  .config('semi-secret stuff')\n  .install();\nexport class RavenErrorHandler implements IonicErrorHandler {\n  handleError(err:any) : void {\n    Raven.captureException(err);\n  }\n}\n// ...\n@NgModule({\n// ...\nproviders: [\n    {provide: ErrorHandler, useClass: RavenErrorHandler},\nin `app.module.ts`. Which is slightly different than the instructions say. originally there was\n{provide: ErrorHandler, useClass: IonicErrorHandler},\n``. Also I had to useRaven.captureException(err);instead ofRaven.captureException(err.originalError);`. ",
    "TimPetricola": "I totally see your point in not having too many callbacks. Having access to the error object in dataCallback would certainly be enough and would be perfect to centralize everything in this callback. I was also under the impression that the error object should be parsed at this point though.\nAlso, at this point, we could be dealing with an error or a message, so the signature should be flexible enough to handle either of them.. Actually I'm wondering if it would not make more sense to introduce the same behavior as in raven-node for consistency?. Any update on what we could do on this one? :). Could be replaced by this.sinon.match.any if Sinon is updated to >= 2.0 (support added in https://github.com/sinonjs/sinon/pull/1076). ",
    "seromenho": "Hey,\nI'm happy with that. \nLet me know if I can help.\nThank you.. @kamilogorek yes. Let me know what I can do to help.\nThank you.. Closing this one. Followed suggestions and created a plugin from this.. @kamilogorek Thank you som much for your review!\nI have implemented your requested changes.\nLet me know if it's all good now.. Great, thanks.\nAs far for the tests. I won't be able to add them at least on this week.\nI'll try to add them when possible or I'll accept help from anyone \ud83d\ude04 \n. Awesome! Thanks. Yes, but then when trying to send it again when get back offline, because _lastData is set with potentially the same data we will be try to send, it will be missed because it's the same data.. true :). Just to make sure, from what I have seen they will have(and be) to be the same right?\nI can remove the fallback.. Thanks. This is just because the application might rely on a different event for letting other plugins know when the connection is available (e.g. on our cordova-based hybrid app we trigger a \"foo-bar-online\" event to the document when we're sure the app is online and it was able to make an XHR request), because \"online\" can easily mean \"connected to the network\" as in \"local network\" but still not be connected to the internet.. ",
    "CombeeMike": "Is this plugin somewhere publicly available?. ",
    "ivantsov": "Hey, any progress on the issue?. ",
    "marcua": "Whoops! This error is unrelated to raven-js but got attributed to it through its wrapping of console logs. Closing the issue. Thanks!. ",
    "polco": "(the indentation makes the diff difficult to read but nothing was changed :) ). hello @MaxBittker i understand the hassle no problem. The patch doesn't change anything about the way raven-js was being used by typescript in the past versions and add nothing more than the access to the internal interfaces.\nI actually was 'forced' into this PR by the latest version of typescript which strengthened their type inference system.. Haha thank you ;). awesome, waiting for the release to test it again :). just tried it, it's working great, thanks @kamilogorek  ;). ",
    "mattkgross": "+1 We are also experiencing this exact same issue for our baked-in ASP _doPostBacks. I am not seeing any other smooth solution around this.. ",
    "sod": "Was nice to have. Currently we monkeypatch captureException() to remember the last value that went into raven to be able to consume it in dataCallback.\nThere already is lastException() but that yields invalid values if raven shortcuts into capture message(). html\n<script>\n  undefined.foo();\n</script>\n^ This in your html is logged in safari via sentry as [object ErrorEvent]. Correct message would have been TypeError: undefined is not an object (evaluating 'undefined.foo').\nWe have an external script that injects code via script tag that tries to create an iframe, but thats blocked by safari. As the error originates from the injected script tag, sentry just reports [object ErrorEvent]. Another error from sentry reported as just [object Event] is from the flowplayer. The flowplayer does \njavascript\njQueryElement.trigger('error', [api, {code: 5}]);\nYou can reproduce it by embedding jQuery and just do:\njavascript\n$('div:first').trigger('error')\nSentry sees something like this\n \nSure thats not very serializable, but an error like error on element from jQuery - context <div class=\"foo><div class=\"bar\" ... would be much more helpful then [object Event]. Why not returning the value directly?\nIs there a list of browser features that raven-js shims?. ",
    "zewa666": "For anybody looking how to do what @sod mentioned here is a short snippet:\n```typescript\nimport * as Raven from \"raven-js\";\nlet lastError: Error | undefined;\nconst originalCaptureException = Raven.captureException;\n// tslint:disable-next-line:only-arrow-functions no-any\n(Raven as any).captureException = function(ex: Error, options: any) {\n  lastError = ex;\n  // tslint:disable-next-line:no-any\n  return (originalCaptureException as any).apply(Raven, arguments);\n};\nRaven.config(\"https://9bcd791415f24e608ffa7b03154a7afc@sentry.io/284978\", {\n  shouldSendCallback: (data) => {\n    if (lastError && DO YOUR CHECK HERE) {\n      lastError = undefined;\n      return false;\n    }\nreturn true;\n\n}\n}).install();\n```. ",
    "vzaidman": "looks like i also found a solution:\nhttps://stackoverflow.com/questions/34736866/css-is-broken-in-ie11-until-developer-tools-are-opened. opened the bug on sentry instead:\nhttps://github.com/getsentry/sentry/issues/5601. ",
    "fephil": "@philraj By any chance are you using Ionic 2/3? I'm having a different issue where the sourcemap points to the wrong location in the code (normally just the page class rather than the specific line of code). I'm posting here as I'd be happy to share my approach and research so far.. ",
    "philraj": "@fephil As far as I know it's just a straight Cordova project (well, with React mixed in). But by all means share what you've discovered, could be interesting to see how others are dealing with similar issues and will certainly help anyone else searching for solutions.\n@MaxBittker It was like Dan Harper mentioned in this gist https://gist.github.com/danharper/a89685cc1028759345b8\nAndroid: file:///android_asset/www/bundle.js\niOS: file:///var/mobile/Applications/<build hash>/<app name>.app/www/bundle.js. ",
    "AndrewSouthpaw": "Let me know if there's some way I can help!. ",
    "pke": "Ok, cool. I imagine you are thinking of setProp(name) to replace all the setXXX?\nWhile your workaround also works, what do you think of the one I presented in the OP? Should it also work? Cause I can't seem to see the device id anyway in the reported events.. Thanks for the swift response. I'll create a reduced version of my webpack config for tests.. ",
    "jt3k": "but... is possible using without Sentry ?. Ok, thanks for your reply. I already figured it out.\nI will voice the solution for the descendants:\n___PUBLIC_DSN___  is just a string with a certain format.\nYou can use the string username@servername/somepath as ___PUBLIC_DSN___.\nIt is important that the validator can properly parry it. Because otherwise it will not work, and an error will be thrown.\nThe finished example will look something like this:\n```js\nimport Raven from 'raven-js';\nRaven.config('username@servername/somepath').install();\nRaven.debug = true;\nRaven.setTransport(function(data) {\n    const messages = data.data.exception.values.reduce((memo, exception) => {\n        var message = ${exception.type}: ${exception.value};\n        var stack = exception.stacktrace.frames.reduce((acc, frame) => {\n            acc += \\t${frame.function} (${frame.filename}:${frame.lineno}:${frame.colno})\\n;\n            return acc;\n        }, '');\n        memo.push(message + '\\n' + stack);\n        return memo;\n    }, []);\nconst browserTime = (new Date).toISOString();\n\nfetch('http://localhost:1234/report', {\n    method: 'post',\n    body: JSON.stringify({\n        messages,\n        browserTime,\n        sessionDuration: data.data.extra['session:duration'],\n\n    }),\n})\n    .then(data.onSuccess)\n    .catch(data.onError);\n\n});\nRaven.setUserContext({\n    email: 'me@example.com',\n    id: 5,\n});\n```\nI took it from my project and did not check it, but you can always contact me here for clarification\nThank you for attention :-P. ",
    "njroussel": "Added a very basic test case. Will this change also be applied to sentry-rn on the next release ? Or should I open a PR for there too ?. ",
    "asoccard": "Any update on what we could do on this one? :). ",
    "joshribakoff": "Sure, how are you capturing the console.log calls currently? I assume you're wrapping console.log?\n\nA simple test shows that the console.log wrapper is passed callee which shows where the console.log call originated. Assuming Raven JS is also wrapping / replacing the console.log function, it could use this info.\n. The VM155 means that the callee was the console itself. If I just did a simple console.log() in devtools it says the same thing.\nMaybe its not standardized but it does work currently. If you dont' like that method, how about this one:\n(function () { console.log(new Error().stack); })();\nWorks for me.... Let me know if you have a problem with that & if so what is the issue? I can come up with some more ideas.. I disagree that it's trivial. This tool is intended to improve debugging\nbut actually obfuscates info pertinent to debugging. If it's a lot of work\nas you then it doesn't sound like something I can easily add myself with\nthis callback. I'm not disagreeing that it's difficult to do. But the\nnumerous times this seems to show up on the issue tracker shows this is a\ncommon request/problem so it's obviously not low priority to everyone. I\ndon't have any suggestions on the source map issues. I thought sentry\nalready does source maps.\nOn Sat, Aug 5, 2017 at 4:27 PM Ben Vinegar notifications@github.com wrote:\n\nMaybe its not standardized but it does work currently\nIt won't work if code enables strict mode, which seems like common\npractice today. It also doesn't appear that this works in Firefox (with\nstrict mode disabled). Here's the arguments object there (using your code\nabove):\n[image: image]\nhttps://user-images.githubusercontent.com/2153/28999416-85c527b2-79fa-11e7-8fbb-67c47447b8d2.png\n(function () { console.log(new Error().stack); })();\nYeah, I think this could work. I guess we'd need to extend the breadcrumb\nAPI in Sentry server to have first-class properties for filename and line\nnumber, then reflect that in the UI. And we'd need to apply source maps so\nthat the source file isn't always app.min.js (example) and the line number\nis 1. That's a lot of work for a relatively small feature, so it's probably\npretty low on our priority list.\nIn the meantime, you might be able to implement this yourself using the\nbreadcrumbCallback config option, which fires every time a breadcrumb is\nrecorded. You could inspect whether this was a console call, then throw\nan Error and slice off the correct number of frames to arrive at the\nfilename/line number to attach to the breadcrumb property list.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/1003#issuecomment-320476047,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD1cOuUCMIiBDfAKh-YboCqIRN3HBe8Kks5sVPpMgaJpZM4OnjCn\n.\n-- \nSent from Gmail Mobile\n. \n",
    "billyvg": "@joshribakoff I'm not sure if you can do this in other browsers, but you can blackbox raven-js script in chrome devtools:\n\n. @ffxsam it's autoBreadcrumbs, sorry!. I think when you run things using yarn/npm, it'll add node_modules/.bin to search path.\n. ",
    "sn0lan-vpm": "There are several of them coming back. They don't break anything. That are just warnings. But it's causing rate limiting.\nAn example of one:\n```\nPusher : Error : {\"type\":\"WebSocketError\",\"error\":{\"type\":\"PusherError\",\"data\":{\"code\":1006,\"message\":\"Connection interrupted (0)\"}}}\n. ",
    "MeredithAnya": "excellllllenntttt. ",
    "shanesmith": "The issue could be in TraceKit's traceKitWindowOnError() method, it doesn't seem to take into account that the message argument could be an ErrorEvent (see MDN docs). ",
    "daangeerdink": "@benvinegar There are some docs here on ErrorEvent: https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent. ",
    "rosslavery": "Affected by this too, so are these users:\nhttps://forum.sentry.io/t/reporting-object-errorevent/1807\nraven-js@3.17.0 (but has been happening for a while on older versions too)\nAngular 4.x\nUsing CLI. I personally can't provide a repro, because the errors are so opaque I can't discern which part of my codebase is throwing the error. I don't have any stack traces to work with, nor an error message to figure out if it's my code, or a 3rd party lib, etc.\nHopefully someone else has a simplified example they can provide, sorry I couldn't be of more assistance.\n. ",
    "tgensol": "Same here with Ionic 3 and raven-js@3.17.0. Same here, I also tried to use Zonejs 0.8.18, but it is not working as well. Same here with latest Ionic 3.7.1 and zone js 0.8.18 : everything looks to work \ud83d\udc4d  ! The issue was only with 0.8.17. ",
    "jdelaune": "Also affected by this.. ",
    "rafinskipg": "@kamilogorek  We have 2 millions errors of this type. I thought it was our problem, but we were unable to track it correctly. . ",
    "shcallaway": "I found the issue. ErrorEvent is not being treated as an error by the isError util function, which can be found here. For convenience, I'll paste the function definition also:\nfunction isError(value) {\n  switch ({}.toString.call(value)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return value instanceof Error;\n  }\n}\nI did a quick test in my console to see whether or not this function would return true for an ErrorEvent, and it did not:\n\nisError is used in the captureException method to determine whether the exception parameter is an error or simply a message. captureException will send exceptions to the dashboard using captureMessage if it thinks the exception is not actually an error. In this case, Raven will not compute a stack trace or \"process\" the exception. It just sends it off as is. \nIs there any reason we shouldn't update isError to return true for ErrorEvent objects?. The constructor for ErrorEvent takes an Error, so you could easily handle them like so:\nif (isErrorEvent(ex)) {\n    ex = ex.error;\n}. You can see the construction definition here. In particular, look at the ErrorEventInit hash. It's an optional parameter, so I guess the solution I posted above doesn't handle the case where an ErrorEvent.error is undefined.. I understand. I'll put up a PR in a few minutes.. I'm seeing it on Chrome 61 also. \ud83d\ude15 I'll try to look into it soon.. It looks like the Travis CI build failed because you are missing some Sauce Labs variables in your CI environment. In other words, it's unrelated to the content of my PR.. @kamilogorek I added the tests you requested. It was a good thing too, because my logic for triggering captureMessage was ever so slightly off!. @kamilogorek I was hoping to get credit for the open source commits. \ud83d\ude15 . Great! \ud83d\ude02 \nSorry it's 4 AM here. . @michal-rumanek Woops. I misread the original comment. Fixed now.. @michal-rumanek The core developers would know best, probably. But I can see multiple ways of handling to the case where message is an ErrorEvent. For example, we could route it to the middle else if block by pulling the Error object out, like this:\nif (ex && utils.isErrorEvent(ex)) {\n  ex = ex.error;\n} else if (message && utils.isErrorEvent(message)) {\n  ex = message.error;\n}. @michal-rumanek @kamilogorek I disagree about passing the original message to _oldOnerrorHandler. Clearly, the original developer assumed that message would be a string. Otherwise, this [object ErrorEvent] bug would not exist. So it makes sense to pass the string to _oldOnerrorHandler rather than the ErrorEvent.. @kamilogorek @michal-rumanek Can I get some feedback on this? My team can't use Sentry until we start seeing real errors instead of ErrorEvents.. You\u2019re the best. Thanks!. My team is experiencing this with Angular 5 on IE 11. Seems related to the following:\n\nWhy all my events are \u2018unlabeled event\u2019 and have Discarded invalid value for exception and breadcrumb?\nLots of \\<unlabeled event> events\n\nIt sounds like it may be related to the format and/or type of the values field.\n@marvinosswald By the way, I think the ErrorEvent issue you are solving in your error handler was resolved as part of this release.. For the record, with all my unlabeled events, an error occurs during processing:\n\n. I got around to digging deeper into this, and I think I found the source of the problem. \nWhere does \u201cunlabeled event\u201d come from?\n<unlabeled event> is not something that users are passing, nor is it something that Raven applies. Where does it come from? \nThe answer is the Sentry server:\ndef get_metadata(self):\n        # See GH-3248\n        message_interface = self.data.get(\n            'sentry.interfaces.Message', {\n                'message': self.data.get('message', ''),\n            }\n        )\n        message = strip(message_interface.get('formatted', message_interface['message']))\n        if not message:\n            title = '<unlabeled event>'\n        else:\n            title = truncatechars(message.splitlines()[0], 100)\n        return {\n            'title': title,\n        }\nhttps://github.com/getsentry/sentry/blob/96bc1c63df5ec73fe12c136ada11561bf52f1ec9/src/sentry/eventtypes/base.py#L38\nWhen handling a DefaultEvent object, Sentry attempts to get the \u201csentry.interfaces.Message\u201d property (unsuccessfully) and falls back to the default value: { 'message': self.data.get('message', '') }\nWhich in turn evaluates to: { \u2018message': \u2018\u2019 }\nSo message_interface is assigned to this object, and on line 36, message is assigned to message_interface[\u2018message\u2019] \u2014 an empty string! \nIn the conditional on line 37, the empty string evaluates to false and title is assigned to our old friend, <unlabeled event>.\nTL;DR \u2014 The DefaultEvent is lacking both of the following properties: sentry.interfaces.Message and message. So Sentry uses a stand-in value as the title: <unlabeled event>\nThere's an error while processing this event. Why?\nAll unlabeled event errors appear alongside the same message: \u201cThere was 1 error encountered while processing this event\u201d.\n\nI believe this is the line responsible for adding the processing error.\nThe code appears to be casting each property (environment, breadcrumbs, exception, etc.) to a specific format. When the cast fails, it adds a processing error.\nWhat happens next is highly interesting: The raw \u2018message\u2019 is coerced to the Sentry message interface:\n# raw 'message' is coerced to the Message interface, as its used for pure index of\n        # searchable strings. If both a raw 'message' and a Message interface exist, try and\n        # add the former as the 'formatted' attribute of the latter.\n        # See GH-3248\n        msg_str = data.pop('message', None)\n        if msg_str:\n            msg_if = data.setdefault('sentry.interfaces.Message', {'message': msg_str})\n            if msg_if.get('message') != msg_str:\n                msg_if.setdefault('formatted', msg_str)\nIf the message property is missing, it defaults to None, and msg_str becomes falsy. If msg_str is falsy, the sentry.interfaces.Message and formatted properties are never assigned to msg_if. As we saw at the beginning of this post, these properties are necessary to prevent title from being assigned to <unlabeled event>.\nHypothesis\nRaven is sending a bad message object to the Sentry server. Specifically, it is missing the message property \u2014 or the message property is a falsy value, such as an empty string.\nMy guess is that somewhere in the captureException function (here), captureMessage is being passed an empty string for the msg param. Unfortunately, I can't figure out which if statement the error falls into because don't have access to the original error object \u2014and I don't know how to reproduce it. \nSolution\nWe need to make sure to call captureMessage with a good msg param. In other words, we should not be passing it an empty string. \ncaptureMessage is being called within captureException, so it looks like there's an error type (or object shape) that we are not accounting for there.\n. @kamilogorek Can I get your thoughts on this?. unlabeled event has totally dropped off for us. Thanks!. Done!. ",
    "sgoel": "Thanks @shcallaway! \ud83d\udc4d . ",
    "PhilippSpo": "Seems like we are still getting this issue on 3.19.1 \ud83e\udd14\n\n\n. @kamilogorek Chrome 61.0.3163. ",
    "DamodarSojka": "Also happens on Safari 11.0, Mac OS 10.13. ",
    "michal-rumanek": "It looks like traceKitWindowOnError doesn't process correctly input parameters when 'message' parameter is an ErrorEvent object:\n\nand 'ex' is undefined. Then, it invokes notifyHandlers with an object where 'message' field is an ErrorEvent, not string:\n\nwhich, when strigified in _makeRequest, produces meaningless message. \n. @kamilogorek, any progress? ;-). It doesn't cover the case where ErrorEvent is passed as message parameter, so it doesn't resolve #1008.\n\n. @shcallaway Now the error is logged correctly in Sentry panel. Thank you :-)\nBut, not sure if _oldOnerrorHandler shouldn't be invoked with original message parameter (original ErrorEvent object, not string created by message = message.message).. I think it's necessary, e.g. for the case when more than one Sentry global error handlers are installed (Raven.install()).\n@kamilogorek what do you think?. Thank you!. ",
    "GEMI": "Hi, I am getting a lot of these errors [object Object].\n\nAngular 4\nChrome 62.0.3202\nRaven-js 3.20.1. Yes, I am doing everything according to Sentry Angular docs.\n```\nexport class RavenErrorHandler implements ErrorHandler {\n  handleError(err:any) : void {\n    console.log('Error: ', err);\n    Raven.captureException(err.originalError || err);\n  }\n}\nproviders: [ { provide: ErrorHandler, useClass: RavenErrorHandler } ]\n```. Ok, I will try this.. ",
    "kumavis": "this is especially annoying because theres no info about the fetch request contained in the Error\njust TypeError: Failed to fetch\nHere's 3 ideas of how this could be improved in raven-js:\n- use the raven-js wrapper of fetch to improve the error message\n- add a breadcrumb when a fetch is started\n- add a breadcrumb when a fetch failed\n@benvinegar @kamilogorek @ismay . To clarify, this happens when performing a fetch fails, not when a server responds with a \"failure\" response. here is a PR that attempts to solve this via no 3 \"add a breadcrumb when a fetch failed\"\nhttps://github.com/getsentry/raven-js/pull/1293. thank you/. error created here https://github.com/ethjs/ethjs-rpc/blob/master/src/index.js#L50. I realize this is an Uncaught (in promise) error. It would be nice to add some metadata that this was an unhandled promise rejection. i dont understand the lint error\n.catch is a syntax error. @kamilogorek that seems like gratuitous coding around the linter, instead of removing an unnecessary lint rule or just adding a flag to ignore the lint rule in this case. and yet this is what eslint --fix produces\nwhatever, let me commit that. > ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.\n\n'catch' is a reserved word in ECMAScript 3, IE8 & 9 require this written in brackets e.g. this['catch'].bind() rather than the dot notation.\n\nhmm, TIL. @kamilogorek ready to go if it looks good to you. @kamilogorek thanks/ looking forward to getting this live to help diagnose some of our sentry reports \ud83d\ude38 . @Xurma2 note that this doesnt re-add the stack, its just supposed to add a breadcrumb \n@kamilogorek doesnt seem like its actually adding the breadcrumb, but not sure why\nrelevant code is now here https://github.com/getsentry/sentry-javascript/blob/a01b4ee7f7ba03167d7424daae2fb2f2206687cb/packages/raven-js/src/raven.js#L1486-L1496. @kamilogorek i dont know why i didnt see it before -- but I do see the Failed to fetch breadcrumbs now. ",
    "Dewep": "Hi,\nI have the same problem. I have this problem only on IE (11 in my case), but I can't reproduce the bug on a jsfiddle.\nReproduction does not seem important, because it seems to happen during problems with Vue.js (therefore not a real RavenJS issue). The problem being that Vue.js still reports the problem (using the errorHandler method), but being an internal problem, the vm parameter is undefined (which then causes a problem with your library).\nI edited your library to add some logs:\n```javascript\nfunction vuePlugin(Raven, Vue) {\n  // ...\n  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) {\n    console.error('call::VueErrorHandler, error.stack:', error.stack)\n    console.error('call::VueErrorHandler, vm:', vm)\n    console.error('call::VueErrorHandler, info:', info)\nvar metaData = {\n  componentName: formatComponentName(vm),\n  propsData: vm.$options.propsData\n};\n\n// ...\n\n};\n}\n```\nAnd here is the result:\n```\ncall::VueErrorHandler, error.stack: Error: Access is denied.\n   at setAttr (eval code:6153:7)\n   at updateAttrs (eval code:6107:7)\n   at invokeCreateHooks (eval code:5509:7)\n   at createElm (eval code:5400:11)\n   at updateChildren (eval code:5652:11)\n   at patchVnode (eval code:5732:29)\n   at updateChildren (eval code:5629:9)\n   at patchVnode (eval code:5732:29)\n   at patch (eval code:5881:9)\n   at Vue.prototype._update (eval code:2569:7)\n   at updateComponent (eval code:2687:7)\n   at get (eval code:3030:5)\n   at run (eval code:3107:5)\n   at flushSchedulerQueue (eval code:2873:5)\n   at Anonymous function (eval code:1780:9)\n   at flushCallbacks (eval code:1701:5)\n   at run (eval code:66:13)\n   at Anonymous function (eval code:79:30)\n   at flush (eval code:18:9)\ncall::VueErrorHandler, vm: undefined\ncall::VueErrorHandler, info: nextTick\n[Vue warn]: Error in config.errorHandler: \"TypeError: Unable to get property '$root' of undefined or null reference\"\nTypeError: Unable to get property '$root' of undefined or null reference\n   {\n      [functions]: ,\n      proto: { },\n      description: \"Unable to get property '$root' of undefined or null reference\",\n      message: \"Unable to get property '$root' of undefined or null reference\",\n      name: \"TypeError\",\n      number: -2146823281,\n      stack: \"TypeError: Unable to get property '$root' of undefined or null reference\n   at formatComponentName (eval code:7:3)\n   at VueErrorHandler (eval code:28:5)\n   at globalHandleError (eval code:1670:7)\n   at handleError (eval code:1664:3)\n   at Anonymous function (eval code:1782:9)\n   at flushCallbacks (eval code:1701:5)\n   at run (eval code:66:13)\n   at Anonymous function (eval code:79:30)\n   at flush (eval code:18:9)\",\n      Symbol()_m.epeeaf52kuu: undefined\n   }\n[Vue warn]: Error in nextTick: \"Error: Access is denied.\n\"\nError: Access is denied.\n{\n      [functions]: ,\n      proto: { },\n      description: \"Access is denied.\n\",\n      message: \"Access is denied.\n\",\n      name: \"Error\",\n      number: -2147024891,\n      stack: \"Error: Access is denied.\nat setAttr (eval code:6153:7)\n   at updateAttrs (eval code:6107:7)\n   at invokeCreateHooks (eval code:5509:7)\n   at createElm (eval code:5400:11)\n   at updateChildren (eval code:5652:11)\n   at patchVnode (eval code:5732:29)\n   at updateChildren (eval code:5629:9)\n   at patchVnode (eval code:5732:29)\n   at patch (eval code:5881:9)\n   at Vue.prototype._update (eval code:2569:7)\n   at updateComponent (eval code:2687:7)\n   at get (eval code:3030:5)\n   at run (eval code:3107:5)\n   at flushSchedulerQueue (eval code:2873:5)\n   at Anonymous function (eval code:1780:9)\n   at flushCallbacks (eval code:1701:5)\n   at run (eval code:66:13)\n   at Anonymous function (eval code:79:30)\n   at flush (eval code:18:9)\",\n      Symbol()_m.epeeaf52kuu: undefined\n   }\n```\n\nI apologize for this formatting, but IE doesn't help me very much, and I can't reproduce this problem anywhere but on my project.\nIn any case, even if the error may be caused by Vue.js, RavenJS should not crash and handle the case of wrong parameters.. Hi,\nUnfortunately, I'm using Vue 2.5.2:\njs\n{\n  \"dependencies\": {\n    // ...\n    \"raven-js\": \"3.19.1\",\n    \"vue\": \"2.5.2\",\n    \"vue-router\": \"3.0.1\",\n    \"vuex\": \"3.0.0\",\n    // ...\n  }\n}. Well, I'm not sure that's the perfect solution. As you would expect, RavenJS doesn't crash anymore, but the error is not reported. We would like to be informed when the application is dead for our customers. :). ",
    "colthreepv": "we tracked back the cause to zone.js@0.8.17, with the previous minor release, 0.8.16 everything still works. ",
    "tlaverdure": "I am experiencing this as well.. ",
    "LukasKlement": "Same issue here with angluar-cli 1.4.0 and zone.js 0.8.16.\nThe following console errors are thrown:\nFirefox: InternalError: too much recursion\nOther browsers: RangeError: Maximum call stack size exceeded. @mxman06 it works for me with zone.js 0.8.18 - perhaps there is another culprit?. ",
    "rtm": "Is it likely that this problem can be solved in a future version of Raven? I would prefer not to have to lock down my version of zone.js for this kind of compatibility issue.. ",
    "mkoczorowski": "+1. ",
    "kblestarge": "Ride on! \nUpgrading zone.js to 0.8.18 worked for my Angular v.4+ app.. ",
    "mxman06": "@kblestarge \nAre you sure ? I just upgraded zone.js to 0.8.18 and still have the loop error :(. ",
    "nitish24p": "Same issue faced by me too. My code is such in my index.js\n```javascript\nimport Raven from 'raven-js';\nRaven.config(SENTRY_DSN).install();\nthrow new Error('Error');\nReactDOM.render(\n  \n\n,\n  document.getElementById('root')\n);\n```\nThe Error doest get logged to my sentry dashboard.. @thomas88 Can you try installing tracekit.. might work after that. ",
    "evannoronha": "Was this ever resolved?. ",
    "ebuster": "@benvinegar Did you check that Webpack3 will not broke compatibility with IE8? Even Webpack2 does not support it.\nhttps://github.com/webpack/webpack/issues/3070#issuecomment-260362472. ",
    "wenzowski": "Rollup sounds like the right way to go. ",
    "saiichihashimoto": "How is this going? Currently, raven-js is the biggest dependency in my webpack build.\nFor context:\n\n\n. ",
    "HeroProtagonist": "@benvinegar I'm looking at this issue. On the linked PR you mentioned\n\nMy only comment is that I'm retiring the current DOM-based event system, which is undocumented, for the event system described in #524 (and implemented in #521).\n\nThe unmerged PR seems like it accomplishes the timeout. I do not see the new event system merged into the project. Would it be sufficient if the timeout triggers self._triggerEvent('failure') as i see done in Raven._sendProcessedPayload?. Hi,\nHappy Hacktober! I will take a stab at this. PR to come in the next day or two.\nCheers!. @kamilogorek , Got it! I made a PR for #774 https://github.com/getsentry/raven-js/pull/1080. Hopefully it's good :crossed_fingers: . @kamilogorek @pisinr What is the status with this PR? I would be happy to continue the work if its stopped. @kamilogorek Thanks for the review! I have updated my PR reflecting your comments. @kamilogorek makes sense! When I get more time this week I'll pick up another issue. @kamilogorek Updated the test name and did the rebase, but it seems travis still failed on sauce labs (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\n\n. @kamilogorek Good catch! The changes I just added should address this.\nAlso, I am not sure this should be a shallow copy. Given that here the data is trimmed before it adds the sentry breadcrumb. I feel like the breadcrumbs are then off by 1 in the payload. If you agree I can have another PR to address this or add it to this one.  . ",
    "ManiacalAce": "Is there a workaround for this at the moment?. ",
    "mathagician": "@kamilogorek I would like to work on this issue. Since I am new to this, I would seek your help and guidance for this. Please help how to get started.. ",
    "mapohjola": "Mine didn't have nice tests and failed in travis :sweat_smile:. ",
    "zifeo": "@benvinegar React-native-sentry is still in beta and it is not clear whether disabling the native component fallbacks to ravenjs (that is included somehow in the project). There are still issues leading to disabling that part.. @HazAT Thanks for confirming, what should we do in this case?. @HazAT We switched a month ago to the new one but we still have sourcemap issues. On raven-js those were caused by codepush and the missing regex from this PR. On react-native-sentry, we disabled the native integration and followed https://github.com/getsentry/react-native-sentry/blob/master/docs/codepush.rst but sourcemap are still shifted. The first version (no codepush) works fine, however after a codepush it does not work (sourcemap are generated and uploaded the same way both time). . @HazAT We tried that when we elaborate the current PR (last month) and we saw that react-native-sentry was copying every release the ravenjs codebase into theirs so we though it should be fixed here first?. @HazAT are you going to do it, or should I do the move?. @HazAT That was fast, many thanks!. ",
    "deiga": "I'm, looking at this\n. @kamilogorek Not sure why SAUCE variables are missing, pls halp? :)\n. @kamilogorek Could you use https://docs.travis-ci.com/user/encryption-keys/ to add the SAUCE env variables?\nYou need to run npm test, since the tests are still dependent on build built first :)\nI'll work on those comments tonight. @kamilogorek I addressed the issues with the index and saucelabs by changing to use karma for that too.. Oh, yeah. That's a bummer. Does SauceLabs have any kind of ACL, where you could have \"public\" credentials which only travis could use to send data?\n. @kamilogorek done. ",
    "kpandya3": "@kamilogorek Yeah, works fine for the documentation pages, just not on github which I have been using to browse sentry docs. Can close the PR if you think its not needed.. ",
    "sunknudsen": "Hey guys, trying to figure out how to disable Raven.js's onerror error handling to implement my own. The goal is to add extra data that isn't necessarily available at page load.\nThe following code snippet doesn't appear to work as two issues are reported (Raven.js's onerror and my own).\nRaven.config('__DSN__', {\n  allowDuplicates: true,\n  collectWindowErrors: false\n}).install();\nHas collectWindowErrors been deprecated?\nAlso, is it possible to get Raven.js to report all xhr requests that return status codes in the 4 and 5?\nThanks!. Using lab for unit testing. The leaks are still present. I know leaks can be painful to debug. Is there an ETA for a fix?\n\n1 tests complete\nTest duration: 1832 ms\nThe following leaks were detected:__extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! theregulars-reviews-backend@0.0.1 test: lab build/test\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the theregulars-reviews-backend@0.0.1 test script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sunknudsen/.npm/_logs/2019-02-13T14_41_28_595Z-debug.log. @garthenweb Does this affect @sentry/node because of how the package was developed? One of the projects that I am developing on hapi (and relies on many other dependencies) doesn\u2019t produce leaks (at least they are not caught by lab).. \n",
    "danielhusar": "Looks like collectWindowErrors doesn't work any more.\nYou need to edit defaultIntegrations now. \nThis is how i have disabled the global handlers:\n```js\nimport { init, Integrations } from '@sentry/browser';\nimport { Integrations as CoreIntegrations } from '@sentry/core';\ninit({\n  defaultIntegrations: [\n    new CoreIntegrations.Dedupe(),\n    new CoreIntegrations.InboundFilters(),\n    new CoreIntegrations.FunctionToString(),\n    new Integrations.TryCatch(),\n    new Integrations.Breadcrumbs(),\n    new Integrations.LinkedErrors(),\n    new Integrations.UserAgent(),\n  ],\n});\n```\nMaybe there is a way how to just remove one default integration but I havent found it.\n. We solved this by using webpack code splitting and load sentry client only on error.\nsentry.js\njs\nimport * as Sentry from '@sentry/browser';\nSentry.init({\n  ...\n  integrations: integrations => {\n    return integrations.filter(integration => integration.name !== 'GlobalHandlers');\n  },\n});\nexport const logError = error => Sentry.captureException(error); \nerrors.js\njs\nconst captureError = async error => {\n const { logError } await import(/* webpackChunkName: \"sentry\" */ './sentry');\n logError(error);\n}\nwindow.onerror = (message, url, line, column, error) => captureError(error);\nwindow.onunhandledrejection = event => captureError(event.reason); \nWe do some more in there like populate breadcrumbs, add extra, add tags, etc.. but it's possible to use sentry client and not make your bundle bigger.. I found the root cause.\nSome of the date objects in our redux state was in bad state and not serializable.. ",
    "ffxsam": "Thanks for working on fixing this!. Just to clarify: the documentation says autoBreadcrumbs with an S. Which is it? And I assume this is passed to Raven.config()?. Could you guys give us a heads-up here when this is resolved? Looks like it's a zone.js issue and it's fixed, but pending publication to npm's registry.. ",
    "ankurk91": "Whoops, look like one of test failed.\nLet me know how to mock the lifecycle hook.. Now one of the task is failing that is not related to this PR\nRunning \"config:ci\" task\nNo SAUCE_USERNAME env variable defined.\nNo SAUCE_ACCESS_KEY env variable defined.. Pre-commit hook was causing indentation issues, it should be fixed now.. This has been fixed in vue 2.5.0. ",
    "tobeorla": "I don't exactly remember why i closed it, i think it was because i was using raven package for js rather than raven package for node. . ",
    "joaovieira": "Just bumped into this.. this makes using raven in an isomorphic app very difficult. raven-node says it had setExtraContext from v0.10.0 (https://github.com/getsentry/sentry-javascript/blob/master/packages/raven-node/CHANGELOG.md#0100---1242016). But nothing about it in the source code.. ",
    "joelnotified": "I have tried that now, but I still get the same error. I have created and attached a minimal angular-cli project. The only changes I've done is that I added the raven-js setup, copied the contents of project.json from my project, and introduced the bug that triggers the loop in app.component.html. I have also obfuscated the sentry url in app.module.ts. So all you need to do is change the url, run npm install and then ng serve and the bug should be visible.\ntest.zip\n. Updated to the newly released zone.js 0.8.18, but I still get the same behaviour unfortunately.. . ",
    "jaydp17": "There are 2 ways we can do this.\n1) Allow globalOptions.ignoreErrors to take regex/string as well as functions\n2) Add something like globalOptions.shouldIgnoreError which takes a function and returns a boolean\nI'd prefer the 1st option but would like to know your opinion.. ",
    "dts": "Not sure I can at the moment (NDAs and such), but I was passing things that inherited from Vue around as props, if that is helpful.  It was reporting that something didn't response to toJSON().. ",
    "jesusbotella": "I am experiencing the same error, but the stacktrace is not the same as yours:\njs\nRangeError: Maximum call stack size exceeded\n    at Object.<anonymous> (http://localhost:8100/build/vendor.js:118158:21)\n    at JSON.stringify (<anonymous>)\n    at stringify (http://localhost:8100/build/vendor.js:118145:15)\n    at Raven._makeRequest (http://localhost:8100/build/vendor.js:117130:22)\n    at Raven._sendProcessedPayload (http://localhost:8100/build/vendor.js:117053:56)\n    at Raven._send (http://localhost:8100/build/vendor.js:116995:22)\n    at Raven._processException (http://localhost:8100/build/vendor.js:116769:14)\n    at Raven._handleStackInfo (http://localhost:8100/build/vendor.js:116675:14)\n    at Raven.captureException (http://localhost:8100/build/vendor.js:115813:18)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115749:22)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29)\n    at XMLHttpRequest.C (http://localhost:8100/build/polyfills.js:3:21839)\n    at XMLHttpRequest.wrapped [as __zone_symbol__ON_PROPERTYreadystatechange] (http://localhost:8100/build/vendor.js:115746:29). I have just found that it is not a Raven error, but a Zone.js error. You can solve it by using zone.js 0.8.18.\nYou can read more about it here: https://github.com/angular/zone.js/issues/886\nEDIT: It doesn't seem to solve the problem, even though I installed Zone.js 0.8.18. When I try to log an error via Raven, the Maximum call stack size  exceeded error happens again.. ",
    "marcelgoya": "I've also tried zone.js 0.8.18 but it's still not working for me. Could it be because you're using zone.js 0.8.14 in your package.json?. hmm, strange! I'm throwing a test error from inside an injectable static class and that's already enough to generate the loop. it's actually a good way to freeze your browser :-). Btw, I'd suggest you try one of the Ionic starter templates instead of the NG one.... @kamilogorek No worries :). @kamilogorek Sure, I'm gonna try it in a sec. @kamilogorek Just did the upgrade and reinstalled all node modules like you said but the error is still there :(. ",
    "teleclimber": "Ok so I have made a change in my fork that fixes the problem, and added tests. Everything passes.\nHowever it looks like your pre-commit linter made hundreds of changes in one of the files.\nI can PR it or you can tell me how you want to handle this?\nhttps://github.com/getsentry/raven-js/compare/master...teleclimber:master. ",
    "masimplo": "~~I have blocked localhost events in sentry and requests get 403 before infinite loop begins. Maybe it is related and can help in reproducing the issue?~~ Ignore, I disabled localhost filtering and still happens. ",
    "meltuhamy": "I am also getting this bug on the occasional XHR request. Unfortunately, I ended up uninstalling raven-js (it was at 3.18.1).\nMy dependencies are listed below: \n\"dependencies\": {\n        \"@angular/common\": \"^4.4.3\",\n        \"@angular/compiler\": \"^4.4.3\",\n        \"@angular/compiler-cli\": \"^4.4.3\",\n        \"@angular/core\": \"^4.4.3\",\n        \"@angular/forms\": \"^4.4.3\",\n        \"@angular/http\": \"^4.4.3\",\n        \"@angular/platform-browser\": \"^4.4.3\",\n        \"@angular/platform-browser-dynamic\": \"^4.4.3\",\n        \"@ionic-native/core\": \"3.6.1\",\n        \"@ionic-native/device\": \"^3.7.0\",\n        \"@ionic-native/local-notifications\": \"3.6.1\",\n        \"@ionic-native/splash-screen\": \"3.6.1\",\n        \"@ionic-native/status-bar\": \"3.6.1\",\n        \"@ionic/cloud-angular\": \"^0.12.0\",\n        \"@ionic/storage\": \"2.0.1\",\n        \"cordova-android\": \"^6.2.3\",\n        \"cordova-plugin-console\": \"1.0.5\",\n        \"cordova-plugin-device\": \"~1.1.4\",\n        \"cordova-plugin-ionic-webview\": \"^1.1.9\",\n        \"cordova-plugin-local-notifications\": \"git+https://github.com/katzer/cordova-plugin-local-notifications.git#x\",\n        \"cordova-plugin-splashscreen\": \"~4.0.1\",\n        \"cordova-plugin-statusbar\": \"git+https://github.com/apache/cordova-plugin-statusbar.git\",\n        \"cordova-plugin-whitelist\": \"1.3.1\",\n        \"cordova-sqlite-storage\": \"~2.0.0\",\n        \"date-fns\": \"^1.28.0\",\n        \"ionic-angular\": \"^3.7.0\",\n        \"ionic-plugin-deploy\": \"~0.6.6\",\n        \"ionic-plugin-keyboard\": \"~2.2.1\",\n        \"ionicons\": \"3.0.0\",\n        \"lodash.pullallby\": \"^4.7.0\",\n        \"rxjs\": \"^5.4.3\",\n        \"sw-toolbox\": \"3.4.0\",\n        \"url-search-params\": \"^0.9.0\",\n        \"zone.js\": \"^0.8.18\"\n    },. ",
    "doender": "I have the same issue. My dependencies are: \n\"dependencies\": {\n        \"@angular/animations\": \"4.4.4\",\n        \"@angular/common\": \"^4.4.4\",\n        \"@angular/compiler\": \"^4.4.4\",\n        \"@angular/compiler-cli\": \"^4.4.4\",\n        \"@angular/core\": \"^4.4.4\",\n        \"@angular/forms\": \"^4.4.4\",\n        \"@angular/http\": \"^4.4.4\",\n        \"@angular/platform-browser\": \"^4.4.4\",\n        \"@angular/platform-browser-dynamic\": \"^4.4.4\",\n        \"@angular/platform-server\": \"4.4.4\",\n        \"@ionic-native/core\": \"^4.3.0\",\n        \"ionic-angular\": \"^3.7.0\",\n        \"raven-js\": \"^3.18.1\",\n        \"rxjs\": \"^5.4.3\",\n        \"sw-toolbox\": \"3.6.0\",\n        \"videogular2\": \"^5.2.0\",\n        \"web-animations-js\": \"^2.3.1\",\n        \"zone.js\": \"^0.8.18\"\n    }\n@kamilogorek Does your test repo work with these?. Thanks. It seems the issue is only with Ionic then? \nIf I can find the time next week, I'll try to prepare an Ionic starter template like: https://github.com/ionic-team/ionic2-starter-tabs. ",
    "themre": "I'm having the same issue with React. any estimation when will this be fixed or is it better to downgrade?. ok strange. yesterday I got errors all the time (rm -rf node_modules), hard browser refresh... now, I tried 2 different applications and no error appeared. could it be some hard caching on CDN? I'll try again later to see if this has been resolved.. just received exceptions:\nraven.js:351 Uncaught RangeError: Maximum call stack size exceeded\n    at RegExp.[Symbol.match] (<anonymous>)\n    at String.match (native)\n    at parseFunction (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:180:24)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:155:28)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30)\n    at parseProps (chrome-extension://aalppolilappfakpmdfdkpppdnhpgifn/backend/installHook.js:166:30). it's coming from react dev tools. function that it's checking its:\n\"function deepEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (isObservable(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.array(v, name);\n    if (isPlainObject(v))\n        return observable.object(v, name);\n    if (isES6Map(v))\n        return observable.shallowMap(v, name);\n    return v;\n}\" . oh yes, react sight it is. sorry!. I uninstalled it, because haven't used it much. that solved the problem. thanks!. ",
    "wvds": "@teleclimber You can use the npm run test command to run the tests. The grunt run:test command is also still available when you want to run the tests and view the output in the browser.\nI've made a PR to fix the docs.. ",
    "vierno": "Hello, @kamilogorek ,\nI've made the requested changes and updated the pull request.\nThank you!. @benvinegar , the browser uses the string representation of the argument as the url. So fetch(undefined) gives the same result of fetch(\"undefined\"). ",
    "HKskn": "@kamilogorek @benvinegar I need it for ES6 for javascript (browser based).\nI would like to catch errors in 'catch' function to send Sentry. If I send errors with Raven.captureException() method. I have to write the function into all Promise's catch functions.\nIt sounds terrifying.\nPromise.then(() => { // a syntax error or called reject() method   }).catch(err => { // handled error })\nCould you suggest the best way to do it?. Hello again, Is there any progress about it? :) @kamilogorek . ",
    "bes": "This would be a very nice feature.. ",
    "pisinr": "All the test case on travis passes. I don't know why it's still listed as failed.. The testString has to be created outside because matchFilters is generic, it's used for other pattern tests such as includePaths, ignoreUrls, whitelistUrls.\nAlso, from what I see, my solution can handle #1076 fine. matchFilters already accept RegExp in ignoreErrors array. So do you mind giving the example of how it wouldn't work?. ",
    "staticshock": "@kamilogorek how do you feel about this?. \u2705 . Yep! Addressed.. ",
    "paksu": "Hey @kamilogorek. I added documentation, refactored into into options object and cleaned the options from request payload. Does it look good now? . ",
    "andrewschreiber": "Worked great, thanks!. ",
    "EvanPurkhiser": "Not to be nitpicky, but I think most other places we just keep the length of the underline the same as the length of the title.. Okay, let me turn it into a note, I think I have an idea for this.. There's not a lot of extra data within the exception unfortunately.. The indentation here is a little funny I think. wrapping looks a little funny here. ",
    "bondz": "The test failure is a config error outside the scope of this PR. ",
    "davidpolberger": "For what it's worth, this is affecting us too. Our interim solution is to call Raven._restoreBuiltIns(). As a result, we no longer have access to breadcrumbs in the reports, but at least CKEditor 5 works well.. cf89f867b0834c1e5f8c146714549db7e2078577 works great, @kamilogorek, thanks! (For anyone following this thread, you need to build a package manually using npm install and grunt build.). ",
    "thedavidmeister": "i ran into this over here https://github.com/ckeditor/ckeditor5-editor-balloon/issues/12\nlooks like raven 3.20.1 doesn't have this error in it. looks like google closure advanced optimisations might be re-triggering this issue, see linked ^^. ",
    "alejandromagnorsky": "It looks something like this:\nFirst, in the main.js:\njavascript\nrequirejs.config({\n    paths: {\n        'angular': 'lib/angular.min',\n        'raven': 'lib/raven.min',\n        'raven-angular': 'lib/raven-angular.min'\n    },\n    shim: {\n        'angular': {\n            exports: 'angular'\n        },\n        'raven': [],\n        'raven-angular': ['angular', 'raven']\n    },\n    waitSeconds: 0 // Remove timeout\n});\nThen, in the config.js: \n```javascript\ndefine(['raven', 'raven-angular'], function (Raven, RavenAngular) {\n    var config = function () {\n        Raven\n             .config('https://bfa7cb0c1b5c4d91a3fa3d8eccd18b6d@sentry.io/238270')\n             .addPlugin(Raven.Plugins.Angular)\n             .install();\n    };\nconfig.$inject = [];\nreturn config;\n\n});\n```\n. I was just following the instructions from the docs though.\nThanks, using .addPlugin(RavenAngular) fixes the issue.. ",
    "amitghodke90": "isProduction returns true as currently working in productions environment. @kamilogorek whats that??. ",
    "lukemelia": "@ryno1234 I'm guessing that you are mutating the Javascript object you are assigning to application, and that sentry serializes everything to JSON at the time of send. You could likely address the issue you are experiencing by cloning the object before passing it to raven. . ",
    "ryno1234": "So, if I understand this correctly, you can only have 1 breadcrumb with a given name (key)? That same breadcrumb name cannot appear and have a different value?. ",
    "AlexWayfer": "\nRaven.js doesn't collect user's IP, unless it's manually added to the context by a developer.\n\nIt collected correctly before we began to compile JS. 192.168.1.1 only after we started compiling JS.\n\nDid you mean raven-node by any chance?\n\nI'm not sure that I understood you correctly. We're using raven-js for web (sites) front-end, not raven-node. I don't think that we should use raven-node for this.\n\nOkay, we'll add manually this information.\nJust keep in mind that it worked without JS compiling automatically.. @kamilogorek I think it may be caught by Sentry Server side, but I'm not sure.. ",
    "nimishsinghal": "I am also having the same issue. Is there any general practice people follow for error reporting in SW?. Thanks @kamilogorek @coluccini will try to create custom payloads today. Hey @kamilogorek,\nIf we just edit _makeRequest method (https://github.com/getsentry/raven-js/blob/master/src/raven.js#L1884) and use fetch instead of XHR APIs will raven-js work for service workers?. Can we use https://github.com/github/fetch so that modern browsers use fetch implementation and use XHR APIs for fallback?. @kamilogorek @coluccini It is working fine for me, I am able to push errors to sentry by modifying _makeRequest. If the approach is okay and apart from my use case it is a general issue, I will be more than happy to create a PR and move XHR API's to fetch(https://github.com/github/fetch). @coluccini I was using the same commit to track service workers error. It seems to be working fine for me.. ",
    "coluccini": "Mmm but this will work only if the user has the page loaded, but there are situations when you want to track errors without the page being loaded (ex: an error when receiving or trying to show a push notifications). There are no way to track an error using a fetch (get or post) request?. Thanks! I'll have a look.\nShould I close this issue?. Yes, but you would leave tons of browser out of compatibility. \nMaybe add an new method using fetch that we can use from a service worker? . \ud83d\udc4f\ud83d\udc4f. Hi @kamilogorek! I've saw that you merged the change to use fetch instead xhr when available (\ud83d\udc4d), but I'm seeing the same behaviour as before: Raven.captureException() don't trigger any request to sentry nor it triggers an error when called from the service worker. Do you have any idea why this could be happening? Thanks!. @nimishsinghal great! I\u2019ll check my implementation then. Thanks!. ",
    "SimonSchick": "Hey, can you do me a favor and amend the missing sampleRate?: number property? \ud83d\ude04 \ntypescript\n        /**\n         * A sampling rate to apply to events.\n         * A value of 0.0 will send no events, and a value of 1.0 will send all events (default).\n         * @see https://docs.sentry.io/clients/javascript/config/\n         */\n        sampleRate?: number;. Lovely, thanks!. Also @kamilogorek can we get a patch release for this today? \ud83d\ude04 . Meanwhile, check the typings: https://github.com/getsentry/raven-js/blob/master/typescript/raven.d.ts#L186. Not sure if related but isn't extra suppose to be an object?. Hey, I'm not sure if this is the right place to ask but I'm currently playing with the new SDK and have some questions:\n1: How do we set a custom log level when logging exceptions via .captureException? Previously this was possible and sometimes we log errors as warning if it's not a critical issue, this seems to be no longer possible, perhaps allow us to set the log level on scope?\n2: How exactly does scope work, the docs are not clear on this at all?\nI assume this:\nSentry.configureScope(scope => {\n  scope.setUser({ id: 'superuser' });\n  Sentry.captureException(err);\n});\n2.1: Do I need to need to explictly call scope.clear() to avoid the configuration to leak into other captured events?\n2.1.1: If scope settings persist, how do I define global scope settings?\n2.2: Is configureScope called synchronously?\n. Furthermore, how we do we set global tags now?. So, I played around with this for a bit, calling clear after using captureException doesn't attach ANY tags/user/etc. whatsoever, I don't understand how you log a single exception while attaching user specific data in the new node SDK at this point.. Thanks for the replies, can you explain the difference between .withScope vs. .configureScope I assume withScope auto pushes and pops?\nFurthermore, I worked around the limitation by instantiating a NodeClient and Scope manually and then clone the scope for each event since that seems to be public API as well.\nThe code looks roughly like this:\n```\n    const client = new NodeClient({\n      dsn,\n      release: dInfo.getCommit(),\n    });\n    client.install();\nconst scope = new Scope();\nscope.setTag('buildId', dInfo.getBuild());\nlog.addStream({\n  level: cfg.remote.level,\n  stream: new SentryWriteStream(client, scope), // as `baseScope`\n});\n\n...\n// insode of the event logging setup\n    const scope = Scope.clone(this.baseScope);\n    if (record.user) {\n      scope.setUser({\n        email: record.user.email,\n        id: record.user.id.toString(),\n        username: record.user.name,\n      });\n    }\n    scope.setTag('hostname', record.processInfo.hostname.toString());\n    scope.setTag('pid', record.processInfo.pid.toString());\n    for (const [key, value] of Object.entries(record.tags)) {\n      scope.setTag(key, value.toString());\n    }\nfor (const [key, value] of Object.entries(record.fields)) {\n  scope.setExtra(key, value);\n}\n\n...\nclient.captureException(err, undefined, this.setupScope(record))\n```\nLooking forward to not having to do that :). Again, thanks for the swift reply, I understand this is an RC so I really appreciate you guys reacting to quickly!. > While we generally support creating an custom client, we discourage this API since there are some drawbacks that come with it, e.g.: no integrations by default, we guide people to use init.\nYea that's what I thought, I will use the new API once the package is released :). You usually want to set the user on the global scope upon login (single page app) or set it on page load.. Can you tell us a little bit more about your use-case?\nIf you have a system with middlewares it should be easy enough to just use scope.setUser in the respective error handler.. @kamilogorek isn't Sentry.configureScope inside of a middleware extremely prone to race conditions?. @kamilogorek we shouldn't have to add the dom typings for node application, this should be fixed.. \u2764\ufe0f . I ran into this as well when calling scope.setUser where as email and username where undefined on the object.\nI had to manually scrub the properties for it to work, kinda annoying :c. To clarify, it would be highly desirable (for me anyways) that it would capture additional properties, can this be a config option?. Don't use arrow functions if you want to support IE11, simple as that.\nYou can use TS or babel to transpile your code.. @mrcarl79 I think the intent of the sentry team is to show you modern best practises and not necessarily provide super backwards compatible code, as a web developer you should know what browsers you want to support and what features you can use in the process, this really isn't a documentation issue.. It is in captureEvent, but I'm not sure what extra work captureException does.. I found this: https://github.com/hydra-newmedia/hapi-sentry/blob/master/index.js\nBut imo we shouldn't have to deal with internal functions like that.. Then why does captureEvent provide this API but doesn't explain how to use it to get the desired behaviour?\nIt seems like you already implemented the bits we want but now are telling us implement it yourself which leads to code duplication, I'm not sure if I can follow that logic.. Not a team member but, is it really a good idea to add a 5mb test file to the repo? Would it not make more sense to generate the file on demand and/or zip/unzip it?. It's not, that'd have to be request?:. Btw: onSuccess(): void in generally shorter and preferred for interfaces.. As a note, I don't exactly know what kind of style for imports you are following but you can import just import ClientRequest and ServerResponse to reduce verbosity or are you doing this to avoid type collissions in your builds?. I know this is copy/paste but the in operator usually doesn't work with arrays?. Not sure what your TS version is, but you might want to use unknown.. In fact, I believe this isn't really needed because Object.keys doesn't return name, message, and stack.\nAt the same time Object.keys doesn't capture properties such as lineNumber in firefox's SyntaxError.\nObject.getOwnPropertyDescriptors might be better suited for fetching properties like that.. Shouldn't that log debug data, just in case?. redundant else btw :). ",
    "decates": "Thanks @SimonSchick and @kamilogorek for getting it in so smoothly (and apologies for not picking up the additional change for sampleRate quickly enough!). . ",
    "zivl": "@kamilogorek \nUnfortunately, I don't have a specific repr-case scenario. I know it makes your life harder a bit.\nAnyway, in those exact lines that you've mentioned above, I think this should be the change\njavascript\nif (current.stacktrace && last.stacktrace) { // here we must sure we have both stacktrace(s)\n  return isSameStacktrace(current.stacktrace, last.stacktrace);\n}\nThe fact that we don't know how we end up with null does not really matter. As framework developer, I know that I might get unexpected input so I should either check for it and handle or throw exception, but my framework's code must not fail.\nWDYT?. I saw the tests in raven.test.js, though, to my humble opinion, I think the default for _isRepeatData should return false. In case of true, I might miss some errors just because they have not pass in one of the conditions. Isn't the desired behavior should prefer to send anyway ? I rather have a few more errors to check but at least I know about them (and later on I can provide even better checks for duplicate conditions)\nAnyway, I agree that after this line isOnlyOneTruthy, the rest of the code should not be run if either of the stacks is undefinded. @kamilogorek \nThe thing is that return isSameStacktrace(ex1.stacktrace, ex2.stacktrace); that is being called in isSameException does not have the same protection like 'isSameStacktrace'. \nThe condition current.exception || last.exception doesn't garrantee that exception has a stack trace. In the current situation, both last.exception.stacktrace and current.exception.stacktrace are undefined - hence the script fails . @kamilogorek FYI. @kamilogorek any expectation when is it going to be released?. @kamilogorek - is the gh-pages branch is being maintained by automatic script somewhere or manually?. I'll try to take it on me, hopefully expect a PR soon in the gh-pages branch. @kamilogorek anything new? anything I can help to make it ease with your review?. Hey @kamilogorek,\nI've updated the PR. Now the docs is only in Tips and Tricks and I've reduced the amount of text for easier reading along with the Tips and Tricks page.\nYou're free to review. PR is updated with typo fix. @kamilogorek looks good to me as well!\nmuch kudos for the fast response. why not creating a new index.js file as follows:\n```javascript\nvar singleton = require('./singleton');\nvar RavenConstructor = require('./raven');\nmodule.exports = singleton;\nmodule.exports.RavenConstructor = RavenConstructor;\n```\nand then point main in package.json file to index.js\nI don't see a reason to touch the way Raven is packed (i.e. no need for grunt file changes). @kamilogorek sure!\nMy thought was to keep the singleton.js cleaner but if you can go with that so its cool.\n(even smaller change :) ). @kamilogorek thanks for the super-fast delivery!\nCheers!. @kamilogorek ok make sense. \nWould you consider leaving this issue open and maybe discuss this feature out-of-the-box after next major release?. you may see the reproduce here:\nhttps://github.com/wix/sentry-testkit/blob/master/index.js#L10\nif you will try to print the options you'll see only the dsn parameter, while TransportOptions is a bit richer as you can see here: \nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/index.ts#L227\nAccording to the code on ./packages/browser/src/backend.ts, it looks like that if I config a transport then I have to provide transportOptions as well. fixing... updating the PR in a minute. where do you think it suites the most?. oh... saw your comment below about the Tips & Tricks. sure. ok. will fix. will fix. ok. will move it there :). ",
    "StevePotter": "@kamilogorek you are right.  Our version was slightly out of date and didn't have the guard code.  We just need to upgrade.  Thanks!. ",
    "maoberlehner": "I might add one improvement to the proposed solution:\nIf the source code is using es6 imports and exports it is possible to use the module key in the package.json to reference the es6 main entry point of the package { \"module\": \"src/raven.js\" }. See: https://github.com/rollup/rollup/wiki/pkg.module\nThat way, the main key can still reference a bundled, CommonJS compatible version of the package { \"main\": \"dist/raven.js\" } but people who are using tools like webpack or rollup can import them the usual way import Raven from 'raven-js' which is automatically resolved to the ES6 version of the file.. ",
    "jaylinski": "@kamilogorek I always wanted to do a build setup with rollup.js. So I took some time and changed the build from Browserify to Rollup with Babel: #1152\nThis is the first step needed in order to convert the source to ES modules.\nWould be cool if you could review this PR. :octocat: . ICYW, the bundles got smaller. :chart_with_downwards_trend: \nbrowserify:       ./dist/raven.min.js: 9.96KB < maxSize 10KB gzip\nrollup + babel 7: ./dist/raven.min.js: 9.80KB < maxSize 10KB gzip\nEdit (2017-12-05): corrected results.. @kamilogorek thanks for the review! I'll try to adress the issues on friday.\nI mixed up the sizes (I corrected it in the comment above).. @kamilogorek I pushed an updated commit.\n\nPlugin combinations are now generated again.\nI updated the .babelrc config to reflect your browser support matrix (although I would recommend to support the latest 2 browser versions, instead of only the latest)\nI removed the .editorconfig file\nAll tests are now built (although the workflow is not optimal, since every new test-file has to be referenced in the karma.unit.config.js file. rollup is not suited for bundling all tests into a single file.) \n\nI also just noticed this commit: https://github.com/getsentry/raven-js/commit/5d2685fc644f62a33efd533f65f231e3a8f4cc1b\nDoes this commit have any implications on this PR?. @kamilogorek If it helps you to review, I could explain the changes I made line-by-line.. @kamilogorek Thanks! Will you do the ES6 migration yourself? Or can/should I help?. :+1: . This was probably here for a good reason.\nI removed it because it depends on browserify. Also all tests seem to work without it.. There was probably also a reason for building all plugins in all possible combinations.\nBut I couldn't think of a reason why to do this, so I removed it to make the build simpler.. You probably want to define the exact targets here. See https://babeljs.io/docs/plugins/preset-env/.. I had to add return, because otherwise Babel would remove this line (unassigned expression statement).. I didn't use it because I couldn't get the plugin to output the normal and the uglified build.\nI don't think this is supported by the plugin.. all files are now built.. ",
    "leo6104": "i got same issue in my projects. \n- angular 5.0.1 , cli 1.5.0,  rave-js 3.20.0 \n. ",
    "asgerjensen": "Seems to be related to this:\nhttps://github.com/getsentry/raven-js/commit/30c0da44f1b1f1a82b2183decd7b60c2d277449a#diff-768fd3ae72b2025ae6a7de0b04b78608R1013. I can try later tonight. I saw it on our site this morning, but everything has been minified to heck and back, but i will try to capture the stack trace in a non-prod build.. Full stack trace:\n[Main Thread]\ntoString [Line: 2354, Col: 3], polyfills.bundle.js\nFunction.prototype.toString [Line: 7328, Col: 9], polyfills.bundle.js\nFunction.prototype.toString [Line: 4823, Col: 9], vendor.bundle.js\ncheckIEAndCrossContext [Line: 8615, Col: 17], polyfills.bundle.js\nAnonymous function [Line: 7623, Col: 17], polyfills.bundle.js\nAnonymous function [Line: 4920, Col: 15], vendor.bundle.js\nRaven.prototype._instrumentBreadcrumbs [Line: 5161, Col: 9], vendor.bundle.js\nRaven.prototype.install [Line: 4102, Col: 48], vendor.bundle.js\n../../../../../src/app/app.module.ts [Line: 97, Col: 1], main.bundle.js\n__webpack_require__ [Line: 54, Col: 1], bootstrap a0d6fd4ad5fe0c8de7d1\n../../../../../src/main.ts [Line: 161, Col: 22], main.bundle.js\n__webpack_require__ [Line: 54, Col: 1], bootstrap a0d6fd4ad5fe0c8de7d1\nAnonymous function [Line: 204, Col: 1], main.bundle.js\n__webpack_require__ [Line: 54, Col: 1], bootstrap a0d6fd4ad5fe0c8de7d1\nwebpackJsonpCallback [Line: 25, Col: 1], bootstrap a0d6fd4ad5fe0c8de7d1\nGlobal code [Line: 1, Col: 1], main.bundle.js\nReproducable code repo coming up. https://github.com/asgerjensen/raven-js-ie-issue\nIf you switch from 3.20.0 to 3.19.1 it starts working.  Be sure to clear node_modules and package-lock.json\nAlso, i removed my key from app.module.ts, you probably have one or two lying around....\nI think, maybe the issue is a conflict with some of the other polyfills that IE require from core-js.. ",
    "AechDub": "Same here.   Issue occurs in Edge as well.. ",
    "vkrol": "We have the same problem in Chrome 62.0.3202.94 in 3.20.1 :(. @kamilogorek strange, but this error occurs only if we use raven-js/dist/raven.min.js bundle.. The bundle size is same in 4.3.2 \nhttps://bundlephobia.com/result?p=@sentry/browser@4.3.2 regardless of the changes from \nhttps://github.com/getsentry/sentry-javascript/pull/1738 :(. @HazAT OK, thanks. . > The size of the @sentry/browser is more than twice as large as the size of raven-js: 86 kB vs 39 kB (minified). \nFYI: the size of the latest version of @sentry/browser is increased to 91.8 kB. Source: https://bundlephobia.com/result?p=@sentry/browser@4.5.0.. @kamilogorek no problem!. ",
    "pgrm": "@SimonSchick @kamilogorek thx for the review, anything else I'm missing?. @beaugunderson yes exactly, something changed in sentry and the monkeypatch (which I also had) stated using HTTP GET suddenly. If I remember correctly, it was as simple as setting (or copying) the correct HTTP Method, instead of leaving it empty and falling back to the default (GET). @kamilogorek @SimonSchick I actually went through the code and thought that request is always set, but if you think it should be optional, it's fine with me - adjusted. ",
    "cyberhck": "never mind, new version solved it.. ",
    "WhatAKitty": "@kamilogorek I cannot reproduce this in jsfiddle, but it actually happened in my workplace. And it still in there when I upgrade react to 0.14.9. @kamilogorek I use html script import, the error changed to :\nUncaught TypeError: Illegal invocation\n    at Object.stringify (<anonymous>)\n    at e (raven.js:2791)\n    at e.ha (raven.js:1740)\n    at e.fa (raven.js:1663)\n    at e.P (raven.js:1605)\n    at e.X (raven.js:1380)\n    at e.N (raven.js:1286)\n    at e.z (raven.js:1274)\n    at raven.js:241\n    at k (raven.js:2276)\n    at HTMLBodyElement.l (raven.js:2341)\n    at Object.trigger (jquery.min.js:4)\n    at HTMLInputElement.eval (jquery.min.js:4)\n    at Function.each (jquery.min.js:2)\n    at n.fn.init.each (jquery.min.js:2)\n    at n.fn.init.trigger (jquery.min.js:4)\n    at b._onFieldValidated (bootstrapValidator.min.js:11)\n    at b.updateStatus (bootstrapValidator.min.js:11)\n    at b.validateField (bootstrapValidator.min.js:11)\n    at HTMLInputElement.eval (bootstrapValidator.min.js:11)\n    at HTMLInputElement.dispatch (jquery.min.js:3)\n    at HTMLInputElement.r.handle (jquery.min.js:3)\n    at HTMLInputElement.d (raven.js:363)\nand this always happened while the input has an validation. And at same time, the browser will throw an error: [Deprecation] 'window.webkitStorageInfo' is deprecated. Please use 'navigator.webkitTemporaryStorage' or 'navigator.webkitPersistentStorage' instead.. ",
    "jiananshi": "How abt your client environment? such as Chrome with several plugins on Mac OSX, information like these would be help, as far as I know there is no such webkitStorageInfo variable use in raven-js, try another browser or use it in stealth mode see if it's reproduce.. In short, it's a client tool aims at reporting useful information to your sentry server(whether it's self-hosted or sentry SaaS), there is also something for other languages such like Raven.py, raven-js docs goes here.. First, if was caused by part of HTTP definition not Sentry itself, as in your situation it's a request error, check if your site is starting with http:// such as: http://example.com, otherwise if you have trouble change your scheme from http => https, try set up your sentry server as http://my.sentry.instance, for the detailed explain Mixed Content: a priori authenticated URL. After did a little research about the X-Forwarded-Proto, it's explained in MDN as:\n\nThe X-Forwarded-Proto (XFP) header is a de-facto standard header for identifying the protocol (HTTP or HTTPS) that a client used to connect to your proxy or load balancer\n\nWell, for me I personally never treat any HTTP Header starts with X- as standard nor did I treat them as some sort of tricky shortcut(it did solve lots of real business problems), but as a SaaS service following the HTTP standard is never a bad choice. So I think what above people what to do here is  they keep the origin http schema and trying to make their server treat it as a request from HTTPS through X-Forwarded-Proto. Feeling sorry that's not gonna work because the problem is not because X-Forwarded-Proto was not recognized by your sever but the browser.\n. ",
    "jutaz": "I recently encountered this in one of our apps. the cause was a big object, that had a bunch of circular references in it passed to a breadcrumb, and caused the stringify to fail, as it simply ran out of memory when trying to stringify such object.\nI may be able to recreate this in codepen or plunker, but the thing is - I'm not sure if that's something that can/would be fixed. One interesting way to fix this would be to limit the depth of the object passed in to say 10, which would, in some cases, prevent it from becoming too large.. ",
    "ndmanvar": "@benvinegar \nDoes this mean you can set the SourceMap HTTP header when uploading the minified js file, in place of having sourceMappingURL=.... at the end of the minified file? Is that correct? (Just want to make sure I'm on the same page before I start writing documentation)\n. Will add documentation about the headers piece as well (i.e. don't merge this PR yet, will add some more docs clarifying on how source map linking works / what is required for proper expanding sources.. > The main issue I have with RegExp is that it can help people easily shoot themselves in the foot, \nas this sanitizer goes through all keys of the payload sent to Sentry. Including exception, message, frames, etc. etc.\nI can understand why this can be an example of \"shooting yourself in the foot \", but many companies/organization want to scrub PII everywhere (frames, tags, extra information, error title/msg, etc.). Maybe a config that specifies to look through everything / etc.??\n. ",
    "paulirish": "lol ok. :)\nThen what this points at is I've been browsing the \"JavaScript\" documentation for raven/sentry for a while now thinking it was indicative of how things work in Node. :)   I now see \"Node\" is the key word. \nWhat would have helped me is this major renaming across your docs:\n\nNode -> Node.js JavaScript\nJavaScript -> Browser JavaScript\n\nThough, understandably, this is a big change. . ",
    "herodrigues": "Because chrome.app.runtime is not supported.\nAnyway, I published an extension to Firefox Add-ons and it was accepted.\nSo I think that's not urgent.. ",
    "enapupe": "Hey guys, after seeing the linked issue (#1008) I updated my raven version but I'm still receiving error reports as [object ErrorEvent]. The relevant info:\nname | Chrome\n-- | --\nversion | 67.0.3396\nName | raven-js\n-- | --\nVersion | 3.26.3\nAnd my code looks something like:\nconst handleWindowError = (event) => {\n  window.Raven.captureException(event, {\n    extra: { state: toJSONable(store.getState()) },\n  })\n}\nwindow.addEventListener('error', handleWindowError). ",
    "Valandur": "{\n  \"project\": \"{app_id}\",\n  \"logger\": \"javascript\",\n  \"platform\": \"javascript\",\n  \"request\": {\n    \"headers\": {\n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"\n    },\n    \"url\": \"http://test.localhost/test.html\"\n  },\n  \"exception\": {\n    \"values\": [{\n      \"type\": \"Error\",\n      \"value\": \"\",\n      \"stacktrace\": {\n        \"frames\": [{\n          \"filename\": \"http://test.localhost/test.html\",\n          \"lineno\": 18,\n          \"colno\": 9,\n          \"function\": \"?\",\n          \"in_app\": true\n        }]\n      }\n    }]\n  },\n  \"culprit\": \"http://test.localhost/test.html\",\n  \"tags\": {\n    \"release\": \"test version\"\n  },\n  \"extra\": {\n    \"session:duration\": 4\n  },\n  \"event_id\": \"23c97c338bf1489ea03267e5cea6ff50\"\n}\nI removed the project id because I wasn't sure how private that information is. Weird that it seems to show up as a correct map here, but turns into an array when sending.... Yea I know about the release version used for Sentry's releases feature, but was trying to add more information in the tags. But so I'm assuming this happens due to the fact that the tag name interferes the predefined release config value?\nIf that's the case then consider this issue solved - maybe an error or hint wouldn't be bad when trying to use a protected tag name.. ",
    "AgDude": "@kamilogorek I am excited to hear that apparently raven will support offline natively. Any estimate on when we can expect to see v4?. Sounds great! Thanks for the update.. ",
    "joelryan2k": "@kamilogorek  We too are interested in capturing errors offline. Any update on this?\nIf someone can provide general direction on the recommended approach I have time to work on this... or test a work in progress. I see from your August 2nd comment that it appears this can be built as an Sentry 4 \"Integration\"?. ",
    "RuslanZavacky": "This update is Backwards Compatible and shouldn't inflict any migration steps.. Hey @kamilogorek, I would greatly appreciate if you'd be able to look into that PR and give your feedback :). > As you are already modifying docs, can you update transport section, so it also lists options as one of the properties it receives?\n@kamilogorek in this one, are you talking about this part in docs:\nhttps://github.com/getsentry/raven-js/pull/1166/files#diff-fd40cf2be7711772de9d8316da038cceR244\nIt does seem transport is described there, or there is another place? :) I am happy to update it, can you please link the place where to look?. Done ). Thank you @kamilogorek :). This kinda covers #1172. Build failure here is a legit, as it relates to the #1149 merge. \nAnd it seems its because of the chromium bug, that it does not return correct resourceType.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=765501. @kamilogorek headers & fetchParameters are different, as headers can be used for fetch and for XHR. transport is not really friendly, as you have to overwrite the whole logic, and to support that between updates is really hard. XHR already supported auth and passing cookies.\nWhen fetch was added initially in another PR, passing parameters should've been implemented as fetch initially is too 'limited' to work out of the box. Which makes it more secure, but limited.\nAs a summary, in the current state, for more sophisticated setups, eg. hosted sentry behind authorization (cookie based), it's not gonna work at all now :(. \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 thank you, guys! . My bad :) \ud83d\udc4d for the fix. @kamilogorek here is an issue - now, if you don't pass { credentials:\"include\" } (include or same-origin) fetch won't pass cookies. Not passing cookies breaks authorization for hosted servers that requires it :( . ",
    "vansosnin": "Just in case: at raven.js it appears here.\nAs for me, the stacktrace is pretty useless:\n```\nUncaught TypeError: Illegal invocation\n    at derez (:2:6079)\n    at derez (:2:5890)\n    at derez (:2:5890)\n    at derez (:2:6072)\n    at derez (:2:6072)\n    at derez (:2:6072)\n    at derez (:2:6072)\n    at derez (:2:6072)\n    at Object.decycle (:2:6109)\n    at Object.e.stringify (:1:9197)\n    at tryCatchStringify (:1:18852)\n    at stringify (:1:18960)\n    at toContentScript (:1:19972)\n    at relay (:1:28996)\n    at :2:429\n    at invokeFunc (:2:24146)\n    at leadingEdge (:2:24223)\n    at debounced (:2:24803)\n    at handleChange (:1:30915)\n// below happens action dispatching from component and insnde redux. It is OK.\n// ...\n```\nDebugging lead me here.\nError I had:\n```\nUncaught TypeError: Converting circular structure to JSON\n    at JSON.stringify ()\n    at eval (eval at tryCatchStringify (:1:18801), :1:6)\n    at tryCatchStringify (:1:18801)\n    at stringify (:1:18960)\n    at toContentScript (:1:19972)\n    at relay (:1:28996)\n    at :2:429\n    at invokeFunc (:2:24146)\n    at leadingEdge (:2:24223)\n    at debounced (:2:24803)\n    at handleChange (:1:30915)\n// below happens action dispatching from component and insnde redux. It is OK.\n// ...\n```\nBecause payload is Event: \n\nThen we died in extensions's dependency jsan (called here). When function derez has Proxy (evt) as first argument and tries to handle it recursively.\nIt it enough info? Will try to debug better the jsan, just have no time right now.. I guess the root of the problem is here: https://github.com/kolodny/jsan/issues/13. ",
    "liuwuhaoo": "I encounter this problem too. I debugged and found maybe the problem is insrc/console.\nvar msg = '' + args.join(' '); this line it convert object args to '[object Object]'.\nMaybe can use JSON.stringify before '+'.. Hi, did the #416 merge into ravenjs? . ",
    "ggarek": "@kamilogorek is there any particular reason why trying to JSON.stringify non Error instances in ravenjs is a bad idea?\nThrowing non Errors is, imo, bad practice, although there are fair amount of libs in js land who does this.. so why not add this case to raven? It is not really specific case, rather pertty generic.. ",
    "Amos47": "I just realized this get's fixed by https://github.com/getsentry/raven-js/pull/1134.\nI'd really appreciate that getting merged.. ",
    "taylor-cedar": "@kamilogorek This is very useful feature for tracking down errors. Can we just put an upper limit on the JSON.stringify size? If the size it is greater than 500 characters or even 100 characters, display [object Object] or {\"something\": \"hello\" ....? There are ways to fix it while keeping under some limit.\nThe size issue could happen with a really long error message (or stack trace) currently. The JSON.stringify errors don't have a stack trace, so there is a lot of room in the request.. Moved string convert logic before the ignore logic, so user's can ignore on custom objects. ",
    "kirillgroshkov": "We got around by monkey-patching the function now, but would be nice to have it merged. ",
    "DeadSuperHero": "Would be really great to get this functionality in raven-js; particularly in relation to [object Event] messages.. ",
    "pradeepramesh123": "Hi Kamil,\nThank you very much for your immediate response.\nI will go through the link.\nRegards,\nPradeep\nOn Thu, Jan 4, 2018 at 4:59 PM, Kamil Og\u00f3rek notifications@github.com\nwrote:\n\nClosed #1184 https://github.com/getsentry/raven-js/issues/1184.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/raven-js/issues/1184#event-1409363863, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AdG5aD9ShAK5Ya6gHfuO8rIfDd5EruA1ks5tHLYugaJpZM4RSym_\n.\n. \n",
    "rajatvijay": "Hey is this still up for grabs?. ",
    "helfer": "Awesome, thanks a lot! Please feel free to close the issue \ud83d\ude42 . ",
    "jharris4": "The throw error was TypeError Cannot read property 'match' of undefined\nMight be helpful to add a check to the top of parseUrl (https://github.com/getsentry/raven-js/blob/master/src/utils.js#L187) that does something like the following:\nfunction parseUrl(url) {\n  if (!url) return {};\n}. Hi @kamilogorek, I did notice the comment saying it was not indicative of a bug in Raven.js! ;-)\nI decided to file a bug anyway, because the error was logged to Sentry by Raven.js and I figured this should be addressed somehow...\nThere isn't much else to the stack trace:\n```\nDataCloneError: The object can not be cloned.\n  at postMessage([native code])\n  at this(./node_modules/raven-js/src/raven.js:360:0)\n```\nSeems like something weird that is only happening with Firefox for iOS.\nI've never personally used that browser, but one of our users apparently did.... I was trying to search the web to find out what this error even means, and the only reference I can find is this one: https://stackoverflow.com/questions/42170826/categories-for-rejection-by-the-structured-cloning-algorithm. @mscuthbert This was also my feeling... That while this error is not likely raven's fault, it should still handle it more gracefully than it does currently.\nThat said, I have not seen that error at all since I first opened this issue.\nWe might want to change the issue title though if people truly are seeing it on browsers OTHER than Firefox for iOS ;-). ",
    "Walaa106": "In raven configuration you can pass fetchParameters: { credentials: 'omit' }.. ",
    "humphreybc": "@kamilogorek TypeScript 2.6.2.. Whoops, fat fingered the close button.. @kamilogorek That will only work if you've installed Raven from NPM so it's in node_modules. We're following the method of using a ",
    "vikasraj789": "@kamilogorek I am using React 15.. ",
    "BlueHatbRit": "Hi @kamilogorek, thanks for looking over this so quickly! I've made the change, as a new commit. Feel free to ask for any other wording changes, when you're happy it might be worth squashing the two commits (or I can on my branch).. Awesome cheers, I don't use rst very often so thanks for adding those links as well.\nAnd thanks for the swift merge :smile:. ",
    "marocchino": "I declare module like this in our own project.\nts\ndeclare module 'raven-js/plugins/vue' {\n  import Vue from 'vue';\n  import { RavenStatic } from 'raven-js';\n  function vuePlugin(raven: RavenStatic, vue: Vue): RavenStatic;\n  export = vuePlugin;\n}\nThis definition is fine for me, but not for other users who do not use Vue.\nUnless we solve this dependency problem, it's hard to put types in plugins.\n. ",
    "milky2028": "I'm having trouble figuring out the exact syntax to get this working as well. @wjdp, what did you end up using? Thank you . ",
    "WORMSS": "I had to use @marocchino 's \ndeclare module 'raven-js/plugins/vue' {\n  import Vue from 'vue';\n  import { RavenStatic } from 'raven-js';\n  function vuePlugin(raven: RavenStatic, vue: Vue): RavenStatic;\n  export = vuePlugin;\n}\nin a .d.ts file within our client to get this to stop crying at us. So I am not sure what \"this is now fixed\" @wjdp is referring to?. ",
    "JohnMH": "@kamilogorek I'd argue that this is not a usage question, but a bug report with a solution. The solution, regardless, was to make my web server pass X-Forwarded-Proto to Sentry.. Actually, the request (to https://sentry.splentity.com/) is really HTTPS, but I use nginx as a proxy, which Sentry doesn't seem to like.. ",
    "robbie-hinman": "I am also running into this, and I also agree that if the DSN starts with https it only makes sense to submit the report over https as well.  How could someone use the X-Forwarded-Proto without setting up a proxy?. ",
    "kichik": "I should also mention the TLS issue is a silent one. There is no error message anywhere (including the browser itself) and you simply stop getting any data from Internet Explorer 8 while thinking everything is working fine.. If Internet Explorer 8 is completely unsupported you may want to update the documentation. The filters page of Sentry.io Settings also mentions Internet Explorer 8 is supported.. ",
    "honeydripper": "The issue seemed to have been caused by a combination of caching and bad luck. It's working. Sorry for having wasted your time.. ",
    "vicrep": "@kamilogorek thanks for getting back to me.\nSo I took the time to try your suggested fix, and ended up discovering what was causing the actual issue.\nPrototype chain assignments were actually being handled by the typescript compiler, so doing Object.setPrototypeOf(this, new.target.prototype); wasn't necessary. \nIn my issue request, I wrote CustomError as a generic example, but in fact, the custom error I was actually using in my project was called HttpError.  Further investigation led me to discover that having the class name begin with Http was actual the culprit, and causes sentry's stack trace collection (i.e. tracekit?) to fail.\nHere's an example, where I have two custom errors, declared in the same file, which share the exact same implementation -- one is named HttpError, the other HttError (no p).\nThrowing HttpError somewhere in my project, this is the culprit and last stack frames I get from sentry's dataCallback:\n\n\nNow, throwing the error HttError from the exact same place, here's what I get:\n\n\nSo it seems something is happening in the pipeline when errors' class names begin with Http. Hey @kamilogorek I checked with my TypeScript compiler, and the generated classes were the exact same for Htt and Http (it's a big project, so sharing a copy of the config is non-trivial). I however decided to give it a shot using vanilla JS, and can confirm that it's an issue with TraceKit (or the version of TraceKit being used internally by Sentry).\nHere's a repro for you. Note that what actually triggers the wrong stack trace is when the name property of the error instance starts with Http -- not setting this.name = 'HttpError' (but keeping the class name) makes the issue go away.\nhttps://plnkr.co/edit/tY7Wf39GcnodxFq6ylOs?p=preview\n. ",
    "krasimir": "Thanks for the quick answer @kamilogorek. Any idea about when v4 is coming up?. ",
    "leth": "Sorry, thanks for picking that up!. I can't see this fix on any of the active branches... did it get lost?. Awesome, thanks!. @kamilogorek Any chance of a release soon :) This would really help us improve our error reports!. No problem! Thanks!. So for release info that would be something like this?\njs\nSentry.configureScope(scope =>\n  scope.addEventProcessor(\n    event =>\n      new Promise(resolve =>\n        resolve({\n          ...event,\n          release: 'some_version'\n        })\n      )\n  )\n);. Sounds like a good idea! Thanks!. ",
    "patrickliechty": "We are using the ngRaven module and here is the config\nvar ravenOptions = {\n    ignoreErrors: [\n      'originalCreateNotification',\n      'canvas.contentDocument',\n      'MyApp_RemoveAllHighlights',\n      // Facebook borked\n      'fb_xd_fragment',\n      /.Script error./,\n      /.requestAnimationFrame is not defined./,\n      's is not defined',\n      /._satellite./,\n      /.Blocked a frame with origin./,\n      /.NOT_AUTHENTICATED./,\n      /.status.403./,\n      /.status.404./,\n      /.status.401./,\n      /.status\\\"\\:-1./,\n      /.'minus' of undefined./,\n      /.Possibly unhandled rejection./\n    ],\n    sampleRate: 0.1\n  };\n  Raven\n    .config('https://**key**', ravenOptions)\n    .addPlugin(Raven.Plugins.Angular)\n    .install();\nRaven.setUserContext({\n  name: FS && FS.User && FS.User.profile ? FS.User.profile.displayName : \"anonymous\",\n  username: FS && FS.User && FS.User.profile ? FS.User.profile.username : \"anonymous\",\n  email: FS && FS.User && FS.User.profile ? FS.User.profile.displayName : \"anonymous\",\n  id: FS && FS.User ? FS.User.sessionId : \"nosession\"\n});. Did I answer your question?. Ok I will.  Sorry, I posted my last response before seeing your last response.  I should have refreshed the page first.. You are right.  Raven doesn't do anything with the digest cycle.  We were causing the issue..\n",
    "mscuthbert": "I\u2019ve just started to get the same message on Raven from a windows 10 machine running Chrome 68. The full stack trace is:  \nDataCloneError: Failed to execute 'postMessage' on 'Window': function (a){if(qe.$a.hasOwnProperty(a))return qe.$a[a]} could not be cloned.\n  at _reportEvent (/:1:35800)\n  at eval (/:1:35800)\n  at eval (/:1:35800)\nI\u2019m not using WebWorkers at all in my code and don\u2019t recognize the code as my own at all. \nI did recently add code that had WeakMaps in it to my stack, and thinking from my experience in other languages I can imagine that WeakRefereces might cause errors in cloning, especially since WeakMaps and WeakSets don\u2019t allow iterating. . @gmattar unfortunately we only run Raven on our obfuscated, non-map code, so debugging will bee pretty hard, but it looks like we'd all need to get this working on non-minified raven to figure out what's up. . @kamilogorek -- are you sure that it's a user-code exception?  It looks to me that a user-code exception is causing Raven to want to report the user problem but then what is being reported is actually an error in _reportEvent, trying to clone the user function (which will always be different) as part of the Raven script.  But I think that Raven should have a fallback if it tries to clone a function that can't be cloned.\nThanks for the response and amazing software!. I have not seen this error since then (we try to make it so it's really hard for users who are not hacking to create errors that go up to Raven/Sentry), so I'm not sure if I'll be able to reproduce it on SDK v.4 but will be glad to try to get it up and tested.  \nThe problem with making new releases of software that people use for error capturing and testing -- it's probably the one part of the system that we're all most risk-adverse to using beta software on.  :-)\nThanks!. ",
    "gmattar": "@mscuthbert I'm getting the same problem for a few days now. Did you have any luck  debugging?. ",
    "n-sviridenko": "Have the same issue now ad @Sija has. @mscuthbert @kamilogorek when do you plan to release v4?. The problem is still persistent with v4.0.5, however now it's possible to see the debug backtrace of the initial error which is nice.\nhttps://sentry.io/share/issue/44d31cc02817475882cd519056b36558/. It's not related to sentry, but to this issue. All the people having this error were coming from facebook and having mobile devices. I assume they come from the in-app browser (\"Facebook Mobile Browser\") which may have this issue of having communicating between multiple opened windows. Is there anyone having a similar issue?. ",
    "uturnr": "I've seen the error reported by desktop browsers - Chrome, Edge and Opera on Windows XP through 10. Two of the reports included a referrer: facebook.com. Interestingly, all of the reports list Facebook-owned IP addresses.. ",
    "francisdb": "yes, new version would be safer. ",
    "henrikbjorn": "https://gist.github.com/henrikbjorn/dfc50687638f9ebfc9a212675eacaff5\nExample, where the produced size after running webpack is 40kb. . ",
    "lencioni": "@davidfurlong We are also seeing this at Airbnb. Is there anything I can do to help reduce the size of this project?\nWe are importing it like this:\njs\nimport Raven from 'raven-js';\nAnd we don't have any other special config related to raven-js in our build.\nhttps://bundlephobia.com/result?p=raven-js@3.26.4\nHere's a source-map-explorer visualization of raven-js in one of our bundles:\n\nAnd here's the output of a different analysis I ran on it (I believe these sizes are pre-minification though):\n/node_modules/raven-js/src/singleton.js size: 1.94 kB, treeSize: 122 kB, importCount: 2, savedByRemoving: 122 kB\n ./node_modules/raven-js/src/raven.js size: 69.9 kB, treeSize: 120 kB, importCount: 1, savedByRemoving: 120 kB\n   ./node_modules/raven-js/vendor/TraceKit/tracekit.js size: 22.2 kB, treeSize: 40.7 kB, importCount: 1, savedByRemoving: 22.2 kB\n     ./node_modules/raven-js/src/utils.js size: 16.5 kB, treeSize: 18.5 kB, importCount: 3, savedByRemoving: 16.5 kB\n       ./node_modules/raven-js/vendor/json-stringify-safe/stringify.js size: 2.03 kB, treeSize: 2.03 kB, importCount: 2, savedByRemoving: 2.03 kB\n   ./node_modules/raven-js/src/console.js size: 1.24 kB, treeSize: 19.7 kB, importCount: 1, savedByRemoving: 1.24 kB\n     ./node_modules/raven-js/src/utils.js size: 16.5 kB, treeSize: 18.5 kB, importCount: 3, savedByRemoving: 16.5 kB\n   ./node_modules/raven-js/src/utils.js size: 16.5 kB, treeSize: 18.5 kB, importCount: 3, savedByRemoving: 16.5 kB\n   ./node_modules/raven-js/vendor/md5/md5.js size: 7.89 kB, treeSize: 7.89 kB, importCount: 1, savedByRemoving: 7.89 kB\n   ./node_modules/raven-js/vendor/json-stringify-safe/stringify.js size: 2.03 kB, treeSize: 2.03 kB, importCount: 2, savedByRemoving: 2.03 kB\n   ./node_modules/raven-js/src/configError.js size: 236 B, treeSize: 236 B, importCount: 1, savedByRemoving: 236 B\nIt looks like most of the weight comes from raven.js itself, so that's probably where most of the attention should be given. It also looks like there might be some other potentially small wins by moving md5 to a node_module perhaps, or allowing a different hashing function to be injected in a way that would the weight of your md5 module (e.g. string-hash, which is a very small implementation of djb2).. This also seems roughly the same size as the minified version you publish in the dist directory of the package: https://unpkg.com/raven-js@3.26.4/dist/\nIf you are looking for a way to debug this issue, it looks like you should be able to run your normal build and inspect the size of the output of that file.. ",
    "jraoult": "I guess it is related: I'm seeing the same with the new SDK: 23 KB gzipped.\n\n. ",
    "AWare": "Hi, this is causing us issues adopting sentry in new projects and prevents us from updating the SDK. \n\n\nExcuse the large screenshots, but we're seeing an increase of about 2.6 times in transmitted size and 3.6 times in parsed size which would seriously impact our javascript budgets.\nI'd like to request that this is reopened and the Needs Reproduction label is dropped. \nWe'd also like to thank you for continuing to support raven-js as its' smaller bundle size allows us to continue monitoring errors without impacting performance for users.. ",
    "pfrendo": "I did it but it depends on what module loader you're using. In my case I had to use via require not import. @kamilogorek I started by importing * as Raven from 'raven-js' but nothing this wasn't instantiated . ",
    "ohana54": "@kamilogorek @MaxBittker hey, thanks for this feature!\nDo you think it's ok to turn it on by default in a minor version?\nWe're capturing unhandled rejections manually in our app (like other apps I guess), does this mean the exceptions will be captured twice?. Related: https://github.com/getsentry/raven-js/issues/1243. @f-roland it's possible to turn it off, but it's still not enough since in the unregister function it doesn't check if you turned it off and always accesses the window. . :) No worries, thanks for the quick fix!!. ",
    "f-roland": "This patch breaks our build too as window is not defined in our env :/ \nI think there are many users relying on this Library in environments where window is not defined - there should be a check for that, or we should be able to turn it off in Raven.config. ",
    "trostli": "\ud83d\udc4d . ",
    "wwwouter": "Hi @kamilogorek \nThere seems to be a problem with the type of error\nI'm using react and this is my code\n```\npublic render() {\n        throw new Error('test8a');\n  }\npublic componentDidCatch(error: any, info: any) {\nRaven.captureException(error, { tags: {test4: 'test' } });\nRaven.captureException(new Error('test_error'), { tags: {test4: 'test' } });\nthis.setState({ hasError: true, sentryEventId: Raven.lastEventId() });\n}\n```\nThe first one ignores the tag, while the order does log it:\n\n\nLooking at the POST to sentry, there seems to be a difference:\njson\n{\n  \"project\":\"xxx\",\n  \"logger\":\"javascript\",\n  \"platform\":\"javascript\",\n  \"request\":{\n    \"headers\":{\n      \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36\",\n      \"Referer\":\"http://localhost:8080/patients\"\n    },\n    \"url\":\"http://localhost:8080/patients\"\n  },\n  \"exception\":{\n    \"values\":[\n      {\n        \"type\":\"Error\",\n        \"value\":\"test8a\",\n        \"stacktrace\":{\n          \"frames\":[\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":44494,\n              \"colno\":37,\n              \"function\":\"response.json.then\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":140827,\n              \"colno\":18,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219058,\n              \"colno\":18,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":44471,\n              \"colno\":9,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":140827,\n              \"colno\":18,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219061,\n              \"colno\":16,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219028,\n              \"colno\":29,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":144360,\n              \"colno\":18,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":81984,\n              \"colno\":7,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":81678,\n              \"colno\":16,\n              \"function\":\"Connect.onStateChange\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":120259,\n              \"colno\":16,\n              \"function\":\"Connect.Component.setState\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":127891,\n              \"colno\":7,\n              \"function\":\"Object.enqueueSetState\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132368,\n              \"colno\":12,\n              \"function\":\"scheduleWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132411,\n              \"colno\":11,\n              \"function\":\"scheduleWorkImpl\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132557,\n              \"colno\":7,\n              \"function\":\"requestWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132646,\n              \"colno\":7,\n              \"function\":\"performWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132693,\n              \"colno\":24,\n              \"function\":\"performWorkOnRoot\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132045,\n              \"colno\":7,\n              \"function\":\"renderRoot\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122117,\n              \"colno\":27,\n              \"function\":\"invokeGuardedCallback\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122260,\n              \"colno\":16,\n              \"function\":\"Object.invokeGuardedCallbackDev\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":107334,\n              \"colno\":21,\n              \"function\":\"HTMLUnknownElement.wrapped\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122221,\n              \"colno\":14,\n              \"function\":\"HTMLUnknownElement.callCallback\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":131967,\n              \"colno\":26,\n              \"function\":\"workLoop\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":131903,\n              \"colno\":16,\n              \"function\":\"performUnitOfWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":129904,\n              \"colno\":16,\n              \"function\":\"beginWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":129529,\n              \"colno\":12,\n              \"function\":\"updateClassComponent\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":129552,\n              \"colno\":31,\n              \"function\":\"finishClassComponent\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":208871,\n              \"colno\":15,\n              \"function\":\"PatientsList.render\",\n              \"in_app\":true\n            }\n          ]\n        }\n      }\n    ]\n  },\n  \"culprit\":\"http://localhost:8080/scripts/app.js\",\n  \"trimHeadFrames\":0,\n  \"extra\":{\n    \"session:duration\":572\n  },\n  \"breadcrumbs\":{\n    \"values\":[\n      {\n        \"timestamp\":1520860418.832,\n        \"type\":\"http\",\n        \"category\":\"fetch\",\n        \"data\":{\n          \"method\":\"GET\",\n          \"url\":\"/api/session\",\n          \"status_code\":200\n        }\n      }\n    ]\n  },\n  \"event_id\":\"xxx\"\n}\njson\n{\n  \"project\":\"xxx\",\n  \"logger\":\"javascript\",\n  \"platform\":\"javascript\",\n  \"request\":{\n    \"headers\":{\n      \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36\",\n      \"Referer\":\"http://localhost:8080/patients\"\n    },\n    \"url\":\"http://localhost:8080/patients\"\n  },\n  \"exception\":{\n    \"values\":[\n      {\n        \"type\":\"Error\",\n        \"value\":\"test_error\",\n        \"stacktrace\":{\n          \"frames\":[\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":44494,\n              \"colno\":37,\n              \"function\":\"response.json.then\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":140827,\n              \"colno\":18,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219058,\n              \"colno\":18,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":44471,\n              \"colno\":9,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":140827,\n              \"colno\":18,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219061,\n              \"colno\":16,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":219028,\n              \"colno\":29,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":144360,\n              \"colno\":18,\n              \"function\":\"?\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":81984,\n              \"colno\":7,\n              \"function\":\"dispatch\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":81678,\n              \"colno\":16,\n              \"function\":\"Connect.onStateChange\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":120259,\n              \"colno\":16,\n              \"function\":\"Connect.Component.setState\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":127891,\n              \"colno\":7,\n              \"function\":\"Object.enqueueSetState\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132368,\n              \"colno\":12,\n              \"function\":\"scheduleWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132411,\n              \"colno\":11,\n              \"function\":\"scheduleWorkImpl\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132557,\n              \"colno\":7,\n              \"function\":\"requestWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132646,\n              \"colno\":7,\n              \"function\":\"performWork\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132696,\n              \"colno\":42,\n              \"function\":\"performWorkOnRoot\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":131729,\n              \"colno\":9,\n              \"function\":\"commitRoot\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122117,\n              \"colno\":27,\n              \"function\":\"invokeGuardedCallback\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122260,\n              \"colno\":16,\n              \"function\":\"Object.invokeGuardedCallbackDev\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":107334,\n              \"colno\":21,\n              \"function\":\"HTMLUnknownElement.wrapped\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":122221,\n              \"colno\":14,\n              \"function\":\"HTMLUnknownElement.callCallback\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":131635,\n              \"colno\":9,\n              \"function\":\"commitAllLifeCycles\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":132289,\n              \"colno\":18,\n              \"function\":\"commitErrorHandling\",\n              \"in_app\":true\n            },\n            {\n              \"filename\":\"http://localhost:8080/scripts/app.js\",\n              \"lineno\":95172,\n              \"colno\":32,\n              \"function\":\"UnconnectedCatchingComponent.componentDidCatch\",\n              \"in_app\":true\n            }\n          ]\n        }\n      }\n    ]\n  },\n  \"culprit\":\"http://localhost:8080/scripts/app.js\",\n  \"trimHeadFrames\":0,\n  \"tags\":{\n    \"test4\":\"test\"\n  },\n  \"extra\":{\n    \"session:duration\":645\n  },\n  \"breadcrumbs\":{\n    \"values\":[\n      {\n        \"timestamp\":1520860418.832,\n        \"type\":\"http\",\n        \"category\":\"fetch\",\n        \"data\":{\n          \"method\":\"GET\",\n          \"url\":\"/api/session\",\n          \"status_code\":200\n        }\n      },\n      {\n        \"timestamp\":1520860419.011,\n        \"category\":\"sentry\",\n        \"message\":\"Error: test8a\",\n        \"event_id\":\"\",\n        \"level\":\"error\"\n      },\n      {\n        \"timestamp\":1520860419.056,\n        \"message\":\"The above error occurred in the <PatientsList> component:\\n    in PatientsList (created by RouterContext)\\n    in UnconnectedCatchingComponent (created by Connect(UnconnectedCatchingComponent))\\n    in Connect(UnconnectedCatchingComponent) (created by AppNext)\\n    in div\\n    in Unknown (created by AppNext)\\n    in IntlProvider (created by AppNext)\\n    in AppNext (created by Connect(AppNext))\\n    in Connect(AppNext) (created by AppSwitcher)\\n    in AppSwitcher (created by Connect(AppSwitcher))\\n    in Connect(AppSwitcher) (created by RouterContext)\\n    in RouterContext (created by Router)\\n    in Router\\n    in Provider\\n\\nReact will try to recreate this component tree from scratch using the error boundary you provided, UnconnectedCatchingComponent.\",\n        \"level\":\"error\",\n        \"category\":\"console\"\n      }\n    ]\n  },\n  \"event_id\":\"xxx\"\n}. So if I understand it correctly, in development mode the first captureException is ignored?. It is also caught in componentDidCatch, so if it's bubbled, shouldn't that result in the logging of 3 exceptions, with two that have the something:awesome tag?\n. Sorry if this is becoming more of on-boarding than an actual issue, but if I look at my dashboard I see only one event. Shouldn't there be two for test8a? \nSo if one has a tag and the other hasn't, does this result in 1 issue with 2 events? If so, should't the tag be visible? Or should there be 2 issues, with both 1 event?\n. \ud83e\udd47 Thanks for the detailed explanation!. ",
    "Maistho": "Thanks for the quick turnaround! . ",
    "s12chung": "i'm the one who reproduced it, let me know if you need anything.. ",
    "THPubs": "Really sorry about that. Here's how I configured the app:\n// Configure error reporting\nif (process.env.RAVEN_DSN) {\n  Raven.config(process.env.RAVEN_DSN).install();\n  app.use(Raven.requestHandler());\n}\n\nAnd at the end I placed\napp.use(Raven.errorHandler());\n\nIn the .env file:\nRAVEN_DSN=\"https://********************:********************@sentry.io/******\"\n\nI did a console log of process.env.RAVEN_DSN and it's being loaded correctly and the error message reads like this:\nError: Invalid Sentry DSN: \"https://********************:********************@sentry.io/******\"\n    at Object.parseDSN (/usr/src/app/node_modules/raven/lib/utils.js:193:11)\n    at Raven.config (/usr/src/app/node_modules/raven/lib/client.js:52:22)\n    at Object.<anonymous> (/usr/src/app/dist/app.js:65:19)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Function.Module.runMain (module.js:693:10)\n    at startup (bootstrap_node.js:188:16)\n    at bootstrap_node.js:609:3\n\n. Just found the issue! In the .env file we can't add double quotes! So the following...\nRAVEN_DSN=\"https://********************:********************@sentry.io/******\"\n\nshould be written as:\nRAVEN_DSN=https://********************:********************@sentry.io/******.\n",
    "mariawix": "@zivl @kamilogorek I didn't want to change API of Raven, for me both changes are good.\nThanks!. ",
    "sigurbjorngudjonsson": "I'm experiencing the same on an alternative javascript stack, using React with Redux and Redux Sagas, seeing the same error being reported both labeled and unlabeled.\nSome noticeable differences are between the JSON structures of the issues:\nLabeled:\n{\n  \"errors\": [],\n  \"sentry.interfaces.Exception\": { ... }\n}\nUnlabeled:\n* Missing the \"sentry.interfaces.Exception\": { ... } part\n{\n  \"errors\": [{\n      \"type\": \"invalid_data\",\n      \"name\": \"exception\",\n      \"value\": {\n        \"values\": [\n          {\n            \"stacktrace\": {\n              \"frames\": [...]\n            },\n            \"type\": \"TypeError\",\n            \"value\": \"Some error message\"\n          }\n        ]\n      }\n    }],\n}\nWandering what could yield such different results? \ud83e\udd14. ",
    "justinappler": "Still seeing this hundreds, sometimes thousands of times per hour but we can't hide it because don't know if its a real issue or noise.. @kamilogorek Any update? This represents a huge number of our inbound exceptions and it's hard for us to ignore it given we don't know if it masks real issues or not.. @kamilogorek Here's the one we're seeing: https://sentry.io/crunchbase/client-app-v3-production/issues/364876156/?query=is:unresolved%20timesSeen:%3E5. Yeah, I'm seeing it again as well after we switched to the new JS SDK (sentry/browser @ 4.4.1).. ",
    "glebmachine": "Got about 39k events from 1.2k users in 2 weeks.\nIf it helps - here is a link:\nhttps://sentry.io/beta-digital-production/svo-frontend/issues/561763091/activity/\nI have investigated that metrika.yandex.ru (Russian Google Analytics analogue) sometimes raising error which not logged to Sentry (only IE11 on windows7)\nHere is a log:\nstack   \"Error: Invalid argument.\nat z (https://mc.yandex.ru/metrika/tag.js:65:441)\nat Anonymous function (https://mc.yandex.ru/metrika/tag.js:284:289)\nat b.default.reduce (https://mc.yandex.ru/metrika/tag.js:187:71)\nat value (https://mc.yandex.ru/metrika/tag.js:284:215)\nat Anonymous function (https://mc.yandex.ru/metrika/tag.js:283:301)\nat b.default.reduceRight (https://mc.yandex.ru/metrika/tag.js:187:220)\nat value (https://mc.yandex.ru/metrika/tag.js:283:245)\nat t.prototype.invoke (http://new.svo.aero/polyfills.ae8cfcafa087f578b772.js:1:22818)\nat n.prototype.runGuarded (http://new.svo.aero/polyfills.ae8cfcafa087f578b772.js:1:18263)\nat Anonymous function (http://new.svo.aero/polyfills.ae8cfcafa087f578b772.js:1:17892)\". The same, we've got about 5 event per week (instead of thousands)\n. @HazAT please publish. ",
    "andrew-dixon": "@kamilogorek - We have just upgraded from 3.9.1 to 4.4.1 and started to see <unlabeled event> entries, is there a regression here? We didn't have any prior to updating.. ",
    "edward8628": "In my case, the unhandled events are caused by unhandled promise. I just add .catch() or try and catch to functions without error handling. . > > In my case, the unhandled events are caused by unhandled promise. I just add .catch() or try and catch to functions without error handling.\n\nBut we're talking about \"unlabeled\" event\n\nOhh sorry, I mean unlabeled event. . ",
    "Eugene-Musika": "\nIn my case, the unhandled events are caused by unhandled promise. I just add .catch() or try and catch to functions without error handling.\n\nBut we're talking about \"unlabeled\" event. Have thousands of such kind of errors:\n\nIt fills my errors quota in a flash of eye.\nUsing @sentry/browser v4.5.0.\nSentry config:\n```javascript\nimport * as Sentry from '@sentry/browser';\nimport cache from './cache';\nimport { getTokenParsedData } from './jwt_token';\nexport function initBugTracking () {\n    if (DEV || location.hostname === 'localhost' || location.hostname.includes('*.loc')) { return; }\nSentry.init({\n    attachStacktrace: true,\n    beforeSend (event, _hint) {\n        const { metadata } = event;\n\n        if (metadata &&\n            (metadata.title === '<unlabeled event>'\n            || metadata.value && /^(yaCounter|Load chunk)/.test(metadata.value)\n            )\n        ) { return null; }\n\n        if (!event.message && !event.exception) { return null; }\n        if (event.exception) {\n            const exceptionValue = event.exception.values[0].value;\n\n            if (exceptionValue) {\n                if (exceptionValue.startsWith('Loading chunk')\n                || exceptionValue.startsWith('yaCounter')\n                ) { return; }\n            }\n        }\n\n        if (event.message && event.message.startsWith('Socket failed to connect in')) {\n            setTimeout(() => {\n                Sentry.init({ dsn: null });\n            }, 300);\n        }\n\n        return event;\n    },\n    dsn: 'https://*****@sentry.io/*****',\n    environment: 'prod:client',\n    ignoreErrors: ['NS_ERROR_FILE_UNRECOGNIZED_PATH'],\n    release: window.SENTRY_RELEASE && window.SENTRY_RELEASE.id,\n    whitelistUrls: ['https://*****.com', 'https://*****.com'],\n});\n\nSentry.configureScope(scope => {\n    const { ***, ...debugUserData } = { ...*****.user }, // eslint-disable-line no-unused-vars\n                token = cache.static.get('token');\n    let tokenExpDate = token && new Date(getTokenParsedData(token).exp * 1000);\n\n    if (tokenExpDate) {\n        tokenExpDate = `${ tokenExpDate.getDate() }.${ tokenExpDate.getMonth() + 1 }.${ tokenExpDate.getFullYear() } ${ tokenExpDate.getHours() }:${ tokenExpDate.getMinutes() }`;\n    }\n\n    scope.setUser({\n        ...debugUserData,\n        tokenExpirationDate: tokenExpDate,\n    });\n\n    scope.setTag('connection', window.navigator.connection && window.navigator.connection.effectiveType || 'unknown');\n});\n\n}\nexport default Sentry;\n```\n. ",
    "fabb": "I'm still seeing a few in 4.4.2, but only from Edge 18. I just updated to 4.6.3, let's see if this changes anything.... ",
    "dan-kez": "Quick question on this documentation @kamilogorek \nRather than \nsomeAppReporter('__DSN__', {\n  ...config goes here\n});\nshouldn't it be:\nsomeAppReporter.config('__DSN__', {\n  ...config goes here\n}).install();. @kamilogorek Quick follow up on that though. I haven't had that issue in my local testing with multiple install calls. That said, I am using webpack code chunking and only call install in separate chunks. This so far has allowed me to have multiple sentry reporting pipelines for chunked pages that each have their own redux stores.\nIs there is a subtly that I'm missing or am I fine so long as I ensure that install is called from separate files (chunks)?. ",
    "glizer": "Yes, its happens if server on ajax request returns html.\nThank for answer . ",
    "kblcuk": "Hi there!\nI'm currently migrating our codebase to use new sdk, and trying to figure out what would be good way to replicated parseUser behaviour from legacy client?\nWhile withScope probably works for manual error capturing, I'm wondering how could I achieve the same (passing extra user data parsed from request that ended up with error) for a global error handler.\nSo far I ended up with having a beforeSend which tries to extract and decode token information from event.request, and then (in case of success) just appends it to event before returning it.\nHowever, I'm not entirely sure if it's the best way to implement this, hence asking here.\nOr should I open separate issue altogether?\nThanks in advance!. @SimonSchick I'm talking about parseUser method from legacy node client, and migrating to @sentry/node, forgot to mention that.\nFor the front-end, obviously, what you said.. ",
    "harrisrobin": "@kamilogorek thanks for your reply.\nYes I can 100% confirm that it logs false. \nHere is a video to show you a demo:\nhttps://youtu.be/WY5r6DfkvJ0\nI am not doing SSR, I am only using the env variable that create-react-app provides. Would that impact anything?\n. @kamilogorek i understand it's hard to reproduce. It's weird indeed. Could it be that there is some internal state/setting saved that makes us unable to block the messages from being sent? Although, that's unlikely cuz my entire team is experiencing this.\nI will try to strip it down as much as possible and set the breakpoints, although if you give me your email or email me @ harris@bureaubilly.com I can simply give you access to the repo.\nCheers and thanks again for your help!. kamilogorek woah!\nthank you for that. wouldn't have caught that myself ^^\nIf I add localhost to the Ignore Urls in segment, and simply use segment, would that work? otherwise ill start using Raven directly and remove it from Segment.\nEDIT: using Raven that segment imports (window.Raven) and adding Ignore URLs in segment's Sentry destination to localhost seems to have worked \ud83c\udf89\nThanks again @kamilogorek , we can close this i think :). ",
    "axnsan12": "Related issue from raven-node: https://github.com/getsentry/raven-node/issues/253. https://github.com/axnsan12/raven-swallow\nThis shows the issue I'm talking about. Relevant code is in app.module.ts and app.component.ts.. OK, thanks for your explanation, that at least clears up what's happening!\nUnfortunately, that still seems subpar to me - in the bottom screenshots with debug: true, the original exception is still nowhere to be seen in the console, unless you dig into the \"Raven about to send\" log messages.  Enabling debug also has the disadvantage of polluting the console with unrelated/undesired messages from raven.\nEven when Raven is installed as global onerror handler, it should always act as a passive observer - I'm not really interested in the raven failure, I'm interested in seeing my error in the log, no matter where it originated - if it would have bubbled up to the console without Raven, it should also do so with it installed.\nNote that duplication is not the issue here, because as you said the captureException call is redundant, my concerns are the same even after removing it.. ",
    "john-kurkowski": "Yeah, nice breakdown, @kamilogorek. I think that'll serve readers for time to come, even for those without this exact issue.\nOne nitpick:\n\nyou don't see any logging, because you don't use debug mode as described in our docs \n\nThe docs say\n\ndebug\nIf set to true, Raven.js outputs some light debugging information onto the console.\n\nThis doesn't tell me what I'm going to get. Will the debugging information be for me? For my users? For Raven.js developers? Should I avoid in production? Will it print the original error? \nThat last one is the reason I came to this thread. I was hoping for such an option.. ",
    "itbrandonsilva": "Also looking to know the same as @john-kurkowski .. ",
    "victorpavlenko": "@kumavis \n@kamilogorek\nStill, doesn't work\nTypeError: Failed to fetch\n/ in _promiseRejectionHandler\nNo additional details are available for this frame.\nv: raven-js : 3.24.2. @HazAT pls merge. ",
    "laukstein": "Also https://ravenjs.com shows outdated v3.20.0\n\n. FYI https://cdn.ravenjs.com/3.24.0/raven.min.js is found.. @kamilogorek, https://cdn.ravenjs.com/3.24.1/raven.min.js is fine now, thanks! But what with https://ravenjs.com - mustn't it show v3.24.1?. ",
    "donce": "Thanks @kamilogorek for inspecting this, it solves issue :). ",
    "ronaldozanoni": "\n^^ this is how the tap event is listed after the pull request https://github.com/getsentry/raven-js/pull/1301. ",
    "Lie8466": "Yeah, dataCallback meet my needs. \nShould read instruction seriously before open issue next time. [embarrassed]\n. ",
    "mklimek": "I see. \nBut...\nIs that better than having thousands of different events merged together without a possibility of unmerge? \nThe argument about having eg. backend payloads in Error message is good when you assume that there's no other way to provide such a data during a crash (but there's many).\nIn my opinion, most people use Error type and message in a way to distinguish error between each other and it's not natural to put different type and message content into one bag like we have in Sentry.. ",
    "akashnimare": "@kamilogorek is there any way to disable the console logs? Currently, it logs everything from the console.. @kamilogorek no, just want to disable the console logs. Would that be enough -\n```js\ninit({\n  dsn: 'YOUR_DSN',\n  integrations: [new Sentry.Integrations.Breadcrumbs({\n      console: false\n  })] \n})\n```\nThanks for the help :). ",
    "didnotwant": "\nDone through console integration\n\n@kamilogorek \u2014 how do you disable specific console method (such as warn, info) separately in @sentry/browser? As far as I understand the Console integration exists only in @sentry/node but still: no idea how to use it in order to achieve what was described in this issue.. ",
    "iOiurson": "Are there any restrictions for these extra infos ?\nI'm passing an object that's quite big (a redux state), and the Raven query never gets sent... and no raven information is logged about a possible Raven error.\nBut if I pass a smaller custom object, the query is sent with no pb.\n. ",
    "avner-hoffmann": "reported!. ",
    "falstack": "em...sorry, i forgot some message..\nthis error throw when i open chrome plugin Wappalyzer version = 5.4.14,\nif i turn off this plugin, this bug will clear.. ",
    "mlecoq": "@kamilogorek I did not find this issue mentioned in the documentation, has it been added ? I think it can be useful \ud83d\ude01 (for us at least ... )  . ",
    "d-ph": "I have a window.onerror listener which catches and processes the instances of my Error class. Part of the \"processing\" is involving filtering, but that's beside the point.\nSince Raven (via TraceKit) also listens to window.onerror, it also \"processes\" my Error instances, which I'd like not to be happening, because as I mentioned I do the processing myself and use Raven.captureException() when I want to.. Ok. Thanks.. ",
    "CaptObvious": "Hi @kamilogorek.  I didn't put it in TraceKit originally as I didn't realise that was a vendor module that you'd modified - usually modifying vendor modules is a bad idea as then you can't update them easily.\nI moved it into TraceKit but now this test fails with stackFrames.stack is undefined.  After putting in some debug logging, it looks like the loop iteration is abandoned when it hits xhr.send(null);.  If I comment out that line the test passes.\nFrom this it looks like this test tooling doesn't support synchronous XMLHttpRequests.  I don't know enough about this to debug this any further.  The code works fine in the browser.. You could have done that in the previous PR - I had the setting enabled to allow maintainers to edit it.\nOut of curiousity, why .slice() over .substr()?. > I don't like to force push to someone else's forks and I had to do this, as I rebased some changes from master. Commit is still authored as yours though :)\nFair enough :)\n\nsubstr cannot accept negative ranges, as slice do, which is imo more descriptive. Eg. slice(-300) is a simple \"give me last 300 characters\", where substr(value.length - 300) sounds more like a \"give me all the characters that are left, starting at position 300 counting from the end of the value length\".\nI just find it easier to read :)\n\nGood tip, thanks!  I'm fairly new to JS so I'm still in the \"whatever works\" phase.. You spotted where I got 300 from, nice \ud83d\udc4d . ",
    "kellycampbell": "Cordova just runs a local JS app within the system WebView on mobile platforms. I imagine that this same problem exists on any Sentry connected site run from a WebView with local JS code.\nI will look into ways to set the Referer header on a webview, since I think it's unset by default when running local code. . ",
    "felixhagspiel": "@kamilogorek  I have the same problem using the raven JS SDK.\nHere is a screenshot of the request: \n\nShould not setting the Referer Header be handled by the SDK?\nThis is how I try to open the feedback dialog:\n  import * as Raven from 'raven-js';\n  ...\n  Raven.showReportDialog({\n    eventId: Raven.lastEventId(),\n    user\n  });\n\n. ",
    "hkdobrev": "@kamilogorek We're experiencing the same issue using the latest version of the Sentry JavaScript SDK 4.3.0. It doesn't send the Referrer header. We were trying to solve through support until we realised what the issue is ourselves. How could we solve that without allowing all domains in our Sentry project settings?. ",
    "karensg": "@kamilogorek,\nSo how do you migrate shouldSendCallback to the new SDK? Can't find any migration examples of that. I had the following code in my Raven.config block:\nshouldSendCallback() {\n    // Ignore IE 11, but gather Edge errors\n    return !('ActiveXObject' in window);\n}\nThanks. Thanks, this is what I did. Was not sure whether returning null here was right approach.. ",
    "gcusnieux": "It's not a bug. ",
    "uforic": "@kamilogorek - yep, wrote tests, and checks pass. Let me know if you need anything else!. The lint script runs prettier automatically, and it did this to the file.\nI verified in my yarn.lock that I'm on the correct prettier version; I can skip the lint step if you'd prefer and return this to it's normal formatting if y'all are getting different behavior, just let me know.. ",
    "bjfletcher": "@HazAT through bower. to cut a long story short, Origami will only use bower: https://github.com/financial-times/o-errors. @mitsuhiko I'm not 100% up on how they find things... if you enter raven-js in https://bower.io/search/ you'll see that it's this one\nit pulls the latest release, not from the master branch. ",
    "remybach": "Can confirm it appears to work again. Thanks for the prompt response \ud83d\udc4d . ",
    "Multiply": "We're hit with our bower dependencies. Using the older version works for now.. ",
    "janysp": "In that folder is raven.js also missing.\nThe official documentation (https://docs.sentry.io/clients/javascript/install/)  is still pointing to ./raven-js/dist/raven.js. It's working again, thanks!. ",
    "swftvsn": "It's in wrapEventTarget, addEventListener - it calls fn.name, but fn can be null.\nSee this line: https://github.com/getsentry/raven-js/blob/5c139cfb7eccc074d759de1d62d81a482cfcf44a/packages/raven-js/src/raven.js#L1201 and note how the code above check if (fn && ...) - this part lacks that check.\nIt should probably be handler: fn ? fn.name : 'somedefaultvalue' or something. ",
    "willem-delbare": "Maybe a unit test could be added to this fix? This issue caused a production app of ours to fail. Should the current version 3.26.1 of Raven not be deprecated in npm? It is broken and produces errors in client-facing applications that are very hard to debug.. ",
    "riquito": "Didn't realize the power of that callback, thanks!\nFor anyone interested I ended up using the following regexp\n```\ncrumb.data.url.replace(new RegExp('(https?://[^/?]+)(/$|.*)'), (_, g1, g2) => g1 + g2.replace(/\\d+/g, '#scrubbed#'))\n// http://example.com\n// => http://example.com\n// http://example.com/\n// => http://example.com/\n// http://192.168.0.1\n// => http://192.168.0.1\n// http://example.com/foo/1/bar/2\n// => http://example.com/foo/#scrubbed#/bar/#scrubbed#\"\n// http://example.com?baz=4\n// => http://example.com?baz=#scrubbed#\n```\n. ",
    "codecov-io": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@5d12cc1). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1362   +/-\n=========================================\n  Coverage          ?   88.44%         \n=========================================\n  Files             ?       26         \n  Lines             ?      623         \n  Branches          ?       91         \n=========================================\n  Hits              ?      551         \n  Misses            ?       68         \n  Partials          ?        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d12cc1...1b2422d. Read the comment docs.\n. # Codecov Report\nMerging #1364 into master will decrease coverage by 11.23%.\nThe diff coverage is 48.79%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1364       +/-\n===========================================\n- Coverage   84.77%   73.53%   -11.24%   \n===========================================\n  Files          31       31             \n  Lines         742      699       -43   \n  Branches      110      104        -6   \n===========================================\n- Hits          629      514      -115   \n- Misses        109      182       +73   \n+ Partials        4        3        -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/base.ts | 100% <\u00f8> (+1.25%) | :arrow_up: |\n| packages/core/test/mocks/client.ts | 91.66% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/core/src/sdk.ts | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/core/test/mocks/backend.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/minimal/test/mocks/client.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/integrations/http.ts | 54% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/console.ts | 91.66% <100%> (\u00f8) | :arrow_up: |\n| packages/hub/src/index.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/sdk.ts | 87.5% <100%> (\u00f8) | :arrow_up: |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caa938c...3f35c95. Read the comment docs.\n. # Codecov Report\nMerging #1367 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1367   +/-\n=======================================\n  Coverage   84.77%   84.77%         \n=======================================\n  Files          31       31         \n  Lines         742      742         \n  Branches      110      110         \n=======================================\n  Hits          629      629         \n  Misses        109      109         \n  Partials        4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b6a6e48...bdb1351. Read the comment docs.\n. # Codecov Report\nMerging #1368 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1368   +/-\n=======================================\n  Coverage   84.77%   84.77%         \n=======================================\n  Files          31       31         \n  Lines         742      742         \n  Branches      110      110         \n=======================================\n  Hits          629      629         \n  Misses        109      109         \n  Partials        4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b95bee2...5a0f8b1. Read the comment docs.\n. # Codecov Report\nMerging #1389 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1389   +/-\n=======================================\n  Coverage   84.77%   84.77%         \n=======================================\n  Files          31       31         \n  Lines         742      742         \n  Branches      110      110         \n=======================================\n  Hits          629      629         \n  Misses        109      109         \n  Partials        4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caa938c...92f0a42. Read the comment docs.\n. # Codecov Report\nMerging #1390 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1390   +/-\n=======================================\n  Coverage   84.77%   84.77%         \n=======================================\n  Files          31       31         \n  Lines         742      742         \n  Branches      110      110         \n=======================================\n  Hits          629      629         \n  Misses        109      109         \n  Partials        4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caa938c...98396b5. Read the comment docs.\n. # Codecov Report\nMerging #1393 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1393      +/-\n=========================================\n+ Coverage   73.53%   73.6%   +0.07%   \n=========================================\n  Files          31      31            \n  Lines         699     701       +2   \n  Branches      104     104            \n=========================================\n+ Hits          514     516       +2   \n  Misses        182     182            \n  Partials        3       3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fec973...02c9015. Read the comment docs.\n. # Codecov Report\nMerging #1394 into master will increase coverage by 14.48%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1394       +/-\n===========================================\n+ Coverage    73.6%   88.09%   +14.48%   \n===========================================\n  Files          31       31             \n  Lines         701      697        -4   \n  Branches      104      105        +1   \n===========================================\n+ Hits          516      614       +98   \n+ Misses        182       78      -104   \n- Partials        3        5        +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/hub/src/scope.ts | 95.52% <\u00f8> (+31.34%) | :arrow_up: |\n| packages/node/src/hub.ts | 100% <100%> (+73.68%) | :arrow_up: |\n| packages/hub/src/global.ts | 100% <100%> (+33.33%) | :arrow_up: |\n| packages/hub/src/hub.ts | 100% <100%> (+69.86%) | :arrow_up: |\n| packages/hub/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| ...ages/node/src/integrations/onunhandledrejection.ts | 100% <100%> (+75%) | :arrow_up: |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/minimal/src/index.ts | 87.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5317a75...2b2e87e. Read the comment docs.\n. # Codecov Report\nMerging #1397 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1397   +/-\n======================================\n  Coverage    73.6%   73.6%         \n======================================\n  Files          31      31         \n  Lines         701     701         \n  Branches      104     104         \n======================================\n  Hits          516     516         \n  Misses        182     182         \n  Partials        3       3\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5317a75...c699027. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@b85398f). Click here to learn what that means.\nThe diff coverage is 44.11%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1398   +/-\n=========================================\n  Coverage          ?   84.79%         \n=========================================\n  Files             ?       33         \n  Lines             ?      763         \n  Branches          ?      119         \n=========================================\n  Hits              ?      647         \n  Misses            ?      110         \n  Partials          ?        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/dsn.ts | 100% <\u00f8> (\u00f8) | |\n| packages/hub/src/hub.ts | 100% <100%> (\u00f8) | |\n| packages/utils/src/index.ts | 100% <100%> (\u00f8) | |\n| packages/utils/src/string.ts | 100% <100%> (\u00f8) | |\n| packages/hub/src/global.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | |\n| packages/utils/src/object.ts | 100% <100%> (\u00f8) | |\n| packages/utils/src/supports.ts | 46.87% <17.64%> (\u00f8) | |\n| packages/core/src/base.ts | 96.47% <75%> (\u00f8) | |\n| packages/utils/src/misc.ts | 8.69% <8.69%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b85398f...aa1cd95. Read the comment docs.\n. # Codecov Report\nMerging #1402 into master will increase coverage by 0.63%.\nThe diff coverage is 98.79%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1402      +/-\n==========================================\n+ Coverage   88.09%   88.73%   +0.63%   \n==========================================\n  Files          31       31            \n  Lines         697      701       +4   \n  Branches      105      105            \n==========================================\n+ Hits          614      622       +8   \n+ Misses         78       74       -4   \n  Partials        5        5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/sdk.ts | 100% <\u00f8> (+12.5%) | :arrow_up: |\n| packages/hub/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/hub/src/global.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/core/src/sdk.ts | 93.75% <100%> (\u00f8) | :arrow_up: |\n| packages/hub/src/scope.ts | 96.29% <100%> (+0.77%) | :arrow_up: |\n| packages/minimal/src/index.ts | 100% <100%> (+12.5%) | :arrow_up: |\n| packages/minimal/test/mocks/client.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/hub.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| ...ages/node/src/integrations/onunhandledrejection.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deff2f0...ed965e3. Read the comment docs.\n. # Codecov Report\nMerging #1404 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1404   +/-\n=======================================\n  Coverage   88.09%   88.09%         \n=======================================\n  Files          31       31         \n  Lines         697      697         \n  Branches      105      105         \n=======================================\n  Hits          614      614         \n  Misses         78       78         \n  Partials        5        5\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deff2f0...d1ef4fc. Read the comment docs.\n. # Codecov Report\nMerging #1405 into master will increase coverage by 1.43%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1405      +/-\n==========================================\n+ Coverage   88.73%   90.16%   +1.43%   \n==========================================\n  Files          31       41      +10   \n  Lines         701     1515     +814   \n  Branches      105      342     +237   \n==========================================\n+ Hits          622     1366     +744   \n- Misses         74      144      +70   \n  Partials        5        5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/utils.js | 94.76% <0%> (\u00f8) | |\n| packages/raven-node/lib/instrumentation/console.js | 100% <0%> (\u00f8) | |\n| packages/raven-node/lib/instrumentation/http.js | 97.29% <0%> (\u00f8) | |\n| packages/raven-node/lib/transports.js | 96.87% <0%> (\u00f8) | |\n| packages/raven-node/vendor/json-stringify-safe.js | 75.86% <0%> (\u00f8) | |\n| packages/raven-node/vendor/node-lsmod.js | 96.42% <0%> (\u00f8) | |\n| packages/raven-node/index.js | 100% <0%> (\u00f8) | |\n| packages/raven-node/lib/parsers.js | 100% <0%> (\u00f8) | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | 96.96% <0%> (\u00f8) | |\n| packages/raven-node/lib/client.js | 85.18% <0%> (\u00f8) | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b63f04a...12243d0. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@b85398f). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1408   +/-\n=========================================\n  Coverage          ?   88.87%         \n=========================================\n  Files             ?       31         \n  Lines             ?      701         \n  Branches          ?      105         \n=========================================\n  Hits              ?      623         \n  Misses            ?       73         \n  Partials          ?        5\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b85398f...858a906. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@edd08f9). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1410   +/-\n=========================================\n  Coverage          ?   84.89%         \n=========================================\n  Files             ?       33         \n  Lines             ?      788         \n  Branches          ?      125         \n=========================================\n  Hits              ?      669         \n  Misses            ?      112         \n  Partials          ?        7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/object.ts | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edd08f9...f9b4a21. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@edd08f9). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1411   +/-\n=========================================\n  Coverage          ?   84.95%         \n=========================================\n  Files             ?       33         \n  Lines             ?      771         \n  Branches          ?      122         \n=========================================\n  Hits              ?      655         \n  Misses            ?      110         \n  Partials          ?        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/dsn.ts | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edd08f9...3886d4a. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@50d0005). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1413   +/-\n========================================\n  Coverage          ?   85.1%         \n========================================\n  Files             ?      32         \n  Lines             ?     779         \n  Branches          ?     127         \n========================================\n  Hits              ?     663         \n  Misses            ?     110         \n  Partials          ?       6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/base.ts | 96.51% <100%> (\u00f8) | |\n| packages/utils/src/object.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/integrations/http.ts | 54.9% <100%> (\u00f8) | |\n| packages/node/src/integrations/console.ts | 94.44% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50d0005...75820e0. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@3a0ec5d). Click here to learn what that means.\nThe diff coverage is 90.81%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1414   +/-\n=========================================\n  Coverage          ?   87.15%         \n=========================================\n  Files             ?       35         \n  Lines             ?      825         \n  Branches          ?      133         \n=========================================\n  Hits              ?      719         \n  Misses            ?       97         \n  Partials          ?        9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/raven.ts | 100% <\u00f8> (\u00f8) | |\n| packages/node/src/integrations/http.ts | 54.9% <100%> (\u00f8) | |\n| packages/node/src/client.ts | 100% <100%> (\u00f8) | |\n| packages/core/test/mocks/backend.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/transports/index.ts | 100% <100%> (\u00f8) | |\n| packages/core/src/base.ts | 98.82% <100%> (\u00f8) | |\n| packages/node/src/backend.ts | 89.58% <83.33%> (\u00f8) | |\n| packages/node/src/transports/base.ts | 89.74% <89.74%> (\u00f8) | |\n| packages/node/src/transports/http.ts | 90% <90%> (\u00f8) | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a0ec5d...8ba527c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@144a6f7). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1415   +/-\n=========================================\n  Coverage          ?   87.13%         \n=========================================\n  Files             ?       35         \n  Lines             ?      824         \n  Branches          ?      133         \n=========================================\n  Hits              ?      718         \n  Misses            ?       97         \n  Partials          ?        9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/client.ts | 100% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 144a6f7...9207233. Read the comment docs.\n. # Codecov Report\nMerging #1418 into master will decrease coverage by 14.71%.\nThe diff coverage is 47.2%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1418       +/-\n===========================================\n- Coverage   87.18%   72.46%   -14.72%   \n===========================================\n  Files          45       36        -9   \n  Lines        1646     1104      -542   \n  Branches      368      215      -153   \n===========================================\n- Hits         1435      800      -635   \n- Misses        203      289       +86   \n- Partials        8       15        +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/hub/src/hub.ts | 48.33% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/utils/src/object.ts | 48.45% <10.71%> (-51.55%) | :arrow_down: |\n| packages/hub/src/scope.ts | 94.87% <100%> (\u00f8) | :arrow_up: |\n| ...kages/node/src/integrations/onuncaughtexception.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/core/src/base.ts | 97.67% <100%> (+0.02%) | :arrow_up: |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/handlers.ts | 20.87% <20.87%> (\u00f8) | |\n| packages/utils/src/fs.ts | 41.02% <28.57%> (-4.43%) | :arrow_down: |\n| packages/utils/src/string.ts | 20% <4.76%> (-80%) | :arrow_down: |\n| packages/utils/src/is.ts | 53.33% <50%> (-0.52%) | :arrow_down: |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8ae472...27fa1a4. Read the comment docs.\n. # Codecov Report\nMerging #1420 into master will increase coverage by 0.24%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1420      +/-\n==========================================\n+ Coverage   87.13%   87.37%   +0.24%   \n==========================================\n  Files          35       35            \n  Lines         824      824            \n  Branches      133      131       -2   \n==========================================\n+ Hits          718      720       +2   \n  Misses         97       97            \n+ Partials        9        7       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/hub/src/global.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/base.ts | 89.74% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/http.ts | 100% <100%> (+10%) | :arrow_up: |\n| packages/node/src/transports/https.ts | 100% <100%> (+10%) | :arrow_up: |\n| packages/node/src/backend.ts | 89.58% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/client.ts | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 84ba07d...4cb1980. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c4f11bb). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1423   +/-\n=========================================\n  Coverage          ?   87.37%         \n=========================================\n  Files             ?       35         \n  Lines             ?      824         \n  Branches          ?      131         \n=========================================\n  Hits              ?      720         \n  Misses            ?       97         \n  Partials          ?        7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/transports/base.ts | 89.74% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4f11bb...a74acce. Read the comment docs.\n. # Codecov Report\nMerging #1424 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1424   +/-\n=======================================\n  Coverage   87.37%   87.37%         \n=======================================\n  Files          35       35         \n  Lines         824      824         \n  Branches      131      131         \n=======================================\n  Hits          720      720         \n  Misses         97       97         \n  Partials        7        7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/transports/base.ts | 89.74% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aed2461...ba592e7. Read the comment docs.\n. # Codecov Report\nMerging #1426 into master will decrease coverage by 0.3%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1426      +/-\n==========================================\n- Coverage   87.37%   87.07%   -0.31%   \n==========================================\n  Files          35       35            \n  Lines         824      828       +4   \n  Branches      131      132       +1   \n==========================================\n+ Hits          720      721       +1   \n- Misses         97      100       +3   \n  Partials        7        7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/backend.ts | 84.31% <0%> (-5.27%) | :arrow_down: |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/sdk.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/base.ts | 89.74% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a0ebb3c...7ea024c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@df45f5f). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1430   +/-\n=========================================\n  Coverage          ?   87.07%         \n=========================================\n  Files             ?       35         \n  Lines             ?      828         \n  Branches          ?      132         \n=========================================\n  Hits              ?      721         \n  Misses            ?      100         \n  Partials          ?        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df45f5f...cc0f2ae. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@df45f5f). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1431   +/-\n=========================================\n  Coverage          ?   83.13%         \n=========================================\n  Files             ?       35         \n  Lines             ?      830         \n  Branches          ?      131         \n=========================================\n  Hits              ?      690         \n  Misses            ?      132         \n  Partials          ?        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/hub/src/hub.ts | 48.33% <100%> (\u00f8) | |\n| packages/hub/src/scope.ts | 94.87% <100%> (\u00f8) | |\n| packages/core/src/base.ts | 97.64% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df45f5f...92ac9b9. Read the comment docs.\n. # Codecov Report\nMerging #1433 into master will decrease coverage by 5.2%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1433      +/-\n==========================================\n- Coverage   80.47%   75.27%   -5.21%   \n==========================================\n  Files          46       36      -10   \n  Lines        1921     1108     -813   \n  Branches      452      216     -236   \n==========================================\n- Hits         1546      834     -712   \n+ Misses        360      259     -101   \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/client.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/hub/src/scope.ts | 95% <100%> (+0.12%) | :arrow_up: |\n| packages/hub/src/hub.ts | 98.38% <50%> (+50.05%) | :arrow_up: |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e0c91f1...71a6d6c. Read the comment docs.\n. # Codecov Report\nMerging #1435 into master will decrease coverage by 6.8%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1435      +/-\n==========================================\n- Coverage   82.07%   75.27%   -6.81%   \n==========================================\n  Files          46       36      -10   \n  Lines        1925     1108     -817   \n  Branches      453      216     -237   \n==========================================\n- Hits         1580      834     -746   \n+ Misses        330      259      -71   \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd8e663...6f3312c. Read the comment docs.\n. # Codecov Report\nMerging #1436 into master will decrease coverage by 6.67%.\nThe diff coverage is 96%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1436      +/-\n=========================================\n- Coverage   82.07%   75.4%   -6.68%   \n=========================================\n  Files          46      38       -8   \n  Lines        1925    1118     -807   \n  Branches      453     217     -236   \n=========================================\n- Hits         1580     843     -737   \n+ Misses        330     259      -71   \n- Partials       15      16       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/client.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/hub/src/hub.ts | 98.38% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/core/test/mocks/client.ts | 88.88% <\u00f8> (-2.78%) | :arrow_down: |\n| packages/node/src/sdk.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/hub/src/scope.ts | 95.18% <100%> (+0.18%) | :arrow_up: |\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/core/src/base.ts | 97.67% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/base.ts | 89.18% <100%> (-0.56%) | :arrow_down: |\n| packages/node/src/version.ts | 100% <100%> (\u00f8) | |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd8e663...c3df253. Read the comment docs.\n. # Codecov Report\nMerging #1438 into master will decrease coverage by 10.78%.\nThe diff coverage is 51.2%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1438       +/-\n===========================================\n- Coverage   82.37%   71.59%   -10.79%   \n===========================================\n  Files          48       40        -8   \n  Lines        1901     1204      -697   \n  Branches      441      229      -212   \n===========================================\n- Hits         1566      862      -704   \n- Misses        324      331        +7   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/transports/base.ts | 89.18% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/http.ts | 56% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/hub/src/hub.ts | 98.36% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/minimal/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/sdk.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/utils/src/string.ts | 17.64% <11.11%> (-2.36%) | :arrow_down: |\n| packages/utils/src/supports.ts | 42.1% <16.66%> (-4.77%) | :arrow_down: |\n| packages/node/src/handlers.ts | 22.47% <50%> (+0.88%) | :arrow_up: |\n| packages/utils/src/is.ts | 52% <50%> (-1.34%) | :arrow_down: |\n| ... and 21 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7140d3...d9a094d. Read the comment docs.\n. # Codecov Report\nMerging #1440 into master will decrease coverage by 6.8%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1440      +/-\n==========================================\n- Coverage   82.07%   75.27%   -6.81%   \n==========================================\n  Files          46       36      -10   \n  Lines        1925     1108     -817   \n  Branches      453      216     -237   \n==========================================\n- Hits         1580      834     -746   \n+ Misses        330      259      -71   \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/instrumentation/console.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/transports.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 068352a...86dbbd2. Read the comment docs.\n. # Codecov Report\nMerging #1443 into master will decrease coverage by 6.73%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1443      +/-\n==========================================\n- Coverage   82.37%   75.64%   -6.74%   \n==========================================\n  Files          48       38      -10   \n  Lines        1901     1084     -817   \n  Branches      441      204     -237   \n==========================================\n- Hits         1566      820     -746   \n+ Misses        324      253      -71   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/transports.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/index.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b38bed0...58f5fa7. Read the comment docs.\n. # Codecov Report\nMerging #1446 into master will decrease coverage by 6.73%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1446      +/-\n==========================================\n- Coverage   82.37%   75.64%   -6.74%   \n==========================================\n  Files          48       38      -10   \n  Lines        1901     1084     -817   \n  Branches      441      204     -237   \n==========================================\n- Hits         1566      820     -746   \n+ Misses        324      253      -71   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/transports.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/parsers.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a4be9c...f696613. Read the comment docs.\n. # Codecov Report\nMerging #1452 into master will decrease coverage by 6.73%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1452      +/-\n==========================================\n- Coverage   82.37%   75.64%   -6.74%   \n==========================================\n  Files          48       38      -10   \n  Lines        1901     1084     -817   \n  Branches      441      204     -237   \n==========================================\n- Hits         1566      820     -746   \n+ Misses        324      253      -71   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c1576bc...49324fb. Read the comment docs.\n. # Codecov Report\nMerging #1458 into master will decrease coverage by 7.68%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1458      +/-\n==========================================\n- Coverage   79.26%   71.58%   -7.69%   \n==========================================\n  Files          50       40      -10   \n  Lines        2021     1207     -814   \n  Branches      466      229     -237   \n==========================================\n- Hits         1602      864     -738   \n+ Misses        408      332      -76   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/parsers.ts | 84.94% <77.77%> (-0.61%) | :arrow_down: |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/client.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d672d89...22bfb2b. Read the comment docs.\n. # Codecov Report\nMerging #1459 into master will decrease coverage by 6.63%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1459      +/-\n==========================================\n- Coverage   79.24%   72.61%   -6.64%   \n==========================================\n  Files          50       41       -9   \n  Lines        2024     1245     -779   \n  Branches      466      237     -229   \n==========================================\n- Hits         1604      904     -700   \n+ Misses        409      331      -78   \n+ Partials       11       10       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/api.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/transports/base.ts | 92.85% <100%> (+3.66%) | :arrow_up: |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb2cdc7...f5a5880. Read the comment docs.\n. # Codecov Report\nMerging #1461 into master will decrease coverage by 7.13%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1461      +/-\n==========================================\n- Coverage   79.68%   72.55%   -7.14%   \n==========================================\n  Files          51       41      -10   \n  Lines        2063     1246     -817   \n  Branches      474      238     -236   \n==========================================\n- Hits         1644      904     -740   \n+ Misses        409      333      -76   \n+ Partials       10        9       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/object.ts | 47.82% <\u00f8> (+0.51%) | :arrow_up: |\n| packages/utils/src/misc.ts | 8.69% <0%> (-0.26%) | :arrow_down: |\n| packages/hub/src/scope.ts | 95.18% <100%> (+1.13%) | :arrow_up: |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 61bd254...b617683. Read the comment docs.\n. # Codecov Report\nMerging #1462 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1462      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb2cdc7...ba5968b. Read the comment docs.\n. # Codecov Report\nMerging #1471 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1471      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/vendor/node-lsmod.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...baa77d6. Read the comment docs.\n. # Codecov Report\nMerging #1475 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1475      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/client.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...1cffd83. Read the comment docs.\n. # Codecov Report\nMerging #1476 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1476      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...ecaed7b. Read the comment docs.\n. # Codecov Report\nMerging #1478 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1478      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...f940a0f. Read the comment docs.\n. # Codecov Report\nMerging #1479 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1479      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/index.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...2bdf86b. Read the comment docs.\n. # Codecov Report\nMerging #1481 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1481      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/transports.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/index.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...984709c. Read the comment docs.\n. # Codecov Report\nMerging #1484 into master will decrease coverage by 7.66%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1484      +/-\n==========================================\n- Coverage   79.24%   71.58%   -7.67%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1207     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      332      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/index.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| packages/raven-node/lib/transports.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...a2f79be. Read the comment docs.\n. # Codecov Report\nMerging #1492 into master will decrease coverage by 7.72%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1492      +/-\n==========================================\n- Coverage   79.24%   71.52%   -7.73%   \n==========================================\n  Files          50       40      -10   \n  Lines        2024     1208     -816   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        409      333      -76   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/parsers.ts | 84.04% <50%> (-0.91%) | :arrow_down: |\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02f2298...7a22f12. Read the comment docs.\n. # Codecov Report\nMerging #1493 into master will decrease coverage by 7.68%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1493      +/-\n==========================================\n- Coverage    79.2%   71.52%   -7.69%   \n==========================================\n  Files          50       40      -10   \n  Lines        2025     1208     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      864     -740   \n+ Misses        410      333      -77   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bac7be7...d2aec1a. Read the comment docs.\n. # Codecov Report\nMerging #1494 into master will decrease coverage by 7.76%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1494      +/-\n==========================================\n- Coverage    79.2%   71.44%   -7.77%   \n==========================================\n  Files          50       40      -10   \n  Lines        2025     1208     -817   \n  Branches      466      229     -237   \n==========================================\n- Hits         1604      863     -741   \n+ Misses        410      334      -76   \n  Partials       11       11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/raven-node/lib/client.js | | |\n| packages/raven-node/lib/utils.js | | |\n| packages/raven-node/index.js | | |\n| ...ges/raven-node/lib/instrumentation/instrumentor.js | | |\n| packages/raven-node/lib/parsers.js | | |\n| packages/raven-node/lib/instrumentation/http.js | | |\n| packages/raven-node/lib/transports.js | | |\n| packages/raven-node/lib/instrumentation/console.js | | |\n| packages/raven-node/vendor/json-stringify-safe.js | | |\n| packages/raven-node/vendor/node-lsmod.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50a5ec7...c72f6b9. Read the comment docs.\n. # Codecov Report\nMerging #1496 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1496   +/-\n=======================================\n  Coverage   72.79%   72.79%         \n=======================================\n  Files          42       42         \n  Lines        1283     1283         \n  Branches      242      242         \n=======================================\n  Hits          934      934         \n  Misses        341      341         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 551021f...1798bda. Read the comment docs.\n. # Codecov Report\nMerging #1497 into master will decrease coverage by 0.19%.\nThe diff coverage is 86.02%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1497     +/-\n=========================================\n- Coverage   72.61%   72.42%   -0.2%   \n=========================================\n  Files          41       41           \n  Lines        1249     1262     +13   \n  Branches      239      241      +2   \n=========================================\n+ Hits          907      914      +7   \n- Misses        333      339      +6   \n  Partials        9        9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/hub/src/hub.ts | 98.48% <100%> (+0.12%) | :arrow_up: |\n| packages/hub/src/scope.ts | 95.18% <100%> (\u00f8) | :arrow_up: |\n| packages/core/test/mocks/backend.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| ...ages/node/src/integrations/onunhandledrejection.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/handlers.ts | 21.97% <14.28%> (-0.5%) | :arrow_down: |\n| packages/node/src/integrations/sdkinformation.ts | 88.88% <75%> (+1.38%) | :arrow_up: |\n| packages/node/src/backend.ts | 73.91% <80%> (+1.82%) | :arrow_up: |\n| packages/node/src/integrations/clientoptions.ts | 90.9% <85.71%> (+0.9%) | :arrow_up: |\n| packages/minimal/src/index.ts | 95.83% <91.66%> (-4.17%) | :arrow_down: |\n| packages/core/src/base.ts | 91.95% <95.65%> (-3.51%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d54c762...2423b24. Read the comment docs.\n. # Codecov Report\nMerging #1498 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1498      +/-\n==========================================\n+ Coverage   72.55%   72.61%   +0.06%   \n==========================================\n  Files          41       41            \n  Lines        1246     1249       +3   \n  Branches      238      239       +1   \n==========================================\n+ Hits          904      907       +3   \n  Misses        333      333            \n  Partials        9        9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/supports.ts | 46.34% <100%> (+4.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f3bdca...f98481b. Read the comment docs.\n. # Codecov Report\nMerging #1500 into master will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1500      +/-\n==========================================\n- Coverage   72.61%   72.55%   -0.07%   \n==========================================\n  Files          41       41            \n  Lines        1249     1246       -3   \n  Branches      239      238       -1   \n==========================================\n- Hits          907      904       -3   \n  Misses        333      333            \n  Partials        9        9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/supports.ts | 42.1% <0%> (-4.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d54c762...031bf76. Read the comment docs.\n. # Codecov Report\nMerging #1502 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1502   +/-\n======================================\n  Coverage    72.4%   72.4%         \n======================================\n  Files          41      41         \n  Lines        1261    1261         \n  Branches      241     241         \n======================================\n  Hits          913     913         \n  Misses        339     339         \n  Partials        9       9\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b40c39...a6459b2. Read the comment docs.\n. # Codecov Report\nMerging #1504 into master will increase coverage by 1.57%.\nThe diff coverage is 93.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1504      +/-\n==========================================\n+ Coverage    72.4%   73.97%   +1.57%   \n==========================================\n  Files          41       42       +1   \n  Lines        1261     1372     +111   \n  Branches      241      270      +29   \n==========================================\n+ Hits          913     1015     +102   \n- Misses        339      349      +10   \n+ Partials        9        8       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/transports/base.ts | 92.85% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/https.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/transports/http.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/backend.ts | 77.55% <100%> (+3.63%) | :arrow_up: |\n| packages/core/src/base.ts | 93.57% <75%> (+1.61%) | :arrow_up: |\n| packages/core/src/transportbuffer.ts | 94.44% <94.44%> (\u00f8) | |\n| packages/node/src/integrations/console.ts | 92.85% <0%> (-1.59%) | :arrow_down: |\n| packages/hub/src/hub.ts | 98.57% <0%> (+0.08%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caea4f8...8c76f1c. Read the comment docs.\n. # Codecov Report\nMerging #1506 into master will increase coverage by 0.2%.\nThe diff coverage is 80.32%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1506     +/-\n========================================\n+ Coverage   72.79%     73%   +0.2%   \n========================================\n  Files          42      44      +2   \n  Lines        1283    1315     +32   \n  Branches      242     246      +4   \n========================================\n+ Hits          934     960     +26   \n- Misses        341     347      +6   \n  Partials        8       8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/transports/base.ts | 92.85% <0%> (\u00f8) | :arrow_up: |\n| packages/core/test/mocks/client.ts | 88.88% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/console.ts | 94.44% <100%> (\u00f8) | :arrow_up: |\n| packages/core/src/requestbuffer.ts | 94.44% <100%> (\u00f8) | |\n| packages/node/src/integrations/clientoptions.ts | 90.9% <100%> (\u00f8) | :arrow_up: |\n| packages/node/test/helper/settimeouttransport.ts | 100% <100%> (\u00f8) | |\n| packages/core/test/mocks/backend.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/handlers.ts | 22.44% <25%> (+0.47%) | :arrow_up: |\n| packages/node/src/backend.ts | 73.8% <75%> (-3.75%) | :arrow_down: |\n| packages/core/src/basebackend.ts | 85% <85%> (\u00f8) | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3bdc73c...b652bb0. Read the comment docs.\n. # Codecov Report\nMerging #1509 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1509   +/-\n=======================================\n  Coverage   73.08%   73.08%         \n=======================================\n  Files          44       44         \n  Lines        1330     1330         \n  Branches      252      252         \n=======================================\n  Hits          972      972         \n  Misses        350      350         \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/minimal/src/index.ts | 95.83% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d7b629e...1939b83. Read the comment docs.\n. # Codecov Report\nMerging #1510 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1510   +/-\n=======================================\n  Coverage   73.08%   73.08%         \n=======================================\n  Files          44       44         \n  Lines        1330     1330         \n  Branches      252      250    -2   \n=======================================\n  Hits          972      972         \n  Misses        350      350         \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/baseclient.ts | 91.48% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b7e024...f4618c0. Read the comment docs.\n. # Codecov Report\nMerging #1511 into master will increase coverage by 0.57%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1511      +/-\n==========================================\n+ Coverage   73.08%   73.65%   +0.57%   \n==========================================\n  Files          44       45       +1   \n  Lines        1330     1359      +29   \n  Branches      250      256       +6   \n==========================================\n+ Hits          972     1001      +29   \n  Misses        350      350            \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/sdk.ts | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/node/src/integrations/linkederrors.ts | 100% <100%> (\u00f8) | |\n| packages/node/src/integrations/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/parsers.ts | 84.69% <100%> (+0.82%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ebd4fff...b3188f0. Read the comment docs.\n. # Codecov Report\nMerging #1512 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1512   +/-\n=======================================\n  Coverage   73.08%   73.08%         \n=======================================\n  Files          44       44         \n  Lines        1330     1330         \n  Branches      250      250         \n=======================================\n  Hits          972      972         \n  Misses        350      350         \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/parsers.ts | 83.87% <100%> (\u00f8) | :arrow_up: |\n| packages/core/src/basebackend.ts | 85% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ebd4fff...ef2e080. Read the comment docs.\n. # Codecov Report\nMerging #1514 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1514      +/-\n==========================================\n+ Coverage   73.65%   73.69%   +0.03%   \n==========================================\n  Files          45       45            \n  Lines        1359     1361       +2   \n  Branches      256      257       +1   \n==========================================\n+ Hits         1001     1003       +2   \n  Misses        350      350            \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/integrations/linkederrors.ts | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7dc7daa...06111a9. Read the comment docs.\n. # Codecov Report\nMerging #1515 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1515   +/-\n=======================================\n  Coverage   73.69%   73.69%         \n=======================================\n  Files          45       45         \n  Lines        1361     1361         \n  Branches      257      257         \n=======================================\n  Hits         1003     1003         \n  Misses        350      350         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349272c...008fe0e. Read the comment docs.\n. # Codecov Report\nMerging #1517 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1517   +/-\n=======================================\n  Coverage   73.69%   73.69%         \n=======================================\n  Files          45       45         \n  Lines        1361     1361         \n  Branches      257      257         \n=======================================\n  Hits         1003     1003         \n  Misses        350      350         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1ebeb9e...071780a. Read the comment docs.\n. # Codecov Report\nMerging #1519 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1519   +/-\n=======================================\n  Coverage   73.69%   73.69%         \n=======================================\n  Files          45       45         \n  Lines        1361     1361         \n  Branches      257      257         \n=======================================\n  Hits         1003     1003         \n  Misses        350      350         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4934f15...683b714. Read the comment docs.\n. # Codecov Report\nMerging #1520 into master will decrease coverage by 0.14%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1520      +/-\n==========================================\n- Coverage   73.69%   73.55%   -0.15%   \n==========================================\n  Files          45       45            \n  Lines        1361     1365       +4   \n  Branches      257      258       +1   \n==========================================\n+ Hits         1003     1004       +1   \n- Misses        350      353       +3   \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/supports.ts | 44.44% <25%> (-1.9%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea3b09d...1161d11. Read the comment docs.\n. # Codecov Report\nMerging #1521 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1521   +/-\n=======================================\n  Coverage   73.69%   73.69%         \n=======================================\n  Files          45       45         \n  Lines        1361     1361         \n  Branches      257      257         \n=======================================\n  Hits         1003     1003         \n  Misses        350      350         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea3b09d...f90128d. Read the comment docs.\n. # Codecov Report\nMerging #1522 into master will decrease coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1522      +/-\n==========================================\n- Coverage   73.69%   73.64%   -0.06%   \n==========================================\n  Files          45       45            \n  Lines        1361     1362       +1   \n  Branches      257      257            \n==========================================\n  Hits         1003     1003            \n- Misses        350      351       +1   \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/core/src/api.ts | 97.91% <100%> (-2.09%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea3b09d...0072d03. Read the comment docs.\n. # Codecov Report\nMerging #1523 into master will increase coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1523      +/-\n==========================================\n+ Coverage   73.44%   73.69%   +0.25%   \n==========================================\n  Files          45       45            \n  Lines        1367     1361       -6   \n  Branches      258      257       -1   \n==========================================\n- Hits         1004     1003       -1   \n+ Misses        355      350       -5   \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/supports.ts | 46.34% <0%> (+3.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36ec575...e60dd1b. Read the comment docs.\n. # Codecov Report\nMerging #1524 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1524   +/-\n=======================================\n  Coverage   73.44%   73.44%         \n=======================================\n  Files          45       45         \n  Lines        1367     1367         \n  Branches      258      258         \n=======================================\n  Hits         1004     1004         \n  Misses        355      355         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36ec575...8ae896b. Read the comment docs.\n. # Codecov Report\nMerging #1525 into master will increase coverage by <.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1525      +/-\n==========================================\n+ Coverage   73.39%   73.39%   +<.01%   \n==========================================\n  Files          45       45            \n  Lines        1368     1372       +4   \n  Branches      258      259       +1   \n==========================================\n+ Hits         1004     1007       +3   \n- Misses        356      357       +1   \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/backend.ts | 75% <100%> (+1.19%) | :arrow_up: |\n| packages/utils/src/supports.ts | 42.85% <50%> (+0.3%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 991418d...4b54e85. Read the comment docs.\n. # Codecov Report\nMerging #1546 into master will increase coverage by 0.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1546      +/-\n==========================================\n+ Coverage   73.91%   74.07%   +0.16%   \n==========================================\n  Files          46       46            \n  Lines        1430     1439       +9   \n  Branches      265      270       +5   \n==========================================\n+ Hits         1057     1066       +9   \n  Misses        365      365            \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/misc.ts | 19.23% <100%> (+10.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ff4f09...82bfb79. Read the comment docs.\n. # Codecov Report\nMerging #1547 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1547      +/-\n==========================================\n+ Coverage   74.07%   74.11%   +0.03%   \n==========================================\n  Files          46       46            \n  Lines        1439     1441       +2   \n  Branches      270      270            \n==========================================\n+ Hits         1066     1068       +2   \n  Misses        365      365            \n  Partials        8        8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e820a81...21ea506. Read the comment docs.\n. # Codecov Report\nMerging #1548 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1548   +/-\n=======================================\n  Coverage   74.11%   74.11%         \n=======================================\n  Files          46       46         \n  Lines        1441     1441         \n  Branches      270      270         \n=======================================\n  Hits         1068     1068         \n  Misses        365      365         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 524402c...87dcd46. Read the comment docs.\n. # Codecov Report\nMerging #1549 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1549   +/-\n=======================================\n  Coverage   74.11%   74.11%         \n=======================================\n  Files          46       46         \n  Lines        1441     1441         \n  Branches      270      270         \n=======================================\n  Hits         1068     1068         \n  Misses        365      365         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd3352e...05d8a8c. Read the comment docs.\n. # Codecov Report\nMerging #1553 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1553   +/-\n=======================================\n  Coverage   74.11%   74.11%         \n=======================================\n  Files          46       46         \n  Lines        1441     1441         \n  Branches      270      270         \n=======================================\n  Hits         1068     1068         \n  Misses        365      365         \n  Partials        8        8\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c73ffa1...78bed6f. Read the comment docs.\n. # Codecov Report\nMerging #1554 into master will increase coverage by 1.23%.\nThe diff coverage is 86.84%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1554      +/-\n==========================================\n+ Coverage   74.11%   75.34%   +1.23%   \n==========================================\n  Files          46       46            \n  Lines        1441     1590     +149   \n  Branches      270      309      +39   \n==========================================\n+ Hits         1068     1198     +130   \n- Misses        365      385      +20   \n+ Partials        8        7       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/node/src/integrations/index.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| ...ackages/node/src/integrations/pluggable/modules.ts | 100% <100%> (\u00f8) | |\n| packages/core/src/integrations/inboundfilters.ts | 89.18% <100%> (\u00f8) | |\n| packages/node/src/sdk.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/node/src/client.ts | 90% <83.33%> (-10%) | :arrow_down: |\n| packages/core/src/integrations/dedupe.ts | 84.61% <84.61%> (\u00f8) | |\n| packages/core/src/logger.ts | 79.16% <0%> (+8.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 801b6d0...dd3d742. Read the comment docs.\n. # Codecov Report\nMerging #1558 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1558   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e84a1d...9fe0d65. Read the comment docs.\n. # Codecov Report\nMerging #1559 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1559   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aca120c...6d960f0. Read the comment docs.\n. # Codecov Report\nMerging #1563 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1563   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a83da58...e2750cc. Read the comment docs.\n. # Codecov Report\nMerging #1571 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1571   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aca120c...19061ad. Read the comment docs.\n. # Codecov Report\nMerging #1572 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1572   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aca120c...0466bd0. Read the comment docs.\n. # Codecov Report\nMerging #1573 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1573   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50b5a51...ad1f872. Read the comment docs.\n. # Codecov Report\nMerging #1574 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1574   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50b5a51...47a03d7. Read the comment docs.\n. # Codecov Report\nMerging #1575 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1575      +/-\n==========================================\n+ Coverage   75.34%   75.36%   +0.01%   \n==========================================\n  Files          46       46            \n  Lines        1590     1591       +1   \n  Branches      309      309            \n==========================================\n+ Hits         1198     1199       +1   \n  Misses        385      385            \n  Partials        7        7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/utils/src/object.ts | 52.72% <100%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cc7de02...e7e7870. Read the comment docs.\n. # Codecov Report\nMerging #1576 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1576   +/-\n=======================================\n  Coverage   75.34%   75.34%         \n=======================================\n  Files          46       46         \n  Lines        1590     1590         \n  Branches      309      309         \n=======================================\n  Hits         1198     1198         \n  Misses        385      385         \n  Partials        7        7\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 48fce4d...05dd3d2. Read the comment docs.\n. \n",
    "Magellol": "@kamilogorek Thanks for the review. That makes total sense, I thought that was an intented behaviour, that's why I've decided to fix the typings.\nI'll close this then \ud83d\udc4d\n. I didn't make the parameter optional since calling config() without anything felt weird to me. Disabling raven is probably often due to passing a value that is conditionally falsy.. ",
    "oyshan": "Thanks, @kamilogorek. Is there a way of figuring out if the error report was triggered from client code (i.e. captureException or captureMessage) or from Raven in either of these callbacks, though? We'd like to differentiate between handled/known errors caught and reported by \"us\" and unknown/unhandled errors caught by Raven. Is there any way of knowing in either the ravenHandle event or the dataCallback if the error report was triggered by the client or if it was uncaught and, thus, triggered by Raven's \"global\" error handler?. Thanks! Much appreciated, @kamilogorek  :). ",
    "jdrydn": "\nWhat if the context was portable?\n[We] are working on making this happen soon, in the next major release.\n\n@kamilogorek I thought the new Sentry for Node was going to move to some sort of portable context, so we didn't have to use domains if we didn't want to?. ",
    "dauledk": "This is giving me issues on firebase cloud functions?. > Hub/scope modules widely changed how this works in new SDK\nFrom when is this?. ",
    "daton89": "i have a problem with sentry on premise installed with docker and an express application... \nwhen i generate errors in localhost, the errors are correctly reported, \ninstead when i deploy the express application in production with docker on the same machine, \nthe application generates:\n0|pm2   | raven@2.6.3 alert: failed to send exception to sentry: Connection timed out on request to sentry.mydomain.it\n0|pm2   | raven@2.6.3 alert: failed to send exception to sentry: socket hang up\nthese containers are behind traefik proxy that manage the requests, \nif i try to ping sentry.mydomain.it form the nodejs application container it resolve correctly the domain,\ni don't understand why from the node js application it go in timeout, i've tried to improve the timeout window but nothing changed, \nanyone can help me to figure out how can i communicate from the node js application to sentry running on the same machine? \ni guess this is the problem cause from localhost the errors are reported to sentry\n. i followed the common js example on the bottom of the link you just sent me.\nRavenPluginAngular  is require('raven-js/plugins/angular')\ni probably solved the issue configuring and installing raven before angular application start.\nanother error was ngRaven imported without call .moduleName\n. ",
    "LaurentGoderre": "Could we in the meantime create a module called raven-js-proxy and include the code discussedn here?\nhttps://gist.github.com/ndmanvar/7ae7b4db7bf1cda30545c1480fde77fe#gistcomment-2667254. ",
    "mrnagydavid": "@kamilogorek you asked DMV007 to create a repo for you in the referenced issue which he did (https://github.com/DMW007/sentry-typescript-sourcemaps-bug-poc) and to which no reponse came from the sentry side.. ",
    "nghiepit": "Today I have been upgraded to 3.26.2 and same issue.. ",
    "johnrivelt": "Thanks, @kamilogorek.\nSentry documentation for angular need to be modified.. ",
    "lxcid": "Wow, I actually run into this issue, after crazy tracing\u2026\nhttps://github.com/sequelize/sequelize/issues/9652#issuecomment-408058761\nraven-node have been having CPU/Memory spike when capturing exception from time to time in previous release but doesn't seems to be fully resolved.\nI face this issue in one incident when axios throw exception on 5xx error which got captured and it crash my server when it crosses 2GB of memory usage.\nI would love to be able to control the depth though. I'm using 2.6.2. I think this might give a hint?\nhttps://github.com/axios/axios/blob/98080381fa78dcffa91a15e6d25617583d13e533/lib/core/settle.js#L18-L23. ",
    "scarlac": "Our issue was also that axios dumps everything relating to request and response. This turns out to be a massive amount of fields. Without a proper limit, raven spins out of control, causing server slow down which made the issue worse. . ",
    "adriaanmeuris": "can confirm we're seeing this behaviour as described by @scarlac on Axios calls that fail with a 500 error.\nI think this can be improved by using the toJSON implementation as described in  https://github.com/axios/axios/pull/1625.\nChecking for a toJSON property would also improve error logging when logging specific objects like ObjectId's from MongoDB, which currently are displayed like this:\n. @kamilogorek any idea in which version this would become available?. We've upgraded to 4.6.4 recently to fix other issues. Can confirm this happens in the latest version, in a node environment - triggering an out of memory error:\n\n. @kamilogorek sorry for the delay, but due to the many releases and bugs we've taken extra time to test before releasing on production. For now, all is good and we don't see errors as described in this issue.\nwe do see a sporadic cpu/memory spikes but that seems to be related to https://github.com/getsentry/sentry-javascript/issues/1395 - will follow up there.. ",
    "teeberg": "I'm still seeing this in sentry-javascript 4.0.6.\nIt also results in Thunderbird marking associated email alerts as potential scam, since the transaction is a link where title and url don't match, since it says https://assets.example.com... but points to https://sentry.io/.... we wrapped captureException for that reason:\njs\nfunction captureException(...args) {\n    if (typeof Sentry !== 'undefined') {\n        Sentry.captureException(...args);\n    }\n    else {\n        console.error(...args);\n    }\n}. I understand the original fix in #1520 was supposed to fix it showing up twice, which is a bug. But I would argue that it not showing up at all is just as much a bug, so I personally would rather have it show up twice than not at all by default.\nThank you for the workaround! I'll think about whether I want to copy over all the code from the fetch instrumentation. I'd really prefer to use as much of your code as possible, in case you fix bugs there in future releases. Having to check whether it changed and copy it over on every release doesn't sound optimal.\nSome suggestions I could think of that would make my life easier in that regard:\n- Maybe you could expose the whole fill(global, 'fetch') { ... } code after if (!supportsNativeFetch()) { ... } as its own function? then it would be easier to reuse\n- Or maybe expose two slightly different fetch instrumentations, one of which ignores a fetch that was replaced. That way users could choose for themselves whether they'd rather have duplicate breadcrumbs or no breadcrumbs. ",
    "Turbo87": "@kamilogorek can you explain what you mean by \"event hints\" and how that will work with the cause property?. hmm, if I understand correctly this would overwrite the original exception though, right? my hope was that it could display them in parallel like in Java/Python \ud83e\udd14 . This is an example of how it looks like in Java:\nException in thread \"main\" java.lang.IllegalStateException: A book has a null property\n        at com.example.myproject.Author.getBookIds(Author.java:38)\n        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)\nCaused by: java.lang.NullPointerException\n        at com.example.myproject.Book.getId(Book.java:22)\n        at com.example.myproject.Author.getBookIds(Author.java:36)\n        ... 1 more\n\njs\ntry {\n  somethingThatThrows();\n} catch (innerError) {\n  let error = new Error('something failed!');\n  error.cause = innerError;\n  throw error;\n}\nWithout the cause assignment in the snippet above you lose any information on the original cause of the exception, but if you throw the innerError it might be cryptic for the end user and you can't include other information that might help resolve the issue. Ideally it would be possible to show both inner and outer exception (and possible even more nesting levels) like in the Java example above.. > I'd add this as an extra data in the event itself, which'd give you enough information on the UI\nyeah, unfortunately the cause.stack will be displayed without sourcemaps though :-/\n\nThe platform itself doesn't support this use-case\n\ndo you not support this for Java/Python either?. exactly! \ud83d\ude0d \nI'm not sure, but I think the order needs to be flipped though. I'd expect to see the \"Parent process error\" on top of the other one \ud83e\udd14 . Great, thanks a lot!!. @kamilogorek did this land yet?. nevermind, I just found https://github.com/getsentry/sentry-javascript/blob/4.2.3/packages/browser/src/integrations/linkederrors.ts \ud83c\udf89 . it would need two things:\n- an ember-addon keyword in the package.json so that Ember CLI recognizes this as an addon instead of a regular npm dependency\n- a dedicated entrypoint with the necessary Ember CLI hooks (in this case included()) that does the app.import() \nideally we would be able to test this in the usual Ember addon way though, which means having a dummy app, building the app and running the dummy app tests which would assert that @sentry/browser is available to the app.\nlet me know if you would like a PR for this.\n. hmm, I'm a little confused by the failing CI. this does not seem related to the code changes that I did here \ud83e\udd14 \n@kamilogorek is CI generally broken right now?\n. I have verified this now and according to https://docs.sentry.io/clientdev/interfaces/exception/ the order in the current implementation is wrong. I have a PR fixing it ready, but it depends on #1694 being merged first to avoid conflicts.. see https://github.com/getsentry/sentry-javascript/pull/1696 :). @kamilogorek any reason for reverting this in https://github.com/getsentry/sentry-javascript/commit/418ae83772f79c1966d133b06ad1cbd3e738fb53 ?. ",
    "sbezkostnyi": "@kamilogorek are you sure about it? Because from my testing I see that all breadcrumbs added via Raven.captureBreadcrumb included only in the first future event, after that I need somehow add them once again.. @kamilogorek ok, thank you. I'll check why it doesn't work for me that way.. @kamilogorek It works now, sorry for bothering you.. ",
    "Meow-z": "sorry, I found that can record.\nBut, Return is not what I expected.\n\n. @kamilogorek  It's not tracked as lastCapturedException, but lastEventId.\n\nSo I understand this is recorded for the event, rather than the exception.\nBut the return(I think the event id was supposed to be included in the results) is not as expected.\n. @kamilogorek \n```\n\nRaven\n:2:19, _lastData: {\u2026}, \u2026}\nRaven.captureException\n< \u0192 (ex, options) {\n    options = objectMerge({trimHeadFrames: 0}, options ? options : {});\n\nif (isErrorEvent(ex) && ex.error) {\n  // If it is an ErrorEvent with `error` property, extract it to g\u2026\n\n\nRaven.captureException('captureException Test', {level: 'info'});\n< Raven {_hasJSON: true, _hasDocument: true, _hasNavigator: true, _lastCapturedException: Error: 12345\n    at :2:19, _lastData: {\u2026}, \u2026}\nRaven. lastEventId()\n< \"610d3ef8b17b4f42ab51a4f4fe0cf9d3\"\n```\nThis id can be a query to the events.. \n. ok. thanks.. \n",
    "BlitZz96": "Agreed. This side-effect of integrating vue in sentry should really be documented..\nPersonally spent a lot of time and frustration because of this.\n\nI believe that logging errors to console for the end user is not a desirable behavior for majority of developers.\n\nAgreed -for users that is. however, suppressing errors for developers really just makes this whole thing super ironic. (Install sentry to catch issues you cannot see yourself on the clients; Ends up suppressing more issues). I thought I could share my temporary workaround if it can be to help for others:\nAs @kamilogorek said:\n\nYou can also easily turn off this integration locally, so that errors will be logged through original handler instead.\n\nSince we want the console output in development mode, we can simply add a condition based on the applications build-state and only use integration on production:\nJavascript\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  integrations: process.env.NODE_ENV === 'production' ? [new Sentry.Integrations.Vue({ Vue })] : []\n})\nIs this something that could be useful in the docs @HazAT, or is it to spesific? \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude04 \n*I assume most people here are using the vue cli or have a pre-made boilerplate  - These most likely include build scripts with proper NODE_ENV variables. If not, simply add process.env.NODE_ENV = 'production' to your production build script in order to make this work.. Yes indeed @kamilogorek! However, I was thinking more about the Vue docs. \ud83d\ude05\nMaybe it could be useful for inexperienced developers to display a code-snippet along with the new warning you guys just added that shows how one can disable the integration while developing?\nMy apologies for not being more specific in the previous comment.. Nice code-commenting btw @kamilogorek \ud83e\udd85 . ",
    "erfanimani": "I don't agree with the sentiment that JavaScript console errors should be suppressed for end users. \nWhen you're casually browsing the internet and something doesn't work, say you click on something and expect something to happen but it doesn't, or you've placed an order and the success page takes longer than expected, how many of you developers check the JavaScript console? Im surprised if that's not at least most web developers. It's ironic that were the ones wanting to suppress errors for end users. It's almost like killing logging for client side systems, sure probably the client will never look at the logs, but conceptually they should still exist on the client side.\nUnless you are super paranoid about the inner workings of your app for whatever reason, I really don't understand the necessity for changing the default behaviour of JavaScript.. ",
    "KevinStong": "Is there any update on this? We are trying to use the product but are failing our audit because of the lack of license file.. ",
    "manticorp": "Aha! In that case, the docblock at the top of the dist files should be updated with the correct license link.\nE.g:\nhttps://github.com/getsentry/raven-js/blob/master/packages/raven-js/dist/raven.js\nThe license link should point to:\nhttps://github.com/getsentry/raven-js/blob/master/packages/raven-js/LICENSE. ",
    "Tommatheussen": "Awesome, new version works perfectly, thanks :). ",
    "grobmeier": "@dramer it would be fantastic if this was visible on the raven website. I was including ravenjs in a angularjs 1 (yes, i know) project and the website recommended me to use the cdn, which I did. However, some customers reported failures. Apparantely they have adblockers installed, at least it looks like this from the screenshots. \nMy suggestion is to recommend the use of local files instead of the CDN.. @dcramer my customers don't care about any positive things which I might have using your CDN. I need to make sure my software works all the time; so I certainly do hope Sentry will continue to support locally hosted files, otherwise I will need add extra work to check if Raven/Sentry actually has been loaded or not, before using it. If a request is being blocked - no issue. If Sentry fails - big trouble. Probably provide a mock implementation, in case the download of Raven fails so I don't have to write one. Cheers!. Yes and I would have to do it with each and any call to the Raven lib. That's a lot of if/else for a blocked CDN. ",
    "tonyo": "Will move this to a separate script somewhere closer to sentry-browser.. @HazAT is it ok to keep that script in global scripts/ dir? As an alternative we can move it to packages/browser/scripts.. The coverage drop was inevitable with that number of changes... . ",
    "bourds": "Right you are! Production mode eliminates the dupe.\nI also found this interesting (and long) discussion on the topic. \nhttps://github.com/facebook/react/issues/10474\nThanks! I'll close.. ",
    "dcc635": "@kamilogorek Ah, sorry I misread that. Is there currently any way to turn off reporting all uncaught errors? I'm dealing with a legacy app that is reporting a ton of low-urgency errors. I'd rather not report those, and only report exceptions in areas of importance with a try/catch/Raven.captureException(e). I'd prefer not to create a new Ignore rule in Sentry every time a new uncaught exception pops up.. That worked, thanks!. ",
    "Avamander": "HTTP/1.1 403 FORBIDDEN\nServer: nginx\nDate: Tue, 17 Jul 2018 16:29:43 GMT\nContent-Type: application/json\nContent-Length: 0\nConnection: keep-alive\nAccess-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With\nX-Content-Type-Options: nosniff\nContent-Language: en\nAccess-Control-Max-Age: 1000\nVary: Accept-Language, Cookie\nX-XSS-Protection: 1; mode=block\nAccess-Control-Allow-Origin: \nAccess-Control-Allow-Methods: GET, POST, OPTIONS\nX-Frame-Options: deny\nSet-Cookie: session=\"[censored]\"; expires=Tue, 31-Jul-2018 16:29:43 GMT; httponly; Max-Age=1209600; Path=/; secure\nX-Served-By: web-c401c6a4\nStrict-Transport-Security: max-age=31536000; includeSubDomains; preload. @dcramer It's a wildcard in there. Error reporting with the same DSN works too.. @dcramer That's copy-paste.. @dcramer That request is made by raven showReportDialog@raven.js:974. ",
    "billyjanitsch": "This broke support for older browsers. (#1477). ",
    "NoraGithub": "I mean\ntry {\n  // some code\n} catch (error) {\n  // an error handle function\n throw new Error()\n}\nIn my option, the new Error object should be captured, but actually not.\nDo I still need to provide a repro case ?\n. I would try to provide a repro  case later.\nIt's a vue instance. Moreover, I throw new errors in the promise reject block actually. Hope that doesn't matter.. ",
    "mmakarin": "raven-for-redux was adding full contents of redux store which caused 413 entity too large. Why it is marked as stalled in chrome is not clear. FF reports proper error code.. ",
    "andreyselitsky": "thanks @mmakarin  - have the same - it's useful. . ",
    "vietbui": "@kamilogorek Thank you for the pointer. I'll give it a try and play back the learnings.. @kamilogorek You suggestion works. I'm looking forward to a more official way.. @HazAT Nice one. Thanks for all the hard work.. In 4.0.3 I call it like this in my lambda function:\ntry {\n  ...\n} catch (err) {\n  await getCurrentHub().getClient().captureException(err, getCurrentHub().getScope())\n  throw err\n}\ngetDefaultHub() is no longer available.. @kamilogorek Thanks for the clarification. There is a problem with getCurrentHub approach as somehow the scope I set up did not end up in Sentry.\nIn the end I took a different approach as suggested by @HazAT to capture exception in my lambda functions:\ntry {\n  ...\n} catch (err) {\n  Sentry.captureException(err)\n  await new Promise(resolve => Sentry.getCurrentHub().getClient().close(2000).then(resolve))\n  throw err\n}\nAnd it works perfectly.. @tanduong Sentry is on the public internet, so yes you need to have NAT gateway if your lambda is running within your VPC. Otherwise you would have to explore hosted Sentry option.. @alexbowers It might be up to you how you want to implement this. E.g. I'm using @sentry/browser as following:\n```\nimport * as Sentry from '@sentry/browser'\nimport store from '@/store'\nSentry.init({\n  dsn: process.env.SENTRY_DSN\n})\nSentry.configureScope(scope => {\n   scope.setExtra(store.state)\n})\n```\nYou could also do setTag or setUser for better indexing in Sentry.. @alexbowers Yes that's true, it runs only when capturing error. Hope that helps.. ",
    "albinekb": "Is this the recommended way to wait/force sentry to send events?. @Andriy-Kulak Thats also stated in the docs:\nAfter shutdown the client cannot be used any more so make sure to only do that right before you shut down the application.\nSo I don't know how we can handle this in lambda where we don't know when the application will be killed. Best would be to drain sentry per request like we could with the old API?. See #1449, related.\nAnd the documentation at: https://docs.sentry.io/learn/draining/?platform=browser states that: \n\nAfter shutdown the client cannot be used any more so make sure to only do that right before you shut down the application.\n\nSo calling:\nSentry.getCurrentHub().getClient().close(2000)\nPrevents any other errors to be reported.\nI would also know how to handle this case \ud83d\udc4d . ",
    "Andriy-Kulak": "\n@albinekb yes \u2013 https://docs.sentry.io/learn/draining/?platform=browser\n\nThis solution does not work for me for some reason. It only works the first time in production when there is a cold start time and does not work after that. here is example code\n```js\n'use strict'\nconst Sentry =  require('@sentry/node')\nSentry.init({\n  dsn: 'xxx',\n  environment: process.env.STAGE\n});\nmodule.exports.createPlaylist = async (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false\n  if(!event.body) {\n    Sentry.captureException(error)\n    await new Promise(resolve => Sentry.getCurrentHub().getClient().close(2000).then(resolve))\n    return {\n      statusCode: 500,\n      headers: { 'Content-Type': 'text/plain' },\n      body: 'Missing body parameters'\n    }\n  }\n  return {\n    statusCode: 200,\n  }\n};\n```\n. @albinekb it does not work at all if I remove the following line\njs\nawait new Promise(resolve => Sentry.getCurrentHub().getClient().close(2000).then(resolve))\n@LinusU what is the solution and sentry or raven solution are you using?\nFor me basically the following works with sentry/node @4.3.0, but I have to make lambda manually wait some period of time (in this case I put 2 seconds) for sentry to do what it needs to do. Which I am not sure why it needs to be there because we are awaiting for sentry to finish the captureException request. If I don't have the waiting period afterwards, then sentry does not seem to send the error.\n```js\n'use strict'\nconst Sentry =  require('@sentry/node')\nSentry.init({\n  dsn: 'xxx',\n  environment: process.env.STAGE\n});\nmodule.exports.createPlaylist = async (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false\n  if(!event.body) {\n    const error = new Error('Missing body parameters in createPlaylist')\n    await Sentry.captureException(error)\n    await new Promise(resolve => {setTimeout(resolve, 2000)})\n    return {\n      statusCode: 500,\n      headers: { 'Content-Type': 'text/plain' },\n      body: 'Missing body parameters'\n    }\n  }\n  return {\n    statusCode: 200,\n  }\n};\n```. ",
    "dwelch2344": "We're also getting burned on this on Lambda. We started with the new libs and are totally boxed out, considering to go back to Raven. We're writing tests right now to attempt to close the hub and then reinitialize, which would be a workable workaround if it holds water. But still hacky / likely to cause problems under load. \nPersonally I'd prefer some sort of flush() that returns a promise \u2013 hard to find a downside. Think it'd ever happen? . ",
    "jviolas": "@kamilogorek \nDoes this mean something like this should work in a async/await handler (where you don't use the callback)?\n```javascript\nimport * as Sentry from '@sentry/node';\nSentry.init({ dsn: 'YOUR_DSN' });\nexports.handler = async (event, context) => {\n    try {\n      // do something\n  return 'Hello from Lambda';\ncatch (err) {\n  await Sentry.getCurrentHub().getClient().captureException(err);\n  return 'Hello from Lambda with error';\n}\n\n};\n```. Clearly what we're missing here is some documentation and good practice in this kind of advanced use cases. It'll be really good when it'll be documented or even a blog post can be a good start.\nOtherwise, the new SDK is really simple to use and the unification is really nice.. ",
    "rreynier": "\n@kamilogorek\nDoes this mean something like this should work in a async/await handler (where you don't use the callback)?\n```js\nimport * as Sentry from '@sentry/node';\nSentry.init({ dsn: 'YOUR_DSN' });\nexports.handler = async (event, context) => {\n    try {\n      // do something\n  return 'Hello from Lambda';\ncatch (err) {\n  await Sentry.getCurrentHub().getClient().captureException(err);\n  return 'Hello from Lambda with error';\n}\n\n};\n```\n\nDoing something as suggested above does work, except I am unable to add extra context. For example, if I do: \njavascript\nSentry.configureScope(scope => {\n   scope.setExtra('someExtraInformation', information);\n});\nawait Sentry.getCurrentHub().getClient().captureException(err);\nI will not actually see 'someExtraInformation' in Sentry.\nSomeone did suggest an alternative method at the top of this thread, and that works, but seems hacky (forcing a timeout). \njavascript    \nSentry.configureScope(scope => {\n  scope.setExtra('someExtraInformation', information);\n});\nSentry.captureException(error);\nawait new Promise(resolve => Sentry.getCurrentHub().getClient().close(2000).then(resolve));. ",
    "guillaumekh": "\n@kamilogorek @jviolas\n```js\nimport * as Sentry from '@sentry/node';\nSentry.init({ dsn: 'YOUR_DSN' });\nexports.handler = async (event, context) => {\n   try {\n     // do something\n return 'Hello from Lambda';\n\ncatch (err) {\n     await Sentry.getCurrentHub().getClient().captureException(err);\n     return 'Hello from Lambda with error';\n   }\n};\n```\n\nCan this be also applied to uncaught exceptions ? It seems modifying the Sentry.Integrations.OnUncaughtException integration is the official way to do so but the documentation is pretty poor right now.. ",
    "rdsedmundo": "+1 for this. At least having something officially documented would be good. Serverless is growing fast as of 2019, I really want to see official support from Sentry on it. One of the ideas I read here and really have liked was to having something like Sentry.flush() to send all the events that are queued.. @HazAT The problem with that comes when you think about AWS Lambda container reuse. Which in TL;DR terms means that a process that just served a request can serve a new brand one if it's made on a short window of time. If I close the connection with this snippet you gave, and the container is reused, I'd need to manage to create a new hub for the new request. I can easily see this getting tricky. That's why a simple await Sentry.flush() would be a better solution:\n```js\nimport Sentry from './sentry'; // this calls Sentry.init under the hood\nexport const handler = async (event, context) => {\n  try {\n    ...\n  } catch (error) {\n    Sentry.captureException(error);\n    await Sentry.flush(); // could even be called on the finally block\nreturn formatError(error);\n\n}\n}\n```. Cool. But the documentation is wrong then:\nAfter shutdown the client cannot be used any more so make sure to only do that right before you shut down the application.. ",
    "ondrowan": "Since I got a bit lost in all of these comments, is this how Express error handler (mimicing the one from this repo) should look like?\n```javascript\nfunction getStatusCodeFromResponse(error) {\n    const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n    return statusCode ? parseInt(statusCode, 10) : 500;\n}\napp.use(async (err, req, res, next) => {\n    const status = getStatusCodeFromResponse(err);\nif (status >= 500) {\n    Sentry.captureException(err)\n\n    await Sentry.getCurrentHub().getClient().close(2000)\n}\n\nnext(err)\n\n})\n```\nIt looks like it's working and it doesn't lose extra data as in @rreynier's code.. @LinusU I tried that and for some reason, it doesn't send extra data along with the stack trace. It basically sends just stack trace. No info about user, OS or anything.. @pimterry Isn't this basically the same solution as @LinusU suggested? I've tried it and it doesn't send extra data as well.. @kamilogorek I had similar issues, so I've prepared repo with code / steps to reproduce this: https://github.com/ondrowan/sentry-serverless-repro. ",
    "pimterry": "While we wait for flush, as a more reliable workaround than both of the above options you can report and wait for the result, and include the scope, using the below snippet:\njs\nconst scope = Sentry.getCurrentHub().getScope();\nawait Sentry.getCurrentHub().getClient().captureException(error, scope);\nI'm using this, and it seems to work reliably for me, with reported errors including everything I'd expect.\nI'm actually using all this with Netlify Functions, but the theory is the same with Lambda etc. I've written up a post with the full details of how to get this working, if anybody is interested: https://httptoolkit.tech/blog/netlify-function-error-reporting-with-sentry/. @ondrowan it's the same, but manually grabbing and including the current scope. That should be enough to get you working exceptions though I think. With the previous version, I was getting unlabelled events, and now with this change my exceptions come through with all the extra normal details.. ",
    "zeusdeux": "I use this helper in all my lambdas currently.. This approach has worked out for me thus far @ondrowan. @kamilogorek Hey! A quick fyi, I am using Sentry.flush in my app in place of the old workaround and none of the errors are being reported. I am currently reverting back to the old workaround from the updated flush method.. @kamilogorek I wish I had debug info but there's nothing in the logs. I always did await on the overriden captureException. By the regular way, do you mean without overriding captureException?. @kamilogorek I'll give it a go and report back. Also, thanks for the tip on beforeSend ^_^. ",
    "tanduong": "javascript\nawait Sentry.flush(2000);\nis also ~not~ working for me.. @kamilogorek actually, I just found out that \njavascript\nawait Sentry.getCurrentHub().getClient().close(2000) \ndoesn't work for me either because my lambda function is attached to VPC.\nI confirm that \njavascript\nawait Sentry.flush(2000);\nis actually working.\nBTW, so how would you deal with lambda in VPC? Attach to a NAT gateway? I just want Sentry but not the public internet.. ",
    "renchap": "Related to this (and probably very relevant to Sentry) is https://developers.google.com/web/updates/2018/09/reportingapi\nTL;DR: a Report-To header, similar to the CSP Report attribute, that tells the browser to send all kind of errors to it: CSP, JS errors, deprecation, crash reports, ...\nSupport is currently behind a flag in Chrome. It is standardized by W3C and I think it will come in every browsers at some point.. Also Chrome 69 is released, so ReportingObserver usage should grow quite quick :). Awesome, thanks! \ud83d\udc4d . ",
    "aariacarterweir": "Seemed similar to #729 , but that was fixed with #872 ?. @kamilogorek  thanks for looking into this, here's a link to the issue: https://sentry.io/mxstore/mxstorecomau/issues/619301480/?query=is:unresolved - is that what you need?. Hi @kamilogorek, sorry know you're probably really busy but wondering if you could gleam anything from the issue link I sent? :). @kamilogorek thaaat makes a lot of sense thanks man, this would explain a lot of similar issues I've been looking at. Muchos appreciateded :). ",
    "mateusmoura": "I'm using SDK 3.23.3 and have a same error.. ",
    "djmaze": "@HazAT  And now the previous versions are gone and can't be installed anymore. This breaks installations. Can we somehow have them back?. ",
    "palto": "Seems like it's still broken, can't get my build using 2.3.0 version to work. All tags seem to have the same source code and it is for version \"3.26.4\". Okay it seems like bower.json only has one commit in it and the path in the \"main\" field is not correct. The file structure seems to have changed. It used to be dist/raven.js but that file is found in dist/dist/raven.sj. ",
    "bichotll": "Same happened to me with 3.3.0. ",
    "alexbowers": "Ah nice. Does this function run only when an error is reported? If so, that's fantastic.\nThanks. @HazAT Is it possible for us to chunk the data and send multiple requests to build up a total object on your end, or is 200kb the absolute limit?. Okay, thanks. If you get the chance could you also take a look at #1467 I've been trying to implement it but have ran into issues. The way I ended up doing this in Raven was as follows:\n```\nRaven.setDataCallback(function(context) {\n    let context_length = JSON.stringify(context).length;\n    let store_length = JSON.stringify(_v.$store.state).length;\n/**\n * Don't submit data > 200kb to Sentry since the\n * entire error will be rejected.\n */\nif (context_length + store_length < 200000) {\n    context.extra.vuex = _v.$store.state;\n}\n\n});\n```\nwith let _v = new Vue(...);\n. I tried making a change to the raven-js but can't seem to get it working, can anyone guide me in the right direction?\nThe test\n```\nit('should record record an aria-label if one is present', function(done) {\n      var iframe = this.iframe;\n  iframeExecute(\n    iframe,\n    done,\n    function() {\n      setTimeout(done);\n\n      // some browsers trigger onpopstate for load / reset breadcrumb state\n      Raven._breadcrumbs = [];\n\n      // add an event listener to the input. we want to make sure that\n      // our breadcrumbs still work even if the page has an event listener\n      // on an element that cancels event bubbling\n      var input = document.getElementsByTagName('input')[0];\n\n      var clickHandler = function(evt) {\n        evt.stopPropagation(); // don't bubble\n      };\n      input.addEventListener('click', clickHandler);\n\n      // click <input/>\n      var click = new MouseEvent('click');\n      input.dispatchEvent(click);\n    },\n    function() {\n      var Raven = iframe.contentWindow.Raven,\n        breadcrumbs = Raven._breadcrumbs;\n\n      assert.equal(breadcrumbs.length, 1);\n\n      assert.equal(breadcrumbs[0].category, 'ui.click');\n\n      assert.equal(\n        breadcrumbs[0].message,\n        'body > form#foo-form > input[name=\"foo\"][aria-label=\"This is the aria-label\"]'\n      );\n    }\n  );\n});\n\n```\nI updated frame.html to have\n<input name=\"foo\" placeholder=\"lol\" aria-label=\"This is the aria-label\" />\nAs the input element\nand I updated utils/misc.ts to have \nconst attrWhitelist = ['type', 'name', 'title', 'alt', 'aria-label'];\nin the htmlElementAsString function.\nBut it isn't working, any ideas where I've gone wrong on this?. On a second note, how do you debug and test these tests, because console logging doesn't seem to work for me.. I am still having the same issues where changing htmlElementAsString which is still being used by \nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/helpers.ts#L124 \nI can't get it to recognise aria-label being in the whitelist, however i am struggling to test this too because I can't find out how to debug the tests.. @HazAT I've been trying to get this working over the weekend, but have not had any luck.\nCan you guide me at all in how to go about debugging the tests, since I can't see what any elements have with console logs etc because I can't see the actual console.log lines at all when running the tests.. ",
    "aeroxy": "Yes I realized using Raven.config({user: { id }}).install() can distinct one user from another, id is a reserved key for Raven.. ",
    "kevinehosford": "Hi - I'm not sure I understand. This PR changes the behavior so fingerprints are not skipped. Before this change fingerprints were ignored. After the change they are examined.. @kamilogorek, thanks for the reply. With these changes, the second event won't be skipped. Events with different errors and the same fingerprint will be reported (_isRepeatData() will return false).\nI added another test to show this: https://github.com/getsentry/sentry-javascript/pull/1523/files#diff-94962a1036975ed41981da2a73d888a4R3875. @kamilogorek, np. I added it there. Thanks.. ",
    "ndbroadbent": "Hi @beaugunderson, did you ever find a configuration option to disable the trimming? I'm trying to store my Redux state in my error reports, because it's really useful to copy/paste the state into my local development server and replay the events the caused the crash. But my state is too large, so the additional data is being aggressively trimmed by Sentry. I was thinking about moving to an on-premise installation, but it sounds like that wouldn't solve the issue.\nMaybe a better approach would be to just submit the state to my own server, store the compressed JSON in an S3 bucket, and only send the URL to Sentry. (The compression will actually make a huge difference, because I have a lot of repeated data in my state, so it can compress from 220KB down to 5KB.) And then I can just copy that URL, and paste it into the developer console to load the state.\nI could even set an expiration rule on the S3 bucket, so that old files are deleted after 3 months. I think I'm going to create an open source library that can manage all of this, specifically for Ruby on Rails. Will call it something like raven-redux-rails. (Started a repo here, in case you're interested: https://github.com/FormAPI/raven-redux-rails)\nHaha sorry for the stream of consciousness, I just came up with that idea now. But I'd still be interested to hear if you managed to solve the trimming issue. And also if you might be interested in working on a Python/Django/Flask/etc. library that you can also use in your backend code. My idea is just to have a simple API endpoint that receives a JSON payload, compresses it with gzip/zlib, uploads it to S3, and returns a URL. Then another API endpoint that you can call to get a signed S3 URL and download the data (and this endpoint should only be accessible to admin users.). ",
    "cameronmcefee": "cc @kamilogorek since you're in most of the commits lately . ",
    "jhurwitz": "Is connect-src: https://sentry.io sufficient?\nI'm seeing errors in our CSP log (currently report-only) from https://cdn.ravenjs.com/3.21.0/raven.min.js line 2 column 11,450 saying that connect-src to data would be blocked.\n(I can upgrade to the latest Raven to see if this resolves the issue.). ",
    "MonsieurV": "I'm encountering this bug again in IE11 using https://browser.sentry-cdn.com/4.0.6/bundle.min.js\nObject doesn't support property or method 'assign'\n\n@HazAT  @kamilogorek is there no support for IE11 on the unified Sentry js tracker?. ",
    "mikeyc7m": "me too, using  .../4.0.5/bundle.min.js. ",
    "jacobrask": "Can confirm it is no longer the case, nice! Looking forward to the async loader, was about to implement something myself but I guess I'll wait a bit then.\nAccording to https://bundlephobia.com/result?p=@sentry/browser@4.0.6 4.0.6 adds 90.8 kB to my bundle, according to my own source maps it's a bit more. Especially on mobile devices ungziped size is just as relevant due to parsing overhead.. You might want to add some CI tool to track the bundle size of the package for each merge request. Since this issue it has actually grown to 100 kB, see https://bundlephobia.com/result?p=@sentry/browser@4.3.0\nTry for instance https://github.com/siddharthkp/bundlesize\nThe default performance budget for an entry point in Webpack is 250 kb to make sure you get decent performance on any device and network. 100 kb of Sentry takes up quite a lot of that budget. . Please keep us updated if fixing this regression is on the roadmap at all, or if the library will just keep growing without a size budget.\nWe are paying customers and heavily invested in Sentry on both backend, native and web, but an upgrade to over 3x the size of the library (raven-js@3.23.1 is 31 kB) is not something we can justify. . Well done on the recent size reduction, greatly appreciated. \ud83d\udc4d \nA quick glance at the linked file shows code to handle errors for Opera 10, is that really still required? TraceKit also does not account for the (currently) 2x size increase from Raven, which was already large.\nSome suggestions:\n * Remove md5\n * Reduce usage of async/await, it compiles poorly to ES5. Compare https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/baseclient.ts#L307-L378 to the output code (search \"processEvent\" in the production bundle). That entire file becomes huge in the production bundle.\n. ",
    "chris-morgan": "That codecov report seems to me fairly clearly spurious.. ",
    "nh2": "Also to document: If you just include https://cdn.ravenjs.com/3.24.1/console/raven.min.js, then the console plugin seems to be active automatically.\nHow do you configure levels in that case?. And another apparently undocumented thing: How to get the console plugin with npm?. ",
    "ThorvaldAagaard": "Changing \nexport = Raven\nto \nexport default Raven\nin raven.d.ts\nHave solved the problem for me locally\n. ",
    "andidev": "@kamilogorek\nI have managed to report errors manually with \nRaven.captureException(error, (sendErr, eventId) => {\n  callback(error);\n});\nas mentioned in the post you provided.\nBut I guess the middleware do not report the error this way with a callback. Is there anyway to get the middleware to do that so it will work? . @kamilogorek \nDo I not miss anything by not calling self.captureException? . ",
    "FredrikSeidl": "From version 4 of sentry-node the captureException function no longer accepts a callback so the solution described above is no longer working. Do you have any plans to re-add this?. ",
    "mtford90": "\n@FredrikSeidl no, but we have a better solution for it now :)\nhttps://docs.sentry.io/learn/draining/?platform=browser\n\n@kamilogorek i'm trying to use sentry@4 with aws serverless - when exactly would I use this better solution? As far as I know it's not possible to know when the lambda will be shutdown - plus it seems silly to wait for an arbitrary amount of time for shutdown to allow sentry to do its thing - especially on expensive high memory/cpu lambda functions.. ",
    "untitaker": "Hi @seanw, so I assume your usecase is to embed sentry inside a Firefox addon? I am not familiar with WebExtensions, but it seems like you're able to set your own CSP there. See this doc for the values to set.\nI don't think there's a way to support your usecase if you're not able to change your CSP. @seanw sorry, I don't think we support that usecase. The JS sdk loads a script from the server that is generated from some input the SDK provides, and changing that would probably mean porting over a chunk of logic from Python into JS.\nNote that the page you're linking to is called best-practices, so it's still possible to load stuff from sentry.io.. @jekusz Did you use to have multiple issues for what you consider the same error? Then setting a fingerprint that does not include {{ default }} is the way to go.\nDo you have a single issue that contains multiple unrelated events because our grouping heuristic is not considering a particular aspect (such as some data in extra) in the event data? Then you can set a fingerprint with {{ default }} + a stringified version of that aspect to split up the issue by that.. @jekusz the documentation is supposed to be correct. Could you post links to the relevant (sentry-)issues here?. Could you tell me which events (by ID) you would not want to have in this group, and which events are correctly in this group? I am very confused about what you want to achieve.. Then what did you want to achieve? Setting an explicit fingerprint is only supposed to be necessary when things don't group the same way you want them to, so at some point you must have had an issue with how Sentry groups errors for you. I see that you have manually merged a lot of issues into one via the UI \"merge\" button. This is not an ideal solution as this is unlikely to affect future events.\nI noticed that one of your most recent events has a fingerprint: [\"sql-deadlock\", \"default\"]. In this case all events with this exact value will be merged into one group, as default is not the same as the special value {{ default }}.. ",
    "seanw": "@untitaker Specifically for Firefox, you are forbidden from using remote scripts which makes a lot of sense from a security perspective: \nhttps://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Security_best_practices\n\"Don\u2019t inject or incorporate remote scripts - \nIf you identify a service that you wish to use in your extension, don\u2019t inject the service\u2019s script from a remote source. Such an approach is risky, as the code could be changed without your knowing\u2014and, importantly, without the knowledge and consent of the extensions user\u2014compromising the security of your extension. You should therefore add a copy of the script into your extension\u2019s code.\"\nIs there an API feature I can use to submit the user email + description along with a crash report to work around this? . ",
    "alekbarszczewski": "@kamilogorek In which SDK exactly this option is available? Just upgraded raven-js to 3.27.0 and this option does not work (beforeBreadcrumb never gets called).. ",
    "filipows": "Hi @kamilogorek\nIs there any limit for the size of a breadcrumb?\nI tried as test to include the whole response (that I'm getting from XHR object after GraphQL request) in a breadcrumb, using mentioned beforeBreadcrumb hook and I noticed that some of the errors are not sent to sentry. So far, I noticed that if the responses are reasonable small, the consecutive errors are sent successfully to Sentry. However, if the response is bigger (and so the breadcrumb size) the request hangs and is in pending status.\n\nDo you have any idea, what could be the cause of that?. Thank you @kamilogorek ! You've probably just saved me a lot of time :smile: \nIt might be worth adding it as a note in the docs under current @sentry/browser' client as well (as the mentioned note looks like is under \"Legacy Clients\" section).\nPs. I've just noticed interesting thing, that the same payload in Chrome is being blocked (request stays \"pending\"), whilst the same one from Firefox is successful with HTTP 200 response. In both situations the payload size was 143kB.. ",
    "lordnox": "Thanks for merging. I'd recommend you to add a test case for this. I skipped this as I was not sure how exactly. ",
    "tvanier": "thanks @HazAT , do we know if this will be included in the next 4.0.0 (beta) release? Any tentative date?. ",
    "beard7": "There's a pretty simple and obvious workaround. Just generate a deliberate error:\nfunction submitUserFeedback(){\n        var error = new Error('User Feedback Submitted');\n        Raven.captureException(error);\n        Raven.showReportDialog();\n    }\nYou can customise the feedback dialog to make it more applicable to feedback. It's ideal for what I wanted.. ",
    "fabien0102": "From travis:\nsh\nRunning \"config:ci\" task\nNo SAUCE_USERNAME env variable defined.\nNo SAUCE_ACCESS_KEY env variable defined.\nI don't think that it's link to my PR \ud83e\udd14 . @kamilogorek Thanks for your review \ud83d\udcaf \nWhen can we have this available on npm? (I have a as any that I want to remove \ud83d\ude04 ). ",
    "srowhani": "Thanks! I'll look into implementing a handler for that.\nBut from the snippet you sent, there's no logging being done. My main issue is that users are seeing the sentry rate limiting error being logged to console. I had thought that it was because all caught errors were being logged. Not sure though, I may be in the wrong part of the codebase.. ",
    "eele94": "Hi, thanks for creating a vue integration!\nCan anyone give me an example how to use this ? Compared to the oldway with ravenjs.\noldway:\nRaven\n  .config(config.SENTRY_DSN, {\n    release: config.SENTRY_RELEASE,\n    environment: config.SENTRY_ENVIRONMENT\n  })\n  .addPlugin(RavenVue, Vue)\n  .install();. ",
    "atk": "This still breaks integration when an external module iterates over the properties of the console methods or other wrapped functions. I would suggest adding the additional properties as not enumerable, i.e.\nObject.defineProperties(wrapped, {\n  __sentry__: { value: true, enumerable: false },\n  __sentry_original__: { value: original, enumerable: false },\n  __sentry_wrapped__: { value: wrapped, enumerable: false }\n});\ninstead of\nwrapped.__sentry__ = true;\nwrapped.__sentry_original__ = original;\nwrapped.__sentry_wrapped__ = wrapped;. You have 2 more places in which you should probably change that.. https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/helpers.ts#L117\nThe other one seems to be taken over by fill in your current code base, because I didn't find it anymore (Ionly had your transpiled code to work with).\nSorry it took a bit longer, had to get my kids to sleep.. The failure in your build job is the tslint part:\n@sentry/browser: $ tslint --format json -p . | tee lint-results.json\n@sentry/browser: [{\"endPosition\":{\"character\":14,\"line\":120,\"position\":3494},\"failure\":\"The key 'enumerable' is not sorted alphabetically\",\"name\":\"/home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts\",\"ruleName\":\"object-literal-sort-keys\",\"ruleSeverity\":\"ERROR\",\"startPosition\":{\"character\":4,\"line\":120,\"position\":3484}},{\"endPosition\":{\"character\":16,\"line\":128,\"position\":3740},\"failure\":\"The key 'enumerable' is not sorted alphabetically\",\"name\":\"/home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts\",\"ruleName\":\"object-literal-sort-keys\",\"ruleSeverity\":\"ERROR\",\"startPosition\":{\"character\":6,\"line\":128,\"position\":3730}},{\"endPosition\":{\"character\":16,\"line\":132,\"position\":3815},\"failure\":\"The key 'enumerable' is not sorted alphabetically\",\"name\":\"/home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts\",\"ruleName\":\"object-literal-sort-keys\",\"ruleSeverity\":\"ERROR\",\"startPosition\":{\"character\":6,\"line\":132,\"position\":3805}}]. ",
    "Gotterbild": "@kamilogorek Thanks for your reply!\nShould I close the issue or you want to keep it as a reminder?. ",
    "Aquilosion": "@kamilogorek Thanks, though I'm not sure that's it\u2026 I already had @types/node as a dev dependency (as I was using it for things like process.env). I added the types key as parameter directly to compilerOptions, but I'm still getting the same errors.\nMy tsconfig now looks like:\n{\n    \"compilerOptions\": {\n        \"types\": [\n            \"node\"\n        ],\n        \"module\": \"commonjs\",\n        \"target\": \"es2017\",\n        \"lib\": [\n            \"es2017\"\n        ],\n        \"moduleResolution\": \"node\",\n        \"rootDir\": \"./\",\n        \"sourceMap\": true,\n        \"allowJs\": true,\n        \"noImplicitAny\": true,\n        \"noUnusedLocals\": true,\n        \"noImplicitThis\": true,\n        \"strictNullChecks\": true,\n        \"noImplicitReturns\": true,\n        \"preserveConstEnums\": true,\n        \"suppressImplicitAnyIndexErrors\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"strict\": true\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"build\",\n        \"webpack\"\n    ]\n}\nAnd for completeness, the dependencies in my package.json:\n\"dependencies\": {\n        \"@sentry/node\": \"^4.0.0-rc.2\"\n    },\n    \"devDependencies\": {\n        \"@types/node\": \"^10.9.4\"\n    }. Thanks! I do have a basic test project if you're unable to reproduce: https://github.com/Aquilosion/TestSentryTypeScript. Perfect, thanks @kamilogorek!. ",
    "Vivalldi": "Thanks for the quick turnaround \ud83d\udc4d \ud83c\udf7b . ",
    "mehulmpt": "@kamilogorek I tried to use it but was unable to found any documentation or support apart from the README file. Is that the only doc available for it right now?. Hmm it seems like it doesn't show right stacktrace when I manually throw errrors and all but works anyway. The new version works too. Thanks for the docs.. ",
    "bashCandicoot": "Hello, \nI did try using strong-error-handler but sentry still doesn't create any issues\nBut as you say it is for Loopback 2.x and as mentioned I am using the latest Loopback 3.22.3. For now I'm using a work around. \nI've made a mixin that uses the Loopback hook afterRemoteError to catch any errors and then passes the context to raven.captureException to create a sentry issue.\nI will find some time to make a reproducible test case but I'm not sure when that will be yet. Sorry for not being able to provide it sooner.. ",
    "olavoasantos": "Hi.\nI've tried using the scope.addEventProcessor method to add extra data to the scope. It was going well until I noticed that this method gets called when sentry is about to send the error and not when the error is thrown. Since I'm using Redux, I'm getting misleading information as there are breadcrumbs which happened after the exception.\nAny ideas on how to deal with this?. For reference, I got it working by storing the state when the lastEventId is changed (which means an error was thrown) and then using this stored data to modify the scope using addEventProcessor.\nYou can check out this gist: https://gist.github.com/olavoasantos/9ac791098758ee7dedf0c0424ec8b398. ",
    "klaemo": "\nI think it's fair to first compare the gzip bundle sizes instead of the uncompressed minified file size:\n\nI would argue it is also fair to compare minified sizes as perfomance issues not only arise from downloading javascript, but also from parsing and execution. ~92kb is quite hefty and could add up to 1s of parse time on low-end devices (just for this one library!).\nI'm not sure where you take the number of < 1KB for the CDN'ed script from. Could you elaborate? When I open https://browser.sentry-cdn.com/4.0.4/bundle.min.js I see a gzipped size of 22KB.\nYou should be aware that sentry's sdk is just one of many libraries developers include.\nPS: I love sentry, it's been super helpful for us. Web performance is just something I'm passionate about. ;). ",
    "rayzru": "@HazAT Sorry, guys, but can you provide next version release date? \nI mean, there are some changes already at the #master branch but not released yet. That one is deciding is 4x version is usable for Angular5+ projects though.. ",
    "hlehmann": "@HazAT Could it be possible to generate esm files. It would allow webpack to have better result with concatenation and tree shaking.. ",
    "gaterking": "@HazAT \nSentry browser SDK rollup bundle can be optimized. In bundle min js file, there are many tslib code repeatd. Such as __generator, __assign. In Browser env, it's best to share one code. Butthe browser project use another packages dist file. Maybe reduce the gzip size from 23K to 16K.. > @vkrol We had to revert the changes that @gaterking made, at least for the npm package.\n\nThe bundle on CDN on the other hand should be smaller.\nWe will for sure re-add the changes but we need to talk about it since we need a dep on tslib for example.\nAlso how typings were generated was broken.\n\nHope as soon as possible.. Is there some shared code(app:///${base} in rewriteframes.ts) in another packages such as package/core? They are not used by client, but used by node.\n. ",
    "mindplay-dk": "On the client-side, I basically want this to capture errors and submit them to the API.\nWhat else is this library doing that's so complex?\nIt's really hard to understand why a simpler error-reporter needs to have such a substantial footprint \ud83d\ude10\n. > because it's not simple.\n@kamilogorek yikes, you're obviously right... I realized JavaScript was a mess - I guess I've never dug into this area before, I didn't realize how bad this was. I guess there's really no simple way to handle stack-traces in JS. Just. Yikes. \ud83d\ude10\n. Looking at this again, and I don't believe this couldn't be smaller. Much smaller.\nStack-traces with source-map support ought to be by far the most complex thing in this library - and it doesn't look like it is? It seems like most of the footprint is from the core framework, which it shares with the node.js client, where I'm sure footprint isn't really a concern.\nDon't get me wrong, this is a beautiful piece of architecture - very nice TypeScript work.\nBut on the client-side, that doesn't mean much. It needs to be small and load fast - especially for something as low-level as this, it doesn't really matter if the source-code is beautiful or not. As far as I can tell, all that impressive is architecture is costing a lot of bytes down the line.\nFor comparison:\nI came across TrackJS, which has similar capabilities (cross-browser stack-trace with source-maps) in a ~10KB package.\nThe original TraceKit is ~3KB min+gz.\nI found this library which can do the source-map bit (on the client-side) in ~8KB min+gz or ~10KB with x-browser polyfills.\nBeyond that, it's a matter of collecting a few bits of browser information, wrapping in the expected JSON format, and posting it - which shouldn't be more than a few KB min+gz. Should it?\nI feel like this is just way more architecture than what most people need. If I need any plugin support at all, maybe I need a simple hook that lets me plug information into the JSON post, but that's about it.\nI know that it's common to deploy megabytes of JS these days, but we have strict content policies at work, to ensure we ship projects that load fast on mobiles, and I can't justify spending more than half of our JS budget on error-logging - maybe 10% tops, so something like ~15-20 KB seems reasonable.\nI love your product, but I can't deploy this client \ud83d\ude10\n. > For something like this it could be a good idea to delegate the stacktrace and source-map parsing to the server, where size is irrelevant\n@cromefire interesting idea. I wonder if that's what e.g. TrackJS does to keep the size down? (Their client is proprietary - only the minified source is available, so it's hard to say what they do. Suppose I could install it and see what travels over the wire...)\n. Here's a simpler package to resolve source-maps in the browser: source-map-resolve at ~2KB min+gz ... that's without polyfills, but (if this works) I'm thinking we should be able to hit ~10KB for modern browsers that don't need polyfills.. ",
    "cromefire": "Instead of just trying to minimize helpers you could just provide the already mentioned esm files, that's easy and even a best practice today.\n\nReduce usage of async/await, it compiles poorly to ES5. Compare https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/baseclient.ts#L307-L378 to the output code (search \"processEvent\" in the production bundle). That entire file becomes huge in the production bundle.\n\nThat's the wrong way, instead of optimizing further for ES5 it's more important to optimize for 80.07% who are using modern browsers. \nFor everyone who needs support old browsers:\nAsync functions are supported by any browser that supports <script type=\"module\"> (caniuse: esm, async) so only users of older browsers need to wait longer (it takes longer for them anyway)\nProof:\n160KB (es5, bundled) > 119KB (esm, plain files)\nSo please bundle esm file (too), it's as easy as changing setting module and target in /tsconfig.esm.json (that extends tsconfig.build.json) to esnext, adding tsconfig.esm.json files similar to the tsconfig.build.json files to the packages, add it to the build and package and specify a module entry in the package.json\nIf you want, I can add a PR for that.. With that new PR you can configure babel however you want to support only the browsers you need. @pascaliske try yarn build first . Is it already released? . > I searched a bit through the source code and compared @sentry/browser with @sentry/utils . I think this is the problem: packages/utils/tsconfig.build.json#L5 vs. packages/browser/tsconfig.build.json#L5 . Is it possible that the normal build output overwrites the esm build output? \ud83e\udd14\nNo, you have to look at the esm tsconfig. Will look at it tomorrow . @evocateur for all users of typescript this is necessary. Typescript optimizes it all away. \n(but it may be needed for the .d.ts files) . @IanMitchell It's not used for esm build, but for normal ones. > The bundle.js of 4.5.0 contains a lot of duplicate code, like Severity, htmlElementAsString, htmlElementAsString, uuid4, parseUrl and so on. This cannot be intended!\nThis is why (or it's at least one reason) there is the esm build. If you have a bundler anyway it's more efficient than using a prebuild bundle. (It's just beta and right now still broken). For something like this it could be a good idea to delegate the stacktrace and source-map parsing to the server, where size is irrelevant. > that's without polyfills\nPolyfills shouldn't be in the esm build, so that could also work, but in the bachend it would be even less. > You can use our loader then \u2013 https://docs.sentry.io/platforms/javascript/loader/ :)\nBut there is sadly no solution for webpack\n\nJust to name a few. I really wish it would be as easy as \"catch error, add some data and send it through\".\n\nMaybe someone should propose something at tc39. I would have to look at how the process is, but maybe someone could propose a standardized API for like stacktrace reading. > What do you mean exactly? Having a package that could co-exist with the loader, which could be imported and bundled, but then communicate with asynchronously loaded SDK once error or captureException call happens?\nYes, if I recap correctly, the loader is only available via a cdn. Seems like I have to open a new PR, because with esm this would also be usable from your own code. It shouldn't be hard to write a loader that loads that in under 1kb, so why not, I will try writing a quick one. This is somewhat what I implemented in #1846. @Limess \nYou can just redirect to @sentry/browser/esm:\ntypescript\nresolve: {\n    alias: {\n        // use sentry ESM build which is not declared in the @sentry/browser package.json\n        '@sentry/browser': '@sentry/browser/esm'\n    }\nBut you don't need to add an alias, just import @sentry/browser/esm\nFor the loader it's easier to write it like this:\n- If you have other things in babel:\ntypescript\n{\n    test: /other_things/,\n    include: [/@sentry\\/.+\\/esm/],\n    exclude: /node_modules/,\n    // config\n}\n- If you don't:\ntypescript\n{\n    test: /@sentry\\/.+\\/esm/,\n    exclude: /node_modules/,\n    // config\n}\nAlso remember to customize the babel config for your needs: babel docs, else it's not worth to use the esm version. utils are not esm, because there is no single entry point.\nThe es5 and esm build are side by side in dist and esm.. @kamilogorek Are you okay with me rewriting the imports in the esm modules, so utils can also be esm?. There are multiple travis errors that don't seem like I caused them and also travis has problems because this is a PR and so certain env variables are not there.. I just have to get the rewrite script running under node 6. This is ready from my site, but there are still some weird travis errors. > We will test it locally and merge it soon.\nI still have to turn off side-effects I remembered, so please wait until I did that. \nDoes any of your files inject something into a global local object, just by importing it?\n\nAt first glance this really looks solid, the CI errors are because it's a \"third party\" PR.\n\nYou can turn off certain builds for 3rd party PRs\n\nutils do not have a single entry point because we wanted to harvest \"deep imports\" to use different files in browser and node.\n\nYes I fixed it, I always import things like that, it just took some more effort. \n\nEdit: Something that's not necessary but, do you already have some number of how much we size we save using esm over the es5 build?\n\nI can calculate that. If you want I can also do a PR after that to optimize the existing code like introduce es6 classes. Normal:\n1300KB\nESM, but splattered (not bundled):\n1200KB\nmin: 220KB\nmin, gzip (cli defaults): 212KB\nWarning: This values are not very good.\nBetter values when it's released or if I test it via yarn link (maybe tomorrow) and it's not yet optimized for esnext. My application shows:\ndefault: 22.33KB\nesm: 15.48KB\n(30.7% less; gzip, min w/ terser)  . I was thinking about making this more opt in, because right now webpack will automatically choose the module files, which point to esm, what could be a problem for people who already use this with webpack, but don't have babel in place to transpile the files. . Also I thought some time ago, if the esm should be the default module build (\"module\": \"esm/index.js\"), because that could break some things for some people using webpack, but not having their code transpiled using babel. All the build errors are coming from either this being a 3rd party PR or from the node module (which I didn't modify). I think you should skip certain builds in 3rd party PRs so the build does not error. To do that:\n\nchange matrix to jobs\nAdd a conditional (type != pull_request) to the jobs that will error in 3rd party PRs . Oh my bad obviously there was a problem, I'll look into what went wrong  . Yes I'm sorry, as I already said there had to be some problem, while rolling back. Fixed, it was ignored by the .gitignore (that's also, why it got removed). Wait, I forgot to put things in .npmignore. Sorry, I thought it was covered by\n!*.js.map\n!*.d.ts\n!*.js. fixed by #1832 \nSorry, I thought that this was already included. Maybe @sentry/utils should get a patch release. Changed karma, so that it automatically chooses one of Firefox, Chromium or Chrome, is that okay?\n(I for example do not have Chrome installed and Google stopped Chrome support for Linux). Sure I didn't come up with a better one, but if you have a better idea. \n",
    "bobmoff": "Would be awesome if there was an option to select between classic and modern mode, like vue cli. Where modern version has only support for most modern browsers and thus could be less bloated.\nOr even better if it could work like webpack env, so that the user could specify the browser support needed. Ofc, this is not an easy peasy feature, but just wanted to throw it out there :)\nAwesome product!. ",
    "pascaliske": "@cromefire Thanks for your work with optimizing the library size!\nI just tried using the new esm build from v4.5.0 but I got a lot errors. All of them are triggered because modules from @sentry/utils/esm could not be resolved. \nIn fact I didn't found the folders in node_modules after a fresh yarn install. (See screenshot)\ncomplete error list\nERROR in ./node_modules/@sentry/core/esm/baseclient.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/async' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/browser/esm/backend.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/tracekit.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/helpers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/pluggable/vue.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/browser/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/core/esm/baseclient.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/dsn.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/integrations/inboundfilters.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/integrations/extraerrordata.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/is' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/globalhandlers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/baseclient.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/basebackend.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/sdk.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/integration.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/integrations/dedupe.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/integrations/sdkinformation.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/integrations/inboundfilters.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/hub/esm/hub.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/logger' in './node_modules/@sentry/hub/esm'\nERROR in ./node_modules/@sentry/browser/esm/client.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/tracekit.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/integrations/useragent.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/trycatch.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/helpers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/pluggable/reportingobserver.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/browser/esm/integrations/pluggable/vue.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/browser/esm/integrations/pluggable/ember.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/browser/esm/transports/beacon.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/transports'\nERROR in ./node_modules/@sentry/browser/esm/transports/fetch.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/browser/esm/transports'\nERROR in ./node_modules/@sentry/core/esm/baseclient.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/integrations/dedupe.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/integrations/inboundfilters.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/hub/esm/scope.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/hub/esm'\nERROR in ./node_modules/@sentry/hub/esm/hub.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/misc' in './node_modules/@sentry/hub/esm'\nERROR in ./node_modules/@sentry/browser/esm/parsers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/trycatch.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/helpers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/api.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/basebackend.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/dsn.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/hub/esm/scope.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/object' in './node_modules/@sentry/hub/esm'\nERROR in ./node_modules/@sentry/core/esm/integrations/pluggable/rewriteframes.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/path' in './node_modules/@sentry/core/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/browser/esm/parsers.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/string' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/string' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/core/esm/baseclient.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/string' in './node_modules/@sentry/core/esm'\nERROR in ./node_modules/@sentry/core/esm/integrations/inboundfilters.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/string' in './node_modules/@sentry/core/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/backend.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/supports' in './node_modules/@sentry/browser/esm'\nERROR in ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/supports' in './node_modules/@sentry/browser/esm/integrations'\nERROR in ./node_modules/@sentry/browser/esm/integrations/pluggable/reportingobserver.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/supports' in './node_modules/@sentry/browser/esm/integrations/pluggable'\nERROR in ./node_modules/@sentry/browser/esm/transports/fetch.js\nModule not found: Error: Can't resolve '@sentry/utils/esm/supports' in './node_modules/@sentry/browser/esm/transports'\n\n\n\n. @kamilogorek Yes, I know. Just wanted to let you know of theese errors. \ud83d\ude42. @cromefire No this won't help I think. I just downloaded the package from npm so there's no build environment available. \ud83d\ude42\nI searched a bit through the source code and compared @sentry/browser with @sentry/utils. I think this is the problem: packages/utils/tsconfig.build.json#L5 vs. packages/browser/tsconfig.build.json#L5. Is it possible that the normal build output overwrites the esm build output? \ud83e\udd14\nInside my node_modules folder the browser package contains build output from both normal and esm. But the utils package only contains normal build output in the root folder.. @Taewa The error object thrown by Angular is not in the same format as an SentryEvent.\nOne way would be to just use the captureMessage(message: string) with some of the error info. That's the simpler way I've chosen also: https://github.com/pascaliske/ngx-sentry/blob/master/projects/ngx-sentry/src/lib/sentry.interceptor.ts\nAnother way would be to build an Sentry event object by yourself and use the captureEvent(event: SentryEvent) method to send it to Sentry.\nHope this helps. \ud83d\ude42\n. ",
    "IanMitchell": "Hey all! We're also poking around some of the bundle sizes in Sentry, and came across this: https://github.com/getsentry/sentry-javascript/blob/master/packages/minimal/package.json#L20\nLooks like it's adding a chunk of size for very few functions (spread and assign). I'm not super familiar with Typescript, but is it necessary for this at runtime?. Thank you guys for this! Really appreciated \ud83d\ude04 . ",
    "evocateur": "It's also unclear to me why @sentry/types needs to be a runtime dependency, and not located in devDependencies.... ",
    "RiZKiT": "The bundle.js of 4.5.0 contains a lot of duplicate code, like Severity, htmlElementAsString, htmlElementAsString, uuid4, parseUrl and so on. This cannot be intended!\nThe same happens when I do a Bundle via import * as Sentry from '@sentry/browser'; (as the only line in the file) using WebPack + Babel 7, then the bundled size is 326kb. See: sentry.bundle.js.txt\nWe use the same configuration for our other bundles too, but sentry is the only bundle with that issue.\nThe bundle.min.js does not have duplicate code inside, which may be a result of tree shaking with rollup.\nSo, a temporary solution is to use import '@sentry/browser/build/bundle.min.js';\n. ",
    "LarsDenBakker": "One thing that could help out a lot here is if some of the functionalities are optional. \nFor instance a really nice bare minimum could be:\n- native error stack trace (don't care that it's not optimal on some browsers)\n- user agent\n- timestamp\n- URL\n- match with source maps on the server\nAny additional functionalities can just be an add on. We only support modern browsers, so we don't need to work around all the quirky behavior of old browsers. . ",
    "Limess": "Might be helpful to others:\nI used the ESM build with webpack (4.29.5) by:\n\nadding a webpack alias to use the ESM build rather than the standard build as there's no module declaration in package.json\n\njs\nresolve: {\n    alias: {\n        // use sentry ESM build which is not declared in the @sentry/browser package.json\n        '@sentry/browser': path.resolve(\n            __dirname,\n            'node_modules/@sentry/browser/esm',\n        ),\n    }\n\nadd an exclusion to sentry/.+/esm to our babel-loader config, as it seems that the ESM build includes features newer than ES2015.\n\njs\n{\n    test: /\\.m?jsx?$/,\n    loader: 'babel-loader',\n    // compile sentry as the ESM build is new and ships modern features which break our supported browsers\n    exclude: /(node_modules\\/(?!(@sentry\\/[^/]+\\/esm))|bower_components)\\//,\n}\nNotes: \n* We used aliases so we don't have to worry about bundling when using it in code (we do similar for lodash-es among other things). ",
    "BenoitZugmeyer": "Thanks for the migration guide, I missed it!. That was fast, awesome!. ",
    "semperos": "Thanks for the quick reply, I'll put together a minimal repro case. I'd be curious to know what, at a Sentry level, might not work as expected if one were to remove this particular integration under v4.. ",
    "gregwym": "Upgrade to Sentry 9.0 fixed the issue. . That's great! Will make it easier to switch over from Raven for everyone else.. Hi @kamilogorek , \nWith your approach, only errors from Koa app will have the request context attached. Any other captureMessage/captureError/captureEvent calls internally would not have the context. \nI came up with something that mimics the Express middleware behavior. Could you help to double check whether everything make sense?\n```\nasync function sentryRequestHandler(ctx: Koa.Context, next: () => Promise) {\n  const hub = Sentry.getCurrentHub();\n  const scope = hub.pushScope();\n  scope.addEventProcessor(async (event, hint) => parseRequest(event, ctx.request));\ntry {\n    await next();\n  } finally {\n    hub.popScope();\n  }\n}\n```\nI couldn't use withScope since next need to be await on. . ",
    "kre8or69": "I'm still seeing this in 4.0.4, should it be resolved in that release?. ",
    "xban1x": "Can this get merged and a new version released?. ",
    "aguynamedben": "I see this page now... looks like it says to use beforeSend. \ud83d\udc4d. If anybody is looking to do this maybe this will help. I noticed that Sentry breadcrumbs can tend to upload sensitive data from XHR requests and console log messages. This is how I init Sentry...\nNote: This does not clean up data in extras, tags, etc. Just breadcrumbs. But you could apply the same concept using Sentry's beforeSend.\nsetupSentry.js\n\nNote: Depends on redact-object\n```js\nimport redact from 'redact-object';\nimport { scrubUrlParams, sensitiveKeys } from '../jsHelpers';\n\n//...\nfunction startSentry() {\n  Sentry.init({\n    debug: isDev,\n    dsn: process.env.SENTRY_DSN,\n    release: ${process.env.SENTRY_PROJECT}-${app.getVersion()},\n    onFatalError: () => {\n      process.exit(1);\n    },\n    beforeBreadcrumb(breadcrumb) {\n      // Examples:\n      // category: electron, type: ui\n      // category: console, type: undefined (remove access_token from data)\n      // category: xhr, type: http (remove access_token from URL)\n      // log.debug(Breadcrumb - ${breadcrumb.category} - ${breadcrumb.type});\n  // console breadcrumbs from redux-logger may contain Redux state and\n  // therefore access tokens or refresh tokens. Redact tokens from Sentry\n  // breadcrumbs.\n  if (breadcrumb.category === 'console') {\n    breadcrumb.data = redact(breadcrumb.data, sensitiveKeys);\n    // log.info(`New console breadcrumb data`, breadcrumb.data);\n  }\n\n  // xhr breadcrumbs may contain URLs which may contain access tokens or\n  // refresh tokens. Redact tokens from URLs.\n  if (breadcrumb.category === 'xhr') {\n    breadcrumb.data.url = scrubUrlParams(breadcrumb.data.url);\n    // log.info(`New url breadcrumb data`, breadcrumb.data);\n  }\n\n  return breadcrumb;\n},\n\n});\n}\n```\njsHelpers.js\n\nNote: Depends on url from Node.js\n```js\n/\n * Scrub URL params into x's.\n \n * i.e. https://foo.com?password=sekrit -> https://foo.com?password=scrubbed\n \n * @params {string} urlString - The URL (including querystring) you'd like\n * params scrubbed on.\n * @params {string[]} paramsToScrub - An array of string representing the\n * querystrings you'd like to scrub from the URL.\n * @returns {string} The URL with values for the paramsToScrub converted to\n * 'scrubbed'.\n */\n\nexport const sensitiveKeys = [\n  'key',\n  'token', 'secret',\n  'accessToken', 'access_token', 'access-token',\n  'refreshToken', 'refresh_token', 'refresh-token',\n  'code', 'authorization_code',\n  'password',\n];\nexport function scrubUrlParams(urlString, paramsToScrub = sensitiveKeys) {\n  const parts = url.parse(urlString, true);\n  const params = parts.query;\n  for (const param of Object.keys(params)) {\n    if (paramsToScrub.includes(param)) {\n      params[param] = 'REDACTED';\n    }\n  }\n  parts.query = params;\n// Random extra step: https://stackoverflow.com/a/7517673/3516664\n  delete parts.search;\nreturn url.format(parts);\n}\n```. Nice! Yeah it makes sense build it in.. FYI we haven't confirmed that this issue is the cause, but after releasing a new version of our app that has this bug, we're seeing the app crash intermittently but reliably due to high CPU/memory usage over a long time. Memory usage becomes too high and eventually our app hard crashes because V8 kills it (V8::FatalProcessOutOfMemory).\nIn early debugging, the app crashes seem to coincide with periods where the 429 rate limiting issue is also reported in Sentry. I.e. infinite loop causes resource hogging, which in turn causes insane memory usage and then an app crash.\n\n\n\nIs anybody else seeing this? It's very tricky to test because there's not a reliable way to put it in this state, as it depends on Sentry to be giving off 429s.. It's almost impressive how long the Electron app will run before it crashes... I think V8 is garbage collecting as aggressively as it can but eventually is overwhelmed. It's been running in this bad state on my local for like 20 minutes and still hasn't died.. Also, during this state, our app logs indicate that the business logic of our app is bored. Our app does real work every 30 minutes or so, and logs when that happens. When I tail the logs, our app is bored, but nonetheless running away with CPU/memory. That, combined with the fact that memory usage is all in the main process, where we do very little but sentry-javascript relays errors to Sentry servers, has me leaning toward the fact that the 429 infinite loop is the cause.. This has been merged but not released, any ideas when it will be released and integrated into sentry-electron?. \ud83d\ude4fThank you!!!. We removed the hack and used the fix, and it seems to work well. thanks for fixing this fairly quickly.. \ud83d\ude4fThank you. For what it's worth I reviewed the code and LGTM. ",
    "rrluthi": "As well, I'm never seeing actual global errors going to the log, just adding to breadcrumbs, unless manually calling Sentry.captureException(error). ",
    "paltman": "So, I got it working when I changed my test method to:\njs\ngoBoom() {\n    throw Error('BOOM!');\n}\nOnce I wrapped it, then the Sentry framework detected it as an error/exception and bundled a stacktrace and reported it as an error level rather than info level message.\nThe stacktrace doesn't seem to be using the sourcemaps I'm shipping though but not sure if that is an issue for this repo or the webpack plugin.. ",
    "xakzona": "Same issue. ",
    "garyforsterio": "Thanks for the snippet but I think there should be a correction:\ndiff\n beforeSend(event) {\n    // Detect if we got a ReportingObserver event\n    if (event.message && event.message.startsWith('ReportingObserver')) {\n      // And check if the observer's report had a body, if so, check whether sourceFile points to chrome-extension. If so, drop the event.\n      if (\n        event.extra.body &&\n+        event.extra.body.sourceFile &&\n        event.extra.body.sourceFile.startsWith('chrome-extension')\n      ) {\n        return null;\n      }\n    }\n    // Otherwise, just let it through\n    return event;\n  }\nwithout it I'm currently getting the error Cannot read property 'startsWith' of undefined. ",
    "elamperti": "Worth noting here that #1713 removed ReportingObserver from the defaults, so starting with v4.3.0+ this shouldn't be an issue anymore \ud83d\ude04. ",
    "lededje": "Reproduced: https://github.com/lededje/sentry-1570\nReplace the dsn in pages/index with a working one (not sure if this is required)\nnpm install\nnpm run start\nNext's error catching displays the error or you can view the full stack trace in the console.. This feels like a pretty significant issue, were tests written for that change?. I guess not.... ",
    "nttdocomo": "[x] Review the documentation:https://docs.sentry.io/\n- [x] Search for existing issues:https://github.com/getsentry/sentry-javascript/issues\n- [x] Use the latest release:https://github.com/getsentry/sentry-javascript/releases\nPackage + Version\n\n[x] @sentry/browser\n\nVersion:\n4.0.4\nDescription\n```javascript\nimport { init } from '@sentry/browser';\ninit({\n  dsn: 'https://@domain/'\n})\nvar passiveSupported = false;\nwindow.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n  get: function get() {\n    passiveSupported = true;\n    return null;\n  }\n}));\n```\nI also got this problem, when i addEventListener with callback as null. \nthe above code will cause the error. ",
    "andrewlively": "Just updated to 4.0.5 and that solved this issue for me. ",
    "nomadtechie": "hey @kamilogorek - are you sure this issue is resolved? I'm hitting this issue in v4.3.0 and its causing crashes for me as well. \n\n. ",
    "getsentry-bot": "\n  0 failure: \n  1 warning:  Please add a chan...\n  1 messages\n\n  DangerID: danger-id-default;\n\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.9551 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.9746 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.9551 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.9307 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 22.0225 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 22.0127 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.9795 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 22 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.999 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.9971 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 21.999 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 22.0107 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip minified size: 22.0107 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.998 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.0264 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n\n  1 failure:  Danger failed to ...\n  1 warning:  Please add a chan...\n  2 messages\n  1 markdown notices\n  DangerID: danger-id-default;\n\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  Danger failed to run `dangerfile.ts`.\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.9814 kB\n  \n\n\n\nError TypeError\nCannot read property 'toFixed' of undefined\nTypeError: Cannot read property 'toFixed' of undefined\n    at Object.<anonymous> (/home/travis/build/getsentry/sentry-javascript/node_modules/danger-plugin-codecov/dist/index.js:48:47)\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/travis/build/getsentry/sentry-javascript/node_modules/danger-plugin-codecov/dist/index.js:4:58)\n    at <anonymous>\nDangerfile\n43|       });\n44|     } else {\n45|       message('\u2705 TSLint passed');\n46|     }\n47|   });\n-------------------------------------------------^\n48| \n49|   const hasChangelog = danger.git.modified_files.indexOf('CHANGELOG.md') !== -1;\n50|   const isTrivial = (danger.github.pr.body + danger.github.pr.title).includes('#trivial');\n51|\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.3682 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.3652 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.7666 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.4326 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.3994 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.4316 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.7695 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 21.7695 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.7998 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  2 failure:  TSLint failed: ..., TSLint failed: ...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/browser**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts[99, 9]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/globalhandlers.ts[58, 7]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/pluggable/ember.ts[41, 9]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/pluggable/ember.ts[56, 11]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/pluggable/vue.ts[89, 9]: Promises must be handled appropriately\n  \n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/node**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/handlers.ts[263, 5]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/handlers.ts[311, 9]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/integrations/onunhandledrejection.ts[42, 7]: Promises must be handled appropriately\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/test/index.test.ts[229, 9]: Promises must be handled appropriately\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.8789 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.8955 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/node**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/transports/base.ts[43, 7]: The key 'method' is not sorted alphabetically\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.8057 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.7188 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.5254 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 22.666 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.5352 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3975 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3975 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3848 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3848 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.375 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3857 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3662 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.3701 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.4307 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.4268 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.4795 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 23.4805 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.8779 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.8779 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.8789 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.8779 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.7676 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\n\n\n  Please add a changelog entry for your changes.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  \u2705 TSLint passed\n  \n\n\n:book:\n\n\n  @sentry/browser gzip'ed minified size: 20.7676 kB\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 20.7676 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 20.7666 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 20.7881 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 20.7881 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.7148 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.7148 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 20.8945 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/node**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/parsers.ts[110, 11]: Expression is always true.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0762 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/utils**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/utils/test/object.test.ts[1, 36]: Named imports must be alphabetized.\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.8262 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/browser**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/trycatch.ts[213, 1]: Documentation must exist for functions.\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1338 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.8311 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/browser**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/trycatch.ts[213, 1]: Documentation must exist for functions.\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.2275 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1992 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.2266 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1807 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1855 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.2637 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.2852 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.3867 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.3984 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.8271 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.3867 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/browser**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts[121, 5]: The key 'enumerable' is not sorted alphabetically\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts[129, 7]: The key 'enumerable' is not sorted alphabetically\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/browser/src/integrations/helpers.ts[133, 7]: The key 'enumerable' is not sorted alphabetically\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.916 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.6426 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.1523 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 160933e8eb4b86126bc1d8a4d955a3586dc75088\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.9424 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.9131 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.9316 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0244 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.4326 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0273 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/core**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/core/src/integrations/inboundfilters.ts[182, 23]: Unsafe use of expression of type 'any'.\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/core/src/integrations/inboundfilters.ts[182, 16]: Unsafe use of expression of type 'any'.\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/core/src/integrations/inboundfilters.ts[186, 23]: Unsafe use of expression of type 'any'.\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/core/src/integrations/inboundfilters.ts[186, 16]: Unsafe use of expression of type 'any'.\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0459 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  1 warning:  Please add a chan...\n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/utils**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/utils/src/memo.ts[29, 7]: Expected a 'for-of' loop instead of a 'for' loop with this simple iteration\n  \n\n\n\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0049 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0576 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.1592 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 619ff2c1ed94b162a2b099a763eb95387223caff\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 19.7305 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against c95c9123b1d6d8d8dfa35d222f36f2cf8268e227\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0059 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0869 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: $ cat build/bundle.es6.min.js | gzip -9 | wc -c | awk '{$1=$1/1024; print \"ES6: \",$1,\"kB\";}'\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 287d633c8dc906a1bc5d2900c3d351037a0b4a51\n\n. \n<!--\n  1 failure:  TSLint failed: **...\n  0 warning: \n  1 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nFails\n\n\n\n:no_entry_sign:\n\n\n  TSLint failed: **@sentry/node**\n\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/src/stack-trace.ts[1, 1]: File name must be camelCase\n- ERROR: /home/travis/build/getsentry/sentry-javascript/packages/node/test/stack-trace.test.ts[1, 1]: File name must be camelCase\n  \n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\n\n  @sentry/browser bundle gzip'ed minified size: *(ES6:  14.3223 kB) ()*\n  \n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 6755a660ff87a1eb44cbe3754746e436081ee064\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.0879 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1562 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 21.2568 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 2564ec21c1553e3d16a53a80f6efa4f428e5259f\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 19.4668 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 9436f4ca10944802e8c7bcedb4a8beb19014ebbf\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 17.9229 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 2deaf46849ee34f2c4c8b04c74d351cbfcad4228\n\n. \n<!--\n  0 failure: \n  0 warning: \n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 19.5752 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS against 4e628181918df9dffb503024e10296a5510ddda5\n\n. \n<!--\n  0 failure: \n  1 warning:  Please add a chan...\n  2 messages\nDangerID: danger-id-default;\n-->\n\n\n\n\nWarnings\n\n\n\n:warning:\nPlease add a changelog entry for your changes.\n\n\n\n\n\n\n\nMessages\n\n\n\n:book:\n\u2705 TSLint passed\n\n\n:book:\n@sentry/browser gzip'ed minified size: 22.1562 kB\n\n\n\n\n  Generated by :no_entry_sign: dangerJS\n\n. ",
    "Hakonwibergh": "@kamilogorek \ud83d\udc4d Do you know when this will be released? :). @kamilogorek That would be perfect! Great work! \nHahaha, agree! :). No errors shown anymore, thanks alot!\nIs there any place to ask about features for sentry GUI? @HazAT . ",
    "josephfarina": "@kamilogorek  Of course! https://sentry.io/share/issue/32f058e8777c45aab16b9d28aa970e4e/. Ah makes sense, sorry! The actual link is: https://sentry.io/shaybazaar/shaybazaar/issues/700284324/. ",
    "qtiki": "@kamilogorek Changing the getGlobalObject to always return global fixes the issue.. ",
    "dymafr": "We are only using socket-io\nhttps://github.com/socketio/socket.io-client. ",
    "darkobits": "I'm experiencing this same issue. Instead of socket.io, I'm using the aws-sdk.\nHere's a minimal test case:\n@sentry/node  4.0.6\nnode          8.9.4\nnpm           6.4.1\n```js\nconst {SQS} = require('aws-sdk');\nconst Sentry = require('@sentry/node');\n// Track number of requests completed.\nlet requestCount = 0;\n// Create an SQS client that will talk to Localstack.\nconst sqs = new SQS({\n  endpoint: 'http://localhost:4576',\n  accessKeyId: 'rainbows',\n  secretAccessKey: 'unicorns',\n  region: 'us-west-1'\n});\n/\n * Continuously \"polls\" SQS to do . In this case, we just\n * call the getQueueAttributes method.\n \n * The request pool (making 10 requests at a time instead of 1) just helps the\n * test run faster.\n /\nasync function poll(QueueUrl) {\n  const requestPool = [];\nfor (let i = 0; i < 10; i++) {\n    const requestPromise = sqs.getQueueAttributes({\n      QueueUrl,\n      AttributeNames: ['All']\n    })\n    .promise()\n    .then(() => {\n      requestCount++;\n      console.log(${requestCount} requests processed.);\n    });\nrequestPool.push(requestPromise);\n\n}\nawait Promise.all(requestPool);\n}\nasync function main() {\n  try {\n    // We have to pass an empty object here or we will get a 'cannot read\n    // property X of undefined' error. A null check on 'options' should probably\n    // be added to Sentry to prevent this.\n    Sentry.init({});\n// Create a new queue / get existing queue.\nconst {QueueUrl} = await sqs.createQueue({QueueName: 'foo'}).promise();\n\nwhile (true) {\n  await poll(QueueUrl);\n}\n\n} catch (err) {\n    console.error('Error:', err.stack);\n    process.exit(1);\n  }\n}\nmain();\n```\nRepo with this test: https://github.com/darkobits/sentry-range-error\n\nWith Sentry.init being called, you can get up to 4,500 requests before a RangeError is thrown. This is about the same number I am getting in my other project as well.\nWith Sentry.init removed, the test runs indefinitely.. ",
    "gaastonsr": "What I don't like about using beforeSend is that I don't get the original error object. But thanks for the reply.. Omg, this changes everything! thanks, @kamilogorek.. ",
    "erkmos": "Thanks!. ",
    "orestisioakeimidis": "What is the status of this?. ",
    "Nabellaleen": "Same problem here, and it's quite a bad news, because we're loosing all the information about current errors\nAnd we can't go back to previous Raven version due to CDN issues .... Yeah, I've sound the same solution, but indeed, it's less sexy\nSentry.withScope(scope => {\n              scope.setExtra(\"state\", state)\n              scope.setExtra(\"data\", data)\n              Sentry.captureException(data.exception)\n            });. ",
    "ValkyrieUK": "Chaps, I've been running into the same issues. Check out this.\nhttps://github.com/getsentry/sentry-javascript/tree/master/packages/node\njavascript\nSentry.configureScope(scope => {\n  scope.setExtra('battery', 0.7);\n  scope.setTag('user_mode', 'admin');\n  scope.setUser({ id: '4711' });\n  // scope.clear();\n});\nDoesn't feel as nice as the Raven setup. I suggest wrapping Sentry in a client so you can set tags, userContext etc as you send the error.. ",
    "smilexu": "setExtra might be the workaround, but you need to clear extra, that is annoying.. @kamilogorek thanks, I will try with withScope. ",
    "rhyek": "I think the new withScope is kind of pointless since you can't use async functions with it, apparently. You pretty much have to have the withScope and captureException very close to each other and you know what would solve that? If captureException accepted a scope parameter! @kamilogorek. I have a situation where I need to capture an exception with sentry that I do not need express to handle after, so I am using captureException explicitly. However, I want all my request context (url, payload, etc) to be included in the report just like when I let sentry's Sentry.Handlers.errorHandler() do its work.\nAn example of what I need to do:\njs\napp.use(Sentry.Handlers.requestHandler());\napp.use('/some-work', async (req, res, next) => {\n  try {\n    await someAsyncWork.catch(error => {\n      Sentry.captureException(error); // capture, but ignore error\n    });\n    res.send('All good.');\n  } catch (error) {\n    next(error);\n  }\n});\napp.use(Sentry.Handlers.errorHandler());\nIs this intended to work as I except it to?\nEdit:\nPerhaps this necessary?\njs\n  await someAsyncWork.catch(error => {\n    Sentry.withScope(scope => {\n      scope.addEventProcessor(async event => Sentry.Handlers.parseRequest(event, req));\n      Sentry.captureException(error);\n    });\n  });. ",
    "nathany": "This isn't specifically promises. \ud83e\udd14 \nIf I throw from the bottom of main.js.\nthrow new Error(\"oops\");\nChrome 69 logs Uncaught Error: oops but I see nothing in Sentry. I only see messages in Sentry if I explicitly call Sentry.captureMessage.. Thanks for verifying. Our setup is with npm and webpack. I'll turn on the debug option and see what I find out.\n\u276f npm ls -depth 0 -prod\nmadi@1.0.0 /Users/nathany/src/gitlab.gov.ab.ca/madi-webapp\n\u251c\u2500\u2500 @robotsandpencils/parse-usdl@2.0.5\n\u251c\u2500\u2500 @sentry/browser@4.0.6\n\u251c\u2500\u2500 axios@0.18.0\n\u251c\u2500\u2500 bootstrap@4.0.0\n\u251c\u2500\u2500 bootstrap-select@1.12.4\n\u251c\u2500\u2500 es6-promise@4.2.4\n\u251c\u2500\u2500 fast-text-encoding@1.0.0\n\u251c\u2500\u2500 font-awesome@4.7.0\n\u251c\u2500\u2500 jquery@3.1.1\n\u251c\u2500\u2500 popper.js@1.14.3\n\u251c\u2500\u2500 tiny-cookie@2.1.2\n\u251c\u2500\u2500 tiny-msgpack@1.0.2\n\u251c\u2500\u2500 vue@2.5.16\n\u251c\u2500\u2500 vue-analytics@5.12.3\n\u251c\u2500\u2500 vue-qrcode-component@2.1.1\n\u251c\u2500\u2500 vue-recaptcha@1.1.1\n\u251c\u2500\u2500 vue-router@3.0.1\n\u2514\u2500\u2500 vue-router-multiguard@1.0.3. In the non promise case, I'm seeing this:\nmain.js?1c90:68 Uncaught Error: oops\n    at eval (main.js?1c90:68)\n    at Object../src/main.js (app.js:4663)\n    at __webpack_require__ (app.js:679)\n    at fn (app.js:89)\n    at Object.0 (app.js:4728)\n    at __webpack_require__ (app.js:679)\n    at app.js:725\n    at app.js:728\n(anonymous) @ main.js?1c90:68\n./src/main.js @ app.js:4663\n__webpack_require__ @ app.js:679\nfn @ app.js:89\n0 @ app.js:4728\n__webpack_require__ @ app.js:679\n(anonymous) @ app.js:725\n(anonymous) @ app.js:728\nindex.js?ae7a:3576 Sentry Logger [Warn]: Event dropped due to being matched by `ignoreErrors` option.\nEvent: Script error.\nI haven't provided an ignore errors option. I don't see how DEFAULT_IGNORE_ERRORS would ignore this.\nhttps://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/inboundfilters.ts#L9\n. @cjmaio Thanks for confirming -- I'm not crazy. \ud83e\udd2a\nI haven't had a chance to put together a more isolated test case yet.. I can confirm that in both Firefox Developer Edition 63.0b11 and Safari 12.0 the events logging to Sentry, both in the case of an ordinary error thrown and an unhandled promise rejection.\nChrome 69 is being ignored by the script error event in the case of an error thrown. \nUncaught Error: oops\nSentry Logger [Warn]: Event dropped due to being matched by `ignoreErrors` option.\nEvent: Script error.\nMaybe I should look into overriding ignoreErrors to nothing? (update: maybe i'm doing it wrong, but it looks like that may not be possible: https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/inboundfilters.ts#L120)\nHowever, in Chrome 69 I don't see the same \"dropped\" log when the error is from an unhandled promise rejection. But still nothing is logged to Sentry in this case.\nUncaught (in promise) Error: oops\n. Thanks @kamilogorek. There's no way I would've figured that out myself.\nThis is the issue for us too. We have it configured as cheap-module-eval-source-map in development, which is where I was testing. I temporarily changed to #source-map as it is set for production and both exceptions and unhandled promise rejections came through in Chrome 69.\nIs this interaction with Webpack documented anywhere?. ",
    "cjmaio": "I can confirm that throwing an error using the @sentry/browser package at version 4.0.6 does what @nathany described above. It appears that those errors are being dropped, but after digging through the code a bit, I don't see how it would be.. Actually, upon further investigation, it appears that this:\nthrow new Error('test')\nthrows an event where \"Script error.\" is the value, which is why it's being ignored. It doesn't contain anything about the actual error text in this case, which is odd.. More helpful information:\n- This occurred for me on Chrome 69.0.3497.92\n- This does not occur on Firefox Quantum 61.0.1. > @cjmaio @nathany I reproduced the issue, and I'm almost certain that you set devtool in webpack config to either eval, eval-source-map or cheap-eval-source-map. Is this correct?\n\nIf so, then everything is executed within large eval statement, which prevents script from reporting a correct error.\n\n\ud83d\ude21 someone slipped that in our webpack configuration. Can confirm it works once removing those.. ",
    "james2doyle": "@kamilogorek yeah I will do that\nBut just to clarify, I am not using Sentry.init() in the head of my page. I'm calling it in the bootstrap of my application.\nIs that bad practice?. Here is an example: https://codesandbox.io/s/vvwq36noyl. I think we will just have to refactor to make Sentry.init a more immediate call.\nI still think Sentry.init returning a promise or accepting a callback would be incredibly helpful.\nThanks for the help though. Despite the hiccup we are pretty happy so far. . ",
    "egor-sorokin": "I recently faced the same problem:\n@sentry/browser: v 4.1.1\nI have an angularjs app and I initialised Sentry before the main app (and I tried to initialise it in angular.run()), like so:\n```\nimport * as Sentry from '@sentry/browser';\nSentry.init({\n    dsn: myDsn,\n    beforeBreadcrumb: function(breadcrumb, hint) {\n        return null;\n    },\n    beforeSend: function(event) {\n        console.log(event);\n        return event;\n    }\n})\nThen I put errors in controllers & factories but none of them was caught. After that I added a timeout with 0ms and it started work. \nCode snippet from angularjs controller:\nvar d = new Date();\nsetTimeout(function() {\n      // sentry tracks the error below\n      throw new Error('timeout' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds());\n}, 0);\n// sentry doesn't track the error below\nthrow new Error('no timeout' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds());\n```\n@james2doyle example doesn't work for me at all. @kamilogorek Nope, I meant AngularJS so it's a v.1 (in my case v.1.6.10). @kamilogorek Thank you, I will take a look!. Hi, thanks for the quick response and for the detailed explanation, it works for me. Just one additional question what about Sentry configuration in this case?\nI mean, for example, Sentry.withScope, Sentry.addBreadcrumbs and so on. Should it be in the same way as in docs or some of them now will be like client.addBreadcrumbs?. thank you for the full example, it'd be nice to see those examples in docs somewhere in the configuration section for example. I can add them to the docs and create a PR if it's needed. Thoughts?. @HazAT cool, thanks, I will do that. @HazAT hi, related to this issue question:\nis there a way that \"Sentry.Hub\" tracks errors automatically? When I do \"Sentry.init({})\" Sentry tracks errors but when I create a \"browserClient\" and \"Hub\" it doesn't.\nHow can I have \"noConflict\" mode to not collide/conflict with other Sentry instances and versions and track errors automatically without \".captureExceptions\"?. Well, \"Or one instance to track globally occurring errors and one to be used as a stand-alone thing\" - yes\nImagine:\nSomebody has an app with its Sentry (with, for example, version lower than mine and its own DSN).  Also, I have an add-on for this app that adds an extra section with advanced settings and it has another Sentry (with its own DSN). However I am not 100% sure that there will be another instance of Sentry besides mine, but I would like to prevent any sort of collisions and yes, due to security reasons, I don't want to track errors of the main app just from my add-on and vice versa.\nAdditionally, per the decision on my project, I just need to track general js errors, so I don't need to call .captureException(e), .captureMessage manually.\nHope I made it a bit more clear now. Thank you guys for the clarification, I will decide what to do next based on your comment with my team. ",
    "ryanbraganza": "@kamilogorek That file you linked also has critical at the bottom of it. So it seems like something else is going wrong.. Thanks for the explanation @kamilogorek.\nI've updated the PR to replace critical with fatal.. Thanks!. ",
    "james-criscuolo": "Gonna close this, I still had some raven-js code that was the apparent cause of this. How the raven and sentry could co-exist is an interesting question, but probably not worth answering.. I have never seen this issue prior to version 4.4.2. My sentry project has a very clear transition to having a circular structor issue once 4.4.2 was released in my app. I'm reverting to 4.4.1 for now. ",
    "markstory": "From @benvinegar on October 4, 2018 18:23\nHey @nightnei \u2013 this is a client library issue, so you should open this on getsentry/sentry-javascript.\nI think it'd be helpful if you could share the trace. Given that they're grouping separately, yes, it seems it's being caught elsewhere (maybe bubbling all the way up to onerror).\ncc @kamilogorek . From @kamilogorek on October 4, 2018 18:33\n@nightnei do you use development mode by any chance?\nhttps://docs.sentry.io/clients/javascript/integrations/react/\n\nOne important thing to note about the behavior of error boundaries in development mode is that React will rethrow errors they catch. This will result in errors being reported twice to Sentry with the above setup, but this won\u2019t occur in your production build.\n\n. ",
    "htulipe": "Looks like this important piece of information is no longer in the documentation https://docs.sentry.io/platforms/javascript/react/. Thanks @kamilogorek :D. @kamilogorek thanks for the pointer. If think this \"script error\" situation should be mentioned in the SDK documentation, it's a pretty common use case to load JS from a different domain than the website content.. ",
    "SammyM": "Thank you!. ",
    "JustinTRoss": "Was this closed to indicate the IE11 errors are fixed? If so, do you know what version the updates are in?. Thanks @kamilogorek . Is there a version of raven-js that includes the fix?. Thanks. I apologize for the noise. I just realized the saucelabs compatibility chart is shared between raven-js and sentry-javascript.. ",
    "adrlen": "I couldn't reproduce my issue, but I still get errors coming from outside of my plugin.\nI noticed that all the errors I'm interested into have the transaction tag set to the url hosting my plugin. Is it possible to filter with this element ?. Thanks @HazAT, i will implement that.\nTo understand what happens, I dug into the code and find that if no url is found, it always returns True\nhttps://github.com/getsentry/sentry-javascript/blob/c69749d3e956c76f73ece688d10ad18bb398b2dc/packages/core/src/integrations/inboundfilters.ts#L111\nWould it be possible in my case ? . So I tested locally the JSON received with unwanted events, and it turns out that it is filtered normally. I have no idea why I receive those events on production.\nAbout the url not found, it occurs for ReportingObserver events. I think it should be filtered by whitelistUrls.\nWhat do you think ? . Just had this issue with 4.0.6. ",
    "ntindall": "I think https://github.com/getsentry/sentry-javascript/pull/1624 may be part of the problem, but I'm not totally sure if this will completely resolve things. . thanks @kamilogorek . ",
    "izabelavmelo": "Do you have any updates? \ud83d\ude15. ",
    "modestfake": "Hi @kamilogorek. We actually did this. We use it with React. In the root component, we initialized the library the way you've mentioned and also followed this guide to use it in ErrorBoundary.js.. Yeah, we'll create one later and will drop a link here. Thanks!. ",
    "liz282907": "i ran into the same problem. . ",
    "devpreview": "@kamilogorek Thank you for your help!. ",
    "jericdeleon": "Useful info, thanks @kamilogorek!. small FYI: scope.addEventProcessor expected a Promise, so:\nSentry.configureScope(scope =>\n  scope.addEventProcessor(\n    event =>\n      new Promise(resolve =>\n        resolve({\n          ...event,\n          environment: 'something'\n        })\n      )\n  )\n);. ",
    "collinclarke": "Having the same issue with angular 6, had to revert to raven-js to add error handling.. ",
    "quen2404": "4.1.1 resolve the problem ! Thank you !. ",
    "idris": "Wow you are fast.  Thanks @kamilogorek!. ",
    "Calderis": "It seems resolved with this syntax. Thks @HazAT !. ",
    "jlison": "Maybe this should be stated on the docs example: https://docs.sentry.io/platforms/node/express/ \nSo it is a little bit clearer that we need:\nimport * as Sentry from \"@sentry/node\";\n? :). ",
    "nicobarray": "Oups, I just opened the same kind of issue. More details here #1650.. ",
    "yohaia": "in which version this is fixed? i still don't get the console breadcramps. \nUsing https://browser.sentry-cdn.com/4.1.1/bundle.min.js. ",
    "ghostd": "Hi,\nI think you can try the code explained here: #1639 1639. ",
    "Ashish-Bansal": "integrations: [\n        new Sentry.Integrations.Dedupe(),\n        new Sentry.Integrations.FunctionToString(),\n        new Sentry.Integrations.InboundFilters(),\n        new Sentry.Integrations.Breadcrumbs(),\n        new Sentry.Integrations.LinkedErrors(),\n        new Sentry.Integrations.UserAgent(),\n        new Sentry.Integrations.ReportingObserver({\n          types: ['crash'],\n        }),\n      ],\nIn my last release, my integrations looks like this. If I understand correctly, only integrations(from above given ones) which actually sends the error reports to the Sentry is ReportingObserver and others just add metadata, is that correct ? \n. > What exactly?\nI have just cleared old release's events to clear up confusions. In the latest release with above configuration, this event shouldn't have occurred since it is not sent by us manually (as it's outside of our react app).\n. > Correct, however, those are \"additional integrations\", defaults are always installed, unless you pass defaultIntegrations: false.\nAh I see. I'll give it a shot with defaultIntegrations: false and then specifying integrations manually. \n\nIt's always better to filter-out unwanted defaults instead of overriding them all. This way, you'll get any new defaults if we add some in new releases without doing anything.\n\ncool, thanks!. > Ah I see. I'll give it a shot with defaultIntegrations: false and then specifying integrations manually.\nYes it seems to fix the issue.\n\nIt's always better to filter-out unwanted defaults instead of overriding them all. This way, you'll get any new defaults if we add some in new releases without doing anything.\n\nThough with defaultIntegrations: false, additional integrations passed to that function will also become empty. So, I have to initiate all of them manually but still that's manageable.\nThanks!. Ah I see. I think parameters are quite ambiguous. \ndefaultIntegrations parameter shouldn't exist at all. Just integrations should be enough. \nIf empty array is passed as integrations, then that should mean that all the integrations are disabled. \nIf array [foo, bar] is passed as integrations , only those two integrations should be enabled. \nIf function is specified for integrations, then it should just exhibit current behaviour. \nThough I know these changes won't be possible now because of backward compatibility issues, but still wanted to share my feedback. :) \nThanks for the help!. ",
    "rajatdhoot123": "What if I want to remove only intervention\njs\ninit({\n  dsn: 'DSN',\n  integrations: [new Sentry.Integrations.ReportingObserver({ types: ['crash','deprecation'] })]\n});. ",
    "lilywang711": "@kamilogorek thank you . ",
    "mmcardle": "Thanks for the response\nSame behaviour when moving to the created hook \n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  components: { App },\n  template: '<App/>',\n  created: function () {\n    if (process.env.SENTRY_DSN) {\n      Sentry.init({\n        dsn: process.env.SENTRY_DSN,\n        integrations: [new Sentry.Integrations.Vue()],\n        ignoreErrors: [\n          'ReportingObserver [deprecation]'\n        ],\n        ignoreUrls: [\n          /extensions\\//i,\n          /^chrome:\\/\\//i,\n          /^chrome-extensions:\\/\\//i\n        ],\n        beforeSend: (event) => {\n          // Check if it is an exception -> Show report dialog\n          event.exception && Sentry.showReportDialog()\n          return event\n        }\n      })\n    }\n  }\n})\n. Moving back to raven.js\nimport Raven from 'raven-js'\nimport RavenVue from 'raven-js/plugins/vue'\nif (process.env.SENTRY_DSN) {\n  Raven.config(process.env.SENTRY_DSN).addPlugin(RavenVue, Vue).install()\n}\nnew Vue(....\ngives more detail on sentry.io\n\n. Thanks, i will start working through the differences between your example and my setup . @HazAT  thanks for your help\nIt looks like the issue was with unhandled promise rejections (vue-resource in this case)\nThis is what i came up with to get a reasonable message, treating vue-resource rejections as a special case\nbeforeSend: (event) => {\n  if (event.exception && event.exception.mechanism &&\n    event.exception.mechanism.type === 'onunhandledrejection') {\n    return null\n  }\n  return event\n}\nAnd added a window event listener\nwindow.addEventListener('unhandledrejection', (err) => {\n  var reason = err.reason\n  if (err instanceof Error) {\n    Sentry.captureException(reason)\n  } else if (reason.constructor.name === 'Response') {\n    var error = new Error(\n      reason.statusText + ' ' + reason.status + ' @ ' + reason.url\n    )\n    error.name = 'ResponseError'\n    Sentry.withScope(scope => {\n      scope.setTag('url', reason.url)\n      scope.setTag('status', reason.status)\n      Sentry.captureException(error)\n    })\n  } else {\n    var unhandledError = new Error(err)\n    unhandledError.name = 'UnhandledRejection'\n    Sentry.captureException(unhandledError)\n  }\n}). ",
    "aksel": "Ah too bad, thanks for the information anyhow.. I'm just gonna close this so it doesn't clutter up your issues.\nThe error probably comes from some obscure, closed-source browser extension.\nThe academia.edu config is very similar to this gist, with some extra React stuff, and the elusive fixedTimeID.. Nope, but I am pretty sure it is an extension of some kind. I haven't been able to reproduce the error myself, even using the same Android version.\nYou can probably add the error to your ignore list, but who knows.. ",
    "topwebtek7": "@aksel I'm having same issues --- fixedTimeID is not defined\nDid you figure out why this kind error is throwing, only on Android devices?. ",
    "manelgarcia": "Thanks and sorry, hadn't seen it! . ",
    "kochis": "@HazAT Has that link (https://docs.sentry.io/platforms/javascript/express/) moved?. ",
    "dj-hedgehog": "@kamilogorek Thank you for your quick response. The following code exits the app after the first throw nonetheless:\n```\nconst sentry = require('@sentry/node');\nsentry.init(\n  { dsn: 'https://key@mysentry.mycompany/2', \n    integrations(integrations) {\n      return integrations.filter(integration => integration.id !== 'OnUncaughtException');\n    }\n  }\n);\nglobal.process.on('uncaughtException', (error) => {\n  const hub = sentry.getCurrentHub();\n  hub.withScope(async (scope) => {\n    scope.setLevel('fatal');\n    hub.captureException(error, { originalException: error });\n  });\n});\nconsole.log(\"before throwing the first time\");\nsetTimeout(() => { throw \"one\"}, 1000)\nsetTimeout(() => { throw \"two\" }, 2000);\nsetTimeout(() => { throw \"three\" }, 4000);\nsetTimeout(() => { console.log('still running') }, 10000);\n```. That solved the issue, thanks a lot :). ",
    "holloway": "@kamilogorek I can confirm that this patch fixes our issues in Safari iOS 10.3.3 :fireworks: \nsentry.4.1.1-patch.min.txt\n. ",
    "felipeardila1010": "@kamilogorek Which is the software that utilice?\nhttps://user-images.githubusercontent.com/1523305/47207868-aad88980-d38c-11e8-85b4-5d0cae5b9def.png . ",
    "samuelcolvin": "I'm aware of https://blog.cloudflare.com/dogfooding-edge-workers/ but I was hoping to use the standard sentry sdk.. I've updated the code to log errors to sentry directly and that's working fine.\nIf you want to replicate the error you'll need to use this commit which actually uses raven-js and edit from there, I don't have a commit with @sentry/minimal or @sentry/browser I'm afraid.. I think you mean @sentry/minimal? (@sentry/browser failed with an understandable error about referrerPolicy)\nHere's my code:\n```js\nimport * as Sentry from '@sentry/minimal'\nimport {Request, router} from './src/utils'\nimport test from './src/test'\nSentry.init({dsn: process.env.RAVEN_DSN})\nconst routes = {\n  default: test\n}\nasync function handle_request(raw_request) {\n  const request = new Request(raw_request)\n  await request.prepare()\n  Sentry.captureMessage(request ${request.url}, {extra: {request: request.debug_info()}})\n  try {\n    const handler = router(routes)\n    return handler(event.request)\n  } catch (e) {\n    Sentry.captureException(e)\n  }\n}\naddEventListener('fetch', event => {\n  event.respondWith(handle_request(event.request))\n})\n```\nAnd here's a branch with that code on it.\nAnd here's a worker preview with that code running.. Just to confirm, personally I don't need this anymore as I spent Friday afternoon ignoring my real work and building my own sentry logger which plays nicely with web worker's event.waitUntil() and even uploads source maps to sentry so I get full traces.. (and let's me include extra in captureMessage #1666 :wink:). would that solve the dist.init is not a function problem?. (github is still being a pain, so I can't see your message except in\nemails.)\nThat's useful, thank you. Would still be useful to decide whether to\ninclude the stack trace when firing the message.\nOn Mon, 22 Oct 2018 at 14:39, Daniel Griesser notifications@github.com\nwrote:\n\nThere is an option called attachStacktrace for init see:\nhttps://docs.sentry.io/learn/configuration/?platform=browser#attach-stacktrace\nAfter that you call captureMessage and you will get a stacktrace.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1666#issuecomment-431838522,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD2jGZ_upB1fl6QnH5X8yZnQeNCuuPhlks5uncqBgaJpZM4XzFhf\n.\n. Thanks for the response, I'll close this however IMHO it still seems like a step back from the raven-js interface.. \n",
    "helloandre": "I have found a workaround for now: just ignore 429 errors in beforeSend. it's a slightly shotgun approach, but makes the infinite retry loop go away.\njavascript\nSentry.init({\n  dsn: 'https://123@sentry.io/123',\n  debug: true,\n  beforeSend(event) {\n    return event.message.match(/SentryError: HTTP Error \\(429\\)/) ? null : event;\n  },\n});. ",
    "maxpaj": "Is this resolved for @sentry/node?. ",
    "bsbechtel": "I have 4.2.1 installed and am still seeing this issue. I just upgraded to Angular 7.. ",
    "lbracken": "Also seeing issue, but as a warning, with @sentry/browser 4.2.1 and Angular 7.0.0\nWARNING in ./node_modules/@sentry/hub/dist/hub.js\nModule not found: Error: Can't resolve 'domain' in '/<project-dir>/node_modules/@sentry/hub/dist'. ",
    "samalexander": "@HazAT we are using the angular-cli. ",
    "ddikman": "Same here with:\nangular-cli 7.0.2\nnpm 6.4.1\nnode 10.9.0\nOutput on ng serve\nWARNING in ./node_modules/@sentry/hub/dist/hub.js\nModule not found: Error: Can't resolve 'domain' in '/my-app-proto/node_modules/@sentry/hub/dist'\nDoesn't seem to stop any functionality, errors are beings sent correctly.. Perfect, cheers!\nI can confirm I'm no longer seeing this on:\nangular-cli 7.0.2\nnpm 6.4.1\nnode 10.9.0\n@sentry/browser 4.2.3. ",
    "Prtkpwr": "please release an update soon.. i cant wait to use this in my application. I am using it on angular. It throws warning and then it stops all next\nprocesses..\nOn Thu 25 Oct, 2018, 1:02 AM EyePulp, notifications@github.com wrote:\n\nConfirming we're seeing this in a Vue CLI 3 project with webpack 4. Just a\nwarning, seems functional otherwise.\nThanks for jumping on this @HazAT https://github.com/HazAT\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1670#issuecomment-432798060,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AbsAulcUjojrSKvAf62x1rSUL8YnRok6ks5uoMBbgaJpZM4X00g1\n.\n. That's a very good new.. thanks for the quick support. :)\n\nOn Thu 25 Oct, 2018, 2:08 PM Daniel Griesser, notifications@github.com\nwrote:\n\n4.2.3 is on it's way now\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1670#issuecomment-432964192,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AbsAuhF5pqyfZIFoF9HlO0Qn1iDpLGqYks5uoXh6gaJpZM4X00g1\n.\n. \n",
    "EyePulp": "Confirming we're seeing this in a Vue CLI 3 project with webpack 4.  Just a warning, seems functional otherwise.\nThanks for jumping on this @HazAT . No more warning under Vue.  Nice work - cheers.. ",
    "papakai": "Hi @kamilogorek ,\nI just had an eye on your example. It does not follow my steps provided exactly.\nI am using a async route\ne.g.\njavascript\nexport const getAccountCurrency = async (req: express.Request, res: express.Response, _next: express.NextFunction) => {\n    const r = await apiclient.request({COMMAND: StatusAccount});\n    if (r.isSuccess()){\n       // the following line will break because of that method name has a typo\n        res.json({CURRENCY: r.getColmnIndex(\"CURRENCY\", 0)});\n    } else {\n        res.json({CURRENCY:\"n/a\"});\n    }\n};\njavascript\n        import * as route from \"./route\";\n        // ...\n        app.post(\"/account/currency\", route.getAccountCurrency);\n        // ...\nJust a quick stupid example. Let me know if that allows you to reproduce the issue.\nMaybe it really has to do with \"async\" ... just my 2 cents.. hmm! thanks for responding - I will have to dive into debugging then. I've really no clue what is wrong and why. It will take some time until I can reply.\nFeel free to close this issue for now - I will request to reopen in case I need further help.. ",
    "krutkowski86": "+1\nI'm having the same issue.. @kamilogorek Removing node_modules and reinstalling helped! Thanks!. ",
    "luboslav": "Same issue.. I get same error.. ",
    "juanhenriquez": "Hey @HazAT, When do you plan to release this fix? \ud83d\ude4f\ud83c\udffb. Hi @HazAT!  I'm not sure if this is the correct place to ask this question \ud83d\ude05, but yesterday I was trying to migrate my project to the new API, but now when I do something like:\njavascript\nSentry.withScope(scope => {\n  scope.setTag('type', 'client');\n  scope.setExtra('custom-message', 'hello');\n  Sentry.captureException(error.originalError || error);\n});\nThe error is being send successfully but without the data I just attached to the scope (in this case a tag and an extra).\nSo, I was wondering if there is something I'm missing or doing incorrectly.. Sure @kamilogorek! Here you go https://codesandbox.io/s/jl4nx3yp7v\nI'm throwing an error manually from my app.component.ts for testing purposes.\n. ",
    "KevCJones": "Nice one, purely professional courtesy how'd it happen? In case i run into it myself \ud83e\udd17. I did come across https://github.com/angular/angular/issues/17772 which highlights why the change detection might not of triggered... but not why that error blew up int he first place. I gave that a try and the Date specific error is gone but now is replaced with \nUnhandled Promise rejection: Converting circular structure to JSON ; Zone: <root> ; Task: Promise.then ; Value: TypeError: Converting circular structure to JSON\n    at JSON.stringify (<anonymous>)\n    at serialize (index.js:752)\n    at BeaconTransport.eval (index.js:2842)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at BeaconTransport.captureEvent (index.js:2839)\n    at BrowserBackend.eval (index.js:2984)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at BrowserBackend.sendEvent (index.js:2959)\n    at BrowserClient.eval (baseclient.js:157)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at eval (baseclient.js:156)\n    at BrowserClient.eval (baseclient.js:334)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at fulfilled (tslib.es6.js:68)\n    at ZoneDelegate.invoke (zone.js:388)\n    at Zone.run (zone.js:138)\n    at eval (zone.js:872)\n    at ZoneDelegate.invokeTask (zone.js:421)\n    at Zone.runTask (zone.js:188)\n    at drainMicroTaskQueue (zone.js:595)\n    at ZoneTask.invokeTask [as invoke] (zone.js:500)\n    at invokeTask (zone.js:1540)\n    at XMLHttpRequest.globalZoneAwareCallback (zone.js:1566) TypeError: Converting circular structure to JSON\n    at JSON.stringify (<anonymous>)\n    at serialize (webpack-internal:///./node_modules/@sentry/browser/dist/index.js:752:17)\n    at BeaconTransport.eval (webpack-internal:///./node_modules/@sentry/browser/dist/index.js:2842:24)\n    at step (webpack-internal:///./node_modules/tslib/tslib.es6.js:117:23)\n    at Object.eval [as next] (webpack-internal:///./node_modules/tslib/tslib.es6.js:98:53)\n    at eval (webpack-internal:///./node_modules/tslib/tslib.es6.js:91:71)\n    at new ZoneAwarePromise (webpack-internal:///./node_modules/zone.js/dist/zone.js:891:29)\n    at Object.__awaiter (webpack-internal:///./node_modules/tslib/tslib.es6.js:87:12)\n    at BeaconTransport.captureEvent (webpack-internal:///./node_modules/@sentry/browser/dist/index.js:2839:24)\n    at BrowserBackend.eval (webpack-internal:///./node_modules/@sentry/browser/dist/index.js:2984:54)\n    at step (webpack-internal:///./node_modules/tslib/tslib.es6.js:117:23)\n    at Object.eval [as next] (webpack-internal:///./node_modules/tslib/tslib.es6.js:98:53)\n    at eval (webpack-internal:///./node_modules/tslib/tslib.es6.js:91:71)\n    at new ZoneAwarePromise (webpack-internal:///./node_modules/zone.js/dist/zone.js:891:29)\n    at Object.__awaiter (webpack-internal:///./node_modules/tslib/tslib.es6.js:87:12)\n    at BrowserBackend.sendEvent (webpack-internal:///./node_modules/@sentry/browser/dist/index.js:2959:24)\n    at BrowserClient.eval (webpack-internal:///./node_modules/@sentry/core/dist/baseclient.js:157:77)\n    at step (webpack-internal:///./node_modules/tslib/tslib.es6.js:117:23)\n    at Object.eval [as next] (webpack-internal:///./node_modules/tslib/tslib.es6.js:98:53)\n    at eval (webpack-internal:///./node_modules/tslib/tslib.es6.js:91:71)\n    at new ZoneAwarePromise (webpack-internal:///./node_modules/zone.js/dist/zone.js:891:29)\n    at Object.__awaiter (webpack-internal:///./node_modules/tslib/tslib.es6.js:87:12)\n    at eval (webpack-internal:///./node_modules/@sentry/core/dist/baseclient.js:156:115)\n    at BrowserClient.eval (webpack-internal:///./node_modules/@sentry/core/dist/baseclient.js:334:46)\n    at step (webpack-internal:///./node_modules/tslib/tslib.es6.js:117:23)\n    at Object.eval [as next] (webpack-internal:///./node_modules/tslib/tslib.es6.js:98:53)\n    at fulfilled (webpack-internal:///./node_modules/tslib/tslib.es6.js:88:58)\n    at ZoneDelegate.invoke (webpack-internal:///./node_modules/zone.js/dist/zone.js:388:26)\n    at Zone.run (webpack-internal:///./node_modules/zone.js/dist/zone.js:138:43)\n    at eval (webpack-internal:///./node_modules/zone.js/dist/zone.js:872:34)\n    at ZoneDelegate.invokeTask (webpack-internal:///./node_modules/zone.js/dist/zone.js:421:31)\n    at Zone.runTask (webpack-internal:///./node_modules/zone.js/dist/zone.js:188:47)\n    at drainMicroTaskQueue (webpack-internal:///./node_modules/zone.js/dist/zone.js:595:35)\n    at ZoneTask.invokeTask [as invoke] (webpack-internal:///./node_modules/zone.js/dist/zone.js:500:21)\n    at invokeTask (webpack-internal:///./node_modules/zone.js/dist/zone.js:1540:14)\n    at XMLHttpRequest.globalZoneAwareCallback (webpack-internal:///./node_modules/zone.js/dist/zone.js:1566:17)\n(anonymous) @ index.js:3573\napi.onUnhandledError @ zone.js:665\nhandleUnhandledRejection @ zone.js:692\n_loop_1 @ zone.js:682\napi.microtaskDrainDone @ zone.js:686\ndrainMicroTaskQueue @ zone.js:602\nZoneTask.invokeTask @ zone.js:500\ninvokeTask @ zone.js:1540\nglobalZoneAwareCallback @ zone.js:1566\nerror (async)\ncustomScheduleGlobal @ zone.js:1666\nZoneDelegate.scheduleTask @ zone.js:407\nZone.scheduleTask @ zone.js:232\nZone.scheduleEventTask @ zone.js:258\n(anonymous) @ zone.js:1831\n(anonymous) @ index.js:3400\ndesc.set @ zone.js:1244\nWebSocketTransport @ sockjs.js:2978\nSockJS._connect @ sockjs.js:828\nSockJS._receiveInfo @ sockjs.js:802\ng @ sockjs.js:66\nEventEmitter.emit @ sockjs.js:86\n(anonymous) @ sockjs.js:567\ng @ sockjs.js:66\nEventEmitter.emit @ sockjs.js:86\n(anonymous) @ sockjs.js:374\ng @ sockjs.js:66\nEventEmitter.emit @ sockjs.js:86\nxhr.onreadystatechange @ sockjs.js:1597\nsentryWrapped @ index.js:3114\nwrapFn @ zone.js:1188\nsentryWrapped @ index.js:3114\nZoneDelegate.invokeTask @ zone.js:421\nZone.runTask @ zone.js:188\nZoneTask.invokeTask @ zone.js:496\ninvokeTask @ zone.js:1540\nglobalZoneAwareCallback @ zone.js:1566\nXMLHttpRequest.send (async)\n(anonymous) @ VM6639:1\nscheduleTask @ zone.js:2969\nZoneDelegate.scheduleTask @ zone.js:407\nZone.scheduleTask @ zone.js:232\nZone.scheduleMacroTask @ zone.js:255\nscheduleMacroTaskWithCurrentZone @ zone.js:1114\n(anonymous) @ zone.js:3001\nproto.(anonymous function) @ zone.js:1394\n(anonymous) @ index.js:3839\nAbstractXHRObject._start @ sockjs.js:1605\n(anonymous) @ sockjs.js:1494\nsentryWrapped @ index.js:3114\nZoneDelegate.invokeTask @ zone.js:421\nZone.runTask @ zone.js:188\nZoneTask.invokeTask @ zone.js:496\nZoneTask.invoke @ zone.js:485\ntimer @ zone.js:2054\nsetTimeout (async)\nscheduleTask @ zone.js:2075\nZoneDelegate.scheduleTask @ zone.js:407\nZone.scheduleTask @ zone.js:232\nZone.scheduleMacroTask @ zone.js:255\nscheduleMacroTaskWithCurrentZone @ zone.js:1114\n(anonymous) @ zone.js:2090\nproto.(anonymous function) @ zone.js:1394\n(anonymous) @ index.js:3323\nAbstractXHRObject @ sockjs.js:1493\nXHRLocalObject @ sockjs.js:2914\nInfoAjax @ sockjs.js:356\nInfoReceiver._getReceiver @ sockjs.js:536\nInfoReceiver.doXhr @ sockjs.js:556\n(anonymous) @ sockjs.js:525\nZoneDelegate.invokeTask @ zone.js:421\nZone.runTask @ zone.js:188\nZoneTask.invokeTask @ zone.js:496\nZoneTask.invoke @ zone.js:485\ntimer @ zone.js:2054\nsetTimeout (async)\nscheduleTask @ zone.js:2075\nZoneDelegate.scheduleTask @ zone.js:407\nZone.scheduleTask @ zone.js:232\nZone.scheduleMacroTask @ zone.js:255\nscheduleMacroTaskWithCurrentZone @ zone.js:1114\n(anonymous) @ zone.js:2090\nproto.(anonymous function) @ zone.js:1394\nInfoReceiver @ sockjs.js:524\nSockJS @ sockjs.js:730\ninitSocket @ socket.js:9\n(anonymous) @ client:211\n(anonymous) @ index.js?http://0.0.0.0:0:254\n./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:0 @ vendor.bundle.js:6905\n__webpack_require__ @ inline.bundle.js:55\n0 @ main.bundle.js:1882\n__webpack_require__ @ inline.bundle.js:55\nwebpackJsonpCallback @ inline.bundle.js:26\n(anonymous) @ main.bundle.js:1\n4zone.js:388 Uncaught (in promise) TypeError: Converting circular structure to JSON\n    at JSON.stringify (<anonymous>)\n    at serialize (index.js:752)\n    at BeaconTransport.eval (index.js:2842)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at BeaconTransport.captureEvent (index.js:2839)\n    at BrowserBackend.eval (index.js:2984)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at BrowserBackend.sendEvent (index.js:2959)\n    at BrowserClient.eval (baseclient.js:157)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at eval (tslib.es6.js:71)\n    at new ZoneAwarePromise (zone.js:891)\n    at Object.__awaiter (tslib.es6.js:67)\n    at eval (baseclient.js:156)\n    at BrowserClient.eval (baseclient.js:334)\n    at step (tslib.es6.js:97)\n    at Object.eval [as next] (tslib.es6.js:78)\n    at fulfilled (tslib.es6.js:68)\n    at ZoneDelegate.invoke (zone.js:388)\n    at Zone.run (zone.js:138)\n    at eval (zone.js:872)\n    at ZoneDelegate.invokeTask (zone.js:421)\n    at Zone.runTask (zone.js:188)\n    at drainMicroTaskQueue (zone.js:595)\n    at ZoneTask.invokeTask [as invoke] (zone.js:500)\n    at invokeTask (zone.js:1540)\n    at XMLHttpRequest.globalZoneAwareCallback (zone.js:1566). Any news on this?. Hey guys, any move on this? I need to bring up the confidence in the tool or we'll have to move away.... I can't upgrade to 7 just yet, but I'll give the latest version a drive and\nsee if it's resolved.\nOn Tue, 15 Jan 2019, 14:42 Daniel Griesser <notifications@github.com wrote:\n\nI tried it with a clean angluar 7 project, not doing more than here\nlocally:\nhttps://codesandbox.io/s/jpm71lq17w\nWorks without any issues. Please provide a repro case.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1798#issuecomment-454415368,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAqe8Lr7L5XA-pL2UgPe_BTJnaBlvpeCks5vDejagaJpZM4ZRsY8\n.\n. \n",
    "sacredwx": "I had created a custom error in a script.js, a.k.a:\nsetTimeout(()=>{var s=s.dvjusfeh749359.sdhfksefy98ewyfu98;},1500);\nand having a whitelistUrls configured to [\"https://www.somedomain.com/script.js\"]\nfires the error to sentry in not minified version, but not in a minified one.\nThat's all info I can provide... ",
    "dannyshaw": "I'm seeing something like this happen.\nI set up a whitelistUrls to restrict to my application bundles then forced my app to throw an error in an onclick in a react component, stepping through the inboundFilters code shows that even though the error was initiated from my code the url returned from this.getEventFilterUrl and tested within isWhitelistedUrl is actually \"https://browser.sentry-cdn.com/4.3.4/bundle.min.js\".\nSeems like the wrapper in helpers.ts that wraps the Error should pop off it's own frame from the stacktrace?. http://jsfiddle.net/v5jbftdu/4/\n@kamilogorek here is a minimal implementation in jsfiddle. the whitelist is restricted to the jsfiddle domain, the error being thrown in the fiddle, if you set a breakpoint within  InboundFilters.isWhitelistedUrl() you'll see the url for the error come up as the sentry bundle.\nedit, enabled debug:\nlogger.ts:42 Sentry Logger [Warn]: Event dropped due to not being matched by whitelistUrls option.\nEvent: Error: testing sentry.\nUrl: https://browser.sentry-cdn.com/4.3.4/bundle.js. Brilliant, thanks for being so responsive @kamilogorek.. ",
    "lobsterkatie": "Hmmm - travis is failing here: https://travis-ci.com/getsentry/sentry-javascript/jobs/153666457\nNot sure why. (Looks like a timeout, so I tried again, but it failed again.)\nEDIT: Ran it one more time, and now it's failing for different reasons, that didn't make it fail before. What??. We on Support have also gotten a request to throw an error when the DSN is missing or invalid.. FYI, this was changed in 4.6.0.. > You mean 4.4.2, right?\nHe does: https://github.com/getsentry/sentry-javascript/releases/tag/4.4.2. Related, but not quite the same: two reports of events coming in as <unlabeled event>, with the same same processing error, but a different value:\n\nRunning @sentry/browser 4.4.2\n. H/t to one of the reporters of the <unlabeled event> issue - this can be reproduced by calling\nSentry.captureException(null);\n(though not with empty strings, objects, or Errors). Version 4.5.0 has just been released, and should fix this.. @bblack - have you upgraded all the way to 4.5.3? I believe more fixes for this specific issue were included after 4.5.0, specifically in this PR: https://github.com/getsentry/sentry-javascript/pull/1838.. @Eugene-Musika - first, try updating to 4.6.3, which is the current version. If that doesn't help, and you're a paid SAAS customer, feel free to reach out to support through your org settings. . The issue here is with source map set up, not with typescript. Closing for now.\n(For anyone finding this later and having similar problems, make sure to 1) tag your events with the release ID, and 2) name your uploaded source map files with the same name as the abs_path of the frames you're trying to deminify. More details in the source maps docs Kamil linked above.). ",
    "andersnm": "Hi,\nYou can repro my main issue with the initially included project: the Sentry SDK seems to add behind the scenes the Moleculer context object as an extra to the SentryEvent resulting in 413's. \nI realize now I can probably use the beforeSend hook to remove the breaking extras from the SentryEvent before its sent to the server, although is still unexpected/surprising it was added in the first place IMO. (alas I made my own sentry client in the meantime to progress)\nTo repro the mongoose issue, add \"mongoose\": \"^5.2.1\" as a dependency in package.json and use the following index.ts:\n```ts\nimport {Service, Action} from 'moleculer-decorators';\nimport {Context, ServiceBroker} from 'moleculer';\nimport * as Sentry from '@sentry/node';\nimport * as mongoose from 'mongoose';\nimport Schema = mongoose.Schema;\nconst CountrySchema = new Schema({\n    name: { type: String, required: true },\n});\nconst ProvinceReferenceSchema = new Schema({\n    name: { type: String, required: true },\n    country: { type: CountrySchema, required: true },\n});\nconst CityReferenceSchema = new Schema({\n    name: { type: String, required: true },\n    province: { type: ProvinceReferenceSchema, required: true },\n});\nconst AddressSchema = new Schema({\n    city: { type: CityReferenceSchema, required: false },\n});\nconst PersonSchema = new Schema({\n    address: { type: AddressSchema, required: false },\n});\nconst LocationSchema = new Schema({\n    person: { type: [{ type: PersonSchema, required: true }] },\n});\nconst DepartmentSchema = new Schema({\n    location: { type: LocationSchema, required: true },\n});\n@Service({\n    name: 'sentry',\n    version: 'v1',\n})\nclass SentryService {\n    public schema: Schema = DepartmentSchema;\n@Action({\n    cache: false,\n})\npublic async something(ctx: Context): Promise<void> {\n    throw new Error(\"action throws new Error()\");\n}\n\n}\nexport const SentryErrorMiddleware: any = {\n    async created(broker: ServiceBroker): Promise {\n        Sentry.init({\n            dsn: \"ZZZZZZZZZZZZZZZ\",\n            environment: \"development\",\n        });\n    },\n    localAction(next: Function): Function {\n        return async (ctx: Context) => {\n            try {\n                return await next(ctx);\n            } catch (e) {\n                Sentry.captureException(e);\n                throw e;\n            }\n        };\n    },\n};\nconst broker: ServiceBroker = new ServiceBroker({\n    logger: true,\n    logLevel: 'debug',\n    middlewares: [ SentryErrorMiddleware ]\n});\nbroker.createService(SentryService);\nbroker.start()\n    .then(() => {\n        return broker.call('v1.sentry.something', {})\n    }).then(res => {\n        console.log(\"OK\", res)\n    }).catch(err => {\n        console.log(\"Was error (OK)\")\n        // return broker.stop();\n    });\n```\nOn my Windows box, the memory usage for the process increases slowly to 2+ gig, before it drops and the unrelated event is logged in sentry. (the broker is left running, use ctrl+c to stop) I suppose it tries to log the OOM exception. The FATAL ERROR doesn't occur visibly here, I don't remember what I did to get that\n. ",
    "jansauer": "@kamilogorek \ud83d\udc4d Works perfectly.\nJust had to adopt the parseRequest call and update to the new version.\nif(process.env.SENTRY_URL) {\n  app.on('error', (err, ctx) => {\n    Sentry.withScope(scope => {\n      scope.addEventProcessor(async (event) => Sentry.Handlers.parseRequest(event, ctx.request))\n      Sentry.captureException(err);\n    });\n  });\n}. ",
    "AndreasGassmann": "I'm having an issue that might be related to this. I just added @sentry/browser to my project and when I try to build it (prod and without prod), it fails with a lot of typing issues. I'll post some logs asap.\nEdit: Just after I submitted my comment, I saw that you released 4.2.2, which seems to fix my issue \ud83d\udc4d . ",
    "cowboy": "Sounds like a useful update, then! ;). ",
    "ollyfg": "I also found this today, while trying to get Sentry working.\nThe interface for the main Sentry object (import Sentry from \"@sentry/node\") returns the event UUID, and runs asynchronously with no callbacks (as far as I can tell).\nThe interface for NodeClient (import { NodeClient } from \"@sentry/node\") returns a promise that resolves to a SentryResponse, which looks like this:\n{\n  \"status\": \"success\",\n  \"event\": {\n    \"event_id\": \"2c4722d40ce448a28681303e602677a7\",\n    \"fingerprint\": [\n      \"__Message_Text__\"\n    ],\n    \"level\": \"info\",\n    \"message\": \"__Message_Text__\",\n    \"platform\": \"node\",\n    \"sdk\": {\n      \"name\": \"sentry.javascript.node\",\n      \"packages\": [\n        null\n      ],\n      \"version\": \"4.2.3\"\n    }\n  }\n}\n@WojciechRydel, what you are looking for (I think) is the event.event_id field, though I agree that the interfaces should match up.\nMy personal preference would be to have the main Sentry object return the responses in the same way as the NodeClient, so that I can make sure all sentry calls complete before shutting down the app.. Good to know, thanks!. Awesome, don't know how I missed that! thank you!. ",
    "rwjblue": "tldr; This change looks good, thank you @Turbo87! \nIn general, I would expect not to have a Ember.onerror set at all during tests (but this is likely a conversation for another issue \ud83d\ude1d ). However, if you must define one then it definitely needs to rethrow when Ember.testing is set (or it will fail the Ember.onerror validation tests that is ran against every app by ember-qunit).. ",
    "rafaeltavares": "Right. So, It would be better to remove this property from the Options interface at the core package to avoid mistaken implementations.. ",
    "uded": "We're checking things since yesterday and at this point, we can't find a possible reason for this behavior. If you have any suggestion on how to debug this I would appreciate, but currently we're blank here... \ud83d\ude22 . OK, will do!. ",
    "williamxsp": "Im having the same behavior here.\nThats my console:\nSentry Logger [Log]: Integration installed: Dedupe\nSentry Logger [Log]: Integration installed: InboundFilters\nSentry Logger [Log]: Integration installed: FunctionToString\nSentry Logger [Log]: Integration installed: ExtraErrorData\nSentry Logger [Log]: Integration installed: TryCatch\nSentry Logger [Log]: Integration installed: Breadcrumbs\nSentry Logger [Log]: Integration installed: GlobalHandlers\nSentry Logger [Log]: Integration installed: LinkedErrors\nSentry Logger [Log]: Integration installed: UserAgent\nMy chrome is also crashing after a few minutes.. My chrome paused before an out-of-memory crash\n\n. @HazAT Hi Daniel,\nWe created a repository so you can try it.\nhttps://github.com/robertoleighton/sentry-angular\nYou can run the application and click at 'click to error' button and the app will crash.\nThank you!. Hey @HazAT  Should I wait for a new Sentry-Javascript version?. ",
    "AdriVanHoudt": "js\nconst Sentry = require('@sentry/node');\nSentry.init({\n    dsn: Config.sentry.dsn,\n    release: Package.version,\n    environment: 'production',\n    enabled: true\n});\nOther than that we do some manual exception tracking but I don't see how that could be related (from my limited point of view that is :P )\nOther than that I can see actual events getting filtered \n\nWhich makes sense since Filter out known web crawlers is turned on\n. @kamilogorek you marked this as an improvement but I'm not sure if we get charged for these events and if so is there a way to turn the logging for those of?. Awesome \ud83c\udf89 . Does my case in #1717 not reproduce the error for you?\nI fixed it like this for us atm \n```js\n// Turn dom node into string\nvar crumb = function(node) {\n    var idOrClass = (node.id && \"#\"+node.id) || (\"\"+node.classList && (\"\"+node.classList).replace(/ /g, \".\"));\n    return node.tagName.toLowerCase() + idOrClass;\n};\nvar crumbPath = function(node) {return node.parentNode ? crumbPath(node.parentNode).concat(crumb(node)) : [];};\n// in the Sentry config:\nbeforeBreadcrumb: function (breadcrumb) {\n                            if (breadcrumb.category === 'console' && breadcrumb.data && breadcrumb.data.extra && breadcrumb.data.extra.arguments && breadcrumb.data.extra.arguments.length > 0) {\n                                breadcrumb.data.extra.arguments = breadcrumb.data.extra.arguments.map(function (argument) {\n                                    if (argument instanceof Element || argument instanceof Node || argument instanceof HTMLElement) {\n                                        try { argument = crumbPath(argument).join(' > '); } catch (_) {};\n                                    }\n                                    return argument;\n                                })\n                            }\n                            return breadcrumb;\n                        }\n``. That works for me \ud83d\udc4c \n@kamilogorek hmm maybe you need an element deep in DOM tree with a lot of parent elements to trigger the fault, but again the proposed solution works for me as well.. Maybe I should mention that we load jQuery so angular.element() is basically the same as $(). This seems to happen for regular DOM nodes as well. More precisely when they are inbreadcrumb.data.extra.arguments`. ",
    "pljeskavica": "@kamilogorek It looks like you should actually be filtering on integration.name not integration.id as the integration objects do not have a key named id.  Also the documentation needs to be updated.. ",
    "dorianrod": "FYI, after looking at doc, I see a better workaround without modifying sources:\nWhen init Sentry, I remove arguments.\ninit({\n        beforeBreadcrumb(breadcrumb, hint) {\n            breadcrumb.error.data.extra.arguments = [];\n            return breadcrumb;\n        }\n    });. ",
    "lkraav": "Yes, this is messing up WordPress Gutenberg React-app big time, crashing people's browsers daily. Problem appears when \"block\" grammar validation fails.\nStarted when our WP integration upgraded from Sentry JS v3 -> v4.. I think this works at minimum for restoring safety across the board and we can go further later :+1: . ",
    "ineffyble": "Yup, I just installed Sentry for first time on my React app, and this is happening. I'm using google-maps-react for Google Maps integration, so suspect that's cause as per above.. ",
    "nuthinking": "I am having I think the same issue. With Sentry 4.1.1 embedded (and inited with dsn) at some point my React app freezes apparently without an error (same flow without Sentry doesn't generate an error), perhaps Sentry is just trying to send a warning and there is a circular reference. I had to remove Sentry. @kamilogorek how do you use Flatted with Sentry?. I had a very odd error but now seems to be fine. Thanks!. ",
    "timrogers": "It looks like this specifically was a big fat error generated by Contentful's SDK.. ",
    "janantala": "I have a problem using @sentry/node@4.2.4\nA lot of SentryError@sentry.core.dist:error in new SentryError HTTP Error (413) events in web reporting. Do you have any ideas how to solve this issue? I am getting around 2000 events / hour in sentry and have basic express.js configuartion.. ",
    "venkatd": "We have a similar issue in our app.\n@petercasinelli for your reference, it looks like the logic for checking for duplicate events is here:\nhttps://github.com/getsentry/sentry-javascript/blob/65965ff30b4c978c4f200ef8bb5c88d220059324/packages/core/src/integrations/dedupe.ts#L167\nPerhaps using the version from source and adding Log statements in the conditionals could narrow down what is triggering the logic.. ",
    "iWader": "Copy as curl highlighted our problem, only because the payload was so large. We use redux-logger in our dev builds which the sentry client was then capturing our entire redux state many times. \nOur solution was to filter out any console.log() breadcrumbs as they're largely verbose and not useful. \n```js\nbeforeBreadcrumb(breadcrumb, hint) {\n    if (breadcrumb.category === 'console' && breadcrumb.level === 'log') {\n        return null\n    }\nreturn breadcrumb\n\n}\n```. ",
    "eteisman": "I dont understand.\nI copied the exact code that sentry.io told me to put in my application.\nThen I see my request to sentry.io simply keep pending.\nThe Sentry.io website does not give clear instruction on how to solve this issue.\nEDIT: I was finally able to solve the problem by changing my configuration, and reducing the number of BreadCrumps send. https://docs.sentry.io/error-reporting/configuration/?platform=browser\n. ",
    "alfredvaa": "I think I got it working now. It seems that the changes did work on errors reported a day after I made those changes so maybe it took some time for the config to begin working, for some reason I don't know.... ",
    "RXminuS": "@kamilogorek For me this still seems broken, I think it's somehow the combination of an environment and release tag, because the release tag can't be found under the environment (you can't set the environment when submitting releases in sentry-cli). Yeah this broke for us in production as well. As much as I appreciate the amazing work you guys are doing...this felt a bit like your fire alarm having a short, creating a fire and burning down your house. It kind of defeats the purpose. Luckily we were able to catch the release that caused this bug using Sentry, so there was some meta-humor at least. Maybe sent everyone that got caught by this bug some stickers to make it up?. ",
    "huyl": "I can't get environment overridden no matter what I do.\nIt seems Sentry always wants to use process.env.NODE_ENV even if I try to override the environment in Sentry.init({...})\nI even tried the post-init code at https://github.com/getsentry/sentry-javascript/issues/1639. My bad, I had Sentry.init for dev and Sentry.init for prod in 2 different modules, and I was importing both modules.  So the init code for dev was being executed before the one for prod.\nSuggestion: give an error if Sentry.init is executed more than once. (Would have saved me a lot of time). ",
    "leerob": "The root cause of this issue was because we have an actual API (deployed in one place) and then an API proxy that our client uses (that is deployed in another place). When our API was throwing 500s, it was basically just forwarding the 500 request in the error when logging to Sentry. \nAfter moving our Sentry reporting directly to the API (also in Node), it was able to correctly gather the stack trace using hapi-raven-boom. Long story short, this solved the problem. . ",
    "denodaeus": "I still seem to be running into this issue with the below versions:\n\"@sentry/browser\": \"^4.4.2\",\nHere's a stack of when it finally crashes:\njavascript\n/**\n * safeNormalize()\n *\n * Creates a copy of the input by applying standardizer function on it and parsing it back to unify the data\n */\nfunction safeNormalize(input) {\n    try {\n        return JSON.parse(JSON.stringify(input, standardizer()));\n    }\n    catch (_oO) {\n        return '**non-serializable**';\n    }\n}\nexports.safeNormalize = safeNormalize;\nMy use case is that I'm using the jQuery validate plug in in my app, which catches errors and logs validation messages.  Normally, these errors do not seem to bubble up to the console (form validation errors), but in this circumstance I just installed the stock sentry with no extra configuration in a react app and get an error every time I the form hits an error on the validate() function.\nI tried the work around that was posted in the other linked issue:\njavascript\nbeforeBreadcrumb(breadcrumb, hint) {\n      const crumb = breadcrumb;\n      console.log('breadcrumb => ', breadcrumb, \", hint =>\", hint) //eslint-disable-line\n      if (crumb && crumb.error && crumb.error.data) {\n        crumb.error.data.extra.arguments = [];\n      }\n      //eslint-disable-line\n      return crumb;\n    },\nHowever, this doesn't work, and this is the last thing logged:\nshell\nbreadcrumb =>  {timestamp: 1544758757.379, category: \"console\", data: {\u2026}, level: \"error\", message: \"%o has no name assigned [object HTMLInputElement]\"}category: \"console\"data: {extra: {\u2026}, logger: \"console\"}level: \"error\"message: \"%o has no name assigned [object HTMLInputElement]\"timestamp: 1544758757.379__proto__: Object , hint =>\n. Actually, I thought this was the case but it might be a little further up the stack.  jQuery validate will log an error if an input to be validated is missing a name attribute, and it logs the DOM element directly to the console.\nHere is a screenshot:\n\nThis is pretty easy to reproduce:\n1. Install the above version of sentry\n2. Throw an error containing a reference to a DOM node using the DOM APIs:\njavascript\nthrow new Error(document.querySelector(\"#cool\"));\nWhere #cool is an input element with a value set (stringified would be [object HTMLInputElement])\nThe browser (Chrome 70.0.3538.110) will hang until an OOM crash, on the above stack.\nIt looks like this might be somewhat related but not the same issue as reported, so I can create a new issue instead.  Sorry for the confusion, it just originally looked exactly identical to the OP's issue.. https://stackblitz.com/edit/react-sentry-crash. ",
    "godban": "any accessing of dom freezes, crashes in 4.4+\nin 4.5+ sometimes we see runtime errors\ncost us a lot of time, to find out that this comes from Sentry. ",
    "string-areeb": "Still facing this in 4.5.3\n~~This happens for me if the logged element has a custom tag~~\n~~Happens in normal case as well~~\nHappens for elements rendered with Vue\n. ",
    "guischdi": "I do not want to remove the integration. It would cause way too much events if for example a user gets the same issue over and over again. But it is a different thing if events with different tags, extra or user data are dropped.\nSo my point is, the default behavior of the integration is wrong at least for Node.js error tracking in two points: First it's maybe questionable to only check the last event for deduplication. Second (and more important) the duplicate detection metrics are only considering technical parameters, not such that correspond to the case/environment/circumstances an event happened.. Yepp, this is the event: https://sentry.io/share/issue/e2c8d20b66d2406cb32c540d87654b4a/ (slightly modified to not publish our dsn)\nThe reason, why I use Sentry.captureEvent() is the following: I'm maintaining a hapi plugin that captures error events thrown by hapi route handlers (enriched with request data). See: hapi-sentry ./index.js#L41-L67. Hi @kamilogorek \nThanks for your detailed answer.\nDid I get it right: The common way to have a stack trace of a Node.js application show up in Sentry is to upload the files of each release via RewriteFrames integration or manually? If so, how comes that the stack trace on captureException/catch-all is shown and no 'source code not found' error is triggered.\nI tested how throwing an Error in a node_modules lib works. The error gets reported correctly including source code even from the lib. See https://sentry.io/share/issue/2b95ecb13ce24227b2184b2561e4f6e3/\nSo why does this work with captureException and fails with captureEvent?\n. @kamilogorek\n- this is the captureEvent Link\n- this is the captureException Link\nThanks for having a look at this!. ",
    "imPROgramer": "upgrade typescript to 2.4.0 to fix the issue.. ",
    "cnwangjie": "I installed @sentry/node by yarn.\n\n\n```\n$ yarn add @sentry/node@4.2.4                                                                                      \nyarn add v1.12.3                                                                                               \nwarning package.json: No license field                                                                             \nwarning No license field                                                                                           \n[1/4] Resolving packages...                                                                                        \n[2/4] Fetching packages...                                                                                         \n[3/4] Linking dependencies...                                                                                      \n[4/4] Building fresh packages...                                                                                   \n\nsuccess Saved lockfile.                                                                                                      \nsuccess Saved 10 new dependencies.                                                                                 \ninfo Direct dependencies                                                                                           \n\u2514\u2500 @sentry/node@4.2.4                                                                                              \ninfo All dependencies                                                                                              \n\u251c\u2500 @sentry/core@4.2.4                                                                                              \n\u251c\u2500 @sentry/minimal@4.2.4                                                                                           \n\u251c\u2500 @sentry/node@4.2.4                                                                                              \n\u251c\u2500 charenc@0.0.2                                                                                                   \n\u251c\u2500 cookie@0.3.1                                                                                                    \n\u251c\u2500 crypt@0.0.2                                                                                                     \n\u251c\u2500 is-buffer@1.1.6                                                                                                 \n\u251c\u2500 lsmod@1.0.0                                                                                                     \n\u251c\u2500 md5@2.2.1                                                                                                       \n\u2514\u2500 stack-trace@0.0.10                                                                                              \nwarning No license field                                                                                           \nDone in 5.62s.                                                                                                     \n```\n\n\nAnd I tried it in a new js file and following is the complete code in it:\n```js\nconst dsn = 'https://342c01805b1845788f75161376b6d08d@sentry.io/1311215'\nconst Sentry = require('@sentry/node')\nSentry.init({\n  dsn,\n  debug: true,\n})\nconsole.log(new Error('error0'))\nconsole.error(new Error('error1'))\nSentry.captureException(new Error('error2'))\n```\nI can get following output:\n\n\n```\nSentry Logger [Log]: Integration installed: Dedupe\nSentry Logger [Log]: Integration installed: InboundFilters\nSentry Logger [Log]: Integration installed: FunctionToString\nSentry Logger [Log]: Integration installed: Console\nSentry Logger [Log]: Integration installed: Http\nSentry Logger [Log]: Integration installed: OnUncaughtException\nSentry Logger [Log]: Integration installed: OnUnhandledRejection\nSentry Logger [Log]: Integration installed: LinkedErrors\nError: error0\n    at Object. (/home/wangjie/Workspace/tmp/js/sentry.js:10:13)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)\n    at startup (internal/bootstrap/node.js:266:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:596:3)\nError: error1\n    at Object. (/home/wangjie/Workspace/tmp/js/sentry.js:12:15)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)\n    at startup (internal/bootstrap/node.js:266:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:596:3)\n\n```\n\n\nBut I can only see the \"error2\" in Sentry.\n. Yes, I can see them in the breadcrumbs. So the integrations just capture those message as breadcrumbs but not create an error and I must call Sentry.captureException every time? I used console.log to output the unknown errors to stdout to collect them. I think that Console Integration could collect the errors directly to Sentry by mistake (usually I output them means I want to collect them.). I think it is troublesome to use Sentry if I have to change every place I use console.log before to Sentry.captureException. Is there a way to use it need not change my previous code too much?. > We will create console integration, which will change console into a reporter soon.\nI am looking forward to it. I think it is a general need to report an error by using console.log to output an instance of Error.. ",
    "Djiit": "Hi there, it's pretty confusing for me too. I configured the client as you did, and I'm still trying to understand how to send any message to Sentry.... ",
    "billywhizz": "sean, this is what i got working for oneflow-ship, after quite a bit of trial and error because the docs are very confusing: \nSentry.withScope(scope => {\n        scope.setExtra('context', context)\n        scope.setLevel('error')\n        Sentry.captureException(err, e => debug(e))\n})\ni am not convinced it is actually recording evrery error though.. ",
    "spobrien": "thanks @billywhizz - the issue is that this won't fit with what I currently have unfortunately and would like to avoid a restructure if possible.. hi @kamilogorek, thanks for your response. \nThe issue really is that I wanted nested functions to add to the scope as I go, with the goal of submitting the entire (built) scope when capturing the exception i.e building on your syntax - the handler function might look something like this:\nasync handler() {\n          scope.setTag('tag', 'tagName');\n}\n\nThe only way I can think of doing this is to add scope as a parameter to the function and this would involve a lot of changes to my code base and not sure is a great a approach anyways.\nI am not sure that is possible but I couldn't quite figure out myself how the scoping works exactly after reading the docs. . Yes I thought so - I have experimented with pushScope and popeScope a little also thanks. Passing the scope doesn't seem ideal but I also think it is really useful to be able to add as you go.\nFrom the docs it sounds like scoping is intelligently handled for express requests. Hows is this managed I wonder ?. Thanks @kamilogorek - that might be something to investigate then. . ",
    "nibynool": "@kamilogorek the link to #1727 in your previous comment is just this issue.. ",
    "shils": "Thanks for the response. Are there any plans to provide the express handlers at the client/hub level?. ",
    "sumeshkmp": "We are using Ravan.js npm and I could not find this in the latest doc here.\nThe npm installation part mentioned here is npm install @sentry/browser@4.3.0. Does this work for browser based apps or should I use Raven.js in latest version also ?. thanks @kamilogorek . ",
    "getogrand": "Same on @sentry/browser v4.5.3 with Safari iOS (WKWebView).\nThe solution provided by @kamilogorek works. But it is not a real solution.\nThe real problem is sentry-javascript failed to resolve proper transport on WebView.\nAnd a real solution must fix this problem.\nPlease reopen this issue or open new one and handle it properly, @kamilogorek.\nThanks.. ",
    "yuristrelets": "I got it. Your decision makes sense.\nThank you very much!. ",
    "pnewell": "I tried the beforeSend code but my new Issues still only have the base url:\n\n. Yah, the main thing I am trying to do is pass API errors to Sentry. These are \"caught\" by us but I was hoping to use Sentry to track them.\nWhat we are passing right now is resulting in the \"Non-Error exception captured with keys\" message and the following extra info getting passed:\n{\nconfig: {\nheaders: {}, \njsonpCallbackParam: callback, \nmethod: GET, \nparams: {}, \nparamSerializer: [Function: ngParamSerializer], \ntransformRequest: [\n[Function]\n], \ntransformResponse: [\n[Function: defaultHttpResponseTransform]\n], \nurl: http://example.test\n}, \ndata: \n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\u2026\n, \nheaders: [Function], \nstatus: 404, \nstatusText: Not Found, \nxhrStatus: complete\n}\nAnyone have recommendations on how to handle this? I was working to make a custom javascript error type when I hit this issue (because there is no easy way to pass these additional fields along).. ",
    "LuckyNoS7evin": "perfect thanks, I had tried the node_modules deletion,, however had to do a force on the clean to get that through.. ",
    "haikyuu": "Here is a reproduction case. Make sure to add your dsn to test things. \n. ",
    "lamgharitariq": "Hi, Thanks for your quick reply, \nI'm using an app running in both environments server Node & browser, and I just realized that I'm using the wrong node package on the browser side. \nBy updating to the right package @sentry/browser this fixed my issue.\nBest,. ",
    "gonzofish": "What was confusing to me was that I didn't understand behind the scenes that it was built with class-like syntax. Maybe a warning somewhere in the documentation that deconstruct will break behaviors?. ",
    "icewind7030": "@kamilogorek Sorry for the late, here is the demo repo:\nhttps://github.com/icewind7030/sentry-vue-debug.git\nJust a initial project created by Vue-Cli 3, and there's a line of error code in App.vue.\nPlease check is there anything wrong of my usage of sentry source map?. @kamilogorek I see, thanks for the reply!. ",
    "lestrato": "I got this too. My error thrown is: \n\nUncaught ReferenceError: tslib_1__default is not defined\n\nMy Solution: change tslib_1__default to tslib_1.\nFunny enough, the errors still show up on my sentry.io workspace.\n. ",
    "alxmiron": "Get same error too in 4.3.3. Reproduced for me with sentry/browser v4.4.2 on unhandled rejection. Downgrading to v4.4.1 helps. ",
    "maxaon": "Maybe I didn't fully described.  There is no declaration of variable\ntslib_1__default.\nThere are only require of tslib and variable called tslib_1. Also tslib\ndoesn't have default exports. I assume there could be issue in build\nprocess.\nOn Tue, Nov 20, 2018, 21:50 Kamil Og\u00f3rek <notifications@github.com wrote:\n\nThis is correct. tsilb is a direct dependency listed in package.json. If\nyou want to use the build directly from npm install as a standalone file,\nuse build/bundle.js instead.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n. \n",
    "fuqua": "Agreed 4.3.3 completely crashes my application when I import it. And 4.3.2 does not. I get the same error as @maxaon described. Except it happens thousands of times.. ",
    "piotrblasiak": "Same here. Getting this just by importing the lib, which should be helping me with my crashes and not causing them. Good stuff.. Great, thanks. Would be great if you could refer to this issue once it\u00b4s been released so that I can fix it in my code as well.. ",
    "mmoutenot": "This brought down our production web application tonight, and corresponded with some minor changes to our webpack config. I spent an hour pouring over the change trying to figure out why typescript libraries were breaking. Oh well. In good company :). ",
    "zetaab": "downgrading to 4.3.2 solves this problem. ",
    "reduxdj": "Sweet, i've been pulling my hair out for hours... thanks. ",
    "munderwoods": "Same here! Rolled back for now. . ",
    "GuusDeGraeve": "This issue seems to be re-introduced in version 4.6.0 or earlier. \nGetting below error now \ntslib_1__default is not defined\nI can see it is being referenced in node_modules/@sentry/browser/dist/index.js. ",
    "Galkon": "Can you guys please update the @sentry/electron module to reflect this new version? Installing the latest @sentry/electron comes with an @sentry/browser version with this issue.. ",
    "Oikio": "I was just going to open same issue. I have initialization outside of injectable class. I have also tried to run captureException outside of ngZone - didn't help.\nSo as in case above code ends up in endless cycle.\nHere are screenshots, hope it might help, I'm still stuck on this one.\n\n\n. Looks like it's the issue (Angular puts a lot of information there, at least in dev mode), solution helped partially, I couldn't see logs in console with code snippet from @kamilogorek. Also deleting ng props from original object is not a good idea. I ended up with this code, worked for me. \nts\n  beforeBreadcrumb: crumb => {\n    const shrinkedCrumb = { ...crumb };\n    if (crumb.data && crumb.data.extra && crumb.data.extra.arguments) {\n      shrinkedCrumb.data.extra = {\n        ...crumb.data.extra,\n        arguments: crumb.data.extra.arguments.map((arg: any) => {\n          const shrinkedArg = { ...arg };\n          delete shrinkedArg.ngDebugContext;\n          delete shrinkedArg.ngErrorLogger;\n          return shrinkedArg;\n        })\n      };\n    }\n    return shrinkedCrumb;\n  }\nBut don't rethrow error in your ErrorHandler#handleError, just log. I have this behavior (needs more investigation): rethrow doesn't log exception to console, console.error with rethrow logs twice the first time.. ",
    "mlakhara": "At first, I tried calling console.error directly but it was not working hence tried super.handleError as done in raven-js documentation (which is deprecated, I know, but I hoped it would work). \nIn short using console.error or super.handleError, both are behaving the same way.\n@Oikio Yes, it dies on the same line trying to serialize the circular object.\n. Cool, I am on it. . This is the github repo\nhttps://github.com/mlakhara/sentry-test\nAlthough the code does not break but the browser freezes for 5 seconds, so I guess it depends on the size of exception stracktrace.\n\n. Thanks @kamilogorek and @Oikio, your snippets worked perfectly.\n@Oikio I added a custom property to the error object in my error handler and called console.error only when the property was not available, to tackle the error being logged twice.\n```\nhandleError(error) {\n    Sentry.captureException(error.originalError || error);\n\n    if (!error.__logged) {\n        console.error(error);\n        error.__logged = true;\n    }\n\n\n    throw error;\n}\n\n```\n. ",
    "abraxxas": "@kamilogorek Thanks for your response. What i did was the following. I checked out this example https://github.com/sheerun/next.js/tree/with-sentry-fix/examples/with-sentry and added memwatch to the server.js\n```\nif (!dev) {\n  memwatch.on(\"leak\", info => {\n    console.log(\"memwatch::leak\");\n    console.error(info);\n  });\nmemwatch.on(\"stats\", stats => {\n    console.log(\"memwatch::stats\");\n    console.error(Util.inspect(stats, true, null));\n  });\n}\n```\nthen i ran the example using node 10.x (with 8.x i observed no memory issues) and requested the following ressources using our gatling testsuite:\n\"/\",\n    \"/_next/static/r1zovjaZ1TujaA0hJEp91/pages/_app.js\",\n    \"/_next/static/r1zovjaZ1TujaA0hJEp91/pages/_error.js\",\n    \"/_next/static/r1zovjaZ1TujaA0hJEp91/pages/index.js\",\n    \"/_next/static/runtime/main-1eaa6d1d0c8e7d048efd.js\",\n    \"/_next/static/chunks/commons.b34d260fee0c4a698139.js\",\n    \"/_next/static/runtime/webpack-42652fa8b82c329c0559.js\"\n(note the hashes might change for you)\nbut you should be able to achieve the same results with this approach very simple https://www.simonholywell.com/post/2015/06/parallel-benchmark-many-urls-with-apachebench/ \nafter a few thousand requests our memory usage was at almost 1GB and never reduced even when idling. As soon as i remove the request and errorHandler from server.js the memory-leak stops. So it seems to be connected to those 2. Maybe you either had too few requests or used node 8.x?. @kamilogorek intersting, but if you look on the heapsize in your\nreproduction you will see that it stays around 20mb without the handlers\nbut increases rapidly with them.\nI think the memory-leak warning without the handlers happens just because\ndue to the requests there is some constsnt memory increase.\nThere is still a vast difference in memory usage between the version with\nsentry and without.\nOn Thu, 29 Nov 2018, 12:45 Kamil Og\u00f3rek <notifications@github.com wrote:\n\n@abraxxas https://github.com/abraxxas I successfully reproduced it,\nhowever, it appears that server still leaks request objects on its own,\neven without Sentry handlers.\nhttps://streamable.com/bad9j\nThe growth rate is a tad larger, as we do attach domain and our own scope\nobject to the request, but it'd be utilized alongside the request by GC.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1762#issuecomment-442804709,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AIbrNlgPjPd5Jra1aahR-Dthf7XvbCexks5uz8jjgaJpZM4YvOA2\n.\n. \n",
    "tpbowden": "@kamilogorek Have you had chance to look into this yet? It is causing a huge memory leak for us. After looking at the heap, this line looks like it could be the root of problem: \nhttps://github.com/getsentry/sentry-javascript/blob/c27e1e32d88cc03c8474fcb1e12d5c9a2055a150/packages/node/src/handlers.ts#L233\nThe inspector showed thousands of entries into the eventProcessors list\n\nI don't have any context around how things are architected, but we have noticed that requests are not correctly scoped and are giving the wrong metadata (see #1773) so it appears everything is being managed in global state and not cleaned up when a request ends. @kamilogorek do you have any ideas for a workaround or temporary fix for this? Progress on the node issue looks quite slow. ",
    "alinchican": "We're currently using PM2 to restart Node.js processes when memory reaches a certain threshold. https://pm2.io/doc/en/runtime/features/memory-limit/#max-memory-threshold-auto-reload. ",
    "garthenweb": "@sunknudsen The issue is actually fixed in NodeJS, see https://github.com/nodejs/node/issues/23862 and https://github.com/nodejs/node/pull/25993. We probably need to wait for a release.. @sunknudsen More or less. It's the combination of the (deprecated) domain package and promises as far as I understood. See https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L233\nIn my case, I just removed the sentry middlewares from my (express) server to fix it.. ",
    "MartijnHols": "This isn't an issue in node but in Sentry as disabling the Sentry handlers fixes the issue;\n\n. ",
    "felixc": "Thanks for the info!\nIs the way Hubs work explained the docs somewhere? I'm concerned that using a \"global\" Hub may undo the point of using a custom Client; namely being able to send different events to different DSNs within the same web app. The instructions here https://docs.sentry.io/platforms/javascript/advance-settings/ say that this is the way \"to be able to manage several Sentry instances without any conflicts between them\", and they suggest creating your own Hub rather than using the global one.\nIs using the global Hub with a custom Client still safe for use in a context where multiple Sentry instances are active within the same webapp? These are all within the same organization so it's \"safe\" if info like breadcrumbs \"leak\" between them, and of course any exception that bubbles up to the top level unhandled will go to whatever is the default, but can different teams within one org send exceptions to different DSNs using this mechanism?\nApologies if this is all in the docs somewhere; I scoured them pretty extensively but couldn't find details on this use case. Thanks again for your help!\n. ",
    "jacoor": "@kamilogorek @felixc @HazAT  thank you all for this - I had the very same issue today.\nI have trouble testing multiple endpoints - @felixc did you manage verifying it?. ",
    "hokaccha": "@kamilogorek Thank you for your quick response \ud83d\udc4d . ",
    "markpradhan": "Check this issue here:\nhttps://github.com/yarnpkg/yarn/issues/6727. Guys, its not an issue with sentry. But with yarn / npm.\nCheck the issue i referenced, some others are experiencing the same thing while most don't.. I had go as far as removing installed versions of node (i was using n node version manager).\nInstalling it again, clearing all possible caches, node_modules folders and yarn.lock etc.. ",
    "dej611": "Tried again with yarn:\n$ yarn add @sentry/browser@4.4.0\nyarn add v1.7.0\n[1/4] \ud83d\udd0d  Resolving packages...\n\u2801 (node:93288) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\nerror Couldn't find package \"@sentry/browser\" on the \"npm\" registry.\ninfo Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.. I checked all the packages on npm and they're definetly there.\nAs a quick workaround I can use the CDN version, but there's something weird going on npm.\nBefore erroring for missing @sentry/browser, npm was complaining about the miss of @sentry/types package.. Strange. I have another module with a name starting with @ and found no issue.\nLooking at the linked issue on yarn I've done npm logout and tried to reinstall again and all went good. \ud83d\udc4d . ",
    "CharlieEarnup": "``` \n  Sentry.init({\n    dsn: 'https://753235da75a243988b77c7e850280d1d@sentry.io/1353261',\n    defaultIntegrations: false,\n  });\napp.get('/testme', (req, res, next) => {\n    try {\n      setTimeout(() => {\n        Sentry.configureScope((scope) => {\n          scope.setUser({\"email\": \"big.frank@example.com\"});\n        });\n      }, 2000);\n  const ham = {};\n  ham.bone.t = 'bacon';\n} catch (err) {\n  next(err);\n}\n\n});\napp.get('/testme2', (req, res, next) => {\n    try {\n      setTimeout(() => {\n        Sentry.configureScope((scope) => {\n          scope.setUser({\"email\": \"angst.joe@example.com\"});\n        });\n      }, 2000);\n  const ham = {};\n  ham.bone.home = 'bacon';\n} catch (err) {\n  next(err);\n}\n\n});\napp.use(Sentry.Handlers.errorHandler());\n```\nI was able to reproduce this error using this code. I may be missing something here, but I'm not sure how initializing a single global sentry hub (like the documentation does) would keep information separate when requests are being handled concurrently. \ud83e\udd14\nIs intended that the user initializes a hub on a per request basis?. @kamilogorek It is the first error middleware in my example code. It is the only error middleware in my example code.\n. @kamilogorek there must be some miscommunication here, do you mean it needs to go above the routes as well?. @kamilogorek Oh I see the requestHandler middleware is required in order to create a domain. Well it's not very nodey, but I guess it works. . @adrienboulle you don't know the half of it that Api is getting deprecated for a reason. \nhttps://nodejs.org/en/docs/guides/domain-postmortem/. @kamilogorek it's actually very unclear because nowhere does it communicate that you need requestHandler to support errorHandler. I personally know that I saw domains in the requestHandler code and omitted it on purpose.\n\nit won't catch async errors without domains.\n\nIt won't catch unhandled async errors without domains. Typically speaking though most people tend to implement their controllers with a wrapper that handles their errors. If you absolutely cannot take any chances with uncaught errors, sure domains work, but for most they are way overkill.. ",
    "asafigan": "This is a huge problem with breadcrumbs. If you capture an event it will have all of the breadcrumbs from all of the requests that the machine has received.. That is what I feared. I think it's a problem because it looks like all the sentry libraries have the same interface but JavaScript is not like most languages. I don't think a scope system can really works in a concurrent environment like JavaScript.. ",
    "adrienboulle": "@asafigan @kamilogorek not only for breadcrumbs.\nAs @CharlieEarnup maybe I missed something but as I understood the source code, the node integration of sentry is just not useable at all with the current implementation, there is only one hub created, shared via the global variable.\nScope seems to be shared everywhere, its written is if we are in the browser with only one context or as if javascript request where synchronous\nplus, captureMessage and captureException signatures shows that it assumes that there is one context, this is a major issue, and Node domains is not the answer, we should be able to use Sentry sdk without domains, in my app i have a custom errorHandler cause I want to be able to keep trace of what happens (error or not) from req start, during, and sometimes after end of request, all of this being obviously asynchronous, and many requests are handled simultaneously, so i just want to send whatever i want to sentry, whenever i want.\nonly solution I can think of is using captureEvent by itself. yes exactly, and when you read the doc it become even clearer, its write as if javascript was a thread by request language :\nhttps://docs.sentry.io/enriching-error-data/scopes. There is no way to separate context between requests without the domains.\n\njuste declare a scope variable in the request object\n\nYou can, you just won't have a separation of context data.\n\nidem\n\nso i just want to send whatever i want to sentry, whenever i want.\n\nwe have different views of what an advanced usage is but ok :)\n\nthx for the hints, I'll use BaseClient and not BrowserClient I guess\nStill, I think that the usage of domains is way overkill. @CharlieEarnup exactly, and Sentry is supposed to be a tool, not a framework, i handle my code errors by myself I wont rely on a third party for that . I get that most people want a plug and play solution, the \"issue\" is that this client is black or white, either plug and play or git clone the project and try to find how to do. @HazAT now that things has been explained and that I have explored the code by myself yes basically, even so I think the use of domain is not a very good idea but for my use case I do not really care. I think it would be very very helpful to explain in the doc how to use the low level API (how to send sentry events with request, user, exception/message and tags. ",
    "wisemanta": "\nFixed in 4.2.2\n\nYou mean 4.4.2, right?. ",
    "TwunTee": "I forgot to add, I am using sentry browser for angular. I will add a sample repo soon.. Sorry for the trouble, The report dialog is working as intended, was a mistake on my part.\nI thought i can show report dialog without throwing an error and when i was trying to open up the error dialog without an exception, it threw up another error asking about the event id, which was dealt by the default error handler and it had the default error dialog. \nIt would great if it was documented, easy to trip since it is called as user feedback and some might end up using it as custom action without any error like I did for users to report any errors they find manually like UI errors. ",
    "mrcarl79": "Hi Simon, Something I'm not familiar with but may give me enough to go on to fix this in our use case. I would like to point out for Sentry that this code is straight from the  documentation here https://docs.sentry.io/enriching-error-data/context/?platform=browser so they are supplying examples that doesn't work in the latest version of IE so maybe some comments or changes are needed there if this is the issue. Thanks for the help :). Great looks like it is working so will comment and close. The change from the documented code for anyone interested in having it work in IE and not familiar with this arrow function issue as I was is as follows:\n<script>\n        Sentry.configureScope(function (scope) {\n            scope.setUser({ \"email\": \"john.doe@example.com\" });\n        });\n    </script>. ",
    "vhu": "I am also in the process of migrating our error reporting from Raven to Sentry and have run into this same issue. I am using koa2 as our web framework.\nPreviously, when I passed in the request object - Raven would magically parse it and attach all relevant fingerprint and etc. data for it to be formatted.\nI attempted to do the same using captureEvent, but it doesn't seem to have the same behavior.\nIs there something that I'm missing when passing the request to captureEvent or is there a different way I should be adding this data?. So what's the best way to replicate what happened before without us needing to build the event ourselves? It seems even with the event processor I would still need to fill in exact fields manually.\nFor example (in koa2), when I passed the request using Raven.captureException, I would simply pass in the ctx.request and it would correctly auto-populate the user tags and headers.\nCurrently, when I pass in ctx.request in scope.addEventProcessor as event.request the only tag that shows up correctly is the url. \n. Thanks, @HazAT! That solved it for koa2 as well. The added line is:\nSentry.Handlers.parseRequest(event, ctx.request);. ",
    "yurtaev": "@HazAT Thanks, it's works.\nMy solutions for Restify 4.x:\n```js\nconst server = restify.createServer({\n  handleUncaughtExceptions: true,\n})\nconst onError = (req, res, route, error) => {\n  Sentry.withScope(scope => {\n    // scope.setTag()\n    // scope.setUser()\nscope.addEventProcessor(async event => {\n  return Sentry.Handlers.parseRequest(event, req)\n})\n\nSentry.captureException(error)\n\n})\n}\nserver.app.on('uncaughtException', (req, res, route, error) => {\n  onError(req, res, route, error)\n  res.send(new restify.errors.InternalServerError(error))\n})\n// Loggin RestError/NotFound/etc\n// server.app.on('after', onError)\n```. ",
    "EyalSi": "Thanks!, though it looks odd, as the script which create the error, is the one that load and init sentry. I ended up surrounding my code with try/catch and sending specifically the exception using Sentry.captureException(e). ",
    "forrestmid": "@kamilogorek That is exactly what I needed. Thanks!. ",
    "gforcada": "Update: actually the example code on the README itself do work fine on Chrome, and not at all on Firefox :confused: . ",
    "mogelbrod": "We started having the same issue for some errors after migrating from raven-js to @sentry/browser yesterday (see screenshot). Each of these get a unique fingerprint (and are thus considered different errors). Interestingly Sentry still reports some of these instances as a proper error (with working grouping and stack traces).\n\n. The errors that seem to be parsed incorrectly appear to be originating from a React error boundary. The code looks something like this:\n```js\nimport * as Sentry from '@sentry/browser'\nimport React from 'react'\nimport ErrorView from './'\nSentry.init({\n  dsn: '...',\n  release: '...',\n  environment: '...',\n  ignoreErrors: [\n    /getHostNode/,\n    /_currentElement/,\n    /__gCrWeb.autofill.extractForms/,\n    /the page is being unloaded/,\n  ],\n  blacklistUrls: [\n    /extensions\\//i,\n    /^chrome:\\/\\//i,\n  ],\n  beforeSend(event, hint) {\n    // Some misc code redacted\n    return event\n  },\n})\nexport default class ErrorBoundary extends React.Component {\n  state = {\n    error: null\n  }\ncomponentDidCatch(error, stackInfo) {\n    Sentry.withScope(scope => {\n      scope.setTag('errorBoundary', this.props.name)\n      scope.setTag('logger', 'errorBoundary')\n      Sentry.captureException(error)\n    })\nthis.setState({ error })\n\n}\nrender() {\n    if (!this.state.error) {\n      return this.props.children || null\n    }\nreturn <ErrorView error={this.state.error} />\n\n}\n}\n. Thanks for the quick response, much appreciated!\nWe're running `react@16.6.0`.. For the record we're also experiencing the exact same issue @lobsterkatie documented above. Could the SDK have issues parsing `onunhandledrejection` errors perhaps?. @HazAT: Any update or ETA regarding this? We're having limited success debugging errors with only the JSON stack trace available \ud83d\ude05. The second argument is only supported in `raven-js`/`raven-node` from what I can see. You'll have to do something like this in `@sentry/*`:js\nSentry.withScope(scope => {\n  scope.setTag('tagName', 'tagValue')\n  scope.setExtra('extraName', 'extraValue')\n  Sentry.captureException(err)\n})\n```\n. ",
    "bblack": "I think the appropriate place for this comment is the zendesk issue where I filed it, but I was directed here, so:\nIt seems that sentry's js lib reports unhandled rejections, where the rejection value is not an Error (for example, a string), with a 'type' and 'value' of '[undefined]'.\nI was told this was improved in 4.5.0, though it doesn't seem to be. For now, I'm adding what additional info I can (the type of the rejection value and the fact that it was an unhandled rejection) this way:\njs\nSentry.init({\n    beforeSend: function(body){\n      if (body.exception.mechanism.type == 'onunhandledrejection') {\n        for (var i = 0; i < body.exception.values.length; i++) {\n          if (body.exception.values[i].value == undefined) {\n            var originalException = arguments[i + 1].originalException;\n            if (originalException) {\n              body.exception.values[i].type = originalException.constructor.name + ' [unhandled rejection]';\n              body.exception.values[i].value = originalException.toString();\n            }\n          }\n        }\n      }\n      return body;\n    },\n    // ...\nIs there a way we can get this information into sentry's js lib? Also, it would be really great to get the line where the rejection occurred, but AFAIK there's no way to\u2014since the rejection value isn't an Error, it has no stack trace, and chrome's unhandled rejection callback has no knowledge of the line at which it occurred either. Chrome itself seems aware of the line number at least, since its console shows an error that looks like this:\nUncaught (in promise) nope\nPromise.then (async)\n(anonymous) @ index.html:7\nThe above is from the following test page:\nhtml\n<html>\n<body>\n<script>\nwindow.onunhandledrejection = function(){\n  debugger;\n};\nPromise.resolve(1).then(function(){\n  throw 'nope';\n});\n</script>\n</body>\n</html>. ",
    "bs-thomas": "Ah, nice.  Sorry didn't catch that issue.  Thank you very much!. ",
    "samholmes": "``\n$ rm -rf node_modules\n$ npm cache clean --force\n$ npm install\nWARN notice [SECURITY] debug has the following vulnerability: 1 low. Go here for more details: https://nodesecurity.io/advisories?search=debug&version=0.7.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] mysql has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=mysql&version=2.3.2 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] request has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=request&version=2.36.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] constantinople has the following vulnerability: 1 critical. Go here for more details: https://nodesecurity.io/advisories?search=constantinople&version=2.0.1 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] uglify-js has the following vulnerabilities: 2 low. Go here for more details: https://nodesecurity.io/advisories?search=uglify-js&version=2.4.1 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] moment has the following vulnerabilities: 1 moderate, 1 low. Go here for more details: https://nodesecurity.io/advisories?search=moment&version=2.6.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] uglify-js has the following vulnerability: 1 low. Go here for more details: https://nodesecurity.io/advisories?search=uglify-js&version=2.4.24 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] gm has the following vulnerability: 1 critical. Go here for more details: https://nodesecurity.io/advisories?search=gm&version=1.16.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] tunnel-agent has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=tunnel-agent&version=0.4.3 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] uglify-js has the following vulnerabilities: 2 low. Go here for more details: https://nodesecurity.io/advisories?search=uglify-js&version=2.2.5 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] mysql has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=mysql&version=0.9.6 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] minimatch has the following vulnerability: 1 high. Go here for more details: https://nodesecurity.io/advisories?search=minimatch&version=0.3.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] hawk has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=hawk&version=1.0.0 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] qs has the following vulnerabilities: 2 high. Go here for more details: https://nodesecurity.io/advisories?search=qs&version=0.6.6 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] ms has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=ms&version=0.6.2 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] debug has the following vulnerability: 1 low. Go here for more details: https://nodesecurity.io/advisories?search=debug&version=1.0.2 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] lodash has the following vulnerability: 1 low. Go here for more details: https://nodesecurity.io/advisories?search=lodash&version=2.4.2 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] mime has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=mime&version=1.2.11 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm auditto get more info.\nWARN notice [SECURITY] hoek has the following vulnerability: 1 moderate. Go here for more details: https://nodesecurity.io/advisories?search=hoek&version=0.9.1 - Runnpm i npm@latest -gto upgrade your npm version, and thennpm audit` to get more info.\nnpm WARN backend@0.0.0 No repository field.\nnpm WARN backend@0.0.0 No license field.\nadded 272 packages in 6.433s\n$ cat node_modules/@sentry/node/package.json | grep main\n```\nStill same result. It shouldn't be my other packages effecting the install should it?. I solved my problem by installing nvm and using that to install the latest version of node and npm (v10.14.2 and v6.4.1, respectively). Afterwards, I removed my node_modules folder and ran npm install again. Now cat node_modules/\\@sentry/node/package.json | grep main returns a line, and require('@sentry/node') works.\nTo anyone who has this issue, try using nvm to install node and npm instead of using n (which I was using).\nAnother tip: Make sure ~/.npm is owned not owned by root. I ran sudo chown -R holmes ~/.npm to do this. If cached files are owned by root, this can cause issues when installing.. ",
    "kishor-bhatt": "Hey Kamil,\nI will add that with setExtra. Thanks for clarifying it.\nRegards,\nKishor\nOn Wed 12 Dec, 2018, 3:39 PM Kamil Og\u00f3rek, notifications@github.com wrote:\n\nHey @kishor-bhatt https://github.com/kishor-bhatt, you can do this\nusing extra context \u2013\nhttps://docs.sentry.io/enriching-error-data/context/?platform=javascript\nSentry.withScope((scope) => {\nscope.setExtra(\"response\", API_responseObj);\nSentry.captureException(err);\n});\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getsentry/sentry-javascript/issues/1794#issuecomment-446533014,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQIaZTKfeiOdvQhli3awbC6Lu6iDi9jiks5u4NXwgaJpZM4ZPDwn\n.\n. \n",
    "Getz85": "I've got the same issue, the errors thrown by captureException are not caught, because I think it's an async error. So after that, I thought that captureException can return a promise, but it's not.\nI assume captureException make async calls to the Sentry server, so the function should provide a way to correctly manage that.. Just give a unvalid sentry dns.\nCan't reproduce on repl.it, but you can create a little project with only Sentry as dependencies, and then create the following script and launch it:\n``javascript\nconst Sentry = require('@sentry/node');\nSentry.init({ dsn:https://test@sentry.io/unknown_project_56465` });\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\nprocess.on('unhandledRejection', (reason) => {\n  throw reason;\n})\nprocess.on('uncaughtException', async (err) => {\n  console.error('uncaughtException, not cool!')\n  console.error(err);\n  process.exit(1);\n});\ntry {\n  throw new Error('An error occurs!');\n} catch (err) {\n  try {\n    Sentry.captureException(err);\n  }\n  catch (err) {\n    console.error('caughtException, nice!');\n    console.error(err);\n  }\n}\nsleep(10000).then(() => console.log('Waiting sentry exception'));\n````\nThe message 'uncaughtException' is displayed, and not 'caughtException' as it should.. The issue here is not to get the Sentry specific HTTP error, indeed we don't need it.\nPersonally, I just added the try-catch statement around because captureException raised an uncaughtException in the app... and that's the real problem here. The exception caused by captureException is not caught, so the 'uncaughtException' event is fired, and generally the app crash (so it's not really \"fire and forget\").\nIs this really the desired behavior?. I didn't knew that Sentry listened to 'uncaughtException'. My goal was to log this uncaughtException with Sentry, but it's automatically done by the SDK? Maybe this should be documented (sorry if this is already written, I missed it).\nSo what if we want to have additional steps in our own uncaughtException event, without catching the Sentry error ?. Thanks kamilogorek. I'm stuck with this:\n``javascript\nconst Sentry = require('@sentry/node');\nSentry.init({\n  dsn:https://test@sentry.io/unknown_project_56465`,\n  debug: true,\n  integrations: [\n    new Sentry.Integrations.OnUncaughtException({\n      onFatalError: async (err) => {\n        console.error('uncaughtException, not cool!')\n        console.error(err);\n        await Sentry.getCurrentHub().getClient().captureException(err);\n        process.exit(1);\n      }\n    }),\n    new Sentry.Integrations.OnUnhandledRejection(\n      //No callback here?\n    )\n  ]\n});\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\ntry {\n  throw new Error('An error occurs!');\n} catch (err) {\n  Sentry.captureException(err);\n}\nsleep(100).then(() => {\n  throw new Error('Async error');\n});\n//throw new Error('Uncaught error');\nsleep(10000).then(() => console.log('Waiting sentry exception'));\n```\nFirst, I must add await Sentry.getCurrentHub().getClient().captureException(err);, otherwise the app will not wait all the http request to finish before exiting. So, it's like I capture myself the uncaughtException... Or maybe there is a better solution?\nThen, I don't understand how to use the OnUnhandledRejection Integration, as it seems that you can't pass any callback to it, as you do with the OnUncaughtException options?\nAnd last question, there is no way to pass (or to plan for addition of) an option to Sentry to deactivate the automatic exception collect instead?. ",
    "ntelkedzhiev": "@kamilogorek Not really... This is happens once you reach your account quota.\nAs @Getz85 said, there is no way to manage the behavior of the async call to the server. . @Getz85 Thanks. \n@kamilogorek Here it is: https://codesandbox.io/s/8z11m06300.. @kamilogorek Why would you depend on logging out your errors in  process.on('unhandledRejection', ...) when it is global for the whole node.js app? I would say the majority of apps in production will overwrite it and most of them will throw the error. Also what happens if there is another library that also depends on the 'uncaughtException'? . @Getz85 Here is how I'm dealing with it:\njavascript\n if (err.name !== 'SentryError') {\n      throw err; // Rethrow to uncaughtException\n } else {\n      ...\n}\n.... Ok. Thanks for the detailed answer. I will experiment with the OnUncaughtException integration.. ",
    "ejmartin504": "I believe we have a similar issue, where Sentry leads to an uncaughtRejection because of the request being rejected due to rate limiting (HTTP error 429). We have addressed this with:\nprocess.on('unhandledRejection', (err) => {\n  if (!(err instanceof SentryError)) {\n    // ignore \n  } else { \n    process.exit();\n  } \n}\nI'm not crazy about doing this to be honest...\n. ",
    "mshwery": "What's the expectation for handling Sentry rate limits? It seems pretty surprising that Sentry.captureException could lead to an unhandledRejection.. ",
    "philipooo": "I also get the error @KevCJones mentioned in his last post. I tried switching vom raven-js to @sentry/browser@4.4.2. ",
    "candidosales": "I get same error.\nMy stack:\n\"@angular/animations\": \"^7.2.0\",\n    \"@angular/cdk\": \"^7.2.1\",\n    \"@angular/common\": \"^7.2.0\",\n    \"@angular/compiler\": \"^7.2.0\",\n    \"@angular/core\": \"^7.2.0\",\n    \"@angular/flex-layout\": \"^7.0.0-beta.23\",\n    \"@angular/forms\": \"^7.2.0\",\n    \"@angular/http\": \"^7.2.0\",\n    \"@angular/material\": \"^7.2.1\",\n    \"@angular/platform-browser\": \"^7.2.0\",\n    \"@angular/platform-browser-dynamic\": \"^7.2.0\",\n    \"@angular/router\": \"^7.2.0\",\n    \"@auth0/angular-jwt\": \"^2.1.0\",\n    \"@sentry/browser\": \"^4.5.0\",\n    \"@types/awesomplete\": \"^1.1.8\",\n    \"core-js\": \"^2.6.2\",\n    \"hammerjs\": \"^2.0.8\",\n    \"rxjs\": \"^6.3.3\",\n    \"tslib\": \"^1.9.3\",\n    \"typescript\": \"~3.2.2\",\n    \"zone.js\": \"^0.8.27\". @HazAT follow an example reproducing the error: https://github.com/candidosales/sentry-error. @HazAT I made upgrade the version to 4.5.2, stopped the error looping but I don't receive the errors in my account. Can you verify?\nhttps://github.com/candidosales/sentry-error. @HazAT When will publish the new version with the fix? . I get the same error!. @HazAT When will publish the new version with the fix?\n. @HazAT It`s working! :D ... Thanks! . ",
    "vital101": "The output of console.log(angularRaven) is:\n{$interpolateMinErr: \u0192, element: \u0192, bootstrap: \u0192, copy: \u0192, extend: \u0192, \u2026}\n    $$csp: \u0192 ()\n    $$minErr: \u0192 minErr(module, ErrorConstructor)\n    $interpolateMinErr: \u0192 ()\n    bind: \u0192 bind(self, fn)\n    bootstrap: \u0192 bootstrap(element, modules, config)\n    callbacks: {$$counter: 0}\n    copy: \u0192 copy(source, destination)\n    element: \u0192 ( selector, context )\n    equals: \u0192 equals(o1, o2)\n    extend: \u0192 extend(dst)\n    forEach: \u0192 forEach(obj, iterator, context)\n    fromJson: \u0192 fromJson(json)\n    getTestability: \u0192 getTestability(rootElement)\n    identity: \u0192 identity($)\n    injector: \u0192 createInjector(modulesToLoad, strictDi)\n    isArray: \u0192 isArray()\n    isDate: \u0192 isDate(value)\n    isDefined: \u0192 isDefined(value)\n    isElement: \u0192 isElement(node)\n    isFunction: \u0192 isFunction(value)\n    isNumber: \u0192 isNumber(value)\n    isObject: \u0192 isObject(value)\n    isString: \u0192 isString(value)\n    isUndefined: \u0192 isUndefined(value)\n    lowercase: \u0192 (string)\n    merge: \u0192 merge(dst)\n    module: \u0192 module(name, requires, configFn)\n    noop: \u0192 noop()\n    reloadWithDebugInfo: \u0192 reloadWithDebugInfo()\n    toJson: \u0192 toJson(obj, pretty)\n    uppercase: \u0192 (string)\n    version: {full: \"1.5.11\", major: 1, minor: 5, dot: 11, codeName: \"princely-quest\"}\n    __proto__: Object\n\nI know it isn't fully expanded, but hopefully thats enough to answer your question. Thanks!. ",
    "surajpoddar16": "I tried running it outside Angular zone but no help. :( . Seems like this issue was because of window.console being overridden by breadcrumbs.instrumentConsole, which adds breadcrumbs for console. Since this was running inside angular zone a change detection was being triggered. Now if you put console.log inside Angular's tick method or ngOnChanges or other life cycle hooks, the console.log command will inturn trigger another change detection run and so on, ending up with an infinite loop. I am closing this issue for now, and will keep sure not to leave any log inside any lifecycle hook. Though I think these things should run outside Angular's Zone. . ",
    "uqe": "in my case this happens if react application in iframe with django grappelli. ",
    "DzmVasileusky": "Memory crash remains in 4.5.1 for me.\nNow it's falling on safeNormalize\nhttp://joxi.ru/GrqgYe3t4Gb1J2\nOriginal error:\n\nmessage: \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: 'ngIf: [object Object]'. Current value: 'ngIf: true'.\"\nstack: \"Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: 'ngIf: [object Object]'. Current value: 'ngIf: true'.\u21b5    at viewDebugError (http://www.crexi.local:8080/vendor.js:80916:15)\u21b5    at expressionChangedAfterItHasBeenCheckedError (http://www.crexi.local:8080/vendor.js:80904:12)\u21b5    at checkBindingNoChanges (http://www.crexi.local:8080/vendor.js:81006:15)\u21b5    at checkNoChangesNodeInline (http://www.crexi.local:8080/vendor.js:83877:9)\u21b5    at checkNoChangesNode (http://www.crexi.local:8080/vendor.js:83866:9)\u21b5    at debugCheckNoChangesNode (http://www.crexi.local:8080/vendor.js:84470:24)\u21b5    at debugCheckDirectivesFn (http://www.crexi.local:8080/vendor.js:84398:13)\u21b5    at Object.eval [as updateDirectives] (ng:///SignInPageModule/SignInPageComponent.ngfactory.js:86:9)\u21b5    at Object.debugUpdateDirectives [as updateDirectives] (http://www.crexi.local:8080/vendor.js:84387:21)\u21b5    at checkNoChangesView (http://www.crexi.local:8080/vendor.js:83765:14)\u21b5    at callViewAction (http://www.crexi.local:8080/vendor.js:84004:21)\u21b5    at execComponentViewsAction (http://www.crexi.local:8080/vendor.js:83966:13)\u21b5    at checkNoChangesView (http://www.crexi.local:8080/vendor.js:83768:5)\u21b5    at callViewAction (http://www.crexi.local:8080/vendor.js:84004:21)\u21b5    at execEmbeddedViewsAction (http://www.crexi.local:8080/vendor.js:83987:17)\u21b5    at checkNoChangesView (http://www.crexi.local:8080/vendor.js:83766:5)\u21b5    at callViewAction (http://www.crexi.local:8080/vendor.js:84004:21)\u21b5    at execComponentViewsAction (http://www.crexi.local:8080/vendor.js:83966:13)\u21b5    at checkNoChangesView (http://www.crexi.local:8080/vendor.js:83768:5)\u21b5    at callWithDebugContext (http://www.crexi.local:8080/vendor.js:84653:25)\u21b5    at Object.debugCheckNoChangesView [as checkNoChangesView] (http://www.crexi.local:8080/vendor.js:84358:12)\u21b5    at ViewRef_.push../node_modules/@angular/core/fesm5/core.js.ViewRef_.checkNoChanges (http://www.crexi.local:8080/vendor.js:82172:64)\u21b5    at http://www.crexi.local:8080/vendor.js:78597:67\u21b5    at Array.forEach ()\u21b5    at ApplicationRef.push../node_modules/@angular/core/fesm5/core.js.ApplicationRef.tick (http://www.crexi.local:8080/vendor.js:78597:29)\u21b5    at http://www.crexi.local:8080/vendor.js:78486:105\u21b5    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://www.crexi.local:8080/polyfills.js:8609:26)\u21b5    at Object.onInvoke (http://www.crexi.local:8080/vendor.js:77863:33)\u21b5    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.invoke (http://www.crexi.local:8080/polyfills.js:8608:32)\u21b5    at Zone.push../node_modules/zone.js/dist/zone.js.Zone.run (http://www.crexi.local:8080/polyfills.js:8359:43)\u21b5    at NgZone.push../node_modules/@angular/core/fesm5/core.js.NgZone.run (http://www.crexi.local:8080/vendor.js:77777:28)\u21b5    at Object.next (http://www.crexi.local:8080/vendor.js:78486:81)\u21b5    at SafeSubscriber.schedulerFn [as _next] (http://www.crexi.local:8080/vendor.js:74078:52)\u21b5    at SafeSubscriber.push../node_modules/rxjs/_esm5/internal/Subscriber.js.SafeSubscriber.__tryOrUnsub (http://www.crexi.local:8080/vendor.js:231893:16)\u21b5    at SafeSubscriber.push../node_modules/rxjs/_esm5/internal/Subscriber.js.SafeSubscriber.next (http://www.crexi.local:8080/vendor.js:231831:22)\u21b5    at Subscriber.push../node_modules/rxjs/_esm5/internal/Subscriber.js.Subscriber._next (http://www.crexi.local:8080/vendor.js:231774:26)\u21b5    at Subscriber.push../node_modules/rxjs/_esm5/internal/Subscriber.js.Subscriber.next (http://www.crexi.local:8080/vendor.js:231751:18)\u21b5    at EventEmitter.push../node_modules/rxjs/_esm5/internal/Subject.js.Subject.next (http://www.crexi.local:8080/vendor.js:231516:25)\u21b5    at EventEmitter.push../node_modules/@angular/core/fesm5/core.js.EventEmitter.emit (http://www.crexi.local:8080/vendor.js:74062:76)\u21b5    at checkStable (http://www.crexi.local:8080/vendor.js:77832:35)\u21b5    at Object.onHasTask (http://www.crexi.local:8080/vendor.js:77876:21)\u21b5    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate.hasTask (http://www.crexi.local:8080/polyfills.js:8662:37)\u21b5    at ZoneDelegate.push../node_modules/zone.js/dist/zone.js.ZoneDelegate._updateTaskCount (http://www.crexi.local:8080/polyfills.js:8682:22)\u21b5    at Zone.push../node_modules/zone.js/dist/zone.js.Zone._updateTaskCount (http://www.crexi.local:8080/polyfills.js:8506:34)\u21b5    at Zone.push../node_modules/zone.js/dist/zone.js.Zone.runTask (http://www.crexi.local:8080/polyfills.js:8426:30)\u21b5    at drainMicroTaskQueue (http://www.crexi.local:8080/polyfills.js:8816:35)\". It seems that some really large environment extra arguments are causing this.\nIt was references to Angular classes for me. \nTemporarily I have to reformat breadcrumbs to include only message, name and stack.\n\n```\nSentry.init({\n    beforeBreadcrumb: (breadcrumb, hint) => {\n    if (breadcrumb.data && breadcrumb.data.extra && breadcrumb.data.extra.arguments) {\n\n        breadcrumb.data.extra.arguments = breadcrumb.data.extra.arguments.map((arg: any) => {\n\n            return {\n                message: arg.message,\n                name: arg.name,\n                stack: arg.stack\n            }\n\n        });\n\n    }\n    return breadcrumb;\n\n}\n\n});\n```. Works now, thank you. ",
    "feorex": "Issue is reproduced in version 4.6.3 (current version at the moment) in Angular project.\nCall stack:\nassign (object.js:194)\ndecycle (object.js:282)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\ndecycle (object.js:294)\n(anonymous) (object.js:311)\nsafeNormalize (object.js:320)\npush../node_modules/@sentry/hub/dist/scope.js.Scope.addBreadcrumb (scope.js:183)\npush../node_modules/@sentry/core/dist/baseclient.js.BaseClient.addBreadcrumb (baseclient.js:180)\npush../node_modules/@sentry/hub/dist/hub.js.Hub.invokeClient (hub.js:49)\npush../node_modules/@sentry/hub/dist/hub.js.Hub.addBreadcrumb (hub.js:224)\npush../node_modules/@sentry/browser/dist/index.js.Breadcrumbs.addBreadcrumb (index.js:3998)\n(anonymous) (index.js:3715)\nView_UserDropdownComponent_6 (UserDropdownComponent.html:25)\npush../node_modules/@angular/core/fesm5/core.js.DebugContext_.logError (core.js:22708)\npush../node_modules/@angular/core/fesm5/core.js.ErrorHandler.handleError (core.js:14624)\ndispatchEvent (core.js:19105)\n(anonymous) (core.js:19548)\n(anonymous) (platform-browser.js:993)\nsentryWrapped (index.js:3219)\npush../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (zone.js:421)\nonInvokeTask (core.js:16126)\npush../node_modules/zone.js/dist/zone.js.ZoneDelegate.invokeTask (zone.js:420)\npush../node_modules/zone.js/dist/zone.js.Zone.runTask (zone.js:188)\npush../node_modules/zone.js/dist/zone.js.ZoneTask.invokeTask (zone.js:496)\ninvokeTask (zone.js:1540)\nglobalZoneAwareCallback (zone.js:1566). @HazAT  I've checked, the latest workable version is 4.5.3 at the moment. @kamilogorek Just tried 4.6.4, and I can confirm that issue is fixed for my case. Thank you very much for a quick fix!. ",
    "fvcaputo": "Yes, this also happens with me. Still haven't been able to figure out how to turn if off.\nWhat I noticed is it's not logged under \"Additional Data\" if you do Sentry.captureException(new Error('cool error'));\nBut any other way, the string you add on captureException or captureMessage is logged like that.. I have tried to filter out FunctionToString but I'm still getting this error. Maybe I'm filtering wrong, but I tried simply:\njavascript\nSentry.init({\n  ...,\n  integrations: integrations => integrations.filter(integration => integration.name !== 'FunctionToString')\n});\n@AVVS Would you mind sharing your init code? Maybe it's a combination of options that turn this off.. Seems like I tracked down the issue on ExtraErrorData, I submitted a small PR to deal with it.. Sure, done!. ",
    "AVVS": "this is FunctionToString integration in sentry/core, killed a few hours to find.... if you want a workaround - disable default integrations or filter out function to string during init call\nhttps://github.com/getsentry/sentry-javascript/blob/4.4.2/packages/core/src/integrations/functiontostring.ts#L21-L27 - culprit. ",
    "spruce-bruce": "Thanks! I'll be back at work soon and I'll try that first thing. I'm seeing the same as @fvcaputo. Filtering out FunctionToString isn't preventing this, but filtering out ExtraErrorData does stop this from happening. \nI'm thinking right now that ExtraErrorData is a useful enough integration for me to keep that on and live with the weird message string for now.. ",
    "klaascuvelier": "I have a similar issue with @sentry/browser@4.4.2. \nGetting the circular structure error on 2 places:\n- when I do a console.log of my message, disabling the console in the Breadcrumbs Integration fixed this\n- when captureException is called.\nDowngrading to 4.4.1 fixes both of the issues\nWanted to add a stackblitz example but can't get sentry/browser@4.4.2 working on there. 4.4.1 does work for me: https://sentry-circular-issue.stackblitz.io. That's great! Thanks! \ud83e\udd73. ",
    "sgotre": "@klaascuvelier thanks for the solution with version 4.4.1. Thanks for the update! Unfortunately this raised a new error now. Resulting in a complete browser crash :( We completely disabled sentry for now.. @HazAT Sorry for being so unprecise. had been very much work these days. We used it on a video streaming website. When the videoplayer (videojs) raised an error the script came in an infinite loop whilst removing the circular structures. videojs is a very huge object with a lot of circulars and unpredictible errors :/ . It is hard to reproduce, but i will try in the next days. . ",
    "sandorTuranszky": "Any update on that apart from downgrading to 4.4.1?. @mhemrg downgrading to 4.4.1 fixed for me. ",
    "koenpunt": "This seems to be the offending commit: https://github.com/getsentry/sentry-javascript/commit/dece6ee52fc854e15a6908bbe83cf6c56bb905e6. ",
    "mhemrg": "Same issue with 4.4.2. ",
    "TristanMarion": "@kamilogorek Thanks \ud83d\ude47. ",
    "geekflyer": "fixed on honeycombs side.. ",
    "vguna": "Ok, tried it with Raven, and registered the ngRaven AngularJS module like described here and it seems to work like that. Maybe the warning on top should mention, that the new SDK only works properly with Angular 2.x? Or does the new SDK also provide a 1.x module?\n. ",
    "chaffeqa": "Nuts yea, sorry I thought the backtrace pointed towards this sdk, but that was just the trace of calls. ",
    "joegesualdo": "I found what triggers this error.\nThis happens if you do not pass an error to the promise rejection (Promise.reject() or reject()), which makes sense. \nIt might be worth it to provide a meaningful error when this happens. Especailly since the <unlabled event> doesn't give a helpful stacktrace, so it becomes difficult to find the specific rejection that wasn't supplied an error. \ud83e\udd37\u200d\u2642\ufe0f . @HazAT Sure, I'll try to make time today.. @HazAT Still seems to be an issue.\nAlso, I've just encountered another issue that sends <unlabled event> and it appears to be in the @sentry code.\nSomehow in the sentryWrapped function,  I'm getting to the last throw and ex is set to timeout. \n\nSimilar to the last issue, it may be because ex is a string and doesn't have the name or message property on it \ud83e\udd14. Everything seems to be working now. Thanks!. ",
    "keradus": "thanks for quick feedback\nare there any plans for 4.5.0 release?\nhttps://www.npmjs.com/package/@sentry/browser. I can confirm it works like a charm, thanks ;). ",
    "NikoMontana": "No there is no way to get the stacktrace working with .ts / .tsx files. Here are my configurations:\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist/\",\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n    \"sourceRoot\": \"/\",\n    \"noImplicitAny\": false,\n    \"module\": \"commonjs\",\n    \"target\": \"es5\",\n    \"jsx\": \"react\",\n    \"lib\": [\"es5\", \"es6\", \"dom\"]\n  },\n  \"include\": [\"./src/**/*\"],\n  \"awesomeTypescriptLoaderOptions\": {\n    \"reportFiles\": [\"./src/**/*\"]\n  }\n}\ncommon.js - webpack common configuration\n```\n// shared config (dev and prod)\nconst { resolve } = require(\"path\");\nconst { CheckerPlugin } = require(\"awesome-typescript-loader\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"]\n  },\n  context: resolve(__dirname, \"../../src\"),\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        use: [\"babel-loader\", \"source-map-loader\"],\n        exclude: /node_modules/\n      },\n      {\n        test: /.tsx?$/,\n        use: [\"babel-loader\", \"awesome-typescript-loader\"]\n      },\n      {\n        test: /.css$/,\n        use: [\n          \"style-loader\",\n          { loader: \"css-loader\", options: { importLoaders: 1 } }\n        ]\n      },\n      {\n        test: /.scss$/,\n        loaders: [\n          \"style-loader\",\n          { loader: \"css-loader\", options: { importLoaders: 1 } },\n          \"sass-loader\"\n        ]\n      },\n      {\n        test: /.(jpe?g|png|gif|svg)$/i,\n        loaders: [\n          \"file-loader?hash=sha512&digest=hex&name=img/[hash].[ext]\",\n          \"image-webpack-loader?bypassOnDebug&optipng.optimizationLevel=7&gifsicle.interlaced=false\"\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new CheckerPlugin(),\n    new HtmlWebpackPlugin({ template: \"index.html.ejs\" })\n  ],\n  externals: {\n    react: \"React\",\n    \"react-dom\": \"ReactDOM\"\n  },\n  performance: {\n    hints: false\n  }\n};\n```\nprod.js - additional webpack config over common.js for prod\n```\n// production config\nconst merge = require(\"webpack-merge\");\nconst { resolve } = require(\"path\");\nconst SentryWebpackPlugin = require(\"@sentry/webpack-plugin\");\nconst commonConfig = require(\"./common\");\nmodule.exports = merge(commonConfig, {\n  mode: \"production\",\n  entry: \"./index.tsx\",\n  output: {\n    filename: \"js/bundle.[hash].min.js\",\n    path: resolve(__dirname, \"../../dist\"),\n    publicPath: \"/\"\n  },\n  devtool: \"source-map\",\n  plugins: [\n    new SentryWebpackPlugin({\n      include: \".\",\n      ignoreFile: \".sentrycliignore\",\n      ignore: [\"node_modules\", \"webpack.config.js\"],\n      configFile: \"sentry.properties\"\n    })\n  ]\n});\n```\n.env file\nSENTRY_AUTH_TOKEN=MY_WORKING_TOKEN\nSENTRY_URL=https://sentry.io/\nSENTRY_ORG=MY_ORG\nSENTRY_PROJECT=MY_PROJECT_NAME\nThe sourcemaps get uploaded successfully but the stacktrace on the sentry dashboard does not work, as viewed in the picture below.\n\n. ",
    "iatsiuk": "I don't know TypeScript, sorry for that.\nI'm using this snippet for now:\n```js\nprocess.on('multipleResolves', async (type, promise, value) => {\n  let originalVal;\ntry {\n    originalVal = await promise;\n  } catch (err) {\n    originalVal = err.stack && err.message ? err.message : err;\n  }\nconst swallowedVal = value.stack && value.message ? value.message : value;\n  const multipleResolvesError = new Error(\n    [\n      Swallowed promise ${type},\n      original value: ${JSON.stringify(originalVal)},\n      swallowed: ${JSON.stringify(swallowedVal)}.\n    ].join(', ')\n  );\nSentry.captureException(multipleResolvesError);\n});\n```. ",
    "pavlokit": "I'm facing this error too. Actually It blocks integration with Sentry.\nDo you know any workarounds till fix will be delivered?\n@HazAT \nThanks. @HazAT Thanks! Works for me too). ",
    "neemah": "After upgrade to 4.5.2 we started to receive similar strange errors, and had to rollback. . It seems that it is not fixed :(\n```\nTypeError: events.EventEmitter.call is not a function\nwinston.lib.winston.transports:transport in exports.Console.exports.Transport\n```\nsentry.javascript.node\n4.5.4\n. I try, but i don't understand where this even happens because i can't find winston calls in place where exception occures :(. More to come with 4.6.3:\n2019-02-25T08:32:05.126841+00:00 app[web.1]: node[4]: ../src/async_wrap-inl.h:53:v8::MaybeLocal<v8::Value> node::AsyncWrap::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*): Assertion `cb_v->IsFunction()' failed.\n2019-02-25T08:32:05.127545+00:00 app[web.1]: 1: node::Abort() [node]\n2019-02-25T08:32:05.128000+00:00 app[web.1]: 2: 0x8d071b [node]\n2019-02-25T08:32:05.128465+00:00 app[web.1]: 3: 0x955dc8 [node]\n2019-02-25T08:32:05.128983+00:00 app[web.1]: 4: node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&) [node]\n2019-02-25T08:32:05.129497+00:00 app[web.1]: 5: node::TLSWrap::ClearOut() [node]\n2019-02-25T08:32:05.129968+00:00 app[web.1]: 6: node::TLSWrap::OnStreamRead(long, uv_buf_t const&) [node]\n2019-02-25T08:32:05.131041+00:00 app[web.1]: 7: 0x95931e [node]\n2019-02-25T08:32:05.131572+00:00 app[web.1]: 8: 0x9cc7ef [node]\n2019-02-25T08:32:05.132076+00:00 app[web.1]: 9: 0x9cce50 [node]\n2019-02-25T08:32:05.132582+00:00 app[web.1]: 10: 0x9d2c18 [node]\n2019-02-25T08:32:05.135332+00:00 app[web.1]: 11: uv_run [node]\n2019-02-25T08:32:05.135775+00:00 app[web.1]: 12: node::Start(uv_loop_s*, int, char const* const*, int, char const* const*) [node]\n2019-02-25T08:32:05.136226+00:00 app[web.1]: 13: node::Start(int, char**) [node]\n2019-02-25T08:32:05.136261+00:00 app[web.1]: 14: __libc_start_main [/lib/x86_64-linux-gnu/libc.so.6]\n2019-02-25T08:32:05.136653+00:00 app[web.1]: 15: 0x8a3411 [node]\nrolling back to 4.4.2 resolves this issue.\nWill try to create repro, but honestly, this is starting to be really irritating. Library is just not safe for production environments.. I tried to create repro steps similar to yours, but with no luck:\n```\nconst Sentry = require('@sentry/node');\nconst axios = require('axios');\nconst url = 'XXXX';\nSentry.init({\n  dsn: 'YYY'\n});\nconst run = async () => {\n  try {\n    const response = await axios.post(url, {a: 1}, {timeout: 50});\n    console.log(response);\n  } catch (e) {\n    Sentry.withScope(s => {\n      s.setExtra('url', url);\n      Sentry.captureException(e);\n    });\n  }\n}\nrun();\n```\nFrom very first error it seems error happens when TSL (SSL) connection established and timeout occurred. \nhttps://github.com/nodejs/node/blob/v9.11.2/lib/_tls_wrap.js#L365 - the question is why this.owner = [Circullar ~] - how that could possible happen? Maybe answering this question will be the key to resolve an issue.. Works so far, thank you!. ",
    "rodneyrehm": "Same problem here in @sentry/node in version 4.5.3 on node v10.11.0. Downgrade to v4.5.1 solves the problem for me as well.\nTypeError: domain.enter is not a function\n    at ServerResponse.EventEmitter.emit (domain.js:459:10)\n    at Socket.onServerResponseClose (_http_server.js:169:44)\n    at Socket.emit (events.js:187:15)\n    at Socket.EventEmitter.emit (domain.js:442:20)\n    at TCP._handle.close (net.js:606:12)\nTypeError: app.render is not a function\n    at ServerResponse.render (\u2026/server/node_modules/express/lib/response.js:1008:7)\n    at handleError (\u2026/server/src/errors.js:46:7)\n    at Layer.handle_error (\u2026/server/node_modules/express/lib/router/layer.js:71:5)\n    at trim_prefix (\u2026/server/node_modules/express/lib/router/index.js:315:13)\n    at \u2026/server/node_modules/express/lib/router/index.js:284:7\n    at Function.process_params (\u2026/server/node_modules/express/lib/router/index.js:335:12)\n    at next (\u2026/server/node_modules/express/lib/router/index.js:275:10)\n    at sentryErrorMiddleware (\u2026/server/node_modules/@sentry/node/dist/handlers.js:180:9)\n    at Layer.handle_error (\u2026/server/node_modules/express/lib/router/layer.js:71:5)\n    at trim_prefix (\u2026/server/node_modules/express/lib/router/index.js:315:13). ",
    "vvo": "We're also seeing \"app.render is not a function\" which is a very odd error that we do not understand. Hey @kamilogorek just for my own curiosity, which commit in particular fixed our issue?. ",
    "SamvelRaja": "@HazAT  A simple use case would be in Electron environment where the sentry/browser is been used in renderer process, it is not allowed to refresh the page. \nSo, we are thinking of usability around this for now when we need to upgrade.. ",
    "davegravy": "If I change handleClick() to:\n```\n  handleClick = (e, titleProps) => {\n    console.log(\"test\"); \n    const { index } = titleProps;\n    const { activeIndex } = this.state;\nconst newIndex = {...activeIndex};\nnewIndex[index] = !newIndex[index];\n\nthis.setState({ activeIndex: newIndex })\n\n};\n``\nThe issue resolves. I'm guessing that becauseeand/ortitleProps` are large/deeply nested objects and console log statements are recorded by Sentry for use in breadcrumbs that this is triggering a bug. Obviously I shouldn't have such log statement in production, (it was left in quite by accident), but I feel it also shouldn't break things like this.. Confirmed. ",
    "kahlil": "Great to see a response this quickly! It would be amazing if this would land soon, because the problem @atk described in the comment linked above actually prevents us from integrating Sentry at the moment. . Awesome, thanks!. ",
    "maikthomas": "Great this works perfectly!\nI don't know if anyone is updating the migration doc: https://forum.sentry.io/t/switching-to-sentry-javascript/4732/8\nI have added comments on there with fixes for the 3 issues I had:\n- setUserContext\n- tags from init configuration\n- logger from init configuration\nThis was the last piece of the puzzle, thanks!. @kamilogorek thanks!\nCan I ask about the other cases? \nIs it expected that logging exceptions with objects that aren't errors should be logged as level info?\nThis is different behaviour to Raven.. Sorry I guess I meant objects in a very liberal way \ud83d\ude04 strings for example. ",
    "rstims": "We are experiencing weird things after updating from 4.5.0 -> 4.5.3, the context is different from the OP's but the underlying this.app.get error is the same.. @eddiewang yeah it looks like 4.5.0 works as expected. ",
    "eddiewang": "@rstims does downgrading to 4.5.0 fix the issue?. ",
    "gunnar2k": "Seeing the same thing with bunyan (2.0.2) and express-bunyan-logger (1.3.2). Downgrading to 4.5.0 fixes it.. ",
    "nikolaik": "Also seeing this. https://github.com/getsentry/sentry-javascript/issues/1859 looks like the same issue. ",
    "dottodot": "Same issue with Feathers and Winston\nhttps://github.com/feathersjs/feathers/issues/1183. Same issue with Feathers and Winston\nhttps://github.com/feathersjs/feathers/issues/1183. here's the error I get from debug. 4.5.4 crashes my app\nTypeError: Stream.Readable.call is not a function\n    at new IncomingMessage (_http_incoming.js:39:19)\n    at HTTPParser.parserOnHeadersComplete (_http_common.js:85:38)\nTypeError: Stream.Readable.call is not a function\n    at new IncomingMessage (_http_incoming.js:39:19)\n    at HTTPParser.parserOnHeadersComplete (_http_common.js:85:38)\n    at TLSSocket.socketOnData (_http_client.js:441:20)\n    at TLSSocket.emit (events.js:182:13)\n    at TLSSocket.EventEmitter.emit (domain.js:442:20)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at TLSSocket.Readable.push (_stream_readable.js:219:10)\n    at TLSWrap.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\nTypeError: Stream.Readable.call is not a function\n    at new IncomingMessage (_http_incoming.js:39:19)\n    at HTTPParser.parserOnHeadersComplete (_http_common.js:85:38)\n    at TLSSocket.socketOnData (_http_client.js:441:20)\n    at TLSSocket.emit (events.js:182:13)\n    at TLSSocket.EventEmitter.emit (domain.js:442:20)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at TLSSocket.Readable.push (_stream_readable.js:219:10)\n    at TLSWrap.onStreamRead [as onread] (internal/stream_base_commons.js:94:17). ",
    "suitupalex": "I'm not using anything like Winston or Morgan, but I'm also experiencing this issue.\nRelated bits:\n```\nSentry.init({\n  beforeSend(event, hint) {\n    const {\n      originalException,\n    } = hint\nconst {\n  message,\n} = originalException\n\nif (message.match(/NotAuthenticated/i)) {\n  return null\n}\n\nreturn event\n\n},\n  dsn: env.SENTRY_DSN,\n})\n// ...\napp.use(Sentry.Handlers.requestHandler())\n// ...\napp.use((error, request, response, next) => {\n  if (!error.stack.match(/NotAuthenticated/i)) {\n    err(error.stack)\n  }\nnext(error)\n})\napp.use(Sentry.Handlers.errorHandler())\napp.use(express.errorHandler())\n```\nWill check if downgrading fixes the issue.. ",
    "mahboubii": "The issue still exists in \"@sentry/node\": \"^4.6.2\" using as Express middleware\nTypeError: req.emit is not a function\n    at Socket.socketOnTimeout (_http_server.js:427:48)\n    at Socket.emit (events.js:197:13)\n    at Socket.EventEmitter.emit (domain.js:446:20)\n    at Socket._onTimeout (net.js:447:8)\n    at listOnTimeout (timers.js:327:15)\n    at processTimers (timers.js:271:5). I think sentry tries to attach something to res object asynchronously, but the connection is already closed which crashes the api.\nconst api = express();\nsentry.init({ dsn: process.env.SENTRY, environment: process.env.DOMAIN });\napi.use(sentry.Handlers.requestHandler());\n....\napi.use(sentry.Handlers.errorHandler());\napi.use((err, req, res, next) => {\n    let { message, statusCode } = err;\n    if (err.name === 'UnauthorizedError') {\n        statusCode = 401;\n        message = 'Token is invalid.';\n    }\n    res.status(statusCode || 400).json({ error: message });\n});. not sure, that was the logic before we removed it. Might be something related to our own controllers.. ",
    "jekusz": "Is the current description as per: https://docs.sentry.io/data-management/rollups/?platform=csharp\naccurate ? The {{default}} fingerprint is mighty confusing, What's the difference for setting it and not setting it ?\nQuite specifically, I am currently trying to solve this scenario:\nExample: Merge a lot of groups into one group (groups are too small)\nAnd have opted to attach the {{default}} fingerprint to all logs with any other fingerprint, and it seems to work fine. But the documentation suggests that this should not be done and I can't work out why ? \n. @untitaker I am solving the first scenario in your response (i.e. many into one) and, because of a misunderstanding, have already produced plenty tickets with say {error, default} fingerprints. And it works perfectly fine, they all get grouped into one event group though previously they would not be. Technically I am fine, but as you noted, it's opposite to what the documentation says one should do, so would really want to understand what's the risk here. I.e. I can't fathom what does the {default} fingerprint change here ?\n. Here's a link to a bunch of events that get grouped into a single collection, even though they all contain the default fingerprint:\nhttps://sentry.io/reviso/core-app/issues/852553001/events/8850697bf89645e1a3679426f3da08ec/\nI can't say I can understand from the documentation, what does the presence of the {default} fingerprint change in this case ?. @untitaker let me reiterate: I am achieving exactly what I need to, this is not the problem.\nThe problem is that I am doing it against the documentation's advise by appending the \"default\" fingerprint to the events. The documentation says that I should not. I'm keen to understand how and when is this gonna cause me problems.. I can see much of the confusion here is on my misreading/mistyping of the \"{{ default }}\" fingerprint as \"default\", thanks for pointing that out.\n@mitsuhiko I like how you're breaking it down in your comment, it's clear, at least for me.. ",
    "matomesc": "@kamilogorek I tried uploading the sourcemaps without the files and that doesn't work either. Here is an event: https://sentry.io/mtx/smslivedev-server/issues/871999608.. I've set that up already.\nI'm setting the root directory in my  index.ts (entry file) like in the docs global.__rootdir__ = __dirname || process.cwd();. Then when I initialize the Sentry client I'm using the rewrite frames integration.\nI have my .ts files in server/src and the .js files get built in server/build. However the frames never get rewritten, even when the .ts files are not compiled and run with ts-node.. ",
    "RotatingFans": "I am having similar issues with Sentry version 4.5.3. 4.5.2 works as expected. It appears to be an issue with the normalizing of extra data in version 4.5.3. Somehow, it seems sentry's error data is being supplied back to the original datachains, which causes a host of random errors, which relate back to some sort of Sentry based modification(the [Circular ~] for example).\nIf I had to guess, instead of serializing a function at some point, Sentry instead calls the function with the current error data. \n. ",
    "peterpro": "4.5.4:\n```\nTypeError: req.emit is not a function\n    at Socket.socketOnTimeout (_http_server.js:422:48)\n    at emitNone (events.js:106:13)\n    at Socket.emit (events.js:208:7)\n    at Socket._onTimeout (net.js:422:8)\n    at ontimeout (timers.js:498:11)\n    at tryOnTimeout (timers.js:323:5)\n    at Timer.listOnTimeout (timers.js:290:5)\n```\nNestJS + Raven + Sentry, error occurs on sending exception to Sentry. 4.5.1 works fine.. How can i help you? I can strace process, if you wish.. @kamilogorek here you are: https://gist.github.com/peterpro/08ace034c42c1e7bac5d1d1b8e09a01c#file-strace-log-L966\n I guess that validation which throws exception ends on line 966 and then some magic happens.. ",
    "jpreynat": "@kamilogorek I had the same kind of issue from a 3rd party module making HTTP requests after upgrading from 4.5.3 to 4.5.4.\nAfter quickly looking up what changed between the two versions, it seems that 3ddda21d7f3126974820f6860188cc26b5cc960a is responsible for the error.\nI managed to fix it by updating the following line to correctly forward the function's prototype:\nhttps://github.com/getsentry/sentry-javascript/blob/bd35d7364191ebed994fb132ff31031117c1823f/packages/utils/src/object.ts#L70\nbecomes\njs\n// Correctly forward the original function prototype\nwrapped.prototype = wrapped.prototype || {};. This issue is linked to https://github.com/getsentry/sentry-javascript/issues/1859#issuecomment-465114929. ",
    "stevenhaohuitan": "Full sentry config: \nSentry.init({\n        dsn: $value\n        environment: $env\n        release: $release\n})\n. ",
    "boozedog": "@kamilogorek I too am experiencing this problem. Is there anyone else available who can look into this?. ",
    "jSherz": "Wow that was quick! Thank you very much @kamilogorek and team. Very much appreciated \ud83e\udd47 . ",
    "Andy0708": "Based on further investigation, this seems to be an issue unrelated to Sentry; the site in question is using the MooTools library, which seems to be interfering with both my code and Sentry (most likely because it provides a class named Request which causes a conflict). My apologies for being a bit too fast on the trigger here!. ",
    "gfx": "@sentry/minimal sounds good for this usage. Thanks.\nBTW it has no captureMessage() and Severity for non-fatal messages. Do you have a plan to add them to minimal?. @kamilogorek Oh, thanks! I didn't know why I can't find them! \ud83d\ude13 . ",
    "o2genum": "Ok, here is the repo that reproduces the issue (needs Sentry credentials for testing):\nhttps://github.com/o2genum/node-stacktrace-issue-reproduce\nAnd the error: https://sentry.io/share/issue/c3961143a9ee4c6fb796d773217f0169/\nI think most users don't have this issue because of non-removable comments like this:\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\nThese comments get into the minified file, cutting it with newlines. I turned off bundling of external modules in the Webpack config, so I don't get these comments from various modules in my bundle.. I got this working in my Electron app with @sentry/electron.\nI had to do some configuration and some hacking, though.\nSo again, I have a main bundle + an external module, both minified.\n\nI used include: ['.'], this made Sentry match paths properly. Plus ignoreFile: '.sentryignore' to control what to upload to Sentry.\nAs for my external module in node_modules/my_external_module (which is very hard to build into the main bundle), I include it in .sentryignore.\nMy my_external_module is a local package, so I had to use yarn, because npm symlinks local dependencies, not copies them, and @sentry/webpack-plugin does not follow symlinks on Windows. This way, my_external_module's sourcemaps and sources are uploaded to Sentry too.\nI still had to force a newline in the beginning of the minified files. Both for the main bundle and my_external_module. With PreamblePlugin in Webpack, and preamble option in Rollup. Node.js indeed wraps sources that it loads with an IIFE. I still think this may cause problems in rare cases, when the minified file is not cut with /*! License */ comments of the bundled dependencies, and all errors thus occur on the first line.. \n",
    "mike1808": "@kamilogorek savior! Sorry for the rant, I couldn't find the docs yesterday. Now, I see that you don't have docs for each platform but all of them together. . ",
    "b-ryan": "Sounds good - thanks!. ",
    "ericnograles": "@kamilogorek I took a crack at this feature request (#1885), please let me know if I missed anything. Thanks! \ud83d\ude4f . Just a head's up, looks like there's something broken in the Travis CI config:\n\n. Good call @kamilogorek. I added proper docs to the new flag, let me know if the description is sufficient. \nWorking on the other changes now, will be up shortly.\nThanks!. Ready for re-review @kamilogorek \nPlease note the corresponding doc update: https://github.com/getsentry/sentry-docs/pull/769\nThanks again!. ",
    "matt-senseye": "This was really helpful for me, thanks @miluoshi!. ",
    "ibedard16": "\nUpdate: leaving the demo running for long enough crashed Chrome.\nI don't mean it caused the tab to crash, I mean Chrome itself - every tab and window I had opened - crashed.\nThat's not a good thing.. The Angular side of this issue was closed as won't fix. In the comments, the closer said\n\nI don't think either of the two libraries [zone.js and sentry] can do much to mitigate this. ... I don't think there is a feasible fix for either side. \n",
    "shaninja": "@kamilogorek After seeing this issue we upgraded to 4.6.2 yesterday, however we are still experiencing the same errors.\nThere are no related fixes in 4.6.3, right?. ",
    "jackycute": "I'm not sure, but I did find some similar callbacks were wrapped in the older version of the profiling.\nYeah, that's what I did earlier to remove TryCatch integration and now it looks like the performance recovered.\nI used lodash throttle and debounce for scrolling and rendering some text on user typing and that make a obvious different. It will take some time to give a minimal reproducable sample.. I think of a possible test case.\n\nvisit and add a note in https://demo.codimd.org\nattach Sentry in dev tool's console\nIf it have been blocked by CSP, try this extension: https://chrome.google.com/webstore/detail/disable-content-security/ieelmcmcagommplceebfedjlakkhpden\nstart performance recording in dev tool\ntry to type some text and delete some\nstop recording and see the result. Thanks for testing out!\n\nCould you please try typing faster for more text and delete them? (record performance and keep typing for 15s)\nAlso please switch to the both mode (which has two panel) by the top left button group, that mode mixed the operations of receiving user input and rendering the markdown text to html thus doubling timer events.\nThe frames that caused the lag are more likely for rendering aspect.. ",
    "jnns": "Thanks for putting in the work @kamilogorek . Will try 4.6.0 and report back.. ",
    "veratim1996": "https://github.com/veratim1996/sentry_error_example\nIf you comment out this line, the problem will go away.. Thanks!. ",
    "vijaysutrave": "Anything on this @kamilogorek ?. So think of it like this: I'm building a React component which is an npm package and can be used by other products or in pages. I want to be able to send error events only from my component, and exclude all other global errors which might occur on the page. \nThe problem here is that even an async error (for e.g. setTimeout, caused by other event handlers, etc) caused by my component loses context when it is triggered on the window. And I guess that is by design of JavaScript. I was just wondering if there's any way to isolate all errors raised by component and have them reported instead of reporting all errors occurring on the page and polluting the data. Any help would he highly appreciated :)  . Yep, you just can't do that in JS! \ud83d\ude2dI'll go ahead and close this issue! Thanks for responding! Cheers!. ",
    "jardakotesovec": "Did you update index.js with valid dsn? Here is whats the result looks like in my case:\nHaving \n- node 10.11.0\n- osx 10.14.3\n- sentry 4.6.2\n\n. @kamilogorek that says \nSDK_VERSION: 4.6.2. @kamilogorek what system you are using? Linux? I could try it there if that makes difference.. @kamilogorek but that actually should not make difference. We were experiencing this problem in node 10 linux docker image at first place.. @kamilogorek right, so just tried it with node 11 and that made difference. Than I have identical result to yours. Thats interesting.. @kamilogorek Tested and looks good. Thanks a lot for quick and spot on support. . ",
    "shengbowen": "maybe we have the same problem.  issue-399151280. I use old sdk: raven js below 4.0, ex: 3.26.2, it can report normally. ",
    "tombell": "@shengbowen I don't think the problems are the same. Since some of my errors in the webview are reported, and some aren't caught by Sentry.. ",
    "xavier-villelegier": "We have the same error with something as simple as:\njs\nSentry.init({ dsn: dsnUrl });\nSentry.captureMessage('Test', 'info');\niOS: 12.1.2\nCordova iOS: 4.5.4\nCordova Android: 6.3.0\n@sentry/browser: ^4.0.0-beta.12\nAnyone with a workaround ?. ",
    "akozlov84": "\n@akozlov84 could you give 4.6.3 a try?\n\nI've tried with 4.6.3, but the problem is still valid. But currently the safeNormalize method fails - Cannot assign to read only property 'replace' of object '[object Location]'\nThis is just add non-serializable to breadcrumbs. (The error was catched in the method).\nPlease review the following screenshot - http://prntscr.com/mnqc6v, I've marked the line where the problem exists and show the sample input for the method. On first step the variable \"copy\" has the \"Error\" copied, but the \"ngDebugContext\" property of the \"copy\" object isn't the copy - it's just reference to angular context, and furthe the logic will try to override some of the properties.. I couldn't reproduce the issue on the simple project (I've tried to create simlpe project with just angular + sentry, to try investigate and find workaround), because, it looks like the problem with the cross references in the some libraries (may be angular creates a deep debug context with cross references, I'm not sure). I've tried to move \"normalizeValue\" method before \"copy\", but with no luck, the error still the same - http://prntscr.com/mpozwc. > @akozlov84 could you please give a 4.6.4 a try and let us know if everything is fixed for you?\nYes, it looks like the problem was fixed under 4.6.4, I couldn't reproduce the problem using my old steps at least. Thanks you! I'll close the ticket if no new notes/comments will arrive.. ",
    "DanielGibbsNZ": "Would it be an acceptable solution to always use req.headers.host for the hostname first and then fall back to the express and koa fields?. Regarding contributing: I forked the repository and followed the instructions in CONTRIBUTING.md but when I run yarn build in the packages/node directory I get a ton of TypeScript errors, most of which are something like Cannot find module '@sentry/types'. Is there some additional setup I need to do to be able to build the package?. ",
    "SemyonMakhaev": "\nYou have to manually initialize them during init call yourself.\n\nBut it's easy to make mistake, and this may take time for debug to understand why there are unexpected defaultIntegrations during sentry initialization in browser.\n@kamilogorek what do you think, maybe the right way is to make a deep cloning?. Ok, I agree. Maybe deep cloning is too complex for this...\nThanks for your review and discussion!. ",
    "arusanovt": "4.6.4 fixed this issue, that was very annoying to debug and find that tool that you're using to CAPTURE error actually generates almost untraceable ones. ",
    "FuncWei": "the link is company platform, need Intranet access.. json\n{\n    \"id\": \"166f848cf10e4a82ba28cc89bda22919\",\n    \"project\": 140,\n    \"release\": \"v1.0.5.3-2019-02-26-online\",\n    \"dist\": null,\n    \"platform\": \"javascript\",\n    \"culprit\": \"raven-js/src/raven in HTMLDocument.o\",\n    \"message\": \"TypeError Cannot read property 'tagName' of null raven-js/src/raven in HTMLDocument.o\",\n    \"datetime\": \"2019-02-26T09:49:50.000000Z\",\n    \"time_spent\": null,\n    \"tags\": [\n        [\"transaction\", \"raven-js/src/raven in HTMLDocument.o\"],\n        [\"level\", \"error\"],\n        [\"url\", \"\"],\n        [\"os.name\", \"Windows 10\"],\n        [\"sentry:user\", \"\"],\n        [\"logger\", \"javascript\"],\n        [\"browser.name\", \"Chrome\"],\n        [\"sentry:release\", \"v1.0.5.3-2019-02-26-online\"],\n        [\"browser\", \"Chrome 65.0.3325\"]\n    ],\n    \"contexts\": {\n        \"os\": {\n            \"version\": null,\n            \"name\": \"Windows 10\"\n        },\n        \"browser\": {\n            \"version\": \"65.0.3325\",\n            \"name\": \"Chrome\"\n        }\n    },\n    \"errors\": [],\n    \"extra\": {\n        \"session:duration\": 3481\n    },\n    \"fingerprint\": [\"{{ default }}\"],\n    \"key_id\": 141,\n    \"metadata\": {\n        \"type\": \"TypeError\",\n        \"value\": \"Cannot read property 'tagName' of null\"\n    },\n    \"received\": 1551174590.0,\n    \"sdk\": {\n        \"version\": \"3.24.0\",\n        \"name\": \"raven-js\"\n    },\n    \"sentry.interfaces.Breadcrumbs\": {\n        \"values\": [{\n            \"category\": \"xhr\",\n            \"timestamp\": 1551174589.361,\n            \"type\": \"http\",\n            \"data\": {\n                \"url\": \"\",\n                \"status_code\": \"200\",\n                \"method\": \"POST\"\n            }\n        }, {\n            \"category\": \"xhr\",\n            \"timestamp\": 1551174589.541,\n            \"type\": \"http\",\n            \"data\": {\n                \"url\": \"\",\n                \"status_code\": \"200\",\n                \"method\": \"GET\"\n            }\n        }, {\n            \"category\": \"xhr\",\n            \"timestamp\": 1551174589.98,\n            \"type\": \"http\",\n            \"data\": {\n                \"url\": \"\",\n                \"status_code\": \"200\",\n                \"method\": \"POST\"\n            }\n        }, {\n            \"category\": \"ui.click\",\n            \"timestamp\": 1551174592.266,\n            \"message\": \"div.ant-menu-submenu-title > span > span.nav-sub-text\",\n            \"type\": \"default\"\n        }]\n    },\n    \"sentry.interfaces.Exception\": {\n        \"exc_omitted\": null,\n        \"values\": [{\n            \"stacktrace\": {\n                \"frames\": [{\n                    \"function\": \"HTMLDocument.o\",\n                    \"abs_path\": \"webpack:///./node_modules/raven-js/src/raven.js\",\n                    \"pre_context\": [\"      try {\", \"        // Attempt to invoke user-land function\", \"        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\", \"        //       means Raven caught an error invoking your application code. This is\", \"        //       expected behavior and NOT indicative of a bug with Raven.js.\"],\n                    \"post_context\": [\"      } catch (e) {\", \"        self._ignoreNextOnError();\", \"        self.captureException(e, options);\", \"        throw e;\", \"      }\"],\n                    \"filename\": \"./node_modules/raven-js/src/raven.js\",\n                    \"module\": \"raven-js/src/raven\",\n                    \"colno\": 1,\n                    \"in_app\": false,\n                    \"data\": {\n                        \"sourcemap\": \"\"\n                    },\n                    \"context_line\": \"        return func.apply(this, args);\",\n                    \"lineno\": 375\n                }]\n            },\n            \"raw_stacktrace\": {\n                \"frames\": [{\n                    \"function\": \"HTMLDocument.o\",\n                    \"abs_path\": \"\",\n                    \"pre_context\": [\"*/\", \"/*!\", \"  Copyright (c) 2017 Jed Watson.\", \"  Licensed under the MIT License (MIT), see\", \"  http://jedwatson.github.io/classnames\"],\n                    \"post_context\": [\"/*\", \"object-assign\", \"(c) Sindre Sorhus\", \"@license MIT\", \"*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(! {snip}\"],\n                    \"in_app\": false,\n                    \"lineno\": 114,\n                    \"colno\": 311864,\n                    \"filename\": \"/static/js/vendor.9f6b0868d30e79c7e795.js\",\n                    \"context_line\": \"{snip} -;)o[i]=a?r.wrap(e,arguments[i]):arguments[i];try{return t.apply(this,o)}catch(t){throw r._ignoreNextOnError(),r.captureException(t,e),t}}fo {snip}\"\n                }]\n            },\n            \"value\": \"Cannot read property 'tagName' of null\",\n            \"type\": \"TypeError\"\n        }]\n    },\n    \"sentry.interfaces.Http\": {\n        \"url\": \"\",\n        \"headers\": [\n            [\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\"]\n        ]\n    },\n    \"sentry.interfaces.User\": {\n        \"ip_address\": \"\"\n    },\n    \"type\": \"error\",\n    \"version\": \"7\"\n}. All of my PC-side projects have this problem and I found that they are triggered after the element click event.. ",
    "cruisercohen": "Interesting. Found this looking for a similar issue. The remove dedupe fixed it for me. . ",
    "anshuPurohit": "Chrome lighthouse audit report. \n. ",
    "stemail23": "Thanks for the response. Actually I\u2019m calling captureMessage on a hub, instantiated as described here: https://docs.sentry.io/platforms/javascript/advance-settings/\nBut I guess that\u2019s the same as calling on the client as you described?. ",
    "kamilchlebek": "Thank you for your assistance. \nI didn't mention that report-uri is handled by browser, so changing Sentry configuration will not resolve the issue. \nFinally I think I'll need to somehow ignore https://sentry.io inside service worker to make it handled by the browser (and then if needed update the Sentry configuration)\nI'll keep you updated in case someone have the same issue. . I managed to fix it by updating service worker to ignore https://sentry.io using similar approach to this one: https://github.com/angular/angular/issues/21191#issuecomment-360051276 \nSorry for bothering you, it turned out to be more angular issue than sentry.. ",
    "zlwaterfield": "Closing because there is a related issue: https://github.com/getsentry/sentry-javascript/issues/1762. ",
    "etothemanders": "On further inspection, it looks like raven is waiting for our frontend framework to finish creating a new element.  The actual wrapping time is .1ms.. ",
    "aprihodko": "With  \"@sentry/browser\": \"4.4.2\" Sentry.captureException() adds a new issue on Sentry project. With \"@sentry/browser\": \"4.6.4\" the Sentry.captureException() just does nothing and there are no issues captured on Sentry\n. ",
    "simllll": "Update:\ndisabling all modules does actually \"resolve\" the issue.\nWith version 4.5.0 and also with version 4.6.4.\nI have to disable it by using following config though:\ndefaultIntegrations: false,\nintegrations: [],\nI tracked it down to the console intergration, something isn't working out in my setup suddenly. It seems it's \"only\" happening when axios is failing with a request. (no idea how this can be related).\nintegrations: [\n            new Integrations.Dedupe,\n            new Integrations.ExtraErrorData,\n            new Integrations.InboundFilters,\n            new Integrations.FunctionToString,\n            // new Integrations.Console, <--- starts working again\n            new Integrations.Http,\n            new Integrations.OnUncaughtException,\n            new Integrations.OnUnhandledRejection,\n        ]\nAccording to the error trace it must be related with this line of code:\n\"message: util.format.apply(undefined, arguments),\"\neven though I cannot see any \"options\" (ERROR Cannot read property 'options' of null) there, can it be that \"arguments\" is somehow processed wrongly here?. ",
    "shlima": "+1. ",
    "zorji": "Thanks @kamilogorek . ",
    "amccloud": "How about up above where you define the $?\n. Why is a version > 1.5.0 needed? Would it be future proof to do some feature detection instead?\n. ",
    "pombredanne": "That sounds to me as the idiomatic way to make this check.  Not sure the strict equality is needed though\n. My pythonic heart would try a feature and catch an exception, but this is not Python... btw you have no constraints on Zepto nor ender versions?\n. Could you not provide one default lib and avoid exception altogether?\n. ",
    "thurloat": "why the switch from e.arguments to e[\"arguments\"] ?\n. label and data appear to be unused\n. maybe you meant to define label and data here? -- they're implicitly declared down on line 219\n. this could return misleading results.\njavascript\ntypeof(null) === \"object\"\ntypeof([]) === \"object\"\nperhaps you'd want to do something like:\njavascript\nif (message[\"message\"] !== undefined && message[\"name\"] !== undefined) { ///...\n. just to play devils advocate here, rather than using jquery to do native JS things -- something like this?\njavascript\nif (self.options.ignoreErrors.indexOf(message) > -1) { //...\nex:\njavascript\n[\"foo\", \"bar\", \"baz\"].indexOf(\"bar\") === 1\n[\"foo\", \"bar\", \"baz\"].indexOf(\"snazz\") === -1\n. slightly confused by your mixture of this and self. why not consistently just use self since you went through the trouble of making it in the first place?\n. naming thing: should probably be called objectMerge. \nand by the way you're using it you could probably have just used $.extend http://api.jquery.com/jQuery.extend/ && http://zeptojs.com/#$.extend\n. small thing: don't have to declare now_utc, it's redundant.\njavascript\n        var now = new Date();\n        return new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),\n            now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());\n. changing this section of the test to something like the following proves that you have leaky variables.\n``` javascript\ntest(\"should collect error information and report to Sentry\", function() {\n    var isSupported, frame, caughtErr;\n\n    try {\n        giveMeAnError();\n    } catch(err) {\n        caughtErr = err;\n        Raven.captureException(err);\n\n        ok(typeof(label) === \"undefined\");\n        ok(typeof(data) === \"undefined\");\n        if (err.stack) {\n            isSupported = true;\n        } else {\n            isSupported = false;\n        }\n    }\n\n    equal(ajax_calls.length, 1);\n\n    var data = JSON.parse(ajax_calls[0].data);\n\n   // ...\n\n``\n. ah, I just assumed you were okay with it since you're using$.each`\n. :cake: good catch\n. then I'd settle for something like:\njavascript\nfor(var k in obj2) {\n   if(obj2.hasOwnProperty(k){\n      obj1[k] = obj2[k];\n   }\n}\nreturn obj1;\n. :-1:\nI don't think the solution (in a project with fewer than 500 LOC) is to start including additional libraries all over the place to facilitate simple functionality.\n. however, since there is a desire for supporting interpreters that aren't as awesome as V8 (looking at you IE), there's no reason to be lazy about it.\n. this version has IE9 in the test results as well: http://jsperf.com/caching-array-length/120\nand it only reports a marginal improvement between hoisting and not. although decrementing instead of incrementing is nearly twice as fast.\n. ",
    "zeevl": "In browserify (and commonjs in general i think?)  this refers to the module, not the window.. so in this case window is just an empty object.    removing the window qualifier seemed like a much less invasive change than renaming the initial function parameter..\n. fyi, here's the browserify require code:\nrequire = (function e(t, n, r) {\n    function s(o, u) {\n        if (!n[o]) {\n            if (!t[o]) {\n                var a = typeof require == \"function\" && require;\n                if (!u && a) return a(o, !0);\n                if (i) return i(o, !0);\n                throw new Error(\"Cannot find module '\" + o + \"'\")\n            }\n            var f = n[o] = {\n                exports: {}\n            };\n            t[o][0].call(f.exports, function(e) {\n                var n = t[o][1][e];\n                return s(n ? n : e)\n            }, f, f.exports, e, t, n, r)\n        }\n        return n[o].exports\n    }\n    var i = typeof require == \"function\" && require;\n    for (var o = 0; o < r.length; o++) s(r[o]);\n    return s\n})\n. This line was moved to the else block of the amd checks, i.e. only expose it globally if its not otherwise defined or required as a module.     \nI also needed to move it as I'm using this in a firefox add-on, which will barf if you try to modify the window object... so Raven.noConflict() doesn't work.  \n(Yes.. firefox has their own commonjs implementation which does end up keepin the window object as this.)\n. ",
    "mcuelenaere": "Why not call this one XHRTransport?\n. .. and this one ImageTransport?\n. Shouldn't the window.console && console.error check be only around this console.error() call?\n. ",
    "RusMirotvorec": "Leave a line note\n. Leave a line note\n. Leave a line note\n. ",
    "wengole": "The actual import is import { NgModule, ErrorHandler } from \"@angular/core\"\n. ",
    "leahjlou": "not sure I totally understand why we're checking if there's a stacktrace before we pass the exception to errorCallback - would you mind giving a quick explanation?. ",
    "gregorylegarec": "My first thought was actually to update truncate. I may amend my commit.\nBy the way, an empty string does not need to be truncated, and testing falsy values also handle null. So let me know what your preference is.. ",
    "patrickkettner": "@benvinegar sorry for taking so long to reply.  @kamilogorek is right - we did fix it, it just wasn't back ported to Edge 14. FWIW, we are releasing Edge 16 in less than a month (october 17th) so 14s usage will be dropping off even faster soon.. ",
    "crccheck": "\"uncaught\" sounds good to me, but if I were to tweak things, I would say:\n\nBy default, Raven collects all uncaught errors that have been caught by the onerror handler. You can disable this behaviour by setting this flag to false. This may be useful when you only want to manually handle errors by using the captureMessage and captureException.. \n",
    "taylorhakes": "multiple localStorage operations are not atomic. It is possible for multiple tabs to receive this queue before the removeItem. This needs to be inside a lock. See more info here:\nhttps://medium.engineering/wait-dont-touch-that-a211832adc3a\nhttp://balpha.de/2012/03/javascript-concurrency-and-locking-the-html5-localstorage/. @graingert I don't believe that library handles atomic operations between multiple browser windows. It just removes oldest item when localstorage when it's full. Here is a link to a library I created to solve this problem. There are probably other libraries out there as well. Also feel free to just copy the library code into this repo if you don't want another dependency.\nhttps://github.com/taylorhakes/localstorage-lock/. ",
    "cvan": "(sorry, this is a drive-by comment)\nis this a typo, Networkf? should be Network, right?. should failed to get send be that failed to be sent?. ",
    "jasekiw": "Storing an entire array of the logs at once can be quite a poor usage of memory. There might be a lot of logs if a device is left offline for extended periods of time. On hybrid apps there is a very small memory limit. If there are a lot of logs or large json encoded objects, memory can spike. Possibly using indexdb or an option for a custom storage adapter would allow for more memory efficient ways of storing.\n. ",
    "Prestaul": "Yes, this.. "
}