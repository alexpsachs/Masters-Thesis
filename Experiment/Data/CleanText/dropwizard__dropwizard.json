{
    "codahale": "Waaaay too early to be dealing with this. I've got a complete and total rewrite of this pending, landing (hopefully) later today.\n. I thought this was an issue opened so I pushed b148f5 which does the same thing.\nMe pre-coffee is awkward.\nAnyways, yeah.\n. Thanks!\n. Closed in 440e0aeeea1d933f1970def6d1b92c10ba97564e.\n. Closed by 6709a96aa808ef10e95cc95249ed6756416dd7f5.\nStill need to run some tests, though.\n. Nah.\n. Well, one of the issues here is that I'm actively making changes while you're trying to work. That was an early isssue -- newer snapshots have support for Optional<String> parameters.\n. Thanks!\n. \nhttps://groups.google.com/forum/?hl=en#!forum/dropwizard-user\n. No, no, it's a fine idea and about time. I've started one for Metrics as well.\n. So, this can't be automatically merged as-is, plus it has a lot of formatting changes I don't plan on applying.\nWould it be possible for you to just extract the four changes you made into four discrete commits?\n. I don't really have any suggestions. At Yammer we just use Upstart to manage service processes, and it does the daemonizing.\n. Excellent stuff, thank you!\n. It works for me.\nCould you do me a favor and replace \"example.com\" with \"localhost\" in InstrumentedClientConnManagerTest and see if that helps?\n. Well, it works on my laptop and our CI machine. Can you track it down further?\n\nSent from my iPhone\nOn Jan 22, 2012, at 14:34, Mathias Bogaert\nreply@reply.github.com\nwrote:\n\nNo doesn't help. Fails in InstrumentedClientConnManagerTest on line 39.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/dropwizard/issues/21#issuecomment-3606931\n. I'm not sure Dropwizard is really ready for contrib modules (that is, modules which I don't use myself and probably won't ever use). I really appreciate the fact that you submitted this, but supporting it is going to be awkward going forward.\n\nOn the up side, one of the things I want to do for 0.3.0 is refactor the lifecycle code, which might make this easier to support in the future.\n. You should be extending ScalaService, not Service.\n. Good call, thanks.\n. I wouldn't worry about the duplication. It's unfortunate, but given that Jetty itself requires concrete instances of FilterHolder and ServletHolder instead of the generic Holder<T> it seems like a tradeoff between having concrete duplicates and doing a bunch of casting.\nThanks for all the pull reqs, BTW. Much appreciated.\n. This'll fly for 0.2.0, but I really want to get in there and rearrange ServerFactory for 0.3.0.\n. Why would you want to use something other than ISO 8601?\n. No, I just wanted to hear more about what motivated this. In general, I don't like system properties, since they're hard to discover and hard to test. Also, none of DW's other behavior is modified via system properties, making this an exception to the rule.\nI've added config params for file and console logging. Thanks for the suggestion.\n. Fairly covered by d0bcf7213c1bf1cbbecf606bb6efa4df164506ec.\n. Hah, whoops.\n. This is because of the change to use Jackson for config deser. Try annotating your fields with @JsonProperty.\n. Oh, actually: annotating them with scala.reflect.BeanProperty will work.\n. I SAID GOOD DAY SIR\n<3\n. I'm thinking this should probably traverse all system properties starting with dw. after it's parsed the config file, at which point it can overwrite/create the value in the document AST.\nSo your command line on Heroku would look like this:\njava -jar happy-place.jar server config.yaml -Ddw.database.url=jdbc:postgres://yay/whee\nWould that work?\n. Now in 0.3.0-SNAPSHOT. Lemme know how it goes.\n. Done in 4a106c84b04bd0d5676ac2382aea73f3bcabbc31.\n. A few things:\n1. This patch won't merge cleanly, it looks like.\n2. I don't keep copyright headers in my files.\n3. Do you need to actually replace Json or can you add a Jackson module to fix the behavior?\n. Gotcha. I'd rather add an overridable provider method on AbstractService than embed class names in the config file. It's not the best pattern, but it'll do until I come up with a better way of managing these sorts of customizations.\n. I'd prefer to just return a Json instance.\n. Works for me!\n. Headed over to #44.\n. If you'd like to add it, I'm totally OK with that.\nDruthers:\n- Show off the Guava collections mapping.\n- Use SQL queries in separate files, including a StringTemplate one.\nBut yeah, lots of folks have asked about JDBI in the wild. It'd be awesome to have something to point to besides @brianm.\n. Added in #49.\n. I'd much prefer to just go ahead and mount the admin servlet under /admin. Heroku is pretty popular, and the idea that folks might ship a DW app w/o health checks or access to metrics or etc doesn't seem right. That's a big part of what makes DW worthwhile.\nPresumably Heroku offers some sort of htaccess password protection for URIs? Or are you totally on your own?\n. If adminPort is set to a different port than the service port, the additional connector is never created.\nI can't merge this as-is.\n. Just to be clear, the added behavior I'd expect from this patch is:\n- If port == adminPort, don't create the internal connector, but add the admin servlet context to the external connector with a path of /admin.\n- If adminUsername or adminPassword are not null, add a Basic HTTP auth constraint for the admin servlet context with those credentials (converting null on either to empty strings).\n- If neither of those conditions are true, no behavior is changed from the current state.\n. Awesome, thanks for this.\n. Other than the typo in the README and the people/person confluence, it looks good. Thanks for putting the time into it.\n. Yeah. In general, I've found that to be a much cleaner way to model resources. Otherwise you end up with a RandomResources classes and the Single Responsibility Principle goes right out the window.\n. Very cool, thank you!\n. Excellent, thank you.\n. Is there a log4j to logback bridge?\nI wouldn't mind using something under active development, but a lot of libraries depend directly on log4j.\nLogback users tend to write libraries with slf4j dependencies, which ironically makes it easier to use log4j.\n. Hmm. Looks like there's a bridge for log4j. I'll look into it.\n. @christophercurrie For libraries, certainly, but Dropwizard is an opinionated, batteries-included framework. Punting on a logging backend would be yet another bit of glue code everyone has to write themselves, and the whole point of Dropwizard is to keep people from having to write glue code.\n. @christophercurrie I know, I've been using slf4j for years. Configuring the backend that you end up choosing, however, is the glue code that Dropwizard serves to obviate by implementing it once and only once. Dropwizard will never support more than one backend.\n. @christophercurrie If there's a use case which Dropwizard's logging support doesn't handle, I'd be very interested to hear it. But Dropwizard, as a project, exists exclusively to reduce the transactional cost of introducing a new service into a production environment.\nI'd much rather figure out how to write a logging infrastructure which actually meets people's needs rather than just punting entirely and adding the cost of selecting and configuring a logging framework to the transactional costs of new services (and the divergence as teams select and configure differently to the operational costs of those services).\n. @christophercurrie Most programmers do, since just about all of us have been painted into a corner by a pig-headed library before. ;) Believe me, I wish the Jersey folks had gone with slf4j instead of j.u.l (really \u2014 who does that?).\nI'm always open to hearing about unmet needs with Dropwizard, but something like logging is one of those batteries that needs to be included.\n. Pretty much done at this point!\n. Oh wow, thanks. I'll cut 0.3.1 today with this fix.\nThat's embarrassing.\n. You'll need to figure out how to get your IDE to update resources in the classpath.\nFor IntelliJ, this means running the Dropwizard application in Debug mode and executing Run | Reload Changed Classes.\nDropwizard does not support a \"dev mode\", nor do I have any plans to add one.\n. @amir Thanks for pointing this out.\n. Just thought of something else: why don't we cache the resource and the etag together? Instead of a byte[], it could use a static inner class. This would also make adding in the last-modified date easier.\n. @jamesward Hmm. I don't actually think there's a way to do that, short of using the JarLocation class to find the location of the JAR file which contains the AbstractService implementation and using File#lastModified(). Probably best to put that in another change request, since the ETag stuff is pretty much already done.\n. You can have as many pull requests open as you like, actually.\nSo: further refinement. How about using HttpServletResponse#setDateHeader(String, long) and System.currentTimeMillis() instead of the Calendar/Date/SimpleDateFormat dance?\n. Also, it seems weird to have CachedAsset be in the core package -- why not just keep it a private, static inner class? What else would want to use it?\n. addDateHeader and setDateHeader take milliseconds:\nhttp://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletResponse.html#addDateHeader(java.lang.String,%20long)\nIt'll let Jetty do the date formatting.\nDo you want me to close this pull request? I'm not sure why you can't open another one.\n. And getDateHeader exists, too: http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletRequest.html#getDateHeader(java.lang.String)\nMaybe just round the time to the nearest second?\n. Thanks! I don't tend to update the docs until later in the release cycle, but this seems like a fine point.\n. You can't have two servlets mapped to the same URL pattern, so you'll either need to specify a different URL pattern for the asset servlet (e.g., *.css) or set the http.rootPath property to something besides /*.\n. Yeah, it's time.\n. Closed by f9bc5caf3542e1c71e827487489c71280718fb83.\n. I can't merge this, and these commits add a bunch of your one-off stuff to the POMs.\n. Sorry, but even being able to pass in override via the command line was a compromise for me.\nBetween the default values in the Configuration subclass and properties, the command-line entries, and the .yml file itself, there's more than enough degrees of freedom for confusion.\n. Configuration files are generated via Puppet, where the shared parameters and their node-specific overrides are managed.\n. Sorry, no.\n. In general, I recommend people structure their Jersey resources with a 1:1 mapping between URI and resource class. @Path-annotated methods break that mapping and tend to be harder to test and refactor. I'd accept a pull request for a fix for this, but I'm not going to spend any time trying to fix it myself.\n. Should be closed by #80.\n. Good catch, thanks!\n. 0.4.0 isn't out yet. The documentation refers to the currently released version, which uses log4j.\n. This would belong in the dropwizard-auth module. I personally don't have time to work on this, but if you'd like to, I'd merge it.\n. #213 and friends does a pretty good job at solving this.\n. Fixed in 2462ca0df02e38c423045f9032f047bfa26bdc59 until it bites someone else in the wild.\n. First off, this is awesome. I really appreciate the fact that you've done this.\nThat said, I can't make Dropwizard a Java 7-only project just yet, and there's not really any way to make this more modular. So I'm really sorry, but I can't merge this. I'll definitely keep this in mind going forward, since modularity is on my todo list for Dropwizard.\n. Sounds a bit like the Atmosphere framework for Jersey?\n. Awesome, thanks.\n. Cool!\n. I'd absolutely merge a patch for this.\n. Those are in Metrics, actually.\n. Fixed in 9c8b7d76d554f06c63962c569456f3b7c6423a81.\n. Sure, I'd be OK with this.\n. Fixed in 9c8b7d76d554f06c63962c569456f3b7c6423a81.\n. This would require moving DW to Java 7, which we're not ready to do yet.\n. @paulhill, would you mind opening an issue about that? Surprises are for birthdays, not documentation.\n. No longer needed. I switched back to using our own AsyncAppender implementation. Logback's was entirely too complicated.\n. That's not an exception in your resource class. It's an exception in JacksonMessageBodyProvider which indicates that Jersey can't deserialize the specified entity type from the request entity.\nConversations like this are really better off on the mailing list: https://groups.google.com/forum/#!forum/dropwizard-user\n. I'm tracking this on #110. In general, I'd much appreciate it if stuff like this went to the mailing list first.\n. I'd rather you just go ahead and have it as your own project. I haven't heard a lot of requests for it, and since we don't use it internally at Yammer its maintenance would be at the bottom of my to do list.\nCool work, though \u2014 I've had my eye on Swagger for a while.\n. Awesome!\n. Gradle should be respecting the default profile for jersey-test-framework-inmemory, since it has activeByDefault set to true. That's where the dependency is, and that's why it doesn't work in Gradle but does work in Maven.\nI'll merge this, but it'd be nice if you also opened a ticket with the Gradle folks, since this definitely a bug in their Maven support.\n. I don't have any interest in maintaining this, sorry.\n. I'm pretty sure the addition of ServletEnvironment#setSecurityHandler(SecurityHandler) (which is available from AdminEnvironment) satisfies this. Let me know if there's more to it than that.\n. This has come up on the mailing list. The combination of default values in the Configuration fields, configuration file, and command-line overrides is enough complexity.\n. Sorry, no.\n. Thanks!\n. Well that was easy.\n. I don't think this has a wide enough appeal to merit the maintenance cost.\nIf you'd like, you can certainly maintain this as a third-party project, perhaps adding the functionality in via a bundle.\n. The simple way would be to add another appender to the Logback root logger, just like Dropwizard does. That doesn't need to take place in Dropwizard; that can be in your application.\nResetting the existing Logback configuration is required to prevent two console appenders, one with the default configuration, one with the Dropwizard configuration.\n. Hmm. I like the idea; I don't like the implementation.\nCan we just pass null in the no-arg constructor and have the one-arg constructor use the class name as a default?\n. I think this should be part of JettyManaged's toString implementation, not Environment.\n. Awesome, thanks.\n. This is a little magic for my tastes.\n. Fair enough, but you might want to fix your gitconfig: 4fb62c2fa9abdf7338077293af7fcedf8013d817.\n. This is what the commit metadata looks like:\n```\ncommit 4fb62c2fa9abdf7338077293af7fcedf8013d817\nAuthor: M\u00e5rten Gustafsons marten.gustafson@gmail.com\nDate:   Sun Jul 22 16:39:39 2012 +0200\nMake service name optional (defualt to Class.getSimpleName() of subclass)\n\n```\nNote the last name. That's from your .gitconfig somewhere.\n. What are the levels of the statements you see when you change the threshold to ALL?\n. You said \"If I change file/threshold to DEBUG/ALL, I see file logging.\" Please show me some of that.\n. I think you might just want to leave the thresholds alone and use a specific logger for your application:\nyaml\nlogging:\n  loggers:\n    com.myapp.service: ALL\n. You might want to read the Logback documentation to learn how it works.\nI would suggest using this configuration:\nyaml\nlogging:\n  loggers:\n    net.amadan.sal.migration: DEBUG\n  file:\n    enabled: true\n    currentLogFilename: migration.log\n    archivedLogFilenamePattern: migration-%d.log.gz\n    archivedFileCount: 5\n    timeZone: UTC\n. Check this out: 341c66d49ebeb4bf0f8eac33e9b40eafa35d5e37.\nThis should be sufficiently general for you to implement a Mustache implementation of ViewRenderer.\nI'm not sure I want to provide a top-level DW module for Mustache support, but I'll talk to the folks at Yammer who do most of the UI work and see what they think. If it's not too much trouble, I'll bang it out.\n. Boosh.\n. Yeah, that's my big worry here, too. Any ideas?\n. This is good stuff, but including this trashes IntelliJ, since there's a bunch of .java files which don't compile. :(\n. Hmm. Maybe this makes more sense as a separate project, then.\n. I would love to land these for 0.7.0 and drop the example app, yes. How about we loop back around once I've landed most of the breaking craziness for 0.7.0 and we can get these up to date?\n. Worth noting that all this will need to get re-done given the 0.7 changes.\n. For a lot of what Dropwizard services do, this would add a fair bit of overhead to the works.\nYou'd probably be better off wrapping the Runnable/Callables instances in instrumented decorators rather than messing around with thread locals.\n. This isn't any different than how it works for HTTP.\n. Closed by #214.\n. I'm a little confused. Dropwizard doesn't support annotated parameters like that, nor does Jersey. I think you're getting a false positive?\n. There isn't, no, but if you rebase this I'll apply it.\n. @fleaflicker, I don't actually care about adoption. I think it's neat that people use Dropwizard, and I get a kick out of seeing the things people build with it, but ultimately the purpose of Dropwizard is to power backend services at Yammer. That's where my paychecks come from, that's where my equity is, that's where my professional responsibilities are. If you can't justify migrating to Dropwizard that's not my problem.\nUltimately, the point of Dropwizard is to have opinions. If you want to do arbitrary things with JDBI, go for it. dropwizard-db is a tiny amount of code, all of which are opinions. The end result is that engineers here at Yammer can get up and running without having to hem and haw over which is the best JDBC connection pool. If tomcat-dbcp doesn't work for people, I'd rather swap that out than try to leave escape hatches everywhere in case you don't like our opinions.\nAll that said, I'm happy to accept patches which add generality without a) increasing my maintenance burden or b) harming the out-of-the-box experience. I'm happy with this patch, I just haven't gotten around to merging it because I'm being paid to do other things. When I get some free time, I'll go through a run of pull requests and handle them all.\n. This dovetails pretty naturally with some work I'm doing for 0.6.0. This patch won't apply directly to that, but it'll definitely result in you being able to provide whatever DataSource implementation you want.\n. It doesn't look like protected targets do anything?\n. That looks good. I'm a little confused by all the copying of Resource instances. Why not just use a simple getter and setter?\n. That's odd. Can you post the exact error? I've never seen that before. The most I've got set up is Findbugs, which doesn't have any opinions about Jetty classes.\n. So, the reason the tests checked for \\r\\n on Windows was because (according to folks running the DW tests on Windows), checking for \\n was breaking because Freemarker generated \\r\\n line endings. The rest of the patch looks awesome \u2014 great catch \u2014 but I'm worried about breaking the tests again for Windows folks.\n. While I don't much care about Windows, I do care about contributors who are on Windows. If there's a build issue due to the line endings, let's get that fixed.\n. I'm willing to accept fixes for Windows, but that seems orthogonal to this PR.\n. Good point. I've fixed this in 0.6.0, where Json is removed.\n. Actually, this is part of JDBC 4.1, and required for compilation on Java 7. I think the solution is to remove the override annotation.\n. The target is JDK 6, but I'm using JDK 7. Hence the JDBC 4.1 issues.\n. This is interesting stuff, but so far you're the only person to have asked for functionality like this. I think we might be better off turning Validator into an interface and allowing end users to provider their own implementation of it.\n. I think c0cec2cef90ea805c409e94aca6dcec204cf5e14 should solve this.\n. I'm unclear what problem you're trying to solve here. Bundles can extend both the initialization of the Bootstrap and the configuration of the Environment.\n. I'm pretty sure you'll be fine just overriding the run method of your bundles.\n. I'd suggest moving initialization of your JDBI instance into the bundle, actually. See HibernateModule for how I've done something similar.\n. I know what you're asking for, but that's always been incompatible with the way bundles have been intended to work. The big problem has been that the API didn't do a good job about hinting at purpose or making inappropriate usage not work. I only ever intended bundles to be added in a service's constructor, not once the service had run.\nThat said, if your bundle is responsible for creating the JDBI instance, it can pass that to the resources it creates as well as exposing it to your service. HibernateModule does this with its SessionFactory.\n. Good catch, thanks!\n. Sold!\n. Interesting, but Dropwizard doesn't include any AOP foundations as-is. At most this could be added for Jersey resource methods, but that's kind of a low-win feature.\n. Dropwizard just validates request entities for Jersey resource methods which are annotated with @Valid. It's not a general feature.\n. 0.6.0 won't use commons-cli.\n. Master doesn't use commons-cli.\n. \"Document everything\" is already a standing bug, so unless there's a pull request coming up I'm going to close this.\n. In master, use Environment#setJerseyContainer(ServletContainer).\nIf you don't want to use Dropwizard's \"custom configuration\", I suggest you use a standard application server like Jetty or Tomcat and write your own glue code.\n. This fails tests under Maven. You'll need to figure out how to add the second asset to the classpath.\n. Tests don't pass.\n. In your configuration class, just add:\njava\n@NotNull\n@JsonProperty\nprivate CacheBuilderSpec assetCache = CacheBuilderSpec.disableCaching();\nand when you initialize your service:\njava\nnew AssetBundle(\"/assets\", config.getAssetCacheSpec());\nThen in your configuration file you can switch between this:\nyaml\nassetCache: maximumSize=0\nand this:\nyaml\nassetCache: maximumSize=100\n. Ah, good point! I totally hadn't considered that. I'll see what I can do.\n. This can't be merged automatically. If you fix the conflicts, I'll apply it.\n. There's no unified way of doing this, since errors can occur in Jetty, in Jersey, and in other servlets. None of these share an API, really, so trying to make it modular is a lot of work for very little win.\nI expect Jersey 2 to improve the situation a bit by standardizing validation, but it'll always be a hack.\n. Damn, I just did some work on the asset stuff yesterday and this won't apply.\n. It's already on master.\n. Because it didn't add enough performance improvement to justify the complexity.\nA cached resource was ~5\u03bcs at the 99.9th percentile, an uncached resource was ~50\u03bcs. The relative difference is swamped by transmission time, anyway.\n. Go for it!\n. Good catch. Thanks.\n. The only official way of stopping a Dropwizard service is SIGTERM. I'm keeping it that way.\n. Why not push the cast into the getter?\n. Sorry about that, and thanks for the patch!\n. Isn't this already fixed in 2d6813564be881e20e4990fd79f816069d141a54?\n. This is very cool, but we don't use Guice at Yammer, and I'd rather not take on the maintenance burden for code I don't use. It ends up making for very unresponsive, reactive maintainers.\nI think you should pull this out into your own repo. I'd love to link to it in the DW docs, especially since Guice integration keeps coming up on the mailing list.\n. Hmm. I'm leery of depending on sun.* classes.\n. What advantages does it have?\n. I'm thinking continuing this as an external module is for the best. I haven't had any requests internally for this.\n. JacksonMessageBodyProvider currently doesn't do any jigger-pokery with ignoring classes. That's all upstream in JacksonJsonProvider. The problem you're running into, I think, is that StringProvider supports */*. Not sure what I can do here, but I'm open to suggestions.\n. PR is merged. Thanks!\n. Good call. I'd prefer \"request entity\" over \"payload\", though.\n. Fixed by #240.\n. Dropwizard is not intended to be an application server.\n. Do you mean Jetty handlers? What are you trying to do?\n. Why not use servlets and filters?\n. If a lot of people ask for it, I'll consider it.\n. Fixed by #241.\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. I'm definitely open to this, and I like the general direction of this.\nThat said, I'm really resistant to including class names in the configuration. I'd much rather use Jackson type names. This does mean the ObjectMapper's SubtypeResolver needs to be informed of the various subtypes, but we can require that appender configuration subclasses implement an SPI and use the /META-INF/services/ServiceFinder approach to auto-discover subclasses.\nUnfortunately, I have a feeling I won't be able to dedicate much time to such a big rewrite for a while, either in terms of writing code or reviewing it, until there's an internally compelling reason to dig into the code. The next item like that, I think, would be Jetty 9, which has a lot of interesting performance and functionality improvements. I hope that's not too far out on people's timelines.\n. Actually, I couldn't stop thinking about this, so I came up with this: c8a24417360e2ed7d3c9c0b99bf4bcf1fdcc707f.\nLogging would be configured by specifying a set of outputs:\nyaml\nlevel: INFO\nloggers:\n  com.example.app: DEBUG\noutputs:\n  - type: console\n    threshold: ALL\n  - type: file\n    threshold: ALL\n    currentLogFilename: ./logs/example.log\n    archivedLogFilenamePattern: ./logs/example-%d.log.gz\n    archivedFileCount: 5\n  - type: syslog\n    host: localhost\n    facility: local0\nThis allows for multiple file outputs, for example. If you wanted to add your own implementation, you'd implement LoggingOutput in a class with a @JsonTypeName(\"blah\") annotation and a /META-INF/services/com.yammer.dropwizard.logging.LoggingOutput entry. Then as long as that's on the classpath, users can specify that as a logging output.\n. Thanks!\n. None of the libraries that Dropwizard depends on really use JCL, nor has this been an issue for anyone yet.\n. So, one thing I've been considering for Dropwizard is combining the hostname and port. So 8080 would be equivalent to 0.0.0.0:8080, but you could also manually specify 10.0.0.1:8080, etc.\n. Thanks!\nThe hostname stuff can definitely wait, it just ties into some thoughts I've been having about restructuring the way Dropwizard's connectors are configured.\n. Free time.\n. I can never get that right. Thanks!\n. Awesome! This doesn't need to be a configuration parameter, though. Just register the metrics.\n. It's a bit more complicated than just Jersey: Dropwizard also supports servlets and filters, which can throw exceptions, and Jetty itself has components which can throw exceptions.\nSo the reason Dropwizard doesn't currently conneg caught exceptions is because that has to take place at the Jetty level.\n. For 0.7, they'll be handled using Jersey exception mappers, with JSON providers included by default.\n. 9f4f6e20cb1f3dfee5b638c90d7282aebb0083dd should help you out.\n. Could you remove the changes to ServerCommand and just add the JUnit rule?\nI feel like enough people want to do this, I'd like to give them something to focus on.\n. I'd accept a pull request, sure.\n. This is cool, but I don't think that having dropwizard-testing pull everything in is a good idea. I'll give this some thought: testing may well need submodules.\n. The 0.7 branch I merged clobbers this. Would you like to resubmit?\n. I'm definitely interested in making some larger changes, but just making Environment an interface isn't enough.\nI have some ideas in terms of making Dropwizard more extensible. They're uncertain, both in terms of structure and in terms of when/if I'll have time to work on them.\n. I think this is the eventual direction, but at some point I'm not willing to try to maintain and support an infinitely configurable system. Dropwizard has opinions.\n. I like this patch, but I can't merge it. Get it to work on master and I'll merge it.\n. So far this is the only time I've heard of someone having this problem. If it comes up again, we'll see what we can do.\n. Ok, so 0.7.0 no longer has the notion of a \"root\" or anything. Context paths are called context paths; URL patterns are called URL patterns.\n. That'll definitely happen before 0.7.0 is released.\n. FWIW, JSR-303 validation for resource methods is coming in Jersey 2. So once that's got a final release, this will become much easier.\n. Currently Jersey 2.x doesn't have a ResourceMethodDispatchAdapter equivalent, making it a non-viable upgrade.\nI've let them know about this on their mailing list, but I'm left with the alternative of either a) upgrading, and tossing aside huge swaths of functionality; or b) holding tight with 1.x and hoping for the best.\n. Why not have a test-config command?\n. Yes, it would be a command with a single responsibility. That's how I prefer them.\nRegarding the type parameter, you could take the same route that ServerCommand does and accept either the service itself or its configuration class as a concrete parameter in the constructor and override #getConfigurationClass().\n\nCoda Hale\nhttp://codahale.com\nOn Mar 19, 2013, at 5:56 AM, Jochen Schalanda notifications@github.com wrote:\n\nHaving a separate command for validating the configuration was actually the first approach I took but the command wouldn't have done much besides extending ConfiguredCommand.\nAlso a concrete class inheriting from ConfiguredCommand would need to specify the Configurationclass being used while having the validation in ConfiguredCommand can work on any T extendingConfiguration. This helps if the ServerCommand is using another Configuration class than the subclass of ConfiguredCommand.\n. > Imagine a service with 4 commands, each with an individual Configuration sub-class.\n\nA service should have a single configuration class.\n. Yep. It'll be done for 0.7.0. Currently working on a pluggable connector configuration system.\n. Read about Jersey content negotiation. Please don't issue a ticket unless you find a bug.\n. This seems reasonable. I'd accept a pull request for this. We may need to revisit the issue, though \u2014\u00a0I'm considering making some pretty drastic changes to DW for 0.7.0.\n. It's not useless. It enforces type safety for ConfiguredCommand instances.\n. The admin environment now supports adding filters, etc., which should resolve this.\n. In general, I really like this. My one problem is the configuration: I hate putting class names in config files, and validation behavior isn't really something I can see people wanting to change on an environment-by-environment basis. Why not just add the mapper to Environment with the default implementation?\nOther than that (and not wanting to name things *Json), I'm totally into this. Thank you.\n. Right now that gets assigned in DropwizardResourceConfig, and I'm suggesting that that responsibility be moved elsewhere, so that an ExceptionMapper<InvalidEntityException> field can be added to Environment, which means the end user's code would look like this:\njava\nenvironment.setInvalidEntityExceptionMapper(new MyOwnThing());\n. I think with those two changes \u2014\u00a0basically consolidating this logic into DropwizardResourceConfig \u2014 we're good to go. I really like the fact that we don't have to add more crap to Environment. It's a weird enough animal as it is without bolting on more legs.\n. I'm suggesting that you override the validate method on DropwizardResourceConfig, which gets called after it's been set up by Environment, immediately before being run, to check to see if someone's already registered an ExceptionMapper<InvalidEntityException> and, if not, add the default InvalidEntityExceptionMapper provider.\n. @ajordens, I'd definitely like to make DW's general error handling better, but this isn't the pull request for it.\n. @ajordens: The plan is to replace the guts of UnbrandedErrorHandler with something which reuses Jersey's content negotiation engine and a set of exception mappers to provide arbitrary error handling with sane defaults.\n. No, it's good. I've just been busy getting Metrics 3.0.0-Beta1 out the door.\n. Ok, so these changes have been incorporated in my 0.7 branch which I just landed. Would you mind giving that a once-over and seeing if it meets your use case? Thanks!\n. Yes.\n. Good call! Thanks!\n. Excellent! Thanks!\n. I like the InputStream solution better.\n. Hmm. Might be easier to extract out a ConfigurationFileProvider interface with a InputStream find(String) method on it, make a default implementation which returns a FileInputStream, and make a property for it on Bootstrap.\n. So if we can make sure the InputStream gets closed (Jackson does this by default, but I'd rather not leave it up to chance), I'll merge this.\nReally loving this change, BTW.\n. Thanks!\n. Doesn't #stop() do that with ManagedJdbcConnection?\n. Ah, gotcha. I prefer the change to ManagedJdbcConnection: it's the one with the busted contract.\n. I'd accept a patch to change this behavior.\n. You've got a bunch of backup temp files in your commit.\n. Also, I'd prefer commit messages which actually describe what they're doing.\n. If you're going to open a new pull request, why not squash the commits? I'd prefer to not crud up the history.\n. Cool! Thanks!\n. Yeah, it'd been on my \"things-to-figure-out-someday\" list, but might as well set the whole thing up. :smile: \n. The 0.7 changes totally clobbered this \u2014\u00a0can you resubmit? Thanks!\n. Added to master as server.maxQueuedRequests; will be in 0.7.\n. I just landed a huge 0.7.0 branch which clobbers this. I'd love to see these changes in DW, though. Would you mind resubmitting?\n. I'm not sure what you mean.\n. Again, I don't know what you mean:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Dropwizard Project ................................ SUCCESS [1.098s]\n[INFO] Dropwizard ........................................ SUCCESS [12.503s]\n[INFO] Dropwizard HTTP Client ............................ SUCCESS [3.504s]\n[INFO] Dropwizard Database Support ....................... SUCCESS [2.070s]\n[INFO] Dropwizard JDBI Support ........................... SUCCESS [2.610s]\n[INFO] Dropwizard Migrations ............................. SUCCESS [1.796s]\n[INFO] Dropwizard Hibernate Support ...................... SUCCESS [4.896s]\n[INFO] Dropwizard Authentication ......................... SUCCESS [3.302s]\n[INFO] Dropwizard Views .................................. SUCCESS [2.443s]\n[INFO] Dropwizard Test Helpers ........................... SUCCESS [5.436s]\n[INFO] Dropwizard Example Application .................... SUCCESS [6.590s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\nIt would help immensely if you would copy and paste the error you're seeing.\n. Thanks! This looks like a line-ending issue with the tests. I'll see what I can do.\n. I would suggest just using Dropwizard 0.6.2 instead of building from source.\nYou don't need to build the development version just to try out Dropwizard. There's a helpful guide to getting started in the documentation here.\n. I like the idea, but I'm not convinced it should be in core.\nAre there other session-based features in addition to flash messages that you'd want?\n. dw-views makes sense, yeah, but I do see the need for a solid session module. It'd be nice to not reinvent the wheel there. Maybe Shiro?\n. The difficulty with client-side sessions (a la Rails) is that you need to get all the following ducks in a row:\n- Integrity (e.g., HMACs w/o timing attack vulns, or GCM mode)\n- Confidentiality (e.g., encryption w/o timing attack or padding vulns)\n- Revocability (e.g., timestamps, key rotation, etc. etc.)\nAll of which are huge pains in any ass. Thus my reluctance to throw my hat into that particular ring.\n. I don't use or recommend OneJar, so I'll be looking to the community for a patch.\n. This won't merge due to the huge 0.7.x branch I've landed.\nAlso, I'd rather support either Mustache or Handlebars, but not both. If you'd like, raise the issue on the mailing list and see if anyone has any deep-seated attachment to Mustache, etc. etc. I'm a Freemarker fan myself.\n. The 0.7 branch I just merged clobbers this patch. If you'd like to resubmit, I'd accept it.\n. Awesome, thank you. I was planning on splitting this out today, but you've hit the nail on the head.\n. The 0.7 branch I just merged totally clobbers this \u2014\u00a0can you resubmit?\nAlso, a few notes:\n- Having its own ObjectMapper means it'll need to be manually configured or it'll produce some surprising failures when it comes to mapping.\n- Check out Guava's ForwardingMap.\n- This seems like a lot of code to support for a small feature.\n. This isn't required \u2014\u00a0Jackson will infer the JSON field name from the Java field name.\n. java\n@JsonProperty(\"aws\")\nprivate AwsConfiguration awsConfig = new AwsConfiguration();\nYou need the name in the annotation here because the JSON/YAML field is aws and the Java field name is awsConfig. I'd recommend renaming the Java field to match the JSON/YAML.\n. As always, thanks!\n. Template paths which start with / are absolute \u2014 they're not scoped to the view class name.\nTemplate paths which don't start with / are relative \u2014\u00a0they're scoped to the view class name.\nSo if your partial is shared between views, you'll need to prefix the partial name with /:\nFoo is working!\n{{> /bar}}\n. I'd rather stick with the current behavior: things prefixed with / are absolute paths, everything else is relative to the class. That way I'm not stuck maintaining the combinatorial space of everyone's preferences and expectations.\n. I'm hoping c4b320131d179592e30fcbf40bb5fba3d8619448 fixes this. Would you mind checking it for me?\n. How about now?\n. How about with 2fe532e78704820e5a60d1cb8ccb86725e4ef35e?\n. Oh thank God.\n. Thanks for all your help, @kilemensi. I really appreciate it.\n. I appreciate your effort, but I don't want to maintain these tests. The example application is really just that.\n. Thanks!\n. Awesome! Thank you!\n. Thanks!\n. Scala support is removed in master.\n. Awesome, thank you.\n. Yes! Awesome. Would you mind just dropping the old (long, TimeUnit) methods?\n. Actually, n/m. I'll do it. Thanks!\n. This parameter is removed in master, and I don't plan on releasing 0.6.3.\n. The exception mappers for 0.7.0 will be much more flexible. It's not as simple as allowing you to remove mappers, since mappers may be provided by library JARs via META-INF/services, but 0.7.0 effectively decouples exception logging from error message representation.\n. Thanks for pointing this out, but given that the asset etags are hexadecimal hashes it's easier to just quote them.\n. The current implementation does require that your session store provide read-your-own-write consistency, but I'm having a hard time imagining a functional session store which doesn't. That would be provided by cookies, by an in-memory store and sticky sessions, by the crazier distributed stuff like Terracotta, by the less crazier distributed stuff like Riak or Memcached, and finally by relational databases.\nFor something like flash functionality, I'd rather not write (and therefore predetermine for all uses) unrelated functionality like serialization, integrity, authenticity, and confidentiality. It's not the end of the world, but those are orthogonal to the fundamental feature: to provide a sticky piece of arbitrary information which the user will see on the next request.\nSo I guess I'm wondering what you find lacking with the existing implementation?\n. For what it's worth, I was hoping to provide a cookie-only session store for Jetty as part of Dropwizard. We'll see how it goes.\n. Thanks!\n. Awesome, thanks!\n. Whoops. Thanks for the heads up.\n. Yeah, this is awesome. Full ahead steam and thanks.\n. Awesome, thanks much.\nI'll take it over from here.\n. I'd accept a pull request to fix this, but I don't have time to dedicate to this myself.\n. Closed by #343.\n. I like it. Would it be going too far to also swap dashes for underscores (e.g., allow read-committed for READ_COMMITTED)?\nAlso, would it be easier to use Class#getEnumConstants rather than reflect on valueOf?\n. It also looks like there's some FindBugs issues.\n. I just have the last question about how to handle bad values and I'm ready to merge this!\n. java\nreturn null; //  \u00af\\_(\u30c4)_/\u00af loliono\n. The tests are failing.\nAlso, I feel like it might be easier to just add the properties to AbstractAppenderFactory instead of pinning them to an enum.\nBut I like this. It's something I've been punting on.\n. Check the TravisCI status on the pull request.\nOn Monday, June 3, 2013, Greg Bowyer wrote:\n\nWhich tests are failing ? I dont seem to get failures on my end\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/344#issuecomment-18889153\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Some small nits to pick, but otherwise looks good.\n. Right now the docs (in /docs) haven't really been updated to reflect the\nchanges in 0.7.0, but thank you.\nI'm wondering if the discard threshold shouldn't be exposed, though, rather\nthan hard-coding it.\nOn Tuesday, June 4, 2013, Greg Bowyer wrote:\n\nSo all the review changes make sense, the one with the magic numbers is\nnever going to be particularly clear, but hopefully constants should at\nleast illuminate the usage a little.\nAlso where is the documentation ? on a gh-pages branch .. I should update\nthe documentation to match really\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/344#issuecomment-18935599\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Awesome, thanks.\n. This is not a forum, it's an issue tracker.\n. Ok, so you didn't actually upgrade Jersey.\nJersey 2.0 is in a different namespace, so you've got 1.x and 2.x running side-by-side, and the parameter validation won't work at all.\n. Also, please don't lump totally separate changes into a single PR.\n. That's because 2.2.2 hadn't been released yet.\nIf you'd like to make that change, send a PR.\n. Thanks!\n. I specifically wanted the Jetty queues, actually.\n. Both the bounded and unbounded queues are array-backed, which provides reference locality, without which the batching of log events just ends up chasing nodes around the heap. Further, the bounded queue in Jetty can grow \u2014\u00a0it's not preallocated, unlike ArrayBlockingQueue.\n. I'm interested, but I don't want modularity if it drastically increases complexity.\nThe only reason dw-lifecycle depends on jetty-server and not jetty-util is ServerLifecycleListener, so if that changes, dw-lifecycle gets a lot more lightweight.\n. I actually re-did most of that to use a custom AsyncAppender implementation, so these docs won't work.\nI appreciate the effort, though.\n. It sounds like you either have multiple servlet dependencies. That's unrelated to AssetServlet.\n. Awesome stuff!\n. Good catch, thanks.\n. Why do you need to set the name?\n. Because I'd rather re-use the bits of Servlet 3.x which provide servlet registration.\n. Don't worry about it. I'd rather make ServletEnvironment implement and delegate ServletContext.\n. Fixed in b3650115a35ffe16cb964e7c97d3b0976b06638f.\n. Probably related to the Liquibase 3 upgrade. I've reverted that.\n. If we're going to have the request log be polymorphic, it should act like ServerFactory and friends (i.e., by leveraging Jackson's polymorphic deserialization and deserializing a factory class instance from the config).\nI'm categorically opposed to embedding class names in the config.\n. This isn't a bug report. The mailing list exists for a reason.\n. I have no plans to do this. Dropwizard will never be a good fit for user-facing web applications.\n. I think this is a great idea, and should totally be included by default.\nAlso, this should totally be picked up by LoggingExceptionMapper to reuse the request IDs.\n. I appreciate your effort here, but I really don't like omnibus pull requests. Some of these changes make sense; others don't. I suggest bringing these things up on the mailing list before investing time in patches.\n. Awesome, thank you!\n. Awesome, thanks!\n. yaaaaaaaaaaaaaaaaaaaaaaaay\n. Is this ready to go?\n. Awesome, thank you.\n. I can't merge this PR as-is.\n. I appreciate your effort here, but I don't want Dropwizard to lose its focus. If you don't want to use Jetty, that's OK, but it also suggests to me that you're looking for a different library to use. Dropwizard is for building HTTP web services on.\n. This was fixed by switching back to H2, AFAIK.\n. If you'd like to fix this in a way which doesn't dramatically change the existing validation code, I'd accept a PR.\n. Dropwizard 0.7.0 and on will require JDK 1.7.\n. Agreed on JUnit rules. They've been awesome for the full app integration\ntests, and it's a pattern I'd like to encourage.\nOn Thu, Sep 19, 2013 at 11:10 AM, Nick Telford notifications@github.comwrote:\n\nThinking about this further, this might be better off as a JUnit TestRulehttp://junit-team.github.io/junit/javadoc/4.10/org/junit/rules/TestRule.htmlrather than an abstract class. They provide a bit more control to the user\n(e.g. they can choose to have it run for each test, or for the entire\nclass) and they don't constrain your class hierarchy.\nAlso, it might be nice to break the Liquibase stuff out in to a separate\nTestRule so that they can be used independently, or it can be combined with\na (future) TestRule for Hibernate.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/377#issuecomment-24760823\n.\n\n\nCoda Hale\nhttp://codahale.com\n. I have no plans to do this. Dropwizard's sole intended source of configuration is the YAML config file.\n. Thanks!\n. I appreciate your effort, but this patch really overspecifies: HTTP headers, route matching, etc. I get this feeling this would work better as a standalone library, which would give you the opportunity to iterate on it outside the Dropwizard release cycle.\n. I'd prefer to add documentation to the existing docs. Feel free to add a third-party section in the user manual.\n. Dropwizard doesn't support any variable substitution, which is intentional.\n. The tests don't appear to be passing, and I'm confused as to the motivation.\n. Ah, Travis. :)\nI'm little wary about separate app/admin request logs. Why do you want that?\n. I went down the per-context Server route, and that way lies madness.\nOn Tue, Sep 17, 2013 at 7:55 AM, Nick Telford notifications@github.comwrote:\n\nFWIW, I've just noticed a mistake/unfinished idea: I moved the ThreadPool\nconfiguration inside AbstractHandlerFactory but still configure a single\nThreadPool for the entire server (configured by the \"application\"\nHandlerFactory). This is the part I'm unsure about: keep ThreadPool\nconfiguration global or have a per-context Jetty Server. The former\nraises resource starvation concerns, the latter increases complexity.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/383#issuecomment-24594587\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Awesome, thanks.\n. Two things:\n- A disconnected client won't actually receive the response, so I'm assuming this is about metics and request logs?\n- Why not use a 400 to indicate that the request the client sent wasn't processable? 204 indicates the request was received and handled successfully, but that the server has no content in its response.\n. I would accept a PR to add an optional name parameter to AssetsBundle.\n. It no longer applies to the code in master.\nOn Wednesday, September 18, 2013, Simon Curd wrote:\n\nHey - just out of interest, wondered why you've not merged this\ndocumentation fix?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/387#issuecomment-24653931\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Thanks!\n. Per #277, this isn't possible yet.\n. No, the admin port is mandatory.\n. The current amount of documentation is enough of a maintenance burden. I don't have any plans to host more than the most current version.\n. Awesome, thanks.\n. Excellent, especially given that it's optional.\n. I remember there being some odious about what Logback required of me while\ndoing this, but I don't remember what. Go ahead and give it a go: you'll\neither a) find that odious thing, b) find out I was wrong, or c) find out\nthat while I may have been right, times have changed for the better.\nI'm hoping for C, B, and A in that order.\nOn Mon, Sep 23, 2013 at 10:48 AM, Nick Telford notifications@github.comwrote:\n\nI really dislike the way that each of our PrefixedThrowableProxyConverterimplementations, including the one introduced by this PR, essentially\ncopy/pastes the implementation from the underlying class in order to hack\nthe prefix in to the algorithm.\nWouldn't it be preferable to just do this:\n@Overrideprotected String throwableProxyToString(IThrowableProxy tp) {\n    return super.throwableProxyToString(tp).replaceFirst(\"^\\t?\", \"! \");}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/396#issuecomment-24938842\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Wooord.\n. For technical support, you're better off sending a message to the mailing list.\nGitHub issues are for feature requests, bugs, etc.\n. This is fixed in Jersey 2.x, which Dropwizard unfortunately can't upgrade to just yet.\n. There are no existing plans to do this, no. Jetty has existing support for WebSockets, and there are plenty of existing high-level frameworks.\n. I apologize for 0.7.0 taking so long, but I would rather people focus on getting 0.7.x out the door than on supporting small changes to old versions.\n. I'd like this too, but I'm fundamentally unwilling to give out the same credentials I use to push artifacts to Maven Central to Travis-CI.\n. Throw a WebApplicationException with a 307 (or 302) Response.\n. Also, we try to keep the GitHub issues for reporting bugs and feature suggestions. Support and advice is best found at the mailing list, since it has probably 10x the number of people who can help you out.\n. contributors.rst would be a good place to start there.\n. it's -> its\n. I've always recommended a 1:1 mapping between paths, resources, and classes. This should be extracted out into a PersonResource class with a single GET method.\n. Merge this into a single @Path(\"/person/{personId}\") class-level annotation and I think that's it.\n. Oh yeah, I'd forgotten I'd changed socket to legacy.\n. typo: archivedLogFilenamePatter\n. How about prefixing this with \"tasks\" like the other logging routines here?\n. Two things:\n1. I'd prefer an ImmutableLIst over just a List.\n2. Could we name it something besides connectionInitSqls? I'd rather have a longer property name which folks don't have to squint to understand. Maybe connectionInitializationStatements?\n. This has to go.\n. I'd prefer getters and setters with the rest of the methods.\n. How would mediaType ever be null? It just got assigned to a non-null constant.\n. Ah, gotcha. No, that's OK. Just the perils of reviewing code outside an IDE.\n. Could we just name this ConstraintViolation? This could also be festooned with JAXB crap to make it output XML.\n. I feel like this should be moved to DropwizardResourceConfig.\n. I feel like this should also be moved to DropwizardResourceConfig, probably in #validate(), which would allow ResourceTest and friends the ability to test 422 responses without additional jiggery-pokery.\n. One last thing, which I didn't see until now: InvalidEntityToBeanExceptionMapper and InvalidEntityExceptionMapper need to be annotated with @Produces in order to work with Jersey's content negotiation.\n. Ah, no, you're totally right. Reviewing code while on the road isn't my strong suit.\n. Seems like it'd be worth it to write a test for this using JerseyTest or ResourceTest.\n. We should ensure the stream is closed.\n. Do we want to return null or throw an exception here?\n. The getters should have @JsonProperty on them to allow round-tripping.\n. 5? 0? Can we make these numbers less magic?\n. This could just be return !(isDiscarding() || isCalleeData()) || isAsync(); \n. This is going to contend for a global lock on a static SecureRandom instance, which isn't necessary.\nYou can get around this (especially since you don't need a UUID as much as you just need a unique ID) by using new UUID(ThreadLocalRandom.nextLong(), ThreadLocalRandom.nextLong()).\n. None of the other classes in Dropwizard use the @author tag.\n. ",
    "collinvandyck": "I'm really feeling the synergy this morning.\n. This is the approach I took for request journaling in Observatory.\n. You might want to look at the code detailed in https://github.com/codahale/dropwizard/issues/120.  I've been using that as a way to perform integration tests and it has been working well.\n. ",
    "tnm": "Strong +1 on excluding jetty-client. \n. ",
    "ptgoetz": "I know, I know... If I help stave off some of the inevitable \"It doesn't work, all I get is a stack trace! Fix my code (that I haven't shared) for me!\" will you forgive me?\nAt least with a mailing list/group you have some hope of knowledgable community members stepping in to help.\nOtherwise, you could end up with an endless stream of github issues titled \"It not work\".\n. Great! Like I said, I'll try to help our where I can.\n. ",
    "boneill42": "Sure thing.  I'll synch with the master and re-apply.\n-brian\n\nBrian O'Neill\nLead Architect, Software Development\nHealth Market Science | 2700 Horizon Drive | King of Prussia, PA 19406\np: 215.588.6024blog: http://weblogs.java.net/blog/boneill42/\nblog: http://brianoneill.blogspot.com/\nOn 1/16/12 10:35 PM, \"Coda Hale\"\nreply+i-2796951-fb0c7f2e1bbe7e0a934c491378b00cc1266556fe-897229@reply.gith\nub.com wrote:\n\nSo, this can't be automatically merged as-is, plus it has a lot of\nformatting changes I don't plan on applying.\nWould it be possible for you to just extract the four changes you made\ninto four discrete commits?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/dropwizard/pull/18#issuecomment-3522672\n. Just submitted a new pull request that is more \"merge friendly\".\nA discrete commit per feature.\n. Closing this pull request per the above comment.\nPlease merge the new pull request.\nthanks coda.\n. \n",
    "analytically": "No doesn't help. Fails in InstrumentedClientConnManagerTest on line 39.\n. ",
    "nicktelford": "I was thinking about this the other day and came to a similar conclusion - it's better to just refactor the lifecycle code and maintain \"contrib\" modules externally (Git[Hub]+Maven makes this so simple I wonder if contrib modules are ever necessary any more).\nDo you have any other reasons to refactor the lifecycle code? I've already begun working on this myself (see: https://github.com/nicktelford/dropwizard/commit/14e56c0088e3346f44e813084faa339ad7e20d8f) to facilitate external containers, like my daemon module.\nLet me know if you think this work is worthwhile or if I'm better off waiting for you to work your magic in 0.3.0.\n. @Cemo I opened this Pull Request because Coda expressed a desire to incorporate them in to Dropwizard: https://groups.google.com/d/msg/dropwizard-user/4ahQ5bPULt0/sbl-Bv74-2MJ\nIf he chooses not to, I'm happy to maintain them separately.\n. Just a quick note that these should definitely not be merged until there's a decent set of integration tests. I didn't notice them break for 0.6.0 until I actually tried to use it. The .java and .scala templates don't get compiled so an integration test is the only way for the build to break when their source is no longer valid.\n. I'm thinking we use the Maven Archetype integration-test goal, as described here: http://maven.apache.org/archetype/maven-archetype-plugin/integration-test-mojo.html\nThis will have our build generate a project (defined by a properties file) and execute a set of Maven goals on that project, essentially verifying the build.\nThat should be enough and doesn't sound too difficult. I'll see what I can come up with.\n. First stab at some integration tests. Be careful, the tests add a substantial amount of time to the full project build, though they execute during the integration-test phase, so shouldn't cause too much trouble.\nAll they do is ensure that the generated projects compile and build successfully. They don't validate the project contents. It is possible (quite easily too), but I'm wary about adding this as changes to the archetypes will require changes to 4 separate reference copies. Though I'm happy to do it if that's what's required.\n. OK, I've come up with a reasonable work-around for the IntelliJ issue, though the core of it is simply that IntelliJ's Maven support doesn't understand the \"maven-archetype\" packaging and so treats it as a standard project.\nWhile I was working on this, I discovered an issue with the integration-test builds: the generated projects depend on dropwizard-core (and dropwizard-scala_2.9.1 for the Scala archetype); since the integration-test builds are forked, they cannot find these dependencies in the project itself, instead they search only your repositories. This fails if you're working on a SNAPSHOT that you've yet to install to your local Maven repo.\nThis is important as it causes a clean build of the entire project to fail if you haven't done this first:\n$ mvn install -pl dropwizard-scala_2.9.1 -am\nThis is clearly untenable. I'm searching for a solution, but it might be the case that we're unable to use the native archetype integration testing and have to resort to something more elaborate.\n. I've resolved this problem, and potentially many more, by switching to testing the archetypes with the maven-invoker-plugin which is much more flexible.\nThe output can be a little verbose (we can suppress that if desired) but it works and doesn't break full project builds.\n. @codahale Should I bother updating this for 0.7.0 (removing Scala support etc.)? I realise you've probably not had the time to review this yet. Let me know if you're still interested in it and I'll keep the Pull Request up to date.\n. This has been updated for 0.7.0, most notably by eradicating support for Scala projects. This reduces the size and build-cost of the archetypes quite a bit.\nLet me know if there are any other changes you'd like me to make. The only thing I'm a little dubious of is whether or not you'd want to include the dropwizard-create helper script, especially since my shell-scripting is not particularly stellar!\n. Something I'm not happy about: the generated banner.txt. I toyed with the idea of including an ASCII-art generator to generate the banner, but that's probably going overboard quite a bit.\n. There are a few more things I can do to verify the correctness of the generated project, for now though, I'm trying to keep the changeset as small as possible.\nNote: the following is a set of notes to myself as it is to anyone else.\nAt the moment, the maven-invoker-plugin is used to generate two example projects (one shaded, one not) and then invoke the verify goal on each of them. This verifies that the generated project is valid, but it stops short of validating many details.\nThe major thing is that it doesn't validate the generated source directories (api/, core/, resources/, etc.). This could be achieved either with a post-build script for the maven-invoker-plugin, or by using the maven-verifier-plugin.\nAlso, the generated artifacts are not tested to ensure that they're properly shaded (if expected) and have the correct main class (which was incorrect and slipped through the net for a while). It might be wise to have the invoker plugin invoke the exec:exec goal on the generated project's JAR with the Dropwizard check command.\n. @gary-rowe I'm not sold on that generator, it tends to produce fairly unreadable banners. The tricky thing is actually integrating the implementation without adding a lot of extra code. Every line of code needs to be worth at least its own maintenance cost.\n. It does, it creates a skeletal package structure as recommended by the user manual.\n. This isn't blocking 0.7.\n. That explains it. Out of interest, what's the target JDK for Dropwizard? I'm currently building against both JDK 6/7 with the compiler language level set to Java 6.0.\n. @cemo I don't believe Bundles are supposed to depend on objects initialized by the Service and vice-versa. What is it that your Bundle does?\n. I was working under the assumption that the Environment is initialized after the Server. If this is not the case, it's probably not the right place to attach the Server instance after all.\n. @cdeszaq If you just want the REST stuff without anything else, why not just include Jetty and Jersey directly?\n. Anecdotally, one of my colleagues had exactly this problem the other day. He spent a good hour exploring the innards of Jersey before he realised the cause.\nPerhaps a simple ValidationMethod for the rootPath would be sufficient?\n. Given that this sort of feature is heavily focussed on user-facing websites/webapps, rather than REST micro-services, it might be a good idea to collate such features in a single module. That way, core would provide the core micro-service functionality, and this additional module would layer on top the frills necessary for rich applications (like flash messages).\n. dropwizard-views would be my suggestion too, especially since flash messages are geared towards presenting a message. Avoids the circular dependency neatly too.\n. This won't build until #340 is merged in.\nOnce those two requirements are met, it should build and be ready to merge.\nN.B. I don't use Ganglia, and while I expect it to work, I can't guarantee that the GangliaReporterFactory makes sense. At the very least it probably needs better validation.\nI'm going to be away for the next two weeks, so I won't be able to make any more contributions to this until at last after then.\n. Note: I built this because I'm using several built-in enums for config types in #338 (TimeUnit etc.) and it seemed like a good idea to allow lower-case and whitespace in enum values across the board.\n. I didn't know about Class#getEnumConstants(), always nice to avoid reflection!\nI think I've inadvertently fixed the findbugs issues, none are being reported.\n. I should have addressed that before but in my haste to get lunch I typed the laziest of statements: return null.\n. I forgot to mention: the naming of this module is pretty rough. Feel free to come up with a better one.\n. Note: there's some dirty reflection in use in the test in order to test the SyslogAppender's suffixPattern. I'd rather not do it that way, but I didn't want to pollute the AsyncAppender public API just for the sake of a test.\nIt might be better to extract this new logic to a \"SyslogLayout\" instead. Let me know if you'd prefer this.\n. It sounds like you're checking the \"health\" of a component external to your application (i.e. a networked queue system). You're essentially proxying the \"health-check\" of this service through your application, which adds a needless point-of-failure to your monitoring.\nMonitor the queue directly, not via your application.\n. master (0.7.0-SNAPSHOT) allows you to add arbitrary servlets to both the application and administrative connectors:\ne.g.\njava\nenvironment.admin().addServlet(myServlet, \"/path/pattern/*\");\n. A quick note to add that the common-case is totally unaffected. However, for Applications that were previously unusable as targets, it's now possible to do something like this:\njava\n@ClassRule\npublic DropwizardAppRule<MyConfiguration> appRule = new DropwizardAppRule(MyConfiguration.class, confPath) {\n    @Override\n    public Application<MyConfiguration> newApplication() {\n        return MyApplication.getInstance();\n    }\n}\nWhere MyApplication.getInstance() is a static method that provides the singleton instance of an Application. Other implementations might simply call a public constructor with some parameters, just as you would in main.\n. I'm happy with it. We can't get any more detail out of Jackson than this for now.\n. What kind of applications do you think would benefit from most of what Dropwizard provides (config, logging, metrics etc.) but not an HTTP interface? Could you give some examples?\nI've built a couple of applications whose primary interface is something else (e.g. Apache Kafka consumers), but still provides a REST interface for either a cURL friendly alternative to the primary API, or for ops-friendly management of the application.\n. I believe this no longer applies, at least not in the form described, in master. Dropwizard's Validator has been dropped in favour of Hibernate's Validator implementation.\n@konrad-garus can you confirm your problem still exists?\n. This is nice, but we may need to sort out the dropwizard-testing structure to get it in. dropwizard-jdbi is optional, and making dropwizard-testing depend on it is probably not ideal.\nCould you break this out to a dropwizard-testing-jdbi module that depends on dropwizard-testing and dropwizard-jdbi?\n. Thinking about this further, this might be better off as a JUnit TestRule rather than an abstract class. They provide a bit more control to the user (e.g. they can choose to have it run for each test, or for the entire class) and they don't constrain your class hierarchy.\nAlso, it might be nice to break the Liquibase stuff out in to a separate TestRule so that they can be used independently, or it can be combined with a (future) TestRule for Hibernate.\n. The problem I have with option 1 is that it pulls in dependencies unnecessarily; e.g. all of liquibase, hibernate and jdbi, irrespective of which you're using.\nI don't think option 2 works either, because Maven scopes are so important and (unfortunately) you can't have dependencies cross scopes (e.g. you can't state in apps that depend on liquibase also pull in the liquibase test support module in the test scope).\nWhile it may not be desirable to have a large number of modules, I think it's preferable to anything else. It's also worth remembering that we're unlikely to a test module for every dropwizard module. As it stands, I only see perhaps 4 or 5 modules that would benefit from a testing module.\nIf we would like to reduce the burden on users to have to manually include each test support module, we can probably do some \"conditional dependencies\" in the dropwizard-testing module, using an abuse of profiles.\n. Unless @codahale or any of the other committers have a better idea, I'd say that's the way to proceed, yes.\nThanks for taking this on btw, it's definitely a good idea.\n. Couple of suggestions:\n- Instead of copying Person and PeopleStore from dropwizard-testing, just add a dependency on dropwizard-testing with the test scope.\n- For consistency with the rest of the jdbi module (e.g. DBIFactory), perhaps rename the rule \"DBIRule\"?\n- I think the rule could be much simpler: by having the DataSource passed in to the constructor and have the rule simply yield a DBI instance, we can cut the hard dependency on h2 and it would no longer need to be abstract. Essentially, the rule would just manage the lifecycle of the DBI instance for tests.\n- h2 was added as a compile dependency for dropwizard-testing, but I see no usage?\n- h2 is a compile dependency for dropwizard-testing-migrations, but it's only used for tests. This should probably be switched to the test scope.\n. The motivation is to allow the configuration of the request log, filters (currently, just \"gzip\") and the thread-pool, separately for each of the two contexts (\"application\" and \"admin\").\nMy use-case is to allow us to configure the admin requestLog independently from that of the application, but I generalized the solution to permit independent configuration of all the parameters that made sense.\nYou'll notice that the new HandlerFactory and its implementations aren't pluggable via service descriptors. Instead, each (pluggable) ServerFactory implementation selects a HandlerFactory for each of its contexts. At the moment, this means that DefaultServerFactory uses DefaultHandlerFactory for both admin and application; and SimpleServerFactory uses ContextHandlerFactory for both admin and application.\nAs for the failing build, it seems there was a transient problem with Maven on Travis; prodding it with a merge from master seems to have sorted it out.\n. The inciting incident is that we have load-balancers hammering the /admin/ping endpoint for a liveness check, and they were swamping the request log. Obviously a work around with this is to silence the Logger, but this feels like a hack.\nAnother reason is for log aggregation - it's reasonable to want to aggregate your application's request logs (e.g. via syslog or some other appender), but it's unlikely you'd want to also aggregate the admin requests in the same way.\nI realize that there are quite a few changes here, and the burden is on you to understand them and maintain it, so I understand your concerns. I still think there's some discussion to be had around the configuration of ThreadPools for the Server, as at the moment application clients can starve the admin context of threads, making diagnostics more difficult.\n. FWIW, I've just noticed a mistake/unfinished idea: I moved the ThreadPool configuration inside AbstractHandlerFactory but still configure a single ThreadPool for the entire server (configured by the \"application\" HandlerFactory). This is the part I'm unsure about: keep ThreadPool configuration global or have a per-context Jetty Server. The former raises resource starvation concerns, the latter increases complexity.\n. Correction: I've just remembered what I've done. The Server's ThreadPool is for the \"accept\" threads; in the DefaultServerFactory, each Connector gets its own thread-pool configured based on the HandlerFactory configuration.\nI don't think we need per-context Servers, but having the handlers/connectors run with separate thread-pools is definitely an advantage imo.\n. I'm inclined to lean towards a 400, as a request that was terminated before the request body was completely sent would be an incomplete, and therefore unprocessable request.\nYou're right to raise this as an issue though, 500 doesn't seem right as the server is operating just fine. It's the client who bailed on the request, not the server.\nAs for consistency with the behaviour of a client disconnecting after the request is sent, but before the response is received, it seems logical to consider that a normal request. The server processed the request and generated a response normally, it's just that there was no client to receive that response.\n. Closed by #576 \n. Fixed in #395 \n. Thanks Andrew, this totally slipped by me.\n. Thanks! FYI: I think your editor is set to use tabs for indentation. We use 4 spaces.\n. I really dislike the way that each of our PrefixedThrowableProxyConverter implementations, including the one introduced by this PR, essentially copy/pastes the implementation from the underlying class in order to hack the prefix in to the algorithm.\nWouldn't it be preferable to just do this:\njava\n@Override\nprotected String throwableProxyToString(IThrowableProxy tp) {\n    return super.throwableProxyToString(tp).replaceFirst(\"^\\\\t?\", \"! \");\n}\n. Did you intend for the \"Caused by\" line to be formatted as:\n1. Caused by: ! java.lang.Exception\n2. ! Caused by: java.lang.Exception\nIt was 1, which would explain why things were the way they are. I prefer 2, as it's easier to grep.\nI've done some experiments and find no obvious problem with just hacking on the prefix with regular expressions - the tests all pass - though there might be something strange in practice that I'm missing.\nOn an amusing note, this patch introduced PrefixedRootCauseFirstThrowableProxyConverter, which is possibly the longest and most convoluted class name in Dropwizard.\n. Sounds like you have a handle on the cause and solution. Would happily accept a Pull Request to resolve this.\n. Please ask questions on the mailing list.\n. Can you confirm that, with this patch, the tests pass under windows? I don't have a windows machine to run the test with and Travis runs under Linux.\n. Excellent, thanks!\n. Thanks!\n. Good catch.\nI've spent some time looking in to this, and it appears as though the cause is a rather subtle issue with SetUIDListener.\nWhen startAsRoot is false (the default), SetUIDListener needs to bind the Server's Connectors before it starts. To do this, it explicitly starts the QueuedThreadPools lifecycle during the \"starting\" phase. When the Server comes to start the thread pool itself, it finds it already started and \"unmanages\" it (because clearly its lifecycle is being managed by something external to the Server!).\nIdeally, I think this needs to be addressed upstream. If it's causing you problem, you can work-around it by setting startAsRoot to true in your configuration.\n. Upstream bug opened, tracking here: https://bugs.eclipse.org/bugs/show_bug.cgi?id=418592\n. It's an option on AbstractServerFactory (aka the \"server\" section of your config): https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L149\n. It will only have an effect if you start your application as root and specify a uid/gid (in the config) for it to switch to.\n. This has been resolved upstream and will be in the next release of jetty-setuid (1.0.2?) which will require Jetty 9.1.0. This ticket will remain open until the upstream release and our dependencies are updated.\n. Well spotted, thanks!\n. See https://github.com/dropwizard/dropwizard/issues/405#issuecomment-27714858\n. OK, I have set up a branch for merging/staging the documentation update here: https://github.com/dropwizard/dropwizard/tree/feature/docs-update\nI've already merged in #404 and #408 and added some commits of my own. I suggest that we base Pull Requests for docs updates from this branch to make the merge somewhat less painful.\n. OK, I'm no Sphinx expert, but I think this looks good. Thanks Matt.\n. See https://github.com/dropwizard/dropwizard/issues/405#issuecomment-27714858\n. It shouldn't be too difficult to build a ConfiguredBundle that iterates available environment variables, and descends through the configuration tree and using reflection to set the property, either by setter method or directly.\nI don't think we'll be adding this to Dropwizard itself, Dropwizard already provides the facility to override options on the command-line.\n. OK, since the test resources themselves use \"\\n\" line-endings, irrespective of your environment, I'm going to consider #398 correct and close this issue.\nThanks @kilemensi for getting to the bottom of this.\n@kutzi it's probably best you disable the automatic conversion of line-endings on your local repo. It's also advisable to set line-endings in your editor to UNIX (\"\\n\") so that any patches you submit won't compound things.\n. I've been on the verge of merging this for quite some time, but something has held me back every time.\nI don't like the way the synchronous/asynchronous distinction is handled. This is a wider problem with the Command API, and I can't for the life of me think of a better solution to this problem that doesn't involve refactoring the Command API.\nGiven that this does address a bug, I guess we're probably better off going with this solution for now, and taking a stab at refactoring the Command API for 0.8 or later.\nWhen we release 0.7, this will be included.\n. Seems totally reasonable, thanks!\n. Thanks! \nI made an adjustment so that we're not testing a private method, which is a bit of a bad smell. By making buildAppender protected, we not only make it more testable, we also allow subclassing FileAppenderFactory to provide alternative implementations of FileAppender.\n. Given the nature of String config values, I believe values including a comma will be rare. At any rate, supporting a value with an escaped delimiter is probably a good idea regardless of the delimiter.\nThanks to Guava, it's rather trivial to implement delimiter escaping too:\njava\nSplitter.on(Pattern.compile(\"(?<!\\\\\\\\),\")).trimResults().split(value)\n. LGTM\n. Any reason not to use 1.2.1?\n. Thanks!\n. Good catch, thanks!\n. Yes, you're quite right, this is a regression. Not sure how I missed this one when I was sweeping the PRs last week.\nThanks @joschi for your patch and @vadims for bringing it to my attention!\n. You'll need to open a new one because this one was merged then reverted, rather than just closed.\n. No. Also, the mailing list (https://groups.google.com/forum/#!forum/dropwizard-user) is the place to ask questions. Please use the issue tracker to report bugs and submit patches.\n. With 0.7.0 you can easily write a \"factory\" that encapsulates the configuration of custom appenders that can then be used within your YAML file. I'm afraid we won't be supporting this, certainly not in the foreseeable future, as it is against the ethos of Dropwizard.\nFor an example of how to do this, take a look at the ConsoleAppenderFactory.\n. @joschi Would you mind updating this PR so that it merges cleanly? I assume it broke when we merged #457.\nHave you tested against all these changes?\n. Logback and Liquibase were the only \"major\" updates, and the Dropwizard seems happy with both.\nThanks, both of you, for your time on this.\n. It's also worth noting that BlockingArrayQueue cannot be used here (for the AsyncAppender) as it doesn't implement drainTo(Collection) either: https://github.com/eclipse/jetty.project/blob/master/jetty-util/src/main/java/org/eclipse/jetty/util/BlockingArrayQueue.java#L482\n. This will land post 0.7.0, but it is planned.\n. We'll need to keep #452 in mind with the upgrade to 9.1 too.\n. Let's get this done all in one go in #449. Would you mind dropping a comment in there to indicate that you've tested the update to Liquibase?\n. Are you \"shading\" your JARs? i.e. using the maven-shade-plugin, or OneJar or some other technique to merge dependencies in to a single JAR?\n. This problem is usually a result of the packaging system not properly combining the service descriptors in all the dropwizard dependencies. I'm not too familiar with how SBT does things (I still use Maven for all my Scala work), but I imagine something, somewhere, is either stripping out or ignoring the service descriptors.\n. I believe the issue you're having is that the Maven exec plugin is using the .class files directly, instead of packaging the project as a jar first. Since the service descriptors aren't written until the package phase, they'd be missing from the execution.\n. It's not possible to address a list value by its \"type\" property, because it can contain multiple values of the same \"type\".\nConsider:\nyaml\nserver:\n    applicationConnectors:\n        - type: http\n          port: 80\n        - type: http\n          port: 8080\n        - type: https\n          port: 81\n. @tomakehurst That would need to be supported in the upstream FasterXML/jackson-dataformat-yaml module I'm afraid. Also, it's outside the scope of this feature.\n. This PR doesn't build against master, so I'm waiting for it to be updated. I merged #421 because it's a (slightly) different, though related, feature. I imagine it's the merge of #421 that's caused the build to fail.\n. OK, this LGTM. Sorry it took so long to review - it's a substantial piece of code and it's been difficult to find more than 10 minutes at a time to work through issues at the moment.\n. Yikes, thanks for spotting this, you're quite right.\n. Thanks!\n. AbstractDAO doesn't implement the Session interface, therefore, AbstractDAO#persist() may have its own semantics.\nThis was clearly the intended behaviour, as it's well documented in the JavaDoc for AbstractDAO#persist(): https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java#L138\nNote: I don't use Hibernate, but I can see why this might cause confusion. I think it'd be a good idea to take this discussion to the dropwizard-user mailing list (https://groups.google.com/forum/#!forum/dropwizard-user) and discuss it with other dropwizard-hibernate users.\n. LGTM\nThanks!\n. We should get you a uniform, thanks!\n. Thanks!\n. Well spotted. I'm not sure why mockito-all was being used in the first place, but it makes far more sense to use mockito-core instead.\nInstead of excluding hamcrest-core and objenesis, I've opted to instead use a dependencyManagement section to override their versions. This way, any dropwizard-derived project won't run in to bizarre errors when they try to use the mockito transitive dependency.\n. @vadims your assessment looks correct to me, but would you mind including a test so we can confirm that this is fixed? This is the second patch to address graceful shutdown, and it'd be nice to ensure the problem is finally resolved and prevent future regressions.\n. Thanks @vadims, this all looks good to me. Yes, it's a shame to have to bind the server to a port in a unit test, but I don't see any other way to test the graceful shutdown of the lifecycle.\n. I'm unwilling to commit this without review from the community.\n. There's no setter, so the only way it could ever be null is if Validation.buildDefaultValidatorFactory() returned null. This could only occur if you'd expressly overridden Hibernate as the default JSR-303 implementation, with a broken implementation (that produces a null ValidatorFactory). In this extremely unlikely scenario, your application would fail to start. It would die when it attempted to validate your configuration, with a NullPointerException.\n. The major use-case I have is to customise the Validator so that Scala Collections can be validated. I realise this is fairly specific, which is why I wanted some feedback/review instead of just merging stuff that I find convenient.\nMore generally, it's a pretty bad practice to be using Validation.buildDefaultFactory().getValidator() all over the shop.\n. This use-case is satisfied by the new polymorphic logging configuration in 0.7.0. I'm afraid for 0.6.x we're only accepting bug fixes now.\n. Validation annotations aren't (currently) usable on Jersey resource methods. To do this, we need to upgrade to Jersey 2.x, which is planned, but a major undertaking.\n. I've just realised my mistake. Validation constraints themselves (e.g. @NotEmpty, @Min, etc.) cannot be used on a Jersey resource method parameter, but objects annotated with @Valid are validated only if they're deserialized by Jackson.\nThis issue is legitimate, as the JacksonMessageBodyProvider implements this validation, and is failing to cascade validations on collections.\n. Go for it. I have some ideas for handling Iterable instances, but I'm stumped on validating Map instances correctly.\n. I totally missed that, I was looking at the Hibernate implementation and noticed that it retains the key for some reason. I guess we can just ignore it then.\n. Well, in the case of a Set, the value is unique, and unordered, so that's all you could ever provide.\n. #471 resolves this issue. Any outstanding points will need to be raised elsewhere (just make a reference to this issue).\n. Sorry this took so long to review, it slipped off my radar for a bit. But yes, this all looks good to me, thanks for tackling this.\n. :+1: thanks!\n. Nice idea, but I think it'd be even better if, instead of implicitly adding a Timer to every Task, we simply interpret metric annotations (e.g. Timed, Metered, etc.) on Tasks in the TaskServlet. What do you think?\n. Well, another major advantage of the annotation approach is that it doesn't incur the cost of a Timer on every task - only those that are explicitly @Timed.\nFYI: because this is a new feature, I won't merge this for 0.7.0, but I'm happy to accept it for 0.7.1 etc.\n. OK, this all looks good. In the future, we might want to find a way to abstract this code as it's now duplicated between Task execution and resource method dispatch and we may want to add annotation-based metrics to other things in the future.\n. I don't have any objection to this, after all, the number of archived log files is a poor indicator of whether it'll fill your disk or not. I've seen overly chatty applications fill the disk with logs after a few days, and others that log so little that even 1000 hourly logs would barely have an impact.\n. No. Dropwizard's lifecycle is heavily tied to Jetty, so for the foreseeable future, we won't be switching away from it.\n. Well spotted, thanks!\n. LGTM. We've done exactly this in other tests, this test must have slipped through the net. Thanks!\n. Thanks!\n. Thanks!\n. This appears to be an underlying problem in Jersey, being tracked in JERSEY-1223.\nLooks like it's been (fully) addressed in Jersey 2.2, which we'll hopefully be moving to post-0.7.\n. Well, given the explanation about jackson-annotations, perhaps we should just depend on jackson-annotations 2.3.0 instead of 2.3.1.\nAs for SLF4J, I'd rather not have exclusions for dependencies we do actually depend on, it has a tendency to make things more confusing. Any other ideas as to how we might fix that for the enforcer plugin?\n. Any idea as to why dropwizard itself passes the DependencyConvergence rule of enforcer?\n. OK, so it seems to affect only projects that depend on Dropwizard, rather than Dropwizard itself. That's weird, but we can use dropwizard-example to make the dependency convergence check a part of Dropwizard's build, which I've now done.\n. What about transient network failures?\n. Good catch, thanks!\n. The docs you've linked to are for 0.7. As @mveitas points out, dropwizard.io hasn't been updated yet, but will be soon.\n. I like this idea quite a bit. I'm working on a Scala module that will need support for idiomatic testing at some point, so it'd be nice to be able to hook Specs2/ScalaTest in to the same. We may even want to extend the same idea to the other JUnit TestRules that are springing up for the same reason. Better support for testing is something I'd really like to develop in the future so that Dropwizard makes it easy not only to build applications, but to build out the tests for them too.\nOne thing though: because this would be a new feature, it is highly unlikely to be merged for 0.7.0 (though I'd be happy to accept it for the next release).\n. I can't replicate this against either master, or 0.7.0-rc2 on Linux x64, Java 1.7.0_51.\nCan you verify that this against 0.7.0-rc2, so I know exactly which version you're testing against?\nAlso, if possible, could you (or someone else) verify the same build against both OS X and Linux, it may be an environmental issue.\n. I'd strongly recommend against using the Jetty thread-pools for long-lived tasks, as it will block other requests from being dispatched.\n\nWe were registering as an ApplicationLifeCycleListener, and onStart, we dispatched our task to the server's thread pool\n\nI think in this case, you should build a custom thread-pool (using environment.lifecycle().executorService(...)) and tie it in to your application lifecycle with a Managed instance, instead of using Jetty's ApplicationLifeCycleListener.\n. This makes sense, good catch. Thanks!\n. I think there might be a way to turn an open issue in to a pull request by adding commits, but I'm not sure how. At any rate, the way you've done this is fine.\n. OK, this seems reasonable. Thanks for including tests too :)\n. @halorgium I'm going to close this, as it seems as though #542 will have resolved any issue you were having with this. At the very least, if you're still experiencing this with the latest SNAPSHOT, the issue will be different, so if you have problems again, please open a new issue (and reference this one). Thanks.\n. LGTM. Thanks!\n. I'm happy with this, but I'd like for us to defer this until after 0.7.0, which will also give us time to hammer out the findbugs and javadoc problems.\n. Maven has a section in the POM for contributors. Though a top-level CONTRIBUTORS file is probably a better idea; last thing we want is a 10KB POM.\n. Have you tried binding the github site plugin to the deploy-site phase, instead of site?\n. Forgive my ignorance: why do we need to stage the site first? Can we not just bind ghSite:site to the site-deploy phase and have it do its thing then?\n. Of course, thanks for reminding me.\nWhat are the issues that's holding back the findbugs and PMD reports btw?\nI should mention: I'm keen to get this in, as it reduces the burden on the committers for making a release, and super-grateful that you've taken the time to work on something that makes our lives easier.\n. Well, they just get added to the \"Reports\" section of the Maven site, right? I can't imagine that'd be too overwhelming.\n. Good idea. Thanks.\n. OK, this seems reasonable.\n. While this is definitely a good idea, I'm quite hesitant to merge this for 0.7.0 so late in the development cycle. Would you mind if this waited until post-0.7?\n. Can you identify what changed that broke this? I'm not familiar with Java on Windows I'm afraid.\n. It's likely that for UNIX systems, the keyStorePath and keyStorePassword are both required, which would explain why they were @NotNull.\nGiven that Windows keystores don't require these parameters, one option is for us to replace the @NotNull annotations on these with a @ValidationMethod, that ensure neither of these are null iff the keyStoreType doesn't start with Windows-.\nThat should sort out the config oddities for Windows keystores, without breaking things on UNIX systems.\n. @bwmeier Could I trouble you for a unit test? That way, we can ensure that we don't run afoul of this regression again.\n. Windows-MY, the lesser known cousin to Windows ME?\nThanks Matt!\n. Seems reasonable. Thanks\n. Thanks!\n. This should already be the case\nWhich version of Dropwizard are you using, and can you provide an example? It's worth remembering, that if there's a parse error because your entity class doesn't define a no-arg constructor, that's considered a server error.\n. RC2 is essentially complete, only fixes for bugs since that release are being merged. The only reason we've yet to release 0.7.0 is that we were waiting on the website/docs to be sorted out. This is now (nearly) complete, so I don't expect another RC. I would strongly suggest using 0.7.0-rc2 for new projects, and switching to 0.7.0 when it is released.\n. This seems reasonable, but since it's a new feature, I'm afraid it won't be in 0.7.0. I'm happy to support this in the following release though.\n. Thanks!\n. Good catch, thanks Dominic!\n. Yes, yes they do. Thanks!\n. Thanks, this seems reasonable. It should be noted that Jersey 2 doesn't appear to add support for this, so we'll want to retain it after migration.\n. This all looks sensible. Thanks Matt!\n. Yeah, this seems sensible. I was a little concerned that there may be people reliant on the existing behaviour, however, since this was added for 0.7.0, it'll only (potentially) affect those already on the SNAPSHOT or RCs. And that's if it impacts anyone at all, which it likely won't.\n. @reines I haven't had a chance to look, but does this issue still apply in the latest version of Jetty (9.2.0)?\n. OK, let's see what the Jetty folks say and take things from there.\n. Thanks!\n. Documentation for 0.6.2 has been published here: http://dropwizard.github.io/dropwizard/0.6.2/\n. Woops!\n. Thanks for the heavy lifting Jochen!\n. This looks good to me Carlo, though I think the list of committers may need updating!\n. This all looks good to me.\n. Sorry Matt, didn't spot your PR. Thanks.\n. This looks great, but it does break the API (for the configuration), so I'm hesitant to merge while we still have everything based on master.\n. This was specifically excluded from the 0.7.1 release as it changed the configuration API for logging, making it incompatible with the 0.7.x API.\n. Thanks for spotting this. Seems the docs weren't updated with the final 0.7.0 release was made. We've had some issues with the docs deployment that we're still ironing out. Maven's integration here is rather flaky.\n. This looks good to me. My only question is: does anything link to these docs?\n. Hi Gary, while I'm generally in favour of this, I'd like to hear more about your particular use-case. It sounds like you're sub-classing Bootstrap and embedding a Dropwizard application within another programs' lifecycle? I can't imagine Dropwizard will like that very much...\n. It sounds like you're having to do some heavy lifting to work around Dropwizards' configuration and management of the application lifecycle. Given that those are essentially the only things Dropwizard adds to the mix of libraries it includes, wouldn't it be preferable for you folks to use Jetty/Jersey+Jackson+Metrics directly? You'd probably have a less painful time integrating them in to your lifecycle than trying to hammer Dropwizard in.\n. We should really be able to configure this using the normal ReporterFactory mechanism; however, in my wisdom, I made the base interface only applicable to ScheduledReporters, which excludes JmxReporter.\nLet's tackle this in two parts: here, we can fix the regression. Later, we can make the JMX reporting properly configurable, though this will require a slight refactoring of the ReporterFactory stuff.\n. This merges cleanly; Travis is just playing up a bit.\n. Dropwizard 0.7.0 required JDK 7 because Jetty 9 requires it. JDK 6 is EOL (as of last summer), so you'd be best advised to encourage your organisation to upgrade.\n. Thanks!\n. Thanks for highlighting two important features missing from Dropwizard's logging configuration, namely: per-logger appenders, and configuration of arbitrary filters. These are definitely issues we should address.\nHowever, I don't think using logback.xml is a good solution. If we permit people to use either Dropwizards' main configuration mechanism, or logback.xml, or both; things can become a lot more confusing. One of the major goals of Dropwizard is to make things as simple as possible for Operations people, and consolidating all the configuration with a unified format and documentation is one of the main ways we achieve this.\nAnother problem is that many of the components Dropwizard brings together have some external configuration mechanism. Logback, Jetty, Jersey, Hibernate Validator and Hibernate are all designed to be configured with arbitrary XML. If we start permitting logback.xml, where do we stop? Should we also make Jersey configurable from its XML file?\nI understand your frustration, especially in having to learn a different mechanism to the one you're already so familiar with, but I think the real solution here is to nail down what's deficient about what Dropwizard does and solve them, one by one, instead of circumventing much of the framework.\n. @skjegg For the Logstash use-case you cite; this would probably be better suited to a dedicated AppenderFactory for Logstash, ideally outputting directly to the Logstash server, rather than via a file.\n. Seems reasonable. Thanks!\n. You're quite right, good catch. Have you tried an exclusion? Does httpclient work correctly without commons-logging?\n. Good thinking adding the bridge. It's unlikely that commons-logging actually gets used, but this ensures we won't face any spurious runtime errors as a consequence of excluding the dependency.\n. Thanks, this makes a lot of sense. I wonder if this is something that should be raised upstream with the Jetty folks, as it's clearly not specific to Dropwizard.\n. Ahh yes, sorry I totally forgot about this ticket. Thanks for reporting!\n. This all looks good, though it's failing to merge due to a conflict with another patch that's been accepted. Can you rebase this against master (and ideally squash your commits to a single commit) and I'll happily accept it.\nThis is a very good idea btw.\n. Two questions:\n- As I understand it, this is for the prefix for each line in the stack trace? In which case, would the config parameter be better named stackTracePrefix to be more explicit?\n- How does this play with the ! prefix that PrefixedThrowableProxyConverter (and friends) apply?\n. Thanks!\n. Deployment of documentation is still a bit of a pain-point that we're working on. Sorry if this has been a problem, but this is technically already resolved in the source.\n. Hi,\nCan you provide an example request/response and the Resource class to demonstrate your error? Thanks. \n. This looks neat, but it's yet another module that we'd be taking in to the Dropwizard core. I think you'd probably be better off maintaining this separately, as many other integration projects have. Exactly what qualifies to be a part of the main codebase, and in what way is part of an open discussion that has yet to be resolved.\n. > Perhaps we need to create some sort of clear contrib set of add-ons that are useful and mirrored somewhere.\nI couldn't agree more, but I think we need some policy as to what constitutes part of the core project, and what is ancillary. Once we've established this, we can (for example) maintain non-core, but important modules as top-level projects under the io.dropwizard organization.\n\nI don't want everything and the kitchen sink in the lib but there's something to be said for making it easy to find useful add-ins.\n\nThis is exactly how I feel about the dropwizard-scala module; it definitely shouldn't live in the main project, but I'd like to see it as a top-level project.\n. What are you trying to achieve here...?\n. If I recall, this is intentional; Jackson modules should depend on jackson-annotations 2.4.0, as the annotations solely define the API, so cannot have \"bug-fix\" releases.\nWhy does enforcer complain without the exclusions?\n. Sold!\n. Can you post an example of the Resource method, a request being made (i.e. via curl -v) and the full exception you're seeing, including stack-trace please? Ideally, as a linked gist\n. Good point.\n. If we want to support embedding Dropwizard applications it's probably better for us to refactor the bootstrapping process such that the current mode of operation \"embeds\" the application in the default CLI-based environment. I don't think this is a particularly good candidate for another module.\n. How would removing final from Application.run achieve this? Surely the bit you'd like to remove in an embedded environment is the Command runner?\n. @mikeycmccarthy \n\nEven though that's not how we use it I'm included to agree, but it seems inconsistent that it is available on one server factory and not the other for no reason that I could make out.\n\nSimpleServerFactory was created for the scenario that you need to run your services in an environment that restricts the number of ports your service can use (specifically, Heroku). In such an environment, the only other way for Jetty to differentiate requests between application and admin servlets was via a path prefix.\n. I don't think this was meant to be included :)\n. I'd suggest having the Server instance set on the Environment instead of the Service. The semantics of Environment fit better and it's much more flexible.\n. Is this really necessary? null is equivalent to server.getThreadPool, but less explicit. I'd rather be more explicit so that readers can more easily understand what's going on without deep-diving in to Jetty.\n. Same as the above comment, is this really necessary?\n. Ahh yes, I see now. Thanks for the clarification.\n. Coding style: Dropwizard uses inline braces: e.g. if (...) {\n. Wouldn't a comma (\",\") be a more natural delimiter?\n. Any particular reason you use an Iterator explicitly here instead of just a \"for-each\" loop?\n. Not entirely sure what you're getting at. By my eye, a for-each loop is totally viable:\njava\n                if (obj.get(key) != null && obj.get(key).isArray()) {\n                    ArrayNode arrayNode = (ArrayNode) obj.get(key);\n                    arrayNode.removeAll();\n                    for (String val : Splitter.on('|').trimResults().split(value)) {\n                        arrayNode.add(val);\n                    }\n                }\n. Would you mind correcting the indentation on this line? Otherwise, this all looks fine and quite reasonable. Thanks for taking the time to discover and fix this problem!\n. I don't think this comment is necessary. If anyone gets curious, they can always git blame the file.\n. Good point, commit pushed\n. By making cascading mutually exclusive of the main validation, doesn't that break things like this:\njava\n@Valid\n@NotEmpty\nList<Person> people;\nAs it would cascade, validating the elements, but not validate the List itself against the @NotEmpty constraint.\n. Alternatively, we could just require that committers don't merge their own changes, the exception being bug fixes. I'd be happy with either though.\n. We may want to be more precise about this; perhaps with the additional rule that a veto requires 2+ committers, to ensure a single person can't overrule the majority.\n. We may want to use <roles> here to emphasize that this is simply a list of committers, and differentiate (e.g. marking Coda as architect).\n. This seems unrelated to the Jackson update; did it sneak in somehow?\n. ",
    "syrnick": "Thanks! That indeed was my mistake.\n. ",
    "tinkerware": "Here's the stack trace I get:\nException in thread \"main\" java.lang.IllegalArgumentException: duplicate key: /*\n    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:115)\n    at com.google.common.collect.RegularImmutableMap.<init>(RegularImmutableMap.java:72)\n    at com.google.common.collect.ImmutableMap$Builder.fromEntryList(ImmutableMap.java:245)\n    at com.google.common.collect.ImmutableMap$Builder.build(ImmutableMap.java:231)\n    at com.yammer.dropwizard.config.Environment.getFilters(Environment.java:357)\n    at com.yammer.dropwizard.config.ServerFactory.createHandler(ServerFactory.java:163)\n    at com.yammer.dropwizard.config.ServerFactory.buildServer(ServerFactory.java:68)\n    at com.yammer.dropwizard.cli.ServerCommand.run(ServerCommand.java:49)\n    at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:71)\n    at com.yammer.dropwizard.cli.Command.run(Command.java:112)\n    at com.yammer.dropwizard.AbstractService.run(AbstractService.java:175)\n. ",
    "liuzhongshu": "I find some tests failed like this.  So i can only run mvn test -DargLine=\"-Duser.language=en -Duser.region=US\" to get around this issue.\n. @joschi Sorry for late, I am using zh_CH locale and testing dropwizard 0.6.2, and get following:\nFailed tests:   throwsAnInvalidEntityExceptionForPartialValidatedRequestEntities\n(com.yammer.dropwizard.jersey.tests.JacksonMessageBodyProviderTest): expecting:(\n..)\n  throwsAnInvalidEntityExceptionForInvalidRequestEntities(com.yammer.dropwizard.\njersey.tests.JacksonMessageBodyProviderTest): expecting:(..)\n  rejectsPrivilegedPorts(com.yammer.dropwizard.validation.tests.PortRangeValidat\norTest): expecting:(..)\n  rejectsNegativePorts(com.yammer.dropwizard.validation.tests.PortRangeValidator\nTest): expecting:(..)\n  allowsForCustomMaximumPorts(com.yammer.dropwizard.validation.tests.PortRangeVa\nlidatorTest): expecting:(..)\n  allowsForCustomMinimumPorts(com.yammer.dropwizard.validation.tests.PortRangeVa\nlidatorTest): expecting:(..)\n. ",
    "joschi": "@liuzhongshu Could you please point out which tests were failing and which locale you were using? I'm using de_DE as my locale and all tests are passing.\n. The issues will be addressed in #1056.\n. Thanks for your quick response!\nFor reference, there's already a bugreport for this issue in Gradle:\n- http://issues.gradle.org/browse/GRADLE-1997\n- http://forums.gradle.org/gradle/topics/maven_dependencies_in_profile_section\n. @sinelaw If someone volunteers to update it for Dropwizard 0.8.0, there's no reason not to merge it.\n. @jeromebridge Cool, feel free to add it to the list of 3rd party extensions at https://github.com/dropwizard/modules.dropwizard.io\n. @ajeeshpu The rootPath setting (which is really different from the applicationContextPath and adminContextPath settings) was added back in #665.\n. Fixed by migrating to Jersey 2.x and its Bean Validation Support.\n. Having a separate command for validating the configuration was actually the first approach I took but the command wouldn't have done much besides extending ConfiguredCommand.\nAlso a concrete class inheriting from ConfiguredCommand would need to specify the Configuration class being used while having the validation in ConfiguredCommand can work on any T extending Configuration. This helps if the ServerCommand is using another Configuration class than the subclass of ConfiguredCommand.\n. > Yes, it would be a command with a single responsibility. That's how I prefer them.\nSee it from another standpoint: The --configtest parameter enables a ConfiguredCommand to check that its preconditions, primarily a valid config file, have been met.\nThe approach using a standalone command would lead to a lot of code duplication. Imagine a service with 4 commands, each with an individual Configuration sub-class. We'd need to implement 4 commands just to check their configuration. With the --configtest parameter implemented in their common super-class (ConfiguredCommand), each command will get this for free.\n. Too bad. I liked my \"check the preconditions of a command` analogy.\nWould you be willing to accept a pull request implementing a dedicated command to check the validity of a config file?\n. I guess you are referring to the mechanism described in Secure Password Obfuscation.\nThe problem with this is that it is tightly bound to Jetty's configuration parser (the <Call ...> block basically just makes the parser call a Java method) and that it is fairly easy to reverse (see Reversing Jetty Password Obfuscation or in the sources for org.jetty.util.security.Password).\nThe proper solution would probably be to include something like Jasypt in dropwizard-configuration or to do the same in your Dropwizard application. Also see https://groups.google.com/d/topic/dropwizard-user/JwIoX1MIoy0/discussion for a related discussion on the dropwizard-user mailing list.\n. I see the intent behind that but even with Dropwizard 0.7.0 hypothetically coming out tomorrow IMHO there would still be a lot of legacy applications which wouldn't be upgraded immediately and which could benefit from a small, backward-compatible maintenance release.\nFixing bugs in Dropwizard's dependencies by just updating their versions is quite a low hanging fruit, e. g. Jersey 1.18, Jackson >2.2.0, Jetty 8.1.18 etc.\n. @skamille You can manually restart the build for this PR in Travis CI.  On the build's detail screen there's an icon saying 'Restart Build' if you're owner of the project.\nFWIW, the project builds for me without errors; https://gist.github.com/joschi/1386ac9eb44453efc03d\n. Thanks for your PR! I'm closing this in favor of #685.\n. Just tried to reproduce your problem with the current HEAD (223311f4239069b578d3e7c0cf7f586289af4edb) but the tests ran without a problem.\nMaybe you could provide more details about your environment and what exactly you did to produce this error (e. g. running tests within your IDE or directly with Maven, the JDK being used, etc.).\n. The reporter didn't answer within 5 months so the problem has probably been solved already.\n. See #277 and #389 for related issues.\n. I've rebased the branch against the current master.\nAll tests are green and I'm not aware of any other regressions introduced by these dependency updates.\n. @ryankennedy Current master is already on Jetty 9.2.3, see 93d3ee56fd9b68e24a50638f28229820553791fd. But more thorough testing, especially after the upgrade to Jersey 2.x, is definitely welcome. :wink:\n. You'll have to merge the files in META-INF/services for the ServiceLoader to work.\nIf you're using Gradle, I'd recommend using the Gradle Shadow plugin which provides the required functionality out of the box: https://github.com/johnrengelman/shadow#merging-service-files\n. @Ettery Just make sure to merge the service files as described in https://github.com/dropwizard/dropwizard/issues/455#issuecomment-54983032 and https://github.com/dropwizard/dropwizard/issues/455#issuecomment-57805501. If your build tool doesn't support this, it's a shitty build tool (YMMV).\n. @thegamblerrises This issue only covers Dropwizard.. Regarding the dependency of Jackson Databind 2.3.2 to Jackson Annotations 2.3.0, this seems to be intentional (see FasterXML/jackson-databind#135).\nBut I'm not sure how much sense it makes to \"pin\" older (but compatible) versions of libraries being used by Dropwizard just to have the dependencies converge (https://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html).\n. @csabapalfi Would you mind rebasing this PR on the current master?\n. If someone steps up to update the PR to apply cleanly to current master, we'll happily merge it. (@ddunwoody, @hslater-okta)\n. Great! Thanks for the PR.\n. Hint to shutdownGracePeriod has been added to the documentation in f906ee40.\n. :+1:\n. I guess it's better to start building with Java 8 now than later. Thanks for the PR!\nWe'll have to iron out the Javadoc linter errors eventually but it's not really critical. As for Findbugs, there doesn't seem to be a roadmap (or any communication whatsoever) for the support of Java 8 (ASM 5), so I guess we'll just have to wait.\n. I have updated the contributors file in the Dropwizard docs using the Ruby script from 6c898cb.\n. The site-deploy goal is only available with the maven-site-plugin and also requires an additional step (site:stage) before the result could be published to GitHub Pages.\nI played around with it but in the end the current approach was the most practical one. I could put the GitHub Site plugin into a dedicated profile so that it's not always executed when the site goal is executed, though.\n. I've had some (painful) success with binding the GitHub Site plugin to the site-deploy goal, see f468d1e86fa896bfe1b2a9bf9516308679db3f37.\n. @nicktelford Staging is necessary so that the hyperlinks inside the Maven sites are correct for the sub modules, see Building multi-module sites for details.\n. > What are the issues that's holding back the findbugs and PMD reports btw?\nAbsolutely nothing. I just didn't want to put everything in by default to not overwhelm people browsing the documentation. If you think it's a good idea, I can simply add the reports.\n. I've rebased the branch and added Surefire and Findbugs reports.\n. @carlo-rtr You'll have to add your GitHub credentials (username/password or OAuth 2.0 Token) to your settings.xml. The format is described at https://github.com/github/maven-plugins/#settingsxml\nFor my own Maven setup I'm using a profile which is being activated by mvn -P github [lifecycle phase] and which looks like the following in my ~/.m2/settings.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <profiles>\n    <profile>\n      <id>github</id>\n      <properties>\n        <github.global.userName>joschi</github.global.userName>\n        <github.global.password>MY-PASSWORD</github.global.password>\n      </properties>\n    </profile>\n  </profiles>\n  <!-- [snip] -->\n</settings>\nYou can also skip the upload of the GitHub Pages with mvn -D github.site.skip=true [lifecycle phase]. That said, mvn release:prepare site:stage && mvn release:perform should work.\n. +1 for waiting until after Dropwizard 0.7.0.\n. @jplock There hasn't been a release of FEST 2.x in a long time and https://github.com/alexruiz/fest-assert-2.x also doesn't look that active anymore. In contrast to that AssertJ is actively maintained and there are some useful addons (e. g. AssertJ Guava assertions and AssertJ assertions for Joda-Time).\n. The issue should be fixed in the current master which is using Jetty 9.2.3.v20140905 (commit 93d3ee56fd9b68e24a50638f28229820553791fd).\nPlease add a comment if the problem is still occurring.\n. We currently do not plan to release bug fixes for Dropwizard 0.6.x. Does this problem still occur with Dropwizard 0.7.x?\n. @VSJTech Please use the Dropwizard user mailing list for this discussion.. @happysundar This commit has not been part of Dropwizard 0.7.1.\n. The documentation for Dropwizard 0.7.0 is now available at http://dropwizard.io/0.7.0/docs/ (see http://dropwizard.io/0.7.0/ for the Maven sites).\n. @ankel The inclusion of this changeset is currently blocked by dropwizard/metrics#580 (or dropwizard/metrics#513 or dropwizard/metrics#532). Those have to be merged first and a new version of the metrics library needs to be released.\n. @saadmufti There's no hurry. We're still blocked until Metrics 3.1.0 has been released (maybe within July) but I thought I better start commenting now so that we can merge the PR faster when everything's ready.\n. @cemo I'm currently (well, probably over the next few days) working on integrating the last version @saadmufti's branch into current master.\n. @saadmufti No, I don't think that's necessary. Thanks for all the work you've put into this!\n. @mkouba I've added your project to the list of Dropwizard 3rd party extensions at https://gist.github.com/joschi/184f766a662376da5276\n. Demo (with some broken links already linking to dropwizard.io) at https://joschi.github.io/dropwizard/0.7.0/ and https://joschi.github.io/dropwizard/0.7.0/docs/\n. Fixed by #641.\n. Dropwizard 0.7.0 is available on Maven Central since its release. Snapshots aren't regularly deployed at the moment.\nhttp://search.maven.org/#artifactdetails|io.dropwizard|dropwizard-core|0.7.0|jar\n. Since it has been mentioned that this issue is better discussed on the dropwizard-user mailinglist, I'll close this issue.\n. Thanks for reporting the issue!\nIf you could just rebase your branch to current master, I'd be glad to merge the PR.\n. > Hmm. Now the tests are passing. Not sure why that is, either, as I didn't change anything.\nTravis CI has been a bit flaky recently. Usually re-running a failed job (if there wasn't any real regression) helps.\n. Thanks for reporting the issue!\nThe change in 5545d1e09ee548c2b51452b2499f1172fdf5b7e0 has been committed just after Dropwizard 0.7.0 was released. Currently the documentation is only generated for released versions so this correction will definitely be in the documentation for Dropwizard 0.7.1 or 0.8.0 (whichever the next version will be).\n. @ladams81 Please try to reproduce the error with the current Dropwizard 0.8.0-SNAPSHOT and provide a test case. Thanks!\n. Thank you very much for this PR!\n. We probably should exclude the Apache Commons Logging library in general and add the SLF4J JCL bridge to dropwizard-logging (which already includes the bridges for Log4j and JUL).\n. @mikeycmccarthy Thanks! I just did that but it would be great if you could review the (quite trivial) PR.\n. That's actually quite a good idea. Could you please open another issue or PR for that?\n. It would be great if you could rebase your branch on the current master. This should also fix the Travis CI build.\n. Thanks for the patch!\n. Should have been fixed with the merge of #583. Please add a comment if there are still issues with the CSV reporter.\n. Could you please also update the manual with the new configuration option for HttpClientConfiguration?\n. You're right. A detailed description is missing from https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/configuration.rst and https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/client.rst\n. Yes, another PR for the documentation in the Dropwizard manual would be great. Thanks for the patch!\n. I've created PR #590 to solve this issue. As soon as someone reviewed the changes, it'll be merged.\n. LGTM. :+1:\n. Looks good to me. :+1: \n. I'm not sure this should have ended up as a pull request, especially since there are internal (?) repositories in the POM now.\n. Thanks, good catch! I fixed the typo and reworded the paragraph a little bit in d43cc5044bf1574db0ccfc2b6ae220a324008faf.\n. It might be related to the specific build number in Travis CI. :wink:\nI've restarted the build and it succeeded this time. Must have been a small hickup in Travis CI.\n. Looks good and is without a doubt very useful. :+1:\n. No followup by the reporter of the issue. If this is still a problem, please add a comment.\n. As far as I see this has been fixed in 6263fb25.\n@rowlanch You need to implement the equals and hashCode methods on your Person class.\n. There's a pending PR for this (#545), so one of the next Dropwizard releases will likely use Jersey 2.\nAs for new (Dropwizard 0.7.0 and before) it's not easily possible to use Jersey 2.\n. Good catch. Thanks for the correction!\n. As far as I can tell this can easily be done with the dropwizard-redirect-bundle.\n@akroy Feel free to add a comment to this issue if this is not what you've meant and ideally provide a link or two to the relevant Jetty documentation.\n. Thank you for this PR!\n. Thanks for fixing the typos!\n. Thanks for the PR!\n. Thanks for the PR!\n. @wwwhizz Thanks for pointing this out!\nI've added the required information about having to add dropwizard-assets to the documentation.\n. This will be done with the upgrade to Jetty 9.1.x or 9.2.x (see #453).\n. While this PR works perfectly fine, I'd like to wait for Logback 1.1.3 to be released (which depends on SLF4J 1.7.7) so that the dependency exclusions in Dropwizard aren't necessary.\n. Please also fix the deprecation warning for io.dropwizard.configuration.ConfigurationFactory:212 in dropwizard-configuration.\n. > It looks like Jackson 2.4.0 actually has a couple regressions from 2.3.x, so it may be worth holding off merging this until 2.4.1 is out and going straight to that. Thoughts?\nI'd vote for waiting for the bugfix release which I'm sure will be released soon(ish). It would be great if you could just update your PR when Jackson 2.4.1 has been released.\n. FYI, Jackson 2.4.1 has been released.\n- https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.4.1\n- https://groups.google.com/d/msg/jackson-dev/VYZxf-Cr1GY/mxRMu7ZZwxIJ\n. Thanks!\n. Thanks!\n. Please ask your question on the Dropwizard mailing list at https://groups.google.com/d/forum/dropwizard-user\n. This behaviour has been added (incidentally by me) in #433 (also see #232, #233, and #431) and is intentional.\nI think we should discuss whether this behaviour should be configurable (either throw a ConstraintViolationException or skip validation for null references and return it). Personally I'm strongly in favor of throwing a ConstraintViolationException.\nMaybe someone else wants to weigh in on this issue.\n. I think that the null check should only occur if the request method parameter is annotated with @Valid or @Validated and that we can simply resolve this issue by moving the check a little down JacksonMessageBodyProvider#validate().\nI've created #633 to address this issue.\n. @Valid implies a valid object reference which means that a null reference should (and actually does) throw a ConstraintViolationException.\nIf you want to use parameters which may or may not be set, I suggest wrapping them in an Optional<T> which by the way works as intended thanks to Dropwizard's OptionalQueryParamInjectableProvider.\n. So this doesn't seem to be simple at all\u2026\n- Hibernate Validator will (as of version 5.1.1.Final which Dropwizard is currently using) throw an IllegalArgumentException if the method parameter annotated with @Valid is null (see org.hibernate.validator.internal.engine.ValidatorImpl.\n- The Bean Validation spec says \"Null references are ignored.\", but that only refers to references inside a Java Bean (which is not the case with our  OptionalQueryParamInjectableProvider)\n- The JavaDoc on @Valid says \"The associated object will be validated by cascade.\" which I would interpret as the reference must not be null.\nAnything else to consider?\n. I think this functionality is now provided by the Jersey upstream with Bean Validation Support.\n. Thanks for providing the test case!\nThe problem is that ViewMessageBodyWriter from dropwizard-views overrides the @JsonSerialize annotation. You can write a custom MessageBodyWriter<Info> to get the same result, see d0de96e.\n. @mveitas Coveralls supports login via GitHub, so everyone with administration permissions for this repo can log in and activate Coveralls for Dropwizard.\nFWIW we can use JaCoCo for code coverage reports without using Coveralls if there are reservations against using yet another 3rd party service.\n. I had to replace JaCoCo with Cobertura because the latter properly supports Maven multi-module builds. But now the code coverage is working and available at https://coveralls.io/r/dropwizard/dropwizard\n. I have restarted build 746.\n. > Being null does not necessarily mean the request is invalid, as the parameter(s) can be optional.\nIf the parameter is optional it should be wrapped in a (Guava) Optional<T>.\n. I'll mark this PR as \"blocked\" until we've reached consensus in #625.\n. @jplock Yes, makes sense.\n. LGTM. Thanks for the patch!\n. Please try adding -Ddw.server.connector.type=http (it should match the value in your configuration file) to your command. Does the error still occur?\n. Thanks for opening this issue!\ndropwizard-example should show the usage of Dropwizard. While there's no doubt that AutoValue or Project Lombok would reduce some of the boilerplate code (so would using Groovy instead of Java :wink:), it doesn't significantly help in demonstrating Dropwizard's capabilities.\nThe sentence from the documentation which you've quoted should probably be rephrased. The reason for having multiple configuration classes is not because of the boilerplate getters and setters, but because different aspects (e. g. database config and webserver config) shouldn't be mixed in a single flat configuration class (which more or less directly maps to the configuration file). It's better to have a single concern per config class/config section.\n. I don't have a strong opinion for or against using Lombok in dropwizard-example. You're more than welcome to create a pull request. :wink:\n. Good catch. Thanks!\n. Thanks for opening the issue!\nThe \"canonical\" URI for Dropwizard is http://dropwizard.io/ but of course you're completely correct that http://dropwizard.github.io/ should redirect to the canonical URI.\n. I've created a (rather ugly) landing page which will redirect the clients to http://dropwizard.io/\nPull requests for https://github.com/dropwizard/dropwizard.github.io to make it beautiful are welcome. :wink: \n. @kilemensi Thanks for pointing this out!\nDropwizard 0.7.x is being maintained in its own branch (https://github.com/dropwizard/dropwizard/tree/release/0.7.x) and the relevant commits (e. g. setting the next development version of the artifacts to 0.7.2-SNAPSHOT) only happend in that branch.\nThe current master is what will eventually become Dropwizard 0.8.0.\n. I've taken the liberty to update the project version to 0.8.0-SNAPSHOT in master.\n. Thanks for this PR!\n. @mhaligowski You'll still need to use a real Servlet container for tests if you rely on @Context injections, see https://jersey.java.net/documentation/latest/test-framework.html  for details.\n. @Toilal If you want to inject an HttpServletRequest into one of your resources via @Context, yes.\n. dropwizard-hibernate relies on dropwizard-db to provide a DataSource for Hibernate.\nIf you want to use another DataSource implementation (Dropwizard is using tomcat-dbcp by default) you just need to override DataSourceFactory#build().\nWe currently do not plan to support any other connection provider in the Dropwizard core modules but an implementation as 3rd party bundle is more than welcome.\n. @CeccoCQ, please keep that discussion to the dropwizard-user mailinglist.\nhttps://groups.google.com/forum/#!topic/dropwizard-user/lxjcE7vZqUU\n. Thanks for your PR!\nI've consolidated the use of @JsonProperty in the Dropwizard documentation in 4631a5588f6aed68af4462503870d95ada2fab52.\n. Thank you very much for this PR! Nicely documented. :smile:\n. @arteam I'll move this PR out of the 0.8.0 milestone for now but I won't close it for now.\nMaybe someone else wants to chime in whether the current state of affairs is sufficient or if this PR should be updated and merged.\n. Looks good. Thanks!\n. Support for JAX-RS 2.0 and Jersey 2.x is due for Dropwizard 0.8.0. If you want to help, you're very welcome to review and comment #545.\n. Duplicate of #632.\n. Probably related to #602.\n. This is basically the same misunderstanding as in #662, see my comment there.\nThe application context path defines under which URI path the complete Application will be served, including all Servlets registered in this context. AssetBundle registers an AssetServlet from dropwizard-servlets within the application context.\nAdditionally the problem in your example is that the Jersey Servlet \"hides\" the AssetServlet because both are using an identical mapping to /*. In this case, the Jersey Servlet wins (otherwise you couldn't call your resources).\nTo solve this problem, you just need to set the Jersey URI pattern to another path (e. g. /api/*) and keep your AssetBundle configured to the root path.\nExample:\nenvironment.jersey().setUrlPattern(\"/api/*\");\nTogether with the SimpleServerFactory you can access your assets at http://localhost:8080/application/ while your JAX-RS resources will be available at http://localhost:8080/application/api/.\n. Thanks for filing this issue!\nChanging the context path of your application will also change the path of the loaded AssetBundles (which are, technically, part of the application). In your example the correct path to your assets would change from http://localhost:8080/assets/ to http://localhost:8080/myapp/assets/.\nIf you simply want to change the URI from which your JAX-RS resource classes are being served, you can achieve this by using JerseyEnvironment#setUrlPattern().\nExample:\nenvironment.jersey().setUrlPattern(\"/myapp/*\");\nIt's not a bug, but I see that this behaviour should be documented waaaay better.\n. LGTM. Thanks for the PR!\n. Thanks for this PR! Looks good to me.\n. @mikeycmccarthy I don't see any concerns mentioned in #676. Could you please elaborate?\n. What's the motivation/use case to duplicate the HTTP response code inside the JSON payload?\n. Not applicable to current master (Dropwizard 0.8.x) anymore.\n. LGTM.\n. Closed by merging #677\n. Thanks for spotting this! Seems like the documentation hasn't been updated in that particular place.\n. Thanks for the PR!\n. @qualidafial Could you provide a minimal example which demonstrates the faulty behavior?\n. @stuartgunter Thanks for this PR!\n. Thanks!\n. Please see #661, #662, and #665.\n. Looks good to me. Although we plan to migrate to Jersey 2.x in Dropwizard 0.8.0, it might be useful if we decide to do another intermediate 0.7.x release. Thanks!\n. Thanks!\n. > The concrete call to it could then look like:\n\nClass[] entities = new Class[]{Person.class, Email.class, Attachment.class};\nnew HibernateBundle(entities);\n\nYou don't need to build an explicit array for varargs. Calling new HibernateBundle(Person.class, Email.class, Attachment.class); would work perfectly fine.\n. Closing this issue since I don't really see the advantage of moving possible exceptions from compile time to runtime.\n. Thanks!\n. Thanks!\n. Would you mind rebasing your PR on the current master branch with Jersey 2.x?\nYou need to implement AuthFactory instead of InjectableProvider now.\n. Thanks!\n. > Log4j 2 is released and it has async loggers, which are much faster then synchronized loggers.\nFor which use cases? Is logging or the performance of logback really a problem in your Dropwizard applications?\nThere are currently no plans to replace logback in Dropwizard or to make the logging framework swappable.\n. Good idea. Thanks!\n. Wouldn't it be sufficient to annotate the Application#run(T configuration, Environment environment) method of your Dropwizard application in this case?\nCould you please provide a (minimal) example application or at least snippets of the use case you've described?\n. @cemo Is there a specific reason you don't just write a custom EnvironmentCommand which initializes and runs your Spring application?\n. Closed by merging #694.\n. Thanks!\nI've moved the Task into dropwizard-servlets because it's rather Dropwizard-specific and the other default task is also in that package.\n. Thanks!\n. Thanks!\n. Thanks!\n. I can't reproduce that with the example project (dropwizard-example) and Dropwizard 0.7.1.\nWhich version of Logback are you using?\n. No reply from issue author and problem not reproducible. I'm closing this issue now. Feel free to add a comment if the problem persists.\n. Looks good to me. Thanks, Carlo!\n. Please use the mailing list for these kind of questions.\n. Please check if the problem still occurs with the current Dropwizard master which builds on Jersey 2.13.\n. @jnaous Any news on this? Could you reproduce it with Dropwizard 0.8.0-rc1 or 0.8.0-rc2?\n. @jnaous Both release candidates are available on Maven Central: http://mvnrepository.com/artifact/io.dropwizard\n. @mikedanese Thanks for opening this issue!\nIn general I would encourage you to create a dropwizard-views integration with Handlebars but please start it as a separate project. If enough people are interested in it, we can add it as an \"official\" 3rd party module into the Dropwizard organization on GitHub.\nYou can find all requirements under https://groups.google.com/d/msg/dropwizard-dev/nY23U4996_k/rKP_e05sIRAJ (and I see that we desperately need to publish them in a more visible place).\n. That part is only possible as soon as the project has been adopted as an official Dropwizard addon module.\nI suggest you write an email to dropwizard-dev to find someone to \"sponsor\" your module.\n. Many thanks to @saadmufti and everyone who offered their comments on this PR and #545!\n. Thanks!\n. Although resourceFilePath() is quite minimal, it probably makes sense to provide it as part of the official API.\n. @dbyron0 The source code you've come up with is from Jersey 1.17.1. We're using Jersey 2.13 in Dropwizard 0.8.x.\n. Please add unit tests for the 4 cases you've described.\n. The CachingAuthenticator#wrap() methods were removed in 0312bbd714b232a367c97a7eedf308cca223f407 as part of a cleanup of the dropwizard-auth module and I think the usefulness of those methods is limited with Java 7 and higher\nI don't have a strong opinion about keeping the reintroduced methods but I slightly tend to remove them again just to stay consistent with Dropwizard 0.7.x in this regard. Nobody really missed the wrap() methods\u2026\n. I just checked this with the current master and I can't reproduce the issue. Quoted string literals in the YAML configuration ('001' and \"001\") result in a String 001 as intended.\n. Thanks!\n. Thanks!\n. Thanks!\n. Dropwizard 0.8.0 hasn't been released yet and there are still some issues open in the 0.8.0 milestone.\n. Thanks again! Keep 'em coming. :wink:\n. These warning messages are fine and don't have any effect on the created shaded JAR, especially since they come from the same project (Jersey 2.11 in this case).\n. Thanks!\n. Thanks!\n. Thanks!\n. To be honest I wouldn't be sad if commons-lang3 could be removed completely since we really only use one method of StringUtils\u2026\nI don't think that including that dependency in another module \"just so it's there\" makes any sense.\n. > as soon as I replace AuthFactory by AuthFactory it works.\nI'm not sure I can follow you\u2026\n. You can use the (reintroduced) rootPath setting for this, see #665.\n. Thanks!\nFWIW, it'll work again with Dropwizard 0.8.0.\n. Thanks!\n. Just update to the GitHub Maven Site plugin 0.10.\n. Thanks!\n. That's the standard behaviour of JAX-RS and Jersey respectively. How should the implementation know which (unannotated) method parameter should be filled with the contents of the HTTP request body?\nI suggest you use ServletRequest#getInputStream() to get the raw HTTP request body to do whatever you need to do with it. Handling an InputStream for calculating a checksum should be easier anyway, or if you use this functionality more often, simply write a request filter to calculate the checksum.\n. As I mentioned in my previous comment, you can write a filter to calculate the checksum. In the filter implementation you need to copy the request InputStream (e. g. by using something like TeeInputStream).\nIf you don't want to do that I suggest you change your JAX-RS resource method to receive a byte array from the request body, calculate your checksum and then use ObjectMapper directly to map it to your domain class.\nIn general such kind of questions are better posted to the dropwizard-user mailing list.\n. @oillio If a Bundle doesn't require a valid Environment, why use a Bundle at all and not just load your stuff in the Application#initialize() method directly?\n. Thanks!\n. Thanks!\n. Great, thanks a lot!\n. Not really a bug or issue with Dropwizard.\n. Fixed in 983f120cfe5e6c610f43f3d80dd5367f24b7f996.\n. Thanks!\n. Thanks!\n. I have restarted the failed build job.\n. Thanks!\n. Thanks!\n. LGTM. Thanks!\n. Cool, thanks!\n. Thanks for your contribution!\nCould you please also add a unit test which ensures that the bug you've hit is really fixed by your change?\n. Thanks!\n. Please migrate your changes to the example application into a unit test for the behaviour of DropwizardResourceConfig.\n. Great! Thanks for this PR!\n. Ah, now I see it. Must've overlooked that it wasn't in master.\nThere probably won't be a bugfix release for Dropwizard 0.7.x at all.\n. Try putting it into quotes.\n. I think it's best if you posted your request to the dropwizard-user mailing list and describe in a little more detail what you're planning to do.\n. Thanks for pointing this out. This should of course be in Dropwizard 0.8.0.\n. @prem82 I couldn't reproduce the issue. Please see the referenced commit for a working test of the async functionality.\n. Please use Dropwizard 0.8.0-rc2 or 0.8.0-rc3-SNAPSHOT.\n. First we have to get Dropwizard 0.8.0 out of the door, then we can think about Dropwizard 0.9.0. :wink:\n. https://gist.github.com/bandrzejczak/456e06e5674a536457b6#file-dropwizard-stacktrace-L123\njava.lang.IllegalStateException: Unable to perform operation: method inject on com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$App\nThis looks like your application is trying to register an old provider for processing XML which was written for Jersey 1.x (com.sun.jersey.* hints to this).\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. LGTM.\n. Thanks @LeekAnarchism for the initial PR and @arteam for the hints regarding the other classes!\n. Very nice, thanks Ryan! :+1:\n. This looks fine to me in current master (Dropwizard 0.8.x):\n- https://github.com/dropwizard/dropwizard/blob/master/dropwizard-db/src/main/java/io/dropwizard/db/DatabaseConfiguration.java#L6\n- https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java#L33-39\nThe documentation of @Override says that a method should be annotated if:\n\nThe method does override or implement a method declared in a supertype.\n\nAnd exactly this is the case for HibernateBundle<T>#getDataSourceFactory(T).\n. The call to ResourceHelpers#resourceFilePath(java.lang.String)) is required to get the correct path to the configuration file in ./src/test/resources. Before commit 336a9c1af3fd4cefd97460318636b4e651129496 it was part of the test class itself but has been refactored into the reusable ResourceHelpers class.\n- https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleTest.java#L28-30\n. Thanks!\n. Great, thank you very much!\n. Thanks!\n. Good catch, thanks!\n. Thanks!\n. According to http://www.eclipse.org/jetty/documentation/9.2.6.v20141205/alpn-chapter.html#alpn-versions it should also work with Java 7, given that the correct version has been added to the JVM bootclasspath.\nIn general I think we could just switch to ALPN completely for Dropwizard 0.8.0. Anyone wants to contribute the code?\n. The compilation of dropwizard-core fails with the following messages:\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n[ERROR] /home/travis/build/dropwizard/dropwizard/dropwizard-core/src/main/java/io/dropwizard/setup/Bootstrap.java:[135,27] incompatible types: io.dropwizard.setup.Bootstrap<T> cannot be converted to io.dropwizard.setup.Bootstrap<capture#1 of ? super T>\n[ERROR] /home/travis/build/dropwizard/dropwizard/dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java:[27,31] type argument T is not within bounds of type-variable T\n[INFO] 2 errors\n. Could you please describe a use case for this change? I struggle to see the advantages right now.\n. https://github.com/dropwizard/dropwizard/pull/800#issuecomment-68177081\n. Thanks!\n. @arungupta2008 No, Dropwizard 0.7.x is not maintained anymore. Upgrade to Dropwizard 0.8.x or 0.9.x.\n. Thank you very much for your contribution!\nI'm sure that this is useful for some people but I'm a bit hesitant to include this in the core project since it's completely independent of it.\nPlease migrate the code into a separate repository, publish the artifacts (preferably on Maven Central), and we'll add the module to the Dropwizard Modules Directory. If one of the Dropwizard committers volunteers, we can also run the repository in the Dropwizard organization on GitHub and publish it under the io.dropwizard.modules group ID.\n. Thanks!\n. Could you please provide a test case which fails for the old implementation and succeeds with the new one?\n. Makes sense. Thanks!\n. @carminexx Could you solve your problem with the hints from @arteam?\n. Closed by merging #812.\n. Thanks!\n. Thanks!\n. You will need to exclude slf4j-api 1.7.7 from io.dropwizard.metrics:metrics-jersey2 in order to make the enforcer plugin happy, see https://travis-ci.org/dropwizard/dropwizard/jobs/44167648#L7305\n. @punya Probably an update to SLF4J 1.7.9 (issues with Scala, see http://slf4j.org/news.html).\n. Thanks!\n. Nope.\n. The In-Memory container used by default doesn't support @Context injections:\n\nIn-Memory container is not a real container. It starts Jersey application and directly calls internal APIs to handle request created by client provided by test framework. There is no network communication involved. This containers does not support servlet and other container dependent features, but it is a perfect choice for simple unit tests.\n\nIn order to test resources or class which require e. g. access to the HttpServletRequest or other injectable things, you'll need to use another (real) container for Jersey tests, see https://jersey.java.net/documentation/latest/test-framework.html for details.\n. LGTM. Thanks!\n. Thanks!\n. Thanks!\n. LGTM. Thanks!\n. Thanks!\n. LGTM. Thanks!\n. Could you please add a stripped down version of your test class which is triggering the error?\n. @artemabalmasov I couldn't reproduce your problem with the following test class:\n``` java\npackage io.dropwizard.testing.junit;\nimport org.junit.Assert;\nimport org.junit.ClassRule;\nimport org.junit.Test;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\npublic class Issue828 {\n    @ClassRule\n    public static ResourceTestRule resources = ResourceTestRule.builder()\n            .addResource(new TestResource())\n            .build();\n@Test\npublic void testPositive() throws Exception {\n    Response response = resources.client().target(\"/\").request()\n            .accept(MediaType.APPLICATION_JSON_TYPE)\n            .get();\n    Assert.assertEquals(200, response.getStatus());\n}\n\n@Produces(MediaType.APPLICATION_JSON)\n@Path(\"/\")\npublic static class TestResource {\n    @GET\n    public Response foo() {\n        return Response.ok().build();\n    }\n}\n\n}\n```\nPlease be aware that context injections with @Context will not work with ResourceTestRule by default because it's only using an simple in-memory container and not a full-fledged Servlet container.\nYou also seem to use a DI framework like Google Guice, Spring DI, or Jersey's HK2. These might also be the source of the NPE.\nI'm closing this issue for now. Please feel free to add a comment if we should reopen this issue or if you can provide a complete reproducible test case.\n. Thanks for your PR!\n. I tried to reproduce the issue with the latest Dropwizard 0.8.0-rc.2 SNAPSHOT according to your description and came up with the following test class: https://gist.github.com/joschi/eb12da2baae6c032a1a4\nUnfortunately (or rather luckily) the test cases succeed.\nCould you please check if the issue still exists and provide a reproducible test case, if it does?\n. But that's the whole point actually. If you only want to initialize the application (and with it the MetricRegistry) once per test class, use a @ClassRule. To initialize it per test case, use @Rule.\n. > I still don't understand how it is complaining about the duplicate metric since until that buildClient(RULE) method is called, the notion of 'test-client' doesn't exist.\n\n[\u2026]\n I vaguely remember that junit instantiates a new instance of the class for each test so I wonder if it had already run the buildClient(RULE) method for another test\n\nI think this behavior depends on whether JUnit is forking new JVM processes per test class or is reusing processes, and whether it's running tests in parallel. See https://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html for details.\nAs a workaround you could provide the name of the test class to your IntegrationTestUtils.buildClient()method and add it to the client name in order to have unique metric names.\nI'm closing this issue for now since the DropwizardAppRule<T> is working as intended.\n. Thanks!\n. Feel free (and I encourage you) to add this (with an example) to the documentation. :smile:\n. It would be awesome if you could add one example to the testing documentation, e. g. add the Grizzly test container to the project POM and set it in the resource test class.\n. I've added some documentation and an example on how to use the Grizzly 2.x HTTP container for resource tests supporting @Context injections.\n. Is there anything preventing you from adding this dependency yourself if it's required or is any integration with the existing dropwizard-hibernate package required?\n. As always: Thank you!\n. Thanks!\n. Thanks for this PR!\nI'm closing it without merging, though, because I think it should still be possible to use dropwizard-client without pulling in a complete Dropwizard environment (i. e. having to provide a valid Environment instance to the constructors of *ClientBuilder).\n. Ah, sorry for not responding. Completely overlooked the replies on this PR.\n\nI assume the exclusion of hibernate-validator is because we're pulling it in as part of dropwizard-validation and don't want Jersey's bean validation bits to stomp the version we're pulling?\n\nYes, exactly. In the end it's excluded to make the Maven Enforcer plugin happy. The alternative would be to add Hibernate Validator to the dependencyManagement section of the parent POM to enforce a certain version of it. We should probably do that anyway.\nThis being said, it's rather unlikely that we remove Hibernate Validator in the foreseeable future because it's quite deeply embedded in dropwizard-validation.\n\nIs there any way to move these bits to dropwizard-validation instead so all the validation-related bits stay in one place?\n\ndropwizard-jersey pulls in dropwizard-validation (see pom.xml) and this feature is tightly coupled with Jersey. It's completely useless without dropwizard-jersey, so I assumed putting it in there is the right place\u2122.\n\nOut of curiosity, why aren't these validations just working right now? Is this for validation annotations in the resource method parameter list (i.e. Foo getFoo(@NotNull FooRequest req))?\n\nYes, exactly. Some annotations (namely @Valid and @Validated) can already be used in Resource classes, others are currently limited to value classes.\nIf the addition of this feature doesn't impose a large performance overhead (which we should test), I don't see a reason not to add it by default.\n. Closed in favor of #919.\n. Could you please provide a simple example of the POJO, an invalid, and a valid payload? Which version of Dropwizard are you using?\n. Haha, no problem. Thanks for the feedback! :smile: \n. The log message makes sure that the reason for the program termination will eventually end up in the right place (e. g. a log file or a remote log host). If the statement is removed, the exception stack trace is only printed on standard out.\n. Thanks!\n. @pparth That's simple: Until now nobody seemed to require it really (there wasn't any bug reported on this before) and it's something we can easily fix in a patch release (i. e. Dropwizard 0.8.1).\n. Nice catch. Thanks!\n. There's dropwizard-cassandra which is well maintained and which is also listed in our Dropwizard Modules Directory.\n. Argh, yes of course. Thanks!\n. Fixed by upgrading to Jetty 9.2.9.v20150224 in 071b8104c0cf788264594899386ea5bfbf28d910.\neclipse/jetty.project@f02da0cc339ace0a663c6bd16bfd3012f1f94879\n. That's a rather extensive history for such a simple change. Please cleanup history of this PR by squashing the commits into one and push your changes afterwards.\n. Thanks!\n. Why would MultiPartBundle need a Configuration instance?\nClosing this PR (the typo in the docs has been addressed in a separate commit).\n. @pavangupta Hah, you're right. The docs are wrong in this case. Thanks for mentioning it!\n. There will be no further releases of Dropwizard 0.6.x or 0.7.x.\n. > Would this be something you would consider pulling into 0.8.x?\nYes, definitely. :smile: \n. @Madhukar07565 Please post your problem to the mailing list: https://groups.google.com/forum/#!forum/dropwizard-user\n. Thanks!\n. I'm not sure if this functionality should be included in the existing FileAppenderFactory instead of creating a new one.\n@dropwizard/committers Any thoughts on this? \n. Thanks!\n. Thanks, @arteam! And thanks @Trundle for reviewing.\n. @eiden Thanks!\n. Thanks!\n. Thanks!\n. As far as I can tell that's completely correct. You need to build a proper URI with UriBuilder (yours will literally just contain the ID of the Person instance).\n``` java\nfinal URI uri = UriBuilder.fromResource(PersonResource.class)\n                .path(\"{personId}\")\n                .build(person.getId());\nreturn Response.created(uri).build();\n``\n. @sebeichholz We depend on the fixing of https://java.net/jira/browse/JERSEY-2838 here. Not much we can do in Dropwizard (dropwizard-jersey) without basically rewriting parts of Jersey 2.x.\n. @sebeichholz Could you please check if the issue has been solved in Dropwizard 0.9.0-rc5-SNAPSHOT?\n. Closed due to lack of feedback.\n. Additionally changing the response of the PingServlet now would break every existing check in existence, so it's rather unlikely to change just for some increased convenience when writing checks or tests for it.\n. @jasonsturges Dropwizard 0.8.0-rc3 is using Jersey 2.16. Please use either the correct version ofjersey-media-multipartordropwizard-forms`, as described by @Athou, which implicitly imports the correct version.\n. dropwizard-forms 0.8.0-rc3 should already be on Maven Central: http://search.maven.org/#artifactdetails%7Cio.dropwizard%7Cdropwizard-forms%7C0.8.0-rc3%7Cjar\n. It's still failing: https://gist.github.com/joschi/9ff2c3d40f08bd5a8c86\nThe problem is the injection order in the resource method which occurs in order of the arguments. That's why the problem doesn't happen if the parameter annotated with @Auth is the first method parameter or if there is a class field annotated with @Auth (which is being injected before any method parameter).\nUnfortunately I don't see a straight forward way to fix this behavior.\n. It's already escaped as a JSON string but which escaping rules would you additionally apply? SQL? JavaScript? HTML? Python?\nI don't think that's a problem you can solve in a generic way.\n. You shouldn't reuse the Response object in your implementation. Please try to create a new Response object in the put() method.\n. Additionally the Elasticsearch metrics reporter is maintained by Elasticsearch: https://github.com/elasticsearch/elasticsearch-metrics-reporter-java\n. You're referring to commit 071b8104c0cf788264594899386ea5bfbf28d910.\nThere is currently no fixed date for Dropwizard 0.8.0 or 0.8.0-rc5 but we try to release it in the first weeks of March.\n. The original author of issue #893 reused the Response object which doesn't work with JAX-RS (as the underlying OutputStream can only be consumed once).\n. Dropwizard is using the Metrics library underneath. Better ask that question on the mailing list.\n. @carlo-rtr I've addressed the issues (typo in docs, test for recursive substitution) you've mentioned.\n. Closed by merging #918.\n. ```\n$ curl -k -v -I https://localhost:8443\n Rebuilt URL to: https://localhost:8443/\n Hostname was NOT found in DNS cache\n   Trying ::1...\n Connected to localhost (::1) port 8443 (#0)\n TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n Server certificate: localhost\n\nHEAD / HTTP/1.1\nUser-Agent: curl/7.37.1\nHost: localhost:8443\nAccept: /\n< HTTP/1.1 404 Not Found\nHTTP/1.1 404 Not Found\n< Date: Thu, 05 Mar 2015 14:47:38 GMT\nDate: Thu, 05 Mar 2015 14:47:38 GMT\n< Content-Type: text/html; charset=ISO-8859-1\nContent-Type: text/html; charset=ISO-8859-1\n< Cache-Control: must-revalidate,no-cache,no-store\nCache-Control: must-revalidate,no-cache,no-store\n< Content-Length: 284\nContent-Length: 284\n\n<\n* Connection #0 to host localhost left intact\n``\n. The slf4j-api dependency is defined in thedependencyManagementsection of the parent POM (https://github.com/dropwizard/dropwizard/blob/e85a6b71806a6da35cfc723d9c879d912a0e289f/pom.xml#L292-296) which is why the Maven Enforcer plugin doesn't throw an error.\n. No, you're completely right with excluding it. I just wanted to provide an explanation why Maven Enforcer didn't seem to work in this case. Thanks!\n. This has been fixed in #924.\n. Duplicate of #925.\n. [dropwizard-java8 0.8.0-2](https://github.com/dropwizard/dropwizard-java8) switched to the official Jackson JDK8 module.\n. Thanks for bringing this up. I've added the.gitattributes` file @carlo-rtr suggested to the repository.\n. Neither Coda Hale nor Yammer is currently actively involved in the development of Dropwizard. So the copyright time range is basically correct, but I'm not familiar with the US rules/laws/recommendation about those\u2026 \n. So let's just leave it as it is and add \"2014-2015 Dropwizard Team\"?\n. Which version of Dropwizard are you using?\n. The documentation you've been referring to is for Dropwizard 0.8.0.\nIn Dropwizard 0.7.1, the applicationContextPath setting is only available for the simple HTTP connector: http://dropwizard.io/0.7.1/docs/manual/configuration.html#simple\n. With this change we could probably get rid of the @Auth annotation altogether and use the \"standard\" JEE annotations like javax.annotation.security.RolesAllowed, javax.annotation.security.PermitAll and javax.annotation.security.DenyAll (http://docs.oracle.com/javaee/7/api/javax/annotation/security/package-summary.html) which are supported by Jersey (https://jersey.java.net/apidocs/2.17/jersey/org/glassfish/jersey/server/filter/RolesAllowedDynamicFeature.html).\n. Thanks!\n. @fellz The domain dropwizard.io currently has an invalid A resource record. Please use http://www.dropwizard.io or https://dropwizard.github.io/dropwizard/ until we fixed this.\nI'm closing this issue because it's not exactly a bug in Dropwizard and we're aware of the problem (and going to fix it). Thanks!\n. @mabn Thanks for reporting this. Please create an issue for your feature request(s) in the issue tracker for the Metrics project at https://github.com/dropwizard/metrics/issues.\n. @shivangshah You have to differentiate between servers and connectors. Additionally, the different types of servers (default, simple) provide different options.\nAs @arteam already described, the application context path in DefaultServerFactory and SimpleServerFactory is only set to the configured value after Application#run() has been executed, so you won't be able to get the configured application context path this way.\n. LGTM.\n. @kmejka Why?\n. The purpose of this issue is to serve as a reminder to set the JDK baseline for Dropwizard 1.0.0 to Java 8 and to merge the dropwizard-java8 project into the main repository.\n. @jplock I'd pull in the classes from  dropwizard-java8 before closing this issue.\n. Makes sense.\n. Thanks for this pull request!\nIt might even be useful to actually add NonEmptyString (and a test case :wink:) to io.dropwizard.jersey.params and refer to that in the documentation.\n. LGTM.\n. I'm all for it. Let's just remove the original, tainted input from the error messages.\n. LGTM! :+1:\n. I also have some trouble with using reflection in this case. The problem is that it would fail only at runtime if things broke.\nMaybe registerMetrics() should be called implicitly when providing an alternative MetricRegistry, i. e. rename setMetricRegistry() to registerMetricRegistry() or initializeMetricRegistry() and call registerMetrics() in that method. The can still be a (package protected) setMetricRegistry() if that would be required for tests.\n. Thanks for the pointer. I just added the missing @JsonProperty annotations to the getters in ErrorMessage.\n. If possible at all without modifying the core of Dropwizard, it would be great if you could publish your project as a 3rd party extension (and add it to http://modules.dropwizard.io/).\n. @TomCools Awesome! Thanks for the update!\n. LGTM.\n. To be honest, I don't think this will happen anytime soon if at all.\nThere are basically a gazillion dependencies on Jersey 2 in Dropwizard, e. g. dropwizard-auth, dropwizard-client, dropwizard-core, dropwizard-jersey (obviously), dropwizard-forms, dropwizard-hibernate, dropwizard-jdbi, and dropwizard-testing all depend on classes provided by Jersey 2. So in the end it would either lead to a complete fork of Dropwizard or a impenetrable pile of dependencies like dropwizard-auth-jersey1/dropwizard-auth-jersey2 etc.\n. > What are your thoughts on adding a way to get a ServletContainer from dropwizard-jersey, so there's an abstraction between dropwizard-core and Jersey.\nIf you manage to do it in a backward-compatible* way, you've got my vote.\n*: Backward-compatible to Dropwizard 0.8.x.\n. @arteam I'm all for it, although I'd simply use a string comparison instead of splitting the original string.\njava\nfinal String expected = \n  \"The following paths were found for the configured resources:%n\"\n  + \"%n\"\n  + \"    GET     / (io.dropwizard.jersey.dummy.DummyResource)%n\"\n  + \"    GET     /another (io.dropwizard.jersey.DropwizardResourceConfigTest.ImplementingResource)%n\"\n  + \"    GET     /async (io.dropwizard.jersey.dummy.DummyResource)%n\"\n  + \"    DELETE  /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource2)%n\"\n  + \"    GET     /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource)%n\"\n  + \"    POST    /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource2)%n\";\nassertThat(rc.getEndpointsInfo()).isEqualTo(String.format(expected));\n. Please create a separate project for logging appender and add it to the Dropwizard 3rd party modules directory.\nAdding a hard dependency on MongoDB to the Dropwizard core packages won't happen. You can take a look at https://github.com/gini/dropwizard-gelf for an example 3rd party project which adds an additional logging appender.\n. Thanks!\n. Thanks!\n. I also see this critical. A buggy or malicious client might use this to swamp the logs with warning messages including stack traces and cause a denial of service for other clients.\nUsing Dropwizard's LogConfigurationTask the log level for the relevant class(es) can be set to DEBUG even during runtime in order to investigate failed requests. But generally those are not a warning event (just like @j4n1 described).\nAny other opinions in @dropwizard/committers?\n. Thanks!\n. LGTM.\n. It's a good idea and you have my vote for it, but please add the relevant configuration for the Maven Surefire plugin in the dropwizard-parent POM instead of just dropwizard-jersey.\n. Thanks!\n. @rskokan You're using the \"simple\" server connector which automatically sets the application context path to /application (see http://www.dropwizard.io/0.8.1/docs/manual/configuration.html#simple). Together with a rootPath of /app/* the complete path to your JAX-RS resources is /application/app, e. g. /application/app/hello-world. The assets should be available at /application, e. g. /application/index.html.\n. Looks good (and doesn't functionally change anything as far as I see).\n. Thanks!\n. I think the GET verb was perfectly fine here as the request doesn't change any state and is idempotent.\nInstead of returning an empty 204 response we could return the provided date as a string (with media type text/plain).\n. :+1:\n. @carlo-rtr I'm not sure that using a CacheLoader is sensible at all in this case. After all the assumption with a CacheLoader is (https://code.google.com/p/guava-libraries/wiki/CachesExplained):\n\nIs there some sensible default function to load or compute a value associated with a key? If so, you should use a CacheLoader.\n\nUnfortunately there is no sensible default value in our case.\nThe CachingAuthenticator#authenticate() should explicitly add a successfully authenticated principal to the cache instead and omit the failed ones.\n. LGTM. :+1:\n. I'd rather wait for the GA release of Jackson 2.6.0 than update to the release candidate now.\nAdditionally I'd keep the exclusions because with Jackson 2.6.1 we will have the same problem again. \n. @cowtowncoder Cool, thanks for the update!\n. Thanks!\n. LGTM.\n. I'm closing this issue since the questions are better asked in the Fallwizard project and it's not directly a problem with Dropwizard.\n. @martintreurnicht Any updates on the issue?\n. Thanks!\n. Closing this issue. I think this discussion is better picked up on one of the mailing lists (https://groups.google.com/forum/#!forum/dropwizard-user or https://groups.google.com/forum/#!forum/dropwizard-dev).\n. I restarted the failed build job.\n. Are there any real-world problems with the 422 status code that would justify breaking backwards-compatibility with older versions or adding a maintenance-\"tax\" to Dropwizard?\n. > Even if 422 remains the dropwizard default, and there is a configuration to go the other way that's workable.\nBut we would still need to implement, test, and maintain that code.\nThe question I have is if there are any actual problems with the 422 status code or if it is just a theoretical problem that never happens in the real world (as any sane HTTP client should handle the whole 4xx range and not just some specific/hand-picked status codes).\nI haven't seen any client having problems with the 422 status code yet. So I'm voting for closing this issue as \"won't fix\".\n. Since there hasn't been any new argument for this change within 2 weeks, I'm closing this issue now.\n. @dropwizard/committers I'd like to remove the Dropwizard docs in the root directory of the gh-pages branch and create an index.html file which redirects to the latest release instead.\nThis way people see the latest documentation in a versioned way (e. g. http://www.dropwizard.io/0.9.0/docs/index.html instead of http://www.dropwizard.io/docs/index.html) and won't accidentally see the documentation of a more recent release. The downside is, that some old URLs won't work anymore.\nAny opinions?\n. LGTM. :+1:\n. Thanks!\nFor reference: https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1\n. To get the issue back on track, I'm also for releasing a version 0.8.2 with the mentioned fixes for Jersey as they should basically be cherry-pickable. I would try to keep the changes in 0.8.2 to a bare minimum because we should focus on getting Dropwizard 0.9.0 out of the door.\n@pparth Great that you're using Dropwizard! Feel free to join the developers mailing list and discuss the project roadmap and the findings in your environment with the Dropwizard contributors. This issue is not the right place for it.\n@ryankennedy @pparth I hope that this linguistic misunderstanding didn't make both of you bitter and that we can still have a constructive discussion on the developers mailing list.\nI'm closing this issue now (still open for comments) as the upgrade to Jersey 2.19 has already been merged in #1143.\n. @pparth If you've just started migrating, I'd recommend going for Dropwizard 0.9.x instead of using Dropwizard 0.8.x. You can also take over maintenance of the 0.8.x branch, if it's crucial to your operations.\n. @pparth We try to keep the release notes up to date (but no guarantee that they're complete, sorry): https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst\n. I'm locking this issue now. Everyone has made their point. Please continue on the developer mailing list if you feel that there's more to discuss.\n. Could you please update docs/source/about/release-notes.rst as well? Other than that it seems to be a drop-in replacement, so :+1: .\n. Dropwizard is still using Jetty 9.2.x, so this is kind of a non-issue for us right now.\nI'll leave the issue open to serve as a reminder once we upgrade to Jetty 9.3.x (probably post  Dropwizard 0.9.x because Jetty 9.3.x requires Java 8).\nRefs #1036.\n. Thanks!\n. LGTM. :+1:\n. Just tried to reproduce this in a fresh checkout but everything worked correctly. Please make sure that you're either using a released and tagged version (e. g. https://github.com/dropwizard/dropwizard/tree/v0.9.0-rc1) or that you build and locally deploy (mvn install) the complete project. Mixing SNAPSHOT versions will lead to such errors.\n. Merged into 0.8.x and master (b787ad6605f9a1f18abbfa608d922ec78fbb678e) branches.\n. JerseyClientIntegrationTestdidn't cause any problem in the past months, so I'll close this issue. Let's reopen it, if the problem resurfaces.\n. @BernhardBln What @carlo-rtr said, see https://jersey.java.net/documentation/latest/filters-and-interceptors.html#d0e10031\n. Thanks!\n. Caching between builds is currently only available on the paid subscriptions for Travis CI: http://docs.travis-ci.com/user/caching/\n. Yes, running on the new infrastructure for their paying customers (travis-ci.com feature). :wink:\nI mean we can still add it, but it doesn't have any effects on our builds running on travis-ci.org.\n. I stand corrected: https://travis-ci.org/dropwizard/dropwizard/jobs/70786272#L94\nIt seems to work. Thanks, Justin! :smile: \n. https://travis-ci.org/dropwizard/dropwizard/caches is showing some data in the Travis CI caches.\n. As this is neither a bug report nor a feature request, I'm closing this issue. Please use the dropwizard-user group for this kind of questions.\n. To be honest I'm not a big fan of decoupling Joda-Time (or any other of the \"core\" libraries) and Dropwizard.\nThe idea of Dropwizard is to have a fixed set of good libraries tightly integrated to simplify the creation of opinionated RESTful services. Adding abstraction layers around all core libraries (e. g. Joda-Time, Jersey, or Jetty) is a lot of work and frankly contradicts the \"Dropwizard mantra\".\n. Thanks!\n. Thanks for this PR! I've slightly changed it before merging it in d78431ad8c8d1c545b6b553228b6eb629562d601.\n. Good catch. Thanks!\n. Could you please update the release notes as well?\n. > Also it is unnecessary to delete the log files after the test is done because the log files are zeroed out when the test runs.\nI don't agree. If the log files aren't removed after the test run, we don't know if they were created in the following test runs or if there was an error \u2013 unless we clean the complete working directory (e. g. by running mvn clean).\nIt would be great if we could use JUnit's TemporaryFolder rule for this, but that might make the test setup more complex.\n. LGTM. Thanks for adding the test cases!\n. LGTM. :+1:\n. (a) No.\n(b) No.\n(c) Yes.\nSince this is neither a bug report nor a feature request, I'm closing this issue now.\n. Thanks for reporting this!\n. What are the changes in Jersey 2.20? https://jersey.java.net/release-notes/ doesn't list the release notes for that version yet\u2026\n. LGTM. Thanks!\n. LGTM. Thanks!\n. LGTM. :+1: \n. LGTM. :+1:\n. Good catch. Thanks!\n. @carlo-rtr You can restart failed jobs directly at Travis CI: https://travis-ci.org/dropwizard/dropwizard\n. While it doesn't exactly fix the issue at hand (i. e. Travis CI failing builds on Java 8), it's an oversight and a mistake in the tests to fix, nonetheless. Thanks for fixing it, Carlo!\n. While it doesn't exactly fix the issue at hand (i. e. Travis CI failing builds on Java 8), it's an oversight and a mistake in the tests to fix, nonetheless. Thanks for fixing it, Carlo!\n. LGTM except for that Jersey version. :+1:\n. @wakandan Awesome, thanks!\n. Please file this issue in the appropriate project: https://github.com/federecio/dropwizard-swagger\n. :+1:\n. Closed by merging #1249.\n. Good catch. Thank you very much!\n. Thanks!\n. Thanks for reporting this. We'll update the documentation once Dropwizard 0.9.0 (which contains the fixed example) has been release.\n. Documentation for Dropwizard 0.9.0 is now available at http://www.dropwizard.io/0.9.0/docs/\n. Good catch. Thanks for fixing it!\n. Jetty 9.3.x only supports Java 8. We will raise the baseline to Java 8 with Dropwizard 1.0.x, but for Dropwizard 0.8.x and 0.9.x, Java 7 is our target platform.\nPlease subscribe to #1036 to get updates about the update of Jetty.\n. LGTM.\n@maffe Thanks for your contribution.\n. @rgbj I think you should open an issue in the Metrics project: https://github.com/dropwizard/metrics\nThis being said, there are already existing metrics reporters for Elasticsearch, e. g. https://github.com/elastic/elasticsearch-metrics-reporter-java\n. Okay, got it.\nFeel free to start such a project. As it doesn't have any hard dependencies into Dropwizard, I'd suggest running it in your own repository and adding it to the 3rd party listing at http://modules.dropwizard.io/\n. Thanks!\n. LGTM. Thanks!\n. @jplock Yes, indeed. I think this makes sense and I've replaced most of the explicit Jersey dependencies in Dropwizard's BOM simply with jersey-bom. For some dependencies it's not possible due to dependency exclusions.\n. @fexbraun My default locale is de_DE.UTF-8 and those tests are working. Did you specifically run into problems with those tests?\n. Thanks for this PR! I've opted to reset the original default locale at the end of the test.\n. Thanks for your PR. I've chosen a slightly different approach to the problem at hand (see 518d4b5bec3ff511fee088211009d46209597bd2 and #937).\n@fexbraun Please let me know if this fixes your problems on Windows too.\n. :+1:\n. Thanks for your PR. I've chosen a slightly different approach to the problem at hand (see 518d4b5bec3ff511fee088211009d46209597bd2 and #937).\n@fexbraun Please let me know if this fixes your problems on Windows too.\n. :+1:\n. Thanks for your PR!\n. @SeshuHSC Please post to the dropwizard-user mailing list for general questions like this. Additionally, Dropwizard 0.6.x isn't maintained anymore and you should upgrade to a more recent version of Dropwizard.\n. @nickbabcock Could you please create a separate PR for fixing HttpClientConfiguration for #1292? Just to keep things minimal.\n. @nickbabcock You can probably just reset your branch to 6202669898f1b4c964d3f20c1e9fe2588f752cd6 and force push it.\n. LGTM. :+1: \nThanks!\n. @carminexx Please provide a minimal example project to reproduce this bug.\n. @CrossfireCurt Thanks for the hint!\n@carminexx Is it possible that a similar problem (i. e. dependency divergence) is responsible for your problem?\n. Closing issue as I couldn't reproduce the problem and the original author didn't respond.\nSource files to reproduce: https://gist.github.com/joschi/53df1681c7bc7102cbd0\n. @carminexx Thanks for the update!\n. @nikhil578 Upgrading arbitrary dependencies won't help in this case, as the problem was caused by incompatible Jackson dependencies.\nCheck your dependency tree with mvn dependency:tree and make sure that all Jackson dependencies are pulled in with their correct versions.\n. Thanks!\n. Solved in #1304.\n. Thanks!\n. @nickbabcock Yes, unfortunately they are. I'll take another look at this tomorrow if no one else has a better idea. :disappointed: \n. @arteam I created DelegatingArgumentFactory as preparation if more than just one additional ArgumentFactory is available in Dropwizard (e. g. dropwizard-java8 adds more). It's a bit unfortunate that jDBI doesn't support wrapped arguments in a way that would make this PR unnecessary.\nFeel free to come up with another (maybe more pragmatic) PR for this issue. I'll happily review and merge it.\n. @arteam Any more reasons not to merge this? Otherwise I'd merge this PR for Dropwizard 0.9.0.\n. Closed in favor of #1304.\n. Thanks!\n. I don't have a Windows machine handy but @fexbraun wrote in #1286 and #1287 that the problems with building Dropwizard on Windows (or rather running the tests) had been fixed.\n@nickbabcock Are you sure that this is caused by the .gitattributes file? IIRC setting text=auto should be good enough for fixing the original problem (also see https://help.github.com/articles/dealing-with-line-endings/).\n. @fexbraun This would solve the specific problem with those two template files but it wouldn't prevent anyone from doing the same mistake again, especially given our current .editorconfig: https://github.com/dropwizard/dropwizard/blob/v0.9.0-rc5/.editorconfig#L9 :wink:\n. @jplock Agreed, see 15b6533bde4e223d3bf01437f9eb3dacffda85f8.\n. @ferdy-lw Could you please provide a small, minimal Dropwizard application to reproduce this issue? Something along the lines of https://gist.github.com/joschi/53df1681c7bc7102cbd0.\n. LGTM. Thanks!\n. Please upgrade to Dropwizard 0.8.4 or 0.9.0 and check if the problem still exists there.\n. @ankgoyalEXP Dropwizard 0.6.x is not supported anymore. Please upgrade to a more recent version.\n. Thanks! I've added the class in 615048cdacdcab047dfb4919fdd73709ab00c1cd.\n. Duplicate of #1308.\n. @lewisd32 Which version of Dropwizard are you using?\n. Cherry-picked into master in 8d60106241eba635cdbfa83f50409763939d421d.\n. LGTM. Thanks!\n. Also merged in master (0a7e0a96ca152269d2d0546e5f7ad810c72da9bd) and release/0.8.x (963728419fc5fa7c5410f48be6470253a0a62a72).\n. @nickbabcock The case you've described (and which is mentioned in #986) is unaltered by this PR, see https://github.com/dropwizard/dropwizard/blob/137aa42560312966f18ccc732c769666286135e6/dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java#L47-L51.\nThis PR merely enables non-string Optional<T> method parameters to work correctly, e. g. Optional<Integer> like in the unit tests accompanying this change set. Before, this resulted in a NullPointerException in AbstractParamValueExtractor<T>#convert(String):\njava.lang.NullPointerException: the Function passed to Optional.transform() must not return null.\nOr maybe I misunderstood your objections?\n. Which Java/JDK version are you using and which dependencies does your parent POM contain?\n. FWIW, a short Google search reveals https://java.net/jira/browse/JERSEY-2881 and https://java.net/jira/browse/HK2-277\n. The offending POM (hk2-parent) has been fixed between HK2 2.4.0-b31 and HK2 2.4.0-b32:\n- https://github.com/hk2-project/hk2/blob/hk2-parent-2.4.0-b31/pom.xml#L1095-L1104\n- https://github.com/hk2-project/hk2/blob/hk2-parent-2.4.0-b32/pom.xml#L1095-L1104\n- https://github.com/hk2-project/hk2/commit/f9c846167b85d7a9a6915d522990b1ea6ca2b4ee\n. @blommish No, that doesn't mean you need Java 8. It's just a profile that's being activated if Java 8 is being used. See http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html for the reasons to have such a profile (which Dropwizard also has).\n. @blommish The problem is that the Maven Enforcer plugin (rightfully) complains about the (invalid) version range in the hk2-parent 2.4.0-b31 POM. You can either deactivate this check, remove the Maven Enforcer plugin, or override the version of HK2 being used in your project (which will bring some problems with the Maven Enforcer plugin if you're using it).\n. @rvs-fluid-it Do you have a specific use-case which requires to use another executor service for health checks?\n. > In some cases I deploy my Dropwizard applications on a JEE-container\nThis is not an intended usage scenario for Dropwizard. :wink: \nCurrently I tend to not merge this PR because I don't see an overwhelming reason that would justify the increased complexity in Dropwizard's codebase.\n@dropwizard/committers Any opinions on that?\n. Closing due to inactivity.. Thank you for your contribution.\nSince this doesn't require any changes in Dropwizard itself, I'd suggest publishing the module as a 3rd party extension and add it to http://modules.dropwizard.io/thirdparty/\n. > The bundle consists of instrumented Jetty websocketContainer. Do you think that I can create a pull request to the metrics repository?\nSure, @ryantenney will be happy to receive a PR, and even if it's not merged into the Metrics repository, you could still publish it as a third-party module. Personally I don't think there's too much use in pulling everything and the kitchen sink into one repo if it's not necessary at all. That's why I'm reluctant to include (optional) extensions into Dropwizard.\n@eitan101 Just to be clear, I think the quality of your PR is awesome. I just don't want to include optional extensions in the core repository because it increases the maintenance burden.\n\nCould you add a reference to the official / third party bundles in the manual ?\n\nThat's what http://modules.dropwizard.io/ is for. We should include a link to that page into the documentation, though.\n\nCurrently the documentation does not mentioning anything about websockets. I can create a piece of documentation that show how to do it by yourself, or add link to the third party bundles?\n\nPlease add the appropriate documentation to the repository of the Websockets module.\n. Thanks!\n. Thanks!\n. @nickbabcock Yes, it's the same bug. This will be fixed in the next Jersey version (which will depend on a more recent version of HK2).\n. Thanks!\n. :+1:\n. Thanks!\n. Dropwizard 0.6.x (and 0.7.x for that matter) aren't supported anymore. You should upgrade to Dropwizard 0.9.1 for the latest supported release.\nDropwizard itself doesn't come with any JDBC or database drivers in general. In the end you probably \"just\" have to pull in the correct driver from Oracle to support SSL/TLS (Oracle Native Network Encryption).\n. \"A pretty big JDBI upgrade\" and only 1 line changed in our POM. I love those kind of updates. :wink:\n. @richmidwinter Check your Jackson dependencies for incompatible versions (e. g. by running mvn dependency:tree).\n. @ojacobson IMHO dependent bundles are an anti-pattern. Could you please elaborate on the use case a little bit or describe how that currently is a problem in your applications?\nFWIW, I'd vote for removing Bundle completely and only offer ConfiguredBundle<T> to simplify matters.\n@dropwizard/committers Any opinion on that?\n. Shouldn't this PR be based on master instead of release/0.9.x?\n. LGTM. :+1:\n. LGTM, thanks!\n. @arteam In my opinion Dropwizard should \"just work\" with Google Guava and Joda-Time additionally to the APIs provided by JDK 8 and higher (JSR-310 and Optional).\nSwapping out the support for those libraries (which are by the way being used throughout Dropwizard itself) doesn't gain us anything in my opinion and will just put the burden to add additional dependencies on our users.\nOnce we got rid of Google Guava or Joda-Time from the Dropwizard core components, we can move support for them from dropwizard-jdbi into separate modules, but for now I'd like to keep it.\nBackward compatibility with older Dropwizard versions isn't exactly required for Dropwizard 1.0.0, but it's a nice feature. :wink:\n. @jplock  @arteam Thanks for reviewing!\n. > Currently both logback and slf4j are required dependencies in Dropwizard. And since you can only have one implementation of slf4j in your class path it's not possible to use slf4j-log4j12, for example.\nYes, and it's been designed that way. Dropwizard is using Logback for logging and wasn't designed to (easily) replace that.\n. @JamesXNelson\n\nSo, basically, any other framework that is also opinionated about logging won't work in dropwizard?\n\nNo, usually you can exclude the logging framework from other libraries and replace them with the appropriate SLF4J legacy bridge: http://www.slf4j.org/legacy.html\n. @jhalterman \n\nThere is absolutely no point in Dropwizard even using slf4j if it requires, through a dependency, usage of Logback.\n\nSLF4J allows bridging other logging frameworks like log4j, commons-logging, or j.u.l which Logback itself doesn't. Additionally, Dropwizard allows for a deep integration of Logback, e. g. with jDBI or by allowing to configure it in the Dropwizard configuration (instead of having to write a custom logback.xml or log4j.xml file).\nThat being said, a pull request for abstracting the logging layer from Dropwizard in a backward-compatible way would be welcome.\n. @imarios You can either respect the decision or provide a PR. More whining doesn't help.\n. As I said before, PRs to change this are welcome and can happily be discussed.\nI'll lock this issue now.\n. You can already override settings via environment variables (http://www.dropwizard.io/0.9.1/docs/manual/core.html#environment-variables). If you absolutely want to read those properties from another file, you can write a similar ConfigurationSourceProvider which substitutes the values in your configuration file.\nPersonally I don't see too much value in adding this as you would effectively just have 2 configuration files (in different formats) for the same thing.\n. Unfortunately that won't work without some kind of source filtering/templating in Maven (similar to resource filtering).\n. Thanks!\n. Thanks!\n. LGTM. Thanks!\n. Yes, renaming those classes is fine. It was more of an oversight on my end rather than a conscious decision and the end users won't ever come in contact with those classes directly.\n. Guava won't be removed anytime soon from Dropwizard, so we can still support the Guava variant of Optional<T>. The code is already there and it's working. I don't see any advantages removing it.\nAs for Joda-Time, I'm not dogmatic about its use. If someone provided a pull request to move support for Joda-Time into add-on modules and only support the Java Date/Time API (JSR-310) in the core libraries, I'm fine with it. Until then, I'd simply mark it as deprecated and remove it in Dropwizard 2.0.0 (in the far future) to simplify migration from Dropwizard 0.x to Dropwizard 1.x. But then again, Joda-Time is a quite stable library and shouldn't result in much maintenance work.\nI'm totally against bumping the baseline of Dropwizard 0.9.x to Java 8. That's just not how the versioning should work. :wink:\n. @karussell Guava is being used internally by Dropwizard itself and thus is a mandatory dependency.. Closed via #2232. LGTM.\n. Thanks!\n. @nickbabcock As a matter of fact, the *Param parameters should never be null in the first place. The whole reason for their existence is that those parameters should never be missing and that Jersey should return an HTTP response with status 400 (see https://github.com/dropwizard/dropwizard/blob/v0.9.1/docs/source/manual/core.rst#parameters). Otherwise one could simply use the primitive types or their equivalents (e. g.  int or Integer instead of IntParam).\nSo if that doesn't work anymore, we should either fix it or get rid of the *Param classes altogether in favor of the more basic types and validating annotations like @NotNull.\n. LGTM. Thanks!\n. @scho With Dropwizard 0.9.x you'll need to add the dropwizard-java8 bundle to your project to use Java 8 specific features like java.util.Optional<T>.\n. I'm closing this issue as it cannot be reproduced.\n@VanDavv Feel free to add a comment if the problem still occurs on the latest release candidate of Dropwizard 1.0.0.\n. I don't know where you've looked up that Dropwizard 0.9.2 would use Jackson 2.7.x, but that's wrong. Make sure to import the dropwizard-bom artifact into your project and don't use incompatible Jackson versions \u2013 at least if you didn't test the combination before.\n. Well, that's simply a wrong reading of the website. The \"Updates\" column merely shows the latest version of the dependency in Maven Central, while the \"Version\" column shows the actual version of the dependency used in that particular artifact.\nMake sure that you don't pull in more recent versions via 3rd party dependencies and use the dropwizard-bom artifact. Since you're using Gradle, you probably want to take a look at https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle\n. @jplock Good point. I'll add those.\n. Error in https://travis-ci.org/dropwizard/dropwizard/builds/107434037#L4784-L4872:\n```\nRunning io.dropwizard.testing.junit.DropwizardAppRuleConfigOverrideTest\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.005 sec <<< FAILURE! - in io.dropwizard.testing.junit.DropwizardAppRuleConfigOverrideTest\nio.dropwizard.testing.junit.DropwizardAppRuleConfigOverrideTest  Time elapsed: 1.005 sec  <<< ERROR!\njava.lang.RuntimeException: io.dropwizard.configuration.ConfigurationParsingException: /home/travis/build/dropwizard/dropwizard/dropwizard-testing/target/test-classes/test-config.yaml has an error:\n  * Unrecognized field at: server.requestLog\n    Did you mean?:\n      - adminConnectors\n      - adminContextPath\n      - adminMaxThreads\n      - adminMinThreads\n      - applicationConnectors\n        [1 more]\nat com.google.common.base.Throwables.propagate(Throwables.java:160)\nat io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:199)\nat io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115)\nat io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)\nat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\nat org.junit.rules.RunRules.evaluate(RunRules.java:20)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\nat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\nat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\nat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\nat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\nat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\nat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\nat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n\nCaused by: io.dropwizard.configuration.ConfigurationParsingException: /home/travis/build/dropwizard/dropwizard/dropwizard-testing/target/test-classes/test-config.yaml has an error:\n  * Unrecognized field at: server.requestLog\n    Did you mean?:\n      - adminConnectors\n      - adminContextPath\n      - adminMaxThreads\n      - adminMinThreads\n      - applicationConnectors\n        [1 more]\nat io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:276)\nat io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:166)\nat io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:99)\nat io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)\nat io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:63)\nat io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:197)\nat io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115)\nat io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)\nat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\nat org.junit.rules.RunRules.evaluate(RunRules.java:20)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\nat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\nat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\nat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\nat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\nat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\nat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\nat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n\nCaused by: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"requestLog\" (class io.dropwizard.server.DefaultServerFactory), not marked as ignorable (6 known properties: \"adminMaxThreads\", \"adminConnectors\", \"applicationConnectors\", \"applicationContextPath\", \"adminMinThreads\", \"adminContextPath\"])\n at [Source: N/A; line: -1, column: -1] (through reference chain: io.dropwizard.testing.junit.TestConfiguration[\"server\"]->io.dropwizard.server.DefaultServerFactory[\"requestLog\"])\n    at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:62)\n    at com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(DeserializationContext.java:855)\n    at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1083)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1389)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1367)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:266)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:163)\n    at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:121)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:136)\n    at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:99)\n    at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:142)\n    at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:488)\n    at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:95)\n    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:224)\n    at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:152)\n    at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3761)\n    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2042)\n    at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:153)\n    at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:99)\n    at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:63)\n    at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:197)\n    at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115)\n    at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n```\n. @arteam Unfortunately that didn't help.\n. @cowtowncoder Removing the Jackson Afterburner module unfortunately didn't fix the issue.\n. Superseded by #1479.\n. @VanDavv What do you mean by incorrect? We've upgraded to Hibernate 5 in Dropwizard 1.0.0 while previous versions were using Hibernate 4.\n. Closed via #2232.. LGTM. Thanks!\n. Sounds similar to #832 and #1258.\n. \n. @uromahn The reply in this issue still applies: https://github.com/dropwizard/dropwizard/issues/475#issuecomment-35629030\n. @uromahn\n\nOn the other hand, while Undertow seems significantly more efficient and \"faster\" than Jetty\n\nDo you know of any benchmarks supporting this claim you'd like to share?\n. @uromahn Looking at https://www.techempower.com/benchmarks/#section=data-r11&hw=ec2&test=json&s=2&p=5179c-0-0, Jetty seems to be faster than Undertow. This being said, Dropwizard is a complete application framework consisting of the underlying web server (Jetty), the low-level HTTP abstraction (Java Servlets), and the high-level HTTP abstraction (JAX-RS/Jersey). In order to compare Undertow with Jetty in the context of Dropwizard, you'd have to build a similar stack on Undertow and benchmark it.\ntl;dr I don't think that swapping Jetty with Undertow in Dropwizard will provide any gains, either performance-wise or for user-friendliness.\n. @Valid doesn't include a null-check, so maybe you want to add @NotNull to your method declaration.\nIf that's not what you mean, please elaborate on the problem and tell us which version of Dropwizard you're using and provide some example code.\n. @KonstantinYegupov There's a little more involved, like writing the actual documentation in https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/configuration.rst for example.\nIf you're simply looking for the Javadoc of Dropwizard 0.9.2, you'll find that at http://www.dropwizard.io/0.9.2/docs/about/javadoc.html\n. @ant3 I'm a bit hesitant to merge this PR because it changes the default behavior without providing the possibility to change it back to the old behavior.\nWould it make sense to add a parameter to the HibernateBundle to configure whether it's using eager or lazy loading by default?\n. There are a few 3rd party addons providing support for Guice in Dropwizard (see http://modules.dropwizard.io/thirdparty/). Did you run into problems with those?\n. LGTM. Thanks @cowtowncoder for your help!\n. Thanks!\n. @raymerd Please make sure that there are no conflicting JARs on the class path of your project.\nAre you using any third party dependencies in your project? What does the POM of your project look like?\n. @raymerd You're pulling in different versions of Jetty dependencies. Dropwizard 1.0.0 upgraded to Jetty 9.3.x, which doesn't contain the NonBlockingThread class anymore.\nI guess that the Spring platform or some other dependency is transitively pulling in an incompatible version of some Jetty dependency.\n. @patrox Please avoid mere whitespace changes in docs/source/manual/configuration.rst. Other than that the changes look good to me.\n. @patrox It seems to be caused by our current .editorconfig file. Just keep it that way.\n. Thanks!\n. @devinrsmith Since there is no such thing as infinite disk space, aiming for an infinite number of archived files might not be the best option.\nAre you using other (external) means of rotating the log files?\n. LGTM except for that minor comment on HibernateBundle. :+1:\n. Thanks!\n. @foikila Try putting quotes around your JDBC URL. Unfortunately that string seems to be a valid but incomplete YAML statement.\n. I agree on printing the log messages on ERROR level in this case. Otherwise people might too easily miss them.\nLGTM. :+1: \n. @jklukas I think this adds too much complexity to the configuration file syntax. It should be as simple as possible and this is clearly on the way to transform the simple (?) YAML syntax into a pseudo programming language.\nIf you need such complex logic in your configuration files, I suggest you'll use a configuration management solution like Ansible, Puppet, or Chef and create your configuration files from a template.\n@dropwizard/committers Any other opinions?\n. @jplock Nope, it's fine I think. :+1:\n. @erikvanoosten Good catch. I've addressed this in #1722.\n. @jklukas I think @brentryan is referring to (admin) tasks: http://www.dropwizard.io/0.9.2/docs/manual/core.html#tasks\nGenerally :+1: for this feature (either as a task or on startup).\n. @glennmcallister Very good argument, thanks for weighing in! Making this feature a task which is not available by default might be the best solution then. So the developers can decide themselves if they want to expose that functionality.\n. Thanks!\n. There's been a related topic on the dropwizard-dev mailing list recently: https://groups.google.com/forum/#!searchin/dropwizard-dev/guice/dropwizard-dev/EVem62Gc_SY/LKypTx2KBAAJ\nI'm closing this issue because it's not a bug report or feature request for Dropwizard.\n. @timmolter A pull request would be welcome!\n. @mustajabakhtar This looks like it was opened accidentally. If that's not the case, please open a new PR rebased on current master and add a description what the PR is supposed to do.\nIf you merely want to add another module, please do so in a separate repository and add your module to the Dropwizard Modules Directory: https://github.com/dropwizard/modules.dropwizard.io\n. Thanks!\n. @vandanagopal Please post your question and ideally some accompanying code snippets to the dropwizard-user mailing list.\n. @pritam620 Could you please elaborate on this on the dropwizard-user mailing list?\nhttps://groups.google.com/forum/#!forum/dropwizard-user\n. I'm closing this issue as the original author didn't respond.\n@danielfc Feel free to add your comments and we can re-open the issue if's it still a problem in Dropwizard 1.0.0.\n. LGTM. \ud83d\udc4d \nI'll let @nickbabcock merge the PR since he's spent more time with it and should have the final say.\n. @ezweave This looks like some class path problem in your build. Which version of Dropwizard are you using? Which version of Maven? How does your POM look like and the output of mvn dependency:tree look like?\n. @ezweave Are you using the Maven Shade plugin (or a similar plugin) and with which configuration?\n. I'd vote for \"fixing\" (i. e. update Jackson) only in Dropwizard 1.0.0 and leave Dropwizard 0.9.x as it is now.\n. @vdietsch It's rather unlikely that we release another version of Dropwizard 0.9.x, but I've created a patch for this nonetheless.\nFWIW, I'd recommend migrating to Dropwizard 1.0.0 as soon as it's available which also comes with a more recent version of jDBI.\n. LGTM. \ud83d\udc4d \n. LGTM. Thanks! \ud83d\udc4d \n. > Any particular reason for upgrading to a beta version of mockito?\nMockito 2.0 has been in beta since 2014 but it's stable, so I felt we could use it in Dropwizard (it's only used for our own tests).\n. Thanks! LGTM. \ud83d\udc4d \n. Thanks!\n. @nickbabcock Yes, but that's the status quo anyway, e. g. I can choose whether I want broken builds for dropwizard-http2 on my local machine with Java 8u92 or on Travis CI with Java 8u31.\nThis change benefits only developers of Dropwizard as the only place where we use alpn-boot is in the tests for dropwizard-http2 (and dropwizard-spdy in the past).\n. Thanks! LGTM. \ud83d\udc4d \n. @nickbabcock @jplock Shouldn't we rename the corresponding configuration setting (https://github.com/nickbabcock/dropwizard/blob/bbdd2fa3a4265b88096ab6f85bcfb1df7fc037a3/dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java#L59-L61) too in this case?\n. Closed in #1570.\n. The build on Travis CI fails with (https://travis-ci.org/dropwizard/dropwizard/builds/133273498#L4421-L4423):\n\n[ERROR] /home/travis/build/dropwizard/dropwizard/dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java:[112,48] incompatible types: inferred type does not conform to upper bound(s)\n[ERROR] inferred: java.util.Map<? extends java.lang.Object,? extends java.lang.Object>\n[ERROR] upper bound(s): java.util.Map<java.lang.String,java.lang.String>,java.lang.Object\n\nAdditionally, the *WhenPresentButNull tests in GuavaOptionalValidatedValueUnwrapperTest and OptionalValidatedValueUnwrapperTest are now identical to the *WhenAbsent/*WhenEmpty tests and should be removed (they were testing Optional to do the right thing with null values instead of the value unwrapper anyway).\n. @nickbabcock I wouldn't invest too much time into making a more recent JDK usable in Travis CI and revert the offending commit instead.\nEDIT: Ah, I didn't realize the build was marked as unsuccessful because of the change in code coverage (via Coveralls).\n. LGTM. \ud83d\udc4d \n. @fedotxxl The intention of Dropwizard as a framework is to provide a single point of configuration (the configuration file) for all parts involved. Otherwise, users would have to write their own logback.xml, jetty.xml, hibernate.properties etc. files.\nIf you want to use a custom Logback appender, you will have to add it programatically.\nSince @nickbabcock mentioned an existing workaround for your use case, I'll close this issue.\n. @tdakanalis The *DataSourceFactory classes don't have access to the Environment or HealthCheckRegistry instances of a Dropwizard application.\nIf you want to automatically register health checks, create a ConfiguredBundle<T> which has access to the Environment instance via its run() method.\n. LGTM. :+1:\n. Thanks!\n. Good idea, thanks! \ud83d\udc4d \n. Thanks!\n. @situokko Could you please post a working but minimal code example of what you're trying to do?\n. @situokko Feel free to give Dropwizard 1.0.0-rc3 a try.\n. @tootedom LGTM. Thanks!\n. LGTM. Thanks!\n. @vvondra LGTM. Thanks!\n. @uttamtiwari123 Dropwizard 0.7.1 is pretty old and not supported anymore. Please try upgrading to a more recent version of Dropwizard (e. g. 0.9.2 or 1.0.0-rc3) and check if the problem persists.\nI'm closing this issue. Feel free to add comments when the problem still happens on a supported version of Dropwizard.\n. @evnm The idea was to prevent information leakage to malicious clients.\n. @Madhukar07565 Which version of Dropwizard are you using?\n. @ajlanghorn Argh, that was a typo. Thanks for spotting it!\n. Closed in favor of #1649.\n. @jain0882 Which version of Dropwizard are you using?\nCould you provide a minimal example to reproduce your problem?\n. LGTM. \ud83d\udc4d \n. @ogregoire We want to keep changes to the 1.0.0 version branch minimal now, otherwise we'll never release Dropwizard 1.0.0.\nThis change will probably be included in Dropwizard 1.1.x.\n. @darrenhaken For simple cases, you can use HK2, which is brought in by Jersey: https://gist.github.com/joschi/f706e394172988f9200b\nWhich specific problems did you have with Guice and Dagger?\n. @HunterSherms Dagger is an external dependency, HK2 comes with Dropwizard (via Jersey), to it's not that easy.\nAlso Dagger (obviously) doesn't support runtime discovery of bindings AFAIK, which can be used for implementing a plugin system.. @ramsrib Soabase is a 3rd party bundle.. @cchacin Thanks for this bug report!\nIt seems related to FasterXML/jackson-modules-base#7 which has been fixed in Jackson 2.8.0.\n@dropwizard/committers Any thoughts on updating Jackson for Dropwizard 1.0.0?\n. @jplock Unfortunately Jackson 2.8.0 changed some internals which make more changes necessary. The issue-1627 currently doesn't pass: https://travis-ci.org/dropwizard/dropwizard/builds/143862696\nNot sure if it's worth postponing the release of Dropwizard 1.0.0 for this.\n. @cowtowncoder Thank you for your feedback! Unfortunately the build still fails with Jackson 2.8.1: https://travis-ci.org/dropwizard/dropwizard/builds/146628857#L4717-L4740\nI currently don't have time left to debug this thoroughly so we'll probably wait for Jackson 2.7.6 to be released. \n. @cowtowncoder You are right, the link was wrong. The correct link with the output of the failed Travis CI job is: https://travis-ci.org/dropwizard/dropwizard/builds/146628857#L4717-L4740\n. > @joschi I think those errors are with Jackson 2.8.0. I can see other failures with 2.8.1, ones about exception messages, but not the subtype problem which I think is fixed with 2.8.1.\nPlease see #1647.\n. @victornoel Do you have a small code snippet (or ideally a complete project) to reproduce your issue?\n. @ryankennedy Good idea. Thanks!\nIs there anything we have to change in the .codeclimate.yml file or could we just merge this PR?\nDo you happen to have any reference to the PMD and Checkstyle features of Code Climate? I fail to find anything beyond https://github.com/sivakumar-kailasam/codeclimate-pmd.\n. LGTM. \ud83d\udc4d \nThanks for the effort, Ryan!\n. @ipropper Thanks!\n. @evnm Thanks!\n. @jplock \n\nI don't know what is up with travis, but this looks good to me.\n\nTravis CI updated to Java 1.8.0_101 which needs a new version of alpn-boot, see a54a061c08b082c6a939c5c287cba75b60fbee25.\n. LGTM, thanks! \ud83d\udc4d \n. LGTM. \ud83d\udc4d \nCould you please add this to the release notes, too?\n. Thanks!\n. Thanks!\n. @cgendreau If you're talking about @MultipartConfig, that's not being used by JAX-RS/Jersey/Dropwizard directly as it's for Servlets and not JAX-RS resources.\nSee https://jersey.java.net/documentation/latest/media.html#multipart for details about the Jersey Multipart feature.\n. @cgendreau You're mixing up pure Servlets (for which @MultipartConfig might work in the right environment) and JAX-RS resources.\nThere is no equivalent for @MultipartConfig in Jersey, as far as I know. You can check the Content-Length request header yourself and/or use a length limited input stream to read the request body:\n- ByteStreams#limit(\u2026)\n- BoundedInputStream\n. @cgendreau \n\nSorry for the noise, at least it makes some kind of documentation for that.\n\nAdditional documentation in form of a pull request would be welcome. \ud83d\ude09 \n. @hadi-misagh Did you find the cause of your problem?\n. @danielbcorreia Thanks!\n. @bretthoerner Thanks!\n. This seems to be a bug in Liquibase and has been reported here: https://liquibase.jira.com/browse/CORE-2772\n. I'm not convinced yet whether the proposed change is good or bad.\nAt least for existing users of Dropwizard it will be very surprising to get a 204 (No Content) response status instead of 404 (Not Found).\nFrom a semantics point of view (Java, not HTTP) and having an Optional<String>, it should return \"not found\" if the optional value isn't present and \"no content\" if the optional value is the empty string. Of course that's only one example, but I'd like to discuss more \"real world\" examples before implementing such a change.\n\nEDIT: maybe also provide a way for users to configure the writer for the old behavior\n\n\ud83d\udc4d  if we decide to implement this change.\n. @bretthoerner Could you please be a little (or a lot!) more verbose about what you want?\n. @bretthoerner True, sorry for that. \ud83d\ude09 \n@bruce-genhot Could you please be a little (or a lot!) more verbose about what you want?\n. @mrares You probably want to create that issue in the Dropwizard Metrics project.\n. @jacek99 Thank you so much for documenting this!\nWe'd love to include this into the documentation. Do you have time to create a small PR for it?\n. @jacek99 It would be great if you could include a paragraph in the dropwizard-core documentation at https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/core.rst\n. @jacek99 Yes, please just add a separate section at the end of the file.\n. @m-at-nu Thanks for your feedback!\n. @victornoel FWIW, this is described in the Jersey documentation: https://jersey.java.net/documentation/latest/test-framework.html#d0e17451\n. @jplock I think it would work if @jmoney8080 rebased his branch on release/1.0.x instead of master and force-pushed it to GitHub.\n. @ganeshcse2991 As you've already discovered, you need to merge the file from META-INF/services in your custom fat JAR.\n. @ganeshcse2991 See https://www.yunspace.com/post/dropwizard-gradle-build-with-shadowjar/ for an example.\n. @jrwiegand \n\n[ERROR] Non-resolvable import POM: Could not find artifact io.dropwizard:dropwizard-bom:pom:1.0.1-SNAPSHOT in sonatype-nexus-snapshots (http://oss.sonatype.org/content/repositories/snapshots) @ line 38, column 25\n\nIf you're trying to build a SNAPSHOT version of Dropwizard, you have to build to complete project.\n. @erikvanoosten Wouldn't this be better fitting in the https://github.com/dropwizard/metrics project?\n. @chriskessel This is most likely an incompatible dependency on your class path.\nPlease post your build definition and the list of effective (including transitive) dependencies pulled in.\n. @chriskessel This looks like an incompatibility between HK2 (used by Jersey) and Google Guice which shows by including the dropwizard-guice module.\n\nCaused by: java.lang.IllegalStateException: It appears there is no ServiceLocatorGenerator installed.\n    at com.squarespace.jersey2.guice.GuiceServiceLocatorGeneratorStub.create(GuiceServiceLocatorGeneratorStub.java:50)\n\nPlease open a bug report at https://github.com/HubSpot/dropwizard-guice/issues\n. @jplock I can maintain the Jackson BOM until it's being moved to the FasterXML organization with Jackson 2.9.x.\n. @nickbabcock It might be related to the ALPN boot stuff (for HTTP/2 support in Jetty). That's usually the culprit with new Java versions.\nSee https://www.eclipse.org/jetty/documentation/9.3.x/alpn-chapter.html#alpn-versions\n. @nickbabcock You can try adding Java 8u111 to the POM profile and use the same version of alpn-boot that worked for Java 8u102.\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-http2/pom.xml#L282-L290\n. @OverlyExcessive Which version of Dropwizard are you using?\n. @OverlyExcessive Try using LocalDateParam:\njava\n    @GET\n    @Path(\"/date\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String receiveDate(@QueryParam(\"date\") Optional<LocalDateParam> dateTimeParam) {\n        if (dateTimeParam.isPresent()) {\n            final LocalDateParam actualDateTimeParam = dateTimeParam.get();\n            LOGGER.info(\"Received a date: {}\", actualDateTimeParam);\n            return actualDateTimeParam.get().toString();\n        } else {\n            LOGGER.warn(\"No received date\");\n            return null;\n        }\n    }\n. @Tibor17 Could you please provide some examples on how your framework would need to initialize and add resources in a test?. @Tibor17 Could you please point to the specific example code?. @Tibor17 Please check out #2304 and give us feedback if that's sufficient for your needs.\nOn a side note, I'd argue that field injection is bad practice and should be replaced with constructor injection: http://olivergierke.de/2013/11/why-field-injection-is-evil/ \ud83d\ude09. > Do you also deploy SNAPSHOTs to Maven Central?\nYes, but only built from the master branch. Please check out the issue-1800 branch yourself and build a snapshot from it.. @arteam Is there a specific problem with using FindBugs right now?\nErrorprone (compile-time checks) and FindBugs (static byte-code analysis) target different bug patterns, so they're not really interchangeable.\n. @pkwarren Please also add a short note to the release notes in https://github.com/dropwizard/dropwizard/blob/release/1.0.x/docs/source/about/release-notes.rst\n. @mcummingscb Which version of Dropwizard are you using?\n. @mcummingscb Please post the complete project you're using so that we can reproduce the issue.\n. @mcummingscb Please attach the complete project you are using.\n. @mcummingscb \n\nOK, I can't easily do that, my code is not open source.\n\nSo it's not the Hello World application from the Getting Started documentation\u2026\n. @mcummingscb I'm closing this issue as it's not a problem with Dropwizard.\nMake sure to use the correct language level and JDK in your IntelliJ IDEA project (Java 8).\n. @mcummingscb Feel free to link to the discussion in the JetBrains forum or the issue in the JetBrains issue tracker, but I fail to see how this is a problem with Dropwizard.\n. @dren-dk With Dropwizard 1.1.0 around the corner (now for real), we won't release another version of Dropwizard 1.0.x.. @ClintEsteMadera You can use the standard debugging facilities of your IDE.\n\nhttps://www.jetbrains.com/help/idea/2016.2/debugging.html\nhttp://www.vogella.com/tutorials/EclipseDebugging/article.html\nhttps://maven.apache.org/components/surefire/maven-surefire-plugin/examples/debugging.html\nhttps://maven.apache.org/components/surefire/maven-failsafe-plugin/examples/debugging.html. Duplicate of #1367.\n\nA PR can reference #1367 despite it's locked, so no need to create new issues for this.. No, not in the near future.\nThis being said, HK2 is already included in Dropwizard due to Jersey.. @umcodemonkey @evnm I vote for reverting this change.\nIn a correct Dropwizard project, dropwizard-testing will only be imported in test scope and so will Mockito.\nWith the applied change of this PR, you now will always have to explicitly add a dependency to Mockito in all projects using dropwizard-test, which was pulled in automatically before.. After checking the actual code, this PR seems correct. Sorry for the noise. \ud83d\ude09 . Thanks!. @arteam Looks like Jetty and Errorprone currently cause some problems. I've removed these commits from this PR to take a look at them separately.. @arteam The build has passed now. No idea why Travis CI keeps failing from time to time.\nMaybe we should take a look at alternatives if this keeps happening.. @mattnelson We're aiming to publish the first release candidate of Dropwizard 1.1.0 within January.\nBackporting this change to Dropwizard 1.0.x will most likely not happen.. @shashankchakelam The referenced file is part of Dropwizard 1.1.0 (current master branch) and hasn't been backported to Dropwizard 1.0.x.. @jaredledvina\n\nIs this a strict limitation within Java?\n\nYes, it is. Java was designed to be platform-independent and thus doesn't support platform-specific features (like UNIX sockets) by default. There are 3rd party libraries taking care of this, though.\nI'm not aware of any syslog appender for Logback which supports UNIX sockets, so you would probably have to write one yourself.\nIn conclusion, you might just want to open a UDP socket in your syslog daemon and bind it to localhost because everything else will cause additional work.. @arteam It's failing on Travis CI. That's why I didn't create a PR from https://github.com/dropwizard/dropwizard/tree/jetty-9.4.0. \ud83d\ude09 . We might be able to leverage CloudFlare for this: \n https://blog.cloudflare.com/introducing-universal-ssl/\n https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/. This being said, I've been thinking about moving the documentation to ReadTheDocs.org, which saves us from building the Sphinx documentation for every build ourselves and provides nice features like search.\nThis could probably also be fronted by CloudFlare for HTTPS on our custom domain.. @s101d1 What's the code of UserResource? Why would you use a mock for a simple object like User?. @s101d1 This is an issue with trying to serialize mocked objects with Jackson, see https://stackoverflow.com/questions/22851462/infinite-recursion-when-serializing-objects-with-jackson-and-mockito for a possible solution.. @adrienpessu My projects running Dropwizard 1.0.5 are still working and it should actually be a drop-in replacement.\nHow did you set up your project (i. e. what's your Maven POM or Gradle build file) and which error messages do you see, specifically?. @adrienpessu \n\nEven when I add in the pom.xml the dependency :\nGroup ID: com.fasterxml.jackson.core Artifact ID: jackson-annotations Version: 2.7.0\nIt does not work.\n\nThat sounds more like an issue with your IDE and the output of mvn dependency:tree clearly shows that jackson-annotations is being pulled in.\nFWIW, it's working for me as well (using Dropwizard 1.0.5 in a basic project with IntellIJ IDEA) and for @jshort and @TheWizz, so I'll close this issue.\n. We also might want to disable the running default services (such as MongoDB or PostgreSQL) which we don't need: https://circleci.com/docs/build-image-trusty/#databases. @wbf1013 Which JRE are you using on which operating system?. @wbf1013 The crash seems to be caused by java.util.zip.ZipFile and subsequent calls in the native implementation in libzip.so.\nMake sure to upgrade your JRE to the latest supported version (which is Java 8u112 at the time of writing) and check out http://www.oracle.com/technetwork/java/javase/crashes-137240.html for details about analyzing JVM crashes.. @jplock I'd like to wait for the pull request in jnr/jnr-enxio to be merged until we merge this PR.\nAdditionally, the tests in UnixSocketConnectorFactoryTest don't have any assertions right now and should be reworked.\nBut at least the branch now builds on all of our CI systems. \ud83d\ude09 . @MadalinaPatrichi We currently don't plan to push this further.\nIf you're interested in this feature, it would be great if you could help us work out the problems with this PR.. > What are the current problems? Travis builds and no assertions in UnixSocketConnectorFactoryTest?\n@natnan Yes, pretty much the missing test coverage, the flaky tests, and some transitive dependency foobar.. I'm a bit hesitant to invest more time into this, given that it's not a stable feature in Jetty.\nhttps://github.com/eclipse/jetty.project/issues/3136#issuecomment-440957565\n\nfirst let me say that UnixSocket support in Jetty is at best experimental, at worst it is neglected and close to being ejected. We stopped working on the unix socket connector when JNR was not being maintained and our PRs to them were not being accepted.. @dropwizard/committers Anyone wants to chime in? Otherwise I'd close this PR unless it's working reliably and the UNIX socket support in Jetty becomes stable.. Closed due to experimental feature in upstream project.. @jroitgrund That's the standard behavior of JAX-RS/Jersey. The MediaType in the @Consumes annotation doesn't automatically validate the HTTP request body against that media type.\n\nI'd recommend using a proper value class with appropriate javax.validation annotations instead of an untyped String in your JAX-RS method.\nAs a workaround you can also use ObjectMapper to manually serialize/deserialize JSON from an untyped string.. @mutaherul That's because it's only available in Dropwizard 1.1.x and later.\nhttps://github.com/dropwizard/dropwizard/commits/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java. @yateam What exactly do you mean with \"get a host of the current application\"? Please elaborate and provide a use case for this.. @yateam You could use HttpConnectorFactory#getBindHost() and HttpConnectorFactory#getPort() for this or simply get the system's IP address with InetAddress.getLocalHost().getHostName();. @wuchenwang We're currently not interested in adopting any more projects into the Dropwizard core repository.\nYou might want to post to the User Mailing List or the Developer Mailing List in order to find potential maintainers for the dropwizard-views-jade project.. @manuel-hegner You can use Project Lombok with your Dropwizard project already today.\nAs for pulling in Project Lombok into Dropwizard, the answer is no.. @robertoschwald Yes, that's intentional and by design.\nUpgrade to Java 8.. @jay-genhot You have access to the Configuration object inside the Application#run method and can pass it to any other class from there.\nYou can also use HK2 for dependency injection, see https://gist.github.com/joschi/f706e394172988f9200b for an example.. @jay-genhot Make sure to initialize the static field in the Application#run method or transform it to a method parameter, so that the caller can provide the value.\nAdditionally, please move this discussion to the Dropwizard mailing list: https://groups.google.com/forum/#!forum/dropwizard-user. @aaanders Thanks for your contribution.\nFeel free to re-open the PR and we'll take a look at it.. @dropwizard/committers Should we port this to release/1.1.x?. Cherry-picked in f2a6784c8f778402a335a89372c97ec7e1bbc532.. @nmcc Dropwizard 1.0.6 is using Jetty 9.3.9.v20160517: https://github.com/dropwizard/dropwizard/blob/v1.0.6/dropwizard-bom/pom.xml#L29\nYou can see at https://github.com/eclipse/jetty.project/blob/jetty-9.3.9.v20160517/jetty-util/src/main/java/org/eclipse/jetty/util/Jetty.java#L30-L35 how the version string is being constructed.. > Is it possible to enable http2 support in dropwizard without manually setting a alpn-boot jar (using -Xbootclasspath) in the classpath?\nNo.. @victornoel Please upgrade to Dropwizard 1.1.0-rc.2 and check if it solves your problem.. @victornoel I think the problem is that Hibernate Validator (or rather javax.validation) expects the classes to follow the JavaBean conventions and a method of get() would lead to the expectation of a field named <null> (i. e. Hibernate Validator fails to find the correctly named field).\nAs a workaround, use another name than get() for your @GET methods. \ud83d\ude09 . @arteam Please update the documentation as well: https://github.com/dropwizard/dropwizard/blob/release/1.1.x/docs/source/manual/configuration.rst#metrics. Nope.. I'm closing this issue as this topic is better discussed on the mailing list: https://groups.google.com/forum/#!forum/dropwizard-user. Nope.. @evnm Thanks!. @vrolijken Which version of Dropwizard are you using?\nJust enforce using the version from dropwizard-validation and it should work. There's not much we can do about 3rd party libraries.. @qinfchen Out of curiosity, what kind of customizations are necessary for your code?. @maksymgendin Please provide a minimal project (Maven or Gradle build) to reproduce the problem.. @maksymgendin I'm unable to reproduce the issue with Dropwizard 1.2.4 and 1.3.0-rc7, so I guess it has been solved by upgrading to a newer version of Hibernate Validator.\nPlease add a comment if the problem still occurs for you with the latest stable version of Dropwizard.. @rsb5003 Try adding the missing jetty-client dependency to your build.. > For example if you upgrade to the jetty version to 9.4.2.v20170220, keeping dropwizard at 1.0.7, you'll get the below error.\nYes, because Dropwizard 1.07 is not using Jetty 9.4.2.v20170220. You have to use a compatible dependency in your project, i. e. jetty-client 9.3.9.v20160517.\nThat's not a problem with Dropwizard, it's a problem with incompatible dependencies (and that jetty-proxy didn't seem to depend on jetty-client in version 9.3.9.v20160517).. > So I guess my point in this ticket is that if you are using dropwizard 1.0.7, and the compatible jetty version 9.3.9.v20160517 functionality is broken and you can't use the ProxyServlet.Transparent class.\n@rsb5003 Have you tried adding the jersey-client dependency in the correct version, as I suggested?. @rsb5003 \n\nI have added the jetty-client dependency as you suggested (your last post said 'jersey' which I don't think you meant)\n\nCorrect, that was a typo.\nI think I've found out why it doesn't work in Dropwizard 1.0.x. The jetty-client artifact is defined in dropwizard-bom to be included in the test scope, which isn't available during runtime (or compilation of the main sources): https://github.com/dropwizard/dropwizard/blob/v1.0.7/dropwizard-bom/pom.xml#L266-L271\nTry applying the following diff to your test project:\ndiff\ndiff --git a/pom.xml b/pom.xml\nindex 38d9e8a..4be8c16 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -42,6 +42,7 @@\n             <groupId>org.eclipse.jetty</groupId>\n             <artifactId>jetty-client</artifactId>\n             <version>${jetty.version}</version>\n+            <scope>compile</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.eclipse.jetty</groupId>. Since using Dropwizard 1.1.x seems to work and a workaround is available for Dropwizard 1.0.x, we will not fix this nuisance in Dropwizard 1.0.x.. > Does this this bug cause #1990?\nNo, but I discovered the missing annotations while looking into that issue.. @mmusnjak Works for me\u2122. Check your local connection and/or use SSH to clone the repository.\n$ git clone https://github.com/dropwizard/dropwizard.git\nCloning into 'dropwizard'...\nremote: Counting objects: 123311, done.\nremote: Compressing objects: 100% (24/24), done.\nremote: Total 123311 (delta 1), reused 0 (delta 0), pack-reused 123280\nReceiving objects: 100% (123311/123311), 46.11 MiB | 5.85 MiB/s, done.\nResolving deltas: 100% (78597/78597), done.. @mmusnjak Fair enough, I can reproduce that.\nYou can also ignore the specific reason badDate if you want to keep running git-fsck in your setup: https://git-scm.com/docs/git-config#git-config-receivefsckltmsg-idgt\nFor reference:\n```\n$ git fsck --strict\nChecking object directories: 100% (256/256), done.\nerror in commit 6fbf9def0293986beb2547a671f46148a5d2faf7: badDate: invalid author/committer line - bad date\nChecking objects: 100% (123311/123311), done.\n$ git show 6fbf9def0293986beb2547a671f46148a5d2faf7\ncommit 6fbf9def0293986beb2547a671f46148a5d2faf7\nMerge: 662010f52 2b2c23d52\nAuthor: Coda Hale coda.hale@gmail.com\nDate:   Tue May 10 07:37:19 2011 -0700\nMerge pull request #3 from tommorris/patch-1\n\nadded link to example application repository from README\n\n```. See #1995.\nI'm not sure how to fix that without basically changing every following commit SHA-1 and thus tags and all.\n@dropwizard/committers Any suggestions?. @damorton Does the warning (it's not an error) message also come up if you run the Maven build on the console?\nIf not, it's an IDE \"pollution\" problem and you should check your Eclipse workspace for some rogue or manually added dependencies.. @damorton Please use the mailing list for regular questions: https://groups.google.com/forum/#!forum/dropwizard-user. @flip111 Thanks for your feedback!\n\n\nhttp://www.dropwizard.io/1.1.0/docs/getting-started.html#creating-a-configuration-class What is the purpose of this configuration class? With methods of setDefaultName it looks like a model to me, isn't this stuff suppose to go into entities?\nWhen this class is deserialized from the YAML file which yaml file? Why is it deserialized? Why are we now talking about yaml when the configuration file itself is litered with JsonProperty annotations?\n\n\nI think these questions are answered in the very first paragraph of that section:\n\nEach Dropwizard application has its own subclass of the Configuration class which specifies environment-specific parameters. These parameters are specified in a YAML configuration file which is deserialized to an instance of your application\u2019s configuration class and validated.. Nope.. @jelmerterwal Thanks for your contribution!\n\nWe try to keep the core Dropwizard project as small and lean as possible, so please create a separate project for your Weld bundle and add it to the Dropwizard Modules Directory via https://github.com/dropwizard/modules.dropwizard.io/pulls. @jelmerterwal As a side note, it would be great if you could integrate Weld with the HK2 injector used by Jersey, e. g. via https://jersey.java.net/documentation/latest/cdi.support.html#cdi.support.weld.se. @jplock Do you think it would be possible to contribute support for java.time.Period and java.time.Duration to the upstream jDBI project directly?\nThey already support other java.time classes, so adding support for Duration and Period should be possible to merge quickly.. @lightswitch05 Thanks!. @sankate Thanks! I've merged it into master with a small change.. @bastman You could take a look at https://github.com/Wikia/dropwizard-logstash-encoder as basis for your own code.. @pipiliang Thanks for your feedback!\nI'm closing this issue as the problem doesn't exist in recent Dropwizard releases.. @Jamalarm I'm unable to reproduce that.\nWith the following POM, I don't get any conflicting versions of jersey-common. Maybe it's some other dependency of your project, which pulls in the wrong version. You can check that with mvn dependency:tree.\npom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n4.0.0\n<artifactId>dropwizard-example</artifactId>\n<version>1.1.2</version>\n<groupId>io.dropwizard</groupId>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n\n    <maven.deploy.skip>true</maven.deploy.skip>\n    <maven.site.skip>true</maven.site.skip>\n    <maven.site.deploy.skip>true</maven.site.deploy.skip>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-bom</artifactId>\n            <version>${project.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-client</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-testing</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n\n```\nOutput of mvn dependency:list | grep jersey | sort\ntext\n[INFO]    io.dropwizard.metrics:metrics-jersey2:jar:3.2.2:compile\n[INFO]    io.dropwizard:dropwizard-jersey:jar:1.1.2:compile\n[INFO]    org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.core:jersey-client:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.core:jersey-common:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.ext.rx:jersey-rx-client:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.ext:jersey-metainf-services:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile\n[INFO]    org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.25.1:test\n[INFO]    org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.25.1:test. @charbonnier666 Not everyone is using LDAP and not everyone is using Active Directory.\nWhat's wrong with using a third party library to fulfill your requirements?. @charbonnier666 Feel free to add a short sentence about this to the documentation or add the relevant library to the Dropwizard 3rd Party Modules directory: http://modules.dropwizard.io/thirdparty/. @izrobin CVE-2016-3720 was a problem in jackson-dataformat-xml, not in jackson-annotations, so the OWASP dependency check is wrong about this one.\nAs for the version of jackson-annotations, it's simply the version declared in the official jackson-bom: https://github.com/FasterXML/jackson-bom/blob/jackson-bom-2.8.9/pom.xml#L25. @swagle Nope, the commit (c28ca30d400bf50a9b93209a7887a20b68a4c209) is also part of Dropwizard 1.2.0.. @msymons I think I merged this PR too soon.\nThere seem to be some problems with the Gzip filter: https://travis-ci.org/dropwizard/dropwizard/builds/259260838#L7023-L7026. @hugh-emerson An upgrade to Jackson 2.9.0 has been scheduled for Dropwizard 1.2.0, see #2057.\nThere are no plans to upgrade to Jackson 2.9.0 in Dropwizard 1.1.x.. Fixed in cefe3a9554551c847b0cc73714b0027784bc23cf\n. @debraj-manna Dropwizard 1.2.6 and 1.3.2 are both using Hibernate Validator 5.4.2.Final, which includes a fix for the referenced issue.\nhttps://github.com/hibernate/hibernate-validator/blob/5.4.2.Final/changelog.txt#L8\nhttps://github.com/dropwizard/dropwizard/blob/be9b592857e85dc50a3181b6b5efc23bdbc384d8/dropwizard-bom/pom.xml#L68-L72\nhttps://github.com/dropwizard/dropwizard/blob/f22ae5293ec400e9faafd1cf18944f5ed60b3c0e/dropwizard-bom/pom.xml#L71-L75. @usulkies See #2613.\nThere are still 3 failing tests, though. Maybe you could give some input on them in the referenced pull request. \ud83d\ude03. @jplock Yes, indeed. Thanks for keeping track! \ud83d\udc4d. > What are your suggestions in the context of test level & packaging?\nYou could write a resource test for this which triggers an exception. See http://www.dropwizard.io/1.1.4/docs/manual/testing.html#testing-resources for details.\n\nDo any other JAX-RS components in Dropwizard use javax.ws.rs.Priorities?\n\n\ud83d\ude09 \n$ grep -r @Priority */src/main/java\ndropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java:@Priority(Priorities.AUTHENTICATION)\ndropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentialAuthFilter.java:@Priority(Priorities.AUTHENTICATION)\ndropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java:@Priority(Priorities.AUTHENTICATION)\ndropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java:@Priority(Priorities.AUTHENTICATION)\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/CharsetUtf8Filter.java:@Priority(Priorities.HEADER_DECORATOR)\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RequestIdFilter.java:@Priority(Priorities.USER)\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java:@Priority(Priorities.ENTITY_CODER)\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/GZipDecoder.java:@Priority(Priorities.ENTITY_CODER)\n\nWhat happens if the change is not made?\n\nThe default priority is Priorities.USER (5000).. @tmszdmsk \n\nRegistered WebApplicationExceptionCatchingFilter has no Priority set up and in the result, filter is executed at the end of the filter chain.\n\nAnd what's the consequence of this?. Since Jersey 2.26 brings a few breaking changes which require more changes to Dropwizard and 3rd party modules like dropwizard-guice, I'd suggest scheduling the upgrade to Dropwizard 2.0.0.. @mattnelson Migrating from Jersey 2.25.1 to 2.26 is by far no minor upgrade and requires some breaking changes to Dropwizard.. @Tibor17 Yes, because it's not compatible with Jersey 2.25.1 which is being used by Dropwizard 1.3.0 and 1.2.x.. @snehaldkshah You can use the standard JVM (such as jstat or VisualVM) or operating system utilities to print the memory consumption of a Dropwizard application.. @dropwizard/committers Any strong opinions on this feature request (and the corresponding PR in #2154)?\nI'm in principle for using the correct naming for units but I'm also afraid of unintended breakage in the applications of Dropwizard users.\nIf we decide to change the semantics of SizeUnit, we should do it now or we'll have to wait for Dropwizard 3.0.0.. @nickbabcock It's more about the case which @isaki outlined in his comment:\n\nIf a program needs a 1 KiB buffer but is using the current Size.KILOBYTES this change will break that application as the buffer will be 24 bytes smaller.. @nickbabcock @jplock I've given it a try in #2686. Maybe we could merge that one for Dropwizard 2.0.0.. Closed via #2155.. @manuel-hegner Thanks for reporting this!\n\nIt looks like this is a false positive of your virus scanner. If you can spare some minutes, please contact the vendor of that software and let them know about it.. @WeJoy You have to properly create an Uber-JAR and merge service files.\nAlso see http://www.dropwizard.io/1.1.4/docs/getting-started.html#building-fat-jars\nThere's the Gradle Shadow plugin which can be used for this.. @ramsrib Please check out Dropwizard 1.3.0-rc5 and give us feedback, whether it solves your issue.. @jmarcelonunes Please describe why these changes would improve the code.\nAdditionally, your changes don't even compile.. @lvc Thanks for sharing your results with us!\nAny chance to get a similar report for all official Dropwizard artifacts? dropwizard-core only covers a tiny part of the functionality Dropwizard provides.. @lvc Awesome! Thank you so much!. > Changed junit 4 dependency from junit to junit-vintage-engine.\nUnfortunately that makes it incompatible with JUnit and would always pull in JUnit 5 and its vintage engine.\nHow about making the dependencies for JUnit 4 and 5 optional?\nhttps://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html. @AnDyXX Could you please rebase this PR on current master?. @herrphon Thanks!. Have you tried using Java 8?\nAre you 100% sure that all dependencies are from Dropwizard 1.2.0?\nWhat's the complete code of your Dropwizard application?. We only refer to released versions in the README.. @Bhavanish1 You should probably open an issue in the Dropwizard Metrics project at https://github.com/dropwizard/metrics\nBut it looks like there is no version of the Papertrail JVM profiler which runs with Java 6, so I think you're out of luck.. @scho Thanks for bringing this up!\nLooks like we forgot to release the staging repository in Sonatype OSS.\nI just did that and the release artifacts for Dropwizard 1.1.6 should soon be available.. @georgespalding We don't plan to do another Dropwizard 1.1.x release as Dropwizard 1.2.0 has already been released.. @nickbabcock There are a few warnings in the output of the Travis CI job tagged with [NullAway]:\nhttps://travis-ci.org/dropwizard/dropwizard/jobs/300616080. @LukaszP1 You probably want to post this issue in another repository: https://github.com/dropwizard/metrics. This issue was moved to dropwizard/metrics#1223\n\u27a1\ufe0f https://github-issue-mover.appspot.com/\n@LukaszP1 You still have to subscribe to the new issue.. @GautamGupta Good idea! Would you mind creating a pull request for it?. > My use case is that I have a command line application (not a server)\nYou can already have that with Command or ConfiguredCommand<T> respectively:\nhttp://www.dropwizard.io/1.2.2/docs/manual/core.html#commands. @grugna Please provide a minimal example with (vanilla) Dropwizard or file an issue in the repository for Rosetta: https://github.com/HubSpot/Rosetta. Closed in favor of HubSpot/Rosetta#50.. @FredDeschenes I'd vote for including these plugins by default because Dropwizard usually comes with \"batteries included\" for the libraries it's using itself (i. e. JodaTime and Guava).. @frederic-h Could you please provide a minimal project to reproduce the issue and describe what you'd expect Dropwizard to behave?. @mattnelson See http://www.dropwizard.io/1.2.2/docs/about/index.html\n\nhttps://groups.google.com/forum/#!forum/dropwizard-user\nhttps://groups.google.com/forum/#!forum/dropwizard-dev\n\nIf there's the need for it, we could probably create a \"write-only\" Google Group which only the maintainers can read.. @edovale Please provide a minimal project we can use to reproduce the issue.\nAlso, please post the complete output of the following Maven command:\n$ mvn dependency:tree. @edovale Please verify whether this problem still exists on Dropwizard 1.3.5 and leave a comment.\nWe'll reopen the issue if the problem still exists.. @edovale The tests are being picked up (as @nickbabcock already mentioned) and are running successfully.\nBuild output from https://api.travis-ci.org/v3/job/399178141/log.txt:\n``text\n[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ dropwizard-example ---\n[INFO] \n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.example.helloworld.JUnit5IntegrationTest\nINFO  [2018-07-02 15:48:56,351] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /\nINFO  [2018-07-02 15:48:56,365] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /\nINFO  [2018-07-02 15:48:56,369] io.dropwizard.assets.AssetsBundle: Registering AssetBundle with name: assets for path /assets/*\nINFO  [2018-07-02 15:48:56,763] org.hibernate.Version: HHH000412: Hibernate Core {5.2.15.Final}\nINFO  [2018-07-02 15:48:56,765] org.hibernate.cfg.Environment: HHH000206: hibernate.properties not found\nINFO  [2018-07-02 15:48:56,793] io.dropwizard.hibernate.SessionFactoryFactory: Entity classes: [com.example.helloworld.core.Person]\nINFO  [2018-07-02 15:48:56,887] org.hibernate.annotations.common.Version: HCANN000001: Hibernate Commons Annotations {5.0.1.Final}\nINFO  [2018-07-02 15:48:57,797] org.hibernate.dialect.Dialect: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\nINFO  [2018-07-02 15:48:58,407] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.util.Currency] overrides previous : org.hibernate.type.CurrencyType@166e516\nINFO  [2018-07-02 15:48:58,409] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.Duration] overrides previous : org.hibernate.type.DurationType@570ae820\nINFO  [2018-07-02 15:48:58,410] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.Instant] overrides previous : org.hibernate.type.InstantType@2417a963\nINFO  [2018-07-02 15:48:58,411] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.LocalDate] overrides previous : org.hibernate.type.LocalDateType@285446f0\nINFO  [2018-07-02 15:48:58,412] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.LocalDateTime] overrides previous : org.hibernate.type.LocalDateTimeType@1eac48b9\nINFO  [2018-07-02 15:48:58,413] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.LocalTime] overrides previous : org.hibernate.type.LocalTimeType@1ee7e8a4\nINFO  [2018-07-02 15:48:58,415] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.OffsetDateTime] overrides previous : org.hibernate.type.OffsetDateTimeType@7a206aa\nINFO  [2018-07-02 15:48:58,416] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.OffsetTime] overrides previous : org.hibernate.type.OffsetTimeType@dcba368\nINFO  [2018-07-02 15:48:58,417] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.time.ZonedDateTime] overrides previous : org.hibernate.type.ZonedDateTimeType@715ecbe8\nINFO  [2018-07-02 15:48:58,797] org.hibernate.hql.internal.QueryTranslatorFactoryInitiator: HHH000397: Using ASTQueryTranslatorFactory\nINFO  [2018-07-02 15:48:59,032] io.dropwizard.server.ServerFactory: Starting hello-world\n                           web-scale hello world dP for the web\n                                                 88\n  .d8888b. dP.  .dP .d8888b. 88d8b.d8b. 88d888b. 88 .d8888b.\n  88ooood88bd8'  88'  88 88'88'88 88'88 88 88ooood8\n  88.  ...  .d88b.  88.  .88 88  88  88 88.  .88 88 88.  ...\n  88888P' dP'dP 88888P8 dP  dP  dP 88Y888P' dP88888P'\n                                        88\n                                        dP\nINFO  [2018-07-02 15:48:59,224] org.eclipse.jetty.setuid.SetUIDListener: Opened application@160e2e68{HTTP/1.1,[http/1.1]}{0.0.0.0:45447}\nINFO  [2018-07-02 15:48:59,225] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@2815292a{HTTP/1.1,[http/1.1]}{0.0.0.0:35193}\nINFO  [2018-07-02 15:48:59,230] org.eclipse.jetty.server.Server: jetty-9.4.11.v20180605; built: 2018-06-05T18:24:03.829Z; git: d5fc0523cfa96bfebfbda19606cad384d772f04c; jvm 1.8.0_141-8u141-b15-3~14.04-b15\nWARN  [2018-07-02 15:49:00,154] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.PeopleResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.PeopleResource will be ignored. \nWARN  [2018-07-02 15:49:00,155] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.HelloWorldResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.HelloWorldResource will be ignored. \nWARN  [2018-07-02 15:49:00,155] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.ViewResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.ViewResource will be ignored. \nWARN  [2018-07-02 15:49:00,155] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.ProtectedResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.ProtectedResource will be ignored. \nWARN  [2018-07-02 15:49:00,156] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.FilteredResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.FilteredResource will be ignored. \nWARN  [2018-07-02 15:49:00,157] org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.PersonResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.PersonResource will be ignored. \nINFO  [2018-07-02 15:49:00,559] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nGET     /filteredhello (com.example.helloworld.resources.FilteredResource)\nGET     /hello-world (com.example.helloworld.resources.HelloWorldResource)\nPOST    /hello-world (com.example.helloworld.resources.HelloWorldResource)\nGET     /hello-world/date (com.example.helloworld.resources.HelloWorldResource)\nGET     /people (com.example.helloworld.resources.PeopleResource)\nPOST    /people (com.example.helloworld.resources.PeopleResource)\nGET     /people/{personId} (com.example.helloworld.resources.PersonResource)\nGET     /people/{personId}/view_freemarker (com.example.helloworld.resources.PersonResource)\nGET     /people/{personId}/view_mustache (com.example.helloworld.resources.PersonResource)\nGET     /protected (com.example.helloworld.resources.ProtectedResource)\nGET     /protectedadmin (com.example.helloworld.resources.ProtectedResource)\nGET     /views/iso88591.ftl (com.example.helloworld.resources.ViewResource)\nGET     /views/iso88591.mustache (com.example.helloworld.resources.ViewResource)\nGET     /views/utf8.ftl (com.example.helloworld.resources.ViewResource)\nGET     /views/utf8.mustache (com.example.helloworld.resources.ViewResource)\n\nINFO  [2018-07-02 15:49:00,571] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@4b4898c8{/,null,AVAILABLE}\nINFO  [2018-07-02 15:49:00,580] io.dropwizard.setup.AdminEnvironment: tasks = \nPOST    /tasks/echo (com.example.helloworld.tasks.EchoTask)\nPOST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)\nPOST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)\n\nINFO  [2018-07-02 15:49:00,595] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@75c5c547{/,null,AVAILABLE}\nINFO  [2018-07-02 15:49:00,615] org.eclipse.jetty.server.AbstractConnector: Started application@160e2e68{HTTP/1.1,[http/1.1]}{0.0.0.0:45447}\nINFO  [2018-07-02 15:49:00,617] org.eclipse.jetty.server.AbstractConnector: Started admin@2815292a{HTTP/1.1,[http/1.1]}{0.0.0.0:35193}\nINFO  [2018-07-02 15:49:00,618] org.eclipse.jetty.server.Server: Started @10413ms\nINFO  [2018-07-02 15:49:01,859] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT() FROM PUBLIC.DATABASECHANGELOGLOCK\nINFO  [2018-07-02 15:49:01,886] liquibase.executor.jvm.JdbcExecutor: CREATE TABLE PUBLIC.DATABASECHANGELOGLOCK (ID INT NOT NULL, LOCKED BOOLEAN NOT NULL, LOCKGRANTED TIMESTAMP, LOCKEDBY VARCHAR(255), CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID))\nINFO  [2018-07-02 15:49:01,912] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT() FROM PUBLIC.DATABASECHANGELOGLOCK\nINFO  [2018-07-02 15:49:01,921] liquibase.executor.jvm.JdbcExecutor: DELETE FROM PUBLIC.DATABASECHANGELOGLOCK\nINFO  [2018-07-02 15:49:01,925] liquibase.executor.jvm.JdbcExecutor: INSERT INTO PUBLIC.DATABASECHANGELOGLOCK (ID, LOCKED) VALUES (1, FALSE)\nINFO  [2018-07-02 15:49:01,932] liquibase.executor.jvm.JdbcExecutor: SELECT LOCKED FROM PUBLIC.DATABASECHANGELOGLOCK WHERE ID=1\nINFO  [2018-07-02 15:49:01,951] liquibase.lockservice.StandardLockService: Successfully acquired change log lock\nINFO  [2018-07-02 15:49:03,373] liquibase.changelog.StandardChangeLogHistoryService: Creating database history table with name: PUBLIC.DATABASECHANGELOG\nINFO  [2018-07-02 15:49:03,377] liquibase.executor.jvm.JdbcExecutor: CREATE TABLE PUBLIC.DATABASECHANGELOG (ID VARCHAR(255) NOT NULL, AUTHOR VARCHAR(255) NOT NULL, FILENAME VARCHAR(255) NOT NULL, DATEEXECUTED TIMESTAMP NOT NULL, ORDEREXECUTED INT NOT NULL, EXECTYPE VARCHAR(10) NOT NULL, MD5SUM VARCHAR(35), DESCRIPTION VARCHAR(255), COMMENTS VARCHAR(255), TAG VARCHAR(255), LIQUIBASE VARCHAR(20), CONTEXTS VARCHAR(255), LABELS VARCHAR(255), DEPLOYMENT_ID VARCHAR(10))\nINFO  [2018-07-02 15:49:03,395] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT() FROM PUBLIC.DATABASECHANGELOG\nINFO  [2018-07-02 15:49:03,396] liquibase.changelog.StandardChangeLogHistoryService: Reading from PUBLIC.DATABASECHANGELOG\nINFO  [2018-07-02 15:49:03,398] liquibase.executor.jvm.JdbcExecutor: SELECT * FROM PUBLIC.DATABASECHANGELOG ORDER BY DATEEXECUTED ASC, ORDEREXECUTED ASC\nINFO  [2018-07-02 15:49:03,400] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT() FROM PUBLIC.DATABASECHANGELOGLOCK\nINFO  [2018-07-02 15:49:03,415] liquibase.executor.jvm.JdbcExecutor: CREATE TABLE PUBLIC.people (id BIGINT AUTO_INCREMENT NOT NULL, fullName VARCHAR(255) NOT NULL, jobTitle VARCHAR(255), CONSTRAINT PK_PEOPLE PRIMARY KEY (id))\nINFO  [2018-07-02 15:49:03,440] liquibase.changelog.ChangeSet: Table people created\nINFO  [2018-07-02 15:49:03,442] liquibase.changelog.ChangeSet: ChangeSet migrations.xml::1::codahale ran successfully in 28ms\nINFO  [2018-07-02 15:49:03,445] liquibase.executor.jvm.JdbcExecutor: SELECT MAX(ORDEREXECUTED) FROM PUBLIC.DATABASECHANGELOG\nINFO  [2018-07-02 15:49:03,458] liquibase.executor.jvm.JdbcExecutor: INSERT INTO PUBLIC.DATABASECHANGELOG (ID, AUTHOR, FILENAME, DATEEXECUTED, ORDEREXECUTED, MD5SUM, DESCRIPTION, COMMENTS, EXECTYPE, CONTEXTS, LABELS, LIQUIBASE, DEPLOYMENT_ID) VALUES ('1', 'codahale', 'migrations.xml', NOW(), 1, '8:a466b7f04155c06f80453d6d5a36b55c', 'createTable tableName=people', '', 'EXECUTED', NULL, NULL, '3.6.1', '0546543401')\nINFO  [2018-07-02 15:49:03,465] liquibase.lockservice.StandardLockService: Successfully released change log lock\nINFO  [2018-07-02 15:49:04,294] org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: Session Metrics {\n    122910 nanoseconds spent acquiring 2 JDBC connections;\n    73096 nanoseconds spent releasing 2 JDBC connections;\n    21766662 nanoseconds spent preparing 1 JDBC statements;\n    3440121 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    5172760 nanoseconds spent executing 1 flushes (flushing a total of 1 entities and 0 collections);\n    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\n127.0.0.1 - - [02/Jul/2018:15:49:04 +0000] \"POST /people HTTP/1.1\" 200 67 \"-\" \"Jersey/2.27 (HttpUrlConnection 1.8.0_141)\" 359\nINFO  [2018-07-02 15:49:04,387] org.eclipse.jetty.server.AbstractConnector: Stopped application@160e2e68{HTTP/1.1,[http/1.1]}{0.0.0.0:0}\nINFO  [2018-07-02 15:49:04,388] org.eclipse.jetty.server.AbstractConnector: Stopped admin@2815292a{HTTP/1.1,[http/1.1]}{0.0.0.0:0}\nINFO  [2018-07-02 15:49:04,391] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@75c5c547{/,null,UNAVAILABLE}\n127.0.0.1 - - [02/Jul/2018:15:49:04 +0000] \"GET /hello-world?name=Dr.+IntegrationTest HTTP/1.1\" 200 48 \"-\" \"Jersey/2.27 (HttpUrlConnection 1.8.0_141)\" 36\nINFO  [2018-07-02 15:49:04,409] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@4b4898c8{/,null,UNAVAILABLE}\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.282 s - in com.example.helloworld.JUnit5IntegrationTest\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n```. I'm closing this PR because everything seems to be working.. I'll close the issue here because this seems to be a \"common\" error with Jasper Reports which occurs independent of the used platform.\n@Rafael-Simonelli Try adding the SLF4J Log4j bridge to your project: https://www.slf4j.org/legacy.html#log4j-over-slf4j. @phambryan We won't downgrade Dropwizard Metrics in Dropwizard 1.3.0.\nI'm afraid you'll either have to stay on Dropwizard 1.2.x for that particular project or wait until the Cassandra driver upgrades to Dropwizard Metrics 4.x (which seems to have happened for Cassandra Java Driver 4.0: https://github.com/datastax/java-driver/pull/937).. @aharin Support for HTTP PATCH has been added in JAX-RS 2.1 (JSR 370) for which Jersey 2.26 is the reference implementation.\nDropwizard 1.3 is using JAX-RS 2.0 (Jersey 2.25.x).\nRefs #2148. @aharin Thanks for the follow up!\nCould you please create a pull request for the documentation with your findings if it was unclear?. That's false positive, see jeremylong/DependencyCheck#1063.\n\nAs I can see here, no version for jersey-apache-conntector is specified.\n\nThe version is specified in the Jersey BOM.\nhttps://github.com/dropwizard/dropwizard/blob/v1.2.4/dropwizard-bom/pom.xml#L310-L317\n\nMaybe update to 2.26?\n\nThere are a few issues left until we can upgrade to Jersey 2.26. Feel free to help out with them if you need support for Jersey 2.26.\nRefs jersey/jersey#3773\nRefs #2148. @1605200517 Care to create a pull request for that?. @1605200517 Please create a proper pull request. You don't have to put the plugin into a specific Maven profile.\nhttps://help.github.com/articles/about-pull-requests/. @1605200517 Please revert the unrelated changes.. I'm closing this PR now.\nIf you're still interested in adding the OWASP plugin to Dropwizard, please provide a pull request which:\n\nbuilds without error messages (check Travis CI and CircleCI for that)\ndoesn't add new compile or build warnings\ncontains a minimum of necessary changes (i. e. no unnecessary changes in whitespace or indentation, no unnecessary version changes). @debraj-manna This is most likely caused by your transitive dependencies pulling in an incompatible version of javax.el.\n\nIf I had to guess, it's the Hadoop dependencies:\nhttps://www.google.de/search?q=javax.el.ExpressionFactory.newInstance+hadoop\nYou can try to force the correct versions by explicitly adding dependencies for javax.el:javax.el-api and org.glassfish:javax.el to your build.. @debraj-manna Unfortunately it's not possible to certainly conclude the contents of an artifact on the class path from the Maven group and artifact ID.. @1605200517 Please revert all unrelated whitespace changes and remove unused code instead of commenting it out.. @1605200517 Any news or interest in continuing with this PR?. @alex-shpak Good catch, thanks!\nI'll close this PR due to the lack of activity and the issue you've described.. > I don't like bring Mockito as a compile dependency again, but Maven/Gradle should be able to pick up a correct Mockito version for end users.\nIt's an optional dependency, so it will only be pulled in if people are using Mockito anyway.. @pkwarren Yes, Dropwizard 1.2.3 and 1.2.4 have officially been released:\n https://github.com/dropwizard/dropwizard/releases/tag/v1.2.3\n https://github.com/dropwizard/dropwizard/releases/tag/v1.2.4\nUnfortunately it looks like the documentation hasn't been updated yet. I'll take a look at it.. The documentation for Dropwizard 1.2.3 and 1.2.4 is now available online:\n http://www.dropwizard.io/1.2.3/docs/\n http://www.dropwizard.io/1.2.4/docs/. @novaterata @hheg Please provide a minimal example we can use to reproduce the issue.. @novaterata The problem seems to be the definition of the interface Repository, or more specifically the generic parameters and the byte code the Kotlin compiler generates from that.\nThe following diff \"solves\" the warning from Jersey (by making the first generic parameter K less precise):\ndiff\n--- src/main/kotlin/Repository.kt.orig  2018-06-19 18:45:51.000000000 +0200\n+++ src/main/kotlin/Repository.kt   2018-06-19 18:46:04.000000000 +0200\n@@ -1,4 +1,4 @@\n-interface Repository<in K, V> {\n+interface Repository<K, V> {\n     operator fun set(key: K, metadata: Map<String, String>, value: V)\n     operator fun get(key: K): V\n }. @novaterata I'm not sure it is a real bug and not some incompatibility between the Java and the Kotlin type systems (generics). With Jersey being a Java framework without explicit support for Kotlin, that might pose a problem.. @willp-bl You could subscribe to the Releases ATOM feed on GitHub: https://github.com/dropwizard/dropwizard/releases.atom\nCombined with a service such as https://blogtrottr.com/, you'll have the Dropwizard release announcements delivered into your mailbox. \ud83d\ude09 \nOther than that, we currently don't plan to create a dedicated announcement mailing list.. I'm closing this PR due to lack of activity.\n@llyys Please leave a comment if you want us to reopen this pull request.. @gmariotti ResourceTestRule doesn't instantiate a full Dropwizard application but only loads the given JAX-RS resource into an in-memory server which doesn't support all features and lifecycle phases of Dropwizard.. @gmariotti Yes, as of Dropwizard 1.3.0 that's the way to go.. @db-vmw Please create an issue in the Dropwizard Metrics project at https://github.com/dropwizard/metrics/issues.. @suryatej16 Thanks for the hint!\nWe've release Dropwizard 1.2.5 and 1.3.1 with the updated Jackson version.\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.2.5\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.3.1\n\nThis issue would have been detected with the following fix #2295\n\nFeel free to provide a PR which includes these checks in the build.. @nickbabcock Yes, that's exactly what it means.\n@PixxelP See https://logback.qos.ch/manual/layouts.html#formatModifiers for details about the format modifiers in the logFormat setting.. > how did you distinguish those as false positives?\n@suryatej16 From the fact that Dropwizard is not using the PHP CMS Drupal. \ud83d\ude09. You can use the sphinx-maven-plugin by @trustin to generate static HTML from your Sphinx documentation and serve it with the AssetBundle.. @black-snow Please provide some example code how you're using your custom MyConfig class.. @black-snow Please provide a complete example. For example, we don't know the implementation of FrontendTestingConfiguration.. @black-snow Humor me and provide the complete code.. @black-snow Your TestCommand class has to be parameterized with the actual configuration class, not B extends Configuration.\nSee dropwizard-issue-2357.zip for a working example (run with ./gradlew run).\n. @Sessa93 Please post your complete build file (pom.xml or build.gradle).. @Sessa93 What's the complete output of the following command?\n```\nmvn dependency:tree\n```. @Sessa93 I also see that you're using ProGuard and the Maven Shade plugin.\nMake sure that they include all necessary classes into the final artifact, also see https://maven.apache.org/plugins/maven-shade-plugin/shade-mojo.html#minimizeJar.\n. > ProGuard and Maven Shade do not exclude anything related to dropwizard/jackson\nAre you sure about that? If that was the case, the class com.fasterxml.jackson.databind.type.ReferenceType would be part of the final artifact.\nAlso take note of the version mismatch of the Jackson dependencies (direct and transitive) in your project.. > I think this is implied by the current version of dropwizard (1.3.2), correct?\nDropwizard 1.3.2 is using Jackson 2.9.5:\nhttps://github.com/dropwizard/dropwizard/blob/f22ae5293ec400e9faafd1cf18944f5ed60b3c0e/dropwizard-bom/pom.xml#L24\nI'm closing this issue, since your problem is caused by incompatible transitive dependencies. You'll have to fix that in your build.\nFWIW, the problem should go away if you start using the Dropwizard BOM:\nhttps://github.com/dropwizard/dropwizard/blob/f22ae5293ec400e9faafd1cf18944f5ed60b3c0e/dropwizard-example/pom.xml#L33-L43. @dropwizard/committers Does anyone want to invest some time into this PR to make it ready for Dropwizard 2.0.0?. @aneto-core Dropwizard is an opinionated framework which only support Jersey as a JAX-RS implementation. RESTeasy (or any other JAX-RS implementation) is not and will not be supported by Dropwizard.. @aneto-core The @Pattern annotation only works for strings, but your parameter was a number (Integer).\nPlease refer to https://docs.oracle.com/javaee/7/tutorial/bean-validation001.htm and https://docs.oracle.com/javaee/7/api/javax/validation/constraints/Pattern.html for details.. @StephenSouness @nickbabcock Would it be sufficient to check for the length of the input additionally to using it with UUID#fromString()?\nThis would solve the problem with the ignored suffixes and it's relatively cheap to check.. @clrty As you found out, the filename pattern has to ensure that there are no collisions in the date pattern for the configured number of files.\nFor reference:\n https://logback.qos.ch/manual/appenders.html#tbrpFileNamePattern\n https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\n| Letter | Date or Time Component                           | Presentation | Examples      |\n|--------|--------------------------------------------------|--------------|---------------|\n| H      | Hour in day (0-23)                               | Number       | 0             |\n| h      | Hour in am/pm (1-12)                             | Number       | 12            |. > Is there any way on how to set environment variables within the particular resource (i.e. PingResource) when performing testing?\nYou could use System Rules for that: https://stefanbirkner.github.io/system-rules/#EnvironmentVariables. @aschilling What do you think EnvironmentVariableSubstitutor is doing? What do you want to achieve?. > I would like to have in my code environment variables declared like:\nCould you provide specific examples?. I've updated the release notes in master, release/1.3.x, and release/1.2.x.\nEach version is individually linkable (and it simplified cherry-picking in release/1.2.x).. @jmoney8080 Yes, we'll cherry-pick the commit from master into release/1.3.x.. @jplock @nickbabcock I'd rather move this to Dropwizard 2.0.0 since moving to Jersey 2.27 is quite a breaking change in public classes/methods and it will affect users building applications with Dropwizard and other DI-frameworks such as Spring DI or Guice.\nIn fact, I would skip Dropwizard 1.4.0 completely if there is nothing we eagerly want to release.. > It seems there is a fix commit since 2017\nThe pull request (eclipse-ee4j/jersey#3817) hasn't been merged and we won't use a custom fork of Jersey in Dropwizard.\n. @haasted Could you push a minimal example to reproduce the issue?. @isaki-x There have been regular questions about the removal of Guava from Dropwizard on the mailing list and on GitHub, as they have (or had, since https://groups.google.com/forum/#!msg/guava-discuss/rX-QXo-67ZU/gLEvfV4CAwAJ) been breaking backward compatibility quite often.\nThat imposed problems to people using Dropwizard to implement a Spark application, for example.\nWith the removal of Guava, this use case would be easier to implement, and with Java 8, there's not too much convenience Guava brings to the table and most changes are pretty mechanical.\nI'll open a PR for discussing the removal of Guava from Dropwizard 2.x shortly.. I haven't removed support for Guava from Jackson, JDBI, and Jersey (JAX-RS) yet.\nWe could extract that into their own modules, though.. @cmckn Please provide a minimal project to reproduce the issue.. @cmckn Try using MetricRegistry#getMetrics().. @jplock Javassist 3.23.0-GA doesn't support Java 8 anymore and Javassist 3.22.0-GA doesn't support Java 11.\nWe'll either have to stop supporting Java 8 (EOL soon), not support Java 11 (released soon), or rewrite the functionality with a different library (e. g. Byte Buddy).\nI think I'll give Byte Buddy a try if I have a few minutes to spare.. The pull request is done and ready to merge from my perspective.\nThe AppVeyor build failed for unrelated reasons (address already in use in parallel tests).. @jplock We're still using Javassist in UnitOfWorkAwareProxyFactory.. @dropwizard/committers Maybe someone else could review the changes. I'm not sure that I didn't miss some side effects.. @tsundberg That's not completely correct. @Timed and @Metered can be used on the same resource method, as long as you override the name of at least one of them.\nSee also 99e307da9ced3d31dc5cc71847bfa5ca6c3ebcba.. @tsundberg Thanks for bringing attention to this issue. \ud83d\ude03. @MurahariVadapalli This seems to be a problem of Oracle and JDBI.\nTake a look at https://github.com/jdbi/jdbi/blob/v3.3.0/oracle12/src/test/java/org/jdbi/v3/oracle12/TestGetGeneratedKeysOracle.java for how they solve that problem (with a custom RowMapper).. @Tibor17 Feel free to communicate this to the Jersey development team. \ud83d\ude09\nThere's not much we can do from our side until there's a new Jersey release which addresses the issue.. @aschilling Please upgrade to Dropwizard 1.3.5 and check if the issue still exists in that version.. There are already releases for Dropwizard 1.1.x, 1.2.x, and 1.3.x addressing this issue.\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.1.8\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.2.8\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.3.5. Duplicate of #2419 . @ngton Which version of Dropwizard are you using?\nWhich version of the JVM are you running the application with?\nHave you added the necessary dependency on dropwizard-http2?\nHave you configured Jetty ALPN (if necessary on your version of the JVM)?. @ngton Please use the Dropwizard user mailing-list to continue this discussion:\nhttps://groups.google.com/forum/#!forum/dropwizard-user. @ewanmellor Thanks for your contribution!\nCould you please add some unit tests validating the change and making sure that you didn't break the previous behavior?. @ewanmellor Any updates?. @ewanmellor Thanks for bringing this issue up! This will be fixed in #2674.. @scottaj Thanks for opening this PR and sorry for the late response!\nWould it also solve your issue, if Dropwizard allowed multiple sessions in @UnitOfWork, as discussed in #2360?. @shashank-devisetty Please post the complete migrations.xml file you're using or provide a minimal project to reproduce the issue.. See #1173 and #1660.. @volphy Feel free to provide a pull request fro the upgrade.. @volphy Thanks for your contribution!\nAfter thinking a little longer about the issue, I'd prefer to remove Hamcrest from Dropwizard completely. It's only been used in tests and shouldn't \"bleed\" into the public artifacts of Dropwizard.\nAfter the removal of Hamcrest, it's completely up to the users of Dropwizard which matching library they want to use. Dropwizard itself is using AssertJ.. @oliver-steinbrecher Which details make you struggle?\nAlso feel free to use the Dropwizard user mailing list for generic questions:\nhttps://groups.google.com/forum/#!forum/dropwizard-user. > Is there any functionality in Dropwizard which can be used to assess wether the service is ready to serve external requests?\n@aschilling That's pretty much what health checks are for:\nhttps://www.dropwizard.io/1.3.5/docs/manual/core.html#health-checks. Closed via #2475.. Thanks for reporting this.\nGitHub currently doesn't support multiple CNAMEs and thus also doesn't support multiple (or wildcard) SSL certificates via GitHub Pages:\nhttps://help.github.com/articles/troubleshooting-custom-domains/#multiple-domains-in-cname-file\nFWIW, http://dropwizard.io/ already redirects to https://www.dropwizard.io:\ntext\n$ curl -I http://dropwizard.io/\nHTTP/1.1 301 Moved Permanently\nServer: GitHub.com\nDate: Sun, 02 Sep 2018 16:32:00 GMT\nContent-Type: text/html\nContent-Length: 178\nLocation: https://www.dropwizard.io/\nX-GitHub-Request-Id: C0EB:4A13:3CD02B2:4EE8200:5B8C1080. https://github.com/dropwizard/dropwizard/blob/7acede06f2df73f1db80461e44ba23708eb6bdd5/dropwizard-bom/pom.xml#L22. Thanks for your feedback.\nI'd recommend posting general feedback like this and questions about using Dropwizard to the dropwizard-user mailing list: https://groups.google.com/forum/#!forum/dropwizard-user\nFWIW, Dropwizard 2.0.x will get rid of the dependency to Guava, see #2400.. @debraj-manna Jetty 9.4.12 introduced some breaking changes and in the interest of backwards-compatibility, we won't back-port this update into Dropwizard 1.2.x or 1.3.x.. Sorry, there won't be another Dropwizard 1.2.x release. Please upgrade to Dropwizard 1.3.x.\nThis being said, Dropwizard 1.3.9 will come with Jetty 9.4.14.v20181114, see #2592.. The number of active, idle, and waiting connections are already part of the metrics of the connection pool.\nhttps://github.com/dropwizard/dropwizard/blob/7acede06f2df73f1db80461e44ba23708eb6bdd5/dropwizard-db/src/main/java/io/dropwizard/db/ManagedPooledDataSource.java#L35-L49. I've given the thing a try in #2516 with a backward-compatible change.. Refs #2513. ```text\ncurl -I https://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-assets/1.3.7/dropwizard-assets-1.3.7.pom https://repo.aven.apache.org/maven2/io/dropwizard/dropwizard-assets/1.3.7/dropwizard-assets-1.3.7.jar\nHTTP/2 200\netag: \"3f68f20a4887f1239a5c8911dfd77efb\"\ncontent-type: text/xml\nlast-modified: Wed, 03 Oct 2018 16:24:49 GMT\nx-checksum-md5: 3f68f20a4887f1239a5c8911dfd77efb\nx-checksum-sha1: 6d98fc8772a114475d7faa9aebf1699baf88ec7d\nvia: 1.1 varnish\naccept-ranges: bytes\ndate: Wed, 03 Oct 2018 17:12:42 GMT\nvia: 1.1 varnish\nage: 56\nx-served-by: cache-iad2145-IAD, cache-cdg20722-CDG\nx-cache: MISS, HIT\nx-cache-hits: 0, 1\nx-timer: S1538586763.707396,VS0,VE1\ncontent-length: 1246\nHTTP/2 200\netag: \"aa064c48803a3da118adabfe6dcd3c0a\"\ncontent-type: application/java-archive\nlast-modified: Wed, 03 Oct 2018 16:24:45 GMT\nx-checksum-md5: aa064c48803a3da118adabfe6dcd3c0a\nx-checksum-sha1: a0c5b57d4eed5487c1f4c2a864372a40a979e2ce\nvia: 1.1 varnish\naccept-ranges: bytes\ndate: Wed, 03 Oct 2018 17:12:42 GMT\nvia: 1.1 varnish\nage: 56\nx-served-by: cache-iad2133-IAD, cache-cdg20722-CDG\nx-cache: MISS, HIT\nx-cache-hits: 0, 1\nx-timer: S1538586763.745092,VS0,VE0\ncontent-length: 3898\nI've re-deployed the dropwizard-assets 1.3.7 artifacts and they should now be available on Maven Central. . The dropwizard-db 1.3.7 artifacts are now also available on Maven Central.text\ncurl -I https://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-db/1.3.7/\nHTTP/2 200\nlast-modified: Wed, 03 Oct 2018 18:06:48 GMT\netag: \"ae4cef6eb51b2978b3e5264b683a771a\"\ncontent-type: text/html\nvia: 1.1 varnish\naccept-ranges: bytes\ndate: Wed, 03 Oct 2018 18:17:23 GMT\nvia: 1.1 varnish\nage: 40\nx-served-by: cache-iad2143-IAD, cache-cdg20727-CDG\nx-cache: MISS, HIT\nx-cache-hits: 0, 1\nx-timer: S1538590644.571341,VS0,VE0\ncontent-length: 3082\n```. > In order to do that I have set up a set of ConfiguredCommands which I have exteded to do my stuff, however I expect the application to terminate once the command has ran.\nAnd it will do so, unless there's something preventing the JVM to exit.\nMaybe you could provide a minimal example to reproduce your issue?. @ansarisufiyan777 Could you provide a minimal example project which we can use to reproduce the issue?. @nitram509 Thanks!. @bobtiernay-okta Good catch, thanks!. @charbonnier666 Since 2.0.0-rc1-SNAPSHOT isn't a release version, you'll have to build the complete project and not just dropwizard-example.. @charbonnier666 Please post these kind of issues to the Dropwizard User mailing list at https://groups.google.com/forum/#!forum/dropwizard-user and describe all the steps you've performed and what the output of each step was.. @novaterata Please describe exactly what you have done and what you would expect as a result.\nIdeally, please provide a minimal example to reproduce the issue.. @dropwizard/committers Given that many people are still using Guava when building Dropwizard applications and Guava's improved focus on backward-compatibility, I'm not sure if pursuing the removal in Dropwizard 2.x is still worth it.\n\nhttps://github.com/google/guava/wiki/ReleasePolicy\nhttps://github.com/google/guava/wiki/Compatibility\n\nAny opinions?. @Tibor17 Every library is eventually breaking backward compatibility. Pretty much every single dependency of Dropwizard did backward-incompatible changes in the past, so that's not a really good argument in my opinion.\nSure, we could shade it, but following that precedent, we'd also have to shade other libraries. \ud83e\udd37\u200d\u2642\ufe0f. @reubenfirmin Please provide a minimal example to reproduce the issue and provide the exact versions of the JRE you're using.. Closing due to inactivity.. Dom4j is a transitive dependency of Hibernate ORM:\ntext\n[INFO] +- org.hibernate:hibernate-core:jar:5.3.6.Final:provided\n[INFO] |  +- javax.persistence:javax.persistence-api:jar:2.2:provided\n[INFO] |  +- org.javassist:javassist:jar:3.23.1-GA:compile\n[INFO] |  +- antlr:antlr:jar:2.7.7:provided\n[INFO] |  +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.1.1.Final:provided\n[INFO] |  +- org.jboss:jandex:jar:2.0.5.Final:provided\n[INFO] |  +- com.fasterxml:classmate:jar:1.4.0:compile\n[INFO] |  +- javax.activation:javax.activation-api:jar:1.2.0:runtime\n[INFO] |  +- dom4j:dom4j:jar:1.6.1:provided\n[INFO] |  \\- org.hibernate.common:hibernate-commons-annotations:jar:5.0.4.Final:provided. Closing this issue due to inactivity.\n@StanSvec Please test if the problem still exists in the latest version of Dropwizard 1.3.x.. Jetty and jDBI have been updated in #2592 and #2591, respectively, and will be part of Dropwizard 1.3.9.. Hi @sergioescala, thank you for your PR!\nI have a few comments and questions about it.\n\nVariable 'forceEncoding' initializer 'false' is redundant\n\nWhile that's true, the redundancy doesn't hurt and makes the default value explicit.\n\nException 'java.io.IOException' is never thrown in the method filter(ClientRequestContext context)\n\nTrue, but it's the method signature of the overridden method (ClientRequestFilter#filter(ClientRequestContext requestContext)).\n\nCreating variables for GZIP and X-GZIP in order to avoid hard coded values\n\nWhy? And why not constants (`private static final\u00b4)?\nThe literal strings make it quite easy to follow the logic and won't change, while the variables (or constants) are simply another indirection.. @nyoakaway Maybe your version of cURL (or OpenSSL) is too old, also see this StackOverflow answer when searching for the error message:\nhttps://stackoverflow.com/a/38824090\nTry using a more current version which supports TLS 1.0 or higher.. @DrMattFaulkner Feel free to give Dropwizard 2.0.0-rc1-SNAPSHOT a try and provide some feedback about it works for you.. @RohanNagar Yep, it's there:\nhttps://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/2.0.0-rc1-SNAPSHOT/. @serhiypal The more people test the SNAPSHOTs and the release candidates, the faster Dropwizard 2.0.0 will be released.. @timmolter Thanks for the feedback!. @vrolijken Thanks for reporting this!\nThe issue has already been addressed in #2591.. > @joschi, will v1.2.x branch also be updated to use Jackson 2.9.8 (and remove custom deserializers)?\nNo, please upgrade to Dropwizard 1.3.x.. @dependabot ignore this major version\nHibernate Validator 6.x is currently not compatible with the version used in Jersey.\nThis will hopefully change with Jersey 2.28 (due to release in January 2019).. @usulkies Good catch, thanks! Thankfully, it was quite simple to replace the HK2 binders with Jersey binders.\nUnfortunately, HK2 is still the only DI-implementation available for Jersey and it doesn't look like that's going to change soon. \ud83e\udd14. > Is it just IntParam and LongParam?\n@jplock Yes, it would just be these two classes, unless we also want to get rid of NonEmptyStringParam (although there's no direct replacement with pure Jersey 2.28 & Hibernate Validator 6.x).. @dependabot ignore this dependency. Thanks for opening this pull request!\n\nYet, I didn't have to ignore any test.\n\nThanks to your PR, I've found a bug with handling null values with ValueExtractor<AbstractParam<T>> classes with @UnwrapByDefault, such as ParamValueExtractor and NonEmptyStringParamValueExtractor.\nAs a matter of fact, it's the exact same problem described in Dropwizard's documentation: https://www.dropwizard.io/1.3.8/docs/manual/validation.html#optional-t-constraints \ud83e\udd26\u200d\u2642\ufe0f\nI've incorporated your changes into #2613 and will continue to groom that pull request until it's ready to merge.\nThanks again!. Thanks for reporting this!\n\nI am using v 0.8.0 and got below log:\n\nPlease upgrade to Dropwizard 1.3.8 and check if the problem still exists. If it does, we'll gladly reopen this issue.. Dropwizard has been updated to use Jackson 2.9.8 in #2591 which will be released as part of Dropwizard 1.3.9.. I don't see how either of those CVEs is related to the javax.annotation-api dependency.\n\nhttps://nvd.nist.gov/vuln/detail/CVE-2013-2566\nhttps://nvd.nist.gov/vuln/detail/CVE-2015-2808. @harpreet86 You can suppress false positives in the OWASP Dependency-Check plugin:\nhttps://jeremylong.github.io/DependencyCheck/general/suppression.html. @harpreet86 You can use the configuration used by Dropwizard in your own projects:\n\nhttps://github.com/dropwizard/dropwizard/blob/816b4d53e24c12b4355429508179593f27a379ef/suppressed-cves.xml. I've merged it into the Dropwizard 1.3.x release branch, too.\nThe change will be released with Dropwizard 1.3.9.. @jplock Upon reviewing the class hierarchy below AbstractParam<T> in Dropwizard 1.x, I think it would make sense to deprecate all of them because they can be modeled by Optional<T>.\nWhat do you think?. Thanks for reporting this!\nThe release page was fixed in #2619 (but we didn't redeploy the 1.3.8 docs).. SNAPSHOT versions should be built again as of b218e3e6e6a59a3749ac6411c93bfded91a080b8.. Checking the equality of getClass() has different semantics than using instanceof.\nFor example String.class == CharSequence.class is false, while String instanceof CharSequence is true.\nAre we sure that these changes are all correct?. @dennyac Should we close this PR as #2649 has already been merged into master?. The build on Travis CI currently fails due to too much output:\n\nThe job exceeded the maximum log length, and has been terminated.\n\nLet's see if s4u/pgpverify-maven-plugin#40 can solve the issue, once it's been merged.. Merged in 360377888471783e4f95602973e43bc77e6ea70a.. Closed via #2679.. @nickbabcock Should we add some notes on the default behaviour of Dropwizard regarding logging to the documentation at https://www.dropwizard.io/1.3.9/docs/manual/core.html#logging?. @FredDeschenes Thanks for your PR!\nPlease make sure to run the tests after your changes.. @FredDeschenes Jersey 2.26 introduced an abstraction layer for dependency injection:\nhttps://jersey.github.io/release-notes/2.26.html\nUp until now, the HK2 is the only (stable) implementation available for this abstraction. \ud83d\ude44\nWe should definitely add this to the migration guide.. > It seems add a lot of code to workaround a problem that I find to be small\nGood point. I'm also willing to change this PR so that it resembles #2154 more closely, if that's the consensus.\n\nThough I do have to wonder, if it involves a breaking change anyways, how much better is this approach?\n\nIt's not much better, but I think it makes the breaking change more obvious by using a different type and it provides at least a manual migration path if people were using the Size and SizeUnit classes in their own implementations (and not only in configuration files).. @paulkennethkent Thanks!. @dependabot rebase. Throwing an UnsupportedOperationException would be more approriate in my opinion.\n. It might be easier (or more obvious) to just set ${findbugs.skip} according to the JDK being used.\nExample: gini/dropwizard-gelf@02b0b8dc0917e513625f89a77aa7442e24a3d67c\n. I think it would make sense to also search transitive dependencies for the banned artifacts since this is what ultimately happened in case of Apache HttpClient pulling in Apache Commons Logging.\nSee searchTransitive on https://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html\n. Ah, you're right. The default value for searchTransitive is true (as of version 1.3.1, AbstractBanDependencies:47).\n. It's fine. No need to add noise to a already noisy build descriptor. :wink:\n. Code style alert. :wink:\nPlease add curly braces so that it's consistent with the code style of the rest of the project.\n. Isn't this kind of inconsistent with Environment#getJerseyServlet()?\n. I'm pondering if it made more sense to change the return type of getContainer() to Servlet.\nAlthough being a breaking change it would make it more obvious that the container class member itself is a Servlet and that the user has to cast it manually.\n. Since we'll introduce some major changes in Dropwizard 0.8.x anyway (Jersey 2, Jetty 9.1) I'd be willing to make this breaking backward compatiblity as well.\nMaybe @nicktelford, @ryankennedy, or some other more experienced maintainer wants to weigh in on this.\n. Wouldn't it make more sense to wrap the IOException into a RuntimeException and throw it?\nDepending on the frequency in which metrics are being published, this might otherwise just spam the logs. I'd prefer a fail fast approach here.\n. IMHO the method signatures of the getter and setter for the User-Agent should be kept in sync.\n. Could you please move this into setStrategiesForClient and only set the credentials provider if credentialsProvider is not null?\nWhile the latter is currently the default behaviour of Apache HttpClient, it might change in the future and we don't want to get NPEs all of a sudden. :wink:\n. Please remove this line altogether and don't just comment it out. Same goes for the comment in line 252.\n. Same here. No need to add this comment as Git will show that anyway in a diff. :wink:\n. Same here. No need to add this comment as Git will show that anyway in a diff. :wink:\n. Please use the SLF4J Logger like the rest of the Dropwizard project.\n. I think it would make more sense to create an immutable copy of the Iterable in the ViewBundle(Iterable<ViewRenderer>) constructor instead of here.\n. Using an ImmutableSet would probably also make more sense (since we don't want to accidentally use the same ViewRenderer more than once).\n. Please fix the indentation here (tabs vs. spaces).\n. This should be solved using Fail#failBecauseExceptionWasNotThrown(), Assert#fail(), or ExpectedException\n. responseStr might as well be inlined here since it's the sole use of this variable and it wasn't any less readable before.\n. This should be solved using Fail#failBecauseExceptionWasNotThrown(), Assert#fail(), or ExpectedException\n. target is already in the root .gitignore file, so it is unnecessary to add it in each submodule.\n. Duplicate import.\n. Please remove the System.out.println statements.\n. Just to make sure it really is properly imported. :wink:\n. Unneeded import.\n. Unneeded import.\n. Why has this been made a static method?\n. Why has this been made a static method?\n. We might as well use the original Google Guava implementation here: com.google.common.collect.Iterables.\n. I'm not too happy about all this mocking. Wouldn't it be possible to use a \"real\" HttpClientBuilder here?\n. Please add one more = to match the length of the new heading and we're good to go. :smile: \n. You could use @PortRange from dropwizard-validation here.\n. Many (HTTP-) proxies are using port 8080/tcp. Maybe it makes sense to use it as a default here.\n. You can use the ignoreCase parameter to get rid of the \"duplicate\" elements in this array.\n. I think it would make sense to call the other constructor to eliminate duplicate assignments which have to be maintained.\nthis(host, port, Optional.of(DEFAULT_SCHEME), Optional.absent());\n. If the default value of port was DEFAULT_PORT and its type was int you could basically get rid of this method.\n. Have you thought about using Guava's HostAndPort (which is supported by Jackson) instead of separate host and port fields?\n. If the default value of scheme was DEFAULT_SCHEME you could basically get rid of this method.\n. Thanks for spotting this! I simply forgot to change the version in dropwizard-testing as well.\n. Please use the LocalDate(Object, DateTimeZone) constructor with DateTimeZone.UTC to be consistent with DateTimeParam.\n. It might also make sense to use LocalDate#parse(String, DateTimeFormatter) instead of the constructor.\n. Makes sense. Thanks!\n. I think these imports aren't required.\n. Please also add a simple unit test for this new method and its intended result.\n. Unfortunately the Javadoc isn't correct in this case anymore. But in order to speed things up I'll merge this PR and correct the Javadoc post-hoc.\n. You could simply use ImmutableList#copyOf here.\n. Please split these 3 tests into separate test methods.\n. Due to this return statement, the following test is never executed.\n. For the sake of readability you could/should use Class#isAnnotationPresent(java.lang.Class) here.\n. This will always fail, if the previous test was executed at all.\n. Dropwizard has migrated from FEST to AssertJ. The migration should be as simple as replacing the imports referring to FEST, see http://assertj.org/assertj-core-migrating-from-fest.html\n. Please format the code of this class with your IDE and clean up the imports.\n. Please format the code of this class with your IDE and clean up the imports.\n. person could be just a variable in getPerson_success.\n. This verification will never be executed because the exception is thrown in line 53.\n. Shouldn't this be DropwizardClientRule?\n. Please don't use wildcard imports.\n. Point taken. Commit e5c960b is basically the squashed jersey-2 branch of @saadmufti and I might have overlooked the one or other style guide mishap.\n. Instead of turning this into an instance variable you could make LOGGER non-final and create a package-protected static method setLogger which is annotated with @VisibleForTesting (from Guava).\nThat way normal users won't see the \"hack\" necessary for testing the ExceptionMapper.\n. I see that this is symmetric to the implementation in Size but are these short circuits really necessary? Long#compare() will usually just do the right thing\u2122.\n. Please do not use wilcard imports.\n. Minor nitpick: This should be a local variable in each of the @Test methods. It's never used as a class field.\n. Please add at least some Javadoc for these methods, especially since their names are quite confusing at the first look (BaseResource vs. ResourceBase).\n. Which conversion? As a matter of fact just using Long#compare is more efficient as it only does 2 comparisons in the worst case than 4 (3 if conditionals and finally Long#compare) in the worst case. :wink: \nThe method could be reduced to the following implementation and still has the same behaviour:\n``` java\nif (unit == other.unit) {\n  return Long.compare(count, other.count);\n}\nreturn Long.compare(toNanoseconds(), other.toNanoseconds());\n``\n. Would you mind updating this PR with the changes you've made? Thanks!\n. Why did you capitalize \"pattern\"?\n. The trailing wildcard is automatically removed (see https://github.com/dropwizard/dropwizard/blob/v0.8.0-rc1/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java#L149-151), so this is only a visual \"helper\" so that it looks more like an URL pattern people know from the Java Servlet API.\n. Please capitalize \"Jersey\".\n. TheConfigurationSourceProvider` isn't necessarily using a file-based backend for the configuration, it could as well be some remote network location or a database, so the message might be misleading.\nMaybe change the message to \"Configuration at $path must not be empty\" to be more generic in the actual location where the configuration lives and more specific in the error message itself.\n. Doesn't this change the behavior of tests? With the current implementation it would add all those exception mappers in test runs which hadn't be there before.\nMaybe I'm overlooking something?\n. Please don't use wildcard imports.\n. I'd simply use \u00b4MoreObjects#firstNonNull(T, T)](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/MoreObjects.html#firstNonNull%28T,%20T%29) in this case. No need for thisFunction.\n. I've changed this test to just call the Rule methods before() and after() directly. No need to test JUnit itself. :wink: \n. You're completely correct. The suppression of unchecked warnings is not necessary here.\n. Whoops. Of course the actual type of the parameter should be checked. Thanks!\n. :+1:\n. I think it would be better to remove thecatchblock just let the exception propagate (the method already declares to throwException) and put thedataSource.stop()call into thefinallyblock of thetry-finallystatement.\n. For the sake of consistency the response should be built using [ErrorMessage](https://github.com/dropwizard/dropwizard/blob/v0.8.0/dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/ErrorMessage.java), even if it's just a test class.\n. I'm a little bit uncomfortable with using an exception class clearly being used only (?) internally by Jersey. Maybe we could propagate RuntimeExceptions (e. g. [HibernateException](https://docs.jboss.org/hibernate/orm/4.3/javadocs/org/hibernate/HibernateException.html)) untouched while wrapping checked exceptions in a RuntimeException with [Throwables#propagateIfPossible(java.lang.Throwable)` instead.\nExample:\njava\nif (this.session != null) {\n    try {\n        commitTransaction();\n    } catch (Exception e) {\n        rollbackTransaction();\n        Throwables.propagateIfPossible(e);\n        throw new RuntimeException(t);\n    } finally {\n        this.session.close();\n        this.session = null;\n        ManagedSessionContext.unbind(this.sessionFactory);\n    }\n}\n. :+1:\n. Good point. So we could simply catch RuntimeException instead of Exception and re-throw after we rolled back the transaction. No need to wrap it in either MappableException or RuntimeException. This should make life easier for us. :smile:\n. The original version casted every Exception to RuntimeException. Might this have caused the problem with Jersey not trying to map the specific exception with a registered exception mapper?\n. Is this change really necessary? I think named parameters are way less error-prone than mere numbered parameters in this case.\n. Minor code style nitpick: Please remove the leading space inside the parentheses, and add one after if.\n. I would also create two classes, NonEmptyString and NonBlankString in this case.\nAlthough I'm not quite sure if it's worth the effort either, especially since Jersey Bean Validations could be used for this (with @NotEmpty and @NotBlank) for non-optional parameters.\n. Superfluous period in this line.\n. Should probably read \"Returns the SQL query which is being used for the database connection health check.\".\n. In my opinion the prefix \"Abstract\" is not really a good choice for use in interfaces. Maybe \"PooledDataSourceFactory\" is more fitting in this case.\n. Why did you change the query parameter name? \"date\" was more specific than the very generic \"value\".\n. Won't this exception be thrown (and propagated!) every time invalid credentials are provided?\n. Invalid credentials should in fact never cause a AuthenticationException. That exception should only be used if the backend is unavailable and the credentials can't be verified.\n. You could use an in-memory database here.\nhttp://www.h2database.com/html/features.html#in_memory_databases\n. Should be !\"Coda\".equals(name); to prevent a NullPointerException if name was null.\n. The configuration should be changed on a copy of the object mapper. Otherwise different test methods in this class might fail (order isn't guaranteed): ObjectMapper#copy()\n. Please don't use wildcard imports.\n. I don't think that printing the configurationErrorsStream or the loggerContext is really useful here.\n. Catching Throwable instead of just Exception might be too broad here as it also catches non-recoverable errors like OutOfMemoryError.\n. We should really make that change very obvious in the release/upgrade notes for Dropwizard 0.9.0. Otherwise many people won't even realize that their resources are broken.\n. Please use Maven syntax here, so that this section is consistent with the rest of the documentation.\n. Just to make sure please use the appropriate char set (StandardCharsets.US_ASCII) here.\n. Is using StringUtils#join() really necessary here? What advantages does it have over simple string concatenation?\n. Where does R.URL_SHOPS come from and what type and value does it have?\n. What's Entity#json() exactly?\n. You could use Response#getStatusInfo() here.\n. https://maven.apache.org/pom.html#Dependencies\n. Dropwizard 0.9.x is using Jersey 2.21 now.\n. Maybe just use a placeholder like ${jersey.version} so that we don't have to update the docs for every Jersey update.\n. Please don't just comment code but remove it completely. In the end that's what a version control system like git is for. :wink:\n. Please expand that wildcard import.\n. Yes, it does. Thanks, good catch!\nAdded in ce9175f1dcf92c3d24b3367fc2eb08428f0404fa.\n. Missing space before the equals sign.\n. For the sake of completeness this should also be annotated with @JsonProperty(\"httpClient\").\n. Please don't add unnecessary whitespace changes.\n. The latest version of the maven-project-info-reports-plugin is 2.8.1.\n. Yes, I think the plugin should be updated in the scope of this PR. Saves a follow-up commit. :wink:\n. I'd prefer simply setting Maven properties (i. e. maven.javadoc.skip and findbugs.skip) so that these can still be overridden on the command line. Running mvn -Pdev -Dfindbugs.skip=false would for example skip the Javadoc generation but still run the FindBugs checks.\nThis change would also make the profile itself shorter:\nxml\n<profile>\n    <id>dev</id>\n    <properties>\n        <maven.javadoc.skip>true</maven.javadoc.skip>\n        <findbugs.skip>true</findbugs.skip>\n    </properties>\n</profile>\n. This is unnecessary as the version is already imported via dropwizard-bom.\n. Could you please fix the length of the line? Sphinx should give you related warnings.\n. Maybe switch to the alternate headings syntax of Markdown (# ${name}).\n. Why not simply use an ImmutableSortedMap in the first place?\n. Why not use TransactionStatus#canRollback() here?\n. Why not use TransactionStatus#canRollback() here?\n. Why not use TransactionStatus#canRollback() here?\n. Using the builder methods of ImmutableMap might save a keystroke or two here.\n. I'd rather wait until this dependency has also been released. I'm pretty sure it has just been forgotten/overlooked.\n. This is being called once, so I don't think that performance optimization is relevant here.\n. Surrounding the statement with try-catch doesn't gain anything. The test will fail anyway, if any uncaught exception occurs.\n. Please remove that comment.\n. Surrounding the statement with try-catch doesn't gain anything. The test will fail anyway, if any uncaught exception occurs.\n. In general I'd agree, but that argument is kind of moot in a test consisting of a single statement (and one statement for assertions).\n. Necessary because of:\n[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce) @ dropwizard-migrations ---\n[WARNING]\nDependency convergence error for org.yaml:snakeyaml:1.15 paths to dependency are:\n+-io.dropwizard:dropwizard-migrations:1.0.0-rc3-SNAPSHOT\n  +-io.dropwizard:dropwizard-db:1.0.0-rc3-SNAPSHOT\n    +-io.dropwizard:dropwizard-core:1.0.0-rc3-SNAPSHOT\n      +-io.dropwizard:dropwizard-configuration:1.0.0-rc3-SNAPSHOT\n        +-com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.7.3\n          +-org.yaml:snakeyaml:1.15\nand\n+-io.dropwizard:dropwizard-migrations:1.0.0-rc3-SNAPSHOT\n  +-org.liquibase:liquibase-core:3.5.0\n    +-org.yaml:snakeyaml:1.13\n. Probably a copy & paste error. \ud83d\ude09 \n. Why not simply use Files#readAllBytes() here?\n. You can also use StandardCharsets#UTF_8 here instead of Charset.forName().\n. This whole thing will only work on Linux (or operating systems having /proc/sys/net/core/somaxconn), right?\n. Please don't use wildcard imports.\n. You can use JUnit assumptions together with this method.\nhttps://github.com/junit-team/junit4/wiki/Assumptions-with-assume\n. I think it's fine as-is.\n. That line probably doesn't belong here. :wink:\n. Couldn't this lead to a session/memory leak?\n. \u2705 \n. @dropwizard/committers I'm still unhappy about having to change this. Any ideas?\n. Wrong import?\n. I think using 2g should be fine here. Travis CI and Circle CI allow to use 4 GB of memory per build job.. I think this override could be removed once #1882 has been merged.. Do we really want to deploy artifacts from Travis CI and Circle CI?. Wrong assertion?. Same for me here. I think this is the correct way to enable retrieving method parameters via reflection.\nReference: https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html. This (and the following lines) could be replaced by:\njava\ngetTasks().stream()\n    .map(Task::getName)\n    .sorted()\n    .forEach(output::println);. Please remove the unused imports. Then we're good to go.. Shouldn't that be logged on DEBUG or TRACE instead of INFO where it potentially spams the application logs?. Shouldn't we use javax.transaction:javax.transaction-api:1.2 here?. Please remove the @author tag (or rather the complete Javadoc comment).. Please add a test case for bad input.. What is that for?\nThrowing a NullPointerException in a getter is very bad practice.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please don't use wildcard imports but name all imports explicitly.. Please fix the indentation of this <plugin> block and add a <version> tag for the dependency-check-maven plugin.. Could you please add some examples for valid values here, e. g. \"BC\" for BouncyCastle or Conscrypt?. Are these really valid values for the SSLContextBuilder#setProvider() method?\nAnd if so, why is \"SUN\" being used in the example above?. Would it make sense to only set the provider if configuration.getProvider() wasn't null?. Thanks for the explanation! \ud83d\udc4d\nPlease add a link to https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html for a more detailed overview.. No need to introduce another property here. The OWASP dependency check plugin provides the dependency-check.skip property out of the box with the same default.\n. No need to introduce another property here. The OWASP dependency check plugin provides the failOnError and failBuildOnAnyVulnerability properties out of the box.. Do we really need all report formats here? I think HTML (default) should be sufficient.\nhttps://jeremylong.github.io/DependencyCheck/dependency-check-maven/configuration.html. That's a bit specific for the current (SNAPSHOT) version. Maybe add a comment that it is a false positive instead.. That's a bit specific for the current (SNAPSHOT) version. Maybe add a comment that it is a false positive instead.. I think it's safe to ignore CVE-2015-3378 completely and not just for this artifact.. I think it's safe to ignore CVE-2015-3379 completely and not just for this artifact.. I think it's safe to ignore CVE-2015-8862 completely and not just for this artifact.. That's a bit specific for the version of the Mustache template engine currently used by Dropwizard. Maybe add a comment that it is a false positive instead. Typo: dropwiard -> Dropwizard. Typo: dropwiard -> Dropwizard. What would happen if a user wants to override a previously set timeout for a logger or remove the timeout?\nCurrently, the logger would be reset to the initial log level by the first scheduled task anyway and the second scheduled task would restore the previously set log level.\nExample:\n\nInitial log level is \"WARN\".\nUser sends logger level \"DEBUG\" and duration P10m.\n-- 8 minutes pass --\nUser sends logger level \"DEBUG\" and duration P30m.\n-- 2 minutes pass --\nScheduled task resets log level to \"WARN\"\n-- 28 minutes pass --\nScheduled task resets log level to \"DEBUG\"\n???\nPROFIT!. It wasn't checked before. \ud83e\udd37\u200d\u2642\ufe0f. @isaki-x I'd suggest checking the full diff of AssetsBundle. \ud83d\ude09. @RohanNagar Yes, the additional command line parameters for java.xml.bind can be removed.. Unused import.. Does anyone have an idea why this doesn't seem to work on AppVeyor?\n\nhttps://ci.appveyor.com/project/arteam/dropwizard/build/1836#L10337\ntext\n[ERROR] testManyClientCalls(io.dropwizard.unixsocket.UnixSocketConnectorFactoryTest)  Time elapsed: 1.795 s  <<< ERROR!\njava.lang.UnsatisfiedLinkError: \nThe operation completed successfully.\n[ERROR] testClient(io.dropwizard.unixsocket.UnixSocketConnectorFactoryTest)  Time elapsed: 0 s  <<< ERROR!\njava.lang.UnsatisfiedLinkError: \nThe operation completed successfully.. @alex-shpak The whole point of using AppVeyor is to make sure that Dropwizard can be built on Windows. \ud83d\ude09\nFrom my understanding, the assumption in the @Before method should prevent all tests from running on Windows. But that doesn't seem to work. \ud83e\udd14\n\nhttps://static.javadoc.io/junit/junit/4.12/org/junit/Assume.html\nhttps://github.com/junit-team/junit4/wiki/assumptions-with-assume. @nickbabcock Seems to have worked. Thanks!\nhttps://ci.appveyor.com/project/arteam/dropwizard/build/1838#L8658. Could we use a stable link here, such as https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/server/ForwardedRequestCustomizer.html?. They will still work because Bundle extends ConfiguredBundle<Configuration>.\n\nThe change should be completely backwards-compatible (also see io.dropwizard.BundleTest).. Should we really be using milestone (i. e. pre-release) versions of Maven plugins?. It's Optional#isPresent() in java.util.Optional<T>, but Optional#absent() in com.google.common.base.Optional<T>. \ud83e\udd37\u200d\u2642\ufe0f. This test is failing and the issue has to be fixed.. This test is failing and the issue has to be fixed.. This test is failing and the issue has to be fixed.. Good catch, thanks!\nThis change was required for debugging Jersey-based without running into the 5 seconds timeout every time. It will be reverted before merging this PR. \ud83d\ude09. @nickbabcock Maybe we should remove these types altogether? They can be replaced by an appropriate optional type, for example OptionalInt.. JUnit 5.4.0 re-introduced the TempDirectory extension.. @nickbabcock I was playing around with different images and also could reproduce the failing builds with CircleCI's OpenJDK 8u181 image.\nThis being said, the OpenJDK 11 image seems to work, so I'd go with this one in the future.. Please add @VisibleForTesting to the field.. Use the official un-shaded one from Guava for now, please. \ud83d\ude03 . Please use JUnit 5 for writing tests. The dependency is already included in \"test\" scope for all sub-modules.. ",
    "ducquoc": "Oops, I made a small typo in the above comment. The sample Java option should be :\n-Dlogging.layout.pattern=\"%-5p [%d{yyyy-MM-dd HH:mm:ss,SSS z}] %c: %m\\n\"\n--Duc\n. Because the datetime displayed in the log files contains no timezone indicator, but it does not match the local time. In my case, the displayed yyyy-MM-dd HH:mm:ss,SSS seems to be UTC time zone all the time. I feel a bit inconvenient to remember my offset time (+7) when viewing the application's log; and some other people, at another offset (-5), feel the same too.\nThus we prefer to log in local time (with or without the timezone information), and I was assigned to do the task. Looks like ISO 8601 can support that, but I didn't manage to configure it for dropwizard so I have to extend/modify the code and rebuilt. I think it will be more flexible for dropwizard if the format pattern can be changed via config file, or via runtime options. \nIMHO the option is easier to implement compared to the YAML file, and it is also less intrusive to current codebase hence my patch went that way.\nDo we have some other way to achieve that, or am I missing something?\n. Thank you for your fix :-) \n. ",
    "jasonberanek": "I'm willing to dedicate some time to completing the ground work on the MetricsRegistry/HealthCheckRegistry case you mention above (i.e., removing dependency on static factory methods). \nAre you looking at only factoring out the static factory methods (ala Metrics.newTimer(...)) to meet this goal, or are you also looking to allow the default registries to be replaced?\n. @tc - You can find the code in com.yammer.dropwizard.config.Environment.logEndpoints() in the dropwizard-core project.\n. I've been looking into this area as well, and a few observations from my seat in the peanut gallery:\n- In terms of validation, I think it would make sense to create a ValidationMethod to verify that the HttpConfiguration includes an SslConfiguration when using the SSL connector types. Based on my tests, its not always safe to initialize a Jetty SSL connector with a default SslContextFactory (on my OS X Lion machine, Jetty attempted to find a keystore file I didn't have in my home directory). I can see utility in forcing the SslConfiguration to be explicitly set. The basic validation method could look something like this:\njava\n  @ValidationMethod(message=\"must have SslConfiguration when using SSL connection\")\n  public boolean isSslConfigured() {\n    ConnectorType type = getConnectorType();\n    return !( ssl == null && \n        ( type == ConnectorType.SOCKET_SSL || type == ConntectorType.SELECT_CHANNEL_SSL ) );\n  }\n- In terms of configuring the SslContextFactory, I think it would make sense to set those properties similar to the way other HttpConfiguration is populated in ServerFactory.createExternalConnector(). The Jetty SSL connectors do not try to use the SSL context until the connector is added to the server, so its safe to initialize the connectors with the default constructors and modify the SslContextFactory using getters and setters. You can use SslConnector.getSslContextFactory() to retrieve the context you want to modify. This pattern is the primary reason I didn't include a constructor that set SslContextFactory on the instrumented SSL connectors I added to the codahale/metrics@36f74a147ffb4dcc8a3e952378e70a0de2075f0b, though in hindsight it would make more sense to have it available.\nJust my 2 cents, for what its worth.\n. ",
    "earaya": "I've started working on Guice. Should the Guice AbstractModules be part of the environment's collection or the service's collection?\nI actually have a GuiceContainer w/ mixed Guice/Jersey lifetime management working.\n. @codahale no worries. i figured java 7 would be a tough one for you.\ni have another idea for the framework and i'm wondering if you have any interest in it:\ni've built a little abstract AsyncResource (as in a Jersey Resource) class that has an \"await\" method that allows you to suspend the request while you do some long running work (from a service that returns a future); once your long running task is complete the request is resumed and you can return your response from Jersey.\ndo you have any interest in something like this? i'm done with it, i'd just have to clean it up a bit.\n. Much simpler. I'm just using Jetty's continuation's support. The code from the developer point of view, the resource would look like:\n@Path(\"user\")\nclass UserResource {\n    public T getUsers() {\n        Future f = someServiceThatTakesALongTime.GetUsers(); // the service here would have to return a future\n        return await(f); // here's where we ask Jetty to suspend until get future returns a value\n    }\n}\nI hope that made a little bit more sense. I can email you or just submit a pull request if you want to see it.\nAlso, do you have plans to add Guice support? I could take a stab at that as well if it's not on your plate.\n. ",
    "codyaray": "+1 for using some Guice DI love. Was just thinking about this myself.\n. ",
    "tcrayford": "A side note on Heroku. Heroku will also want you to specify database urls, along with every other piece of config that your app needs (e.g. third party api keys) through environment variables (which you can read in from the command line on startup).\n. ",
    "michaelfairley": "As someone who wants this feature, that sounds perfect.\n. Perfecto. Muchas gracias.\n. That's probably for the best.\nHeroku doesn't provide any way to do this outside of the app itself. :-/\n. Continuing over at #48.\n. 13aa8ed fixes the internal connector creation problem, and c028678 handles one of the username or password being null. The code should now be completely aligned with your expectations.\n. ",
    "tahaiqbalkhan9": "But calling with argument -Ddw.server.connector.port=$PORT throws error * Incorrect type of value at: server.connector.port; is of type: String, expected: int. \nI mean how can I do type safety check while providing environment variable ?\n. ",
    "samperman": "My fork was probably out of data... I'll try to clean that up (and remove the copyright... sorry about that.)\nI can't figure out how to do what I need without replacing Json. My problem is I need to get a writer from the mapper and use that rather than using the mapper directly... so I'll need to extend the Json methods so I can replace things like:\nmapper.writeValue(output, value);\nWith something like\nObjectWriter writer = mapper.writerWithType(MyType.class);\nwriter.writeValue(output, value);\nI suppose its possible I could register custom deserializers, but my experiments there haven't been working out.\nsam\n. That sounds pretty doable... everywhere that needs it needs to call service.getJacksonModules() anyway. Maybe something like this (in AbstractService):\npublic Class getJsonEnvironmentClass() {\n    return Json.class;\n}\nI would extend that in my service class. That does seem easier.\nsam\n. sounds good.  \"getJson\"?\n. You can close this request out. I created a new one with the service method on it.\nthanks\nsam\n. ",
    "brianm": "StringTemplate > .sql\n. Strange... let me test a bit wider then to figure out WTF is going on.\n. ",
    "wolfeidau": "Hacking away on these goals now, will open a push once I get the key stuff working and we can discuss anything I get wrong.\n. So just to be clear you would like one resource for the collective noun being people, with GET (listPeople) and POST (createPerson) and one for the singular noun person for GET (getPerson).\nGET /people -> PeopleResource listPeople\nPOST /people -> PeopleResource createPerson\nGET /person/{personId} -> PersonResource getPerson\nSound good.\n. Yes I hadn't considered this in my design, thanks for pointing it out, makes perfect sense.\n. Fixed, my bad should have seen that.\n. No problem just learnt a bit more about sphinx and python.\n. Ah cheers for looking over my additions and correcting this.\n. ",
    "christophercurrie": "From personal experience I think the nicest approach is to only expose a dependency on slf4j-api. If the end user doesn't configure a backend it spits out a warning to stderr and then shuts up. Then users can make their own choice, logback, commons-logging, log4j, whatever.\n. At the end of the day I don't feel that strongly about it, so long as it's possible to use the backend that makes sense for the project at hand. That said:\n@codahale: Configuring a slf4j backend requires no code. You put the appropriate backend jar in your classpath or Maven dependencies and you're done. The impact to the end user would be to require the addition of the 'slf4j-log4j12' jar (if they wanted to stick with the currently default log4j) to the pom. If you want to continue to provide that by default, I suppose it's always possible for me to add a dependency exclusion, but I personally find that irritating to have to do. YMMV.\n@klauern: I find that I end up tweaking with logging on a per-project basis anyway, just to configure it for the messages my application is emitting. I have a standard logging configuration file that I start from, and tweak accordingly, just because the default is almost never what I want. Maybe I'm more picky about my logging than most users, so my uses cases aren't appropriate here. But yes, I'm saying that logging backend should be an explicit choice (and usually is, because folks can have strong feelings about it).\nWhere I've been burnt in the past is that Jetty has, over various versions, had burnt-in backends that have to be specially configured to be turned off, and it's typically been a pain to get right.\n. That's fair, and I admit I have not yet taken the time to play\nextensively with DropWizard to identify any specific weakness in this\narea. I'm supportive of the original request of logback as a default,\nas that's my preferred backend; I was simply interested in keeping\nthings flexible.\nOn Thu, Mar 15, 2012 at 9:36 AM, Coda Hale\nreply@reply.github.com\nwrote:\n\n@christophercurrie If there's a use case which Dropwizard's logging support doesn't handle, I'd be very interested to hear it. But Dropwizard, as a project, exists exclusively to reduce the transactional cost of introducing a new service into a production environment.\nI'd much rather figure out how to write a logging infrastructure which actually meets people's needs rather than just punting entirely and adding the cost of selecting and configuring a logging framework to the transactional costs of new services (and the divergence as teams select and configure differently to the operational costs of those services).\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/dropwizard/issues/52#issuecomment-4523438\n\n\n@('_')@\nChristopher Currie codemonkey@gmail.com\n. The Sonatype guys would probably be willing to configure a second login on the OSS Nexus server. They might even be able to configure it so it only has permissions to push snapshots. Would this be an acceptable compromise?\n. That solution would probably solve the issue as reported, and the rest of my commentary was a bit of a digression, anyway.\n. The original PR for the feature #340 mentions it as being designed to make config files more permissive. I'd be fine with it if the feature was restricted to config files. Back in the day I thought DW had different object mappers for configuration than for API serialization, perhaps that could be a compromise.\n. Ok, I've updated the change to use a static initializer.\n. The build is failing, because Maven in trying to build dropwizard-core before dropwizard-cli, which is mystifying because (a) the dependencies look correct, and (b) it doesn't reproduce for me locally. If anyone has insights as to why Maven is confused, I'd appreciate the help.\n. Thanks for pointing that out; wish there were an easy way to have Maven ignore existing cached dependencies without removing the whole repo.\n. This PR mysteriously failed the build on Java 7; I think a trivial change to trigger a rebuild would fix it. That said, while this approach allows a cli app to not depend on Jersey, the dependency on the Jetty Lifecycle means an HTTP server is still included. I'm going to reconsider the approach and come back to this idea post 0.9.\n. ",
    "klauern": "@christophercurrie I would think that's an extreme position to take.  Are you suggesting to make the user configure their logging framework of choice every time they want to create a new project?\nRight now, it's log4j, which I can settle with, but if there was something exposed that I could switch it out if I wanted to, I would be able to do that at my discretion and not impact anybody else's use of the tool.\n. I have been out of state for the better part of a month, so I just got to this.  I just wanted to say 'Thank You' for your work in this ticket.  It's appreciated. \n. Holy.  And within a minute of reporting this, the light went on to look at the alternate constructors for AssetsBundle, finding one where I set the maxCacheSize to 0, and voila, works...\nSilly me.\n. ",
    "seven-qi": "@christophercurrie  Curious about how you're dealing with the logger. The current version is hard coded to use logback, if I want to use log4j in my system, how should I do it? Thanks!\n. ",
    "BorisNaguet": "Hello,\nI know I comment a one year old issue, but I have the same problem AND this solution is not working anymore:\nAssetsBundle has no maxCacheSize property anymore.\nHave you find another way to set that?\nThanks\n. Actually, I use Eclipse, and with \"Automatic Build\", resources are systematically copied from src/main/resources to /target/classes\nI just made a test to be sure :)\nSo I thought it was some kind of cache...\nAs my webpages are 100% static, I can still use the jettyRun maven plugin on the side for dev and start both Dropwizard and this Jetty\n. Apparently it's windows specific, and it has changed since Jetty 8:\nHere's proposed solution, that I'm not able to really understand:\nhttp://stackoverflow.com/a/16235377\nIn DW config, I can set connectorType, and all the buffer'sizes but not the buffer's types.\nRegards\n. I found it - just add in your config file:\nhttp:\n      useDirectBuffers: false\nWorks perfectly now :)\n. Here's a solution on DW 0.7.1: \n- do not use the AssetBundle as you don't have access to all the details (don't worry it's a very tiny Bundle)\n- Add the AssetsServlet directly from the run method of your Application class\n- configure the mapping \n- add the desired initParameter (http://www.eclipse.org/jetty/documentation/current/troubleshooting-locked-files-on-windows.html)\n- maybe add some way to enable/disable this, as it's usefull in dev mode, but not in production\njava\nDynamic dynamic = environment.admin().addServlet(\"assets\", new AssetServlet(\"/website\", \"/admin-site/\", \"index.html\", Charsets.UTF_8));\ndynamic.addMapping(\"/admin-site/*\");\nif(devMode){\n    dynamic.setInitParameter(\"useFileMappedBuffer\", \"false\");\n}\n. As you want, we moved to an \"extra servlet in config\" solution since then.\nIn this case, the original AssetBundle is not really useful either.\n. Hello,\nWe have the same issue here, as we have an enum with a custom fromString() method. It's useful when the strings contains chars that are not allowed in java enum name for example.\nIt used to be managed by \norg.glassfish.jersey.server.internal.inject.ParamConverters$TypeFromStringEnum\nthat is included in \norg.glassfish.jersey.server.internal.inject.ParamConverters$AggregatedProvider\nAggregatedProvider is still present but is shadowed by FuzzyEnumParamConverterProvider (introduced in #1734) because @Custom providers have a higher priority.. I also noticed that all ConverterProviders are @Singleton except FuzzyEnumParamConverterProvider.\nI don't think there's a reason for that?.   Hello,\nlooks good to me. \nMy unit tests are also passing with this version.. We should also test if method is static\nModifier.isStatic(method.getModifiers())\nand the return type is the enum Type\nmethod.getReturnType() == type\nYou can also directly use \nMethod fromStringMethod = AccessController.doPrivileged(ReflectionHelper.getFromStringStringMethodPA(rawType));\nthat also manage privileges. ",
    "ilja4": "since 0.7.0 there is no useDirectBuffers option.\n. ",
    "Vadi": "OK. It is 2015 today. Any solution for this? Every time compiling when changing code in views is really killing time.\n. ",
    "rjschu": "I do this by using grunt and a few grunt tasks (grunt-watch, grunt-clean and grunt-copy) to update my assets files in the build directory. \nwhen you have grunt-watch running  all you have to do is make the changes to you assets files and then grunt will replace the files in your build directory so you can just refresh your webpage and get the changes. \nI know this isnt a solution to the issue but its a decent work around :) \n. ",
    "mv200580": "For Eclipse is good to use Filesync plugin, as it explained here http://www.onehippo.org/library/development/use-filesync-eclipse-plugin-for-faster-turn-around.html\n. ",
    "esiqveland": "Dynamic dynamic = environment.admin().addServlet(\"assets\", new AssetServlet(\"/website\", \"/admin-site/\", \"index.html\", Charsets.UTF_8));\ndynamic.addMapping(\"/admin-site/*\");\nif(devMode){\n    dynamic.setInitParameter(\"useFileMappedBuffer\", \"false\");\n}\nWorks for me in DW 0.9.\nI use this and set my js build tool to copy the bundles into ./target/classes/assets/\n. I think it's good for production use, but very annoying for developing with.\nNot sure if it should be configurable or not, but maybe DW could use an overall devmode? This has probably been discussed before though.\nOn the other hand it is part of dropwizard-assets, so it could be fine to add it to AssetBundle?\nI'm guess it is something everyone using assets in dropwizard has to deal with.\n. Did you find a way to test/resolve this?\nI have looked into this before and concluded it was jetty failing to write the error response to the socket because the client has already gone away. Didn't find a way to reproduce without using curl and thread sleep, so I didn't get much closer to fixing it.\nThis bug is really annoying as it messes up the 5xx error monitoring.. ",
    "jplock": "Should we always default this parameter to false or make AssetBundle be configurable?\n. Thanks for the tip, I'll give that a go.\n. Can this be closed now that jersey2 support has been merged as part of #706?\n. I'm working on an enhancement to this PR to adds support for multiple ranges and provides more error checking.\n. I created https://github.com/dropwizard/dropwizard/pull/889 off of this PR and added additional tests for various errors, plus support for multiple byte ranges.\n. My vote would be to upgrade to the latest.\n. Can the be closed now that #495 was merged in?\n. Looks straight forward to me.  You're just changing imports.  Assuming the tests still pass, I'd say +1.  Is FEST no longer maintained?\n. This should be fixed when #453 gets merged in\n. Is this still an issue in Dropwizard 0.8?\n. Is this the preferred way to implement filters or use environment.getApplicationContext().addFilter()?\n. Can this be closed now that https://github.com/dropwizard/dropwizard/pull/874 has been merged?\n. I'm flexible and fine with hosting this under my personal account or under the \"dropwizard\" organization too.  Just let me know what you'd like me to do as I'd like to update http://github.com/GeneralElectric/snowizard with whatever we decide.\n. Any movement on this?\n. Any additional thoughts on this?  I saw on the mailing list a decision was made regarding external modules but I'm not sure how this would fair.  In my opinion, I think it fits the Dropwizard mission of building restful services on the JVM.\n. If #666 will be merged in as well, I'd like to update this PR to reflect an additional code property in the ErrorMessage protobuf object as well.\n. Sounds good, thanks @carlo-rtr!\n. I believe that's why there was the jackson.api.version and jackson.version pom properties being separate.\n. @joschi should we close this in favor of #1221 as its the same diff?\n. I agree with @reines, please don't introduce another dependency.  The example isn't hard to follow.\n. +1\n. Any idea if this will get merged in?\n. @arteam did you want to update this for 0.9.0 or should we close this out?\n. I've got a few projects that are restricted to operating inside of an AWS VPC and need to communicate via a proxy, so I think this would be a great addition.\n. Thanks a lot for this contribution!\n. It's a convention that I try to follow in my personal code and Twitter does as well.  http://www.slideshare.net/landlessness/teach-a-dog-to-rest (slide 56 and 57) has a good overview.  Basically have code for code and message for people.\n. I've found it to be a useful convention to follow.  I obviously would like to see it merged in, but if you feel otherwise, then I'll continue returning my own error objects which include a code property in my own stuff, but I'd love to just be able to leverage Dropwizard's built in ErrorMessage class instead of doing my own thing.\n. Any additional thoughts on this?\n. Since jersey2 code was just merged in, can this now be closed?\n. I think I like this PR better than #657 one.  Definitely a cleaner approach.\n. https://github.com/dropwizard/dropwizard/pull/439 has been open for awhile doing this same thing, but your implementation seems more universal.  Can you add some tests to your implementation?  That will help the committers in terms of deciding whether to merge it or not.\n. Instead of creating a new rule, I listed my application maven module as a test dependency in my client maven module, and then launched it using the existing DropwizardAppRule and was able to leverage my client to call my service.\nIs that what this is trying to achieve?\nhttps://github.com/GeneralElectric/snowizard/blob/develop/snowizard-client/src/test/java/com/ge/snowizard/client/integration/SnowizardClientIT.java#L22\n. Has this been fixed by #1340?\n. +10000\n. Very minor comments.\n. Strange it is in master - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java#L68\nBut looks like it was removed in 0.7 - https://github.com/dropwizard/dropwizard/blob/release/0.7.x/dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java\nShould I close this PR and update the docs in 0.7 or is this something we can add back into 0.7 considering it was in 0.6?\n. Thanks!  I transferred over the repo and pushed up the first build to maven central.  I'm running into an issue pushing up the site documentation to github.\n[ERROR] Failed to execute goal com.github.github:site-maven-plugin:0.9:site (default) on project dropwizard-discovery: Error creating commit: Invalid request.\n[ERROR] \n[ERROR] Expected data to be of type \"object\"; value was: nil.\n[ERROR] Expected data to be of type \"object\"; value was: nil. (422)\n[ERROR] -> [Help 1]\nthat I'm working through, but everything else looks great.  Thanks again!\n. I believe this is addressed by https://github.com/dropwizard/dropwizard/pull/1360\nActually maybe not, #1360 is just about the reordering of the bundles and doesn't mention the commands at all.\n. Technically, if a user specifies an httpPort of 0 for a random port, I had to something like this https://github.com/dropwizard/dropwizard-discovery/blob/master/src/main/java/io/dropwizard/discovery/core/CuratorAdvertisementListener.java to actually get the listening port from jetty upon startup.\n. Closing due to lack of feedback\n. If anyone happens to run into this issue, we did add https://github.com/dropwizard/dropwizard/blob/master/dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/ServerLifecycleListener.java#L19 in https://github.com/dropwizard/dropwizard/pull/1603 to make this easier.. Would you mind submitting a pull request for this functionality?\n. I took a look at supporting this on 0.7.  I'm not even sure what it did on 0.6.x.  All it did was set a Resource as the base and then you could retrieve it from the Environment.  Can you provide an example for how you were doing it and what you have to do now in 0.7 to work around not having it?\n. Sorry I got confused by this.  There seems to be setBaseResource() and setResourceBase() which I guess means two different things.  :)  anyway, submitted a PR to add this back in.\n. Does it make sense to do this for DropwizardClientRule as well since that currently also implements TestRule?\n. Can Jersey's @Priority(Priorities.AUTHENTICATION) be used somehow to force the provider to evaluate the authentication first?  (https://jersey.java.net/nonav/documentation/latest/user-guide.html#d0e8662)\n. I personally like option 2 as I've been trying to use the @RolesAllowed annotations to handle authorization in my application which required me to implement my own SecurityContext and request filter to set request.setSecurityContext().  Then in the resources, you have to fetch the principal from the @Context SecurityContext sc.\n. Is this still an issue now that DW 0.8 has been released?\n. @joschi do you have any thoughts on merging this one in?\n. Sounds like a duplicate of #710 \n. How about updating it to set expected as:\njava\nfinal String expected = MAPPER.writeValueAsString(\n    MAPPER.readValue(fixture(\"fixtures/person.json\"), Person.class));\n. LGTM\n. What do you mean by \"confidential\"?  Do any of the new authorization-related changes in Dropwizard 0.9.x solve your issue?\n. @joschi did you want to respond to @ryankennedy before someone merges this in?\n. @joschi did you want to address @carlo-rtr 's comment and we'll add this into 0.9.0?\n. @arteam this needs to be updated for merging\n. Is this still an issue with Dropwizard 0.9.x?\n. +1\n. LGTM!\n. Yea I was thinking about that.  Let me give that a try to see how it looks.  It should be simpler.\n. @carlo-rtr I updated the PR with your suggestion\n. @carlo-rtr I'm +1 on that approach\n. Fixed in #1022 \n. Looks good to me\n. Thanks for the fix.  I'm not familiar enough with hibernate to know if this is a correct fix or not.  Is there someone else more familiar who can comment?\n. Resolved in #929 \n. LGTM\n. There's currently a post on the mailing list that describes some migration steps - https://groups.google.com/d/msg/dropwizard-user/S4K3Ayfij3g/AzMBwJekfnEJ\n. Oh sorry, you are going from 0.7 to 0.8.  What sort of errors are you seeing?  Besides updating a lot of the Jersey Client stuff and then changing all of your unit tests to use assertj (those are the big ones), what else are you experiencing?\n. Can we replace the hamcrest matchers with AssertJ assertions in ConfiguredCloseableHttpClientTest to be inline with the rest of the code?\n. @arteam my vote would be a maintenance release as we've already fixed 6 issues in that version so far (it'd be great to get #949 resolved as well if you know a fix that for that one).  I know this issue is blocking Yammer from updating https://github.com/yammer/tenacity to DW 0.8, which I'm using for a project, so I'd personally like to see us create a release sooner rather than later if possible.\n. Thanks!\n. @carlo-rtr or @joschi any thoughts on this one?\n. Relates to https://github.com/dropwizard/dropwizard/pull/943\n. I think this looks good and would like to see this change made.  Since this is a big departure from the old model, does anyone else want to chime in with an opinion on merging this in?  /cc @joschi @arteam @glennmcallister \n. To @joschi's point, what do people think about updating the dropwizard-auth pom.xml to include:\nxml\n<dependency>\n    <groupId>javax.annotation</groupId>\n    <artifactId>jsr250-api</artifactId>\n    <version>1.0</version>\n</dependency>\nto ship those annotations with Dropwizard?  My vote would be to include this in 0.9.0 as it's a large change for a patch release.  I think the @Auth annotation should remain as it provides context on whether a principal will be available in the SecurityContext at all.\n. @carlo-rtr I think it'd be a good idea to register the RolesAllowedDynamicFeature to make this work holistically across both authentication and authorization flows.  We just need to make it easy to override the SecurityContext.isUserInRole() method as that's what those annotations use to determine if a user can execute the resource method or not.  I guess in that case, authentication and authorization could become a ConfiguredBundle to provide a packaged solution.\n. @carlo-rtr should we close this in favor of #952 now?\n. I agree that we shouldn't be caching failures, I'll take a look at this.  Thanks for reporting it!\n. LGTM!  Thanks!\n. @carlo-rtr do we need to add that annotation dependency or are they available for use outside of the test scope?  Otherwise I think this looks great.  Thanks for all of your work on it!\n. My vote would be for 0.9.0 and that we should accelerate releasing 0.8.1 to address the issues that have been fixed there.  We could create a 0.8 branch to keep a place for creating additional 0.8.x fixes.\n. It's probably fine then, thanks for checking.  So do we want to merge this into master and add it to a 0.9.0 milestone?  Any other opinions?\n. This should be fixed as part of https://github.com/dropwizard/dropwizard/pull/939\n. Would you like to submit a PR correcting the documentation?\n. Can this be closed after https://github.com/dropwizard/dropwizard/commit/e4380dcfa457a75ef2e323411f4f69d8dd556f6e was merged or was there more things we wanted to do?\n. LGTM!\n. LGTM!\n. LGTM!\n. I think this sounds ok to me.   This wouldn't break anything in any of my applications for instance.\n. Do you know if this has always been the case (in DW 0.6, 0.7, etc.)?\n. @carlo-rtr, @glennmcallister, @joschi or @arteam any thoughts on this one?  If this is how the older versions worked, then technically we broke it in 0.8.x, so we should probably preserve the same functionality for now.\n. Thinking about this more, I'm -1 on this change as there'd be no way to set a value as an empty string (if that was the desired outcome).\n. @nickbabcock i think that'd be a great idea.  Thanks for doing that.\n. :+1: \n. This looks good to me.  @carlo-rtr did you want the benchmarks to focus more on benchmarking the entire system (Jetty, Jersey, etc.), or is this level of granularity ok?\n. I think this is a good first step.  I'll merge it.\n. Thanks for catching this!  I think this change looks fine to me.  Any thoughts from your side @joschi ?\n. I think this looks good.  Thanks for the contribution!\n. LGTM!  I'll let @arteam review as well.\n. Thanks!\n. Would it make sense to move https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L500 behind the registerDefaultExceptionMappers option?  I'm not sure what all would break if we didn't integrate Jackson.\n. I think this looks good, thanks for the contribution!\n. This looks good to me.  Thanks for fixing those minor issues.\n. Should we instead update the apache client in metrics and use that dependency?\n. I agree, I'm just worried about us maintaining our own version and excluding the dependency and having it possibly break things.\n. Ok I'll merge it\n. The tests are failing and I'm not sure this will work as intended.\n. instead of Param, what do you think about spelling it out as Parameter or Value instead?\n. This looks good to me\n. Do you want to add a test around this method specifically?\n. I think this looks great, thanks for the contribution and for @arteam for following up!\n. LGTM!\n. Thanks!  LGTM!\n. Relates to https://github.com/dropwizard/metrics/pull/823\n. Thanks!\n. thanks!\n. Thanks!\n. Going to close this out as the creator has moved on and #1392 has been merged.\n. LGTM!\n. Would you mind submitting a pull request to implement this improvement?\n. LGTM, I'll see if anyone else would like to review as well\n. Closing as this is related to https://github.com/dropwizard/metrics\n. LGTM!\n. So what would you like me to do with this @joschi to address the original issue as described in #947?\n. Resubmitted as https://github.com/dropwizard/dropwizard/pull/1084\n. @carlo-rtr @joschi how's this?\n. @jar349, any ideas on this one?  I know you've worked quite a lot with Fallwizard.\n. This is great, thanks for the contribution!  I've read it once already and will check it out again tomorrow.\n. LGTM, thanks\n. This looks a lot better.  Great job.\n. What happens when you put a @Valid in front of BookBean bookBean in your resource method, like:\njava\n@PATCH\n@Path(\"/books/{id}\")\n@Consumes(\"application/json\")\npublic void updateTitle(@Auth User user, @PathParam(\"id\") String bookId, @Valid BookBean bookBean) {\n}\n. Is this resolved by https://github.com/dropwizard/dropwizard/pull/1137?\n. I agree with @glennmcallister.  Preserve the current behavior (422) and use a config flag for a 400.\n. Whoops, didn't mean to close this out yet.  That may break all of our google links and whatnot, but generally seems like a good path forward.\n. Is this related to https://github.com/dropwizard/dropwizard/pull/633 or different?\n. LGTM!\n. I think this is good.  ResourceTestRule should work out of the box with the default configuration.  I think if a user uses registerDefaultExceptionMappers, then they should also be expected to update ResourceTestRule in their tests accordingly.\n. Thanks!\n. This LGTM, any feedback @arteam ?\n. @velocipedist correct, we already cut 0.9.0-rc1, so ideally this would make it into rc2\n. Unfortunately the metrics releases are a bit out of our hands.  @ryantenney has been working on a roadmap for v4.x but I don't have any visibility into its release schedule.  It may be best to work around it manually for now if you have a workaround.  We're hoping to get Dropwizard 0.9.0 out in July.  /cc @carlo-rtr \n. @arteam I'm fine with releasing 0.8.2 with those two fixes (and any other bugs we want to address), and save everything else for 0.9.0\n. This looks good to me.  As an aside, do we want to link to the actual PR's or issues in the release notes so people can reference them?\n. Can this be closed in favor of #1330 ?\n. Awesome!\n. Instead of logging, could we have a task endpoint that could just dump the currently running config (with the proper security controls in place)?  Maybe only allow the endpoint to be called from localhost or something as well.\n. Does this allow the authorizer to be optional?\n. Is that what we want since basically right now we don't have an authorizer? Would it make sense to have a default one that always allows access?\n. Sounds good.  I think this PR is a good cleanup anyway.  Thanks!\n. This looks great.  One question, if a user wants to use an Authenticator but has no intention of doing anything related to authorization, is @PermitAll still required on the resources?\n. Maybe a better question is, if you don't register an authorizer, is there anyway we can assume that all of the resource methods have @PermitAll?  That would provide a clear upgrade path for anyone pre-0.9 who is just using an authenticator.\n. LGTM!, waiting for Travis to finish\n. It says it supports their new container-based architecture (http://docs.travis-ci.com/user/workers/container-based-infrastructure/), which I think we're using:\nThis job is running on container-based infrastructure, which does not allow use of 'sudo', setuid and setguid executables.\nIf you require sudo, add 'sudo: required' to your .travis.yml\nSee http://docs.travis-ci.com/user/workers/container-based-infrastructure/ for details.\n. I'm doing this on a personal project and it seems to be using the cache.  I honestly have no idea, but it seems to be working even though I'm not paying for it.  :)\n. I think we just need to watch it in a future PR to see if it's being used.  Carlo's most recent PR didn't download anything due to the cache so it has to be showing some improvement. \n. Can't merge this\n. My guess is you aren't supporting this application any longer, but I'll ask anyway if the changes in https://github.com/dropwizard/dropwizard/pull/1361 help resolve this?\n. Is this still an issue in the current 1.0.0 code now that we've integrated dropwizard-java8 into the core?  The usage of Joda Time is now optional.\n. I'm going to close this out for now.\n. Is this still an issue or would you mind submitting a pull request to implement this functionality if its supported by Logback?\n. Do we still need to introduce a configuration option for this or does Jetty 9.3.x fix this?\n. LGTM, thanks!\n. I like this as I tend to do this using custom exception mappers myself, but I'm slightly worried about breaking backward compatibility.\n. @dropwizard/committers does anyone have any feedback on this one?\n. Sorry one last thing, can you please use 4 spaces for indentation instead of tabs?  It looks like tabs in the PR.\n. Is there anyway to provide a test for this so its not broken in the future?\n. My recommendation would be to keep this PR focused on fixing the path logging issue and if we want to change around the output format, do that in another PR targeted for a future release.\n. Good catch!  Thanks.\n. Merge conflicts\n. Thanks!\n. LGTM!\n. @arteam do you want to get this into 0.9 as soon as @brentryan makes the requested changes?\n. @dropwizard/committers this seems like a good fix to include in 0.9 before we tag the final release?  Any objections?\n. This looks good, but can you fix the tests?\n. I think this looks great.  Thanks for the contribution!\n. Thanks!\n. @nickbabcock has any of your validator improvement changes done anything to handle this issue?  Can we close this out?\n. This looks good to me, thanks for the contribution!\n. Closing as #1361 was merged\n. This looks great!  Thanks for all the hard work\n. Do we want this in 0.9 or 1.0?  thoughts @dropwizard/committers ?\n. @arteam very true, and I agree.  We should hold this until 1.0.  Should we create a release/0.9.x branch to prep the final 0.9.0 release so we can merge this into master and start an rc process for 1.0?\n. @dropwizard/committers should we merge this in for 1.0.0 now?  I'm thinking so.\n. Looks good, thanks!\n. Closing due to lack of feedback\n. No feedback, closing\n. LGTM!\n. Looks good to me\n. Does anyone @dropwizard/committers know why we weren't logging these errors to begin with?\n. Is there any benefit to only logging server errors or should we just log every exception?\n. This looks good to me if you'd like to merge it in.  Thanks for the contribution @maffe \n. Should this be in 0.9.0 or 1.0.0?  (related, we really need to release 0.9.0 if there aren't any show stoppers)\n. Can you provide an example of this so we can add it to the documentation?\n. I noticed that there is a jersey-bom in maven central?  Would it make any sense to use that in this bom file?\n. Is this still an issue?  Do we need to clarify the documentation or is there a code change required to support this functionality?\n. Thanks for the contribution!\n. Thanks!\n. I could go either way on this. I agree with @arteam that his approach in #1304 is more isolated at this time for 0.9.0.  We could revisit this PR in 1.0.0 as a more generic implementation.\n. We should get this into release/0.9.x as well for a 0.9.1 release I think.\n. I think we should also get this into release/0.9.x\n. I'm not 100% up to speed on the validator changes, but is this in any way related to the work you did in #1251?  I agree that seeing BaseValidator.newConfiguration().buildValidatorFactory().getValidator(); everywhere doesn't feel very DRY and wonder if there is a better way.\n. Per https://github.com/dropwizard/dropwizard/pull/1162, does it work if you add the @PermitAll annotation to the resource method?\n. Fixed by #1392 \n. LGTM!\n. @joschi will you also merge this into master?\n. I tend to agree.  This would set a bad precedent and then we'd have to start supporting more use-cases for deploying Dropwizard within a container.\n. @dropwizard/committers should we also get this merged in now? It'd be nice to start prepping 1.0.0 release candidates as we'll want to make sure its heavily tested.\n. I'm not entirely sure what we would need to do to resolve this.  This seems like an internal Jackson issue if it is indeed an issue.\n. I think this is a good idea and I don't know if someone would be relying on this or whatnot, so it should be fine to break BC in 1.0.0\n. What needs to be done to have JerseyClient support HTTP/2?  Is it just a matter of waiting until its been upgraded?\nThis is great work by the way.  I've been following https://github.com/grpc/grpc-java for awhile and I'm excited about having HTTP/2 support in Dropwizard.\n. Yea, I agree using the Jetty Http2Client is the best choice for now.  Thanks!\n. @arteam was there anything else you'd like to add to this, otherwise I think its ready for merging?  Any other feedback @dropwizard/committers?  This is great.  Glad to see this get into 1.0.\n. @arteam did you want to comment on @nickbabcock's comment above regarding supportedCipherSuites?  Otherwise, we should get this merged in. :+1: \n. LGTM!  Thanks!\n. Thanks for the contribution.  I don't see any issues with this PR.\n. Sounds great, thanks!\n. Do you want to update the release notes as well?\n. Personally I don't have any way to test this change even though there's been a lot of chatter about it.  Does anyone else have a way to validate this and/or merge it in?\n. @harshil07, @paukiatwee, @dotCipher, @yiweig, @vvondra can anyone confirm if this PR resolves your issue?\n. Excellent!  Thank you for confirming @paukiatwee.\n. @arteam are you going to cherry pick this into master as well for 1.0.0?\n. +1 from me\n. This looks good to me, thanks for all the work in integrating this!  Any other feedback @dropwizard/committers ?\n. @arteam do we need to mention anything about the dev profile you added in https://github.com/dropwizard/dropwizard/pull/1364 in these docs?\n. We also have the example app, so I don't think we have to go too in-depth in the archetype.\n. @jansoren I think adding a section into the Getting Started (https://github.com/dropwizard/dropwizard/blob/master/docs/source/getting-started.rst) is a great idea.\n. Instead of changing the default (as users may be relying on that), would you mind submitting a pull request to clarify the values in the documentation?\n. I think your use-case only applies if you are creating another request from inside an existing resource.  So that's the main point of clarification I think.\n. LGTM, thanks!\n. @joschi what do you think?\n. I submitted https://github.com/dropwizard/dropwizard/pull/1445 to address this\n. I'm not sure I agree with this approach, at least not for 1.0.  Maybe in a future release once the internal libraries improve support, but right now, this would break the upgrade path for a lot of users.\n. I agree on the semver-aspects of doing this breaking change now and you are correct in that we need some time period of marking all of the Joda and Guava classes as @Deprecated to give users a chance to migrate.  We're about to create 0.9.2 and we could do a follow-on release of 0.9.3 which includes a JDK bump to 1.8 and deprecates all of the Joda and Guava classes.  I'm not sure what other @dropwizard/committers think about this strategy.\n. Does https://github.com/dropwizard/dropwizard/pull/1415 address this?\n. That sounds great, would you mind submitting a pull request on the pages that need clarifying?\n. This seems like an internal liquibase issue instead of with Dropwizard.\n. I submitted https://github.com/dropwizard/dropwizard/pull/1446 to address this\n. Can the tasks be broken out into a separate PR? I think that is useful, but I'm personally not sure I'd want to support any type of configuration hierarchy as it makes debugging less explicit and error prone. \n. @nickbabcock great idea on the module. +1 on that. \n. LGTM!\n. Personally I like the *Param classes as they provide a standard interface for converting a string into something else (I've used them to parse comma-separated parameters into a Set<Integer> for example).  My apologies for merging this so quickly if this is now indeed broken, but I'd like the functionality to remain.\n. LGTM!\n. This doesn't sound too complicated to me.  Would you mind submitting a pull request with your changes?\n. That sounds great\n. Per @arteam's comment about maintaining separate logging implementations, does it make sense to deprecate the SLF4J logging implementation completely in favor of only supporting logback-access (I don't know what this entails as I've never used logback-access).  Would it be possible to summarize what users will be able to do with this new implementation that was previously not supported?\nOne of the key things that I enjoy about Dropwizard is that it's opinionated in the way of following best practices.  I'm not saying we shouldn't introduce integration points so users can extend default functionality how they see fit, but for central core features (like logging), I'd prefer to see Dropwizard ship with a recommended approach.\nIn any case, I know logging has been a hot topic on the forums and issues list, so clearly there is some value in rethinking our default implementation.\n. @ghenkes can you handle the removal of slf4j in a separate PR?\n. @ghenkes yes that's correct.  We'll leave SLF4J in place in this PR and remove it in a later PR.\n. I'm not really a fan of introducing a separate dropwizard-request-logging module for this.  Could the classes in there be combined with dropwizard-logging instead and switch the package to io.dropwizard.logging.request?  Does that make sense @arteam?\n. @arteam that's a good point.   Thanks.\n. Closing as #1418 was merged\n. Oh whoops, sorry about that.\n. Ok, I think this can be closed now that #1421 has been merged.  :)\n. Looks good to me!  Thanks!\n. This looks good to me, thanks!\n. Thanks!\n. Thanks, I guess I'm a little confused under what scenario secure will be true in this case?\n. Thanks!\n. I think this is a good improvement.  Thanks for the contribution!  Just left some minor comments.\n. Sorry, one more minor change, would you mind updating https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst with a note about this new functionality and reference to this PR?\n. Looks great, thanks for contributing!\n. This looks good.  Thank you for your contribution!\n. Are you trying to deserialize your Record object with Jackson? Have you tried a Dropwizard 1.0.0 snapshot which supports Java8 natively?\n. Thanks for the contribution!\n. Are you interested in addInterceptorFirst and addInterceptorLast or setHttpProcessor?\n. Ok cool.  I'd love to see a dropwizard-zipkin bundle or something.  I found https://github.com/rojanu/dropwizard-brave which looks like it hooks into Jersey.\n. This is going to be difficult to implement without exposing a lot more of the internals of Apache's HttpClientBuilder into Dropwizard's.  If you'd like this functionality, could you please submit a pull request?  My main worry is we end up duplicating a lot of the options from Apache's builder into the Dropwizard builder and maintenance will be difficult.\n. I'd start with forking this project in github and review https://github.com/dropwizard/dropwizard/blob/master/CONTRIBUTING.md.  Once your code is ready, feel free to submit a pull request against your fork/branch which we can review.\n. Completely forgot about this issue.  For anyone that ends up here, I'm maintaining https://github.com/smoketurner/dropwizard-zipkin now if people are interested in hooking into Zipkin.. @evnm I thought about that, but then I saw that DropwizardTestSupport exposes them both this way anyway so I figured it'd be ok.\n. How should this work with invalid values? Throw an exception or just be empty?\n. Thanks @joschi!  Do you think we need equivalent Optional{Int,Long,Double}MessageBodyWriter and Optional{Int,Long,Double}ParamConverterProvider?  I know that's not directly related to fixing #1447 but then you could use those as query parameters as well.\n. I think we should ship with a JSON logger out of the box as this is definitely becoming more common with tools like the ELK stack.  Any thoughts @ghenkes on how best to implement one and address @jamisonhyatt's concerns? /cc @dropwizard/committers \n. I believe they are equivalent, even though we've gone back and forth on this topic a lot.  :)\n. Mind submitting a pull request to resolve this?\n. Mind submitting a pull request to clean it up?\n. Looks ok to me, but I personally don't have much experience with Hibernate.  Would any of the other @dropwizard/committers mind reviewing?\n. Thanks!\n. -1 from me.  I think it's making the configuration process too complex if it is used.\n. Looks great! Thanks for the contribution. \n. No reason I can think of. Please submit a PR and we'll gladly review. Thanks!\n. I think we need a setter in the DataSourceFactory. Otherwise looks good. Is this enabled or disabled by default today?\n. Do you also need to add it when the pool is built?\n. Thanks!\n. I'll work on submitting a PR for this unless someone else beats me to it.\n. This is great, thank you!  Any feedback from @dropwizard/committers about this?  This may break some things, but probably worthwhile to get into 1.0.0-rc2.\n. True, I don't know if we've settled one way or the other about Guava or not, but I don't see that being removed as a dependency any time soon.  Thanks!\n. Thanks!\n. Thanks for the contribution!\n. Yes please! That'd be great. Thanks\n. Looks good to me, thanks!\n. Thanks for this. I think a default interface method makes sense. \n. Looks good to me.  Any other @dropwizard/committers want to offer any feedback?\n. Thanks!\n. @nickbabcock thanks for catching the documentation issue.  To answer your questions, I honestly have no idea.  I personally don't use any of the views functionality so I'll have to play around with the various scenarios you described to see how this impacts things.  @lennartkoopmann's recommendation made sense to me and I couldn't see a reason why we'd want to log a missing template at the debug level.\n. Agreed. -1 one from me. Thank you for using dropwizard though. \n. If there are method visibility scope changes or new interfaces to be created which would make it easier to do something like this in a module, please let us know.\n. Good call. Let's see where that can go. \n. Is there any harm in merging this pull request and then refactoring whenever we can upgrade the metrics library?\n. thanks!\n. Seems good to me and doesn't break backward compatibility :+1: \n. Thanks!\n. Makes sense to me \ud83d\udc4d \n. @nickbabcock I don't even use the reporters, so I'm not exactly sure the best way to do this.  I did notice that we define the graphite reporter in the config file at https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/example.yml#L94 but then to @postwait's point, nothing was starting it.\n. @nickbabcock i went ahead and fixed the example.yml file.  How does this look?\n. \ud83d\udc4d \n. I just merged #1527 \n. Thanks!\n. LGTM\n. Could that Jackson 2.7.1 from the mongo driver be the problem?\n. Can you try excluding Jackson-core there and falling back on the dropwizard version? I ran into a similar issue with the Riak client when trying to use 0.9.2 (https://github.com/basho/riak-java-client/issues/619). \nI'm wondering if we should do another 0.9.x release that just updates Jackson to 2.7.x since some of the methods changed. \nThoughts @dropwizard/committers?\nEDIT: Actually, this will be challenge as jackson-datatype-jdk7 was removed and the latest version is 2.6.6.  I think in this case we need to push for the release of DW 1.0.0\n. @ezweave yea I think we should close this for now and direct our efforts on releasing 1.0.0.  Thanks for the report though and for using Dropwizard.\n. This workaround may help https://github.com/openzipkin/brave/commit/0efe6cc5327fe8e5441b898e15d0731463ed6f12\n. @fredzica does @Produces({MediaType.TEXT_HTML, MediaType.APPLICATION_JSON}) fix the issue?\n. Tests passed, so I guess let's go with it for now.  \ud83d\udc4d \n. \ud83d\udc4d \n. @dropwizard/committers does anyone else have any feedback on this one? I know its just a documentation update, but do we want to be calling out db-specific information in here?  I wasn't sure if there was a better way to present this information.\n. Will be fixed in 1.0.0 (or the next 1.0.0-rc release)\n. Looks good to me.  We're reaching the point where Environment should probably have a builder-style interface due to all of the constructor parameters, but I think this is fine for now.\n. I never realized all of the steps involved in generating the documentation.  Should we include a simple shell script in the repo that takes the version as a parameter to execute those steps?\n. Looks great to me.  Thanks for creating the script.\n. Any feedback or comments on this one @dropwizard/committers ?  Could this be something we get into 1.0.0 or wait until 1.1.0?\n. We are upgrading to Jackson 2.7.4 in Dropwizard 1.0.0 which should be released very soon (maybe even this week)\n. Just an update, but we're blocked on releasing DW 1.0.0 until https://github.com/dropwizard/dropwizard/issues/1604 is fixed.  Hopefully soon.\n. We'll happily review a pull request if you can implement this in a backward compatible way and provide adequate tests.\n. @evnm waiting until 1.0.0 final has been released first\n. You can do this using the simple server instead of the default server.  http://www.dropwizard.io/0.9.3/docs/manual/configuration.html#simple\n. You'll need to return either a JSON object or array to have the string quoted.\n. Right, I agree, I just don't think Jackson has ever operated this way. There may be an configuration option to wrap standalone strings though. \n. If the tests all pass, I think it'd be safe to update. We just have to be prepared for a DW 1.0.1 in case a new Jackson is released. \n. @cchacin @joschi was working on it in a branch (https://github.com/dropwizard/dropwizard/tree/issue-1627), but I haven't see a pull request yet.  Assuming that passes, I think 1.0.0 should be clear after that.  \ud83d\udea2 :shipit:  \ud83d\ude80 \n. @joschi in that case maybe we just ship 1.0.0 with this as a known issue?\n. There isn't one exposed via the health check endpoint as that would have to come from the metrics project.  Personally I've done https://github.com/smoketurner/notification/blob/master/notification-application/src/main/java/com/smoketurner/notification/application/resources/VersionResource.java in my services to expose this (even though its not over the admin port).\n. Thanks!\n. I think it's a good idea. If someone wanted to submit a PR for an optional implementation we'll happily review it. \n. I don't know what is up with travis, but this looks good to me.\n. Jackson 2.8.2 is now in maven central if we want to update to that\n. Closing in favor of #1749 \n. Once the release notes are in, I can go back and update it for the PR's I merged earlier.\n. Thanks!\n. LGTM!\n. LGTM\n. One minor comment in the tests otherwise this looks great!\n. LGTM!\n. Just ran into this myself.  +1. This looks good to me. Should we update the release notes and provide an example in the docs for this?\n. @sam-berry Do you know if all JDBC implementations support these options or just MySQL?\n. I'm going to close this as we just merged in #1784 \n. @nickbabcock Since commits were cherry-picked, its hard to say what was in here and what may have been missed.\n. Strange.  I'm fine closing this out.  I was just curious if we had missed anything.\n. Looks good to me.  It doesn't look like Github natively supports AppVeyor (it doesn't show up in the integrations drop down anyway), but maybe we could trigger it via a web hook?\n. Maybe we should target this PR against the release-1.0.x branch because #1749 is going to update master to Jackson 2.8\n. Changing the base within github brings in too many other commits.  We'll need a fresh PR unfortunately.\n. This looks good to me.\n. Updated release notes in https://github.com/dropwizard/dropwizard/commit/d619dede86b7f0d3888539e846fa152c638d876e\n. LGTM\n. Thanks!\n. Updated release notes in https://github.com/dropwizard/dropwizard/commit/cbf84980f240e5ee69a1adb8a0eda14969a566f5\n. I'll have to test this myself before suggesting it again.  The benchmarks on https://github.com/mtakaki/dropwizard-hikaricp don't paint it too highly (which seems suspect to me).\n. Thanks!\n. Should we leave the note in the docs about this http://www.dropwizard.io/1.0.2/docs/manual/core.html#overriding-default-exception-mappers ?\n. Looks good to me!\n. @nickbabcock mind updating the release notes?\n. Thanks!\n. Thanks!\n. @joschi is the bom something @cowtowncoder may maintain himself or maybe we should move it under the dropwizard github org first?  Unless you want to maintain it in your personal repo.\n. Sounds good. Once Travis is done, I'll merge it if no one else has already. \n. Looks good to me\n. Thanks!\n. I merged in #1778 so let's update this to reflect the new preferred usage \ud83d\udc4d \n. Looks good to me!\n. @nickbabcock I'm guessing we had tests for this that will continue to pass?\n. I like the idea of the dropwizard-e2e module.  I'm wondering if we should standardize on some naming conventions though instead of a generic App1?  Are there any other tests floating around that could be integrated into this new module as well (or anything that we haven't been able to test thoroughly in the past)?\n. I think we can merge this for now and refactor the tests later.\n. @nickbabcock sorry, I forgot about this one.  Good to merge?\n. Travis failed :( Seems like its something unrelated\n. This looks good to me.  Any other comments before we merge?. I'd probably favor keeping this in the existing jetty module and have a configuration option to enable or disable it (disabled by default). \n. I like the task approach for triggering the reload\n. I think I'm core is fine to me\n. @nickbabcock do you want to update the release notes?  Then I think this is good to merge.  Great job! \ud83d\udc4d \n. @arteam @joschi should we keep findbugs for now?  Personally, I don't have a preference.. @arteam we should probably merge this into master too\n. Should we try and merge release/1.0.x into master?  There seems to be a few commits not present in master\n. Do we want to convert everything into a RuntimeException?  I'm not sure\n. I think that makes sense.   Looks like most of the impact with this change is in the tests anyway.\n. @evnm I've been tagging the milestone based on the destination branch of the pull request, not necessarily on the functionality.  I wish the main pull request list included the destination branch.  :). Thanks for the contribution!. Thanks!. @ibwhite I'm the maintainer of the dropwizard-swagger module.  I like the AuthParamFilter you have in your starwizard project.  Would you be interested in having that incorporated into the main module?. @arteam I think that is a good idea.  We should start creating 1.1.0 release candidates soon anyway.. Would closing these - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/test/java/io/dropwizard/testing/DropwizardTestSupportTest.java#L154 help at all?. This might be dumb, but what if we changed all the localhost's to 127.0.0.1? That would remove any reliance on the DNS resolver being set up properly (as localhost is really just an /etc/resolv.conf) thing. . It looks like Jetty's session handling was a major change in 9.4 - http://www.eclipse.org/jetty/documentation/9.4.0.v20161208/upgrading-jetty.html#_upgrading_from_jetty_9_3_x_to_jetty_9_4_0\nWould that impact anything?. @arteam this may be unrelated, but have you ever seen the DefaultServerFactory register the handlers twice:\nINFO  [2017-01-16 18:18:33,623] org.eclipse.jetty.util.log: Logging initialized @1206ms\nINFO  [2017-01-16 18:18:33,682] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /\nINFO  [2017-01-16 18:18:33,682] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /\nINFO  [2017-01-16 18:18:34,371] com.smoketurner.uploader.handler.UploadInitializer: SSL Provider: OpenSSL\nINFO  [2017-01-16 18:18:34,388] com.smoketurner.uploader.handler.UploadInitializer: SSL ENABLED (certificate: 'scripts/server.crt', key: 'scripts/server_pkcs8.key', trust store: 'scripts/ca.crt')\nINFO  [2017-01-16 18:18:34,392] com.smoketurner.uploader.handler.AccessControlListFilter: Loaded 1 IP filter(s) (1 accept, 0 reject)\nINFO  [2017-01-16 18:18:34,394] com.smoketurner.uploader.config.NettyConfiguration: Event Loop: NIO\nINFO  [2017-01-16 18:18:39,487] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /\nINFO  [2017-01-16 18:18:39,487] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /\nINFO  [2017-01-16 18:18:39,494] io.dropwizard.server.ServerFactory: Starting uploader\nThat's from a service I've been messing around with which includes a managed-Netty instance, but I don't know why the \"Registering XXX handler with root path prefix\" messages are showing up twice.. Thanks for all your hard work @arteam \ud83d\udc4d I think this is good to merge now.. With the optional change, users can still provide overrides in a yaml file and they'll be picked up correct?  I've internally stored things in an Optional, but I haven't used the setters with @JsonProperty before to know whether that works or not?. Thanks!. I like this a lot.  Would it make sense to expose the builder somehow in case other providers need to be registered on the client?. @arteam @joschi @nickbabcock this all set?  tests passed \ud83d\udc4d \ud83d\udcaf \ud83c\udf89 . Thanks!. @arteam mind updating the release notes too?. @arteam this is just pending documentation, correct?. Thanks!. Did we lose travis reporting?. I'm going to merge this.  CircleCI, if you click on the link, passed but their website is saying degraded service.. Thanks!. @markelliot @nickbabcock should we provide a sane default and set the default to true (to never block)?  I'm not sure what the more explicit approach would be or what users would expect the default behavior to be.  /cc @dropwizard/committers . @markelliot good call, that's probably best for now.. Thanks!. Release notes updated in https://github.com/dropwizard/dropwizard/commit/49ee4f40fcef67ef538a0023bf48ce631416f302. https://github.com/dropwizard/dropwizard/pull/1927 was merged in yesterday to master and release/1.1.x. Thanks!. I created https://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-1.0.x-to-1.1.x with a cut and paste from @nickbabcock's comments.. Closing this as we at least have a guide now  :). Are there any breaking changes or other items to be aware of as part of this upgrade?. @dropwizard/committers should we merge this in and get it into 1.1.0?  Thoughts?. I'll merge it into master at least.. Cherry-picked into release/1.1.x in https://github.com/dropwizard/dropwizard/commit/f1d0402b71bc1b01f38397ae5a340635f82b7daf. We should probably update this in release/1.1.x too. Cherry-picked into release/1.1.x in https://github.com/dropwizard/dropwizard/commit/9ed3f7105a8be23932b2ed28cfaa26e19b17068f. Cherry-picked into release/1.1.x in https://github.com/dropwizard/dropwizard/commit/556a078034c414ff467eef263096d10b99b10ab9. I wouldn't mind seeing this in 1.1.0 as well. +1 from me. . I can cherry-pick it into release/1.1.x later today. Cherry picked into release/1.1.x in https://github.com/dropwizard/dropwizard/commit/9c90c512ea3e3b4203d9a321a929e50b71c5417d. @dropwizard/committers should we cherry-pick this into release/1.1.x, or update 1.1.0 with metrics 3.1.3?  Any thoughts?  Personally I'd probably prefer 3.2.0 as it has been awhile since a new metrics release.. Cherry picked into release/1.1.x in https://github.com/dropwizard/dropwizard/commit/676c9ebbbd7785ce57e98be7e685ae8517804407 and added release notes in https://github.com/dropwizard/dropwizard/commit/a61abef87097acc68733444b32f9af4e04fdfde4. We should probably create an rc2 soonish :). @nickbabcock is this good to merge?. @mattnelson thanks for the feedback.  I think I can make the X-Request-Id better by looking for an existing X-Request-Id header in the request and using that value instead of generating a new UUID.  I'll take a look at the request-tracker link to see if there's other functionality which may be missing.  The X-Runtime filter was just to provide an easy mechanism for knowing how long an API response took.  If you think this is confusing, I can remove it, but I've found it useful in some of the API's I've built.. @mattnelson none of these are required.  They are just provided in the code so someone can optionally use them.  They aren't being enabled by default.. @mattnelson I pushed up some updates to address your feedback. @arteam mind updating the release notes too?. I'll cherry pick this into release/1.1.x once it has been merged.. Any more thoughts on this @arteam?. Looks good to me.  Any idea why appveyor has been failing recently?. This won't make it into 1.1.0, but I committed a CharsetFilter in https://github.com/dropwizard/dropwizard/pull/1948 that will add the UTF8 charset in the header. . @tbartley gotcha, maybe just remove the @Size annotation then.  I think that's throwing me off as we usually don't use that to check for emptiness or length of a string.. Thanks!. I cherry-picked these commits in https://github.com/dropwizard/dropwizard/commit/bfc370b5fb16a8d7b93ea9cd2520c2921a13d95e and https://github.com/dropwizard/dropwizard/commit/5f85ffab2f09e6ff43f88f8763ecbef147e2754e into the release/1.1.x branch. This ready to merge?. Good call, let me submit a PR to JDBI. . Looks like v3 already supports this - https://github.com/jdbi/jdbi/blob/master/postgres/src/main/java/org/jdbi/v3/postgres/PeriodArgumentFactory.java.  I'll close this PR.. Thanks!. @manuel-hegner do you have a simple test case that we could add to this?. Those warnings should be fine and yes those changes were intended as we started using the bom.. we're using both BOM's now - https://github.com/dropwizard/dropwizard/blob/release/1.1.x/dropwizard-bom/pom.xml#L299 and https://github.com/dropwizard/dropwizard/blob/release/1.1.x/dropwizard-bom/pom.xml#L290. 2.9 was released - https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9. In terms of your example, it sounds like using the authorizers may be better suited to your use-case? http://www.dropwizard.io/1.1.0/docs/manual/auth.html#authorizer. I'd second this.  Separate the API representation from entity representation being persisted into the database.. Would it be possible to convert this to assertj to be inline with the rest of the test suite?. Thanks!. @arteam this good to merge?. Maybe we do this in a Dropwizard 2.0 that also includes JDBI3?. @joschi is this one done now that the jersey upgrade has been completed?. @nickbabcock should we close this in favor of https://github.com/dropwizard/dropwizard/pull/2395 ?. Closing in favor of #2395 \ud83d\udc4d . Thanks!. I also agree having proper terminology is important, but I think we should plan out this change a bit more to prevent breakage (maybe introduce new terms so we can properly deprecate the old ones).  I don't think this needs to go into 2.0.0 at this time.. @nickbabcock I agree.  All I'm saying is I don't think #2154 is ready to be merged in right before we release 2.0.0 (hopefully soon\u2122). Thanks for doing this @arteam !. If we uncomment the line I commented in the pom, we can have Travis enforce this too. Do you think we should do that?. Thanks!. @arteam should we merge this into master as well?. @arteam should we merge this into master as well?. \u2014add-to-start=conscrypt?. Thanks!. Should we put out another v1.2.x release where we deprecate these classes before v1.3.0?. Thanks!. @arteam you added jdk-1.8.0_162, do we need jdk-1.8.0_161 as well?. Working on a PR for this, will submit it shortly.. Thanks!. This looks really good, one question though. What ends up closing the socket connections? Do we need to worry about that?. Can you please update the relnotes file with this too?. Thanks!. Thanks!. Looks like one of the throttling tests from https://github.com/dropwizard/dropwizard/pull/2384 is causing the appveyor builds to fail.. Is there a way to rerun the appveyor tests without committing anything?. @mattnelson after merging in the guava removal PR, we have some conflicts on this PR now.  Would you mind resolving those?  Thanks!. @joschi @nickbabcock any additional feedback?. messageRate or messageFrequency might make sense.  We should probably also add a comment (with an example) of how to understand the usage of Duration\n\nA Duration of 1m means only allow one message per minute, while a Duration of 30s means allow 30 messages per second. @nickbabcock this looks good to me \ud83d\udc4d \n\nGreat job @ochedru!. We also need to update the release notes with this change.. I usually prefer them all separate but this looks fine to me. Thanks for taking care of this. . Great progress @nickbabcock!. @nickbabcock do you think this change should go into 2.0.0 or 1.4.0?  We should also start a wiki page on how to upgrade.. I guess let's merge this in and start prepping 2.0.0-rc1. @Tibor17 Nick opened https://github.com/dropwizard/dropwizard/issues/2418 with some Jersey issues we have to keep an eye on. I guess we could create an RC whenever. I\u2019d like to submit a dropwizard-guava and dropwizard-jodatime modules but haven\u2019t had time to work on them yet. . I was thinking we could introduce a dropwizard-guava and a dropwizard-jodatime modules, assuming it doesn\u2019t make the rest of the code unmaintainable.  But let users opt in to using those. . @joschi did you want to handle introducing a dropwizard-guava module in this PR or do another PR into this branch?. Should we change guava to be a test scoped dependency before merging?. @nickbabcock @joschi is this an issue with the SelfValidatorTest or javassist?  It only seems to be failing on jdk8 for some reason.\nERROR] complexExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.253 s  <<< ERROR!\njava.lang.NoClassDefFoundError: java/lang/StackWalker$Option\n    at io.dropwizard.validation.SelfValidationTest.complexExample(SelfValidationTest.java:198)\nCaused by: java.lang.ClassNotFoundException: java.lang.StackWalker$Option\n    at io.dropwizard.validation.SelfValidationTest.complexExample(SelfValidationTest.java:198)\n[ERROR] invalidExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.005 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.invalidExample(SelfValidationTest.java:210)\n[ERROR] subClassExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.006 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.subClassExample(SelfValidationTest.java:142)\n[ERROR] annotatedSubClassExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.005 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.annotatedSubClassExample(SelfValidationTest.java:153)\n[ERROR] overridingSubClassExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.005 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.overridingSubClassExample(SelfValidationTest.java:164)\n[ERROR] testDirectContextUsage(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.004 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.testDirectContextUsage(SelfValidationTest.java:190)\n[ERROR] failingExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.004 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.failingExample(SelfValidationTest.java:134)\n[ERROR] multipleTestingOfSameClass(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.003 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.multipleTestingOfSameClass(SelfValidationTest.java:180)\n[ERROR] correctExample(io.dropwizard.validation.SelfValidationTest)  Time elapsed: 0.003 s  <<< ERROR!\njava.lang.NoClassDefFoundError: Could not initialize class javassist.util.proxy.DefineClassHelper\n    at io.dropwizard.validation.SelfValidationTest.correctExample(SelfValidationTest.java:172). @joschi maybe when the next release comes out containing https://github.com/jboss-javassist/javassist/pull/204, the tests will work again on JDK8.  That puts us in a tricky position.  We should support the latest LTS release (JDK11), but I'm not sure we should lose JDK8 support in DW 2.0.0 or not yet.. Fixed by https://github.com/dropwizard/dropwizard/pull/2411. Can https://github.com/dropwizard/dropwizard/blob/master/dropwizard-validation/pom.xml#L46 be removed or do we use that in other places within the validation module?. I meant just remove the dependency from the validation pom for now. Thanks!. Thanks @joschi \ud83d\udc4d . I think as long as we document this in an upgrading document, 2.0.0 would be a good time to do this.. @nickbabcock any more thoughts on this one?  Enabling by default sounds ok to me in 2.0.0. @volphy thank you for submitting this pull request, but @joschi is actively working on removing Hamcrest in #2444.. Thank you for the detailed write up!. @dannyqiu I created https://github.com/dropwizard/dropwizard/pull/2460 to fix this issue.  Could you see if that fixes the issue you were experiencing?. Mind submitting a pull request?. Thanks @mattnelson, fixed!. AppVeyor failed with:\n[ERROR] Errors: \n5910[ERROR]   JerseyClientIntegrationTest.testBufferedGzipPost:111->postRequest:209 \ufffd Processing. Looks to me, thanks for taking care of this!. @isaki-x would you mind adding a release notes entry about this in https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst ?. @jbarnettwomply thanks for all of your work on this.  To make upgrading easier, is there anyway we can do the AbstractBinder code ourselves in an overridden .jersey().register() method somehow that supports instances?. @nickbabcock any additional feedback on this one?. @nickbabcock with this merged, what do you think about starting to create some release candidates, or should we wait until Jersey 2.28 is released?  /cc @dropwizard/committers . Looks good to me!  Thanks!. Failed with a read timeout.\n[ERROR] testBufferedGzipPost(io.dropwizard.client.JerseyClientIntegrationTest)  Time elapsed: 0.634 s  <<< ERROR!\njavax.ws.rs.ProcessingException: java.net.SocketTimeoutException: Read timed out\n    at io.dropwizard.client.JerseyClientIntegrationTest.postRequest(JerseyClientIntegrationTest.java:209)\n    at io.dropwizard.client.JerseyClientIntegrationTest.testBufferedGzipPost(JerseyClientIntegrationTest.java:111)\nCaused by: java.net.SocketTimeoutException: Read timed out\n    at io.dropwizard.client.JerseyClientIntegrationTest.postRequest(JerseyClientIntegrationTest.java:209)\n    at io.dropwizard.client.JerseyClientIntegrationTest.testBufferedGzipPost(JerseyClientIntegrationTest.java:111). If we were going to get rid of BiDiGzipHandler, 2.0.0 would be the time to do it.. @joakime master is currently targeted for 2.0.0 but we haven't released any release candidates yet due to https://github.com/dropwizard/dropwizard/issues/2418.  If you'd be willing to submit a PR, we'll happily review it.  Thanks!. If 3. is possible, I'd probably lean toward that.  Otherwise 1. if there are no downsides.. Thanks for the contribution!. Is there a way to re-run the tests on Appveyor?. Looks good to me, thanks!. @arteam is this not an issue in Jackson 2.9.6 which is what 2.0.0 is currently using in master?. @arteam I don't think 1.3.6 was released fully.  dropwizard-parent 1.3.6 in particular seems to be missing from https://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-parent/. Thanks @arteam, is it possible to redeploy the whole tag to ensure any other modules weren\u2019t missed?. @dropwizard/committers do we want to do this?  I maintain some bundles that don't require any configuration where I'm using Bundle.  I think this would cause a lot of churn for people waiting for their bundles to be updated.. @evnm @alex-shpak I'd be in favor of releasing 1.3.7 with Bundle deprecated and then remove it in 2.0.0, but I don't think we should remove in 2.0.0 without deprecating first.  Or we deprecate in 2.0.0 and remove it in 2.1.0 or something.. Thanks!. Should we add an entry to the release notes for this as well?. Closing in favor of \nhttps://github.com/dropwizard/dropwizard/pull/2522. Thanks!. @joschi makes sense to me. I think we can leave Guava for now. . I think if there are jdk8 compatible replacements, we should opt for using those whenever possible. For anything else using guava is ok.. Not sure what is up with CircleCI lately. We can probably skip this.. @nickbabcock mind adding this to the 2.0 release notes?. I\u2019d be supportive of this. . @minisu can you also please add a note about this to the release notes in https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst. @joschi we should probably do another 1.3.x release with everything being removed in 2.0.0 deprecated, to give people a head\u2019s up. Is it just IntParam and LongParam?. @joschi makes sense to me, I\u2019ll update my PR. @nickbabcock I think that makes sense.  I'll close this PR and submit another against master. Should we default the MetricRegistry to the internal one created by Dropwizard so this works out of the box?. @dennyac can this PR be closed in favor of #2650 and #2649?  Is one of those preferred over the other?. .type() may not be required here, but I added for explicitness sake\n. Not to be nit-picky, but do you want this { up on the previous line to match the rest of the styling?\n. this could be made final\n. Do you want this { moved up to the previous line to match the rest of the styling?\n. extra space in the constructor\n. spacing seems off here\n. Do we want {} around this to match the standards?\n. @joschi thanks for the feedback.  I added some javadocs.\n. This should probably be removed as it's not longer applicable.\n. Oh, I see where you are using it, but does it make sense any longer?  The SecurityContext is always available, but a Principal may not be present all of the time.\n. Can we also add @JsonInclude(JsonInclude.Include.NON_NULL) in here to avoid having null fields show up in the error responses if they aren't being set? (I ran into this with the details field)\n. Can this be updated to JacksonMessageBodyProvider to reflect the class its in?\n. I'm not sure how likely it would be, but should we do any string trimming on the input here to remove whitespace if a user passes a single space character in? \n. Can you commit the fix and push it back to your piefel:validationLogging branch?  Then it should show up in this PR automatically.\n. Blank maybe?  I'm not even sure if it's worth the effort.  Any opinion @joschi ?\n. I agree with @joschi that we can probably use the Jersey Bean Validations once https://github.com/dropwizard/dropwizard/pull/842 is merged in ( @joschi can you comment on that one?).  I think this PR is fine for now, I'll merge it.\n. Could we use Dropwizard's Size class here instead of a string? Then we can enforce validation.\n. Minor spelling mistake on terabytes\n. I think it was more clear when these had _IN_MILLIS in their names so that people would know what the value represented.\n. I personally prefer this approach instead of Thread.sleep() so we know how long the sleep value represents.\n. here is where i mean\n. should this be Optional.of(\"\") instead?\n. Is this actually true?  I've had code where I rely on the default exception mappers and can add additional ones.\n. Should this be environment.getValidator(); instead?\n. ah, good to know, thanks\n. This looks good, but do you want to move this down to around line 249 so its with the rest of the builder option setting?   This one is allow alone by itself.\n. Please remove the @author line\n. Do you need a @Provider annotation?\n. Can you revert this back to not using a wildcard?  Then I think we're good to go.  Thanks.\n. Can we mention build.gradle or pom.xml here for the Maven users?\n. mind fixing the indentation here?\n. Does this need a \\ in front of it similar to the line below?\n. Would you mind changing the package here to be whatever would work out of the box from the dropwizard-example application?\n. Should we add @Min and maybe @Max annotations onto these values?  Sorry, this is for the line below this comment.  Same applies to the other connector factory.\n. Should this ScheduledExecutorScheduler() be Managed so its stopped and started alongside Jetty?\n. I prefer the previous approach more as it was easier to understand and more standard.\n. Could we change this to failBecauseExceptionWasNotThrown(IOException.class); instead?\n. Will users have to add this type reference to all of their existing configuration files if this gets merged in?  Is there anyway to default the value to SLF4J to ease upgrading?  If we can't support that, we need to ensure we update all of the various configuration files spread throughout the dropwizard-example and documentation (like the getting started pages).\n. can you make this final?\n. Also, do we need to check that a SecurityContext has been set before calling this to avoid a NPE?\n. can you make this public?\n. can you make this private?\n. No, but to stay consistent with initialize() and run() and how its defined in https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/Application.java\n. would a ForbiddenException work here or is just a WebApplicationException thrown?\n. Same question here but using NotAuthorizedException\n. Should we put a OneOf annotation on this only allowing the values of \"tcp\" or \"udp\"?\n. can we remove the this. references? since this is scoped in the class anyway\n. Are you using the dropwizard provided JerseyClientBuilder? That should support environment. \n. This line shouldn't be necessary if there is a separate config file specifically for testing that sets port=0\n. Yea, I think a comment is a good idea\n. It's in the dropwizard-client module which is probably what these docs were assuming were being used.\n. Maybe make the comment \"If not using a separate testing-specific configuration file, use a randomly selected port\"\n. How about:  Lists.newArrayList(header.getValue())?\n. since this is the same in both SimpleServerFactory and DefaultServerFactory, should we move this to the AbstractServerFactory instead?\n. Is this change required now that we have the default method in the interface?\n. Please don't use wildcard imports.\n. Please don't use wildcard imports\n. Please don't use wildcard imports\n. eclipse was telling me this was no longer required, so I removed it.\n. I don't know why these were defaulting to 8080, but I updated them to the standard graphite port of 2003.\n. I only added the license header here because I basically copied this code out of Curator.  However, since both Curator and Dropwizard are under the Apache 2.0 license, maybe this is unnecessary?\n. @joschi @nickbabcock do we want to merge in this PR and then revisit the exception handling in a follow-on PR?\n. This one is ok. I had to revert the Yaml one due to how it was being called. Per error prone, calling newInstance() without getConstructor() will be deprecated in JDK9 and is considered unsafe as it skips some exception handling. \n. See my comment above\n. I was hoping this would be squashed when it's merged in using the GitHub squash button. I can update the description later today. \n. Would you want to use failBecauseExceptionWasNotThrown(ConstraintViolationException.class) here instead?\n. nitpick: this could be final\n. It'd be nice to link this to a place that's not version specific, but if we are going to update it, would you mind updating it to the latest release 1.0.2?\n. Is the assets path in here needed or a cut and paste issue?\n. please don't use wildcard imports. zero in this case means use jetty's calculation (not -1)?. I like the explicitness of Optional instead of people needing to know that -1 has a special meaning.. there's an extra < in here. could this be simplified to return Optional.ofNullable(principal);?. is there any benefit to putting a Thread.currentThread().interrupt(); in here?. Good point.  I'll lower it to TRACE and also see if I can extract X-Request-Id from the request and use that if it exists to maintain any flows.  I'm not trying to replace or build zipkin or anything, just providing the response with a UUID that maps to a log.. I've specifically used this in the past to enforce adding a ;charset=utf-8 into JSON responses, so I'm not sure I'd want to default this to whatever defaultCharset returns.. I can do that. In case zoneId is null, maybe put \"system\".equalsIgnoreCase(zoneId). spacing seems off here. what is the @Size doing here?. How about making this:\n@UnwrapValidatedValue\npublic Optional<String> certAlias = Optional.empty();. would this be more appropriate as a yaml list?\nsupportedCipherSuites:\n  - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n  - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256. some val's snuck in here. should we also remove the findbugs-exclude.xml file too?. The nullaway configuration also allows you to exclude packages there too if we want to excludes these packages in the main pom . Can this reference a property version? Same comment below. nit: ${dropwizard.version}. does it make sense to support a fractional number of messages per second instead of making this an Integer or even an OptionalInt?. It\u2019s too bad a Duration wouldn\u2019t work here somehow. Exactly what I thought. Duration has a count and time unit which we need in this case even though it\u2019s not the best name. . Should we check if resourcePath is null here too?. this is pretty crazy this is the only way to do this now.  :(. this should probably be defined up in dropwizard-bom. Probably not, I was just testing what worked and what didn't.  I need to fix the new Nullaway errors in this PR still.. Should we register these as instances or classes going forward? I thought part of the issue with the latest Jersey was that it no longer supported registering instances?. I'll remove that mention. can this remain private?. Also assertj for assertions. ",
    "qinfchen": "+1 on making AssetBundle configurable.  Is there a plan to support \"dev mode\"?\n. +1 for this ability too.\n. i see, thanks.\n. Closing it. Since the main use case is to have context path available during application run, but if the user configured via yaml... that won't be available with this change :(\n. @arteam found the issue in the original test. configure needs to be called to setup the environment for other tests. Separate PR is created. Sorry about that\n. hmm. There is no coverage for EnvironmentCommand run method. Since i added a line in there, the coverage went down... :(. \n. Exactly, I'd prefer having defaults set to 204 and forcing devs to explicitly throw 404 response to convery the client error. \nFor the change of default behavior, i think it should be fine as long as this is clearly stated in the release notes.\nEDIT: maybe also provide a way for users to configure the writer for the old behavior\n. @evnm, i created a PR to change the types, please let me know if I can help with alleviating the concerns on changing of the default behavior.\n. Having an empty string can considered as a valid response which isn't the same as \"no content\" since Optional.empty() isn't the same as Optional.of(\"\").\nEDIT: From HTTP semantics, i'd like think that the server doesn't have the right endpoint to serve the client's request when a 404 occurs indicating a client error. But the current behavior returns a different sets of status code based on the logic (content specifically) within that API which seems off.\n. constructor taking the exception type? another option is to provide a not found body writer for users to configure, but mark it as deprecated\n. We are extending LogbackClassicRequestLogFactory to have different types of request logs based on sensitivity level. . ping?. Closing, need more changes.. the context path logic is slightly different between the two. It would be nice to move them into AbstractServerFactory\n. yep, fixing the style issues.\n. good point. fixed.\n. ",
    "jamesward": "That would be cool.  I've been trying to figure out the right way to get the last-modified and it's kinda tough with a URL.  I was going to have to modify what went into the cache anyhow.\nWhat do you think would be the right way to get the last-modified date?  It seems kinda tricky with files in jars.\n. Yeah.  That part is gonna be tricky.  So let me take a stab at caching the etag.  Then we can deal with the last-modified later.\n. Here is my latest with a simple Last-Modified impl and cached etag:\nhttps://github.com/jamesward/dropwizard/commit/993961811125851fd581ef468ba34fb20d01d01f\nI haven't updated the PR range yet.  Let me know if you want me to.  I think I can only have one PR open at a time.\n. Good point on the location of CachedAsset.\nAs for the Last-Modified header, it looks like has to be in a non-millisecond format:\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\nI believe there is no way to get milliseconds from a If-Modified-Since request header.  So we need to make sure our local cache & Last-Modified check value doesn't use milliseconds.\n. I've updated my code with the refactored CachedAsset but Github won't let me add another PR - I can only amend the range.\n. Ah.  Got it.  That is much cleaner.  But I still have to zero out the milliseconds.\nI updated the title of the pull request.  Do you want to just stick with this one?\n. Thanks!\n. Ah, Thanks.  Changing http.rootPath to /app/* and my AssetBundle to / worked!\n. BTW: Here is my little sample app that uses this and the new caching / Last-Modified / ETag stuff: https://github.com/jamesward/dropwizard-bars\nIt's very simple right now.  But a good starting point for Client / Server style web apps.\n. ",
    "pandich": "To me it looks like com.yammer.dropwizard.viewsViewMessageBodyWriter:38 :\nconfiguration.setClassForTemplateLoading(key, \"/\");\nshould really read:\nconfiguration.setClassForTemplateLoading(key, \"\");\n. My previous comment was not quite right. I took a stab at a patch and have asked the main man to take a peek.\n. ",
    "vdrolia": "ah crud, did not clean it up - let me redo - sorry about that\nOn Mon, Apr 2, 2012 at 1:00 PM, Coda Hale <\nreply@reply.github.com\n\nwrote:\nI can't merge this, and these commits add a bunch of your one-off stuff to\nthe POMs.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/dropwizard/pull/71#issuecomment-4887013\n. \n",
    "sipte": "how does your company manage the qa, uat, production environment settings, specially passwords\nif possible take a look at https://github.com/tackley/guardian-configuration/blob/master/src/main/java/com/gu/conf/PropertiesLoader.java\n. any reason? lot of projects have bundle jar.\njetty-all\njersey-bundle\njackson-all\nnot asking to combine dependent jars with dropwizard, but just dropwizard-* modules. anyway it\u2019s up to you.\n. ",
    "tc": "Which file should i peek into to investigate the issue?\n. ",
    "cheddar": "Got this feedback from codahale on the mailing list:\nFor this, I'd rather see \"socket+ssl\" and \"nonblocking+ssl\" added as connector types. We can add validation methods to ensure the SSL connectors aren't used w/o a valid SSL config. \nI adjusted it to take \"socket+ssl\" and \"nonblocking+ssl\" and went to add some validation for the SSL config and couldn't really figure out a great way to do it.  The SSLEngine stuff in Java generally allows you to not specify anything and just take stuff from the base keystore which is perfectly valid, so I'm not sure what all we can check.  The only thing I could think of was to verify that the keystore can actually be read with the provided credentials, but if that's wrong, it's going to fail loudly when it tries to read the keystore, so I'm not sure what an extra validation buys us.\nI also move the generation of the SslContextFactory into the SslConfiguration object.  I know some people don't like mixing logic like this with configuration, but I didn't know which side of the philosophical fence DW stands on so I figured I'd put it there and we can move it if it is preferable to have it somewhere else.  My goal was just to consolidate the logic, I kinda like the config having it because it allows for polymorphic instantiation/overrides of the SslConfiguration object to provide totally new ways of getting the SslContextFactory, but I will put it anywhere that gets the patch accepted (I care more about not maintaining and maven deploying a fork than philosophical stuff).\n. ",
    "cstivers78": "Thanks. I should have known better and logged at the specific tag. \n. ",
    "iammerrick": "+1 When this action happens.\n. ",
    "cowtowncoder": "No prob, glad to be of help\n. :-D\nOk, I'll add annotations first. On admin page(s): where do things like /threads get wired in? I #fail'd to find it.\n. Ok. Makes sense, one of the paths did lead there... \n. One thing I do not understand here is writing of the config file -- couldn't one just work with Config objects? Or maybe this was due to earlier inability to change values (properties were private, no setters). So approach can probably be simplified in this part.\n. I wish I had better example code available, but sub-module \"ts-test-cluster\" of\nhttps://github.com/FasterXML/TransiStore\nhas full setup that spins up 4 instances of the store server.\nThe relevant section for starting up is this (in StoreForTests)\npublic static StoreForTests createTestService(BasicTSServiceConfigForDW config,\n        TimeMasterForClusterTesting timeMaster, boolean fullInit)\n    throws Exception\n{\n    StoreForTests service = new StoreForTests(timeMaster, fullInit);\n    Bootstrap<BasicTSServiceConfigForDW> bootstrap = new Bootstrap<BasicTSServiceConfigForDW>(service);\n    final Environment environment = new Environment(\"TestService\", config,\n            new ObjectMapperFactory(), new Validator());\n    bootstrap.runWithBundles(config, environment);\n    service.run(config, environment);\n    final Server server = new ServerFactory(config.getHttpConfiguration(),\n            \"StoreForTests\").buildServer(environment);\n    service._jettyServer = server;\n    return service;\n}\nwhere BasicTSServiceConfigForDW extends basic DropWizard Configuration.\nCaller than just does something like:\nBasicTSServiceConfigForDW config = new BasicTSServiceConfigForDW();\nconfig.getHttpConfiguration().setPort(9090); // override http port\n// and so on\n. I have done my integration tests by just starting multiple services in same JVM, pretty much just copying couple of lines from the way main class bootstraps things. So I am not sure how much need there is to make service itself offer this?\n. Right -- everything has sorta been said here. I don't know what the right answer is, wrt serializing JSON String vs regular String. I'd lean towards \"if caller wants JSON, JSON String it is\", but that's kinda hard to determine reliably.\nAs I recall, Jackson JAX-RS providers allow changing this behavior (list of \"untouchables\"), and I am always open to adding configurability. But changing defaults is riskier.\n. On Fri, Mar 15, 2013 at 12:24 AM, Kek laboratories <notifications@github.com\n\nwrote:\nI have the same problem and in my opinion the jackson is not consistent in\nits processing. I have JAX-RS jersey service and Spring RestTemplate\nclient, both are using the same version of Jackson, but the String\nreturn-value from service could not be read by the client template, because\nthe issue above (String is ignored by JacksonJsonProvider and passed\nthrough without added quotations).\nOK, String is not valid JSON, but:\nWhen I try this:\npublic void testJson() throws Exception {\n    ObjectMapper map = new ObjectMapper();\n    System.out.println(\"TO-JSON:\");\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    map.writeValue(out, \"Test String\");\n    System.out.println(out.toString());\n    System.out.println(\"FROM-JSON:\");\n    String value = map.readValue(out.toByteArray(), String.class);\n    System.out.println(value);\n  }\nit is working, primitive types and String are serialized and deserialized\nas JSON. So I expect, that the same consistent processing will be used in\nJacksonJsonProvider.\nIf you define the String as \"untouchable\" because it is not valid for\nJSON, than you must define byte, integer, boolean, etc. \"untouchable\" too\nto be consistent in your solution, they are not valid JSON structures too,\nbut are processed by JacksonJsonProvider now in the same way as in\nObjectMapper.\n\nThis is not the reason String is declared untouchable. Rather, choice is\nbetween:\n- Write input String as JSON String, i.e. surround it with double-quotes\n  and escape necessary characters, or\n- Write String exactly as-is, assuming user wanted to produce exactly that\n  output (presumable hand-encoded JSON).\nSince there is no metadata to tell what is user's intention, Jackson is\nbeing conservative and using latter choice.\nThis is also prudent considering that JSON Specification only considers\nJSON Objects and JSON Arrays as valid JSON content -- so strictly speaking,\nreturning a JSON String would produce invalid JSON anyway.\nSimilar reasoning is used for outputting byte[] and couple of other\ntypes. This does not apply so much to numeric types as they tend to be\nserialized same way regardless.\nIf you want to change this, you should re-configure JacksonJsonProvider (if\nnecessary, by sub-classing) to use different set of untouchables.\nIf there are missing pieces from configurability that make it impossible or\ndifficult to change configuration, you can suggest additions or changes at:\nhttps://github.com/FasterXML/jackson-jaxrs-providers/issues\nI hope this helps,\n-+ Tatu +-\n. I'll see if I can add a check to default to standard Enum deserializer, in case @JsonCreator is found.\nA way to disable particular modules would probably make sense as well, I will see how easy that would be to add.\n. Ah. Right, I actually noticed that after filing issue, local build failing. Thank you for sorting it through!\nI'll try to send updates here more often since I do Jackson upgrades, it should be easy enough for me to run tests locally and submit patches too.\n. FWIW, I suspect that almost all overhead comes directly from Jersey JAX-RS endpoint handling.\nJAX-RS spec is unfortunately defined in such a way that it imposes much more dynamic overhead for calls than necessary (for example, since endpoints are defined by classes, which are static, most introspection could be done just once -- but is actually done for each and every call).\nBy the time DropWizard gets hold of request there isn't much to be done. And it may not be possible for Jersey to do much either.\nIdeally JAX-RS specification did divide initialization steps into 2 parts: things that only depend on static class definitions; and things that vary by request. But I doubt much can be done at this point, due to maturity of the spec and implementations.\n. It would also be great to build a local setup to profile overhead for simple calls. That should give some indication as to where most time is spent.\n. @nickbabcock thank you for the sanity check. This seems to confirm that there is quite a bit of overhead for dynamic dispatch, much of which would ideally be optimized away, but probably in practice can not be (due to JAX-RS rules).\n. I think that for actual DW release, a stable version is needed. For master branch of DW, using rc1  (or soon rc2) might not be a bad idea. But I understand hesitation to some degree.\nThe latest stable version now is 2.5.3.\nThe intent is to get official release out within couple of weeks -- didn't happen by end of may as I was hoping, but definitely will be during June.\n. Minor update: rc2 is out, and I will still make rc3 before final release. It looks like GA may slip into early July; if this is problematic, RCs have been rather solid and are probably usable.\n. Actually, only core and annotations are; databind will follow starting today. So please wait until monday 21st before update, to get latest versions of all components.\n. Jackson 2.6.0 is now fully released, finally.\n. Only other suggestion I have is to make sure that every Jackson component DropWizard depends on should be added as a direct dependency, and not rely on transitive dependencies. This because Maven has issues resolving transitive dependencies to latest version. Specifically I have noticed that jackson-annotations is sometimes omitted, causing challenges; or sometimes even jackson-core. Since minor versions between core components must match, this can lead to odd issues.\n. Thanks! Will fix the issues.\n. Excellent! Thank you for thorough review & merging.\n. FWIW, 0.9.0-rc1 seems to contain upgraded Jersey 2.18, and being available via Maven Central should be possible to use before official final 0.9.0, and appears to be solid enough for actual usage.\n. At the risk of beating a dead horse...\n@pparth \"We are the ones that give momentum to the fame of this project. Endorsement by major companies is what made Dropwizard known to people out there... Hundreds of Stars are due to people working in these companies\"\nWhy do you think that contributors of DropWizard are driven by some deep need to be popular? \nDo you think you and other people using, deporting it, should be perhaps given a medal, or songs praised extolling your virtues? I do not get this. I have made minor contributions only, and can say that the reason I give back is based on two main things:\n1. Benefit of getting the fixes, improvements integrated TO REDUCE MY OWN MAINTENANCE needs, and\n2. As a minor thank you note for all the value I have gotten, am getting and will get out of this project\nYour attitude seems to be along lines of \"YOU should be grateful for ME for using your stuff, making it popular\". That attitude is very arrogant, and I hope that is not what you intend to convey.\nNo one owes you (or other users) anything for your \"implicit endorsement\"; and I highly doubt that you or anyone else has started using DropWizard for purpose of marketing it.\nFurther, it did definitely sound like you were demanding things that you assume should be provided, without offering to -- for example -- help in that happening. That is a certain way to sour OSS relationships.\nThe sad part here is that I actually think that parts of what you are asking for are things that we as a community could consider and work towards. For example, creating maintenance branches for purpose of targeted backported fixes, is a reasonable idea. Especially if offering help with managing such branches or releases.\nIt's just that starting with demands, backed by allegations of incompetence and/or ungratefulness (\"we made you popular -- now you don't even support old version I am using!\"), is not a way to get anything positive going.\nApologies for continuing the debate beyond its natural end, but this is one area that is close to my heart, as both OSS author and user.\n. My suggestion would be to improve configuration so that set of modules to register with Jackson would be determined dynamically from boostrapped Configuration.\nThat is: initialization of things would use a bare-bones Jackson ObjectMapper, with minimal set of modules (possibly none), to read in Configuration (and not sub-type specified by Application), ignoring unknown properties.\nBased on core configuration information, bootstrap process would construct \"full\" ObjectMapper, allowing users to specify additional modules, and/or remove other ones.\nIt would also be possible, if so desired, to handle basic logging configuration and initialization at this point, just to improve troubleshooting (before logging is initialized, things are bit opaque). But very little else should occur at this point.\nFully configured mapper would then be used to re-bind the input configuration file; allowing use of all kinds of additional datatypes as per configuration.\nThis way it would be simple to change the set of datatype modules registered, as well as any other extensions; and do it fully declaratively. One can still do explicit changes above and beyond declarative stage; this would not change overridability.\nOne side-benefit of such separation is to make bootstrapping process even more stable: as useful as modules like Afterburner are, they also add potential breakage points.\nI have hoped to work on this idea for a while, but unfortunately haven't had much time. I thought I'll mention it nonetheless in case anyone else found this interesting.\n. Quick comment: is this:\nhttps://github.com/FasterXML/jackson-datatype-joda/issues/70\nthe root cause?\nBreakage is unintentional and surprising; I assume the joda issue is the root cause and will add more information there. We should be able to fix this for 2.6.1.\n. @arteam What I can do very quickly is to release a micro-patch of 2.6.0.1, both for Joda and jsr-310 (java 8 time). I don't know when full 2.6.1 will be released, but I usually will try to pack in a few more fixes.\nMicro-patch just means that it is not part of full patch release, and is done for critical breakages. This one would qualify.\nI will actually go ahead and cut the micro-release, just in case.\n. With that, there's now 2.6.0-1:\nhttp://repo1.maven.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.6.0-1/\nof Joda module. I will release 2.6.0-1 of jsr-310 module later tonight as well.\nI understand if decision is made to stay with 2.5(.4), for DropWizard 0.9, but wanted to make sure there is an alternative.\n. Thank you for reporting the problem, apologies for causing it.\n. @evnm One suggestion is to try whether problem triggers without Afterburner registration.\nIf it still fails, my guess would be that the type resolution (construction of JavaType from generic types, TypeReference and so on) changes could be causing whatever issue there is. There were some problems with direct construction of SimpleType (something not recommended, but possible) with 2.7.0, one of which would have similar symptoms (method introspection not being done recursively unless invoked via TypeFactory), but those were supposed to be resolved.\nStill, it sounds eerily similar. So reproduction would be great.\n. @joschi Ok. Then I would need to trimmed down unit test; given that I would expect it to likely be easy to find and fix the problem. I would think that creating local Configuration subtype, stripping out things other than specific allegedly unknown property, should work.\nI'll try to reproduce this locally from DW trunk as well, in parallel\n. I started trying to tease out whatever is causing this: I can reproduce the issue locally wrt DW tests.\nMy first guess was that this is related to handling of defaultImpl, and incomplete type resolution: there was an earlier bug, but that was fixed in 2.7.1. So far have not been able to replicate the failure.\nFail is still present in head of Jackson 2.7 branch, although changes since 2.7.1 are very small.\n. Hoping that this:\nhttps://github.com/FasterXML/jackson-databind/issues/1128\nis related. Have been able to fix part of the problem so far, but it does not seem to resolve this problem.\nWhat would be useful from Jackson perspective would be to have an isolated test case I could play with.\n. @nickbabcock Unfortunately fix to a seemingly related problem was not a fix to whatever is causing this failure. At this point I do not have a simple reproduction of the problem, unfortunately, and I am beginning to wonder if this could be either:\n1. Problem due to test harness using methods (or generating scaffolding) that should be changed (that is, failure of test code), or\n2. Related to custom Type Id resolver that DropWizard uses to (sort of) dynamically register subtype mapping for configuration values\nI suspect it is most likely to be (2), but have forgotten where to look. There was some magic in DW code to look for specific annotations, found via class-scanning, to sort of auto-register subtypes of various polymorphic types that standard configuration has.\nIt would be great if anyone could help distill a test case from those, if possible. I'll update this issue if I find anything else relevant.\n. @nickbabcock ah yes, that's it. I am suspecting that perhaps some aspects of subtype-refinement might have issues, if and when polymorphic types are being used. This is not a widely used thing, but I think DW configs are quite elaborate.\n. Looking at code on Jackson side I suspect this is indeed where the problem arises. Also, haven't seen anything particularly suspicious on DW side (at least wrt this problem). Hoping to cobble up a stand-alone test case from that.\n. Still no luck. Simple subtype/supertype via annotations does not cause problems it seems.\nAnd my earlier suspicion wrt use of AnnotatedClass.constructWithoutSuperTypes(...) might not be problematic.\n. With some more work, debugging, was able to finally reproduce the issue. It is a combination of things, but basically:\n1. If defaultImpl type extends base type (on which @JsonTypeInfo is defined)\n2. and there is at least one intermediate class that declares properties not inferred by base type or default implementation\n3. then such intermediate properties are not visible due to one gnarly part of type refinement\nin this case, that would be ServerFactory -> AbstractServerFactory -> DefaultServerFactory, where middle one defines many of properties.\nAn earlier fix alleviated the problem for other cases, but this one was not covered; full fix for problem that makes clean resolution harder will go in Jackson 2.8 (since it needs further changes to internal APIs), but I'll figure out a way to make it work at very least for this particular type of problem.\nIssue on jackson-databind for the problem is: https://github.com/FasterXML/jackson-databind/issues/1125\n. Fixed for Jackson 2.7.3; will try to see what else could be fixed, then issue 2.7.3 hopefully by this weekend.\n. 2.7.3 release of Jackson now complete.\n. @nickbabcock I would look into subtypes of JsonProcessingException. There are low-level problems with broken (non-well-formed) JSON (JsonParsingException I think), JsonMappingException for databinding (with more subtypes). There has been some on-going work into further dividing kinds of mapping exceptions into things like \"invalid format for this datatype\" (InvalidFormatException), \"property name doesn't ring a bell\" (InvalidFormatException), which may help. It's on-going battle, however, since handlers (deserializers) need to throw appropriate exceptions.\n. @nickbabcock That sounds reasonable at high level, although given that production of exceptions is initiated by individual deserializers it is likely there is variation. But I can and want to help there, so bug reports/PRs would be valued for cases where things do not work as well as they should.\n@mikewatt would be great to get a PR or just pointers to cases that do not work that way, would be happy to fix/improve them. I am close to releasing 2.7.4, so getting fixes in soon would be great.\n. @joschi I agree in that 2.8 probably not a good change quite yet; but curious whether any serious test failures remain in just-released 2.8.1.\nI noticed there are some failures for changed exception messages, but as far as I know these are things are just differences in wording. I would be interested in knowing if other failures still occur; could not quite figure out an easy way to skip/comment out these fails.\nAs to 2.7.6, I'll see if I can get it out by this weekend, so within next 3 days or so.\n. @joschi agree wrt 2.76. But I think the link you have is wrong; would be interested in seeing actual failure. Maybe I can help with that for future version compatibility.\n. 2.7.6 is now released.\n. @joschi I think those errors are with Jackson 2.8.0. I can see other failures with 2.8.1, ones about exception messages, but not the subtype problem which I think is fixed with 2.8.1.\n. Oh. Hmmh, no. I had only gotten to config tests, not core. You are right, failures still with 2.8.1. Rats.\n. Also, for versions that want to stick with 2.7, if any, there's 2.7.7 which has many/most of the same fixes. I'll try to keep 2.7 branch alive at least until end of year as it could be long-term stable branch to try to get most frameworks upgrade to (have had major hassles with Spark myself :) ).\nI'd also love to help with 2.8 issues if any remain. Did 2.8.2 release to flush all pending fixes.\n. @nickbabcock you are correct, not much has happened for those; it would be best to file separate issues since there's need for testing and some coordination on most optimal way to improve. By flushing fixes I meant ones that have been reported via issue tracker.\n. @nickbabcock Hmmh. How about I'll create one for improving URI / URL handling since I should be able to do it relatively easily. And if you could add another one for other aspects, wherever there is a clear path for improvement for specific Java types, and failures?\n. @nickbabcock Looks like InvalidFormatException was properly produced for java.net.URI, but NOT for java.net.URL: I fixed this for 2.8(.3) as the first step.\nAs soon as I get to know of other types for which same occurs they can be fixed quite easily.\n. Ok, so now there is the wider-ranging issue for jackson-databind, which I think is good and should help a lot for medium-to-long term.\nBut since that work has to go in 2.9 (new exception types added), I would also be interested in incremental improvements in the meantime. If there are commonly encountered failures, or even just ones triggered by tests, that could/should be improved within constraints of existing types, would be great to resolve those too.\n. @nickbabcock If feasible, I would look for both 2.7 (and before) and 2.8 messages, with a note mentioning which is which. I assume DW itself has no hard requirement to use 2.8.\n2.9 will take its time; current release cadence has been about 6 months between releases, which would suggest next version available at around Jan 2017.\n. Yes, this is something that would make sense to add under FasterXML repo I think.\nWe haven't gone through the details (not that there should be much) yet; I think it'd be used from 2.9.0 onwards. Until then, for older versions, I think outside location would probably work best.\n. @nickbabcock thanks for the ping. Since code here is for dropwizard-only, I don't think that directly affects Jackson itself. However, if NPE problems are found from within Jackson components (possible), I would be interested in learning about those to add bit defensive handling.\n. I would also be interested, if it was possible to further simplify test by making it stand-alone (not dependant on DW, and ideally also not Guava). If so, could add an issue for Jackson YAML module and hopefully resolve. I assume it is likely this is something Jackson module does and not DW, although not guaranteed yet.\n. @isaki-x ah. Ok.. I would actually like to get a reproduction for Afterburner as it seems like legit problem -- but not quite sure how to reproduce. I assume this is for lambda-generated class, and those probably should be ignored anyway, but trick is to figure out proper logic that does not require JDK 9.. I'll have to go back to ensure, but the idea was to verify that given Configuration object indeed is passed as-is, instead of being loaded from the resource.\n. Right. So, basically it exercises the new method, passing config, instead of a path to YAML resource from which Configuration would be read. Most of the stuff is fluff, scaffolding, the meat is just the construction of DropwizardAppRule and verifying client returns expected message.\n. @arteam Will try to get the rest (XML and Avro modules, JAX-RS) out today. Just wanted to verify one or two things on XML module. So yes, would be great to wait just one more day if possible.\n. Not sure if this helps, but there are couple of other JsonMappingException subtypes available, beside ones already checked for (InvalidFormatException, PropertyBindingException):\n- IgnoredPropertyException\n- InvalidTypeIdException (added in 2.8)\n- UnrecognizedPropertyException (subtype of PropertyBindingException)\nAlso if there is something small I could do wrt exception message I could consider changes for 2.8.2. I hope to keep messages (more) stable going forward. 2.8 changes were to try to unify messages, as well as allow more customized handling of problems via DeserializerProblemHandler extensions.\n. I think I could see a few things to improve on Jackson side. URI in particular should probably internally signal IllegalArgumentException (or similar), and then bound to one of JsonMappingException subtypes, most likely InvalidFormatException. This could go in a patch since I think it's sort of a flaw at this point, underspecifying failure.\nSimilarly, \"wrong token\" style exceptions (boolean for Object) should probably be indicated differently, but they are little bit more difficult to figure out.\nThis is actually kind of work I was hoping to get started by changes that lead to these practical problems: reworking error handling. I have added some structure, but there is no uniformity yet. I think DW use case, as an example, could be a good driver in figuring out semantic approach to signalling failures.\nNot sure how easy it is to divide things neatly into client/server buckets, however; it would seem that in many cases majority could be viewed as client problem, sending JSON that does not match expected structure.\n. ",
    "slavus": "I see, I also noticed there is duplacate of this issue so I will close it\n. ",
    "paulhill": "You might want to update the docs, spent some time trying to figure out what I'd done wrong to get html instead of text/plain. Would it make sense to have the error response respect the accepts header?\n. Hi Coda,\nI'll do that. I'm building a ReST API for a major gaming company and really appreciate the work you put into dropwizard. \nI'm up against a pretty hostile attitude to Java from the PHP and Node.js fans at work. They don't really get that it's not their grandaddies Java anymore. Any tips or links you could ping me to help me bring them around to the joys of the JVM would be much appreciated. \nThanks :-)\n-Paul Hill\nOn 2013-02-16, at 2:24 PM, Coda Hale notifications@github.com wrote:\n\n@paulhill, would you mind opening an issue about that? Surprises are for birthdays, not documentation.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll code this if you think I'm on the right track. \nAs I understand it I'll need to create a series of handlers and a command pattern style parent handler that will inspect the accepts header and then produce the appropriate WebApplicationException for that response type. e.g. text/plain, JSON, HTML, etc...\nI noted that jersey only seems to have two specific exception classes for error codes. Am I missing others, elsewhere?\nI'll try to keep it escaped but will likely require review from others for security issues. \n. \n",
    "whoschek": "The JacksonMessageBodyProvider exception is raised inside the resource method sayHello() (when talking to yet another third party service) and as such should be logged by default, IMHO.\n. Good point. Will try to remember next time :-)\n. ",
    "andreisavu": "Thanks! I will create a standalone repository for this code. \n. The repo for this functionality is available here: https://github.com/axemblr/dropwizard-swagger \n. Thanks! It makes sense to use maven for orchestration but it's also useful to be able to run them easily just from the IDE. I think there is no right answer but it's good to have options. \n. @alexandru I agree! I wrote this class because I needed a way to start the application with all the components registered (including filters, assets, custom servlets etc.). I can't use ResourceTest because the in-memory is not opening a server socket at all.\n. Where can I find an example of how to use Config objects? I had to write the config file because that was my only choice at that time. \n. Is this really needed or good hardcoded defaults are enough? \n. +1 for session support\n. I just want to add that it's possible to do the same thing by implementing a custom ServerCommand (e.g. server-with-session) \n. ",
    "timrobertson100": "Looks good.  \nYou asked on Twitter how others approach IT when using webservices.  We have a fairly complex IT setup (3 WARs participating including SOLR) which is all orchestrated by standard maven plugins.  We let Jenkins assign the random port using -Djetty.port=XXX.  We keep the IT as a separate module in the multi-module project so can run it on a separate schedule as it takes quite some minutes to complete.\nSee the comments in the POM to understand how it works:\n  http://code.google.com/p/gbif-registry/source/browse/registry/trunk/registry-it/pom.xml\nI'm not proposing you adopt the maven approach, but you asked.\n. @alexandru I also totally agree.\nWe use it mainly for system wide IT, rather than single app testing, where we really want to verify things like authentication checking etc (such as CAS cache redirections).  Sometimes it is useful as well to verify upgrades on HTTP libraries are working as expected - you end up writing so much mock stuff otherwise.\n. Thanks @mveitas\n. @mveitas I was actually trying to register filters that extend ContainerResponseFilter\nhttps://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/container/ContainerResponseFilter.html\nThey of course aren't suitable for the method you propose.  Is your method the preferred way for sure?  Those kind do work as described in my original post.\nI don't have any strong opinion on this - just looking for the recommended way as it seems ambiguous.  Thanks in advance.\n. Thanks for confirming @mveitas \nA useful improvement might be either typed parameters if possible or an instanceof test within environment.jersey().register(.) and throwing IllegalArgumentException to catch that as it's pretty easy to misuse at present.\n. Is this a limitation of: https://java.net/jira/browse/JERSEY-623\nMy issue is that I am trying to implement an API, so while I see myMethod(@Context HttpServletRequest request) works on methods with a provider such as that shown above it means all my method signatures can't implement the interface.\nAnyone know of a workaround that allows you to have @context injected class fields?\n. Much obliged @petergphillips - works perfectly!\nClosing issue as workaround is fine.\n. ",
    "alexandru": "Andrei, using ResourceTest is lighter on resources and it allows you to skip on loading resources you don't want.\nIn my opinion full integration testing are less useful for well-grown apps that have proper functional tests and real time monitoring, being more useful when tests are added after the application was built.\n. ",
    "igstan": "I needed a real server so that I can test methods requiring HttpServletRequest injection (which is not supported by the in-memory container). What I ended up doing was using the GrizzlyWebTestContainer: https://gist.github.com/3016987\nUnfortunately I had to copy/paste and modify the code in ResourceTest because it currently does now allow one to configure the test container factory. I could probably adjust ResourceTest and open a pull request for that, but I'm busy with a few other projects right now.\n. ",
    "jdamick": "I've done something similar and would find this extremely useful as well if it was built in, but having the option to either create the config obj or to use an existing configure file would be helpful. \n. ",
    "btiernay": "@codahale No offense but this is the type of remark that lead me to switch to Spring Boot. I respect the great work you've done with DW but I'm getting the sense that what you deem useful and what the community deems useful are generally quite different. \n. Sadness :(\n. Consider Capsule and its caplet-service\n. ",
    "tomakehurst": "Looks good. Thanks.\n. Hardcoded defaults are pretty awkward for nested config classes e.g. LoggingConfiguration. Where these are immutable it's necessary to subclass them, providing copies of the private attributes with the defaults set. Even when they're mutable and you can default them from your config class's constructor, I suspect the evaluation order would be wrong.\n. Thanks\n. Many thanks!\n. Thanks, that would certainly help.\n. Sure, will do that.\n. I smuggled in an additional method to retrive the Configuration object as I also find this to be useful. Hope this works for you.\n. Whoops, apologies. Will fix.\n. It'd be great to have a full-blown secure, tamper-proof cookie based session feature too.\nWe're building something like this at work currently, so that could potentially serve as a basis. Our implementation doesn't have to be particularly secure though, and I'm not a security expert so I'd have some reservations about just porting this over.\n. Perhaps I should create a sub-project called dropwizard-scopes for now?\n. Seems reasonable. By that logic, maybe it could live under dropwizard-views, since that's primarily what its intended to support.\n. Shiro only seems to support server-side session persistence. It'd be nice to do it client-side as (I believe) Rails does by default these days.\nAnyway, I'll focus on the flash scope stuff for now, and put it under -views.\nAnother quick question - do you have any philosophical objections to using ThreadLocal as a way of (effectively) binding objects to the current request? I'm looking for a way to avoid this, but I can't see one at the moment.\n. I see your point. I'm inclined to forget about sessions completely for the time being in that case.\n. No probs\n. Hey, I realise the ship's probably sailed on this one now, but would you mind having a quick look at this to see if it addresses your previous concerns?\nhttps://github.com/tomakehurst/dropwizard/tree/flash-scope/dropwizard-views\n. Recently I've been building services that have a presentation component but no session (or one managed by another system). For cases like this an external session store seems overkill, which leaves the in-memory option with session affinity turned on. I'm not that keen on this because a) it's operationally more complex and b) involves putting long-lived objects per new user on the heap. If I'm going to create a cookie either way I'd rather that was the sole bit of state. \n. That would be awesome\n. Exported here, in case anyone else ever asks:\nhttps://github.com/tomakehurst/dropwizard-cookie-flash-scope\n. Would it over-complicate things to support tokens with defaults in the YAML?\ne.g. bash style, where mainPort, altPort etc. can be substituted for system props:\nserver:\n      applicationConnectors:\n        - type: http\n          port: ${mainPort:-80}\n        - type: http\n          port: ${altPort:-8080}\n        - type: https\n          port: ${httpsPort:-81}\n. @nicktelford It could be implemented as a pre or post processing step in ConfigurationFactory, rather than requiring Jackson to support it. Agree it's a different feature, but this seemed like the best place to suggest it, as it's trying to solve the same problem.\n. ",
    "frodereinertsen": "A use case where this feature would make sense is when wanting to keep a config file out of version control, i.e. secrets.yml.\n. Related:\nhttps://github.com/bazaarvoice/dropwizard-configurable-assets-bundle/issues/20\n. ",
    "adamcath": "I want this too. Trying to shove defaults into classes I didn't write sounds just too painful, and hard to read. Anyone had success hacking it in?\n. ",
    "vvondra": "A nice touch would be able to override config files, or even by default be able to import them from one another.\nconfig.yml extended by config_prod.yml and config_staging.yml\n. @alph486 we're exactly hitting the OAuth token case. What was the path you chose to go?\nNot being able to configure the AuthenticationFactory per resource seems like a big limitation to us.\n. We're currently managing transactions manually like the SO answer suggest, but created a wrapper for it, which simply accepts a callback which should be executed in the transaction. It also handles nesting of transactions, since we decided to drop @UnitOfWork annotations and do everything on the service layer: https://gist.github.com/vvondra/1dbcd62306e40fa47294\n. @jplock In the end, since I use dropwizard-guice, I went with a simple proxy using https://github.com/google/guice/wiki/AOP or I actually inject a TransactionProvider class which has a method I can pass a callback to which will be executed transactionally\n. @ryankennedy \n- import depth wouldn't be limited, circular deps would be detected by keeping a simple list of visited imports and throwing an exception during configuration loading if a cycle is detected\n- I borrowed naming from Symfony2 in PHP (which probably borrowed it from Spring) http://symfony.com/doc/current/cookbook/configuration/configuration_organization.html#different-directories-per-environment\n- the inheritance order is pretty straightforward, we have all the import resolution logic before looking at the Configuration classes so that part of the code stays exactly as simple as before with the possibility of loading just one configuration file. (also answering @jplock )\n- it essentially just allows you to split the config file into multiple ones (anytime you import a file, any other properties you define override fields in the imported one, I updated the example in the first post with an example)\nOur use case is that we have three almost identical copies of the same config file for test/dev/prod and a ton of configuration options are shared. Now we have to make sure all of the files are synced. With this, we could have a base file and override the few variables which need to be changed in each env.\n. An alternative solution helping us would be making it possible to provide a custom ConfigurationFactory, right now it's very tough since the class has no interface and if you write a custom ConfigurationFactoryFactory, you must extend the existing implementation. But extending is an issue since a) its fields are private (making them protected would add surface for BC breaks) b) you must override quite a few methods and it's hard to guarantee the extended implementations won't change.\n. Since there are opinions for both yes and nay on this PR, I'd like to propose a much smaller change extracting an interface for the ConfigurationFactory for easier user implementation of such behaviour\nhttps://github.com/dropwizard/dropwizard/pull/1507\n. With #1507 merged, I'll close this and implement it on our own.\nI still feel this could be useful though, if somebody has ideas how to make the behaviour predictable enough, I'd love to hear them.\n. Added, it also makes the patch backwards compatible from calling side. Only break is if somebody extended ConfigurationFactory, they now must implement it or extend YamlConfigurationFactory\n. @jplock  @patrox  updated\n. @joschi It could be a nice addition to the documentation, since people will be often looking for this.\n. It's as easy as to create a new HealthCheck implementation with \njava\n @Override\n    protected HealthCheck.Result check() throws Exception {\n        return HealthCheck.Result.healthy(getClass().getPackage().getImplementationVersion());\n    }\nAdding this to core is a little tricky since it will print null if you did not package the code in a JAR\n. @bruce-genhot  See if using the JPAIntegrator works for you\nYou'll need to include the hibernate-entitymanager artifact\nSave this line as a file called src/main/resources/META-INF/services/org.hibernate.integrator.spi.Integrator\norg.hibernate.jpa.event.spi.JpaIntegrator. My comment is a little outdated, since the hibernate-entitymanager package was merged into hibernate-core. Or did you try with the latest version and succeed?. @arteam Agreed on the naming/versioning from Hibernate, though we can't do much about that.\nI see your concerns about Dropwizard versioning and I agree, for us updating to 1.0 took some time already and smaller steps are probably better. Feel free to keep this open as for revisiting later when the 1.2.x/2.0.x master branch is open and 1.1 is out or we close it and re-open, both are fine for me.\nWe've tried to upgrade and it's not that painful.\u00a0For the main part, Hibernate 5.2 adds a lot of deprecations which have scheduled removal in v6. E.g. the new org.hibernate.query.Query still extends the old org.hibernate.Query for compatibility. This might be an argument to include 5.2 in DW 1.1 or 1.2 and then have Hibernate 6 for DW 2.0\nI'll probably set this up as a package/bundle in the meantime on our side.. @arteam I updated according to your comments + since we support the new generic Query interface, add support for JPA CriteriaBuilder as well.\nHibernate doesn't deprecate the Criteria object itself but the createCriteria methods on the session object. Since the criteria APIs are pretty different, I'd let AbstractDAO support both Criteria and CriteriaQuery<E>. All of it is just in the before last commit.\nAbout the ExceptionMapper, there is one issue with it, that it failed before if the unwrapped exception didn't have a mapper. Jersey has a ExtendedExceptionMapper which allows you to check if you can trigger the mapper. That way the class would be re-usable and packagable among the default framework mappers . Reverted back to the previous one.\n. ",
    "cfieber": "thanks!\n. ",
    "chids": ":+1: for making the config file optional\n. Doh. Yeah that's a lot cleaner :) PR updated.\n. @codahale huh?\n. @codahale lol, thanks!\n. ",
    "rene-schulz": "I don't like it too much, but I could not figure out a simple way to add other loggers than console/file (syslog).\nBut I also don't understand why it is necessary or even useful to delete the existing log-configuration before adding the own log-config?! It would be much easier to respect the logback-configuration. Could you please add some documentation why you think it is useful not to do?\nThanks for pointing me to Bundle, I haven't seen that possibility and like it much more than adding another \"copy\" of logback configuration to the dw config. I think it would be a never ending story ... the next would be a splunk appender : o)\n. ",
    "deverton": "Thanks for the feedback. I've fixed that typo and a warning that I introduced.\n. I can either push another commit changing some whitespace or someone with write access to the repository can kick off a rebuild.\n. ",
    "arunh": "Good call, I'll fix it up tomorrow.\nOn 30 Jul 2012, at 20:04, Coda Hale\nreply@reply.github.com\nwrote:\n\nI think this should be part of JettyManaged's toString implementation, not Environment.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/dropwizard/pull/147#issuecomment-7378253\n. Change made as suggested.\n. \n",
    "getName": "Hi all!\nI am working with Dropwizard 0-7-0-SNAPSHOT right now and I would like to know where the \"Environment.scanPackagesForResourcesAndProviders\" method is located after these quite big API changes :)\nThanks,\ngetName\n. ",
    "mveitas": "getName,\nTake a look at the JerseyEnvrionemnt.packages method:\nhttps://github.com/dropwizard/dropwizard/blob/317f2e5cd4237fe5b94f5a525b0e3a3e4bc0667c/dropwizard-jersey/src/main/java/io/dropwizard/jersey/setup/JerseyEnvironment.java#L50-L58\n. @codahale Could you share some of your thoughts about making it more extensible on a page on the wiki maybe? The project is awesome and I would love to see it grow some more!\n. Having a rootPath set of /sv is perfectly legal. Have a look at http://account.pacip.com/jetty/doc/PathMapping.html\nI guess adding a warning/error log prior to printing out the list of resources could be done, but it would be a false positive for anyone that meant to set the mapping like that.\n. Dropwizard is only logging the resource mappings that it finds and makes no judgement if they are available or not. I think just making a small modification to the logging to say something like the following would make it more clear.\nThe following paths were found for the configured resources:\\n\\n\";\n. On a second look, it might be more straightforward for the ConfiguredCommand to have a method  getConfigurationInputStream() or getConfigurationInputStream(Namespace) that would return the InputStream for the configuration resource instead of exposing the details of how the parsing is done with the ConfigurationFactory. The default implementation of this would simply return a FileInputStream.\nThoughts?\n. Example of how this might work. I feel like there should be a more elegant solution instead of having to extend the ServerCommand but will work for anyone that needs to pull the configuration from an arbitrary source.\n``` java\n@Override\n    public ServerCommand getServerCommand() {\n        return new ServerCommand2(this);\n    }\nprivate class ServerCommand2 extends ServerCommand<HelloWorldConfiguration> {\n    public ServerCommand2(Service<HelloWorldConfiguration> service) {\n        super(service);\n    }\n\n    @Override\n    protected InputStream getConfigurationInputStream(String configurationPath) throws IOException {\n        return new URL(configurationPath).openStream();\n    }\n}\n\n```\n. How are you building your application? If you are using Maven or Gradle to build, you can view the dependency tree.\nSee the following Stackoverflow for a few possible troubleshooting tips: http://stackoverflow.com/questions/2877262/java-securityexception-signer-information-does-not-match\n. By default Spring looks for the filter named, \"springSecurityFilterChain\"\n. Previously this was available using the FilterBuilder. Is there a reason why your got rid of using the FilterBuilder?\n. Unfortunately the name of the filter is embedded within the FilterHolder which does not get exposed. Adding additional addFilter(....) methods that contain a name parameter is going to get messy really quick. I am happy to submit a PR with the added methods.\n. It looks like you are creating a new instance of the DelegatingFilterProxy instead of using the existing on that is created with the spring security context. I was able to get the Spring security stuff working on a separate branch of my code using the following:\n```\nfinal FilterRegistration.Dynamic builder = environment.servlets().addFilter(\"springSecurityFilterChain\", DelegatingFilterProxy.class);\nbuilder.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/*\");\n// Add the Dispatcher Servlet to enable the MVC request mapping for the Spring Security\nDispatcherServlet dispatcherServlet = new DispatcherServlet(webApplicationContext);\ndispatcherServlet.setContextClass(AnnotationConfigWebApplicationContext.class);\nfinal ServletRegistration.Dynamic servletBuilder = environment.servlets().addServlet(\"dispatchServlet\", dispatcherServlet);\nservletBuilder.addMapping(\"/auth/*\");\n```\nIf you'd like you can private message me if you'd like.\n. You can also do something like this to manage encrypted password values:\n@JsonTypeName(\"encrypted-https\")\npublic class EncryptedHttpsConnectorFactory extends HttpsConnectorFactory {\n    @Override\n    protected SslContextFactory buildSslContextFactory() {\n        final SslContextFactory factory = super.buildSslContextFactory();\n        try {\n            String decryptedKeyStorePassword = someDecryptMethod(getKeyStorePassword());\n            factory.setKeyStorePassword(decryptedKeyStorePassword);\n        } catch (Exception x) {\n            //We're going to want to abort startup over this\n            throw new RuntimeException(\"Unable to decrypt SLL configuration secret\", x);\n        }\n        return factory;\n    }\n}\nYou will need to add a file, META-INF/services/io.dropwizard.jetty.ConnectorFactory in your src/main/resources directory that contains the name of the above class. You can then reference it as such in your YAML configuration:\nserver:\n  applicationConnectors:\n    - type: encrypted-https\n. Can you provide any more details about this issue?\nI was able unable to replicate this with the following:\n```\nenvironment.jersey().disable();\nServletRegistration.Dynamic servletBuilder = environment.servlets().addServlet(\"simpleServlet\", new SimpleServlet());\nservletBuilder.addMapping(\"/simple\");\nfinal FilterRegistration.Dynamic filterBuilder = environment.servlets().addFilter(\"simpleFilter\", SimpleFilter.class);\nfilterBuilder.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/*\");\n```\n. +1\n. You've been reading and playing with cryptography too much lately ;) The credentials are encrypted but I respect your decision if you do not want to expose those credentials!\nCould you uploaded the latest snapshot manually on a regular basis as a compromise?\n. In regards to Liquibase, I have tested against the following commands as these are used within my app:\n- DbMigrateCommand\n- DbDumpCommand\n- DbDropAllCommand\n. Going to leave this PR open to just update Liquibase. There is an existing PR, https://github.com/dropwizard/dropwizard/pull/449, that contains a fair number of dependency changes.\n. I think this is great addition. \nMy only comment about this is that it's a dangerous thing as there is no way to guarantee the order of connectors in the example you provide. Someone could swap out the order in the configuration file without knowing overrides exist.\n. Out of curiosity, what the use cases for doing all this overriding? If there is a need to do so much overriding, does it not point out a need for a more complex configuration management mechanism?\nRiot Games has built a system with Dropwizard based upon https://github.com/Netflix/archaius\n. @saadmufti We have a set of properties files that we maintain for various testing and development environments. We use these files to create the yaml configuration files.\n. Mike,\nA Pull Request with the changes would be appreciated if you have the time.\nAre you using 0.7.0-rc1?\n-Matt\nOn Wed, Feb 5, 2014 at 3:26 PM, Mike Miller notifications@github.comwrote:\n\nI followed the Getting Started page and cut/pasted the code exactly and\nthe compile failed.\nCorrection - in section \"Creating a Service\" - the base code should be\nadjusted to include the additional imports for code to be added later:\nimport com.example.helloworld.resources.HelloWorldResource;\nimport com.example.helloworld.health.TemplateHealthCheck;\nLater in the page - you add these two lines to the service class but the\ncode doesn't have the imports so the compile fails. Adding these these two\nlines corrects the failure.\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/460\n.\n. I'd recommend switching to using 0.7.0-rc1. Not sure if the docs for 0.7.0\nwere updated, but if they weren't and you are unable to do a PR, can you at\nleast file an issue on GitHub for the documentation issue and someone can\nfix it up.\n\nThe updated docs are not on the dropwizard.io site, but can be viewed from\nGitHub: https://github.com/dropwizard/dropwizard/tree/master/docs/source\n-Matt\nOn Wed, Feb 5, 2014 at 3:34 PM, Mike Miller notifications@github.comwrote:\n\nIt would be my first, but I will give it a try. No, it looks like I copied\nthe pom stuff right from the page, which says 0.6.2 for core. (my first\ngo-around with Maven too!).\nI will update my pom and test it - and it that works - will also update\nthe maven dependency, if that's what you are looking for?\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/460#issuecomment-34237330\n.\n. Mike,\n\nThe dropwizard.io docs are still pointing to 0.6.2 and will be updated for\n0.7.0 as soon as some logistics are worked out. In the meantime you can\nview them on GitHub or build them locally.\n-Matt\nOn Wed, Feb 5, 2014 at 5:36 PM, Mike Miller notifications@github.comwrote:\n\nOkay, I will try that. On the down side - cloned the dropwizard project\nbut the getting-started.rst does NOT match what is on the website\ndropwizard.codahale.com/getting-started. On that site there is a section\non Creating a Service Class (where you create HelloWorldService), which is\nwhere I was going to update to include the new imports, but I don't see\nthat section in the files from the cloned GitHub project.\nI am willing to try and help if someone ones to 'point the way'.\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/460#issuecomment-34264790\n.\n. Mike,\n\nSorry for the confusion.\nTake a look at the Getting Started page on the master branch:\nhttps://github.com/dropwizard/dropwizard/blob/master/docs/source/getting-started.rstThis\nwill get you started with 0.7.0.  If you find any issues in the docs\nplease create an issue or submit a PR.\n-Matt\nOn Wed, Feb 5, 2014 at 6:07 PM, Mike Miller notifications@github.comwrote:\n\nSo if I am following this correctly, there's nothing there for me to\nchange and generate a pull request for? Whenever the docs do get updated\nfor 0.7.0, it seems like someone needs to make the following changes for\nthe Getting Started page:\n1) change the pom dependency to reflect io.dropwzard rather than\ncom.yammer.dropwizard\n2) change version from 0.6.2 to 0.7.0\n3) (the thing that started this issue) Add the two imports listed above to\nthe HelloWorldService class.\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/460#issuecomment-34272749\n.\n. The only comment I have is potentially adding a log warning if the ValidatorFactory is set to null to assist with troubleshooting. I am on my phone so can't comment on what would happen if it was null.\n\nIt might be a good idea to do this for other various configurable components.\n. @nicktelford Are you saying that you can't use something like this? Isn't this implemented by the JacksonMessageBodyProvider?\npublic Response create(@Auth String authId, @Valid Glucose glucose) {\n        ....\n}\n. @nicktelford I probably won't have any connectivity to my office VPN due to the snowstorm, so I'll probably have some time this afternoon to put together a PR for this unless you wanted to tackle this.\n. As @pimlottc mentioned it's not different than any other collection:  Map, the value of each Map.Entry is validated (the key is not validated).\n. The message syntax for the map would be tough as you most likely would want to base it on the key. They value of the key might be a complex value and have a meaningful way to display a string.\nAdding messaging for things such as a List or an array make sense, but how would you deal with a Set? There really isn't a way to return the index.\n@pimlottc If you would like to research this further and figure out what it would take to get intelligent messaging for the list element validations, go for it!\n. To be consistent with recording resource metrics, we should probably support the same behavior for measuring Task executions as it would also allow the naming of the metric to be customized. \nIn the end my decision to use the implicit Timer was based upon simplicity. Given that the Timer contains the information of a Meter, the only thing we loose is the ability to records the metrics for exceptions using @ExceptionMetered.\nI can make these changes to support the metrics annotations.\n. I agree with this feature being added for 0.7.1 as 0.7.0 needs to get out the door.\nWhile looking at the implementation for the metric annotated resource methods, I noticed that the InstrumentedResourceMethodDispatchProvider does not handle a resource method to have multiple metrics annotations. Any idea why this might be? It is possible that I would want to measure both successful and unsuccessful executions.\n@GET\n@Timed\n@ExceptionMetered\npublic String doSomething() {\n...\n}\nIn the case above the only metrics that would be recorded is the @ExceptionMetered and the @Timed would be ignored. See https://github.com/dropwizard/metrics/blob/master/metrics-jersey/src/main/java/com/codahale/metrics/jersey/InstrumentedResourceMethodDispatchProvider.java#L105-L130\nI modified the TaskServlet to be able to handle the combination of measuring success and failures. This is something that might want to be addressed in the Metrics project for InstrumentedResourceMethodDispatchProvider\n. @saadmufti I missed the dispatcher being set on the constructor!\n. @nicktelford, that is a good idea. I think when we run into the \"next\" item that we'd want to wrap with metrics, that would be the time to do it. In the meantime I will think about a possible way to do the abstraction. If you have any thoughts, please feel free to chime in.\n. @nicktelford I was playing around with abstracting some of the instrumentation code and this was a first stab at it. Don't mind the packaging as I did this all within the dropwizard-servlets where the TaskServlet lives as a POC. I was able to consolidate the logic to extract the annotations, but there is still going to be some boilerplate code to wrap the delegates.\nhttps://gist.github.com/mveitas/10267704\n. What version of DW were you running the last time this worked for you?\n. Log warnings are there for a reason, to alert you to something strange but not critical that is happening.\nYou should modify your configuration not to remove the graphite reporter from your configuration or use another type of reporter.\n. Yes you are correct in that there are some considerable changes between 0.6.x and 0.7.0, especially with configuration. There are a few logistical issues being worked out by the maintainers and once that happens a final 0.7.0 release will happen and the dropwizard.io page updated to reflect the new docs. In the mean time you can build the documentation yourself or browse it on GitHub.\nAre there any specific questions that you have? If you spot any deficiencies in the docs, please either submit a PR to fix them or create an issue.\n. I think the intent of only having a whitelist was to explicitly define the supported ciphers and protocols in case you wanted to deviate from the default set. This would protect against the addition of an unwanted cipher or protocol in case the underlying Jetty library was upgraded and introduced something that was not desirable.\nJetty certainly supports the exclusion of cipher suites and protocols, so easy enough to do.\n. I am unable to to replicate using JDK 1.7.0_45 on OS X and Ubuntu.\n@pimlottc any further information you can provide? Do you have any custom configuration? Can you try this against the dropwizard example provided in the project?\n. Please feel free to submit a PR with this change, they are always welcome!\n. Can you provide any more details and a sample configuration that you are using?\n. @halorgium I am seeing that the filters are being executed as expected on the delegate. What version of Dropwizard are you using?\n. Can you try to update to use 0.7.0-rc2 to see if this fixes your issue. The SNAPSHOT is from Sept of 2013.\n. Maybe someone else can take a look at this issue, but I am seeing the expected behavior. I have modified your test slightly: https://gist.github.com/mveitas/9640545. \nI was seeing some strange behavior at first, but realized b/c this is asynchronous, the queue is only drained when the batch size or the duration is met. In the modified test I have given the test some time to be able to pull items from the queue and process them.\nBelow is a snippet from the AsyncAppender:\n```\nwhile (running) {\n                try {\n                    // drain until we have a full batch or the duration is up\n                    Queues.drain(queue,\n                                 events,\n                                 batchSize,\n                                 batchDuration.getQuantity(),\n                                 batchDuration.getUnit());\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            for (ILoggingEvent event : events) {\n                delegate.doAppend(event);\n            }\n\n            events.clear();\n        }\n\n```\nIt is pulling items from the queue and then calling delegate.doAppend(event) which will in turn invoke the filters for the delegate in the ch.qos.logback.core.AppenderBase.doAppend(E eventObject) method.\n```\npublic synchronized void doAppend(E eventObject) {\n    // WARNING: The guard check MUST be the first statement in the\n    // doAppend() method.\n// prevent re-entry.\nif (guard) {\n  return;\n}\n\ntry {\n  guard = true;\n\n  if (!this.started) {\n    if (statusRepeatCount++ < ALLOWED_REPEATS) {\n      addStatus(new WarnStatus(\n          \"Attempted to append to non started appender [\" + name + \"].\",\n          this));\n    }\n    return;\n  }\n\n  if (getFilterChainDecision(eventObject) == FilterReply.DENY) {\n    return;\n  }\n\n  // ok, we now invoke derived class' implementation of append\n  this.append(eventObject);\n\n} catch (Exception e) {\n  if (exceptionCount++ < ALLOWED_REPEATS) {\n    addError(\"Appender [\" + name + \"] failed to append.\", e);\n  }\n} finally {\n  guard = false;\n}\n\n}\n```\n. @halorgium Could you run your example you provided against the latest master and check?\n. @Toilal \nThe AssetBundle could take care of this by default, but you would loose the ability to be able to add a servlet filter to the asset bundle.\nI think there just needs to be some better docs regarding this.\n. Looks like there was a regression in the code. I am not setup with a\nWindows system, so I can't say if this would work.\nIt should be a matter of adding the following at\nhttps://github.com/dropwizard/dropwizard/blob/317f2e5cd4237fe5b94f5a525b0e3a3e4bc0667c/dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java#L534\n```\nfinal String keyStoreType = getKeyStoreType();\n        if (keyStoreType.startsWith(\"Windows-\")) {\n            try {\n                final KeyStore keyStore =\nKeyStore.getInstance(keyStoreType);\n            keyStore.load(null, null);\n            factory.setKeyStore(keyStore);\n\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Windows key store not\n\nsupported\", e);\n            }\n        } else {\n            factory.setKeyStoreType(keyStoreType);\n        }\n```\nOn Mon, Mar 24, 2014 at 1:07 PM, Boyd Meier notifications@github.comwrote:\n\nI'm not sure about the explicit change that broke it, but the code in\n0.6.2 that supported the windows certificate store was here:\nhttps://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java#L228.\nI'd have to poke around in the current code base to see if I can find out\nwhat happened.\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/505#issuecomment-38471369\n.\n. Can you add a note to the docs regarding the precedence of the cipher suites to make it clear to anybody using the feature? Additionally a link to the sslyze project might be nice to include as well.\n. Curious as to what you mean by \"most of the projects\"?\n. I would say this is specific to your applications and not something that is common to most projects. If this is something that is common across your projects you might consider creating a base set of classes that are extended by each project to give the application this desired behavior.\n. @jhalterman Please submit a pull request for the feature.\n. @fedotxxl  Can you provide the details of what your handler looks like and how you have registered it?\n\nAlso please modify your logging configuration to either add global debug level logging:\nlogging:\n  level: DEBUG\nor\nlogging: \n  loggers: \n    com.yammer.dropwizard: DEBUG\nThe following is the Dropwizard ExceptionHandler that is processing the errors it\nhttps://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JsonProcessingExceptionMapper.java\n. There are less than a handful of these docs so I think keeping them at the root level is fine. \n. @timrobertson100 The proper way to register a servlet or a filter is to use the ServletEnvironment. There is nothing in the docs that talks about this and it should be added.\nenvironment.servlets().addFilter(\"myFilter\", new ResponseTimestampingFilter());\nor\nenvironment.servlets().addFilter(\"myFilter\", ResponseTimestampingFilter.class);\nhttps://github.com/dropwizard/dropwizard/blob/317f2e5cd4237fe5b94f5a525b0e3a3e4bc0667c/dropwizard-jetty/src/main/java/io/dropwizard/jetty/setup/ServletEnvironment.java\n. My misunderstanding... I thought you were looking for a server filter initially.\n. This is not a bug and the expected way to register a ContainerResponseFilter is to use the environment.jersey().getResourceConfig().getContainerResponseFilters().add(...) method you provided.\n. :+1: \n. Thanks!\n. This looks good to me. Thanks\n. I have noticed most of the latest PRs are being failed on Travis due to the enforcer failing\n. @nicktelford @carlo-rtr Any objections?\n. Yeah, there were a string of builds that failed for a bit before Nick fixed a dangling exclusion from dropwizard-servlets\n. While you can reduce this POM like you did and run it with Maven, the example is meant to display how to build an \"uber\" jar using the Maven shade plugin.\n. At this time the core Dropwizard does not support deploying as a classic war. There has been some talk in the past about being able to do this sort of thing. \nTwilio does have a GitHub project, https://github.com/twilio/wiztowar, that allows you to have your Dropwizard app deployable to something like Tomcat and is tied to Dropwizard 0.6.2.\n. I am not seeing this behavior. The behavior of the GzipFilter#init() is to add to the list of mimetypes, not overwrite.\nUsing the following configuration, I am seeing the list of known mime types to be compressed as well my custom values being added to that list.\ngzip:\n  compressedMimeTypes:\n        - application/foo\n        - application/bar\nIn BiDiGizipFilter it clears all the mime types and then adds the collection of mime types from the configuration:\npublic void setMimeTypes(Set<String> mimeTypes) {\n      _mimeTypes.clear();\n     _mimeTypes.addAll(mimeTypes);\n}\n. Looks good. Do you mind adding a test case for this?\n. @mkouba Thanks for the contribution. At this time, we are keeping the list of Dropwizard modules to core set of modules that we can maintain reliably. The list of committers is small and we do not want to stretch ourselves too thin. There will soon be a list of external modules and projects that extend Dropwizard included in the project as a document or the README. If you would like to create a new GitHub repo for dropwizard-views-trimou and you can maintain it as you like and we can add a link to your repository.\n. As of Dropwizward 0.7.0 there is a requirement to use JDK 7.\nSent from my iPhone\n\nOn May 3, 2014, at 4:40 PM, Tongguo Pang notifications@github.com wrote:\nI am trying to convert my company's DW 0.6.2 applications to DW 0.7.0-rc3, but it seems that the DW 0.7.0-rc3 artifacts are all compiled with Java 7. As my compnay is still on Java 6, is it possible that DW 0.7.0 release with Java 6?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the PR. I am curious if there is anything the existing logging mechanisms are not providing and if you had any specific use cases?\n. I agree with most of what Nick has to say and agree that we should address the shortcomings of the missing logging features. On the other hand this is a framework that provides sane defaults and the ability to override things via configuration if needed. I am torn about allowing someone to customize how logging is done if they need to. We already force logback to be used, so why not allow people the ability to configure it in the best way for them if there isn't a lot of heavy lifting to be done. We should encourage simplicity while not being overly prohibitive.\nOn May 12, 2014, at 6:22 AM, Nick Telford notifications@github.com wrote:\nThanks for highlighting two important features missing from Dropwizard's logging configuration, namely: per-logger appenders, and configuration of arbitrary filters. These are definitely issues we should address.\nHowever, I don't think using logback.xml is a good solution. If we permit people to use either Dropwizards' main configuration mechanism, or logback.xml, or both; things can become a lot more confusing. One of the major goals of Dropwizard is to make things as simple as possible for Operations people, and consolidating all the configuration with a unified format and documentation is one of the main ways we achieve this.\nAnother problem is that many of the components Dropwizard brings together have some external configuration mechanism. Logback, Jetty, Jersey, Hibernate Validator and Hibernate are all designed to be configured with arbitrary XML. If we start permitting logback.xml, where do we stop? Should we also make Jersey configurable from its XML file?\nI understand your frustration, especially in having to learn a different mechanism to the one you're already so familiar with, but I think the real solution here is to nail down what's deficient about what Dropwizard does and solve them, one by one, instead of circumventing much of the framework.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!\n. This is still possible with 0.7.x. You can do the following and you'll be good to go: environment.jersey().disable()\n. This looks good to me. A few small things:\n\n1) Can you write some tests for this\n2) What about PATCH?\n. Please feel free to submit a PR for this feature.\n. Yes please do update the docs or at least add a comment in the code about this\n. Brian,\nI like the idea and can bring value, it becomes an issue of maintenance. As with any docs you want them to remain up to date and accurate. Having stale info about companies that no longer use it doesn't do much good.\nMy suggestion if you want to show your support is to write a blog post on your company or personal site about your experiences with Dropwizard. I think the community will find a lot more value in this!\nSent from my iPhone\n\nOn May 20, 2014, at 11:02 PM, Brian Corrigan notifications@github.com wrote:\nWhen I use a new project, I always like to see who else is using it.\nWould there be any interest in creating some sort of \"Companies using DropWizard page\"? We use DropWizard to create APIs for our game clients, and we'd be really interested to show our support.\nCheers!\nBrian\n\u2014\nReply to this email directly or view it on GitHub.\n. Just curious if there was anything wrong with the existing imports? In some cases you change individual imports to use a wildcard and in other places you remove the wildcard import.\n. Jim we appreciate the effort. If you'd like please look through the open issue list for any open issues if you'd like to contribute!\n. Lgtm\n. The Travis build failed when the merge happened, but works locally just fine. Looks like FindBugs was taking a long time Travis killed the build.\n\n[INFO] Building jar: /home/travis/build/dropwizard/dropwizard/dropwizard-jersey/target/dropwizard-jersey-0.7.1-SNAPSHOT-javadoc.jar\n[INFO] \n[INFO] >>> findbugs-maven-plugin:2.5.3:check (default) @ dropwizard-jersey >>>\n[INFO] \n[INFO] --- findbugs-maven-plugin:2.5.3:findbugs (findbugs) @ dropwizard-jersey ---\n[INFO] Fork Value is true\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\n. Keeping all of the available configuration in one place is good and linking back to it from the client.rst works for me. \n. @saadmufti If you were to apply these settings to some code within the project, how much does it change? Just curious as how close this is with the current format. I'd hate to see people use this and mix up changes to actual code and formatting changes all at once.\n. What docs are you specifically referring to? If you'd like to make a contribution to the docs to make it clearer, it is welcome! A simple search on GitHub in the project will find the AssetsBundle (https://github.com/dropwizard/dropwizard/search?q=AssetsBundle&ref=cmdform)\n. :100:\n. :+1: to the idea. Who has a Coveralls account?\n. +1\nSent from my iPhone\n\nOn Jul 8, 2014, at 10:43 AM, Nick Telford notifications@github.com wrote:\nIf we want to support embedding Dropwizard applications it's probably better for us to refactor the bootstrapping process such that the current mode of operation \"embeds\" the application in the default CLI-based environment. I don't think this is a particularly good candidate for another module.\n\u2014\nReply to this email directly or view it on GitHub.\n. LGTM\n. @philion Did the suggestion by @joschi solve your issue?\n. @clarkbreyman If you'd like to submit a PR with a change to make a overridable factory method for the module that would be appreciated.\n. LGTM\n. LGTM\n. You are talking about an embedded property within an object correct?\n\nIt should not as JacksonMessageBodyProvider is doing the translation from JSON into an object and then running the validator on that object or each individual element of the collection. The underlying Validator handles the details of what is in the object.\nI can add a quick test case for that.\n. Thanks for the feedback. I'll make the tweaks and update the PR later today to remove the code duplication.\n. ",
    "dehora": "Ah; nothing, unless logging/level is DEBUG. I removed the loggers to get to this\nlogging:\n  level: INFO\n  file:\n    enabled: true\n    threshold: ALL\n    currentLogFilename: migration.log\n    archivedLogFilenamePattern: migration-%d.log.gz\n    archivedFileCount: 5\n    timeZone: UTC\nOtoh, This will log to file\nlogging:\n  level: DEBUG # @@@\n  file:\n    enabled: true\n    threshold: ALL\n    currentLogFilename: migration.log\n    archivedLogFilenamePattern: migration-%d.log.gz\n    archivedFileCount: 5\n    timeZone: UTC\nBut also outputs jersey/jetty, which I'm trying to skip.\n. > Please show me some of that.\nhttps://gist.github.com/2dd4540d760a84293300\n\nleave the thresholds alone \n\nCan't get any file logging without logging/level. I can set these to reduce noise,\ncom.sun.jersey: WARN\ncom.yammer.dropwizard: WARN\norg.hibernate.validator: WARN\nBut if i do this,\norg.eclipse.jetty: WARN\nNo logging to file. Logs to file -\nlogging:\n  level: DEBUG\n  loggers:\n    net.amadan.sal.migration: INFO\n    com.sun.jersey: WARN\n    com.yammer.dropwizard: WARN\n    org.hibernate.validator: WARN\n  file:\n    enabled: true\n    currentLogFilename: migration.log\n    archivedLogFilenamePattern: migration-%d.log.gz\n    archivedFileCount: 5\n    timeZone: UTC\nDoes not log to file -\nlogging:\n  level: DEBUG\n  loggers:\n    net.amadan.sal.migration: INFO\n    com.sun.jersey: WARN\n    com.yammer.dropwizard: WARN\n    org.hibernate.validator: WARN\n    org.eclipse.jetty: WARN # \u0ca0_\u0ca0 \n  file:\n    enabled: true\n    currentLogFilename: migration.log\n    archivedLogFilenamePattern: migration-%d.log.gz\n    archivedFileCount: 5\n    timeZone: UTC\nAm fairly sure I'm doing something stupid.\n. > You might want to read the Logback documentation to learn how it works.\nI will do that. Thanks for the help.\n. Elias, Coda, there's another Guice extension here I've found usable: https://github.com/jaredstehler/dropwizard-guice \n. ",
    "ajordens": "Thanks Coda.\nThat ViewMessageBodyWriter refactor's in-line with my thinking, it's good enough that there doesn't necessarily need to be a MoustacheViewRenderer out of the box I suppose.  It's only a handful of lines either way.\nCheers.\n. Also should mention, the new constructor parameter is optional. The original behaviour will be maintained if no additional arguments are provided.\n. I like the changes to Validator and exposing more than just the error messages to an exception mapper, that's powerful and something my team has had to work around in the past. In our case, we wrote our own validator wrapper and handled it outside of @Valid.\nHowever, personally, I think I'd stop short of trying to bake in a way to configure/wire-in yet another exception mapper. \nInstead, I'd really like a way to just completely disable the built-in mapper defaults. It's currently possible ala. http://thoughtspark.org/2013/02/25/dropwizard-and-jersey-exceptionmappers/, but hacky (we're currently using slightly less kludgy code than in that blog post, but you get the point).\nCoda had some strong beliefs that drove his original thinking behind exceptions rendering as html, and that should stay the default (it's been there since the beginning anyways). I'm not sure it's necessary to have a default JSON mapper in dropwizard-core, as a service implementor I'm content having to provide my own mapper that returns data the way the rest of my systems expect.\n++ on exposing ConstraintViolations out of the validator, useful stuff for sure.\n. Thanks @cobbzilla.\nI think we're in agreement, but my point was that the increment benefit is certainly in cleaning up a bit of how the validator operates and getting more error context into the InvalidEntityException.\nIf we had that, than anyone wanting to write a custom mapper would only have to remove the existing ones (which is possible but hacky) and add their own, rather than having to subvert the entire validator->map stack with their own code that is called from resource methods.\nSo yes, I am advocating taking a small step before a big one. It might be (from the library/server side) not exactly the right move, but then again, it doesn't affect clients (no method/signature changes), and the ROI is big -- many, many REST clients get 422s and want to handle them programmatically.\nAgree here, this topic has come up before and I have been impacted building services that expected it. Way back when, I originally was looking at mappers that obeyed Accept headers and returned appropriate responses.  \nI guess what I'm considering an incremental step forward is more along the lines of making the removal of defaults clearer, and then outlining that in the documentation (right now I suspect implementors just find out that exceptions are being mapped out to HTML). Maybe adding alternative constructors to the default mappers to make replacing the UnbrandedErrorHandler possible. Little things that don't chance default behaviours but make it easier for us to build upon.\nApplaud the efforts nevertheless, and if Coda ultimately agrees that these changes are inline with his and the projects goals, I'll be happy.\n. Sounds reasonable to me.\n. Nice, it sounds more reasonable to me with the new entity mapper reverted.\nOn a related note, was discussing Dropwizard with another engineer at a JUG this week and he brought up the oddity of exceptions being rendered back as anything but JSON :)\n. This seemed like a common enough problem that it may warrant inclusion alongside the other filters in dropwizard-servlets.\n. Thanks for the feedback. I'll get your suggestions incorporated.\n. Will open another pull request with a single clean commit containing the change set.\n. This pull request includes updates to the LoggingExceptionMapper, it'll now use the service request id from the MDC if available.\nAlso moved away from using a UUID for the service request id, and just am using the ThreadLocalRandom to generate a suitable identifier.\nHeaders are now X- prefix'd.\n. ",
    "cemo": "Nick you are really doing great things but I believe these archetypes will bring extra costs for maintaining to project / Coda and It might be better to be a separated project. \n. Sorry Nick, I missed this conversation. \n. @codahale \nIs there any change to include support for partial validations for the upcoming release? \n. Actually I have a windows development environment too and have \\r\\n issue but I've decided to be quite since I saw the comment  <!-- I don't care about Windows, sorry. --> at findbugs-exclude.xml. :) \n. @Omega359 It seems that you have overwritten RuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)  and ResourceNotFoundException can not be built on java 1.6\n. On branch #183 now it seems ok, but \\r\\n issue is still problem.\n. @codahale what do you think about a ValidationBundle? And singleton validator instance?\n. It would be nice to be provide an interface. But it would be little compelling task since there is multiple instance of Validator. Maybe it is a good idea to having only one instance of Validator and registered by ValidatorBundle on Environment.\n. @codahale, \nI know that this is not your first priority but would you be interested in a pull request to update about this? I am considering exposing a validation bundle but if you have another idea I would gladly implement it.\n. Seems fine. Thank you so much. \n. Actually my problem is creating my bundles with database parameter. Database is created at Service#run method. Because it needs environment and this is the only place to create database.\nThe current order of running is at EnvironmentCommand: \n// run bundles\n    bootstrap.runWithBundles(configuration, environment);\n    // run service (database created at this method)\n    service.run(configuration, environment);\n    // run command\n    run(environment, namespace, configuration);\nWhen service is runned, there is not any change to run bundles anymore. \nI would like to register my bundles as you have done at examples initialize method which is pretty suitable in terms of bootstrapping logic. \nIf you point an example bundle which is utilizing database, you will make my day. :)\n. Creating Jersey resources and these resources are utilizing DAO Objects.\n. @codahale I have checked but really I could not see  the point. Could you make it clear for me? What I want is just passing database instance to my bundles.\n. It would be nice. \nBy the way, I had a similar issue last month and I had to completely overwrite ResourceTest in order to use my custom  inmemory test container.\nhttp://java.net/jira/browse/JERSEY-1392\n. Have you ever checked existing implementations? \nhttps://github.com/search?q=dropwizard+guice&repo=&langOverride=&start_value=1&type=Repositories&language=\n. @codahale, your latest changes might fix this issue as well via https://github.com/codahale/dropwizard/commit/3cc41d33171a46a44196e76994fb704bdbe1355c. But currently com.yammer.dropwizard.config.Environment#getServletContextHandler is package protected. Any chance to make it public?\n. @codahale, your latest changes might fix this issue as well via https://github.com/codahale/dropwizard/commit/3cc41d33171a46a44196e76994fb704bdbe1355c. But currently com.yammer.dropwizard.config.Environment#getServletContextHandler is package protected. Any chance to make it public?\n. This would be a good asset for the project. Any interest for an updated pull request? \n. On 2 August 2013 13:28, Florian Leibert notifications@github.com wrote:\n\nparts of dropwizard are compiled with JDK 1.7 - thus on default ubuntu\nimages, it won't run. Could you guys cut a JDK 1.6 release?\n\nThat might not be possible. As far as I remember Jetty 9 requires JDK 1.7.\n. Latest stable Dropwizard (0.6.2) uses JDK 1.6\nhttps://github.com/codahale/dropwizard/tree/v0.6.2 \n. @joschi @nicktelford \nIs there any progress for Jetty 9.2.x? It would be awesome to release a version after metrics release with latest Jetty.\n. Definitely latest.\n. Great job guys.\n. Metrics 3.1 is released.  :)\n. @joschi is it possible to merge this PR? \n. @saadmufti I know that this is at least your 3rd rebase but hope that it will be last. :) Thanks for your efforts.\n. I am totally agree with @kilemensi. \n. +1 for removing final\n. @reines +1\n. +1\n. @joschi DW has excellent features to write an embedded application infrastructure. I am using DW to start custom commands such as a server to start Spring Server. And here is my implementation:\nhttps://gist.github.com/cemo/2242a1149f6413576353\nI would be glad to overwrite run method in my implementation instead of writing another runSpring method. I could not do because of being final.\n. @joschi First of all I am sorry for late reply. I have already written a custom command which is encapsulated by SpringServerCommand. \nhttps://gist.github.com/cemo/2242a1149f6413576353#file-gistfile1-txt-L25\n. awesome @joschi \n. @saadmufti and @joschi Thanks for your effords guys. \n. ",
    "gary-rowe": "@nicktelford You might want to include a reference to this site: http://www.webestools.com/ascii-text-generator-ascii-art-code-online-txt2ascii-text2ascii-maker-free-text-to-ascii-converter.html \nThey provide a great way to generate the ASCII art.\n. ",
    "pasviegas": "I think it would be nice if the archetype also suggested default packages like the ones in the example module. (resources, cli, health..)\n. I think this could be done with a InjectableProvider. I could do it, if it is wanted.\n. ",
    "klette": "Anything left to do on this one? If this is the only issue blocking the 0.7 release :)\n. @yunspace: I get that error if I have any Jersey 1.x jars in the classpath. So check if you got any 1.x libraries hanging around\n. Should probably be removed :)\n. ",
    "sinelaw": "Will this ever get merged?\n. ",
    "ryankennedy": "@nicktelford want to take a look at #776 to see if you're happy with that? I'm going to close this pull request for the time being in the interest of cleaning up the open list to get a better look at what we've got.\n. After setting a break point in both providers, I sadly admit you are correct.\n. I take it back. MessageBodyFactory._getMessageBodyWriter() evaluates JacksonMessageBodyProvider before it evaluates StringProvider. JacksonJsonProvider.isWriteable() is indicating that it cannot write the value because _untouchables includes String.class. Looking closer at the inclusion, it appears String.class was put back into the _untouchables list by @cowtowncoder as a result of this bug:\nhttps://github.com/FasterXML/jackson-jaxrs-json-provider/issues/12\nThat bug, however, appears to have been targeted at dealing with an XML issue, not a JSON issue. So I'm unsure why JacksonJsonProvider was affected\u2026unless the XML bits of Jackson are also using that class. It may be helpful if Tatu chimes in.\n. Blah, JAX-RS feels broken here, but you're right about the cases you mentioned. \n. I've created the JIRA account with Sonatype and am just waiting for them to create the corresponding artifactory user with SNAPSHOT access only.\nhttps://issues.sonatype.org/browse/OSSRH-12020\n. I've started digging into a Jetty 9.1.3 upgrade and ran into this. I noticed that the use of ConcurrentArrayBlockingQueue is inside of io.dropwizard.logging.AsyncAppender, which is an asynchronous logback appender. Logback has since added their own AsyncAppender, which was noted in Coda's original commit of AsyncAppender:\nhttps://github.com/dropwizard/dropwizard/commit/7d9f9efbe34bd490236f169e6db8589831ce5135#diff-8cf303d0db5bd7b7961db6e9999570b6\nIt might be better to just replace the Dropwizard AsyncAppender with the Logback one, which should (AFAICT) remove our only dependency on ConcurrentArrayBlockingQueue.\n. Unclear. I'm working locally on unwinding some of the transitive dependency\nproblems. I'm hoping the Jersey 2.x branch helps with some of those, but I\nhaven't looked at the progress made in that branch. That's probably my next\nthing to look at.\nRyan\nOn Wed, Apr 23, 2014 at 11:44 AM, Benjamin Black\nnotifications@github.comwrote:\n\nHow far are we from having DW on Jetty 9.1.3, now?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/452#issuecomment-41199069\n.\n. Catching up on this now that I have some time. What needs doing to tie this one off? I have some spare cycles. Is it just integrating the new metrics release?\n. Looks like they're on 9.2.3 now. Should we make the jump all the way to there or is there a reason to hold back on 9.1.x?\n. Oh, nice. I'll start a PR for 9.2.x this evening, then.\n\nRyan\nOn Sun, Sep 28, 2014 at 9:45 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nMerged #453 https://github.com/dropwizard/dropwizard/pull/453.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/453#event-171195302.\n. Ah, I hadn't seen your subsequent commit. Thanks!\n\nI'll spend some time tonight and tomorrow kicking the tires, checking\ncoverage, etc.\nRyan\nOn Sun, Sep 28, 2014 at 3:32 PM, Jochen Schalanda notifications@github.com\nwrote:\n\n@ryankennedy https://github.com/ryankennedy Current master already is\non Jetty 9.2.3, see 93d3ee5\nhttps://github.com/dropwizard/dropwizard/commit/93d3ee56fd9b68e24a50638f28229820553791fd.\nBut more thorough testing, especially after the upgrade to Jersey 2.x, is\ndefinitely welcome. [image: :wink:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/453#issuecomment-57102867.\n. I suspect virtually nobody was messing with the async logger configuration, so disruption should be low. It's not even mentioned in the documentation, assuming a quick grep through the whole repo would have turned it up. So while it is breaking from a configuration perspective, I suspect the damage would be minimal.\n\nIn addition, Logback's AsyncAppender seems to have better semantics than the one that's already there. Logback is smart enough to drop lower priority events (trace, debug, info) in favor of higher priority events (warn, error). So I think it's a win-win.\n. I think we're going to need more code to know what's happening. Is there any chance you can reproduce this in a minimal bit of code that you can put up someplace for us to see?\nClosing for now. Reopen if you can provide more information.\n. I've created the JIRA account with Sonatype and am just waiting for them to create the corresponding artifactory user with SNAPSHOT access only.\n. It looks like this comes with some pretty significant user-facing API changes. Can someone sum the changes up (I keep losing a mental list as I scroll through commit d5410fb)? The API changes appear to be more feature development (role-based auth) than bug fixing. Maybe I missed the discussion around the API changes, but this seems like something the committers may want to have a quick discussion and vote on.\nThere's a little bit of context lost between Feb. 22nd and March 10th in this thread where the issue was reopened. But it looks like if we reordered the parameters internally (we could generate a proxy object) then Jersey could be made to do the right thing, which would fix this bug without introducing the API change.\nThe original authentication API was intentionally pretty simple. From quickly looking at the diffs in the commit, the changes to user applications appear to be significant.\n. Do we have a test for this anywhere? That might be a good place to start, especially if we can see it failing on a Windows machine. Our current CI environment (Travis CI) doesn't support Windows build environments, but if we have the test we can manually run them on a Windows host to verify things work well enough there.\n. I assume the exclusion of hibernate-validator is because we're pulling it in as part of dropwizard-validation and don't want Jersey's bean validation bits to stomp the version we're pulling? Is that going to be safe to do going forward? Is there any way to move these bits to dropwizard-validation instead so all the validation-related bits stay in one place? I assume removing hibernage-validator from dropwizard-validation would suddenly cause some awkward runtime and, maybe, test missing class failures way over in dropwizard-jersey. Maven exclusions make me nervous for long-term maintenance.\nI'm a little confused as to why people are POSTing empty bodies, having their resources take an argument, and complaining when it says foo = null is not a valid foo. It's triggering my smell test. Like\u2026why would you do that? Especially the one talking about an empty POST for a login request being a valid request. I'm not sure how opinionated to be about that one. But I'm not sure that's a problem I'd aim to solve.\nOut of curiosity, why aren't these validations just working right now? Is this for validation annotations in the resource method parameter list (i.e. Foo getFoo(@NotNull FooRequest req))? I assume validation annotations in the representation class (i.e. class FooRequest { @NotNull String id; }) are already working since we advertise that in the docs.\nI'm fine with the new dependency if we don't see a way we'd deeply regret adding this feature down the road.\n. Cool, thanks for the explanation Jochen. I'm a +1.\nRyan\nOn Wed, Apr 15, 2015 at 6:45 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nAh, sorry for not responding. Completely overlooked the replies on this PR.\nI assume the exclusion of hibernate-validator is because we're pulling it\nin as part of dropwizard-validation and don't want Jersey's bean validation\nbits to stomp the version we're pulling?\nYes, exactly. In the end it's excluded to make the Maven Enforcer plugin\nhappy. The alternative would be to add Hibernate Validator to the\ndependencyManagement section of the parent POM to enforce a certain version\nof it. We should probably do that anyway.\nThis being said, it's rather unlikely that we remove Hibernate Validator\nin the foreseeable future because it's quite deeply embedded in\ndropwizard-validation.\nIs there any way to move these bits to dropwizard-validation instead so\nall the validation-related bits stay in one place?\ndropwizard-jersey pulls in dropwizard-validation (see pom.xml\nhttps://github.com/dropwizard/dropwizard/blob/58c4d52ce212d05b691e80e5ff687c92a24d510f/dropwizard-jersey/pom.xml#L20-24)\nand this feature is tightly coupled with Jersey. It's completely useless\nwithout dropwizard-jersey, so I assumed putting it in there is the right\nplace\u2122.\nOut of curiosity, why aren't these validations just working right now? Is\nthis for validation annotations in the resource method parameter list (i.e.\nFoo getFoo(@NotNull https://github.com/NotNull FooRequest req))?\nYes, exactly. Some annotations (namely @Valid and @Validated) can already\nbe used in Resource classes, others are currently limited to value classes.\nIf the addition of this feature doesn't impose a large performance\noverhead (which we should test), I don't see a reason not to add it by\ndefault.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/842#issuecomment-93406630.\n. Ben, I'd consult with the Microsoft lawyers first about removing Yammer\nfrom the copyright. Just to make sure there's no issue in doing so. Then\nagain, I feel like telling you to go talk to corporate attorneys makes me\nthe bad person. ;)\n\nI believe part of the discussion there was also around having Microsoft's\nattorneys around to help enforce the copyright if we ever needed to.\nRyan\nOn Thursday, March 12, 2015, Ben Smith notifications@github.com wrote:\n\nIt would be way better to dynamically work out what year it is, I just\ndon't know how to test build the docs site.\nIf someone knows, that would be better.\nAlso, should we remove Yammer from the Copyright? Maybe @ryankennedy\nhttps://github.com/ryankennedy would know.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/dropwizard/dropwizard/pull/938\nCommit Summary\n- Change copyright notice to be up-to-date\nFile Changes\n- M docs/source/conf.py\n  https://github.com/dropwizard/dropwizard/pull/938/files#diff-0 (2)\nPatch Links:\n- https://github.com/dropwizard/dropwizard/pull/938.patch\n- https://github.com/dropwizard/dropwizard/pull/938.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/938.\n. Back in the days before Yammer's legal council was let go I'd say we could\nwork through her. These days I don't remember who's left there that would\nbe good to work with.\n\nCoda's fear still stands. Without copyright from an entity with teeth to\nenforce it, I'm not sure we'd want to remove it. So unless we have a good\nreplacement, it might be best to leave it. Assuming, of course, that\nYammer/Microsoft would even do anything if needed...the track record isn't\ngood (no offense to my ex-colleagues on the list, it's an organizational\ncomplaint not a personal one).\nRyan\nOn Tuesday, March 17, 2015, Carlo Barbara notifications@github.com wrote:\n\nIs there an easy way to ask the lawyers without going thru some crazy\nprocess? I'm personally not up for that challenge. If not, I'm inclined to\nsay we should close this and leave the copyright as it is.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/938#issuecomment-82398940.\n. This is really cool. Any reason not to shade the final JAR and make the Main-Class be org.openjdk.jmh.Main? I just pulled these changes down and tried to run them but the resulting JAR doesn't have a Main-Class attribute in the manifest and even specifying the DurationBenchmark class results in a java.lang.NoClassDefFoundError: io/dropwizard/util/Duration.\n\nThe instructions for generating a project using mvn archetype:generate generate a POM with shading and the Main-Class set up like I mentioned above. I'd be happy to go in and make the changes, but I first wanted to make sure @arteam hadn't skipped those for good reason.\n. advancedLoggers feels like a bit of a wart on the side of the configuration.\nWhat if we extended the appenders, instead? Provide them with a \"loggers\" list property consisting of the loggers that should write to that appender. Default the list of loggers to all loggers. That would be backwards compatible and provide the intended functionality.\nlogging:\n  level: INFO\n  loggers:\n    wego.curiosity: DEBUG\n  appenders:\n    - type: file\n      loggers: [wego.curiosity]\n     ...\n    - type: console\n      target: stdout\n      logFormat: \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n\"\n. Why isn't it good enough to log wego.curiosity to a separate file? Create an appender for that file and add wego.curiosity to the loggers list for it. If the concern is that it would still be logging to the other appenders, we could have includedLoggers (defaulted to all loggers) and excludedLoggers (defaulted to no loggers) for each appender.\nTo play the other side of the coin, what if you want to log wego.curiosity and yougo.curiosity to the same file? Will you spec the appender twice (once for each logger)?\nAs for appenders knowing about loggers, I'm only talking about the relationship between loggers and appenders is configured. How the loggers get hooked up to appenders under the hood is (in my mind) separate from how the relationship gets configured in the YAML file.\n. I still think putting appenders in the loggers will lead to appenders being spec'd repeatedly and in multiple locations. I think either have the loggers refer to the appenders by name (something we don't have today\u2026an appender name) that they want to be a part of or have appenders refer to the loggers they'll handle output for. Appenders are already an object, so the code change is minimal. Loggers would require either breaking compatibility (switch from level to an object); adding a new loggers property (the advancedLoggers suggestion), which I think looks wart-ish; or make loggers polymorphic, which I think impacts readability of the code (I refer to configuration classes often when I'm trying to figure out how to configure a thing\u2026JsonNode isn't self-documenting).\nMy preference is to add the loggers list to the appenders because it requires the smallest change to the code/configuration format and because it avoids duplicating appender configuration and avoids having appenders configured in multiple locations.\n. @arteam I'm also fine with an 0.8.2 release with those fixes.\n@pparth \"Waiting for months until 0.9.X version with the fix is out, shows that you do not handle Dropwizard latest version as a production-worthy framework. We are trying to switch from 0.6.2 to 0.8.x for many months now, waiting for major fixes to be applied and now we need to wait for 0.9.x, with whatever that means in terms of backward compatibility etc!\"\nFirst, please mind your tone (implied by the exclamation points).\nSecond, I think your date math is a bit off. You posted this on June 27th, mere days away from July. @arteam already indicated that 0.9.0 was coming in the early weeks of July, which is hardly months away.\nLastly, understand that Dropwizard is maintained by volunteers. There are no companies explicitly making money or time available to this project with the possible exception of Rent the Runway, which is (I believe) paying some of our hosting fees. For the employee of a company making $1B+ in revenue per year to make angry demands of volunteer staff seems ridiculous. Please try having a bit more respect and understanding for the people you're talking to.\n. I'm going to give you the benefit of the doubt and assume that there may be a language barrier that's preventing me from reading your tone/intent correctly. If English isn't your first language, then understand that your English isn't conveying the \"respect\" you refer to.\n\"So, based on my assumptions, 0.7.x is unusable. I really do not understand why it is still documented and mentioned as a release that someone can actually choose to use it.\"\nCompanies are using 0.7.x in production today. I believe this is the first time JERSEY-2786 has been brought up within the Dropwizard community (I could be wrong, however). It probably has to do with the fact that it appears to be an issue in Jersey Client, which not everyone is using. If you're only using dropwizard-core but not dropwizard-client then your chances of running into this leak appear to be roughly zero.\n\"If the focus is switched to Dropwizard being a theoretical, academic work that it should not be judged by anyone, that the maintainers do not care in what environments it is used and big companies are especially banned, just let me know so that we can decide what route to follow from now on.\"\nYou seem to be inferring quite a lot, especially with regard to the degree to which maintainers \"care\". Several maintainers (sadly, this doesn't include me at the moment) are putting in many of their own personal hours on this project. That's a pretty high degree of \"care\".\nOn the flip side, many companies (including Yammer, where Dropwizard originated) are using Dropwizard to power their multi-[million|billion] dollar companies without contributing much of anything back. If anyone should be judged, it's them. Especially when they show up in our community indignant over our state of library upgrades.\nYes, the documentation says \"production ready out of the box.\" Yes, we appear to have an unfortunate memory leak in the dependencies of one of the modules in the latest release version. If you have a problem with that I have some possible solutions for you:\n1) Roll up your sleeves and give us a hand.\n2) Convince Upwork to pay for a part/full-time contributor.\n3) Sit patiently on 0.6.x until 0.9.x is ready.\n4) Fork the project.\n5) Go someplace else.\nIf you're going to roll in here spouting \"back when Coda ran this show\u2026\", I'm going to quickly shush you and point you towards the door.\nCoda is gone.\nThe community is doing the best it can.\nI'm not at all sorry that this free open source project isn't meeting the expectations of a multi-billion dollar company that contributes nothing to it. Give us a hand, lower your expectations, or go someplace else.\n. Would --strict-checksums have caught this? Seems like a good thing to set, assuming it's not already the default behavior.\n. I agree with Glenn about it being a security issue. That said, if someone's\nalready on the box you have to really hope the configuration files\nthemselves (dropwizard yaml, upstart configs, EC2 user data, etc) are well\nlocked down. I think a bigger issue with logging it could be what happens\nif you're using log aggregation and the log aggregator's access controls\naren't as strong as the permissions on the box (this is a pretty common\narrangement at most places I've worked).\nThere's potentially a parallel discussion to be had on things like\nPersonally Identifiable Information (commonly PII) in data (requests,\nresponses, database records, etc) and how you prevent that from being\naccidentally sent to places it shouldn't be (logs, other services, etc) as\nwell.\nI'm curious to see some kind of semi-detailed proposal for this. Nothing\nover the top, just some mockups of code/configuration and high level\nexplanation of how it would work. I think it'll be easier to discuss\nsomething more concrete. At my current job, we tend to put together a quick\ndoc in Google Docs and use the commenting features, which works okay. I\nhave no idea how others feel about something like that, I'm just throwing\nit out there.\nRyan\nOn Wed, Jul 15, 2015 at 7:32 AM Glenn McAllister notifications@github.com\nwrote:\n\nWhat @mikeycmccarthy https://github.com/mikeycmccarthy said. Dumping\ncredentials in a log file is a major security issue. If an attacker has\nread access to your system and can see those logs, they now have lateral\naccess to a database system or REST service, from which they may get more\ncredentials, etc. These days it's all about lateral movement.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1156#issuecomment-121634814\n.\n. The \"with the proper security controls in place\" is the important step\nthere that we haven't really taken with the admin endpoint. The admin\nendpoint can be used to do some not so great things to a process (triggering\na GC\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/GarbageCollectionTask.java\nor setting the logging level to debug\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java,\nfor instance).\n\nI personally like the task, but it doesn't address the issue of being able\nto print the configuration when a fatal issue arises (you won't be able to\ncall the task if the service dies). Matt Carrier mentioned that as a use\ncase he's particularly interested in supporting.\nRyan\nOn Fri, Apr 1, 2016 at 8:56 AM Justin Plock notifications@github.com\nwrote:\n\nInstead of logging, could we have a task endpoint that could just dump the\ncurrently running config (with the proper security controls in place)?\nMaybe only allow the endpoint to be called from localhost or something as\nwell.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1156#issuecomment-204448534\n. My one concern is that we'll suddenly be taking an exception message and returning it to clients. If anyone does the following, for instance\u2026\n\nthrow new ForbiddenException(\"Don't tell Bob, but we've flipped the super secret flag that doesn't allow him to perform this action anymore.\")\nSuddenly that message becomes public to Bob.\n. WebApplicationException and its subclasses \"bleeding\" through to the web app layer if not \"caught and handled correctly\" is not a major flaw in JAX-RS, it's the intended design pattern. For better or worse, this is how you get to have pretty resources methods like:\n``` java\n@Path(\"/games/{id}/score\")\npublic class SportScoreResource {\n    private GameDAO gameDAO;\n@GET\n@UnitOfWork\npublic SportScores getSportScores(long gameId) {\n    Optional<Game> game = gameDAO.findById(gameId);\n    return game.map(ApiMapper::gameToScore).orElseThrow(NotFoundException::new);\n}\n\n}\n```\nWithout being able to throw NotFoundException and have it generate a 404 the only way you'd be able to signal to JAX-RS that you want to generate a 404 would be to have your method return javax.ws.rs.core.Response. Suddenly my JAX-RS is starting to look an awful lot like Servlets again. It's also far more difficult to test than my version, which is just a simple Java object that just happens to be annotated with some JAX-RS annotations.\nif any Jersey client throws some ClientErrorException with an entity (because let's say some remote server returns a rich error message), this will also be returned to Bob\nYes, that is indeed the documented behavior of WebApplicationException. However, the documentation does not indicate that an accompanying message will be sent back to the user.\nFor the record, I do actually wish there was a version of WebApplicationException that allowed me to quickly pass a string into the response body for surfacing in the HTTP response. I don't think we ought to be co-opting the exception message for that purpose, though.\n. Ah, now I see what you're saying, @vzx. Yeah\u2026it does seem like a flaw that your JAX-RS resource may use a JAX-RS client to make a request, which may throw a WebApplicationException that will propagate all the way to the caller of your resource just because WebApplicationException is a descendant of RuntimeException.\nNow I find myself wanting ClientWebApplicationException and ServiceWebApplicationException where only ServiceWebApplicationException gets mapped to an appropriate HTTP status code, while ClientWebApplicationExceptions get turned into a generic HTTP 500. sigh\nI'm still slightly concerned about the solution's ability to leak information from the exception message, but I'm now clearer about your frame of reference. Thanks for the explanation. I'm a tentative +1 on seeing this merged. My only hesitation would be to have a few more @dropwizard/committers chime in on how they feel about having the exception message exposed.\n. Please don't use issues to ask questions. Questions can be directed to the dropwizard-user Google Group.\n. GitHub issues are not an appropriate place to ask questions. Please direct your question to the dropwizard-user Google Group.\n. What you're asking for isn't clear to me. Let's start a discussion on dropwizard-user and clear that up and verify there isn't an existing solution first. GitHub issues aren't a great place to have that kind of discussion.\n. You're going to need to be a lot more specific about what is or is not happening.\n. Have you followed all of the instructions outlined here? In particular, are you invoking bootstrap.addBundle(hibernate);?\nThe easiest way to track down what's going on is going to be for you to submit enough of a code sample that we can reproduce the issue. There are a number of tests for this functionality, which all pass. So I suspect you may have something configured incorrectly or you've found an unanticipated edge case. Either way, a code sample is our best bet of getting to the root of the issue.\n. Or you could submit a pull request that offers either HTML or JSON based on the Accept header.\nGiven I've personally never seen the AdminServlet used by anything other than a human being in the browser, I'd guess getting this fixed by someone other than yourself will be pretty low priority.\n. The biggest thing will be forcing prior implementations of Bundle to now depend on some Configuration subclass, even when they don't use a configuration. Would you just have everyone change their Bundle to a ConfiguredBundle<Configuration>?\nI looked for things implementing Bundle in the project and I wonder how this would affect something like MigrationsBundle. In that case, things might actually clean up a bit if we only had ConfiguredBundle.\n. My primary concern would be the one Coda already mentioned in #125, too much complexity in the configuration process. A past employer had this really awful Spring XML-based configuration thing where the configuration would flatten: configuration from a server, configuration on disk, configuration in your JAR file, configuration in some other JAR file, etc. It basically made it an impossible task to know where a given configuration value was coming from because there were so many possibilities.\nSome questions:\n- Should the import depth be limited? Setting a depth limit of 1 would allow a base layer and an environment layer (the prod/dev example given) and would also prevent cycles by design.\n- Should there be a /configuration resource in the admin endpoint allowing someone to see the current configuration and the source of each configured value (i.e. default, base.yml, prod.yml, or command line flag)?\n- Is \"import\" really the right verb for what's happening? \"inherit from\" would be more accurate.\n- Related, what's the inheritance order? I assume defaults in the Configuration classes are the base value, followed by the \"lowest\" imported definition of a value, and finally topped off with any command line defined values?\n. @joschi I was just going to say what @mrb said. We should customize the checkstyle configuration before the PR integration, otherwise subsequent pull requests may get hit with requests to make style changes that we don't actually want them to make.\n@arteam, what config did you use the last few times you ran checkstyle?\n. Here's the results with the default pmd/checkstyle configurations. Checkstyle has some XML configs we might be able to repurpose, but neither of them looks to fit exactly what we're doing today. If anyone has a checkstyle.xml that they've been using that they feel matches the style we want to enforce going forward, let me know.\nThe pmd feedback largely boils down to \"Do not hard code the IP address\" (these all appear to be tests) and \"These nested if statements could be combined\".\n. The Kafka checkstyle config runs with only 48 reported errors (28 of which are indentation). Shall we start there?\n. Code Climate shows a checkstyle clean bill of health after the last two commits. There's just some PMD stuff that needs sorting, mostly complaints about embedding IP addresses in our tests.\nI'd like to get this merged so we can turn on Code Climate's pull request integration as a gatekeeper to prevent any further code that doesn't conform to the style guide. Any objections from @dropwizard/committers?\n. We've always struggled with how to handle/represent version intersections. Historically with the included modules we've simply said, \"dropwizard-core X.Y only ships/works with dropwizard-module-foo X.Y, which uses foo version A.B.\" This has always meant that if people want to remain on an older version of foo they'd have to stay on an older version of dropwizard-core. Similarly, if they ever wanted to upgrade to a newer foo they'd have to upgrade to a newer version of dropwizard-core.\nWhile this is a nice forcing function for upgrades (both for users to upgrade their dependencies and for us to keep our dependencies up to date), it causes obvious friction. I don't have a good solution for this other than to acknowledge it's a pain for both users and maintainers.\nIf everyone used semantic versioning properly, we could expand dependency definitions a bit and provide more flexibility for dependency versions. Unfortunately, being in the position we're in as framework maintainers, we pull in a broad swath of dependencies, each with their own feelings about how semantic they want their versioning to be.\nDoes anyone have examples of modular frameworks they feel are handling this scenario well that we might take inspiration from?. Let me ping support@github.com to see if they have any suggestions/remediations short of disabling fsckobjects.. Sent the following:\n\nWe're not sure if this is related to the deletion but users with fsckobjects turned on are noticing problems cloning the repo (https://github.com/dropwizard/dropwizard/issues/1996). The problem is occurring with an old commit (from 2011). It's unclear if this is a new problem or if it's simply that news of the accidental deletion is causing more people to re-engage with the project and are now cloning the repo with fsckobjects enabled when it may have previously been disabled for them.\n\n@JensRantil, had you successfully cloned the repo in the past with fsckobjects enabled? Is it possible this is the first time you've cloned with it turned on?\n. Okay, that makes me feel slightly better, then. I'm guessing it's unrelated to the repo deletion and has probably been around for a while. I guess we know what most contributors have fsckobjects set to. \ud83d\ude10\nHaving no real experience repairing git repos, I have no immediate suggestions for fixing. I'll wait a little longer to see it GH support responds with any recommendations.. GitHub support confirmed that this has been around a while:\n\nAs you suspected, this issue is popping up because some new cloners who have fsckobjects enabled are noticing it. There is a malformed commit in the history, and unless you want to rewrite the history (unlikely), the only solution is for the cloners to disable fsckObjects.\nTo be clear, that malformed commit was already there, it wasn't introduced when the repo was restored.\nIn case you're curious, there's an extra email address in the author and committer info:\n$ git cat-file commit 6fbf9def0293986beb2547a671f46148a5d2faf7 | egrep '^(author|committer)'\nauthor Coda Hale coda.hale@gmail.com coda.hale@gmail.com 1305038239 -0700\ncommitter Coda Hale coda.hale@gmail.com coda.hale@gmail.com 1305038239 -0700\nLet us know if you have any other questions.\n\nI think rewriting history is going to be dicey at best, so I'm going to close this and we'll just have to remember to let folks know.. ",
    "jamesladd": "Agreed, but now it is more clear to those who don't have your knowledge.\nAt lest I hope that is the case.\nOn Wed, Aug 8, 2012 at 8:10 AM, Coda Hale notifications@github.com wrote:\n\nThis isn't any different than how it works for HTTP.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/164#issuecomment-7568561.\n. - I'm trying to reduce the amount of times you get asked the same question.\n- I'm trying to make it easier for people to get going with dropwizard.\n- Out of the box dropwizard runs on 8080 so users wont have a problem\n  getting going - however they may not realize that it requires more config\n  when running on anything below 1024.\n\nOn Wed, Aug 8, 2012 at 8:11 AM, James Ladd ladd.james@gmail.com wrote:\n\nAgreed, but now it is more clear to those who don't have your knowledge.\nAt lest I hope that is the case.\nOn Wed, Aug 8, 2012 at 8:10 AM, Coda Hale notifications@github.comwrote:\n\nThis isn't any different than how it works for HTTP.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/164#issuecomment-7568561\n. \n\n",
    "fleaflicker": "I think changes like this would go a long way to helping Dropwizard gain traction.\nIt's hard to justify migrating to Dropwizard because there are so many dependencies introduced for which most projects already have working implementations. \nWhenever functionality can be hidden behind a simple facade or a commonly used JDK interface (like this) it removes a barrier to adoption.\nI realize this is a fine line because one of Dropwizard's goals is to provide a fully-functional best-of-breed application out of the box. But if you couple this change with an optional module for Tomcat DBCP, it goes a long way to reducing overall complexity. \n. @codahale fair enough, I completely understand. \nI initially got excited when I saw Dropwizard because I think every company is duplicating large amounts of infrastructure code. \nI wanted to standardize the way my services are bootstrapped and managed. And I don't think any other open source project is attempting to do that. \n. See issue #165\n. I'm able to bootstrap the same guice app using both the 0.6 snapshot and a traditional web-app configured via web.xml. You just need decouple your Injector creation logic from both.\nInitialization via DW Service#run:\njava\nfinal Injector injector = MyAppBootstrap.createInjector();\nenvironment.setJerseyServletContainer( new com.sun.jersey.guice.spi.container.servlet.GuiceContainer( injector ) );\nAnd the same app can be deployed via web.xml using the listener:\n``` java\npublic class MyAppBootstrap extends GuiceServletContextListener\n{\n@Override\npublic Injector getInjector()\n{\n    return createInjector();\n}\n\npublic static Injector createInjector()\n{\n     // ...\n}\n\n// ...\n\n}\n```\n. I don't touch ResourceConfig at all--I set up all my servlets, filters, and resource via Guice. You can think of your webapp as a Jersey/Guice app, which you just adapt to run in different \"containers\"--either Dropwizard, or a traditional servlet container. \nUse a Guice servlet module to filter all (dynamic) paths though Jersey's GuiceContainer. Your Resource classes will then be instantiated via Guice.\nTo run with Dropwizard, your service's initialize method should have this:\njava\nfinal Injector injector = MyAppBootstrap.createInjector();\nenvironment.setJerseyServletContainer( new GuiceContainer( injector ) );\nenvironment.addServletListeners( new MyAppBootstrap( injector ) );\nWhere MyAppBootstrap is a GuiceServletContextListener like this:\n``` java\npublic class MyAppBootstrap extends GuiceServletContextListener\n{\n    private final Injector injector;\n@Override\npublic Injector getInjector()\n{\n    return injector;\n}\n\n// this method can go anywhere--it should not be dependent on the dropwizard API\npublic static Injector createInjector()\n{\n     // ...\n}\n\n// use this when initializing via dropwizard\npublic MyAppBootstrap( Injector injector )\n{\n    this.injector = injector;\n}\n\n// use this when initializing via web.xml\npublic MyAppBootstrap()\n{\n    this( MyAppBootstrap.createInjector() );\n}\n\n}\n```\nAnd your web.xml looks like this:\nxml\n    <filter>\n        <filter-name>guiceFilter</filter-name>\n        <filter-class>com.google.inject.servlet.GuiceFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>guiceFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <listener>\n        <listener-class>com.mycompany.MyAppBootstrap</listener-class>\n    </listener>\nBecause your app is entirely configured via Guice's servlet module, you can run it in both environments without altering any code.\n. No sweat, I can take another shot at it after you update. The changes are pretty minor.\n. try #217.\njust curious, why did you remove the caching logic from AssetServlet? every request now reads the resource, converts it to byte[], etc.\n. We're using a raw (not decoded) uri as the key (HttpServletRequest#getRequestURI).\nEasiest way to fix it is to just construct a decoded version:\nJava\nfinal CachedAsset cachedAsset = loadAsset(req.getServletPath() + req.getPathInfo());\ninstead of what is there now:\nJava\nfinal CachedAsset cachedAsset = loadAsset(req.getRequestURI());\nSee the top answer here, describing which methods return decoded values:\nhttp://stackoverflow.com/questions/966077/java-reading-undecoded-url-from-servlet\n. OK. Any reason why? What is unique about Jetty's queue implementations? Just curious.\n. Ah, I see, thanks, I don't believe there's a good alternative implementation for that, but I'll look. \nMy only motivation in suggesting the change was to try to use DW's configuration, initialization, and logging features, without using Jetty. \nI know you consider DW to be essentially a servlet container with Jetty as a fundamental component. But I think there's a lot of value in using an even smaller subset: dw-configuration (depends on Jackson & Validator), dw-logging (slf4j & logback), and dw-metrics (metrics).\nYou could even abstract a lot of dw-core so that it doesn't assume Jetty as the underlying server (e.g., ServerFactory could return something like Guava's Service interface; a similar approach could be taken with dw-lifecycle).\nBut I know that in the past you haven't been interested in going down this path. \n. @codahale Are you interested in what I described above? If not, let me know and I'll stop harassing you.\nOne way to achieve it would be to move all server-related classes out of dropwizard-core and into a new project, dropwizard-server. This way dw-core depends solely on metrics, config, logging, validation, and jackson.\nThe only class which would require major changes is Environment. The simplest thing would be to create a sub-class, ServerEnvironment with the jersey(), servlets() and admin() methods.\nAgain, if you consider dropwizard to be a servlet container, then there's no point in breaking up the dependencies. But I see a lot of value in reusing a smaller subset of dropwizard to configure and manage all types of applications, not just Jetty/Jersey servers.\nI could open a PR if you're interested in seeing something concrete.\n. OK, fair enough. One last comment before I shut up about this forever. \nI think DW has a lot of value in its approach to configuring and wiring together any application, not just HTTP services. It's mostly glue code that could be reproduced but it's also littered with small tweaks that are the result of lots of real-world use and testing (e.g., https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/Application.java#L19 ). \nEvery application I've ever worked on had logging, configuration, validation, and metrics requirements. None of them has had as clean an approach to wiring these components as DW. I think there's a smaller subset of DW that is valuable to any application. (Thanks for maintaining it, I have used it on small new projects in the past year and it has been a delight.)\n. DW is defined as \u201cA damn simple library for building production-ready RESTful web services.\u201d It configures and wires the plumbing for your service, exposes it via HTTP, and defines a common configuration. Along the way it provides good abstractions for the Configuration, the Service, its Environment, and the Command Line. \nAll I\u2019m trying to say is there\u2019s a lot of value in the DW approach for non-HTTP services and one-off CLI tasks.\nThe use-case I had in mind is as follows: \n1. Core application is built independently of DW.\n2. DW wires and bootstraps application and defines an HTTP API (i.e., deployment as a service)\n3. DW wires and bootstraps application and defines a command line API for one-off tasks. \nCurrently, there\u2019s no way to do the third item without including the entire Jetty runtime. I can work around this, it\u2019s not a big deal. I just think there\u2019s a smaller subset of DW that can be of value.\n. I asked about changing it a while ago, Coda explains the choice of queue implementation here:\nhttps://github.com/dropwizard/dropwizard/pull/349#issuecomment-19479512\n. yikes. forgot to delete that.\n. different variable, mediaType  and mimeType\nmaybe rename mimeType to mimeTypeOfFileExtension? it's the parsed type returned from the jetty file extension->mimetype class, same as you had in there before.\n. ",
    "adamkaplan": "Thanks for\u00a0taking a look at this Coda. Please don't feel rushed to get this reviewed and merged. I've already cut a snapshot jar with the change and dropped it on top of dropwizard-db (a short-term solution).\nAlso, I really appreciate that you opened dw and continue to aggressively maintain it. I've learned a lot from using it over the last few months.\n. Sounds great. I'll take a look at 0.6.\n. ",
    "sjhorn": "I have updated the pull request to include the missing bits for protected targets. \n. Good question. I am not sure how to make the org.eclipse.jetty.util.resource.Resource immutable and your maven config complains if it is not. My original implementation was just a getter/setter.\n. You are right. I must have seen the immutable complaint somewhere else. I have adjusted the code to simplify and updated to the latest master now. \n. ",
    "Omega359": "That's somewhat odd ... I wonder what is up with my environment then since I've dev'ing on windows. I'll go ahead and edit this pull request to remove that then.\n. Wow, I'm completely failing on this pull request. Obviously I'm on jdk 7 - I'll fix and update..\n. ",
    "Hellblazer": "I've added an interface to implement to be notified of the server start.  You can register an instance with the environment.  The ServerCommand then notifies the Environment of the start, and then will call this instance if one has been registered.\nSeems to be not so bad and fits in with the metaphors of the rest of the framework.  Or so I suspect.\n. Do'h.  Sorry for closing the request.\n. D'oh!  should have constructed this check better.  Robot fingers, you know...\n. Yea.  Sorry.  First pull request.  Virgin.\n. Ah.  good point.  Thanks.  Will refactor and resubmit.\n. So, I started to do this but then ran into a timing issue.  The problem, as I see it, is that the Service is initialized with the Environment before the server instance is created.  Thus, the problem becomes how does the Service \"know\" when it can access the Environment's Server to get the required information?   The nice thing about the mechanism here is that the Service gets this callback when the Server is already initialized and started.  Thus, all the critical information, such as the dynamically allocated ports, has been determined and is available.\nIs there some hook, or some lifecycle event I can use to accomplish the same things?\n. My hope is that if this pull request is accepted you can simply elide this change.\n. New annotation to handle the constraint semantics.\n. ",
    "cowwoc": "I'm not a fan of bytecode rewriting myself. That being said, how do you implement validation right now? I thought AOP was required even for the more basic validations...?\n. Just a thought, why not decouple ResourceConfig from Environment? You could add Environment.configBuilder() that returns a factory/builder. For users who want to use a custom ResourceConfig, allow them to pass it in using Environment.setResourceConfig(). What do you think?\n. Upon further investigation I believe the current API might be fine (it allows package classpath scanning and other fun features I was looking for). I do, however, believe we have a serious problem with Guice integration.\nThere doesn't seem to be a way to configure ResourceConfig using Dropwizard and pass it into GuiceContainer (which is what Jersey expects). Something needs to change between Dropwizard, Jersey and/or Guice. I am moving this discussion to https://groups.google.com/forum/#!topic/dropwizard-user/LHCSUT960AE\n. Yes, I did. This doesn't actually do much beyond invoking Environment.addResource(injector.getInstance(resourceClass)). Because it does not go through JerseyServletModule and ServletModule you cannot inject Jersey-supplied types like UriInfo or use Servlet-specific annotations such as @RequestScoped.\n. Update: the new API introduced in 0.6.0-SNAPSHOT (adding setJerseyServletContainer() to environment) coupled with proposed changes to Jersey [1] solve this problem.\n[1] http://java.net/jira/browse/JERSEY-1561\n. It also looks like bad form to invoke addServlet() in getServlets(). What happens if someone invokes that method multiple times? :) A getter shouldn't mutate state.\n. Okay, you fixed the NPE but I still can't opt out of supplying a JerseyContainer (which is required if I want to inject GuiceContainer using GuiceServletContextListener instead). And you're still mutating the state inside a getter.\nShould I open separate issues for these?\nI've spent over two days to get this to work and it really seems that there are some serious compatibility problems between Dropwizard and Guice. What is the best way to address/discuss these? The mailing list or should I file separate bug reports for each issue?\n. Hi Ori,\nThe part I am having a hard time decoupling is the ResourceConfig.\nDropwizard configures it using an API. web.xml configures it using \nfilter parameters. What do you do in your own code?\nGili\nOn 08/11/2012 7:17 PM, Ori wrote:\n\nI'm able to bootstrap the same guice app using both the 6.0 snapshot \nand a traditional web-app configured via web.xml. You just need \ndecouple your Injector creation logic from both.\nInitialization via DW Service#run:\n|final Injector injector = MyAppBootstrap.createInjector();\nenvironment.setJerseyServletContainer( new com.sun.jersey.guice.spi.container.servlet.GuiceContainer( injector ) );\n|\nAnd the same app can be deployed via web.xml using the listener:\n|public class MyAppBootstrap extends GuiceServletContextListener\n{\n```\n @Override\n public Injector getInjector()\n {\n     return createInjector();\n }\npublic static Injector createInjector()\n {\n      // ...\n }\n// ...\n```\n}\n|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/codahale/dropwizard/issues/210#issuecomment-10210940. \n. Okay, that's what I thought. You cannot use Dropwizard's API for configuring ResourceConfig. You must pass key/value pairs into GuiceContainer and it'll do the configuring itself.\n\nGuiceContainer extends Jersey's ServletContainer which enforces the limitations of web.xml: mainly the inability to construct ResourceConfig directly.\n. @nickbabcock I'm actually not trying to write it out as text/html. I have no idea why Jersey thinks I am.  That said, you mention that ValidationErrorMessage serializes fine as json. Who (which class) provides this serialization?\n. That could work. Unfortunately this is too elaborate for me to be able to provide a PR for (too busy at work) so I am afraid I will have to leave the implementation to you.\n. Hi @Tibor17,\nI am not actively working on this issue as I have bigger fish to fry at the moment. For now, I am just passively interested in this issue's resolution.\n. ",
    "ghost": "Thanks for your comment. Yes I could do that, but this is a little bit inconsistent in terms of API.\nThis makes me move some addBundle calls to service's initialize method and some - instances of ConfiguredBundle to service's constructor.\nI've already tried moving all addBundle calls to initialize method but when calling addBundle(ConfiguredBundle  bundle) bundle's initialize method is not called - maybe this is a bug?\nAnyways this is not super urgent or important just seems a little bit off.\n. I have a similar issue, but with View / templates.  I would like to run in a mode where caching (of mustache or freemarker templates) is disabled, ideally via the Configuration class.\n. For me it was a problem with how I build my jar with Fatjar causing it to not include the META-INF/services directory with all of the providers.  So instead of reconfiguring the JacksonMessageBodyProvider I just manually registered the StringProvider on startup:\n``` java\nimport com.sun.jersey.core.impl.provider.entity.StringProvider;\n...\n@Override\npublic void run(Configuration configuration, Environment environment) {\n    environment.jersey().register(StringProvider.class);\n    ...\n}\n\n```\nHope this helps...sorry if I am way off-base with what you are trying to accomplish.\n. There was a post from Graham O'Regan on the google group list that had this upgrade tasks list :\n\n- Update m-compiler-p source and target to 1.7 (think most ppl are on 1.7 now, but we were still running 1.6 at the time)\n- Replace maven dependencies from com.yammer.dropwizard to io.dropwizard\n- Replace package statements from com.yammer.dropwizard to io.dropwizard throughout the codebase\n- Update configuration class to use DataSourceFactory\n- Update Hibernate bundle, override getDataSourceFactory\n- Update Migrations bundle to override getDataSourceFactory\ufeff\n- Added dropwizard-assets and dropwizard-assets-freemarker to dependencies\n- Updated application to override getName() instead of providing the bundle with the name\n- Changed how resources are added from environment.addResource(resource) to environment.jersey().register(resource)\n- Once everything is compiling, rename Service class to Application\n- Change test classes extending ResourceTest to use ResourceTestRule\n- Convert app.yml to new server layout (see ServerFactory and ConnectorFactory)\n  \n. this worked previously under 0.6.2 for me.\nI just succeeded with a workaround in getting the reference data - I dumped the schema normally using the dropwizard CLI.  I then downloaded liquibase 3.0.1 and ran : \njava -jar liquibase.jar --changeLogFile=\"./data/dataChangeSet.xml\" --diffTypes=\"data\" generateChangeLog\nwhich got my reference data changelog.\nI then manually changed the xsd in the liquibase generated changeset from 3.1 back to 3.0 so that I can use it under dropwizard.\n. I right clicked in Intellij and chose Optimize Imports. Seems cleaner with what it came up with. But I agree, worthless. I think this still gets me activity on github which is the actual point :)\n. @joschi : Yes, in new version its mandatory to add @Valid annotation when you have @validated as well,\nhttps://github.com/dropwizard/dropwizard/pull/1251#issuecomment-142645734\n. @nickbabcock : thanks , I just found your comment on this issue #1251 (comment). it fixed my issue\n. Let me try it. thanks.. Hello NickBabcock,\nMy entities are properly annotated.  I think jackson, jetty ignoring JsonProperty.. I think it must be \nyaml\narchivedLogFilenamePattern: ./logs/debug-%d{yyyy-MM-dd-HH}.log.gz\ninstead of:\nyaml\narchivedLogFilenamePattern: ./logs/debug-%d{yyyy-MM-dd-hh}.log.gz. ",
    "nbauernfeind": "So far we've tried this to be able to configure the AssetsBundle (and it doesn't feel inconsistent API wise):\nhttps://github.com/bazaarvoice/dropwizard-configurable-assets-bundle\nSuggestions for improvement are welcome too!\n. Aside from my two comments this looks good to me.\n. @joschi If this is the case, can you please fix the documentation? \"Serving Assets\" section on page: https://dropwizard.github.io/dropwizard/manual/core.html#serving-assets\nThe OP is clearly following those directions and it no longer works as documented. It would be nice to better understand why this functionality is no longer supported. Also, you probably wouldn't have so many people submitting bug requests for the same issues if you update the contradictory documentation (like #662, and #676).\n. Thanks @RobertButera! I should've tested that instead of mucking around primarily with the AssetsBundle. Also, it is not necessary to override anything if one wants to serve the resources out of the jar.\n. I'd recommend using this:\nhttps://github.com/dropwizard-bundles/dropwizard-redirect-bundle\nIt allows you to make a redirect mapping from \"/swagger\" to \"/swagger/\".\n. I'd recommend using this:\nhttps://github.com/dropwizard-bundles/dropwizard-redirect-bundle\nIt allows you to make a redirect mapping from \"/swagger\" to \"/swagger/\".\n. Well that's great news!\n. I would expect \"appender\" to be a better name here. I'd suggest using Optional here:\njava\n@JsonProperty\nprivate Optional<AppenderConfiguration> appender = Optional.absent();\n. It looks like the convention for spacing in dropwizard's .yml files, is to have none.\n. ",
    "andershedstrom": "hopefully it can be merged automatically now...\n. ",
    "thody": "Not a holistic solution, but I found that implementing my own InvalidEntityExceptionMapper and adding an instance as a resource to my environment in MyService.run() did the trick since this ends up adding the mapper to DropwizardResourceConfig anyway (had to boot the DW implementation out of the singletons collection to ensure the right implementation gets used).\nNow I can write mappers for any exceptions that bubble up to Jetty and I'm golden.\n``` javascript\nHTTP/1.1 422 Unprocessable Entity\nDate: Wed, 14 Nov 2012 20:49:03 GMT\nContent-Type: application/json\nConnection: close\n{ \"reason\" : { \"message\" : \"There were validation errors.\", \"errors\" : [\"lastName may not be empty (was null)\"] } }\n``\n. Thanks for the feedback, debated with myself on these points as well. Will refactor.\n. As I began refactoring this, it became clear that we were ultimately going to end up withdropwizard-testing-jdbi,dropwizard-testing-hibernate,dropwizard-testing-migrations`...and other modules potentially. Futhermore, if this is a pattern we're going to follow for all non-core test support classes, the total number of modules will balloon. That wouldn't be a horrible thing, but I don't think it's desirable.\nI see a couple alternative options: \n1. A dropwizard-testing-db module, which would include JDBI, Hibernate, Liquibase and potentially other db related test support classes. Given that these are test scope dependencies, it might be worth the tradeoff of bringing in extra dependencies in exchange for a simpler, less sprawling module structure.\n2. Include test support classes directly in the modules they are supporting. ie. JDBI test support classes go in dropwizard-jdbi. I assume automated testing is a practice we want to encourage, so it's reasonable to assume that developers wanting to use JDBI, for example, will always want test support for JDBI. The cost, of course, is that we lose some dependency scoping flexibility, but I see that as a minor inconvenience in this case.\nI think option 2 seems the most extensible and wins for ease of use. Thoughts?\n. Fair enough. So, just to confirm, you'd like to see two new modules here: dropwizard-testing-jdbi and dropwizard-testing-migrations? Thanks.\n. @nicktelford mind giving this a quick peek before I update the docs?\n. - It's unfortunate duplication, but unless there's some Maven trickery I'm not aware of, we can't access Person in the dropwizard-testing from dropwizard-testing-jdbi because it's in the test source tree. My understanding is that this only works if Person were in the main source tree.\n- Renamed to \"DBIRule\" for consistency.\n- Remove h2 from dropwizard-testing. Leaving it there was an oversight when migrating from the previous implementation. Good eye.\n- DataSourceFactory could be passed in via a constructor, in fact, that's how I started off implementing it, but I felt that approach wasn't quite as usable. Unless I've missed something obvious, I believe that approach would require the developer to have a more in depth understanding of JUnit method execution order. They would need to create a static field to assign the DataSourceFactory to, which would need to be set up in a @BeforeClass method (see Gist). All-in-all, it requires as just as much code, but the approach is less obvious, and requires deeper framework knowledge. With the current implementation, the API makes it more obvious how it's to be used. Agreed?\n- Rather than yielding a DBI instance, I've removed setUpDataAccessObjects() and made onDemand() in DBIRule public as a thin wrapper around DBI. I feel that if the rule is intended to manage the DBI instance, it shouldn't leak it out, which could lead to unexpected usage. Along the same lines, exposing Handle smells a little to me.\n- DBIRule itself is in the main source tree, so its dependencies (eg. h2) have to remain compile scope. The dropwizard-testing-jdbi module itself should be added in the test scope, which should achieve the same effect transitively.\n. ",
    "kubek2k": "The example of code that serves no HTML - which appear to popup by default, we do sth like this:\nenvironment.addProvider(new ExceptionMapper<WebApplicationException>() {\n    @Override\n    public Response toResponse(WebApplicationException e) {\n        return Response.status(e.getResponse().getStatus()).entity(\"\").build();\n    }\n});\n. ",
    "pjgg": "If you are under Dropwizard 0.7 you could do something like:\n// Remove all of Dropwizard's custom ExceptionMappers\n        ResourceConfig jrConfig = environment.jersey().getResourceConfig();\n        Set dwSingletons = jrConfig.getSingletons();\n        List singletonsToRemove = new ArrayList();\n```\n    for (Object s : dwSingletons) {\n        if (s instanceof ExceptionMapper\n                && s.getClass().getName()\n                        .startsWith(\"io.dropwizard.jersey.validation\")) {\n            singletonsToRemove.add(s);\n        }\n    }\nfor (Object s : singletonsToRemove) {\n    jrConfig.getSingletons().remove(s);\n}\n// Register the custom ExceptionMapper(s)\nenvironment.jersey().register(new RestErrorsHandler());\n\n```\nWhere RestErrorsHandler is your custom ExceptionMapper\n@Provider\npublic class RestErrorsHandler implements ExceptionMapper \n. ",
    "Cameronjmayfield": "For Dropwizard 0.8, you can eliminate default exception mappers with the following configuration in your *.yml file:\nserver:\n    registerDefaultExceptionMappers: false\n. ",
    "lgueye": "So sad ...\n. ",
    "jeromebridge": "@woodstock3368 Do you have this packaged anywhere?  I am interested in using it to deploy DropWizard as a windows services using Commons Daemon.\n. I packed this up and put it on Maven Central if anyone else needs it:\n<dependency>\n     <groupId>com.pennassurancesoftware.dropwizard</groupId>\n     <artifactId>dropwizard-stop</artifactId>\n     <version>0.8.2</version>\n</dependency>\n. ",
    "woodstock3368": "@jeromebridge I do not have this packaged.  :disappointed: \n. ",
    "kvanvranken": "Np it happens. Thanks for the new version!\n. Ditto. Certainly when you want to have some sort of standard JSON object for ajaxy apps. Would be cool if you could specify one per MediaType. \n. We've been using it for a couple years now. Much better then just mustache. \n. ",
    "olvesh": "Sry, you're too fast for me :-), and I'm not too familiar with the github-process yet. Didn't see you closed from another commit.\n. PR: #764\n. Sure. Just not sure what the best approach to logging the endpoints is. How much should be logged of the recursive endpoints. Any ideas?\n. Here you go.\n. Thanks - you should probably put this on top of master as well - same problems there.\nAny chance for a maintenance release of 0.7.2 with this fixs soon?\n. Ok, good that I got the forked version going internally then. Will do a private 0.7.2. Guess 0.8 is close then -  and hopefully no breaking changes ;-)\n. My bad - I don't see the error in master - but it doesn't log the sub-resources either. I will see what I can do to adapt my fix here to 0.8\n. ",
    "eliast": "I absolutely understand. Here's a link to the stand-alone extension.\nhttps://github.com/HubSpot/dropwizard-guice\nand here's an example project:\nhttps://github.com/eliast/dropwizard-guice-example\nThanks!\n. Hi Bill,\nIt doesn't work against 0.6.1 and it doesn't enable the GuiceFilter to use ServletScopes. His AutoConfig also injects single instances instead of actually letting Guice construct resources based on the module configuration.\n-Elias\n. @codahale ping. I'm looking for feedback/instructions to make sure I'm on the right path. Thoughts?\n. ",
    "eonflare": "I completely agree with you.  I'll continue to dig for another way, but I wasn't able to find one last night.\n. Scratch that.  No idea how I missed it yesterday evening.  Using the java.lang.reflect interface it implements instead.\n. ",
    "bartveenstra": "From stackoverflow: http://stackoverflow.com/questions/10555820/what-are-the-differences-between-mustache-js-and-handlebars-js\nHandlebars templates are compiled\nHandlebars adds #if, #unless, #with, and #list\nHandlebars adds helpers\nAllows use of {{this}} in blocks (which outputs the current item's string value)\nHandlebars.SafeString() (and maybe some other methods)\nEventhough the Mustache templates are compiled as well in drop\n. Hey Spinscale. \nCool! I am using a handlebars implementation from https://github.com/jknack/handlebars.java which was very similar than the mustache template. \nI did add it to the dropwizard views package, but I have no problem offering it as a seperate module:\nI also did some performance tests between mustache and handelbars in drop wizard. Handlebars is slightly faster as well!\n12/2/12 2:33:43 PM =============================================================\ncom.yammer.dropwizard.views.HandlebarsView:\n  rendering:\n             count = 20000\n         mean rate = 6415.70 calls/s\n     1-minute rate = 0.00 calls/s\n     5-minute rate = 0.00 calls/s\n    15-minute rate = 0.00 calls/s\n               min = 0.01ms\n               max = 86.14ms\n              mean = 0.04ms\n            stddev = 0.63ms\n            median = 0.03ms\n              75% <= 0.05ms\n              95% <= 0.10ms\n              98% <= 0.12ms\n              99% <= 0.13ms\n            99.9% <= 0.14ms\ncom.yammer.dropwizard.views.MustacheView:\n  rendering:\n             count = 20000\n         mean rate = 6389.00 calls/s\n     1-minute rate = 0.00 calls/s\n     5-minute rate = 0.00 calls/s\n    15-minute rate = 0.00 calls/s\n               min = 0.01ms\n               max = 39.65ms\n              mean = 0.03ms\n            stddev = 0.30ms\n            median = 0.02ms\n              75% <= 0.04ms\n              95% <= 0.07ms\n              98% <= 0.09ms\n              99% <= 0.10ms\n            99.9% <= 4.19ms\n. ",
    "spinscale": "Hey Bart,\nasked that on the mailinglist a few days ago. Coda mentioned, having an extra module is also a good idea. I also have written my own handlebars renderer (based on the cool handlebars.java implementation) for my own project a month ago.\nWhat about teaming up and creating a nice module?\nNo need to have it natively in dropwizard - if Coda likes to merge it some time, nice and if not, it is ok as well...\n. ",
    "asinger": "IMO, ignoring String, byte[], Long, List, InputStream, etc as a top level object in the Json Provider is the correct behavior:\n1. A String alone is not valid json. If someone wants to Produce application/json, but send only a json fragment, then IMO the should send that json encoded string manually, outside of the Jackson provider mechanism. Really, only Map and user defined classes that ultimately produce a json hash at the top level should be allowed. The types blacklist is just a way to get close to that behavior.\n2. It should be possible to send an application/json response, but be able to specify the raw Json. Say, I'm passing along json from another service, or reading it from some database or who-knows-what. I want that exact String or byte[] to be the json I'm producing, and therefore I want the String or ByteArrayProvider to handle it. This is why they support /.\nAnother example. Some silly rest endpoints require a Content-Length to be set. In these cases, I've had to produce application/json, from a byte[] so that they ByteArrayProvider would kick in, which determines the size from the array length. (the Jackson Json Provider doesn't determine size, because it would have to double-marshal the object to do so.) Whether that's right or wrong is a separate issue, but it seems like I should be able to produce whatever content type I want from a byte[], for example.\nMy original commit was mirroring the behavior from Tatu's provider, as noted in the commit message, and Coda rightly decided to just replace the Dropwizard jackson provider with Tatu's.\n. ",
    "keklabs": "I have the same problem and in my opinion the jackson is not consistent in its processing.  I have JAX-RS jersey service and Spring RestTemplate client, both are using the same version of Jackson, but the String return-value from service could not be read by the client template, because the issue above (String is ignored by JacksonJsonProvider and passed through without added quotations). \nOK, String is not valid JSON, but:\nWhen I try this:\njava\n public void testJson() throws Exception {\n    ObjectMapper map = new ObjectMapper();\n    System.out.println(\"TO-JSON:\");\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    map.writeValue(out, \"Test String\");\n    System.out.println(out.toString());\n    System.out.println(\"FROM-JSON:\");\n    String value = map.readValue(out.toByteArray(), String.class);\n    System.out.println(value);\n  }\nit is working, primitive types and String are serialized and deserialized as JSON.  So I expect, that the same consistent processing will be used in JacksonJsonProvider. \nIf you define the String as \"untouchable\" because it is not valid for JSON, than you must define byte, integer, boolean, etc. \"untouchable\"  too  to be consistent in your solution, they are not valid JSON structures too, but are processed by JacksonJsonProvider now in the same way as in ObjectMapper.\nFor Integer:\nX-Jersey-Trace-008: matched message body writer: java.lang.Integer@2a, \"application/json\" -> org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider@184f12e\nFor String:\nmatched message body writer: java.lang.String@42628b2, \"application/json\" -> com.sun.jersey.core.impl.provider.entity.StringProvider@b8b802\nSo if I use String, than the client fails on:\njava\nCaused by: org.codehaus.jackson.JsonParseException: Unexpected character ('H' (code ...)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\n at [Source: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@a60b09; line: 1, column: 2]\n    at org.codehaus.jackson.JsonParser._constructError(JsonParser.java:1433)\n    at org.codehaus.jackson.impl.JsonParserMinimalBase._reportError(JsonParserMinimalBase.java:521)\n    at org.codehaus.jackson.impl.JsonParserMinimalBase._reportUnexpectedChar(JsonParserMinimalBase.java:442)\n    at org.codehaus.jackson.impl.Utf8StreamParser._handleUnexpectedValue(Utf8StreamParser.java:2090)\n    at org.codehaus.jackson.impl.Utf8StreamParser._nextTokenNotInObject(Utf8StreamParser.java:606)\n    at org.codehaus.jackson.impl.Utf8StreamParser.nextToken(Utf8StreamParser.java:492)\n    at org.codehaus.jackson.map.ObjectMapper._initForReading(ObjectMapper.java:2770)\n    at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2718)\n    at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1923)\n    at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.readInternal(MappingJacksonHttpMessageConverter.java:124)\nIn my opinion, there are two possibilities:\n1) mark as untouchable everything, what is not valid JSON structure - to be consistent\n2) or allow all the primitives as supported in ObjectMapper serialization - i prefere this :)\nIf you allow String processing, than you can provide some special annotation, or MediaType parameter or some special JsonStringResponse to support direct pass-through JSON text, something like:\njava\n  @GET\n  @Path(\"/helloProcessed\")\n  @Produces({MediaType.APPLICATION_JSON})\n  public String hello1() {\n    return \"Hello\";\n  }\n  @GET\n  @Path(\"/helloIgnored\")\n  @Produces({MediaType.APPLICATION_JSON})\n  public Response hello2() {\n    return new JsonStringResponse(\"\\\"Hello\\\"\");\n  }\n. Some other possibilities:\nSome kind of special annotation. @ResponsePathThrough, or some other kind @JsonUseSerializer(StringPassThrough.class)...\njava\n  @GET\n  @Path(\"/helloIgnored\")\n  @Produces({MediaType.APPLICATION_JSON})\n  @ResponsePathThrough\n  public String hello3() {\n    return \"\\\"Hello\\\"\";\n  }\nParameter in content-type, this solution avoid compile dependency on jackson libraries.\njava\n  @GET\n  @Path(\"/helloIgnored\")\n  @Produces({\"application/json;response-pass-through=true\"})\n  public String hello4() {\n    return \"\\\"Hello\\\"\";\n  }\nOr some global configuration like :\n``` java\n@Provider\n@Produces(\"application/json\")\npublic class JacksonJsonProviderConfig implements ContextResolver {\n  private JacksonJsonProvider provider;\npublic JacksonJsonProviderConfig() throws Exception {\n    provider = new JacksonJaxbJsonProvider();\n    provider.configure(SerializationConfig.Feature.STRING_PASS_THROUGH, true);\n  }\n@Override\n  public JacksonJsonProvider getContext(Class<?> type) {\n    return this.provider;\n  }\n}\n```\n. ",
    "carllerche": "I attempted a PR here: https://github.com/codahale/dropwizard/pull/233\n. I updated the pull request.\n. ",
    "miku": "Just came across the same HV000116 exception; a stacktrace here: https://gist.github.com/4342042. Commit 00fc1fb fixes this issue. @carllerche Thanks.\n. ",
    "ptomli": "Sorry, GH \"edit-on-web\" getting confusing. See pull request #242 \n. I've created a branch that illustrates both options in the original issue details. This allows YAML configuration of a class name to use for the Jetty ErrorHandler, as well as simplifying the process of overriding the default should you want to do that instead.\nI guess this isn't really a pull-request candidate, more illustrative to get the ball rolling and fulfil something of the \"needs code\" label.\nhttps://github.com/ptomli/dropwizard/tree/bugfix/647.1\n. For completeness, another solution is to extend DefaultServerFactory and override buildServer(LifecycleEnvironment,ThreadPool) as detailed my branch. Then, with a suitable value in META-INF/services/io.dropwizard.server.ServerFactory and server type specification in the config, it can be made to work with vanilla DW (0.7.1 tested).\nWhile this achieves pretty much the same result as the branch, I still believe that having the error handler configurable in core is preferable, if for no other reason than to stop replicating core code (in buildServer) which may change in future DW releases\n. As@marcohu points out, it's now possible to register an ErrorHandler via the application context. For my purposes this is enough in the core, no need to add more knobs and buttons.\n. This also gets into the way of using Jersey Entity Data Filtering. \nBasically, JacksonMessageBodyProvider extends JacksonJaxbJsonProvider, but the Jackson entity data filtering support is provided through org.glassfish.jersey.media:jersey-media-json-jackson, specifically FilteringJacksonJaxbJsonProvider. As a result, the entity filtering cannot occur.\nI have a StackOverflow question relating to this.\n. ",
    "primozs": "Hi, yes i was thinking something like this... \nhttps://github.com/primozs/dropwizard/commit/72084ef3eb18602902489f44a1e6303a4d36b4b5\n. Because with one service project module i am using ResourceHandler for completely client side js development.\nAnd i need no build page reload :)\n. ",
    "tomdz": "Actually, I think that log line should be:\nlogger.info(msg, params.map(_.asInstanceOf[Object]).toArray:_*)\n. ",
    "cscotta": "cscotta@localhost:~/projects$ egrep -Rni --include=*.scala \"with Logging|extends Logging\" . | wc -l\n=>     803\nWelp.\n. ",
    "celkins": "FWIW I routinely use Dropwizard utility classes in non-Dropwizard contexts (e.g., a WAR deployed to Tomcat). It just requires some exclusions in your Maven build file. For example,\n<dependency>\n        <groupId>com.yammer.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>${dropwizard.version}</version>\n        <exclusions>\n            <exclusion>\n                <groupId>com.yammer.metrics</groupId>\n                <artifactId>metrics-jetty</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>net.sourceforge.argparse4j</groupId>\n                <artifactId>argparse4j</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-http</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-server</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-servlet</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n. (Sorry for the bikeshedding...)\nGiven that the purpose of clientRequestId seems to be to synchronize with external systems, shouldn't the header name be configurable? For example, Mashery inserts an identifier in the X-Mashery-Message-ID header of proxied requests.\nEven though \"X-\" prefixes are deprecated, is there any value in re-using Rails's X-Request-Id header name?\n. Two options, neither of which is arguably appropriate for a release candidate:\n1. Distribute a bill of materials (i.e. BOM).\n2. Distribute a POM intended to be a parent for Dropwizard applications. (cf. https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters)\n. the redirection mechanism requires throwing a WebApplicationException is not true. Although it is a bit invasive, your method can return a javax.ws.rs.core.Response object instead. For example,\n``` java\n@POST\n@UnitOfWork\n@Path(\"/jdbc\")\npublic Response createJdbcDataSource(...) throws URISyntaxException {\n    DataSource dataSource = buildDataSource(adapter, name, host, port, database, username, password);\nif(dataSource.isHealthy()) {\n  dataSources.create(dataSource);\n  return Response.temporaryRedirect(new URI(getNamedPath(\"home\"))).build();\n}\n\nreturn Response.ok(new NewView(dataSource)).build();\n\n}\n``\n.Sometimes you will need to implement filters for your registered servlets...`\nThis statement might lead one to believe that registered servlet filters do not apply to Jersey resources.\n. I don't think including all this filter boilerplate code is very useful. If you're writing a new filter, it's arguably better to create a Jersey/JAX-RS one.\nA more likely scenario is re-using an existing filter, Jetty's CORS filter for example:\nhttp://www.eclipse.org/jetty/documentation/current/cross-origin-filter.html\n. More idiomatic filter registration would be:\njava\nenvironment.servlets().addFilter(\"DateHeaderServletFilter\", new DateHeaderServletFilter())\n    addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/*\");\n. ",
    "dump247": "Any chance of this getting into the next release?\n. ",
    "jonaf": "+1\n. ",
    "smverleye": "+1\n. ",
    "ckrough": "+1\n. ",
    "handavid": "+1\n. ",
    "JonMR": "I debated adding a adminBindHost parameter, but I decided against it. I thought it may be confusing if someone had the same values for port/adminPort. Let me know if you'd rather take that approach though.\n. That does seem more explicit and would have less interaction than 4 separate parameters.\nJust to be clear:\n- 8080 - 8080 on all hosts\n- localhost:8080 - 8080 on localhost\n- 0 - random port on all hosts\n- localhost:0 - random port on localhost\n- localhost - invalid or binds to default of 8080? I'm leaning towards invalid.\nIf the last case is invalid, then I'm thinking this new behavior could use port and adminPort. Otherwise, hostAndPort or hostAndOrPort feel like silly names to me.\n. Looks like this is in progress: https://github.com/codahale/dropwizard/commit/5b0b779945211fb4f5f2d9365ea32c1709e93530\n. What happened here?  Did this get merged in somewhere else?\n. Myself and a group of colleagues have started a similar project @ https://github.com/service-enabled/dropwizard-request-tracker.\nWe're working on getting it added into maven central.  We can look at adding support for customizing the header name and ID generation.  Expect it in central sometime in mid/late December.\n. The project mentioned above is a little more real now.  Please check it out @ https://github.com/service-enabled/dropwizard-request-tracker.  0.2.0 should be up in maven central.  We'd like add support for customizing the ID generation strategy and welcome PRs :)\n. This can probably be closed now that PR 540 has been merged?\n. +1 from me. We use admin tasks all the time in our ITs.  If we migrate to using Rules we would need this.\n. Is Dropwizard at a point where performance tests are necessary? Setting up infrastructure for performance tests is not a trivial task but may catch these degradations earlier.\nI'd be happy to take the discussion to the mailing list.\n. Is the goal to have this fully automated and part of CI or to be run manually during the RC phase of development?\nFully automated is obviously more difficult.  I don't think Travis CI gives any guarantees about VM sizing.\n. As a user I vote \"won't fix\" as well. It's been the default behavior for years now. I could make an argument that any client that doesn't support 422 should.\n. ",
    "also": "Is there anything preventing this from being merged?\n. ",
    "kashyapp": "I was looking for exactly this only yesterday. I needed to add an internal servlet on /rotationstatus which I'd use in the load-balancer config to control whether a host is in rotation or not. The reason I don't like /ping is because I can't keep the app running while having it out of rotation. And I also cannot use /healthcheck because I have some healthchecks which are 'soft' checks whose failure doesn't necessarily need the instance going out of rotation. \n. Are you deserializing the yml file yourself? If ExampleService is extending dw's Service class, you should get the deserialized configuration instance handed to you in the run() method.\nEither ways, it looks like you're using a vanilla ObjectMapper. You should construct your ObjectMapper from dw's ObjectMapperFactory.\nenvironment.getObjectMapperFactory().build(new YAMLFactory())\n(or)\nnew ObjectMapperFactory().build(new YAMLFactory())\n. The ObjectMapperFactory in dw, does the necessary work of register jackson modules for Guava. Which is how Jackson would know which serializer to use for Optional\n. I think you should close this issue.\n. ",
    "mattnworb": "I removed the configuration parameter in 3e8b472. I'm not experienced enough with Github PRs to figure out how to condense a few commits into one, so if you'd prefer to have 148866a and 3e8b472 as a single commit I can close this and open a new one instead.\nI also added using the database URL (in lieu of a more descriptive property) for the scope of the gauge, so that the gauges don't collide for any apps with multiple ManagedDatasources.\n. ",
    "sul3n3t": "I found it useful to expose the Service and Bootstrap objects in getters as well.\n. @moxie0 I ended up replicating much of AuthBinder and AuthFactoryProvider. My AuthFactoryProvider.createValueFactory looks at the parameter's type and picks the correct AuthFactory. I register a few concrete classes with HK2 instead of binding objects to AuthFactory.class. It's all public and the best starting point is AuthResolver.\nI intended my solution to be a hack and not totally general. Maybe there's a way to bind AuthFactorys with a qualifier and inject a collection of them to AuthFactoryProvider. Or, AuthBinder create a collection of AuthFactorys, bind the collection, and inject it into AuthFactoryProvider.\n. configClass is unused.\n. Using <C extends Configuration, S extends Service<C>> and replacing <? extends Service> with <? extends S> should remove the unchecked assignment on line 50.\n. ",
    "V0L0DYMYR": "ok, I created new module - dropwizard-integration-testing and move all changes there.\n. I've got similar issue, when I tried to migrate from version 0.9.2 to 1.0.0.\nException in thread \"main\" java.lang.AbstractMethodError\n    at ch.qos.logback.core.pattern.PatternLayoutBase.start(PatternLayoutBase.java:88)\n    at ch.qos.logback.access.PatternLayout.start(PatternLayout.java:210)\n    at io.dropwizard.logging.AbstractAppenderFactory.buildLayout(AbstractAppenderFactory.java:197)\n    at io.dropwizard.logging.ConsoleAppenderFactory.build(ConsoleAppenderFactory.java:102)\n    at io.dropwizard.request.logging.LogbackAccessRequestLogFactory.build(LogbackAccessRequestLogFactory.java:78)\n    at io.dropwizard.server.AbstractServerFactory.addRequestLog(AbstractServerFactory.java:580)\n    at io.dropwizard.server.DefaultServerFactory.build(DefaultServerFactory.java:179)\n    at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:49)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)\n    at io.dropwizard.cli.Cli.run(Cli.java:75)\n    at io.dropwizard.Application.run(Application.java:79)\n    at ua.codegym.xunit.application.App.main(App.java:62)\n. Solved! I find out that I have two different versions of Logback in my dependency tree. When I  exclude one of them, it start working.\n. ",
    "cdeszaq": "@codahale I would love to see this great project be made more extensible (and/or pluggable). In particular, the core functionality of having an easily-built REST service is the piece that's missing from so many other places that being able to add just that component of Dropwizard to an application (without all the rest of the dependencies) would be a huge boon to developers and would make the world a more REST-ful place.\nI work with Grails primarily, but I'm sure other frameworks would benefit as well, such as SpringMVC, as the OP pointed out.\n. ",
    "fge": "Well yes it is legal, but it requires an exact path match. And yes, a warning should be printed. The thing is, at the moment, dropwizard calculates resources which \"don't exist\".\n. > Dropwizard is only logging the resource mappings that it finds and makes no judgement if they are available or not.\nUhm, is that really a sane thing to do? Personally I disagree. In the case above, it is pretty obvious that the defined Resource classes would never be available given the way rootPath has been defined. imho it should log an error. But beauty is in the eye of the beholder...\n. ",
    "tobinibot": "Just a comment\u2026 When I wanted to set a rootPath, I had quite a time figuring our that I needed have \nyaml\nhttp:\n  rootPath: \"/io/*\"\ninstead of just\nyaml\nhttp:\n  rootPath: \"/io\"\nI only figured it out after stumbling on this ticket. Might be worth calling out in the sample config documentation (http://dropwizard.codahale.com/manual/core/#configuration-defaults), especially since the example is just a slash with no star.\n. ",
    "baradas": "Should update the documentation to reflect that 'rootPath' is no longer available and the supported configuration params in the configuration yaml file.\n. ",
    "ajeeshpu": "is this really done? I am running dropwizard 0.8 and I still spent another hour with the rootPath.\n. ",
    "qerub": "I would certainly appreciate it! :)\n. Jersey 2.0 has been released now and I have confirmed that it has support for validation of resource arguments via JSR-303/JSR-349.\n. @nakedpony: I'd find a servlet filter for JSONP (with Google) and activate it with com.yammer.dropwizard.config.Environment#addFilter.\n. ",
    "michaellasmanis": "Bump.  This would be a big improvement for us.\nThanks for all the great work on dropwizard.\nMichael\n. ",
    "cmicali": "Bump for Jersey 2.x support!\n. Ah - makes sense.  The only thing we were missing from Jersey 2 was the individual resource parameter validation, but using specific representation classes per resource method works fine for now.\n. +1 This would make a really useful addition.\nWe've been using this internally for about 6 months and it has been working perfectly.\n. +1\n. That's a good point - any ideas on how we could address that?  It's tough since this supports arbitrary config objects there is no single key/id to identify the object you want.\n. saad: that might work - you could walk to the list and search for an item that has a property named 'type' and a value 'http' - i'll give it a shot and see how it works.  \nIn the applicationConncetors use case I think 90% of the time there will only be one item in that list, although I'm sure there are other situations where the key/value method would be useful.\n. saadmufti: it would not be difficult to add that use case - if you don't provide an index and the target node is an array, the array contents would be replaced with the list.  \n@nicktelford what are your thoughts on this?\n. @mveitas for us it's testing - the DropwizardAppRule only allows configuration changes through the overriding mechanism\n. @mveitas that is what we do for our integration testing and production environments, but for unit testing overriding specific properties is much easier than maintaining separate yml files (especially when you have many services/applications)\n. I didn't realize I had checked in the key-value work stuff - sorry.  Reverted back to the original PR scope and I fixed the findbugs error that was failing the build.\n. @nicktelford what is the status of this PR vs #421 and what if any work needs to be done to this?\n. @nicktelford Thanks - I did the following:\n- Rebased the PR onto HEAD and merged it with #421 \n- Augmented #421 to support indexing into arrays of strings (for example, -Ddw.myapp.myserver.hosts[2]=server2)\n- Added a more tests for #421 and for the changes in this PR\n- Updated docs to include new enhancements\n. @nicktelford Mind taking a look at these changes and letting me know if you need anything else?\n. No problem at all, thanks for getting this in\n. +1\n. @joschi good points, thanks \nThe dependency convergence plugin is very helpful identifying issues that can be hard to debug (and DW uses it.)  It would be unfortunate that using DW would prevent you from using that plugin.\nThat said, the downside is that the exclusions will need to be updated if the jackson version is bumped in the future.\nMy vote would be to pin.\n. Rolling back to jackson 2.3.0 is probably the easiest approach for that (and what's in this PR)\n@nicktelford could you explain the reservation on slf4j?  the only conflict is metrics which uses an older version\n. Fixes look good, and +1 on adding the enforcer plugin to dropwizard-example\n. +1 - This really needs to be configurable.\nHere is my current hack solution for Jersey 2.x / dw 0.8: \nhttps://gist.github.com/cmicali/2ee7b3b6941005dc5596\n@joschi I'm happy to do this work but interested in your thoughts on how to make this configurable.  There is no configuration going into Environment/JerseyEnvironment currently.\n. I made this configurable with pull request #793\nI made this a configuration property on AbstractServerFactory so you just add the following to your server.yml\nserver:\n    registerDefaultExceptionMappers: false\nFWIW this is a blocking issue for us to migrate to 0.8\n. @mikeycmccarthy It worked well enough for us to get going with the 0.8 transition, but beware the hack is not 100%.  I think the DW exceptionmappers are still being cached somewhere and thanks to the non-deterministic set they are stored in 1 in 10 times they take precedence over your versions.\nSo, good enough to unblock development but not suitable for production.  #793 is the \"right\" way to handle this.\n. Few hints in here:  \nhttp://stackoverflow.com/questions/19812967/apacheconnector-does-not-process-request-headers-that-were-set-in-a-writerinterc\nSounds like the filter either needs to implement javax.ws.rs.core.Feature or also implement ClientRequestFilter to add the header\n. Fixed with #781 \n. +1\nI recommend merging this for 0.8 - previous doc is out-of-date.\n. +1 - This is actually a bigger issue as @TheTweak mentioned.  The JerseyClientBuilder is not using any configuration parameters from JerseyClientConfiguration\nI'm going to take a stab at filling out JerseyClientBuilder\n. I was able to fix some of this with #791 -  This PR does not include the request timing that InstrumentedHttpRequestExecutor provided. I have submitted a metrics PR (dropwizard/metrics#705) to add this, and will submit a dropwizard PR when that is merged.\n. Good question - I'm not sure how TTL works with keepalive.  One option would be to write our own version of ApacheConnector that uses the HttpClientBuilder code, but I'm not sure if that is the right approach.\n. @ryankennedy do you have an opinion on how to proceed with this?\n. #791 will improve jersey client to be close to what it was in 0.7, I suspect there is still a bit more we could do.  It would be really hepful if @saadmufti  could take a look and give his opinion.\n. Could you link some of the jersey issues?  Would've interested to see.  Also is using Apache a viable alternative?\n\nOn Dec 29, 2014, at 5:53 AM, Panos Partheniadis notifications@github.com wrote:\n1. Agree that Jersey Client is too broken to be used in a production system, after updating to Jersey 2. There are also many major issues reported in the relevant Jersey project that no-one is actually handling. I am not sure whether Dropwizard people can push Jersey people towards fixing them, but we cannot embrace 0.8.X versions if these do not get fixed.\n   \u2014\n   Reply to this email directly or view it on GitHub.\n. @arteam It does solve it, but it needs to be merged and DW updated for that, and given the current pace of metrics progress I'm nervous it may never happen :worried: \n\nIf this keeps up into feb/march we will probably have to fork metrics and DW and start working from those.\n. A good amount of issue #789 is resolved via this merge\n. :thumbsup:\n. This sounds great and I'd be very interested in checking it out (was have a need to integrate quartz with dropwizard)\nThis sounds like a good canidate for a dropwziard module (http://modules.dropwizard.io/), possibly an official one.\n. There is an AllowedMethodsFilter added to Jersey by default now which limits the allowed methods to a static list.  It is configurable - here's how you can add add PROPFIND to your application configuration yml file:\nserver:\n    allowedMethods:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n        - HEAD\n        - OPTIONS\n        - PATCH\n        - PROPFIND\n    applicationConnectors:\n        - type: http\n          port: 8080\nConfig reference:  https://dropwizard.github.io/dropwizard/manual/configuration.html\n. I agree auth and resource logic should happen in the same transaction.\nAlso, the dropwizard-auth docs should reference the UnitOfWorkAwareProxyFactory somewhere. Hibernate access in an authenticator is a common case and it is confusing the auth docs did not mention how to make that work. The 0.8->0.9 upgrade docs should mention this as well.\n. I'm using 1.0 - without this change I was still seeing arg0, arg1, etc.\n. @nickbabcock I will close this - I'm going to submit another PR with this, additional parameter name fixes, and an example.\n. @nickbabcock re-submitted as #1734 \n. Addressed comments on comments & tests and also fixed test failures related to NonEmptyStringParam.  The new converter for *Param types was not handling NonEmptyStringParam properly. I added support for it and removed NonEmptyStringParamFeature which was no longer needed. \n. Happy to contribute back, not huge at all. Thanks for all the great detailed review, the result is significantly better for it.\n. Related conversation on dropwizard-user: https://groups.google.com/forum/#!topic/dropwizard-user/_miPvbYaqDY\n. Let me look into getting to that end goal - though not backwards-compatible, I think that is the right way to do it. \nOn #3, I'll also look into submitting a change to the HIbernate Validator project.\n. @joschi This actually does not change test behavior.  There are a few different scenarios, keeping in mind that most tests never touch DropwizardResourceConfig:\nTests that directly use DropwizardResourceConfig\nA few tests directly use this class, like the auth tests (example: ChainedAuthProviderTest.)  They pass in true for testOnly so previously were disabling the addition of the exception mappers.  This stays the same, as only code inside the !testOnly block was changed and AbstractServiceFactory is not used (so no exception mappers are added, which was the previous behavior.)\nDropwizardAppRule\nTests that use DropwizardAppRule did not have a special handling so testOnly was false and that code gets executed.  The exception mappers don't get added there, but they DO get added in AbstractServerFactory because the registerDefaultExceptionMappers config bool defaults to true.  So, the behavior of exception mappers getting added for these tests stay the same.\nThe only way the behavior could change is if there are tests using DropwizardResourceConfig with testOnly = false and expecting the exception mappers to be added, but I can't find any tests doing this currently and it would really make sense, since you would only care about that if you are hosting this in Jersey and you probably won't be doing that w/o using AbstractServerFactory or more likely, DropwizardAppRule.\n. D'oh, sorry - auto-added by intellij.\n. Yeah no problem - will do now.\n. This isn't directly related to the PR, but we use this often and seems like something Dropwizard should include by default.\n. Done - updated description and added test.\n. Removed!\n. No, will remove.\n. Possibly - the one thing we might not want to change is the null handling. Jerey's provider will throw an IllegalArgumentException if the value is null.  My change does not, as this would be a breaking change with previous versions of dropwizard.\nOtherwise, we could change the exception handling to match abstract string provider or we could inherit from AbstractStringReader and just modify the behavior we don't like. Thoughts?\n. Thanks for the feedback - newline removed and javadoc added to those 3 classes.\n. I think you're right, I'm getting confused. Just committed an update that makes it basically match AbstractStringReader and added a test for not provide vs empty parameter. All tests pass so I think this is OK.\n. Removed, again.  Intellij: amazing 99.999% of the time.\n. \ud83d\ude2e this is much better. Facepalm for the scanning work when all you need is\njava\n if (!rawType.isEnum()) {\n    return null;\n}\nI will update this PR with this - should I include \njava\n final String text = CharMatcher.WHITESPACE\n                    .removeFrom(jp.getText())\n                    .replace('-', '_')\n                    .replace('.', '_');\nfrom FuzzyEnumModule to make it behave exactly the same way?\n. Two other questions:\n1. Should I rename the class FuzzyEnumParamConverterProvider to make it match FuzzyEnumModule ?\n2. Should we move the 'fuzzy' part out into dropwizard-util, maybe to an Enums class?\n. Changes made and committed. \n. Forgot to add that change to the previous commit - commited/pushed.\n. \ud83d\udc4d \n. Good idea - done \ud83d\udc4d \n. ",
    "nakedpony": "Actually there is one very helpful feature like interceptors in jersey 2.0 \nCould you please suggest how to implement this feature in the current state. Basically what I need is to wrap json response in jsonp callback whenever there is callback parameter is in query string. And I would like to do this without code duplication and redundant \"if's\". Thank you.\n. ",
    "timmolter": "@codahale Is there an open issue at (Jersey)[https://github.com/jersey/jersey) to add the functionality needed for DropWizard? If you know of one, could you link to it here so we could help get it done? Thanks!\n. I found the thread @codahale was referring to if people want to take a look at the specifics. With Jersey 2.6 just being released I wonder if these missing features are now available.\nhttp://jersey.576304.n2.nabble.com/ResourceMethodDispatchAdapter-in-2-0-td7580795.html\n. The current jersey version is now 2.5.1. I wonder if the needed functionality is now included...\n. +1\n. +1\n. run mvn package in the root folder, not in examples.\n. Sorry, no extra time.\n. Nevermind. Just remove the timeZone: UTC line and the connection logs are suppressed.\n. @joschi I just updated to 2.0.0-rc1-SNAPSHOT and tested everything on my demo Dropwizard app (https://github.com/knowm/XDropWizard) and found everything to work after changing a method signature in Task, which I use in my scheduled jobs Dropwizard extension (https://github.com/knowm/dropwizard-sundial). . ",
    "coolgeng": "@nakedpony Do you want to use interceptor like resteasy? I think you can use Interceptors which extend ReaderInterceptor or WriteInterceptor (https://jersey.java.net/documentation/latest/filters-and-interceptors.html#d0e7967) However, I don't see more options like interceptor order and precedence in jersey 2+ now.\n. @joschi Thanks for your quick response. I should search it before I create this issue.\n. ",
    "saadmufti": "Not sure if it will come to anything, but I have a personal fork where I'm trying to move to Jersey 2.6 . If nothing else for the educational value. So far left to upgrade:\na) things like the metrics annotations, I think those should be simple with event listeners\nb) session support in dropwizard-jersey which currently uses InjectableProvider for which Jersey 2 uses a diff mechanism\nc) all the unit tests\nOne thing which I have given up on is the support for Optional in resource method parameters, couldn't figure out a way to do it. I have migrated the Optional resource method return types via a MessageBodyWriter but not tested yet.\n. This looks really useful, although the change is pretty big. What are the thoughts of the maintainers on accepting this? \n. +1 this IMHO is a bugfix not a new feature\n. I agree. I was bitten by this bug in my project and am currently relying on\na fork of my own to include this fix.\n\nSaad\nOn Saturday, February 1, 2014, Vadim Spivak notifications@github.com\nwrote:\n\nI think AsyncAppender is new for 0.7 and without this patch you're going\nto have truncated output. I think we originally noticed that the db migrate\ncommand did not output all the migrations that it ran.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/414#issuecomment-33890255\n.\n. Cool. I should've thought of that!!! Was trying to make the minimum changes possible I'm usually conservative with that, sometimes too conservative :-)\n\n\nSaad\nFrom: Nick Telford notifications@github.com<mailto:notifications@github.com>\nReply-To: dropwizard/dropwizard reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Monday, November 4, 2013 6:27 AM\nTo: dropwizard/dropwizard dropwizard@noreply.github.com<mailto:dropwizard@noreply.github.com>\nCc: Saad Mufti saad.mufti@teamaol.com<mailto:saad.mufti@teamaol.com>\nSubject: Re: [dropwizard] fix for bug in FileAppenderFactory where even if archive is set to true it returns a regular file appender instead of rolling file appender (#420)\nThanks!\nI made an adjustment so that we're not testing a private method, which is a bit of a bad smell. By making buildAppender protected, we not only make it more testable, we also allow subclassing FileAppenderFactory to provide alternative implementations of FileAppender.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/420#issuecomment-27678796.\n. Probably, I just wanted to use something that would be very less likely to occur in a \"normal\" string. I didn't want to go down the route of escaping the delimiter, which is why I required that this only work if the setting in question is already an array of strings. I could change it to comma if you feel strongly about it.\n. Ok, I'll change the delimiter to comma and also add the escaping logic. Thanks for the pointer.\n. Oops, still one mistake in the docs, let me fix that, it refers to the old separator.\n. @nicktelford please let me know if you need any more changes to make this mergeable\n. FWIW, I rebased my branch onto the latest master, in case there's any confusion.\n. I see the following behavior changes:\nOLD\ntext \"myenum\" deserializes fine to enum MYENUM\nNEW\ntext \"myenum\" won't deserialize to enum MYENUM\nOLD\ntext \"myenum\" won't deserialize to enum myenum\nNEW\ntext \"myenum\" will successfully deserialize to enum myenum\nSo this is a change in behavior like was mentioned above, it does NOT just make it more permissive. IMHO it is a GOOD change in behavior but if someone was relying on lowercase text matching an uppercase enum, their code will break.\nThat said, I support accepting this with a change in Javadoc and prominent mention release notes. Even people whose code breaks will be in the process of upgrading to a new release 0.7 and will hopefully be paying attention to changes and doing regression testing.\nJust my two cents.\n. Oops, missed that, you're right. Ok, then I don't see any problem with this change. The only issue would be if someone have two enums that were the same except for differing in case, but that would be just perverse.\n+1\nCheers\n. When I integrated my Dropwizard based API with Akka for a project, I hit a similar issue in that akka has its own configuration. Luckily I was able to solve it by defining an akka: block in the YAML file and defining it in the Configuration class as a Map of String to Object (removed Java syntax because the markup was screwing up) . This works because Akka has a way to feed it configuration as just a nested map of settings. Does logback have anything similar? This worked really cleanly for my case.\nOne of the main selling points for Dropwizard is the simple unified configuration file for everything. I would hate to give that up unless absolutely necessary.\n. The Jersey 2.x one is my branch, and it fails the Travis CI build right now because of a dependency on a fork to the Metrics library which I also did which adds Jersey 2.x support, but haven't seen any action on it since submitting it more than a month ago. To be fair, I haven't followed up either. I'll check later tonight, they might already have added Jersey 2.x support from some other PR as I saw at least one after I submitted mine.\n. How about instead of using an index, you use some other known property of the config element? \nSo in your example, I'm suggesting:\n-Ddw.server.applicationConncetors[type=http].port=9090\n. I also have a pull request open that Nick commented on and seemed to at least not disapprove, that allows some new overriding behavior, but the use case was different, to override some configuration that is explicitly just an array of strings. Nick commented on it but then never accepted it; might be worth taking a look to see if you can have similar behavior in yours. That use case would not be handled by yours because a) you want to override the entire array, not just one item in the array, b) each array item is just a string, so there are no properties to refer to in any override string. In any case, just thought I'd mention it in case you're interested in incorporating it or at least the use case. https://github.com/dropwizard/dropwizard/pull/421\n. My use case is during development, I add some overriding to my debug\nsettings to point to a different Redis cluster.\nIt is more a convenience than anything else, I could of course maintain a\nseparate debug config. But I thought overriding was all about convenience\nanyway. Anyway, I'm not using it for any production reasons. In production\nwe use Ansible play books to edit the config appropriately before\ndeployment.\n\nSaad\nOn Tuesday, February 4, 2014, Matt Veitas notifications@github.com wrote:\n\nOut of curiosity, what the use cases for doing all this overriding? If\nthere is a need to do so much overriding, does it not point out a need for\na more complex configuration management mechanism?\nRiot Games has built a system with Dropwizard based upon\nhttps://github.com/Netflix/archaius\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/456#issuecomment-34134781\n.\n. Oops, in that case my suggestion won't work, but the original pull request seems still useful. Most people using that facility should understand the risk and know their configuration well enough to use it.\n. For someone clueless like me, can someone give a very brief use case for this? Why would you want to override the validator in a bundle?\n. Thanks for the use case. Looks fine.\n. In the code fragment you linked to, each dispatcher's constructor takes a ref to the underlying dispatcher and dispatches to it first. So I don't see how having both annotations would cause one to be ignored. The @ExceptionMetered annotation is checked last and if present, its annotation takes a ref to the previous value of dispatcher. In its implementation, the ExceptionMetered version of dispatches calls the underlying dispatcher and catches any exceptions. The underlying dispatches controls its own behavior, if it were a Metered dispatcher, it would maintain the value of the underlying metric. Looks proper to me.\n. Looks fine, all I saw were one to one replacements. Had one question on differing versions in different pom.xml's and added comment.\n. Yes, because JAX-RS has support for both client and server side asynchronous processing. Jersey 2.x fully supports it using an underlying thread pool. But think carefully about your use case. If it is high volume of requests, your app will not scale all that well unless you write your code in a true non-blocking fashion, in which case JAX-RS might not be the best model anyway. Some alternatives are Play2 or RESTExpress over Netty. And the hosting container Jetty still uses one thread per request to at least dispatch the asynchronous request.\n\nThat said, if you only need asynchronous support for some low volume long running requests, there is much to be said for the simplicity of Dropwizard/Jersey/JAX-RS.\n. I'm not a Jetty expert so my offhand comments about the Jetty container are just that, offhand :-) The above is my understanding but always learning, please correct me if wrong.\n. It is failing because of the dependency on a patch to Metrics, which hasn't been accepted. The PR is at dropwizard/metrics#532 or you can see it in my personal branch at https://github.com/saadmufti/metrics/tree/jersey2-upgrade . Caveat, I haven't touched it for a while and Metrics has been getting other patches, so there might be some conflict in my branch with the latest Metrics that I'm not aware of.\nCheers.\n. Rebased to latest master of both Dropwizard and Metrics libs.\n. The build passes all tests on my own laptop, not sure why the Travis build is failing. Seems to be failing in Dropwizard Logging module because it is not finding some required logging module from Metrics. Looking into it.\n. Build is failing because latest Metrics library snapshot build is missing from the snapshot repository.\n. @skamille @ryantenney  kindly pushed a Metrics 3.1.0-SNAPSHOT snapshot build to the snapshot repository. I can only force a Travis build by adding commits because I lack the correct rights, so I fixed a couple of minor warnings in the Dropwizard Jersey module to force a build, waiting to see if it goes better.\n. Woohoo, build passed :-)\n. @skamille That's a tough one, coming up with any sort of coherent split). Jersey reaches into so much that a lot had to change. The main one of course is the Dropwizard Jersey module, that would be a good place to start. I think back when I first put this together, I did a short writeup on all the changes in the dropwizard-user google group which anyone can still find and which would refer to the very first commit in the PR (back then I squashed all changes in one commit). But since then other changes have been made, a couple were submitted by @marcushenrique , others I did as a consequence of rebasing to the latest master where people have kept adding features using Jersey 1.x interfaces that I had to change to Jersey 2.x, plus I cleaned up some of my code as I discovered better ways of doing things.\n. FWIW here is a link to my notes from the first commit: link. A couple of the notes no longer apply as a) Optional parameters are now supposed thanks to a submission from @marcushenrique b) the last note about ByteArrayInputStream is obsolete as I now just use Response.readEntity.\nAs for area to focus on, that would be to make sure all changed unit tests are still testing the proper functionality, (for e.g. I just in the past couple of days discovered that one of the Mustache unit tests was passing because the test was not testing the right thing), that any new classes follow the project's conventions. In terms of functionality, I am fairly confident since the project came with an already fairly robust set of unit tests.\nIn terms of functionality changes, the way @Auth works has changed in that you need different code to register your providers. The docs have been updated with that change. Dropwizard Client was using deprecated interfaces and also interfaces that have disappeared from the latest Metrics Http Cleint Module so I changed the implementations. As part of that I had to drop support for SchemeRegistry which is deprecated and was exposed in the public interface of HttpClientBuilder. Everything else should require no changes from users of Dropwizard. \nHope the above helps, I couldn't come up up with anything more coherent since its a lot of tiny changes in various places but basically the same functionality as before.\n. @joschi thanks for the review comments. I will apply them as soon as I get a chance to get some free time from work crunch time which I am currently in the middle of. I will also rebase the commits against the latest master which has drifted again.\n. @joschi I applied most of your code review comments, except for a couple on which I had questions and added comments above.\n. @joschi rebased against the latest master\n. @sent1nel  Still blocked because it relies on a SNAPSHOT build of metrics. It passes Travis now because I rebased against the latest master. Might be helpful if you checked out the branch and the SNAPSHOT metrics build and gave it a try in your application. Plus of course any code review comments would be welcome.\n. Thanks, I will take a look the next time I merge in the latest changes from the master branch.\n. Unless you already have patch to contribute :-)\n. @cemo @joschi Since I last rebased this PR against the latest master, the master branch has drifted again and the PR currently has merge conflicts. I will work on rebasing it again to the latest master.\nCheers.\n. @joschi so then should I not bother rebasing the PR if you're doing the heavy lifting?\n. timeToLive is set on the underlying PoolingHttpClientConnectionManager and affects how long a connection that is idle (that is not leased to any requesting thread) gets to live before it is shut down.\nkeepAlive is set on the HttpClient instance and affects how long a connection will be kept alive before it is reconnected. It can be overridden if the server sends a Keep-Alive header with a different number (this header is non-standard). If set to 0, connections will be immediately closed after every request/response. If non-zero, the connection will be kept open waiting for another request/response until the keepAlive time is exhausted.\n. LGTM\n. I haven't carefully followed the whole thread, but on my experience at least with Jersey, @Valid on a resource method parameter does NOT throw any exception if the parameter is not provided. To insist that the parameter be provided, you have to add @NotNull . Doesn't that indicate that @Valid only applies when the object in question is non-null? I looked up the spec on the Hibernate site, but that is silent on the question of null objects when @Valid is used. \n. I think this is because Dropwizard is still on Jersey 1.x which is JAX-RS 1.x. There is an upcoming PR (from me) to migrate to Jersey 2.x, which will come with JAX-RS 2.x, which has that asynchronous support. So I don't think it makes sense to add the JAX-RS 2.x library explicitly since Jersey 1.x implementation doesn't support the asynchronous interfaces as far as I know.\n. I went through those slides, I didn't see where it recommended what you're trying to do. It said keep the \"HTTP\" error code for code, and the message in the JSON payload for people. Unless I missed something.\n. There is a PR for upgrading to Jersey 2.x that also gets rid of this deprecated interface. That PR is in the pipeline awaiting final approval and final release of the metrics SNAPSHOT release it depends upon.\n. Even the metrics library has gotten rid of these deprecated interfaces in its SNAPSHOT build, which the jersey-2 PR depends on.\n. Looks good to me. The removal of PowerMock to use reflection instead creates a dependency on internal implementation, but the PowerMock based test was way too verbose and I like the new version better. Other than the stylistic issues already pointed to above, I don't see anything wrong.\n. Woohoo :-)\n. Thanks @joschi for all your hard work too to merge and fix\n. I think the servlet input stream will already have been read and consumed by the Jersey code that deserializes your JSON into a Java object, so it will be at the end of input. I don't know if the reset method of the InputStream would allow you read again from the beginning, but couldn't hurt to test\n. A lot of the properties in the client builder objects are private, so there are only a couple of ways to do this. Either use something like PowerMock over Mockito and use extensive mocking to control how the properties get set with mock objects, or use Java reflection to peek at known private properties. I think the current codebase uses the latter strategy so that would be more in keeping with the current code. Since this is only for testing it is ok in my opinion.\n. Good catch, this might be an issue in 0.8.0-SNAPSHOT also\n. This can be expensive and should not be the default IMHO. If required we\nshould make it configurable.\n\nSaad\nOn Apr 15, 2015 7:44 PM, \"Shivang Shah\" notifications@github.com wrote:\n\n@carlo-rtr https://github.com/carlo-rtr : So I dig deep inside the code\nand although I didn't get a chance to actually fork the project and give it\na try to change the code myself, I think I might have found the problem.\nIn v0.8 AbstractAppenderFactory :\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-logging/src/main/java/io/dropwizard/logging/AbstractAppenderFactory.java#L112\nI have a feeling that the \"includeCallerData\" should be set to \"true\"\nbefore you add the appender. I was able to come to that conclusion of using\nthe \"includeCallerData\" from here :\nhttp://stackoverflow.com/questions/13944641/logback-ayncappender-not-printing-file-and-line-number\nAnd it makes sense too. Because being async, if you don't have calller\ndata, you won't get the line #\nLet me know what you think .. If I get time, I will go ahead and fork out\nthe project and try this change myself. If you get a chance to test this\nchange out, greatly appreciated !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/975#issuecomment-93599307\n.\n. +1\n. I'll change it.\n. Thanks, I'll fix those as well.\n. Because inside the while loop, I needed to peek at the iterator to see if it had more items. At least in my implementation. In the the twenty seconds I have taken revisiting this, I can't see a way around it, can you?\n. Sorry for the confusion, I thought you were referring to the earlier iterator also used in thios code. There is no reason for the second one to be explicit, I'll remove it.\n. Sure thing\n. I'm in the process of applying the code review comments. I made this static because it looked more like a utility function and does not need or use any member variable from its containing class. Do you still recommend it stay non-static?\n. Same as above, please advise.\n. I would gladly do that, but the implementation uses a static method org.apache.http.impl.client.HttpClientBuilder.create() to get the org.apache.http.impl.client.HttpClientBuilder instance. One option would be to add a package private setHttpClientBuilder(org.apache.http.impl.client.HttpClientBuilder builder) method just to avoid all this mocking in the testing, but that doesn't sound quite right either as then we're changing the class solely to enable our testing as this is not public behavior. What do you advise? \n. In dropwizard-testing/pom.xml you point to version 1.6.0 and here 1.6.1 . Why the difference?\n. \n",
    "jamel": "sorry...\n. There is a good example how to build dropwizard project with gradle. This example works for me just fine. May be it helps in your case.\n. Do you think that everyone will use only one (latest) version? I don't think so.\nAnd what kind of burden is all about? You only need to copy the documentation as is from the tag of the previous version and put it in a separate folder.\n. ",
    "sps": "Thanks Coda!\n. ",
    "cobbzilla": "Hi Coda, thanks for the feedback. \nI agree that class names in configs are ugly and am open to different approach. I will also look at the ugly \"*Json\" class names and see if it's easy to generalize them.\nI'm not sure I fully understand what you mean by \"Why not just add the mapper to Environment with the default implementation?\" -- I had tried initially to register my own ExceptionMapper for InvalidEntityException, but it seems the default InvalidEntityExceptionMapper always gets to it first, so it had no effect.\n. OK, updated the pull request, it's actually a lot cleaner now, taking the stuff out of the config. A few notes--\nInstead of implementing Environment.setInvalidEntityExceptionMapper (which seems to point towards unnecessary method bloat on Environment), I've simply removed the auto-registration of the default InvalidEntityExceptionMapper in the constructor of DropwizardResourceConfig, and instead allowed clients to simply register their own handler in the standard means, i.e., via environment.addProvider(MyMapperClass.class). \nNow, given the above, in EnvironmentCommand.run, after the client's \"service.run\" method has completed (which is where the various calls to env.addProvider will happen), but before we call EnvironmentCommand's run method, we check to see if any exception mapper has been defined for InvalidEntityException. If none has been defined, we use the default (InvalidEntityExceptionMapper). The check for what ExceptionMappers have been defined is implemented in \npublic boolean exceptionMapperHasBeenRegistered(Class<? extends Exception> exceptionClass)\nThe above method, I will be the first to admit, is seriously ugly code, but it is precise, and it works. I am open to suggestions on making it better. With respect to this particular implementation, I have a question --\nThe check in Environment.exceptionMapperHasBeenRegistered currently boil down to an exact match on the parameterized type -- \n((ParameterizedType) c.getGenericInterfaces()[0]).getActualTypeArguments()[0].equals(exceptionClass))\nBut it might be more flexible (or more dangerous) to allow matches on subclasses of the type, like so:\nexceptionClass.isAssignableFrom(((ParameterizedType) c.getGenericInterfaces()[0]).getActualTypeArguments()[0].getClass())\nFor now I've gone for the former to keep it simple -- only an exact match will be overridden, which seems to make the most semantic sense to me.\n- I renamed ConstraintViolationJson to ConstraintViolationBean. I didn't want to use plain \"ConstraintViolation\" since there's already a class in javax.validation with the same name. I also added a constructor to ConstraintViolationBean that takes a ConstraintViolation and populates the internal fields, which I anticipate (correctly?) that many callers will want. Lastly, I changed the annotations to be JAXB compliant (using @XmlElement and such) -- Jackson still renders them A-OK into JSON (thanks Jackson!), but if someone has configured their Jersey server to return XML, it should work just fine there too (BIG NOTE-- I have not tested this with XML, only JSON-- that said, \"mvn clean verify\" does complete successfully :)\n- I renamed to InvalidEntityToJsonExceptionMapper to InvalidEntityToBeanExceptionMapper. Technically, this could be omitted from the dropwizard-core codebase, since clients can always register their own exception mapper and pass in their own implementation, but I think InvalidEntityToBeanExceptionMapper is a useful enough implementation that people will get a lot of mileage out of it. But maybe I'm being optimistic.\n. The problem with adding stuff to DropwizardResourceConfig is that it's created when the Enviroment is, which is before the client has any opportunity to work with it. So you need some check after the client has done its thing, to register the default InvalidEntityException mapper if the client didn't add its own.\n. I might be bold and propose, that in the place where I've added \n// Use default mapper for InvalidEntityException if client did not set one\n    if (!environment.exceptionMapperHasBeenRegistered(InvalidEntityException.class)) {\n        environment.addProvider(InvalidEntityExceptionMapper.class);\n    }\nIt might be better to generalize, and add a method \"setDefaults\" which would do the above, and then some more, depending on what the client has set or not set.\nThat said, I'm not sure I fully understand your concerns re DropwizardResourceConfig, so I may be missing something.\n. I certainly agree with both @ajordens and @codahale that this particular pull request does not represent any kind of comprehensive path to a general rewrite on exception handling in DW.\nThat said, the basic validation error (422) ought to return a machine-readable array (ala JSON or XML representations of ConstraintViolations). This is a step in the right direction that has zero effect on the client API. \nI am all for (and in fact happy to help explore, as I've become enamored of the framework) various ways to improve DW by adding a more flexible exception framework. \nFor example -- the ability to swap out UnbrandedErrorHandler for one's own implementation could go a long way -- but for that case, it definitely ought to involve a deeper thinking about DW exception handling in general.\nSo yes, I am advocating taking a small step before a big one. It might be (from the library/server side) not exactly the right move, but then again, it doesn't affect clients (no method/signature changes), and the ROI is big -- many, many REST clients get 422s and want to handle them programmatically. \nMy conjecture here regarding the % of DW clients that prefer 422s via JSON/XML vs HTML is admittedly purely anecdotal, and I will happily concede if empirical data proves me wrong, but my gut is strongly telling me that REST clients want error responses they can handle programmatically without worrying about parsing/formatting. But I must admit, I have a strong humility instinct and will not be offended (but indeed intrigued and curious) if/when I am proven wrong on this.\nThen, thinking a bit strategically, before one undertakes an overhaul, would it not be best to play with some experiments to see what works best? Assuming that those experiments do not affect clients at all -- unless they choose to exercise the experimental features, with full caveat emptor?\n. OK, all that being said (and a bit hastily, my apologies), I will look into moving the logic into the validate method on DropwizardResourceConfig, that sounds quite logical and a helluva lot cleaner. Update forthcoming...\n. Sorry for the misspelling on \"validate\" on the earlier commit message. My fat fingers.\nMoving the \"check for default mapper\" logic into the DropwizardResourceConfig.validate method was really quite elegant. Thanks for the suggestion, it was totally the right way to go.\nThis implementation pattern (leveraging validation hooks) does get me thinking about a more general approach to error/exception handling, but per my comments above, my ambitions here are limited to making 422s reasonably accessible to programmatic clients\nI remain curious about where this kind of overriding of defaults (more generally) goes from here; but I think this is a good starting point.\nIf nothing else, it's engendered a good discussion :)\n. @ajordens thanks for the feedback. Really got me thinking.\nI think we're in agreement, but my point was that the increment benefit is certainly in cleaning up a bit of how the validator operates and getting more error context into the InvalidEntityException.\nYes, absolutely. Just having the ConstraintViolations around, as opposed to tossed away, after they get String-ified is the main, incremental benefit here. The rest of it is convenience stuff for delivering the response, that could be provided by a client.\nWith that said, I think it's better to rein in the scope on this pull request rather than expand it. In an upcoming commit I will remove the InvalidEntityToBeanExceptionMapper convenience class, but leave in place the wiring to allow clients to provide their own implementation. Seems like going down the response-formatting rabbit hole is a long trip, best considered at another time.\nanyone wanting to write a custom mapper would only have to remove the existing ones (which is possible but hacky) and add their own, rather than having to subvert the entire validator->map stack with their own code that is called from resource methods.\nI think if the defaults are well-documented, it suffices to provide an \"override\" mechanism via standard calls (e.g., Environment.addProvider, etc). Then no removal is necessary, because DW only sets the defaults if the client hasn't overridden them. But perhaps I am not fully understanding.\nNow, a client wanting to muck with the mappers at runtime (is that even possible?) would have to remove and then add. But if you're into that you better know what the heck you're doing :)\n. @ajordens I would agree -- perhaps an ill-fitting analogy, but it's like, imagine you're in a faraway country, having a conversation with someone in their language, but at some point you get angry and yell at them in your native tongue. It might be easy/instinctual for you, but they will have no idea what you are saying.\n. @codahale anything else I can do to clean this up? does it stand a decent chance of getting merged in?\n. no problemo. thanks.\n. thanks and sorry for the late response. it's all working great.\n. Yeah totally. I agree.\n. I had hoped to make something that would work within an \"existing\" content negotiation scheme, but maybe that's a bit of my own naivet\u00e9 about JAX-RS. The current branch does work fine without any @Produces annotation. \nIf we need to add @Produces annotations, we end up with one class per format (XML, JSON, etc). Not that bad with subclassing but then we are back to having a base class and some really thin \"_Json\" and \"_Xml\" wrapper classes -- is this the right approach? Happy to do so but would really appreciate your advice here.\n. duh. I'm hardcoding .type(MediaType.APPLICATION_JSON) as it is, so something's gotta change!\n. ",
    "doapp-ryanp": "Does this new architecture allow the flexability to remove the '(was X)' response? I'd like to remove the '(was X)' from something like an invalid password - so that my clients can directly echo out the response on a per-field basis.  Ex:\n...\n<li>pw password must be between 6 and 20 chars and contain a number, a lowercase letter and a uppercase letter (was abc)</li>\n...\n. Hmm I had to specify @JsonProperty(\"aws\") for the following, if not I get the error:\n```\nException in thread \"main\" com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"aws\" (class com.doapps.readful.MyServiceConfiguration), not marked as ignorable (7 known properties: , \"loggingConfiguration\", \"http\", \"template\", \"defaultName\", \"httpConfiguration\", \"logging\", \"awsConfig\"])\n```\n```\ntemplate: Hello, %s!\ndefaultName: Stranger\nAWS settings\naws:\n  accessKey: accessKey\n  secretKey: secretKey\n```\n``` java\npublic class AwsConfiguration {\n    @NotEmpty\n    @JsonProperty\n    private String accessKey;\n@NotEmpty\n@JsonProperty\nprivate String secretKey;\n\npublic String getSecretKey() {\n    return secretKey;\n}\n\npublic void setSecretKey(String secretKey) {\n    this.secretKey = secretKey;\n}\n\n}\n```\n``` java\npublic class MyServiceConfiguration extends Configuration {\n    @NotEmpty\n    @JsonProperty\n    private String template;\n@NotEmpty\n@JsonProperty\nprivate String defaultName = \"Stranger\";\n\n@Valid\n@NotNull\n@JsonProperty(\"aws\")\nprivate AwsConfiguration awsConfig = new AwsConfiguration();\n\npublic String getTemplate() {\n    return template;\n}\n\npublic String getDefaultName() {\n    return defaultName;\n}\n\npublic AwsConfiguration getAwsConfiguration() {\n    return awsConfig;\n}\n\n}\n```\n. ",
    "pkwarren": "That closes the JDBC pool so no new connections can be returned from it. However, the connection opened in ManagedJdbcConnection and passed to the JdbcConnection constructor is not closed.\nThis could alternatively call super.close() in ManagedJdbcConnection.stop() to accomplish the same thing.\n. It looks like a1f7739ce78345b312c8d2b6298214586e237090 fixed this.\n. Perhaps a MultiPartBundle could be added? Otherwise dropwizard-forms only exists to pull in a transitive dependency on jersey-media-multipart.\n. @nickbabcock - Thanks for the pointer - I didn't look around enough to find the right home for the test. I found this while porting some test code from 0.9.2 to 1.0.0-rc2 and so I'm not sure if it is reproducable in the wild - it is more a correctness fix similar to the existing lines found here: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java#L115-L118\nI was able to come up with an example which failed, but it required enabling validation for the resource itself (instead of just the method parameters). I don't know if this is desired behavior (although it could be useful).\n. I'm not very familiar with Hibernate, but after changing the test to run as a full integration test, I was able to fail the test in @ant3's repository (it appears that the JSON response is serialized however a content-type header isn't sent in the response). I don't know if this is the underlying issue seen by the reporter.\nHere's what I put together (including the proposed fix mentioned above which moves the closing of the session to occur in the FINISHED event and the transaction to be committed in the RESP_FILTERS_START event: https://github.com/dropwizard/dropwizard/compare/master...pkwarren:lazyload\n. Implements the feature requested in #1614.\n. @arteam - Thanks for the review. Updated based on your comments.\n. \ud83d\udc4d \n. It sounds like this patch will also be included in 2.7.6 which should be less risk at this point for the 1.0.0 release: https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.7.6\n. @arteam - Did this make the 1.1.0 release? I didn't notice it in the release notes.. We encountered a pretty significant perf issue with Hibernate 5.4.2 (https://hibernate.atlassian.net/browse/HV-1642) that is confirmed resolved in 6.0. Looking forward to HV 6.x in DropWizard.. Thanks @joschi!. Updated.\n. According to the docs, it sounds like this is called on success or failure: \nhttps://github.com/jersey/jersey/blob/5f9e5fb78d48ce45431032a5867c157f191716fc/core-server/src/main/java/org/glassfish/jersey/server/monitoring/RequestEvent.java#L174-L179\n. ",
    "ricn": "No problem. I saw that Metrics got some CI love as well :-)\n. ",
    "nash4403": "Run mvn package on the root dropwizard pom.xml\nBUILD failure\nI see dropwizard-views - FAILURE\ndropwizard-test HELPERS  SKIPPED\ndrowizard-example SKIPPED\n. I may be doing something basically wrong\nHere you go. \n```\nT E S T S\nunning com.yammer.dropwizard.views.tests.ViewBundleTest\nests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.74 sec\nunning com.yammer.dropwizard.views.tests.ViewMessageBodyWriterTest\nests run: 7, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.587 sec <<< FA\nLURE!\nunning com.yammer.dropwizard.views.tests.ViewTest\nests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec\nesults :\nailed tests:   writesFreemarkerViews(com.yammer.dropwizard.views.tests.ViewMess\ngeBodyWriterTest): expected:<'Woop woop. HONK[]\n handlesRelativeFreemarkerTemplatePaths(com.yammer.dropwizard.views.tests.ViewM\nssageBodyWriterTest): expected:<'Ok.[]\nests run: 9, Failures: 2, Errors: 0, Skipped: 0\nINFO] ------------------------------------------------------------------------\nINFO] Reactor Summary:\nINFO]\nINFO] Dropwizard Project ................................ SUCCESS [1.919s]\nINFO] Dropwizard ........................................ SUCCESS [25.841s]\nINFO] Dropwizard HTTP Client ............................ SUCCESS [5.881s]\nINFO] Dropwizard Database Support ....................... SUCCESS [4.056s]\nINFO] Dropwizard JDBI Support ........................... SUCCESS [5.928s]\nINFO] Dropwizard Migrations ............................. SUCCESS [4.555s]\nINFO] Dropwizard Hibernate Support ...................... SUCCESS [9.281s]\nINFO] Dropwizard Authentication ......................... SUCCESS [6.615s]\nINFO] Dropwizard Views .................................. FAILURE [2.002s]\nINFO] Dropwizard Test Helpers ........................... SKIPPED\nINFO] Dropwizard Example Application .................... SKIPPED\nINFO] ------------------------------------------------------------------------\nINFO] BUILD FAILURE\nINFO] ------------------------------------------------------------------------\nINFO] Total time: 1:06.655s\nINFO] Finished at: Sat Apr 20 22:22:30 PDT 2013\nINFO] Final Memory: 15M/215M\nINFO] ------------------------------------------------------------------------\nERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.\n0:test (default-test) on project dropwizard-views: There are test failures.\nERROR]\nERROR] Please refer to C:\\Users\\nacheruk\\DropWizard\\dropwizard\\dropwizard-views\ntarget\\surefire-reports for the individual test results.\nERROR] -> [Help 1]\nERROR]\nERROR] To see the full stack trace of the errors, re-run Maven with the -e swit\nh.\nERROR] Re-run Maven using the -X switch to enable full debug logging.\nERROR]\nERROR] For more information about the errors and possible solutions, please rea\n the following articles:\nERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureExc\nption\nERROR]\nERROR] After correcting the problems, you can resume the build with the command\nERROR]   mvn  -rf :dropwizard-views\n```\n. Thanks for the quick response. Is there any quick way to get around and continue my exploration of this product.\n. ",
    "akoskm": "The main cause of this problem was that I wanted to access the yml configuration in the bootstrap phase - where I have no access to the ExampleConfiguration (or at least I haven't figured out how to access it).\nAnyway, constructing the ObjectMapper through this factory method:\njava\nnew ObjectMapperFactory().build(new YAMLFactory())\nsolved the issue.\nThank you!\n. ",
    "jacek99": "yes, but you have just a static .txt file in your assets folder. I have an HTML with an img in it, a more realistic case. Served via OneJar Dropwizard returns 404 in this case.\n. your example has the same problem. Run your onejar and accees http://localhost:8080/\nYou get a 404\n. If I recall fatJar fails because Spring cannot be embedded in a different JAR, it has some JAR version check at startup. I can try just to be sure, but I recall trying different options a few months ago and OneJar was the only one that worked with Spring.\n. None as far as I know, You cannot use the fatjar/onejar approach if you have both Spring and HTML assets in a single Dropwizard app. You may have to deploy the app as multiple JARs in a single folder.\n. As per the long conversation on the forums:\nhttps://groups.google.com/forum/#!topic/dropwizard-user/MSp3RjtJy1o\nwe agreed the proper solution is to use the Gradle Shadow plugin instead of OneJar:\nhttps://github.com/johnrengelman/shadow\nClosing issues.\n. The queue is exposed via Dropwizard. To go to it directly one would need to connect directly to a Cassandra cluster, go through all rows in a particular column family and look for rows with columns in them. A bit more involved.\nSince we are installing this on multiple customer sites and do not always control what monitoring software they have (some of which may not be capable of connecting directly to Cassandra), we are trying to make it easy for them.\n. To be clear: it's an application level warning. The presence of data in a particular table means someone needs to look at it. So it's not really an infrastructure failure (e.g. disks, network, etc). Very application logic-specific warning condition.\n. Maybe a flexible alternative would be to just add \nenvironment.addAdminServlet(....)\nand in there apps could add whatever they want. I think that would be the most flexible (and probably easiest) solution.\n. Yes, I just saw this on the forums. In this case I am OK to close this issue. We'll be fine waiting for 0.7\n. Also see:\nhttps://groups.google.com/forum/#!topic/dropwizard-user/ElrV5BqBcoo\n. I had a look at it and frankly speaking, it's not very clear how he accomplishes it (since I am not a Guice expert either).\nFrom what I read on HK2 at the core of its is the ServiceLocator object. It seems that if we were able to implement our own version of that interface and just configure HK2 within Jersey to use it (instead of the one created by default by Dropwizard), that should do the trick.\nHowever, there seems to be no way to customize this within the current DW API....\n. Basically, all I need to tell that bloody HK2 (which I curse Sun every day for introducing it and ruining Jersey for everybody) is to fetch an existing Spring bean from our existing context instead of trying to create it itself and inject it.\n. We have the opposite. All of our classes (including JAX-RS resources) were Spring beans from the beginning and we @Inject other Spring beans (e.g. DAOs) into them.\nWhere the bloody HK2 gets in the way is that now wants to also implement the @Inject itself (even though Spring has already done it), so HK2 gives an an error like \"unable to find bean of type SomeEntityDao\" (as that bean is a Spring bean, not an HK2 bean).\nBasically, HK2 seems to want to manage JAX-RS resources by itself and does not handle the case at all where it's already part of another DI engine context.\nThis worked perfectly fine and was working great prior to Jersey 2, we had a DW app and Spring to manage all the beans inside it. Then came Jersey 2 with HK2 and ruined everything.\n. Are your JAX-RS resources Spring beans as well? When you have @Inject on those, who does the injection? HK2 or Spring?\nEvery time HK2 sees an @Inject in a JAX-RS resource, it wants to inject that resource itself. We can't stop it from doing that.\nSimple example;\n```\n@Service    // Spring Service bean itself\n@Path(\"/mealService\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic class MealServiceResource {\n @Inject\n private SomeSpringDao dao;\n\n```\n. So how do you stop HK2 from trying to @Inject inject that SomeSpringDao bean?\nSwitching to contructor injection would be ugly and require rewriting hundreds of JAX-RS resources across multiple apps that use the same base framework....\n. Ah, sorry, just read your comment. So you do not use @Inject for Spring beans on JAX-RS resources, versus we do.\nSo your solution would not work for us.\n. Well, I am glad it works, but we do not use constructor injection anywhere in our app, we use @Inject everywhere for consistency (and the code has much less boilerplate).\nA cleaner IMHO solution would still be to drive HK2 with a pass-through ServiceLocator that just gives it any bean it wants from an already existing Spring context.\nBut we need DW to give us the ability to override the ServiveLocator within Jersey, which right now the API does not allow us to.\n. Hence, the initial request in this ticket.\nHK2 allows you to use your own ServiceLocator, it's part of its design:\nhttps://hk2.java.net/2.5.0-b07/apidocs/org/glassfish/hk2/api/ServiceLocator.html\nThey provide a default implementation:\nhttps://hk2.java.net/2.5.0-b16/getting-started.html\nbut you are supposed to be able to use your own.\nUnfortunately, Dropwizard does not allow us to use our own, as it initializes Jersey and HK2 without any hooks to allow injecting your own ServiceLocator.\nThat is what we would love to get fixed.\n. Hm we tried it before, a few months ago, but it did not seem to work for us.\nAccording to the docs, it was supposed to just pick it up if it was in the classpath.\nThe docs you are pointing to seem to have some extra instructions on how to wire the two together.\nLet me try that and see if that works. Maybe that could do it.\nWill try and let you know if we hit any snags or unknowns. HK2 is somewhat of an undocumented beast.\n. Sorry, have not had a chance to look at it again, other work-related issues swamped me. \nHope to have another go at a 1.0 attempt within a month\n. Hi Nick, unfortunately we cannot get the Spring/HK2 bridge to work.\nThe reason for that is that the ServiceLocator does not seem to be initialized yet when the run() is executed.\nHere is my code in the run() that is executed after our Spring context starts:\nServletContainer sc = (ServletContainer) environment.getJerseyServletContainer();\n        ApplicationHandler ah = sc.getApplicationHandler();\n        ServiceLocator hk2 = ah.getServiceLocator();\nIt fails with a NullPointerException on\nApplicationHandler ah = sc.getApplicationHandler();\nwhen I debug the code I see in Dropwiizard\"\n@Override\n    public ApplicationHandler getApplicationHandler() {\n        return webComponent.appHandler;\n    }\nbut unfortunately...webComponent = null at this point so it throws an NPE.\nAny suggestions are welcome...how can I get a valid instance of the HK2 ServiceLocator at startup.\n. Finally got it working, but it was a trip. Probably worth documenting in a Wiki or the webpage, so that everyone does not have to go through this obscure discovery process.\nFirst, we need to define a Jersey Feature that is also a ServiceLocator provider and in there we enable the Spring/HK2 bridge on the alread created service locator:\n```\nimport com.google.common.base.Preconditions;\nimport org.glassfish.hk2.api.ServiceLocator;\nimport org.glassfish.jersey.ServiceLocatorProvider;\nimport org.jvnet.hk2.internal.ServiceLocatorImpl;\nimport org.jvnet.hk2.spring.bridge.api.SpringBridge;\nimport org.jvnet.hk2.spring.bridge.api.SpringIntoHK2Bridge;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport javax.inject.Provider;\nimport javax.ws.rs.core.Feature;\nimport javax.ws.rs.core.FeatureContext;\n/\n * Integrates the default Jersey HK2 ServiceLocator with Spring via the\n * Spring/HK2 bridge from Oracle\n \n * @author Jacek Furmankewicz\n /\npublic class SpringAwareHK2ServiceLocatorFeature implements Feature, Provider {\nprivate AnnotationConfigApplicationContext springContext;\nprivate ServiceLocator locator;\n\npublic SpringAwareHK2ServiceLocatorFeature(AnnotationConfigApplicationContext springContext) {\n    this.springContext = springContext;\n}\n\n@Override\npublic ServiceLocator get() {\n    return Preconditions.checkNotNull(locator, \"Service locator is not yet available\");\n}\n\n@Override\npublic boolean configure(FeatureContext context) {\n    locator =  ServiceLocatorProvider.getServiceLocator(context);\n\n    SpringBridge.getSpringBridge().initializeSpringBridge(locator);\n    SpringIntoHK2Bridge springBridge = locator.getService(SpringIntoHK2Bridge.class);\n    springBridge.bridgeSpringBeanFactory(springContext.getBeanFactory());\n\n    return true;\n}\n\n}\n```\nThen we need to register it manually at startup, already initialzed with an existing Spring context:\n// hook up Spring context and Jersey HK2 together\n        environment.jersey().register(new SpringAwareHK2ServiceLocatorFeature(context));\nThat finally did it, without any further modifications to Dropwizard.\nNow Jersey/HK2 properly gets Spring beans and does not complain that they don't exist.\nThanks for all your help. The key code was in the Guice / Dropwizard module and I adapted it from there for Spring.\nOnce again, I think it's worthwhile adding a  \"Dropwizard & Spring\" section on the main site and documenting this there.\n. Sure, just point you to where i could do this.\n. Sounds good. Will try to do this one of the evenings this week.\n. Any particular section you think it belongs to?\nOr just add it to the end maybe as a separate section like\n- Integration with 3rd party libraries\n  - Spring\netc\n. ",
    "zeroDivisible": "@jacek99 Just out of curiosity (and I know this is not a proper solution), but did you maybe try fatJar instead of oneJar to do the packaging?\n. ",
    "carljmosca": "Is there a known workaround for this issue?\n. Thank you jacek99.\n. ",
    "kenyee": "Got bit by this today as I was experimenting...probably worth a mention on jacek99's github page that this doesn't work.  In my case, I can't even do localhost:8080/index.htm because I get a 404 error.\nOn a side note, Dropwizard's jetty should be logging these errors somewhere IMHO, w/ the full path of the file it tried to read and where inside the jar it's trying to read it.  That'd go a long way towards chasing this down...\n. ",
    "yvandb": "I fixed this problem by specifying an 'additionalDir' property on the OneJar task in gradle.\nThis adds the directory to the root of the archive as explained on https://github.com/rholder/gradle-one-jar\n. Is there any update on this issue? @glennmcallister? It seems dw 0.9 moved to filter based authentication, however jetty still doesn't pick up the user identity for the requestlog. \nThank you very much for your attention. \n. Thanks @asiletto @glennmcallister \nI'm using an AuthFilter similar to the one in the documentation: http://www.dropwizard.io/0.9.1/docs/manual/auth.html\nI doubt that this is the best way to get to the jetty Request, but it sure does the job:\nRequest request = HttpChannel.getCurrentHttpChannel().getRequest();\nif (request != null) {\n  UserIdentity userId = new DefaultUserIdentity(null, principal.get(), null);\n  request.setAuthentication(new UserAuthentication(null, userId));\n}\n. ",
    "massimiliano-gerardi-akqa": "Thanks\nMassi\n. ",
    "LeRiton": "OK, that makes sense.\nDigging a bit in dropwizard-views, I see that CachingMustacheFactory is extending DefaultMustacheFactory, but without calling any of the parent constructors. Those are public DefaultMustacheFactory(File fileRoot) and its String resourceRoot analogue.\nMaking ViewBundle a configured one, provides template directory in configuration and use it when creating a factory could be a good improvement (defaulting to current behavior).\nI could try to submit a patch if you think it's relevant.\n. ",
    "kilemensi": "Just checked and the problem is still there.\nTried upgrading to the latest RC version, usertype.core 3.1.0.CR6, and it seems to fix the problem. (I couldn't find the change log on the site so I'm not sure if there is any known bug on usertype.core 3.0.0.GA that can be attributed to this behavior\n. Still there\n```\nResults :\nFailed tests:   createsNewData(com.codahale.dropwizard.hibernate.JerseyIntegrationTest): expected:<1971-03-14T[19]:12:00.000> but was:<1971-03-14T[22]:12:00.000>\nTests run: 51, Failures: 1, Errors: 0, Skipped: 0\n```\n. The same test still fails.\nWhat about this link? It's a bit old link but I've tried one of the solutions offered there (setting default timezone before starting database) i.e.\njava\nTimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\nTimeZone.setDefault(timeZone);\nbefore building the sessionFactory and it seems to fix the issue.\n. I can confirm this issue is now fixed.\n. Cheers\n. Hey Nick, sent the fix in #400.\n. Yes, I am currently using a windows machine and I can confirm all tests pass.\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Dropwizard Project ................................ SUCCESS [0.760s]\n[INFO] Dropwizard Utility Classes ........................ SUCCESS [1.880s]\n[INFO] Dropwizard Jackson Support ........................ SUCCESS [1.340s]\n[INFO] Dropwizard Validation Support ..................... SUCCESS [1.200s]\n[INFO] Dropwizard Configuration Support .................. SUCCESS [1.670s]\n[INFO] Dropwizard Logging Support ........................ SUCCESS [2.250s]\n[INFO] Dropwizard Lifecycle Support ...................... SUCCESS [1.220s]\n[INFO] Dropwizard Metrics Support ........................ SUCCESS [1.750s]\n[INFO] Dropwizard Jersey Support ......................... SUCCESS [6.812s]\n[INFO] Dropwizard Servlet Support ........................ SUCCESS [1.770s]\n[INFO] Dropwizard Jetty Support .......................... SUCCESS [2.770s]\n[INFO] Dropwizard ........................................ SUCCESS [3.701s]\n[INFO] Dropwizard HTTP Client ............................ SUCCESS [3.100s]\n[INFO] Dropwizard Database Support ....................... SUCCESS [1.220s]\n[INFO] Dropwizard JDBI Support ........................... SUCCESS [2.331s]\n[INFO] Dropwizard Migrations ............................. SUCCESS [0.700s]\n[INFO] Dropwizard Hibernate Support ...................... SUCCESS [5.443s]\n[INFO] Dropwizard Authentication ......................... SUCCESS [2.990s]\n[INFO] Dropwizard Asset Bundle ........................... SUCCESS [1.290s]\n[INFO] Dropwizard SPDY Support ........................... SUCCESS [0.950s]\n[INFO] Dropwizard Views .................................. SUCCESS [1.520s]\n[INFO] Dropwizard Freemarker Views ....................... SUCCESS [3.620s]\n[INFO] Dropwizard Mustache Views ......................... SUCCESS [3.380s]\n[INFO] Dropwizard Test Helpers ........................... SUCCESS [5.141s]\n[INFO] Dropwizard Example Application .................... SUCCESS [1.230s]\n[INFO] Dropwizard Multipart Form Support ................. SUCCESS [0.030s]\n[INFO] Dropwizard Metrics Support for Ganglia ............ SUCCESS [1.030s]\n[INFO] Dropwizard Metrics Support for Graphite ........... SUCCESS [1.180s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1:02.698s\n. Hey @codahale , @nicktelford & @kutzi \nI think I've finally figured out why @kutzi and I gets different tests results.\nI believe @kutzi uses msysgit or GitHub for Windows which by default sets git config --global core.autocrlf true upon installation, meaning all files are converted to CRLF upon git checkout.\nOn my machine however, the settings is turned off i.e. git config --global core.autocrlf false, meaning all files retain the nix LF EOL. This is because I use mostly nix tools such as cygwin as well as the git automatic EOL convertion may fail if there is any file with non-ANSI/UTF-8 encoding (such as some utf-16 files).\nGit itself has no official recommendation on how to deal with this. More info here.\n. -1 for this.\n- Logback is bootstrapped too early for some of customizations. This can be refactored once 0.8 is released. People have been shipping products using the current design and this should not hold back or rushed into the 0.8 release.\n- Not enough customization options compared to logback.xml/.groovy. After the refactor, there is absolutely no reason for the yml configuration to be in any way inferior to the xml/groovy. As a bonus, if at all possible, after the refactor dropwizard can only have a hard dependency on sl4j api and any complient implementation can be used via an appropriate bundle.\n- Issue configuration per env per region etc. Use package manager e.g. Capsule to automate the bundling and distribution of properly configured per env/per region jars.\nI'm still 100% convinced Dropwizard choice of standardizing configuration to a single yml file is the way to go.\n. @GreyTeardrop \nDropwizard has had no problem breaking backward compatibility if it is warranted: 0.6 -> 0.7 introduced backward incompatibilities like renaming main Service class to Application, 0.7 -> 0.8 will also introduced backward incompatibilities like re-introduction of rootPath with jersey 2, etc, etc. After all, dropwizard is just a wrapper around standard java libraries. If those libraries break backward compatibity, dropwizard has no choice but to follow suit.\nWhat can be done without breaking backward compatibility will be done in 0.8.x releases and what can not, will have to wait for 0.9.\nIssue/Ticket/Branch can be created once 0.8 is pushed out.\n. @arteam \nSorry if I wasn't clear, the problem occurs when you're inserting a value into the database rather than when reading. If you use any complex statement, postgres looses type information on absent Optional value.\nUsing your example, lets make last_name null i.e.\nsql\ncreate table employees(\n  id bigint primary key,\n  first_name varchar(32) not null,\n  last_name varchar(32) null,\n  department_id bigint references departments(id)\n);\nLets then add any complex insert into the EmployeeDao such as the one shown below:\njava\n    @SqlUpdate(\"WITH employee_info AS (\"\n            + \"     SELECT :id AS id, :firstName AS first_name, \"\n            + \"             :lastName AS last_name,\"\n            + \"             :departmentId AS department_id\"\n            + \" )\"\n            + \" INSERT INTO employees (id, first_name, last_name,\"\n            + \"          department_id)\"\n            + \"     SELECT * FROM employee_info\")\n    int insert(@Bind(\"id\") Long id,\n            @Bind(\"firstName\") String firstName,\n            @Bind(\"lastName\") Optional<String> lastName,\n            @Bind(\"departmentId\") Long departmentId);\nAdding testInsert into PostgresOptionalTest\n``` java\n    @Test\n    public void testInsert() {\n        final Long id = 10L;\n        final String firstName = \"Artem\";\n        final Long departmentId = 3L;\n    final int insertCount = employeeDao.insert(id, firstName,\n            Optional.<String>absent(), departmentId);\n    Assert.assertEquals(1, insertCount);\n}\n\n```\nwill thrown the exception in question.\n. Yeah, I thought about adding explicit casts but I'm heavily using Optional in my code and hence would require a lot of casting.\nI guess for now I'll stick to using my custom OptionalArgumentFactory.\n. Hi @nickbabcock \nThe issue was when Optional is empty, dropwizard/jdbi could not figure out what type (it worked fine otherwise) of null it was. To quote @arteam:\n\nInformation about a parametrized type can be derived from the corresponding method through reflection. But we don't have runtime information about a position of an argument, so it's impossible to say which parameter of the method is currently being handled\n\nI still think this is the case but since I'm in the home stretch of another project, I can't really test to see if the situation has really been fixed or not in the project I was working on when I reported this issue.\n. The issue is like this:\nThe FreemarkerViewRendererTest.rendersViewsWithRelativeTemplatePaths test loads the relative.ftl file and tests the rendered output. But, the test itself is done in platform independent way i.e. uses System.lineSeparator() which in windows translates to CRLF.\nThe original relative.ftl however will contain LF in git itself and depending on how one sets the auto conversion, it will either contain LF as is (which is the case for me since I'm not doing any conversion) or it will contain CRLF for those who do (most users of GitHub for Windows app). Hence the code as is now will fail for the previous case and pass for the later.\nThe article does summarize the problem very well but evidently I've been using \"the old way\". I'm not sure how the two systems play together. If one provides .gitattributes, does that mean it doesn't matter what the core.[autocrlf, safecrlf] are set to? If yes then .gitattributes is THE BEST way to go about this.\n. @arteam Tested and works as expected. Thanks @cowtowncoder\n. @jplock / @arteam  Good to hear (and I respect) your views.\nJust for the record, I will put my views here (even though the issue is closed).\nI believe 1.0.0 is a great milestone for any library and it usually means production ready for most folks. If we enter this milestone with already \"deprecated\" libraries like Joda, it means they're going to have to be supported for the foreseable future which could be a year or more for such an important release.\nI believe the fact Java 7 has already been EOLed, most of people using Dropwizard (especially those that will be upgrading to 1.0.0) will be on Java 8 already and having Guava by default is the wrong default on Java 8.\nMy 2 cents are:\n- If migration path is the overriding goal, lets do another 0.9.x release (and not 1.0.0 for now) only focusing on baselining on Java 8. I think this will allow for introduction of 1.0.0 by the end of the first quarter and may be all other libraries like JDBI will also be on Java 8 without Guava dependencies.\n- Lets make a hard breaking change for 1.0.0 now and backport whatever we can back to 0.9.x and do a final 0.9.x release with all compatible changes. This will give people still on 0.9.x branch time to refactor their code slowly for 1.x branch while allowing dropwizard to move forward without accumulating any deadwood.\n. ",
    "lorrin": "I think @codahale didn't like my proposed change and rejected it.\nLooks to me like database config has gotten an overhaul in the upcoming 0.7; perhaps that was part of the reason.\n. ",
    "bentmann": "https://github.com/codahale/dropwizard/pull/343\n. Thanks!\n. Jackson 2.9.8 now provides a native fix for the issue (cf. https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8, https://github.com/FasterXML/jackson-modules-java8/issues/90), so you might want to revert these changes in Dropwizard and save yourself the need to maintain it.. ",
    "GregBowyer": "Which tests are failing ? I dont seem to get failures on my end\n. I wasnt sure about the enum, I think I will gut it now and fixerate the tests\n. Removing the enum makes it possible to craft a strange configuration, so I made it angry if that is tried\n. So all the review changes make sense, the one with the magic numbers is never going to be particularly clear, but hopefully constants should at least illuminate the usage a little.\nAlso where is the documentation ? on a gh-pages branch .. I should update the documentation to match really\n. I was stepping away from exposing too much, one to keep dropwizard in its simple defaults form and because that parameter is a little subtle.\nNo harm in exposing, I thought it was simpler to say, will drop vs wont drop (e.g. the initial reason why I used an enum rather than allowing knob fiddling)\n. ",
    "spacanowski": "Ah, sorry for that. I'll do it correctly and do it in separate PRs.\n. Haha, so old that it's not working anymore (packaging name changed).\n. Should be ok after Travis CI build restart for commit (a945891 was already ok, last build timedout due to CI load)\n. ",
    "melloware": "+1 this would be a great feature.  Hopefully it gets added.\n. +1. This is extremely useful and I typically add this type of servlet filter to all my webapps.  Especially in a clustered environment where grepping logs across servers and being able to track a single request ID is vital for DevOps!\n. ",
    "carlo-rtr": "\n1\n. Sound like the right path is to enhance and upgrade dropwizard-request-tracker given the age of the last commit, the fact that people want to see a more general version, and the fact that someone has developed a module for this. \n. I think this is a good idea, unfortunately the code has gone a bit stale.\n\nIf you are still interested in seeing this happen, a PR would be welcome. I think you would have to make RequestLogFactory behave similar to the hierarchy of ServerFactory, DefaultServerFactory and SimpleServerFactory. This would allow you to provide your own impl of RequestLogFactory by specifying the type in the configuration and including the class at runtime. The framework would have to find it via the java provider mechanism (\"META-INF.service\") like this:\nhttps://github.com/dropwizard/dropwizard/tree/master/dropwizard-core/src/main/resources/META-INF/services\nhttps://github.com/dropwizard/dropwizard/issues/972\n. @arteam does your project completely cover this case? If so, should we close this and make sure you have an entry https://github.com/dropwizard/modules.dropwizard.io/blob/master/_data/modules/thirdparty.yaml\n. Given this isn't mergeable, if your still interested in pursuing this, please open up an issue and we can discuss.\n. Thanks for the feedback. \n. sounds good\n. I think this will help achieve what your looking for\nhttp://dropwizard.io/manual/core.html#environment-variables\n. I think the right thing to do is take the dbpassword out of your configuration and use a template variable which is substituted by environment variables.\nhttp://dropwizard.io/manual/core.html#environment-variables\nhttps://github.com/dropwizard/dropwizard/commit/f61215e72ff6a7aadab9f5687bb4f4e43325a576\n. Code looks good to me\n. Thanks for the contribution, here is some feedback. Most if it is just being overly defensive, and avoiding the server from throwing a 500. With that said, if someone sends bad headers maybe that's the better result. I wonder what others think.\n- I would pull out the range parsing into a private method\n- The spec says we should provide content-length with range requests, \n  will that happen later in some other handler?\n- Maybe we should check to see if the equal exists before splitting on it? Otherwise elements[1] will blow up\n- If they send a bad header with nothing after the =, won't Integer.parseInt will throw an exception\n- It might be okay, but we are ignoring multi requests (comma separated vals)\nExamples of byte-ranges-specifier values (assuming an entity-body of length 10000):\n- The first 500 bytes (byte offsets 0-499, inclusive):  bytes=0-499\n  - The second 500 bytes (byte offsets 500-999, inclusive): bytes=500-999\n  - The final 500 bytes (byte offsets 9500-9999, inclusive): bytes=-500\n  - Or bytes=9500-\n  - The first and last bytes only (bytes 0 and 9999):  bytes=0-0,-1\n  - Several legal but not canonical specifications of the second 500\n    bytes (byte offsets 500-999, inclusive):\n     bytes=500-600,601-999\n. LGTM\n. LGTM\n. You can create your own server factory, extending one of the \n existing ones. You will need to register it in META-INF/services\nin ServerFactory.build(environment)\ndelegate to the existing one, afterwards overwrite the JacksonProvider\nJacksonMessageBodyProvider jacksonMessageBodyProvider\n                = new JacksonMessageBodyProvider(environment.getObjectMapper(), environment.getValidator());\n        jacksonMessageBodyProvider.addUntouchable(String.class);\n        environment.jersey().register(jacksonMessageBodyProvider);\n. https://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-0.6.2-to-0.7.x\n. @joschi How does one do the release now? I tried this, but got no luck:\nhttps://groups.google.com/forum/#!topic/dropwizard-dev/ZVSoXXaEngM\nAlso, If we get pass this, what info do I need in my .m2/setting.xml?\nthanks,\n-Carlo\n. If this https://github.com/dropwizard/dropwizard/pull/966 gets merged, then it should work. I verified.\n```\npackage com.example.helloworld.resources;\nimport com.codahale.metrics.MetricRegistry;\nimport com.google.common.collect.Lists;\nimport io.dropwizard.testing.junit.ResourceTestRule;\nimport io.dropwizard.views.ViewMessageBodyWriter;\nimport io.dropwizard.views.ViewRenderer;\nimport io.dropwizard.views.mustache.MustacheViewRenderer;\nimport org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;\nimport org.junit.ClassRule;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\npublic class ViewResourceTest {\n    private static List renders = Lists.newArrayList(new MustacheViewRenderer());\n@ClassRule\npublic static final ResourceTestRule resources = ResourceTestRule.builder()\n        .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n        .addProvider(ViewResource.class)\n        .addProvider(new ViewMessageBodyWriter(new MetricRegistry(), renders))\n        .build();\n\n\n@Test\npublic void testMustacheUTF8() {\n    String view = resources.getJerseyTest().target(\"/views/utf8.mustache\")\n            .request().accept(\"text/html;charset=UTF-8\").get(String.class);\n    assertThat(view).isEqualTo(\"<html>\\n\" +\n            \"<body>\\n\" +\n            \"\\n\" +\n            \"<h1>This is an example of a view containing UTF-8 characters</h1>\\n\" +\n            \"\\n\" +\n            \"\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\\n\" +\n            \"\\n\" +\n            \"</body>\\n\" +\n            \"</html>\");\n}\n\n}\n```\n. This seems reasonable\n. I like the copy here, thanks for doing this. There is another PR with committer guidelines, however those were in the doc directory. Should this be in the same hierarchy? I'm thinking the markdown is probably right the place. If others agree, I'll change my PR\n. @nicktelford @mveitas How does this look?\n. @nicktelford @mveitas I've updated the list to match the dropwizard org committers. Should be mergeable now\n. I think this change makes sense, but the build is breaking on slf4j-api dependency convergence; obviously unrelated. I think I saw a PR merged for dep issues, maybe we need to kick the build for this PR?\n. Given no response since @jplock commented, I'm going to assume no\n. Closing. If it's still an issue, we can reopen.\n. What's the point of having a maximumPoolSize if it won't ever grow to that because the queue is unbounded. This feels like a bug to me. We got bit by it.\n\"A ThreadPoolExecutor will automatically adjust the pool size (see getPoolSize()) according to the bounds set by corePoolSize (see getCorePoolSize()) and maximumPoolSize (see getMaximumPoolSize()). When a new task is submitted in method execute(java.lang.Runnable), and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as Integer.MAX_VALUE, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using setCorePoolSize(int) and setMaximumPoolSize(int).\"\ndocs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html\n. - Looks like the logback deps got merged in, so it's no longer blocking\n- Flexible request logging is definitely something we want: https://github.com/dropwizard/dropwizard/issues/972\n@reines You mind getting this to a point where it's mergeable, I'll make sure it's reviewed. \n. I'm going to close until there is an update.\n. This code came from the docs\n```\npackage com.example.helloworld.core;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.dropwizard.jackson.Jackson;\nimport org.junit.Test;\nimport static io.dropwizard.testing.FixtureHelpers.fixture;\nimport static org.assertj.core.api.Assertions.assertThat;\npublic class PersonTest {\n    private static final ObjectMapper MAPPER = Jackson.newObjectMapper();\n@Test\npublic void deserializesFromJSON() throws Exception {\n    final Person person = new Person(\"Luther Blissett\", \"lb@example.com\");\n    assertThat(MAPPER.readValue(fixture(\"fixtures/person.json\"), Person.class))\n            .isEqualTo(person);\n}\n\n}\n```\nThis test passes with this file contents:\n{ \"id\": 0,  \"fullName\": \"Luther Blissett\",  \"jobTitle\": \"lb@example.com\" }\nthe formatting of the json file doesn't matter, as long as it's valid json. @joschi comment earlier is relevant, you need to do object equality.\n. We can bring this into the organization, but under a different repo. Once you have a working module, conforming to the requirements listed in the link below, we can transfer ownership of the repo to the DW organizaton. @joschi Just did that for some of his modules.\nhttps://groups.google.com/d/msg/dropwizard-dev/nY23U4996_k/rKP_e05sIRAJ\n. The committers discussed this.\nI think we should follow http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\nWith that said, we shouldn't reformat all the code or make it fail the build. We'll follow this on a best effort basis.\n. @joschi can you make sure all the plumbing works? You should have the required github creds. Thanks!\n. I think the ability into embed dropwizard is useful and DW should have an opinion on how to do that. So I'm going to plus +1 the idea. Will also provide feedback in line.\n. @mveitas @nicktelford are you suggesting we remove the final restriction on Application.run?\nThen a new command can be configured on the bootstrap that allows starting & stopping the service?\n. Closing this. If you want something like this, I think Nick's comment makes sense.\n\"If we want to support embedding Dropwizard applications it's probably better for us to refactor the bootstrapping process such that the current mode of operation \"embeds\" the application in the default CLI-based environment. I don't think this is a particularly good candidate for another module.\"\n. @joschi given https://github.com/dropwizard/dropwizard/pull/842 was merged, what should we do?\nShould this be checking for @NotNull instead?\n. The code in commit 4c31dba5f33 seems reasonable. Can you submit a PR after rebasing master? My only tweak is to call out in docs that errorhandler needs a zero arg constuctor\n. Thanks\n. @wrprice sorry it took so long for a reply. \nThe theme of this looks good, but I don't like the static state. Could you just have a:\npublic String getPattern(Timezone timezone)\nwhich by default returns what existed.\nIf people want custom patterns, they can subclass & override. \nAlternatively, pass the factory via constructor and store it in a normal field.\nthanks for the contribution.\n. Looking at this some more, I think we should just rely on the configuration patterns in the config. If you really want to override the defaults, now you can roll your own LoggerFactory \n. Thanks for raising the issue. I think we can go with solution 1, and just log something more meaningful. Care to submit a PR?\n. Thank you\n. @nbauernfeind approach makes sense\n. https://github.com/dropwizard/dropwizard/pull/996\n. closed by 847275afd08b217bd98c633c6c7c2d1ab84b8cc0\n. @jnaous if you can confirm this is an issue, feel free to reopen.\n. i see a merged PR, closing this\n. I'll take a stab at recapping what was found in https://github.com/dropwizard/dropwizard/pull/891\nJersey provides the parameters to a resource method in the order they are defined in the resource.\nSo if the @Auth param is first, the rest of the parameters will short circuit when the AuthFactory throws an exception because the user is invalid.\nHowever, if the first parameter is @Valid SomeBean, that will go thru validation and return any validation errors before being authenticated because the @Auth param is defined after SomeBean\nI can think of few options:\n[1] Say this is a limitation and document very well. \"If you do auth, it must be the first param\"\n[2] Do the security in a filter, which I think would happen before calling the resource method. I think this would mean some annotation on the resource method. Since the resource method may need the principal, we can have the filter call ContainerRequestContext#setProperty with the principal. We can then create a provider for a principal parameter which knows to look there. This means you would need the method annotation and the principal parameter annotation. TBH, I think this would work but would need to do a POC to be sure\nhttps://jersey.java.net/documentation/latest/security.html\n. @jplock I put some work into this. Let me know if it's the right the direction.\nhttps://github.com/dropwizard/dropwizard/compare/master...carlo-rtr:auth_rewrite?expand=1\n- I want to think a little bit more about the class names and abstractions\n- I want to see if I can create a Provider to encapsulate reading the attribute and casting to a type. To make it easier to access a typed principal other than one that's a String.\n. d5410fbb22df73e7e086cde3538b014a0b2c6e5f\n. The high level description is that auth now happens at the filter level, not at parameter injection. This means that information isn't leaked when parameters that fail to validate are listed before the auth parameter. Doing auth at the filter level, meant we could use provided authentication & authorization filters. So we did that, that's why it feels like a slight feature upgrade. The bulk of the implementation conversation happened starting May 10th in this issue, and in this PR https://github.com/dropwizard/dropwizard/pull/945 \n. We have had some discussions on the mailing thread: https://groups.google.com/forum/#!topic/dropwizard-user/1xNzJe7GpV8\nGiven we have merged the provider, the changes to the API don't seem that dramatic. If other community members want a simpler approach to Auth, I think they can put something together and share it. I don't think we should keep the old auth under a separate module, and leave that security risk. I know we do that at the risk of upsetting some people, but I think that's going to be inevitable.\n. I took a look, and it seems the trailing * is required when providing a the path spec to Handler.addServlet, similar to this guide here: https://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty\n. Thank you.\n. the build broke, I have reverted the change. Please submit a new pr\n. The mapper used is dependent on the mappers registered, there is an algorithm for the most eligible. You can try putting a debug there to see what's happening.\nSee ExceptionMapperFactory#findMapping(Exception) in jersey-common<2.17>\nMy guess is this isn't a bug, unless you can point me to an actual issue in the DW framework code.\n. The build is not passing. Also, can you remove the issue from the package names? Feel free to reopen once these are addressed.\n. You shouldn't be comparing the strings, you should be comparing the object representations. See the code in the example:\nhttp://www.dropwizard.io/manual/testing.html#testing-serialization\n. Nice!\n. I think the validations are useful if you aren't using a bean. There are many annotations, that make more sense than NotNull. http://docs.oracle.com/javaee/7/api/javax/validation/constraints/package-summary.html\nI suspect the exclusion in org.hibernate.hibernate-validator is to avoid dependency divergence. I doubt trying to use jersey module without providing org.hibernate.hibernate-validator would work. Perhaps we should also explicitly add a dependency on org.hibernate.hibernate-validator in dropwizard-jersey. This way both dropwizard-jersey & dropwizard-validation have the right deps. We can ensure version consistency by moving the version to a property field defined in the parent pom\n. Thanks\n. I think facade with delegation makes sense. Jersey won't let you register the same component twice. If you follow the second call to register, you will hit this.\nhttps://jersey.java.net/project-info/2.16/jersey/jersey-common/xref/org/glassfish/jersey/model/internal/ComponentBag.html#393\n. After looking a little more closely, I think you can just create a new binder class to wrap the second factory. This will get it registered, though I haven't tested that it will work end to end. I have tested that it will register. Let me know if it works.\n```\npublic static class MyBinder extends AbstractBinder {\n        private AuthFactory factory;\n    public MyBinder(AuthFactory<T, U> factory) {\n        this.factory = factory;\n    }\n\n    @Override\n    protected void configure() {\n        bind(this.factory).to(AuthFactory.class);\n        bind(AuthFactoryProvider.class).to(ValueFactoryProvider.class).in(Singleton.class);\n        bind(AuthInjectionResolver.class).to(\n                new TypeLiteral<InjectionResolver<Auth>>() {\n                }\n        ).in(Singleton.class);\n    }\n}\n\n```\n. if you're suggesting we make the archiving strategy configurable in FileAppenderFactory, I like it. We are already ignoring some configuration if archive is set to false, so I think it make sense to have an archiveStrategy. Not present, would be have as false. TimeBased would do what's currently in master. SizeBased would do what's on this branch. wdyt?\n. @HaVonTe1 are you still interested in pursuing this?\n. I believe 2.16 includes changes from 2.3, as 16 > 3.  Is that what you are asking?\nEither way, 2.16 appears to be the latest and it's what DW depends on.\n. Looks great. Thanks.\n. Thanks @jplock. I like the ByteRange abstraction. What are your thoughts on making ByteRange.parse having the context of the resource length? This way we can encapsulate byte range transformation from one that has no end to one that does. We also wouldn't need hasEnd() to public anymore.\n. I don't see a good way of configuring whether abstract params error messages include the original input other than some static side effect state. \nI'm wondering if it makes sense to show the clients the input they send? Would existing users feel we broke backwards compatibility without it? My guess is no. Perhaps we should just send them the general class of error without the input, then we debug log the input & error\n. I created a PR (https://github.com/dropwizard/dropwizard/pull/901) with a resource that does a PUT. I ran the example migration, posted some new people. I then updated the name multiple times by executing multiple PUTs. All 200s.\nI then realized, maybe I need a more complex DTO with an actual bad request. So I then changed the body type from String to Saying. Instead of sending proper json, I sent garbage. I got 400 multiple times without error.\nIs there something I'm missing? Is this no longer an issue?\n```\n  \u21d2  curl -v localhost:8080/people/1 -H \"Content-Type:application/json\" -X PUT -d carlo\n  * Hostname was NOT found in DNS cache\n  *   Trying ::1...\n  * Connected to localhost (::1) port 8080 (#0) \n\nPUT /people/1 HTTP/1.1\nUser-Agent: curl/7.38.0\nHost: localhost:8080\nAccept: /\nContent-Type:application/json\nContent-Length: 5\n\nupload completely sent off: 5 out of 5 bytes\n  < HTTP/1.1 400 Bad Request\n  < Date: Thu, 26 Feb 2015 03:01:50 GMT\n  < Content-Type: application/json\n  < Content-Length: 62\n  <\nConnection #0 to host localhost left intact\n  {\"code\":400,\"message\":\"Unable to process JSON\",\"details\":null}%\n```\n. Indeed. Thanks for reporting. PR is up:\nhttps://github.com/dropwizard/dropwizard/pull/927\n\n\nOn Fri, Mar 6, 2015 at 10:53 AM, Jesper Hammarb\u00e4ck <notifications@github.com\n\nwrote:\nI still see this noise in 0.8.0.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/902#issuecomment-77581342\n.\n. https://groups.google.com/forum/#!topic/dropwizard-dev/QxAz9PZBA-E\n. 0.8.0-rc5 was just published, should be on sonatype central releases momentarily\n. Thank you, this is really useful. This PR looks good. Other than the comment on the docs, the only other thing is that we could have a test for proper substitution of recursive variable names. e.g. ${jre-${java.version}} but that's more of a nitpick.\n. Thanks\n. Okay. I like the ideas. I'll work on it.\n. https://github.com/dropwizard/dropwizard/pull/918\n. I'm taking a stab.\n. Given we have JDBI & Hibernate, I don't think we need it.\n\nThe process for your getting your repo in the DW org is discussed here:\nhttps://groups.google.com/d/msg/dropwizard-dev/eiiTDVFqmTc/K2gyDI90x7kJ\nAlternatively, you can keep it in under your user name and we can list it here:\nhttp://modules.dropwizard.io/thirdparty/\n. I'll make the changes discussed, plus get the tests passing.\n. I've made the changes discussed, and squashed the commits. The biggest concern I have is the centralized executorService. It's not configurable, and should Environment own it?\n. thanks for the feedback\n. I spent some time looking at this. Here is what I found:\n1. I'm pretty sure you can't use the in-memory test container, instead you must use the grizzly one. Relevant discussion\n2. Even if you configure ResourceTestRule to use GrizzlyWebTestContainerFactory, and replace this with \n@Override\nprotected DeploymentContext configureDeployment() {\nreturn ServletDeploymentContext.builder(resourceConfig)\n       .initParam(ServletProperties.JAXRS_APPLICATION_CLASS,              ResourceTestResourceConfig.class.getName()).build();\n}\nThere are still issues. I think the problem is that ResourceTestRule uses a dynamicResourceConfig. In the other authorization tests that work, ResourceConfig is extended and defined statically. The reason this matters is because the Grizzly container will create an instance of your ResourceConfig via reflection every time there is a request, not just on initialization. So what this means, is that zero arg constructor gets called, but the post init steps never happen. I tried subclassing ResourceConfig but still configuring dynamically. This requires dependency injecting a handle to the ResourceTestRule, so the configuration can happen on every request. I couldn't get the plumbing to work.\nI'm feeling like the fluent interface for testing isn't going to be possible with tests that require Auth. I hope someone can prove otherwise.\nMy code is not working, and there maybe some changes that aren't required. With that said, here it is:\nhttps://github.com/dropwizard/dropwizard/compare/master...carlo-rtr:test_rule?expand=1\n. @ferdy-lw thanks for looking. I thought about doing it with a static reference, but I think that will be problematic in a multithreaded testing environment. If multiple tests with rules that differ are run concurrently that static ref is shared mutable state with no lock protection.\n. @ferdy-lw thanks for work around. I've posted the PR, let's see what others think.\nI'm not sure it's the most elegant solution, but it works and this is limited to the test code base. \n. Some related discussions\nhttps://groups.google.com/d/msg/dropwizard-user/a_jNCLE7oXM/J4B-R_FlYcEJ\n. I think the wiki is a good idea. Here is a first go:\nhttps://github.com/dropwizard/dropwizard/wiki\nWe should limit it to documenting the upgrade process\nOn Wed, Mar 11, 2015 at 11:28 AM, Marcus Fihlon notifications@github.com\nwrote:\n\nI think a wiki could be useful, where everyone can add information about\nmigration steps. For example I use a lot of Apache commons lang features\nwhich are now in a different package. Easy to solve if you know it. Can be\nhard to find if you first think the library was replaced by guava which\nprovides nearly the same functionality.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/934#issuecomment-78286019\n.\n. Thanks for raising this.\n\nThis is probably a silly question, but what is the impact of the inconsistency?  \nAlso, do you think this article summarizes the problem correctly?\nhttp://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/\nWith my limited by knowledge, I'm thinking we should probably use .gitattributes so we can actually enforce it in an automated way. Probably with:\n*.txt text\n*.java text\n*.yml text\n*.xml text\n*.md text\n*.mustache text\n*.ftl text\nI assume we would have to run process to clean up files. Any of this make sense?\n. @joschi do you have an opinion?\n. Is there an easy way to ask the lawyers without going thru some crazy process? I'm personally not up for that challenge. If not, I'm inclined to say we should close this and leave the copyright as it is. \n. I like that idea\n. Please use issues for bugs or improvement. For getting help can you please use the google group dropwizard-user.\nYour indentation looks off applicationContextPath should be under server. See https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java#L101-L119\nI think it should be like the below\nserver:\n  type: default\n  rootPath: /v1\n  applicationContextPath: /v1\n  adminContextPath: /admin\n. Either you upgrade, use SimpleFactory, or I think you can hardcode it in Application#run\nenvironment.getApplicationContext().setContextPath(applicationContextPath);\n. LGTM\n. https://github.com/dropwizard/dropwizard/commit/bff376b17ea4dc48625c2b3b16d6200261632d7a\n. I've added some updates to the documentation. In doing so, I realized the @Auth(required=false) feature may not work as expected anymore. I'll work on adding some test coverage and hash out if it's possible to support that anymore.\n. I've squashed the commits, got @Auth(required=false) working, and added test coverage\n. @joschi I looked at what you referenced. I also found this, which is included with our existing dependencies.  If we use those annotations, I wonder if people will get confused and expect the behavior provided that filter. I also wonder if we could use the RolesAllowedDynamicFeature? I think we would still need a filter which reads headers and injects a valid SecurityContext, similar to the logic in BasicCredentialAuthHandler and OAuthCredentialHandler. Then we could rely on RoleAllowedDynamicFeature to the filtering based on the SecurityContext\n. @jplock if we start using them, yes I think we should include the dependency. Currently we get a dependency in the test scope\n. Took another swing with RolesAllowedDynamicFeature. https://github.com/dropwizard/dropwizard/pull/952\nIf that looks good, we can close this\n. @jplock The example works fine. You get the dependency for free with jersey-server, which is non optional for DW. Do you think I should add it explicitly?\n[INFO] |  +- io.dropwizard:dropwizard-jersey:jar:0.8.1-SNAPSHOT:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.17:compile\n[INFO] |  |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.17:compile\n[INFO] |  |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.17:compile\n[INFO] |  |  |  |  - org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  |  |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.17:compile\n[INFO] |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile\n. I kicked off a discussion on the forums for the plan for 0.8.1\nhttps://groups.google.com/forum/#!topic/dropwizard-dev/QxAz9PZBA-E\n. This should fix that. Thanks.\nhttps://github.com/dropwizard/dropwizard/pull/999\n. agreed, nice explanation\n. https://github.com/dropwizard/dropwizard/issues/1060\n. I don't think it needs to be a hard requirement that it runs with the build. My only concern is that if it doesn't happen in some automated way, there may be some lag before degradations are caught. This obviously makes it harder to identify the culprit. If you have ideas, I'm all ears.\n. One think we should do is make sure that empower benchmark is using the latest code.\nhttps://www.techempower.com/benchmarks/\nhttps://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Java/dropwizard\nhttps://github.com/dropwizard/dropwizard/issues/1010\n. Thanks for the info @axelfontaine. But for this issue, we are looking for something that scales with the open source model. Your solution, from what I read on your site, is more freemium. Free for a few, but paid after that.  Correct me if I'm wrong. We are looking for a completely free and open source solution.\n. @axelfontaine sorry if it seemed I was questioning your commitment to open source, I wasn't. I know AWS and Heroku are not completely open source, but when I see their fee I know it's going towards hardware.  When it comes to paying for scaling deployment, I feel like I would be paying for convenience and tooling.  In some cases that makes sense. I'm sure there will be people who find your service useful, and I bet the product is great.\nThis issue is about making sure than an alternative also exists. Some set of scripts that can be used to manage deploys, scale without cost, or require auxiliary services. \n. I think you can use @Rule but do the init inline instead of in @Before. This worked when I modified an existing test with @ClassRule.\nhttps://github.com/junit-team/junit/wiki/Rules\n. I think we would have to make RequestLogFactory behave similar to the hierarchy of ServerFactory, DefaultServerFactory and SimpleServerFactory. This would allow you to provide your own impl of RequestLogFactory by specifying the type in the configuration and including the class at runtime. The framework would have to find it via the java provider mechanism (\"META-INF.service\") like this:\nhttps://github.com/dropwizard/dropwizard/tree/master/dropwizard-core/src/main/resources/META-INF/services\n. @ayushvora it wouldn't change the default situation, but it would mean that someone could override and do as they please.\nLooking at the code, RequestLoggerFactory has a timeZone property which is used for Slf4jRequestLog. In mind it makes sense to use that timeZone instead of that one at the appender level. What would happen if you had multiple appenders with different timezones, it wouldn't know which to pick.\n. Not sure, you should follow up with logback folks.\nhttps://groups.google.com/forum/#!searchin/dropwizard-user/log$20pattern$20line/dropwizard-user/DpLMTscoZOY/KD6jB5BzjOIJ\n. Really? I can't reproduce that. https://github.com/carlo-rtr/dropwizard/commits/version7\nThis is version 0.7.1 with the log formats I tried. If you run the example app, the log line still shows up with a question mark\n. You can take a look at LoggingFactory in our source code, that's how the logging is configured. You can try and see what differs with that code and when your logback.xml is consumed.\n. That works. Ill submit a PR to make it configurable\nOn Apr 15, 2015 7:54 PM, \"saadmufti\" notifications@github.com wrote:\n\nThis can be expensive and should not be the default IMHO. If required we\nshould make it configurable.\n\nSaad\nOn Apr 15, 2015 7:44 PM, \"Shivang Shah\" notifications@github.com wrote:\n\n@carlo-rtr https://github.com/carlo-rtr : So I dig deep inside the\ncode\nand although I didn't get a chance to actually fork the project and give\nit\na try to change the code myself, I think I might have found the problem.\nIn v0.8 AbstractAppenderFactory :\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-logging/src/main/java/io/dropwizard/logging/AbstractAppenderFactory.java#L112\nI have a feeling that the \"includeCallerData\" should be set to \"true\"\nbefore you add the appender. I was able to come to that conclusion of\nusing\nthe \"includeCallerData\" from here :\nhttp://stackoverflow.com/questions/13944641/logback-ayncappender-not-printing-file-and-line-number\nAnd it makes sense too. Because being async, if you don't have calller\ndata, you won't get the line #\nLet me know what you think .. If I get time, I will go ahead and fork out\nthe project and try this change myself. If you get a chance to test this\nchange out, greatly appreciated !\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/dropwizard/dropwizard/issues/975#issuecomment-93599307>\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/975#issuecomment-93600876\n.\n. https://github.com/dropwizard/dropwizard/pull/995\n\nIt will be in the next release, we don't have a timeline yet. If I had to ballpark, I would say 2 months.\n. Thanks for the contrib\n. Thanks\n. This passed on jdk 7, but not jdk8. There is a non deterministic test, fix is here:\nhttps://github.com/dropwizard/dropwizard/pull/985\n. no problem, easy for that to happen.\n. Yeah, I agree with @wirde @jplock \n. Yeah, thanks for contributing. We really appreciate the help.\n. It seems like either would work. Given that bootstrapping is not a hot path, my guess is the lock contention will not introduce significant performance degradation.\n. Thanks for tackling this!\n. Thanks for tackling this!\n. I was thinking more macro, like the empower benchmarks. I've updated the issue: https://github.com/dropwizard/dropwizard/issues/963\nWith that said, it seems like this would be useful too. I have never used this before, so I'm going to read up then opine.\n. Do you think we should have an abstract class with the main method? The only thing changing is the name, we could have an abstract method for getBenchMarkName()\n. That's a good point, let's get that sorted. I'll add my 2 cents.\nBtw, I probably should say that there was much debate on whether this should be configurable. See https://github.com/dropwizard/dropwizard/pull/567\nMy feeling is that we should only maintain the default logger. Making it flexible doesn't feel like it's going to add much over head on our maintenance. If someone is really hell bent on using xml configuration, they'll find a way.\n. I've rebased and added some new code.\n- documented the bootstrap logging code\n- made logging bootstrap only have effect on first run\n- perform bootstrap logging init in constructor of Application in favor of static block\n. @arteam I missed the #987 comment. I'll wait until your code is back on master, then I'll pull it down and push the rebased version.\n. @jplock @arteam should be all set for review\n. I really wish I could spell :)\n. @arteam fixed the typos, made the locks final, and inverted the condition. Thanks for looking\n. This seems useful. We welcome a PR.\n. Thanks for the contribution\n. Thanks for the contribution\n. I think we should add a debug log with the invalid value, so it can be debugged on the server side.\nI think this would also address @piefel concern without having to maintain a flag or separate methods.\n@joschi you commented on #892 which is related, what do you think about this?\n. I think so :)\n. LGTM\n. This code below ran against master and produced:\n{\nmyDate: \"2015-04-23T13:37:31.994+0000\"\n}\n```\ndiff --git a/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java b/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java\nindex 3d9cea3..0cb52be 100644\n--- a/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java\n+++ b/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java\n@@ -8,12 +8,8 @@ import com.example.helloworld.core.User;\n import com.example.helloworld.db.PersonDAO;\n import com.example.helloworld.filter.DateRequiredFeature;\n import com.example.helloworld.health.TemplateHealthCheck;\n-import com.example.helloworld.resources.FilteredResource;\n-import com.example.helloworld.resources.HelloWorldResource;\n-import com.example.helloworld.resources.PeopleResource;\n-import com.example.helloworld.resources.PersonResource;\n-import com.example.helloworld.resources.ProtectedResource;\n-import com.example.helloworld.resources.ViewResource;\n+import com.example.helloworld.resources.*;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n import com.google.common.base.Function;\n import io.dropwizard.Application;\n import io.dropwizard.assets.AssetsBundle;\n@@ -81,6 +77,7 @@ public class HelloWorldApplication extends Application\n @Override\n public void run(HelloWorldConfiguration configuration, Environment environment) {\n\n\nenvironment.getObjectMapper().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n         final PersonDAO dao = new PersonDAO(hibernateBundle.getSessionFactory());\n         final Template template = configuration.buildTemplate();\n\n@@ -97,6 +94,7 @@ public class HelloWorldApplication extends Application\n         environment.jersey().register(new HelloWorldResource(template));\n         environment.jersey().register(new ViewResource());\n         environment.jersey().register(new ProtectedResource());\n+        environment.jersey().register(new DateResource());\n         environment.jersey().register(new PeopleResource(dao));\n         environment.jersey().register(new PersonResource(dao));\n         environment.jersey().register(new FilteredResource());\n@@ -132,3 +130,4 @@ public class HelloWorldApplication extends Application\n         };\n     }\n }\n+\ndiff --git a/dropwizard-example/src/main/java/com/example/helloworld/core/ModelWithDate.java b/dropwizard-example/src/main/java/com/example/helloworld/core/ModelWithDate.java\nnew file mode 100644\nindex 0000000..c8bcfa2\n--- /dev/null\n+++ b/dropwizard-example/src/main/java/com/example/helloworld/core/ModelWithDate.java\n@@ -0,0 +1,26 @@\n+package com.example.helloworld.core;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Date;\n+\n+public class ModelWithDate {\n+    @JsonProperty\n+    private Date myDate;\n+\n+    public Date getMyDate() {\n+        return myDate;\n+    }\n+\n+    public void setMyDate(Date myDate) {\n+        this.myDate = myDate;\n+    }\n+\n+    public ModelWithDate() {\n+\n+    }\n+\n+    public ModelWithDate(Date myDate) {\n+        this.myDate = myDate;\n+    }\n+}\ndiff --git a/dropwizard-example/src/main/java/com/example/helloworld/resources/DateResource.java b/dropwizard-example/src/main/java/com/example/helloworld/resources/DateResource.java\nnew file mode 100644\nindex 0000000..471f81f\n--- /dev/null\n+++ b/dropwizard-example/src/main/java/com/example/helloworld/resources/DateResource.java\n@@ -0,0 +1,18 @@\n+package com.example.helloworld.resources;\n+\n+import com.example.helloworld.core.ModelWithDate;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import java.util.Date;\n+\n+@Path(\"dates\")\n+@Produces(\"application/json\")\n+public class DateResource {\n+    @GET\n+    public ModelWithDate getModel() {\n+        ModelWithDate modelWithDate = new ModelWithDate(new Date());\n+        return modelWithDate;\n+    }\n+}\n```\n. @yunspace is taking ownership. Github assignee has to be a committer in the project, I'll take that.\n. That sounds reasonable. I think it would be nice to show up on the json serialization test too. Jackson is a mature library, so I suspect we will do well.\nhttps://www.techempower.com/benchmarks/#section=data-r10&hw=peak&test=json\n. Awesome, great work! Is there any work remaining? Should we close this issue?\n. LGTM. Thank you\n. The build broke. Rolling back.\nhttps://travis-ci.org/dropwizard/dropwizard/jobs/60241683\n. You have to crack eggs when making an omelette :)\nOne of the issues is that Application has that static block for bootstrapping logging, that's why DropwizardAppRuleResetConfigOverrideTest is failing. I believe my https://github.com/dropwizard/dropwizard/pull/996 will eventually fix that.\n. LGTM\n. @arteam sorry it took so long to look. Thanks for looking at this.\nThe only thing I'm concerned with is the reflection. It's easier to find references when it's statically referenced. \nWhat is the exact security concern with making registerMetrics public? If Application needs to call it, then I think it should be part of the Bootstrap interface. \n. Thanks @arteam \n. I've submitted a PR against metrics. my 2cents, I think we can run the risk & upgrade.\nhttps://github.com/dropwizard/metrics/pull/794\n. @jplock good feedback. updated\n. Yes, thank you\n. Thanks for updating the docs. I'm thinking it should be this:\nBasicCredentialAuthFilter.Builder<User, ExampleAuthenticator> builder = \n            new BasicCredentialAuthFilter.Builder<>();\n. actually, disregard that. looks good\n. Thanks for sharing\n. One small nitpick, 'HelloWorldConfigurationin the example should declare the variables asPooledDataSourceFactory`. \nOtherwise this PR looks good to me. Thanks for the hard work!\n. LGTM!\n. I've updated the upgrade guide with the steps to make auth work\n. I know I'm late, but I'll share my thoughts. I think the debug level is appropriate. Clients sending bad requests are normal, and should be considered insignificant from the server perspective. I think this answer gives a good way to think about it: http://stackoverflow.com/questions/7839565/logging-levels-logback-rule-of-thumb-to-assign-log-levels/8021737#8021737\n. @thiagomoretto I think the issue your running into is something specific to GrizzlyWebTestContainerFactory. I'm not sure if we have any integration tests using grizzly checking exception mappers. There maybe a way to get the msg to flow, but it seems the container framework is hijacking it. \nTo prove it's grizzly specific, I created a branch which adds a custom exception mapper for a protected resource in the example. https://github.com/dropwizard/dropwizard/compare/master...carlo-rtr:example_mapper?expand=1\nThe mapper behaves correctly if the credentials are passed. If no credentials are passed, the exception is never thrown, thus never mapped.\n```\n\u21d2  curl -vvv good-guy:secret@localhost:8080/protected/fails\n Hostname was NOT found in DNS cache\n   Trying ::1...\n Connected to localhost (::1) port 8080 (#0)\n Server auth using Basic with user 'good-guy'\n\nGET /protected/fails HTTP/1.1\nAuthorization: Basic Z29vZC1ndXk6c2VjcmV0\nUser-Agent: curl/7.38.0\nHost: localhost:8080\nAccept: /\n< HTTP/1.1 599\n< Date: Tue, 26 May 2015 19:48:13 GMT\n< Content-Type: text/plain\n< Content-Length: 11\n<\n* Connection #0 to host localhost left intact\nThis failed%\n```\n\n```\n\u21d2  curl -vvv localhost:8080/protected/fails\n Hostname was NOT found in DNS cache\n   Trying ::1...\n* Connected to localhost (::1) port 8080 (#0)\n\nGET /protected/fails HTTP/1.1\nUser-Agent: curl/7.38.0\nHost: localhost:8080\nAccept: /\n< HTTP/1.1 401 Unauthorized\n< Date: Tue, 26 May 2015 19:49:05 GMT\n< WWW-Authenticate: Basic realm=\"SUPER SECRET STUFF\"\n< Content-Type: text/plain\n< Content-Length: 49\n<\n* Connection #0 to host localhost left intact\nCredentials are required to access this resource.%\n``\n. Can you try addingjersey-grizzly-connector` per the stack overflow below? If that doesn't work, I suggest trying the jersey folks. If you find a solution, post back. I'm curious.\n\nhttp://stackoverflow.com/questions/28052023/why-is-my-exceptionmapper-getting-thrown-away-in-jersey-grizzly\n. This was discussed on the dev mailing list a while back. We are leaning towards what @rondagostino said.\nhttps://groups.google.com/forum/#!topic/dropwizard-dev/k1Gf38ekDZM\n. btw, duplicate of #962 \n. Looks good. One minor nitpick, should we add a test in JerseyClientBuilderTest?\n. LGTM. Minor nitpick: the db user & pass could be constants.\n. This looks good to me. Thanks for fixing. I'll merge once the build passes.\n. Nice. Coverage is above 70% \nhttps://coveralls.io/r/dropwizard/dropwizard\n. Maybe we could do something like this: https://github.com/dropwizard/dropwizard/compare/dropwizard:789402598eb0e000b7e5e03091d8750970bc99cc...carlo-rtr:PR1082?expand=1\n. @joschi That makes sense\n. My understanding is something like this:\nhttps://github.com/dropwizard/dropwizard/compare/dropwizard:789402598eb0e000b7e5e03091d8750970bc99cc...carlo-rtr:PR1082?expand=1\n. It looks good to me. Let's let @joschi hit the merge\n. Seems fine to me\n. Something else to consider is that one could roll their own logger factory which reads from a provided logback.xml. This way we keep the current logging configuration simple and in yaml, which probably satisfies most users. If you really want complex configuration, then you have a way. My 2cs.\n. @nickbabcock The code you are referring to is in BootstrapLogging.bootstrap, which is called in the default constructor of Application. If someone rolls their own logger factory, then they just need to override the default constructor for the subclass of Application, and not call bootstrap. \n. great!\n. Besides the small comment, looks good!\n. LGTM\n. Agreed, I think it's a better abstraction. I'm still working thru the code, my goal is to have feedback or merge by EOD.\n. Very informative discussion. I would lean towards 400 for the reasons listed above\n. Thanks for the heads up. I have a PR updating the prefix to \"Bearer\" on OAuth. Line 177 states that @RolesAllowed needs to be applied to the Resource Method. Btw, I don't see any documentation not setting the prefix explicitly.\nhttps://github.com/dropwizard/dropwizard/blame/5fae06923065c10fc923714000f1404e61251a30/docs/source/manual/auth.rst\n. after c6ff096924866fc02eba7797a9090ec59fdfae0f is merged, what remains is updating https://github.com/dropwizard/dropwizard/tree/gh-pages with v0.9.0\n. Please direct your questions to the user group: https://groups.google.com/forum/#!forum/dropwizard-user\nGithub issues are for bugs and features\n. Nice. It's all about finding the hidden features!\n. Sounds like we can close this one. Thanks all\n. Very nice! We should probably start asking people to update release-notes with any change they submit during the development period. This way we aren't tackling it at the end.\n. Yes, looks like I forgot that. Thank you.\nOn Tue, Jul 7, 2015 at 3:20 AM, Artem Prigoda notifications@github.com\nwrote:\n\nYou are right. It's probably just an omission.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1153#issuecomment-119100750\n.\n. Related discussion: https://groups.google.com/forum/#!topic/dropwizard-user/XmSTpzz8Xx8\n. @kkrushnyakov I just tried cutting a release for 0.8.4, which would include your changes but the tests don't pass on the releases/0.8.x branch.\n\nio.dropwizard.client.JerseyIgnoreRequestUserAgentHeaderFilterTest\nyou mind taking a look?\n. I thought it might be related to jersey or http client versioning, but that didn't fix it.\nhttps://github.com/dropwizard/dropwizard/pull/1236\n. nvm, I figured it out and merged it in\n. Dropwizard performs the authentication and authorization via a filter, which happens before the resource method is called. If you're registering another filter, you have to make sure it gets called after the authenticating filter\n. What we discussed applies to 0.9.*\nFor 0.8.* auth happens in a jersey provider, which happens after all filters.\n. This probably not very helpful, but I figured I would list the places I believe close could be called:\n- Jetty shuts down\n- InstrumentedHttpClientConnectionManager gets garbage collected and finalize is triggered\n- DropwizardApacheConnector#close\n- One thread calls close on the Client\n. Maybe this should be true?\nhttps://jersey.java.net/apidocs/2.19/jersey/org/glassfish/jersey/apache/connector/ApacheClientProperties.html#CONNECTION_MANAGER_SHARED\n. hotness\n. Okay, I've reverted. Do you have any idea what's causing the issue?\n. This a great idea! Thanks\n. Great work, definitely makes the feature more user friendly. This looks good to me, I'll merge. \nPrevious versions always required the @Auth for authentication. So while the argument about @Context makes sense, I think most people will probably (and should) use @Auth.  So I'm a fan of registering @PermitAll if the method has a @Auth parameter. I think if we call it out on the docs, it won't be terribly confusing. I think aiding the migration out weighs the downside. wdyt?\n. This is a start on making that change: https://github.com/dropwizard/dropwizard/compare/master...carlo-rtr:auth_registers_filter?expand=1\nI'm planning to try to consolidate what I can for the tests, and then submit a PR\n. Besides the one nitpick, this looks great. Thanks\n. Let's give it a whirl!\n. mergeable now, sorry\n. @vanDonselaar see https://github.com/dropwizard/dropwizard/issues/1160\n. This approach seems good to me, thanks for looking. A couple of things\n- What you said about it expecting new instances of the client makes\n  sense. Looking at ApacheConnectorProvider, that's what it's doing\n- The test case you wrote, did that actually fail without nuking the\n  close() call?\n- Here https://github.com/dropwizard/dropwizard/issues/1160 you talked\n  about leaking the connection manager, and that connections would only be\n  closed during major GCs. How exactly does that happen? I ask, because I was\n  thinking if there is a reference that is leaked then it won't get GCed\n  until the reference is gone, unless it's a weak reference.\nOn Thu, Aug 20, 2015 at 11:26 AM, Artem Prigoda notifications@github.com\nwrote:\n\nI've created #1232 https://github.com/dropwizard/dropwizard/pull/1232\nwith this approach. If it's merged, I will backport it to 0.8.3\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1216#issuecomment-133049407\n.\n. this was merged https://github.com/dropwizard/dropwizard/pull/1232 and back ported to v0.8.3\n. also, @arteam thanks for the detailed explanation. That makes sense.\n. I just realized I missed everything else that was on https://github.com/dropwizard/dropwizard/tree/release/0.8.x\n\nI'm going to get faf1f94 into this branch and release 0.8.4\n. Please don't open issues to ask questions. Use the mailing the list.\nWith that said, there are tests that use the authentication. See this:\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java\n. closed / reponed to retrigger travis ci\n. thanks @joschi didn't realize that\n. @joschi I had hi hopes for this. I'm not sure what's the problem. Travis ci help points to stack overflow, so I've opened up a question there: http://stackoverflow.com/questions/32172925/travis-ci-sporadic-timeouts-to-localhost\nIf we don't make some traction on this on the next few days, I'm with @arteam on disabling the tests\n. Thanks for this. The failures look like they were due to our flaky tests. \nThis PR looks good to me. I'll give it a day to see what others think.\n. This is a nitpick, but I think these methods should be called run to be consistent with Bootstrapp, Command and Application\n. s/start/run\n. s/start/run\n. Where is this logback file used? Also, when the parent process starts and configures logging, won't the embedded service override the logging settings with what's in the LoggingFactory defined in the DW configs?\n. That argument makes sense.\n. erroneous back tick in also?\n. That's a good point. If we use those as defaults, it effectively means that health check won't be time bound. The callable will execute on the thread of the caller, and when it's finished the caller will retrieve the result with a timeout of zero; but it will always be ready. This seems like a good way to support backwards compatibility. Though the DBIFactory should pass in a executor.\n. I agree, I'll do that.\n. Some interesting stuff being discussed on this PR!\n. This is a good point. If we use CallerRunsPolicy, we will loose the ability to terminate the thread, so we end up with the original situation. Instead of being a single a threaded executor, what about creating a pool shared across health checks where the number of threads can be configured. We can still make it have a CallerRunsPolicy, but it will be less likely to hit it.\n. I like this idea\n. makes sense\n. yes. oversight on my part.\n. I dont think that's necessary, different units. The answer sleeps in seconds, the short circuit happens in millis.\n. I was using the Method annotation to predicate whether the filter which sets the custom SecurityContext should run for a given resource method \n. TBH, I don't see how we do it without a big shift. \n. thanks, fixed\n. Unless I'm reading this wrong, if the user provide a rootPath  ending with * this will add another /, then it will add another . We shouldn't add the slash if it already ends with \n. I agree with @jplock on the variable name and sleeping methodology\n. I think that makes sense.\n. I was thinking it should be public because so that people implementing their own logging factories have a way to get the LoggerContext in a thread safe way and have a utility for hijacking jdk logging.\n. You are right, I missed that.\n. I think we should use @Override on the implementations of PooledDataSourceFactory\n. should this be package private?\n. @arteam your right about the new instance per test. With that said, I think setup should create the instance and configure it. In mind, that's more transparent. Otherwise, LGTM\n. I don't think you need \"the\"\n. Good Idea\n. ",
    "blairn": "I'm getting the same thing.\nIt builds on one machine but not another - is there any way of tracking down what causes this?\n. ",
    "thpham": "Hello, I'm trying also to integrate Spring Security with dropwizard 0.7.0-SNAPSHOT. (adapting the work of https://github.com/jacek99/dropwizard-spring-di-security-onejar-example).\nBut I still have the issue : \"NoSuchBeanDefinitionException: No bean named 'springSecurityFilterChain' is defined\".\nwith\n//activate Spring Security filter\nenvironment.servlets().addFilter(\"springSecurityFilterChain\", new DelegatingFilterProxy()).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, \"/*\");\nDo you have some clues how I can resolve it ?\nThanks\n. thanks, you were right ! And I forgot to initialize the security context.\n. ",
    "stuartgunter": "I really like this idea and also use the same idea for all the apps I work on. To be included in Dropwizard though, I think this kind of feature needs to be fairly customisable, e.g.:\n- header names (already mentioned by @celkins)\n- ID generation strategy (some apps need to integrate with existing systems that require UUID / some other format)\nOf course, defaults can and should be provided to avoid requiring configuration; but customisation should be possible for situations where requirements differ slightly.\nAnother consideration is how the MDC propagates across asynchronous operations. This can be left up to the user to implement, but it seems generic enough to solve once (similar to the filter itself) and a point of potential confusion if not implemented. Whether or not that should be done is probably a point of further discussion. (I've already done this in my own implementation, so could submit that alongside this if it's something people want)\n. I'd be very happy to switch to logback-access. In fact, I stumbled across the PR because I was about to create an equivalent implementation myself. The ability to configure the log format and make use of MDC would be particularly useful.\nIn response to some of your questions:\nShould I put the timeZone configuration field back, and use it to build the default logFormat to preserve backwards compatibility? It's redundant, but would be easy and avoid any upgrade pain.\nMy first thoughts would be to leave it out - but backwards compatibility is a reasonable concern. Aside from your point about redundancy, it also could introduce confusion in the case where multiple appenders are configured with different time zones (yes that seems unlikely, but there's nothing stopping you doing it if you use the log format to specify timezone). If we configure everything at the appender level, anyone familiar with logback-access would know what to do and be able to rely on the existing Logback docs for assistance. Out of interest, which configuration would take precendence if you specified both the timeZone config field and a different TZ in logFormat? Would this be clear to the user?\nDoes it make sense to default the access log format back to the same as the previous format?\nI would say yes, just to avoid surprises.\n. Answers to your questions:\n- I had initially named it stackTracePrefix, but then opted to use stackTracePattern for consistency with the SyslogAppender. However, I think prefix makes more sense so I've changed it. It's also not the only place where things are done differently in SyslogAppenderFactory (e.g. setIncludeStackTrace vs setThrowableExcluded), so it shouldn't look out of place.\n- The ! prefix isn't applied for SyslogAppender because it writes out completely differently to the OutputStreamAppenders (e.g. console, file, rolling file). So there is no impact on existing PrefixedThrowableProxyConverter behaviour. In fact, if we want the ! prefix to be consistent across all appenders, we'd need to explicitly set the default stackTracePrefix in SyslogAppenderFactory to use it instead of \\t (but that would be a breaking change for existing clients)\n. BTW... should I update the docs to explain about the ! prefix in syslog? I think it could be confusing to users that expect to see the exclamation in their logs, when it's actually a tab.\n. Updated the main docs and also put a short comment against the stackTracePrefix field definition.\n. I couldn't come up with a better way to do this, as we're really testing what happens between tests. If anyone has suggestions of how to improve this, please do put them forward.\n. My feeling is that this should be registered by default for all apps, but open to suggestion on this. My rationale is that this is a generally useful function and only exposed over the admin interface, so should not be a risk.\n. I feel uneasy about this. My gut says that Task should be moved out of dropwizard-servlets, but I'm not sure what others think.\n. ",
    "mattnelson": "I second @stuartgunter remarks, I would like this feature but the header name and id generation type must be configurable.\n. Dropwizard already allows you customize those values through configuration.\nhttp://www.dropwizard.io/manual/configuration.html#clients\n. There is support for setting your own data format.\njava\nbootstrap.getObjectMapper().setDateFormat(new ISO8601DateFormat());\n. The version in the cli and cli-example poms needs to be updated to match the rest of the reactor. That fixed the build for me.\n. I have also noticed this 0.9 regression. My 0.8 based services are still rotating logs.\n. I believe our issue may have been because the format was /var/log/app-%d.log.gz without the date pattern. But I will be switching over to the %i pattern only as that will better protect us against log flooding.\n. What if you had two methods with the same uri that produce and consume different types?\n``` java\n@POST\n@Path(\"/abc\")\n@Consumes(MediaType.APPLICATION_XML)\n@Produces(MediaType.TEXT_HTML)\npublic Response functionA(){\n   //some code produces html output\n}\n@POST\n@Path(\"/abc\")\n@Consumes(MediaType.APPLICATION_JSON)\n@Produces(MediaType.APPLICATION_JSON)\npublic Response functionB(){\n   //some code produces json output\n}\n```\n```\nGET /abc MyResourceClass\n        Consumes  - application/xml\n        Produces - text/html\nGET /abc MyResourceClass\n        Consumes  - application/json\n        Produces - application/json\nvs\nGET /abc MyResourceClass\n        Consumes  - application/xml, application/json\n        Produces - text/html, application/json\n```\n. @mwhipple Do you have an implementation using these changes for logback-access? I am also looking for this feature and would like to avoid reimplementing.\n. Is the root of the issue you are trying to solve that the health check thread pool isn't using a daemon thread factory? If so, I think that would be a simple change. Additionally, I don't think that dropwizard should prevent an application from shutting down because a health check is being executed.\n. Following semver the JDK bump should not be introduced on 0.9.\n. Customized request logging has been a frequent feature request. I would like to propose that the current request log implementation (Slf4jRequestLog) has reached end of life. As long as the new logback access implementation defaults to the same format pattern as the current implementation it would be a passive change and allow dropwizard request logging to be configured without the use of external bundles.\n. Really looking forward to this feature being available.\nDug into the history of useForwardedHeaders and setPreferProxiedForAddress to see if I could find some context for these properties when they were introduced. They were both introduced with the Jetty 9 uplift for 0.7. Did not find anything definitive to confirm the existing functionality. I agree with @ghenkes that it seems like the existing Slf4jRequestLog implementation is wrong. An X-Forwarded-For header with a bogus value would mask the true of identity of a malicious user.\n. The health check implementation is supplied by https://github.com/dropwizard/metrics, this would need to  be proposed there. But the implementation already flexes the response status if any of the checks are not healthy.\nhttps://github.com/dropwizard/metrics/blob/3.1-maintenance/metrics-servlets/src/main/java/com/codahale/metrics/servlets/HealthCheckServlet.java#L95-99\n. I've done this many times as well, but also tried to add first class default support to the metrics registry. I wasn't fond of having to rely on a magic string for the default registry.\nhttps://github.com/dropwizard/metrics/pull/849\n. Those don't look like valid tags for an access log.\nhttp://logback.qos.ch/access.html#configuration\n. Yes, This is related to #1173.\n. Fixed the assertions on 37036a41fd53919ae464824676b5f65fe518e3cd\n. I'm not sure if I'm hitting this exact issue, but I've noticed that access logging looks to be broken with DW-1.0.1-SNAPSHOT. I created a repo with shaded jars against 1.0.0 and 1.0.1-SNAPSHOT. I haven't dug into it a whole lot yet, but I did try managing the logback/jetty versions back in sync with 1.0.0 and that did not resolve the issue.\nhttps://github.com/mattnelson/dw-access-logging\n. This was addressed with #1660 \n. The logs could be configured to the console appender, then you can update your process command to redirect console to syslog.\n. @arteam Is there an issue where the access logging implementations are being discussed? I have some thoughts on the subject and this issue doesn't feel like the right place.\n. Discovered the non-passive changes in logback-1.1.8 today, when we were upgrading all of our transitive dependencies. Glad to see it has already been addressed in dropwizard. Are there plans to either patch back the logback changes to 1.0.X or release 1.1.0?. I'm going to play devils advocate on two of these new filters. No issues with the charset filter\nRequestIdFilter could be modeled of a more opinionated stance on request tracking similar to this bundle. It doesn't handle requests that already have an id in the request header. It isn't utilizing MDC which enables rich correlation of logs events from the entire request. Though the MDC does require the user to property format their log patterns.\nhttps://github.com/service-enabled/dropwizard-request-tracker\nRuntimeFilter seems to be duplicating the functionality/purpose of the access logs and will likely report a different time since it will be based on when the filter executed vs when jetty logs the access event.. The request filter should probably be opt-in since UUID performance is highly dependent on the concurrent load.\n[1] http://www.cowtowncoder.com/blog/archives/2010/10/entry_429.html\n[2] https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java. > They aren't being enabled by default.\nThat alleviates most of my concerns. I was thinking that these filters would be auto registered based on the annotations, but it does not appear that this package is added to the package scanning list.. > I pushed up some updates to address your feedback\nChanges look good to me.. You can implement a custom logging filter that can deny logging the request on the matched URI.\n1435 . Another option may to suppress this output entirely and prefer a first class solution like swagger.\nhttps://github.com/dropwizard/dropwizard/pull/1204#issuecomment-158626796. Got around this with only logback format changes.\n%replace(%m%n%exception){\"[\\r\\n]\", \"\\\\n\"}%nopex. Why are all the link through bitly? I didn't click on any of them, because it seems kinda phishy.. This looks like the issue that was resolved with #1965 . The jersey blocked has been merged and is targeted for 2.28.\nhttps://github.com/eclipse-ee4j/jersey/pull/3908. > Do anyone here have more simple and elegant solution ?\nI would try to avoid having multiple process write to the same file. It would likely be easier to join those files together after the fact. But if you really must have this feature, then I would recommend using logrotate for compression/rotation instead of logback's built in implementation.. Here is a rendered version of the migration guide > https://jersey.github.io/documentation/latest/migration.html#mig-2.26\nWould dropwizard have to do a major version bump when the two dependencies that would drive that decision only did a minor version (jaxrs-2.0 > 2.1 and jersey-2.25.1 > 2.26). And while not ideal, the adoption of new dependencies should not be hindered by 3rd party modules. That is the point of 3rd party modules, they are use at your own risk. If the changes are limited to a small subset of modules, the changes can be coordinated to limit the blast. But ultimately I don't care too much if the timeline for 2.0 is soon.\nBTW, I have already pulled in jaxrs-2.1, without issue, in order to use try-with-resources. > I'd suggest scheduling the upgrade to Dropwizard 2.0.0.\nWhat kind of timeline is expected on 2.0? I searched and couldn't find any explicit documentation on the jersey support model regarding 2.25 EOL and/or patching of fixes. I have concerns on the technical debt of being stuck on 2.25.\n\n\nDo you have any plan of impliment jersey-guice module ?\n\nThat may be a little premature according to the release notes.\n\nDon't be mistaken - Jersey still runs on hk2. But it should be possible to get rid off that dependency when other container provides same functionality. As already mentioned, the motivation is to be able to integrate seamlessly with other frameworks, like cdi, guice, etc. This is still work in progress and there is one consequence: user has to provide Jersey injection implementation. The only one which is 100% ready right now is based on hk2:. Is this proposal blending appenders and format? The appender shouldn't care that the format is json, it should only be concerned of which stream to write the message(file,console,syslog). Which also highlights that the other appender types would require additional implementations. With containerization happening across the industry the recommendation is often to log to console, at a minimum json console support should be introduced as well\n\nBut I have a different proposal. What if we enhanced the existing appender logFormat property to flex and accept a more complex log format configuration? That would enable new log formats to be implemented without tight coupling to the appender.\nyaml\nlogging:\n  appenders:\n    - type: console\n       logFormat: \"%-5level %logger: %msg%n\"\n    - type: console\n       logFormat:\n         type: json\n         prettyprint: true\nThe loggers already support this type of overloaded configuration data type. The class logger accepts a level or a more complex object.\nhttp://www.dropwizard.io/1.2.0/docs/manual/configuration.html#logging\nyaml\nloggers:\n    \"io.dropwizard\": INFO\n    \"org.hibernate.SQL\":\n      level: DEBUG\n      additive: false. > the proposal is to decouple the LayoutFactory from a pattern-based layout. JSON is not a pattern-based layout. The discussion in #1451 has the context.\nIt may not be a \"layout\" in the traditional logback sense, but there are numerous flags to indicate which items should be included with the json layout which is not that different from the traditional pattern based layout. The difference is that logback has codified the ability to flex the format.\nhttps://github.com/qos-ch/logback-contrib/blob/master/json/classic/src/main/java/ch/qos/logback/contrib/json/classic/JsonLayout.java\n\nRegarding your other point, given that console logging is usually human-read while JSON is processed by log processing utilities (which read them from files), I am not sure I see the value in adding support for JSON console logging.\n\nThis is a broad assumption to make. The reason I brought it up is because that is exactly what I am doing, console logging in a docker container which is then forwarded to a log aggregator. A human never looks at the direct console logs in this scenario.. What is the target release for metrics-4.0? We attempted to pull it in but ran into non-passive package renames with the jmx/jvm modules. As well as a type change on Timer.Context.. > I think the best way to disclose security issues is to post a request to disclose to the dropwizard-dev mailing list and/or contact on of the maintainers privately.\nAre there email services for dropwizard.io?. pr > #2375. Addressed comment on f7d4302. Updated to set log level to null to revert to parent effective level.. > With the caveat that overwriting the trigger to reset the log level isn't possible.\ndocumented on b67f44d. > I would implore you to not use JCache if that is seriously considered in a later iteration. I think it is mostly harmful, as it was designed for selling vendorware and not for helping developers. I can go into technical details later if necessary.\nI would love to hear your thoughts on this topic, but this issue doesn't seem like the best forum for that type of discussion.. My proposal is to introduce an exception config block which would also solve #2488\nyaml\nlayout:\n  type: json\n  exception:\n    rootFirst: false\n    depth: 25\n    evaluators: # chose this name to match logback\n    - com.google\n    - org.apache. @nickbabcock Any objections if I start working on this? Do you have any other suggestions for resolving this within dropwizard? I could impleent it internally with a custom type like you mentioned, but I would like to solve upstream if possible.. YMMV, but we used dependencyManagement to uplift to 9.4.12.v20180830 a few weeks back and didn't notice any apparent regressions.\n@arteam @joschi Do you have an idea of the breaking changes to look for?\nhttps://www.eclipse.org/lists/jetty-announce/msg00124.html. Discovered another discrepancy that may throw a wrench into this. The AccessEvent interprets URL as method+uri+querystring+protocol. Since three of those items are already available as discrete parts, it doesn't make sense to use URL via logback's interpretation of it. As that would require users to parse the string to break it back down to the parts. I think dropwizard should interpret the requestUrl configuration value to be uri+querystring.\njson\n{\n  \"method\": \"PUT\",\n  \"uri\": \"/v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312\",\n  \"params\": {\n    \"lastDirtyTimestamp\": [\n      \"1537398169789\"\n    ],\n    \"status\": [\n      \"UP\"\n    ]\n  },\n  \"protocol\": \"HTTP/1.1\",\n  \"url\": \"PUT /v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312?status=UP&lastDirtyTimestamp=1537398169789 HTTP/1.1\"\n}\n```yaml\nexample dw config\nprovides uri and query param via url\nincludes:\n- protocol\n- method\n- requestUrl \nprovides uri and query param as distinct items\nincludes:\n- protocol\n- method\n- requestUri\n- requestParameters\n``. @nickbabcock Do you have a preference on a resolution? I'm leaning towards the simplest option of adding a new includes optionrequestUriParameters.. I was thinking that the uri with the parameters would be equivalent tourl` without the method and protocol. I'm trying to avoid scenarios in which I need to join text to get the same output as we had with non-json logging.\ndiff\n  {\n    \"method\": \"PUT\",\n    \"uri\": \"/v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312\",\n    \"url\":       \"PUT /v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312?status=UP&lastDirtyTimestamp=1537398169789 HTTP/1.1\"\n +  \"uriWithParams\": \"/v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312?status=UP&lastDirtyTimestamp=1537398169789\",\n    \"protocol\": \"HTTP/1.1\",\n  }\n. Yep, I can take this on.. Resolved with #2509 . Trying to validate these changes and the snapshot doesn't appear to have been updated. Possibly related to #2505?\nhttps://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-json-logging/1.4.0-SNAPSHOT/\ndropwizard-json-logging-1.4.0-20180927.140524-72.pom\n```\ncommit b584bf3ddb4e22abd9b147e349f47e8a29534d0a\nMerge: 0c59c0c50 14732c5bc\nAuthor: Justin Plock jplock@users.noreply.github.com\nDate:   Fri Sep 28 17:41:38 2018 -0400\nMerge pull request #2509 from mattnelson/json_uri_query\n\nAdd support for pathQuery json access log attribute\n\n```. > Copy RateLimiter (and dependent classes) from Guava 27.0\nI think a shade with include and relocate would be a more preferable option to strait copies in order to continue picking up upstream changes to guava.\n. I would prefer to see the existing config docs updated to be clearer on the drop policy for access log events. Since they don't have a level, I'm guessing they are all treated equally and therefore only volume is the deciding factor.\nhttps://www.dropwizard.io/1.3.9/docs/manual/configuration.html#console\n\nWhen the blocking queue has only the capacity mentioned in discardingThreshold remaining, it will drop events of level TRACE, DEBUG and INFO, keeping only events of level WARN and ERROR. If no discarding threshold is specified, then a default of queueSize / 5 is used. To keep all events, set discardingThreshold to 0.. The line header should be Consumes.\n. That is a better idea, updated 29c1bb1765ab913ad6abb6fa58933d4bc436c0ed\n. Posted under wrong thread, reposting in the correct context.\n\nI think there are some other issues[1] with the implementation in the else block. It seems like the %d-%i configuration should've never been supported. I believe there will need more intrusive changes in order to get a more robust rolling/triggering policy in those workflows.\n[1] http://jira.qos.ch/browse/LOGBACK-1127?focusedCommentId=17110&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17110\n[2] http://jira.qos.ch/browse/LOGBACK-1143\n. The assertion was wrong, I needed to add an isTrue. This caused the test to fail before making the change.\nLooks like this was added in logback-1.1.5[1] to make sure the triggering policy is started. Since the appenders are not started as part of the testing, the checks are never executed.\n[1] https://github.com/qos-ch/logback/commit/1af14db4b6f28aee79f8f1bc866dfffe6cfdbe5a#diff-168f8cbb3bd8b03acc60eb147007d385R51\n. The method name should match the wrapped name setBaseResource\n. Should this file be located at /META-INF/services/ instead of /META-INF.services/?\n. It feels wrong to have a json extend yaml. What about creating a base factory that both yaml and json extend?. Should this defer to the default?\nhttp://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#defaultCharset--. Should the filter be changed to only decorate json responses?. I would like to see the option to explicitly opt into specific mdc fields and request/response headers instead of all. Logging all request headers would make it quite easy to accidentally log an Authorization header.\nyaml\nrequestHeaders:\n  - X-Request-Id\nresponseHeaders:\n  - X-Request-Id. The include prefixes seem unnecessary.\n. Should there also be support for the predefined formats? Would make it easier to adopt standard formatting and reduce the possibility of typos in the format string while still leaving the option for custom formatting.\nyaml\ntimestampFormat: yyyy-MM-dd HH:mm:ss.SSSZ\ntimestampFormat: ISO_DATE_TIME\nhttps://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#predefined. Update description to the correct field name.. Can the filteredHeaderNames be put into a case insensitive TreeSet? Then this nested loop could be converted to a contains.\n  . I think it would help to see some examples of the json produced in the docs.. Do you want to support mdc filtering? I can see both sides, include all mdc keys or support a whitelist of mdc keys. Generally I think you would want to include all in the case of dynamic diagnostics, but there may users that are abusing MDC as a way to share state. This is something that can be addressed in a follow up if there is demand, as long as that change could be passively introduced later.. > Currently, the logger would be reset to the initial log level by the first scheduled task anyway and the second scheduled task would restore the previously set log level.\nI went back and forth on this. Should it be restored to the previous effective level or null? When null is supplied logback will set to the effective parent level. This would eliminate some of the ordering issues, as \n\nWhat would happen if a user wants to override a previously set timeout for a logger or remove the timeout?\n\nI had a hunch this would come up. I had originally gone down that path and it was getting a little more complex than I wanted to introduce. My second pass implementation was to keep it really simple, with some of those caveats on ordering of operations.\nWe could push the lifecycle from the environment down to the admin environment.\nhttps://github.com/dropwizard/dropwizard/blob/2cfdd6dc5bd390e3f5b1ef47d8f7e7fd9efd7fd9/dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java#L76-L78\nUse that to create a scheduled executor service for the log configuration task\nhttps://github.com/dropwizard/dropwizard/blob/2cfdd6dc5bd390e3f5b1ef47d8f7e7fd9efd7fd9/dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/LifecycleEnvironment.java#L70\nThen use weak concurrent hash map to store package/future mappings, so that we can support doDelete on the task servlet to support removal. Could also enforce that there is only one \"active\" log level change per package at a time, or when a new one comes it replaces the existing override.\nhttps://github.com/dropwizard/dropwizard/blob/2cfdd6dc5bd390e3f5b1ef47d8f7e7fd9efd7fd9/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/TaskServlet.java#L96. Thinking about wrapping this in a lazy init block to delay creating the timer until the first expireable log level is submitted.. fixed on 7854032. Changing Trie to ArrayTernaryTrie introduces entrySet which will eliminate the lookup in a loop.\njava\nprivate final ArrayTernaryTrie<Handler> handlers;\nhandlers.entrySet().stream().map(Map.Entry::getValue).toArray(Handler[]::new);\nhttps://www.eclipse.org/jetty/javadoc/9.4.11.v20180605/org/eclipse/jetty/util/ArrayTernaryTrie.html#entrySet--. Is the usage of bytebuddy introducing possible fragility in relation to the transitive dependency on asm which generally requires changes based on each new version of java. Which is now occurring at a more rapid pace.. > then a default of queueSize / 5 is used\nIt took me a while to track down the origin of this. It should be called out that this is based on logback's implementation and the divisor may be subject to change.\nhttps://github.com/qos-ch/logback/blob/v_1.2.3/logback-core/src/main/java/ch/qos/logback/core/AsyncAppenderBase.java#L104-L105. ",
    "xako": "I'm happy to create an updated pull request if it will get merged.  Was the only problem that it got out of date?\n. ",
    "sharpedavid": "You're right, it works. Tested 5ad7544.\n. ",
    "florianleibert": "Is there an older version that requires jetty 8?\n. ",
    "hansenc": "I know this is an old PR, but this is a feature I want. I'm willing to pitch in if maintainers are still interested.\n- To avoid module bloat I would recommend combining into dropwizard-testing and declaring jDBI as an optional dependency. That means downstream projects won't pull it in transitively - projects using jDBI already have it on the classpath and those who are not will not have their classpath polluted. Sure, there will be extra classes in the dropwizard-testing jar, but those not using jDBI can ignore those.\n- This is moot if combined into a single module, but to prevent duplication of Person, you can configure dropwizard-testing to publish a test-jar and depend on that with the test-jar type. Caveat: transitive dependencies of test-jars are not pulled in automatically.\n. ",
    "sw00": "Will this ever get merged? Seems to be essential for testing.\n. ",
    "arteam": "For anyone interested, I've recently started a project that simplifies testing JDBI code in Dropwizard. Checkout https://github.com/arteam/jdit\nIt uses an alternative approach with JUnitRunner and annotations rather than JUnit rules.\nFeatures: \n- Support for defining DB schema. \n- Test-level DML scripts \n- DB is started for all tests and data is swept after every test \n- Can be used outside Dropwizard as well.\nKnown limitations:\n- Hard dependency on HSQLDB\nFeedback is welcome.\n. I've added a link to JDIT to the list of thirdparty modules.\nThis project covers the needed functionality (integration testig of JDBI SQL Objects against the schema), has additional features and well maintaned, so I encourage people to use it.\nThanks, @thody, for the pull request, though. It was a source of inspiration for JDIT.\n. Closing via #558\nJersey client connector has been rewritten in 0.8.0 and should support all settings of the Apache Client.\n. +1 on this. \nDropwizard logging configuration is simple and suitable for tipycal cases. And that is good, because it simplifies a job of people who maintain applications.\nBut I beleive it's right to give users freedom to use native configuration mechanisms if they want to and know what they are doing. \nOf course, Dropwizard by design is an opionated framework with a goal to hide complexity and not being a universal tool. But in case of logging, as @justrudd pointed, it's too closed for extension as it could be.\n. Thanks for the review! I've tried to fix up things you mentioned.\n. I rebased the branch against the master and added a facility to configure non-proxyable hosts.\nDoes anyone interested in this type of configuration? If #681 is merged, then it would only a matter of taste of configuration type (YAML file or java properties).\n. I see #681 has been merged.\nIs there any work needed for this PR? If Java properties configuration is sufficient then this PR could be closed or moved to a backlog from 0.8 release.\n. I've rebased this PR against master, it wasn't hard.\nI just don't know if anyone need this feature apart me one year back :)\n. It's because #648.\nHonestly I don't know why this test is not removed, because it confuses users and creates unnecessary bustle.\nYou could just ammend you commit and make git push origin master --force or just wait while someone from maintainers will restart the build in Travis.\n. It's not so easy. SchemeRegistry is used by metrics-http library in building InstrumentedClientConnManager and therefore InstrumentedHttpClient. So before the library is not provides new API, we are stuck with this this class.\nIn the fact the same thing could be said about some other deprecated classes like AllClientPNames, BasicHttpParams, SchemeRegistryFactory, etc... \nIt's deprecated just because Apache HttpClient provides own fluent HttpClientBuilder. But for dropwizard-client there little sense to make builder over builder while Apache guys maintain backwards compatibility.\n. Didn't check out it (great update, by the way). If I understand correctly if Dropwizard would be updated to Metrics 4, it means dropwizard-client has to be rewritten to use new API. So then in this situation, there is no justification not to follow progress :)\n. I think reflection is a friend. This technique is used in other tests as well.\nWe can access routePlanner from InternalHttpClient something like that:\n``` java\n    @Test\n    public void usesTheDefaultRoutePlanner() throws Exception {\n        final CloseableHttpClient client = builder.using(configuration).build(\"test\");\n        final HttpRoutePlanner routePlanner = (HttpRoutePlanner)\n                FieldUtils.getField(client.getClass(), \"routePlanner\", true)\n                        .get(client);\n        assertThat(routePlanner).isInstanceOf(DefaultRoutePlanner.class);\n    }\n@Test\npublic void usesACustomRoutePlanner() throws Exception {\n    final SystemDefaultRoutePlanner systemRoutePlanner = new SystemDefaultRoutePlanner(new DefaultProxySelector());\n    final CloseableHttpClient client = builder.using(configuration).using(systemRoutePlanner).build(\"test\");\n    final HttpRoutePlanner routePlanner = (HttpRoutePlanner)\n            FieldUtils.getField(client.getClass(), \"routePlanner\", true).get(client);\n    assertThat(routePlanner).isEqualTo(systemRoutePlanner);\n}\n\n```\nOr use a spy builder\n``` java\n    @Test\n    public void usesTheDefaultRoutePlanner() throws Exception {\n        builder.using(configuration).createClient(apacheBuilder, connectionManager, \"test\");\n        assertThat(spyHttpClientBuilderField(\"routePlanner\", apacheBuilder)).isNull();\n    }\n@Test\npublic void usesACustomRoutePlanner() throws Exception {\n    final SystemDefaultRoutePlanner systemRoutePlanner = new SystemDefaultRoutePlanner(new DefaultProxySelector());\n    builder.using(configuration).using(systemRoutePlanner).createClient(apacheBuilder, connectionManager, \"test\");\n    assertThat(spyHttpClientBuilderField(\"routePlanner\", apacheBuilder)).isEqualTo(systemRoutePlanner);\n}\n\n``\n. @joschi I've made changes you mentioned. Please review.\n. My bad,setLogger` was non-static and FindBugs found this mistake. Hail to static code analysis tools!\n. Thanks, @joschi! I am glad to contribute.\n. How about something like that?\njava\n@Test\npublic void usesACustomHttpClientMetricNameStrategy() throws Exception {\n    assertThat(builder.using(HttpClientMetricNameStrategies.HOST_AND_METHOD)\n            .createClient(apacheBuilder, connectionManager, \"test\"))\n            .isNotNull();\n    assertThat(FieldUtils.getField(InstrumentedHttpRequestExecutor.class, \n            \"metricNameStrategy\", true)\n            .get(spyHttpClientBuilderField(\"requestExec\", apacheBuilder)))\n            .isSameAs(HttpClientMetricNameStrategies.HOST_AND_METHOD);\n}\n. Hi,\nThis is not accessible in 0.7 because the server factory refactoring. Now there 2 types of servers: \n- default (separate ports for application and admin connectors)\n- simple (both connectors on the same port).\nYou can get the http port in this way:\n- For default server factory\njava\nint httpPort = 0;\nDefaultServerFactory serverFactory = (DefaultServerFactory) configuration.getServerFactory();\nfor (ConnectorFactory connector : serverFactory.getApplicationConnectors()) {\n    if (connector.getClass().isAssignableFrom(HttpConnectorFactory.class)) {\n        httpPort = ((HttpConnectorFactory) connector).getPort();\n        break;\n    }\n}\n- For simple server factory\njava\nint httpPort = 0;\nSimpleServerFactory serverFactory = (SimpleServerFactory) configuration.getServerFactory();\nHttpConnectorFactory connector = (HttpConnectorFactory) serverFactory.getConnector();\nif (connector.getClass().isAssignableFrom(HttpConnectorFactory.class)) {\n    httpPort = connector.getPort();\n}\n. True, that seems like a better approach.\n. It was, but after update to Jersey 2 it should work as expected. See #718\nAnyway, I didn't see a case when this test hanged up a build. \n. java\nJerseyClientConfiguration configuration = new JerseyClientConfiguration();\nconfiguration.setChunkedEncodingEnabled(false);\nClient jersey = new JerseyClientBuilder(environment)\n                .using(configuration)\n                .build(\"jersey-test\");. dropwizard-example doesn't have any integration with dropwizard-client. If you have questions regarding using the API, please post them to the dropwizard-user mailing list.. Internally we use HealthCheckServlet from the Dropwizard Metrics project.\nI would advice to open a feature request there to add an attribute to the HealthCheckServlet to customize a response code of a failed health check.\nIf it's done, we will be happy to support it in the server YAML configuration.\n. I guess it makes sense to remove this exception in DBIFactory, AbstractLiquibaseCommand and CloseableLiquibase also.\n. Jersey Client seems to be very broken after updating to Jersey 2.\nI would also recommend take a look to #791 \n. ~~Good, #791 added metrics for ConnectionManager.~~\n~~But unfortunately request timers remained not reported. I guess that because Jersey ApacheConnector doesn't expose a way to set a custom HttpRequestExecutor, so we can't instrument the client.\nWe can't override or delegate this connector because it's package-protected.\nWhat options do we have?~~\n~~Report an issue to Jersey and wait for possible resolution\nShade Jersey ApacheConnector to dropwziard-client and maintain it separately \nWrite own Connector\nEmbrace absence of request timer metrics for Jersey client~~\n~~Personally I more inclined to the second option.~~\nAh, now I see dropwizard-metrics/705 that resolves that problem in the right way. Sorry for bustling.\n. May be better to provide the negotiationProtocol property in the config? And then we can switch from NPNServerConnectorFactory to ALPNServerConnectorFactory by it's value during connector constructing. \nAnyway, a user has to provide a correct boot library to JVM to work with a desired protocol.\nFrom the other point of view, NPN is a legacy protocol and will be removed soon from major browsers. Dropwizard doesn't have burden of backward compatibility, so maybe it makes sense just to switch to the new protocol.\n. Sorry for spam. Github for some reason indexes amended commits...\nI've tried to implement this and created a pull-request.\n- I don't see a reason to not include http 1.1 in the protocol list. Internally ALPN just searches for a common protocol for a client and a server and then fallbacks to the default protocol. It worked for on my local machine without problems.\n- Dropwizard is not shipped with alpn-boot, it's a provided dependency. Users must download this library separately and set it for a target JVM. It was the same policy for nbn-boot.\n. Thanks for your feedback.\n- I guess we can't do anything here. Jetty respects the protocol order from the client. In the case of Chrome browser the order was 'spdy/3', 'spdy/3.1', 'http/1.1'. I thinks it should work fine for well-behaved clients.\n- Fair point. I've added a link to Jetty ALPN guide in the dropwizard-spdy pom file and in Dropwizard Configuration Reference. It should reduce confusion and provide information to users how to correctly set up their environment.\n- Yes, I also thought to drop SPDY 2. But I didn't want to mix SPDY 2 support with ALPN support, because I think they are not mutually exclusive. At least RFC7301 tells that all SPDY versions are supported. \n  I will create another PR to drop SPDY 2 if this is merged.\n. Closed as well as #803. Please, provide a test case and open an issue on current master.\n. Check out the file META-INF/services/io.dropwizard.logging.AppenderFactory in your service jar file. \nIt should be as follows:\nio.dropwizard.logging.ConsoleAppenderFactory\nio.dropwizard.logging.FileAppenderFactory\nio.dropwizard.logging.SyslogAppenderFactory\nIt's logger SPI implementations available to the runtime. Dropwizard scans this file and passes information about implementations to Jackson. Jackson than has ability to found a correct implementation based on annotations on these classes. Check out AppenderFactory and DiscoverableSubtypeResolver for reference.\nIf you use maven-shade plugin for building a fat jar, don't forget about SPI resource transformer for collecting SPI resources into the jar.\nxml\n<transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n. I don't know the original reasoning of this design, but one benefit of query parameters against a POST body is that they are a part of URI. Because of that they are logged in HTTP access log of any web server (as well in Dropwizard).\nThis fact simplifies the job of people who maintains applications. They can easily derive from logs which parameters were passed to tasks. With a POST body you need to do logging manually, which can lead to non standard logging implementations or forgetting to log at all. \n. OK, let it be so.\nIn the fact Apache HTTP client doesn't require complete environment at all. I just thought we confuse users with two constructors without explanation which one should be used.\n. Thanks for you pull request.\nI'm curious, what's wrong with running commands via\njava\nDropwizardAppRule<HelloWorldConfiguration> rule;\n// ...\nrule.getApplication().run(\"command\", \"parameter\");\nIf you want to write an integration test for a command without starting an HTTP server, you can just create an application class by hand.\nDo your commands have some state you want to inspect? This seems like a bad practice for me.\n. I see your case. I will try to look more closely on this PR this week.\n. I gave it more thought and came to the conclusion that the problem is not worth to solve. Al least it's not worth of creation of another abstraction level. Most commands are simple and stateless, so they can be tested by invoking the run method of Application. I think it's enough for most users.\nIf people will ask for this functionality, we can return to this PR.\nSorry.\n. +1 for this\n. I've recently started to work on a custom version of ApacheConnector for the Jersey client.\nIt uses a pre-configured Apache's CloseableHttpClient by HttpClientBuilder rather than creates own from parameters on the fly.\nIt's more concise and reasonably designed than the default connector as I believe.\nAnd, more importantly, it correctly behaves according to the configuration.\nIf I am not mistaken and I didn't make any blunders during implementation, it should close all open problems with the Jersey Client.\nIt's not finished yet and there is a lot a work to do (testing, documentation, review), but I think it's the right approach with integration of Apache and Jersey clients.\nAlso, unfortunately, if we use this approach it means we should revert the approach taken in #791 with a base class that contains common configuration.\n. I've rebased this against master.\nChanges should be compatible with the current JerseyClientBuilder.\n. @jontejj, please, take a look at #887.\nIt should resolve the problem with clashed health checks and metrics.\n. It's a known issue #636 \nCurrently Dropwizard can't override an empty configuration.\nOne possible way to solve this problem in the framework is to handle empty object nodes before configuration overriding. In this case we can:\n- Instantiate a default configuration\n- Dump it to an object tree\n- Pass the tree to the overriding routine\n- Create a real configuration from the processed tree\nI guess something like that will be sufficient in ConfigurationFactory#build\njava\nprivate T build(JsonNode node, String path) throws IOException, ConfigurationException {\n    if (node == null || (node.isObject() && node.size() == 0){\n        try {\n            node = mapper.valueToTree(klass.newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Unable create an instance of \" +\n                    klass, e);\n        }\n    }\nI will try to create a PR for this to move implementation discussion there.\n. Something similar was contributed recently in 7ab73cd.\n. In 0.9.1 there is the ability to log to multiply files contributed in 7ab73cd\n. That was quick.\nThanks for appreciation, I'm glad to contribute.\n. @eiden, thanks for your contribution!\nI find this change very useful and inclined to merge it. It's valuable to have more insight to why an application is not working.\nI've reviewed your changes and added some directions where it, in my opinion, could be improved. But, in overall, this PR looks good.\n. Thanks, @eiden! Very good and thorough contribution.\n. Thanks, @eiden! I've pushed the fixes.\n. +1 for more sophisticated control of metrics reporting.\n. Closed via #884 \n. I'm more fond to the original implementation. \nI think a switch is a more simple and transparent solution for users. Having 4 parameters  (includes, excludes, includesRegex, excludesRegex) doesn't sound great for me. If you use regular expressions - you usually don't need ordinal includes and excludes. Also ability to use several regular expressions is a benefit over writing one big regex monster.\n. @ToadJam, thanks for contributing. This looks good and I'm going to merge it.\nA couple of suggestions:\n- I think it's better to split the BaseReporterFactoryTest.matches test to two tests. One for base\n  includes and excludes and one with regular expressions. Doing so we isolate possible errors \n  in the regular expression implementation to one test.\n- It would be great to update the configuration reference to keep it in sync with actual code.\n- It's a kind of premature optimization, but what do you think about caching regex patterns?\nFiltering is a frequent operation and compiling a regular expression requires some time. Essentially, this is a classic tradeoff between time and space and I think time matters more. As a possible solution we could have a Guava cache in BaseReporterFactory with a safe expiring policy. Something like that:\n``` java\nLoadingCache patterns = CacheBuilder.newBuilder()\n.expireAfterWrite(1, TimeUnit.HOURS)\n.build(new CacheLoader() {\n    @Override\n    public Pattern load(String regex) throws Exception {\n        return Pattern.compile(regex);\n    }\n});\n....\npublic boolean containsMatch(ImmutableSet matchExpressions, String metricName) {\n    for (String regexExpression : matchExpressions) {\n        if (patterns.getUnchecked(regexExpression).matcher(metricName).matches()) {\n            return true;\n        }\n    }\n    return false;\n}\n``\n. Thanks! Some nitpicks and I think it's done.\n- Could you make the field __patternCache_ without underscore, just _patternCache_? \n  Despite that some projects (Jetty, Jackson, etc) find this style useful, we (Dropwizard) adhere \n  to the [Google Java Style](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s5.1-identifier-names)\n- Also this field and theRegexStringMatchingStrategy` constructor could be private.\n- Could you, please, separate the head line and body in your last git commit with an empty line?\n  Something like this:\n```\nIncorporating feedback from code review \n1.) splitting out the default/regex tests\n2.) updating the configuration reference and \n3.) supporting caching of compiled regex expressions\n```\nIt makes viewing the repository history much simpler and focused. You can just amend your last commit and push it.\n. Thanks, @ToadJam! Great work.\n. @eepstein, Sorry, I don't understand what you mean. I beleive we have only 3 parameters \n(includes, excludes and useRegexFilters). The last one just changes runtime treatement of the first and second.\nAnyway, the decision has been made and I've merged an implementation of the original design which I liked. @ToadJam did a good work on this, this PR solves the problem and we proceed with that.\nSorry to dissapoint you, if you think it could be be done in other way.\n. I think, Github doesn't support reopening issues. \nPlease, open a new issue with a description what seems broken and a link to the corresponding issue.\nWe will take a look.\n. Thank you for pointing this out and for thorough description.\nI agree that the current behaviour is not obvious. Especially if you start with the includes list.\nBut I see one problem with your proposed implementation. The excludes list doesn't make sense if\nthe includes list is not empty. Shouldn't it exclude items from the include list, rather then always exclude items from all metrics?  By default the include list is empty - it means we report all metrics. The exclude list in then just applied to the include list. \nIf we are set to this variant - then description is following:\n- excludes-only\n  All metrics are reported, except those with a name listed in excludes.\n- includes-only\n  Only metrics with a name listed in includes are reported.\n- mixed (both includes and excludes)\n  Only metrics with a name listed in includes are reported, except those listed in excludes.\nImplementation is straightforward:\njava\nfinal boolean isIncluded = includes.isEmpty() || includes.contains(name);\nfinal boolean isExcluded = excludes.contains(name);\nreturn isIncluded && !isExcluded;\nAnd 4th test case is changed for that:\njava\nnew Object[]{INCLUDES, EXCLUDES, \"inc\", true, \"case4\"},\n new Object[]{INCLUDES, EXCLUDES, \"both\", false, \"case4\"},\nnew Object[]{INCLUDES, EXCLUDES, \"exc\", false, \"case4\"},\nnew Object[]{INCLUDES, EXCLUDES, \"any\", false, \"case4\"}\nWhat do you think?\n. Great, I will make a fix. \nI'm going to wait for resolution of #884 and then will apply the corresponding changes.\n. Sure, send one. \nIf everything is right, I'll merge it and you will get credit for your effort on this issue.\n. Closed via #895 \n. Thanks, Glenn. If other collaborators don't mind, I will take a look at this.\n. I have doubts about resolving this problem too. \nI've tried to reproduce a validation error in the AuthBeforeValidateTest and wasn't able to do it. But in \nyour test case the error is clearly showed. It's bugging me. What the difference between the tests?\n. I think I found the differences.\n- Jochen's tests are for Jackson's deserialization and validation (the @Valid annotation is not actually needed). \n- Glenn's tests are in turn for Jersey's Bean Validation (Jackson's deserialization and validation\n  work because JSON is always correct).\nBut I have a feeling that GrizzlyWebTestContainer doesn't support bean validation, so Glenn's\ntests can't throw a 400 (or 422) error.\nFor future testing, I also created a simple resource in the dropwizard-example and run it in the \nreal Jersey container.\n``` java\n@Path(\"/protected\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class ProtectedResource {\n@POST\npublic String showSecret(@Valid Saying saying, @Auth User user) {\n    System.out.println(saying);\n    return String.format(\"Hey there, %s. You know the secret!\", user.getName());\n}\n\n}\npublic class Saying {\n    private long id;\n@Length(max = 3)\nprivate String content;\n\npublic Saying() {\n    // Jackson deserialization\n}\n\npublic Saying(long id, String content) {\n    this.id = id;\n    this.content = content;\n}\n\n@JsonProperty\npublic long getId() {\n    return id;\n}\n\n@JsonProperty\npublic String getContent() {\n    return content;\n}\n\n@Override\npublic String toString() {\n    return MoreObjects.toStringHelper(this)\n            .add(\"id\", id)\n            .add(\"content\", content)\n            .toString();\n}\n\n}\n```\nTested it with curl:\ncurl -v -H 'content-type:application/json' -d '{\"id\":2 , \"content\":\"trash\"}' \nhttp://127.0.0.1:8080/protected\nThe response was:\n```\n* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n\nPOST /protected HTTP/1.1\nUser-Agent: curl/7.39.0\nHost: 127.0.0.1:8080\nAccept: /\ncontent-type:application/json\nContent-Length: 28\n\nupload completely sent off: 28 out of 28 bytes\n< HTTP/1.1 422 \n< Date: Mon, 23 Feb 2015 18:27:51 GMT\n< Content-Type: application/json\n< Content-Length: 65\n< \nConnection #0 to host 127.0.0.1 left intact\n{\"errors\":[\"content length must be between 0 and 3 (was trash)\"]}\n```\n\n\nSo, unfortunately, this issue doesn't seem to be fixed for me. \n. @kilemensi Thanks for the report. Which version of PostgreSQL and JRE do you use?\nUnfortunately, I can't reproduce your problem with the following test case:\n``` sql\ncreate table departments(\n  id bigint primary key,\n  name varchar(32) not null\n);\ninsert into departments(id, name) values (1, 'Sales'), (2,'Development'), \n(3, 'Accounting'), (4, 'IT');\ncreate table employees(\n  id bigint primary key,\n  first_name varchar(32) not null,\n  last_name varchar(32) not null,\n  department_id bigint references departments(id)\n);\ninsert into employees(id, first_name, last_name, department_id) values\n(1, 'Jim', 'Fields', 2),\n(2, 'Gregory', 'Dunn', 4),\n(3, 'Lisa', 'Myers', 1),\n(4, 'Colin', 'Wilson', 2),\n(5, 'Jim', 'Button', 3),\n(6, 'Den', 'Dunn', 3),\n(7, 'Lisa', 'Hoffman', 3),\n(8, 'Colin', 'Button', 1)\n```\nsql\ndrop table employees;\ndrop table departments;\n``` java\npublic interface EmployeeDao {\n@SqlQuery(\"select id from employees \" +\n        \"where first_name = :first_name \" +\n        \"or    last_name = :last_name \" +\n        \"or    department_id = :department_id\")\nList<Long> find(@Bind(\"first_name\") Optional<String> firstName,\n                @Bind(\"last_name\") Optional<String> lastName,\n                @Bind(\"department_id\") Optional<Long> departmentId);\n\n}\n```\n``` java\npublic class PostgresOptionalTest {\nHandle handle;\nEmployeeDao employeeDao;\n\n@Before\npublic void setUp() throws Exception {\n    DBI dbi = new DBI(\"jdbc:postgresql://127.0.0.1:5432/dw_optional\", \"dw\", \"pass\");\n    dbi.setSQLLog(new PrintStreamLog());\n    dbi.registerArgumentFactory(new OptionalArgumentFactory(null));\n\n    handle = dbi.open();\n    handle.createScript(\"employees.sql\").execute();\n    employeeDao = handle.attach(EmployeeDao.class);\n}\n\n@After\npublic void tearDown() throws Exception {\n    handle.createScript(\"clear.sql\").execute();\n    handle.close();\n}\n\n@Test\npublic void testFindByFirstName() {\n    List<Long> result = employeeDao.find(Optional.of(\"Lisa\"), Optional.absent(), Optional.absent());\n    System.out.println(result);\n    Assert.assertEquals(ImmutableList.of(3L, 7L), result);\n}\n\n@Test\npublic void testFindByDepartment() {\n    List<Long> result = employeeDao.find(Optional.absent(), Optional.absent(), Optional.of(2L));\n    System.out.println(result);\n    Assert.assertEquals(ImmutableList.of(1L, 4L), result);\n}\n\n}\n```\nMy configuration:\n- dropwizard 0.8.0-rc3\n- jdbi 2.59\n- guava 18.0\n- postgresql 9.4-1200-jdbc41\n- PostgreSQL 9.3.5 on x86_64\n- Java(TM) SE Runtime Environment (build 1.8.0_25-b17)\nCan you, please, provide a test case where the error is reproduced?\n. Aha, I now see the problem.\nFirst, as a workaround you can specify a type explicitly in the SQL query.\njava\n@SqlUpdate(\"WITH employee_info AS (\"\n        + \"     SELECT :id AS id, :firstName AS first_name, \"\n        + \"             cast(:lastName AS VARCHAR) last_name,\"\n        + \"             :departmentId AS department_id\"\n        + \" )\"\n        + \" INSERT INTO employees (id, first_name, last_name, department_id)\"\n        + \" SELECT * FROM employee_info\")\nint insert(@Bind(\"id\") Long id,\n           @Bind(\"firstName\") String firstName,\n           @Bind(\"lastName\") Optional<String> lastName,\n           @Bind(\"departmentId\") Long departmentId);\nSpeaking about a generic solution of this problem, it's not so easy. We have 2 major problems:\n- Resolve a type binding of an Optional argument\n- Figure out the correct SQL type for the corresponding Java type\nThe second problem can be solved by delegating it to JDBI's BuiltInArgumentFactory.\nBut the first is tough one. Information about a parametrized type can be derived from the corresponding method through reflection. But  we don't have runtime information about a position of an argument, so it's impossible to say which parameter of the method is currently being handled.\nI guess, to the best of my knowledge, we can't do anything about that now without assisting of JDBI.\n. @eepstein Could you, please, update your PR according to the changes made in #884?\nIt's been already merged to master.\n. I've rebased the changes and merged them with small improvements.\nThanks, @eepstein, for your steady work on this!\n. @kmandeville  Are you sure your problem is related to the Dropwizard project?\nFrom the log you provided, I don't see anything that links it with the io.dropwizard package, under which the project is distributed.\nIf you believe that the problem is with Dropwizard Metrics - it's a separate project under Dropwizard organization. You can open an issue there.\n. Thanks for pointing this. Should be fixed in the last rc6-snapshot.\n. My bad, there were another issue with logback file appender configuration.\nThanks to Carlo for fixing that.\n. @kenota Thanks very much for the report. We are glad to hear that people upgrade to the release candidate builds and report issues they have encountered. It helps to us to make Dropwizard better.\nAbout the issue, I can confirm about 6x perfomance degradation in 0.8.0-rc4.\nI've got the following results in my test environment: \n- (two modest linux virtual machines: one for the server, one for the client)\n- Java(TM) SE Runtime Environment (build 1.8.0_20-b26)\n- JVM arguments -server -Xmx512m -Xms512m\n- Standard wrk test\n- 5 tests for 30 seconds. First 3 are ignored.\n0.7.1 \nRunning 30s test @ http://192.168.52.15:18080/video-hibernate\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     3.27ms    3.74ms  39.28ms   87.46%\n    Req/Sec     2.47k     1.02k    5.67k    68.50%\n  141398 requests in 30.00s, 28.99MB read\nRequests/sec:   4713.28\nTransfer/sec:      0.97MB\n0.8.0-rc4\nRunning 30s test @ http://192.168.52.15:18080/video-hibernate\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    14.47ms    7.75ms  62.17ms   62.78%\n    Req/Sec   354.07     53.65   510.00     68.61%\n  21163 requests in 30.00s, 3.49MB read\nRequests/sec:    705.39\nTransfer/sec:    119.17KB\nI will try to make some investigation of this behaviour.\n. At first glance it looks like a some dropwizard-hibernate integration issue. Numbers look really weird.\n0.7.1 Hibernate stats\nINFO  [2015-02-28 09:55:31,358] org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: Session Metrics {\n    2925 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    3348 nanoseconds spent preparing 1 JDBC statements;\n    3427 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    12915 nanoseconds spent executing 1 flushes (flushing a total of 2 entities and 0 collections);\n    1117 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\n0.7.1 findAll method timer\njson\n{\n    \"findAll\": {\n      \"count\" : 184286,\n      \"max\" : 0.004406585,\n      \"mean\" : 8.251789688715953E-5,\n      \"min\" : 3.76E-5,\n      \"p50\" : 6.41035E-5,\n      \"p75\" : 7.735575E-5,\n      \"p95\" : 1.0673735E-4,\n      \"p98\" : 1.3669447999999998E-4,\n      \"p99\" : 2.068743000000001E-4,\n      \"p999\" : 0.0043515032120000074,\n      \"stddev\" : 1.887684948495728E-4,\n      \"m15_rate\" : 458.3885218384127,\n      \"m1_rate\" : 1262.7595698455427,\n      \"m5_rate\" : 499.6565012876884,\n      \"mean_rate\" : 412.5573303707618,\n      \"duration_units\" : \"seconds\",\n      \"rate_units\" : \"calls/second\"\n    }\n}\n}\n0.8.0-rc4 Hibernate stats\nINFO  [2015-02-28 10:05:10,813] org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: Session Metrics {\n    5102 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    5052 nanoseconds spent preparing 1 JDBC statements;\n    9358 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    17067 nanoseconds spent executing 1 flushes (flushing a total of 2 entities and 0 collections);\n    1095 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\n0.8.0-rc4  findAll method timer\njson\n{\n    \"findAll\": {\n        \"count\": 111399,\n        \"max\": 0.076793583,\n        \"mean\": 0.012456742886687444,\n        \"min\": 0.001129987,\n        \"p50\": 0.010994974000000001,\n        \"p75\": 0.019294024,\n        \"p95\": 0.029016877000000003,\n        \"p98\": 0.033430958000000004,\n        \"p99\": 0.036311203,\n        \"p999\": 0.059136342,\n        \"stddev\": 0.00946485908806412,\n        \"m15_rate\": 233.84245379553187,\n        \"m1_rate\": 491.7529578715853,\n        \"m5_rate\": 291.77870315313703,\n        \"mean_rate\": 323.76017533370344,\n        \"duration_units\": \"seconds\",\n        \"rate_units\": \"calls/second\"\n    }\n}\nThe drop is fierce. From 82 microseconds to 12 milliseconds.\nFrom the metrics I can conclude that the database and the connection pool behaves roughly the same and return expected numbers for the in-process database. Young GC numbers also look similar, apart from the fact that 0.7.1 generates a lot more garbage and GC starting become a bottleneck and throws FullGCs.\n0.7.1\n{\n    \"jvm.gc.PS-Scavenge.count\": {\n        \"value\": 95\n    },\n    \"jvm.gc.PS-Scavenge.time\": {\n        \"value\": 4240\n    },\n    \"jvm.gc.PS-MarkSweep.count\": {\n        \"value\": 46\n    },\n    \"jvm.gc.PS-MarkSweep.time\": {\n        \"value\": 30523\n    }\n}\n0.8.0-rc4\n{\n    \"jvm.gc.PS-Scavenge.count\": {\n        \"value\": 107\n    },\n    \"jvm.gc.PS-Scavenge.time\": {\n        \"value\": 1654\n    }, \n   \"jvm.gc.PS-MarkSweep.count\": {\n        \"value\": 1\n    },\n    \"jvm.gc.PS-MarkSweep.time\": {\n        \"value\": 178\n    },\n}\nThis means there is a bottleneck somewhere between the application and the database pool.\nFor a note 0.7.1 uses Hibernate Core 4.3.5.Final and 0.8.0-rc4 uses Hibernate Core 4.3.8.Final\n. By the way, there is no regression with JDBI (little worse througput, but better latency).\n0.7.1\nRunning 30s test @ http://192.168.52.15:18080/video-hibernate/jdbi\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     5.41ms   10.80ms  54.62ms   93.25%\n    Req/Sec     2.64k     1.31k    6.67k    66.69%\n  150112 requests in 30.00s, 30.78MB read\nRequests/sec:   5003.73\nTransfer/sec:      1.03MB\n0.8.0-rc4\nRunning 30s test @ http://192.168.52.15:18080/video-hibernate/jdbi\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     2.91ms    2.98ms  32.50ms   89.06%\n    Req/Sec     2.26k   733.29     4.22k    74.94%\n  130637 requests in 30.00s, 21.55MB read\nRequests/sec:   4354.40\nTransfer/sec:    735.66KB\n. Well, it actually looks like a Hibernate issue. I couln'd find any changes in dropwizard-hibernate, \nthat could affect perfomance so drastically, apart from upgrading to newer Hibernate versions.\nRunning 0.8.0-rc5-SNAPSHOT with Hibernate Core 4.3.5.Final gave me similar results to 0.7.1 \n(little worse but acceptable)\nRunning 30s test @ http://192.168.52.15:18080/video-hibernate\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     4.02ms    3.87ms  40.60ms   88.22%\n    Req/Sec     1.72k   627.90     3.60k    70.15%\n  98185 requests in 30.00s, 16.20MB read\nRequests/sec:   3272.84\nTransfer/sec:    552.93KB\njson\n{\n  \"findAll\" : {\n      \"count\" : 690158,\n      \"max\" : 0.018245754,\n      \"mean\" : 1.1480092781416619E-4,\n      \"min\" : 4.0662000000000005E-5,\n      \"p50\" : 7.0688E-5,\n      \"p75\" : 8.1925E-5,\n      \"p95\" : 1.1272300000000001E-4,\n      \"p98\" : 1.39163E-4,\n      \"p99\" : 1.55498E-4,\n      \"p999\" : 0.018245754,\n      \"stddev\" : 6.758212715369515E-4,\n      \"m15_rate\" : 880.4983235729563,\n      \"m1_rate\" : 1083.995873656406,\n      \"m5_rate\" : 1358.0522535970188,\n      \"mean_rate\" : 1732.7668884405502,\n      \"duration_units\" : \"seconds\",\n      \"rate_units\" : \"calls/second\"\n    }\n}\nAnd the same application with 4.3.6-Final\nRunning 30s test @ http://192.168.52.15:18080/video-hibernate\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    16.26ms    9.78ms 107.27ms   72.97%\n    Req/Sec   325.21     50.95   476.00     72.36%\n  19362 requests in 30.00s, 3.19MB read\nRequests/sec:    645.34\nTransfer/sec:    109.03KB\nI've revieved changes in Hibernate 4.3.6 release notes, but didn't find any changes related to perfomance. \nFor the time being, I consider to rollback Dropwizard to Hibernate 4.3.5.\n. I've also checked this against a dedicated Postgres database and got some performance degradation.\nNot so drastic, but considerable (2x-3x).\nIt would be great if someone could also make some load tests on real data and real hardware and \nshare his/her experience.\n. @kenota Could you, please, test against the last 0.8.0-rc5-SNAPSHOT? It should be available in the Sonatype Snapshots repository in a couple of hours.\n. @JonMR Performance testing is a big separate issue. We don't have any benchmarks (micro or macro) yet. Currently we rely to the developers of the libraries we use and trust them. Our strategy is try to update your dependencies to the latest versions, which usually bring performance improvements.\nTo all appearances, sometimes this does not work.\nDefinitely there is a room to improve.\n. Glad to hear that the problem is resolved. I will close the issue and link it with the 0.8 release.\nThanks again for catching and reporting this.\n. I find it extremely useful.\nWe could create \"Dropwizard Internals\" section in the docs, where we can post such guides.\nAbout keeping it relevant, I believe that not writing a documentation just because it's hard to maintain is a lame excuse. If we would start to write about internals, we will motivate more people to hack on Dropwizard. Community should help us to find mistakes and improve quality and relevance of the docs. \n. Thanks, @prb, for catching this. I've clarified the correct frequency value in the docs.\nAbout the actual issue: no, frequency is not required for reportes. If it's not set, then the default one (1 minute) will be used.\nI don't have a Graphite instance now to test, but console and CSV file reporters work fine for me without setting a frequency. After 1 minute the metrics show up.\nI guess, maybe users expect that metrics will be reported immediately after startup? Should we change that?\n. I will take a look today on this.\n. Looks great and works correctly. I've squashed the commits and pushed to master.\n@phxql, thanks for contribution! \n. @ESPNMichaelKidd, thanks for reporting this.\nThe problem with the code is that LoggingFilter is set on a web target, rather than on a client.\nIf the filter is set on the client, the code works fine:\n``` java\nClient client = new JerseyClientBuilder(environment).build(\"test-jersey-client\");\nclient.register(new LoggingFilter());\nWebTarget wt = client.target(\"http://google.com\");\nString firstResponse = wt.request().get(String.class);\nSystem.out.println(firstResponse);\nWebTarget wt2 = client.target(\"http://google.com\");\nString secondResponse = wt2.request().get(String.class);\nSystem.out.println(secondResponse);\n```\nAnyway, it's a legal configuration and we should handle cases like that.\nI've made ConnectorProvider idempotent. After that JerseyClient should handle configurations with filters on targets. \nCould you test this againt the latest snapshot?\n. Great. The fix will be avaiable in the upcoming 0.8.0.\n. This looks fine for me. Thanks.\n. Yes, that's a good advice. I think If you are using JPA, it's just more simple to go with Spring, which has good integration with it. You can easily combine Spring and Dropwizard though.\n. Some minor improvements and, I think, we are done.\n. Great, looks amazing.\nThanks for your contribution.\n. That looks extremely good to me!\nThanks, Carlo, for catching and fixing that.\n. This is true. ChainedAuthFactory example was contributed before update to Jersey 2 and now outdated. We need to rewrite that.\nWe don't have a migration tutorial, but there is a post in the dropwizard-dev mailing list with some hints about obstacles during migration.\n. Fair enough. \nAnyway, thanks for reporting issues. It makes Dropwizard better.\n. There is a post in the dropwizard-dev mailing list about migration from 0.7.1 to 0.8.\nMost problem are caused by update to Jersey 2. We had to change a lot internally to fully support\nit. Despite that migration could be painful, we had successfull feedback from people about updates to RC builds.\nAbout documentation, you are right - we need some guide about migration. You are not the first, asking for that and refer people to the mailing discussion is not good. \n. We have a separate project with Java 8 features.\nIt should support Optional and JSR-310 JDK datatypes for Jackson (not by the official FasterXML library, though).\n. Thanks for taking your time for fixing this.\n. As I recall from a mailing list discussion, Coda specifically wanted to give credit to Yammer and retain them in the notice. I believe, we should just ask him to avoid misunderstanding.\n. That's fine for me also.\n. Thanks for this PR.\nI will take a closer look at this in the weekend.\n. @velocipedist. I've reviewed this PR and gave directions, where it, in my opinion, could be improved.\nBut motivation of this change seems convincing for me.\nAlso things to notice for you:\n- Please, rebase you PR against the current master ans squash the commits. Unfortunately, it's not merging now.\n- If possible, add an integration test for WebTarget configuration, so we can test that a new configuration is really applying to a request.\n. @velocipedist Thanks! DropwizardApacheConnectorTest is a great piece of work.\nCouple tweaks and this PR is ready to go.\n. @velocipedist Thanks for so much effort on this issue and excellent write-up!\n. Sorry, I can't give any strict ETA on 0.8.1.\nIt will depend on the type of release - feature or maintenance. We haven't decided yet.\n. I'm basically fine with breaking backward compatability in case of security fixes.\nThe only concern I have is that should we put this change on 0.9.0 or 0.8.1? I guess people will want maintanence releases for the 0.8 branch only with bugfixes/improvements. Not everyone will be happy to make 2 major updates one after another.\nMaybe we could do a separate 0.8.1-security release with this change and merge it to upstream in 0.9.0?\n. Looks great! Thanks for your contribution.\n. I can confirm that issue.\nUnfortunately, I can't give a solution now. The problem lies in the update to Jersey 2 in 0.8.0.\nSeems to be UnitOfWorkApplicationListener doesn't work with exception mappers.\n. I've made another look and can give a workaround for you.\nIn 0.8.0 in UnitOfWorkApplicationListener we commit a Hibernate transaction after a request has been processed and response processing has been started. We don't have an event like BEFORE_RESOURCE_METHOD_FINISHED, so we are forced to make a commit (with possible errors) during response processing.\nIn the Jersey architecture at this stage exception mappers are not taken into account, but mappers that implement the interface ResponseErrorMapper are.\nThey are also not processed by default, so you need to enable this feature in configuration:\njava\nenvironment.jersey().property(ServerProperties.PROCESSING_RESPONSE_ERRORS_ENABLED, true);\nAfter that you can refactor your exception mapper something like that:\n``` java\n@Provider\npublic class SQLConstraintViolationExceptionMapper implements ResponseErrorMapper {\nprivate static final Logger LOGGER = LoggerFactory.getLogger(SQLConstraintViolationExceptionMapper.class);\n\n@Override\npublic Response toResponse(Throwable e) {\n    return Response.status(Response.Status.BAD_REQUEST)\n            .entity(Collections.singletonMap(\"errors\",\n                    Collections.singletonMap(\"message\", getMessage((ConstraintViolationException) e))))\n            .build();\n}\n\nprivate List<String> getMessage(ConstraintViolationException e) {\n\n    LOGGER.error(e.getMessage(), e);\n\n    // a hack to convert exception to friendly error message\n    if (\"fk_budgets_categories\".equalsIgnoreCase(e.getConstraintName())) {\n        return Collections.singletonList(\"Failed to delete category due to references to existing budget(s).\");\n    } else if (\"fk_transactions_budgets\".equalsIgnoreCase(e.getConstraintName())) {\n        return Collections.singletonList(\"Failed to delete budget due to references to existing transaction(s).\");\n    }\n    return Collections.singletonList(e.getMessage());\n}\n\n}\n```\nCould you test this approach? If it works for you, I will add information about response error mappers\ninto the 0.8.0 migration guide.\n. That actually seems like a better solution.  Jersey will rethrow the original exception if it's unmapped and map to Response if it's mapped. Thanks for pointers.\nI will try to create a PR for fixing that.\n. As I recall, Coda did a similar change couple of years ago, but then downgraded maven-shade-plugin to 1.6. Source - de8f953. \nIs this note relevant for maven-shade-plugin-2.3?\n. I agree with Justin on this one.\nI think we should release 0.8.1 in mid-april and then move to 0.9.0 with back reports to 0.8.x\n. This PR looks extremely good for me.\nA solid explanation of the change with a bunch of tests as well.\nThanks for your thorough contribution!\n. We host the site through GitHub Pages. They are under DDoS now. \nhttps://status.github.com/messages\nStay tuned.\n. I think that the problem not in Metrics, but that Dropwizard Boostrap hardcodes creation an instance of MetricRegistry and users can't override its behaviour with something like this:\n``` java\nmetricRegistry = new MetricRegistry(){\n    @Override\n    public Histogram histogram(String name) {\n        return new Histogram(new HdrHistogramResetOnSnapshotReservoir());\n    }\n@Override\npublic Timer timer(String name) {\n    return new Timer(new HdrHistogramResetOnSnapshotReservoir());\n}\n\n};\n``\n. One possible solution:\n- CreateMetricRegistryFactoryand makeBoostrapdepends on it.\n- Add facility to set a custom factory toBoostrapinApplication#initialize- Add JVM metrics to the instance ofMetricRegistryand startJmxReporter_after_ initialization.\n. Thanks for the report. A couple of remarks and questions:\n1. I believe, there is no reason to add/*toapplicationContextPath. It should be just/mdm.\n2. Maybe it's a typo, buttype: contextdoesn't exist. It should betype: simple.\n3. Where do you callenvironment.getApplicationContext().getContextPath()?  For example, in the methodApplication#run` the context path is not set yet.\nPlease, provide a code sample, where we can inspect a wrong behavior in 0.8.0.\n. That's true. \ndefault is better, because in that case the application will be available on /application/ path.\nFor simple it will be /application/application/, because rootPath is calculated from applicationContextPath. And it's /application by default.\n. Yes, a note about that would be great. \nAlso we could rename /application/* to /api/* to reduce confusion for the simple server configuration.\n. Thanks for taking your time for writing that. Documentation improvements are always welcome.\nCommitted to master with a couple of tweaks.\n. Could you, please, provide an example of failing behaviour?\nvalue.getMillis() returns a correct epoch, depending on DateTime timezone. A JDBC driver then pass this epoch to a database. What are perils of such conversion? \n. Sorry, I didn't manage to reproduce the problem.\nI used a Postgres database in my local timezone - Europe/Moscow [+03:00] and a simple test case:\nsql\nCREATE TABLE flights (\n  flight_id         VARCHAR(5)               NOT NULL PRIMARY KEY,\n  departure_airport VARCHAR(3)               NOT NULL,\n  arrival_airport   VARCHAR(3)               NOT NULL,\n  departure_time    TIMESTAMP WITH TIME ZONE NOT NULL,\n  arrival_time      TIMESTAMP WITH TIME ZONE NOT NULL\n)\n``` java\npublic class TestTZ {\n@Test\npublic void test(){\n    System.out.printf(\"Now: %s %n\", new DateTime());\n\n    DBI dbi = new DBI(\"jdbc:postgresql://127.0.0.1:5432/fldb\", \"user\", \"pass\");\n    dbi.registerArgumentFactory(new JodaDateTimeArgumentFactory());\n    dbi.registerMapper(new JodaDateTimeMapper());\n    dbi.setSQLLog(new PrintStreamLog());\n\n    Handle handle = dbi.open();\n    handle.execute(\"DROP TABLE IF EXISTS flights\");\n    handle.createScript(\"schema.sql\").execute();\n\n    FlightDao flightDao = handle.attach(FlightDao.class);\n\n    DateTimeFormatter fmt = ISODateTimeFormat.dateTimeNoMillis();\n    flightDao.insert(\"C1671\", \"ORD\", \"DUS\",\n            fmt.parseDateTime(\"2015-04-01T06:00:00-05:00\"),\n            fmt.parseDateTime(\"2015-04-01T21:00:00+02:00\"));\n\n    DateTime departureTime = flightDao.getDepartureTime(\"C1671\");\n    System.out.printf(\"Departure time: %s %n\", departureTime);\n\n    DateTime arrivalTime = flightDao.getArrivalTime(\"C1671\");\n    System.out.printf(\"Arrival time: %s %n\", arrivalTime);\n\n    handle.close();\n}\n\npublic interface FlightDao {\n\n    @SqlUpdate(\"INSERT INTO flights(flight_id, departure_airport, arrival_airport,departure_time , arrival_time) \" +\n               \"VALUES (:flight_id, :departure_airport, :arrival_airport, :departure_time, :arrival_time)\")\n    void insert(@Bind(\"flight_id\") String flightId, @Bind(\"departure_airport\") String departureAirport,\n                @Bind(\"arrival_airport\") String arrivalAirport,\n                @Bind(\"departure_time\") DateTime departureTime , \n                @Bind(\"arrival_time\") DateTime arrivalTime);\n\n    @SqlQuery(\"SELECT arrival_time FROM flights WHERE flight_id=:flight_id\")\n    DateTime getArrivalTime(@Bind(\"flight_id\") String flightId);\n\n    @SqlQuery(\"SELECT departure_time FROM flights WHERE flight_id=:flight_id\")\n    DateTime getDepartureTime(@Bind(\"flight_id\") String flightId);\n\n}\n\n}\n```\nWhen I ran it with -Duser.timezone=America/Chicago, I've got the following output:\nNow: 2015-04-02T14:59:50.637-05:00 \nHandle [org.skife.jdbi.v2.BasicHandle@cc285f4] obtained in 132 millis\nbatch:[[DROP  TABLE IF EXISTS flights ]] took 21 millis\nbatch:[[CREATE TABLE flights (   flight_id         VARCHAR(5)               NOT NULL PRIMARY KEY,   departure_airport VARCHAR(3)               NOT NULL,   arrival_airport   VARCHAR(3)               NOT NULL,   departure_time    TIMESTAMP WITH TIME ZONE NOT NULL,   arrival_time      TIMESTAMP WITH TIME ZONE NOT NULL ) ]] took 75 millis\nstatement:[INSERT INTO flights(flight_id, departure_airport, arrival_airport,departure_time , arrival_time) VALUES (?, ?, ?, ?, ?)] took 15 millis\nstatement:[SELECT departure_time FROM flights WHERE flight_id=?] took 18 millis\nDeparture time: 2015-04-01T06:00:00.000-05:00 \nstatement:[SELECT arrival_time FROM flights WHERE flight_id=?] took 0 millis\nArrival time: 2015-04-01T14:00:00.000-05:00 \nHandle [org.skife.jdbi.v2.BasicHandle@cc285f4] released\nWith -Duser.timezone=UTC\nNow: 2015-04-02T20:00:24.544Z \nHandle [org.skife.jdbi.v2.BasicHandle@32d992b2] obtained in 128 millis\nbatch:[[DROP  TABLE IF EXISTS flights ]] took 17 millis\nbatch:[[CREATE TABLE flights (   flight_id         VARCHAR(5)               NOT NULL PRIMARY KEY,   departure_airport VARCHAR(3)               NOT NULL,   arrival_airport   VARCHAR(3)               NOT NULL,   departure_time    TIMESTAMP WITH TIME ZONE NOT NULL,   arrival_time      TIMESTAMP WITH TIME ZONE NOT NULL ) ]] took 108 millis\nstatement:[INSERT INTO flights(flight_id, departure_airport, arrival_airport,departure_time , arrival_time) VALUES (?, ?, ?, ?, ?)] took 13 millis\nstatement:[SELECT departure_time FROM flights WHERE flight_id=?] took 15 millis\nDeparture time: 2015-04-01T11:00:00.000Z \nstatement:[SELECT arrival_time FROM flights WHERE flight_id=?] took 0 millis\nArrival time: 2015-04-01T19:00:00.000Z \nHandle [org.skife.jdbi.v2.BasicHandle@32d992b2] released\nAnd, finally, export from the database returned this:\ncsv\nflight_id,departure_airport,arrival_airport,departure_time,arrival_time\nC1671,ORD,DUS,\"2015-04-01 14:00:00.000000\",\"2015-04-01 22:00:00.000000\"\nSo for me everything works as expected from different time zones. \nI don't have experience with Redshift, so can't say why timestamps were shifted. Also I didn't find the source code of the driver, so that's a black box for me. Maybe you could contact Amazon and ask them for assistance?\nHowever, if you provide a vendor-independent failing test case and a solution, which doesn't break backwards compatibility, I will happily merge it.\n. Well, now I see the problem.\nWhen handing SQL TIMESTAMP the database doesn't take into account a user time zone during writing, and doesn't convert to the user timezone during reading (by the way, I was wrong that a JDBC driver pass an epoch timestamp, actually it's a string in ISO 8601  or a custom binary).\nFor example, if you write a timestamp 12-31-2014 18:00:00-06:00 to the database in UTC, it will be saved as 12-31-2014 18:00:00. When you read it back in UTC-06:00, it will be 12-31-2014 18:00:00-06:00, which is correct. But when you read it UTC, it will be  12-31-2014 18:00:00Z,\nwhich is probably not the thing you want.\nAn easy solution, of course, is to advice to users just to switch to TIMESTAMP WITH TIME ZONE. \nBut I think on an application level we can also give users a facility to set a DB time zone during reading and writing dates. For example, it could be useful if a developer is not in a control of the DB schema. \nI will try to create a PR for this.\n. This functionality was contributed in 05d3fcd\n. Sorry for unnecessary stir.\nIt didn't happen to be an one-line change, because the maven-enforcer plugin wasn't happy and I had to manually exclude some dependencies.\nAnyway, thanks, Tatu, for reminding us to upgrade. Keep up the good work!\n. - Could you try to wrap your exception into MappableException?\n- If this doesn't work, you could try to register an exception mapper as ResponseErrorMapper\nResponse error mappers are not processed by default, so you need to enable this feature in the configuration:\njava\nenvironment.jersey().property(ServerProperties.PROCESSING_RESPONSE_ERRORS_ENABLED, true);\n. The tests were flaky, so I restarted the build on Travis and it completed successfully.\nThanks, @kerrykimbrough, for your contribution!\n. Handling empty query parameters as optional values sounds reasonably to me.\nI don't think backwards compatibility is a big issue, because I can't imagine anyone who derive a business value from empty parameters, will use it with conjunction with Optional.\nRegarding checking a string with many whitespaces, I don't think we should treat it as an optional value: whitespaces are actual data. If someone doesn't express disagreement, I will prepare a patch the next week.\nPS. Sorry for accidental closing the issue.\n. No worries. I would merge it now, but I want to hear what others maintaniers have to say.\n. Thanks. I ran this test so many times locally, but didn't catch any errors (seems to be environment specific).\n. What do you think if we could extract acquring LoggerContext to a separate method and spin-loop\na thread that didn't start initialization? Something like that:\n``` java\nfinal Logger root = getLoggerContext().getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);\n....\nprivate static LoggerContext getLoggerContext() {\n        while (true) {\n            ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();\n            if (iLoggerFactory instanceof LoggerContext) {\n                return (LoggerContext) iLoggerFactory;\n            }\n            try {\n                // Awaiting initialization of the logger\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n```\nFor me that a was single workaround that helped to run tests concurrently.\n. I managed to run tests in parallel in the project: https://github.com/arteam/dropwizard/commits/conc_tests. It wasn't easy and I had to ignore some tests, that are inherently not thread-safe (with system properties). I will try to make a pull request in a couple of days.\n. example.yml is the configuration of the dropwizard-example application, which demonstrates different features of Dropwizard. Along with others it's HTTPS, database access and view templates configuration. So this file is not a drop-in replacement for the configuration of a new project.\nActually, for Getting Started you don't need anything apart from the provided YAML file.\nyaml\ntemplate: Hello, %s!\ndefaultName: Stranger\n. My 2 cents:\n- The situation with micro-benchmarks is a very similar to unit testing. There is a little profit from one lone benchmark, but when the all code is covered by benchmarks, it's far easier to find the root of a perfomance problem early. When a developer checks-in the new code, we can run micro-benchmarks and check regression. If there is any, it's a sign of a possible performance problem.\n- It's a tool for the maintainers to argue about perfomance with numbers. For example, if a maintainer thinks that a pull request decreases performance, he can consolidate his opinion with numbers.\n- I don't know where it will lead us, but it's a tool that can improve our awareness in making decisions. More data is better.\n. After #987 that issue need to rebased.\nAlso we need to think abount the need of bootstrapping logging in Application, if it's configured externally.\n. Apart from some nitpicks, this PR looks accurate to me. Well done, @carlo-rtr.\n. @softarn, thanks for the contribution!\nI've added some notes about where the PR could be improved, but in overall it looks great. \n. Thanks, @softarn, for your efforts on that.\n. Well, that's awkward. I can't reproduce the error on my local machine and the build fails on Travis randomly. It looks like I was bitten by my own initiatives :) Well, at least I reached one goal: the test environment is certainly has become more fragile. I will try to investigate a source of the error.\n. Please, disable a chunked encoding for the Jersey Client\njava\nJerseyClientConfiguration configuration = new JerseyClientConfiguration();\nconfiguration.setChunkedEncodingEnabled(false);\nClient client = new JerseyClientBuilder(RULE.getEnvironment())\n           .using(configuration)\n           .build(\"test-client\");\nor change the YML configuration file\nIf the transfer encoding is chunked, then the server doesn't know a boundary, so it can't correctly split the attached data from the base message.\n. @dropwizard/committers, It would be great, if someone reviewed this patch.\n. > Maybe registerMetrics() should be called implicitly when providing an alternative MetricRegistry, > > i.e. rename setMetricRegistry() to registerMetricRegistry() or initializeMetricRegistry() and call \n\nregisterMetrics() in that method. The can still be a (package protected) setMetricRegistry() if that \nwould be required for tests.\n\nThe problem is that we need to stop the default JMX reporter and create a new one, which adds complexity. \n\nWhat is the exact security concern with making registerMetrics public? If Application needs to call > it, then I think it should be part of the Bootstrap interface. \n\nI thought that registering system metrics should be transparent to user code. Basically users should\nnot see this method, because it must be called only by Application. For example, someone can call this method in Application#initialize and break the startup process.\nAnyway, I am more fond to make registerMetrics public. But I think we can make it idempotent,\nby returning sucessfully if the system metrics are already registered.\n. @jplock @carlo-rtr Thanks for the review! I addressed your feedback and rebased the commit.\n. Oops, looks like I was a bit of late. Thanks for merging.\n. I think, Dropwizard Metrics makes only maintenance releases for 3.1.* branch. All active development happens in 4.0.0 branch. The release of 4.0.0 is far away, but we have a more fast cycle of releases.\nFurthermore, I think it's not right that a library for instrumentation dictates a version of\na primary dependency of the module.\nBut nothing stop us from opening a pull request in Dropwizard Metrics as well!\n. Thanks\n. Looks great. Thanks again for taking your time to improve the documentation.\nWe really appreciate it.\n. I've added some notes during breif review. Maybe @jplock will also add something. \n. Ping. Is any additional work needed in this PR?\n. > One small nitpick, 'HelloWorldConfigurationin the example should declare the variables \n\nasPooledDataSourceFactory`.\n\nI don't think it's farsightedly, because in this case we will need to enable polymorphic-configuration for PooledDataSourceFactory. And this looks like overkill, because nobody probably will want to change pool implementations in the configuration.\n. Ok, for some reason the build fails only when I run it as a pull-request to the project and it doesn't when I run it from my fork on Travis.  Will investigate the stack trace...\nUPD. Actually, I was able to reproduce the error in my fork.\n. Figured out changing logging levels needs to be protected, because LoggerContext#loggerContextListenerList is not thread-safe.\n. Yes, thanks. I figured it out also. The branch I mentioned is a bit of outdated, because I didn't push the latest changes, but locally I added tests dependencies on jetty-servlet and jetty-http to use ServletTester and HttpTester.\n. Yes, thanks. I figured it out also. The branch I mentioned is a bit of outdated, because I didn't push the latest changes, but locally I added tests dependencies on jetty-servlet and jetty-http to use ServletTester and HttpTester.\n. Thanks. I've rebased the changes against current master and the branch should be clearly mergeable now.\nI didn't have time to work on this and 9.3.* support is not ready yet. Most of the items in the list are done, except HTTP/2, so probably some applications could be run on Jetty 9.3.* with this branch.\nI plan to make to more rigor testing. If I everything is stable enough, I will send a pull request it to the upstream as soon as we release 0.9. The HTTP/2 support will probably become a separate issue, because of it's complexity.\n. Closed by #1330 \n. I hacked a little on your first version of ConstraintViolationExceptionMapper. Here is my work.\nI think, it's a little more concise and readable. If you like it, you can derive your work from this\nversion. Or just borrow some concepts.\nI didn't touch the tests. Will try to review them in a short time and give some feedback also.\n. Looks good to me! Apart from some remarks for benchmarks and one micro optimization, I think this change can be prepared for merging.\nBy the way, I guess it's the first PR where we try to use dropwizard-benchmarks for improving an implementation :)\n. Thanks! Merged to master.\nUPD. I missed your comment about caching and merged this too early. Fixed up this a little in a21ce52\n. What do you think if we change this test from matching a regular expression to an assertion?\njava\nassertThat(Splitter.on(System.lineSeparator()).split(rc.getEndpointsInfo())).containsExactly(\n\"The following paths were found for the configured resources:\",\n\"\",\n\"    GET     / (io.dropwizard.jersey.dummy.DummyResource)\",\n\"    GET     /another (io.dropwizard.jersey.DropwizardResourceConfigTest.ImplementingResource)\",\n\"    GET     /async (io.dropwizard.jersey.dummy.DummyResource)\",\n\"    DELETE  /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource2)\",\n\"    GET     /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource)\",\n\"    POST    /dummy (io.dropwizard.jersey.DropwizardResourceConfigTest.TestResource2)\",\n\"\");\nI think it's more readable and also correctly works on Windows.\n. That also looks fine for me. Commited in 3ecd0f.\n. Thanks for a sharp look on the docs.\n. I think it's justified. Pushed a fix to master.\n. I tend to agree. Wrong user request is certainly not a debug event.\n. I have to admit that I didn't take into account possibility of DoS.\nAnyway, I think it's important to log client errors as warnings, because it's an early indicator of misbehaving clients. I don't think that's a debug information, because, in my opinion, it's not about investigating programming errors and more about monitoring wrong input data that clients are trying to send to the server.\nI guess that I rushed a little to merge this without discussion. Let's hear what other maintainers and users have to say, and we can revert this if I will be in minority.\n. Well, no feedback during last week. Anyway, I decided to rollback this change because of its controversy. Arguments against it seems convincing for me.\n. I've added a check in DropwizardApacheConnectorTest#tearDown method. \nWe can't create a mock Jersey client, so we check that the client is closed in a real environment.\n. Looks reasonable. Thanks.\n. Thanks for pointing this. Non-strict mode is actually seems like a better choice for an example.\n. Looks good. Thanks for taking your time to write this.\n. Argh, the Liquibase class is actually not thread safe... #1032 doesn't give me a rest. \n. I excluded the tests from running from parallel, so now they run correctly as a parth of the build.\n. Thanks for the review. Please, take a look and let me now if I messed up anything.\n. You are probably right. Thanks for pointing this.\n. Support for several data sources/Hibenate bundles was contributed in #1276.\n. It doesn't seem to work... Will try to investigate.\n[ERROR] Failed to execute goal org.eluder.coveralls:coveralls-maven-plugin:3.0.1:report \n(default-cli) on project dropwizard-parent: I/O operation failed: No source found for io/dropwizard\n/benchmarks/jersey/generated/DropwizardResourceConfigBenchmark_getEndpointsInfo.java -> \n[Help 1]\n. Yay, works!\n. Ok, let's wait for the GA release. I hope @cowtowncoder will ping us, when it happens.\n. Sure. I've updated the release notes.\nAbout the exclusions: I don't think we should keep them, because with 2.6.x we will have a  different dependency graph. It looks better to me to solve version conflicts on demand, rather than pull the history of exclusions, which could be out of date.  In any case, we have Maven Enforcer plugin to see if we messed up.\n. I've had success with this approach:\n``` java\n@Override\npublic void run(AppConfiguration configuration, Environment environment) throws Exception {\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n    context.getBeanFactory().registerSingleton(\"appConfiguration\", configuration);\n    context.register(SpringConfig.class);\n    context.registerShutdownHook();\n    context.refresh();\n// Resources\nfor (Object resource : context.getBeansWithAnnotation(Path.class).values()) {\n    environment.addResource(resource);\n}\n\n// Health checks\nfor (HealthCheck healthCheck : context.getBeansOfType(HealthCheck.class).values()) {\n    environment.addHealthCheck(healthCheck);\n}\n\n// Managed objects\nfor (Managed managed : context.getBeansOfType(Managed.class).values()) {\n    environment.manage(managed);\n}\n\n}\n```\n. Because of its better perfomance in concurrent environments, little size, and more configuration options. \nI would recommend to enable connection validation on borrow and to set an apropriate validation interval.\n. @pparth I guess it's more about correctness than performance. If we know the database can be restarted during the work of the application, we should work in assumption that a connection can be invalid in any time. But we don't want to make validation every time a connection is borrowed, that's why a validation interval is needed.\nBy default Dropwizard configures the pool to make checks only in background, so this\nshould be most performant approach.\nI guess, we can get the old mode by enabling a check on returning a connection to the pool, but I've never used this feature.\n. Sure, I will gladly review it.\n. Seems harmless enough. @joshi, what do you think?\n. Applied to master with tweaks in 2a08d3d\n. We also need add to a reference to the Dropwizard Validation to the main menu in index.rst, so users\ncan easily access it.\n. Thanks for writing this page! I strongly believe that eloquent documentation is one of the biggest strengths of DW.\n. Ok, we are practically done. \nCould you rebase your commit on the current master, taking into account #1108 and #1105? Also I've added a little suggestion about formatting a list of default exception mappers.\n. - Ok, let's hold \"Programming by Contract\" for a while.\n- Looks useful.\n- The testing section looks fine for me. @ipropper, do you have anything to add?\n- For me documentation is rendered nicely, apart from one omission.\n. Should be available at http://dropwizard.github.io/dropwizard/0.9.0-SNAPSHOT/docs/manual/validation.html\n. Sorry for the delay. I will take look at this today.\n. Thanks for taking your time to implement this feature. Some observations, before we can proceed further:\n- Please, follow Dropwizard Contributing Guide in your contribution. \n- Rebase your change against master branch. It's not mergeable now.\n- Don't change spaces to tabs in the whole file. Dealing with different indentations across the project is a nightmare. Make your change focused.\n- Add some tests to verify that your change works and doesn't break anything. As far as I can tell, the proposed implementation is not compatibe with the current logger configuration format:\nlogging:\n  level: INFO\n  loggers:\n    \"com.example.app\": DEBUG\n. @wakandan You probably misunderstood me. Your contribution should be backward compatible.\nPeople who use the current format\nyaml\nlogging:\n  level: INFO\n  loggers:\n    \"com.example.app\": DEBUG\nshould not update their configuration to\nyaml\nlogging:\n  level: INFO\n  loggers:\n    \"com.example.app\": \n        level: DEBUG\nI don't think we could change the format of the field loggers at all, unless we must to. \nI would more think about adding other field like advancedLoggers, that would override loggers, if it's present.\n. Probably is not good enough if we, for example, want to log wego.curiosity to a separate file.\nMoreover, it seems wrong to me that appenders know about loggers. I always thought about them as entities that control where and how to log, but not what to log.\n. I have an idea to make the configuration more dynamic, so we can permit objects with different types for keys. For example:\nyaml\nlevel: INFO\nloggers:\n  \"com.example.app\": DEBUG\n  \"wego.curiosity\":\n      level: DEBUG\n      appenders: \n        - type: console\n          target: stdout\n          logFormat: \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n\"\nTo map this to Java we need to change the type of the loggers field to ImmutableMap<String, JsonNode>. And then make a type check in runtime something like that:\n``` java\nfor (Map.Entry entry : loggers.entrySet()) {\n    final Logger logger = loggerContext.getLogger(entry.getKey());\nfinal JsonNode jsonNode = entry.getValue();\nif (jsonNode.isTextual()) {\n    // Just a level as a string\n    Level level = Level.valueOf(jsonNode.asText());\n    logger.setLevel(level);\n} else if (jsonNode.isObject()) {\n    // Level and appender\n    LoggerConfiguration configuration;\n    try {\n        configuration = Jackson.newObjectMapper().treeToValue(jsonNode, LoggerConfiguration.class);\n    } catch (JsonProcessingException e) {\n        throw new IllegalArgumentException(\"Wrong format of logger '\" + entry.getKey() + \"'\", e);\n    }\n    logger.setLevel(configuration.getLevel());\n    for (AppenderFactory appender : configuration.getAppenders()) {\n        logger.addAppender(appender.build(loggerContext, name, null));\n    }\n} else {\n    throw new IllegalArgumentException(\"Unsupported format of logger '\" + entry.getKey() + \"'\");\n}\n\n}\n```\nThoughts?\n. Sorry, but I have a firm opinion that we should not configure loggers in appenders.\nDespite that it's easy to implement, such configuration is not conventional, and not obvious for users. The polymorphic solution seems to me as the lesser of two evils.\n@dropwizard/committers, what is your opinion on this?\n. @wakandan, sorry for sitting on this so long. \nI think we should proceed with the approach proposed in 115012595. It's less controversial than 114924378 and shouldn't be very hard to implement.\n. Thanks for your work on this, @wakandan!\nApplied the patch to master with some improvements.\n. As far as I know, Jersey's LoggingFilter works regardless of a connector implementation.\nWe even have a test, which checks that LoggingFilter works with our connector.\nCould you provide a snippet that demonstates the issue?\n. You should disable chunked encoding for requests in the Jersey Client to work with MIME Multipart.\njava\nJerseyClientConfiguration configuration = new JerseyClientConfiguration();\nconfiguration.setChunkedEncodingEnabled(false);\nClient client = new JerseyClientBuilder(RULE.getEnvironment())\n           .using(configuration)\n           .build(\"multipart-client\");\nLet me know if it works for you. If not, please provide a test case, so we can reproduce the issue.\n. Thanks for reporting this issue in the Jackson issue tracker. Let's wait what Tatu has to say. Maybe we can piggyback on a fix in jackson-databind.\n. Yes, it should do the trick. Also, if you know a timeout, after which your MySQL backend drops idle connections, you could try to limit the lifetime of a connection by specifying maxConnectionAge.\n. Maybe we could respect READ_ENUMS_USING_TO_STRING feature in PermissiveEnumDeserializers?\nSomething like this should be enough:\njava\nif (config.hasDeserializationFeatures(\n        DeserializationFeature.READ_ENUMS_USING_TO_STRING.getMask())) {\n    return null;\n}\nIf this feature enabled, we fallback to the native Jackson mechanism for deserializing enums.\nWhat do you think?\n. You have my vote .Applied the change to master with small polishing.\nThanks.\n. It should be on src/main/resources/. See for example, how it's implemented for metric reporters.\n. Sorry, I don't follow you. You need this technique, only if you have some polymorphic confguration and you want to choose an implementation in runtime based on your YAML configuration. \nFor example, you can have something like that:\n``` java\npublic interface MessageBroker {\nvoid sendMessage(String message);\n\n}\npublic class ActiveMQMessageBroker implements MessageBroker {\npublic String activeMqHost;\n\n@Override\npublic void sendMessage(String message) {\n    // Send a message to ActiveMQ\n}\n\n}\npublic class RabbitMQMessageBroker implements MessageBroker {\npublic String rabbitMqHost;\n\n@Override\npublic void sendMessage(String message) {\n    // Send a message to RabbitMQ\n}\n\n}\n```\nYour code works with the MessageBroker interface without knowing about an implementation,\nwhich can be changed in the configuration.\nIf you don't have such requriements, you can just use a plain object and Jackson will deserialize it\nout of box. \n. Thanks for this awesome PR! Mostly it looks good to me, but I have 2 proposions/quesions:\n- Maybe we could we rename the class Hibernate to a more specific name to reduce confusion with the ORM? DropwizardValidator or Validators sounds good to me. \n- Is there any way to move this class to the module dropwizard-validation without adding circular\n  dependencies? It would be great if we could use it across the project instead of Validation.buildDefaultValidatorFactory().getValidator(). Maybe we could load Jersey unwrappers undirectly(reflection?) or use separate configurations... I don't have a good solution in mind yet.\n. Ok, that's good enough for me. Thanks, @nickbabcock, for your gigantic efforts on this feature!\n. I think we probably don't want to enable terminal width detection in tests at all.\nSo it makes sense to move disabling it to a static block in AbstractMigrationTest or into a @BeforeClass method. It should make tests on command help pages more focused.\n. Thanks, looks good.\n. Looks like it's worth to add. Thanks.\n. Everything looks in place. Thanks.\n. @Toilal, I'm glad that your issue is resolved. \nAbout the default timeout: 500 ms seems like a reasonable default for a typical web request. Personally, I think that applications should rely to retrying logic, rather then to constant timeout values. It provides more fine-grained recovery in cases of network failures, GC spikes or temporary remote server availability(especially if it's a cluster). \nAnyway, users have a broad control on this and I think that the current timeout is fine.\n. Yes, it's a limitation of  JodaModule. See this issue. \nYou need to plugin-in a custom serializer to make it works:\njava\nModule module = new JodaModule().addSerializer(DateTime.class, \n    new JsonSerializer<DateTime>() {\n    @Override\n    public void serialize(DateTime value, JsonGenerator gen, \n                                   SerializerProvider serializers) throws IOException {\n        gen.writeString(value.toString(DateTimeFormat.forPattern(\"YYYY-MM-dd\")));\n    }\n});\nObjectMapper mapper = new ObjectMapper().registerModule(module);\nSystem.out.println(mapper.writeValueAsString(new DateTime()));\nIt should possible to retrofit a mapper in such way in Dropwizard after #1112.\n. Could you try against Dropwizard 0.8.5? Dropwizard 0.9.1 drastically changed auth staff, so this issue\nis probably not relevant.\n. We use our own Jersey Connector implementation, that's backed by the Apache HTTP Client. The timeout is actually is applied to it. See there. \nAlso our connectors ignores Jersey properties, so the call jerseyClient.getConfiguration().getProperty(ClientProperties.READ_TIMEOUT) will always return null.\n. That's certainly strange. It would be great, if you could isolate your problem and provide a test case that reproduce it. AFAIK, we have a test for this case and it works as expected. \nIf you find a flaw in the code or in the test, please report.\n. I am closing this issue. Without a test case, we can't do much. \nFeel free to open a new issue against Dropwizard 0.8.5/0.9.1, if the problem still exists\n. I personally more lean to 422. Despite that it's not defined in RFC 7231, it's widely used and adopted by many clients and intermediaries. Also it's more specific then a fairly general 400 error. If I get 422 error, I know that the server comprehended my request, but rejected it. It gives me knowledge, that I didn't make a stupid error like sending invalid JSON.\n. Looks good for me. Many software vendors do it so (Spring, PostgreSQL, InfluxDB, etc...)\n. Thanks for your work on this.\n. For some reason the test is flaky on my development box. It works steadily only if I explicitly set @Priority(0) on CustomMapper, so it's processed before ConstraintViolationExceptionMapper. \nIs it desired behaviour for users?\n. Sounds like a plan.\n. Thanks. Squashed and applied the patch to master.\n. Thanks, Tatu. Apart from some nitpicks, the patch looks good to me.\n. The patch has already been applied to master in 15e561d.\nFor some reason the pull request remained opened. I close it manually.\nThanks again to @cowtowncoder for work on this.\n. The patch has already been applied to master in 15e561d.\nFor some reason the pull request remained opened. I close it manually.\nThanks again to @cowtowncoder for work on this.\n. This also looks good to me. I've applied the patch to master with some commit message polishing.\n. Current master is already updated to 2.18. See #1109. \nWe plan to release 0.9.0 in first weeks of July.\n. @pparth, you have a point. But it's worth to mention that if some issues are critical for your organization, you can always make a fork, apply needed changes by hand, and maintain the fork independently from the main repository. Our primary goal is development of the latest version and we don't really have a plan for porting updates for older versions. However, we are happy to make maintenance releases for critical bugs or security updates, if it's needed. The best option to let it happen is to drop a message to the dropwizard-dev mailing list with a proposal of the changes you want to see backported.\n. @dropwizard/committers What do you think about making 0.8.2 release with backported #1109 and #1137?\n. Thanks for a sharp look at the release notes.\n. I also thought about that and it looks reasonable. I will work on that.\n. In the upcoming 0.9.0 there will be support for setting a custom ObjectMapper without the Afterburner module during the bootstrap phase of an application. See #1112.\n. Yes. #1330 migrated BiDiGzipFilter to BiDiGzipHandler.\n. You are right. It's probably just an omission.\n. I don't think that's relevant.\nThe problem described in the Jersey issue is applied only for cases, when user provides own connection manager that's shared between clients. We don't provide such ability, because we create a new connection manager every time user creates a new instance through JerseyClientBuilder. Moreover, the current fix leaks InstrumentedHttpClientConnectionManager, which will be closed only during a major GC - a highly unpredictable event. It's really easy to end up with a couple of hundred open TCP connections to a remote server.\nI think, we should revert connection manager sharing or at least disable it by default.\n. I would go with reviewing the changes in Jersey between 2.17 and 2.19, if the issue is reproduced only in 0.8.2. But I have a gut feeling that the issue is connected to the finalizer in some way.\n. No, the authorizer and the authenticator must be provided during building.\n. I thought about that. For this case, we would need then to allow users to use the @PermitAll annotation on resource methods. It would simplify things for users, who don't core about roles.\nI can prepare another PR with optional authorizer, if this change is merged.\n. Moreover, I think we handle @PermitAll wrong now. It means \"no authorization\", but we treat it like \"no authentification\". \n. Ok, I  submitted #1162 \n. There is a lot of duplication in the authentication provider tests. I wish we could generalize them and not copy-past tests between the different providers...\n. > Maybe a better question is, if you don't register an authorizer, is there anyway we can assume that all of the resource methods have @PermitAll? That would provide a clear upgrade path for anyone pre-0.9 who is just using an authenticator.\nNo, we can't. To register the filter one need to annotate the method with the @PermitAll annotatiion. In this case we will register the auth filter and the autentiication process will start.\nTo help migration from 0.8.x we could register the filter if the @Auth annotation is present on resources method parameters. But I'm not completely sure that's a good idea. From one point it makes things simpler if authorization is not a concern, from the other point it will increase confusion in the process of protecting resources. \nCurrently we clearly point in the documentation that to protect a method one should annotate it with the javax.security.* annotations. And that @Auth is used only for injecting the principal to method parameters. If we add additional logic to @Auth, there could be a question, why don't register the filter if the @Context annotation is present on a method? So far, I'm against it.\n. Weighing the fact that we have many users who use just @Auth and they expect smooth transition to 0.9.0, we could take the step. If we document the reasons why we do that, the process of protecting resources will look transparent enough.\n. These are cosmetic changes, but I hope they are useful and make the codebase cleaner.\n. Ok, thanks for feedback. Pushed a new version, let me know if it's good enough.\n. The issue is probably caused by a changed configuration format between 0.6/0.7 or some Jackson bug. Anyway, 0.7.* branch is not supported anymore. If the issue stiill exists in 0.8/0.9, feel free to open a new issue.\n. Take a look at #1112. Would it cover your use case? It's available only in unreleased 0.9.0, though.\n. Oh, I now see the issue. \nI think that changing Application it not a very good option, because then we will have two places where we can set a custom ObjectMapper, which is confusing. \nI'm more inclined to the idea of lazy loading of the mapper. We could mark the objectMapper field in Bootstrap as volatile and  load it on demand in the getter. In this case we will avoid NoClassDefFoundError if Joda-Time is not present in the classpath and will have one place, where users can provide a custom mapper. What do you think about this approach?\n. I would concur, but actually we don't have a compile-time dependency on Joda-Time. We just import it for users' convenience and automatically configure JSON serialization/deserialization. Bearing in mind the fact that there is a viable alternative shipped with JDK 8, I think we should allow users not to import Joda-Time, if they don't want to.\n. That's actually is not a bad idea for 1.0 version, which will target Java 8.\n. True, but we still import Joda-Time and register its support as a Jackson module. In the end, we took a pragmatic approach and will support Joda-Time and JSR-310 simultaneously in 1.0.0. See #1365.\n. Thanks. Applied to master in a minimal form.\n. See #1218. You would need to remove information about a log date from its archived name. For example, from /var/log/app-%d{yyyy-MM-dd}-%i.log.gz to /var/log/app-%i.log.gz.\nI beleive, Logback's size and time based archiving supports only time-based rollover.\n. I beleive this should be fixed in Logback. Currently it doesn't support a rollover by the amount of log files (FixedWindowRollingPolicy), when a timestamp is present in log names (TimeBasedFileNamingAndTriggeringPolicy). For example, we can't keep 7 days of logs, but maximum 10 files. \nIf anyone can provide an ArchiveRemover implemenation that supports such scenario, I will gladly review it. But I would encourage affected users to submit an issue or a pull request to Logback.\n. The \"Getting Started\" guide presumes that the default server factory is used in configuration.\nFor it API endpoints are served for the root. For simple server factory it's different (from /application). Now we log the application/admin path during the application startup, which should reduce confusion.\n. #1036 is now resolved and Dropwizard HEAD supports Jetty 9.3.*\n. LGTM!\n. Thanks for the contribution, for some reason we missed that option. Probably because the client wasn't originally designed to be long-lived.\nThis looks good to me.\n. Thanks for you thorough report. I think we have two issues here:\n- The first is that users can't override the ConfiguredCloseableHttpClient createClient method. \n  Actually, I think it's a quite useful thing for production use, but not only for testing. We don't provide all possible options in the YML configuration, so users should have the ability to set them manually. We will expose some internal information in RequestConfig, but I don't see to much harm in doing so. Removing the @VisibleForTesting annotation from the method and making the ConfiguredCloseableHttpClient class public would be enough, I think.\n  Would you like to start a discussion or to submit a PR on this?\n- The second is lack of the ability to set a custom redirect strategy. It seems to me as a useful option. I will gladly review a PR, if you submit it.\n. Oh, I didn't notice that you reported this issue in July. @jlordiales, sorry for a late reply. \nAnyway, my comments are still relevant.\n. Both are merged. Thanks for taking your time to tackle these issues.\n. Should we place @UnwrapValidatedValue(false) in ValidatingResource?\njava\n@GET\n@Path(\"headCopy\")\npublic String heads(@QueryParam(\"cheese\") @NotNull @UnwrapValidatedValue(false) IntParam secretSauce) {\n    return secretSauce.get().toString();\n}\n. I don't see reasons, why we should not make it.\n. I am closing the issue, because of absence of additional information to reproduce it.\n. We probably should upgrade to JDBI 2.63.1 because 2.63 is not backward-compatible. See this PR.\n. Closed by #1193\n. I'm in a boat with @jplock and @nickbabcock. This patch looks fine to me and I don't think we break anything with it. \nWe can add additional tests in future. As I see it, the problem lies is Jersey test containers, which not always behave as the real container. \n. Thanks, @vzx!\n. Yikes. Thanks, @kilemensi, for testing release candidates and reporting this.\n@cowtowncoder, do you plan to release jackson-datatype-joda 2.6.1 soon? If not, we will probably rollback to 2.5.* stream and move 2.6.* update to Dropwizard 1.0.\n. Okay, thanks. I've updated jackson-datatype-joda to 2.6.0-1 in master.\n@kilemensi, could you test the latest RC4 snapshot?\n. It's a bummer that we can't run the build on Windows in Travis CI. The amount of Windows test fixes is a clear sign, that there are plenty of developers on this OS, who hack on Dropwizard.\n. I don't like the proposed solution, because it writes log files to the current directory with source code.\nIt would be better if we created a temporary file by File.createTempFile and passed its path to the configuration factory by a system property. The problem is that dw.loggers.com.example.newApp.appenders[0].currentLogFilename will not work, because the parser\nwill treat com, example, and newApp as keys, but not as a whole property. And I don't know how to escape dots. \n. As a sidenote, in future we should probably retrofit the parser to support escaping with something like this: dw.loggers.com{dot}example{dot}newApp.appenders[0].currentLogFilename\n. What do you think about using StrSubstitutor?\nWe could replace actual locations in the yml file by variables and then initialize them in runtime.\nSomething like this:\nyml\nlevel: INFO\nloggers:\n  \"com.example.app\": INFO\n  \"com.example.newApp\":\n    level: DEBUG\n    appenders:\n      - type: file\n        currentLogFilename: ${new_app_log}\n        archivedLogFilenamePattern: ${new_app_archive_log}\n        logFormat: \"%-5level %logger: %msg%n\"\n        archivedFileCount: 5\n  \"com.example.legacyApp\":\n    level: DEBUG\nappenders:\n  - type: console\n  - type: file\n    currentLogFilename: ${default_log}\n    archivedLogFilenamePattern: ${default_archive_log}\n    logFormat: \"%-5level %logger: %msg%n\"\n    archivedFileCount: 5\n``` java\nfinal File newAppLog = folder.newFile(\"example-new-app.log\");\nfinal File defaultLog = folder.newFile(\"example.log\");\nfinal StrSubstitutor substitutor = new StrSubstitutor(ImmutableMap.of(\n        \"new_app_log\", newAppLog.getAbsolutePath(),\n        \"new_app_archive_log\", \"/tmp/example-new-app-%d.log.gz\",\n        \"default_log\", defaultLog.getAbsolutePath(),\n        \"default_archive_log\", \"/tmp/example-%d.log.gz\"\n));\nfinal String filePath = new File(Resources.getResource(\"yaml/logging_advanced.yml\")\n.toURI()).getAbsolutePath();\nconfig = factory.build(new SubstitutingSourceProvider(\nnew FileConfigurationSourceProvider(), substitutor), filePath);\n```\n. Great. This looks a lot better now.\n. I would prefer to keep logging Jersey resources simple. There are solution for REST API documentation like Swagger or RAML.\nIf anyone has another opinion, feel free to start a discussion. For the time being, I am not accepting this PR. \n. This actually was fixed in 14bbdad in the efforts to run the Dropwizard tests in parallel. It took some time to get everything correctly, but now the build looks stable enough.\n. This should be fixed in Dropwizard 1.0 by #1036\n. Fixed by #1330 \n. The actual problem is that Jersey expects that we create a new instance of the Apache client in \nConnectorProvider, but in the fact we reuse the same one. See this. \nWe can't create a new instance every time, because we can't create several instances of InstrumentedHttpClientConnectionManager with the same MetricRegistry. \nInstead of enabling sharing of the connection manager, I propose not closing the client in DropwizardApacheConnector and managing it through Dropwizard lifecycle as was done in e4256d1.\nDoing so, we don't leak the connection manager. And in the same time users can close an instance of the client/connection manager manually, if they want to.\n. I've created #1232 with this approach. If it's merged, I will backport it to 0.8.3\n. > The test case you wrote, did that actually fail without nuking the close() call?\nYes, it did, right after second System.gc call. Unfortunately, I can't write a test case that reproduces it.\n\nHere https://github.com/dropwizard/dropwizard/issues/1160 you talked about leaking the connection manager, and that connections would only be closed during major GCs. How exactly does that happen? I ask, because I was thinking if there is a reference that is leaked then it won't get GCed until the reference is gone, unless it's a weak reference.\n\nWhen we set a new property to JerseyWebTarget, Jersey creates a new ClientConfig with a copy of ClientConfig.State instance with new parameters. The old instance becomes unreachable as well as its ClientRuntime field, which then triggers closing the Connector instance.\nSee this, this, this, and this.\nSo, as a consequence, if we remove  \njava\n.property(ClientProperties.READ_TIMEOUT, SLEEP_TIME_IN_MILLIS * 2)\ncall in the test, everything will be alright, because the state doesn't change. \n. Backported to 0.8.3 in faf1f94\n. Thanks for the pull request, but I have a couple of questions:\n- I think we already handle the @JsonCreator annotation on factory method in enums. If the annotation is present, we use the specific deserializer based on this method. Could you provide a test case, where it doesn't work as expected?\n- I don't think we should try to  deserialize an enum based on the toString method, unless the user didn't explicitly configured the mapper to do so. It's not obvious and could break backward compatibility for users, who use toString just for logging purposes. If enabling this feature in the mapper is not an option, the user can create a factory method with @JsonCreator or register a custom deserializer.\n. Okay, I am convinced now that the problem is worth to fix and the patch would not break anything. I only have a one question, please see an inline comment.\nAlso, it would be great if you squashed your commits into a single change.\n. Probably not. I think we should add only bugfixes for 0.9. Will happily merge the PR to 1.0, though.\n. #1251 is merged and we can proceed here further.\n. Great contribution, indeed. I'm looking forward to see it in 0.9.0.\nShould we update the release notes?\n. Yes, thanks for catching this. For some reason I missed that during merging #1153.\n. I like the plan. \n\nHow can someone extend validation?\n\nCould users write own HibernateValidationFeature and register it through JerseyEnvironment?\nWill it replace already registered feature? I am not familiar enough with the JAX-RS spec on this.\nIf not, maybe we could to parametrize DropwizardResourceConfig with a feature class.    \n\nHow badly is this going to break for people who extended the jackson mapper?\n\nI don't think it's a very big concern. I beleiv, a little percent of users extends the mapper. 1.0 will be a big release anyway, so we are justified to break some stuff to bring advanced features.   \n\nI introduced a new exception JerseyViolationException and exception mapper  JerseyViolationExceptionMapper to achieve some of the functionality. Ideally, I could have rolled the functionality into ConstraintViolationExceptionMapper, but I was at a loss as how to do so.  Consequently, ConstraintViolationException is never instantiated and thrown, which leaves the usefulness of ConstraintViolationExceptionMapper in question (should it be deleted?, I'm not sure)\n\nI think we should delete it. If we leave the class, we will only increase confusion. Again, it's a quesion\nof compatability: we probably will break it anyway, so is not worth to preserve this exception.\n. I think that it's a too big change for 0.9. People extensively tested release candidates and it would be a big disappointment for them, if we release something not compatible.\n. I took another look and this looks good to me. Merged to master.\nThanks to @nickbabcock for all the hardwork on validation.\n. I am closing issue, because we can't reproduce it. Feel free to open a new issue, if the current one\nexists in Dropwizard 0.8.5/0.9.1.\n. This is probably fixed by #1232. Please, check if the issue exists in Dropwizard 0.8.5 or 0.9.1, \n. That's a reasonable feature request. #1260 should provide the ability to use inlined credentials.\n. Conceptually this looks good to me. \nI have one only proposal: what do you think about using java-classmate for type resolving? It provides a nice API for working with java.lang.reflect.Type stuff, which is more readable than pure reflection. I think, we could strip the fix down to something like that:\njava\nfinal ResolvedType responseType = TYPE_RESOLVER\n                                 .resolve(method.getInvocable().getResponseType());\nfinal Class<?> erasedType = !responseType.getTypeBindings().isEmpty() ?\n        responseType.getTypeBindings().getBoundType(0).getErasedType() :\n        responseType.getErasedType();\npopulate(path, erasedType, true, endpointLogLines);\n. Thanks!\n. Web sockets wiil not be supported in the Dropwizard core. Check out https://github.com/LivePersonInc/dropwizard-websockets and https://github.com/TomCools/dropwizard-websocket-jee7-bundle\n. Could you update DataSourceConfigurationTest, so we can verify that deserialization works correctly and the default values are applied? Apart from that, the PR looks good to me.\n. Thanks!\n. Closed via #1266 \n. Looks like the build failed for some bizarre reason on SSL certificate tests. We are still fighting with Travis CI to make the build stable, because it periodically fails on Java 8 without reasons. I've restarted the build and it has completed successfully.\nThe change looks good to me. Thanks!\n. That makes sense to me. \nI don't think we will break anything, because compression is enabled by default. We probably broke this feature, when we moved to org.apache.http.impl.client.HttpClientBuilder approach for constructing the client. It  (de)compresses by default, but DefaultHttpClient doesn't.\n. Why do you expect Accept-Encoding: gzip if we don't want to get compressd responses? Isn't the whole idea to omit this header?\n. Please see #1270. Does it work as you expect?\n. That's great! \nI am waiting for someone from the core team to review the pull request and then it can be merged.\n. Closed via #1270 \n. Closed via #1270 \n. This also looks reasonable. Thanks.\n. I think you need to set the name of the slave database in the @UnitOfWork annotation on your resource.. Looks good to me! Thanks for your contribution.\n. This looks great. Definetely should help for users who use many Dropwizard modules.\n. Hi @lefloh,\nSorry it took so long to get back to you. Usually we try to keep turnaround time for new issues/proposals low while the reporter is still interested to contribute. I reviewed your code and it looks good to me. Could you submit a pull request, so we can polish the code, get feedback from @acwwat, and merge it to upstream. Thanks. \n. Closed via #1814\n. Thanks! Applied to master in 05d3fcd with some enhancements.\n. Thanks for reporting this issue. \nYou would need to register own argument factory to combine optional and JodaTime's DateTime arguments. Something similar to this:\n``` java\nimport com.google.common.base.Optional;\nimport org.joda.time.DateTime;\nimport org.skife.jdbi.v2.StatementContext;\nimport org.skife.jdbi.v2.tweak.Argument;\nimport org.skife.jdbi.v2.tweak.ArgumentFactory;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.sql.Types;\npublic class OptionalJodaTimeArgumentFactory implements\n             ArgumentFactory> {\n@Override\npublic boolean accepts(final Class<?> expectedType,\n                       final Object value,\n                       final StatementContext ctx) {\n    if (value instanceof Optional) {\n        Optional optional = (Optional) value;\n        if (optional.isPresent()) {\n            return optional.get().getClass().equals(DateTime.class);\n        }\n    }\n    return false;\n}\n\n@Override\npublic Argument build(final Class<?> expectedType,\n                      final Optional<DateTime> value,\n                      final StatementContext ctx) {\n    return new Argument() {\n        @Override\n        public void apply(int position, PreparedStatement statement,\n                                  StatementContext ctx) throws SQLException {\n            if (value.isPresent()) {\n                statement.setTimestamp(position, new Timestamp(value.get().getMillis()));\n            } else {\n                statement.setNull(position, Types.TIMESTAMP);\n            }\n        }\n    };\n}\n\n}\n```\njava\ndbi = new DBIFactory().build(env, getDataSourceFactory(), \"test\");\ndbi.registerArgumentFactory(new OptionalJodaTimeArgumentFactory());\nIt would probably work for this specific case, but I am not sure for the general. Will need some digging and testing.\n. Do we really need DelegatingArgumentFactory? I think, we could write OptionalJodaTimeArgumentFactory, register it last, and use the fact that JDBI processes argument factories in the reverse order.\nPersonally, I don't think that this problem is worth to solve, if there is no simple solution.\nUsers can easily work around it.\n. As I said, I don't like relative complexity of the fix and that we could break something in the final release, because nobody tested its effects on real applications.\nI will send a PR with an alternative implementation, but would contest that this issue should be addressed in 0.9.0. \n@dropwizard/committers, what is your opinion on this? \n. It's an alternative implementation of #1301\n. Correct. I don't think that's a big concern: optional arguments are not so useful as optional return values. Users, who would want to use optional arguments with own custom types, will have to write a specific factory.\n. Looks like this is a similar issue to #1292. Hibernate Validator 5.2 now requries UnwrapValidatedValue on containers. For some reason, we missed that during release candidates...\n. Could we add a factory method to BaseValidator? Something like this:\njava\npublic static Validator getValidator() {\n    return newConfiguration().buildValidatorFactory().getValidator();\n}\nSo we can use just BaseValidator.getValidator() instead of BaseValidator.newConfiguration().buildValidatorFactory().getValidator(), which breaks the Law of Demeter.\n. LGTM!\n. Cherry-picked to 0.9.x branch - 08d8863\n. Please, open a new issue with a test case showing an unexpected behaviour. I can't reproduce the issue in 0.8.5/0.9.1. \n. Could to register the specific binder in your application and try again?\njava\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n. I checked Jetty's SslContextFactory one more time. It looks like that by default\nJetty loads a truststore as same as a keystore. But if we start an application, it fails with \njava.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty.\nIt looks like that JRE doesn't want to trust the specified in the keystore certificate. If we enable \nyaml\nvalidatePeers: false\nin the configuration, then the application starts up without errors. I don't know, why this worked\npreviously. Anyway, looks like that enabling this option fixes the problem. \n. As a side-note: users of PKCS12 certificates would need to specify trustStoreType.\n. > Ok interesting, I'm not sure why it worked previously either. I wanted to play around with your \n\nbranch |but I'm unable to in Intellij, as various compilation errors crop up even after a fresh clone \n(it |keeps |wanting to use jetty 9.2.13). mvn package works fine though, so I'm unsure what the \nissue |could be.\n\nI believe, one need to perform mvn clean install on dropwizard-bom beforehand. Otherwise Maven will pull old dropwizard-bom snapshot from the repository.\n\nAlso any reason not to use 9.3.6.v20151106?\n\nNo reason. I just started working on this update before than 9.3.6 came up.\n. This is related to #1240. Currently @UnitOfWork works only for Jersey resources.\nWe will try to figure out something how to make it work transparently. Currently the only workaround\nis manual transaction handling with SessionFactory.\n. Yes, @yumingcao-okta is right. Your authenticator should be created as\njava\nGrowwAuthenticator authenticator = new UnitOfWorkAwareProxyFactory(hibernateBundle)\n         .create(GrowwAuthenticator.class,  SessionFactory.class, \n                    hibernateBundle.getSessionFactory());\nAlso, you should not forget to annotate the method  authenticate with the @UnitOfWork annotation.\nProbably we should make it more clear in the documentation.\n. Thanks for pointing this out. Currently it's referenced only at the Dropwizard Hibernate module page.\nAs the UnitOfWorkAwareProxyFactory class created to provide a glue between authorization and declarative transactions, we should add some hint to it in the auth page as well. Good point about the migrations docs too.\nPersonally I view this class more like a kludge, because its purpose is not obvious for the Dropwizard users and we probably should have a more simple solution for declarative transactions outside the Jersey lifecycle, but currently I don't see any other alternative. Pull requests are welcome!\n. I don't think so. Dropwizard still relies on the UnitOfWorkAwareProxyFactory workaround.. Fur futher information, motivation on this change is dicussed in #1220.\nThanks for your contribution, @brentryan! \n. It's actualy registered. See here.\nCould you provide a test case, when handling Java8 Optional values doesn't work?\n. Resubmitted as #1349\n. Yes, JerseyClient and Apache HttpClient don't support HTTP/2 currently.\nI know 3 Java client HTTP/2 libraries:\n- Jetty Http2Client\n- OkHttp\n- Netty Client \nI like the first one from Jetty, because:\n- It provides an asynchronous API; \n- h2 and h2c support; \n- Has the same core as jetty-http2-server. It provides a good interopability with the server implementation. Despite that HTTP/2 is a standart, there could be some idiosyncrasy .\n. > Have you guys looked into switching to retrofit for clients instead? It uses OkHttp under the hood and has nice async features.\nPersonally, I don't like OkHttp and Retrofit much, because they are developed for Android in the first place. Currently they run on OpenJDK/HotSpot, but maintainers could drop its support in any time.\nYes, the library has a fluent API and code quality is really good. Nevertheless, I wouldn't pull it into the Dropwizard core. But we open to add any integration to the list of 3rd party modules, if anyone develop it.\n. I'm think that the PR is ready to merge. But I would wait for another feedback from @dropwizard/committers, because it's a quite a big change and I could miss something.\nAlso it would be great, if someone tested the HTTP/2 integration with a SSL cerftificate issued by CA. I tested it only on self-signed ceritificates.\n. BTW, a very interesting talk about HTTP/2 and Java clients/servers by Fabian St\u00e4ber.\n. Looks like I mixed up this PR with another (#1361) in some time. Now the build should pass tests. \n. Yes, I wanted to look at this closely, but hadn't a chance. Was busy with work and  holiday stuff. I am going to give my feedback today or tomorrow.\n. Looks like that HTTP/2 spec requires the support of TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 cipher on the server side. I believe, this is the default cipher for modern browsers.\nTherefore, I would argue that we should force it by default in the connector. Users, who want to allow other cipher suites, have the ability to set explicitly them in the configuration.\n. @nickbabcock, could you try the new version? HTTP/2 support works for me with Firefox 43 on Linux, but I would glad to see how it's going for users in other operation systems.\n. > Any reason why not?\nSorry, I misinterpeted your comment. I thought about it in the context: a HTTP/2 test requires providing a trust store (which had been already done), not in the context: the current HTTP/2 test provides an invalid truststore. You are absolutely right, /etc/ssl/certs/java/cacerts truststore exists only on Unix systems. I've applied your changes.\n. Great! Thanks for rigorous review and testing. Windows users will certainly appreciate it.\n. Makes sense to provide such configuration out-of-box. \nBy the way, your solution with overriding createClient is the standard way to customize building of Apache HTTP Client in Dropwizard.\n. > Do you want to update the release notes as well?\nDone\n. A simple way to test this is to try to use @UnitOfWork with Hibernate sessions in authenticators. Authentification is now performed outside of Jersey lifecycle for security reasons, so the process should fail without a proxy.\n. This PR is against the 0.9 branch, which still uses Java 7. Something like this should work, though.\nbash\ngit checkout -b arteam-generalize_unit_of_work release/0.9.x\ngit pull https://github.com/arteam/dropwizard.git generalize_unit_of_work\ncd ./dropwizard-bom\nmvn install\ncd ../\nmvn install -DskipTests=true -P dev\n. Yes, will do.\n. Commits 39a857d and 0a5534e are cherry-picked to the master branch.\n. @dropwizard/committers, what do you think about releasing 0.9.2 with this workaround?\n. > Shouldn't this PR be based on master instead of release/0.9.x?\nI think we should fix this for 0.9.x too. After that we can apply this change on master.\n. @joschi, what do you think about creating dropwziard-jdbi-guava-optional module  with Guava's \nOptional support instead of mixing it with Java8's Optional? These classes basically duplicate each other, and I don't think many folks use them together in the same codebase. It would be great to let users choose what Optional support to use. I think we should encourage users to switch to Java8's Optional, because it is shipped with JRE, is a more flexible type and will probably supress Guava's Optional in future. Folks, who for some reasons don't want to switch, will have to enable an additional module and use a custom DBIFactory. It could be implemented somehting like that:\n``` java\npublic class GuavaOptionalDBIFactory extends DBIFactory {\n@Override\npublic DBI build(Environment environment, PooledDataSourceFactory configuration,\n                 ManagedDataSource dataSource, String name) {\n    final DBI dbi = super.build(environment, configuration, dataSource, name);\n    dbi.registerArgumentFactory(new GuavaOptionalArgumentFactory(\n                                configuration.getDriverClass()));\n    dbi.registerContainerFactory(new GuavaOptionalContainerFactory());\n\n    final Optional<TimeZone> timeZone = databaseTimeZone();\n    dbi.registerArgumentFactory(new GuavaOptionalJodaTimeArgumentFactory(timeZone));\n    dbi.registerArgumentFactory(new GuavaOptionalLocalDateArgumentFactory());\n    dbi.registerArgumentFactory(new GuavaOptionalLocalDateTimeArgumentFactory());\n    dbi.registerArgumentFactory(new GuavaOptionalInstantArgumentFactory(timeZone));\n    dbi.registerArgumentFactory(new GuavaOptionalOffsetTimeArgumentFactory(timeZone));\n    dbi.registerArgumentFactory(new GuavaOptionalZonedTimeArgumentFactory(timeZone));\n\n    return dbi;\n}\n\n}\n```\nWhat do you think? If such modularity is too controversial, I think we could at least move Guava's Optional into a separate package in dropwizard-jdbi.\n. I am also a bit of worried about mixing Joda-Time and JSR 310 support. Unfortunately, I don't see a way how could we modularize the support of these libraries. Removing Joda-Time support in favour of JSR 310 is also not an option. I believe, for the time being, we have to force users to import Joda-Time, even if they don't use it.\n. Ok, fair enough. The rest changes look good to me. Thanks for your hard work!\n. I think it's doable to achieve this goal, but it's rather hard from the technical point view. Would be great to see an initial prototype of splitting Dropwizard and Logback to see a scale of this change. Anyone who has bandwidth to work on this issue is very welcomed.\n. Since Dropwizard 1.2.0 it's now possible run an app without Logback (#1900 and #2112). The build on Travis is really flaky, but it completes successfully on my machine. Let see how it will going.\n. You would need to shade your dependencies into one jar. See the Building Fat JARs section in the manual.\n. Looks good! :+1:\nI've added a couple nitpicks, but overall this is ready to merge.\n. Thanks for your contribution!\n. Static resources should be reloaded without additional work. For Java code, you need a special JVM which allows redefine classes in runtime. For example, DCEVM.\n. We discussed this in #1365 and came to the conclusion that we should not remove Guava Optional and Joda-Time support, because it might be a blocker issue for migrating existing applications to the 1.0.0 version. Unfortunately, we don't have a simple way to modularize support of these libraries, so supporting both in the core looks like a pragmatic approach.\n. LGTM. I think this is a step in the right direction, because testing environment should closely resemble production.\n. @evnm, thanks for your contribution! I reviewed it and this looks good in general. I've added some comments to the patch, see them inline.\n. Thanks, Evan. Your reasons about collapsing AuthBaseResourceConfig and introdcing PrincipalContainerRequestValueFactory seem sensible for me. I've added comments about minor details of the implementation, but overall this is ready to merge.\nAlso, could you be so kind to update the release notes for 1.0 version? This would make easier for users\nto track this improvement.\n. Thanks for contributing to Dropwizard!\n\nI took the liberty of adding myself to the contributors page, too. Hopefully not too gauche. Hopefully not too gauche.\n\nNot at all. But we usually do this automatically with a Ruby script. We run it time to time to actualize the list.\n. LGTM. Small contributions are important, too.\n. Looks good to me! Thanks for your contribution.\n. This also looks good. Thanks again!\n. LGTM\n. I believe having a good VCS which allows versatile branching strategies, like git, is the reason not to fear such changes.\n. Closed via #410\n. Thanks for contributing! I've added some comments about documentation, but in general the patch looks good. Could you update the release notes? This would make easier for users to track this change. Please, also squash your commits into a single commit.\n. Thanks, @matsumana, for patience and thorough contribution!\n. I can't give you a strict ETA, because 1.0.0 is still being actively developed. But major features have already been contributed, so, I think, we could make a release candidate in the end of January. I will discuss this with the rest of the core team.\nFor the time being, you can use Dropwizard snapshots from the Sonatype's OSS repository. We publish them automatically after every succesfull build in the master branch. \nThank you for using Dropwizard.\n. Thanks for contributing to Dropwizard!\n. Thanks! It slipped from #1290.\n. Thanks for your contribution to Dropwizard!\n. @ghenkes, thanks for this terrific pull request! I'm interested in a logback-access integration, but I would prefer to see it as an external module, if it's possible. I'm not a fan of the idea of providing several ways to configure access logging in the core - for me it's very confusing. Speaking of the implementation, I would prefer to see it more focused without changing other Dropwizard logging classes. I don't know if it's possible, because I don't have much experience with logback-access, but I expected its integration to be more simple. \nI am going to experiment with this PR and also take a look at @mwhipple's work, and will get back to you, when I have more information about the matter.\n. > As long as the new logback access implementation defaults to the same format pattern as the current implementation it would be a passive change and allow dropwizard request logging to be configured without the use of external bundles.\nAgree. That would be the best option, if we could make the switch transparent.\n. > The dropwizard user specifically chose not to use forwarded headers, yet they are still being applied to the access logs\nAgree, that looks like a bug. Users should have the option to disable handling X-Forwarded-* headers. Currently Slf4jRequestLogFactory forces it by setting Slf4jRequestLog#preferProxiedForAddress to true.\n. As I can undersdant this PR, the idea is to extend the current model of appenders from ILoggingEvent events from logback-classic to IAccessEvent from logback-access.\nThis is accomplished by introducing 3 interfaces:\n- LayoutFactory. It's implemented by DropwizardLayoutFactory (for standard log messages) and \n  LogbackAccessRequestLayoutFactory (for access logs)\n- FilterFactory. It's implemented by ThresholdFilterFactory, that allows to configure logging threshold (for standard log messages) and NullFilterFactory (for access logs)\n- AsyncAppenderFactory. It's implemented by AsyncLoggingEventAppenderFactory for standard log messages and by AsyncAccessEventAppenderFactory for access logs.\nFor me this looks good on the whole, but I have a couple of proposals:\n- I would move all classes related to logback-access to a separate module from dropwizard-jetty.\n  These classes more relate to logback-access rather to Jetty. I beleive, this will provide better \n  encapsulation of dependencies and a more focused package layout\n- I would move every additional factory to separate packages io.dropwizard.logging.filter, io.dropwizard.logging.layout and io.dropwizard.logging.async. I beleive it will provide more\n  clarity to the logging package layout.\n- Also some comments inline\n. > I'm not really a fan of introducing a separate dropwizard-request-logging module for this. Could the classes in there be combined with dropwizard-logging instead and switch the package to io.dropwizard.logging.request? Does that make sense @arteam?\nI still believe we need a separate module for request logging, because the access logging is different from the classic logging. It works with different interfaces and abstractions and actually acts as a bridge between a web server request log abstractions and Logback appenders. By introducing a new module, we encapsulate all classes related to the access logging into a module, which could be excluded, if someone doesn't like this implementation.\n. @ghenkes Thank you very much! I am going to review this in nearest days and give a feedback.\n. Thanks, @ghenkes, for the tremendous contribution! Much appreciated.\n. Yes, I remember I wanted similar functionality other day and I didn't found a way to configure JerseyClient. I ended up configured WebTarget instead. I would welcome such contribution. \nOne point, though: I've got a pull request brewing here about refactoring ResourceTestRule. Currently this class is quite a mess and I would like to clean up it beforehand. I am going to send a pull request today, so after that, I think, you may start to work on this feature.\n. See #1418\n. No, this issue should not be closed. #1418 is just a foundation for a pull request to implement a solution for this issue.\n. Makes sense, otherwise users have to do this manually. I forgot that we use 2-step mechanism for discovering implementations. For some reason I thought that users just have to add a META-INF/services/io.dropwizard.jetty.RequestLogFactory file with names of custom classes and DiscoverableSubtypeResolver will load them.\n. @evnm, thanks for the review!\n. A couple of nitpicks, but generally looks good!\n. Thank you very much for your contribution!\n. Oh, it looks like that the Jackson parser doesn't produce system-dependent newlines in error messages. Thanks for fixing this.\n. Thanks!\n. LGTM\n. Could you try to run the maven-enforcer-plugin with the DependencyConvergence rule on your project and check that it doesn't contain several versions of Hibernate Validator?\n. Looks great! A couple of suggestions, but generally the change ready to merge.\n. Thanks, @jmcampanini, for contribution and, @jplock, for reviewing and merging!\n. Closed via #1436 \n. LGTM!\n. This seems to me like a reasonable improvement. It allows to extend logging behavior without changing the default logging configuration. It fits nicely with Dropwizard's philosophy of keeping things simple for the average user, but at the same time providing a means of control for those, who want to customize the framework.\n. @ghenkes, I reviewed the implementation, looks great. One note in a unit test, but generally this looks ready to merge!\n. Thanks for your contribution!\n. Thanks for a detailed description of the issue! I find the implementation is quite terse and, what more important, it fixes the problem. Let's merge the implementation and refactor it, if needed.\n. Could you try the latest snapshot? Let's see if the fix in b7c8721 helps.\n. Thanks for a very detailed explanation of the issue! The patch looks harmless enough to me. I think this won't break apps with resources with one exclamation mark in the path and probably handle your case as well.\n. Looks good to me! I think the change is justified. Now ExecutorServiceBuilder doesn't give a warning for the fixed single thread pool configuration and gives a warning when a user specifies the maximum amount of threads without setting the minimum amount and a bounded queue.\nThanks, @alexheretic, for the contribution with thorough test cases. And thanks, @evnm, for the review!\n. I think that's fine. Users will have more control over the testing environment.\n. Thanks, @jplock and @evnm!\n. @joschi, could you rebase this change against master? Let's see if b7c8721 helps.\n. Thanks, @cowtowncoder, for tackling this issue!\n. Have you tried to set up your API on a different path, so JsonProcessingExceptionMapper doesn't kick in? It can be done with the rootPath parameter in the YML config. Another option is to try to disable default exception mappers by setting the registerDefaultExceptionMappers parameter to false.. Glad it works for you! I am closing the issue.. I concur with @joschi. An additional parameter that enables lazy loading would make sense.\nPersonally, I am not a big fan of lazy loading, because it's a very brittle abstraction. I think, it would be reasonable to ask users to explicitly enable this feature and keep it disabled by default.\n. LGTM. Thanks for your docs contribution!\n. Thanks you lot for a deep analysis of the issue! Dropwizard master branch has been updated to Logback 1.1.6. The upgrade will be available in Dropwizard 1.0.0-rc2.\n. Thanks! I've upgraded the pull request to use 2.7.3 across all Jackson dependencies.\n. Some tests are falling. It looks like that the update introduced some regression. Will try to invistigate that. \n. The fix looks good, thanks you very much for contributing! \nI think we should not hesitate to upgrade to 1.1.6. As I see it, the release brings several improvements (e.g. disabling packaging data) and many bug fixes, which should beneficial for Dropwizard users. Judging by the rate of releases, the logback development community actively fixes other discovered bugs. I think we can rely on them and expect that potential bugs, with which Dropwizard users may encounter, will be fixed.\n. Thanks for working on this!\n\nWould this feature be considered to be accepted?\n\nYes, I would accept it. In production installations a configuration file can become quite big (logging, metrics, database pool, own service configuration, etc..), which may be inconvenient for configuration management. Also, some administrators prefer to have several small configuration files then one big to mitigate risks of manual errors. I think in such scenarios this feature could be quite useful.\n@dropwizard/committers, does anyone have concerns with this issue?\n. See #1383. We decided to leave Joda-Time support in 1.0.0 to simplify migration of Dropwizard applications from 0.9.x to 1.0.x. Many applications still use Joda-Time extensively, and can't easily\nswitch to the new Date/Time API (JSR-310). Despite that Stephen Colebourne (the library author) advises users to migrate to the new API, he still maintains the project. So, in fact, Joda-Time has a big user base and constantly updated. For these reasons, we don't want to drop its support.\n. Looks like a legitimate bug. I believe commit 0f77240 accidentally introduced it.\n@patrox, a fix with a test would be really appreciated. Thanks for tackling this issue!\n. Thank you for contributing!\n. Looks good! It seems that this improvement doesn't break anything and provides a way to get access to context paths in an application class. I remember some users asked for this feature in the mailing list.\nThank you very much for your contribution!\n. Oh, for some reasons the build fails on Travis after merging. I've reverted the commit for the being.\nWill try to try find a source of the error.\n. @patrox Let's hope we will find the error cause and this improvement will be merged anyway :)\n. Probably it makes sense to make another RC before the 1.0.0 release?\n. Just for info, I started a side-project several month ago for integration Dropwizard and the Jetty HTTP2 client. The client can be configured from a Dropwizard config, supports metrics instrumentation, and managed by the Dropwizard lifecycle. Unfortunately, there is no much activity in the project, but it should be in a pretty a good shape.I have a couple of unit and integration-tests, which periodically ping the HTTP/2 test page and validate responses, so I have some confidence in the project.\n. FYI, I published version 0.1 to the JCenter repository. Try it out,  should be available at\nxml\n<dependency>\n    <groupId>com.github.arteam</groupId>\n    <artifactId>dropwizard-http2-client</artifactId>\n    <version>0.1</version>\n</dependency>\n. Not a great solution, but you can register a custom health check servlet in AdminEnvironment\njava\nenvironment.admin().addServlet(\"custom-health-check\", \nnew HealthCheckServlet(environment.healthChecks()))\n                .addMapping(\"/health/*\")\nIt will be served alongside the default health check servlet, but on another URI.. Probably make sense for generating documentation, which can be automated, but changing version and setting the release date is still a manual process, unfortunately.\n. After second thought, I decided to automate some part of preparing Dropwizard documentation in a shell script. @dropwizard/committers, please review.\n. Looks like a useful addition. I would consider it for the 1.1.0 version. \n. @uttamtiwari123, Probably Dropwizard's SPI files were not included in the jar. \nTry use maven-shade-plugin for assembling the jar file. Have a look at the Building Fat JARs section in the documentation. \n. Addressed in #1705 \n. I beleive Dropwizard 0.8.1 doesn't support complex configuration for individual loggers. This feature was added only in Dropwizard 0.9. Please, see the docs for the 0.8.1 version.\n. Thanks for your contribution! Applied on top of the master branch.\n. I think it's better to wait for 1.1.0 and push only bug fixes to 1.0.0, should they come up.\n. Rebased and pushed to master. Thanks!\n. Thanks for bringing this issue to our attention. Could you provide a test case/sample project for reproducing it? We currently have a test case for handling SQL exceptions with Hibernate DAOs, but I guess your use case is a little bit different. Do you use manual Hibernate session management?\n/cc @ant3\n. I think this issue is the only blocker to release 1.0.0.\nWe need a test case to reproduce it, though. Otherwise I don't see how we can fix it. We can't rollback to committing a transaction on the RESP_FILTERS_FINISHED event, because it breaks tests for lazy loading,\n. I had a look and the patch seems to be fix the issue. I picked up @pkwarren's changes as a baseline, made some improvements and submitted a pull request #1620.\n@ant3, @pkwarren, @apgeorge  please review.\n. You are right, will fix the class name.\n. Sorry for the failing build. It should pass now.\nWe will certainly not introduce breaking changes to 1.0.0. We plan to make a release in a short time, so only bug fixes and regressions are currently accepted. \nI will take a look at the PR implementation, but I would generally more fond to see this feature implemented in a backward-compatible way. This way we can include it in 1.1.0.\n. Hey @scottaj.  Thanks for your persistence to contribute this feature in Dropwizard! \nI had a look at the implementation and I think it's better to go with the subclass approach. I would like to keep tasks immutable, because this makes easier for users to reason about them. They don't need to worry about the scope of a task and thread-safety concerns.\nI think we could provide to users a public abstract class like that:\n``` java\npublic abstract class BodyTask extends Task {\npublic BodyTask(String name) {\n    super(name);\n}\n\npublic abstract void execute(ImmutableMultimap<String, String> parameters,\n                      String body, PrintWriter output) throws Exception;\n\n@Override\n@Deprecated\npublic void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {\n    throw new UnsupportedOperationException(\"Use `execute(parameters, body, output)`\");\n}\n\n}\n```\nand inside TaskServlet invoke the correct method based on the task's type.\n. Rebased and applied on master. Thanks, @scottaj for the  contribution and @evnm for the review!\n. Thanks for your efforts for improving the Dropwizard documentation!\nUnfortunately, the problem is that if you override the equals method, you need to override hashCode as well. Otherwise the class doesn't conform the rule which states that equal objects mush have the same hash code. That's a lot of code, which is not directly reflects a purpose of the Person class . As it's presented in the documentation for the demonstration purposes, I think it's better to leave it in the current state for the sake of brevity. \n. ```\nResults :\nFailed tests: \nDropwizardSSLConnectionSocketFactoryTest.shouldRejectNonSupportedProtocols:172 \nExpecting:\n\nto be an instance of any of:\n<[java.net.SocketException, javax.net.ssl.SSLHandshakeException]>\nbut was instance of:\n\n```\n. Yes, we periodically update the list of contributors that with the script. But there should not be harm to amend the list manually.\n. Have a look at wizard-in-a-box.\n. LGTM as well, a couple of suggestions in comments.\n. The only issue which blocks us is #1604. I think as soon it's resolved, we will make a release.\n. I believe you hit the same issue as #1604, which was introduced in Dropwizard 1.0.0-rc3. We have a proposed fix in #1620, but it still needs to reviewed. If the fix is correct, the issue will be fixed in Dropwizard 1.0.0.\nFor the being, you can try downgrade to Dropwizard 1.0.0-rc2.\n. You need to declare and register an exception mapper which will translate a Hibernate exception to an appropriate HTTP response. An example of such a mapper: DataExceptionMapper. You can register it explicitly with the environment.jersey.register call in your application.\n. >  I think I'll add a layer between the resource and the DAO, and proxy that layer with @UnitOfWork (since it's apparently possible)\nFair enough.\n\nBut thanks for leading me there, and also thanks for the very fast answers as well! :)\n\nYou are welcome! Also thanks for taking your time to submit the issue with a detailed description. Hopefully, it will help other users who may encounter with it.\n. @wind57, Please upgrade your application to Hibernate 5, which is now used in Dropwizard 1.0.0.\n. No problem. Looking forward to your new pull request!\n. Please, check the version of Apache's httpclient in your classpath. The setValidateAfterInactivity method is defined in the PoolingHttpClientConnectionManager class and should be available since the version 4.4. Dropwizard currently uses version 4.5.2.\n. Hi, @gurrie. Sorry for the lack of feedback in the mailing lists, usually we try to answer to such questions.\nI think your proposal is an interesting feature and I can see other users who can be interested in it. Dropwizard is quite often used in projects consisting of many microservices, so the benefits of client-side caching can be quite extensive. Considering we can provide an external cache configuration for the application administrators, it can be a powerful way to optimize existed Dropwizard application which make a lot of HTTP requests. \nBut I am a little bit skeptic about including such functionality in the project's core. We will need to pull external library httpclient-cache and make caching transparent to the user. Despite it looks like that the Apache Client makes it rather easy (CachingHttpClientBuilder extends HttpClientBuilder), there could be some hidden issues. Also people tend to use complex caching solutions like EhCache, Memcached, Redis, Hazelcast, etc.., so naturally they would want to have them supported as in the core as well. I don't want to open a Pandora's box.\nWhat do you think about starting to work on this feature as an external Dropwizard module? In the core we could expose some internals of io.dropwizard.client.HttpClientBuilder for overriding, if you want to reuse some of its functionality.\n. Looks good to me. Thanks for contributing!\n. LGTM! Thanks, @evnm for helping Dropwizard users and submitting the pull request!\n. Hi, @tbartley. It's okay, the maintainers can test the pull request locally. I will review it shortly.\nCould you tell, from which Dropwizard's version you are migrating to 1.0.0? I don't remember we provided the ability to set a custom HostnameVerifier in previous versions. I think we always exposed only a registry of socket factories. If it's a regression, we could make a bug-fix release for 1.0.*, otherwise I more fond to push the change to main branch which will be 1.1.0.\n. > Also, I wasn't sure how to approach writing a unit test in HttpClientBuilderTest.java. Some guidance there would be appreciated.\nI think you could mark the method createConfiguredRegistry as package protected and put the @VisibleForTesting annotation on it. Then you could invoke it in tests:\njava\nHostnameVerifier customVerifier = (s, sslSession) -> false;\nRegistry<ConnectionSocketFactory> configuredRegistry = builder\n    .using(customVerifier)\n    .createConfiguredRegistry();\nThen we could retrieve the SSL socket factory from the registry and extract the verifier from it via reflection. Something like that:\njava\nSSLConnectionSocketFactory socketFactory = \n(SSLConnectionSocketFactory) configuredRegistry.lookup(\"https\");\nfinal Field hostnameVerifierField =\n    FieldUtils.getField(SSLConnectionSocketFactory.class, \"hostnameVerifier\", true);\n. Thank you very much for your contribution!\n. Nice catch!\n. Looks good to me, thanks for contributing!\n. Hey, @rishair! For JDBI there is (shameless plug) jdit, which is implemented as a separate library. It uses another approach (with a custom test runner), but provides a rather simple testing approach for the developer (similar to Mockito). I used it successfully in several production projects and it should be fairy stable.\n. Closed via #1676 \n. Closed via #1678 \n. LGTM!\n. Thanks @saumitrabhave for reporting these issues and helping to fix them!\n. It's very strange to step on those thread-safety issues with Logback (or the SLF4J bridge). Let's see if the fix helps, I even don't known how to write a unit to reproduce it.\n. Thanks, @evnm! \n. Cherry-picked to the 1.0,x branch.\n. Closed via #1676 \n. Looks good! Thanks for the contribution!\n. Dropwizard's Jersey client actually uses the Apache HTTP client built from a YAML configuration file rather than the Jersey internal bridge. So this bug is not relevant to us. Please, see our docs how to configure SSL.\n. Yes, but we can backport it to 1.0.* if it's needed. . The improvement has been added to the changelog. Thanks for letting us know!. Hi, @tjcutajar. Thanks for tackling this issue! I read your comment in the original issue thread, but unfortunately didn't have much bandwidth to verify it. I will try to have a more closer look this weekend. Maybe @evnm can also help with it, because he participated in the discussion and submitted a potential fix. \nIt would be great if we could somehow get a unit test which reproduces the issue. I know that multithreading issues are much harder to isolate and tests for them are rather hard to write, but they have a tremendous value.\n. Yes, this can be closed. Thanks for bringing this up!. The change looks harmless to me. It doesn't break the compatibility and\nopens the Application class to extension, which could be useful as shown in\nthe gist.\nAm 16.08.2016 06:13 schrieb \"Evan Meagher\" notifications@github.com:\n\nThis is a great use case.\nApplication#getConfigurationClass has been final since its inception\nwithin com.yammer.dropwizard.Service in 2011, so I think it's safe to say\nthat this was done as a precaution rather than to prevent a regression that\nwe should be mindful of. Thankfully, removing final from a method doesn't\nbreak ABI compatibility\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.17,\nso I think this would be a fine addition to 1.1.0.\nFor flavor, I noticed that the equivalent method on io.dropwizard.cli.\nConfiguredCommand\nhttps://github.com/dropwizard/dropwizard/blob/v1.0.0/dropwizard-core/src/main/java/io/dropwizard/cli/ConfiguredCommand.java#L41\nisn't declared final, so this change arguably improves consistency across\nthe codebase, albeit in a marginal way.\nI'm curious if any other maintainers will have different opinions on this\nchange, so I'm going to let the PR bake for a day or two before merging.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1690#issuecomment-239996764,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABo1gAJq3mQW352NFdUz9azomy1m2WfFks5qgTjbgaJpZM4JkiMF\n.\n. Hello @BethyDiakabananas!\n\nPlease, check that your YAML configuration file specifies a server with the simple type. A server with the default type has 2 types of connectors: applicationConnectors and adminConnectors, so the Jackson databinder in that case will throw an error for connectors as an unrecognized field. The file you provided looks correct, so make sure the configuration file on a Heroku machine is the same.\nAnother possible option is that for a some reason the last command line argument is stripped, and a process is launched as project-1.0.jar server with the default properties.\n. I think it makes sense to provide this feature, because it could be useful in staging/development environments to catch integration errors between the client and server side early and it could be changed in the config file depending on the environment.\n. @tmack8001, Thanks for the contribution!\n. Awesome, thanks!\n. Thanks for reporting! \nThe only cause for this issue I can think of is existence of several versions of slf4j in the classpath.\nBut in your dependency tree I see only version 1.7.21. Could you try to create a shaded JAR and see if there are any warnings during building the JAR?\n. #1664 was originally merged to the 1.0.x branch and I applied it to master in e34310b2\n. Yes, I can also confirm this regression. Which is strange, because it's exactly the problem which had to fixed by #1678. I would like to get some feedback from @evnm and @tjcutajar before reverting the commit.\n. Oh, now I see @tjcutajar pointed out to this problem in #1672, we ignored his comment. How inconsiderate of us.\n. Digging into internals I see that logback doesn't log messages because of a NullPointerException in org.eclipse.jetty.server.Request#extractQueryParameters method because the _metadata object is null.\n. It looks like there is a race between calling the org.eclipse.jetty.server.Request#recycle method by Jetty and extracting information from the request by Logback.\n. I've pushed to the Maven Central Repository Dropwizard 1.0.2 which reverts #1678. Should be available in a couple of hours.\n. Dropwizard 1.0.2 has been published to the Maven Central repository. \n. LGTM\n. Cherry-picked to the 1.0.x branch\n. LGTM\n. Hello, @looppair. \nThanks for pointing this out! I've backported ab65a32 (the commit which fixes the size based rollover) to the 1.0.x branch and released Dropwizard 1.0.3. It should be available in the Maven Central repository in a couple of hours. Let me know, if the issue is fixed in this version.\n. Hello, @looppair!\nCould you please verify whether Dropwizard 1.0.3 solves your issue or not. Thanks.\n. Hi @chriskessel,\nSorry for a late reply. Could you try to exclude the jackson-databind dependency from com.squareup.retrofit2:converter-jackson? Dropwizard 0.8.* uses Jackson 2.5.1, but converter-jackson uses 2.7.2. Depending how your application is packaged, different versions of Jackson could be included in the jar distribution. I think there could be issues if the 2.7.2 version, because Dropwizard 0.8.* doesn't support it. \n. Hi @CodingFabian!\nThanks for pointing on this omission. I've submitted a pull request to add this parameter to the configuration. Please have a look at #1795.\n. Yes, I think making the field nullable is a better way to represent its absence than using -1. We use the Duration class for time durations, so we would need to specify the unit of time along with the number. I find quite strange from an outsiders perspective to specify -1ms as an indicator of the  default value.\n. Thanks!\n. Thanks again!\n. I think it's a very good improvement to Dropwizard from the operational side!\n\ndetermine where SslReloadBundle / SslReloadTask should live. Right now, they reside in the e2e module, which shouldn't be their final resting place :stuck_out_tongue_closed_eyes:\n    Add SslReloadTask to dropwizard-servlets with other Tasks?\n    Add dropwizard-ssl-reload submodule?\n    Something else\n\nI think we could use a new module for that. This will allows users to disable this feature, if they don't want to expose the ability to change SSL certificates on the fly.\n\nis an admin task the right way to reload configuration? Other ideas could be a filewatcher for automatic reloading...\n\nWe now support POST requests for admin tasks, so it's doable to use this approach. I like it, because\nit requires explicit action from the administrator. A filewatcher is also an option, but it requires the administrator to put certificates to disk, which creates additional overhead for managing them. \n\nis hooking into jetty's lifecycle handler appropriate? I feel like it resulted in a rather concise and elegant solution (if maybe a bit shortsighted -- ie. too opinionated).\n\nLooks good to me. We use Jetty's lifecycle in other bundles and it works well. I think we can use it,\nunless we have reasons not to.\n\nwhat should the behavior be if one of the new configurations is misconfigured? Stop reloading or continue with the rest?\n\nI think we should try to provide an atomic way to update all configurations with new certificates. I think it would be a nightmare to debug a server with a partially updated configuration.\n. Hi, @wilbertpol,\nThanks for reporting this issue. We migrated request logging in 1.0 from a native Jetty solution to logback-access. Unfortunately, it doesn't support syslog appenders, see LOGBACK-317. \nI think it can be considered a regression for Dropwizard, and we need to figure out a way to workaround this limitaion.\n. Hi @wilbertpol,\nCould you please try to update to Dropwizard 1.0.4? We brought back old-style request logging with logback-classic and it should work with the syslog appender. You need explicitly set the type of request logging factory, though:\nyaml\n  requestLog:\n    type: classic\n    appenders:\n      - type: syslog\n        threshold: ALL\n        logFormat: \"app-ms %msg\"\n. I think it's an interesting approach for building reusable functionality, we could consider it in the core. Could you submit a pull request (just some sketch is enough)?\n. @vemilyus Thanks for your contribution!\n. > Is there a specific problem with using FindBugs right now\nNo problem with it, except it slow downs our builds.\n\nErrorprone (compile-time checks) and FindBugs (static byte-code analysis) target different bug patterns, so they're not really interchangeable.\n\nThat's true. But from the practical point of view, I find that Errorprone is much useful as a tool. It's reports more issues with code and has faster turnaround time.\n. I too, let's put it on hold.. Hi @victornoel,\nIt looks like a bug. For some reason UnitOfWorkApplicationListener doesn't intercept requests to sub-resources.  As a workaround you could try to use UnitOfWorkAwareProxyFactory to create sub-resources:\njava\n@Path(\"/{wsId}\")\npublic WorkspaceResource workspaceResource() {\n    return new UnitOfWorkAwareProxyFactory(hibernateBundle).create(WorkspaceResource.class);\n}\n. Closed via #1808\n. Since we didn't have release notes 1.0.4, I've merged the PR and updated the release notes manually.\nThanks, @pkwarren for your contribution.\n. Also you can try to enable the logAbandonedConnections option, to test whether your application leaks connections (for example, doesn't close all JDBC resources) or not. If there a leak, you can try to mitigate it with the removeAbandoned option. \n. Closed via #1820 \n. Hi @matthewjsummers,\nPlease check if your custom appender correctly works with logging events of the IAccessEvent type.\nNow in Dropwizard 1.0.* normal and request logs are produced by different libraries (logback-classic and logback-access respectively). Ideally, your appender should be able to work both with ILoggingEvent and IAccessEvent. But not all do so (for example, the syslog appender #1801).\n. Yes, I think it's a right approach. You need to create an additional appender with LogstashAccessLayout and make it discoverable. But we are thinking to return back old request logging (via logback-classic and custom logger) in the form a custom RequestLogFactory, because it looks like many people can't easily transit to logback-access. \nThank you, too, for using Dropwizard and reporting the issue.\n. @mattnelson I am going to create a pull request with a request logging factory implementation, we can discuss it there.\n. By the way, we released 1.0.4, which should provide the option to switch to the \"old-style\" request-logging with logback-classic. Docs are here.\n. > Should we update the logging documentation and release notes too?\nYes, thanks. Updates the docs and 1.0.4 release notes.\n. I've cherry-picked this feature to the master branch f4f8258 and 867a101.\n. You're right, I found this mistake too. I fixed it with a follow-up commit\n4c57844. It's strange, that this pull request passed all the tests. The\n1.0.4 version should correctly provide the request log discovery.\nAm 15.11.2016 18:10 schrieb \"Matt Nelson\" notifications@github.com:\n\n@mattnelson commented on this pull request.\nIn dropwizard-request-logging/src/main/resources/META-INF.\nservices/io.dropwizard.request.logging.RequestLogFactory\nhttps://github.com/dropwizard/dropwizard/pull/1813#pullrequestreview-8649700\n:\n\n@@ -1 +1,2 @@\n io.dropwizard.request.logging.LogbackAccessRequestLogFactory\n+io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory\n\nShould this file be located at /META-INF/services/ instead of\n/META-INF.services/?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1813#pullrequestreview-8649700,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABo1gP6cxbQ3O9wASSLz6LhzT2zpkmemks5q-ecigaJpZM4Ku2wH\n.\n. Thanks for your contribution!\n. Hi @mrkam,\n\nHealthCheckServlet uses own ObjectMapper, and you can't change it. But you can get your response pretty printed by passing the pretty query parameter to the the health check URI: http://localhost:9081/healthcheck?pretty=true.\n. Unfortunately, not. Dropwizard is tied to the Jetty server. You can package application as a war file, though, to deploy it to another servlet container. See wizard-in-a-box.\n. It should work if you specify a correct logging level for the LoggingFeature:\n``` java\nenvironment.jersey().register(new LoggingFeature(Logger.getLogger(\"inbound\"),\nLevel.INFO, LoggingFeature.Verbosity.PAYLOAD_ANY, 8192));\n``\n. You should put in your Dropwizard'sApplication.runmethod implementation, not Jersey's. Rougly speaking, here: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java#L82. The pull request looks good to me. I don't think the code coverage is so important, what matters you provided relevant tests. And thank you very much for a very detailed documentation forViewRenderException`!\n. Hi @ajak6,\nThe issue is that you need to have an open transaction before accessing a database with Hibernate.\nThe @UnitOfWork annotation does precisely that, but it works only in the context of Jersey resources.\nYou have 2 options;\n- You can use the declarative transactions with @UnitOfWork, but then you need to create your Hibernate DAO object with UnitOfWorkAwareProxyFactory.\njava\nnew UnitOfWorkAwareProxyFactory(\"default\", sessionFactory)\n.create(UserDao.class, SessionDao.class, sessionDao)\n- You can manage transactions manually, as described in the Hibernate wiki article.\n. You can't get multiple results with one query with JDBC, you should send 3 separate requests. Alternatively you can try to join your sets on the DB side with the SQL union operation.\n. I see, this a MySQL specific feature. You can try pass it to your database connection URL and see how JDBI maps a returned  ResultSet.\n. Hi @dren-dk,\nYes, that's totally possible. Shouldn't be really hard to implement.\n. Closed via #1825 \n. Looks good. A couple of requests:\n- Could you please update HttpConnectorFactoryTest? We have 3 relevant tests for it (default configuration, full configuration, and a test for building a connector).\n- Could please add this parameters to HttpConnectorFactory's javadoc and the configuration reference? This should allow other users to know how to set the parameter and its purpose.\n. Thanks for your contribution!\n. We usually avoid to backport changes, except bugfixes (And we released 1.0.4 only a couple of days ago). We probably could make a release candidate for 1.1.0, because there is already a lot of changes in the master branch since 1.0.0. Let us discuss that among maintainers.\n. Hi @Wstunes,\nThis issue has already been reported in #1672 and #1686. For some reason using reqParameter in the request logging pattern leads to race conditions and inconsistent logging. We tried to fix this issue on the Dropwizard side, but unfortunately without success. We need some collaboration with the logback maintainers to figure out how to correctly fix it.\n. I tracked this issue to a buggy Logback converter (RequestParameterConverter) which doesn't work correctly with async appenders. I am going to create a PR which will replace it with a custom one. Let's see if it will help. \n. I sent #1828, it would be great if you could test it.\n. On a unix machine with Maven, you can do something like that:\n- git clone git@github.com:dropwizard/dropwizard.git\n- cd dropwizard/ && git checkout -b fix_reqAttribute_request_logs origin/fix_reqAttribute_request_logs\n- cd dropwizard-bom/ && mvn clean install\n- cd ../ && mvn -DskipTests=true -P dev install\nThis should install Dropwizard 1.0.5-SNAPSHOT into your local maven repository.\n. Hi @Wstunes,\nLooks like the source of the error is that SafeRequestParameterConverter was not public. so Logback didn't pick it up. I've pushed a new commit to the fix_reqAttribute_request_logs branch. Could you please test again?\nPS you can find my email address in git logs, fell free to contact me.\n. I can release 1.0.5 in an hour or something like that, so it should become available in a couple of hours in the Maven Central repository.\n. 1.0.5 has been released. Please grab it when it becomes available and verify whether it fixes your issue or not.\n. #1686 is the same issue, I think. I'm not sure about #1699, but it could be related, because async logging called ServletRequest.getParameterValues which tried to access a Jetty request which was recycled.\n. >  Thanks again for solving the reqParameter problem.\nYou're welcome. Glad it works for you.\n\nI'm afraid that reqAttribute or other parameters in the log format have the same problem.\n\nActually, I don't think so! As I believe other parameters are copied for deferred processing and Logback converters access copied versions (this is true for attributes). I think I can try to contribute this change to Logback, so we can remove the hack in the future from Dropwizard.\n. FYI, I played a little bit with request logs, and I think logback-access it doesn't work correctly with reqCookie{cookie}. It reads cookies from the original request.\n. Closing, because the original issue seems to be resolved.. @Wstunes reviewed and confirmed the pull request works in #1827. I am going to go ahead and merge it. If anyone has concerns with it, please says so.\n. Wouldn't it to be better to expose configurationSourceProvider as a field for DropwizardTestSupport?\nUsers who load resources from URLs will be able to set UrlConfigurationSourceProvider explicitly in a DropwizardTestSupport constructor. \n. I think we need to add Throwables.throwIfUnchecked(e) before throw new RuntimeException(e) to preserve runtime exceptions. I believe the Guava documentation suggests to do that.\n. Thanks!\n. Thanks for your contribution!. Wow, jackson-bom is a great thing.. FWIW, I tried to hack a little bit on support of external logging frameworks in Dropwizard in the remove_logback_dependency branch. You can see some progress here. I tried to remove explicit dependencies on Logback and use the sl4fj API whenever possible. In the end I got an example application running with log4j, but that's it. There is a lot of work in that direction, but this commit could be a good start.. Follow-up for the latest comment: \nThe example application had Logback excluded in the pom.xml:\n```xml\n  \n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>1.1.0-SNAPSHOT</version>\n        <exclusions>\n            <exclusion>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-classic</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-access</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.slf4j</groupId>\n                <artifactId>log4j-over-slf4j</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-log4j12</artifactId>\n        <version>1.7.21</version>\n    </dependency>\n\n</dependencies>\n\n```\nand external logging enabled in the Dropwizard configuration:\nyml\nserver:\n  type: simple\n  applicationContextPath: /application\n  adminContextPath: /admin\n  connector:\n    type: http\n    port: 8080\n  requestLog:\n    type: external\nlogging:\n  type: external\nand the ExampleApplication class had to override the bootstrapLogging method:\n```java\npublic class ExampleApplication extends Application {\n@Override\nprotected void bootstrapLogging() {\n}\n\n}\n``. You would need to build a snapshot Dropwizard version from the branch and test on a separate project. This is needed to make sure Logback is not present in the classpath.. Agreed, would be nice too see support for this module in the core as Dropwizard targets Java8 and the parameter module should be production ready. My only concern is the support of users who don't compile their code with the debug information.. #1854 has been merged to master. Thanks @rondagostino, for pointing out to this documentation mismatch.. Looks good to me. Sorry for the noise, I tried resolve merge conflicts with the GitHub UI and messed up, but it should be fine now. The change is applied to upstream and 1.0.x as a6cfcc8.. Makes sense to me as well. Merged to upstream and applied to the 1.0.x branch as 7be01126.. Agreed, this is important information from the operations point of view. By default we discard some informational events to maintain the quality of service, but this trade-off could be not acceptable for some applications. You can go ahead and create a PR to improve our docs!. Closed by #1858. Closed by #1859. Good idea! I didn't see that Liquibase provides both constructors. I think\nit would be the best option.\n. Thanks for your contribution!. Please do, I think that would be nice. I personally not a big fan of Hibernate, but many Dropwizard users actively use this library. The main criteria for a contribution is too keep things backward compatible. Hibernate is not great in this regard, and I would like to not increase the burden of upgrading to a new version from the Dropwizard side.. The change looks good to me, but it looks like that the latest Jersey update broke some unit tests for the Jersey module. It looks like the build at Travis was killed because a test took too much time to complete.. Crap, looks like the build failed after the merge. I've restarted it several times, but without success. Some Jersey test never completes in a timely manner and Travis kills a test suite.. It looks like this functionality was removed by Jersey during a regular update and we picked it up without our knowledge. I will need to look up the reasons behind it in the Jersey changelogs. Maybe some folks had security concerns about exposing too much information for the bad guys poking around in the web with shell scripts.. You would need to extendAssetServletand override thedoGetmethod. There you can extract credentials from theAuthorizationheader, verify them and return a  401 error in case they don't match. You can then create a customAssetBundleand override  thecreateServlet` method in which return your custom servlet.. I don't think that such a common scenario. Usually static resources are JS libraries, CSS and HTML templates, which rarely need to protected. In most cases, Dropwizard applications are deployed behind a web server like Nginx, where you can easily set authentification for a specific resource in an easy manner. \nHaving said that, pull requests are always welcome. You can submit your code to discuss implementation ideas and bring an attention of other developers who may be interested in the same feature. . Thank you for working on this! Great work, but I'm a bit reluctant to merge this pull request to the 1.1.0 branch. Hibernate 5.2 is actually an incompatible version with Hibernate 5.0/5.1, because the user code must adapted to move to this version (many public APIs removed and deprecated, behaviour changes). I think it would better from the Hibernate maintainers to call it Hibernate 6 according to semantic versioning, but I guess they have reasons for their release naming scheme. We have a lot of changes for 1.1.0 already, and I would like to provide an option for Hibernate users to upgrade to this version without spending time to rewrite their Hibernate code. I propose to schedule this change to Dropwizard 1.2 (maybe 2.0?), and for the time being upgrade the Hibernate module to the latest 5.1 version (5.1.3.Final). \n@dropwizard/committers, What do you think?. @nickbabcock, I think I'm going to agree with you. We always tried to maintain Dropwizard up-to date with the latest dependencies. In the end, pushing users to the latest dependencies reduces the burden of maintenance. Let's hope a move to a new Hibernate version would not be painful for our users.. Regarding JDBI3, most of additional functionality in the jdbi2 module was incorporated into the library and there is no need for a special integration. I actually maintain dropwizard-jdbi3 module, but it's just a dozen lines of code.. > Hibernate doesn't deprecate the Criteria object itself but the createCriteria methods on the session object. Since the criteria APIs are pretty different, I'd let AbstractDAO support both Criteria and CriteriaQuery. All of it is just in the before last commit.\nSounds feasible.\n\nAbout the ExceptionMapper, there is one issue with it, that it failed before if the unwrapped exception didn't have a mapper. Jersey has a ExtendedExceptionMapper which allows you to check if you can trigger the mapper. That way the class would be re-usable and packagable among the default framework mappers.\n\nNice. Maybe we can figure out how to ship it within framework.. @vvondra Thank you very much for your hard work on this issue!. Did you register AuthDynamicFeature? Please, see the Authentication section in the docs. Usually this error message means that the AuthFilter wasn't created for the provided resource.. I remember we tried to update Dropwizard to it in #1865, but stumbled upon on some issues with failed tests. Will try to investigate.. Sorry, didn't see that branch. The build in fact fails on Travis CI. Will try then to run it several times there to figure out a reason of failing. Unfortunately, the build passes locally, so we can't debug it in a simple way.. I've set up an integration with AppVeyour here, so now it should build all pull requests.. I've set up the build on another CI sever CircleCI. Let see whether the build fails there or not.. Looks like the build fails on Circle CI at the same test as on Travis CI.\nThe test suite just hangs up (I guess because the relevant test doesn't\nhave timeouts).\n. I believe the issue lies somewhere in handling administrative tasks, but still can figure it out. For instances, many tests in dropwizard-testing took ~30 seconds, because the thread pool for admin tasks doesn't shut down gracefully. Another possibility is that Jetty 9.4.* somehow creates too many TCP sockets that are not closed correctly, so we hit limit on Linux CI boxes.  . Looks like I boiled down the problem to DefaultServerFactory and admin thread pools. Will try to poke around there.. Hm, I have not. Thanks for the pointer, though.. Looks like I found the culprit. I believe the issue is reported in #523. The OS on CI Linux machines returns an astonishingly big amount of CPUs (128). Jetty changed their algorithm for calculating the maximum amount of selector and acceptor threads, see https://github.com/eclipse/jetty.project/commit/2d52280179a7d9f8b2449c49bcb0847e02115082. But, in Dropwizard we still set the amount of acceptors as #CPUs/2 and selectors #CPUs. Looks like that's too much for Jetty, and it can't handle such a big amount of threads. I propose not to guess the right amount of threads and delegate it to Jetty.. Yes, they can. The HttpConnectorFactoryTest#testParseFullConfiguration test loads a custom YAML config and verifies that options are applied correctly. I verified it on a sample application and properties were picked up correctly. I think even the @Min annotation worked.. Yay! @jplock, thank you for merging these changes and your suggestions for fixing the issue.. @scottaj Thanks for the pull request! Nice to see UnitOfWorkAwareProxyFactory is used in real projects. Regarding the implementation of your proposed feature I agree with @ogregoire. I think a better way to to provide such functionality is allow users to implement a custom UnitOfWorkAspect. What do you think if we:\n\nMake the UnitOfWorkAspect constructor public;\nMake the configureSession method in UnitOfWorkAspect protected;\nExpose session and sessionFactory via protected getters;\nChange the newAspect method in UnitOfWorkAwareProxyFactory to accept sessionFactories\n\nWith these change, the user could implement custom aspects like this:\n```java\npublic class CustomAspect extends UnitOfWorkAspect {\npublic CustomAspect(Map<String, SessionFactory> sessionFactories) {\n    super(sessionFactories);\n}\n\n@Override\nprotected void configureSession() {\n    super.configureSession();\n    Filter filter = getSession().enableFilter(\"customFilter\");\n}\n\n}\nnew UnitOfWorkAwareProxyFactory(\"default\", sessionFactory) {\n            @Override\n            public UnitOfWorkAspect newAspect(Map sessionFactories) {\n                return new CustomAspect(sessionFactories);\n            }\n        }\n```. @scottaj, thank you for your contribution and @ogregoire for the review!. That would be great. AFAIK, the Dropwizard site is hosted via GitHub Pages, and they don't support HTTPS for custom domains. Even we get a certificate from Let's Encrypt, we can't set it up.\nAn alternative is to rent a machine from a cloud provider, install Nginx and and host the site via it, but it adds additional maintenance costs for us.. Thank you for the diff! I will try to poke around in your project a little bit to find a clue. I guess the source of the error stems from different mechanisms of initialization of SessionFactory. HibernateModule is initialized from a managed data source produced by DataSourceFactory and uses DatasourceConnectionProviderImpl, but DAOTestRule builds SessionFactory from the configuration at uses DriverManagerConnectionProviderImpl. \nRegarding your second question, `DAOTestRule will be part of 1.1.0 release. I can't give a precise ETA, but I think we will releases in a month or so.. > We also might want to disable the running default services (such as MongoDB or PostgreSQL) which we don't need: https://circleci.com/docs/build-image-trusty/#databases\nI tried to do this, but could not figure out how do disable default services. I couldn't pass an empty list to theservices section, so I guess we need to run some service?. Thank you for reporting this problem. Unfortunately, it looks like we can't handle it transparently in FuzzyEnumModule (there is no Jackson option for this feature, so we can't delegate deserialization to Jackson in runtime). I guess a workaround is too provide a custom ObjectMapper during creation of your application in the initialize method. You can set it via Bootstrap.setObjectMapper.. For historical reasons, mostly. When Dropwizard started, Jackson didn't have advanced enum support, so FuzzyEnumModule was included in the project to support some scenarios which Jackson lacked.\nWith time Jackson improved, but we are now stuck with FuzzyEnumModule and can't remove it to maintain backward compatibility. Maybe we will remove it in Dropwizard 2.0, but not sooner.. That would be interesting. We already got HTTPS and HTTP/2 support, and we could try to provide a connector for Unix sockets as well. I guess the main use case is a Dropwizard server behind a HAProxy server (that terminates the SSL traffic) on the same host.. Looking at the Travis logs, it seems like I got I wanted: now tests fail in a timely manner. Now the question is, why they fail :) The main suspect is ConstraintViolationExceptionMapperTest which has a lot of test methods comparing to the rest.. Now the build fails during starting HTTP/2 tests on Travis... That's sorcery.. Okay, looks like the reason for the failed HTTP/2 tests was #1899 and the fact that we run them in parallel (doesn't make sense anyway, because the time to start a new JVM eats up any performance improvement on such a small set). Because of that we couldn't see an error message (the JVM just hanged up).\nAlso, I had to set up an unlimited amount of open files, because otherwise the Jersey test suite hangs up. I presume Travis machines have some default limit which we hit during peak test loads (other possibility is that we leak file descriptors in our tests).. Yes! Finally the build has passed.. I'm going to go ahead and merge this to restore the build on master. If anyone has feedback for this PR, please feel free to express it.. I the builder is exposed via the protected clientBuilder method, so the user can override it. Something like that:\njava\nnew DropwizardAppRule<TestConfiguration>(TestApplication.class, \nresourceFilePath(\"test-config.yaml\")) {\n        @Override\n        protected JerseyClientBuilder clientBuilder() {\n            return super.clientBuilder()\n                .withConfig(new ClientConfig()\n                    .connectorProvider(new ApacheConnectorProvider()));\n        }. Regarding the second error I believe we affected by https://github.com/eclipse/jetty.project/issues/1044.\nLinux native poll connector returns a null SelectionKey at some moment during graceful shutdown.\nDEBUG [2017-01-18 09:36:19,876] org.eclipse.jetty.io.ManagedSelector: Could not run action org.eclipse.jetty.io.ManagedSelector$CloseEndPoints@38d525aa\n! java.lang.NullPointerException: null\n! at org.eclipse.jetty.io.ManagedSelector$CloseEndPoints.run(ManagedSelector.java:761)\n! at org.eclipse.jetty.io.ManagedSelector$SelectorProducer.nextAction(ManagedSelector.java:284)\n! at org.eclipse.jetty.io.ManagedSelector$SelectorProducer.produce(ManagedSelector.java:248)\n! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:147)\n! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:133)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590). I think the bug in the jnr library hasn't been fixed. I believe I submitted a PR for a while: https://github.com/jnr/jnr-enxio/pull/25. It looks like Jetty fixed their integration issues with jnr, and I don't see 30 seconds timeouts during shutdown. I don't know anything about socket errors under load, haven't done any performance testing. . Thank you for your interest in contributing to Dropwizard! We would be interested in the first-class support for JSON configuration files. But, I believe such support should be provided as a separate configuration factory rather than as a fix for YamlConfigurationFactory. Dropwizard is opinionated about its config format and I would prefer maintain YamlConfigurationFactory as a parser strictly for YAML files. Despite JSON is a subset of YAML and, in theory, should be parsed it, we can't guarantee such compatibility. I think your original solution with a JSON configuration factory is a right way to go with this feature. At least, in this format it can be accepted. . @manuel-hegner Thank you very much for the contribution and your persistence in addressing feedback!. Superseded and incorporated into #1890. Without it the suite fails hangs up on Jersey tests.. @dropwizard/committers Could you please review? This should be ready to merge. I tested it locally and it works with custom logging solutions. Would be nice to polish it and adopt to the framework.. Will do. It probably make sense to mention in the docs how to switch to an external logging.. Correct, I need to get my hands on it. Will do today.. I've added docs about disabling Logback to the core guide.. We don't have an ETA for 1.2.0, unfortunately. You can use snapshots builds for the time being, if you want to test this feature.\nWe could cut a release candidate for 1.2.0, but we need to discuss this among the maintainers.. I think you can use the Nexus snapshot repository, our snapshots should be there:\n<repository>\n  <id>sonatype-nexus-snapshots</id>\n  <name>Sonatype Nexus Snapshots</name>\n  <url>http://oss.sonatype.org/content/repositories/snapshots</url>\n</repository>. Thanks for pointing this out. It seems the configuration of the Jackson's ObjectMapper in Dropwizard is still dependent on Logback. I will take a look on it.. Hopefully, not. It looks like the build just takes very long too complete on Travis.. Are you sure you don't have any resources or filters which might conflict with your provided resource? Could you please post what your Dropwizard applications prints during startup?. Dropwizard 1.0.6 has been published and should be available in the Maven Central repository in a couple of hours.. Looks good to me. Thank you!. Thank you for the detailed bug report! It was reported in #1806 as well.. LGTM. Good idea! We currently maintain upgrade guides in our wiki. We could start the 1.1.0 guide there as well.. Thanks for the bug report! What do you mean by \"without setting proper headers\"? When I run your example I see that the client sends the Content-Encoding header as gzip and the Content-Type header as application/x-www-form-urlencoded, which is correct.\n```\nFeb 21, 2017 3:44:20 PM org.glassfish.jersey.logging.LoggingInterceptor log\nINFO: 1 * Sending client request on thread main\n1 > POST http://httpbin.org/post\n1 > Content-Encoding: gzip\n1 > Content-Type: application/x-www-form-urlencoded   \nFeb 21, 2017 3:44:20 PM org.glassfish.jersey.logging.LoggingInterceptor log\nINFO: 1 * Client response received on thread main\n1 < 200\n1 < Access-Control-Allow-Credentials: true\n1 < Access-Control-Allow-Origin: *\n1 < Connection: keep-alive\n1 < Content-Length: 537\n1 < Content-Type: application/json\n1 < Date: Tue, 21 Feb 2017 14:44:20 GMT\n1 < Server: nginx\n{\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {}, \n  \"form\": {\n    \"\\u001f\\ufffd\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 -N-\\ufffdK\\ufffdM\\ufffdM/M-.\\u0001\\u0000\\ufffdJ\\ufffdj\\u000e\\u0000\\u0000\\u0000\": \"\"\n  }, \n  \"headers\": {\n    \"Accept-Encoding\": \"gzip,deflate\", \n    \"Content-Encoding\": \"gzip\", \n    \"Content-Length\": \"34\", \n    \"Content-Type\": \"application/x-www-form-urlencoded\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"jersey-test\"\n  }, \n  \"json\": null, \n  \"origin\": \"62.214.102.20\", \n  \"url\": \"http://httpbin.org/post\"\n}\n. I am not sure about how https://httpbin.org handles such requests, but I'm quite sure that an HTTP server can decode gzip-encoded requests. Please take a look at [JerseyClientIntegrationTest.java](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java). We have tests there for handling compressed content from the client with an embedded `com.sun.net.httpserver`.. One of the nice features of the 3.2.0 release is the ability to disable some metric attributes from being reported. We can provide the YAML configuration of such attributes the same way we filter metric names. . Looks good to me. The fact that the `SharedMetricRegistries.setDefault` and `SharedMetricRegistries.getDefault` methods are not synchronized is a little bit scary, but let's try to deal with that in the metrics project.. Yes, I think so. Looks like that the most of updates are maintenance releases.. Closed via #2166 . Did you add the `@UnitOfWork` annotation on the `PasswordAuthenticator#authenticate` method? Judging by the stack trace you provided, `UnitOfWorkAwareProxyFactory` intercepted the call to `PasswordAuthenticator.authenticate`, but for a Hibernate session was not opened.. Please see http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html. You need to add the following parameter to your JVM startup command `java -Xbootclasspath/p:<path_to_alpn_boot_jar>`. Thanks @jplock for the contribution, @joschi, @evnm, and @mattnelson for the review!. Looks good to me, thank you for the contribution!. It was merged to master (1.2), but not to the 1.1 branch. I will cherry-pick it to the 1.1 branch, because this looks like a harmless change, but it can very useful for operations.   . I can cut a RC today.. My fault, I haven't promoted the release candidate, other things popped up during the day. Doing that right now.. Should be released now in the central repository, but it takes some time for a release to sync on all replicas.. What's the size of the uploaded file? Judging by the stack trace, you don't have enough heap space in your application to allocate the whole file as an SQL statement. You can try to increase the allocated memory with the -Xms and -Xmx parameters during start-up. If the file is really big, you may consider to store it off heap.. Ah, I see, my mistake. I guess you can try to disable Hibernate SQL logging in your config:\nlogging:\n  loggers:\n    org.hibernate.SQL:\n      level: OFF\n. Or the whole Hibernate logging with `org.hibernate`, because I see that TRACE logging statements are logged as well.. Will do.. Thanks for fixing the markup and adding the release notes!. Thanks!. Thanks! I will take a look at your fix tomorrow.. I had a look and your proposed fix and it works too. Nevertheless, I believe it's better to go with the pull request proposed by me. The motivation is too try to switch from the static lookup to dynamic to avoid guessing completely and delegate it to Jersey. We can use your fix as a backup plan in case the original fix causes any problems.. You can serve static resources from a JAR file with `AssetsBundle`. Dropwizard can't execute server-side JavaScript code though.   . Yes, you need to use `AssetsBundle` to configure that. Take at a look at the \"Serving assets\" [part](http://www.dropwizard.io/1.0.6/docs/manual/core.html#serving-assets) of the docs.. At the first sight it looks like a positive and harmless change, but let's me think a little bit more about an impact of it and whether it could break anything.. Sorry, I didn't have much time to dig into it, but I can't say anything\u200b against this change. I would merge it.. It's possible, but quite boilerplate. Dropwizard is designed to be extended with servlets and filters, but not Jetty handlers. You need to declare a custom server factory:java\n@JsonTypeName(\"ip-address\")\npublic class IpAddressServerFactory extends DefaultServerFactory {\n@Override\npublic Server build(Environment environment) {\n    Server server = super.build(environment);\n    InetAccessHandler inetAccessHandler = new InetAccessHandler();\n    // Configure patterns from YML\n\n    inetAccessHandler.setHandler(server.getHandler());\n    server.setHandler(inetAccessHandler);\n    return server;\n}\n\n}\n```\nThen, register it as a SPI by creating a file with the name io.dropwizard.server.ServerFactory in your resources under the path META-INF/services/ and write the full class name of the new factory (com.example.helloworld.IpAddressServerFactory) to it.\nThen in our YAML config you can instruct Dropwizard to use this server factory by specifying the type ip-access type.\nyaml\nserver:\n  type: ip-address. I guess the pull requests with new Liquebase tests could be a culprit. It creates shared H2 databases to keep the state between different migrations.. I think I fixed the issue with the JDBI errors. I added shutdown code in the JDBI tests to make sure the tests don't reuse the same database.. Yes, that's a good advice. You can register a filter which will add the charset parameter to all your responses. Should be really simple to set up in your Application.run() method as \njava\nenvironment.jersey().register(CharsetUtf8Filter.class);. Good idea. I think the Graphite and ThreadLocal bugs are quite big to warrant a new maintenance release for Dropwizard. Thanks for contributing!. I will wait a little bit, and if nobody raises any objection will release Dropwizard 1.0.7 tonight.. Dropwizard 1.0.7 has been released to the Maven central repository.. For anyone wondering to update or not, here are the release notes for Metrics 3.1.3 and 3.1.4\n\nhttp://metrics.dropwizard.io/3.2.2/about/release-notes.html#v3-1-3-feb-24-2017\nhttp://metrics.dropwizard.io/3.2.2/about/release-notes.html#v3-1-4-mar-10-2017. It looks like the search index got corrupted during uploading to the Maven central. I've checked a md5 checksum for the artefact at http://repo1.maven.org/maven2/io/dropwizard/dropwizard-jersey/1.0.7/dropwizard-jersey-1.0.7.jar.md5 and it's the same with the checksum from dropwizard-jersey-1.0.7.jar in my local repository. I will create a ticket in the Sonatype JIRA, hopefully they will help.. https://issues.sonatype.org/browse/OSSRH-29004. Sonatype responded in the ticket. They purged caches and now dropwizard-jersey 1.0.7 should be accessible in builds. dropwizard-servlets-1.1.0 still unavailable, though.. It looks like Sonatype resolved this issue as well and the 1.1.0 artefacts should available too.. Ah, that's very unfortunate. We will need to reopen the ticket again.. It should be fixed now.. I remember I did something similar in #1018. I am wondering how it appeared again.. It looks like #1838 pulled it from jersey-bom.. Cherry-picked to the 1.1 branch as well.. @vrolijken, Thank you for reporting and fixing this issue!. I think this PR should be applied to the 1.1 branch along with #1976. Ping, I guess this should be good to merge.. Something like:\n```java\nSslContextFactory sslContextFactory = new SslContextFactory();\nsslContextFactory.setTrustStorePath(ResourceHelpers.resourceFilePath(\"stores/http2_client.jts\"));\nsslContextFactory.setTrustStorePassword(\"http2_client\");\nsslContextFactory.setIncludeCipherSuites(\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\");\n\nclient = new HttpClient(new HttpClientTransportOverHTTP2(new HTTP2Client()), sslContextFactory);\nclient.start();\nassertResponse(client.GET(\"https://localhost:\" + appRule.getLocalPort() + \"/api/test\"));\n``. Superseded by #2119. @Sijmen, Could you review?. Looks good. Thank you for your detailed explanation of this issue. Hopefully https://java.net/jira/browse/JERSEY-2992 get resolved in the future.. I think it's a good idea. I can imagine a situation when we want to map enums to values with spaces in the middle (e.g. country names).. Closed via #2161 . Closed via #2161. Thanks for submitting the original version of the bugfix!. I think that's a reasonable improvement. Thank you!. I think the issue is still open, the linked pull request doesn't fix it.. Thank you for a very thorough unit test! I will try to reproduce the issue and get back to you. Maybe @cowtowncoder could help, too.. Sorry, but no updates. I didn't have much time to work on this issue.. Does this this bug cause #1990?. Thanks for the investigation! I guess we will wait until Hibernate 5.2.10 released and then update its dependency in Dropwizard.. Done. Should be resolved as part of #2021.. Thank you for the contribution!. Dropwizard 1.0 and higher works only with JDK 1.8. If you have a hard requirement for Java 1.7, you can try to use Dropwizard 0.9.*.. I think it's a reasonable idea to give Dropwizard users to control over it. This filter is useful for debugging, but I can see why users may not want to use it because security reasons. I will accept a pull request for adding a switch to control this behavior.. Yes, that's possible. I will do a cherry pick today.. Sorry, I thought I had already done that. Cherry-picked as 673e9a15fa1d789d82f6eb7af1b2138ab863860f. I have released Dropwizard 1.1.1 to the Maven central repository.. Thank you for the contribution!. I would guess the problem is that Eclipse is trying to load a shaded jar along with dependencies. Does running the application from a shaded jar file work? I meanjava -jar dropwizard-app.jar server config.yml.. I think it's a good idea to make a 1.1 release. We have #1998, which affects Hibernate users.. Good idea. I think we could upgrade alpn-boot to 8.1.11.v20170118, because it should be compatible with the latest JDKs. Would you interested in submitting a pull request?. Thank you for the contribution!. I believe it's originally were meant to be a complete metric name and then regular expressions were added on top. I think it's an interesting idea to improve the default matching strategy, but the biggest concern to me that such a change would be backward incompatible. Users may find new metrics pop up in dashboards after an update, because the new strategy would more lenient. Maybe we could improve the documentation to make more clear how matching works.. I think a new strategy will be the best option. Doing so we reduce the risk to broke existing applications and can provide this matching in the 1.2 version. We could add a new optionuseSubstringMatchingor something like that (if you have ideas for a better name, go ahead). It could be a middle ground between full string matching and regular expressions.. Thank you very much for the contribution!. Thanks for the contribution!. If you don't have a database or template section in your application configuration, Dropwizard should not require it in the YAML config. Could you post your configuration class? . You can extendServerCommandand parse arguments in therunmethod. You may also consider to use system properties.. Looks like the pull requests forces to useMappingJsonFactorywhich carriesObjectMapperconfigured by Dropwizard. A unit test would be great, but I think in the current form it's justifiable to be merged.. Applied to the 1.1.x branch as a5ecf60a8f26145a08f8654fddec8d03c5911472. I think the issue should be fixed by #1976.  We will need to release a new 1.1, though.. I like the approach with the protected method too.. Thanks for the contribution!. Could you print out your stack trace? We use Optionals in our examples [here](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/resources/HelloWorldResource.java) and it works. #1115 seems to be an issue with authentication.. Thank you!. Thank you very much for the contribution and a very thorough unit test!. Applied to master as b6097f2ee2b3714f11d7c43318b2a44f51397cc7. Looks like so. Thanks for spotting and submitting the pull request.. Applied to 1.1.x as c360323582e6c5a1817a06fa47f43216990f110b. Looks like a logging problem. Hibernate tries to log the entity, but it's to big to allocate in the heap. You could try to disable DEBUG logging for theorg.hibernate.eventpackage and see if it helps.. LGTM! It seems that the bug was introduced only in the 1.2 branch by #2010.. Okay, I will check.. Thanks for the report! Do you mean thatJerseyClientBuilderdoesn't accept a Dropwizard environment or there are some issues with the Jersey HTTP code? If former, then you need to useJerseyClientBuilderfrom thedropwizard-client` module.. > does that not include dropwizard-client?\nYes, it does not. dropwizard-client is a module for building a Jersey or Apache HTTP client tied to the Dropwizard environment (so you can configure it from the YAML configuration). You can see it in detail here: http://www.dropwizard.io/1.1.0/docs/manual/client.html.\nThe confusion may come from the fact that there is a JerseyClientBuilder in the Jersey client itself, but it's not the same client which is mentioned in the docs. We could probably specify a right import in the code snippet.. That looks like a bug, thanks for bringing this up! I've created #2277 to fix it. The client produced by DropwizardAppRule should use the ObjectMapper from the test environment.. Thank you for the contribution!. This looks like a useful addition! I would accept the patch.. Closed via #2091. I think so too. Nevertheless, I've pushed bugfix releases 1.1.2 and 1.0.8 which update Dropwizard to the Jackson versions which are not affected by this vulnerability.. Thank you for the explanation!. Closed via #2095.\n. Looks good to me! Thank you very much for this contribution!. LGTM. Thank you!. After #2091 is merged, we could add support for ServiceUnavailableRetryStrategy.. Thanks for your contribution!. Resolved by #2103 . The general issue with the PR is that it has a lot of unrelated changes. Does the ability disabling immediate flushing warrant them? I would expect that setting the correspondending attribute on the file appender will be enough.. Applied to the 1.1 branch as 48b88252.. I am a little bit confused why the solution with:\nyaml\nserver:\n  rootPath: /api\ndoesn't work for you.  With this configuration you serve your JS resources from the root, and your API from the /api path. Do you receive an error message when running a Dropwizard with such config?. Okay, let's try to isolate the problem. Here is a simple Dropwizard app:\n```java\npublic class ApiApplication extends Application {\n@Path(\"/test\")\npublic static class TestResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String test() {\n        return \"Hello\";\n    }\n}\n\n@Override\npublic void initialize(final Bootstrap<Configuration> bootstrap) {\n    bootstrap.addBundle(new AssetsBundle(\"/assets\", \"/\", \"index.htm\"));\n}\n\n@Override\npublic void run(Configuration configuration, Environment environment) throws Exception {\n    environment.jersey().register(new TestResource());\n}\n\npublic static void main(String[] args) throws Exception {\n    new ApiApplication().run(args);\n}\n\n}\n```\nStatic file example.txt under the /assets/ directory in app's resources\nExample static asset file.\nApp config config.yml\nyaml\nserver:\n  rootPath: /api\nIf I run it with java -jar app.jar sevrer config.yml the server starts and shows:\n```\nINFO  [2017-07-18 16:52:54,691] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nGET     /api/test (com.example.helloworld.ApiApplication.TestResource)\n\n```\nI then check URI paths via curl and they work:\n127.0.0.1 - - [18/Jul/2017:17:00:22 +0000] \"GET /example.txt HTTP/1.1\" 200 27 \"-\" \"curl/7.47.0\" 19\n127.0.0.1 - - [18/Jul/2017:17:00:29 +0000] \"GET /api/test HTTP/1.1\" 200 5 \"-\" \"curl/7.47.0\" 45\nDoes it work for you?. Could you try to use the Grizzly test container? See the corresponding section in the docs for the reference. I think the default Jersey test container doesn't support injections of principals into resources and is not suitable for auth testing. For instance, dropwizard-auth uses the Grizzly container for all integration tests, e.g here.. Please reopen if the issue is not resolved.. Ah, I forgot about threshold in AbstractAppenderFactory, but we can't change its type because it's protected and part of the public API.. I guess this should be good to merge. The issue was reported by @jsauvain in #1900 and the change in the pull requests should fix it. My biggest concert is that we have to change the public API which could break third-party appenders. I had a look at them and most of them use threshold variable directly or don't use at all. \nI am leaning to merge this MR and cut a release candidate. In case this change breaks something important, we can revert it.. For those who experience this issue, you should override bootstrapLogging() and then bootstrapLogLevel(Level) won't be invoked.\n```java\npublic class ExampleApplication extends Application {\n@Override\nprotected void bootstrapLogging() {\n}\n\n@Override\npublic void run(ExampleConfiguration exampleConfiguration, Environment environment) throws Exception {\n    LoggerFactory.getLogger(ExampleApplication.class).info(\"Test: {}\", exampleConfiguration.getTest());\n}\n\npublic static void main(String[] args) throws Exception {\n    new ExampleApplication().run(args);\n}\n\n}\n``. Yes, the import is still there, but the JVM lazily initializes classes and methods lazily, so if you override thebootstrapLoggingmethod in theApplicationclass (which invokes thebootstrapLogLevelmethod), your application should be successfully loaded. I created a simple demo for a Dropwizard app with log4j 2: https://github.com/arteam/dropwizard-nologback.. Dropwizard 1.0.9 and 1.1.3 have been released with the correspondending upgrades. Thank you for raising awareness of this issue!. I fixed it with 092432cc49dc0240fac9ea38a3a73b58fadb0e48. Ah, I forgot to update the test after changing the error message for\nabsence of the default cipher. Will do tommorow.\n. That's right. Nevertheless, If you want to try out Dropwizard with Jackson 2.9, I was going to make today a release candidate for Dropwizard 1.2 today and upload it to Maven Central.. Closed  by #2133 . Thank you!. Do you have a specific reason to useIDBIin your factory method?$IDBI_a3a4209300b4seems to me as a proxy class generated by a byte-code code generation library. Could you make sure that aDBI` instance registered in the IoC framework you use?\nGenerally I agree with you that programming with interfaces is a good practice, but I doubt in usefulness of the IDBI interface. If I'm not mistaken, its origin comes from the times when JDBI was trying to integrate with the Spring Framework 2 and it required registered beans to have interfaces. Outside of Spring, this interface was never adopted and consequently removed in JDBI3.. Thank you for reporting this! Fixed in 6a4bf5b.. I believe Dropwizard does gzip compression automatically. The support for gzip is enabled by default (see http://www.dropwizard.io/1.1.2/docs/manual/configuration.html#gzip). So, if the client supports decompression by sending a request with the Accept-Encoding:gzip header, org.eclipse.jetty.server.handler.gzip.GzipHandler will compress the response and add the Content-Encoding: gzip header.\nWhy your custom filter doesn't work is not clear, maybe your filter is executed before the Jersey servlet and it rewrites the header.. > Assuming that the default response is gzipped from dropwizard. Even if I include the Accept-Encoding:gzip header. I don't get back a Content-Encoding:gzip in the response headers\nHow big is your response? By default responses less than 256 bytes are not compressed. Also, only GET methods are compressed by default.\n\nDo you see any such changes from the shared code? Since we had not intentionally overridden the headers. Just wanted to set the value as such.\n\nYour custom filter looks good considering all your Jersey resources return gzipped content by default.\nI would debug filter chain to see why the header could be removed (and Jetty's GzipHandler since it's enabled by default).. @isaki-x LGTM, Thank you!. I will make a RC for 1.2 with this enhancement.. I like it! I think it provides great control for those user who want to do more fine-agreed exception handling.\nI also agree that the check command doesn't need the whole stacktrace to be dumped, because most of the lines are useless and hide the real error.. Thank you!. Looks good to me. A very nice unit test, thanks for the contribution! I will release a new 1.2.0-RC.. Closed via #2150 . Tracked in #2143 . Okay, let's put this PR on hold. We can continue, if there is more interest from the community and clear how to tackle the rotation issue.. Thanks for the PR! \nUnfortunately, after that change DEBUG logs from Hibernate start appearing in the console log during a test run. Travis CI even terminates builds because we produce so much logs. It looks like we don't set the correct threshold for the console logging after resetting the logging system.. I would add a call\njava\nconsoleAppender.addFilter(new ThresholdLevelFilterFactory().build(Level.INFO));\nbefore starting the console logger.. Thanks for your contribution!. LGTM. Wow, that looks pretty great! @manuel-hegner Thanks for the contribution!\nVery interesting to see how @SelfValidation performs in comparasion to @ValidationMethod. I think it maybe very useful for users who like put validation in domain objects and concerned about performance.. Thank you!. I will review the merge request today. Thanks for the reminder!. @reftel Thanks for the contribution! I will make a new 1.1 release shortly.. I think jadira also doesn't work with Java 9. I created a PR fix this: https://github.com/JadiraOrg/jadira/pull/66.\nI created a java_9_build branch where I'm trying to build Dropwizard under Java9. There's good progress, most of the basic functions work, but some modules are still not Java9 compatible. . The Java 9 branch has been merged to the upstream and the Liquibase tests pass. I presume the version check fails when one tries to run migration commands, right?. I've manually marked warnings in Codeclimate as false positives.. Thank you for the contribution!. LGTM. I don't think we are going to fix it in 1.2.*. Warnings are not great, but I don't think it's worth to build a level of abstractions to solve a deprecation issue. The 1.3.0 version will use the new classes from commons-text.. Please check that your project pulls dropwizard-jersey with the 1.2.0 version. The type of the AllowedMethodsFilter.DEFAULT_ALLOWED_METHODS field was changed from Set to ImmutableSet between 1.1 to 1.2. Judging by the stack trace, you probably have an old version of AllowedMethodsFilter in the classpath.. Closed via #2176 . @sabarivasan  Thanks for working on it! I hacked a little bit on your patch, trying to extract everything into own module, so the users don't need to pull additional dependencies if they don't use JSON logging. \nPlease see: https://github.com/dropwizard/dropwizard/commit/6d9705bc45a50749cdc7cfac10598c04ce86bea7\nMaybe there is something interesting can arise from it, which will be contributed to the upstream.. Yes, I'm working on it. I like @mattnelson's proposal about a generic logFormat. Let me come up with a solution.. Closed via #2232 . Hm, it should work. Could you post your YAML config and the code of the REST resource? Also, could you test that your client code works with http://httpbin.org/gzip?\n. This looks fine. Could you test with curl that the server doesn't return a Content-Encoding: gzip header? Something like curl -v -H 'Accept-Encoding: gzip'  http://127.0.0.1:8080/foo/bar. Could you check a Content-Length header in the response and verify that it's more than 256 bytes? . You could also try to enabled the debug level logging for gzip compression and see something suspicious in the output. You can do that in your config by\nyml\nlogging:\n  loggers:\n    org.eclipse.jetty.server.handler.gzip: DEBUG. Could you check with curl that the server returns the Content-Encoding header? Maybe your client under the hood automatically decodes gzip responses and strips the Content-Encoding header.. @patrox Sorry for nitpicking, but your last commit along with expanding added a lot of other formatting changes. Could you please revert it and just expand the imports?. LGTM! Thanks @patrox and @nickbabcock!. I don't think it's needed. The overhead of instrumenting should be fairly small to warrant adding an additional configuration option.. The biggest concern for me is the increase of reported metrics by default for a Dropwizard app.. \n. But, my opinion, 4 additional metrics should not be a big problem. They are quite useful metrics, especially for applications with a lot of admin tasks.. @patrox Thank you for the contribution!. Closed via #2190 . Thanks! Nice to catch such errors with static analyzer tools.. @bearrito Please review!. Thanks for the review!. Thanks!. I am going to merge it and then amend the format to keep only problem, solution, and result sections as proposed by @evnm. Thank you!. LGTM. Thanks for the contribution!. I think something like that should be good to go:\n```java\npublic interface ViewRenderer {\n    default boolean isRenderable(View view) {\n        return getSuffixes().stream()\n            .anyMatch(s -> view.getTemplateName().endsWith(s));\n    }\n@Deprecated\ndefault String getSuffix(){\n    return \"\";\n}\n\ndefault Set<String> getSuffixes(){\n    return ImmutableSet.of(getSuffix());\n}\n\n}\n```\njava\npublic class FreemarkerViewRenderer implements ViewRenderer {\n    @Override\n    public Set<String> getSuffixes() {\n        return ImmutableSet.of(\".ftl\", \".ftlh\", \"ftlx\");\n    }\n}\njava\npublic class ViewBundle extends ConfigurableBundle {\n    @Override\n    public void run(T configuration, Environment environment) throws Exception {\n        Map<String, Map<String, String>> options = getViewConfiguration(configuration);\n        for (ViewRenderer viewRenderer : viewRenderers) {\n            for (Map.Entry<String, Map<String, String>> entry : options.entrySet()) {\n                if (viewRenderer.getSuffixes().contains(entry.getKey())) {\n                    viewRenderer.configure(entry.getValue());\n                    break;\n                }\n            }\n        }\n    }\n}. I am all for updating Freemaker. After some thinking, I do think a regex would be a better option. Maybe it makes sense to rename the getSuffix method to getConfigurationKey and then add a new method which will specify a regex for matching views. Unfortunately, it will break third-party views (if there any), but I think it's a reasonable trade-off for the 1.3 version. We can update the Mustache renderer which is shipped with Dropwizard.. Sound like a plan.. No, Dropwizard will stay compatible with JDK8. It will be compiled with the JDK9 compiler only if it's set as the default in the system. . Yes, I went through all null check violation reports (even in the tests) and fixed them. I've changed the reporting level to ERROR. Now the build will stop if the compiler finds a violation.. Please try to attach the listener to environment.getApplicationContext().getServletHandler() instead of environment.lifecycle(). They are two different lifecycles.\njava\nenvironment.getApplicationContext().getServletHandler().addLifeCycleListener(new AbstractLifeCycle.AbstractLifeCycleListener() {\n            @Override\n            public void lifeCycleStarting(LifeCycle event) {\n                new ServletPlugin.Initializer().onStartup(environment.getApplicationContext().getServletContext());\n            }\n        });\nenvironment.lifecycle() usually tied to the Jetty server's lifecycle and the starts before the servlet environment.\nBut generally the use of environment.getApplicationContext() is discouraged, because by accessing it you poke around in the Jetty's internals. environment.servlets() is a preferred way to register servlets and filters.. Thank you!. Applied to the 1.2.1 branch: 71ff55d3d22fcb6494e4a8e34f9911b000b4bd0a. Agreed, I would use the same approach. I think Trimou also supports i18n and they have a Dropwizard integration: https://github.com/trimou/trimou/blob/master/extensions/dropwizard/src/test/java/org/trimou/dropwizard/views/TrimouViewRendererTest.java. Thanks, but unfortunately the release notes are missing for 1.1.6. I will fix the release notes for 1.1.6 and will regenerate the docs.. Done: http://www.dropwizard.io/1.1.6/docs/. The docs have been updated: http://www.dropwizard.io/1.1.6/docs/. Thanks for reporting the bug! I can confirm it. The reason behind it is a weird behavior of HK, which is looking for dead references in the finalizer and then disposes them automatically (poor man's leak detector). This issue is similar to #1160. \nI think we should partially revert #1676 and remove the part about disposing the executor and let the Dropwizard environment manage it.. As a workaround you can provide a non-disposable executor during building the client:\njava\nClient client = new JerseyClientBuilder(environment)\n    .using(environment.lifecycle().executorService(\"async-executor\")\n    .minThreads(4)\n    .maxThreads(4)\n    .build())\n.using(jc)\n.build(\"jersey-test\");. Closed  via #2221 . Thanks for your attentiveness!. Applied to master as e40ed6c. Applied to master as 9cf696f. > Could someone look at codeclimate? It's getting to the point where it's making the test less readable.\nIt looks like you are all set! I agree that sometimes codeclimate is too aggresive in its analysys.. Thank you for the contribution!. Cherry-picked to the 1.2.x branch as b70492524190201d394a2c16941098d1054305eb. Yes, acceptor and selector threads are the most obvious culprit. Could you take a thread dump from the remote server and see what kind of threads are present? . LGTM. Thanks for your contribution!. It's intended only for methods. I don't think it makes much sense to use it for resources, because they typically contain methods with different caching behaviors (a mix of GET and POST/PUT requests).. Hm, it looks like our HTTP/2 tests are failing because of the the changes in SSL handling:\n```\nERROR [2017-12-13 21:48:54,784] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down\n! java.security.UnrecoverableKeyException: Password verification failed\n! at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:778)\n! ... 39 common frames omitted\n! Causing: java.io.IOException: Keystore was tampered with, or password was incorrect\n! at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:780)\n! at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56)\n! at sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)\n! at sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70)\n! at java.security.KeyStore.load(KeyStore.java:1445)\n! at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:54)\n! at org.eclipse.jetty.util.ssl.SslContextFactory.loadTrustStore(SslContextFactory.java:1085)\n! at org.eclipse.jetty.util.ssl.SslContextFactory.load(SslContextFactory.java:261)\n! at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:226)\n! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:133)\n! at org.eclipse.jetty.server.Server.start(Server.java:418)\n! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:115)\n! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113)\n! at org.eclipse.jetty.server.Server.doStart(Server.java:385)\n! ... 25 common frames omitted\n! Causing: org.eclipse.jetty.util.MultiException: Multiple exceptions\n``. I've found the error. We didn't specify the password to the truststore in the HTTP2 tests and it looks like Jetty is now more strict to validating truststores.. I've got a branch with an integration test which uses Conscrypt. I will try make it work to submit a PR with the updates docs. . Okay, this is now looks good to merge to me. @evnm @mattnelson Could you have a look?. @evnm @jplock @mattnelson Please review one more time.. Thanks everyone!. @sabarivasan I've released Dropwizard 1.3.0-rc2 to Maven Central. You can grab it from there and experiment with JSON logs.. The type change has been fixed in 4.0.1 - https://github.com/dropwizard/metrics/issues/1243.\nThe JMX reporter was extracted from the core and now is distributed in themetrics-jmx` package. Practically it should be only just an import change.. I think we can just remove the module. I don't think people who use Ganglia are checking out Dropwizard release candidate builds.. I think it's better to leave them out. For users who uses Guava and JodaTime, the modules easy to include to their projects.. > I'd vote for including these plugins by default because Dropwizard usually comes with \"batteries included\" for the libraries it's using itself (i. e. JodaTime and Guava).\nOn second thought, I think it makes sense. The modules are small and it will make transition from dropwizard-jdbi2 a whole lot simpler.. > Concerning the documentation, I thought about having a new 'JDBI3' page with updated documentation content (although it's going to be pretty similar) and flagging the 'jdbi2' page to tell new projects that they should use the new 'jdbi3' module but existing projects can update at their discretion. Sounds good?\nSounds good to me!. I think we also need to add an integration test test to verify that Dropwizard and Jdbi3 together and you can write database access code with JdbiFactory. For example, for Jdbi2 we've got JDBITest. In my personal project, I wrote a couple tests which showcase Jdbi features, you can get an idea:\n https://github.com/arteam/dropwizard-jdbi3/blob/master/src/test/java/com/github/arteam/jdbi3/JdbiTest.java\n https://github.com/arteam/dropwizard-jdbi3/blob/master/src/test/java/com/github/arteam/jdbi3/GameDao.java\n* https://github.com/arteam/dropwizard-jdbi3/blob/master/src/test/resources/com/github/arteam/jdbi3/GameDao.sql.stg. @FredDeschenes Thank you very much for the contribution, great work! I'm going to make a RC shortly.. LGTM!. Applied to 1.2.x as 76ebbb0e04d44ccdda12f6076eac0932f85c0a80. Sounds good. I've changed the release notes for 1.3.0-rc4 and the name of the issue.. Thank you for the pull request! \nDo I understand correctly that you want to have access to the current session in an event listener? Would it be possible to start a new session/transaction? You could do it even declaratively with UnitOfWorkAwareProxyFactory.\nRegarding the implementation, I feel that removing SessionFactory from AbstractDAO would be a big issue preventing integrating this pull request to the upstream. We're trying to maintain backward-compatibility between minor releases, and such a breaking change will need to have a good justification. . Thank you for the pull request! We've made some progress in this area in 1.3.* : with #2213 you can use ftlh templates with automatic escaping. Anyway, I think it makes sense to use the HTML escaping for ftl templates by default. I will make a maintenance release for the 1.2 branch.. > I couldn't find security contact information - is that something you are planning on adding?\nUnfortunately, we don't have a security policy like Rails, Django, or Spring and don't provide a email address for secure communications. I guess Dropwizard isn't big enough for that, but having a security policy is definitely is a good practice for a mature project. For the time being, I think the best way to disclose security issues is to post a request to disclose to the dropwizard-dev mailing list and/or contact on of the maintainers privately.. > Are there email services for dropwizard.io?\nI don't think so. AFAIK, Rent the Runway sponsors the domain name which is managed by 101domain.com, but that's it. Maybe we could talk about setting up an email hosting service with them.. Yes, I've removed the explicit escaping in the test example: 8cd9bdf75c93ee6f336f871f3b54418c8872e35d As soon as the tests pass on Travis CI, I will make a release.. Unfortunately, Sonatype is down and I can't deploy the release. Will wait when they're up again..  1.2.3 has been released. I don't think you need to enable scanning for the package where the representation class is located. I think you can just enable DeclarativeLinkingFeature on the resource config returned by environment.jersey(). If Jersey still doesn't pick up the annotation, I would point breakpoints to ResponseLinkFilter and HeaderProcessor and run the app in the debug mode. Maybe there's some issue in the annotation scanning for classes generated by the Kotlin compiler.. Yes! I've updated the POM.. I think this change is justified. I can imagine situations when operations staff tries to diagnose a service by the logs and expect that the logged endpoints correspondent to actual endpoints.. @afrin216 Thank you for the contribution!. We could exclude jboss-transaction-api_1.2_spec from the Hibernate dependency and declare a new version with the Automatic-Module-Name tag in the manifest file. I think we can wait for a response from the Hibernate guys. If they won't make a new release, we will fix it on our side. . Nice!. Thank you.. Thank you.. You can use the criteriaQuery method on AbstractDao to access the JPA Criteria API. Maybe we should mark the criteria method as deprecated,. Can you use currentSession().getCriteriaBuilder()?. Thank you for reporting this! It looks like we've indeed released 1.0.5 build against JDK 9. I will release 1.0.6 build with JDK 8 and change the build profile, so the build machine always compiles Dropwizard with the 1.8 target.. 1.3.0-rc6 has been released. Please check it out:\n\nhttps://github.com/dropwizard/dropwizard/releases/tag/v1.3.0-rc6\nhttp://central.maven.org/maven2/io/dropwizard/dropwizard-core/1.3.0-rc6/dropwizard-core-1.3.0-rc6.pom. 1.3-rc6 has been published to Maven Central. Please check it out and report if the issue is still present.. LGTM!. Ah, sorry, disregard my previous comment. \n\nYou can use the excludesAttributes option to list the set of attributes to exclude. See the configuration reference: http://www.dropwizard.io/1.2.2/docs/manual/configuration.html#metrics. Doesn't seem to make any difference. Okay, it's probably some weird case of handling reflection in JaCoCo.. Thank you for reporting this! \nFirst, you can disable request compression and decompression in the application configuration: http://www.dropwizard.io/1.2.2/docs/manual/configuration.html#gzip.  Unfortunately, we don't have option to disable only decompression. \nSecond, it indeed looks like a bug in BiDiGzipHandler. It seems reasonable that it should strip the Content-Length header from the request and return -1 in its getContentLength method, because the actual content is generated dynamically. This way, the request can proxied like a chunked request.. There's some discussion in #2275 about reproducing the issue.. It looks like the tests pass with Maven... Could this be some issue with the JUnit5 integration of your IDE?. For some reason Maven skips the all tests for dropwizard-example, that's why the tests are green. Maybe it some bug in the surefire plugin, when you mix JUnit4 and 5 tests.  But, I can run the JUnit5 test from the IDE (Intellij IDEA) with one change: You don't need to invoke ResourceHelpers.resourceFilePath twice to calculate a path to the config file.. Yes, that's typo doesn't seem relevant to me, too. Can you try to isolate the issue by removing the all JUnit4 tests, so the surefire plugin picks up only the Junit5 test?. Thank you.. As an example, the time to run the test suite on AppVeyour went from 8 to 7 minutes.. Thanks for reporting this. I wrote a unit test of posting a compressed form and it looks like the client works correctly:\n```java\nhttpServer.createContext(\"/form\", httpExchange -> {\n            try {\n                Headers requestHeaders = httpExchange.getRequestHeaders();\n                assertThat(requestHeaders.getFirst(HttpHeaders.CONTENT_TYPE)).isEqualTo(\"application/x-www-form-urlencoded\");\n                assertThat(requestHeaders.getFirst(HttpHeaders.CONTENT_ENCODING)).isEqualTo(GZIP);\n                assertThat(requestHeaders.getFirst(HttpHeaders.ACCEPT_ENCODING)).isEqualTo(GZIP_DEFLATE);\n                System.out.println(CharStreams.toString(new InputStreamReader(new GZIPInputStream(httpExchange.getRequestBody()))));\n                httpExchange.sendResponseHeaders(200, 0);\n                httpExchange.getResponseBody().write(\"OK\".getBytes());\n            } finally {\n                httpExchange.close();\n            }\n        });\n        httpServer.start();\n    Client client = new JerseyClientBuilder(new MetricRegistry())\n        .using(Executors.newSingleThreadExecutor(), JSON_MAPPER)\n        .build(\"test-form-post\");\n    Response result = client\n        .target(\"http://localhost:\" + httpServer.getAddress().getPort() + \"/form\")\n        .request()\n        .post(Entity.form(new Form()\n            .param(\"grant_type\", \"client_credentials\")\n            .param(\"client_id\", \"tomas\")\n            .param(\"client_secret\", \"pa$$\")));\n    System.out.println(result.getStatus());\n    System.out.println(result.readEntity(String.class));\n    client.close();\n\n```\nAre you sure that the server supports compressed POST requests? . Right, I just verified that it prints correct data by taking a look on it.. Thanks for the proposal! If I'm not mistaken sessions are usually considered as an anti-pattern in REST backend systems because of scalability and state management issues. But I guess there are users who are willing to use Dropwizard in a more classic approach with session cookies instead of bearer tokens.. Thanks for reminding it to upgrade the website! In the meantime you can take a look at the release notes at the GitHub releases page:\n https://github.com/dropwizard/dropwizard/releases/tag/v1.2.2\n https://github.com/dropwizard/dropwizard/releases/tag/v1.2.3\n* https://github.com/dropwizard/dropwizard/releases/tag/v1.2.4. LGTM. Thanks!. > This looks really good, one question though. What ends up closing the socket connections? Do we need to worry about that?\nBoth appenders extend OutputStreamAppender which closes the underneath output stream when it's stopped. So, a TCP/UDP socket should be closed during a shut down of Dropwizard/Logback.. Sure, will do.. Thanks for the report! Could you enable debug logs, run the test again, and post the logs? Dropwizard's JerseyClientBuilder actually uses Apache HTTP Client which provides a lot of debug information about HTTP requests.\nI think we have 2 separate issues: \n JerseyClientBuilder presumably overwrites the Authorization header of your requests and you get a 403 error;\n For some reason the server you're connecting accepts only formatted JSON.. @andrewoh531 Please try to disable gzip compressing of request via the gzipEnabledForRequests property [1]. Maybe the server doesn't accept compressed requests.\n[1] http://www.dropwizard.io/1.3.0/docs/manual/configuration.html#jerseyclient. Thanks for reporting this issue! I tried reproduce it, but wasn't able to. Here's a test I used:\n```java\npublic class DoubleAppRuleTest {\n@Rule\npublic DropwizardAppRule<Configuration> RULE = new DropwizardAppRule<>(TestApplication.class, resourceFilePath(\"test-config.yaml\"));\n\n@Rule\npublic DropwizardAppRule<Configuration> RULE_2 = new DropwizardAppRule<>(TestApplication.class, resourceFilePath(\"test-config.yaml\"));\n\n@Test\npublic void canGetExpectedResourceOverHttp() {\n    Assertions.assertThat(RULE.client().target(\"http://localhost:\" + RULE.getLocalPort() + \"/application/\")\n        .request()\n        .get(String.class)).isEqualTo(\"test\");\n}\n\npublic static class TestApplication extends Application<Configuration> {\n\n    @Override\n    public void run(Configuration configuration, Environment environment) throws Exception {\n        environment.jersey().register(new TestResource());\n    }\n}\n\n@Path(\"/\")\npublic static class TestResource {\n\n    @GET\n    public String test() {\n        return \"test\";\n    }\n}\n\n}\n```\nyaml\nserver:\n  type: simple\n  connector:\n    type: http\n    port: 12000\nWhen I run it I get:\nINFO  [2018-03-13 16:12:49,909] io.dropwizard.server.ServerFactory: Starting TestApplication\nERROR [2018-03-13 16:12:49,979] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down\n! java.net.BindException: Address already in use\nA couple of questions:\n Do you customize the MetricsRegistry used in your ap? \n Do you use SharedMetricRegistries? Dropwizard by default sets up the current MetricsRegistry as shared. Maybe there's some point when your app picks up the old MetricsRegistry from the previous process.. Right, I was thinking about version conflicts. But Maven/Gradle/Enforcer plugin should be able to resolve them.. If I remember correctly, this issue popped up a couple of years ago. Please see the discussion in #1052.. Yes, unfortunately, this one of the painful points for Dropwizard. The project originally was designed to work with Logback configured from an application YAML file and the default logging configuration pokes around in Logback internals to make it work. We've managed to adjust Dropwizard to work with other logging providers (#1900, #2112), but you have to manually exclude the logback dependencies from the core and make sure BootstrapLogging is not loaded by the classloader, which is obviously a kludge. Maybe in Dropwizard 2.0 we will be able to implemented a more modular approach.. Yes, we run our tests on JDK10 with --add-modules java.xml.bind: https://github.com/dropwizard/dropwizard/blob/master/pom.xml#L381 \nUnfortunately Jersey requires it for JAXB support if I'm not mistaken. We can't do much until a modularized version of Jersey come out.. LGTM. I will to a 1.3.3 release this week with this change.. Sorry guys, I've been busy the past few weeks with other stuff. Thanks for the reminder, I will do a release today or tomorrow.. I've released Dropwizard 1.3.3 https://github.com/dropwizard/dropwizard/releases/tag/v1.3.3. Should be available in Maven Central in a couple of hours.. LGTM. You should mark request logging as external as well.. LGTM. The problem is that ResourceTestRule statically bootstraps logging. We should probably move it from the static block to a method and provide an ability not to bootstrap it.. I will port the fix to the 1.3 branch and it will be available as 1.3.2.. If nothing outstanding pops up, I will do it by the end of this week.. I mostly use it when I to build a SNAPSHOT version of Dropwizard without running the tests. I will keep an eye on it.. It didn't work for me with the quotes on my Linux machine at some moment of time, but I'm willing to believe it was a configuration issue in my OS.. Yes, shouldn't be a problem.. Thanks, I will take a look where we use empty strings with @NotEmpty and whether null values makes sense like in such cases.. LGTM, thanks for the contributing!. Interesting observation! I think you are right, and we should load the keystore based on the provided security provider in the configuration. The biggest questions for me is that KeyStore getInstance(String type) traverses all the registered providers looking for one that supports the specified type, whilst KeyStore getInstance(String type, String provider) checks only the specified provider. But I assume users who specify BouncyCastle and Conscrypt support different keystore types. . Right, so it shouldn't be possible to use TLS with BC. From the other hand, Conscrypt is a JSSE provider, but it not terribly useful for loading keystores.. It would be nice to get a reproducer of the issue with a custom provider. I come with a simple implementation of the fix https://github.com/dropwizard/dropwizard/pull/2368/commits/534cf21dc9d8b011e253f0d735e1e1adb4919330, but without a reproducer it's not very useful.. Either way is fine. If you would like to take a swing on the bugfix, go ahead!. Thanks, I will take a look.. Either way works for me! I can do it manually, but usually issues get closed automatically by commit messages from pull requests.. Closed via #2390 . LGTM, Thanks for improving the docs.. @nheitz Great work, thank you!. I am on the same boat for Dropwizard 2.0.. I like the idea of removing Guava from Dropwizard. I also have seen projects struggling to find a suitable version of Guava working with all dependencies. It looks like that the core functionality provided by Guava can be implemented just with the bare JDK, and complex stuff like caching can be delegated to Caffeine.\n@joschi I think we can avoid copying MediaType and CharMatcher, they're used only in AssetServlet. It should not be very hard to adapt handling of media types just by using strings and charsets separately.. Something like\n```java\nString mediaType = Optional.ofNullable(req.getServletContext().getMimeType(req.getRequestURI()))\n                .orElse(DEFAULT_MEDIA_TYPE);\nif (mediaType.startsWith(\"video\") || mediaType.startsWith(\"audio\") || usingRanges) {\n    resp.addHeader(ACCEPT_RANGES, \"bytes\");\n}\nresp.setContentType(mediaType);\nif (defaultCharset != null) {\n    resp.setCharacterEncoding(defaultCharset.toString());\n}\n``. @joschi I took the liberty pushing this change to the branch and running the tests on top of it.. I think we still have some Guava-related code it in the Jersey and Jackson modules. We can get rid of the dependency after we move it to a Guava module.. Good point. But, if I remember correctly, one of the points of using Bouncy Castle was to use custom keystores with big key sizes which are not supported by the default JVM ciphers. Still, it would be nice to have a stable test suite on all JVMs.. It's been merged only to the master branch. I will cut a 1.3.7 release with this change.. LGTM, thank you for the conitribution!. Closed via #2501 . Closed via #2501 . Agree with moving it toSize`. LGTM, merged!. Jetty 9.4.12 is a pretty big release - even the Jetty developers reach out to us to help to upgrade. There's also a traction in upgrading to it: I've seen several reports of major bugs in Jetty 9.4.11 and questions from users about it, so I think it warrants to be included in Dropwizard before 2.0.0.\nI will try to cut a minor release, if it doesn't break compatibility, otherwise we can do a 1.4. release.. Done. Sure, I can make another 1.2. release.. I am wondering if it might be an artifact of poor handling of networking failures by the Tomcat JDBC pool. I believe the HikariCP author run some tests: https://github.com/brettwooldridge/HikariCP/wiki/Bad-Behavior:-Handling-Database-Down, and found that the Tomcat JDBC pool can stuck during re-connecting to the database until the OS drops the TCP connections by the system timeout.. Looks great! Thank you very much for the contribution!. Let me cut a 2.0.0 release candidate. @dropwizard/committers Please review. @nickbabcock Please take another look.. > Before merging, is this only slated for the 1.3.x branch? Or what's the plan?\nIt's for the 1.3 and 1.2 branches. I've released Dropwizard 1.3.6 and 1.2.9 with this patch to Maven Central.. It is. I will cherry-pick the patch to master.. Looks like the upload was broken. I will redeploy the parent POM.. Ok, I've managed to manually deploy the 1.3.6 parent pom, should be in Maven Central in an hour. I wish releases to the Sonatype OSS repo were atomic.. I don't think so, I believe you it's possible to redeploy only missed artifacts. Dropwizard once had an issue with several broken artifacts in the Central repo, so we had to create an issue with Sonatype. It turned out some caches got corrupted, they manually busted them. Hopefully, this time it won't be so bad.. @bentmann Thank you for the heads up! I will follow up with an update the official fix.. The parent POM for 1.3.6 was missing in the original release, I've just deployed it manually. I guess JCenter will pick it up on the next sync. See the discussion in #2511.. Sigh, the Sonatype's OSS repo is really weird. I will redeploy it manually.. I've released all the missed modules for 1.3.7, they should be in Maven Central in an hour.. Hm, okay. Looks like a caching issue, I'm pretty sure the actual jar was deployed.. Hi @charbonnier666. Try to build dropwizard-bom first, so dropwizard-example can resolve its dependencies.. Fixed via #2573 . Nice one! Thanks for fixing this.. Fixed by #2587 . Thanks for pointing this out! I've updated the website to 1.3.8 with the latest release notes.\nhttps://www.dropwizard.io/1.3.8/docs/. Right, https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/docs-index.rst was not updated. I will change it in the 1.3.x branch and release as part of the 1.3.9 docs.. Good point. I've cherry-picked them onto master: https://github.com/dropwizard/dropwizard/commit/f000627a307d12280e39875da99caf685d1950d3. I would say the appenders: [] is a more idiomatic approach, but\nyaml\nserver:\n  requestLog:\n    type: external\n    enabled: false\nis effectively the same.. Here you go\n. I thought port 0 makes no sense in connecting to a remote host and in the same time I wanted to use -1 as a marker of the schema default port. Maybe \n@PortRange(min = -1)\nis a good variant because it allows to specify -1 as the port value and don't set max = 65535 in the annotation.\n. I think it's better to use the schema default port as a more expected behaviour in case omitted port. 8080 is often used port, but not a standard. And in the case of HTTPS proxies we force users to set 443 port.\n. Thanks, I missed that facility.\n. I agree.\nAnd as we now use default values for the schema and port we can omit optional types and just use 3 constructors with plain values. \n. Makes sense. We can just set  -1 as the default value and include it in PortRange annotation so validation is passed.\n. Yes, I have. \nIn the fact, I think if we would want to make address configuration in one line, we could have just use URL. And Guava HostAndPort is neither one nor the other, because we need to use schema anyway. And configuration like that\nyaml\nproxy:\n    host_port: '192.168.52.11:8080'\n    schema: 'http'\nseems unnatural for me.\n. Agree with this too. Default value is more concise approach.\n. Makes sense. \nI thought about a more classic approach to injection of test objects. Anyway loggers are cached and there is practically zero overhead to use them as non-static fields.\n. Makes sense. Fixed that.\n. Agree with that. \nIt's better to plainly  throw an exception to indicate that we don't \nsupport this method at all.\n. Fixed, thanks\n. I forgot that constants could also be imported. \nReplaced.\n. I'm more inclined to logging to the error output stream. I believe it's more suitable for this kind of messages.\nWe can redirect StatusPrinter to System.err, but also should have bear in mind that StatusPrinter for some reason is static, so we should restore it to System.out after using. How about making the output stream as a field of LoggingFactory? Something like this:\n``` java\n@JsonIgnore                                       \nprivate final PrintStream configurationErrorsStream;\n...\n@VisibleForTesting\nLoggingFactory(LoggerContext loggerContext, PrintStream configurationErrorsStream) {\n    this.loggerContext = checkNotNull(loggerContext);\n    this.errorsStream = checkNotNull(configurationErrorsStream);\n}\n...\nStatusPrinter.setPrintStream(configurationErrorsStream);\ntry {\n    printIfErrorsOccured(loggerContext);\n}  finally {\n   StatusPrinter.setPrintStream(System.out); \n}\n```\nAs a benefit, we can pass a fake stream in the test to the class in the constructor.\n. How about to replace calls to root.getLoggerContext() to loggerContext, if we already have the context as a field?\n. I think we can just call factory.stop and don't expose LoggerContext as a field. \nThe factory will close the context.\n. We don't need both folders in one test. I think it's more appropriate just to call tempDir.newFolder in every test \nand don't expose folderWithoutWritePermission and folderWithWritePermission as fields.\n. Minor nitpick. An open brace should be separated from the method parameters by a whitespace. You can just format the class in your IDE. \nNot a big issue, but such details make maintenance of the project easier.\n. It could be a solution, but the problem is that Tomcat-DBCP, which we use, doesn't handle network\nfailures. Check out this article.\n. Shouldn't we consider ThreadPoolExecutor.CallerRunsPolicy as a rejectedExecutionHandler?\nIf two health check arrived concurrently, the second one will fail even if the database is up.\n. I support this. \nConnection opening should be perfomed in the background thread. It protects us from network failures.\n. This constructor is public, so users code could depend on it. For example, someone could create a custom DBI instance from a data source and add a health check.\nMaybe we can retain it? We could use MoreExecutors.newDirectExecutorService() from Guava\nand zero duration.\n. I think it's better to make ExecutorService and Duration as class dependencies rather than method arguments.\nDoing so, we can encapsulate them in TimeBoundHealthChecks and then inject it to DBIHealthCheck and SessionFactoryHealthCheck. As the result we have a parametrized service that accepts Callables, rather than a utility method. \nSomething like this:\n``` java\npublic class TimeBoundHealthChecks {\nprivate final ExecutorService executorService;\nprivate final Duration timeBound;\n\npublic TimeBoundHealthChecks(ExecutorService executorService, Duration timeBound) {\n    this.executorService = executorService;\n    this.timeBound = timeBound;\n}\n\npublic HealthCheck.Result check(Callable<HealthCheck.Result> callable) {\n    try {\n        return executorService.submit(callable).get(timeBound.getQuantity(), timeBound.getUnit());\n    } catch (Exception e) {\n        return HealthCheck.Result.unhealthy(Throwables.getRootCause(e));\n    } \n}\n\n}\n```\n``` java\npublic class DBIHealthCheck extends HealthCheck {\n    private final DBI dbi;\n    private final String validationQuery;\n    private final TimeBoundHealthChecks timeBoundHealthChecks;\npublic DBIHealthCheck(ExecutorService executorService, Duration duration, DBI dbi, String validationQuery) {\n    this.dbi = dbi;\n    this.validationQuery = validationQuery;\n    timeBoundHealthChecks = new TimeBoundHealthChecks(executorService, duration);\n}\n\npublic DBIHealthCheck(DBI dbi, String validationQuery) {\n    this(MoreExecutors.newDirectExecutorService(), Duration.seconds(0), dbi, validationQuery);\n}\n\n@Override\nprotected Result check() throws Exception {\n    return timeBoundHealthChecks.check(new Callable<Result>() {\n        @Override\n        public Result call() throws Exception {\n            try (Handle handle = dbi.open()) {\n                handle.execute(validationQuery);\n                return Result.healthy();\n            }\n        }\n    });\n}\n\n}\n``\n. I think we don't need a queue with a size more than 1. There are no reason in preserving the pool size. In case if DB is down and 2 concurrent request happen, the situation is actually worse, because the second request wiil be forced to wait whole 5 seconds before it will be processed.\n. We created this executor and therefore should manually close it after the test.\n. How about to play it safe and set a little bigger interval? It can reduce a probability of random failures because of volatility thread scheduling  on the CI server.\n. Nitpick. Wrong tag - should be@link`\n. Do we really need to create a delegator? Why not make it just a DTO?\nRequestConfig doesn't change behavior of the client and is needed only as a value object.\nWe could just return a DTO in  the createClient method and provide 2 build methods.\n- First - public for Apache HttpClient users, which returns CloseableHttpClient\n- Second - package-protected for the Jersey bulder, which returns ConfiguredCloseableHttpClient\n``` java\npublic CloseableHttpClient build(String name) {\n   return buildClientWithRequestConfiguration(name).getClient();\n}\nConfiguredCloseableHttpClient buildClientWithRequestConfiguration(String name) {\n    final InstrumentedHttpClientConnectionManager manager = createConnectionManager(registry, name);\n    return createClient(org.apache.http.impl.client.HttpClientBuilder.create(), manager, name);\n}\n```\n. I think it's better to make a copy lazily, only in a case if there changes in the configuration.\nSomething like this:\njava\nif (timeout != null || connectTimeout != null || followRedirects != null) {\n    RequestConfig.Builder requestConfig = RequestConfig.copy(configuredClient.getDefaultRequestConfig());\n    if (timeout != null) {\n        requestConfig.setSocketTimeout(timeout);\n    }\n    if (connectTimeout != null) {\n        requestConfig.setConnectTimeout(connectTimeout);\n    }\n    if (followRedirects != null) {\n        requestConfig.setRedirectsEnabled(followRedirects);\n    }\n    return Optional.of(requestConfig.build());\n}\nreturn Optional.absent();\n. Please, use AssertJ for consistency with the rest of the codebase.\n. How about to set it as 192.0.2.0? Network 192.0.2.0/24 is defined in RFC 5737 as a non-routable.\nCurrently, on my local machine, the test connect_timeout_override_changes_how_long_it_takes_for_a_connection_to_timeout fails with NoRouteToHostException without timeout.\n. If these fields (TEST_URI, URI_THAT_CANNOT_BE_CONNECTED_TO)  are not constants, then, please, write them in the camel case and give them a private access modificator. \nAlso java.net.URI could be shortened just to URI.\n. How about making Client as a field of the test and move this call to the setup method? \n. I think we could move this logic to the exception block and throw an AssertionError if an excption has not happened. Something like this:\njava\nfinal long startTime = System.currentTimeMillis();\ntry {\n    webTarget\n            .request()\n            .get(Response.class);\n    throw new AssertionError(\"Should fail with ProcessingException\");\n} catch (ProcessingException e) {\n    final long endTime = System.currentTimeMillis();\n    assertThat(e).isNotNull();\n    //noinspection ConstantConditions\n    assertThat(e.getCause()).isNotNull();\n    assertThat(e.getCause()).isInstanceOf(ConnectTimeoutException.class);\n    return assertThat(endTime - startTime);\n}\n. Please, use System.nanoTime for interval measurement. It's a way more precise and reliable that System.currentTimeInMillis.\n. Sorry, I don't understand where number 300 is taken. Is there some dependency?\nAlso, shouldn't this assertion be isGreaterThan(DEFAULT_CONNECT_TIMEOUT);?\n. We could use zero and the OS will assign a random TCP port for the server.\nDoing so, we make the test more independent from environment.\n. It could be just test without a quote.\n. Trivial nitpick.\nPlease, add a newline in the end of the added files. It'a standard for text files on *nix systems.\nReference\n. I've checked on another machine and 10.255.255.1 works fine. It seems that my local ISP filters packets to this address. Ok, let's leave it. Travic CI doesn't complain, so we can think that this\ntest is reliable in the current test environment. \n. Got it.\n. That makes sense. Reused ErrorMessage for error message generation and testing.\n. - I beleive Jersey already takes care of propogating an original exception, if a mapping has not been found. Source.\n- Do we really have checked exceptions? commitTransaction doesn't throw any.\n. But that returns us to the original version. The whole idea is to wrap an exception to MappableException, so Jersey will try to find exception mappers.\n. Well, if we don't wrap an exception\njava\ntry {\n    commitTransaction();\n} catch (RuntimeException e) {\n    rollbackTransaction();\n    throw e;\n}\nThen testSqlExceptionIsHandled fails with 500 error.\nIf we deliberately throw DataException from a resource then the mapper works, because Jersey internally wraps the exception as MappingException. But, as I beleive, it does so only for resources, but not for application listeners.\n. Fair enough. \nThat's why I moved this change into a separate commit.\n. You are right. I just formatted the class in my IDE instinctively. \nIt was a bit of sloppy and I will try to avoid such changes in future. \n. Could we just make EndpointLogLine to implement Comparable<EndpointLogLine>?\nIf it so, we won't need to specify a comparator explicitly.\n. What do you think about using Guava's ComparisonChain? Something like this:\njava\nreturn ComparisonChain.start()\n                    .compare(this.basePath, other.basePath)\n                    .compare(this.httpMethod, other.httpMethod)\n                    .result();\n. Do we really need a TreeSet? \nBasically we don't have duplicates and don't care about speed of lookup. The only thing that we need, it's a sorted collection. We could use an ordinary ArrayList with some expected size to avoid resizing and then sort it. The collection is relatively small, so sorting should be fast. \nTreeSet has a very big memory footprint and it's not cache-friendly. I would not use it, if we have alternatives.\n. Could we pass a link to the root collection, rather then creating a new collection for every resource?\nNow it's created only to be captured.\n. We could access these fields directly from the comparator, so these getters are not needed.\n. This test will fail on Windows, because it has different line breaks (\\r\\n rather than \\n).\nCould we wrap an expected string in String.format or use a regular expression?\n. That's a reasonable argument. Let's leave it then. \n. Sure. I didn't have anything in mind which ends in 'able', so decided to go with 'Abstract'.\nPooledDataSourceFactory also looks good to me. Naming things is hard... \n. Thanks. That definitely looks more literate.\n. Could we change the signature of ConstraintViolations.determineStatus  from\njava\npublic static int determineStatus(Set<ConstraintViolation<?>> violations)\nto \njava\npublic static <T> int determineStatus(Set<ConstraintViolation<T>> violations)\nDoing so, we can avoid making a copy.\n. Could we use a shorten version Validation.buildDefaultValidatorFactory().getValidator()?\nThe Hibernate provider will be loaded dynamically and we don't test validation of Optional values.\n. We could add commons-lang3 as a test dependency to the module and use static methods of MethodUtils.\nFor example, getAccessibleMethod(getClass(), \"theIntTest\", Integer.class). \nBenefit - no checked exceptions.\n. Will just passing this work? \n. You are right, it's noo narrow. We need to make the generic type to extend ConstraintViolation<?>. Wildcard then can capture  ConstraintViolation<?> and ConstraintViolation<ConstraintViolationsTest>.\njava\npublic static <T extends ConstraintViolation<?>> int determineStatus(Set<T> violations)\n. Nit: s/Utililty/Utility\n. Nit: s/impodent/idempotent, if this word was meant.\n. Could we me make the lock final? I think it's better to always lock on final fields as a safety measure.\nMoreover, this field is not mutated.\n. Nit: s/boostrappingLock/bootstrappingLock\n. Maybe better to revert the condition? If logging is bootstrapped, we can return early.\nAdvantage is a reduction of a big if block with identation.\n. I wonder should we make this class a package protected or public... I mean, do we want its methods be visible for user logger factories or should they be closed as a part of internal Dropwizard logging mechanism? I'm more apt to to the latter. What is your opinion on this?\n. The lock could be final, because we don't mutate it.\n. It seems confusing to me that the path and the query parameter have the same name.\nLet's leave it then, if it just my personal perception.\n. Maybe we could we create a static class Resource and move both these methods there?\nIt will separate the benchmark from the test data.\n. The class can be be static\n. I think it's safe just to call iterator.next, because we know that the violation is exist.\n. Ditto\n. We probably could reuse Joiner and don't use String.format.\njava\npublic static <T> String validationMethodFormatted(ConstraintViolation<T> v) {\n        final ImmutableList<Path.Node> nodes = ImmutableList.copyOf(v.getPropertyPath());\n        String usefulNodes = JOINER.join(nodes.subList(0, nodes.size() - 1));\n        String msg = usefulNodes + (v.getMessage().startsWith(\".\") ? \"\" : \" \") + v.getMessage();\n        return msg.trim();\n    }\nMicro-benchmark, kindly provided by you, gives this on my machine:\n```\nBenchmark                                    Mode  Cnt     Score      Error  Units\nConstraintViolationBenchmark.objViolation    avgt    5   711.064 \u00b1   22.911  ns/op\nConstraintViolationBenchmark.paramViolation  avgt    5  7400.960 \u00b1 2268.245  ns/op\nBenchmark                                    Mode  Cnt     Score     Error  Units\nConstraintViolationBenchmark.objViolation    avgt    5   693.016 \u00b1  10.078  ns/op\nConstraintViolationBenchmark.paramViolation  avgt    5  6585.522 \u00b1 815.698  ns/op\n`\n. Indeed. I will refactor the tests, so they are not tied to a file-based database.\n. Thanks, forgot about that.\n. I don't think it's neccesary, because instances of `ObjectMapper` are not shared between the tests. Every test creates own instance of the mapper, so changes in it don't affect other tests.\n. Actually unber _Hibernate_ name several projects are developed: ORM, Search, Validator, NoSQL mapper, etc...\nI think, we should clarify that we mean Hibernate Validator.\n. Maybe we could change 400 to400 Bad Request`? I think, it's important to highlight it. \n. Same as above: _Hibernate_ to _Hibernate Validator_.\n. Should start with a capital letter@ValidationMethod`\n. Minor nitpic: We don't require to mark all method parameters or classes as final. This applies only to local variables, \n. Could we declare these mappers as a list? \n* ``LoggingExceptionMapper<Throwable>``\n* ``JsonProcessingExceptionMapper``\n* ``EarlyEofExceptionMapper``\nIt's seems to me that in this way they are more easy to read. \n. A subtle, but important omission. There is a whitespace at the start of the line and .. _man-validation-extending: is treated as a part the source code block.\n. Sure. Will fix that.\n. OK, shouldn't be a problem to create a copy.\n. You could just use new PersonResource(mock(PeopleStore.class)), because PeopleStore is used as a just dummy object.\n. Please, move the class to the start or to the end of OverrideDefaultExceptionMapperTest, so it's more easy to track. \n. I'm nitpicking again, but it would be great if you moved this class to the start or to the end of ResourceTestWithGrizzly. It makes the outer class more focused. \nApart from that, this looks good.\n. Nit: the parameter is called configuration, but in the Javadoc it's config.\n. Maybe better to use ImmutableSet.of() in order to be consistent with other constructor? \n. We compile against Java 7, so we could use just new POJOConfigurationFactory<>(configuration)\n. Nit: extra whitespace between else and if.\n. Nit: It's more idiomatic to place an opening brace on the same line as the class declaration.\n. What is the point of this test? Sorry, but I don't follow.\n. Maybe we could set the timeout unconditionally? We already set the default value the same as in the pool configuration, if the user doesn't specify the property.\n. Should we really replace hyphens and underscores, if we want deserialize on the result of the toString method?\nIt could return a string with these symbols. For example, something like that:\n``` java\nprivate enum CurrencyCode {\n    USD(\"united_states_dollar\"),\n    EUR(\"euro\"),\n    GBP(\"pound_sterling\");\nprivate final String description;\n\nCurrencyCode(String name) {\n    this.description = name;\n}\n\n@Override\npublic String toString() {\n    return description;\n}\n\n}\n``\n. Certainly, makes configuration more robust.\n. It implementsSchedulerwhich in turn extendsLifeCycle`. It will be closed along with the connector.\n. I used the same plugin version (just moved the plugin from one section to another). \nDo you think we should upgrade it?\n. Ok, I've amended the commit. Please review.\n. Got it. That definitely looks more neat.\nI used the same technique for maven-invoker-plugin and maven-archetype-plugin. Unfortunately I didn't manage to find a skip property for maven-shade-plugin.\n. - Could we make a comment why true is returned? From the first glance it's not obvious that HelpScreenException is not an error. \n- Maybe better to name the variable ignored instead of e? I beleive that is a common name for ignored exceptions.\n. Could we make location a local variable in the setUp method? I believe we don't use it in the test method(s).\n. Ditto, It could be a local variable in the setUp method.\n. Do we need this annotation? I believe all operations are type-safe in the method.\n. Probably no need for this, because we don't have a local variable with the same name.\n. I'm quite sure this is a false positive. @BeforeClass methods will be invoked only once per class, this is guaranteed by JUnit. I would just moved the variable assignments from this method directly to theirs declaration.\n. I would prefer AuthValueFactoryProvider not to be extended from PolymorphicAuthValueFactoryProvider.\nThis ties these classes rather highly without a need. I think we can find another ways to reuse the common code, if this is a concern.\n. Could you provide a minimal test case that uses this feature with several auth filters? I would prefer to see tests for every contributed functionality.\n. Nit: Please, remove a line break before the opening brace. In Dropwizard we follow Google Java Style Guide on this matter.\n. Nit: I think, it would be better to be consistent with AuthValueFactoryProvider and  have each bind statement (apart from the last) on one line.\n. Nit: Parameter name in the docs principalClassProvider doesn't match the actual parameter name principalClassSetProvider\n. Please, don't reformat source code without a need. It makes changes cleaner and focused.\n. Need to provide import org.glassfish.jersey.server.ContainerRequest to use the short name.\n. I believe, super() is redundant, because the Java compiler automatically inserts a call to the default constructor of a superclass.\n. Ditto for super()\n. Ditto for super()\n. Ditto for super()\n. Ditto for super()\n. Redundant imports of the java.lang.annotation package\n. I think using ImmutableSet.of(JsonPrincipal.class, NullPrincipal.class) here would be more terse.\n. We could just use the diamond type here instead explicit type argument.\n. Since Java 8 the compiler can infer such explicit type arguments, so I beleive <JsonPrincipal> is redundant.\n. Ditto for <NullPrincipal>\n. To avoid a compiler warning about an unchecked call, we should provide type argument <Principal> for PolymorphicAuthDynamicFeature.\n. Ditto. I think using ImmutableSet.of(...) is a more terse and clearer.\n. I believe it would be better to document this option in the configuration reference instead of the example configuration file. We prefer to keep it simple for users who start with Dropwizard. \n. Could you add a description of this option in HttpConnectorFactory javadoc? It would be consistent with the rest of options, which are documented.\n. I believe, the @ symbol need to be reprseneted like HTML number &#064; or be wrapped by the @literal tag. Otherwise, the javadoc tool interpretes @RunWith like a Java annotation.\n. I would prefer the description to be a little more generic. What do you think about this? \n\nWhether this connector uses a channel inherited from the JVM. Use it with Server::Starter, to launch an instance of Jetty on demand\"\n\nAlso the property need to be set in the HTTP connector YAML configuration.\n. Please, update the Javadoc too. It should be consistent with the reference docs.\n. Also, please don't forget to rebase and squash your commits. \n. Yes, that sounds more natural.\n. I agree, that's a more clear statement.\n. I think the lambda expression could be just inlined with the consumer declaration, because we don't reference it in other places.\n. I believe the @Provider annotation is redundant, because we explicitly register this exception mapper.\n. The class should be static, because it doesn't access any inner state of PersonResourceTest.\nAlso I beleive we could relax the class access level from public to private, because it's accessed only in PersonResourceTest.\n. What do you think about removing this method completely and using v.getMessage() explicitly instead? After this change, there isn't any formatting in the method, so its name now looks a little confusing.\n. Please, don't reformat lines that are not relevant to the change.  It makes the change less focused and more hard to review. \n. Agree. We should mark the logback-access implementation as default, so users should not set the type explicetly.\nBut this should be not relevant after removing of the slf4j request log.\n. Ditto for avoiding unrelated changes. A couple of places below are also affected.\n. I believe, we should mark implementation as the default in RequestLogFactory.\n. We already have a getter and setter for logFormat. I believe moving them higher doesn't provide an additional value.\n. We could probably mark that E should extends DeferredProcessingAware\n. Ditto for marking E as extending from DeferredProcessingAware\n. Dittor for extending E from DeferredProcessingAware\n. Ditto for E extends DeferredProcessingAware\n. This currently produces a compiler warning about an unchecked call. What do you think about replacing this check by a serie of checks?\njava\nfinal ImmutableList<?> filterFactories = fileAppenderFactory.getFilterFactories();\nassertThat(filterFactories).hasSize(2);\nassertThat(filterFactories.get(0)).isExactlyInstanceOf(TestFilterFactory.class);\nassertThat(filterFactories.get(1)).isExactlyInstanceOf(SecondTestFilterFactory.class);\nAs a benefit, we could get rid of hashCode and equals implementations for TestFilterFactory and SecondTestFilterFactory.\n. After another look, I beleive we could even use ImmutableList<FilterFactory<ILoggingEvent>> if we generify appenderFactory and fileAppenderFactory.\n. What do you think about moving this logic for \"normalizing\" urlPattern to JerseyEnvironment#setUrlPattern, if we expect users to invoke this method from the application class?\n. I think you could avoid to use this to reference the fields in the unit test, because there are no name conflicts.\n. I think it's not needed. You may make the change in the same PR.\n. Fair enough. @cowtowncoder, could you please publish a release jackson-jaxrs-json-provider with 2.7.3 version? It will make supporting Dropwizard a little bit easier.\n. I think, we could wrap $name, HelloWorld, and HelloWorldConfiguration.java in backticks to highlight them.\nApart from that, this is a very useful tip.\n. Probably a notice with Apache Curator's name would be sufficient .\n. You can remove this dependency, because Hamcrest is already imported to the module via JUnit.\n. I think it's better to handle checked and unchecked exceptions separately to indicate that we know what to do with checked exceptions and we can't do anything with unchecked. Something like that:\njava\n} catch (ExecutionException e) {\n    final Throwable cause = e.getCause();\n    if (cause instanceof InvalidCredentialsException) {\n        return Optional.empty();\n    }\n    Throwables.propagateIfInstanceOf(cause, AuthenticationException.class);\n    throw new AuthenticationException(cause);\n} catch (UncheckedExecutionException e) {\n    throw Throwables.propagate(e.getCause());\n}\n. Despite it's possible to have a null value for a cause for an exception, I think we can't get an ExecutionException without a cause from a LoadingCache, so it's safe to avoid this check. \n. Yeah, a copy-paste error. A kindle reminder to myself never to use git add . \n. There is a possibility, but I think we can presume that Jersey will always generate a FINISHED event, and onFinish will be called and it will clean up resources.\n. I think we could reduce this constructor to a call to another constructor:\njava\nthis(configuration, null);\n. What do you think about reducing the size of this method by using the ternary operator and several returns?\nSomething like that:\njava\nif (configuration.isVerifyHostname()) {\n    return verifier != null ? verifier : SSLConnectionSocketFactory.getDefaultHostnameVerifier();\n} else {\n    return new NoopHostnameVerifier();\n}\n. If I understand correctly, setting a HostnameVerifier means using a TlsConfiguration. What do you think about extracting TlsConfiguration to a local mutable variable?\n``` java\nTlsConfiguration tlsConfiguration = configuration.getTlsConfiguration();\nif (tlsConfiguration == null && verifier != null) {\n    tlsConfiguration = new TlsConfiguration();\n}\nfinal SSLConnectionSocketFactory sslConnectionSocketFactory;\nif (tlsConfiguration == null) {\n    sslConnectionSocketFactory = SSLConnectionSocketFactory.getSocketFactory();\n} else {\n    sslConnectionSocketFactory = new DropwizardSSLConnectionSocketFactory(tlsConfiguration,\n        verifier).getSocketFactory();\n}\n``\n. Could you please replace tabs to spaces? A nitpick, but we prefer to stick to spaces across the project.\n. Could you please also update the Javadoc for this method? In looks a lit bit wrong for me.\n- It should link toAsyncAppenderBaserather than toAsyncAppenderFactory(not-related issue to this change)\n- I think we should remove a claim about deferred processing.\n. Yes, thanks for pointing this out!\n. I think we could avoid creating a helper method and use a declarative approach with Guava'sIterables`.\nIterables.any(res.getHandlerClasses(), allResourcesClasses::contains)\n. Could you add a test for this use case (the continue branch when resource handlers are already processed)?\n. I think we could extract the regular expression to a constant as Pattern to avoid compiling it every time we invoke replaceAll.\n. Also, could you add a unit test which verifies that path cleaning works correctly?\n. Java 8's collection.stream().anyMatch() would also work.\n. I think it would be better to declare this field as Optional and initialize with Optional.empty. Doing so, we explicitly state that field's value can be absent. . If we declare fileRoot as Optional, we can initialize it with one-liner:\njava\nOptional.ofNullable(options.get(\"fileRoot\")).map(File::new). I think we could make this initialization more terse if we initialize MustacheResolver with the ternary operator and pass it to DefaultMustacheFactory.\njava\nnew DefaultMustacheFactory(fileRoot.isPresent() ? new FileSystemResolver(fileRoot.get()) :\n            new PerClassMustacheResolver(key)). I think it would be better to create an additional independent test class (which starts a new server, application, etc...) that verifies loading templates from the filesystem, rather than reusing the same renderer across different tests.. Could you please make the conn and database variables final? This will be consistent with rest of the codebase.. I think the dataSource variable could be declared without final, because it's not shared. From the other point of view, the openLiquibase method declares it parameter names as final, but it seems redundant. . It's a pity we have to change the public API, but I guess it's reasonable in this case. Let's hope not so many folks wrote custom migrations commands.. I believe you could directly instantiate Database as H2Database, rather then looking it up from the connection, because we precisely know the type of the database we connect to.. I think we could extract DBI as a variable and then use  Java-8 friendly method useHandle:\njava\nDBI dbi = new DBI(databaseUrl, \"sa\", \"\");\ndbi.useHandle(h -> h.execute(\"create schema \" + schemaName));. What do you think about chaining assert statements?\njava\n dbi.useHandle(h -> assertThat(h.select(\"select * from \" + schemaName + \".persons\"))\n            .hasSize(1)\n            .contains(ImmutableMap.of(\"id\", 1, \"name\", \"Bill Smith\", \"email\", \"bill@smith.me\"), Index.atIndex(0)));. Makes sense, will change.. Got it. Will remove the section and rebase the branch against master after #1882 merged.. Yes, this section shouldn't exist. It's a leftover from experiments on CircleCI. Will remove.. Hm, looks like mvn dependency:go-offline still fails on Dropwizard End-to-end Tests \nhttps://circleci.com/api/v1.1/project/github/dropwizard/dropwizard/25/output/11/0?file=true. Hm, the Jetty docs say:\n\nselectors - the number of selector threads, or <=0 for a default value.\n\nI guess we could use -1 for consistency with the acceptorThreads property. Another option is to switch to Optional.. That's a good idea.. After the second thought, it looks not so good. Not every process has enough permissions to write to the /var/run directory. I believe, you need to have a special directory under /var/run with the permissions for the user which runs the process.. Very good! But I think we could avoid duplication by extending JsonConfigurationFactory from YamlConfigurationFactory. We could expose the getParser method in YamlConfigurationFactory. The method will create a parser from an input stream. JsonConfigurationFactory can override this method to produce a JsonParser instead of a YAMLParser. I had something like that in mind:\n```java\npublic class JsonConfigurationFactory extends YamlConfigurationFactory {\nprivate final JsonFactory jsonFactory = new JsonFactory();\n\npublic JsonConfigurationFactory(Class<T> klass,\n                                Validator validator,\n                                ObjectMapper objectMapper,\n                                String propertyPrefix) {\n    super(klass, validator, objectMapper, propertyPrefix);\n}\n\n@Override\nprotected JsonParser getParser(InputStream input) throws IOException {\n    return jsonFactory.createParser(input);\n}\n\n@Override\npublic T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {\n    try {\n        return super.build(provider, path);\n    } catch (JsonParseException e) {\n        throw ConfigurationParsingException\n            .builder(\"Malformed JSON\")\n            .setCause(e)\n            .setLocation(e.getLocation())\n            .setDetail(e.getMessage())\n            .build(path);\n    }\n}\n\n}\n```\nYamlConfigurationFactory\n```java\nprotected JsonParser getParser(InputStream input) throws IOException {\n        return yamlFactory.createParser(input);\n    }\n@Override\npublic T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {\n    try (InputStream input = provider.open(requireNonNull(path))) {\n        final JsonNode node = mapper.readTree(getParser(input));\n    //...\n\n}\n``. I guess we could name the testprintsDetailedInformationOnMalformedJson`.. Just a nitpick, could you please add a newline symbol to the end of JSON files? That way they're displayed correctly in terminal windows.. Very nice that you use tabs to verify that we can parse any JSON file.. > It feels wrong to have a json extend yaml\nI also thought about that, should be other way around. The base factory approach looks even better to me.. I believe Maven does that by default. But I'm not sure, will try look it up.. I think we could also move to import org.hibernate.query.Query in AsbtractDAO instead of deprecated org.hibernate.Query.. I think if we open a transaction manually, it makes sense to commit manually too,. The same comment about the transaction. I think it would be more clear to commit it manually.. The same comment about committing the transaction.. Great!. I think we could make the variable private, because it's not exposed outside of the class.. A pity we can't bundle this class to Dropwizard. The users who will migrate to 5.2 will forced to copy-paste it. But we could mention something about it in the migration docs.. Copy-paste the contents. Unfortunately, previous exception mappers become invalid without it, because Hibernate changed its exceptions hierarchy.. I guess we could check the annotation's type only one time:\njava\nif (annotation instanceof Auth) {\n    // Optional auth requires that a concrete AuthFilter be provided.\n    if (parameterTypes[i].equals(Optional.class) && authFilter != null) {\n        context.register(new WebApplicationExceptionCatchingFilter(authFilter));\n        return;\n    } else {\n        registerAuthFilter(context);\n        return;\n    }\n}. I guess we could make it more concise as:\njava\nif (!parameter.isAnnotationPresent(Auth.class)) {\n    return null;\n} else if (principalClass == parameter.getRawType()) {\n    return new PrincipalContainerRequestValueFactory();\n} else {\n    final boolean isOptionalPrincipal = parameter.getRawType() == Optional.class\n        && ParameterizedType.class.isAssignableFrom(parameter.getType().getClass())\n        && principalClass == ((ParameterizedType) parameter.getType()).getActualTypeArguments()[0];\n    return isOptionalPrincipal ? new OptionalPrincipalContainerRequestValueFactory() : null;\n}. I think we could extract this block to the outer loop and also I believe we can compare classes by == instead of equals.\njava\nfor (int i = 0; i < parameterAnnotations.length; i++) {\n    final Class<?> type = parameterTypes[i];\n    // If the parameter type is an Optional, extract its type\n    // parameter. Otherwise, use the parameter type itself.\n    final Type paramType = type == Optional.class\n    ? ((ParameterizedType) parameterGenericTypes[i]).getActualTypeArguments()[0]\n    : type;. I believe we could just use == here. I think we could implement this in a more concise form as well:\njava\nif (!parameter.isAnnotationPresent(Auth.class)) {\n    return null;\n} else if (principalClassSet.contains(parameter.getRawType())) {\n    return new PrincipalContainerRequestValueFactory();\n} else {\n    final boolean isOptionalPrincipal = parameter.getRawType() == Optional.class\n        && ParameterizedType.class.isAssignableFrom(parameter.getType().getClass())\n        && principalClassSet.contains(((ParameterizedType) parameter.getType()).getActualTypeArguments()[0]);\n    return isOptionalPrincipal ? new OptionalPrincipalContainerRequestValueFactory() : null;\n}. I think we could add a precondition check that underlying should be not null. I guess we could omit the parentheses around principalOpt.isPresent. I think it's always a good practice, because we generally don't control the thread which loads DefaultServerFactory. There is a lot of people who use Dropwizard within app servers.. Oh, right! I forgot about the differences between JTA 1.1 and JTA 1.2. I guess we need to remove JTA 1.1 from jackson-datatype-hibernate5 then.. I would rename someList to sourceList for clarity and elementToAddIfNotPresent to addedElement for terseness.. Right, it breaks with a time zone in the custom format (like GMT-02:00). Let's then remove the check for available time zones and just use TimeZone.getTimeZone as Jackson if the zone id is not system.. The method should be invoked in that case, but that a good idea in the spirit of defensive programming. I'm not a big fan of  reversed conditions (they don't look natural for me), so I will just use Strings.nullOrEmpty.. I like the last proposed solution with delegating the lookup.. I think it would be better to make a null check instead of catching a NPE.. Please declare the variable as final for consistency with rest of the codebase.. I think it would be better to declare the triggering policy after the rolling policy has been initialized. Doing so, we keep it more close to its initialization and make the code more easy to understand for the reader.. I think the builder variable could be omitted because it's used only once.. I think we could use AssertJ's exception assertion, which looks concise and provide a more wide range of assertions than the ExpectedException rule. Something like that:\njava\nassertThatNullPointerException()\n            .isThrownBy(() -> cached.authorize(principal, role))\n            .isSameAs(e); . Agreed. Updated to HTTP/2.. Good idea. Updated.. We could use a boolean primitive here with default value of false, because an executor by default doesn't have the \"Remove on cancel\" policy.. I don't think marking parameters as final provides any advantage. They are not mutated and our style guide doesn't require it, We use final only for local immutable variables.. If removeOnCancel were a boolean primitive we could avoid a condition block.. We use AssertJ for assertions in new unit tests. It would be great to rewrite the assertions in the \"fluent\" AssetJ style, because that's way they are more readable and IDE-friendly. . It probably makes sense to extract LifecycleEnvironment to a field to avoid its declaration in every test.. The super() call seems redundant.. You could avoid using times(1) because it's the default behavior of the verify call.. I am also not a fan of unit tests with Reflection, especially considering most of them will fail on the new builds of Java 9, but in this case it should be good to go. Let's hope Apache Http Client will provide public accessors in future versions.. Yes, that makes sence!. Yes, it will be probably a better approach.. But the issue is that the connector is set up on the client level, not on the request level. It's not possible to have different connectors for different requests. \nIf we want to customize it on the request basis, I think we need to go in the direction of handling ClientProperties - the same way as it's done for timeouts. . Could you give an example how does it suppose to look with the predicate? AFAIK, the only possible way to customize a request in Jersey is to use client properties, e.g.:\njava\nclient.target(testUri + \"/long-running\")\n   .property(ClientProperties.READ_TIMEOUT, 5000)\n   .request()\n   .get(). I got it. I guess it makes sense to provide the user with the ability to control which requests they want to see as repeatable.. Updated, now use a Predicate for checking if the entity is a repeatable.. That's a mess. Let me think it over.. I think we could just inline the stream to the constructor without declaring a variable.. Nit: please declare input as final for consistency with the rest of the codebase.. It seems this variable could be inlined, too.. I would prefer to extend this class from InputStream and declare the InputStrem as a field instead of extending from FilterInputStream. Using FilterInputStream doesn't seem to provide any advantage considering we override all the methods anyway to handle exceptions.. I think it makes sense  to add a generic method for handling an IOException instead of repeat the logic in every method. Something like:\njava\nstatic BadMessageException handleException(String format, IOException e) throws IOException {\n        if (e instanceof ZipException) {\n            return buildBadDataException(format, e);\n        } else if (e instanceof EOFException) {\n            return buildPrematureEofException(format, e);\n        } else {\n            throw e;\n        }\n}. Could you also add a test case that an IOException from the delegate is propagated?. Shouldn't the variable be volatile? It's written in a Jetty's app thread and read in a test executor thread.. Done. Done. Done. It looks to me it makes sense to represent included boolean options as a set:\nyaml\ninclude:\n  - remoteAddress\n  - remoteUser\n  - requestTime\nor\nyaml\ninclude: [remoteAddress, remoteUser, requestTime]. Yes, that's makes much more sense.. Will do. Should be easy to implement and a nice feature for simplifying configs!. Right! I will add some examples from the commit.. Good idea! I will use ImmutableSortedSet from Guava for that (the same behavior, but it's a contagious set and provides a better memory layout than TreeSet).. Good catch!. Looks like a good idea. https://github.com/logstash/logstash-logback-encode and https://github.com/mp911de/logstash-gelf support filtering of MDC, so it makes sense to us to support it too. . this seems to be redundant, because there's no superclass for JdbiFactory which has a method with the same name.. I think it would be more clear to make a check that the extension method doesn't exist and exit early.\njava\nif (extensionMethod == null || extensionMethod.getType() == null || extensionMethod.getMethod() == null) {\n            return originalResult;\n}. It would be nice to have a simple unit test for NamePrependingTemplateEngine to verify that it actually inserts comments to the query.. times(1) seems to be redundant, because verify by default checks that the call has happened only once.. The handle.execute method returns int instead of void, so we can use the when().doAnswer form.. The answer method can throw exceptions, so we can avoid catching the exception.. Could you please use an AssertJ assertions for consistency with rest of the codebase?. I guess the file also should be named LoggingJdbiExceptionMapper instead LoggingJDBIExceptionMapper. Because the method returns an integer, I think we could just use thenReturn(0). It seems that we could extract preparing of executorService, validationQuery, jdbi and handle to a setup method and share it between the tests.. I think it would be nice to shutdown the executor in a tearDown method, so even if the test fails, we correctly close resources.. I would increase timeout from 5ms to 100ms. 5ms is too little to get a result from a new thread. The test may fail with a timeout while the new thread is being scheduled to run.. I would increase the timeout, because a test with 5ms timeout can fail sporadically, not because we actually wait for a result from the database.. I think we could extract preparing of the variables to a setup method and share it between the tests.. On second thought, I think it would be better to use try (Handle handle = jdbi.open()) instead of withHandle. The biggest advantages of lambda-expressions is that we could use a short-form for one-line calls or even reference a method. Here we use two commands, so basically the both expressions require the same amount of code. At the same time the former version is easier to test.. Thanks for reporting this! I've created #2279 to fix the output.. I've been thinking about this too. I guess the biggest issue is that we use different mechanisms for building SSLContext's: Jetty's and Apache HTTP Client's and most of the code is Jackson deserialization code. There's also a mismatch between using it on the server and client sides. I think for the time being, it should be good enough as it is, but we can extract it, if we implement another SSL/TLS client or server.. I agree, that WARN should be good enough. If a keystore is still supported by the default JVM providers, I don't see a reason not to load it.. Rolled back. Rolled back. Those files will be created in the /tmp directory on UNIX-systems and the OS will automatically take care of cleaning them. I agree that explicit removing is better, but we use temporary files sparingly in the test suite, so that shouldn't be an issue.. Absolutely. I've added check for the exception message here and in the duration test case.. I haven't, but that makes a hell of a lot sense to me. I had presumed DurationDeserializer.INSTANCE is package protected.. ",
    "rkapsi": "Then make it at least possible to do it programmatically. \n. There is actually something else necessary to get it working... Closing and opening a new PR.\n. Correct. Sorry for the wording. GzipFilter#init() sets the _excludeMimeTypes field to true (the _mimeTypes Set becomes a blacklist) and it adds a bunch of image, audio, video and compressed related MIME types...\nPlease take a close look at GzipFilter#_excludeMimeTypes how it's being initialized and how it's being used in GzipFilter. It controls if GzipFilter#_mimeTypes is a white or blacklist. \n. I'm in the same boat as @justrudd. We use Logback with Groovy configuration, EvaluatorFilters, custom Conversion word options, Markers and whatnot.\nOur current solution is to brute force reset DW's configuration. Something along the lines of... \nvoid reset() {\n  ILoggerFactory factory = LoggerFactory.getILoggerFactory();\n  LoggerContext context = (LoggerContext)factory;\n  context.reset();\n  ContextInitializer initializer = new ContextInitializer(context);\n  initializer.autoConfig(); // load logback.xml or .groovy from classpath\n}\n. All that's needed is a flag in the YAML file that tells Dropwizard to skip the logger configuration. \n. +1\n. ",
    "simoncollins": "Oops .. sorry about that. Thanks Chad.\n. ",
    "mcarrierastonish": "Really good insight...I'll port to a third-party library (and spend some time trying to tease the different concepts apart).\nIf you take the implementation out of this is the concept (DB \"routing\") something that you would be interested in incorporating into Dropwizard at some later date? \n. I believe this issue can be marked as closed because of #663.\n. Not quite sure why the travis build failed, mvn verify seems to build successfully locally. I have no problem fixing the build but am unsure of what I need to do.\n. +1\nThis seems to be a design choice made by the initial author/s. There are multiple areas in the codebase where things are finalized or hidden. I personally would love to see a migration towards easing extensibility of the core codebase.\n. The original if statement looks good to me.\nOn Aug 8, 2014, at 10:42 AM, Xabier Laiseca notifications@github.com wrote:\n\nIn the JerseyClientBuilder class 'build' method there's this code:\nif ((environment == null) && (executorService == null) && (objectMapper == null)) {\n    throw new IllegalStateException(\"Must have either an environment or both \" +\n                            \"an executor service and an object mapper\");\n}\nBased on the exception message the condition seems to be wrong. My understanding is that it should be like this:\n(environment == null) || ((executorService == null) && (objectMapper == null))\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry looked at it too quickly previously.\n\nThe following case is not handled correctly if the exception message is correct:\nenvironment == null, executorService == null, objectMapper != null\nBut your conditional would throw an ISE in this case:\nenvironment == null, executorService != null, objectMapper != null\nI think you meant to change the conditional to the following:\n    (environment == null) && ((executorService == null) || (objectMapper == null))\nDoes that make sense?\n. No worries!  I did the same thing with my reply.  I'll issue a PR for this, thanks for finding it!\n. +1, if you need a hand let me know.\n. #663 Should provide a solution for you.\n. @dblezek The fix is for 0.8. I had to create my own version of the Hibernate4Module to accomplish the same thing for 0.7.1.\n. I would like this feature as well.  IMO I would like a configuration option:\nlogging:\n    printConfig: (onFailure | onStartup)\nI currently do this outside of dropwizard in deployment scripts and will gladly lend a hand.\n. @kmejka Currently I am not dumping the defaults just the actually file itself.\n. @kmejka Exactly, and I'm only dumping the file on failure. It helps in debugging deployment failures. I could see why the defaults may be helpful, but that has not been a need of ours.\n. We're currently doing exactly what you are describing with aspectj. I'll see if I can open source it early next week.\n. @dotCipher We recently just got acquired and I'm having to work through the open-sourcing policies here, it may take some time before I can actually get this available.  Meanwhile you can take a look at https://github.com/mattcarrier/metrics-aspectj which is basically the same principals but just using codahale/metrics instead of the UnitOfWork annotation. If you have any questions feel free to message me.  Meanwhile I'll continue on trying to get this open-sourced.\n. ",
    "64BitChris": "Yes, this is for metrics and requests logs.  Currently this case shows up as a 500 in both.\nAs for 400 vs 204 - the request that the client sends in isn't necessarily unprocessable, it just wasn't processed before the client disconnected (for whatever reason) and happened to happen in the JSON processing section of the code.  \nWe also considered 429 and 499, but those didn't seem to be consistent with the behavior of what happens when a client disconnects after the Resource code block has been entered and before it completes.  In this case, the process continues and the actual response that the client would have received (usually 200) is logged in the request logs.  Maybe that needs to change in a broader sense, so that we can distinguish between responses that go back to the client and ones that the client walked away from.  204 is what we came up with as it implies that nothing would be sent back to the client (as they walked away at a point where we couldn't continue) - but we're definitely open to using a different code, if it made more sense and was consistent with other client disconnect behavior.\nSorry for the delay in replying here, I didn't see this until 20 days after you replied - thanks for getting back to us!\n. ",
    "simoncurd": "Hey - just out of interest, wondered why you've not merged this documentation fix?\n. ",
    "andrewlook": "No worries, was happy to help with this feature.\nAny other low-hanging fruit on properly getting joda plugged into JDBI,\nlike datatypes besides DateTime? It would be great to do a good job on thia\nfeature while I have time.\nOn Sep 17, 2013 3:19 AM, \"Nick Telford\" notifications@github.com wrote:\n\nThanks Andrew, this totally slipped by me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/dropwizard/pull/388#issuecomment-24577435\n.\n. \n",
    "samandmoore": "doh, sorry, I coulda sworn I searched before I created this. sorry. thanks for the quick response.\n. ",
    "Randgalt": "Where do I set  startAsRoot? I don't see it in the code.\nFYI - I worked around it by overloading createThreadPool in DefaultServerFactory (which I was using anyway) ala:\njava\n        DefaultServerFactory factory = new DefaultServerFactory() {\n            @Override\n            protected ThreadPool createThreadPool(MetricRegistry metricRegistry) {\n                ThreadPool threadPool = super.createThreadPool(metricRegistry);\n                if (LifeCycle.class.isAssignableFrom(threadPool.getClass()) ) {\n                    // temp fix for https://github.com/dropwizard/dropwizard/issues/402\n                    environment.lifecycle().manage((LifeCycle)threadPool);\n                }\n                return threadPool;\n            }\n        };\n. OK - that does fix it. What's the implication, though? We won't be running our apps as root. Does that matter?\n. These changes seem to have been lost. What happened? Currently, JerseyClientBuilder doesn't use retry handler, etc.\n. Thank you\n. Thanks!\n. FYI - I wrote a Dropwizard/Guice integration that (AFAIK) works with Dropwizard 1.0.0: http://soabase.io/guice.html\n. http://soabase.io/guice.html\nI wrote this which is compatible with the old Jersey-Guice but works with Jersey 2.0\n-Jordan\n\nOn Apr 18, 2016, at 3:53 PM, Andrew B notifications@github.com wrote:\nThe current module that we use for Guice integration, com.hubspot.dropwizard:dropwizard-guice is no longer updated and is falling far behind the current version of Dropwizard. (See HubSpot/dropwizard-guice#79 https://github.com/HubSpot/dropwizard-guice/issues/79 )\nDo any third-party modules enable Google Guice usage on Dropwizard 1.0.0-rc2, or is there another recommended way to perform dependency injection in 1.0.0-rc2 ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub https://github.com/dropwizard/dropwizard/issues/1522\n. \n",
    "vadims": "@nicktelford I looked at the patch and it didn't seem like it needed 9.1.0. After testing locally it seems the issue is resolved.\n. It would be nice to get this change merged. Are there any objections?\n. @skamille yep, patch is updated\n. @skamille are there any blockers on getting this merged?\n. @nicktelford any way this can make the 0.7 release?\n. I think AsyncAppender is new for 0.7 and without this patch you're going to have truncated output. I think we originally noticed that the db migrate command did not output all the migrations that it ran.\n. @nicktelford this should probably be included in 0.7 since it fixes a regression from 0.6.2?\n. @nicktelford this is a regression from 0.6.2 to 0.7, since the jetty behavior changed from version 8 to 9.\n. I added a test, but it's a bit complicated and requires port 9080 to be available. If you have any other ideas to simplify this let me know :)\nAlso, I didn't think it made sense to duplicate it for the SimpleServerFactory.. what do you think?\nYou can verify that without the StatisticsHandler the test fails. \n. See https://github.com/eclipse/jetty.project/blob/master/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java#L174 and https://github.com/eclipse/jetty.project/blob/master/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java#L184\nIf you want to pass in server.getThreadPool(), then you should unmanage it afterwards.\n. ",
    "mss": "Forgot to mention that this is v0.6.2.\n. I was wrong about my naive implementation since I used the wrong Client. Here's an even simpler testcase:\n```\npublic class TestMain {\n    private final static Logger LOGGER = LoggerFactory.getLogger(TestMain.class);\nprivate final static String URL = \"http://127.0.0.1:8000/\";\n\npublic static void main(String[] args) throws Exception {\n    Client client = new ApacheHttpClient4();\n    LOGGER.info(\"Requesting {} with {}...\", URL, client.getClass().getName());\n\n    client.setChunkedEncodingSize(null);\n    client.addFilter(new LoggingFilter());\n\n    WebResource.Builder builder = client.resource(URL)\n            .type(\"application/json\")\n            .entity(new HashMap<String, Object>());\n    builder.post();\n}\n\n}\n```\nThe bug seems to be in ApacheHttpClient4Handler which essentially renders the wrapping BufferedHttpEntity useless: It will call getContent via EntityUtils.toByteArray to pull in the data into the buffer but the anonymous AbstractHttpEntity will just return null in line 257. Duh.\nAlternatively this would work if the JacksonJsonProvider returned the actual size when getSize is called. Still digging to see if I can wrap that...\n. Filed with patch against Jersey as JERSEY-2126.\n. Forgot to update this issue: This will be fixed in Jersey 1.18\n. Ironically, we were affected by this issue only in a test-environment where I whipped up an API mock via a lighttpd instance. In production the API we call is served by Apache which isn't affected.\nJersey 1.18 won't disable chunked encoding on uploads by default (because it will have to buffer the whole request in RAM) but since I will have to port our service from Dropwizard 0.6.2 to 0.7.0-rc1 soon anyway I will see that I turn our current hack into a patch for v0.7.\n. I don't know, I have followed neither the Dropwizard nor the Jersey development the last few months. If it is fixed it can be closed of course, there is a testcase posted above which can be tested against any lighttpd setup (just apt-get install lighttpd).\nIIRC Jersey 2 still uses Chunked encoding per default (cf. JERSEY-2224) so probably Dropwizard needs a config option.\n. @helsing probably too late but you can find a branch called jersey-1.18.1 in my fork which should work IIRC. Or we did use a patched jersey JAR, can't really remember.\n. ",
    "sunshineo": "I believe I encountered the same problem in a different way. I was trying to use the client generated by dropwizard to talk to a bitcoin http JSON RPC server (Not sure what server it is but likely to be whatever bitcoin c++ magical code). The vanilla jersey client works like a charm but the one build by dropwizard simply does not work. I thought the root cause was because the underlying HttpClient used when create ApacheHttpClient4Handler is InstrumentedHttpClient\nThanks for the post mss!\n. @utsab-banerjee What is your dropwizard version? I'm using 1.0.0 and environment does not have a method \"getJerseyResourceConfig()\"\n. In the HibernateBundler, overwrite another method and put in those 2 lines.\n. ",
    "reines": "I've opened #759 which adds a configuration parameter allowing disabling of chunked encoding.\n. This was fixed by 444661de6776ae1b86cc0510f3db0db0b3745cdd.\n. I can buy that, but is it really the place of the framework to set a hard maximum in the off chance that someone misconfigures something? The change is simply removing the maximum limit, not changing any defaults or recommendations.\nHaving an external process to work around an arbitrary limit that is imposed just incase some people use it poorly seems crazy.\n. Thanks Nick :)\n. So this behaviour actually seems to be coming from Jetty. Specifically the ServerConnector accepts a single Executor that is used to run tasks for handling requests, acceptors and selectors.\nThe only solutions (without changes to Jetty) that I can see are:\n- Validating the configuration and failing to start.\n- Count instances of HttpConnectorFactory when constructing the servers thread pool and adjust accordingly. This is clunky because it requires the ServerFactory to care about the type and internal workings of the connectors.\n- During building in the HttpConnectorFactory adjust the size of the servers thread pool to add enough threads for the acceptor and selectors. This is clunky because it requires the HttpConnectorFactory to care about the type and internal workings of the ThreadPool.\nA patch to allow Jetty to use different executors for handling requests versus acceptors and selectors would be fairly simple, perhaps that is the best route here?\n. I've submit a bug for this against Jetty, though it is arguable what the correct solution is, and actually whether this is a bug in Jetty, or whether they expect us to be doing this calculation ourselves.\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=436987\n. I believe so, or at least it does in master, I didn't specifically check the 9.2.0 tag.\n. It looks like this has already been fixed in 5545d1e09ee548c2b51452b2499f1172fdf5b7e0. Though I'm not sure how that gets built and pushed to the gh-pages branch?\n. I can't manage to reproduce this, in 0.7.0, though based on your snippet I assume this is with Dropwizard 0.6.2?\nCan you provide a test case, or some snippets of your request construction and resource definition?\n. This seems slightly awkward to do without breaking backwards compatibility - the default behaviour is to create set a maximumPoolSize > corePoolSize, using an unbounded queue - in other words, the default behaviour violates this constraint.\n. Arg caught by renaming it with case changes only (from EarlyEOFExceptionMapper to EarlyEofExceptionMapper).\n. Ah perfect, cheers.\n. I had a couple of follow up ideas for this:\n- Should I put the timeZone configuration field back, and use it to build the default logFormat to preserve backwards compatibility? It's redundant, but would be easy and avoid any upgrade pain.\n- Does it make sense to default the access log format back to the same as the previous format?\n. @cernautan the changes in this PR fixes both of these issues :) It just needs the PRs for logback-access to be accepted (I bumped them today on the logback mailing list).\n. These changes have now been merged in to Logback master and will be available in Logback 1.1.3.\n. @stuartgunter The timezone option is actually implemented by just injecting it in to the default log format string, so to make matters more confusing, if the user specified a timezone and a log format, the timezone would be totally ignored.\nRe-thinking about this I would tend to agree about removing it, though I did actually add it back in this PR for backwards compatibility. I'd love to hear thoughts from some of the Dropwizard committers on this - I can swing either way (and already have - originally removing it, then later adding it back).\n. Ah good call about patch, I missed it since it isn't part of the JAX-RS HttpMethod methods. I've added it in now.\nThere's already a couple of minor tests there, but sure I'll add a few more that test the filter as part of as JerseyTest.\n. Cheers guys. I've now rebased this against master, squashed the commits, and added it to the reference documentation.\n. I'm actually struggling to find any documentation for the HttpClientConfiguration options.\n. I'm happy to add the documentation (including this change), though I guess that means it's a separate issue/PR.\n. Yeah it looks like this has been updated in master, just the latest docs hasn't been built and put online yet.\nhttps://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/testing.rst\n. Cheers, I've put something in to that effect (though I tried to keep it brief to fit in with the length of all other descriptions).\n. Ah, in GitHub terminology a \"pull request\" is a request to have your changes pulled in, rather than a request to pull the source. The URL you want is the clone URL on the right side of the project page.\n\n. Sounds reasonable. I was a bit undecided there as well, but thought maybe having the exclusions in place to untie us from Logbacks dependency wouldn't be a bad thing.\nSince 1.7.7 doesn't really add anything useful for us anyway I'm happy to wait - feel free to close this.\n. Ah sorry I missed that deprecation, fixed now.\nYeah I'll try keep an eye out for the release of 2.4.1 and update this PR when it arrives.\n. Ah cheers for the Google groups link, I saw 2.4.1 appear in maven central, but the release notes still say not yet released so wasn't sure of the status.\nI'll give it a test and update the PR this afternoon.\n. I've updated this to 2.4.1 now. Tests are passing and example project is fine.\nLooks like jackson-datatype-joda 2.4.1 and jackson-databind 2.4.1 still actually depend on jackson-annotations 2.4.0 for some reason so I had to add exclusions and explicitly depend on jackson-annotations 2.4.1 in dropwizard-jackson to make the enforcer plugin happy.\n. Ah that makes sense, yeah as @jplock says there was previously a jackson.api.version and jackson.version, and I upgraded both of them to 2.4.1. I'll change jackson.api.version back to 2.4.0 and add a comment as to its use.\n. Looks like the build failure was unrelated (connection reset during download of hibernate dependency). Is there a way to kick off a rebuild?\n. While I'd agree with the point about removing not-Dropwizard boilerplate being good for showcasing Dropwizard specific features, I feel introducing Lombok to the example is going to confuse people who aren't used to Lombok.\n. Does it sound reasonable for the PermissiveEnumDeserializer to check for either name() or toString() matching?\n. I like it. For consistency sake perhaps we should do the same for Duration?\n. The first problem would be fixed by #440, which I believe @ryankennedy is working on right now - the problem is SNAPSHOT builds aren't currently published. You can solve this by building the entire project locally, rather than just the dropwizard-example submodule.\nYour second issue implies you have an old JDK (pre 1.7) installed. Dropwizard requires Java 7 or later.\n. I've opened a PR (#757) which implements this.\n. Imports fixed, thanks.\n. Not sure why this build failed, it passed on oraclejdk8 though froze on DefaultServerFactoryTest with oraclejdk7. Is this a flaky test?\n. I've simplified compareTo as suggested. I'll open a new PR for the same change to Size.\n. It's related - ObjectNode.put() was deprecated in 2.4. ObjectNode.set() has the same behaviour, but returns a reference to the ObjectNode rather than the replaced value.\n. I guess the only thing is it avoids doing a conversion so should be more\nefficient. I don't feel strongly either way, but I do think the 2 classes\nshould behave the same way.\nOn 23 Oct 2014 09:19, \"Jochen Schalanda\" notifications@github.com wrote:\n\nIn dropwizard-util/src/main/java/io/dropwizard/util/Duration.java:\n\n@@ -149,4 +149,27 @@ public String toString() {\n         }\n         return Long.toString(count) + ' ' + units;\n     }\n+\n-    @Override\n-    public int compareTo(Duration other) {\n-        if (count == 0 && other.count == 0) {\n-            return 0;\n-        }\n  +\n-        // this is negative, other is non-negative\n-        if (count < 0 && other.count >= 0) {\n\nI see that this is symmetric to the implementation in Size but are these\nshort circuits really necessary? Long#compare() will usually just do the\nright thing\u2122.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/757/files#r19264268.\n. \n",
    "helsing": "I am working on a project that experiences this exact problem using dropwizard 0.7.0. Is there a workaround that I can use when using that version, or possibly 0.7.1?\n. It seems Jersey internally handles any WebApplicationException prior to any custom registered exception mappers. I have not found any way to customize this behavior unfortunately. \nHave a look in the class org.glassfish.jersey.server.ServerRuntime and do a search for 'WebApplicationException' you'll find what happens.\n. ",
    "grahamoregan": "I've added #408 for core, hibernate and migrations. I had already updated core so I'd missed your PR but I've also updated the code samples, perhaps we could merge these?\n. Snapshots aren't being deployed to Nexus at the moment, you could install the snapshots locally or use the 0.7.0 RC\n. I think it is worth documenting both, it isn't uncommon to use servlets and servlet filters in dropwizard apps, perhaps we need separate sections for common servlet and jersey configurations? \nIn relation to this PR, changing the title to Jersey Filter to differentiate might be better and we could look at separate sections later?\n. @lagrwilson you can run as many instances as you'd like but each one needs its own configuration file so the port numbers don't conflict. There isn't a built-in command, just java -jar app.jar server config-1.yml then java -jar app.jar server config-2.yml\n. ",
    "glennmcallister": "I read through most of the these changes when they were first posted, and IIRC they looked pretty good. I haven't dug back into the configuration classes to verify that the config reference matches up 1-to-1 (gotta love day jobs), but the content as written looked good.\n. It's io.dropwizard:dropwizard-core:0.7.0-rc1 ; the group changed a while back since Coda hasn't been with Yammer for a while and there was a desire to move Dropwizard to it's own organization.\n. Try here:\nhttps://oss.sonatype.org/content/repositories/public/io/dropwizard/dropwizard-core/0.7.0-rc1/\nLast updated Jan 31st 2014 from what I can see. Could do with a refresh,\nbut certainly more up to date than the snapshot you are looking at.\nGlenn McAllister | Staff Engineer - Operations | Proofpoint, Inc. |\nToronto, Canada\nhttp://www.proofpoint.com/ | http://www.linkedin.com/in/glennmcallister\nLeave the past behind. Smile every day. Never wear underwear. I don't know.\nInspirational sigs are hard.\nOn Tue, Feb 25, 2014 at 1:52 PM, hslater notifications@github.com wrote:\n\n@nicktelford https://github.com/nicktelford Thanks! It doesn't look\nlike\nhttps://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/0.7.0-SNAPSHOT/has been updated since Sept 2013, is it likely a new snapshot with these\nchanges will be deployed any time soon?\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/477#issuecomment-36043418\n.\n. Please wait. This is too big a change this late in the game for 0.7.\n\nGlenn McAllister | Staff Engineer - Operations | Proofpoint, Inc. |\nToronto, Canada\nhttp://www.proofpoint.com/ | http://www.linkedin.com/in/glennmcallister\nLeave the past behind. Smile every day. Never wear underwear. I don't know.\nInspirational sigs are hard.\nOn Mon, Mar 24, 2014 at 1:13 PM, Nick Telford notifications@github.comwrote:\n\nWhile this is definitely a good idea, I'm quite hesitant to merge this for\n0.7.0 so late in the development cycle. Would you mind if this waited until\npost-0.7?\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/504#issuecomment-38472200\n.\n. To be clear, this has been resolved in 0.7.0-rc3. Boyd, could you please\nverify the fix in the release candidate so we can sign off on it and speed\ngetting this out the door?\n\nThanks,\nGlenn McAllister | Staff Engineer - Operations | Proofpoint, Inc. |\nToronto, Canada\nhttp://www.proofpoint.com/ | http://www.linkedin.com/in/glennmcallister\n\"We burn the present for the sake of a brighter future and act surprised\nwhen all it holds is ash\" - Zack Morrison\nOn Sat, Mar 29, 2014 at 11:04 PM, Boyd Meier notifications@github.comwrote:\n\n@skamille https://github.com/skamille, you are correct. Thanks for the\nmerge!\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/505#issuecomment-39016229\n.\n. Running on the assumption that htmlunit uses standard class name\nconventions for log categories, wouldn't this turn off the annoying logging\nfor you? And if it doesn't, that's probably a bug:\n\nlogging:\n  loggers:\n    com.gargoylesoft.htmlunit: OFF\nOn Fri, Oct 10, 2014 at 8:54 AM, Supagoat notifications@github.com wrote:\n\npparth: I would argue that without the ability to shut of logging from\ncertain packages, dropwizard fails to meet its production-ready statement.\nWe should not be forced to choose which 3rd party libraries we use based on\ntheir log output.\nAs an example, I'm using htmlunit for some scraping. It logs incredibly\nverbosely (hundreds of lines for a single page view) at the WARN level for\nthings that, to me, are irrelevant. The library otherwise works great for\nme, but I can't have it throwing all that garbage into logs, and I don't\nwant to switch all my info logging to the ERROR level just to use it with\ndropwizard.\nI have no need for a massive logging framework. I don't see why this is\nsuch an all-or-nothing concept for you. I fully support the configuration\nof dropwizard logging through its yamls with the option to override with\nthe almost-as-simple logback.xml (or groovy) configuration.\nAnyway, rkapsi's workaround is sufficient for my needs so I'll continue on\nevaluating dropwizard for production use.\nNow, if as kilemensi says, the yaml configuration in .8 can handle this,\nthen I'll be satisfied.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/567#issuecomment-58651237.\n. Should have pointed out that Ted Young reminded me of that configuration in\nhis other email, even though I was looking at the code just yesterday. :)\n\nOn Fri, Oct 10, 2014 at 9:35 AM, Glenn McAllister \nglenn.mcallister@gmail.com wrote:\n\nRunning on the assumption that htmlunit uses standard class name\nconventions for log categories, wouldn't this turn off the annoying logging\nfor you? And if it doesn't, that's probably a bug:\nlogging:\n  loggers:\n    com.gargoylesoft.htmlunit: OFF\nOn Fri, Oct 10, 2014 at 8:54 AM, Supagoat notifications@github.com\nwrote:\n\npparth: I would argue that without the ability to shut of logging from\ncertain packages, dropwizard fails to meet its production-ready statement.\nWe should not be forced to choose which 3rd party libraries we use based on\ntheir log output.\nAs an example, I'm using htmlunit for some scraping. It logs incredibly\nverbosely (hundreds of lines for a single page view) at the WARN level for\nthings that, to me, are irrelevant. The library otherwise works great for\nme, but I can't have it throwing all that garbage into logs, and I don't\nwant to switch all my info logging to the ERROR level just to use it with\ndropwizard.\nI have no need for a massive logging framework. I don't see why this is\nsuch an all-or-nothing concept for you. I fully support the configuration\nof dropwizard logging through its yamls with the option to override with\nthe almost-as-simple logback.xml (or groovy) configuration.\nAnyway, rkapsi's workaround is sufficient for my needs so I'll continue\non evaluating dropwizard for production use.\nNow, if as kilemensi says, the yaml configuration in .8 can handle this,\nthen I'll be satisfied.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/567#issuecomment-58651237\n.\n. Yeah, the documentation still needs work, particularly on the config\nreference side, although some very good progress has been made. I wanted to\nhelp on that front, but a lot of restrictions have been put in my way on\ncontributing when I'm at work (my employer, not the Dropwizard team) and my\nfree time is pretty limited so I haven't made any headway. :(\n\n\nOn Fri, Oct 10, 2014 at 9:42 AM, Supagoat notifications@github.com wrote:\n\nGlenn: Yes I just saw Ted's reply to me in the dropwizard users group. I\nhaven't tested his suggestion yet (just read it and am about to) but if\nthat works, it'd make me happy! It wasn't clear you could do that from the\ndropwizard documentation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/567#issuecomment-58656826.\n. Pull requests for updates to the documentation are gratefully considered.\n\nNot having looked at the code, if we are pulling the reporter directly from\nthe Metrics codebase, that changed significantly between releases. The CSV\nReport may simply have changed and, like much of the documentation, the\ndocs simply fell behind.\nGlenn McAllister | Staff Engineer - Operations | Proofpoint, Inc. |\nToronto, Canada\nhttp://www.proofpoint.com/ | http://www.linkedin.com/in/glennmcallister\n\"We burn the present for the sake of a brighter future and act surprised\nwhen all it holds is ash\" - Zack Morrison\nOn Wed, May 14, 2014 at 12:48 PM, Nick Babcock notifications@github.comwrote:\n\nThe documentation on the CSV Reporterhttps://dropwizard.github.io/dropwizard/manual/configuration.html#csv-reporterstates that the\nfile parameter is \"the CSV file to write metrics to.\"\nThis is wrong. The CSV Reporter writes files to a directory, not to a\nfile. Also this directory must exist, or the log will quickly fill with\nerror messages about a non-existent path. It would be nice to check to see\nif the directory exists, and if not, create it.\nAny thoughts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/578\n.\n. Needs documentation as well. To clarify, I mean the reference documentation needs to be updated, I realize the Javadocs have been updated as part of this PR.\n. Ah, turns out DEBUG logging shows that the INFO logging is misleading:\n\nDEBUG [2014-05-28 21:39:49,851] org.eclipse.jetty.util.ssl.SslContextFactory: Enabled Protocols [TLSv1, TLSv1.1, TLSv1.2] of [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]\nWhich would explain why my curl command chokes, because it can't execute a handshake:\ncurl -v https://localhost:15005/api/v1/\n* About to connect() to localhost port 15005\n*   Trying 127.0.0.1... connected\n* Connected to localhost (127.0.0.1) port 15005\n* successfully set certificate verify locations:\n*   CAfile: /etc/pki/tls/certs/ca-bundle.crt\n  CApath: none\n* SSLv2, Client hello (1):\nUnknown SSL protocol error in connection to localhost:15005 \n* Closing connection #0\ncurl: (35) Unknown SSL protocol error in connection to localhost:15005\nAnd here is the relevant stack, which is getting suppressed because it's (oddly) at the DEBUG level:\nDEBUG [2014-05-28 21:42:36,892] org.eclipse.jetty.server.HttpConnection:\n! javax.net.ssl.SSLHandshakeException: SSLv2Hello is disabled\n! at sun.security.ssl.InputRecord.handleUnknownRecord(Unknown Source) ~[na:1.7.0_55]\n! at sun.security.ssl.InputRecord.read(Unknown Source) ~[na:1.7.0_55]\n! at sun.security.ssl.EngineInputRecord.read(Unknown Source) ~[na:1.7.0_55]\n! at sun.security.ssl.SSLEngineImpl.readRecord(Unknown Source) ~[na:1.7.0_55]\n! at sun.security.ssl.SSLEngineImpl.readNetRecord(Unknown Source) ~[na:1.7.0_55]\n! at sun.security.ssl.SSLEngineImpl.unwrap(Unknown Source) ~[na:1.7.0_55]\n! at javax.net.ssl.SSLEngine.unwrap(Unknown Source) ~[na:1.7.0_55]\n! at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.fill(SslConnection.java:517) ~[ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! ... 5 common frames omitted\n! Causing: org.eclipse.jetty.io.EofException: null\n! at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.fill(SslConnection.java:653) ~[ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) ~[ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358) [ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601) [ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532) [ops-arc-api-3.5.93.64024-shadow.jar:unspecified]\n! at java.lang.Thread.run(Unknown Source) [na:1.7.0_55]\n. Updated my config to:\nsupportedProtocols: [SSLv2Hello,TLSv1,TLSv1.1,TLSv1.2]\nwhich resulted in \nDEBUG [2014-05-28 21:45:56,797] org.eclipse.jetty.util.ssl.SslContextFactory: Enabled Protocols [SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2] of [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2\n]\nAnd I can verify that works. Documentation will need some updating to reflect that without the SSLv2Hello protocol, things simply aren't going to work.\n. Good to know. Unfortunately, with sslyze it seems that it does require SSLv2Hello or it simply cannot connect. Hrm\u2026 time to find another verification tool perhaps?\n. So in principle I don't have any problem at all with securing the admin endpoints with some sort of authentication, but I'm not entirely convinced that this is the correct approach. Not because it's not straightforward, but because it's actually a little too straightforward.\nThe user and password will end up being hardcoded, unless you provide some extra configuration goo in your application to read it from the application YAML config. Hardcoding the user and password are usually not the best approach, to put it mildly, simply because once it's compromised (and it will be) you have to redeploy to change it. Yes, best practice says you will firewall off access to the admin port as an extra layer of protection, and you can set up HTTPS, but you have to assume if you have user ids and passwords like that in play you will need to rotate them.\n. Typically your Realm value is specific to the purpose of your service, and in a general purpose solution would be coming from configuration.\nIt sounds like this solution is appropriate for your specific problem; you have your credentials in configuration and you are doing the best you can to secure your service. I'm not familiar with Heroku, so I can't really comment on the best way to secure a REST service that is intended to have multiple ports in that environment. However, what you've provided here isn't a general enough solution for Dropwizard as it stands. \n. IIRC, there were some concerns about this from some corners on the mailing list, however it clearly addresses an issue that has come up again and again. Unless someone has a concrete reason for not including this, I'd like to state we include this for the next release.\n. Slide 56 shows two examples where the HTTP response code is included in the\nbody of the JSON response as well as the raw HTTP Status Code header, and\none where it is not included in the body.\nIt's not an unreasonable approach as it potentially saves the caller a step\nof trying to extract the HTTP status code out of their client if they want\nto do something different depending on what happened (404 vs 500, etc.);\nthey know they can simply extract it from the JSON body.\nGlenn McAllister | Staff Engineer - Operations | Proofpoint, Inc. |\nToronto, Canada\nhttp://www.proofpoint.com/ | http://www.linkedin.com/in/glennmcallister\n\"We burn the present for the sake of a brighter future and act surprised\nwhen all it holds is ash\" - Zack Morrison\nOn Thu, Jul 24, 2014 at 2:10 PM, saadmufti notifications@github.com wrote:\n\nI went through those slides, I didn't see where it recommended what you're\ntrying to do. It said keep the \"HTTP\" error code for code, and the message\nin the JSON payload for people. Unless I missed something.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/666#issuecomment-50055757.\n. I'm +1 for this change; it adds information that potentially is difficult to get, or would need to be augmented to the response JSON at the client for later processing or storage.\n\nUnless someone has an argument against this, I'll merge this change shortly.\n. The only thing this is missing is documentation in the manual.\n. I'd argue that all of these important methods that significantly modify the\nbehavior of the resulting client should be documented; just because they\nare not currently does not mean we should not attempt to do so going\nforward.\nIf the other committers are OK with committing this PR without\ndocumentation due to existing practice, I'm not going to block it. I'd\nconsider it a strong nice to have, and a good starting point for an\n\"Advanced Usage\" section.\nGlenn\nOn Tue, Aug 12, 2014 at 12:28 PM, Philip Potter notifications@github.com\nwrote:\n\n@glennmcallister https://github.com/glennmcallister I'm happy to add\ndocumentation, but I'm unclear about what the rationale here is.\ndocs/source/manual/client.rst documents HttpClientBuilder but doesn't\nexhaustively list all its methods. Neither using(HttpRequestRetryHandler)\nnor using(SchemeRegistry) are currently documented. Is the purpose of\nthat documentation to be exhaustive or just to provide an overview?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/681#issuecomment-51939305.\n. I'd be happy to merge this, as I was looking for exactly this a while back, but any chance of some unit tests that demonstrate that supportedProtocols and excludedProtocols are interacting as expected?\n. That's almost exactly what I was looking for. The only outstanding question (and if it's answered by pointing at the Jersey docs, that's sufficient but we should do so) is how do these two configuration options interact? Does one take precedence over the other? Can you use only one? Etc. \n. Good enough for now.\n. I meant to do this a while ago, sorry for taking a while to get to this.\nLife and all that.\n\nGlenn\nOn Wed, Oct 22, 2014 at 1:44 PM, Derek Cicerone notifications@github.com\nwrote:\n\nCool, thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/741#issuecomment-60124952.\n. LGTM. If any other committer can see anything I missed in the code review, revert as necessary.\n. Thank you for the report. I agree, this is leaking inappropriate information. The authentication attempt must come before validation. \n. That's OK as a workaround, and thank you very much for it, but it's not a\npermanent solution. We really need to ensure any authentication/security\nrelated filters that are directly under our control are executed first.\n\nOn Mon, Nov 17, 2014 at 4:13 PM, Tim Bart notifications@github.com wrote:\n\nFrom experience, swapping the @Auth https://github.com/Auth and the\n@Valid https://github.com/Valid params worked for us.\n@POST\n@Timed\n@ExceptionMetered\npublic Object createSolution(@Auth Object userPlaceholder, @Valid TransportObject validatedObject) throws JsonProcessingException {\n    String response = \"Hello\";\n    return response;\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/768#issuecomment-63376818\n.\n. I've created pull request #891 which has a couple of tests which verify that this data leakage no longer occurs in Dropwizard 8.x (current master). Presumably this issue was also discovered by the Jersey folks and they addressed it, and we've been the beneficiaries of that. I'd just like a couple of pairs of eyes to go over the tests to make sure I haven't missed anything or if there are any other tests I should add, which I'm happy to do.\n. Depends on your point of view, I suppose. The principle attempting to\nobtain the resource resource has not been authenticated when the data is\nbeing leaked. The resource has been marked as requiring authentication, but\nthe leak occurs before the authentication stage occurs in the original\nissue.\n\nPerhaps a better wording would be \"Fixed security issue where info is\nleaked during validation of resource requiring authentication\"?\nOn Tue, Apr 7, 2015 at 11:14 AM Martin Peters notifications@github.com\nwrote:\n\nNice to see that the issue is being fixed, although I won't be upgrading\nto a version of dropwizard that incorporates the fix anytime soon so I'll\nhave to make due with the workaround. I couldn't help but notice the\nfollowing line though: \"Fixed security issue where info is leaked during\nvalidation of unauthenticated resources(#768\nhttps://github.com/dropwizard/dropwizard/issues/768)\", surely that\nshould say \"authenticated resources\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/768#issuecomment-90604086\n.\n. THANK YOU.\n\nI found that so confusing when I was working on which ciphers my instance\nwas actually using a while back.\nOn Sat, Dec 27, 2014 at 8:22 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nMakes sense. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/807#issuecomment-68178409\n.\n. And that would be why I wanted other people to look at this; I'm not that\nfamiliar with the JerseyTest framework and how to push it through it's\npaces. That being said, the tests I wrote have the @Valid parameter first,\nwhich was a requirement of the original problem.\n\nI'll incorporate the tests Jochen has written and proceed with resolving\nthis. I'm at work, where I'm in theory forbidden from working on any of\nthis, so hopefully I can poke at it tonight.\nOn Mon, Feb 23, 2015 at 5:30 AM, Artem Prigoda notifications@github.com\nwrote:\n\nI too have doubts about resolving this problem.\nI've tried to reproduce a validation error in the AuthBeforeValidateTest\nand wasn't able to do it. But in\nyour test case the error is clearly showed. It's bugging me. What the\ndifference between the tests?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/891#issuecomment-75519461.\n. BTW, if I do manage to resolve this I'll squash my commits down so we have a clean pull, either here (if possible) or in a new PR.\n. You aren't missing anything. The Dropwizard and Jetty authentication\nmechanisms are currently more or less completely disconnected. When I was\nsatisfying auditing requirements I had to add my own logging handler class\nto write out auth results in JSON format to a separate file, based on a\nseparate logger I had instantiated in my authentication class.\n\nAnd yes, I agree this is something that could be improved upon. However,\nthe problem is that we are effectively doing authentication as part of\nparameter processing rather than as a filter, as it's typically done. We\nare planning on looking into this in more detail to address a known defect\n(see issue #768) post the 0.8 release.\nGlenn\nOn Tuesday, February 24, 2015, abuchanan920 notifications@github.com\nwrote:\n\nIt seems that the authentication schemes of Jetty and Dropwizard don't\ncommunicate enough information for the request logs to include the user\nfield.\nThe user field would definitely be useful for identifying how much usage\nwas being generated by different api users or identifying which users are\nstill using an older version of the api so they can be targeted for\nupgrade, etc.\nIt looks like io.dropwizard.jetty.Slf4jRequestLog extends\norg.eclipse.jetty.server.AbstractNCSARequestLog which does the actual\ncreation of the message.\nIn that class we see:\nAuthentication authentication = request.getAuthentication();\n        if (authentication instanceof Authentication.User)\n            buf.append(((Authentication.User)authentication).getUserIdentity().getUserPrincipal().getName());\n        else\n            buf.append(\" - \");\nIn all of my logs, I only ever see \"-\" for the user, although dropwizard\nbasic authentication seems to be working correctly. I can't find anywhere\nin the code where it attempts to push the user info back into the Jetty\nworld for logging to work correctly though.\nAm I missing something?\nThanks!\nAndrew\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/898.\n. Sorry, I've long since been doing next to nothing with Dropwizard; no time\nand a bit handcuffed by my current employer for various reasons. That being\nsaid, from what I know, given the current authentication model employed by\nDW there is likely no reason why this can't be supported, it just hasn't\nbeen looked at.\n\nOn Wed, Dec 9, 2015 at 11:06 AM Alessandro Siletto notifications@github.com\nwrote:\n\n@yvandb https://github.com/yvandb I think if you are using a filter\nbased authentication, you can try to set the user name as said here:\nhttps://groups.google.com/forum/#!topic/dropwizard-user/lVP0nDI-NT4\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/898#issuecomment-163306555\n.\n. Keeping on top of it is the primary issue. Otherwise, I'm all for clarity. Having that laid out somewhere in the documentation would be great in my opinion.\n. I have an example here of several basic authentication tests:\nhttps://github.com/dropwizard/dropwizard/pull/891. Again thanks to @joshi\nfor beefing the tests up for me. :)\n\nNote that 2 of them are failing as expected due to a known issue, hence the\nfailing TravisCI build. They are based off of existing tests in the\ndropwizard-auth module.\nOn Tue, Mar 10, 2015 at 6:50 PM, vultron81 notifications@github.com wrote:\n\nI am also having issues getting ResourceTestRule to work with\nBasicAuthFactory and GrizzlyTestContainerFactory for v0.8.0. I tried to\nimplement what was done in the OAuthCustomProviderTest.java code but no\nmatter what I do I get a HTTP 401 error. Also my custom Authenticator is\nnever called. Below is how I am initializing the ResourceTestRule:\n@ClassRule\npublic static final ResourceTestRule resources = ResourceTestRule.builder()\n.setTestContainerFactory(new GrizzlyTestContainerFactory())\n.addProvider(AuthFactory.binder(new BasicAuthFactory(new CustomAuth(),\n\"Test-Realm\", User.class)))\n.addResource(new MyResouce())\n.build();\nI then call my resource in my tests via:\nResponse response = resources.getJerseyTest().target(\"/mypath\")\n.request(MediaType.APPLICATION_JSON)\n.header(HttpHeaders.AUTHORIZATION, \"user pass\")\n.post(Entity.json(\"blah\"));\nI have also tried using the HttpAuthenticationFeature unsuccessfully. Any\nhelp would be appreciated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/922#issuecomment-78165687\n.\n. If I get some spare time (HA!) I'll see if I can take a shot at getting it\nto work with ResourceTestBuilder. I hadn't tried testing this part of the\nsystem before so I simply copied what was there and built off of it. It's\npossible the ResourceTestBuilder is missing some necessary plumbing, I\ndunno.\n\nOn Wed, Mar 11, 2015 at 11:15 AM, vultron81 notifications@github.com\nwrote:\n\nThanks Glenn. I was able to get it working by using your example and\nproperly formatting the Authorization header. However, I am a little\ndisappointed I could not get it to work using the ResourceTestBuilder() and\ninstead having to inherit from the JerseyTest class.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/922#issuecomment-78283143\n.\n. To alleviate backwards compatibility concerns, we'll have to update the\nmigration guide, 'cause as pointed out this is a big departure. I agree\nthis is the right long term approach (and it's going to fix a long standing\nissue I've had with our access logs as a byproduct, I suspect) and major\nprops for fixing this Carlo. So +1 from me.\n\nOn Thu, Mar 19, 2015 at 9:06 PM, Justin Plock notifications@github.com\nwrote:\n\nI think this looks good and would like to see this change made. Since this\nis a big departure from the old model, does anyone else want to chime in\nwith an opinion on merging this in? /cc @joschi\nhttps://github.com/joschi @arteam https://github.com/arteam\n@glennmcallister https://github.com/glennmcallister\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/945#issuecomment-83834898.\n. Agreed. This is awesome.\n\nWe do still need to decide if this warrants branching for 0.8.1 for all the\nother changes made up to this point, and including this in 0.9.x since it\nis a MAJOR change in how we do authentication. And now authorization as a\nfeature, since we never really supported that previously.\nOn Tue, Mar 24, 2015 at 5:42 PM Justin Plock notifications@github.com\nwrote:\n\n@carlo-rtr https://github.com/carlo-rtr do we need to add that\nannotation dependency or are they available for use outside of the test\nscope? Otherwise I think this looks great. Thanks for all of your work on\nit!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/952#issuecomment-85705675.\n. I have to agree that this has been closed prematurely. While the way we have managed the MetricRegistry previously does work in the majority of cases, there are times when people will need to override them.\n. Agreed, nice change.\n. LGTM\n. I'm happier with Ryan's approach, tbh.\n\nOn Wed, Jun 24, 2015 at 11:57 AM Ryan Kennedy notifications@github.com\nwrote:\n\nadvancedLoggers feels like a bit of a wart on the side of the\nconfiguration.\nWhat if we extended the appenders, instead? Provide them with a \"loggers\"\nlist property consisting of the loggers that should write to that appender.\nDefault the list of loggers to all loggers. That would be backwards\ncompatible and provide the intended functionality.\nlogging:\n  level: INFO\n  loggers:\n    wego.curiosity: DEBUG\n  appenders:\n    - type: file\n      loggers: [wego.curiosity]\n     ...\n    - type: console\n      target: stdout\n      logFormat: \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n\"\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1092#issuecomment-114924378\n.\n. I like it, personally. Its easier to read and conceptually more compact than what we have currently.\n. My $0.02 CDN would be to preserve the current behavior (return 422) and\nprovide a configuration flag for strict spec conformance (return 400). That\nway we keep doing what we've always done so we don't break our existing\nconsumers (preserve backwards compatibility) but we also provide the\nability for people to deal with less flexible clients/consumers. Just a\nthought.\n\nOn Tue, Jun 23, 2015 at 3:27 AM Artem Prigoda notifications@github.com\nwrote:\n\nI personally more lean to 422. Despite that it's not defined in RFC 7231,\nit's widely used and adopted by many clients and intermediaries. Also it's\nmore specific then a fairly general 400 error. If I get 422 error, I know\nthat the server comprehended my request, but rejected it. It gives me\nknowledge, that I didn't make a stupid error like sending invalid JSON.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1117#issuecomment-114389740\n.\n. That's a fair question. Saem's point is that there are clients out there\nthat aren't necessarily going to be able to deal with 422.\nMany front-end libraries and HTTP clients aren't prepared to handle 422,\nconsidering the wider HTTP ecosystem.\n\nThat being said, this is the first issue (to my knowledge) we've received\nabout this specific point. And the first google hit it got on 'http 422'\nwas a stackoverflow question on this very subject, and the accepted answer\nsaid (in short) \"use 422, not 400\".\nshrug\nActually, I'm starting to take issue with saying 422 isn't a valid HTTP\ncode:\nhttp://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\nSection 11 of RFC4918 clearly states they are added to the complete set of\nvalid HTTP codes:\nThe following status codes are added to those defined in HTTP/1.1\n   [RFC2616 http://tools.ietf.org/html/rfc2616].\nSo... what's the problem?\nOn Tue, Jun 23, 2015 at 12:55 PM Jochen Schalanda notifications@github.com\nwrote:\n\nAre there any real-world problems with the 422 status code that would\njustify breaking backwards-compatibility with older versions or add a\nmaintenance-\"tax\" to Dropwizard?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1117#issuecomment-114571788\n.\n. Respectfully, WebDAV is an extension to the HTTP protocol. You are trying\nto make out that WebDAV is something other than HTTP. It's not. It's an\naccepted RFC by the IETF.\n\nAt this point, I'm bowing out of the discussion.\nOn Tue, Jun 23, 2015 at 2:20 PM Saem Ghani notifications@github.com wrote:\n\nEven if 422 remains the dropwizard default, and there is a configuration\nto go the other way that's workable.\n@glennmcallister https://github.com/glennmcallister\nIn regards to the Stack Overflow post\nhttp://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data/20215807#20215807.\nOne person, who didn't know the answer in the first place, hitting accept\non a SO post hardly constitutes a strong argument, if at all a data point.\nAs for the answer itself, as @nickbabcock https://github.com/nickbabcock\npoints out it's not out right unreasonable. That being said, if you look at\nthe part of the WebDAV spec (not HTTP) he quotes, it clearly states \"While\nthe status codes provided by HTTP/1.1 are sufficient to describe most error\nconditions encountered by WebDAV methods, there are some errors that do\nnot fall neatly into the existing categories. This specification defines\nextra status codes developed for WebDAV methods (Section 11)\". Emphasis\nadded is my own, but to be clear that entire RFC is not the protocol most\nare working with. I would ask that we stop referenc ing a non-HTTP RFC as\nif it is.\n422 is not valid HTTP, you're pointing to a list of registered codes, I\nbelieve the intention is to avoid collisions across protocols that are a\nsuper set of HTTP, the same as say internet socket port number registration\ndone by IANA.\nSpecifically, in regards to Section 11 of RFC4918, what you are quoting is\nout of context:\n1.  Status Code Extensions to HTTP/1.1\nThe following status codes are added to those defined in HTTP/1.1\n   [RFC2616].\nThe title clearly states that these are extensions, within a document that\nclearly states it's for a different protocol (WebDAV).\nAs I pointed out earlier, except for Google not knowing the difference,\nand an apocryphal answer on SO, can we not reference an RFC for a protocol\n(WebDAV) that the vast majority aren't concerned with, and stick to HTTP?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1117#issuecomment-114597013\n.\n. What @mikeycmccarthy said. Dumping credentials in a log file is a major security issue. If an attacker has read access to your system and can see those logs, they now have lateral access to a database system or REST service, from which they may get more credentials, etc. These days it's all about lateral movement.\n. While I too think this is a good idea, and very useful for debugging, be\ncareful about how you expose credentials. Depending on how and where this\ninformation is exposed, you may end up revealing sensitive information that\nwas segregated for a reason. Just my 2 cents.\n\nGlenn\nOn Fri, Apr 8, 2016 at 9:29 AM Patryk Najda notifications@github.com\nwrote:\n\na bit similiar issue: #1156\nhttps://github.com/dropwizard/dropwizard/issues/1156\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1514#issuecomment-207432445\n. Agreed. Silently swallowing exceptions is rarely a good idea.\n. This is intended to be the Realm name; \"Hello\" doesn't really seem appropriate.\n. Trivial nit: you don't need the 'and' before 'with' in this sentence; see similar doc comment for newObjectMapper() above.\n. Not having looked at the code for ObjectMapper in quite a while, does it throw a NPE if jsonFactory is indeed null? You don't have any type of assertion in the code to verify this claim.\n. Jochen has a point, and I missed that in my review of Size.comparetTo().\nI'd recommend going with the revised method both in Duration and in Size,\nas it makes the method more readable and more maintainable; less code to\nbreak.\n\nGlenn\nOn Thu, Oct 23, 2014 at 4:55 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nIn dropwizard-util/src/main/java/io/dropwizard/util/Duration.java:\n\n@@ -149,4 +149,27 @@ public String toString() {\n         }\n         return Long.toString(count) + ' ' + units;\n     }\n+\n-    @Override\n-    public int compareTo(Duration other) {\n-        if (count == 0 && other.count == 0) {\n-            return 0;\n-        }\n  +\n-        // this is negative, other is non-negative\n-        if (count < 0 && other.count >= 0) {\n\nWhich conversion? As a matter of fact just using Long#compare is more\nefficient as it only does 2 comparisons in the worst case than 4 (3 if\nconditionals and finally Long#compare) in the worst case. [image: :wink:]\nThe method could be reduced to the following implementation and still has\nthe same behaviour:\nif (unit == other.unit) {\n  return Long.compare(count, other.count);}\nreturn Long.compare(toNanoseconds(), other.toNanoseconds());\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/757/files#r19265709.\n. Given that we could be using resourceInfo.getResourceMethod().getParameterAnnotations(), why do we need to abandon the exiting Auth marker annotation? I admit, I don't know how we can go from @Context SecurityContext securityContext in the Resource parameter back to @Auth SomeRandomAuthType authParam to preserve backward compatibility, but this has always been my biggest concern in this change. \n\nNamely, is there anyway we can do this without having to force everyone to redo their auth code?\n. I think you meant \"you need to add a parameter to\"\n. I realize it's a little late now, but formatting changes like this (particularly pure whitespace changes) that have no impact typically aren't something you want to include in a PR unless you are rectifying a significant style deviation. The reason being that now it becomes more difficult to determine the original source of the change for these lines. \nCommenting on my comment, otherwise this is a perfectly fine patch, and I'm just being pedantic and fussy. Thanks for solving the problem. Timezones are a real pain in the butt.\n. ",
    "DorianGray": "tl;dr: Can we supply configuration defaults in a Map parameter in Application.initialize?\n. Yes, it wasn't hard. I spent an afternoon doing it on my second day using\ndropwizard. Then I upgraded it to 0.7.\nI still need a way to set up the defaults without using a yaml or json\nfile, or by using a yaml or json file on the classpath. I had suggested\nmaybe adding something to dropwizard to allow configuration using a map...\nThat would allow me to avoid deploying an extra yaml file with defaults...\nOn 10 Oct 2013 05:09, \"Nick Telford\" notifications@github.com wrote:\n\nIt shouldn't be too difficult to build a ConfiguredBundle that iterates\navailable environment variables, and descends through the configuration\ntree and using reflection to set the property, either by setter method or\ndirectly.\nI don't think we'll be adding this to Dropwizard itself, Dropwizard\nalready provides the facility to override options on the command-line.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/409#issuecomment-26048012\n.\n. \n",
    "ctrimble": "I have been working on a method for encrypting configuration in Dropwizard using a bundle and mixins.  Perhaps that would help here.\n. ",
    "kutzi": "Yes, that's right - I'm using GitHub for Windows.\nThanks for investigating this @kilemensi \n. With all due respect I don't consider this to be the best solution.\nIf someone wants to clone and build dropwizard on Windows, it should work out-of-the-box without the need to change git config values.\nNote: this has nothing to do with the line endings in my editor, but with the default line conversion behaviour of the git client (GitHub for Windows in my case). BTW: this doesn't seem to be configurable in GitHub for Windows at all.\nAs @kilemensi  pointed out, there seems to be no recommended default setting for this, so we should be IMHO be able to support both. (see e.g. https://help.github.com/articles/dealing-with-line-endings)\nWhat is the big deal about trimming the line endings in the test before comparing the strings?\n. ",
    "skamille": "Unfortunately this won't auto merge. Any change you can clean it up so it merges cleanly, @vadims ?\n. lgtm, but not sure it's worth recutting 0.7 for this.\n. lgtm\n. I still hate mixed-case enums but I see the usefulness :+1: \n. Apologies, I had to revert this. Upon reading the file, it looks like this file specifies that it changes enums to all upper case, and I don't know what we will break if we add this here. May want to create a different reader for this functionality.\n. That is difficult, but this change breaks the current contract of this class, which is that it will take enums and convert them to all-uppercase. Anyone using this class and expecting that behavior would have a regression in the upgrade to version .7. Since .7 requires a whole set of other changes maybe this is ok, but it would be great if you brought it up with the community before we made a contract change. And then, you need to change the javadoc for this class to match the new functionality.\n. OK I see now the equalsIgnoresCase. The javadoc for the method still needs correcting to specify the new behavior. Reopen with that correction and I'll merge.\n. I like this idea, but we need some tests before this can be added.\n. Yeah, that's better, I don't know how to kick travis to make it run the tests (failed due to GH being down), can you resubmit the pull to force a re-run of the tests?\n. Thanks! Want to put it in the top level and make it easier to keep in sync than the doc link although maybe we should just keep it there.\n. Not that I know... would love some help taking it over! \n. Boyd can I get some clarification, is 511 enough to fix this or are there more changes? Do we need documentation somewhere for this?\n. This is superseded by 517 correct?\n. +1\n. Approving this since this is blocking the release. \n. @saadmufti are you going to republish the snapshot build to fix this?\n. Now someone actually needs to do a CR... is there an easy split of the files changed that we can virtually do to CR, or does someone want to tackle the whole lot?\n. What areas do you think we should focus on for the CR? Can you give a quick rundown of what's pretty boilerplate? \nOr, is there someone who's been watching this more closely than I have that is comfortable reviewing as-is?\n. This seems slightly awkward to do without breaking backwards compatibility - the default behaviour is to create set a maximumPoolSize > corePoolSize, using an unbounded queue - in other words, the default behaviour violates this constraint.\nI think that we've broken backward compatibility already quite thoroughly perhaps we shouldn't be too cautious about changing this if it is actually causing unexpected behavior by those using the feature.\n. Actually, I solicited this because I think it's worth discussing whether we\nwant it to be a module in Dropwizard core or not. I think a straightforward\nadd-on integration of protobufs with DW could be very useful.\nPerhaps we need to create some sort of clear contrib set of add-ons that\nare useful and mirrored somewhere. I don't want everything and the kitchen\nsink in the lib but there's something to be said for making it easy to find\nuseful add-ins.\nOn Mon, Jun 9, 2014 at 11:38 AM, Nick Telford notifications@github.com\nwrote:\n\nThis looks neat, but it's yet another module that we'd be taking in to the\nDropwizard core. I think you'd probably be better off maintaining this\nseparately, as many other integration projects have. Exactly what qualifies\nto be a part of the main codebase, and in what way is part of an open\ndiscussion\nhttps://groups.google.com/forum/#!topic/dropwizard-dev/Ug1CrqBuZHg that\nhas yet to be resolved.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/609#issuecomment-45504926.\n. I'm OK with this, are we comfortable with adding a new dependency? @carlo-rtr @ryankennedy if one of you 2 +1s let's put it in\n. Might be nice to enhance the doc more to talk about Mustache, since there's a bunch more doc that is FreeMarker-only\n. Even just a light rewording to make the comments clear, here's a freemarker example, and here's a link to mustache docs. Just for coherence.\n. @Toilal did you get this note?\n. \n",
    "ESPNMichaelKidd": "You'll be much better off looking for help at the google group:\nhttps://groups.google.com/forum/#!forum/dropwizard-user\n. as best I can tell, I believe the issue is introduced here: https://github.com/dropwizard/dropwizard/commit/48fdb73ebb24aafd4ed18e968e01363ea6abada0#diff-c810a2744e3beb152ebc3f6052aa5509R317\nas doing this more than one will result in the illegal argument exception\njava\nnew DropwizardApacheConnector(new HttpClientBuilder(environment).build(\"name\"),true);\nException in thread \"main\" java.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.name.available-connections already exists\n    at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)\n    at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.<init>(InstrumentedHttpClientConnectionManager.java:57)\n    at io.dropwizard.client.HttpClientBuilder.createConnectionManager(HttpClientBuilder.java:278)\n    at io.dropwizard.client.HttpClientBuilder.build(HttpClientBuilder.java:173)\nThat said, i am entirely unsure as to where the right place is to fix this...\n. @arteam fixed in latest snapshot.  Thanks!\n. ",
    "MMaxi": "Thank you! Trying find a solution on the  topic\n. ",
    "wirde": "None - other than that is what I used when I ran into this problem and I moved on when it resolved my problem. I have now tested with 1.2.1 and that works just as well. Difference is that 1.2.1 prints nothing instead of null when  changeLogName or changeSetName is not provided. Cosmetic, but it does look neater.\n. Hmm. I don't see how this change would break anything?\nThat said I would love to instead be able to provide my own reader (or simply not use FuzzyEnumModule in the first place). \nBut as far as I can tell it is not possible:\nhttps://groups.google.com/forum/#!topic/dropwizard-user/IG0cdKEzTVg\nBecause of this:\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java\nOr am I missing something?\n. There is a contract change - but only one that makes the deserialization more permissive. I still don't understand how it could cause a regression... The conversion to all-uppercase was only done to be able to match against all-uppercase enums (and in the text of the MappingException, but no one should be relying on that).\nIs there actually a string which would deserialize to a valid enum currently, but not after the change?\nJavadoc - yes absolutely, it should change as well. I missed that.\n. myenum will still deserialize to MYENUM - there is an \"equalsIgnoreCase\" in the deserialize method. And there were/are unit tests to show it.\nUnless you mean an enum which looks like this:\nprivate enum MyEnum {MYENUM, myenum};\nBut such an enum would only be partially deserializable with the current code anyway (and if you want lenient matching wrt case such an enum will never work well...)\n. Ok!\nI have pushed a commit with the javadoc changes, but I can't figure out how to reopen this pull request... Do I need to open a new pull request?\n. FWIW - I would really like to have this ability too.\n. An empty String is not an absent String though. Especially for FormParams it is quite common that you would want a \"\" to actually mean \"\". Less obvious use for empty query parameters but I still prefer to have the ability to know that a query parameter was present but it's value was the empty String rather than not present at all.\n. ",
    "yunspace": "+1\n. I'm currently testing out jersey2-guice PR https://github.com/HubSpot/dropwizard-guice/pull/45 and was able to reproduced this issue using test: \nhttps://github.com/yunspace/dropwizard-guice/blob/jersey2-guice/src/test/java/com/hubspot/dropwizard/guice/InjectedResourcesTest.java\nThis is happening for both 0.8.0-rc3-SNAPSHOT and 0.8.0-rc2. Only the Resource Tests are effected. Integration Tests are work fine. Same line 634 in JerseyTest:\ntry {\n    setTestContainer(null).stop();\n} finally {\n    closeIfNotNull(setClient(null));\n}\nI tried to debug and track down why setTestContainer was returning NULL but haven't had much progress. Please assist. I will also raise a issue with @oillio who write the jersey2-guice adaptation.\n. Thanks @klette, managed to resolve this by excluding Jersey dependencies in jersey2-guice:\n<dependency>\n    <groupId>com.squarespace.jersey2-guice</groupId>\n    <artifactId>jersey2-guice</artifactId>\n    <version>0.5</version>\n    <exclusions>\n        <exclusion>\n             <groupId>org.glassfish.jersey.containers</groupId>\n             <artifactId>jersey-container-servlet-core</artifactId>\n        </exclusion>\n        <exclusion>\n            <groupId>org.glassfish.jersey.containers</groupId>\n            <artifactId>jersey-container-servlet</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\nIn our case it was a conflict between Jersey 2.13 vs 2.15.\n. I'm not having much luck with rebasing, and since it's just a one file change I've deleted my old repo and forked a new one. Will start a new PR\n. The ServiceLocator can be obtained through:\n((ServletContainer) environment.getJerseyServletContainer()).getApplicationHandler().getServiceLocator()\nYou can verify this is the right one by setting a debug point on classes such as AuthFactoryProvider which also use ServiceLocator. I've posted this in the forum also.\nIf you wish to use guice with HK2 I would recommend you to have a look at  https://github.com/HubSpot/dropwizard-guice/pull/45 which uses jersey2-guice library. Auto registration of classes such as Managed are catered for out of the box.\n. In your run() you can replace the default ServletContainer with your own container: \ncontainer = [your container]\n    environment.jersey().replace(new Function<ResourceConfig, Servlet>() {\n        @Nullable\n        @Override\n        public ServletContainer apply(ResourceConfig resourceConfig) {\n            return container;\n        }\n    });\nIn your Container, overwrite the init() method to obtain the ServiceLocator. I have an example here: https://github.com/yunspace/dropwizard-guice/blob/guice-bridge/src/main/java/com/hubspot/dropwizard/guice/GuiceContainer.java\n. I've got in contact with framework-benchmark folks and found out why dropwizard and dropwizar-mongodb tests failed to run for round 10: https://github.com/TechEmpower/FrameworkBenchmarks/issues/1545 \nIt appears both had issues obtaining port 9000. As a quick fix I propose to change the ports to something else. At least not have dropwizard and dropwizard-mongodb both listening on same port 9000.\nAs part of the benchmak update, I plan to upgrade dropwizard version to 0.8.1 and use java8-bundle. If anyone has any suggestions or feedback please let me know.\n. yes I'll aim to implement all of the relevant tests if possible.\n. Initial local tests on my laptop show Dropwizard 0.8.1 is more than 3x times faster than 0.7.1 Made a tweet with screenshots here: https://twitter.com/yunzhilin/status/611130225355677697\n. Thanks, it's been good learning experience too. I just have one more optimisation I want to try out. Java8 lambdas + parallel streams\n. After playing around a bit more with the Techempower benchmarks on my local machine, I realised I actually made a mistake previously in interpreting the results:\n- Dropwizard 0.8.1 is faster by a factor of 3 compared to 0.7.1 for the Fortunes HTML tests only. This is likely to be due to upgrade in the Mustache template library.\n- All other tests show decreases in performance. Most obvious are the JSON and Plain Text tests, which simply prints single messages with no DB interaction. It seems that since upgrading to Jersey 2.0, the Resources are taking longer to respond?\nI've compiled the averages of my test results into a single easy to read graph: https://docs.google.com/spreadsheets/d/1PL1kGfyEA9NVwa1uBA3OOmQ_fEs6wkroCgm94TUbW3g/edit?usp=sharing\nI tried a few things such as upgrading to Java8 or use parallel streams but they didn't make much difference and it doesn't feel quite clean. I don't think I will have much time to spend on this anymore. Let's close this for now and I will re-visit for 0.9.X\n. Thanks @cowtowncoder you confirmed my sneaky suspicion in that Jersey is likely to be the culprit. There are other JAX-RS implementations out there such as RestEasy (some interesting benchmarks here too), but that won't be a easy change as the DW ecosystem is deeply rooted in Jersey. \n. Just got an idea, if I use a @Singleton resource that may reduce some of the overhead of introspecting and creating a new resource each time. Will try this out.\n. @cowtowncoder yes there is another card for adding local benchmarks https://github.com/dropwizard/dropwizard/issues/963\nas for the Techempower benchmarks, I've tried the @Singleton approach and it didn't really make much difference. The preview results for Round 11 are out https://www.techempower.com/benchmarks/previews/round11/ and DW isn't doing so well. I might try and upgrade to the latest 0.9.0 rc and see the latest versions of Jersey has any improvements.\n. @TomCools Not sure why you mentioned it's not possible to add WebSocket to embedded Jetty. \nIn their official repo there exists examples for both Native and JSR356 implementations: https://github.com/jetty-project/embedded-jetty-websocket-examples which may be good reference material\n. nice @TomCools, seen alot of DW with native jetty websocket implementations but this is first I've seen using JSR 356. Very useful. Starred and forked.\n. Should this test be moved to package io.dropwizard.auth.chained to be consistent with the location of ChainedAuthFilter? \n. ",
    "tburch": "This would be really useful for configuring loggers, ports, etc at runtime since that's not possible via the -Ddw command line flags anymore...\n. @skamille I added to the JavaDoc. Thanks!\n. +1\n. This would be really nice to have!\n. @evnm it does modify Application#addDefaultCommands. I first went down the path of refactoring ServerCommand, but then decided that what I wanted to do was different enough to warrant another command. I also noticed that dropwizard-http2 took this approach, so decided it was ok. I'll opensource it at some point (or I would happy to add it to Dropwizard)...\nIt looks like DropwizardTestSupport is pretty tightly coupled to Jetty, so it might make sense to abstract all of this a little (I saw #846 that looked like what may be needed).\n. @Ferada I don't see why not. I've updated the pull request.\n. @jplock what are the chances of this being in a point release instead of 1.1.0? It's the same functionality as previous versions with an additional constructor to support additional functionality.\n. @pparth checkout https://github.com/tburch/dropwizard-grpc. I don't know what the \"right\" solution is, however I lean towards making Command#run return an Optional<Integer> used in System#exit if present because it seems like a clean API design. I don't like that it's a breaking change.\nI could also make an argument for creating something like a CommandException (extending Exception) that contains the the Optional<Integer> used in System#exit if present since the primary use case for this is when we hit an exception case in the command and needed to exit appropriately. \nI'm happy to implement either solution. Any other input?\n. I have the basic foundation comitted at https://github.com/tburch/dropwizard/tree/CommandExitCodes. What are your thoughts on trapping any exceptions from ConfiguredCommand#run(Bootstrap<T>, Namespace, T) and then re-throwing a CommandException with the trapped Exception and a non-zero exit code? The current behavior is that the Application/jvm just exits.\n. No problem. I realized the coupling as I dug in as well and having to deal with Command level exceptions in Application didn't quite seem right.\nThe main use case I was trying to solve was that I'd like anything that extends AbstractLiquibaseCommand to exit with a non-zero status code in any exception case (currently I don't have a way to know that a migration failed/succeeded other than querying the database or watching the logs).\n. @evnm updated the commit. \n. @evnm my bad. Pushed the wrong branch after rebasing.\n. Personally, I'd like to see this upgrade in 1.1.0.. Nevermind, just saw #1871.... What would you like to see? I just updated that piece of JavaDoc because Mustache is mentioned on the Views page in the User Manual in several places. This pull request doesn't really have anything to do with Mustache - it's just making the view renderers a little more extensible.\n. Ohh, I see what your'e saying. I'll add something momentarily.\n. Thanks! fixed...\n. Are you thinking a DropwizardTestSupportConfig POJO for all this instead of constructor overloading?\n. Ahh, IntelliJ didn't copy it fully for me. Fixed that...\n. @evnm It's on the next line (to match prior formatting)...\n. ",
    "jclawson": "Are these unit tests sufficient?\n. This is a nice addition. +1\n. ",
    "marceloverdijk": "+1\n. ",
    "bflad": "+1\n. ",
    "salbito": "+1\n. ",
    "snicaise": "+1\n. ",
    "rbarbey": "+1\n. Closing this PR since it is superseded by #1669.\n. ",
    "ToastShaman": "+1\n. ",
    "gtrog": "Since this is probably a very narrow use case, moving to private repository.\n. As it stands for now, I'll keep the repository open, but I doubt I will develop the feature any further since it meets the needs I had and I wanted to keep it simple.  Probably your best bet is to copy the code into your own repository and tweak it as you may need.\n. I like the fact that now it'll be possible to intercept validation exceptions via an exception mapper and write a custom response for them.  This is something that I've struggled with in the past where I've wanted custom formatting of validation errors\n. ",
    "ianferguson": "@gtrog are you going to keep that new repo open? I do have some need of functionality along these lines, and would be curious to see what you end up with.\n. Is there anything that can be done to get this included in a future version of Dropwizard? Adding the code @yvandb to AuthFilter.java at the end of the authenticate method immediately prior to the return true on line 165 should fix this. I've run into this issue recently as well, my use case is that when using a filter to add the user id/principal name to the jetty container request so it will be included in access logs (using logback-access similar to the code snippet/proposal here: https://github.com/dropwizard/dropwizard/issues/898#issuecomment-163342838), \nif that filter is set to a Priorities.AUTHETNICATION + 1 (1001), on resource methods where an @Auth Optional<Principal> is injected, the auth filter will be run at priority 5000 because it is wrapped in the WebApplicationExceptionCatchingFilter and will not run until after the user id filter runs, causing the user id filter to not set the user id, and the access logs to just show \"-\" for the user id, instead of the authenticated user (if there is one). @nickbabcock I should probably be able to do that in the next week or two, yes.. @arteam thank you for all your work on Dropwizard! . ",
    "maximdim": "+1\n. ",
    "skradel": "FWIW, I have not found dropwizard 0.8 to discover any AppenderFactory implementations from the classpath, but adding a custom META-INF/services/io.dropwizard.logging.AppenderFactory has an effect.  Bit clunky and a lot of extra work to create the custom factory compared to simply using logback.xml however...\n. ",
    "brentryan": "This is the only reason we maintain our own fork of dropwizard.  We like everything else, but having native support for a logback.xml file is still far superior for our needs then what we can do in YAML.  \nOur fork basically removes the dropwizard logging functionality and now we just rely on plain old logback and life is good.\n. @mjallday Here's our fork of dropwizard that allows us to just use the native logback system with dropwizard.  https://github.com/cvent/dropwizard/tree/v0.7-cvent\nWith this we simply pass in -Dlogback.configurationFile=logback.xml on startup and we have full logging capabilities.\nMakes it easy for us to use open source json logging encoders for our integration with splunk\n<encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n        <layout class=\"ch.qos.logback.contrib.json.classic.JsonLayout\">\n            <jsonFormatter class=\"ch.qos.logback.contrib.jackson.JacksonJsonFormatter\">\n                <!-- prettyPrint is probably ok in dev, but usually not ideal in production: -->\n                <prettyPrint>false</prettyPrint>\n            </jsonFormatter>\n            <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</timestampFormat>\n            <timestampFormatTimezoneId>UTC</timestampFormatTimezoneId>\n            <appendLineSeparator>true</appendLineSeparator>\n        </layout>\n    </encoder>\nWe haven't updated our fork yet to latest dropwizard .8/.9, but we plan to.\n. The read enums using to string is a global config which isn't always true.  We have a mix-match use where sometimes we need to string and sometimes JsonCreator.  I already have a PR that fixes this with unit tests.\nhttps://github.com/dropwizard/dropwizard/pull/1220\n. Does this allow you to do do custom layouts as well?  We would like to use this as well, but we need a way of outputting our logs in json format.  If you use standard logback.xml then you can do this like so:\n<encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"ch.qos.logback.contrib.json.classic.JsonLayout\">\n                <jsonFormatter class=\"ch.qos.logback.contrib.jackson.JacksonJsonFormatter\">\n                    <!-- prettyPrint is probably ok in dev, but usually not ideal in production: -->\n                    <prettyPrint>false</prettyPrint>\n                </jsonFormatter>\n                <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</timestampFormat>\n                <timestampFormatTimezoneId>UTC</timestampFormatTimezoneId>\n                <appendLineSeparator>true</appendLineSeparator>\n            </layout>\n        </encoder>\nThe other thing that you can do with standard logback.xml is update the config file and changes will take effect without doing a restart of the service.\nDoes this fill any of those gaps?\n. Just to add a little more context to the problem as well... This could really be considered a bug in OAuthFactory.\nhttps://github.com/dropwizard/dropwizard/blob/5e686e772364264ab0e41357e44d6ba054a4b117/dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthFactory.java#L19\nIf you use this code with the CachingAuthenticator it actually presents a pretty big security hole.  You could wind up hitting a resource with your bearer token that you have permissions to access and then that credential gets cached.  You then hit another resource that you don't have permissions to but because your first call was cached it will actually return the cached credential and let you in anyways.\nSo I'm just trying to figure out what the preferred fix is here for these issues?  Any thoughts?\n. @arteam Please see the commit.  I already provided a unit test that causes a failure with the current FuzzyEnumModule used in dropwizard.  The patch I provided fixes this issue.  If there's a different/better way to fix this issue then I'm fine with that as well, but this current approach should maintain backwards compatibility and allow for more flexible enums.\n. I agree.  I'll make the adjustments above and squash the commits down.\n. I'll re-create a new PR with the squash.\n. See https://github.com/dropwizard/dropwizard/pull/1316 for details on the new PR\n. Sounds good.  I know we had this patched a while back off of 0.7.X code for Cvent and I decided to contribute back our fix.  But if you guys have a better option with the @NotNull check then that should work as well.  I just wanted to see a fix get into the mainline for this so that we can stop running off of our own fork if possible.\n. What's happening here? Are these things going to get into .9 release? or soon after?\n. @nickbabcock What's the status of this item?  This and the fuzzy enum change I submitted are the only things currently holding us back from not using a forked version.  Do we have an ETA for this OR a solution via #1251 ?\n. Follow changes here https://github.com/dropwizard/dropwizard/pull/1340\n. See https://github.com/dropwizard/dropwizard/pull/1316 for more details\n. I'm not sure I agree entirely here. The error could still be the clients issue, right? If they send in bad data then a 400 is appropriate. \n. Na, I just read the conversation above and not the code.  It looks good to me and passed my test locally.  Thanks!\n. Have you guys looked into switching to retrofit for clients instead? It uses OkHttp under the hood and has nice async features. \n. @arteam why does it matter what they developed the http client for if it works better, has clean code, is resilient, and has decent perf when compared to anything else out there. It runs fine on oracle jdk as well so I'm confused by your comment. \n. I did this by just implementing my own appender that extends from the current file appender provided by dropwizard. Then I pass in my custom json layout and formatters. Everything works great. \n. Also, this is optional and shouldn't affect prior implementations.  If you guys thing you'd like to include this or something like this in dropwizard them let me know what else is missing from this PR that could help facilitate getting this done and documented.\n. @jplock I can break that out into a separate task if you want.  However, it's completely relevant to this PR so not sure I understand why.  The command and task that I've added are useful for troubleshooting/verifying configurations when needed.\nWe've been using this system with 150+ developers for over a year now without issues around debugging and I think it's worked out well to reduce boilerplate plus still allow for some flexibility.\nIn our next version, we're going to get rid of configuration files entirely so they come from an externally managed centralized system so that we can control all of our configurations in 1 place across all of our applications.  And some changes will take effect at runtime and/or trigger a graceful reload of the application.  Hopefully we'll get that done in 2016.\n. Thanks guys. I'll look into moving this to a module when I get some free time.\n@nickbabcock I agree with the less copy/paste but we'd need to refactor some of the other dropwizard core classes to allow for this and now that this will be a module I'm not too sure it matters. If you'd like I can take a stab at another PR to dropwizard that fixes this then I can refactor this code before putting it into a module. \n. Closing PR as I'll move over to a module.\n. FWIW, we at Cvent have implemented a very similar solution with our dropwizard services. We really couldn't live without this. However, our next evolution of this is to have 1 template.yaml that we use to generate via build/deploy pipeline a test/staging/prod config using a template system like handlebars. Then the next step will be to evolve this into a runtime config system. \n. My preference would be to just get this via a ConfigTask and/or a new config command. We have both of these in our implementation at Cvent and it's worked quite well so far. \n. +1\n. @arteam Is this going to get pulled into 1.3 release?  We're waiting on this internally before we upgrade to latest dropwizard version.  We require JSON support before proceeding forward.  We'd rather not do this off of a fork so any timeline that can be provided here would be useful.. You can see how we got sessions working with couchbase at Cvent here https://github.com/cvent/dropwizard-couchbase-sessions\nYou can do the same thing with jdbc or any other session backed system you need to implement.. ",
    "mjallday": "@skradel / @brentryan - care to share that particular code? \n. ",
    "dennyac": "@mjallday Check out this repository - https://github.com/Wikia/dropwizard-logstash-encoder . Contains an implementation. Be sure to check out the open pull requests as well. \n. PS: The Travis CI build errors are unrelated to this change. I have tested it locally and it works as expected.\n. @jplock Please let me know if you have any suggestions or changes that have to be made. Thanks!\n. The 51 comes from here. I'll update the documentation. . I just updated the description. Let me know if it looks good or requires more changes.. That's a great idea! I'll work on that and publish within the next few days. Thanks for the feedback.. Here's an attempt to use the internal metricRegistry - https://github.com/dropwizard/dropwizard/pull/2650\nSome observations\n1. InstrumentedExecutorService/InstrumentedScheduledExecutorService only implement the ExecutorService/ScheduledExecutorService interfaces. If developers depend on the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting, then if we proceed with this PR, they won't be able to use those methods going forward.\n2. Some of the tests depended on the methods of ScheduledThreadPoolFactory. Since it no longer returns a ScheduledThreadPoolFactory, I had to remove those tests.\nBased on the observations I thought it might make sense to use InstrumentedThreadFactory instead, since it has a subset of the metrics already, and developers will still have access to the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide.\nHere's a PR which uses InstrumentedThreadFactory - https://github.com/dropwizard/dropwizard/pull/2649\nThe initial approach in this PR gives users the flexibility to choose between the instrumented executors and ThreadPoolFactory/ScheduledThreadPoolFactory which have the extra methods after type casting. I'll close this PR. I'll move over my observation comments over to #2650.\nI prefer #2650 over #2649  as it has more metrics, but I'll leave that decision to you all.\n2650\nPros:\n\nMore metrics - submitted(meter), running(counter), completed(meter), idle(timer), duration(timer)\n\nCons:\n\nDevelopers won't have access to the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting\n\n2650\nPros:\n\nDevelopers can access the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting\n\nCons:\n\nLess metrics - created(meter), running(counter), terminated(meter)\n. PR which addresses this - https://github.com/dropwizard/dropwizard/pull/2639. Based on suggestions I closed #2639 and raised two PRs which uses the the internal metric registry out of the box\n\nI prefer #2650 over #2649  as it has more metrics, but I'll leave that decision to you all.\n2650\nPros:\n\nMore metrics - submitted(meter), running(counter), completed(meter), idle(timer), duration(timer)\n\nCons:\n\nDevelopers won't have access to the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting\n\n2650\nPros:\n\nDevelopers can access the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting\n\nCons:\n\nLess metrics - created(meter), running(counter), terminated(meter)\n. Some observations\nInstrumentedExecutorService/InstrumentedScheduledExecutorService only implement the ExecutorService/ScheduledExecutorService interfaces. If developers depend on the extra methods ThreadPoolFactory and ScheduledThreadPoolFactory provide by type casting, then if we proceed with this PR, they won't be able to use those methods going forward.\nSome of the tests depended on the methods of ScheduledThreadPoolFactory. Since it no longer returns a ScheduledThreadPoolFactory, I had to remove those tests.. @joschi Sure. I'll close this PR and the associated issue I created. Makes sense. I've made the changes you have suggested.\n. Good catch! I'll change that.. Done!. \n",
    "redarqas": "+1\n. ",
    "toffaletti": "I saw that ticket before I submitted this and that is why I linked to the jetty maintainers reasons for removing the class because I think it brings Coda's choice into question.\n. It was a toss up. I went with IllegalStateException because it is listed in the documentation as one of the exceptions this method can throw.\nhttp://docs.oracle.com/javaee/7/api/javax/servlet/ServletInputStream.html#setReadListener(javax.servlet.ReadListener)\n. ",
    "b": "Any hope of this and #453 making it to master in the near future?\n. How far are we from having DW on Jetty 9.1.3, now?\n. THANK YOU!\n. what is the actual use case here? \n. note that the question was not different config files, but different commands in a single app. seems like this could be done in main, but regardless, it sounds like you need to just have 2 apps and 2 jars. \n. this is really a mailing list question, not an issue. can this be closed and the discussion moved there?\n. You do want SSLv2Hello out of the config and it will work, just not with apps that have unfortunate defaults:\ncurl --tlsv1 -v https://localhost:15005/api/v1/\n. @pparth I've not had problems in production with 0.8, but if I did I would either produce fixes myself or file issues for them and say kind and encouraging things to the DW team. I for one would welcome pull requests from you fixing the many problems you have with 0.8.x so that the entire community might benefit. Open source should not be a one way street.\n. ",
    "derekcicerone": "Seems like they've fixed a bunch of bugs so my vote would also be for latest.\n. Epic!\n. Sure, I think I could check the properties are set on the SslContextFactory (that would ensure Jetty received the configuration settings properly). Does that sound good?\n. Pushed a commit that hopefully does what you are looking for.\n. Hmm, I'm not seeing any docs on this but from the code it looks like excluded protocols are removed from the set of supported protocols (or if that config point isn't used, then those protocols which are enabled by the JRE):\n```\n    public String[] selectProtocols(String[] enabledProtocols, String[] supportedProtocols)\n    {\n        Set selected_protocols = new LinkedHashSet<>();\n    // Set the starting protocols - either from the included or enabled list\n    if (_includeProtocols!=null)\n    {\n        // Use only the supported included protocols\n        for (String protocol : _includeProtocols)\n            if(Arrays.asList(supportedProtocols).contains(protocol))\n                selected_protocols.add(protocol);\n    }\n    else\n        selected_protocols.addAll(Arrays.asList(enabledProtocols));\n\n\n    // Remove any excluded protocols\n    selected_protocols.removeAll(_excludeProtocols);\n\n    return selected_protocols.toArray(new String[selected_protocols.size()]);\n}\n\n```\n(from SslContextFactory.java)\n. Cool, thanks!\n. No worries! Excited for the 0.8 release - looks like it'll have lots of great stuff :)\n. The java code changes required are pretty simple with the caveat that I'm not entirely sure the changes I made are correct (see my first comment). In order to get this working with the latest Chrome & Firefox, I had to deviate from the example given on stackoverflow:\nhttp://stackoverflow.com/questions/25035063/how-to-run-jetty-with-spdy-using-alpn\nThe tricky part is what to do about the ALPN boot jar. I just noticed:\nhttps://github.com/dropwizard/dropwizard/commit/b5d190631c75cb026abeb70bfce3a364697df074\nHowever, Java 7 and 8 each require their own specific ALPN boot jar:\nhttp://www.eclipse.org/jetty/documentation/9.2.6.v20141205/alpn-chapter.html\nWould it preferable to ship DropWizard without the ALPN boot jar and require a user to download it separately?\n. Cool, thanks for taking this on!\nSome notes:\n- From what I saw in my testing, when http/1.1 was in the protocol list, it would be used instead of SPDY because the protocols are traversed in the order they came from the browser and for Chrome that order seemed to list http/1.1 first, so SPDY was never selected. However, totally possible I'm doing something weird given that the stackoverflow docs mostly match your code (see item 3 for where they deviate).\n- the ALPN boot jars are actually matched up with specific versions of the JDK so the documentation should likely direct users to the latest Jetty documentation instead of prescribing a certain version of the boot jar for a certain major release of the JDK since that info will be incorrect once the next JDKs are released.\n- I'm not sure SPDY 2 should be supported once the transition is made to ALPN - I vaguely recall that ALPN is only for SPDY 3+ and HTTP 2.0. The stackoverflow docs for this dropped SPDY 2 as well I think: http://stackoverflow.com/questions/25035063/how-to-run-jetty-with-spdy-using-alpn\n. That all sounds good to me - thanks again for taking this on!\n. I believe this is the fix:\nhttps://eclipse.googlesource.com/jetty/org.eclipse.jetty.project/+/f02da0cc339ace0a663c6bd16bfd3012f1f94879%5E%21/#F0\n. Awesome, thanks for the quick fix!\n. We've also been waiting on a release with a fix. If there is anything we can do to help out to make that happen please let me know.\n. ",
    "bretthoerner": "I'm running directly from SBT, no uberjar or artifact (aside from class files) is being created and run.\nIs there a specific dep you think I'm missing? I put dropwizard-jetty into my dependencies manually (with dropwizard-core, etc) to ensure it was there.\n. fwiw, assembling the same project into an uberjar (using sbt-assembly) fixed the issue. I'll dig a bit more because I assume other dropwizard-scala users will run into this. Thanks.\n. Wrong person. :)\n. ",
    "jjlauer": "So I'm hitting this same issue but with plain old maven.  I am not building any fat jar.  When I try to run my project using exec:java, I am unable to access any of the polymorphic types in the config file. Simple properties and my own properties work fine. Interestingly, if I run my app with a shell script and do a wildcard classpath on all jar dependencies, the issue goes away.\nMy issue is easy to reproduce.  Clone the current dropwizard repo.\ncd dropwizard-example\nmvn -e compile exec:java -Dexec.classpathScope=\"compile\" -Dexec.mainClass=\"com.example.helloworld.HelloWorldApplication\" -Dexec.args=\"server example.yml\"\nYou should then see my similar error:\nFailed to parse configuration at: server.applicationConnectors; Could not resolve type id 'http' into a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]\n at Source: N/A; line: -1, column: -1\nHere is my mvn -v output:\nApache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 08:22:22-0700)\nMaven home: /usr/maven/default\nJava version: 1.7.0_25, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.7.0_25/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.5.0-37-generic\", arch: \"amd64\", family: \"unix\"\n. Hey Nick,\nYou are correct that exec:java is using .class files directly, but only for my application-specific classes.  It still uses the published jars for dependencies (e.g. dropwizard-core-0.7.0-rc3.jar).  To make my issue reproducible, please clone the following repo:\nhttps://github.com/jjlauer/dropwizard-example-config-bug\nAssuming you're on Linux/Mac, then just execute \"make server\" from the command-line (which is just a helper way to run the exact exec:java command I'm using).\nAre these service descriptors not normal Java annotations? It's confusing why something that works all my other maven projects breaks with just the latest version of DropWizard. Something other users who compile using the command-line will definitely hit.\nAppreciate any help.\n. Nick,\nAfter digging into dropwizard-jackson -- I found the issue/bug\nfinal Enumeration resources = ClassLoader.getSystemResources(\"META-INF/services/\" + klass.getName());\nExec:java (and many other application launchers) will sometimes provide a new classloader for the system. This line in dropwizard-jackson DiscoverableSubtypeResolver.java is not using the classloader that actually loaded the dropwizard jars in the exec:java case (or other case when the classloader is changed). Changing this line to this fixed the issue:\nfinal Enumeration resources = this.getClass().getClassLoader().getResources(\"META-INF/services/\" + klass.getName());\nThis should use the underlying classloader actually used to the load the dropwizard jars themselves. Fixed my issue with exec:java and works as expected now.  Glad to submit a pull request.\n. ",
    "mjwillson": "Hi all\nWe're still seeing a similar problem under 0.7.1 when deploying an uberjar built using Gradle.\nFailed to parse configuration at: logging.appenders; Could not resolve type id 'syslog' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]\nat [Source: N/A; line: -1, column: -1] (through reference chain: com.ourapp.config.ConverterApplicationConfiguration[\"logging\"]->io.dropwizard.logging.LoggingFactory[\"appenders\"])\nSuspect it's some similar buggerage in the way these META-INF/services folders are packaged, will try and follow up with more info\n. Aha, cheers for the pointers!\n. This tip is useful, thanks -- although I notice when doing this that dropwizard 0.7.1 still fires up a webserver on port 8080, which 404's on GET /.\nNot really a big issue but might feel cleaner if it could avoid exposing anything on this port in this case.\n. ",
    "hwasungmars": "We are still having the same problem when using Gradle Shadow plugin.  But gradle-one-jar seems to do the job.\n. I think it might be because of how untar work slightly differently in different OSes.  Can you try Gradle Shadow plugin and merge service files?\n. ",
    "niels1voo": "I'm getting this error only after deploying the tar.gz to a RHEL vm, untarring it and starting it from a shell script.  Locally the same extract/run works fine.  I'm on OSX.  Could it be line-endings?\n. ",
    "pawelgocek": "Gradle Shadow Plugin and Merge Service Files solved the issue for me. Thx.\n. ",
    "Ettery": "I am seeing this issue with dropwizard 1.0.0-rc2 and an uberjar built by IntelliJ Idea - is there a fix other than another build tool?  Thanks.\n. ",
    "rjwirth": "FYI, we're still seeing the yml parsing error with the maven shade uber-jar, see https://groups.google.com/forum/#!topic/dropwizard-user/aQpyxT5Hz2s\nThe uber-jar contains the DW services files. I suspect some side effect from running Facebook Swift / Thrift, Guice, airlift all in the same app.\n. ",
    "rmuhamedgaliev": "When final 0.7 version ?\n. ",
    "mikemil": "It would be my first, but I will give it a try.   No, it looks like I copied the pom stuff right from the page, which says 0.6.2 for core.  (my first go-around with Maven too!).\nI will update my pom and test it - and it that works - will also update the maven dependency, if that's what you are looking for?\n. Changed my pom as shown below and getting an error attempting to run mvn package:\n\n\ncom.yammer.dropwizard\ndropwizard-core\n<version>0.6.2</version> \n0.7.0-rc1\n\n\nHere's the message;\n[WARNING] The POM for com.yammer.dropwizard:dropwizard-core:jar:0.7.0-rc1 is missing, no dependency information available\nDid I set the version incorrectly in the pom?  For that matter 0.7.0 doesn't work either?\nSorry  looks like the xml tags are being removed...\n. Okay, I will try that.   On the down side -  cloned the dropwizard project but the getting-started.rst does NOT match what is on the website dropwizard.codahale.com/getting-started.   On that site there is a section on Creating a Service Class (where you create HelloWorldService), which is where I was going to update to include the new imports, but I don't see that section in the files from the cloned GitHub project.\nI am willing to try and help if someone ones to 'point the way'.\nLooks like the code samples will have to change to - because of the package name from org.yammer.dropwizard to io.dropwizard...\n. So if I am following this correctly, there's nothing there for me to change and generate a pull request for?  Whenever the docs do get updated for 0.7.0, it seems like someone needs to make the following changes for the Getting Started page:\n1) change the pom dependency to reflect io.dropwzard rather than com.yammer.dropwizard\n2) change version from 0.6.2 to 0.7.0\n3) (the thing that started this issue) Add the two imports listed above to the HelloWorldService class.\n. Okay, pull request submitted.\nOne more thing - while working thru the Getting Started from the link above, I noticed that in Section 'Building a Fat Jar' - viewing the rst file - the block of XML there related to mvn shade did not show in 'github' but when I clicked the 'raw' button at the top and saw the raw source, the xml block was there.  Not sure if that's just a quirk or not. \n. Fixed the indentation (I think!).\n. Fixed indentation (I think!)\n. ",
    "tempredirect": "Have just realised that master is ahead of docs-update.. will close and sort out another rq\n. ",
    "pimlottc": "I believe this should be supported to be consistent with JSR-303 (\u00a7 3.1.3. Graph Validation): \n\nCollection-valued, array-valued and generally Iterable fields and properties may also be decorated with the @Valid annotation. This causes the contents of the iterator to be validated. Any object implementing java.lang.Iterable is supported. This includes specifically:\n\u2022 arrays of objects\n\u2022 java.util.Collection\n\u2022 java.util.Set\n\u2022 java.util.List\n\u2022 java.util.Map (special treatment see below)\nEach object provided by the iterator is validated. For Map, the value of each Map.Entry is validated (the key is not validated).\n. Thanks for the quick response guys!  One additional thought - \n\nassertThat(ConstraintViolations.formatUntyped(e.getConstraintViolations()))\n                    .contains(\"id must be greater than or equal to 0 (was -1)\",\n                            \"id must be greater than or equal to 0 (was -2)\");\nIdeally there'd be some way to determine which violation corresponded to which element within the collection.  Not sure if there is a clean way to do this though, and what the message syntax might look like (including for maps).\n. This happens with SIGTERM as well.\n. In contrast, 0.6.2 shuts down in just a few seconds, with no warnings:\n```\n$ java -jar target/dropwizard-example-0.6.2.jar server example.yml; date\n[..snip..]\n^CINFO  [2014-03-11 19:54:38,717] org.eclipse.jetty.server.Server: Graceful shutdown SocketConnector@0.0.0.0:8081\nINFO  [2014-03-11 19:54:38,718] org.eclipse.jetty.server.Server: Graceful shutdown InstrumentedBlockingChannelConnector@0.0.0.0:8080\nINFO  [2014-03-11 19:54:38,719] org.eclipse.jetty.server.Server: Graceful shutdown o.e.j.s.ServletContextHandler{/,null}\nINFO  [2014-03-11 19:54:38,719] org.eclipse.jetty.server.Server: Graceful shutdown o.e.j.s.ServletContextHandler{/,null}\nINFO  [2014-03-11 19:54:40,772] org.eclipse.jetty.server.handler.ContextHandler: stopped o.e.j.s.ServletContextHandler{/,null}\nINFO  [2014-03-11 19:54:40,772] org.eclipse.jetty.server.handler.ContextHandler: stopped o.e.j.s.ServletContextHandler{/,null}\nTue Mar 11 12:54:40 PDT 2014\n```\n. For context, I'm running Java 1.7.0_45 on OSX Mavericks\n. com.sun.jersey.api.core.ResourceConfig:\n```\n    public static boolean isRootResourceClass(Class<?> c) {\n        if (c == null)\n            return false;\n    if (c.isAnnotationPresent(Path.class)) return true;\n\n    for (Class i : c.getInterfaces())\n        if (i.isAnnotationPresent(Path.class)) return true;\n\n    return false;\n}\n\n```\nio.dropwizard.jersey.DropwizardResourceConfig#logEndpoints()\nfor (Object o : getSingletons()) {\n            if (o.getClass().isAnnotationPresent(Path.class)) {\n                builder.add(o.getClass());\n            }\n        }\n. Not sure if I've done this correctly, but here's a pull request: #492 \n. That was to resolve issue #491 which I reported.  Wasn't sure how to link the two together properly...\n. ",
    "thegamblerrises": "Hi, is it fixed only for Dropwizard or for jersey project as well?. ",
    "n4ndo": "Hi @nicktelford  thanks for your answer.\n. ",
    "uromahn": "Hello!\nis there an update to this question and the answer above?\nWe are now two years further down the road and Untertow has significantly matured and shows some great performance figures over Jetty.\nAlso integrating with Untertow shouldn't be too complex, IMHO.\nThanks for your consideration. :)\n. I understand.\nI was looking at the Dropwizard project and noticed how \"deep\" Jetty is integrated into it. A lot of features are actually based on some Jetty features or extensions. I personally don't like the close coupling between Jetty and the Dropwizard framework, but I guess there is no easy way out.\nI may take a look to find out how much effort it would be to de-couple Dropwizard better from Jetty and how much effort it would be to replace it with an Undertow.\nOn the other hand, while Undertow seems significantly more efficient and \"faster\" than Jetty, the question is whether this is really relevant and the effort to support Undertow would be worth it.\n. I was looking at this: http://www.techempower.com/benchmarks/\nHowever, I was first looking at an outdated benchmark from three years ago which compared Jetty 8 with Undertow. The most recent benchmark (round 11) now shows that Jetty 9 has closed the \"gap\".  Undertow is still pretty fast but Jetty is now listed slightly better (http://www.techempower.com/benchmarks/#section=data-r11&hw=ec2&test=json). However, it is also noticeable that the same request with a Servlet on Jetty is still about 1.75 times slower than Undertow or pure jetty. What is even more surprising to me is that Dropwizard is listed as 5x slower than pure Jetty or Undertow.\nNot sure though if those \"benchmarks\" are even representative of and meaningful for anything since it seems to compare \"apples with oranges\". I think a \"real\" benchmark would be to compare Jetty-Servlet with Undertow-Servlet or Dropwizard with Jetty and Dropwizard with Undertow (which is unfortunately not possible).\n. ",
    "DheerendraRathor": "Do you know how to mentions which schema to dump. Liquibase has option to add that but can't configure that on dropwizard\n. when will it be updated on maven central? \n. ",
    "hslater": "@nicktelford Thanks! It doesn't look like https://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/0.7.0-SNAPSHOT/ has been updated since Sept 2013, is it likely a new snapshot with these changes will be deployed any time soon?\n. ",
    "tedyoung": "Since issue 545 (porting to Jersey 2) has been \"checkmarked\", could this one be closed? Is there a test for this?\n. btw, as a (former) committer to FEST and a current contributor to AssertJ, I fully support this move! FEST is pretty much dead, and AssertJ has taken the mantle.\n. ",
    "manuviswam": "@nicktelford  : I didn't thought about that. Thanks for that reply.\n@mveitas : I will try that.\n. ",
    "csabapalfi": "Alternatively we can just make startIfRequired and a new stop method public on DropwizardAppRule but I would prefer a separate test support class and the rule using that.\n. Added some code which extracts DropwizardTestSupport from DropwizardAppRule while keeping complete backwards compatibility.\n. Hey, are you looking at merging this anytime soon?\n. I actually no longer use DropWizard, but will try to have a look this week.\n. Sorry about the delay. \nRe-done the change on the latest master (as it diverged a lot).\n2 tests were failing locally when run with all others (but passing in isolation). That still needs fixing.\n. The patch keeps everything backwards compatible. Is that required? If not then the code can be a bit simpler in some cases.\n. Found the cause of the test failures. One of the test was not cleaning up after itself properly and left an extra system property confusing the tests run afterwards. \n. Just spotted that the same test problem is already on master. Introduced by https://github.com/dropwizard/dropwizard/commit/9848d9b5275dff6255b1aa255b8075638a1cdb20\nIf you merge my PR and that'll fix the tests on master, too.\n. ",
    "hslater-okta": "Is there still a plan to merge this? \n. ",
    "ddunwoody": "I've been using this in conjuction with cucumber-guice with great success to more explicitly control server startup/shutdown, so I'd +1 this for merge, please.\n. I'll take a look this week.  It's my last week on the project that uses this, so it would be a nice feeling to get it merged in.\n. Thanks everyone.  I was saving this for work in the morning, but looks like you beat me to it!\n. ",
    "coveralls": "\nChanges Unknown when pulling ed419bfc2537b158d48dddedc49bd1b4fa6c139e on csabapalfi:test-support into * on dropwizard:master*.\n. \nChanges Unknown when pulling 09d9b54dfb8139815df332c84c0affa1feb3f6cc on csabapalfi:test-support into * on dropwizard:master*.\n. \nCoverage increased (+0.71%) when pulling aeaca5872231fd7c12a8109a7a4dad955a068c96 on arteam:proxy-support into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage increased (+0.71%) when pulling aeaca5872231fd7c12a8109a7a4dad955a068c96 on arteam:proxy-support into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage decreased (-0.04%) when pulling 85cb19c434e16366594c525c3cc5800f5f210cc0 on philandstuff:system-proxy-properties into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage increased (+0.03%) when pulling f79775d38e15adce76b002be3082c21567c6a4dd on philandstuff:system-proxy-properties into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage increased (+0.06%) when pulling 63045e7a3a9f893a5d38d6251d124531cab97b64 on jchilders:simplify-hibernatebundle into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage increased (+1.22%) when pulling eecffeef56c52d2810bc8ed000bbb995674518ed on obfischer:master into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage increased (+0.27%) when pulling 1c956a7f3e011be004e719b155e82ede46e8498b on obfischer:master into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage decreased (-0.02%) when pulling ec167859c7a3c197dc30239bb458bc662be402b3 on Toilal:docfix into 4743518ab1c1f0b64092e6b56556bbfe70544ee7 on dropwizard:master.\n. \nCoverage decreased (-0.41%) when pulling ee21d03030b5b0987dfbe5866bc854a138ce3c7b on Toilal:chained-auth into 1b17eaac9ab2ce556a73f5d5ad9fcf365e9c2ee1 on dropwizard:master.\n. \nCoverage increased (+0.2%) when pulling d2226fc42358c5781af55e7de359662fbf6be0dc on Toilal:chained-auth into 1b17eaac9ab2ce556a73f5d5ad9fcf365e9c2ee1 on dropwizard:master.\n. \nCoverage increased (+0.31%) when pulling 91c140957e0a51bdc2b6fc77d07c969bd7e95a5f on Toilal:chained-auth into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage increased (+0.31%) when pulling df97ea7df80b4d9d63fe5f4e84c9288d3fd1d9d8 on Toilal:chained-auth into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage increased (+0.1%) when pulling 54cdcb7492b23d8e21b4af4ad560806e159ffabe on stuartgunter:logging-configurator into 2b539ac2f79f4a759ee3574a90e85d8aff813a51 on dropwizard:master.\n. \nCoverage increased (+0.12%) when pulling 54cdcb7492b23d8e21b4af4ad560806e159ffabe on stuartgunter:logging-configurator into 2b539ac2f79f4a759ee3574a90e85d8aff813a51 on dropwizard:master.\n. \nCoverage decreased (-0.02%) when pulling dda59819addcaffa57dc5de7e40a00bb270f7737 on chena:hibernate-doc-typo into 2b539ac2f79f4a759ee3574a90e85d8aff813a51 on dropwizard:master.\n. \nCoverage increased (+0.02%) when pulling eecfd5e9c15c246a0a3b568cb718392d309668b5 on meshuamam:meshuamam/jsonparsingerror into 6e8693adc1944f37596d2a925d7ed35e21e03987 on dropwizard:master.\n. \nCoverage remained the same when pulling f67592a9cc88cf61fb35c1193b8248b4efd6384f on chaten:patch-1 into 04dbbf7b882826a31476295513c83b9ce579f7b7 on dropwizard:master.\n. \nCoverage increased (+0.2%) when pulling 60fbe90d864c97e8cf0366b428705dbe64cf5fe7 on t1:client-testing into 2ab782692ac218a4e3fe39a81c32564f3bff78aa on dropwizard:master.\n. \nCoverage increased (+0.18%) when pulling a070ecc7e5a8c11040d185daef7fb7e7383138d6 on t1:client-testing into 2ab782692ac218a4e3fe39a81c32564f3bff78aa on dropwizard:master.\n. \nCoverage remained the same when pulling 457803ef6942d996e1729654b802556b5840daaa on filter_example into 2ab782692ac218a4e3fe39a81c32564f3bff78aa on master.\n. \nCoverage decreased (-0.81%) when pulling d4ad2163e4de09904eeae020ff1a49a68206b934 on jersey-2 into ca878ff998724f974a9d4c2b46d92b6d66ee6614 on master.\n. \nCoverage decreased (-0.81%) when pulling c4a424bd025ea9a150507f65ac6bd7c325b6fbb3 on jersey-2 into ca878ff998724f974a9d4c2b46d92b6d66ee6614 on master.\n. \nCoverage decreased (-0.77%) when pulling 6e3bae15e4a9f0eca37964232300913c18bcbbac on jersey-2 into ca878ff998724f974a9d4c2b46d92b6d66ee6614 on master.\n. \nCoverage remained the same when pulling 3deeda728c176b00f47c9f2c1e0bb8eaf0504b85 on justinrmiller:adding_dev_list into 85e418464aa7b473059fceb17346d2ca8980eb1d on dropwizard:master.\n. \nCoverage decreased (-0.01%) when pulling f2523cd60b112bc241331808fe69ba30d1c3a117 on Flyinfi5h:master into a29579a2636f573898764924c38333858f67c4f5 on dropwizard:master.\n. \nCoverage remained the same when pulling 2ec9fe674821eac3a864ac9e892cf5a741078b56 on jplock:jp-auth-docs into a29579a2636f573898764924c38333858f67c4f5 on dropwizard:master.\n. \nCoverage remained the same when pulling 5b12d7da1e04bccb7991ce483393ac01ebae3322 on mhurne:master into a29579a2636f573898764924c38333858f67c4f5 on dropwizard:master.\n. \nCoverage increased (+0.49%) when pulling ff9c7145d5a0655a12ba8b04b3f66c512b44b3b6 on arteam:dbi_tests into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage increased (+0.45%) when pulling 23fcb284a20fc1f1103c056f483a3b25ba931c1b on arteam:dbi_tests into a876b6576cbe9d9abbc8bbdb116a127d20eabc1c on dropwizard:master.\n. \nCoverage increased (+2.68%) when pulling 0f958d526421a6a479f7f6c647866ab195986752 on arteam:simple_factory_test into 3b048005a4cb734c60159403762801d92c6a4f62 on dropwizard:master.\n. \nCoverage remained the same when pulling dfb066a6b61e81163f413b5d0548e46902691e73 on jangalinski:commons-lang3_global into a80d6efd5ef0356cc642ea136b2ee3ebe348f465 on dropwizard:master.\n. \nCoverage increased (+0.22%) when pulling 8d2fd813f017a91f5f31f663b5fb626720ef8d96 on jangalinski:711_add_tests into ba164d0afbc402b7eb031615faa08a6face0918b on dropwizard:master.\n. \nCoverage decreased (-0.01%) when pulling df6ade10f50b0f17a75cdbf60df4eb209ebb6dc4 on citerus:codecleanup into 82cebca3ff4a9381a3b870c6a73f73fdd64f287e on dropwizard:master.\n. \nCoverage increased (+1.21%) when pulling ee81766ac68026d4f14516a6499dd11cd23a36ba on derekcicerone:master into 82cebca3ff4a9381a3b870c6a73f73fdd64f287e on dropwizard:master.\n. \nCoverage decreased (-0.04%) when pulling bf315a7e7f034ca4b10c07003fb1846009822bf3 on soulrebel:master into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage increased (+0.04%) when pulling e1f9078e0d5f1785a486ddcc5b930fd9f426627a on soulrebel:master into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage remained the same when pulling b81c6cf19c0b30ecd7ec40c1a2d0e166165f9484 on arteam:remove_reflection_from_sys_appender_test into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage increased (+1.89%) when pulling 3a7c643da1571f66d6f24b5f8c5847b3814c2f2b on arteam:http_connector_factory_test into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage increased (+1.88%) when pulling 57a2d8b4b72545bf078127e12b61ba354287c374 on arteam:http_connector_factory_test into f709cb7fd9d69d37eeef178d8454aa257175f47d on dropwizard:master.\n. \nCoverage decreased (-0.03%) when pulling 5d919208c6371f419f83a77d170d37e71a45360a on jplock:jp-gh749 into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage increased (+2.85%) when pulling 1c927f52d14db6a2f679553a4ef7b95374c0eb1d on jplock:jp-gh749 into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage increased (+0.08%) when pulling 334b757da42da9505769bf31ed1d1dd4cc5db218 on mhurne:comparable-size into 8ca7f624f2d4305e7e9275bfccde09d1254c032c on dropwizard:master.\n. \nCoverage remained the same when pulling 21601f6aa2fc54f60e558a3edafc5d02a33c343b on reines:upgrade_mustache into 0d8a35acd9c14cc8efd176c8d6331a33f155b9b3 on dropwizard:master.\n. \nCoverage increased (+0.02%) when pulling 836ad6ef608720fe6fe25db732af02bd3f8749d3 on reines:upgrade_freemarker into 0d8a35acd9c14cc8efd176c8d6331a33f155b9b3 on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling 7257db5857470ec8c237cf79af6b670a3cd4b56c on reines:upgrade_freemarker into f67cb0152ee963c6f7ff99e0999786b68f02d1ad on dropwizard:master.\n. \nCoverage increased (+0.08%) when pulling 9cd7d351d34249886448f1065611fc4589119613 on reines:comparable_duration into 0d8a35acd9c14cc8efd176c8d6331a33f155b9b3 on dropwizard:master.\n. \nCoverage increased (+0.03%) when pulling d088b53d42796382fcacef9a39ae1c85b53682c1 on reines:comparable_duration into 0a3bce9490e3a86c828013c65efbb04cb9889b40 on dropwizard:master.\n. \nCoverage increased (+0.04%) when pulling 6badb6a102c24d2fbd85e95e2a519fc11547da94 on reines:chunked_encoding_configuration into 983f120cfe5e6c610f43f3d80dd5367f24b7f996 on dropwizard:master.\n. \nCoverage decreased (-0.04%) when pulling 849f8349d331711a05181274d24c1f9640d9aa1f on jangalinski:appRule_as_externalResource into 983f120cfe5e6c610f43f3d80dd5367f24b7f996 on dropwizard:master.\n. \nCoverage increased (+0.18%) when pulling 40b6f336cbdd11d64f6426e505feeedfe9c5eb03 on devinrsmith:master into e03b81ecf3cd50240b534ef64606b52c3fa79c76 on dropwizard:master.\n. \nCoverage remained the same when pulling 25479ee36f8fc36964cb14a3ee8232add340f87b on dminkovsky:patch-1 into f998c27bad072e46d3049b57c9b5169c0ec68255 on dropwizard:master.\n. \nCoverage remained the same when pulling bf72e1186b5a892843a629c16181e913223c72a8 on WilliamHerbert:master into f998c27bad072e46d3049b57c9b5169c0ec68255 on dropwizard:master.\n. \nCoverage remained the same when pulling c75535955930310b50b283ec42c2fbdf2ac55362 on stve:release-notes-fix-for-migrations into 01c738ea70afec6bb6626a35055f9828f519c0db on dropwizard:master.\n. \nCoverage remained the same when pulling 78891d5f77327cf37bf086c67c8ee9321e179193 on cemo:fix-el-api into 9827b92c5b1fa3d480f88eb1eba8d9bdb713797c on dropwizard:master.\n. \nCoverage remained the same when pulling 06ea9a2bc2e1a2eaad1829b8100b344aad659924 on service-enabled:feature/dropwizard-archetypes into 9827b92c5b1fa3d480f88eb1eba8d9bdb713797c on dropwizard:master.\n. \nCoverage remained the same when pulling e9f3f6a06b962569cf2bdc6951e1a818ba19aa9d on LeekAnarchism:remove_unneeded_throws into 303eb9ee65da31d7d9e1d7ced3002f66929dfefd on dropwizard:master.\n. \nCoverage decreased (-0.05%) when pulling 8c8e662d039a302f7f38d45fc8f8e5485dc51455 on cmicali:issue_780_client_gzip_filter into 5178adc871b03fe07de942368540fee59167029d on dropwizard:master.\n. \nCoverage remained the same when pulling 8c8e662d039a302f7f38d45fc8f8e5485dc51455 on cmicali:issue_780_client_gzip_filter into 5178adc871b03fe07de942368540fee59167029d on dropwizard:master.\n. \nCoverage remained the same when pulling 2a3f1300d0629397fbb15d8236f772fac4260fa0 on cmicali:issue_780_client_gzip_filter into 5178adc871b03fe07de942368540fee59167029d on dropwizard:master.\n. \nCoverage remained the same when pulling d4bc0a2858b4dd6c4aabc22a5ae88e8dd676c766 on ryankennedy:master into 53566941fe4c20b58a76ee0b2f620d86fc49f8d1 on dropwizard:master.\n. \nCoverage remained the same when pulling 683310419154e03e6811e6c7c6caa1d07eaa664b on Toilal:rootPath into be79100d873b5a1941ff6d61ae68a4c5be413ebc on dropwizard:master.\n. \nCoverage increased (+0.02%) when pulling 67fe6b51bd792b2f1b5374348c0cbd94ba6bb859 on Toilal:rootPath into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling 3fbfd15cd010400e275b585e93c9d9c04907d61d on Toilal:rootPath into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling 3fbfd15cd010400e275b585e93c9d9c04907d61d on Toilal:rootPath into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage remained the same when pulling 505d11eee31d6d1554dd7c4323cc1694783a517a on oddmar:jersey-filter-documentation-update into be79100d873b5a1941ff6d61ae68a4c5be413ebc on dropwizard:master.\n. \nCoverage remained the same when pulling 2dafbb66595cd63e33d625d1e1492983baef4caf on Jerry-Carter:master into be79100d873b5a1941ff6d61ae68a4c5be413ebc on dropwizard:master.\n. \nCoverage increased (+0.17%) when pulling 2b774bb9465a2908701ed1f9d9b2886998549354 on cmicali:jersey_client_metrics into be79100d873b5a1941ff6d61ae68a4c5be413ebc on dropwizard:master.\n. \nCoverage remained the same when pulling 45292a949dfe0f3f9ee9f5de6a60017b1ac82e9b on LeekAnarchism:fix_maxSize_docs into be79100d873b5a1941ff6d61ae68a4c5be413ebc on dropwizard:master.\n. \nCoverage increased (+0.14%) when pulling 9fa17e270ca9a0dc7a09e810bd3c2d9c8946e73d on cmicali:make_exception_mappers_configurable into 6bb1b437b9ab0313b4b32df25caaff0f51bb729a on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling c83980324add33b9e743a0b18af47ec42c5a443d on dhs3000:patch-1 into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage increased (+0.44%) when pulling 93ae62e645064601626a241be6efae6fb4a837e2 on jweissrfid:master into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage increased (+0.07%) when pulling 1db348ed6d5b65ac55368dab06f4101deeed5c7e on Toilal:custom-auth into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage decreased (-0.02%) when pulling 1c3b7ac18d9387f2300acd11594d5694827fc01d on Randgalt:master into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage remained the same when pulling 944cee5892d0a7d5bd395017441872db27082eb8 on mcdan:issues/881 into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage increased (+0.09%) when pulling 0e1427375d4283283d803a01832c5a7da4a3976d on MarkReddy:issues/806 into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage increased (+0.07%) when pulling 66116b9123bdde22ef25a63d02398739e1c07dbd on MarkReddy:issues/806 into 07fe33cff2c4ffa69639de38b768e3cfd1c590af on dropwizard:master.\n. \nCoverage remained the same when pulling 8760ba01e68526fdd0b3abc549cf27dcf735c4b5 on punya:patch-1 into 8ed6dca6a698305a3945b99c806532c77260459b on dropwizard:master.\n. \nCoverage remained the same when pulling 0972578d519d4511488098929b05670d2e2658a2 on punya:patch-1 into 8ed6dca6a698305a3945b99c806532c77260459b on dropwizard:master.\n. \nCoverage remained the same when pulling 0c84f2e37834533e95bb028071cc15cab082f508 on citerus:issue-815 into ac66ddfab07f446033ea517f23867ce99e32d038 on dropwizard:master.\n. \nCoverage increased (+1.08%) to 68.34% when pulling e214fe59a88087e96a1370792396fa668a29a14f on citerus:issue-815 into 5f48a31a37c72f08f4f111661e39ddfd0138069f on dropwizard:master.\n. \nCoverage remained the same when pulling bc2a077e6892dca644d20b1779e0934c5d2e8037 on arteam:alpn into f869a7be52d7692a3b5a08749fe2088d073e07ce on dropwizard:master.\n. \nCoverage remained the same when pulling 43090372e2b12d687bc814a0423952a2ed95dd2b on arteam:alpn into f869a7be52d7692a3b5a08749fe2088d073e07ce on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling ce1246b55921995f5370c4bd738094a0f9fe7ce3 on joschi:simplify-jersey-optional-support into 5c430cd58944f8fb64af153f5df82313b7444f55 on dropwizard:master.\n. \nCoverage remained the same when pulling bbe53feb232c3acef188ec507bbbd2db9346d496 on joschi:simplify-jersey-optional-support into 991b1c72441cf685cde31a16c0aaf68c3815e372 on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling b9b192cefe10a31a69c780758e48845e15b65a22 on arteam:drop_spdy_2 into 4daf814ceeeefcd972b76b161890d9862a9ff473 on dropwizard:master.\n. \nChanges Unknown when pulling 250a83b26d4bc3a06d8c8643eeeba147e84649be on arteam:additional-pool-metrics into * on dropwizard:master*.\n. \nChanges Unknown when pulling 23806245134c7974237f350cfbc70d1b6815a9e8 on arteam:extract_metric_name into * on dropwizard:master*.\n. \nChanges Unknown when pulling 40ffa9e8744d3cb02e77a86cfb978dac1f961eae on arteam:correct_example_docs into * on dropwizard:master*.\n. \nCoverage decreased (-0.2%) when pulling 500417095e62aca2edad57d5b17c94beb917e13a on cmicali:testing_enhancements into 4fec8a95cc4de3a8f2f87ea4e3437616f19a0d41 on dropwizard:master.\n. \nCoverage decreased (-0.2%) when pulling 92a5a12145159f2b619bc575d65e863bb4489a31 on cmicali:testing_enhancements into 4fec8a95cc4de3a8f2f87ea4e3437616f19a0d41 on dropwizard:master.\n. \nCoverage increased (+0.03%) when pulling 23fcb65253496b6830a846199a6bb82efeeaef0f on jangalinski:829_log_tasks into 4fec8a95cc4de3a8f2f87ea4e3437616f19a0d41 on dropwizard:master.\n. \nCoverage increased (+0.03%) when pulling 23fcb65253496b6830a846199a6bb82efeeaef0f on jangalinski:829_log_tasks into 4fec8a95cc4de3a8f2f87ea4e3437616f19a0d41 on dropwizard:master.\n. \nCoverage remained the same when pulling c2f0d3a436310e894fb6f6bb9eceaeb0bfdd4dea on aausch:master into 9c0c11b75be2ea2d616c87a6b1268811ee80fd90 on dropwizard:master.\n. \nCoverage increased (+0.49%) when pulling 20540e4d1879c95589355159586c373d9fc9acde on arteam:warning_thread_pool_executor into 3b8ea388ffef547e2c754145fd490a6556834350 on dropwizard:master.\n. \nCoverage decreased (-0.01%) when pulling ab6e172ca08bfd89e9f430f56961de4d008dfacb on arteam:remove_jersey_gzip into f12028014d36d9f2016cae31466c0f0cb8f9ff8d on dropwizard:master.\n. \nCoverage remained the same when pulling 4d32287d4c928ce085ad0ee454cc94f6c148aa61 on arteam:get_endpoints into f12028014d36d9f2016cae31466c0f0cb8f9ff8d on dropwizard:master.\n. \nCoverage remained the same when pulling 97df9f736e7b7c85ab14a03c26b39b10a6741c56 on arteam:http_client_constructors_visibility into f12028014d36d9f2016cae31466c0f0cb8f9ff8d on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling aaa240ee08d399a583f4f228a4be750503399675 on joschi:bean-validation into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage increased (+0.27%) when pulling 9d4bbe838612847cf2ebd4229245b13c870796f2 on gunnarahlberg:master into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage increased (+0.12%) when pulling 5f1de2ef50701c71c8a7f4c9417a7de2608416bd on oillio:commandRunner into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage decreased (-0.01%) when pulling ecf12e18c1a9691b31dc55b7f1597c94c4007ea0 on jangalinski:patch-1 into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage increased (+0.05%) when pulling efa9774d4a6fd775619dba2b8f101ae9a47eb9a7 on mabn:connection_request_timeout into 8a1d9ca293e4d5d5f1c37802d5c7cf43e7f0ef05 on dropwizard:master.\n. \nCoverage remained the same when pulling bd229bdbd2ea75bef4d5c5927fafd92a44e018a7 on smolloy:master into e5abb6616758f2b76adb358cebc76228f4699b53 on dropwizard:master.\n. \nCoverage increased (+0.01%) when pulling 5fcc6a8d53f1851a6f55e8ba9190b078e8c3f341 on Athou:patch-1 into fd8fbc2c751d0157b371d93f3f4f7c1806ffd038 on dropwizard:master.\n. \nCoverage increased (+0.11%) when pulling 2f2ba8a89a5f367c509ac2e4f7eec840e8aa9175 on arteam:jersey_client_queue_size into 741a1611a67f26d7cd353079c5bc80aaad4010fb on dropwizard:master.\n. \nCoverage increased (+0.07%) to 67.59% when pulling ad4a19dd8aa60cd9290bc6b3b00d70575870f46b on arteam:jersey_client_queue_size into 07d92808e0fbb758213c5f87e9603af6b87efeae on dropwizard:master.\n. \nCoverage remained the same at 67.27% when pulling 7c6c7163d42cf4c9a23ceaae1cea177ad2996b84 on yunspace:origin/master into 741a1611a67f26d7cd353079c5bc80aaad4010fb on dropwizard:master.\n. \nCoverage remained the same at 67.27% when pulling 53fcf45073e79149ea024ab9454eb44e6ee95c38 on yunspace:master into 741a1611a67f26d7cd353079c5bc80aaad4010fb on dropwizard:master.\n. \nCoverage increased (+0.04%) to 67.31% when pulling f510ff2fda6947b5eb54d767b90f44be5f5339bf on arteam:handle_empty_configuration into 741a1611a67f26d7cd353079c5bc80aaad4010fb on dropwizard:master.\n. \nCoverage remained the same at 67.27% when pulling 0b93112023ff2dcead8b31a50ad37261976799ac on arteam:add_database_configuration_reference into 741a1611a67f26d7cd353079c5bc80aaad4010fb on dropwizard:master.\n. \nCoverage decreased (-0.33%) to 66.94% when pulling 60bbf071749f797558ffcdff0d49d45bf0dc84b6 on HaVonTe1:master into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 67.29% when pulling 5f7843539bdd9d6ab78e557cec71febbf0facce6 on mattnelson:master into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 67.29% when pulling 5f7843539bdd9d6ab78e557cec71febbf0facce6 on mattnelson:master into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage increased (+0.21%) to 67.48% when pulling 75faffdf1015127f89d97a555469e2d96aaa2fa9 on arteam:dropwizard_jersey_apache into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage increased (+0.21%) to 67.48% when pulling 3ec7f18fc5ee59520706adae624f05e5c8729e3c on arteam:dropwizard_jersey_apache into 49fe243f0e472fea34355a183fba253409a68520 on dropwizard:master.\n. \nCoverage increased (+0.21%) to 67.48% when pulling 48fdb73ebb24aafd4ed18e968e01363ea6abada0 on arteam:dropwizard_jersey_apache into 49fe243f0e472fea34355a183fba253409a68520 on dropwizard:master.\n. \nCoverage decreased (-0.07%) to 67.2% when pulling f500f086c69c461999be65ebcc206bedf1c40082 on eiden:db-migrations-liquibase-connection-leak into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage decreased (-0.03%) to 67.24% when pulling 7d28d2b9d9eb53bcccd781986c830eb43bd255ea on eiden:db-migrations-liquibase-connection-leak into c6b4c3257b22d47c1fc11890fdb5ea323e34ab81 on dropwizard:master.\n. \nCoverage remained the same at 67.24% when pulling d481b9f2a2cbcd36806789b57024d612a7a4c518 on brianm:patch-3 into 5598d46ca6686f6543bdbc20bc4d17f486f90931 on dropwizard:master.\n. \nCoverage remained the same at 67.24% when pulling 1937d3e6daf8b3ff125ba31684de72e5fc910744 on d2fn:patch-2 into fe2a95ce9d861b5e8aed47b5f82456e034dff876 on dropwizard:master.\n. \nCoverage increased (+0.67%) to 68.18% when pulling 515a71954f375fbe36a62b5fbf2cffe419b5ce37 on eiden:logback-print-error-messages into dbe1fe4f631b0d70f2b346be2aed23112e3c3648 on dropwizard:master.\n. \nCoverage increased (+0.8%) to 68.32% when pulling c76e0fe9235f3cfbdb20485696233436a68647cf on eiden:logback-print-error-messages into dbe1fe4f631b0d70f2b346be2aed23112e3c3648 on dropwizard:master.\n. \nCoverage increased (+0.11%) to 67.62% when pulling c60c89222803a582df34d4beb32f49e0a27fee46 on ToadJam:AddingRegexMatchingToTheBaseReporterFactory into a6510ce62757c6b199e557f06e90909a32c31437 on dropwizard:master.\n. \nCoverage increased (+1.23%) to 68.74% when pulling 84d0270356585fdbac358706b5c1112f32d8c040 on ToadJam:AddingRegexMatchingToTheBaseReporterFactory into a6510ce62757c6b199e557f06e90909a32c31437 on dropwizard:master.\n. \nCoverage increased (+0.15%) to 68.75% when pulling 8f8fa15f733a5abdc02493cf263eeedaa540faff on ToadJam:AddingRegexMatchingToTheBaseReporterFactory into 97bb10b28268152eb387a64220b30ebd893a96d8 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 67.61% when pulling 352d686359c5d6d9b79a6bb31a67d1b485d7281a on arteam:hibernate_metrics into 58f00a52f13e87bb28dc31ed902596700022d18c on dropwizard:master.\n. \nCoverage increased (+0.29%) to 68.63% when pulling 215c9ccfdc39b34eb9c4312b2aaa05174b1785a5 on jplock:jp-range-support into 7401bd28c220f44f2a58965701a84a498de94219 on dropwizard:master.\n. \nCoverage increased (+0.27%) to 68.6% when pulling f316d069b980a5954f2f69bade9e0026e688ca81 on jplock:jp-range-support into 7401bd28c220f44f2a58965701a84a498de94219 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 68.36% when pulling 2ca53e73b98467246e76efcbb4fed4f792a3e33f on glennmcallister:data-rep-leak into 7401bd28c220f44f2a58965701a84a498de94219 on dropwizard:master.\n. \nCoverage increased (+0.0%) to 68.61% when pulling 8d3a1737316fc42208d3089b6117e386da581e04 on eepstein:master into 97bb10b28268152eb387a64220b30ebd893a96d8 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 68.7% when pulling 1c8a2e1ec920df14dbc9c5ad97f37918d26e3261 on eepstein:master into 071b8104c0cf788264594899386ea5bfbf28d910 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 68.7% when pulling 1c8a2e1ec920df14dbc9c5ad97f37918d26e3261 on eepstein:master into 071b8104c0cf788264594899386ea5bfbf28d910 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 68.7% when pulling 1c8a2e1ec920df14dbc9c5ad97f37918d26e3261 on eepstein:master into 071b8104c0cf788264594899386ea5bfbf28d910 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 68.7% when pulling 1c8a2e1ec920df14dbc9c5ad97f37918d26e3261 on eepstein:master into 071b8104c0cf788264594899386ea5bfbf28d910 on dropwizard:master.\n. \nChanges Unknown when pulling 91f3d74d85089969e854e7aefdb6017918a43220 on carlo-rtr:example_put into * on dropwizard:master*.\n. \nChanges Unknown when pulling 846de937619ed8c15c7e6b40fa08a76e02516b80 on carlo-rtr:releasenotes into * on dropwizard:master*.\n. \nCoverage increased (+0.15%) to 68.85% when pulling 1b022c312377c1649227db0870975d0f74650819 on config-environment-variables into 09ab6b03e4821548c90f50de6925878084307a83 on master.\n. \nCoverage increased (+0.15%) to 68.85% when pulling f61215e72ff6a7aadab9f5687bb4f4e43325a576 on config-environment-variables into b1f5a6e5dd89d96ac280c886727ffedc326d96a1 on master.\n. \nCoverage remained the same at 68.7% when pulling e4694a8525d19f0c0e7ddedf0f88e52e9bff30ee on pkwarren:release_note_typos into 09ab6b03e4821548c90f50de6925878084307a83 on dropwizard:master.\n. \n\nChanges Unknown when pulling 847275afd08b217bd98c633c6c7c2d1ab84b8cc0 on carlo-rtr:discoverable_logging into  on dropwizard:master.\n. \nCoverage decreased (-0.09%) to 72.18% when pulling 1033cc60dc04e1879c28f8b28678ce0e637da65f on arteam:abstract_ds into b63feeb184200818f34b7ac693c32bdc03e5c0a0 on dropwizard:master.\n. \nCoverage increased (+0.23%) to 71.65% when pulling 18d1187185665eae487c5459131519e18c38b311 on nickbabcock:constraint-messages into 5d0dd61fb50f70cd6e813d2fcb6b086e8345923c on dropwizard:master.\n. \nCoverage decreased (-0.65%) to 71.72% when pulling 67fd54f4973fa4ed3b1de4e5ee78798a7621e8fe on nickbabcock:constraint-messages into 150bac9213fabaeb1d85649f4ba53a3808cd7926 on dropwizard:master.\n. \nCoverage increased (+0.27%) to 72.65% when pulling 67fd54f4973fa4ed3b1de4e5ee78798a7621e8fe on nickbabcock:constraint-messages into 150bac9213fabaeb1d85649f4ba53a3808cd7926 on dropwizard:master.\n. \nCoverage decreased (-0.65%) to 71.72% when pulling 67fd54f4973fa4ed3b1de4e5ee78798a7621e8fe on nickbabcock:constraint-messages into 150bac9213fabaeb1d85649f4ba53a3808cd7926 on dropwizard:master.\n. \nCoverage increased (+0.27%) to 72.65% when pulling 67fd54f4973fa4ed3b1de4e5ee78798a7621e8fe on nickbabcock:constraint-messages into 150bac9213fabaeb1d85649f4ba53a3808cd7926 on dropwizard:master.\n. \nChanges Unknown when pulling dc02fd90f7476063861782976a0b1559353106d3 on arteam:fix_coveralls into * on dropwizard:master*.\n. \nCoverage remained the same at 71.43% when pulling 9cb1179c33ca89c549ef6f5d96206f34b14ff1d5 on carlo-rtr:apache_connector_test into d4bfa0f1b27b5cfc50dee0c934ee8ec8c027f81c on dropwizard:master.\n. \nCoverage increased (+0.08%) to 71.51% when pulling fdc29d619dc2d57393eb6a6a8650e10abb68549b on jplock:jp-gh947 into 5d0dd61fb50f70cd6e813d2fcb6b086e8345923c on dropwizard:master.\n. \nCoverage increased (+0.04%) to 71.47% when pulling 8bcd6953e92162475dc56be97786fcd8485b996e on jplock:jp-gh947 into a6b81d456af4d07a3305a2eab701460477f26e40 on dropwizard:master.\n. \nCoverage remained the same at 71.72% when pulling 28d4554b14f78540540461f69fce0786c8583e66 on arteam:upgrade_to_jackson into a21ce52054d8245a5941c2b953592a81b43cdfcb on dropwizard:master.\n. \nCoverage remained the same at 71.72% when pulling 37ba567e5e854be00562885cf8e47e6fd106e894 on TJ-Cutajar:upgrade_to_jetty_9.2.11.v20150529 into e4d48cd12ba2f2ed161ed8ed35afba11c5e7f49b on dropwizard:master.\n. \nCoverage increased (+0.34%) to 72.27% when pulling 416c247b53756b801cd8b4a0d54a165265114f0a on arteam:more_migration_tests into 398b9c9dc8dfa4ab6d5ef4da2e5ef0fb052413c5 on dropwizard:master.\n. \nCoverage increased (+0.34%) to 72.27% when pulling 416c247b53756b801cd8b4a0d54a165265114f0a on arteam:more_migration_tests into 398b9c9dc8dfa4ab6d5ef4da2e5ef0fb052413c5 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 71.88% when pulling d65421dcd360a1ce94594f8a362e91cd56d3f9bc on ghenkes:master into 398b9c9dc8dfa4ab6d5ef4da2e5ef0fb052413c5 on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 72.22% when pulling ff022246132bd8b2a9f2f563e91f293a8b3e6ca2 on ghenkes:master into b63feeb184200818f34b7ac693c32bdc03e5c0a0 on dropwizard:master.\n. \nCoverage remained the same at 71.93% when pulling 6ab00e39ddee5f2be746860613a5056678495b8e on nickbabcock:validation-docs into 398b9c9dc8dfa4ab6d5ef4da2e5ef0fb052413c5 on dropwizard:master.\n. \nCoverage remained the same at 72.27% when pulling 195e5ec7eaf09eccccfd78bc5e3698c844322e6a on nickbabcock:validation-docs into db792a5e48e95801c3b468981ab06b534d618ae4 on dropwizard:master.\n. \nCoverage remained the same at 72.27% when pulling 195e5ec7eaf09eccccfd78bc5e3698c844322e6a on nickbabcock:validation-docs into db792a5e48e95801c3b468981ab06b534d618ae4 on dropwizard:master.\n. \nChanges Unknown when pulling f3049ed6bb0d38170d60bc1956207dadefe37c5e on nickbabcock:validation-docs into * on dropwizard:master*.\n. \nCoverage remained the same at 72.27% when pulling d80a76fdc22ba7a6937976320c3fc62e797b6634 on nickbabcock:migration-windows-fix into db792a5e48e95801c3b468981ab06b534d618ae4 on dropwizard:master.\n. \nCoverage remained the same at 72.18% when pulling d1b8a9fa286d89d64bf6ab7a74e33480b6ab92d6 on dareonion:master into bdfde9037bb6e8cb093cd9179cc7277c19ac4511 on dropwizard:master.\n. \nCoverage remained the same at 72.18% when pulling a35d843522f2e7c8e0978ef3f8b56324fcceff56 on RawToast:patch-1 into 938d6a1c1efbd7c0296cbd59b0e75d51099979c1 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 72.2% when pulling 6f78cbdfe926f4e0b634b9c961ce943567874693 on arteam:respect_for_deserialize_to_string into b119bb303fcfd081c0c8ba70ce688cccc671f10a on dropwizard:master.\n. \nCoverage decreased (-0.05%) to 72.13% when pulling 39670bf0eb2c1510811f1abc73f4661cd59ce03c on christophercurrie:db-migrate-mac-fix into b119bb303fcfd081c0c8ba70ce688cccc671f10a on dropwizard:master.\n. \nChanges Unknown when pulling 69cf966ef483d6945c0be9906c71c70aea89504f on arteam:db_dump_test into * on dropwizard:master*.\n. \n\nCoverage decreased (-0.06%) to 74.745% when pulling 178eaa2f109d796c070526464c58ff08ef5f0128 on mnrasul:nrasul/unauthHandler into 0c684414dc33d99da5f886cc897d181d28893d8b on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 76.754% when pulling efd08a72ddfbc29a1fbc2655d652f835e36a651e on afrin216:duppath-log-fix into 47b7f4ff03c04b0248c5dd1831a9243773a959c7 on dropwizard:master.\n. \n\nCoverage decreased (-0.004%) to 76.616% when pulling efd08a72ddfbc29a1fbc2655d652f835e36a651e on afrin216:duppath-log-fix into 47b7f4ff03c04b0248c5dd1831a9243773a959c7 on dropwizard:master.\n. \nCoverage decreased (-0.1%) to 80.707% when pulling 262945c9b4c90e9b8bea0f0788fa32d1b8356ddb on vvondra:multiple_config_files into 34f37344844c6d9aedd88de9b6591e6973ee691d on dropwizard:master.\n. \nCoverage decreased (-0.1%) to 80.707% when pulling 262945c9b4c90e9b8bea0f0788fa32d1b8356ddb on vvondra:multiple_config_files into 34f37344844c6d9aedd88de9b6591e6973ee691d on dropwizard:master.\n. \nCoverage remained the same at 80.841% when pulling 2898d94b362bf8e5ef22f9c32c3683790d8d5e57 on nitram509:revise-docs-testing-non-junit into 34f37344844c6d9aedd88de9b6591e6973ee691d on dropwizard:master.\n. \nCoverage remained the same at 80.841% when pulling d9d0d99bb1c8029322a28d5c5c32ea807c64b464 on nitram509:revise-docs-testing-non-junit into 34f37344844c6d9aedd88de9b6591e6973ee691d on dropwizard:master.\n. \nChanges Unknown when pulling cbe48bd4cc1bb2c8e1c75af49e2c5ef97897cdc7 on patrox:dropwizard_db_rollback_on_return into * on dropwizard:master*.\n. \nCoverage remained the same at 80.855% when pulling 78e38987ba9a63353837cbd325efc25eaf0ef264 on rbarbey:d11n/fixed-links into 3f310906f4831725500b0e8ae48e7fa7cf2e7355 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 80.877% when pulling becdf367a17265d3a99502f5f55a54b74cd8779f on patrox:j_u_optional into 1cb97790a18f29e1b476e4fe8dec0184c37fd7e7 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 80.877% when pulling 7eb1da41abe9d4a23c5ca819a180af9c144aeed6 on patrox:j_u_optional into 1cb97790a18f29e1b476e4fe8dec0184c37fd7e7 on dropwizard:master.\n. \nCoverage remained the same at 80.877% when pulling bb68a7168f787bd7bf6bf19c3e598040c26ecb67 on cwang:master into b95c4e0db6151504633b2457f79b29617597065f on dropwizard:master.\n. \nCoverage remained the same at 80.874% when pulling 855635e8851748a3d343759e45a24ee3d3eda6f4 on patrox:apache_connector_multiple_headers_fix into 2be8548f86078f5a9fa18838cd53f78cdc40d0f9 on dropwizard:master.\n. \nChanges Unknown when pulling 9ec41f6769a11fc8463c6612ab92a21e524ae0a1 on burakdd:fix-metrics-link into * on dropwizard:master*.\n. \nCoverage remained the same at 80.874% when pulling 225a71a860396d5c74c25aea44f01526a789ba65 on dinomite:master into 46cb985ca4deda4309371eb4ba0334c0f77eb9e1 on dropwizard:master.\n. \nCoverage increased (+0.03%) to 80.909% when pulling 48d3b23f57d390c6016c7ed3046174ef0ab92b13 on qinfchen:qchen/contextPath into afe904c6f45892d131acee986dda85f166a28b8b on dropwizard:master.\n. \nCoverage decreased (-0.0007%) to 80.873% when pulling d6dfbcbf821fd1b7f3aab881c34302095f3a3cfc on qinfchen:qchen/init into 9f06476cc59a99b9de7aed0f46b2d81da4f7d2b8 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling c02b4bd6d044a9dab0886247b57356002e385170 on patrox:dst_tests_issues_fix into 49ea3ed32b01c3990f00a878d665f2cbf384d00f on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling 58717400691cf75fc2632c249ca39b4d0a95da18 on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling 58717400691cf75fc2632c249ca39b4d0a95da18 on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling 58717400691cf75fc2632c249ca39b4d0a95da18 on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling 58717400691cf75fc2632c249ca39b4d0a95da18 on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage decreased (-0.003%) to 80.87% when pulling daf7d0d2e0a882f88d12be68ae802e5f7fe03442 on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage decreased (-0.003%) to 80.87% when pulling 98e20c49776e0f00575816ffcc5890617f42064e on vvondra:configuration_interface into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling a20532b53db3346f568da7103bfbdfe5b9f618bf on jplock:jp-gh1508 into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage remained the same at 80.873% when pulling 65629f615a3944029121ffd6a71b893149eb4409 on jplock:jp-gh1508 into 295b6759562dae9f0304924ff5289dfaed2b0143 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 80.876% when pulling 79687b6fee0a91b3ae27d9263765b8a71d48ed1d on jplock:jp-shared-registry into 7260af99891d9a0136100532096bee7205b74013 on dropwizard:master.\n. \nCoverage increased (+0.03%) to 80.9% when pulling 2650aefc5c22065c95b479935caa7d662f0633bd on jakeswenson:feature/improve-command-reuse-and-inheritability into 91a1315bb011a746199dc01370951a782e907a38 on dropwizard:master.\n. \nCoverage remained the same at 80.9% when pulling 8f7eb5820fcb0d7a47aa4e6118641a9ff238576d on arienkock:issue-1037 into f0a23767f5b02e3806c52e4a0eae58415ea465e2 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 80.923% when pulling b001e2594a0579e992621533bf3182ddb7e18bac on arienkock:issue-1037 into f0a23767f5b02e3806c52e4a0eae58415ea465e2 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 80.923% when pulling 5313d4c6a0f298a45a852c025467f9b2c81948e1 on arienkock:issue-1037 into f0a23767f5b02e3806c52e4a0eae58415ea465e2 on dropwizard:master.\n. \nCoverage remained the same at 80.9% when pulling 911f1d4e1cd5157fbf206a5f9339c3c92276eb5b on ojongerius:patch-1 into f0a23767f5b02e3806c52e4a0eae58415ea465e2 on dropwizard:master.\n. \nCoverage remained the same at 80.9% when pulling 6ad237fb9b3d93391e9209fe976cc9c91fae7c03 on vvavrychuk:documentation-improvement into 8f8b02507600b2beec5015eb0dbcf3444617c10d on dropwizard:master.\n. \nChanges Unknown when pulling 3f4dfea19255a336c5e514cbcc90ba34081d855e on nickbabcock:fix-windows into * on dropwizard:master*.\n. \nChanges Unknown when pulling 80815bde001a628010cf0bb74e8b58a8f324c049 on nickbabcock:invalidFormatIs400 into * on dropwizard:master*.\n. \nChanges Unknown when pulling 1dff875c96e1e037b60d3acb0bcf6b2e50910a52 on nickbabcock:invalidFormatIs400 into * on dropwizard:master*.\n. \nChanges Unknown when pulling 8f8b3bb8ec02c2f85d71355bd620d2d9c359c6d1 on nickbabcock:invalidFormatIs400 into * on dropwizard:master*.\n. \nCoverage remained the same at 80.903% when pulling b2501254e8a9217168ff5b708842e816b794614f on stve:patch-1 into 46a5ae10903ffc1473cd319b613d3341bbf63138 on dropwizard:master.\n. \nCoverage remained the same at 80.923% when pulling f403907dfaae4792c7cfc105eea2ad308d14a17c on liquibase-3.5.0 into 144fe0cc49b14f9cb279c2d794baa1c74b8bec61 on master.\n. \nCoverage decreased (-0.3%) to 80.628% when pulling 133e4f8b4424c0c745977476a541635dd36cb670 on jansoren:master into 3316980cf617c0c8bd67b15af0884adcc4c50e23 on dropwizard:master.\n. \nCoverage increased (+0.03%) to 80.957% when pulling f3a2d83832b4d889f1e5df7409bd0ad64a4cc3e2 on jansoren:master into 3316980cf617c0c8bd67b15af0884adcc4c50e23 on dropwizard:master.\n. \nCoverage remained the same at 80.923% when pulling 908d85817facf0cd5406a7dc8b65712e6446fd78 on jplock:jp-example-graphite into 3316980cf617c0c8bd67b15af0884adcc4c50e23 on dropwizard:master.\n. \nCoverage remained the same at 80.923% when pulling 6e59eeb528c2778d658b60b3bb1c386637d1de41 on jplock:jp-example-graphite into 3316980cf617c0c8bd67b15af0884adcc4c50e23 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 80.938% when pulling 44e0241998a4ed4ecf09e26dd41ee66e16b788bd on vy:master into bf528890def6be0394f038be98282c541dab689f on dropwizard:master.\n. \nCoverage remained the same at 80.929% when pulling 63e93a488625e525fe6ee5d14c9deb9b07a0f78d on sreyseng:upt_doc_hibernate_example into d34a89cb1850e7e31eae3e1bdfcd300a0b73d756 on dropwizard:master.\n. \nCoverage increased (+0.009%) to 80.938% when pulling 518d08d564ccc763b486c32e4b20983627e0bff5 on tburch:master into d34a89cb1850e7e31eae3e1bdfcd300a0b73d756 on dropwizard:master.\n. \nCoverage decreased (-0.06%) to 80.899% when pulling 518d08d564ccc763b486c32e4b20983627e0bff5 on tburch:master into d95b8593392d2e1b411d9f97a88c013568668cd9 on dropwizard:master.\n. \nCoverage increased (+0.03%) to 80.958% when pulling b44114913b404e36843bd5c373f5f73db5413ebf on nickbabcock:invalid-entity-code into 93d32592c1cb86479a46cff3a26ec1489566b64f on dropwizard:master.\n. \nCoverage remained the same at 80.958% when pulling a0881638126ba80478d4b9097a53e6340cbc3056 on nickbabcock:infinite-archives into ae9844a80a1ab273b7ccdb35d86fa624ee915d7a on dropwizard:master.\n. \nCoverage increased (+0.008%) to 80.966% when pulling 36ec4964effc9928fe3d860a7b741992dbda17b4 on tburch:CacheBuilderSpecSerializer into d95b8593392d2e1b411d9f97a88c013568668cd9 on dropwizard:master.\n. \nCoverage increased (+0.008%) to 80.966% when pulling 36ec4964effc9928fe3d860a7b741992dbda17b4 on tburch:CacheBuilderSpecSerializer into d95b8593392d2e1b411d9f97a88c013568668cd9 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 77.308% when pulling 572297403700f4fd36db36c37d9db0907e8d4380 on joschi:issue-1548 into 0e6df571e73510316e484f8ae9b8fcb4403e3b95 on dropwizard:release/0.9.x.\n. \nCoverage remained the same at 80.966% when pulling 102ab89afc8d59b168e70b7dfcdb8362eb1f3bd1 on dependency-updates into a8ac50caa7c30780283d93dee45d6c942551bce9 on master.\n. \nCoverage increased (+0.2%) to 81.169% when pulling f8237e8f9eaaab6e29dbe273e8bca53fd78bdf17 on thomaslee:tom_fatal_exit_hook into aec410b19bda2518799a7349d05fd6c5f5a038ac on dropwizard:master.\n. \nCoverage increased (+0.2%) to 81.169% when pulling c109d8ece72e101ce0a5ff20feafab6b1126b505 on thomaslee:tom_fatal_exit_hook into aec410b19bda2518799a7349d05fd6c5f5a038ac on dropwizard:master.\n. \nCoverage remained the same at 80.966% when pulling 85c88990a246b8e3d7fadbd73fd1c971a2cc8e0a on joschi:alpn-boot into aec410b19bda2518799a7349d05fd6c5f5a038ac on dropwizard:master.\n. \nCoverage remained the same at 81.169% when pulling 354920350a3a393e76f50e296852127bd37aaac6 on mabuthraa:master into 3e0498f23de33306b8cce354ab8ddb139f4d744e on dropwizard:master.\n. \nCoverage decreased (-0.03%) to 81.14% when pulling 7003f0ede03539df3166fcbf46b65a1e351c2019 on BusComp:#1557 into 665b8e57437250ff840c5e22b3c5dd5ee6e10305 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 81.152% when pulling 376d6a96a854823d499ef4dc02a7cb3ac7359f08 on pandaadb:1278-pull-request into b5fbc072da363211327d4e69b2348f8a24ce6b47 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 81.152% when pulling 274f13dd58224d548cb16d422dad69b18d549242 on pandaadb:1278-pull-request into b5fbc072da363211327d4e69b2348f8a24ce6b47 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 81.152% when pulling f60425e7e3f82e8cbbc242560b2b9c8a94295307 on pandaadb:1278-pull-request into b5fbc072da363211327d4e69b2348f8a24ce6b47 on dropwizard:master.\n. \nCoverage remained the same at 81.152% when pulling bbdd2fa3a4265b88096ab6f85bcfb1df7fc037a3 on nickbabcock:fix-h2-dep into d2fbc9d9255a0b83492db887d8c94261ed308c8c on dropwizard:master.\n. \nCoverage remained the same at 81.152% when pulling 4b59c89191a523271137e96a079c53a8294ebd44 on joschi:followup-1562 into 68cd97ff6b0a506c2a2688c966c2a55870d6f466 on dropwizard:master.\n. \nCoverage decreased (-0.009%) to 81.143% when pulling 284e00dbc93b9aee510301fc4f44069228e2b436 on nickbabcock:gen-code-improvs into 76d9580b221f698ae0b0bd44919be1edd1926425 on dropwizard:master.\n. \nCoverage decreased (-0.009%) to 81.143% when pulling abd97be96f2ae23c70775719b7eb2ee8ad747ff4 on nickbabcock:gen-code-improvs into 76d9580b221f698ae0b0bd44919be1edd1926425 on dropwizard:master.\n. \nCoverage remained the same at 81.152% when pulling fb71fb24e20096bc4c488179f97da66d22c9355f on nickbabcock:alpn-path-fix into 62d4e2a3f16e3660f3d9efeaa5ff3b5f42d5d3d5 on dropwizard:master.\n. \nCoverage decreased (-0.01%) to 81.13% when pulling 055142012f4ca01ffc3cec9755b1b5f6d4f4f28e on isaki-x:dw-issue-1563 into 3ddb4a92b53e515609ab39c3ba228387b7ccaf61 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 81.16% when pulling 11a2e3b020505af3d2e18fdb35952051a3461fb6 on isaki-x:dw-issue-1563 into 3ddb4a92b53e515609ab39c3ba228387b7ccaf61 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 81.16% when pulling fd982904a08f2eb761237e1b8fa58dce0f9ddef2 on isaki-x:dw-issue-1563 into 3ddb4a92b53e515609ab39c3ba228387b7ccaf61 on dropwizard:master.\n. \nCoverage decreased (-0.009%) to 81.134% when pulling 8f73a3eabfb943932f740724e598a50a074eeab3 on choliver:issue-1532 into 3ddb4a92b53e515609ab39c3ba228387b7ccaf61 on dropwizard:master.\n. \nCoverage increased (+0.006%) to 81.149% when pulling 56e3f53d3add12aa9b587b1527cd8f7306317dba on choliver:issue-1532 into 3ddb4a92b53e515609ab39c3ba228387b7ccaf61 on dropwizard:master.\n. \nCoverage increased (+0.006%) to 81.155% when pulling a673698e506380179aeebc71250b610b9b3e938c on pkwarren:constraintmessage_safe_iterable into ceff3051889b38ac02856d2a7b231360abde76a3 on dropwizard:master.\n. \nCoverage increased (+0.09%) to 81.256% when pulling 0fed4a7b0eb80927b776024187d16effaf751a91 on pkwarren:constraintmessage_safe_iterable into d597d616fcc6a8a7b2b715f50fc9db4f7f95a1af on dropwizard:master.\n. \nCoverage increased (+0.09%) to 81.256% when pulling 867fb6134aeb5356222a2638f935b39d30499caf on pkwarren:constraintmessage_safe_iterable into d597d616fcc6a8a7b2b715f50fc9db4f7f95a1af on dropwizard:master.\n. \nCoverage remained the same at 81.256% when pulling 94912c7a8c7365b1aa1297c0063335bc19c77890 on nickbabcock:update-error-handling into f783e6334d715cbdf48f6c6a68b455b8abaa90ab on dropwizard:master.\n. \nCoverage remained the same at 81.256% when pulling 96b9f026c1ade4f570731f5542257a27340a6d73 on nickbabcock:docs-update into 6081c48a995cf59adb3a9d0693eb5001f1525fbf on dropwizard:master.\n. \nChanges Unknown when pulling 47f8fefd1db1b7135c38248b16e895039769cd58 on issue-1246 into * on master*.\n. \nChanges Unknown when pulling d8d69a05b4dac2658f2d6f726d82d450b0292035 on nickbabcock:testing-commands into * on dropwizard:master*.\n. \nCoverage remained the same at 81.256% when pulling ff5003596f471b737f146897457a73ab3a31fa63 on mabuthraa:mabuthraa-patch-2 into 8ba1842ed5f3d32ac0080c85b1ca1e622e5f7833 on dropwizard:master.\n. \nCoverage increased (+0.03%) to 81.284% when pulling a2310ec396f06bbcb79331ce333885d075e1369f on nickbabcock:remove-optional into 8ba1842ed5f3d32ac0080c85b1ca1e622e5f7833 on dropwizard:master.\n. \nCoverage increased (+0.005%) to 81.26% when pulling eedca3a2e4c26ca27240da8773194e4c6da4c1c1 on gjesse:pluggable-healthcheck-registry into 8ba1842ed5f3d32ac0080c85b1ca1e622e5f7833 on dropwizard:master.\n. \nCoverage remained the same at 81.256% when pulling 0206fb8c7d9415e06525c510bbc2efecb3967dd7 on nickbabcock:type-valid-annotation into 8ba1842ed5f3d32ac0080c85b1ca1e622e5f7833 on dropwizard:master.\n. \nCoverage remained the same at 81.441% when pulling e108bc600fcd8044a29e33e2db9c1cd3876bfc2a on nickbabcock:validation-limitation into 875c759b6fb75c8d547d5f3e0d6dbfa2a8b18e71 on dropwizard:master.\n. \nCoverage decreased (-0.04%) to 81.404% when pulling 63267b1ec729e01bb6e8dc78dabc86f4f664808f on tootedom:master into f78807688de93e88ecfa92befde160a3259131d6 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 81.445% when pulling a2411e0b52cdd1dcd1716a086bf067f107949558 on tootedom:master into f78807688de93e88ecfa92befde160a3259131d6 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 81.445% when pulling a2411e0b52cdd1dcd1716a086bf067f107949558 on tootedom:master into f78807688de93e88ecfa92befde160a3259131d6 on dropwizard:master.\n. \nCoverage remained the same at 81.445% when pulling bed19559b34cf317fc1266a6d045173eb25a4f3e on remove_http2_test_workaround into 0382e213c89d1bacde0d79a219342a8a1dfb7655 on master.\n. \nCoverage increased (+0.006%) to 81.45% when pulling 3ee5f6a6142fd38d5a7bf4b58197cf57ba2b08cd on vvondra:support_oauth_query_param into e58bd868cad05ac246b254a100553e3152b0beb7 on dropwizard:master.\n. \nCoverage decreased (-0.07%) to 81.373% when pulling 25824bb358651c3f50e59826cd13c89dc0cd4541 on rbarbey:daotestrule into e58bd868cad05ac246b254a100553e3152b0beb7 on dropwizard:master.\n. \nCoverage increased (+0.2%) to 81.6% when pulling 6d25d00fbe5b6491b5fe8989a25ee08f395eff80 on rbarbey:daotestrule into e58bd868cad05ac246b254a100553e3152b0beb7 on dropwizard:master.\n. \nCoverage increased (+0.008%) to 81.459% when pulling c3159d7a17b7e815ba9be75203faed39af37377c on tjwilson90:feature/config-override into 3227bb4dc1ac601b51aa33c01b275d66768784ac on dropwizard:master.\n. \nCoverage increased (+0.7%) to 82.157% when pulling aabb36660401e32b2a7aa60a3320f12ad59ece1b on build_ssl_connector_test into 3227bb4dc1ac601b51aa33c01b275d66768784ac on master.\n. \nCoverage remained the same at 81.45% when pulling 5801570dc36855a1d420f0ffe76e5826cd4ef748 on fix_guarded_by into 3227bb4dc1ac601b51aa33c01b275d66768784ac on master.\n. \nCoverage remained the same at 82.157% when pulling 5b8ab10f350fcdbedfc35282493eb408fcd9e52f on jplock:jp-port into 7c0a184b8cb8bae63df25f4baa6a6d71d3baa13f on dropwizard:master.\n. \nCoverage increased (+0.006%) to 82.163% when pulling 2e39f24b39fb54ea29889545593aeffec93114f1 on jplock:jp-port into 7c0a184b8cb8bae63df25f4baa6a6d71d3baa13f on dropwizard:master.\n. \nCoverage increased (+0.006%) to 82.163% when pulling 2e39f24b39fb54ea29889545593aeffec93114f1 on jplock:jp-port into 7c0a184b8cb8bae63df25f4baa6a6d71d3baa13f on dropwizard:master.\n. \nCoverage increased (+0.006%) to 82.163% when pulling d78fb7137335ad95f515b5bf05eb335535271b34 on jplock:jp-port into 7c0a184b8cb8bae63df25f4baa6a6d71d3baa13f on dropwizard:master.\n. \nCoverage decreased (-0.07%) to 82.085% when pulling 7fc9d78aabb5cf5a3aadb1d34616c0b0cfd9641c on scottaj:feature/expose-post-body-to-tasks into 08be35cbe365f332a76d0879e5d401e0886f138f on dropwizard:master.\n. \nCoverage decreased (-0.009%) to 82.149% when pulling 0064f26473eced75aeb5a6324bae43f88a668e1b on scottaj:feature/expose-post-body-to-tasks into 08be35cbe365f332a76d0879e5d401e0886f138f on dropwizard:master.\n. \nCoverage increased (+0.001%) to 82.158% when pulling 0ac9d719cf5ff2807e1ad31b87bbd7a8b19b96e4 on pkwarren:loading_cache_authenticator into 6532a8ef5c8c182c764505d29be14db6e6ea9d5b on dropwizard:master.\n. \nCoverage increased (+0.006%) to 82.164% when pulling e7736099bf3520348480e6f765eb147209517832 on pkwarren:loading_cache_authenticator into 6532a8ef5c8c182c764505d29be14db6e6ea9d5b on dropwizard:master.\n. \nCoverage increased (+0.006%) to 82.207% when pulling d004ffb14b4e0240010c63ec7f443605ef508e83 on pkwarren:loading_cache_authenticator into 0880fcdfd1c37e2343c362ba7b23b2d14ff09d8e on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.171% when pulling ac63b23a97fa17eb6566c42c72b8249beb081235 on lazy-loading-session-management into 6532a8ef5c8c182c764505d29be14db6e6ea9d5b on master.\n. \nCoverage increased (+0.01%) to 82.171% when pulling da9b1aabe997cdfe527b73ffb2126595c1040a5b on lazy-loading-session-management into 6532a8ef5c8c182c764505d29be14db6e6ea9d5b on master.\n. \nCoverage decreased (-0.03%) to 82.124% when pulling 4dcf3545276a6a14ecb9f9c3ec084443e759a76e on jplock:jp-errorprone into 6532a8ef5c8c182c764505d29be14db6e6ea9d5b on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.148% when pulling d17ffe60bedf6451324f65be8d925a4ca5a5cd2c on ogregoire:UnitOfWorkAwareProxyFactory-inject-handler into 945e07ed8898e90861a9bf7b0beb6f7ec0fbde80 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.353% when pulling 4e2159a1196543df7d26ddce03e94b52318b088a on ryankennedy:master into e1b137f4b5c6bf8b21a15bee1ee7e5191d048691 on dropwizard:master.\n. \nCoverage remained the same at 82.137% when pulling 2d15d4a853b2743be74c664fe9e9d8ae98ae45f2 on ipropper:patch-1 into 945e07ed8898e90861a9bf7b0beb6f7ec0fbde80 on dropwizard:master.\n. \nChanges Unknown when pulling 067ea074004d9199880e87a4dc742f9bc157561f on psamsotha:polymorphic-auth-docs into * on dropwizard:master*.\n. \nCoverage increased (+0.1%) to 82.269% when pulling 7a54a3466abd07d1a4380c5b1f768bcafa28f24f on evnm:dropwizard-auth/caching-authorizer into 38879e612027faf58d840faaeca547e71c9e4fdd on dropwizard:master.\n. \nCoverage increased (+0.1%) to 82.269% when pulling e81a50adb964230177f458ade2574383a1062061 on evnm:dropwizard-auth/caching-authorizer into 38879e612027faf58d840faaeca547e71c9e4fdd on dropwizard:master.\n. \nCoverage increased (+0.005%) to 82.143% when pulling c6d6ffaf320c3534b416341ae39c87d2cc7a3f7b on v-ladynev:issue/1640 into 38879e612027faf58d840faaeca547e71c9e4fdd on dropwizard:master.\n. \nCoverage increased (+0.005%) to 81.956% when pulling 40c3352961b6f074dfb414a0fc70586d428c13f2 on v-ladynev:issue/1640 into bd388e9f2f30e3c3a523c88aad6b7a427d89220c on dropwizard:master.\n. \nCoverage increased (+0.08%) to 82.2% when pulling 8b5403a0b73d21bb92228d6be2ca0d26bd783ec1 on jackson-2.7.6 into d0a7640657d8e504896dc7f3eeb26a89c654d96d on master.\n. \nCoverage increased (+0.2%) to 82.395% when pulling 7dd667e37739da45a3bc4a4bf511a95ef2cd13e0 on jackson-2.8 into 99e9d63cb94344344c295c13119e0f7cce96b7cc on master.\n. \nChanges Unknown when pulling a321a877277f36f12cf82c099ab7407102ce47c0 on nickbabcock:jetty_9311 into * on dropwizard:master*.\n. \nChanges Unknown when pulling 1687ada4ca385bb42a65bc92d4fdb9b9f3ae9567 on nickbabcock:jetty_9311 into * on dropwizard:master*.\n. \nChanges Unknown when pulling ce1f7cfa5cd287a4f90f2263b5400fcb078e398a on tjcutajar:update-request-log-doc into * on dropwizard:master*.\n. \nCoverage remained the same at 82.366% when pulling f222a66caf7fde15b5dd0ede984475731261a6b9 on jplock:jp-rel-notes into 0619ca18ed32932672b6f24c962eae8c7bf2f8a2 on dropwizard:master.\n. \nChanges Unknown when pulling af55e37119c0e9168137091194ac68a600c80318 on nickbabcock:code-fixes into * on dropwizard:master*.\n. \nChanges Unknown when pulling 79c5772b1e5bdc4d1232fcf65adeed9409b73c82 on jplock:jp-dependencies into * on dropwizard:master*.\n. \nCoverage remained the same at 82.353% when pulling 1bb0f17504f4d16812cf76bfd3cf9adf6879993c on ryankennedy:master into 844b71047f6d70a2b507af416d7f1ad18d60b0dc on dropwizard:master.\n. \nCoverage remained the same at 82.353% when pulling 9789176d41b603f3ed541a19695c7cdf4d4ee13c on remove_jetty_client_test_scope into 0096931fa3373e35b6bf44fa3d1486628613d438 on master.\n. \nCoverage increased (+0.003%) to 82.356% when pulling d40064b9d25568ef2c4734253233a793232ef34c on mattnelson:file_limit_log_rotation into 1efbea371c8af03ded5f92eb9e13263cbed2853d on dropwizard:master.\n. \nCoverage increased (+0.005%) to 82.358% when pulling 37036a41fd53919ae464824676b5f65fe518e3cd on mattnelson:file_limit_log_rotation into 1efbea371c8af03ded5f92eb9e13263cbed2853d on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.356% when pulling 1b4c8efc4eada53a2c07c4d77b15a86df74cd184 on ogregoire:dependency-injection-friendliness into 1efbea371c8af03ded5f92eb9e13263cbed2853d on dropwizard:master.\n. \nChanges Unknown when pulling 99a7e1bcf680ab23bd6e08e5862ac84e43f591d0 on evnm:dropwizard-core/configure-bootstrapped-log-level into * on dropwizard:master*.\n. \nCoverage decreased (-0.05%) to 82.153% when pulling bc5c482a720da6ae8b2805a4e6220d7ff252138a on anonyome:tbartley/dw-client-custom-hostname-verifier into 0880fcdfd1c37e2343c362ba7b23b2d14ff09d8e on dropwizard:release/1.0.x.\n. \nCoverage increased (+0.03%) to 82.23% when pulling 160502f5bad6027e50625fe084260eca9f6b270c on anonyome:tbartley/dw-client-custom-hostname-verifier into 0880fcdfd1c37e2343c362ba7b23b2d14ff09d8e on dropwizard:release/1.0.x.\n. \nCoverage decreased (-0.004%) to 82.355% when pulling 77e5d83261abec1c2324434335106ab8cb056094 on tburch:AlertnateCommandsInDropwizardAppRule into e3d6c3743b02397ea62752984cf2e8c6fc751f88 on dropwizard:master.\n. \nCoverage decreased (-0.004%) to 82.357% when pulling 696c8125e63d5ff3d7fa7bf29246b82c1bd61dd9 on tburch:AlertnateCommandsInDropwizardAppRule into de8c7e3b9e1b98dfd1a13c9ce562209cb4e6f5f1 on dropwizard:master.\n. \nCoverage remained the same at 82.358% when pulling d5ea8459831bc946b57d9f203174acd497f50f91 on evnm:dropwizard-servlets/combine-ifs-in-taskservlet into e3d6c3743b02397ea62752984cf2e8c6fc751f88 on dropwizard:master.\n. \nCoverage increased (+0.005%) to 82.366% when pulling 102b7a3d152b92b1cf7aa8788c6f59915fc0801b on evnm:dropwizard-client/customizable-httpclientbuilder into de8c7e3b9e1b98dfd1a13c9ce562209cb4e6f5f1 on dropwizard:master.\n. \nCoverage increased (+0.1%) to 82.538% when pulling 5f408ec155f80b0c5617e0c266437b369983bca6 on dao_test_rule into 1e40fef4f4e8f048885b7ce6067bd9cd87a749b2 on master.\n. \nCoverage increased (+0.1%) to 82.36% when pulling 610a074f472d78c4d8faa8367d6bffba911dc1f8 on dao_test_rule into 93efb8013e05664587deca34fecfbc2f00a42b92 on master.\n. \nCoverage increased (+0.1%) to 82.36% when pulling 610a074f472d78c4d8faa8367d6bffba911dc1f8 on dao_test_rule into 93efb8013e05664587deca34fecfbc2f00a42b92 on master.\n. \nCoverage decreased (-0.01%) to 82.386% when pulling 7e2ef4dc0c56b2a822a9cd3d564442e7f1a9287d on evnm:dropwizard-client/executor-provider-shutdown into 1e40fef4f4e8f048885b7ce6067bd9cd87a749b2 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.398% when pulling a3bbd17e5422ab014c7e239fbaeeff980927500d on cakofony:bugfix/config_allow_ignore_unknown_properties into ab8eb6737ed6c897c6fa8cb29242a48703c8e43e on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.398% when pulling a3bbd17e5422ab014c7e239fbaeeff980927500d on cakofony:bugfix/config_allow_ignore_unknown_properties into ab8eb6737ed6c897c6fa8cb29242a48703c8e43e on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.398% when pulling a92c1ca29d81459e279c9402b4a0fbe8c88805bb on cakofony:bugfix/config_allow_ignore_unknown_properties into ab8eb6737ed6c897c6fa8cb29242a48703c8e43e on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.398% when pulling a92c1ca29d81459e279c9402b4a0fbe8c88805bb on cakofony:bugfix/config_allow_ignore_unknown_properties into ab8eb6737ed6c897c6fa8cb29242a48703c8e43e on dropwizard:master.\n. \nCoverage increased (+0.02%) to 82.423% when pulling d968d6a9fb4d317f9fe4defb591b5e14e41cbdf6 on evnm:dropwizard-request-logging/logback-attr-map-race-condition into 1e40fef4f4e8f048885b7ce6067bd9cd87a749b2 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 82.41% when pulling 77eb5f8a671231a4c6badf6f8006af004cf1366c on evnm:dropwizard-request-logging/logback-attr-map-race-condition into e077d2cc8195673bf95a5ff86a06834fd190f83d on dropwizard:master.\n. \nCoverage remained the same at 82.41% when pulling cca290b74feed270ca0c106e9299fafc78f3ba2b on danielbcorreia:patch-1 into e7c16c97572b5c683e09b5f9b34f934cc95d3e63 on dropwizard:master.\n. \nChanges Unknown when pulling 88b8091fd64df9a9a03e6230247c6c01b7d46ae0 on LeDominik:master into * on dropwizard:master*.\n. \nCoverage remained the same at 82.427% when pulling 599d3efc50c9432ae9c1ee7c624b2a154b85017b on use_list_instead_array into 621892d4d4a1723ab7333a8edf24f2816337d8ea on master.\n. \nChanges Unknown when pulling 380f86a61f9b1f6e1bc4eb7df1a20d5fc4f5bcca on draakhan:docs-core-unescaped-escape-char into * on dropwizard:master*.\n. \nChanges Unknown when pulling 45eb187764bac3695b73eda95eeb6ee332bf491b on jhaber:patch-1 into * on dropwizard:master*.\n. \nCoverage decreased (-0.04%) to 82.39% when pulling e39519c47c14dde31155bc641f4a02de273fbdd6 on tburch:pr-1680 into db1cf9b5963eed2dcb460f2ef1ee4a1f038d4b79 on dropwizard:master.\n. \nCoverage remained the same at 82.427% when pulling b8d93d999849447aa56ef718825b9908b02ff89c on tburch:pr-1680 into db1cf9b5963eed2dcb460f2ef1ee4a1f038d4b79 on dropwizard:master.\n. \nCoverage decreased (-0.2%) to 82.22% when pulling 45687ed91e7ebb2f92a648e9a30e4bf29bd712c1 on nickbabcock:log-jetty-ssl-context into ab74bbf59221d96adbaa5605e189ca1996b2a1da on dropwizard:master.\n. \nCoverage remained the same at 82.22% when pulling 2ddfc4eb7a2c57288225cd505aa469f3d897f81b on nickbabcock:tls-docs into d71d6c4dc4bfb7cb736a7ee79d3f84431d50e47b on dropwizard:master.\n. \nChanges Unknown when pulling 8517ee9e3f6d3c4443ec46542fe1e6e18c1f625c on codebuff:master into * on dropwizard:master*.\n. \nChanges Unknown when pulling 9d845697e421330e95ebe354387b4384b653a248 on tmack8001:expose-json-processing-exception-detail-as-config into * on dropwizard:master*.\n. \nCoverage decreased (-0.06%) to 82.298% when pulling f275ac372e27a195dc6d7af6d9a056c39e0c03af on victornoel:issue-1630 into ea6656b19e8931a1d12969264eb68e8d7275e739 on dropwizard:master.\n. \nCoverage decreased (-0.06%) to 82.298% when pulling adb35d0ea122e84d196ff114ab74115bdf578e14 on victornoel:issue-1630 into ea6656b19e8931a1d12969264eb68e8d7275e739 on dropwizard:master.\n. \nCoverage remained the same at 82.298% when pulling df1cf7c32c497c01519dba8fcdcdc3e0f60b62d0 on evnm:dropwizard-jersey/add-subresource-test into 68b1af93bf8bbed5e84751de0b9dac4665131506 on dropwizard:master.\n. \nCoverage increased (+0.008%) to 82.306% when pulling b8134bc91a0b95f2391a35a467a0ea2427ecc5a6 on nickbabcock:non-resource-endpoint-log into 68b1af93bf8bbed5e84751de0b9dac4665131506 on dropwizard:master.\n. \nChanges Unknown when pulling 1ed6e8fc6719268379c5fac9eb225f5c101d4013 on nickbabcock:fix-null-comp into * on dropwizard:master*.\n. \nChanges Unknown when pulling 685fd94f33206b0d322c4773e194c12e98739c74 on nickbabcock:fix-null-comp into * on dropwizard:master*.\n. \nCoverage increased (+0.003%) to 82.296% when pulling ad45005b4d3b1f7bfccdc8e3a269aa5754f143ed on nickbabcock:rx-client into 6e48972c54b2cd02f4264408cb11210460b25c55 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.298% when pulling b96944facf91cda69007fb76984e8a6e57e782fa on nickbabcock:rx-client into 7295c5faf42840325c161cc82ad4ed1db2bf8419 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.298% when pulling b96944facf91cda69007fb76984e8a6e57e782fa on nickbabcock:rx-client into 7295c5faf42840325c161cc82ad4ed1db2bf8419 on dropwizard:master.\n. \nCoverage increased (+0.003%) to 82.296% when pulling 5fb37ed7f1594837af308c8094c19e1d9c5c8380 on register-healthcheck into 6e48972c54b2cd02f4264408cb11210460b25c55 on master.\n. \nCoverage increased (+0.05%) to 82.344% when pulling 7fccc79bfb01c1e6343a194f8a2777a67b31b64f on cmicali:master into 7295c5faf42840325c161cc82ad4ed1db2bf8419 on dropwizard:master.\n. \nCoverage remained the same at 82.296% when pulling 08069ac70ced016a65649a126e0a4226715f69db on sam-berry:patch-1 into 7295c5faf42840325c161cc82ad4ed1db2bf8419 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.026% when pulling 9f66244dfd6fbbe129f10c756ac9e6ca630e78de on qinfchen:qchen/OptionalMessageBodyWriter into b1c563e27e8a9fbe551fa365518a4d638b1e3c8a on dropwizard:master.\n. \nCoverage remained the same at 82.28% when pulling 5c72baefe767c60775a7133c46e7fb005c561a57 on qinfchen:qchen/OptionalMessageBodyWriter into d619dede86b7f0d3888539e846fa152c638d876e on dropwizard:master.\n. \nCoverage remained the same at 82.28% when pulling 16315f428375c712aacff4ad5b94db26f7d38e2b on qinfchen:qchen/OptionalMessageBodyWriter into d619dede86b7f0d3888539e846fa152c638d876e on dropwizard:master.\n. \nChanges Unknown when pulling 4013644b3bed807e038327dabe48f12f1b2dde64 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling b64ef9fbb5a832e433325a333f6f4b4f2d4abb97 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling a492f0a533969ad4a50270f87e66e6644876de1f on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling 435447dd6b37d2c7aab72ac86a6c8332362b571b on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling 7fa61dc1dceda581393197e4edd9216725c365e2 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling 9818fade86e80fb59f6a1aaa36f09ec87ac79857 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling 1b179e40cdcb28b53c6b39fad7cc765805ae54a8 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nChanges Unknown when pulling 8b30c5a2bc16d9f062c7474d9d2b2573854b6529 on cmicali:jersey-validation into * on dropwizard:master*.\n. \nCoverage remained the same at 82.042% when pulling 19353cd04b804284de5f2bfb72aa9ac19080c491 on nickbabcock:1.0.x-build-windows into 1fff5d585fe5419a8296b77b1a21d1586224ba6b on dropwizard:release/1.0.x.\n. \nCoverage remained the same at 82.298% when pulling 12ed2d09b4748d7eda56a972ef82156944424fef on nickbabcock:windows-ci into 7d1431a99d69f7fe955f1b6f8124c64db660680b on dropwizard:master.\n. \nCoverage remained the same at 82.274% when pulling 805b8139e13741867a24826f846291dc79c7489b on nickbabcock:validation-docs into d687cdce03198ce54bed98c19524ee361852d290 on dropwizard:master.\n. \nCoverage remained the same at 82.274% when pulling 7a46346f3006fb447efeb989ae2a8122d3cf87f1 on jmoney8080:master into 7555c73c066ee8a1425d19a84d20708bbbc5f2bc on dropwizard:master.\n. \nCoverage remained the same at 82.274% when pulling 47a1955e439711c2e2be20ee5f38909bda1691f1 on jmoney8080:master into 7555c73c066ee8a1425d19a84d20708bbbc5f2bc on dropwizard:master.\n. \nCoverage remained the same at 82.274% when pulling 92b7b70953a7d366ffaf363bad0f99a2578f066b on jmoney8080:master into 9e01f7ec99e47f24f26698dbde7379e51b4e3aad on dropwizard:master.\n. \nCoverage increased (+0.2%) to 82.454% when pulling b3426b506c19d5c2781b21791beadd3377afd773 on nickbabcock:jackson-2.8 into 9e01f7ec99e47f24f26698dbde7379e51b4e3aad on dropwizard:master.\n. \nCoverage increased (+0.2%) to 82.28% when pulling 1a8b5a0eff253a48803e8bc47e1e77df8fbeb0a6 on nickbabcock:jackson-2.8 into 980ef7c793f53b4d60a3d1f1ba86a2d451f74ca7 on dropwizard:master.\n. \nCoverage increased (+0.09%) to 82.103% when pulling 5f02c597a675c58862c0fccda2c1d0dee84e8b91 on nickbabcock:size-param into b1c563e27e8a9fbe551fa365518a4d638b1e3c8a on dropwizard:master.\n. \nCoverage increased (+0.09%) to 82.103% when pulling 8a4e4ef3a759d7f7c3ceae7c81b3a7c0d28a1107 on nickbabcock:size-param into b1c563e27e8a9fbe551fa365518a4d638b1e3c8a on dropwizard:master.\n. \nCoverage remained the same at 82.103% when pulling 467c227a5ce2bde01a5db6a03bca9a992cdfb729 on nickbabcock:update-throw-tests into 6963cb9525f4dabd42e478649a15829bbde2864b on dropwizard:master.\n. \nCoverage remained the same at 82.017% when pulling 7a1c3b7d0009d5a707ec8b000991a45d90e202f0 on jmoney8080:jsm.updateJackson into 800d957cd3285c761dd5881cfa5f3a3e50738386 on dropwizard:release/1.0.x.\n. \nCoverage remained the same at 82.28% when pulling d33609a1026c7e1dda23fbdbd82a5d331f26e237 on erikvanoosten:patch-1 into a0c5e2ab97a91200e09c91397fab0a0c359b8483 on dropwizard:master.\n. \nCoverage remained the same at 82.28% when pulling cc0c8b27611eab51605c8a40522157b316a655f1 on ipropper:master into a0c5e2ab97a91200e09c91397fab0a0c359b8483 on dropwizard:master.\n. \nCoverage remained the same at 82.28% when pulling dddc3806d7eaa7311145a1e40769f8e484d4d1c0 on nickbabcock:valid-enum into a0c5e2ab97a91200e09c91397fab0a0c359b8483 on dropwizard:master.\n. \nCoverage remained the same at 82.266% when pulling b44774c69424e3f10d80feca6fe0f7a2163b2e2a on nickbabcock:speed-servlet-tests into 46a00cbabeef67e168b321c8db2405b259da53e8 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.276% when pulling 2a755e9146b2aae335ee556fa9265d671ac7cacb on nickbabcock:rethink-exception-mappers into 72fba534a0652674c2abd33f7b677b992672da8b on dropwizard:master.\n. \nCoverage increased (+0.008%) to 82.274% when pulling 2a755e9146b2aae335ee556fa9265d671ac7cacb on nickbabcock:rethink-exception-mappers into 72fba534a0652674c2abd33f7b677b992672da8b on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.276% when pulling 5a2c793d81a3a1610f7cff24f4d75d15fe52c944 on nickbabcock:rethink-exception-mappers into 72fba534a0652674c2abd33f7b677b992672da8b on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.276% when pulling 20ddc2466cc26efa5288862a0de51fc9a0f1651d on nickbabcock:rethink-exception-mappers into 7e9927cc7e07ada945bd42545c22e57a7626e16e on dropwizard:master.\n. \nCoverage remained the same at 82.266% when pulling 7b06207d7b9f5be25f90122f2fab40e8cc328711 on tmack8001:tmack/fix-client.rst into 72fba534a0652674c2abd33f7b677b992672da8b on dropwizard:master.\n. \nCoverage remained the same at 82.266% when pulling 254bc288da7dddf652bbc71ff49e1f0b9bcce518 on rwwarren:patch-1 into 7e9927cc7e07ada945bd42545c22e57a7626e16e on dropwizard:master.\n. \nCoverage remained the same at 82.266% when pulling f338957910a8b7427cd58dbf26799c2eaa594353 on rwwarren:patch-1 into 7e9927cc7e07ada945bd42545c22e57a7626e16e on dropwizard:master.\n. \nCoverage remained the same at 82.276% when pulling ca4d5f7d794a32710582a83e1a2d208420f626fb on nickbabcock:jackson-2.8-deprecations into 89ab17b88345e76f5b35eb1fc526679235e2dc6b on dropwizard:master.\n. \nCoverage remained the same at 82.276% when pulling 4da1135eee8f5c88ddd7b7c8649983a46d4c318a on nickbabcock:config-docs into 89ab17b88345e76f5b35eb1fc526679235e2dc6b on dropwizard:master.\n. \nCoverage remained the same at 82.276% when pulling 126c36685b2bae6c633000f68ba32158707936a9 on jackson-2.8.4 into b2768b4c085bad78cc152eabee764e277ff95854 on master.\n. \nCoverage remained the same at 82.279% when pulling f9307dcb737bb90930c6ea51c47488253fd6f90b on jackson-2.8.4 into 5dfd6d0569edbafd8cb64d7c41e38e30bf45005e on master.\n. \nCoverage increased (+0.003%) to 82.279% when pulling a2109f2b658e008c71c37bf7075e47a7c184b1d4 on dependency-updates into b2768b4c085bad78cc152eabee764e277ff95854 on master.\n. \nCoverage remained the same at 82.279% when pulling 9fd4968552c6fbfb612e2c6b24dfe0e21d9a85ed on anandagarwaal:patch-1 into 8d783f0f13fc8377aae3e793cee771099dbb4281 on dropwizard:master.\n. \nCoverage increased (+0.02%) to 82.296% when pulling 0141b2007f2b41383a7b1da79938a31dab8e947c on nickbabcock:webtest-client-conform into 029ef03046724f6002f0084cf702da6ed4cce2d4 on dropwizard:master.\n. \nCoverage remained the same at 82.279% when pulling 40ef821d1f9ad7f1c8f304f75e019ddb9c1e971a on nickbabcock:forms-testing into 029ef03046724f6002f0084cf702da6ed4cce2d4 on dropwizard:master.\n. \nCoverage remained the same at 82.279% when pulling 40ef821d1f9ad7f1c8f304f75e019ddb9c1e971a on nickbabcock:forms-testing into 029ef03046724f6002f0084cf702da6ed4cce2d4 on dropwizard:master.\n. \nChanges Unknown when pulling 783da59978e751dad399e923d00180f47e237ad7 on nickbabcock:forms-testing into * on dropwizard:master*.\n. \nCoverage increased (+0.002%) to 82.297% when pulling 1f3de1bc29ac1a44e0bedeb72526f452e8272c00 on nickbabcock:rdc-jackson-provider into baceef84f29bdfe2ad85bc75785eda93b6e694ac on dropwizard:master.\n. \nCoverage increased (+0.002%) to 82.297% when pulling 1f3de1bc29ac1a44e0bedeb72526f452e8272c00 on nickbabcock:rdc-jackson-provider into baceef84f29bdfe2ad85bc75785eda93b6e694ac on dropwizard:master.\n. \nCoverage remained the same at 82.297% when pulling 7f868540b1d0924cdb7209dece78294cd08d22e8 on nickbabcock:hibernate-validator-5.3.0 into 5a068f936b1bf26925f06787f52dec1660075c7b on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.31% when pulling a5161f923991da202333a7f8654cab36f091bac7 on nickbabcock:empty-optional-exception into 394773cfd261e862309bf7d8aaf566bae5809ae1 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 82.31% when pulling 69128c15269f965aafe223095c60ead3f539b14a on nickbabcock:empty-optional-exception into 394773cfd261e862309bf7d8aaf566bae5809ae1 on dropwizard:master.\n. \nCoverage decreased (-0.08%) to 82.227% when pulling 8ebdb8dda64f2b5c5b8275f2d2024247eba7158a on nickbabcock:bind-json-provider into 00cc42f62e627f5c8976ff0eb3a4cc6ce47973d7 on dropwizard:master.\n. \nCoverage decreased (-0.08%) to 82.227% when pulling 899c201e165d0843d5d935d474902b16443e7a9f on nickbabcock:bind-json-provider into 00cc42f62e627f5c8976ff0eb3a4cc6ce47973d7 on dropwizard:master.\n. \nCoverage decreased (-0.08%) to 82.227% when pulling d0f7d35d7d6c567b8a49e875b9f87458eb1e0819 on nickbabcock:bind-json-provider into 00cc42f62e627f5c8976ff0eb3a4cc6ce47973d7 on dropwizard:master.\n. \nChanges Unknown when pulling 668f61d523cd931bcb74acf67cdba6256c728e28 on nickbabcock:bind-json-provider into * on dropwizard:master*.\n. \nChanges Unknown when pulling d3b6e6a3d6a2326ef2222b2fb39ccbb6fe80cb6c on nickbabcock:bind-json-provider into * on dropwizard:master*.\n. \nCoverage increased (+0.003%) to 82.312% when pulling 31b1dc706c5afd4863e49dec3852c3031bce836b on jroitgrund:feature/log-webapplicationexception-redirects into a199a6dda91d4f2edbe09193e8af4fd391a98cce on dropwizard:master.\n. \nCoverage remained the same at 82.31% when pulling 27e03b4266fc06eafc680da457f56eeb8246cca6 on nickbabcock:correct-alpn into a199a6dda91d4f2edbe09193e8af4fd391a98cce on dropwizard:master.\n. \nCoverage increased (+0.02%) to 82.325% when pulling 150af6c1a0742aa9056a86a3a67e2147a2f1e671 on http_connector_blocking_timeout into 454159420ea06e9f3bd89e52551834ec6c4e7c04 on master.\n. \nCoverage remained the same at 82.325% when pulling cf1ffa412cb157f1ebe4b1a948864874b2cb5ad4 on tjcutajar:upgrade_to_jetty_9.3.14.v20161028 into 7696a91c311daa2153aaf48456684638e3af82fa on dropwizard:master.\n. \nCoverage remained the same at 82.325% when pulling f381efe62fd5c64969a6af051d40a8da13f5c57f on nickbabcock:correct-profiles into 0870401d2245a225d6beb151e5700048a4672009 on dropwizard:master.\n. \nCoverage decreased (-0.4%) to 81.95% when pulling 747a3d61c79c89e92f4b2a5658e16d4e7dabbe88 on nickbabcock:reload-ssl into 0870401d2245a225d6beb151e5700048a4672009 on dropwizard:master.\n. \nCoverage decreased (-0.4%) to 81.95% when pulling 5d509bc75515e24ffc6d6e7bc24ff13f78c443aa on nickbabcock:reload-ssl into 0870401d2245a225d6beb151e5700048a4672009 on dropwizard:master.\n. \nCoverage decreased (-0.4%) to 81.95% when pulling 0448de999ead7f38a668e959355c5dac04c8a6d7 on nickbabcock:reload-ssl into 0870401d2245a225d6beb151e5700048a4672009 on dropwizard:master.\n. \nCoverage decreased (-0.4%) to 81.95% when pulling 04f2a6edb5d874a36ea19f1c7f47abce2c312bae on nickbabcock:reload-ssl into c48bc04aab53286aeaaae5e6a8c98166fb548e18 on dropwizard:master.\n. \nCoverage decreased (-0.4%) to 81.95% when pulling 1a52d6dd9564f24c8bde47020c778b5bad6b43eb on nickbabcock:reload-ssl into c48bc04aab53286aeaaae5e6a8c98166fb548e18 on dropwizard:master.\n. \nCoverage increased (+0.009%) to 81.959% when pulling ffb95cb6d0f84846a60350fe1de5048baf0d2e1f on vemilyus:better-endpoint-logging into bd388e9f2f30e3c3a523c88aad6b7a427d89220c on dropwizard:master.\n. \nCoverage increased (+0.04%) to 81.986% when pulling b0494c9f7ae2b85b9c0324e7f06db1de1f98e185 on vemilyus:better-endpoint-logging into bd388e9f2f30e3c3a523c88aad6b7a427d89220c on dropwizard:master.\n. \nCoverage remained the same at 81.956% when pulling da8f3b803484fdfe9f632221df16a066e678bf06 on remove_findbugs into 26445ff2cab0cde0cb582009a34eb803e44becd1 on master.\n. \nCoverage remained the same at 82.02% when pulling 39d611d40ec9c00afe00b151961a94db407a5356 on pkwarren:jersey-2.23.2 into 18ffb946c45b54f83cdef41be123437e06559743 on dropwizard:release/1.0.x.\n. \nCoverage decreased (-0.1%) to 81.916% when pulling a63adc11aa4241b2fc51bdcb3577a90a781453d6 on logback_classic_request_log into 2b278ef352b32e9468553c364bb240af5d73de7b on release/1.0.x.\n. \nCoverage decreased (-0.02%) to 81.966% when pulling 39303e4f50d50c35525c51532c3dcc9a55e900e4 on lefloh:1289 into 668b356ce3ea88e6892fcbdcf0bf25830f76e9a2 on dropwizard:master.\n. \nCoverage decreased (-0.1%) to 81.804% when pulling 46a0a147daef3ae33b88b84c00263f1e0556c9d1 on acwwat:view-exc into 867a101490b68a8f13c6c87e384fea9155bb4805 on dropwizard:master.\n. \nCoverage decreased (-0.09%) to 81.814% when pulling 534205fa7e3737e21e1077169b2536ecabc3dd5f on acwwat:view-exc into 867a101490b68a8f13c6c87e384fea9155bb4805 on dropwizard:master.\n. \nCoverage decreased (-0.1%) to 81.794% when pulling 6d3a46795a94c0652a82211a299f76811e5586ad on acwwat:view-exc into 867a101490b68a8f13c6c87e384fea9155bb4805 on dropwizard:master.\n. \nCoverage decreased (-0.03%) to 81.876% when pulling 4eb5c2febf2215efcf319731e94a2ba2d2df6811 on dren-dk:master into 867a101490b68a8f13c6c87e384fea9155bb4805 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 81.918% when pulling 12329c95379f2825ff874a1ef2fdefedb6ff36a7 on dren-dk:master into 867a101490b68a8f13c6c87e384fea9155bb4805 on dropwizard:master.\n. \nCoverage increased (+0.01%) to 81.926% when pulling 221b8d78d68daaf06489e0dba54ca1890eac5d88 on dren-dk:release/1.0.x into 12b497edd240317a2ccac0bc7d4ff22693d611b5 on dropwizard:release/1.0.x.\n. \nCoverage increased (+0.02%) to 81.931% when pulling 37eff119775223b31dcdfcdca2db7a0ba9c2c25e on fix_reqAttribute_request_logs into 12b497edd240317a2ccac0bc7d4ff22693d611b5 on release/1.0.x.\n. \nCoverage increased (+0.02%) to 81.931% when pulling 2e9a8848bcba92aefdc5d33ba9672ceaa59d1be0 on fix_reqAttribute_request_logs into 12b497edd240317a2ccac0bc7d4ff22693d611b5 on release/1.0.x.\n. \nChanges Unknown when pulling 31081f41e11b9ea94878cc66751fbce193227bff on aeolus:jar-url-test-config into * on dropwizard:master*.\n. \nCoverage increased (+0.01%) to 81.933% when pulling 5c33ad33498113722226cf22255ff740a2a3a686 on aeolus:jar-url-test-config into 37bbdd1bac6ecd243c27eb581bc63b80186afd13 on dropwizard:master.\n. \nChanges Unknown when pulling f0cf074d4399bbf74365c5c8f57ba21dba916982 on nickbabcock:fix-guava-deprecations into * on dropwizard:master*.\n. \nCoverage decreased (-0.03%) to 81.775% when pulling 5498b3fd57f75fb14974ce21568c9a2d214ed44c on nickbabcock:fix-guava-deprecations into 76502c3b81f91b48c484077dc3221fe2c0696346 on dropwizard:master.\n. \nChanges Unknown when pulling f6d05718c937f1b446e1da82d4eb2e83ef4eb36f on nickbabcock:duration-mins into * on dropwizard:master*.\n. \nChanges Unknown when pulling 51c579b43f0108b0379e8d974e3a45e36408fd9e on acwwat:view-load-tpl-from-fs into * on dropwizard:master*.\n. \n\nChanges Unknown when pulling fe99a39a6bbba4e21cf5ce0ec74a0286cc7bfe2d on acwwat:view-load-tpl-from-fs into  on dropwizard:master.\n. \n\nChanges Unknown when pulling b22ec882e19b2bc5218cc6b1d378ab4b59122d77 on acwwat:view-load-tpl-from-fs into  on dropwizard:master.\n. \n\nCoverage remained the same at 81.694% when pulling 43fb5cb98e6ce2ff71de194a83faf92e99512d38 on jplock:jp-jackson into 31ee21506d0a5236ec27196a5f15f1a301478ba1 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 81.717% when pulling 6a68765feed4b042e7de5a43882c14fb27440f60 on nickbabcock:move-view-exception into f91a79d360c73b19cf527e1740235fbe2e1428c5 on dropwizard:master.\n. \n\nCoverage increased (+0.004%) to 81.721% when pulling ad5a1e941d178edbf395889d2431fb6556093e44 on nickbabcock:code-improvements into aad71bd6e0406d1dda1bfb6a007a420ab5242b9e on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 04967b9cafe5e1a6603fa89e9c212ae9ee0f3293 on nickbabcock:doc-template-customization into 97ef81435d2387f708edd72bd0c82b06b02eb647 on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 99f7fba0ec0ff06ca47d8b16578c5291aad593c9 on nickbabcock:dropwizard-forms-e2e into 23037e1a3f8dbae4a4ffbf29b33aadcbff7b907b on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 34679de9af9a7ae911e2b899f4c175b86190c184 on umcodemonkey:mockito-test-dep into 61b16fd16afe721fb6c5ca14549c65eac8423233 on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 1cb14e5325721462864d7347adeff1a19c21e0ba on evnm:dropwizard-jetty/document-default-ssl-protocols-and-cipher-suites into 7d9df2fa5680b24453ce52b84456a4aa863853db on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling e75689926d6a67011bd7a8eefb460b85aadd1d1b on evnm:dropwizard-jetty/document-default-ssl-protocols-and-cipher-suites into 7d9df2fa5680b24453ce52b84456a4aa863853db on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 43371beeb506c64c569690547e7d468a2642ce43 on nickbabcock:false-cert-validation into 7d9df2fa5680b24453ce52b84456a4aa863853db on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling c8a4067acf1261ce8dbc0737a42cc998fe7ae2b8 on dennyac:update-logging-documentation into 6d8481136c6743eea0a2937c1168a98e64b281dc on dropwizard:master.\n. \n\nCoverage remained the same at 81.721% when pulling 1687de215cf67ca50ed1997a60edff351a9f6f42 on dennyac:update-logging-documentation into 6d8481136c6743eea0a2937c1168a98e64b281dc on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 81.766% when pulling 71ad291e6863be57ba51d2dbf79bd8ec259e2f7f on nathklei:allow-default-schema-expansion into 6d8481136c6743eea0a2937c1168a98e64b281dc on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 81.766% when pulling e54ad7378edd3eb8039ede4773443bba9c6731b9 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage decreased (-0.04%) to 81.686% when pulling e54ad7378edd3eb8039ede4773443bba9c6731b9 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 81.663% when pulling e54ad7378edd3eb8039ede4773443bba9c6731b9 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 81.663% when pulling 05be77f6cde80402126d028b934d4ba8a42ff004 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 81.663% when pulling 05be77f6cde80402126d028b934d4ba8a42ff004 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 81.733% when pulling f04e30254cbb870274ece152c14598c13d992e5d on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage increased (+0.003%) to 81.724% when pulling a648742eaa2b9ff52c534a1630f10e667c6f84e2 on nathklei:allow-default-schema-expansion into 4905023b6b86f79fc14b742cf2b47a14cca7fec7 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 81.734% when pulling b0d05f0c0d9100e33f7ff141ab21fa0845bc7308 on fabito:add/using-http-processor into 4cce4d6145ce95045dcb0aa3d8ee8cc228affebe on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 81.734% when pulling ee0eac6ca8bee15550dcf62fcd4e555b14e89e0f on fabito:add/using-http-processor into 4cce4d6145ce95045dcb0aa3d8ee8cc228affebe on dropwizard:master.\n. \n\nCoverage remained the same at 81.734% when pulling a1d8af6a90339cef81ad2a10ccb938917a67041c on dennyac:update-log-config-options-doc into 90ea4e0710ca1b111de809c1d4f546aaac4abb8e on dropwizard:master.\n. \n\nCoverage increased (+0.009%) to 81.743% when pulling c204c9dd3763001e852d12f165e7c075e7011b8f on ibwhite:json-response-json-processing-exception into ca0305f24dbd6ad4f08f97bf15e12f232c395162 on dropwizard:master.\n. \n\nCoverage increased (+0.009%) to 81.743% when pulling 38e6285b127d93c932f0e879215c4d4f5218cae0 on ibwhite:json-response-json-processing-exception into ca0305f24dbd6ad4f08f97bf15e12f232c395162 on dropwizard:master.\n. \n\nCoverage remained the same at 81.734% when pulling 504533c0897b450127fd6e266879c16fd14e2c8c on upgrade_tomcat_jdbc into ca0305f24dbd6ad4f08f97bf15e12f232c395162 on master.\n. \n\nCoverage remained the same at 81.743% when pulling c67c5990b401e6475c51da1335688caf52082246 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling df132993c5e36e6191da2379feba7af28430b28a on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling df132993c5e36e6191da2379feba7af28430b28a on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling 61d8f28cc9bf91d2ba743a14f61bb29c86a38291 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling f2ac0224e78fd9cdf1b7907e07b9aa3cbe541e90 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling 2949b9771b6c2fe607c0f527366fa9a4cd2cde14 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling 5111a3e56dc0aebee19d5f36bf08b5cf7ed6ff61 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling 3285524fa82b768f33696ec7b774c0be10af3239 on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling c032ea64ba47a8c2e21919bca8be0dc2af242c9e on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.743% when pulling 5c1eb106c9f51378db2ab8dabbbb9823494af57a on dependency-updates into 34b26705d1abc68756067bfaaa19eff0dc54864f on master.\n. \n\nCoverage remained the same at 81.861% when pulling f0885c2f94273763554f92dd6cc076e59cd5705c on errorprone-2.0.15 into bd6eb1e1295138341837520ab64f75691bfb5b79 on master.\n. \n\nCoverage remained the same at 81.743% when pulling edbee935fa8fac02910c5407f5c377ee4ac7390d on vvondra:hibernate_5.2 into 67075b8e4eea5289c2235e6fa88fe7d3a58e3232 on dropwizard:master.\n. \n\nCoverage remained the same at 84.651% when pulling 0af9d64d14b106df0304abc79d22f14265286dd7 on vvondra:hibernate_5.2 into ebe661979150641e3e8586097df82347c49b7985 on dropwizard:master.\n. \n\nCoverage remained the same at 84.651% when pulling c08b8110d3bbfdf0d5f72230f3d5df187e45a71d on vvondra:hibernate_5.2 into ebe661979150641e3e8586097df82347c49b7985 on dropwizard:master.\n. \n\nCoverage remained the same at 84.651% when pulling c08b8110d3bbfdf0d5f72230f3d5df187e45a71d on vvondra:hibernate_5.2 into ebe661979150641e3e8586097df82347c49b7985 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.661% when pulling 4ab6395ba0ea5a9561b7d89db719db4184404eb4 on vvondra:hibernate_5.2 into 26753604729bf11a8a45e6ac6de6d446a97a7170 on dropwizard:master.\n. \n\nCoverage increased (+0.005%) to 81.866% when pulling 534819c570705264f691ca19d5ae9ea1cbfcc3b7 on upgrade_jetty_94 into c4de62f8add7a752d773427c49a8de76166fd54d on master.\n. \n\nCoverage increased (+0.003%) to 81.746% when pulling 0b2a7f74d5220257dc2ee7f6323853d30dd2d4ed on nickbabcock:nightmare-jackson into 67075b8e4eea5289c2235e6fa88fe7d3a58e3232 on dropwizard:master.\n. \n\nChanges Unknown when pulling 2441185379ef09050a99c773f4ca77383053ae88 on scottaj:configure-unit-of-work into  on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 81.846% when pulling 895d3dadeec0a895e588e9353d4076ceec9564a4 on scottaj:configure-unit-of-work into c4de62f8add7a752d773427c49a8de76166fd54d on dropwizard:master.\n. \n\nCoverage remained the same at 81.861% when pulling 8acf6cb06ef4ce0da07e766e39485188e452412d on circle_ci into 09875faa52fb5197fad5116d368509c7ca11f192 on master.\n. \n\nChanges Unknown when pulling e5924338dd7f367929197664ef89fb22da272c80 on travis-java-opts into  on master.\n. \n\nCoverage remained the same at 81.861% when pulling 53ae21c76ae7873677981cbe05a4cd83b400043f on urisavka:master into 2cf422d265c15ffc80e390f613d4b785552068dd on dropwizard:master.\n. \n\nChanges Unknown when pulling 7e5c6aaa814f2d53541cab5f60ac4776b117d809 on jersey_tests_timeouts into  on master.\n. \n\nCoverage increased (+0.02%) to 81.848% when pulling 0f33b7c7ab299dee56e9557f771a36e6845cbf51 on add_client_to_app_rule into 5b5f6da8280049a1996524b94d697b0ef2c5ad65 on master.\n. \n\nChanges Unknown when pulling 6b6dfbae6f8a263d3aa686693074dc2d5d9cf2b7 on manuel-hegner:configuration_full_json_support into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 20a99d837ec2e298b3427344e589aa88ed28f917 on manuel-hegner:configuration_full_json_support into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 20a99d837ec2e298b3427344e589aa88ed28f917 on manuel-hegner:configuration_full_json_support into  on dropwizard:master.\n. \n\nCoverage decreased (-0.05%) to 84.272% when pulling 7f5bccffa0f8f6a01af7d985647f262022aa0076 on remove_logback_dependency into 243874e59a78eddbcc227fba20e7c520cb8ebcaf on master.\n. \n\nCoverage decreased (-0.05%) to 84.481% when pulling df3a6df4cd9bf9cd706993843c962c8cae40d9e8 on remove_logback_dependency into efb9e0e9eb42e388535620b7b94340c183f487b3 on master.\n. \n\nChanges Unknown when pulling d7a852403ffd027318950b60e442738329b9d200 on upgrade_jetty into  on master.\n. \n\nCoverage increased (+0.1%) to 82.077% when pulling ec7b6321e32c33cab4838b3bdaddc8127458fde4 on DAOTestRule-backport into 64b942c6686c2c88202e12e18576a6dd48c5b2a1 on release/1.0.x.\n. \n\nChanges Unknown when pulling bab12e5140401acde77eced115b5230e85631a3f on nickbabcock:paranamer into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 6cb1e4f952f81ce79bb1a0d60034a904ab2b04c7 on nickbabcock:paranamer into  on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 81.846% when pulling 1e4faf037c56b99c1709c7811f262f646748f055 on nickbabcock:jackson-enums into 95c04681cfad0e906caac2d956515c9342af2e23 on dropwizard:master.\n. \n\nCoverage decreased (-0.003%) to 81.843% when pulling b033549a6b5a087a9caa91734190b7f8506e249b on nickbabcock:webexceptionHeaders into 045976cf5c2177295bece38419a3dbfd7b35143f on dropwizard:master.\n. \n\nCoverage decreased (-0.003%) to 81.843% when pulling b431534fd97bcad96b5d8039c09b6554fc298a38 on nickbabcock:webexceptionHeaders into 045976cf5c2177295bece38419a3dbfd7b35143f on dropwizard:master.\n. \n\nCoverage remained the same at 81.846% when pulling 39e923ca24d725703a387b42d5c27e263f4c8bfa on zalberico:master into 045976cf5c2177295bece38419a3dbfd7b35143f on dropwizard:master.\n. \n\nCoverage increased (+2.8%) to 84.642% when pulling d76d0ee817ef3785d5cb9d1738698501d212dae6 on liquebase_tests into 0e34c660a35269b6e1524b972430af5157312c22 on master.\n. \n\nChanges Unknown when pulling e2aa076b10a9c57a9a123a29a8dc6388f82883b3 on markelliot:me/neverBlock into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 690e5d4426d77ad0a61b57e255077ca01e26ed9f on markelliot:me/update-logback into  on dropwizard:master.\n. \n\nCoverage remained the same at 84.651% when pulling 802bb791df6f521b4c82c26dc07b6c843631006a on nickbabcock:bump-compiler into ebe661979150641e3e8586097df82347c49b7985 on dropwizard:master.\n. \n\nCoverage remained the same at 84.651% when pulling b8713472a18a6770a38dc4f6b87d167327e3d7b4 on nickbabcock:update-docs into ebe661979150641e3e8586097df82347c49b7985 on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.664% when pulling cbe4409ae63b96ed2d0e92165b28340223baa4d6 on vvondra:hibernate_convenience into cee6955b1e9f8e31f77f4958416849d0e18b0c17 on dropwizard:master.\n. \n\nCoverage remained the same at 84.664% when pulling a179fdcdfa74d0799ee4546a191beeead9d74122 on mrice:improve_doc_getting_started_yml into e8d7e8935483855d25e5622e0467c475d8529425 on dropwizard:master.\n. \n\nCoverage remained the same at 84.664% when pulling c5062839aa21c991d41d10e8c12a6d2e56e2184d on tjcutajar:upgrade_to_logback_1.2.1 into 8586ca2db36ef79ad6d82d8861a8c269919280fd on dropwizard:master.\n. \n\nCoverage remained the same at 84.664% when pulling c5062839aa21c991d41d10e8c12a6d2e56e2184d on tjcutajar:upgrade_to_logback_1.2.1 into 8586ca2db36ef79ad6d82d8861a8c269919280fd on dropwizard:master.\n. \n\nCoverage remained the same at 84.664% when pulling 16c51d0756ab52043d1740baf891a3446faa5223 on tjcutajar:upgrade-to-jersey-2.25.1 into 8586ca2db36ef79ad6d82d8861a8c269919280fd on dropwizard:master.\n. \n\nCoverage remained the same at 84.664% when pulling 61a707936742f2c3f3e19031f6a41900d0c80945 on tjcutajar:upgrade-to-apache-httpclient-4.5.3 into 8586ca2db36ef79ad6d82d8861a8c269919280fd on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 84.765% when pulling 98d15decc89661f10a8e7c66754ea2d4c8a45e5b on evnm:dropwizard-auth/optional-auth into 9295413c7b52b74d2c783df08d4da5290e4ceada on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 84.761% when pulling a4c24f1c57b2b4e16856afdf43ff23c63b691800 on evnm:dropwizard-auth/optional-auth into 9295413c7b52b74d2c783df08d4da5290e4ceada on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 84.761% when pulling f701585db7b71e55e1d4d9b9d7249bc340956c87 on evnm:dropwizard-auth/optional-auth into 9295413c7b52b74d2c783df08d4da5290e4ceada on dropwizard:master.\n. \n\nCoverage remained the same at 84.761% when pulling a4e1d42c9216583030f0294ba4e330f4683e07fa on upgrade_to_dropwizard_320 into 786e9dd54e0882bd74683345f663adfc82c6ce44 on master.\n. \n\nCoverage increased (+0.006%) to 84.768% when pulling 8d244221c423c9ad2b153c669bd8ad416618fedc on jplock:jp-default-cleanup into e823137be416aac5344f42c7b50379ffa03b4b97 on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 84.899% when pulling 75a93cdf9857944a0d5f029138449315bf9dd026 on aaanders:list-tasks into e823137be416aac5344f42c7b50379ffa03b4b97 on dropwizard:master.\n. \n\nCoverage increased (+0.1%) to 84.905% when pulling 75a93cdf9857944a0d5f029138449315bf9dd026 on aaanders:list-tasks into e823137be416aac5344f42c7b50379ffa03b4b97 on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 84.807% when pulling 4c2659ac1c940fa2eaaed3521db1890b7f195c45 on aaanders:list-tasks into 5ece5072e1e78a0a78053e6c800a410bb8954ec5 on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 84.807% when pulling 4c2659ac1c940fa2eaaed3521db1890b7f195c45 on aaanders:list-tasks into 5ece5072e1e78a0a78053e6c800a410bb8954ec5 on dropwizard:master.\n. \n\nCoverage remained the same at 84.807% when pulling fd00e8711bec3ced4f66519b349a1cb7e79fbe0b on dependency-updates into e94deb2e0fa94c51fa6d18cded9eb274d2360d5a on master.\n. \n\nCoverage decreased (-0.1%) to 84.667% when pulling fbf0d100291e9fa201afe70b75fa58c22238b4be on nickbabcock:err-log into 857cb187e6f882cb2d05b6ba8291a99861165b81 on dropwizard:master.\n. \n\nCoverage decreased (-0.1%) to 84.696% when pulling c7bcc210d10a5be59a740d75794dfa452bc5ca33 on nickbabcock:err-log into 23f84abe8abf549477f1268f589359e04b56c9ca on dropwizard:master.\n. \n\nCoverage decreased (-0.3%) to 84.526% when pulling 274b375b9179b652d048ae1da00c23dae76a7b3e on jplock:jp-filters into 857cb187e6f882cb2d05b6ba8291a99861165b81 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.823% when pulling f892020aa50c6500286ae03702c272ad3a3e1878 on jplock:jp-instant-parameter into 857cb187e6f882cb2d05b6ba8291a99861165b81 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.823% when pulling bf3415ec370273a19281dec1f1b498b327606a7d on jplock:jp-instant-parameter into 857cb187e6f882cb2d05b6ba8291a99861165b81 on dropwizard:master.\n. \n\nCoverage remained the same at 84.696% when pulling e609c90d4266ef2e6e0882d59129b3ba5b9ac788 on nickbabcock:interface-annotations into 6c76c27c0cf637073dc7a72ae63a97dc5ff9b78f on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.71% when pulling 7007f305b568a8243b7e1a56f2b0a7606c208151 on pkwarren:fileappender_buffer_size into 57bc8164ab9577e0c64df42d46ca3d32827f43b3 on dropwizard:master.\n. \n\nCoverage decreased (-0.1%) to 84.7% when pulling e9cf9ff1622f69c3f1ea1abf9a4001874b01d128 on backport-pr-1947 into f2a6784c8f778402a335a89372c97ec7e1bbc532 on release/1.1.x.\n. \n\nCoverage remained the same at 84.673% when pulling d626d98ca445d312322bab06fd427d8b947d67b0 on upgrade_metrics into 11366d5c75e121706722a894c57972995395e4e2 on release/1.1.x.\n. \n\nCoverage decreased (-0.0001%) to 84.685% when pulling 93019be3dcfe71f2175a1dc210b02c420a810a12 on support_disabled_enabled_attributes into cc84e68ba967ec8013405e3c284dfff7c05aa6cd on release/1.1.x.\n. \n\nCoverage decreased (-0.0001%) to 84.685% when pulling 1a3909a727e1c1eccdda470001c95843afe1f4fe on support_disabled_enabled_attributes into cc84e68ba967ec8013405e3c284dfff7c05aa6cd on release/1.1.x.\n. \n\nCoverage decreased (-0.0001%) to 84.685% when pulling 85ebb6f51ef7d67b262106f04c6df5fed55595d5 on support_disabled_enabled_attributes into cc84e68ba967ec8013405e3c284dfff7c05aa6cd on release/1.1.x.\n. \n\nCoverage decreased (-0.0001%) to 84.685% when pulling 85ebb6f51ef7d67b262106f04c6df5fed55595d5 on support_disabled_enabled_attributes into cc84e68ba967ec8013405e3c284dfff7c05aa6cd on release/1.1.x.\n. \n\nCoverage increased (+0.006%) to 84.323% when pulling 86791858766f7e69868996a32d932d409b8baff5 on jplock:jp-cleanup-healthcheck into a660232779520e37aec6fb0bf5b11232986e33db on dropwizard:master.\n. \n\nCoverage increased (+0.07%) to 84.754% when pulling 3c14c282777baaa0c1c7a9808afa4c8ac0224b2c on fix_sublocator_bug into cc84e68ba967ec8013405e3c284dfff7c05aa6cd on release/1.1.x.\n. \n\nCoverage remained the same at 84.323% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into 243874e59a78eddbcc227fba20e7c520cb8ebcaf on dropwizard:master.\n. \n\nCoverage remained the same at 84.323% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into 243874e59a78eddbcc227fba20e7c520cb8ebcaf on dropwizard:master.\n. \n\nChanges Unknown when pulling 2c5839b981971b1dc3a02db58e46743b1e4f1265 on frojasg:add-auto-closable-manager into  on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.404% when pulling 092d3ee623e92b2f54c3b359de5256662b7e161d on frojasg:add-auto-closable-manager into 2320acdedcfba67e83cd9f6b93bd84a616f62bf0 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.404% when pulling bae197d5ac2d881ace0336b95834f9c466f30621 on frojasg:add-auto-closable-manager into 2320acdedcfba67e83cd9f6b93bd84a616f62bf0 on dropwizard:master.\n. \n\nCoverage remained the same at 84.754% when pulling 148b830d93c2f1e109e6d4fb7d16ad45411301ae on remove-javadoc-profile into e0100a372029c7d5361e586ae2b70d5298dda649 on release/1.1.x.\n. \n\nCoverage decreased (-0.002%) to 84.39% when pulling 76a6349042eadc658321023fbe20a00ab749cb2b on ghenkes:context-path into 2320acdedcfba67e83cd9f6b93bd84a616f62bf0 on dropwizard:master.\n. \n\nCoverage decreased (-0.006%) to 84.398% when pulling a7a74ecfc37523f17b2bcf0141a25428d3b74338 on methods_filter into f56d66e3220472dbabc99ec2b8dd30537425fe8d on master.\n. \n\nCoverage decreased (-0.006%) to 84.398% when pulling 1e7e78dcc360e696651edfeef3c4ea2d7a725fe4 on methods_filter into f56d66e3220472dbabc99ec2b8dd30537425fe8d on master.\n. \n\nChanges Unknown when pulling 516b5c59e6627c53941e9e5f0b07fbc59e915535 on osigida:patch-2 into  on dropwizard:release/1.0.x.\n. \n\nCoverage remained the same at 84.754% when pulling ac9b412dd9d839b4738145bf19811d64d10bee90 on upgrade_metrics_to_3.2.2 into 1860f65b4fbe7aa93d3a4a03a2ce1e737fd1b3cd on release/1.1.x.\n. \n\nCoverage decreased (-0.02%) to 84.745% when pulling f2f1d209edce848a6e852afa8f2f08073685cf88 on set_console_context_on_reset into b9fad10d203ca3e2414216d60bf3b733657fe16d on release/1.1.x.\n. \n\nCoverage increased (+0.004%) to 84.773% when pulling fc4fde0c5ad4f5ba5086899ca717b129c7850533 on set_context_for_file_logger into b9fad10d203ca3e2414216d60bf3b733657fe16d on release/1.1.x.\n. \n\nCoverage remained the same at 84.398% when pulling 7f640c86c34407b58aa754c166c7295066eb747d on hibernate_exclusions into a8b6bdd9c5de6364ba7c3ea84764c1da3c09f9c6 on master.\n. \n\nCoverage increased (+0.03%) to 84.427% when pulling 63cbe49a1f4a2f5db8dfa4b2974bfcf59aef9a2b on j-baker:jbaker/http2_cipher_suites into a8b6bdd9c5de6364ba7c3ea84764c1da3c09f9c6 on dropwizard:master.\n. \n\nCoverage decreased (-0.07%) to 84.31% when pulling aba9fcf452854833704acbc87691c96f237843be on support_for_system_tz into 8c2710266ed44c0e921e860ffe97a9dc515c6894 on master.\n. \n\nCoverage decreased (-0.03%) to 84.345% when pulling 2ee98a0bd798b8e33da3f362da2000ceafd5550d on support_for_system_tz into 8c2710266ed44c0e921e860ffe97a9dc515c6894 on master.\n. \n\nCoverage decreased (-0.03%) to 84.345% when pulling 4e245fd8b0378a4015756efb383ec2a48572ee49 on support_for_system_tz into 8c2710266ed44c0e921e860ffe97a9dc515c6894 on master.\n. \n\nCoverage increased (+0.01%) to 84.391% when pulling 74a69ee17d7913a1bca07aa53e514ae29076df8f on t-tsutsumi:rfe/jersey-exception-handling into 8c2710266ed44c0e921e860ffe97a9dc515c6894 on dropwizard:master.\n. \n\nCoverage remained the same at 84.379% when pulling bbd0745744dd4a8c81a76a836909fbf4f3d47b6b on use_uuid_for_database_names into 8c2710266ed44c0e921e860ffe97a9dc515c6894 on master.\n. \n\nCoverage increased (+0.2%) to 84.533% when pulling e722bdeaa3a726fba3b680e3b0e1366f59adadd5 on fix_classic_logging_warning into 5d0d4e0465397473a45bc4b3625214978d71dc75 on master.\n. \n\nCoverage remained the same at 84.749% when pulling a69bb39bcb69bc17a759a609bcc9197feb6198d9 on isaki-x:pom_fix_20170328 into 442b44fc4d4fb1983d5739e174e9e6a60818ea65 on dropwizard:release/1.1.x.\n. \n\nCoverage decreased (-0.02%) to 84.459% when pulling b80290beb275ccc1fbcba6a9091586335783eaa0 on stefan-zh:util-enums-from-string into 3034407681e1389975a87d122d75ad754e94b8e6 on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 84.459% when pulling b80290beb275ccc1fbcba6a9091586335783eaa0 on stefan-zh:util-enums-from-string into 3034407681e1389975a87d122d75ad754e94b8e6 on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 84.459% when pulling c0bfb6bb0ebe37884b65bd7e1cfd4832cef25860 on stefan-zh:util-enums-from-string into 3034407681e1389975a87d122d75ad754e94b8e6 on dropwizard:master.\n. \n\nCoverage remained the same at 84.481% when pulling 88c7abdfa07c5220341f00a5031256983f5e47c6 on qinfchen:master into 3034407681e1389975a87d122d75ad754e94b8e6 on dropwizard:master.\n. \n\nCoverage remained the same at 84.749% when pulling 71e1c80d18b81f45c558957b5fd7d22884a6152a on missing-unwrapvalidatedvalue into 442b44fc4d4fb1983d5739e174e9e6a60818ea65 on release/1.1.x.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling bf4c81a973a89b0c8cf6f3a3648617f07325a232 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling bf4c81a973a89b0c8cf6f3a3648617f07325a232 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling bf4c81a973a89b0c8cf6f3a3648617f07325a232 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling bf4c81a973a89b0c8cf6f3a3648617f07325a232 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 84.523% when pulling 477895cc5525b2ec46c5a3c7eedce4612c1cb758 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling 477895cc5525b2ec46c5a3c7eedce4612c1cb758 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling 47eb242f1cdac0dd5b979f5b825fa0e5d805c1d5 on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.495% when pulling 2413486cbe9c070efc1bb86d476b3f27dfa6fdab on anonyome:tbartley/client-cert-alias into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage remained the same at 84.479% when pulling 0e45876e18f015a0c922780a2a262bb628c0bce1 on zloster:documentation-threads into 4705f38cccddf9f15cb95c6f1db8c15a600c8078 on dropwizard:master.\n. \n\nCoverage increased (+0.004%) to 84.5% when pulling cad43169657b0ba5352a1beac4fa5cd81a66d21c on anonyome:tbartley/improve-unhandled-application-exception-logging into 5677f8fa843575628b233f00f2fbc57b7c6f9321 on dropwizard:master.\n. \n\nCoverage increased (+0.004%) to 84.5% when pulling 5717f62e6f9aa9a5a870d925e48519117e857e89 on anonyome:tbartley/improve-unhandled-application-exception-logging into 5677f8fa843575628b233f00f2fbc57b7c6f9321 on dropwizard:master.\n. \n\nCoverage remained the same at 84.495% when pulling ab52a738ce1216ddabefb7e0ad30ae8d36532be7 on anonyome:tbartley/improve-unhandled-application-exception-logging into 5677f8fa843575628b233f00f2fbc57b7c6f9321 on dropwizard:master.\n. \n\nCoverage remained the same at 84.495% when pulling c73aea3fa948cf480b7534186821434b341931ea on qinfchen:SizeAndTimeBasedRollingPolicy into e6fba4c563604cc155ca9095bd781a0a1111d16b on dropwizard:master.\n. \n\nCoverage remained the same at 84.495% when pulling c73aea3fa948cf480b7534186821434b341931ea on qinfchen:SizeAndTimeBasedRollingPolicy into e6fba4c563604cc155ca9095bd781a0a1111d16b on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.506% when pulling 39affd757860ab373b012f68f0bd75901d4a5878 on qinfchen:SizeAndTimeBasedRollingPolicy into e6fba4c563604cc155ca9095bd781a0a1111d16b on dropwizard:master.\n. \n\nCoverage remained the same at 84.495% when pulling efec6377eade4dbb88afd6257fca53d4d9ac757f on nickbabcock:return-validation-caveat into e6fba4c563604cc155ca9095bd781a0a1111d16b on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.506% when pulling a87bf02d68ac5d1b759ac000ff790168a79025f3 on markelliot:me/enableThreadNameFilter into 3d25bb9a102ba417d4d3e66edcbd54b18cc32213 on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 84.487% when pulling 14da7540bb6c443bd0beda4ef6debefdd844f797 on natnan:executor-service-allowCoreThreadTimeOut into 743c6888be63fd544ad992634c46a99e952aa8b4 on dropwizard:master.\n. \n\nCoverage remained the same at 84.506% when pulling f56abd1974106eb04499fc15ab0f9e15e7aaf67f on dependency-updates into 743c6888be63fd544ad992634c46a99e952aa8b4 on master.\n. \n\nCoverage remained the same at 84.506% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into 743c6888be63fd544ad992634c46a99e952aa8b4 on dropwizard:master.\n. \n\nCoverage remained the same at 84.506% when pulling c70b25d1e4c84559bd68ca74cd84c5beae19c7a5 on t-tsutsumi:pr/use-latest-alpn-boot into 743c6888be63fd544ad992634c46a99e952aa8b4 on dropwizard:master.\n. \n\nCoverage increased (+0.006%) to 84.493% when pulling 506fb4caadaba83781afe14048945270f58086da on jelmerterwal:fix_filter_partially_matching into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.006%) to 84.493% when pulling 506fb4caadaba83781afe14048945270f58086da on jelmerterwal:fix_filter_partially_matching into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.521% when pulling 1f683535a2d8f5ed8845cc23d7cfabc7038b7c8f on jelmerterwal:fix_filter_partially_matching into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.521% when pulling 1f683535a2d8f5ed8845cc23d7cfabc7038b7c8f on jelmerterwal:fix_filter_partially_matching into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.004%) to 84.491% when pulling 1f87c2c6061384f1f934a310dc788588fcb892a7 on lightswitch05:feature/criteria-query into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.489% when pulling 4b31edfa13761bb7137eed0a7c2821f5cc2bdbec on lightswitch05:feature/criteria-query into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.489% when pulling 4b31edfa13761bb7137eed0a7c2821f5cc2bdbec on lightswitch05:feature/criteria-query into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.498% when pulling 2be7116bd4e5536b5dbbd2ea0832a24f849ee333 on nickbabcock:add-interceptors into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.498% when pulling 2be7116bd4e5536b5dbbd2ea0832a24f849ee333 on nickbabcock:add-interceptors into ecf06cebd6586bea737ff47b628b9778afd15503 on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.502% when pulling d8a198fcbf42424edf3cb0e0785e0e70114c8e3b on t-tsutsumi:pr/implement-HandlerContainer into 10dad0fae7a9a1aa8c1369146b8d1f4ccf9998ad on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.502% when pulling d8a198fcbf42424edf3cb0e0785e0e70114c8e3b on t-tsutsumi:pr/implement-HandlerContainer into 10dad0fae7a9a1aa8c1369146b8d1f4ccf9998ad on dropwizard:master.\n. \n\nCoverage increased (+0.002%) to 84.523% when pulling 59f2d9aba106cd637845651ef9575e2b055cc9e3 on nickbabcock:add-jsonproperty into 5126671cef0f240f59a77fa981c3e894b183b72b on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling aed96c0c228d3218de9cebb79d7efd4c1ac06b8a on nickbabcock:clean-code into fc72f6ab2e7dd060b46f5527267fb2159414e9fb on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling 496064fe351006186245b1be1f641600b8732994 on nickbabcock:doc-proj-struct into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling 542a5d40c87d0003c0c186cda794b840d5d4f9ef on nickbabcock:doc-proj-struct into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling b120245d10e08b938d8d3eb6eb043c77a90b42e3 on nickbabcock:doc-proj-struct into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling 8ed3a1defd2767535c615708986c556d954f07c1 on nickbabcock:doc-proj-struct into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.552% when pulling 8233c8f2c9168b2114f51f00e7e27487c7cb77e0 on jelmerterwal:cdi_weld into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.552% when pulling a665a1ce25978bb5652bd40ae94e2348fc099648 on jelmerterwal:cdi_weld into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.553% when pulling fdcfaffea617d2fb814343620e988e94ddb8796c on jplock:jp-period into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.553% when pulling fdcfaffea617d2fb814343620e988e94ddb8796c on jplock:jp-period into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling b3674ad43d7cf024b671b6f0114e572c1ec842e6 on hugogoncalves:patch-1 into 223be464b1e58ac8e85137c71bbb541bed760403 on dropwizard:master.\n. \n\nCoverage remained the same at 84.523% when pulling 4021b8e76595c82ef5b2ebd4f99787a12ca268ad on manuel-hegner:json_configuration_factory_fix into cebf1d67dffc14ae235806e3fffae4f607b459dc on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.535% when pulling 53d78e59341fa9dac64c69dbb1dedb228b4384a7 on lightswitch05:feature/instant-param into cebf1d67dffc14ae235806e3fffae4f607b459dc on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 84.51% when pulling 8710100e40e395069fe1ede537482a22323ddf77 on lightswitch05:feature/instant-param into cebf1d67dffc14ae235806e3fffae4f607b459dc on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.551% when pulling ccf006c027ab8e903c6a2dcc28b490bc4654ef61 on lightswitch05:feature/instant-param into cebf1d67dffc14ae235806e3fffae4f607b459dc on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling bb41bd38779b10f0dce2a1b79f86a82983417e1f on nickbabcock:decrease-valid-interval into 5e5a5ffb0ecc48ed982563f046ab7c2e8897324f on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling 11101fe5d58f5c17667b74d9def92b59832edd05 on nickbabcock:group-validation-docs into c0d7379530df147c629b00798430bd73c8d7e7ab on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling 56bc0a25689807118f8452f9de83fb60988f8fa9 on nickbabcock:group-validation-docs into c0d7379530df147c629b00798430bd73c8d7e7ab on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 84.92% when pulling 385246d5783cb1b521c1a099037c46db691f21e2 on nickbabcock:jackson-2.9 into 05ffc59d56515ee674c516d83b85502bf3bdd2b3 on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 84.893% when pulling 1f26ed24c63b41726144bf4baa4eca51be31af6c on nickbabcock:jackson-2.9 into 72221cde9246b3d2f13f73e73032ead912d882da on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 85.186% when pulling 34ed6cc40d670a085b64a248c0d41fc368df576b on nickbabcock:jackson-2.9 into 6663527f13a71dd9d4fa6c1a0e10906c828aa8dd on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 85.171% when pulling 28caa2ec9c163aa4a3af79e54abd0146adea4299 on nickbabcock:jackson-2.9 into 56ec023f3acddb4659e9a08f73fb01d668b360c3 on dropwizard:master.\n. \n\nCoverage increased (+0.007%) to 84.531% when pulling 0ecf4dde31bea3f6d0bfb299285fc4042919b401 on BenScholl:error_entity_writer into e2756757075ac8e11f21267a93d7fb1f2270c53d on dropwizard:master.\n. \n\nCoverage increased (+0.007%) to 84.531% when pulling e020f47784d4e23f816a32f95543881178540e48 on BenScholl:error_entity_writer into e2756757075ac8e11f21267a93d7fb1f2270c53d on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling c698450092f4c4fd3e7850ebf8a1f4d866869882 on sankate:master into e2756757075ac8e11f21267a93d7fb1f2270c53d on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling 1e4dc9ff4ea284aa9fe0abea07ff9d21005ee5b1 on sankate:master into 549379e5300a440366e8ed747bb352fe0e48118b on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling 992b2092661ff67a18950d9a16d46ba17cea63bf on dependency-updates into d2b6d4aff65af78894afd5427afc0e33e5eeb03e on master.\n. \n\nCoverage increased (+0.008%) to 84.77% when pulling 6ee105a28cdf690deb84e0f34cf94b07221edb04 on isaki-x:dw-2056 into 07a10877de9bf0be5f4e3c7c0dc294f0aa47b046 on dropwizard:release/1.1.x.\n. \n\nCoverage increased (+0.008%) to 84.77% when pulling ce5a5e07015948e9560bd976ddf16205c5c5d244 on isaki-x:dw-2056 into 07a10877de9bf0be5f4e3c7c0dc294f0aa47b046 on dropwizard:release/1.1.x.\n. \n\nCoverage increased (+0.08%) to 84.605% when pulling 59c4d432cfd446b2997a17131c3ee118f95102fa on scottaj:add-timezone-to-java-8-types into 428e97a2136252b1d2598b764c7d81c316761160 on dropwizard:master.\n. \n\nCoverage remained the same at 84.524% when pulling 5f3e442faae69c96a42e2be696fdd79a498b14e0 on nickbabcock:rolling-logger into 428e97a2136252b1d2598b764c7d81c316761160 on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.648% when pulling 05434a9ee3a85cc38961e25507b00010bfbd509a on manuel-hegner:json_configuration_factory_fix_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage remained the same at 84.621% when pulling 05434a9ee3a85cc38961e25507b00010bfbd509a on manuel-hegner:json_configuration_factory_fix_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage remained the same at 84.621% when pulling 05434a9ee3a85cc38961e25507b00010bfbd509a on manuel-hegner:json_configuration_factory_fix_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage remained the same at 84.621% when pulling 05434a9ee3a85cc38961e25507b00010bfbd509a on manuel-hegner:json_configuration_factory_fix_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage increased (+0.3%) to 84.904% when pulling ed0ea0dff2d968271087df02d14b53df14dae77c on manuel-hegner:generics_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage increased (+0.3%) to 84.904% when pulling 2b480f21ecbd7bd4c89afe725d90659c4589fe6f on manuel-hegner:generics_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage increased (+0.3%) to 84.904% when pulling 2b480f21ecbd7bd4c89afe725d90659c4589fe6f on manuel-hegner:generics_test into 91f3421803fe910a911d8f2fd59eef254e58925e on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.931% when pulling 841d8068776e534ddfad2ca06bded8a7d1071c92 on nickbabcock:doc-log-filter into 05ffc59d56515ee674c516d83b85502bf3bdd2b3 on dropwizard:master.\n. \n\nCoverage remained the same at 84.853% when pulling 0f430a9497a6b23f2b7416c4d9b3baf412946547 on msymons:release/1.1.x into a5ecf60a8f26145a08f8654fddec8d03c5911472 on dropwizard:release/1.1.x.\n. \n\nCoverage remained the same at 84.904% when pulling ca1e50fdd98a8dc18ff60fd55a3ecfa96a625b63 on msymons:master into 05ffc59d56515ee674c516d83b85502bf3bdd2b3 on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 84.972% when pulling 58cab888b15e5ffe2fcf7230d53681317f50f933 on stringy05:client_ntlm_auth into 591af0ef8cd71d7d428cfb6cfc1d476e326bb28f on dropwizard:master.\n. \n\nCoverage increased (+0.04%) to 84.972% when pulling 14507d538769936e4706ae94a02600e33b2360d3 on stringy05:client_ntlm_auth into 591af0ef8cd71d7d428cfb6cfc1d476e326bb28f on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.96% when pulling 0923c2f70e100585d8a4c154b7ed23c08609c47e on stringy05:client_ntlm_auth into 591af0ef8cd71d7d428cfb6cfc1d476e326bb28f on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 84.96% when pulling 0923c2f70e100585d8a4c154b7ed23c08609c47e on stringy05:client_ntlm_auth into 591af0ef8cd71d7d428cfb6cfc1d476e326bb28f on dropwizard:master.\n. \n\nCoverage remained the same at 84.904% when pulling f16372c36ba6aa22cf82009ad1ed40598fda0d2c on isaki-x:master into 72221cde9246b3d2f13f73e73032ead912d882da on dropwizard:master.\n. \n\nCoverage remained the same at 84.904% when pulling 1b93e286ad2f750d2162c0f460896b0ea709f4f9 on FredDeschenes:issue-2089 into 72221cde9246b3d2f13f73e73032ead912d882da on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 84.949% when pulling 197f12112cfdd9fb03d0ed39d31deae06b6464c1 on FredDeschenes:caching-authorizer-loadingcache into 8dfc67c1b43275c1d5628c9c257b006786d53ff5 on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 84.949% when pulling 9fc9e4f5c59e4d1da4e34108512523a31856a871 on FredDeschenes:caching-authorizer-loadingcache into 8dfc67c1b43275c1d5628c9c257b006786d53ff5 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 84.96% when pulling b3fcb714046d78c9f306ef1f38965d9791b432b8 on pavelkokush:immediateflush-support into 00ec17f2695befd7e3d02cbee3ee71d394b29eeb on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 85.508% when pulling f1621ce74f6b16583e1eb65cee1e2ef152fb534a on pavelkokush:immediateflush-support into eb373e137bde2438ca3aca6ee5ce45ca39649795 on dropwizard:master.\n. \n\nCoverage increased (+0.2%) to 85.197% when pulling 8854b10e361fb38621f94473402e732e83e33686 on FredDeschenes:issue-2097 into 00ec17f2695befd7e3d02cbee3ee71d394b29eeb on dropwizard:master.\n. \n\nCoverage remained the same at 84.949% when pulling 9f2817597bc17d493bd4a2fbdb3a1c3291fe6b3d on Xaerxess:jackson-configure-cleanup into 00ec17f2695befd7e3d02cbee3ee71d394b29eeb on dropwizard:master.\n. \n\nCoverage remained the same at 84.949% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into a68f1db8aa6ff0d738879a8f6e07d90bb43bdadf on dropwizard:master.\n. \n\nCoverage remained the same at 84.949% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into a68f1db8aa6ff0d738879a8f6e07d90bb43bdadf on dropwizard:master.\n. \n\nCoverage remained the same at 84.949% when pulling 446bfa8bd628dfd62768d68b74a9749f172e2242 on gaojun301:master into a68f1db8aa6ff0d738879a8f6e07d90bb43bdadf on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 85.222% when pulling 26e2133ba505b7640eaaeab10d6d6cd205eaee6b on remove_logback_from_jackson into b15b6eeca32678e5685d5b6e453c17647950cc6f on master.\n. \n\nCoverage decreased (-0.03%) to 85.092% when pulling 49a3bd4040b37d55d68d4cbcfd2a68b0cfeaad09 on msymons:release/1.1.x into 48b882520564334a652131b34eb4102aec810da8 on dropwizard:release/1.1.x.\n. \n\nCoverage remained the same at 85.197% when pulling a0a115fdc0806db4ea41912f34e69a3330320045 on msymons:master into b15b6eeca32678e5685d5b6e453c17647950cc6f on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 85.181% when pulling a303e823b0502d685865063d123625279e552c89 on several_suites into 545a598e9650b0244fe1d47ce24fedef689507b0 on master.\n. \n\nCoverage decreased (-0.02%) to 85.162% when pulling 773595f75aa24a6f365779ad6a3bf3bc5077e9c1 on isaki-x:master into 6a4bf5b6a478a105b3bed746f1eba1ea2e7cc266 on dropwizard:master.\n. \n\nCoverage decreased (-0.02%) to 85.162% when pulling 5870087a93aebd3c657df8abd7bcd4b2df4c11b0 on isaki-x:master into 6a4bf5b6a478a105b3bed746f1eba1ea2e7cc266 on dropwizard:master.\n. \n\nCoverage increased (+0.004%) to 85.185% when pulling 6d9c168f6931969291ab4a24c5f8eefeb40d127f on isaki-x:master into 6a4bf5b6a478a105b3bed746f1eba1ea2e7cc266 on dropwizard:master.\n. \n\nCoverage decreased (-0.01%) to 85.199% when pulling 49462dc732a7aa918a8f6a2d66ba408110106c94 on nickbabcock:custom-app-fatal into 4380f87a2ab11b14db07f1d1352f9de90a29fcf0 on dropwizard:master.\n. \n\nCoverage decreased (-0.03%) to 85.185% when pulling 58533927bc5d26646c5f4c9edd5393a88d6a3823 on dependency-updates into 4380f87a2ab11b14db07f1d1352f9de90a29fcf0 on master.\n. \n\nCoverage increased (+0.07%) to 85.255% when pulling 141efce60cbebd59cfba3206a3bc1af0baf54eb9 on isaki-x:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage increased (+0.06%) to 85.247% when pulling b14d75f96ce5c92edb17b15ae71fd7c6561154ad on isaki-x:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage increased (+0.06%) to 85.259% when pulling f9ad577914d14128ece0fe3c97013507bc83b963 on isaki-x:master into e55eb259f498ba6cab78f642c07b776d417f4171 on dropwizard:master.\n. \n\nCoverage remained the same at 85.185% when pulling ec67939efa74ee0cc8691228224721f5db123869 on baronlior:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.199% when pulling 2660b276ed424eb5da7a29b97506b8b197a97686 on baronlior:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.199% when pulling 6c5fc13a559daba60db99ec20652ab46df2ae162 on baronlior:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.199% when pulling 6c5fc13a559daba60db99ec20652ab46df2ae162 on baronlior:master into 4011aee894e8145004e8285f550bd5199a3c54ad on dropwizard:master.\n. \n\nCoverage remained the same at 85.199% when pulling 1c2c3e6d24df69f5255691d4f407aa3e7a6d5f58 on evnm:docs/fix-broken-hibernate-grouped-constraints-link into e55eb259f498ba6cab78f642c07b776d417f4171 on dropwizard:master.\n. \n\nCoverage remained the same at 85.199% when pulling f79af0a78f9a838723aec045c12efcc97ac66162 on tmszdmsk:patch-1 into 393827d7c5520e13eed5ef4816758abf2769d4b1 on dropwizard:master.\n. \n\nCoverage remained the same at 85.199% when pulling 30f8cd8822c818b89f862df477c323179579a2c2 on tmszdmsk:patch-1 into 393827d7c5520e13eed5ef4816758abf2769d4b1 on dropwizard:master.\n. \n\nCoverage decreased (-0.03%) to 85.227% when pulling 849bf426da4e3127844d8a0294bfd366017e4768 on genz10:configurable-prudent-mode into 30f5cfe1bc9e86c12a78037400fabc509524f940 on dropwizard:master.\n. \n\nCoverage increased (+0.2%) to 85.419% when pulling 1b6559c6f6ad3335da1380813d277a14393f24de on shawnsmith:logging-reset into 30f5cfe1bc9e86c12a78037400fabc509524f940 on dropwizard:master.\n. \n\nCoverage increased (+0.2%) to 85.421% when pulling 999c72deb8e284816502adde58bd36d280378147 on shawnsmith:logging-reset into 30f5cfe1bc9e86c12a78037400fabc509524f940 on dropwizard:master.\n. \n\nCoverage remained the same at 85.259% when pulling ea565f540da95d1a9efe5afc812e7b03440e67ff on baronlior:master into 30f5cfe1bc9e86c12a78037400fabc509524f940 on dropwizard:master.\n. \n\nCoverage remained the same at 85.421% when pulling a93c9fd17604460514d1319a94392b5d5ac4115f on jackson-2.9.1 into b89ea48773e8dfe470b7f81bffae935c5bcc5e25 on master.\n. \n\nCoverage decreased (-0.06%) to 85.363% when pulling c8ba2bcdb5ea0bce6d208ec76c7657d71bddf01b on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 85.363% when pulling 3619a0882feb8748627f09506acffa9d16841b0e on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 85.363% when pulling 3619a0882feb8748627f09506acffa9d16841b0e on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage decreased (-0.06%) to 85.363% when pulling 1a44dafef16530ff26baa46bb65cd2c0748a3f82 on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage decreased (-0.04%) to 85.376% when pulling a5ff6c1ba71162f859d9f696463317e7a36f1b91 on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 85.442% when pulling 869367a3a0e42d32229bc4f57f189bda05e93b84 on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage increased (+0.02%) to 85.442% when pulling 869367a3a0e42d32229bc4f57f189bda05e93b84 on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage increased (+0.07%) to 85.496% when pulling 53b6bedf60f5eab13531108cc3465fd6d90cab8d on manuel-hegner:feature/self_validating into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage remained the same at 85.421% when pulling c0d72a9a6f25f7fe1fcf751e72e261cba1b96588 on mveitas:gettingstarted_archetype_version into 6481e8713835a4d9fb06b201243b70290c020424 on dropwizard:master.\n. \n\nCoverage increased (+0.009%) to 85.43% when pulling b169de3f540633b0ec31bd94b24f85d7642add10 on jcalcote:task/proper-osi-iec-size-units into 945c79464efa7118329000c64d25b7c5edd2a49f on dropwizard:master.\n. \n\nCoverage remained the same at 85.421% when pulling cdba890ee4bda08f93f079d67ec753b009baa52f on isaki-x:size_equals into 945c79464efa7118329000c64d25b7c5edd2a49f on dropwizard:master.\n. \n\nCoverage remained the same at 85.421% when pulling bf2a81a7d034741a0eb6dac6ad640e6d447974aa on tjcutajar:upgrade-jetty-9.4.7v20170914 into 68812fa4af0896bdcfc89b01bd90433ecc1b142a on dropwizard:master.\n. \n\nCoverage remained the same at 85.421% when pulling 3100190ea4292d0721cb355d2e91f862c0d9d837 on bryanlb:patch-1 into d2cf545533a6db077e973e037a2957c0b32c6322 on dropwizard:master.\n. \n\nCoverage increased (+0.07%) to 85.162% when pulling c4ce79397f6ff8a7b2217f98090952079e7a3117 on reftel:feature/enum into 350ff2259e6c2287a5ac8f65c99ebea60168c6af on dropwizard:release/1.1.x.\n. \n\nCoverage decreased (-3.3%) to 82.114% when pulling 314a9a5162d267b568dc131371b1bd7b77244ed6 on AnDyXX:junit5 into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage decreased (-1.7%) to 83.739% when pulling 5b34ad16993c67a3c0923682652fd8d0d0bf3b99 on AnDyXX:junit5 into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage decreased (-2.3%) to 83.124% when pulling 0e318ca3a721cb51684f477b603bc091386d5230 on AnDyXX:junit5 into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage decreased (-1.2%) to 84.237% when pulling 06f4d97a0566bf011469d3d6f0c7b1591cddb11e on AnDyXX:junit5 into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage decreased (-1.2%) to 84.237% when pulling 3fbf4d5a4bf1dedc4f544708181572dd2ba7ce0a on AnDyXX:junit5 into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage decreased (-0.3%) to 86.908% when pulling 158e5d997c93443b571152aa4df3ade3c8bdffb1 on AnDyXX:junit5 into 4a82069a924c4168fa89f6ad1e106236b5ca1d34 on dropwizard:master.\n. \n\nCoverage increased (+0.006%) to 85.427% when pulling a9be4f4fb39e8da1470cc929cc5c66b9d79d165e on FredDeschenes:positive-durations into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on dropwizard:master.\n. \n\nCoverage increased (+0.0004%) to 85.498% when pulling c4850858b871f6fac326bf86ac4ebc5fd85ef9a7 on FredDeschenes:positive-durations into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage increased (+0.0004%) to 85.498% when pulling c3f38e4a14933f2cdd1257f655455b8e271a3313 on FredDeschenes:positive-durations into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage increased (+0.0004%) to 85.498% when pulling f08aae52a1d40530b6cf15d6a9f583fd3714f512 on FredDeschenes:positive-durations into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage increased (+0.0007%) to 87.174% when pulling 3b8413d5c313e58222ea45c6c5eb3d5a2ef1f452 on FredDeschenes:positive-durations into 8bee1f554bcadb1e94a290354c2256e7a429b288 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.434% when pulling ec5a6ea66a6555ee9eba5c1dd3ef008f782a19c2 on dependency-updates into e8f7f6c8c2008ed3ee2b7fb2d40b8f2bcf1874a0 on master.\n. \n\nCoverage remained the same at 85.475% when pulling 5becf835879e1dcb54834687914e71b9d2dc898d on herrphon:master into f97626168e8932cf8d525e31bf2d37fb5744bccf on dropwizard:master.\n. \n\nCoverage remained the same at 85.092% when pulling 32f92567d89f940593c72f9cfe4286af012dd00c on fix_so_linger into 350ff2259e6c2287a5ac8f65c99ebea60168c6af on release/1.1.x.\n. \n\nChanges Unknown when pulling e1b16a62683efdfbb877e2e30bc18ce7cbce6b61 on lightswitch05:feature/document-log-format into  on dropwizard:master.\n. \n\nChanges Unknown when pulling e1b16a62683efdfbb877e2e30bc18ce7cbce6b61 on lightswitch05:feature/document-log-format into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 9296d0b9febec5e75ef52afcb8bac8ff72d6ae07 on cvent:master into  on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.484% when pulling eec0a47e03058581e2d6f8799326f9ceda825788 on patrox:issue_2181_jetty_minRequestDataRate into d3a7b57dfd13d7bfa976c751c6483b75c38eee64 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.484% when pulling f7f98720ed4318ba5410eef5fb396d87c5c147db on patrox:issue_2181_jetty_minRequestDataRate into d3a7b57dfd13d7bfa976c751c6483b75c38eee64 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.484% when pulling f7f98720ed4318ba5410eef5fb396d87c5c147db on patrox:issue_2181_jetty_minRequestDataRate into d3a7b57dfd13d7bfa976c751c6483b75c38eee64 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.496% when pulling 8d91aa2c75e2147014fc9d8e205929bc3b657b1d on patrox:issue_2093_add_service_unavailable_retry_strategy into 9b35878ca1b8de221656685581dc839b36ffdcd5 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.496% when pulling c7d6ecbddd7fe73cb9cc92daf66df8bf8bde150f on patrox:issue_2093_add_service_unavailable_retry_strategy into 9b35878ca1b8de221656685581dc839b36ffdcd5 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.496% when pulling bcf3e93d95ca9f983cc560df78871afb3d097cb7 on patrox:issue_2093_add_service_unavailable_retry_strategy into d66e51fdf1cc5a7459d1c597ba00c468abee4141 on dropwizard:master.\n. \n\nCoverage remained the same at 85.484% when pulling 98ee58a514da894e0c4345c8212674431e69ea25 on patrox:issue_2179_instrumented_admin_thread_pool into 9b35878ca1b8de221656685581dc839b36ffdcd5 on dropwizard:master.\n. \n\nChanges Unknown when pulling 7f5283d58681c0ad9f8daea3b977a6b10cfa2de2 on patrox:issue_2188_close_package_names_scanner into  on dropwizard:master.\n. \n\nChanges Unknown when pulling 43939f48983e7264da66bbedc1a38eb62191d40d on support_parametrized_commands_with_parametrized_config into  on release/1.2.x.\n. \n\nCoverage remained the same at 85.498% when pulling 8ffe8c82e6138db5eaec61ac90de5382056accd4 on agoncharova:patch-1 into c586517f5794cc761a9f9d26a46a6bb059f29597 on dropwizard:master.\n. \n\nCoverage remained the same at 85.498% when pulling 7244f1b8231627ad1be91436f6e2a9cd972b1871 on clickthisnick:patch-1 into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage decreased (-0.03%) to 85.471% when pulling 005a6920a88f3b948e41ff447af79ec06b071269 on clickthisnick:patch-1 into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage remained the same at 85.498% when pulling 8fa32399ade7ea7f09f9da91b3319d188c6e681e on clickthisnick:patch-1 into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage remained the same at 85.498% when pulling 8fa32399ade7ea7f09f9da91b3319d188c6e681e on clickthisnick:patch-1 into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage increased (+0.01%) to 85.508% when pulling ed7ca2f4d07f2073b12fb5aa8d51fa92c855106a on pavelkokush:immediateflush-support2 into 2f8ba7e64768aad13d134fc88b92c7e462177100 on dropwizard:master.\n. \n\nCoverage increased (+0.07%) to 85.582% when pulling 49c9781d79a147366377658fa4f82920bd2a26dd on java_9_build into 27aafafc3c4369e4ef6f44cdfc948845348d9716 on master.\n. \n\nCoverage increased (+1.4%) to 86.932% when pulling 4bc4ceb2dafdf2173bc89e1c1341a6854a77af9b on java_9_build into 27aafafc3c4369e4ef6f44cdfc948845348d9716 on master.\n. \n\nCoverage increased (+0.4%) to 85.923% when pulling fe646c32fced9c50221072154680bef78cb8af7d on task-servlet-tests into 27aafafc3c4369e4ef6f44cdfc948845348d9716 on master.\n. \n\nCoverage increased (+0.9%) to 86.37% when pulling ed363dd8a6ce308ce25d9006f01513a364fe0b30 on filter-tests into 27aafafc3c4369e4ef6f44cdfc948845348d9716 on master.\n. \n\nChanges Unknown when pulling 4b5e92838bda03a3dfa0eaec275a57acc991667c on enums_test into  on master.\n. \n\nCoverage increased (+0.01%) to 86.882% when pulling 8fe4ac88204619d1659c7591e6fb799a85c430a0 on improve_self_validation into 98fa28a60b235d9c600fac578227086fc86b42df on master.\n. \n\nCoverage increased (+0.03%) to 87.13% when pulling d2c7d5158ec4f6d1651aa7718ef954649144d6e3 on clear_up_self_validator into 06c50390d7ee0dc6f7ef5bf0a02dee0f9a130a13 on master.\n. \n\nCoverage remained the same at 85.162% when pulling 6d926ac24c548613e264b20e988deec769456f0d on ooyala:release/1.1.x into eaa771e87cedebb4798ef2022205bde329b43c0e on dropwizard:release/1.1.x.\n. \n\nCoverage remained the same at 87.13% when pulling 81c14ac4631d5ab4e621b731d7cbe8b8fd056c76 on jplock:feature/nullaway into babd4660e6ddc18a24bbcf0294161e24a1e1aecb on dropwizard:master.\n. \n\nCoverage increased (+0.03%) to 87.159% when pulling 9e4dedd75df186c0aa6f49778bcb1095250b8e35 on add_nullable_annotations into 3841415d0f0caa00638f6982461a120122ac5bbd on master.\n. \n\nCoverage increased (+0.04%) to 87.172% when pulling 359107d292a9ec25aaf819dca90ac646eefcbbba on add_nullable_annotations into e5ac260ac8131525928e18e3d7ad36ef87a31d73 on master.\n. \n\nCoverage increased (+0.04%) to 87.172% when pulling 7fb9db9b9cccb209ec5567c1726d7b8e482e1fa7 on add_nullable_annotations into e5ac260ac8131525928e18e3d7ad36ef87a31d73 on master.\n. \n\nCoverage remained the same at 87.13% when pulling ba13876894bf99583ecae64d3b2310c5b467c4a1 on issue-2206 into 3841415d0f0caa00638f6982461a120122ac5bbd on master.\n. \n\nCoverage increased (+0.002%) to 87.174% when pulling 1f2228c49974b365c20a11327e5ddad18e56f673 on migrate-to-commons-text into 502fd326041787f25190338f56365409a01567b0 on master.\n. \n\nCoverage remained the same at 87.174% when pulling 302b40aa33e956cecff7e14ef57d9cbe84da71cc on FredDeschenes:issue-2130 into d674b0c00f6f56226ad7ec47e41823f6d6c7320f on dropwizard:master.\n. \n\nCoverage remained the same at 87.174% when pulling 635ab2d1e635b6a9416ff930c199bac7482a222a on FredDeschenes:issue-2130 into d674b0c00f6f56226ad7ec47e41823f6d6c7320f on dropwizard:master.\n. \n\nCoverage remained the same at 87.174% when pulling 635ab2d1e635b6a9416ff930c199bac7482a222a on FredDeschenes:issue-2130 into d674b0c00f6f56226ad7ec47e41823f6d6c7320f on dropwizard:master.\n. \n\nCoverage remained the same at 87.174% when pulling 2635ce6a95107911ac20e8d84d1e5228d4e6be51 on maffe:patch-1 into d674b0c00f6f56226ad7ec47e41823f6d6c7320f on dropwizard:master.\n. ",
    "housejester": "We had this same issue, so I went and tracked it down. \nJetty 9.0.7 and DW0.7 are much more patient with waiting for threads to finish naturally before stopping. There is a config that controls this though, it is http.shutdownGracePeriod in DW0.6.2 (defaults to 2s), and server.shutdownGracePeriod in 0.7.0 (defaults to 30s). \nIn DW 0.6.2 (Jetty 8.1.10), Jetty's graceful shutdown is implemented as just a fixed sleep in the Server. It tells everyone to stop taking requests, then just sleeps. In DW 0.7.0 (Jetty 9.0.7), it is more sophisticated, but the key point is that the gracePeriod is also set as the QueuedThreadPools' maxStopTime (not so in the previous version). When the QueuedThreadPool is stopped, it waits for half that time to let the threads complete normally, then it interrupts them and waits the remaining time, and if they're still running, gives up with a WARN message. In the new version that total wait will be up to 30s, and in the previous version, the QueuedThreadPools would only wait for 100ms, and the Server would just be sleeping for 2s during that time.\nSo, for us, we had a long-lived task running in an app server thread. It handled interrupts gracefully, so we were completing shutdown in 15s. We were registering as an ApplicationLifeCycleListener, and onStart, we dispatched our task to the server's thread pool (as an aside I'm not sure why we don't just use a different managed thread pool instead of taking up one of the Server's). I changed the loop logic in our task to additionally check for server.isRunning() and now we shutdown immediately on a Ctrl-C.\nIn your case, the logs do show it taking just over 30s to shutdown, and you get a warning about several admin threads. If these are long lived, background threads, you might see if you could get access to the Server object to test that it isn't shutting down if you are looping. Barring that, you could set your shutdownGracePeriod down to 2s as it was before and see if you can handle interrupts gracefully which would knock it down to half. Be aware though, that this value is shared and covers both the Admin and the normal Application thread pool. If these are indeed long-lived tasks, you could also set up a different managed pool where you can control the shutdown time more independently.\n. That is what I meant by the last recommendation :)  fwiw, the default maxThreads is 1024 and we've not come close to that, even under high-ish load (4000 req/s on a node we get to about 140 thread pool size and 30 'jobs' in the queue), but yeah, still not a good idea to use the server threads (delays for pool growth, etc). We definitely need to switch to a separate, managed pool, but still need to register as an ApplicationLifeCycleListener b/c we grab various things from the server (it is a Quality of Service type object that tracks capacity and uses that to determine flood control via a filter). I think that may be why I added it to the server's pool: because it was right there.\nIn any case, I don't think this slower-shutdown is an issue with DW 0.7.0, just a difference in defaults (2s to 30s). That and my horrible misuse of the server thread pool (which I'm hoping I'm the only one :) ).  Although it might be something to be aware of if you're used to doing graceful shutdowns and you might have requests that are timing-out calling other services it is going to feel like forever to restart or deploy some hot-fix. This was true before, but going from 2s to 30s makes it much more apparent.\nMaybe adding shutdownGracePeriod to the Servers->All configuration reference would be helpful to point people to if they are having slow shutdown issues.\n. ",
    "Mahoney": "Yes, sorry, forgot I needed to do that.\n. ",
    "halorgium": "@mveitas sure. \nHere is a simple example of adding a filter to an Appender which does not work and then adding to the AsyncAppender which does. \n``` java\npackage logging;\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.AppenderBase;\nimport ch.qos.logback.core.Layout;\nimport ch.qos.logback.core.filter.Filter;\nimport ch.qos.logback.core.spi.FilterReply;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\nimport io.dropwizard.logging.AbstractAppenderFactory;\nimport java.util.Random;\n@JsonTypeName(\"filtered\")\npublic class FilteredAppenderFactory extends AbstractAppenderFactory {\n  private Random random = new Random();\n@Override\n  public Appender build(LoggerContext context, String applicationName, Layout layout) {\nfinal MyAppender appender = new MyAppender();\nappender.setName(\"filtered-appender\");\nappender.setContext(context);\n\nFilter<ILoggingEvent> filter = new Filter<ILoggingEvent>() {\n  @Override\n  public FilterReply decide(ILoggingEvent event) {\n    return random.nextInt(20) > 10 ? FilterReply.ACCEPT : FilterReply.NEUTRAL;\n  }\n};\nfilter.start();\n\n// Adding a filter to original Appender\nappender.addFilter(filter);\nappender.start();\n\n// AsyncAppender does not have any Filters\nAppender<ILoggingEvent> async = wrapAsync(appender);\n\n// AsyncAppender now has a filter\nasync.addFilter(filter);\n\nreturn async;\n\n}\nclass MyAppender extends AppenderBase {\n    @Override\n    protected void append(ILoggingEvent eventObject) {\n      System.err.print(\"got event\");\n    }\n  }\n}\n``\n. @mveitas we're usingio.dropwizard:dropwizard-core:jar:0.7.0-SNAPSHOT`. \nIf you ran the example above, you should note that I added the filter to both the original (delegate) and async appenders. \n. @mveitas I've written a failing test against master which hopefully shows the situation. \n. @nicktelford does #542 resolve my issue? at most, it is no longer applicable! :metal: \n. @nicktelford yer, seems good!\n. ",
    "davidillsley": "To be clear, the javadoc issue is described by @jodastephen in Turning off doclint in JDK 8 Javadoc. I agree with him that it was an odd decision by Oracle, and I'd be surprised if it's something anyone wants to spend the time 'solving'.\n. Simplified as suggested by @joschi \n. ",
    "Toilal": "I close this issue, as a warning message is now displayed. Thanks\n. Does this mean we need to use DropwizardAppRule instead of ResourceTestRule ? (dropwizard > 0.8)\n. I'll rebase this tomorrow. Happy to learn that dropwizard is now using jersey 2.\n. It's done, I think you can merge. setRequest method has been added in AuthFactory to apply request object injection from ChainedAuthFactory to delegated factories.\n. It seems there's an issue with @Auth injection ... When I remove the parameter, it seems to work.\n. Sorry for opening this one, i should have read the auth documentation before.\njava\nenvironment.jersey().register(authFactory);\nReplaced by\njava\nenvironment.jersey().register(AuthFactory.binder(authFactory));\nAnd it works.\n. @joschi \n* is removed from rootPath parameter for DropWizard endpoints.\nBut DropwizardResourceConfig#getUrlPattern() is called by AbstractServerFactory#createAppServlet(). This Url pattern is the unmodified one, loaded by rootPath parameter.\nSo the default path in docs /, and any other path without any ending /* will pass validation, but servlet won't be registered properly in Jersey.\nI'll update my pull request to fix this issue instead of modifying the docs to make it work.\n. Is it plan to merge this one ?\n. I just gave a try on my webapp with DW 0.8, and issue is still there.\nMy configuration is \nserver:\n  type: simple\n  rootPath: /api/*\n  applicationContextPath: /\n  adminContextPath: /admin\n  connector:\n    type: http\n    port: 35180\nWhen setting rootPath: /api/, resources are not loaded. (Adding * is the current workaround).\n. @flavor8 I've make a pull request for this issue. (implemented for OAuth too)\n. I found the solution for this issue.\nDefault timeout value of apache HttpClient is set by dropwizard-client to 500ms for default value. Problem is that many things in Jersey are lazy initialized on first call.\nMoxy seems to be quite longer to initialize than Jackson, and the first call is about 1000ms to respond, causing the \"Read timed out\" exception.\nBy configuring a timeout to 4000ms, it just works.\n``` java\nHttpClientConfiguration httpClientConfiguration = new HttpClientConfiguration();\nhttpClientConfiguration.setTimeout(Duration.milliseconds(4000));\nHttpClientBuilder clientBuilder = new HttpClientBuilder(app.getEnvironment());\nclientBuilder.using(httpClientConfiguration);\nJerseyClientBuilder builder = new JerseyClientBuilder(app.getEnvironment());\nbuilder.setApacheHttpClientBuilder(clientBuilder);\nclient = builder.build(\"test client\");\n```\nI think this default timeout value defined in dropwizard-client is really low ... Would you consider increasing it ?\n. IntelliJ IDEA can import eclipse formatter settings file too.\n. WWW_AUTHENTICATE is build using the first failing Auth Provider in the chain. For this test, the attended realm is the one from BasicAuthProvider.\n. It doesn't work when setting / as the rootPath, nor anything else not ending with *. Dropwizard is starting, logs seems OK, but jersey allways throws 404 error. \nI thought it was an error in docs, but from what you are telling me, it's a bug and what's in the documentation is valid and should work.\n. Thanks @skamille to remind me this not, i'll push the change now.\n. :+1: \nI've rebased on current master, and fixed this point.\n. ",
    "jangalinski": "So ... this is solved?\n. What about: https://github.com/dropwizard/dropwizard/graphs/contributors ?\n. nice!\n. Besides the fact that I'd still prefer non-final methods for more freedom in usage, could you give me an example for the EnvironmentCommand, especially when it comes to spring/guice/weld bootstrapping?\n. Ok, I see, thanks.\n. I started working on a fix using jerseys Resource.fromClass which takes care of the \"isResource\" check.\n. ups ... duplicate\n. Ok, I get your point ... but then I'd prefer it would be removed completely ...\n. I wanted to keep the change testable, so i went for an extra function.  But firstnonnull is a good idea, no need to test guava here.   Will refactor and commut again.\n. Question: why not just use getClass().getName()? No null-checks, no functions, just the class name, and done.\nI mean, its only logging and when inner classes are represented with i.d.Bar$Foo instead i.d.Bar.Foo, who cares?\n. ",
    "bwmeier": "I'm not sure about the explicit change that broke it, but the code in 0.6.2 that supported the windows certificate store was here: https://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java#L228.  I'd have to poke around in the current code base to see if I can find out what happened.\n. @mveitas that does look like the same logic.  My team will try to pull together a test to see if it works.\n. We have been able to use HTTPS after some tweaks to the patch.\n- We added the code similar to what we had above\n- We also had to make the key store password optional and move the setting of the value around (The windows certificate store uses the identity token of the windows user for authentication)\nWhat we are not sure about is if taking the @notNull annotation off of the key store password (and key store path as well) will break anything elsewhere.\nI've submitted a pull request #517  for the changes we made, with the exception of removing the attributes from the configuration parameters\n. A note from one of the other developers on our team:\n\nRunning with the proposed patched version of dropwizard-jetty (adding back support for the Windows keystore AND making the keyStorePassword configuration parameter optional) was able to enable HTTPS with all API tests passing. Note the jetty SslContextFactory.getKeyManagers throws NullPointerException if the keyStorePassword is set to empty string (must be set to null).\n. @skamille - So the key functionality is restored via #517. I am able to use the following configuration to retrieve the certificate with the specified alias from the Windows certificate store and use it in the HTTPS configuration:\n\nyml\nserver:\n  applicationConnectors:\n    - type: https\n      keyStoreType: Windows-MY\n      keyStorePassword:\n      keyStorePath:\n      certAlias: \"testing certificate\"\n      validateCerts: false\nThere are two oddities in this configuration setup:\n1. keyStorePassword and keyStorePath both have to be present in the configuration because of the @NotNull annotation on the properties (lines 201 and 204), even though they are not needed for the Windows store.  If we remove those annotations, then they do not have to be specified in the configuration in the Windows case, but we were not sure why they were added.\n2. validateCerts had to be turned off in order to successfully start up the server, even though the certificate I am using is fully valid.  There may be some other items that I have to change to correctly validate the certificate.\n. I noticed that the trust key store needs the same type of logic as the original key store.  I'm testing a similar patch there.\n. I have updated the pull request #517 with code to allow the trust store to use the Windows certificate store as well.\n. @nicktelford That sounds reasonable to me.  Do you want me to add that to this pull request or should we do a separate PR?\n. Updated #517 to change the validation of keyStorePath and keyStorePassword in the manner outlined by @nicktelford.  Commit 6376f56.\n. @nicktelford Created a couple of unit tests for the fix.  The only way to fully test access to the KeyStore is to run the tests on Windows, but running on Unix should test to verify that the keystore is not supported.\n. @nicktelford Thanks to eclipse tooling, the #511 PR got contaminated with LF issues.  I've recreated as #517 to clean that up.\n. @skamille, you are correct.  Thanks for the merge!\n. Hi @glennmcallister, We have confirmed that we are able to run with rc3 with the expected configuration.  Thanks.\n. Revert line feed issues and recreate as #517 \n. This will resolve #505 when merged\n. ",
    "tongguop": "I am using 0.6.2. I do have non-arg constructors. So this is fixed in 0.7.0?  I saw in maven it is still rc2, when 0.7.0 would be offcially released?\n. We have a requirement to log every request including headers and payload. A lot of time user payloads are tens of KB, some times hundreds of KB(some extreme cases could reach MB level), async loggers are really needed in our situation so we don't need to wait on disk I/O.\n. ",
    "nickbabcock": "Alright, let me know if it is good now. I was unsure where to mention sslyze, as it may have been out of place in the core HTTPS documentation, so I just appended it to the excludedCipherSuites documentation.\n. What I'm suggesting is slightly more than a documentation change. Some of the changes I was tendering were:\n- Renaming the file config option in CSV Reporter to a less misleading name, something along the lines of directory. This would be a breaking change for all configurations that previously used CSV Reporter. I'm obviously hesitant about this, but the benefits may be worth it. In the tests there are occurrences of this deviation. Here and here. The use of 'metrics.csv' shows incorrect usage, it should now be something along the lines of 'metrics' signifying a directory.\n- Attempt to create the CSV directory if it doesn't exist\nIf a subset of these changes sound good, I can implement them along with any doc changes.\n. No longer silently swallow exceptions and creates parent directories as necessary. @joschi, mkdirs doesn't throw an IOException, but if it did, it would make sense to wrap it in a RuntimeException\nLet me know if there are any other concerns or if you want me to rebase it into a single commit.\n. Looks like a small misspelling -- should be 'argument' and not 'arguement'\n. I have a couple thoughts on this. When using the validator and you call validateParameters with the parameter representing the request entity being null:\n- If no annotations on the parameter, no validations are performed\n- If the parameter has @Valid, no validations are performed\n- If the parameter has @NotNull, a constraint violation will be created because the parameter is null. If the parameter was not null then cascading validations wouldn't have applied\n- If the parameter has @Valid and @NotNull, a constraint violation will be created\nSo @carlo-rtr is right, and instead and there should only be a check for @NotNull (no need to check for @Valid or @Validated)\nThis is if we keep the same semantics of Hibernate Validator.\n. Closed by #1220/#1340\n. Hey @amirhmd, welcome to open source and Dropwizard :tada:.\n\nWe have the dropwizard-user forum where you can help answer questions and may be the easiest route to helping out.\nIf you're interested about getting the word out: write or share blog posts or projects using Dropwizard.\nIf you fancy yourself a wordsmith, documentation can always be improved!\nIf there's an open issue that's needs work (either via code or in design), input is always welcomed\n\nWhen in doubt ask on the forums, open an issue, or raise a pull request\nIf you want to work on this particular issue (and hence why you commented on this issue), it may be best to draw up a tentative pull request showing how this might work (and what/if backwards compatibility is at risk).. @scottaj, sorry for the late response, but yes a PR that allows access to the request body would be welcomed.\n. Closed by #1606\n. Should be a non-issue as Dropwizard no longer contains a Gzip Filter (it's a Gzip Handler as of 1.0.0), which shouldn't get in your way. See 29e927a. Let us know if there continues to be problems.\n. Sorry that we weren't able to answer your question in time, but Dropwizard has moved to an OAuthCredentialAuthFilter. The realm is only used in a challenge. From the spec:\n\nA \"realm\" attribute MAY be included\n\nThe unauthorized handler can be customized as needed.. Looks like atmosphere uses java8, so yes the recommendation to use dropwizard-java8 could solve or issues or trying the latest 1.0 release candidate (which uses java8 as a baseline).\nClosing this because @phxql's blog post also is another solution.\n. I'm not sure what has changed, but I'm using Drowpizard 1.0.2, Postgres, and JDBI for a project and the following binds work fine without needing to cast:\njava\n@Bind(\"a\") OptionalLong a,\n@Bind(\"b\") Optional<LocalDateTime> b,\n@Bind(\"c\") String c,\n@Bind(\"d\") Optional<byte[]> d\nI'll close this issue in a few weeks time if no new info is presented.\n. I'm optimistic that this may be fixed, as I can confirm that optionals that are empty are being persisted as null\n. I'm closing this because I have several apps in production using Dropwizard 1.0 + jdbi + postgres (9.5.5 server with 9.4-1212 driver) + empty java.util optionals, and I see empty optionals persisted as null.\nIf the erroneous behavior still persists for the latest versions, please post a repo for me to cross examine.. I think #1765, while not addressing these concerns exactly, provide good enough workaround by not having tests bind to 8080 or 8081. Let me know if otherwise.\n. Closing this because the code will warn users if something is set up incorrectly and #1514 is for discussing possibilities to informing users of what config values are used at runtime.\nEDIT: If the code doesn't warn the users then that's a bug :wink:\n. Ok thank you for bringing that to my attention, I'm unsure if this issue completely resolved yet. The default timeouts, while being able to be changed (:+1:), are still overridden. I'm fine with it being overridden, as long it is documented. The documentation should definitely state that to change the jersey programmatically to use using(JerseyClientConfiguration configuration) and not withProperty(String propertyName, Object propertyValue). I know the API says this, but considering it's a \"gotcha\", it should probably be stated in the main Client documentation\nEDIT: Let me know if you think this is a non-issue. If so, close at your leisure\n. Yup, certainly, I can.\n. Great, thank you for the tweaks!\n. No problem, though I may have just beat you to the patch :smile: \n. Absolutely, no need to rush this.\n. For 7.1, 7.0, 6.2, 6.1, yes it has always been the case. I didn't test any further.\n. Ack, I believe I worded my previous sentence wrong. What I meant to say was that it has always been the case that the empty string would evaluate to Optional.of(\"\") and not Optional.absent(), so nothing was broken between versions. \n. On further thought, @wirde's point is especially valid for the @HeaderParam where the header is present but empty. There is a stackoverflow answer with more information, but I guess it is valid for a header to be present, but no value.\nSide note, some of the tests I wrote actually tested the wrong endpoint, so I fixed them up\nEDIT: I looked into the cookie's specification and it is allowed for a cookie to have no value. I guess this whole debate is centered around existence vs data\nBut one thing is certain, if we stick with the current format, it is worth having tests (and maybe documentation) around it so we don't regress.\n. Do you mind if I submit a pull request adding to the documentation, noting the behavior, and adding the tests to support it, or do you think it's not needed?\n. I'll append a commit with the new functionality, tests, and doc changes, so you guys can mix and match what commits you want in case everything in the pull request is not needed/wanted.\n. I added the functionality of NonEmptyString in class called NonEmptyStringParam (to keep the convention of sibling classes). It is somewhat of a misnomer, I suppose it could be called NonEmptyOptionalStringParam, but that starts being a mouthful\nFeel free to vet the implementation/name.\nThis pull request is starting to become a potpourri of commits, so let me know if I can do anything on my part to help.\n. Just note, this isn't ready to merge until I comment here with the swapped out implementation, which'll be sometime tomorrow :smile:\n. Okay, code is ready for review :sunglasses: \n/cc @joschi \n. I looked into the performance issues and the lowest hanging fruit are to use Jersey's StreamingOutput and Jackson's Streaming API in combination, which yields 2-3x improvement. The next level of improvement is eschewing Jersey and using Http Servlets in Jetty, which yields a 10x improvement over vanilla performance. Unfortunately, I don't think any of these improvements are considered realistic, and probably shouldn't be merged into the benchmarks.\nMay be worth it to revisit once 1.0 is out\n. Most definitely, I'll chime back in on Monday :smile:\n. Ok tests are in, a review would be great. I also added more in-depth tests for #993, which shows that messages returned because of constraint violations leave a lot wanting (which I can send a pull request in for later).\n. Thanks for the review, all comments were acted upon. Let me know if you find anything more.\n. Awesome, thanks for the alternative implementation while I was away, I'll start basing work on it and reply back once I'm satisfied.\n. - Largely adapted @arteam's implementation\n- Added benchmarks so someone can come along and optimize if needed\nIf everything looks good, I can start writing up some prose documentation.\n. Suggestions taken, thanks for the review.\n. Maybe it is inappropriate for this pull request but I couldn't resist adding in a simple caching mechanism that increases performance by up to 250x when there is a hit. \n```\nBenchmark                                    Mode  Cnt     Score     Error  Units\nConstraintViolationBenchmark.objViolation    avgt    5  3416.563 \u00b1 214.989  ns/op\nConstraintViolationBenchmark.paramViolation  avgt    5  5605.761 \u00b1  90.774  ns/op\nBenchmark                                    Mode  Cnt   Score   Error  Units\nConstraintViolationBenchmark.objViolation    avgt    5  22.430 \u00b1 0.359  ns/op\nConstraintViolationBenchmark.paramViolation  avgt    5  22.643 \u00b1 1.384  ns/op\n```\n. Since this is a dependency bump that is backwards compatible, I have no reservations for this being merged for 0.9\n@arteam, did you want to update the release notes in this pull request as well?\n. Ok, merging this. We can figure exclusions as needed in the future.\n. Thanks for the corrections, I melded them into the same commit.\nThe suggestions from @ipropper are good and I'll add an additional commit with those suggestions to make reviewing a bit easier.\nAlso the fate of #1105 will affect the documentation slightly.\n. Alright, just appended another commit that has a couple noticeable changes:\n- Removes section on \"Programming by Contract\" because I was not able to get that functionality done. I have a pull request brewing that will solve that and a few other aspects, but it is somewhat controversial, so I'm going to sit on that for a few days (so I'm fine it falls to 0.9.1 or 1.0)\n- Adds the ability for ValidationErrorMessage to be derserializable so that users can use that in their tests.\n- Add a testing section. @ipropper, is this what you were looking for?\nAlso my editor got aggressive and decided to trim some extra whitespace at end of lines. Hopefully that won't be an issue\n. Ok :+1: \n. I think I like Carlo's idea of the logback.xml/groovy configuration. The YAML configuration should satisfy 95% of all use cases. In 5% of the use cases there should be an alternative mechansim to achieving the desired result (logback.xml). Dropwizard can't and shouldn't support all logging fantasies in the YAML. For instance, logback supports automatically scanning the file for changes and applying them. In my opinion, if someone wanted this in Dropwizard, they should be expected to into the logback.xml to configure it.\nSince creating an uber jar messes with the class path, one can use logback.xml by invoking:\njava -Dlogback.configurationFile=logback.xml -jar <jarfile> server config.yaml\nHowever, one can't currently use this approach as all the configured appenders in logback.xml are killed on bootup by the following code:\njava\nfinal Logger root = LoggingUtil.getLoggerContext().getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);\nroot.detachAndStopAllAppenders();\nI can't say why this is done (it's been this way for more than a couple of years). But I feel like maybe the optimal solution would be for logback.xml and the yaml to complement each other.\nThe next question, if this pull request should be in the 95% use case, from a user standpoint, I like Artem's solution of ImmutableMap<String, JsonNode> for the different type of keys. From a user point of view, everything is localized in the configuration.\n. Looks like InMemoryConnector doesn't support endpoints that can be suspended and are async, so a new testing container is needed. You may need to try out the Grizzly test web server. I was able to swap it out and have my test cases pass.\nFirst you'll need to look up how to import the Grizzly test web server in your pom (see the Dropwizard documentation on testing resources\nHere's the code for swapping:\njava\n@Rule\npublic final ResourceTestRule resources = ResourceTestRule.builder()\n        .addResource(new HelloWorldResource())\n        .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n        .build();\nand instead of calling resources.client().target(/*...*/), you want resources.getJerseyTest().target(/*...*/)\nLet me know if this works.\n. Updated the name to Validators and fixed some of the style.\n\nIs there any way to move this class to the module dropwizard-validation without adding circular dependencies? It would be great if we could use it across the project instead of Validation.buildDefaultValidatorFactory().getValidator(). Maybe we could load Jersey unwrappers undirectly(reflection?) or use separate configurations... I don't have a good solution in mind yet.\n\nI wouldn't have the faintest clue how to achieve this. I'll take all suggestions :smile: \n. Looks like Travis failed for an unrelated reason, a SocketTimeoutException: Read timed out in the HTTP Client :confused:\n. Shot in the dark, do you also have to set the connectionTimeout?\nyaml\njerseyClient:\n  timeout: 3s\n  connectionTimeout: 3s\n. What are the disadvantages of returning a WebDAV protocol/extension? The convention has been to return 422 when the request body may contain syntactically valid data, but semantically invalid data.\nOn the flip-side, as a comparison, Jersey only returns a 400 or 500 if an error happens. If we went with this approach, there is the potential to break clients who became accustomed to the 422 status code. \n. Good points. I would also like to raise a couple of more things I've found:\n- A fairly lucid stackoverflow answer pointing out our exact discussion, pointing out that the spec defines a 400 to mean syntactically invalid data whereas.\n- Some of the largest Hypermedia APIs (Github, Twitter, Facebook (iirc, can't check now)) use status code 422 for invalid entities.\nHowever, I found some evidence supporting the move to 400:\n- HTTPbis defines 400 Bad Request as :\n\nindicates that the server cannot or will not process the request due to something which is perceived to be a client error\n- Thus, in this instance, an invalid entity would be a 400 response \n\nI think I just talked myself into a circle and this has been inconclusive, but informative :smile:\n. So I can reproduce this in an app I have, but I can't seem to reduce to a minimal test case that we can include in our integration test module (dropwizard-e2e). I've attempted it here, but I can't get the tests to fail \ud83d\ude2d \nIf anyone has a minimal app that uses ConfiguredCommand and sees this problem, I'd appreciate it if I could see it!. It is somewhat related. It adds the fix and a test case for what the expected response should be if a null request entity is not allowed (whether that means annotated with @NotNull or if just @Valid/Validated is what #633 is addressing). If #633 is merged, the test will still pass.\nBefore: { \"errors\": [] }\nAfter: { \"errors\": [\"The request entity was empty\"] }\n. No, it doesn't. Do you have a use case where it matters? \n. ~~If you override/customize them in your application, then shouldn't need to set registerDefaultExceptionMappers to false.~~\nCORRECTION: In test cases you should simply override the defaults by registering your own. This is not the case in the normal application (hmm, sounds like an improvement!)\nSaying that, I realized that this pull request registers the default exception mappers in the wrong place for ResourceTestRule, so that you can't override them with your own. So I'll be back with the fix and test cases to ensure the functionality.\n. Oh wow good catch. It took me a half dozen runs to see the behavior is non-deterministic.\nI was hoping not to use @Priority on exception mappers. There also seems to be a couple tickets open still about exception mappers and @Priority not working together.\n. How do you feel about annotating all the exception mappers that Dropwizard defines as @Priority(Integer.MAX_VALUE)? Smoke testing this implementation made all the tests (including the one in this PR) pass a half dozen times in a row, so hopefully it is deterministic. This may also allow for people to override the default exception mappers in an application without having to disable registering all of them.\n. I tested it out and annotating Dropwizard's exception mappers with @Priority(Integer.MAX_VALUE) allows for the user to override any of them without setting registerDefaultExceptionMappers to false. I'm closing this pull request and will open a new one (hopefully today/tomorrow) that has the implementation and tests.\n. I believe the only breaking change in 0.9 is #952, which updates how authorization is accomplished (fixes issue #768). I believe the latest documentation has more details.\n. Yes I can append a couple commits, one to deprecate, and another to update the documentation.\n/cc @scho, as you expressed concern earlier in #1125 and I was curious if you had any concerns about deprecating registerDefaultExceptionMappers\n. Upgrading to Jersey 2.19 #1143 breaks this pull request (it works fine on 2.18). The investigation is on! :sunglasses: \n. Ok, back from the investigation with some not so good news. I don't normally like to throw in the towel, but this is a doozy.\nThis implementation doesn't work as Priority annotations do not work on exception mappers (JERSEY-2722). \nThe suggested workaround, using ExtendedExceptionMapper, is not a 100% solution. I can expand on this if needed, but I was not able to find an alternative either.\nPlan of action:\n- Close this pull request and remove 0.9 milestone\n- Revert #1125 so that tests don't break for people when moving to 0.9\n- Roll up #1125 into this pull request so that everything is in one pull request\n- Wait for Jersey issue to be resolved\n- Re-open pull request\n- Celebrate :tada:\nWhy did this code worked on 2.18 appears to be a total fluke (though it may, in part, be due to JERSEY-2891)! My apologies for any wasted time, hopefully it was informative at least :smile:\n. I did some digging and according to the documentation, the property should be on by default. And Dropwizard doesn't change that configuration. I'm curious how this error comes about.\n. Oof I see I lost track of this issue. I like the admin task idea though I have some food for thought:\n\nMaybe Dropwizard users have to add it as a task in their code (ie. it's not on by default)\nAdmin binds to localhost by default (I'm thinking this is a pretty major breaking change)\n\nSince all my configs contain passwords I don't want a new Dropwizard user to shoot themselves in the foot by unknowingly exposing secrets / passwords on the admin port. Right now, while bad, it's not catastrophic if the default tasks get exposed to the outside world.. I tried to reproduce the issue locally and couldn't get the behavior seen. Does anyone have a gist or repo demonstrating the bug? \n. I believe you are correct (especially because the default is false):\n- Jersey issue on Apache HTTP client connection manager sharing \n- Jersey commit that adds the CONNECTION_MANAGER_SHARED \n. What are the benefits? I initially thought that it would cut down build times but according to the builds, it doesn't look to be the case (builds are still taking ~50-55 minutes total).\n. I'm going to optimistically assume this issue is resolved, if not, a test project to debug would be helpful.\n. Can you use the dropwizard-java8?\n. Closed by #1660\n. Thanks!\n. Hopefully you're able to do what you want with Jetty 9.3 in Dropwizard. Let us know if not.\n. Ok I will re-open. Ideally one might get away with doing:\njava\n((ServerConnector) connector).addFirstConnectionFactory(new ProxyConnectionFactory())\nBut in the Application::run the connectors are not yet built so there doesn't appear to be a way to interject. So it looks like there may need to be some level of dropwizard configuration to allow the proxy protocol. . So based on @nathancomstock's comment, I've refocused the pull request such that instead of throwing up an error page that says that the file isn't found, return a generic page to the client saying that something went wrong. Then the developer can see the error under debug mode. \nThis pull request also explains the behavior in the views documentation.\n. Oi, good catch. Fixed :blush:\n. I do have a question, does anyone know under what circumstances one would want shareConnectionManagerEnabled to be false in Dropwizard?\n. Ok, looks good to me. A couple notes.\nStarting in 0.9.0, it does not matter if the rootPath ends with / or * (due to #785). For those that will be on earlier than 0.9.0 (which should be most at this point), the default is /* (it was just documented wrong in #665\nIn 0.9.0, even though the code has the default rootPath of /, it does get converted to /* before being passed to jersey.\nGood catch!\n. Interesting, the travis build and maven build consistently fail due to code that wasn't changed. And I can't seem to make the same test fail in Intellij.\n. That is the fix. I am worried that upgrading this dependency means that some applications that did work in 0.9.0-rc3 may now break at runtime (only if they have insufficient tests). \n. Ok, fix applied. Note that in the Hibernate release, there is also JavaFx handler baked into Hibernate validator (hence why the test had to change because now there are more than three handlers). But it shouldn't be too egregious to keep the extra handler in.\n. Rebased against master and did a minor bump to 5.2.1.Final.\n. Great, I'll update the upgrade guide.\n. You may have to give a bit more information because the following works fine\njava\n@Path(\"/\")\n@Produces(MediaType.TEXT_PLAIN)\npublic class Resource {\n    @GET\n    @Path(\"longtime\")\n    public void longtime(@Suspended final AsyncResponse resp) {\n        new Thread(() -> {\n            try {\n                Thread.sleep(60000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            resp.resume(\"You made it!\");\n        }).run();\n    }\n}\nHave you tried posting in the dropwizard-user forum? Also what version of Dropwizard are you on? I don't recognize connectorType: blocking, but if I had to hazard a guess you should be using nonblocking.\n. I think this is a great idea, and should be the default behavior. I am not too worried about people relying on this previous behavior, because there aren't many situations when one would want Jetty's error page. I also feel that most people like @jplock and myself, end up defining our own WebApplicationException to get similar behavior :smile:\nSo, this patch looks good to me. I'm sure it will save people from needing to define their own WebApplicationException down the road.\nThe thing I'm unsure of is if there is sufficient test coverage in this area. There are multiple constructors for WebApplicationException, and I'd like to see test cases for than just one so that the behavior is stated. For instance, a test case ensuring that if someone constructed an exception with a Response (with/without) an entity that it is passed through to the client. \n. If my understanding is correct, the behavior only changes if ForbiddenException derives from WebApplicationException, in which case it makes sense for the client to see the error, right?\n. merged through b64acf9275\n. I was following the example set in other tests in FileAppenderFactoryTest, which have the same behavior (writes log files to current directory and doesn't delete them afterwards). I can rework the tests to see if I can take advantage of TemporaryFolder\n. The commit I just pushed fixes everything in dropwizard-logging that outputs logs to the current working directory. Now logs are stored in a cross platform temporary folder. It's not exactly the prettiest but leaves logging_advanced.yml in a sane state, so that it can be used as an example.\n. Confirmed.  That is prettier code. I shortened it to use 2 substituted variables instead of 4.\n. Closed by #1241\n. Hey, thanks for the PR, I like the direction (I too think it'd be neat if supported content-types were logged with the endpoints, yet that could make for some long log lines), but I had a few questions in my code comments that should be addressed.\nI do wonder if anyone depends on the current behavior to know that multiple content types were registered...hmm\n. Ohhh, I personally really like that output, but I'll see if others have opinions on that.\nAlso you can simplify the code even more. There is no need to override hashCode or equals (because of passing the comparator to the set constructor) :smile:\n. @jplock, absolutely -- keep pull requests focused!\nSquashed and merged PR as part of c91851b\nThanks, @afrin216 \n. Closed by #1202\n. Looks like this issue is resolved, so I will close this. If the issue persists, reply back and I can re-open the issue.\n. Coda doesn't contribute anymore (see the graph of contributors), which (arguably) debunks the results presented that if Coda left the project it would be incapacitated. I'm definitely not qualified to be giving advice in this topic, but it could be a good idea to look at recent history as well.\n. The current behavior is if you send an empty request body to a method that is annotated with @Valid and the request entity is not marked as Optional, a 422 will be thrown. This is not the same behavior as jersey's bean validation. Is this what is happening to you?\n. Good catch!\n. Thanks for the PR and the investigation in #1160. Since there are no tests, do you have confirmation that this does, indeed, fix #1160 (ie. running 0.8.2 and 0.8.3-SNAPSHOT side by side, the bug shows in 0.8.2 and not 0.8.3-SNAPSHOT)?\nAlso, under what circumstances one would want shareConnectionManagerEnabled to be false in Dropwizard? Becaues if it should always be true, we wouldn't want users to accidentally run into this hard-to-track behavior by changing this configuration option\n. Awesome, thanks for the tests. They look a little non-deterministic, but that is alright in my book :smile:\n@arteam / team, did you want to take a look at this as well? I know that you had some concerns regarding the original solution, so you should take a look before this is merged.\n. I think this is a great feature because I just got bit twice in a short period of time by two different applications that spammed the log files and filled up the disk.\n. Closed by #1218\n. Thanks for the pull request -- it is similar to #633\nThe proposed fix could be better, though I can be convinced otherwise. The reason being is that to be consistent with Hibernate Validator, the check should be if @NotNull is present\nAlso restarted your build, as it failed for extraneous reasons.\n. I'm fine with this being in 0.9, but I just want to state that with this and #1251, 0.8, 0.9, and 1.0 will all have different behaviors regarding null entities \n. Barring anything unforeseen, #1251 will be the solution for 1.0 (and you'l have to add the @NotNull annotation on your endpoints). I'm fine with leaving this open for additional discussions until #1251 is merged.\n. What version of dropwizard are you using? I believe validation annotation on *Param arguments was added in 0.9.0\n. Thanks for the bug report, since this is the feature that I implemented, I can take a look into this.\n. Thanks for the pull request. Off hand it looks pretty good, but I'll review it more in-depth tomorrow.\n. I think the implementation can be a bit simpler. I was able to get all the tests to pass (including the one you just wrote) and have the cache work with:\n``` java\nprivate static final Cache>, String> MESSAGES_CACHE =\n        CacheBuilder.newBuilder()\n        .expireAfterWrite(1, TimeUnit.HOURS)\n        .build();\npublic static String getMessage(ConstraintViolation<?> v) {\n    Pair> of =\n            Pair.of(v.getPropertyPath(), v.getConstraintDescriptor());\nString message = MESSAGES_CACHE.getIfPresent(of);\nif (message == null) {\n    message = calculateMessage(v);\n    MESSAGES_CACHE.put(of, message);\n}\nreturn message;\n\n}\n```\nWhat do you think about that? I don't think there should be a need for two caches.\n. No problem. Just making sure there wasn't something I missed. If you want to apply my suggestion, I'll take another look :smile:\n. I don't think it is an issue because the request body validation is handled by JacksonMessageBodyProvider.\nAlso I'll try restarting your build a few times, if it still fails due to unrelated tests, I'll just verify locally and merge.\n. This does sound like a different issue (so it'd be wise to open another one).\nAlso it sounds like this issue affects all version of dropwizard, not just 0.9.x, correct?\n. Have you had a chance to look at JERSEY-2636. Looks like it is not WAD for a null body without Content-Type to be passed into a endpoint that expects a content-type.\n. I'll have to double check, but what would the expected behavior be for when the ValidationMethod is used for cross field validation, where one or more of the fields used in the method could be the problem?\nMy changes to validations didn't break the error message when a ValidationMethod failed, but if we do want to change the message, we should do it sooner rather than later. Potentially the easiest solution would be to strictly take only the message on a ValidationMethod\n. Since it looks like this behavior is fixed in v0.9.0-rc4 can this be closed?\n. Closed by #1578\n. Looks good to me :+1: \n. This pull request does need a lot of polish before it is even remotely merge-able. I just wanted to get confirmation from the team that this is a good direction to be heading.\n. Ok, pull request has matured a little bit since inception. I've decided to put my thoughts together to let everyone know the current impact of this pull request.\n@Validated/@Valid Distinction\nThe @Validated annotation is no longer self sufficient for constraint group validation -- @Validated must be used in conjunction with @Valid\nBefore\njava\n@POST\npublic PartialExample validatedPartialExample(\n        @Validated({Partial1.class}) PartialExample obj) {\n    return obj;\n}\nNow\njava\n@POST\npublic PartialExample validatedPartialExample(\n        @Validated({Partial1.class}) @Valid PartialExample obj) {\n    return obj;\n}\nValidated with no groups is same as specifying the default group.\nThe cons with this approach is that it is not backwards compatible. Everyone who previously specified @Validated({...}), they now must add the @Valid. Also another annotation is required to achieve previous behavior (and no one likes having more code)\nReturn Value Validation\nThis pull request adds return value validation on resources. This allows for your service to make guarantees about the response. If these guarantees aren't meant, the service will return an internal server error rather than a malformed response. To enable return value validation, mark the endpoint method with the wanted constraints\njava\n@POST\n@NotNull\n@Valid\npublic PartialExample validatedPartialExample() {\n    // Will trigger an internal server error, because we aren't allowed to\n    // return null!\n    return null;\n}\nNull Entities Handled\nDropwizard currently doesn't validate null entities in a way that is consistent with Hibernate Validator. Right now, if a request entity is null, even if it is ok to be null, a 422 is returned with \"The request entity was empty\". There are a couple pull requests to only throw a 422 on a null entity when the entity is annotated with Validated or Valid, but this is still not to spec. I'll copy my thoughts from another thread (#633):\n\nWhen using the validator and you call validateParameters with the parameter representing the request entity being null:\n- If no annotations on the parameter, no validations are performed\n- If the parameter has @Valid, no validations are performed\n- If the parameter has @NotNull, a constraint violation will be created because the parameter is null. If the parameter was not null then cascading validations wouldn't have applied\n- If the parameter has @Valid and @NotNull, a constraint violation will be created\n\nThe pull request brings Dropwizard in line with said behavior.\nThe other side of the argument is that if something can be null it should be wrapped in an Optional, which I completely agree with, but to assume null is erroneous regardless of annotations may be too against the Java mindset (unfortunately)\nUnresolved Questions\n\n~~How can someone extend validation?~~ Solved, it is possible to pass in your own validator\nHow badly is this going to break for people who extended the jackson mapper?\nI introduced a new exception JerseyViolationException and exception mapper JerseyViolationExceptionMapper to achieve some of the functionality. Ideally, I could have rolled the functionality into ConstraintViolationExceptionMapper, but I was at a loss as how to do so. Consequently, ConstraintViolationException is never instantiated and thrown, which leaves the usefulness of ConstraintViolationExceptionMapper in question (should it be deleted?, I'm not sure)\n\nConclusion\nLots of big changes here and backwards incompatibility, so this shouldn't be considered for 0.9.x\n. > Could users write own HibernateValidationFeature and register it through JerseyEnvironment?\n\nWill it replace already registered feature?\n\nUnfortunately, it looks like re-registering is not possible. Quoting from the Jersey docs:\n\nAny subsequent registration attempts for a component type, for which a class or instance-based registration already exists in the system MUST be rejected by the JAX-RS implementation and a warning SHOULD be raised to inform the user about the rejected registration.\n. With my latest commit, I've reached the same level of validation extension as the functionality this pull replaced. Now a user configured validator can be used in validation. I'd still like to see the ability to extend worked on, but I'm somewhat satisfied for now.\n. Thanks for the solution, looks like #1177 may have solved it for the 0.9.0 release.\n. Done. I'm all for ways to make code simpler!\n. What do you mean tests are failing? The continuous integration tool dropwizard uses (Travis CI), occasionally breaks, so tests failing on Travis is normally not a big deal. If you have found additional issues with dropwizard, feel free to report them.\n. Oh, I see, your local build is failing. Your local build shouldn't be failing (though even I get the occasional socket read time out or address already in use)\n. Without a code example demonstrating actual vs expected behavior, there isn't too much we can do.\n. Accidental side effect of #1193?\n. Ah, sorry, I misspoke before. WebApplicationException was never logged when mapped by LoggingExceptionMapper, and I can see why this may have been an oversight. I think generally internal server errors arise from unexpected exceptions. I'm not sure under what circumstances I would write:\n\njava\nthrow new WebApplicationException(\"KAPOW\", Response.Status.INTERNAL_SERVER_ERROR);\n@maffe, can you give an situation?\n. Interesting, I did not consider ServerErrorException. Thank you, maffe, for pointing that out. As an aside, I wonder under what circumstances that exception is generated because I'm not familiar with it.\n@jplock I don't believe there is a benefit to only logging internal server errors (other than reducing log spam). Personally, I'd be fine for logging of other exceptions (but not under the error level and not with stacktraces).\n. Excellent, I like it. Backwards compatible as well!\n. I think this is fine, there have been other semi-major-but-backwards-compatible features since the latest rc: (changes since 0.9.4-rc4). But I'm fine if a release wants to be cut and save some of the features for 0.9.x\n. @pandaadb, I think it may only be for certain rolling policies (correct me if I'm wrong) that setFile(null) will work as if getFile() is null in FileAppender the appender won't start.\nWhile I want Dropwizard users not to be unnecessarily constrained by validation annotations, I'd hate to create more ways for users to create invalid configs. I am open for persuasion, though. Thoughts?\n. Great point -- your solution makes total sense. Please submit a PR with it and some tests.\nAnd the validation message should be along the lines of:\n\ncurrentLogFilename can only be null when archiving is enabled\n\nIf feel unable to write the PR just let us know.\n. Closed by #1278\n. Once #1295 is good, review/merge that, and then I'll see what needs to be fixed up in this PR.\n. Did just that :+1: \n. Are the Travis test failures relevant to the pull request?\n. Thanks @patrox for the reminder, 1869404 (upgrading to Logback 1.1.7) closes this\n. My understanding of these two implementation is that #1301 is more a general solution for types contained within Optional and this specifically targets DateTime, correct? Would this solution mean that for each future type for jdbi, a ArgumentFactory<Type> and an associated ArgumentFactory<Optional<Type>> will have to be created?\n. I think it's very subtle, so let me explain myself.\nFrom the linked documentation:\n\nWhen text is set to \"auto\", the path is marked for automatic end-of-line\nnormalization. If Git decides that the content is text, its line endings are\nnormalized to LF on checkin.\n\nThis means that if I write something with crlf on Windows, it will be checked in as lf. But on a Windows checkout, git may decide to change the lf's to crlf's based on core.autocrlf. Relevant documentation:\n\nGit can handle this by auto-converting CRLF line endings into LF when you\nadd a file to the index, and vice versa when it checks out code onto your\nfilesystem\n\nI have core.autocrlf = true on my machine, which is the default for my version of git.\n@fexbraun may have had his problems fixed by having a couple global settings:\ngit config core.autocrlf false\ngit config core.eol lf\nI tested this by doing a fresh git clone and trying to build.\n. git clone -b issue-1305 https://github.com/joschi/dropwizard.git\ncd dropwizard\nmvn package\nAnd all the tests passed :smile:\n. Closed by #1309\n. @joschi : Yes it would make sense if it was possible, but Validators depends on Jersey for the param validation, and I don't know a way around it :frowning: \n. Ok, I took @arteam's suggestion. I initially didn't have it this way as I couldn't think of a logical reasoning how a Dropwizard user would utilize the function. But I'm good either way.\n. And to answer your question, @jplock, no the pull requests aren't related by other than dealing with validation. This one deals with validation of configuration files in tests and the other deals with validating parts of the request.\n. This is great, thanks!\n. I don't know if this can be considered a bug (see #986). The empty string is significant and shouldn't be considered absent.\n. Oh yes, you're absolutely right! I saw queryParam(\"value\", \"\") and had a flashback. :smile: \n. This is closed by #1380, as it added K as a valid unit.\n. Awesome pull request, I'm a little hesitant about the trust store changes. I skimmed the Jetty 9.3 source code and it gives the illusion that it should still accept a null trust store, in which case will SSLContext.init will search for \n\nthe installed security providers will be searched for the highest priority implementation of the appropriate factory\n. Ok interesting, I'm not sure why it worked previously either. I wanted to play around with your branch but I'm unable to in Intellij, as various compilation errors crop up even after a fresh clone (it keeps wanting to use jetty 9.2.13). mvn package works fine though, so I'm unsure what the issue could be.\n\nAlso any reason not to use 9.3.6.v20151106?\n. The bom trick fixed the issue. :+1: \n. Are any of these todos still relevant (ie, have they been addressed already?)\n. And it looks like Cli doesn't depend on System.err either, so this is good to me.\nThanks :+1: \n. - Can you reproduce this on rc2?\n- Can you reduce the code to just what reproduces the problem?\n. Thanks for the bug report. I'm re-opening this issue. How do you reproduce the bug? Is it every request that has the issue?\nI'm curious if @arteam has the bandwidth to investigate because I'm totally unaccustomed to Hibernate :blush: \n. Related to #1325?\n. Good catch.\n. Looks good to me.\n. Correct me if I'm wrong, but JSR-349 is the reference implementation to JSR-303, so the link name may be wrong -- which is correct? :smile:\n. Ok looks good, to me.\n. That should be covered by the returnsA400ForNonDeserializableRequestEntities test, but if you can find an edge case, I'd be happy to re-evaluate my implementation. \n. No problem, great to have additional eyes for these topics!\n. Thank you for the report mike. I can confirm that this is undesirable behavior and will have a fix out shortly.\n. Something is causing this pull request to fail consistently locally and on Travis.\n\ntestSqlExceptionIsHandled(io.dropwizard.hibernate.JerseyIntegrationTest)\njavax.ws.rs.ProcessingException: Server-side request processing failed with an error.\n. I attempted to use this pull request with a CA cert, but there is a current problem on windows. Every test in Http2IntegrationTest fails with no valid keystore. I'm investigating, but debugging tls issues can sometimes be black magic :stuck_out_tongue: \n\nEdit: The valid keystore error doesn't happen with just the CA cert, but with the test cert in the PR.\nAdditionally, HTTPCLIENT-1672 is tracking HTTP 2.0 status. Unfortunately, I doubt it will land anytime soon.\n. The fix was to add another config override for the trust store path:\njava\n    @Rule\n    public final DropwizardAppRule<Configuration> appRule = new DropwizardAppRule<>(\n            FakeApplication.class, ResourceHelpers.resourceFilePath(\"test-http2.yml\"),\n            Optional.of(\"tls_http2\"),\n            ConfigOverride.config(\"tls_http2\", \"server.connector.keyStorePath\",\n                    ResourceHelpers.resourceFilePath(\"stores/http2_server.jks\")),\n            ConfigOverride.config(\"tls_http2\", \"server.connector.trustStorePath\",\n                ResourceHelpers.resourceFilePath(\"stores/http2_client.jts\"))\n    );\n. Ok, I tested the branch (after I applied my small fix) with a CA cert and I was able to see in the request logs HTTP 2.0!\nI'm not sure if you noticed this as well, but it looks like I had to supply at least one supportedCipherSuites in the yaml, else Chrome and Jetty couldn't negotiate. I'm curious if the HTTP 2.0 Jetty starts with zero supported cipher suites. If so, we'll have to document this and potentially provide a sane default.\nAnyways, awesome work. As soon as I can compile/test on windows, this PR is good to merge :+1: \n. It doesn't look that you applied my suggested patch of:\n\nThe fix was to add another config override for the trust store path:\njava\n    @Rule\n    public final DropwizardAppRule<Configuration> appRule = new DropwizardAppRule<>(\n            FakeApplication.class, ResourceHelpers.resourceFilePath(\"test-http2.yml\"),\n            Optional.of(\"tls_http2\"),\n            ConfigOverride.config(\"tls_http2\", \"server.connector.keyStorePath\",\n                    ResourceHelpers.resourceFilePath(\"stores/http2_server.jks\")),\n            ConfigOverride.config(\"tls_http2\", \"server.connector.trustStorePath\",\n                ResourceHelpers.resourceFilePath(\"stores/http2_client.jts\"))\n    );\n\nAny reason why not?\nWith the patch applied, HTTP/2 support works with Chrome on Windows.\nI'll have to double check next week Monday that the cipher suite now works out of the box.\n. Awesome, thank you :sunglasses: \n. What's wrong with the generally accepted solution? I would prefer not to introduce complicated logic if the same behavior can already be done through the template.\n. Ok, closing this because the solution exists.\n@boncey, if you want to make a PR for the feature, go ahead and do so :smile: \n. Looks good to me. I see that lambdas and streams are starting to pop up :sunglasses: \n. Nicely done, looks a lot better.\n. Just wanted to give a heads up that the implementation uses HelpScreenException in the 'internal' package of argparse4j. This matches the help argument action in argparse4j, which is the same as the one in dropwizard, except argparse4j doesn't take an output to write the help to. So even though, this implementation uses a class in the internal package, I think it is the best implementation.\n. Looks like the nitpicks arose because I was too eager in copying and pasting the setup code from CliTest :blush: \nAnyways, pr should be good to go.\n. Thanks for trying out 1.0! It looks like this problem arose because of my misunderstanding that registering exception mappers non-deterministic which one is used. There was a pull request to revert registering exception mappers (#1148) in a test resource, but it looks like JerseyViolationExceptionMapper is a hold out.\nOther related commits and pull requests that show how this non-determinism really threw me off :blush: \nfc9025cd\n1125\n1144\n1129\n. (Thinking out loud here). I think the best approach may be a registerDefaultExceptionMappers in the ResourceTestRuleBuilder, which by default is enabled, and will register all the default exception mappers like the registerDefaultExceptionMappers yaml setting (which is also true by default).\nHow does that sound?\n. Not to my knowledge :cry: \njava\nResourceConfig config = /*...*/;\nconfig.register((ExceptionMapper<JerseyViolationException>) exception -> Response.ok().build());\nClass<ExceptionMapper<JerseyViolationException>> clazz = (Class) ExceptionMapper.class;\nconfig.isRegistered(clazz); /* returns false! */\n. Closed by #1387.\nCall setRegisterDefaultExceptionMappers(false) when you're building the a TestResourceRule\n. @evanj: No worries, it is not your fault, some of the tests are flaky due to logging. If the test fails, we know what to look for/and restart the build.\n. Travis is continuously timing out. I have verified that I can pull and run the tests cleanly, so I'm merging this now.\nVery interesting post, btw, keep us informed of anything else you find!\n. I'm assuming this pull request was created by mistake. If not, reply back.\n. Things that are of an immediate concern with the implementation:\n- Possibility of the config task to \"leak\" passwords, especially if the password were referenced through environment variables. Even though the admin port should be protected and the task is optional, this does open up another attack surface that may be non-obvious.\n- Looks to not handle cyclical references.\n- I'd prefer an implementation of less copy + paste\n- No tests/docs\n- Not sure if having everything in the core module is appropriate.\nMore on the last point. I believe that this topic will invite a lot of bikeshedding and considering that this pull request is composed of strictly additions, I think the best first step is to make this a dropwizard module (http://modules.dropwizard.io/). There it can undergo further development and scrutiny.\nLet me know what you think.\n. I'd much rather you get the module out and working then iterate on refactoring :smile: \n. Yeah let's see if this fixes things.\n. Makes sense to me.\n. From the jersey docs (emphasis mine):\n\nIf the @DefaultValue is not used in conjunction with @QueryParam and the query parameter is not present in the request then value will be an empty collection forList, Set or SortedSet, null for other object types, and the Java-defined default for primitive types.\n\nThe *Param classes do seem to add nice behavior though, as if one uses primitives, and Jersey can't convert it, Jersey will return a 404, which, to me, is misleading. If there are alternatives for achieving the same behavior, it'd be good to evaluate the pros/cons of each.\n. Ok, latest commit takes your suggestions.\n. Closing as a dupe of #1335 and #1325, if not a dupe, let us know what's different.\n. I think this is unrelated to the posted yaml, as I've tried this yaml on master and v0.9.1 and a simple Configuration can be instantiated from this yaml. What else does your Configuration class contain?\n. Still can't reproduce:\n- Created a brand new 0.9.1 project using the archetype\n- Used default configuration class included as part of the archetype\n- Used the Java8 bundle (in pom and in bootstrap)\n- Used your exact yaml config\n- Even included the ganglia and graphite packages to doublecheck\nAny more tips? (EDIT: Try what arteam said first!)\n. I'm assuming this isn't an issue anymore, so I'l close this.\nReply back otherwise, and I'll open it back up.\n. I'm marking this as a bug, as currently Validated only works on request entities, and one shouldn't have to declare a dummy request object just so they can get the Validated annotation to work. I'm proposing a fix that will let the Validated annotation be on any parameter but if more than one Validated annotation is supplied with a different set of groups then it's a runtime error because the underlying hibernate validator is unable to perform validation against parameters with different groups.\nEDIT: Marking it as an enhancement because it was never possible to annotate parameters with validation groups\n. Is this still happening? I am unable to reproduce this using 1.0.0-rc2\n. Solved by #1860 and dropwizard-zipkin.. If you want to write this functionality I'll be more than happy to take a look at it. The graphite documentation does give the illusion that using the pickled format is much more efficient (so dropwizard users should have this option available to them), though I haven't seen the line based reporter ever be a problem.\n. Looks great, thanks for the thorough test cases.\n. Looks like the same error occurs with Jackson 2.7.2.\n. DiscoverableSubtypeResolver  is what is currently being used. I'll have to look up what it means for jackson to resolve sub-types before creating a test-case\n. Closing due to lack of communication.\n. Preferably, I would like to see if it could be done as a Dropwizard module (ie, not in core, (but core work may have to be done to make it extensible?)).\n. Good catch, if there ever will be another 0.9.x, this would be good candidate to include.\n. Closed by #1452\n. Minor nitpick, but other than that this is ready to merge! :+1: \n. Yes please :smile: \n. Thanks for the explanation, I just wanted to make sure that it wasn't a change by accident because the hibernate module seems prone to mistakes.\n\nThose who want to use eager loading will be unaffected either way.\n\nSounds like backwards compatibility is maintained, which is :+1: from me.\n. Merging this under the impression that backwards compatibility is kept, and this seems like a nice feature for those who want it. I'm assuming there will also be another rc for 1.0.0 at least for this and #1527\n. I'm curious, have you tried 1.0? The validation logic has been moved from Jackson to Jersey, so if there is a race condition still, it'd be in Jersey.\n. Sorry for the late response. Typically we like to direct questions that pertain with \"How do I do X with Dropwizard\" to the forums/mailing list\nThat said (and this is probably not where the problem lies), I feel like one shouldn't construct the authorization header by hand when there is an easier alternative on a jersey client:\njava\nregister(HttpAuthenticationFeature.basic(\"me\", \"hello_world\")). Closing this because the feature is implemented in 1.0 (if this is not the case, or there is a bug, please report back to open the issue back up).\n. Sorry, I'm not familiar with such a tool. If you find a tool or make one yourself, we'll be more than happy to add it to the docs.\n. Cool, is the plugin on maven central or another site? I tried installing the plugin locally as well and ran into the following error:\n\n'No mojo definitions were found for plugin: no.jansoren:restapi-codegen-maven-plugin.'\n\nSome current questions (it's ok if not implemented, just curious):\n- Query/Form/Path/Cookie parameters?\n- HTTP headers?\n- Basic Authentication?\n- Non-JSON endpoints?\n. Validation was removed from Jackson in #1251 (slated for 1.0). The problem should be fixed in the release candidate, if you want to try that out. I'm not sure if double validation is a large enough problem to backport a fix.\n. Can you provide a reproducible test? I tested the object mapper created by dropwizard and it was able to serialize null fields to null without setting JsonInclude.Include.ALWAYS. I also confirmed it working in ResourceTestRule\n. Haha, I just did the same exact thing that @patrox did and arrived at the same conclusion that it is the combination with lombok that is the problem.\n. Awesome job triaging the problem. Closing the issue because it's kinda out of our hands\n. My 2\u00a2. I like this feature and I believe that some of variation should land, but I have some opinions on the matter.\n- I don't like specifying multiple imports because, in a conflict, is it the last import wins or first? This problem can be alleviated with conventions (ie, \"max of one import per file\"), or mitigated through @ryankennedy's suggestion about some runtime (or even startup) indication about what the final form the configuration file resolved to. Though care would have to be considered if dealing with sensitive config values (related #1156)\n- Not sure if I like the ability for resources to be imported through URLs (I'd prefer to use only file paths) because I've been burned when an app calls out to an external IP only to be slowed down by a 60 second reverse DNS lookup. I can be convinced otherwise, though.\nOverall I like the approach, but I think taking a simple approach would win out because we don't want to incorporate everything under the sun, which would be the job for a configuration management tool (eg. Chef).\n. Closing this, as it seems due to Liquidbase and not Dropwizard itself.\n. Thanks for the fix and the test!\n. What's the use case for this?\n. This logging statement triggers for all template errors (ie compilation errors), not just missing templates, no? Just clarifying.\nI thought I originally had a reason for writing to debug instead of error back in #1178, but I can't recall. It may have been because when an entity fails validations, it is (was?) logged under debug, similarly, if a template fails due to user input (is this even possible?) it should be debug logged to prevent log spam. So a couple of questions to ponder before merging that I may not have answered back in #1178\nDon't forget to update the documentation, as it states that it will be logged under debug mode!\n. Can this be made into a dropwizard module?\n. Update to the latest dropwizard-gelf, as it looks like it is solved for version 0.9.2-1.\nReply back if it is still a problem to continue the issue\n. This looks good. There are a few suggestions in the code review that should be applied.\nDo you also have a link to documentation on this behavior for tomcat's jdbc pool for future reference?\n. Did you miss one of the code review items?\n. And just so I understand clearly, those that are using Dropwizard and JDBI -- the DBIHealthCheck, which needs a connection to the database, will fail, and this is the desired result. The application will still start, but will essentially be in an unhealthy state.\n. Is this necessary, as wouldn't you just create a custom ViewRenderer that would deal with its own ThreadPoolExecutor?\n. Ok I see what you mean -- I just had to re-aquiant myself the code. If this would provide tangible benefits then a patch would be accepted\n. This has been fixed by #1499\nEDIT: The docs just need to be refreshed on the site.\n. @mikewatt, I'm not going to give up just yet :smile:\nI just pushed a change that will handle the issue with JSR310DeserializerBase by getting the root cause. But as we've seen previously this may not work in 100% of use cases. If you find additional cases, let me know, but I am also at a loss if there is an official way to determine when it's a programmer vs client error, as this relates to not only deserialization but also serialization (ie, the object I'm serializing as a GET response can't construct JSON somehow)\nIn lieu of a better solution, I may defer to @cowtowncoder if he's available. How to determine, given a JsonProcessingException whether it's a programmer or client error?\n. Thanks for the input, Tatu, greatly appreciated. That's what I thought too, but then I came up with a two pronged approach that seems to handle everything I throw at it.\n- Check if we're looking at an JsonMappingException\n- If so, get the last field that caused the error.\n- If the field is null then we know that it was not the contents of the field but the type of the field that caused the error and thus a server error.\nIs there an exception to this rule? I couldn't find one when testing the jsr310 module. I'm optimistic :smile:\n. Yeah if you want ConfigOverride to take in a supplier that's fine (submit a PR). As long as it doesn't break backwards compatibility, it'll be merged.\n. I upgraded the main branch to 2.7.4 in 3316980, did you have to give the snapshot a try?\n. I'm optimistically assuming the problem is resolved, if not, reply back.\n. I think this is a fantastic start, but I have questions/concerns/suggestions\n1. This should be developed outside the core repo because it is a plugin and should not be tied to a specific version of Dropwizard. This way the plugin can also be developed a quicker rate.\n2. Looks like this can be extrapolated for any service that uses Jersey resources, no? There doesn't seem to be anything Dropwizard specific about the implementation.\n3. I think it would be better to use Jersey's client instead of no.bouvet.jsonclient (sorry! :smile:) because as of right now the scope is too narrow (no query params, headers, authentication, non-json endpoints). This way, you can probably look at annotations and support more than just simple JSON endpoints.\n4. How to handle StreamingOutput?\n. I was not able to modify dropwizard-example to exhibit said behavior in 1.0 or 0.9.2\n. Am I the only one that finds it odd that the example application overrides the default Configuration metrics. Normally, I don't override the configuration metrics so I don't have to set up the reporter, which, imo, is nicer.\n. #1319 overrode the configuration (I merged it, funny enough).\nBut to add a (working) graphite reporter, one doesn't need to touch any java code:\n- Add dependency to pom\nxml\n<dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-metrics-graphite</artifactId>\n</dependency>\n- and then add the reporter to the yaml\nyaml\nmetrics:\n  reporters:\n    - type: graphite\n      host: localhost\n      port: 2003\n      prefix: my-awesome-service\nSo at this point, I think the example application is wrong, unless @joschi remembers why it was done 8 months ago.\n. Ah, much better, no? :wine_glass: \nMentioned port change in bf52889 because someone, somewhere is probably sending using the previous default port\n. So #1527 creates the foundation for the solution (but it needs a slight tweak). The majority of the issue is solved by the following:\njava\npublic class JacksonMessageBodyProvider extends JacksonJaxbJsonProvider {\n    // ...\n    @Override\n    public Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream) throws IOException {\n        try {\n            return super.readFrom(type, genericType, annotations, mediaType, httpHeaders, entityStream);\n        } catch (IOException e) {\n            if (e instanceof JsonProcessingException) {\n                throw e;\n            }\n            throw JsonMappingException.fromUnexpectedIOE(e);\n        }\n    }\n    //...\n}\nOnce #1527 is merged, I'll follow up with a fix with this issue, which is caused by MalformedURLException being an IOException :disappointed: \n. Keep looking for edge cases :tada: \n. I was able to create a test project that shows that registration order does not matter (with and without registerDefaultExceptionMappers=false), so unless a test can be demonstrated (preferably within this repo), I'm closing this \nI do acknowledge that the docs in this area sorely needs some love, which yours truly will get to.\n. Makes sense to me, thanks for the feature :+1: \n. Is modifying the rootPath in the configuration not working as well (it does a setUrlPattern behind the scenes)?\n. Ok I looked into a little more and the reason why you're seeing this issue is that the server is not configured until after the Application's run. During server configuration it overwrites whatever context path may have been previously set (SimpleServerFactory and DefaultServerFactory). To get a custom context path in tests use ConfigOverride or a different configuration file to set the applicationContextPath\n. Seems like a very nice addition, make a PR please :smile:\n. This is actually possible nowadays:\n```java\n@Test\npublic void TestA() throws Throwable {\n    final ResourceExtension resource = Resource.builder()\n            .addResource(new DummyResource())\n            .build();\ntry {\n    resource.before();\n    assertThat(resource.target(\"/myfoo\").request().get(String.class))\n            .isEqualTo(\"foo\");\n} finally {\n    resource.after();\n}\n\n}\n@Path(\"/\")\npublic static class DummyResource {\n    @GET\n    @Path(\"/myfoo\")\n    public String foo() {\n        return \"foo\";\n    }\n}\n```. Looks good. I'll merge this. Not sure how we want to mark this because it only affects < 1.0\n. Any particular reason for upgrading to a beta version of mockito?\n. Sounds good :smile:\n. Does this mean every time a JDK update comes out, we'll have to update this (to run tests locally or on CI)?\n. Good catch! Are you comfortable writing a pull request with fix + test case?\n. No problem -- no rush :tada: \nIf you can't find the time or need someone to take up the torch, just let us know\n. The problem is that the @JsonProperty(\"requestLog\") is needed, else it won't be de/serialized correctly because the property is named differently than what would be auto-detected.\njava\n@JsonProperty(\"requestLog\")\npublic RequestLogFactory getRequestLogFactory() {\n    return requestLog;\n}\nAnd unfortunately the naming strategy only works in:\n\nin cases where they are not auto-detected and no explicit annotations exist for naming [docs]\n\nIf there was a way to get the snake casing to work universally without breaking backwards compatibility, I would support that (have you tried mixins?)\n. In the boostrapper you should be able to enable a feature on the mapper that allows for naming strategy to override the JsonProperty\njava\nmapper.enable(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING);\nFrom the javadocs:\n\nFeature that when enabled will allow explicitly named properties (i.e., fields or methods annotated with JsonProperty(\"explicitName\")) to be re-named by a PropertyNamingStrategy, if one is configured.\n. Looks good to me, thanks! :+1: \n. Good catch. Yes it should change. If you want, go ahead and make the change, else I can have a PR in an hour.\n. Very bizarre that the build fails on Travis, it passes on my machine. May have to do with the jdk version (I'm using jdk1.8.0_66). If it fails again on Travis I'll remove the trouble commits\n. Yeah looks the old version of the JDK on travis is giving some headaches:\n\nhttps://github.com/travis-ci/travis-ci/issues/3259\nhttps://github.com/travis-ci/travis-ci/issues/4042\n. The only official way is through the yaml configuration though I believe #996 allows one to define their own logging factory, so one should be able to create one to use logback.xml\n. Looks like Travis is not happy with this PR.\n. In the linked issue, it's mentioned that the current method:\n\nis [a] waste of time and resources\n\nCan this be substantiated in any way. I realize that objectively it can be excessive but I'm not sure how tangible this benefit will be. This is more for my curiosity than anything\n. Can you switch the implementation to Java 8's supplier? We're trying to be Java 8 first :smile: \n. Looks good to me :+1: \n. In situations like these, I find a test much more powerful if the bug can be exposed by adding or modifying an endpoint in ValidatingResource and the corresponding test case in ConstraintViolationExceptionMapperTest because it adds a real world flair to bug.\n. Looks good to me. I renamed the PR to represent the added feature :smile:\nMerging this now, yet some additional changes should be done in this area:\n- \"sortParam must match \\\\\\\"^(asc|desc)$\\\\\\\" should be \"query param sort must match \\\\\\\"^(asc|desc)$\\\\\\\"\n- May need additional checks for possible mismatch in validation groups between the Invocable and bean members\n. Try explicitly registering your exception mapper in run. You also won't need to turn off registerDefaultExceptionMappers\nSince this is not an issue with dropwizard itself, I'm closing this.\n. Since you're writing it out as html this is something that you define (if I'm not mistaken). ValidationErrorMessage serializes fine as json.\n. JacksonMessageBodyProvider\nYou shouldn't have to do anything with this to get json serialization :confused: \nAre your endpoints/resources annotated with @Produces(MediaType.APPLICATION_JSON)?\n. You're correct in your observation that since validation and deserialization are decoupled it does make it harder to correlate errors with the raw data (in this case, the yaml).\nI've documented this limitation as part of #1587\nIt can be better though, and may be something that can be worked on in the future.\n. It's updated whenever there is a dropwizard version update and on the rare occasion that the docs need updating out of band.\nThe lowest hanging fruit would be to correlate fields that are directly annotated with JsonProperty with the validation errors, which would solve your problem. This is what is done for Jersey's *Params (and this isn't 100% either). The issue is that with Jackson, there are many more ways for serializing/deserializing an object that it may be impossible to correlate everything without some breadcrumbs for the validator to take advantage of.\n. Thanks for the link, @RohanNagar. Closing this issue out as it doesn't appear to be an issue with Dropwizard\n. I find it ok, if documenting exceptions starts to proliferate and become the norm, we may try and figure out a better way to document these.\n. This has been fixed in #1387 for 1.0, which will by default register default exception mappers in the in ResourceTestRule. This is a bug for dropwizard 0.9.x.\n. Haha, little bit chaotic with all the responses, I'll let @joschi do another sweep, but once everything is sorted out I think this would be a fine addition for 1.1\n. I test the documentation locally by using make html inside the docs directory \nIt looks like releasing the documentation that is the tedious part :stuck_out_tongue: \n. Weird that a jdbi test failed (when this pr doesn't touch jdbi code), so I restarted travis.\n. Want to rebase this on current master?\n. The second http request in testBuild fails because parameters is is an empty map. This only happens when I run SimpleServerFactoryTest with DefaultServerFactoryTest. This is reproducible 100% of the time for me.\n. My initial thought is that there is some test in dropwizard-core, specifically in DefaultServerFactoryTest, that isn't cleaning up after itself. It's nothing but a hunch, though\n. I believe your name will automatically updated next time list_contributors.rb is ran.\n. I think this may be related to #1604.\n. #1620 should fix this for 1.0, let us know if this is not the case.\n. Closing because 1.0 is out\n. #1615 closes this\n. I don't think there is an easy solution to this [see stackoverflow question]\nAlternatively, you can have the resource take in the Dropwizard configured mapper as an argument and use the mapper in the endpoint:\n``` java\nprivate final ObjectMapper mapper;\npublic SampleResource(ObjectMapper mapper) {\n    this.mapper = mapper;\n}\n@GET\n@Path(\"/jackson\")\n@Produces(MediaType.APPLICATION_JSON)\npublic String jacksonString() throws JsonProcessingException {\n    return mapper.writeValueAsString(\"pong\");\n}\n@GET\n@Path(\"/jersey\")\n@Produces(MediaType.APPLICATION_JSON)\npublic String jerseyString() {\n    return \"pong\";\n}\n```\n. Not sure what the issue is, but I was able to set up an endpoint that transferred a 2.5GB file.\njava\n@GET\n@Path(\"/big-file\")\npublic StreamingOutput getBigFile() {\n    final java.nio.file.Path fpath = Paths.get(\"/tmp/biggie\");\n    return output -> {\n        try (final SeekableByteChannel in = Files.newByteChannel(fpath, READ);\n             final WritableByteChannel out = Channels.newChannel(output)) {\n            fastChannelCopy(in, out);\n        }\n    };\n}\nI suspect it's not a Dropwizard issue.\n. Closing as not being able to be reproduced.\n. @hasanmumin if you can create a small reproducible example using 1.0.2, that would be wonderful, and I can re-open this issue. If the issue isn't exactly the same then create a new issue so it doesn't get lost in a closed issue.\n. Sorry to do this to you, but I think I'll want a self-contained, minimally reproducible project, so that it is easier to pinpoint the problem\nThanks \ud83d\ude03 \n. Re-opening the issue.\n@ogregoire you had a proposed solution in #1625, which it looks like you weren't quite satisfied with; have you given it anymore thought?. Closed by #1662, as it allows customizing the builder to add caching if desired.. Hmm, I was not able to replicate any issue by modifying the validation test cases. Here is the checklist that I ran through:\nI was able to confirm the following works on current master with form params (1.0.0):\n- [x] @NotNull Double\n- [x] @NotNull @UnwrapValidatedValue(false) BooleanParam\n- [x] @NotEmpty @UnwrapValidatedValue NonEmptyStringParam with absent form param\n- [x] @NotEmpty @UnwrapValidatedValue NonEmptyStringParam with empty form param\nFor 0.9.3:\n- [x] @NotNull Double\n- [x] @NotNull @UnwrapValidatedValue(false) BooleanParam\n- [x] @NotEmpty @UnwrapValidatedValue NonEmptyStringParam with absent form param\n- [x] @NotEmpty @UnwrapValidatedValue NonEmptyStringParam with empty form param\n. Closing as a duplicate of #1442\n. Please correct me if I'm wrong, but I took a quick look at the release notes for core and databind and didn't see how the situation pointed out by an earlier comment changes. I realize the conversation fell somewhat to the wayside (my fault :blush:)\n. Ah, I'm not sure how you want it, did you want each of the points described earlier in a separate issue in the databind repo or a single issue?\n. The immediate concern for jackson data-bind 2.8 is that the error message:\n\nCan not construct instance of io.dropwizard.jersey.jackson.OkRepresentation: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)\n at [Source: org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream@6228440c; line: 1, column: 1]\n\nGets mis-categorized as a server error as the message falls under the heuristic:\n\nNo suitable constructor found\n\nWhereas under 2.7.6\n\nCan not instantiate value of type [simple type, class io.dropwizard.jersey.jackson.OkRepresentation] from Boolean value (false); no single-boolean/Boolean-arg constructor/factory method\n at [Source: org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream@eca3d94; line: 1, column: 1]\n\nand in both instances the exception is the JsonMappingException, which as we've discussed is ambiguous.\nSo we can either:\n1. Stick to 2.7 and wait until 2.9 or whenever enhanced error handling lands.\n2. Update heuristics (not sure how to differentiate types of \"Can not construct instance\" :confused: )\n. Just pushed a commit to this PR that starts the 1.1.0 release notes.\n. It worked :tada: \n. Closed by #1662 a long time ago. Is this related to #1173?\n. Can you post a short, reproducible snippet of code that demonstrates this issue. \n. Someone asked a similar question several years ago. I'm under the impression that nothing changed under this situation. The answer then:\n\nJetty has no timeout that limits how long a handler can handle for. \nYou could simply write a handler wrapper than imposed such a timeout \nand interrupted the thread if it took longer than your 2s etc. and \nwrote a response in the finally block. \n\nNowadays, one could use Guava's SimpleTimeLimiter or Jersey's async server timeout handler.\n. Closing the issue as the solution presented should be satisfactory. If not, please respond with additional details.\n. This should be achievable today with a combination of Application::onFatalError and Command::onError (as needed). It may not be the most elegant solution, so if you'd like to continue the proposal of tweaking these APIs in a breaking change kind of way, I'll reopen this issue.. @pushkarajc, I'm optimistically assuming the non-response means the issue has been figured out. If your issue persists, please provide more information for diagnosis.\n. #1678 was merged.\n. oops, I think I prematurely closed the issue, sorry\n. If I recall correctly, a synchronous logger will solve this problem, so maybe we should consider switching. Was the previous request logger (before the dropwizard-request-logging module) asynchronous? If not, I don't think we lose much by switching.\n. Can this be closed? Logback has been updated for 1.1.0, which fixes synchronization bugs and @arteam looks to have had a fix in #1828 back for 1.0.5. I can't replicate this with either relative or absolute paths. See gist\n. Thanks for the info. I was testing the dropwizard test cases locally in intellij.\n. What I can't figure out is that the testBuild runs flawlessly by itself (and on Travis), but fails when run with other tests \ud83d\ude15 \n. A few more hours of debugging as only let to the following insight: \nChanging testBuild to have three requests will fail every time when ran independently. eg:\njava\nassertThat(httpRequest(\"GET\", \"http://localhost:\" + port + \"/service/test\"))\n        .isEqualTo(\"{\\\"hello\\\": \\\"World\\\"}\");\nassertThat(httpRequest(\"POST\", \"http://localhost:\" + port + \"/secret/tasks/hello?name=test_user\"))\n        .isEqualTo(\"Hello, test_user!\");\nassertThat(httpRequest(\"POST\", \"http://localhost:\" + port + \"/secret/tasks/hello?name=test_user\"))\n        .isEqualTo(\"Hello, test_user!\");\nAnd strangely, putting the GET request as the last request will make the test pass :confused: \nEDIT: Now reduced it to only three POST requests\n. I extracted almost all the admin task servlet into a self contained gist that doesn't import dropwizard and I'm unable to replicate the errors we're seeing.\nEDIT: got tests to pass with:\ndiff\ndiff --git a/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java b/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java\nindex 211585d..7b24102 100644\n--- a/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java\n+++ b/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java\n@@ -587,7 +587,7 @@ public abstract class AbstractServerFactory implements ServerFactory {\n     protected Handler addRequestLog(Server server, Handler handler, String name) {\n         if (requestLog.isEnabled()) {\n             final RequestLogHandler requestLogHandler = new RequestLogHandler();\n-            requestLogHandler.setRequestLog(requestLog.build(name));\n+//            requestLogHandler.setRequestLog(requestLog.build(name));\n             // server should own the request log's lifecycle since it's already started,\n             // the handler might not become managed in case of an error which would leave\n             // the request log stranded\nEDIT: Reduced the diff down to\n``` diff\ndiff --git a/dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java b/dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java\nindex 71bffed..cafd6b2 100644\n--- a/dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java\n+++ b/dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java\n@@ -106,6 +106,6 @@ public class ConsoleAppenderFactory extends A\n         getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));\n         appender.start();\n\nreturn wrapAsync(appender, asyncAppenderFactory);\nreturn appender;\n     }\n }\n```\n\nIt's something to do with async request log \n. I was only able to take a look at it once more in the meantime, but hadn't progressed anywhere. Since is non-trivial to debug, and not properly recycling requests is serious, maybe we should be asking ourselves some questions:\n1. Is this happening in production for 1.0?\n2. If not happening in production, and only for our test infrastructure, why? Why does Travis succeed?\n3. If happening in production we should look for an immediate fix:\n   - By reverting the request logging feature\n   - Or marking affected request loggers as sync\n   - Or (unlikely) find and push a fix to the appropriate upstream project.\n. Reverting #1678 also fixed this issue.\n. Yeah sure, I'd love to see what you have in mind. @BethyDiakabananas, #I'm optimistically assuming the non-response means this problem is solved, so I'm closing the issue. Feel free to respond with more info if the problem persists.\n. Wait, what's the bugfix? :confused: \n. The getting started should be fine. What dropwizard version are you using? What Optional are you using (Guava vs Java8)\n. Ah yeah, looks like you were using Dropwizard 0.9.x with the 1.0 getting started. Try following 0.9.x getting started, or upgrade to 1.0\n. Have you tried setting the properties ClientProperties.READ_TIMEOUT and ClientProperties.CONNECT_TIMEOUT via withProperty?\n. Ignore my previous comment:\nJerseyClientConfiguration derives from HttpClientConfiguration, which contains timeout, and you can set that to the appropriate value\n. Closed by #2325. Thanks for looking into this. When we dropwizard upgraded to 1.0, we upgraded Jetty to 9.3.9.v20160517, which seemed to change some TLS/certificate settings (related: #1700 and potentially https://github.com/eclipse/jetty.project/issues/858).\nJetty, which prefers security by default, does not validate server and peer certificates without changing the settings. So it is interesting that Dropwizard chooses to validate by default. I've been kicking around aligning the defaults with Jetty, so users aren't overwhelmed by cryptic error messages.\nThe low hanging fruit here is adding in support for CRLDP and OSCP, as I believe those should be easy to add to the configuration. Not sure about the CRL.\n. After thinking about this a bit, it's in my opinion we take the following steps:\n\nUnless the old behavior can be emulated (I couldn't even tell you what the old behavior was), change the defaults for validateCerts and validatePeers to false (before 1.1.0 rc)\nDocument the broken behavior warning users that enabling these options will lead to breakage\nUpdate certificate validation configuration to support the various options (CRLDP, OSCP, and CRL) (not needed for 1.1.0)\n\nThis does not compromise on security as Jetty has the defaults as false and greatly decreases confusion with new Dropwizard users as the web moves towards HTTPs. I'm closing this issue as 1.0.6 and 1.1.x will disable cert and peer validation by default.\nIf specific validations are desired, new issues should be created for each desired validation, so they may be tracked better and to gauge interest.. Hey @mayooran99, these are some pretty big questions and out of scope for the Dropwizard issues, but I'll give some hints off the top of my head.\n- For simple timing you can use Guava's Stopwatch\n- You can use VisualVM, which comes with the jdk to profile the application\n- For alerting purposes, the simplest method may be to output the metrics as CSV as it contains the metrics and the timestamps. More sophisticated reporting can be used with something like Graphite.\n. Hello, sorry, if this issue is still present can you create a github repo with the minimum code to reproduce to the issue?. Thanks for the additional info, this is currently a known issue. Closing as a dupe of #1699\n. Actually, I was able to reproduce the error, I'll have a PR up in a couple mins.\n. Ah sorry, my statement was misleading. Everything that Jersey allows, Dropwizard should allow. I meant to convey that the return type should be as specific as possible \ud83d\ude1d \n. Ok updated, let me know if I got it right. Third time is the charm :wink: \n. Should be there, check for incompatible versions of Jetty using mvn dependency:tree\n. Ask and you shall receive \ud83d\ude09 \nI'll update the release notes out-of-band once this PR is merged \nEDIT: oof looks like my documentation commit was on a machine without ntp, sorry for the date drift, if you need me to recommit, let me know.\n. Updated release 1.1 notes with this: 78dff9b\n. What version of dropwizard are you using, as I believe that this was resolved in 1.0?\nThe implementation foundation is potentially better as it hooks into parameterNameProvider\n. Can you post an example or add a test case?\n. @cmicali, there needs to be something that's reproducible or this PR may be closed.\n. @sidwagle, is this still an issue?\n. Can you post a minimally reproducible project (gist/repo/pom/etc)?. Closing for lack of response.. Have you tried posting this question to dropwizard-users? This may not be a question for the issue tracker.\n. This makes sense, but I'm always wary of changing status codes, so CC: @dropwizard/committers \nI think treating this as a bug could be the appropriate response.\n. I think @qinfchen was arguing that the writer shouldn't throw NotFoundException -- not that the behavior of NotFoundException should change.\n. One can configure the logging levels through the admin task endpoint. Admittedly, not as powerful as having the entire configuration being modified at runtime (\u00e0 la logback.xml)\nThere is not a plan to split into the configuration into two files.\n. Thanks for digging into this, Sam. Since these properties don't exist and are not needed for Postgres, modifying the docs to reference these properties in a Postgres example will only confuse others, I'm afraid. This PR and stackoverflow should be enough documentation for mysql users. Googling \"mysql java unicode\" let's users know they have to specify it as a property \ud83d\ude09 \nLet me know if you have any questions/concerns about closing this PR.\n. Closing due to lack of information and response.\n. Hmm, that wasn't my initial thought. I was thinking about something like a boolean notFoundOnAbsent for those that relied on the behavior.\n. Random hodgepodge of thoughts:\n1. Current implementation of PR does work. 204's are returned with an empty body. I expressed concerns that LoggingExceptionMapper would interpret the WebApplicationException and return a 204 but contain a body. I'm unsure how this is possible, but tests should assert that the body is empty to ensure the behavior. Sorry for any doubt \ud83d\ude0c \n2. Since this can be an opinionated issue, for Dropwizard 1.x, PR should keep previous behavior and allow the new behavior with code customization. Re-evaluate defaults for 2.0. Where to embed this customization is up for discussion. Though since #1768, new opportunities opened up. It used to be bittersweet when adding a new default exception mapper, but now that they can be easily overridden, it is no longer an issue. Spit-balling here but here's a possible game plan:\n   1. Create EmptyOptionalException that is thrown at current location.\n   2. Create default mapper to handle this exception\n   3. If default exception is not good enough, register a different exceptionmapper\n3. What happens / should happen when a null Optional is returned? EDIT: looks like 204, but need to confirm\n. Awesome PR, did a quick glance and everything looks top notch.\nI'm going to let this PR sit for a little bit as I mull over some of the implementation (like better enum validation messages).\n. Updated release notes in b1c563e2\nThanks for the huge effort, @cmicali \ud83d\ude04 \n. Something doesn't look right, are there supposed to be that many commits?\n. Hmm, my git-fu may be failing me but I think #1664 is the only thing that needs to be applied to master:\ngit log v1.0.1 --merges --since='2016-07-26'\nyields only the mentioned pull request and\ngit log --grep 'cherry pick' --invert-grep  v1.0.1 ^master --cherry --before=$(date -I -d \"yesterday\")\nyields a the mentioned pull request and a false positive.\n. Thank you for being such a long time user of Dropwizard! Stories of such usage is very heartwarming.\nForewarning, I'm not expert in HK2 or Spring, but it looks like the dropwizard-guice project accomplishes what you want (ob. for guice not Spring). I'd recommend examining the project. These lines and these lines should be a good start \ud83d\ude03 \n. Have you tried looking at Spring/HK2 Bridge, like how dropwizard-guicey uses guice-bridge in their GuiceFeature to modify the service locator? It certainly looks like one can inject their own service locator.\n. Has this been resolved?\n. Closing this issue as it seems to have gone stale. We'd love to see Spring interop documented but we're not avid spring users so the community will need to step up. Jersey 2.26 may have changed the interop scenario as well. If discussion continues on this issue, we're happy to open it back up.. I can confirm that this is a bug affecting v1.0.1\n@m-at-nu correctly identified where the bug was introduced.\nI can also confirm that checking out the 1.0.x branch, the following command fixed the issue\ngit revert -m 1 e7c16c97\n. Actually, it looks like I just had to add it in the AppVeyor UI, it may not require any permissions at all from us. I'm going to go ahead and merge this so we can see. It should pass\n. While appveyor built on the code on master, looks like it may have not added it as a check to pull requests:\nLike @jplock said, some additional configurations may be needed for the dropwizard account. For my account and projects, I have:\n\n\nIt's definitely possible to add AppVeyor as a check. Take a look at any of the Json.Net pull requests\n. Thanks for pointing out the deficiency in the docs. I can take a look and fix it up.\nTo help me out, do you mind elaborating on your use case for determineStatus?\n. Yeah, you're looking at the guy responsible for your pain, I apologize (PR: #1251)\nConstraintViolations#determineStatus was moved to the jersey sub-module ConstraintMessage#determineStatus because the status code no longer relies on just the constraint violations, but it also depends on the resource endpoint where the violation occurred. The previous ConstraintViolationExceptionMapper has been moved to JerseyViolationExceptionMapper, and since it looks like you're defining your own exception mappers you should be able to create your own ExceptionMapper<JerseyViolation> and call the new determineStatus\n. ExceptionMapper<JerseyViolationException>: a JerseyViolationException contains getInvocable \ud83d\ude03 \nA JerseyViolationException extends ConstraintViolationException\n. Glad to hear it! I'm going to keep this issue open until the docs get updated. Thanks for report\n. Nice, did you want to send a PR to fix this?\nIs it possible to write a test to ensure that this doesn't regress in the future?\n. This may be enough of a unit test (it'll fail without your PR) \ud83d\udcad \n``` java\npublic class RequestLogFactoryTest {\n@Test\npublic void isDiscoverable() throws Exception {\n    assertThat(new DiscoverableSubtypeResolver().getDiscoveredSubtypes())\n        .contains(LogbackAccessRequestLogFactory.class);\n}\n// ...\n\n}\n```\nThere are other tests worth looking at in dropwizard-logging\n. imo, for me, the end goal is to allow endpoints to look like:\njava\n@GET @Path(\"/long\")\npublic Response receiveLong(@QueryParam(\"long\") LongParam longParam,\n                            @QueryParam(\"long2\") Optional<LongParam> longParam2) {\n    return Response.ok().build();\n}\nWhere the optional is either filled or absent (can't be null) and the LongParam can't be null either. Eliminate a whole class of bugs.\nIt was only until recently that Dropwizard could validate *Param annotations and the most reasonable way to do so was through utilizing @UnwrapValidatedValue. Yes it is experimental and yes we've been burned by it, but it's better than nothing[citation needed]\nI'm partial to your solution of interpreting certain subset of classes or endpoints differently to reduce verbosity (choice 3).\n. Closing this issues as it appears due to staleness. The provided workaround should be sufficient.. My anticipation is that for the next release on master (1.1) we'll be targeting Jackson 2.8\nThis may be worth considering for 1.0.x.\n. Sorry for the late response but this doesn't sound like an issue with dropwizard and may a more appropriate post in dropwizard-users list. Kids, the danger of copying + pasting :blush:\nGood catch!\n. Updated release notes in 6963cb952\n. Two possible solutions:\n1. Set ServerProperties.OUTBOUND_CONTENT_LENGTH_BUFFER -- from stackoverflow\n2. Use ChunkedOutput, which may be a better idea as it will output the headers immediately.\nYour endpoint becomes\n``` java\nfinal ChunkedOutput output = new ChunkedOutput<>(String.class);\nexecutor.execute(() -> {\n    try (ChunkedOutput out = output) {\n        for (int i = 0; i < 100; i++) {\n            out.write(RandomStringUtils.randomAlphabetic(100) + counter.incrementAndGet());\n            out.write(java.security.AccessController.doPrivileged(\n                    new sun.security.action.GetPropertyAction(\"line.separator\")));\n            Thread.sleep(500);\n        }\n    } catch (InterruptedException | IOException e) {\n    }\n});\nreturn output;\n```\n. Thanks for the report, duly noted.\nAny reasons why you're not preferring the documentation recommended GrizzlyWebTestContainerFactory?\n. This should be closed by the update to jersey 2.27 (on master). Let us know if still a problem. No sorry, Jersey 2.27 required a breaking change so we're still in the process of deciding what else should be included in the next release \ud83d\ude04 . Are you using Dropwizard 1.0.2? I believe this issue was fixed recently  (by #1718)\n. Looks good, thanks for the clarification.\n. 1.0.x release notes updated in bdc1993d\n1.1.0 release notes updated in 46a00cba\n. Added the test case. Writing it made me kinda wish that we had a dedicated spot for integration tests, and I didn't want to pile on additional tests in dropwizard-example \ud83d\ude15 \n. Yeah, imo I should update the docs in this PR too\n. Looks like even Jersey code doesn't standardize on whether to annotate exception mappers with @Provider, so as far as I'm concerned this is ready for further review/merge.\n. @jplock done, 89ab17b88345e76f5b35eb1fc526679235e2dc6b \ud83d\ude04 \n. Updated release notes in 9a41974\n. Yup that makes perfect sense since the tests fail on HTTP2 module. Do you know what the profile should be?\n. Ok, I'm testing it locally -- just finished getting a u111 machine. I'll push if it works.\n. Build passed, so I'll close this, but it does look like there were a bunch of test failures...but they didn't fail the build \ud83d\ude15 \n. Yup, sure thing. I ran the test suite and everything passed, and catch code was never executed. Since the removed lines of code only had special handling with IOExceptions, which was fixed in 2.8.3 the test case returnsA400ForMalformedInputCausingIoException is kinda a misnomer now (it's a wrapped IOException).\nAlso no need to override the method anymore because it is the exact same as the parent.\n. I know for #1768, dropwizard-e2e would have been the preferred test implementation because it is a much more realistic integration test.\nI'm fine if we can find a theme for each application. Might have to ponder possible themes.\n. Updated release notes in 00cc42f62\n. Sorry for the non-response you've received on this issue. I'm optimistically hoping that you've solved it in the meantime.  You can see how we create the @Session param in SessionFactoryProvider. Pushed a commit to fix the style issues and added explicit test case that'll close #1005\n. Rebased PR on master, this should be good to go once Travis gives the green light!\n. Yeah maven is having some problems with their certificates\n. Looks like there is now a test failure with the view integration, I'll have to look into and report back.\n. Ok fixed previous issue by specifying that the view produces html.\nI've also changed the exception mapper that looks for the view render exception. cc @acwwat and @dren-dk to get their insight and see if they prefer this approach (and if so, it'll need to be documented).\n. I'm not sure how common ExtendedExceptionMapper is, but it's common enough to warrant a mention in the jersey docs (emphasis mine).\n\n[ExtendedExceptionMapper] can for example check the exception parameters and based on them return false and let other provider to be chosen for the exception mapping.\n\nBy defining an WebApplicationException mapper in dropwizard-views, it would override the WebApplicationException logic found in LoggingExceptionMapper. Which I can see as undesirable for those who were previously relying on that behavior.\nIt should be preferential to have exception mappers that target specific exceptions (in App1 case, MustacheNotFoundException), but since the exception thrown is a  MustacheNotFoundException wrapped in a WebApplicationException I used ExtendedExceptionMapper. I realize that it is not 100% necessary, but since others may look to dropwizard-e2e or dropwizard-example for code examples I'd rather it keep unexpected behavior (eg. overriding LoggingExceptionMapper web exception behavior) to a minimum.\nSo yes, I think ViewRenderExceptionMapper should be updated as well.\nThank you for the code review, I've updated the code to just remap MustacheNotFoundException to 404.\n. I've moved the discussion/issue about ViewRenderExceptionMapper to #1837, as to not impede this PR.. Updated release notes in 361218c570d. Closing as this is fixed.. Hey @jroitgrund thanks for your interest. Not sure I understand the applicability of logging an error on a redirect. If this is a requirement for the site you're working on, prefer creating a custom exception mapper.\n. If one's endpoints don't return Response, the way to communicate a redirect is through a WebApplicationException\n. Closing as it the issue seems resolved.\n. Would this be a better solution for #1674, or are these two different problems?\n. Ok I'll cave to adding the submodule. My initial plan was not to add a submodule because many dropwizard submodules that users have to manually import have additional third party dependencies, mustache, forms, hibernate, client, etc. Since certificate reloading doesn't require additional dependencies I wasn't sure if another submodule was appropriate, but I'll move the classes to dropwizard-ssl-reload (or another name, if preferable)\nOn atomic updates. Good point. It's entirely plausible that the keystore could have been swapped out for one with a different password, causing the reload to fail. A failure to reload is tragic. No future connections are allowed (I tested this). Like you alluded to, it's a scary thought to hot reload a certificate and break all functionality.\nBut on one hand, if the app was restarted, it would break as well. The app wouldn't start. If we could fallback to the previous configuration we could keep the app chugging along, but at the cost it failing at the next restart. It's debatably a reasonable response. A 500 status code could inform the admin to examine the new certificate information before the next reboot that would force usage of the new certificate.\nSince an SslContextFactory doesn't have a way to clone itself, I purpose we first test the configuration is valid by constructing and loading a new instance of SslContextFactory and only if all instances succeed, do we reload the real SslContextFactorys.\nEDIT: This post was me thinking about loud, no need to respond to anything \ud83d\ude1d \n. Unfortunately none of the classes can go in dropwizard-jetty as Task and Bundle are defined in modules that import dropwizard-jetty. I'll play with it some more.\n. Is it awkward that I put the code in dropwizard-core? It's the only module that pulls in jetty for SslContextFactory, dropwizard-servlets for Task, core for Bundle. I'm still open to dropwizard-ssl-reload as well.\nAlso looks like coveralls doesn't do cross module code coverage, so my tests in e2e (which allows the most realistic and integrated testing) count against our code coverage  \ud83d\ude2d \n. Added the documentation.\nPR is in a pretty good spot, but additional reviews/comments/suggestions welcomed \ud83d\ude04 \n. Cleaned up the commit history and made this PR first in the release notes because it seems like something we might want to highlight \ud83d\ude08 \n. More information will probably be needed. \nDW 1.0.3, Centos 6.x, Postgres 9.5 handling 50 req/s is fine. Below graph is current connection pooling stats.\n\nI have also have an app using MySql 5.5 but with DW 0.8.x not leaking connections.\nBoth apps use JDBI\n. Dropwizard internally uses the tomcat jdbc pool, and dropwizard is pretty dumb. It configures tomcat properties from the config, starts the pool with a wrapper, and passes that right to jdbi.\nIf you're confident there is a bug, I'd first try and see which library is at fault and isolate them with your app, so use JDBI without a pool. Or use the pool without jdbi.\n. I think it would be worthwhile to have a test in dropwizard-e2e/src/main/java/com/example/app1 showing that the behavior can be changed.\n. Is this issue related to #1699 / #1686?\n. If I recall correctly, this is a limitation of the HiberateValidator, but I'd love to be proven wrong \ud83d\ude04 \n. Yes unfortunately you'll need to figure out a workaround with the mutually exclusive group validations. . Does #1820 address any of your concerns?\n. So I pushed a changeset (and it will break travis, so don't be alarmed). The issue is that it may break clients who rely on catching ConstraintViolationException. If the ConstraintViolationException (or another unchecked exception) is wrapped, it becomes harder to catch, as one has to catch RuntimeException and look at the cause.\nLet me know if you think I'm missing something. If not, I'll fixup the deprecations but keep the same behavior for those who may be relying on unwrapped unchecked exceptions.\n. Old behavior reinstated. Should be ok to go \ud83d\udc4c \n. I was thinking about this the other day too, and I couldn't find a reason why AssetServlet shouldn't derive from DefaultServlet (Not too familiar with the intricacies/implementation predates me). If you or someone else would like to investigate, I'd definitely be open to a PR that reworked AssetServlet or another complementary class. . Today I learned that Jersey doesn't accept lambda ExceptionMappers \ud83d\ude1e (that's why travis failed earlier, for the curious few). Please see #1847, which uses your example to show how to use dropwizard-forms.. Closing this as OP has not responded and #1847 should been a good enough example. Looks like as you found, there are ways to support this already, but I'm sure we'd be happy to accept code that'll make this easier for either a third party module or through dropwizard itself.. The idea for adding multi-tenancy in hibernate orm in dropwizard is a good and sound, it'll require an outside contributor to champion the cause all the way to a PR. If there is renewed interest in this topic, the issue can be re-opened. But until then, there is a workaround and this feature has proven to not be a high priority for time constrained dropwizard maintainers, and so will be closed. . Yeah that'd be a fine contribution, as long as everything remains backwards compatible \ud83d\udc4d . Updated release notes in 31068e5b and 94fd90f41. @arteam, I think this is actually a bug on our end as if I set registerDefaultExceptionMappers: false in the config, curl reports the following headers:\n< HTTP/1.1 405 Method Not Allowed\n< Date: Sat, 28 Jan 2017 05:40:23 GMT\n< Allow: POST,OPTIONS\n< Cache-Control: must-revalidate,no-cache,no-store\n< Content-Type: text/html;charset=iso-8859-1\n< Content-Length: 250. I have a fix for this, I'll submit a PR later today for review.. Is there a test case for this so we don't have a regression in the future?. Ok, just curious if this bug was encountered in the wild or more theoretical.. In that case, I would like to see a test case \ud83d\ude04 \nThat exception mapper is going to see an update when Jackson 2.9 comes out and I just want to make sure that there would be no regressions.. Ah sorry, I wasn't clear. The test case should send a payload to a resource endpoint so that the exception mapper would be triggered as it naturally would (see sibling test cases). Yup, I agree with everything you say. The fix is obvious. What's not obvious is when we bump to jackson 2.9 and refactor the class if the bug will reappear, hence I ask for a test case using Jersey endpoints and JSON payload \ud83d\ude04 . Here's the plan\n\nI'll apply the null check to the code\nThe test case, while exercising the theoretical bug does seem a bit contrived. For now, I won't apply it\nI have a hunch, which I may explore, that a custom deserializer could cause said behavior to be exhibited.\n\nThanks for the code review \ud83d\ude04 . I think one of the strongest arguments for including it in 1.1 is time. Based on previous trends, Dropwizard is on a release cycle of 8-10 months between major versions with bugfixes being released as needed in between. I'm counting dot releases (eg. \".9\") as a major release. The time frame is not necessarily bad, as it means an equally as long support cycle. There is no set release schedule for future minor and major releases, so I can only assume minor releases will continue to be released on the same schedule with painful backwards incompatibility reserved for 2.0.\nI can see how it would be frustrating to have a code change held back simply because it introduces a tangible amount of backwards incompatibilities. Especially if these backward incompatibilities are minimal. As a user of Dropwizard, I expect to evaluate every minor version (especially because of the infrequency of release) for updates necessary for my code. Dropwizard is glue code -- code that glues together high quality libraries. It would be infeasible to abstract away whole libraries to insulate the user from changes (and consequently features) to be compatible with semantic versioning.\nI also find semantic versioning a rule for libraries and more of a guideline for frameworks. \nAnother library that is approaching a backwards incompatible change is JDBI, and the next version appears to be a major update (and arteam can speak more to this). This this would entail all JDBI users to put forth a relatively large amount of work to upgrade, this would be a good candidate for Dropwizard 2.0 (even if the JDBI code in Dropwizard doesn't change that much, it's the JDBI code in the users of Dropwizard that matters). In the meantime, we could have a community maintained \"dropwizard-jdbi3\" module for users that want jdbi3 features earlier than Dropwizard 2.0. I don't think it would make sense to have a \"dropwizard-hibernate-52\" module if the backwards incompatible changes are small.\nAt the end of the day, while Hibernate 5.2 does technically break backwards compatibility, but if it's a relatively minor change (and it can be documented) Hibernate 5.2 should be included in Dropwizard 1.1.. Heads up, I ran this branch on appveyor (windows ci) and it passed\nBy the way, Dropwizard has an appveyor.yml in the repo if one of the owners want to allow permissions, so it'll build all commits \ud83d\ude0b . Not sure when this was solved but it appears fixed \ud83d\ude05 \n\n. Yeah the folks behind Jetty make it sound like there would be a performance improvement as well (using HAProxy as an ssl terminator). It'd be interesting to quantify these statements \ud83d\ude04 . I did some performance tests with the new unix socket connector based on #1893. Individual requests seem to work fine, but when under a stress test (from wrk) I start receiving many errors:\norg.glassfish.jersey.server.ServerRuntime$Responder: An I/O error has occurred while writing a response message entity to the container output stream.\n! java.io.IOException: Broken pipe\n! at jnr.enxio.channels.NativeSocketChannel.write(NativeSocketChannel.java:93)\n! at org.eclipse.jetty.io.ChannelEndPoint.flush(ChannelEndPoint.java:279)\nEven using the latest snapshot of 9.4.1 didn't seem to fix these errors. This is probably not the issue to report this problem, but I wanted to disseminate this info in case anyone was going to jump on the unix socket bandwagon \ud83d\ude04 . Potentially https://github.com/eclipse/jetty.project/issues/1263, but I'm working on a minimally reproducible test case using just jetty code.\nEDIT: Posted issue: https://github.com/eclipse/jetty.project/issues/1281. Work can begin on this again as https://github.com/eclipse/jetty.project/issues/1281 was solved by working around a bug in the underlying jnr library.. jetty-9.4.1.v20170120  is out and fixes the timeout issue, though it doesn't fix the bug where socket errors arise under load. > I don't know anything about socket errors under load, haven't done any performance testing.\nDon't worry, I did the load test in the jetty issue: https://github.com/eclipse/jetty.project/issues/1281 and no errors arose. . Yeah an relying on an experimental feature would be shaky. I'm in favor of closing and re-evaluating in the future.. Closed by #1905, released in 1.0.6. oops \ud83d\ude0a \nGood catch, fixed.. Updated release notes in 95c0468. Updated release notes in 54a19500. Closing as a dupe. I'd say this makes sense to add. Are you interested in tackling this or is this just a feature request \ud83d\ude03 ?. We'll also need to include whatever breaking changes were introduced in https://github.com/dropwizard/dropwizard/pull/1871, no?. This like a very reasonable improvement to track, thank you for the submission.. The ConstraintMessage class would be where you want to start (and it's corresponding class ConstraintViolationExceptionMapperTest, though feel free to create additional classes as needed).\nAnd if you're feeling really ambitious, we want some kind of mechanism to extend/customize validations to support use cases like #1782. I actually wasn't able to reproduce the issue. The validation annotations are being used. Here's the interface and resource\n```java\n@Path(\"/valid2/\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic interface RestInterface {\n    @POST\n    @Path(\"repr\")\n    @Valid\n    ValidRepresentation repr(@NotNull @Valid ValidRepresentation representation,\n                             @NotNull @QueryParam(\"interfaceVariable\") String xer);\n}\npublic class ValidatingResource2 implements RestInterface {\n    @Override\n    public ValidRepresentation repr(ValidRepresentation representation, String xer) {\n        return representation;\n    }\n}\n```\nFrom my following test case diff\n```diff\ndiff --git a/dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java b/dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java\nindex a6ee3e2..b3b11bd 100644\n--- a/dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java\n+++ b/dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java\n@@ -6,6 +6,7 @@ import io.dropwizard.jersey.DropwizardResourceConfig;\n import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest.Example;\n import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest.ListExample;\n import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest.PartialExample;\n+import io.dropwizard.other.ValidatingResource2;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -27,13 +28,13 @@ import static org.junit.Assume.assumeThat;\npublic class ConstraintViolationExceptionMapperTest extends AbstractJerseyTest {\n-\n     private static final Locale DEFAULT_LOCALE = Locale.getDefault();\n @Override\n protected Application configure() {\n     return DropwizardResourceConfig.forTesting(new MetricRegistry())\n             .packages(\"io.dropwizard.jersey.validation\")\n\n\n.register(new ValidatingResource2())\n                 .register(new HibernateValidationFeature(Validators.newValidator()));\n     }\n\n@@ -79,6 +80,15 @@ public class ConstraintViolationExceptionMapperTest extends AbstractJerseyTest {\n     }\n @Test\n\n\npublic void postInvalidInterfaceEntityIs422() throws Exception {\nfinal Response response = target(\"/valid2/repr\").request(MediaType.APPLICATION_JSON)\n.post(Entity.entity(\"{\\\"name\\\": \\\"a\\\"}\", MediaType.APPLICATION_JSON));\nassertThat(response.getStatus()).isEqualTo(400);\nassertThat(response.readEntity(String.class))\n.isEqualTo(\"{\\\"errors\\\":[\\\"query param interfaceVariable may not be null\\\"]}\");\n}\n+\n@Test\n     public void returnInvalidEntityIs500() throws Exception {\n         assumeThat(Locale.getDefault().getLanguage(), is(\"en\"));\n\ndiff --git a/dropwizard-jersey/src/test/java/io/dropwizard/other/RestInterface.java b/dropwizard-jersey/src/test/java/io/dropwizard/other/RestInterface.java\nnew file mode 100644\nindex 0000000..0ed5992\n--- /dev/null\n+++ b/dropwizard-jersey/src/test/java/io/dropwizard/other/RestInterface.java\n@@ -0,0 +1,23 @@\n+package io.dropwizard.other;\n+\n+import io.dropwizard.jersey.validation.ValidRepresentation;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/valid2/\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+public interface RestInterface {\n+    @POST\n+    @Path(\"repr\")\n+    @Valid\n+    ValidRepresentation repr(@NotNull @Valid ValidRepresentation representation,\n+                             @NotNull @QueryParam(\"interfaceVariable\") String xer);\n+}\ndiff --git a/dropwizard-jersey/src/test/java/io/dropwizard/other/ValidatingResource2.java b/dropwizard-jersey/src/test/java/io/dropwizard/other/ValidatingResource2.java\nnew file mode 100644\nindex 0000000..fbb555d\n--- /dev/null\n+++ b/dropwizard-jersey/src/test/java/io/dropwizard/other/ValidatingResource2.java\n@@ -0,0 +1,10 @@\n+package io.dropwizard.other;\n+\n+import io.dropwizard.jersey.validation.ValidRepresentation;\n+\n+public class ValidatingResource2 implements RestInterface {\n+    @Override\n+    public ValidRepresentation repr(ValidRepresentation representation, String xer) {\n+        return representation;\n+    }\n+}\n``. Actually this issue exists in 1.0.6, but will be fixed in 1.1.0. I'll add my previous snippet as a test case so we don't happen to regress at some point.. If I'm understanding you right, the request is to add an alias toResourceTestRule`:\njava\npublic Builder addResource(Class<?> klass) {\n    providers.add(klass);\n    return this;\n}\nto make it more understandable for those who register their resources the following way:\njava\n@Override\npublic void run(MyConfiguration config, Environment env) {\n    env.jersey().register(MyResource.class)\n}\nCorrect? \ud83d\ude04 . I tried it out, and it worked without needing an override\njava    \n@Rule\npublic final ResourceTestRule resourceTestRule = ResourceTestRule.builder()\n        .addResource(MyResource.class)\n        .build();\nSo I'm closing this issue as no longer necessary.. This might be best done as a configuration option in DefaultLoggingFactory instead of changing it for all dropwizard users, unless it can be shown that the change should be the default.. Thank you for the detailed bug report. I believe you and I have encountered the same issue. (and that would be awesome if it's related #1119)\nYeah, I understand it can be frustrating when nothing (of use) is logged and the app fails to start.. Thanks for filing a issue so we can track this improvement. I took a quick look at the migration guide. And since junit5 will support ExternalResource, it looks like the only code in dropwizard-testing that has to change (or be complemented) is ResourceTestRule which implements TestRule. I'm fine with having this in 1.1.0, but we'll need another RC (just it in case it wasn't planned) to ensure that this doesn't break an edge case \ud83d\ude04 . @arteam, not sure if this is normal, but it's been 6 hours since you tagged rc2 and and rc2 isn't out on maven central. The reason is that there is already a test table in some of the tests and so the CREATE TABLE test will fail. Whether it is because h2 isn't shutting down cleaning or tests are being executed concurrently, I'm not sure. The temporary fix would be to transform all CREATE TABLE test to CREATE TABLE test IF NOT EXISTS. Hey @j-baker, did you get a chance take a look at arteam's suggestions? Sound reasonable?. The recommended structure is only for when one plans on distributing a java library for other developers to access their API. For instance, if we were to imitate stripe's api we would setup our project as follows:\n\nstripe-api maven submodule. This project contains all the shared model code. The model is either used as a request or response object. For instance: com.stripe.model.Charge would be found here, as the server returns a Charge object to the client and client subsequnetly deserializes the payload into a Charge object on their end.\nstripe-app maven submodule is the Dropwizard app with server specific code\nstripe-client abstracts away the raw HTTP interactions and deserialization logic. The client library may also take care of connection pooling, and may provide a more friendly way of interpreting error messages. Basically, distributing a client library for your app will let other developers more quickly against the app.\n\nIf there is no reason to distribute a client library with your app then there is no reason to break up the code into different submodules. How to structure the code within a single project is a different matter. :smile:. The client package is used to house code that accesses other HTTP endpoints -- not your own endpoints. For instance, as client of Stripe, if we wanted to eschew Stripe's Java library and strictly access their HTTP JSON endpoints our own way, the code used for accessing / interpreting Stripe's API would be stored in the client package.\n\nit would be nice to clarify that the recommended structure make sense if you want your microservice to be easily consumable by other (Java) microservices\n\nThe easiest way to distribute access to your microservice is to document the API \ud83d\ude04 \nIn seriousness, and as an aside, there are many ways to create a client library, and it's made difficult because one often doesn't control the environment in which the client library is used. If we go back to our stripe example, they use java.net classes, which are low level and may be hard to get right, but at least one won't have to worry about dependency hell. Should one use jersey's client? Should one allow customizations to the jersey client? To shade or not to shade? I'm not sure what the current literature says about these questions, so I'm not going to make a statement how one should design their client apis.\nI'll see if I can't spruce up the documentation a bit with this conversation.. I'll leave it to log4j2 users to post if they've found a workaround, but I have no idea when a fix will be ready as I don't know where and why this bug is occurring.. Investigated some more. This is not tied to log4j2, setting dropwizard-example test-example.yml to have\nyaml\nlogging:\n    level: TRACE\nwill cause the failure. \nDEBUG will not cause the failure.\nA failure only on a TRACE level is bizarre, I git grep 'isTraceEnabled' on hibernate validator (Dropwizard has no isTraceEnabled statements) and nothing stood out that it would involve a cast.\nAs a temporary fix, like @maksymgendin mentioned, one can set hibernate level to a level higher than TRACE\nyaml\nlogging:\n    level: TRACE\n    loggers:\n       \"org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree\": DEBUG\nThis naturally leads me to suspect that issue is with the isTraceEnabled statement in CosntraintTree \ud83e\udd14 . Reported upstream as HV-1352. Dropwizard users can use the provided workarounds until fixed upstream.. I just wanted to chime in and say that I can reproduce this and the behavior is a bug. I'm not sure what the fix should be. One possible solution is to combine request logging and regular logging (relevant issue #1731), so that when logging is stopped, request logging is also stopped.\nThanks for the report and the test case.. At a high level, I think this would be useful behavior, but also a large undertaking to generalize and get right. At the current stage, one might be better off customizing their own AbstractServerFactory to explicitly call out the swagger integration.. Wow, I'm shocked, yet at the same time, not surprised \ud83d\ude04 \nI can take a peek at the validation code, but I can't think of what's needed to be fixed. We may have to file a request with the upstream Hibernate validator project, and document the conditions and the workarounds you mentioned. Thank you for the detailed report!. @scottaj that's an interesting workaround and is probably worth having in the main code to prevent the user from shooting themselves in the foot. The only things worth changing for our use case would be to detect any javax.ws.rs annotation (and those on implemented interface) and IIRC we use classmate instead of org.Reflections. Please check that your entities are properly annotated. This is just one example\n```java\npublic class SnakeRepresentation {\n    private String myName;\n@JsonProperty(\"my_name\")\npublic String getMyName() {\n    return myName;\n}\n\n@JsonProperty(\"my_name\")\npublic void setMyName(String myName) {\n    this.myName = myName;\n}\n\n}\n```\nAlso please use the mailing list for these types of questions. We prefer to keep the issue tracker only for bugs/features related to dropwizard \ud83d\ude04 . I think this is a fine change. For my curiosity did you have a use case where allowCoreThreadTimeOut mattered and the keepAliveTime wasn't sufficient?. Thank you for such an explanation. Looks good to me.. If every time you start your app, a field will always have the same value, then you are correct that you can do away with the configuration aspect of that field, and leave it hardcoded in the project.\nIt's only when you expect this field to take on different values on start up (think of accessing a DB on localhost vs a remote host) that it is helpful. The default value of the field could be \"localhost\" so that when the DB is deployed on localhost one can omit: db_location: localhost in their yaml file. Yet when the DB is moved to a different box, instead of having to recompile the application with the new location (if we had hardcoded it), one can just add db_location: <ip> to the configuration to override the default.. Closing this as the original question appears answered. If not, and this is an issue with the Dropwizard project, let me know and I can re-open the issue.. Considering Hibernate 5.2.10, SLF4J 1.7.25, and Logback 1.2.3 are bug fixes that dropwizard users are running into, are they candidates for a 1.1.x?. 0.6.2 contains ResourceTest which you may be able to configure the jersey test to use an actual servlet container.\nSince 0.6.2 isn't supported anymore I'm going to close this issue, as if it is not possible in 0.6.2 the feature won't be backported, but feel free to respond with the answer once you've confirmed it so that others in the same situation as you will benefit.. Closing this as the original question appears answered. If not, and this is an issue with the Dropwizard project, let me know and the issue can be re-opened.. @janbartel, I tried swapping AbstractHandler for AbstractHandlerContainer, but I can still repro @orangecoding's bug. Am I missing something? I looked at HotSwapHandler for a bit of guidance. I've included the diff done to our own RoutingHandler\n```diff\ndiff --git a/dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java b/dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java\nindex 4281ec6..6d7461b 100644\n--- a/dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java\n+++ b/dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java\n@@ -3,15 +3,17 @@ package io.dropwizard.jetty;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Handler;\n import org.eclipse.jetty.server.Request;\n-import org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.AbstractHandlerContainer;\nimport javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n-public class RoutingHandler extends AbstractHandler {\n+public class RoutingHandler extends AbstractHandlerContainer {\n     /**\n      * We use an array of entries instead of a map here for performance reasons. We're only ever\n      * comparing connectors by reference, not by equality, so avoiding the overhead of a map is\n@@ -29,6 +31,7 @@ public class RoutingHandler extends AbstractHandler {\n     }\n private final Entry[] entries;\n\n\n\nprivate final Handler[] handlers;\npublic RoutingHandler(Map handlers) {\n     this.entries = new Entry[handlers.size()];\n@@ -37,6 +40,9 @@ public class RoutingHandler extends AbstractHandler {\n         this.entries[i++] = new Entry(entry.getKey(), entry.getValue());\n         addBean(entry.getValue());\n     }\n+\n+        final HashSet handleSet = new HashSet<>(handlers.values());\n+        this.handlers = handleSet.toArray(new Handler[handleSet.size()]);\n }\n@Override\n@@ -53,5 +59,17 @@ public class RoutingHandler extends AbstractHandler {\n         }\n     }\n }\n+\n+    @Override\n+    public Handler[] getHandlers() {\n+        return handlers.clone();\n+    }\n+\n+    @Override\n+    protected void expandChildren(List list, Class<?> byClass) {\n+        for (Handler handler : handlers) {\n+            expandHandler(handler, list, byClass);\n+        }\n+    }\n }\n\n\n```. @t-tsutsumi thanks for the tip! That is what I was missing. I guess I didn't want to wait the default 11mins for a scavenge.\nEDIT: @t-tsutsumi you're solution is better, so feel free to create the PR whenever you're ready \ud83d\ude04 . @janbartel sorry, it does work! I just didn't wait 11minutes. After I set the house keeper to 5 seconds, it's working.. Closed by #2032. Updated PR with the suggestions \ud83d\udcaa . \ud83c\udfac 2\n@evnm went with a slightly different approach and tried to make the description for clear and concise.\nLet me know if this was a step in the right direction.. Yes. Closing this as the question appears answered. If not, please respond to re-open.. Hey, that's a good start! You're right that supporting arbitrary return types for errors has been a pain point. I'm open to improvement, as long as backwards compatibility is kept.\nTo get around the AbstractParam issue, it may prove prudent to define a custom exception and exception mapper and have parse wrap the thrown exception (and those that create their own abstract parameters and override the error method will need a migration path) . Thinking about it a little longer, I think if one provided a MessageBodyWriter that produces html for ValidationErrorMessage, ErrorMessage, etc, that would get one pretty far and ErrorResponseProvider wouldn't be needed.\nI don't remember how Jersey determines the content type if it is not specified in the builder \ud83e\udd14 . Yeah if you want to prove it out with dropwizard-views that would be a good start! I can imagine people who are not using dropwizard-views interested as well.. Closing this as the original question appears answered. If not, and this is an issue with the Dropwizard project, let me know and the issue can be re-opened.. Dropwizard also ships with a OAuthCredentialAuthFilter, which you can take inspiration from.. Yeah, nothing erroneous stands out to me.\nSome of the things I'd try for:\n\nDoes DashboardCredentials implement Principal?\nRemove Hiberate\nRemove authorization\nReturn a dummy authentication object\nEnsure the filter is firing and works as expected. The suggestions are temporary to help narrow the problem to determine whether it's a user or a dropwizard issue.. So, I'm still thinking, but is there any reason why DashboardAuthenticator doesn't implement Authenticator<DashboardCredentials, DashboardUser>\n\nEdit and have DashboardUser implement Principal. You see AuthFilter#authenticate how it calls setSecurityContext? Your custom filter needs to either call the super method or set security context some other way.. No problem, happy to help \ud83c\udf7b . Hmm, I wasn't able to reproduce that behavior for v1.1.0 tag in the dropwizard-e2e module (where we do our end to end testings). I had the App1Test use the minimal config:\nyaml\nserver:\n  applicationConnectors:\n    - type: http\n      port: 0\n  adminConnectors:\n    - type: http\n      port: 0\n  requestLog:\n    appenders:\n      - type: console\n      - type: file\n        threshold: ALL\n        logFormat: \"%h %l %u [%t] \\\"%r\\\" %s %b \\\"%i{Referer}\\\" \\\"%i{User-Agent}\\\"\"\n        currentLogFilename: test-requests.log\n        archive: false\nAnd all requested endpoints were logged:\n\n127.0.0.1 - - [02/May/2017:19:02:23 -0400] \"GET /empty-optional HTTP/1.1\" 204 0 \"-\" \"App1 (test client 1)\"\n\nIs it possible to make a small reproducible case or provide more information?. Closing this as the question appears answered. If not, please respond to re-open.\nThank you @t-tsutsumi for the great insight . I've made a PR to document this in #2596. Closing this as the question appears answered and fixed. If not, please respond to re-open.. All usages of @Validated must be accompanied by the corresponding @Valid annotation.. Hmm, I can't seem to reproduce this, the validation works as expected.\nDouble check that the following line is needed (I'm not familiar with it)\njava\nenvironment.jersey().enable(\n                \"jersey.config.beanValidation.enableOutputValidationErrorEntity.server\");\nAlso what version of dropwizard?. - Does Dropwizard 1.1.x solve this issue (it shouldn't have an effect, but good to test)\n- Can you modify ValidatingResource.java to produce a test case that fails?. Hello, this question may more appropriate for the dropwizard-users group. You may also find this stackoverflow question useful.. Hey the fix is to do:\njava\n    @POST\n    @Path(\"fooValidatedAndNotNull\")\n    public ValidRepresentation blahValidatedAndNotNull(\n        @NotNull(groups = Partial1.class) \n        @Valid @Validated(Partial1.class) \n            ValidRepresentation representation) {\n        return new ValidRepresentation();\n    }\nNotice the NotNull has groups specified. This is more of a docs issue, I believe!\nThank you, by the way, for the pull request. Makes replicating errors a lot easier \ud83d\ude04 . I'm going to keep this PR open as a reminder that I need to update the docs \ud83d\ude04 . Suggestions applied \ud83d\udc4f \ud83c\udf89 . Related:\n\nWe have Jackson class for configuring ObjectMapper\nWe have BaseValidator and Validators for Hibernate Validator\nWe don't seem to have anything configuring a DBI!\n\nI only bring this up, as I always seem to forget to register the appropriate jdbi mappers, containers, etc in my test cases. \ud83d\ude25 \nMaybe both of these problems can be solved with a new + configure mechanism like the Jackson class \ud83e\udd14 \n. If I understand you correctly, you should be able to create a factory that does not derive from DBIFactory and returns your custom DBI instance, no?. > The issue there is I would lose all the nice setup DropWizard does\nYes, that is why I mentioned the new + configure mechanism, so that one doesn't need to sync anything for DBI instances.. > I think there is a way I can get us both what we want\nPerfect \ud83d\ude04 . Oh no, I realized that I closed out of my browser too soon one day with a half finished reply. My apologies.\nIn brief, I had an idea of creating something akin to dropwizard-testing-jdbi where one would create a TestDBIFactory with sane defaults, eg:\njava\nfinal DBI jdbi = new TestDBIFactory.builder()\n    .driverClass(/* */)\n    .timeZone(/* */)\n    .newDbi();\nWith sane defaults, breaking changes would be small and if breaking changes are needed they should be ok as they are contained to a testing module. It's a DBI that I'm after, not a DataSourceFactory\nTake this use case:\n\nI have an application that uses a jdbi sql object with mappers, jdk8, and guava goodness\nAn endpoint that inserts into the database\nA test that that calls said endpoint.\n\nCurrently I can test that the that the expected output from the endpoint is received but I would also like to query the actual db to make sure the correct data was persisted. This fails when the test tries to use any feature that is normally set by Dropwizard or the application. If only there was a way I could create a DBI that the application uses so I can test easier \ud83d\ude09 . Awesome, let me update the PR to rebase the commit and remove \"WIP\" \ud83d\ude04 . Dropwizard 0.9 ships with Logback 1.1.3\nLogback 1.1.4 release notes contain\n\nrestores the current thread's interrupt flag when catching an InterruptedException\n\nDropwizard 1.0 and 1.1 use later versions of Logback. Correct, there is no way to currently configure the charset for loggers. The logging factories (ConsoleAppenderFactory / FileAppenderFactory) that use a LayoutWrappingEncoder would need to call layoutEncoder.setCharset() with the configurable option.\nThat said, if no charset is set, Logback will use the default charset. I don't believe LC_CTYPE tells you the default Java charset. Try printing out the default charset.\nSo my suggestions are:\n\nExplicitly set the charset to UTF-8 and see if that makes a difference\nAnd/or a pull request to add in a custom charset for loggers\n\n. Awesome, thank you so much!. I believe you're talking for the request log:\nyaml\nserver:\n  requestLog:\n    appenders: []\nYou may update the log format as well to only print the url path and not query parameters.. I guess I'm not sure what you are talking about when you mention a particular logger. The request log is a single logger. One can't filter specific endpoints from being logged out of the box (not without creating a custom logger). @mattnelson great suggestion! This feature should definitely receive more attention in our docs, as it something even I forget about \ud83d\ude0a . Correct, by default, only logs get written to stdout, but you may add in file loggers.. Ah, it appears that the SizeAndTimeBasedRollingPolicy doesn't seem to be working\ncc @qinfchen to see if they've also encountered the same issue.\nTemporary workaround would be to remove %d from the logFilenamePattern.. @charbonnier666 I may have fixed it in a branch, did you want to try it out?. I'll make a PR so that the fix is in master, but until then.\n\nCheckout my branch\nmvn install\nbuild your project on the same box using 1.2.0-SNAPSHOT.. @charbonnier666, I adapted the test on the v1.1.1 tag and the unit test passed, so my initial thought is that this should already work for v1.1.1. @TheSprtCz I can't repro this with the following code:\n\njava\n@Path(\"/\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class TestResource {\n    @POST\n    public String secret(@NotNull @Valid SecretProject project) {\n        return \"\\\"Success\\\"\";\n    }\n}\n```java\npublic class SecretProject {\n    private ProjectUser user;\n@JsonProperty\npublic ProjectUser getUser() {\n    return user;\n}\n\n@JsonProperty\npublic void setUser(ProjectUser user) {\n    this.user = user;\n}\n\n@ValidationMethod(message = \"Only admin can have SecretProject assigned.\")\npublic boolean isUserAdmin() {\n    return user.getRoles().contains(\"ADMIN\");\n}\n\n}\n```\n```java\npublic class ProjectUser {\n    private Set roles;\n@JsonProperty\npublic Set<String> getRoles() {\n    return roles;\n}\n\n@JsonProperty\npublic void setRoles(Set<String> roles) {\n    this.roles = roles;\n}\n\n}\n```\n```bash\n$ curl -d '{ \"user\": { \"roles\": [\"ADMIN\"] } }' -H 'Content-Type: application/json' http://localhost:8080\nSuccess\n$ curl -d '{ \"user\": { \"roles\": [\"MANAGER\"] } }' -H 'Content-Type: application/json' http://localhost:8080\n{\"errors\":[\"Only admin can have SecretProject assigned.\"]}\n```\nIs there something that I'm missing?\n. Ah, I didn't realize this question pertained to Hibernate ORM -- my biggest weakness \ud83e\udd23\nMy only suggestions:\n\nTry disabling lazy loading in the HibernateBundle\n\nAsk around on the jackson or dropwizard mailing lists, as at first glance this doesn't appear to be an issue with dropwizard code (which simply deserializes the request body and then calls validation). My suggestion:\n\n\nLet jackson deserialize the request body into a POJO (this POJO doesn't have hibernate orm annotations)\n\nhibernate validator will validate said POJO\nin function, use orm and POJO together to get to desired object\nvalidate object\nthrow exception if object failed validations\n\nUnless someone with a deeper knowledge of hibernate + jackson informs us otherwise. To me, this is a good compromise between being explicit, readable, and concise.. Closing as presented solutions are the recommended approach.. Closed by https://github.com/dropwizard/dropwizard/pull/2277. Closing as the presented solution seems fine and dropwizard supports JSON log output since 1.3.0. Sorry to circle back to this issue so late, but everything should work fine. If not, upgrade to the latest dropwizard v1.3.x, post a reproducible example, and then we can examine if it's something dropwizard specific.. The first thing that comes to mind is that the client has two timeouts (timeout and connectionTimeout). Have you tried both?\nAlso to aid my understanding, are you saying that a SSL handshake error causes the timeout, vice versa, or are these two different problems?. I can't tell you how many times I've read that jira issue and each time I think I come away with a different conclusion based on recent comments. I guess I 'll leave this open for the time being, but if you come across a way that works please feel free to share and if we can do anything on Dropwizard's side to prevent these hung connections.. This was fixed in https://github.com/dropwizard/metrics/pull/1074 which landed in metrics 3.2.0, which is bundled in Dropwizard 1.1.0, so you will have to upgrade. Have you tried:\njava\n@ClassRule\npublic static final DropwizardClientRule DW_RULE =\n    new DropwizardClientRule(new FakeResource(), MultiPartFeature.class);\nIt's what I do \ud83d\ude0a \nBut you are right that DropwizardClientRule should probably accept bundles as well. Can you try with a newer version of dropwizard (1.1 or 1.0)?\nI ask as I'm running 1.0 and 1.1 and the above snippet of code works.. What version of java are you using to compile?\nCan you try updating to a newer compiler?\nEDIT: Oh, I see, mvn clean package works fine, but intellij doesn't \ud83e\udd14 . CC PR author: @manuel-hegner to see if they have any insight.. Switching to the eclipse compiler fixed the issue.\nIs there anyway we can get those tests to compile with out-of-the-box intellij?. What version of dropwizard are you running? If it is not 1.0 or 1.1, can you try either of these versions?\nI created a test and everything worked as expected:\n```java\npublic class MultiRepresentation {\n    @NotNull\n    @MaxSize(value = 10)\n    @JsonProperty\n    private Size size;\npublic Size getSize() {\n    return size;\n}\n\n}\n```\nThe MaxSize annotation is a custom annotation like yours.\n\nWhen size is null, the @NotNull triggers\nWhen size is more than 10 bytes, @MaxSize triggers. Ok, I'll need a either a test case that demonstrates this issue or a more fleshed out example.. Ah, I see, it's a custom annotation. Adding the invalid value to the violation message would defeat all caching attempts. I'm torn \ud83d\ude15 \n\nDoes this mean you in favor of removing the cache?. Thinking about this issue for a little bit, I've come to a conclusion. Removing caching to support custom validation annotations that include the invalid value in the message seems like it would cause more harm than good when focusing on performance (though I'm happy to be proven wrong).\nI'm open to making either ConstraintMessage or the exception mapper more easily extensible to exclude caching if there is enthusiasm for that (though a new issue should be created)\nIn the meantime, I'll close this issue as the behavior is as desired.. Thank you for an awesome pull request \ud83c\udf89 \nSomething that isn't obvious to me is how ServiceUnavailableRetryStrategy is related to NTLM authentication. If not required, it may be prudent to break that into another PR so those changes can be more easily digested and reviewed.. Your viewpoint makes sense. A server error should definitely not be the current behavior. Feel free to make a PR for it!. This was merged in #2193. Hey, thanks for the PR!\nCouple of things:\n\nI'm assuming that you want the ability to customize immediateFlush to increase logging performance, but at the cost of safety? Is this an optimization that you have found to actually be tangible?\nA test will be needed that confirms that property is actually set through the yaml configuration.\nDocumentation will need to be added in the configuration reference (and javadocs) that clearly states the appropriate trade-offs.. @natnan is this still an issue for you? Or have you just stuck with the classic request log implementation?. Sorry for getting back so late to this issue, but what @tmszdmsk alludes to is correct. Dropwizard itself adds servlet filters like ThreadNameFilter and AllowedMethodsFilter, which are not impacted by PolymorphicAuthDynamicFeature (a jersey feature). Closing as it looks like the question is answered. Let me know if not and if there is something that should be done inside Dropwizard.. Ah yes, that does look like to be an oversight, they should be more aligned! Yeah, I'll accept a PR for this.. Yes it is!. Don't worry, it's something the reviewer has to do on their end \ud83d\ude04 \n\nI've approved it.. Looks like there is no breaking changes, so I'm :+1: for upgrading to guava 23. Yes! This would be a nice improvement on the current docs. I read it and looks good, so once you finish up (kotlin -> java, etc), I'll go over it with a fine comb. . What about this link? http://docs.jboss.org/hibernate/validator/5.4/reference/en-US/html_single/#chapter-groups. I agree that this would be a jersey issue, though I wonder if there is a workaround involving optionals:\njava\n@FormDataParam(\"file\") Optional<InputStream> inputStream,\nI'm guessing it'll require a custom jersey body provider but it may be worth investigating \ud83e\udd14 . Based on your description, I'm not in favor of removing ValidationMethod as the proposed method doesn't seem to make it irrelevant.\nHowever, I approve of adding the proposed method to complement the current validation method. If this can fit within the current structure of the dropwizard then we can accept it as is. Else if third party dependencies need to be pulled in or if there is a significant performance penalty for those who don't opt-in to the new method, then I'd recommend making another module for encapsulation.. Is this a dupe of https://github.com/dropwizard/dropwizard/issues/1731?. Yup that's what I do. A file for the request log and a file for application log. Both are archived and rotated.. Closing this as the issue appears to be a dupe or solved, respond back if not. Yeah you can close this now or when #2395 is merged \ud83d\ude04 . Wow this is some pretty neat stuff. You might have to help me in evaluating this. I know you mentioned in the issue that performance could be an issue. I'm curious if adding a benchmark to dropwizard-benchmark is low hanging fruit, so we can get a read on this. I'm not a fan of black magic annotation hooks (the @Constraint(validatedBy =  SelfValidatingValidator.class)) as it might muddle some benchmarks, but I definitely understand.\nI'm also not entirely loving @SelfValidating, but I offer no better alternative \ud83d\ude04\nOverall, I think I'm fine with the javassist dependency, as the dropwizard-hibernate module uses it as well.. It just occurred to me. Would you use a custom ExceptionMapper<JerseyViolationException> for your @SelfValidation example, due to the caching nature of the default exception mapper? (Don't change your PR, just curious, as this got me thinking). > I'm in principle for using the correct naming for units \nAgreed.\n\nI'm also afraid of unintended breakage in the applications of Dropwizard users\n\nThe risk, I feel here, is pretty minimal. I feel like someone who cares about the difference between kilobyte and KibiBytes (and the like) would have recognized the misnomer and coded their expectations directly using SizeUnit.bytes with (1000) or (1024) as the base.. I don't know if we should bend over backwards to support the use case of\n```java\npublic void abc123() {\n    byte[] myBuffer = new byte[(int)SizeUnit.KILOBYTES.toBytes(1)];\n    readSomething(myBuffer);\n}\nprivate void readSomething(byte[] myBuffer) {\n    if (myBuffer.length != 1024) {\n        throw new IllegalArgumentException();\n    }\n    // ...\n}\n```\nSeems like we would need to expend a non-negligible amount of effort to try and seamlessly transition and deprecate everyone to new terminology.\nI'm also fine not rushing to a decision. 500 bytes can't be represented as a whole megabyte, so one would have to round to 0 or 1.. From that angle, it does look like the current behavior is flawed. Good find. To me, either the compareTo  or equals needs to change, and I'm leaning towards @isaki-x's solution.. Can you check if the sha1 of that file matches what is on maven central\n\n77de34824fc106d0903ee7c85ce85bedd99ca68b. Closing this as I'm assuming the question has been answered.. Uh this would not be good, especially as buildRx is just a one line wrapper around Jersey code.  \ud83d\ude1f \n\nIt'd probably either be an issue with Jersey or our ApacheConnector\nDoes eschewing the RxClient and just making callback async requests exhibit the same behavior?\n. Phew, good to hear. It's happened to me too \ud83d\ude0a . Thank you for reporting this. I'll mark it as \"blocked\" so we know that it is an upstream issue.\nI believe, other than dropwizard-migrations, everything else should work on Java 9. Quoting @mattnelson from an dev email chain (hope he doesn't mind :smile:)\n\nThe only change related to dropwizard I had to make was to add \"--add-modules java.xml.bind\". Closing this as Dropwizard v1.3.4 includes Liquibase 3.6.1, which should contain the missing commit. Respond back if this is still an issue.. Thank you for taking the time to publish these reports, the results fall in line with what I'd expect (good to see 100% backwards compatibility \ud83d\ude04 ). I don't believe there is anything actionable here, so I'll close this issue, but feel free to respond if something should be addressed.. Hey @AnDyXX, thanks for kicking this off! Much appreciated.\nI know that there is a lot of copied code from testing module that could be extracted to common testing library.\n\nIs it possible to achieve backwards compatibility for the current junit4 users with a common core module? If not, we'd have to wait for something like a major version bump to introduce this change.\nI'm guessing it's not possible to create the dropwizard-testing-junit5 as a tacked on module to dropwizard-testing (eg. users poms would look like)\nxml\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-testing</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-testing-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\nAs that might be the most preferable \ud83e\udd14 . Oh man, if I turn my nitpickiness up to 11, I prefer an inclusive argument over exclusive to avoid the explicit exclusive=false double negative. I believe \"inclusive\" also has fewer definitions than \"exclusive\", which might ease the impact on readability (as @FredDeschenes pointed out)\nThe error message becomes shorter\n\nmust be less than or equal (or less than if in 'exclusive' mode) to {value} {unit}\n\nbecomes\n\nmust be less than (or equal to in 'inclusive' mode) to {value} {unit}\n\nIdeally the correct operator (>= / >) would be present in the error message, so the user would know if upper bound is valid instead of the user checking the source to see if inclusive is enabled \ud83e\udd14 \nI'd prefer if this PR went through without touching all the duration annotations to keep potential bikeshedding down. I'm not sure how many annotations are affected, but if it's anymore than a handful then another PR is best.. Ah that does appear to be an oversight on our part. Would you like to create a PR with your proposed fixes? Keeping the current (though deprecated) constructor would make this improvement a logical candidate to be included in a 1.2.1 release.. For facilitation, what version of dropwizard are you using?. Sorry for such the delay, but I can confirm your findings: it appears that since Dropwizard 1.1.0 (I have Dropwizard 1.0.x app that reports it fine) those metrics are zero. It may be the difference between sync and async http clients, as I haven't controlled for that yet.. I just recently checked again and I must have been mistaken the first time (as I can see metrics dating back several years) where I can see non-zero metrics for both async and sync clients. So there is no bug here. Oftentimes the metric may report zero for short and fast requests.. Opened PR #2381 to add in the missing facilities.. Agreed, sounds like a useful configuration for those who need it. I'd consider a PR if you or someone else would like to create one.. Yeah, looks like an oversight. Apply your fix and if all the tests pass then I'd think it'd be good merge.. I'm not able to reproduce this. I have PR that I'll push that adds a test (tested on 1.1.6 and master) that triggers Jetty's EofException and the test confirms that that exception mapper is called \ud83e\udd14 . Hey @scho, are you still seeing this issue else I'll close the issue.. Cool! Has it found anything?. My knowledge is spotty, but I have an idea. Are you using Dropwizard Views? Currently only Freemarker supports builtin i18n, but one can implement their own ViewRenderer and Dropwizard will parse out the Accept-Language header and pass in the Locale where you can ResourceBundle as one normally would.. Hey Andy. Off the top of my head I know that Jetty's acceptor and selector threads are based on the number of CPUs. You can modify these as necessary. You can also adjust the number of threads Dropwizard uses to service requests with minThreads and maxThreads. Closing due to lack of information. Feel free to provide new information to continue the discussion.. I don't recall a reason why a ParamConverterProvider is missing for those. Probably an oversight. Did you want to take a crack at implementing it?. Upgrading Hibernate to 5.4.2.Final fixes #1990. I'm not sure if another 1.2.x release will occur, but this would be a good candidate to include if present.. From that blog post:\n\nwe\u2019ve had reports of almost a 10 times increase in throughput with Conscrypt!\nwithout the need to amend the boot path.\n\nI'm excited \ud83d\ude04 . Can you describe a scenario where an AssertionError is thrown?.  > But isn't that besides the point? If the code used in a task throws an Error, shouldn't it be logged a bit more aggressively than a WARN? I'd argue that an Error is more serious than a Exception, which is logged as ERROR?\nThe angle I was coming from were errors are so serious should they even be caught, logged, and responded to? But since LoggingExceptionMapper essentially catches Throwable -- to be consistent one would expect tasks to behave the same way.\nSo feel free to update TaskServlet with the appropriate code \ud83d\ude04 . In 1.0 we moved validation away from Jackson's deserialization and into a Jersey feature. In both versions, the validator used is already pre-built (eg, there is no chance to inject using ValidatorFactory::usingContext), which leads me to believe that any ConstraintValidator referencing a Context variable in 0.9.2 would not be using Dropwizard's configured validator but rather a default validator.\nI was able to get context injection to work for a custom ConstraintValidator but not in a backwards incompatible way using the below factory inside the HibernateValidationFeature class:\n```java\nprivate static class ConfiguredValidatorProvider implements Factory {\n    @Inject\n    private Configuration configuration;\n    @Context\n    private ResourceContext resourceContext;\n@Override\npublic ConfiguredValidator provide() {\n    final ValidatorFactory factory = configuration.buildValidatorFactory();\n    final ValidatorContext context = factory.usingContext();\n    context.constraintValidatorFactory(resourceContext.getResource(InjectingConstraintValidatorFactory.class));\n    return new DropwizardConfiguredValidator(context.getValidator());\n}\n\n}\n```\nThis is backwards incompatible as Dropwizard has a validator already constructed without InjectingConstraintValidatorFactory and I don't see a way to add this to an already constructed instance. So there are two solutions:\n\nWhen initially constructing a validator, there might be a way to get jersey's ResourceContext. This is the preferable solution as it keeps backwards compatibility.\nChange HibernateValidationFeature to receive a Configuration instead of Validator. I fear this would be a decently big change as a already built validator is used extensively in Dropwizard (yaml validation, jersey client code, server, dropwizard environment) -- but this is the only way I can confirm works.. Yeah I think we're having the same thought. Using Validators.newValidatorFactory would require the following change though:\n\n```diff\n--- a/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/HibernateValidationFeature.java\n+++ b/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/HibernateValidationFeature.java\n/*\n  * Register a Dropwizard configured {@link Validator} with Jersey, so that Jersey doesn't use its\n  * default, which doesn't have our configurations applied.\n  /\n public class HibernateValidationFeature implements Feature {\n-    private final Validator validator;\n+    private final ConfigurationFactory factory;\n\npublic HibernateValidationFeature(Validator validator) {\npublic HibernateValidationFeature(ConfigurationFactory factory) {\n         this.validator = validator;\n     }\n``\nTheValidator, (now)ConfigurationFactorythatHibernateValidationFeaturereceives is / would come from theBootstrapclass which is what is initialized. So possibly the least intrusive way would be to add aConfigurationFactoryfield toio.dropwizard.setup.Environmentso that the configuration factory could flow downstream through all the classes until finally theHibernateValidationFeature` is instantiated \ud83d\ude06\n\nMaybe ... I'll have to ponder it, but this might be doable without too great of a disruption \ud83e\udd14  . I may totally be off here, but the Dropwizard repo doesn't use Guice, so we wouldn't want to add that dependency. And while HK2 is bundled with Jersey, we don't use HK2 internally for injection purposes when we own the path from instantiation to usage, so starting now would be tangential to current code (imo).\nMy purposed solution is setting up a ValidatorFactory for Jersey via HK2, but I haven't followed through long enough to see how backwards compatible it is.. I believe we've had this discussion before in a past issue / PR -- I tried searching for a couple mins, but couldn't find it. I can't remember what we concluded \ud83e\udd14 . Have you tried adding Valid annotation to MongoDBConfig?. I believe it is because one is supposed to register the implementing resources and when logged, the lines include the info from the interface.\npseudo-code:\n```java\n@Path(\"/another\")\npublic static interface ResourceInterface {\n    @GET\n    public String bar();\n}\npublic static class ImplementingResource implements ResourceInterface {\n    @Override\n    public String bar() {\n        return \"\";\n    }\n}\nenv.jersey().register(new ImplementingResource())\n```\nlogs\n\nGET     /another (ImplementingResource). Yes, I think I've come around on this issue. I'll see what I can do.. Hey @arteam, I realize now that the PR title \"Constraint validation caches error prefixes\" may not give dropwizard users an apt description of what changes for them. Maybe something along the lines of \"Allow dynamic constraint validation messages\" should be in the release notes / new title of this PR. . Makes sense. While users can already override the bootstrap logging in their application classes, it does seem reasonable to provide convenience function for JSON log apps. The only (minor) concern I have is that since bootstrapping is done in code there could be a mismatch where the developer bootstraps as JSON, but config log format is traditional.. Just to double check if I understand you right, now everyone that uses\n\nyaml\nserver:\n  type: simple\n  applicationContextPath: /application\nWill see\nGET /application/endpointA\ninstead of\nGET /endpointA. Looks like the original question has been answered! Respond back if that's not the case.. Adapting this PR to use junit-jupiter-engine:5.2.0 and junit-platform-surefire-provider:1.2.0 I see \n\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.114 s - in com.example.helloworld.JUnit5IntegrationTest\n\nSo it looks like the tests have been picked up. Maybe I'm missing something.. I can't imagine anything that would be stopping one from using Jasper in Dropwizard. I'm curious if more of the stacktrace from the jasper exception is available.\nThe only thing that stuck out to me in the poms are the references to log4j. Dropwizard uses logback and sfl4j. Overriding the logging library in Dropwizard is not typically done (but is doable, afaik). . In the yaml, you can blanket statement set the logging level to DEBUG or TRACE to see if you can eek out additional details.\nSince you mention it works in debug (ie, not uber jar), I would try mvn dependency:tree and see if Jasper is bringing in a different (non-compatible) version of the same dependency.. Thanks for the stacktraces. Looks like there are a couple of tickets on Jasper's end. Look these over and let us know if the solutions provided work:\n\njava.lang.ExceptionInInitializerError from JRBaseFiller.java\nGetting an ExceptionInInitializerError on JREBaseFiller. Closing this as the appears the issue could be solved. Let us know if not.. Closing this issue for lack of an update. If the same behavior is seen, let us know and we can reopen this issue.. The move to v1.3.3 eliminated these warnings for my projects. Can you share a java 8 repo that is a complete dropwizard project that minimally reproduces this issue?. Excellent, Java 10 / Kotlin users, let us know if you're still experiencing this warning with v1.3.3.. Hey, thank you for your interest in supporting dropwizard.\n\nThe reason why it's under debug is for the same reason you mention:\n\nInvalid jackson mappings are quite common\n\nI'd be annoyed with all the stack traces in my logs (and being woken up at 2am) due to client issues.\nIf you'd like your clients to see the details, you can register (pseudo-code) new JsonProcessingExceptionMapper(showDetails: true). I'm not convinced.\nIf you want to see the details, enable debug logging.\n\nSo if there was some error at 2am, I'm unable to see anything from error log,\n\nBecause it's logged under debug. Ensure there's an appender which receives those events.\n\nBut rest of developers should not suffer and struggle by swallowed exceptions in log.\n\nNo one other than the client is suffering from client inflicted problems.\nIf the solutions provided thus far are still insufficient, you can always override the exception mapper, but we will not be changing the default level.. Yes, I agree, 4 hours debugging client issues would not be fun. If your clients can't figure out the error, and you don't want to return details to the client so they can fix the issue -- we've presented several methods to help.\nLogging exceptions under a debug level is not uncommon -- here's an example from Jetty among many.  I'm fine if you want to pivot the discussion to allowing a configurable log level for client JsonProcessingException issues, but we won't be changing the default.. Is this the same issue reported in the Jackson repo? https://github.com/FasterXML/jackson-modules-base/issues/37. Doesn't [%-5level] mean to pad out to 5 spaces if the text is shorter than 5 (and INFO is 4 in length)?. I find it bizarre that the jdk10 build doesn't report the same false positive, gets a bit farther in the build, and then reports a different false positive: CVE-2015-8862 \ud83d\ude05 . Oh how exciting, this would fix #1708 too. I'm closing this issue as the solutions presented seem sufficient. If there is a proposal to better handle these situations in Dropwizard, then I'm game to listen. Sounds good. Thank you for the fix!. Thank you for the code sample and the test that demonstrates the issue. Much appreciated.\nThe ExceptionMapper<JerseyViolationException> is intended for catching validations dealing with the data / parameters supplied in the request or response. It's tied to Jersey.\nAFAIK, Jersey doesn't unwrap causes of an exception to find exception mapper.\nIf you would like to customize the response for a PersistenceException then you should define ExceptionMapper<PersistenceException>. Now, should Dropwizard provide a default implementation for handling PersistenceException -- that's a good question.. What logic do you think should be in this handler? Does a constraint violation mean 400 response, and anything else a 500? I'll need someone more familiar (than me) with all the exceptions that Hibernate ORM can throw and how to interpret them to sketch out an implementation.\nI also think the lowest risk would be to introduce an opt-in exception mapper (eg. it is not registered by the Hibernate bundle by default, but we provide an implementation for those that want it), so that this could be introduced in a minor dropwizard release without worry of backwards incompatibility.. Yeah, how about you create the pull request so that there will be more eyes on it for any potential discussions.. I like it, seems sensible. I'll pause for a couple days to merge in case there are comments. Thank you very much for the excellent pull request.. Closing this as #2344 was merged. If the problem wasn't resolved, please reply with more info. Thanks @manuel-hegner for the implementation.. Side note, I'm assuming the dev profile works for you? I ask as I have tried multiple times and it keeps failing. Looks like some of the tests that rely on logging output get mixed up when multi-threaded. . I like the thought of form based authentication in dropwizard to go along with the basic / oauth implementations, but time is short and it looks like an outside contributor will need to champion this issue. Until then I'm closing the issue and I'd recommend looking into adding something like pac4j (and login form demo) onto your dropwizard application to take advantage of their features.. The exception behavior is currently fixed:\nIf authenticate throws an AuthenticationException then the exception is logged and an internal server error is returned to the client. See AuthFilter for where the logic is implemented. Having an exception mapper here would be nice, though I can't recall off hand if a exception mapper can be used at this stage in a filter.\nYou can certainly try by throwing a non-AuthenticationException and see if a non-AuthenticationExceptionMapper handles the response.. At a glance nothing looks wrong, but it would help us tremendously if you could distill the problem to the minimum needed to reproduce. For instance, try simplifying the exception and dropping lombok.. Ensure that response can be serialized to media type produced in the function if not specified in the exception mapper. If this fails, I will ask that you upload the complete example (with a test that demonstrates this issue) so that we may take a look.. Looks like this was opened by mistake. Oh hey, sorry, I keep reviewing this in my head and forgetting to comment \ud83d\ude04 \nI think this would be a useful feature in integration tests! My one concern is that this solution is for junit4, is it not? I'd prefer a solution that can cater to both junit4 and junit5, so dropwizard users don't have to drop this feature if they decide to move to junit5.. > Well, for junit 5 I assume a whole lot of the testing framework need to be refactored.\nDropwizard already has a junit5 module, so I don't believe any refactoring is in order (but I may be wrong). The listener you implemented on the DropwizardTestSupport should be applicable for junit5 as well as DropwizardTestSupport is used for both junit4 and 5.  . Excellent! Looks like there is a little bit of flakiness in the tests (wontCollectErrorsAlreadyHandled failed). Have you tried removing the @Pattern constraint and using an IntParam instead?. From the logback docs:\n\nSince the format of a syslog request follows rather strict rules, there is no layout to be used with SyslogAppender.\n\nThus, Logback's syslog appender can't output json. Freemarker currently does not allow you to change this setting through Configuration::setSetting, so it's not possible at the moment. A change will need to be made to dropwizard or freemarker to accommodate.. Excellent, I'll close this for now, but if someone needs this as a feature in the future, and freemarker still doesn't support setting it through Configuration::setSetting then we can reopen this issue.. Yes this seems like a sensible addition. I'm a bit confused. The test case that you present never passes for one of two reasons (depending on the random UUID):\n\nOverflow in parsing originalUuid + \"1234\"\noriginal != validated so assertEquals fails. Ah I may have misunderstood. Is the issue that UUID.fromString does validate the input, but it is too lax? If so, what are your expectations? What are (languages / RFCs / frameworks) you comparing against? Do you have a suggestion in mind?\n\nAdditionally, use hardcoded UUIDs in examples instead of random so that I can more easily follow along. > perhaps a regular expression would suffice\nMaybe, but I'm wary of crafting regular expressions. I would hate for a couple weeks after a release to get a bunch of reports about how valid UUIDs are being rejected. Not saying this isn't the correct approach, but it's something to consider.\n\nAnother alternative that I have just come across involves comparing the UUID's toString value against the original input String.\n\nThat's interesting. I hadn't thought of that. Could work.\n. Yes that sounds good to me.. @jplock I had some thoughts on making those tests less flaky. I'll submit a PR. Yeah I've definitely been bitten by overly chatty logs caused by unfortunate situations. I'm curious if this can't already be solved through queueSize and discardingThreshold logging configurations. Let me know your thoughts \ud83d\ude04 . Very true. Yeah go ahead and file a PR. Having the ability for an opt-in throttle for any appender sounds good.. Closed by #2384. I think something might be amiss in your project. I copied your config into other projects and they worked fine and as expected. If the problem persists, please make a small reproducible github project that displays the issue.. Yeah unfortunately issues like these that crop up when interacting with third party frameworks that also configure logging tend to take a backseat in terms of priority as I'm not familiar with elasticsearch's client or galago. And I'm not yet a proficient enough pom-magician that I can take a look at any pom and instinctively know the problem \ud83d\ude05 . Since this issue pertains to interactions between third party logging libraries (and dropwizard can defer to an external logging implementation), I'm closing this issue. If there is somewhere dropwizard can improve, let us know.. Make sure to add PARAMETER to @Target. registerDefaultExceptionMappers is for toggling if dropwizard should register its own exception mappers, it doesn't make reference to any of Jersey's internal exception mappers (eg: ValidationExceptionMapper).\nI looked into it a little bit, and I'm not sure if using standard dropwizard code if ValidationExceptionMapper will be registered in the first place. Looking at the Jersey source code, it appears it is only registered if ValidationFeature is registered (which dropwizard doesn't). So I'd check if you're are registering either ValidationFeature or ValidationBinder (and if so, remove them). I haven't looked too close at the impl, but have you tested to see if Guava's RateLimiter is sufficient?. Oh man, now I'm kinda torn between the two philosophies. I have an example in my head:\nLet's say you set a throttle 100 messages over 10 seconds (ie: average 10 messages a second), but the actual log rate is 100 per second.\nWith this impl, you see all 100 messages for the first second, but the logs are then silent for 9 seconds.\nWith guava, there is no silent period, but if the log rate of 100 per second lasts only 1 second and subsequently drops to 0 then guava will drop 90% of the logs in that 10 second period.\nSo each impl appears to have pros and cons. But in my opinion, the guava ratelimiter seems in better control of bursts -- especially if the infrastructure hosting the logs is measured / charged in ops, the ratelimiter would ensure those ops weren't exceeded. There is also no period of time with the ratelimiter where all logs are dropped until the next window.\nCan you comment as to why you prefer one side over the other, so we get the whole story \ud83d\ude04 \n. > (Yes, RateLimiter has the tryAcquire method to avoid blocking, but then we will likely discard messages whereas we are under the limit on average.)\nI think if you're implying that the RateLimiter prefers under-utilization -- I believe the opposite is true:\nYou can see in this sample that even though I only allow one qps, I can immediately acquire 1000 seconds worth:\njava\nfinal RateLimiter rateLimiter = RateLimiter.create(1);\nfinal boolean acquired = rateLimiter.tryAcquire(1000);\nassertThat(acquired).isTrue();\nSubsequent requests will not be successfully acquired for the next 999 seconds. So for those 999 seconds, the rate limiter is over-utilized. The example is a bit contrived (we're not trying to acquire 1000 at a time), but is demonstrative.\nOn the topic of under-utilization and bursts, the RateLimiter rolls over some of that under utilization to handle a burst:\njava\nfinal RateLimiter rateLimiter = RateLimiter.create(1);\nThread.sleep(1000);\nfinal boolean acquired = rateLimiter.tryAcquire();\nfinal boolean acquired2 = rateLimiter.tryAcquire();\nassertThat(acquired).isTrue();\nassertThat(acquired2).isTrue();\nWithout the sleep simulating under utilization, the previous sample will fail. There is a quite a lengthy design javadoc on utilization.\n\nRateLimiter is configured with an integer number of permits per second\n\nI don't think this is accurate. The javadoc has create taking in a double. You can set the permitsPerSecond to be less than one. For your example: RateLimiter.create(50000 / 86400) should do it.\n\nNot trying to push the use of RateLimiter here, I just thought it fit nicely into this situation. It has O(1) space requirements whereas the PR, as it stands, has a O(n) space requirement where n is the number of message per unit of time. A pitfall for those who may want to constrain the number of messages per day.. Excellent! Does anyone have suggestions for a name other than messageThrottle?\n\nmessageRate\nmessageFrequency\nfrequencyThrottle\nfrequencyDivisor\n\n. > Duration of 30s means allow 30 messages per second\nSlight slip-up, 30s would mean 1 message every 30 seconds \ud83d\ude04 . Updated in https://github.com/dropwizard/dropwizard/commit/bfce31f6bbfeb41b12ec0ef629e4300a8b6fc245. > is there an important reason for before and after to be protected?\nIt's the default behavior when the IDE overrides protected methods in a class \ud83d\ude04 \nI have no qualms with making these protected methods public if you find that they fix cucumber. I have no experience in cucumber, and I don't want to go way out of the way to support it, but if these few things allow compatibility, then I'm for it.. Yes, submit a PR and then I can take a look. If you find any more classes that can be cucumberized at no cost, go ahead and do so.. Dropwizard is still puts Junit first for testing, so most likely additional testing frameworks would be asked to be third party modules. We can incorporate anything needed in the core to allow for additional testing frameworks.. Oh man, I think this may be a tough ask -- a use case that dropwizard will probably not cater to:\n\nOther than logging there is no way to change configuration settings at run time\nYou'd have to create your own database configuration class that had a mechanism for updating the password\nYou'd have to figure out if tomcat jdbc supports it or use another connection pool (hikaricp supports it unofficially) or play it simple and allocate a connection per request.\n\nThis looks like no small task \ud83d\ude04 . I'm going to close this issue, as there is no apparent further action on the Dropwizard side. Feel free to continue posting in this issue if one happens to successfully use dynamic passwords.. Good question, we've done it before where master represents the next patch release (eg. 1.3.x), but idk if that is the plan -- @arteam will have to weigh in. Also the latest two releases (1.2.x and 1.3.x) have tended to receive CVE patches, but I can't confirm that this will be the case here.. (I was going to comment on your PR, but figured I'd leave a comment here for full transparency)\n@alex-shpak Excellent, thank you for looking into this with me \ud83d\ude04!\nI came across the rank solution as well and the following diff also fixed the flaky tests\n```diff\n--- a/dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JacksonFeature.java\n+++ b/dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JacksonFeature.java\n@@ -1,7 +1,9 @@\n package io.dropwizard.jersey.jackson;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n+import org.glassfish.jersey.internal.inject.AbstractBinder;\n+import javax.inject.Singleton;\n import javax.ws.rs.core.Feature;\n import javax.ws.rs.core.FeatureContext;\n import javax.ws.rs.ext.MessageBodyReader;\n@@ -19,7 +21,16 @@ public class JacksonFeature implements Feature {\n @Override\n public boolean configure(FeatureContext context) {\n\n\ncontext.register(new JacksonMessageBodyProvider(mapper), MessageBodyReader.class, MessageBodyWriter.class);\ncontext.register(new AbstractBinder() {\n@Override\nprotected void configure() {\nbind(new JacksonMessageBodyProvider(mapper))\n.to(MessageBodyReader.class)\n.to(MessageBodyWriter.class)\n.in(Singleton.class)\n.ranked(10);\n}\n});\n         return true;\n     }\n }\n```\n\nBut I'm not knowledgeable about manipulating the order of components. Can you speak to why you prefer @Produces and @Consumes over rank? The ramifications of this means that whenever this PR lands, dropwizard users will need to modify their own code and I was hoping this could be a backwards compatible PR (though, I completely understand if it ends up not being backwards compatible).. > Anyway It is a breaking change.\nWhen I used rank as shown in the snippet earlier, I didn't need to modify any e2e code, which is why I arbitrarily chose the rank of 10 because it didn't matter what rank was chosen (as long as it was > 0) -- a user supplied provider would take precedence.. > If registered via AbstractBinder it should have at least same rank as JacksonMessageBodyProvider\nIIRC this causes the tests to be flaky as then it is nondeterministic which provider will take precedence.\nWhat are you current thoughts on this? An internal ranked vs forcing users to annotate providers with @Produces and @Consumes. While it can be argued that users should have been annotating since the beginning, it is a break in behavior so will need to be considered.\nI suppose jersey 2.26+ is already a breaking change for those using reactive jersey clients, but imo it's a relatively minor break. Users using hk2 in dropwizard may experience a bigger break, but I'd hate for this to be delayed for the foreseeable future if Dropwizard 2.0 is a significantly far from release.. I went with option 2 (annotate CustomJsonProvider with Consumes and Produces). All tests are now passing. Hopefully a migration guide will ensure the handful of dropwizard users who use custom providers to annotate them with Consumes and Produces. I'm not sure when this PR will land, but here is all the breaking changes I see:\n\nDropwizard users registering hk2 components may need to update to the new API\nDropwizard users using reactive jersey clients will need to rewrite to conform to the new reactive client api\nDropwizard users writing custom message body writers / readers will need to ensure those classes are annotated with Produces and Consumes\n\nLet me know if I missed anything. Thank you for the investigation @alex-shpak \ud83d\ude04 . > In fact, I would skip Dropwizard 1.4.0 completely if there is nothing we eagerly want to release.\nYeah looks like @jplock and I also agree 2.0 is the next logical release. Currently java.time and jodatime are both supported in Dropwizard. What are the reasons for dropping jodatime? . Yeah I'll re-open this since there is discussion on the removing guava as a dependency. Ah interesting. I'm not sure who to appease in this situation. Using String.split will cause more errorprone warnings and it doesn't seem like those should be suppressed. I, myself, am ambivalent to removing guava.. Some thoughts as a I scrolled through:\n\nThough guava has been removed in all situations, I'm fine with guava in tests, dropwizard-example, and the e2e module. End users don't see these modules, so if Guava brings something to table in these situations, I can't think of reason to remove it.\nReplacing ByteStreams::toByteArray and CharStream::toString with a manual while loop copying data distracts from the meat of the function and should be extracted out to another function.\nHaving two different buildThreadFactory that are close in implementation -- hopefully there is a way to reconcile them, so that one doesn't have to remember to update all instances when bugs / features come along.\nMediaType, oh man, is there no alternative than copying the class and the CharMatcher dependency? Looks like AssetServlet and TaskSevlet want it. IMO, it's not worth maintaining 3k lines of code for 20 lines of usage in AssetServlet\nIn AssetServlet, Pattern.compile(\"^/*(.*?)/*$\").matcher(s) is less readable (and may perform worse than) CharMatcher.is('/'), but I suppose there needs to be sacrifice somewhere \ud83d\ude05 \nI see some introduced classes appear unused like Throwables::getRootCause, or maybe I just didn't see the usage. \n\nPersonally, I'm willing to give guava the benefit of the doubt on backwards compatibility, but I was pleasantly surprised that were you able to replace it so cleanly! Nice job! I will miss immutable classes, but the momentum appears to be removing guava, so I have no qualms. Aside: The /metrics endpoint comes from the MetricsServlet. Do you see this only affecting tests? I can't replicate this in the application (but I can see it in DropwizardTestSupport and DropwizardAppRule). If you see it in the application and can and minimally reproduce it, feel free to upload to github and I can take a look \nNo obvious fix is jumping out at me \ud83d\ude04. Thank you @cmckn . I've narrowed it down to Jackson's afterburner module. Since I'm about to go on holiday for a week, I figured I'd do a quick brain dump in case someone figures it out. Below is a diff that minimally reproduces the issue within Dropwizard using one of our end to end tests. To replicate, do not run App1 as a test, but run it as an application. Why this distinction is necessary escapes me.\n```diff\ndiff --git a/dropwizard-e2e/src/main/java/com/example/app1/App1.java b/dropwizard-e2e/src/main/java/com/example/app1/App1.java\nindex 7c2ca98..8d91fb5 100644\n--- a/dropwizard-e2e/src/main/java/com/example/app1/App1.java\n+++ b/dropwizard-e2e/src/main/java/com/example/app1/App1.java\n@@ -1,5 +1,7 @@\n package com.example.app1;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n import com.github.mustachejava.MustacheNotFoundException;\n import io.dropwizard.Application;\n import io.dropwizard.Configuration;\n@@ -18,6 +20,10 @@ import javax.ws.rs.ext.ExceptionMapper;\n public class App1 extends Application {\n     public volatile boolean wasEofExceptionHit = false;\n\npublic static void main( String[] args ) throws Exception {\nnew App1().run(\"server\");\n\n}\n+\n     @Override\n     public void initialize(Bootstrap bootstrap) {\n         bootstrap.addBundle(new ViewBundle<>());\n@@ -25,6 +31,8 @@ public class App1 extends Application {\n@Override\n public void run(Configuration config, Environment env) throws Exception {\n+        (new ObjectMapper().registerModule(new AfterburnerModule())).writeValueAsString(env.metrics());\n+\n     // Ensure that we can override the default 404 response on an\n     // empty optional and return a 204 instead.\n     env.jersey().register(new EmptyOptionalNoContentExceptionMapper());\n```\n\n\nAs a workaround, you can use Jackson.newMinimalObjectMapper() (which doesn't register the afterburner module), to serialize the registry\nCC @cowtowncoder in case he happens to know off hand the caveats of the AfterBurner module\nDisabling OptimizedBeanDeserializer and ValueClassLoader had no effect.\nWhen I get back, I can look to whittle away at a more isolated test case.. While this issue still affects the master branch, I'm closing the issue as the workaround using Jackson.newMinimalObjectMapper() seems adequate enough and only test code seems affected.. console-json is not a valid type.\nSee the dropwizard docs\nyaml\nlogging:\n  appenders:\n    - type: console\n      layout:\n        type: json. I can't seem to replicate this. Have you tried the following?\nbash\ncd dropwizard\n./mvnw package\ncd dropwizard-example\njava -jar target/dropwizard-example-1.4.0-SNAPSHOT.jar db migrate example.yml. What step did you miss? I'm happy to see the dropwizard-example readme amended \ud83d\ude0a . Yeah don't worry about it! We want the readme to be approachable to beginners \ud83d\ude04 \nfd73b20 should close this. Respond back if you have any more questions.. Alright, sounds good! I just know that if beginners want to run dropwizard-example project they'll need to run package on the whole repo, which means that they can be tripped up by this issue. Since this error message is not beginner friendly and unlimited strength crypto is a bizarre concept, I strive to make testing out / contributing to dropwizard as easy as possible \ud83d\ude04 . Looks our CI failed due to an unrelated test. Should be fixed with a commit I just pushed: https://github.com/dropwizard/dropwizard/commit/ff69c2dc23c2779c13f5bd87a96fb47ff3b458aa. Can you rebase off master? \ud83d\ude04 . Closing this issue as it appears that you've found arteam's sample project where he defines a substitute logging provider: https://github.com/arteam/dropwizard-nologback/issues/2\nWhile dropwizard team has given the flexibility for the community to bring their own logging, we don't write individual guides. If the community would like to contribute guides to our documentation we'd welcome the contribution.. Closed by #2463. No, I don't think you can as authentication is registered through jersey and if jersey can't listen outside the registered path, you can't use the same authentication logic.. Yes (you must wait until the server starts up before having access to the threadpool)\n```java\npublic void run(Configuration config, Environment env) throws Exception {\n    env.lifecycle().manage(new Managed() {\n        @Override\n        public void start() throws Exception {\n            env.getApplicationContext().getServer().getThreadPool();\n        }\n    @Override\n    public void stop() throws Exception {\n\n    }\n});\n\n}\n```. Wow, and that works with constraint validators with context? This may be grounds for a less API breaking implementation.\nI had assumed that a ResourceContext shouldn't be resolved once (if I'm reading your code correctly), and that each request had their own ResourceContext. But a smoke test did show that only one resource context was allocated across multiple requests, so it looks like you're right.\nAs a side note, I based this PR off a small part of Jersey's own validation binder, but that could be overkill for our situation.. I feel like there will need to be a breaking change somewhere, as if someone uses Environmnet::setValidator there is no chance to inject the factory (eg. JerseyClientBuilder uses Environment::getValidator).. Closing in favor of #2432. Sorry I've let this PR languish for so long, hibernate-orm is not my strong suit, but I don't want to leave you out in the cold! \ud83d\ude05 \nSome questions:\n\nYou mention a fork of this code. Have you used this readonly feature successfully (ie: how confident are you)\nWhat's the reasoning behind the hibernate-testing package?\nAre there alternatives to this approach? I know this isn't hibernate-orm, but could one have multiple JDBI configurations -- one just points to the readonly instance?. Thank you for reporting this, I can confirm this is a bug. I have somaxconn set to 128 and the following diff will make this test fail:\n\ndiff\n--- a/dropwizard-jetty/src/test/java/io/dropwizard/jetty/NetUtilTest.java\n+++ b/dropwizard-jetty/src/test/java/io/dropwizard/jetty/NetUtilTest.java\n@@ -54,6 +54,7 @@ public class NetUtilTest {\n     public void testOsSetting() {\n         assumeThat(System.getProperty(OS_NAME_PROPERTY), containsString(\"Linux\"));\n         assumeThat(isTcpBacklogSettingReadable(), is(true));\n+        assertThat(NetUtil.getTcpBacklog()).isGreaterThan(2);\n         assertNotEquals(-1, NetUtil.getTcpBacklog(-1));\n     }. Yes, the bug has been fixed. Those affected should change acceptQueueSize in their configuration. Excellent, this does appear to be a less intrusive change! Dare I say this backwards compatible!?\n\nSomewhere during update to 1.0.0 we lost ability to inject into custom ConstraintValidators because validator factory was moved into Dropwizard.\n\nYou're (probably) looking at them (#1251) \ud83d\ude04 \nAs you've already stated tests will be needed for a more thorough review. Ideally there will be two types of tests: one to show that context injections works with this bundle, and one to show that context injection doesn't work without.\nStill mulling over if the bundle should be registered by default (eg. any downsides) \ud83e\udd14 . Yeah this PR is good, I'll open another issue discussing making this the default.. It really depends on your platform. You can create a system v init script or systemd service file (just some of the common ones). Sorry this question is bit out of scope for the issue board and is a more general java question + platform specific. There should be plenty of resources out there to help (eg. Running a Java process from Systemd). Looks like you aren't the only one with this issue, so since this looks to be an internal liquidbase bug, I'm going to mark this as blocked.. Couple of thoughts:\n\nHave you tried a more recent version of Dropwizard? I know some logic surrounding file appender logging was changed\nCan you try removing the %d time based rollover and see if you get desired results (you won't see dates in the file names)\narchivedFileCount may only apply to the time rollover policy (eg. archivedFileCount of 5 says to keep 5 days worth regardless of max file size) and doesn't dictate the number of files to keep in conjunction with size rollover as well. If this is the case, we can look into adding the ability to configure totalSizeCap (as right now you can't). totalSizeCap has the following documentation:\n\n\nThe optional totalSizeCap property controls the total size of all archive files. Oldest archives are deleted asynchronously when the total size cap is exceeded. The totalSizeCap property requires maxHistory (archivedFileCount) property to be set as well. Moreover, the \"max history\" restriction is always applied first and the \"total size cap\" restriction applied second. \n\nIt may not be a bad idea for dropwizard to set this totalSizeCap automatically based on maxFileSize * archivedFileCount, as configuring both those properties, yet still seeing infinite disk usage can be flustering.. Thank you for reporting. Based on the mailing list you linked to (which was just posted last week!) it looks like it occurs without Dropwizard, so let's keep an eye on the mailing list (and if it gets reported as an issue in Jetty). so we can triage. Excellent, then it sounds like it has been fixed in Jetty 9.4.12, which the next version of dropwizard will use.. Thanks for taking a crack at travis, it's been vexing to see it red \ud83d\ude04 . Yes Jersey 2.27 will be included in the next release, but there is no ETA, as we need to wait for Jersey 2.28 or 2.27.1 to fix #2418. Ah ok, I'll bump it to most 13 times \ud83d\ude04 \nEDIT: 005636f79. No you're fine, if you want to look into a way to make those tests less flaky, I'm all for it!. Thank you for the bug report, we'll keep an eye on the jetty thread too.. Thanks for the repo case. Are you able to use a more standard load test client like wrk, vegeta, locust, etc and reproduce the same issue?. > I suspect there is a resource/socket somewhere from another test that failed to be cleaned up.\nHuh, what's weird is that the code sets the CONTAINER_PORT for those tests to 0, so it should use the first available. So even if a previous test had a bad teardown (though I'm optimistic that this is not the case), it shouldn't affect the DropwizardResourceConfigTest tests. Yeah maybe we'll just keep an eye on the appveyor flakiness. Hopefully it'll be just that one time. I tested this PR on my windows machine and everything passed, so don't worry.. Excellent, thank you! I certainly liked the way structured the test so it becomes resilient to variable CI environments.. > As acceptQueueSize has default OS value in 1.3.5\nThat was the intent, but there was a bug which made it not true. Take a look at https://github.com/dropwizard/dropwizard/pull/2430. The default accept queue should be equivalent to somaxconn, but only the first digit was read. This bug is fixed for a the next release\n. v1.3.7 was released on October 14th with the provided fix, so this issue will be closed. Sorry I won't have the time to look at this for the next several days, but last I knew the jersey team recognized this shortfall and would be willing to allow a fix for the next version. So I don't want to spend additional time mapping out a migration guide that this PR would entail for users who will inevitably wind up here due to the warnings they will now see in their apps -- only to have the migration become obsolete as soon as the jersey version is released.\nI haven't checked everything out, so if this PR has become necessary, let me know.. @jbarnettwomply thank you. While considering instance based resource classes incorrect is working as designed according to the jersey team, I still find their lack of reasons for this decision unfortunate. No one wants to dance with a DI framework and walk deeper into annotation hell just to complete Dropwizard's getting started guide. So, yes, I believe the solution here presents the best way forward.. > updated to check for Class instances\nIs it possible to write a test for this case, so we don't possibly regress on it in the future (as all our resource and application tests pass without it)?. As far as 2.0 proper is concerned, we'll have to wait for jersey 2.28 to update to hibernate validator 6.0, but as far aiding people testing features so far, it's always good to get code in front of more people (imo release candidate may be too strong of wording as we still have breaking changes on the horizon).. For my own understanding, let me know how far off I am interpreting your question.\n\nWhen given the dropwizard config that uses json logging and includes requestContent\n\nyaml\nserver:\n  requestLog:\n    appenders:\n     - type: console\n       layout:\n         type: access-json\n         includes:\n           - statusCode\n           - requestContent\n\nOne would expect that the request content is logged to the console\nInstead the content is always \"\" (verified this), as the content stream will be consumed to deserialize the body\nA workaround is to register a TeeFilter in one's application (which buffers the entire contents)\n\njava\n@Override\npublic void run(Configuration config, Environment env) throws Exception {\n    env.servlets().addFilter(\"tee\", new TeeFilter())\n        .addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/*\");\n}\n\nYou are suggesting that Dropwizard should automatically register a TeeFilter-like structure whenever json access logging is enabled and prints the request contents\n\nIf the last bullet point is true then yes this would be a feature request. Ok I think I'm catching on. Can you give an example of a TeeFilter modifying contents so that I can play with it on my end?. Strangely enough, I can't replicate this with your example. The json access-log takes into account the modified contents.\nWith the config I posted earlier, I see\njson\n{\"requestContent\":\"this is a test\",\"status\":200}\nin the logs. Let me know the current status of this, else I will close this issue.. Nothing jumps to mind other than ensuring both the requestLog and logging are marked as external. To help demonstrate the problem please post a minimal reproducible project. . Ok no problem. Since you're moving on, I'm going to close this. Once you've tracked down the issue further, create a new issue with all the relevant info and reference this issue.. If you remove TeeFilter usage does the code work?. Without further context or a minimal reproducible example, this issue will be closed. Other than BiDiGzipHandler stripping Content-Length: x after the input has been inflated, and BiDiGzipHandler and supporting deflate, GzipHandler is a drop in replacement (I commented out the couple tests for those) and everything passed.\nI'm fine with moving past deflate, but I'm not so sure I understand jetty not stripping content-length if the content-encoding header is also stripped.. Excellent, seems like the next version of jetty will have this fix. Until released, I'll mark this issue as blocked. I'm all for upgrading to Jetty 9.4.12, but I do have one concern about the change in the default cipher exclusion list. The change in the exclusion list from 9.2 to 9.3 (dropwizard 0.9 to 1.0) effectively disallowed java 7 clients. We obviously don't want to blindside anyone with a patch bump (9.4.11 to 9.4.12), so I'm assuming this cipher suite change must be extremely minor, as in clients that support TLS_RSA_* already support more secure ciphers, so they won't care if it is disabled.. Oh yeah, I wholeheartedly agree with Jetty's secure by default policies, I just want to make sure there is enough communication on our side that basically says \"by default, enforces tls clients to support forward secrecy\", so that if users check the release notes they at least have that in the back in of their minds when issues crop up.. We have a test that confirms an eof exception mapper is hit when a client advertises it will send 100000 bytes, but it disconnects after sending a single byte. But there could be an edge case that you discovered. Do you have steps to reproduce?. Ah ok that makes sense. We don't have any tests for that! I can see that functionality slipping through the cracks.. So I investigated this a bit today, and I'm not sure what the best solution is. The only two options are:\n\nKeep the current behavior\nLog the behavior under a different level\n\nThe reason being is that by the time the client has disconnected, the response code (and potentially body) have already been committed (this would change if one used http trailers, but afaik jersey doesn't support that feature). Since the response is already committed it won't hit an exception mapper.\nAside: The good news is that I can replicate that exception by eschewing an http client and closing a Socket as soon as the request is sent. > Okay. The reason I would like to get rid of this error, is that it floods the log with dumping the full stack trace. Isn't there any way to catch it with an CustomEOFException handler and just log e.g. \"Client abort\"?\nAgreed that is sensible. So 5 days ago, I said I could reproduce this issue, but I chucked the example code. I thought I'd be able to recreate it quickly, but apparently I'm wrong. Can you help me out and create a quick dropwizard example resource + test case that exhibits this behavior? . No update, I lost my reproduction case and haven't been able to reproduce it since. If you have such a test case, we can further this issue.. This was closed by #2541. > log the result of the healthcheck when it is unhealthy\nGenerically, no. You could only get that functionality for the health checks you create, by manually logging the exception. https://github.com/dropwizard/metrics is a more appropriate repo to talk about logging on unhealthy health checks.. Initially I tried to see if we could register it in AbstractServerFactory, but that lacks access to the bootstrap class.\nWhile not my first place to fit the code, inside EnvironmentCommand::run I was able to get the following to work (eg: run the e2e injection validation test without the bundle)\ndiff\n         bootstrap.run(configuration, environment);\n+\n+        final ConstraintValidatorFactory factory = bootstrap.getValidatorFactory().getConstraintValidatorFactory();\n+        if (factory instanceof MutableValidatorFactory) {\n+            environment.jersey().register(new GetResourceContextFeature(context -> {\n+                ConstraintValidatorFactory validatorFactory = context\n+                    .getResource(InjectingConstraintValidatorFactory.class);\n+\n+                ((MutableValidatorFactory)factory).setValidatorFactory(validatorFactory);\n+            }));\n+        }\n+\n         application.run(configuration, environment);\n@alex-shpak do you think something like could work, and make sense? . I realize now that you're already familiar with my suggestion in #2489.\nCan the issue of configuring json logging of exception be solved in a single swoop, as these two issues seem very much related.. It looks like json exception logging is somewhat configurable if someone where to override EventJsonLayoutBaseFactory::createThrowableProxyConverter (ie define your own logging type like json2), but if you have something else in mind, I'm open to suggestions!. Certainly, go ahead! The design makes sense (keeping the same terminology as logback to make it easier to look up what each field's effect is). Hopefully you can leverage a lot of logback's code to implement your idea. If it needs 2k of code to implement, I might have reservations if the feature is really worth the maintenance cost \ud83d\ude04 . If you are looking to serve static assets from files, you're probably best to register Jetty's DefaultServlet via environment.servlets().addServlet(...). Closing this issue. If the provided solution is not appropriate, please respond to have this issue reexamined.. Is there a use case where an application sets their factory in initialization and then a test overrides that one? I have a thought brewing, but if you have a specific example that you're encountering, I'd love to hear it. All tests pass either way.. Yes that would lead to an incorrect order. Makes sense, feel free to create a PR with the change + test so that we don't regress on that behavior. Can you give an example of the difference?\nIf one format is not inherently better than the other, than I would agree that it makes sense for them to be consistent.. So in your example, requestUriParameters would look like:\ndiff\n {\n   \"method\": \"PUT\",\n   \"uri\": \"/v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312\",\n+  \"requestUriParameters\": \"status=UP&lastDirtyTimestamp=1537398169789\",\n   \"params\": {\n     \"lastDirtyTimestamp\": [\n       \"1537398169789\"\n     ],\n     \"status\": [\n       \"UP\"\n     ]\n   },\n   \"protocol\": \"HTTP/1.1\",\n   \"url\": \"PUT /v2/apps/EUREKA/a7eb6f43-8510-4196-9aab-82d947401312?status=UP&lastDirtyTimestamp=1537398169789 HTTP/1.1\"\n }\nIs that correct? If so, yeah this is fine by me, though I'd find uriParameters a more suitable name. And just so I have it straight, this doesn't add functionality that couldn't be reconstructed by the user using the params field, correct? It's just another way of presenting the data?. Ok, now I understand! Yeah making the output of both request loggers contain the same string without additional steps on the end user side does make sense, if that is something you want to do.. Yes, it is missing and should be added to the documentation. For the time being, the request log format is:\n%h %l %u [%t{dd/MMM/yyyy:HH:mm:ss Z, <tz-id>] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" %D. Hmm, yes it is done automatically, and my JDBI3 (Dropwizard 1.3.5) applications are exposing active, idle, waiting metrics. This is all you should really need:\njava\nnew JdbiFactory().build(env, config.getDatabase(), \"postgres\");. Closing due to lack of activity. Let us know if jdbi 3 connections are still not appearing in metrics. Before merging, is this only slated for the 1.3.x branch? Or what's the plan?. Sorry for my delayed response, but I prefer this PR over the other one (as that one encroaches too heavily on my original PR: #2427). This PR keeps the backwards compatibility story, which is a :+1: in my book.. Sorry to circle back on this so late, but I'm actually stumped on how the you're able to have the config overrides leak into other tests, as DropwizardAppRule removes them in the junit's @After life cycle, and according to the docs\n\nAll @After methods are guaranteed to run even if a Before or Test method throws an exception\n\nIt's equivalent to:\njava\ntry {\n    testSupport.before();\n} catch (Exception e) {\n} finally {\n    testSupport.after();\n}\nLet me know if this issue is still prevalent and if a slightly better test case can be written (as testSupport.after() was omitted) . You are absolutely right, I didn't realize that that junit documents that discrepancy, so if ExternalResource::before throws, then after is disabled. This is a bug in dropwizard and will be fixed. Thank you!. I believe this is outside of Dropwizard's domain. Most online help points to stackoverflow: https://stackoverflow.com/questions/27589379/jersey-client-creation-error\nYou may have to play with it to get it to work. Let us know what the solution is / was and if it's something dropwizard should fix.. Right now we're kinda in a halfway state, where we've incorporated a subset of Guava classes (like Lists). I'm fine with continuing with guava or removing it -- but a halfway state doesn't seem like the best long term solution. Can you recreate the issue in a minimal github repo and link it here?. Your proof of concept makes sense, thank you. To me, it would be fine if it logged an info statement about a client disconnecting before receiving response, but I can understand if people would want it configurable. Though I fear configuration would entail a significant more work and afaik we wouldn't be able to leverage Jersey's registration, so may need a potential parameter intrusion to several classes.\nBtw, as this PR moves along be sure to edit the description to reference the issue and update the tests to be more of an assertj style. I'm sorry circle ci is misbehaving. It's been misbehaving for everyone. If you happen to stumble across a java project on circle ci that is working, we could use the insight \ud83d\ude05\nThe appveyor issue will (hopefully) be less flaky with https://github.com/dropwizard/dropwizard/pull/2554\nDon't worry, we've been merging PRs with failing circle ci \ud83d\ude09 . Yeah I think this PR is good (make sure to update this to reference issue and spell out the original problem + chosen solution). While this PR may not cater to everyone's perfect use case (eg: one may want to log something), I imagine the current behavior of ERROR logging is undesirable to all, and so this is a great first step! And if anyone needs configurable behavior, they can carry the torch further.. Update this description \ud83d\ude04 :\n\nWe typically have a template that includes things like Problem + Solution, which helps me when I need to reference past PRs\n. Thank you for your contribution!. I can replicate the issue, but I did notice that CI did fail in one of the effected tests, so your solution may need tweaking. Yes, you're right. I'm sorry I didn't circle back to this PR to let you know things should be better with the recent CI improvements. Can you please rebase your changes on master?\nAlso other notes:\n\nIt is odd looking to see new DefaultLoggingFactory().configure as the last line of a teardown for the throttling test. Were there other approaches that you considered? The line stands out, and out of context it is not clear what it is doing. Is there a more clear way to reset the status printer?\nHave you found any other test interactions that fail this way? I feel like the throttling test shouldn't be an isolated incident as I think there are similar logging tests that redirect stdout. Thank you for all the testing. Your logic seems sound. Can you add a comment in the code basically summarizing this PR, so the importance is apparent?. Oh yeah, thanks for bringing this up again. Is it possible to write a test that demonstrates how the previous behavior was incorrect (app parses config as JSON and the test wants to override it)?. Here are three examples of how to do it:\n\nhttps://github.com/dropwizard/dropwizard/blob/a47351cae948e88d02b3367bf380121f54124305/dropwizard-e2e/src/main/java/com/example/app1/App1.java#L28-L55\nSo to override exception mappers, register your own.\nDropwizard-Guicy is outside the scope of this repo, so if you have an issue with the implementation, report it to that project appropriately.. > I think the API provided is misleading and people will keep making this mistake.\nNow would be a great time if we want to rethink this. So if you have an idea or implementation in mind, I'd love to hear it, as I would agree it is easy to fall into this trap. Can you expand a bit on your use case?. I forget, when you enable debug logging for jetty, does it log the headers?. I agree that the premise of flushing metrics (like logs) before shutdown is sound, though I think that this PR should be targeted towards the master branch. If it needs to be backported to a 1.x branch, it can be. Also can you include a test for deserialization, so we don't miss something obvious. Thanks!. Can you update the javadocs and the configuration docs with this new value?\n\nCan you make sure that after merging to master, this also gets backported to 1.3.x\n\nNo, I don't think that is how that works. We tend to reserve patch releases for security updates or major bugs. This PR is good to go. Thank you for the contribution. I wouldn't think this would land in a 1.3.x release. A 1.4 (unplanned) may be better suited. 2.0 has been blocked for what seems like ages \ud83d\ude05 . I couldn't get this method to work with the HTTP2 tests that require the ALPN jar \ud83d\ude16 . Thank you for your summary. It's certainly a bizarre situation!. Looks like between v1.3.1 and v1.3.5, dropwizard upgraded from jetty 9.4.8.v20171121 to 9.4.11.v20180605 for bug and security fixes (jackson was also updated, though less likely a culprit). So it is possible the behavior you seen through a dependency update. I'd be curious if you could construct a reproducible test case and if the root cause is still present. No need to expose your admin port. You can also setSecurityHandler on the admin servlet. > It is not recommended to run admin port on the same port as the application\nIMO, that's an opinionated question. No right or wrong answer, just tradeoffs. \n\nYou can also setSecurityHandler on the admin servlet\n\n^You'll want this for a simple server type. I'm 5/5 for tonight, so I think (Travis) CI is now stable \ud83c\udf89 . Hello, wrong project. Please see: https://github.com/dropwizard/metrics\nAlso, a tip. Make sure you when create an issue to more deeply explain the problem. The issue is vague and deprived of an example.\nI'm assuming you are worried about creating a metric name which contains a column delimiter (eg: ,) and/or security implications of opening a CSV which contained metric names that can be interpreted. IMO this would be pretty low priority as no current metric names are susceptible to these issues. User created metrics should follow this lead.. I wrote two lines in the release notes as I feel like this adds feature (servlet 3.1 and async io for gzip requests) and removes a 'feature' (deflate encoded requests. I say 'feature' as it's debatable if it was a feature).\nI can collapse it to a single release note line if desired.. Huh, those are some pretty good arguments for changing the behavior. I support this change, as it seems it will bring dropwizard in line with the ecosystem at large (though becoming disjointed with default jackson behavior may be unexpected). As long as it's clearly documented how to revert the behavior, the change seems sensible. But I'd wait to see if there are additional opinions before further action.. Implement and register a ServerLifecycleListener (in a environment.lifecycle().addServerLifecycleListener) and call getLocalPort. Related https://github.com/dropwizard/dropwizard/pull/1603 & https://github.com/dropwizard/dropwizard/issues/745. @OrDTesters, did you have any opinions on this implementation? I suppose in the end both are similar.. Ah it's still flaky: https://ci.appveyor.com/project/nickbabcock/dropwizard/builds/21028122\n[ERROR] Failures: \n[ERROR]   CachingAuthorizerTest.respectsTheCacheConfiguration:60 \nVerification in order failure\nWanted but not invoked:\nauthorizer.authorize(\n    PrincipalImpl{name='principal'},\n    \"popular_kids\"\n);\n-> at io.dropwizard.auth.CachingAuthorizerTest.respectsTheCacheConfiguration(CachingAuthorizerTest.java:60)\nWanted anywhere AFTER following interaction:\nauthorizer.authorize(\n    PrincipalImpl{name='principal2'},\n    \"popular_kids\"\n);\n-> at io.dropwizard.auth.CachingAuthorizer.lambda$new$0(CachingAuthorizer.java:76). > Oh, are you depending on an eviction order?\nI think that might be the case, as the cache has maximumSize=1\nI don't know the solution offhand, but I may revert this at the end of next week if we haven't found a solution as imo this trades one type of flakiness for another \ud83d\ude04 . > The best thing might be to just scrap this test case.\nAre you talking about respectsTheCacheConfiguration? If so, removing that test case may be a good solution as there is no reason for us to test caffeine's implementation -- I'm assuming that's been tested aplenty \ud83d\ude06 . Don't worry about the ci failure due to the cve, it just recently started happening.. Ah, I wonder if it wouldn't be worth it to investigate a fix for #1341. Can the test case be expanded a bit? \nGiven:\n```java\npublic class MyTestClass {\n    public static class MyApp extends Application {\n        @Override\n        public void run(Configuration configuration, Environment environment) throws Exception {\n            throw new RuntimeException(\"EEK\");\n        }\n    }\n@ClassRule\npublic static final DropwizardAppRule<Configuration> RULE =\n        new DropwizardAppRule<>(MyApp.class, new Configuration());\n\n@Test\npublic void testBasicServiceHealth() {\n    RULE.getLocalPort();\n}\n\n}\n```\nI see the expected runtime exception, not an NPE. Hello it's not clear from the description what is wrong. The screenshot looks fine. You'll need to provide more info. Preferably, you're on the box where the service is hosted executing curl or openssl s_client to show us these errors.. You'll need to ascertain that there is not a networking or firewall issue.\nThen you'll need to do more debugging via curl or openssl s_client to get us additional information. You'll need to dive as deep as you can go, as we don't have access to your box, and there isn't a whole lot to go off of.. Hmm, you mean something along the lines of:\n```java\npublic class MyFilter implements ContainerRequestFilter {\n    @Context\n    HttpServletRequest webRequest;\n@Override\npublic void filter(ContainerRequestContext containerRequestContext) throws IOException {\n    final HttpSession session = webRequest.getSession(true);\n}\n\n}\n```\nClosing this as this is more of a jersey issue than dropwizard.. This will be fixed when dropwizard 2.0 is released. Ref: https://github.com/dropwizard/dropwizard/pull/2320. Since there is no direct replacement for NonEmptyStringParam, as @joschi noted, maybe we should not deprecate that one. Thinking about it, would it make more sense to deprecate in 2.0 instead of 1.3.x (and keep it around until 3.0), as I feel like it's a little iffy to deprecate a construct where there is no alternative other than bumping to the next major version, which may not be immediately attainable for a given project.. This test case passes just fine:\n```java\npublic class ManagedAsyncTest {\n    @ClassRule\n    public static final ResourceTestRule resources = ResourceTestRule.builder()\n            .addResource(new DummyResource())\n            .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n            .build();\n@Test\npublic void test1() {\n    assertThat(resources.target(\"/async\").request().get(String.class))\n            .isEqualTo(\"foobar\");\n}\n\n@Path(\"/\")\npublic static class DummyResource {\n    @GET\n    @Path(\"/async\")\n    @ManagedAsync\n    public void async(@Suspended final AsyncResponse ar) {\n        ar.resume(\"foobar\");\n    }\n}\n\n}\n```\nI believe you may be missing the @Suspended final AsyncResponse ar parameter. I've uploaded the repo here: https://github.com/nickbabcock/dropwizard-2633\nOnce you figure out the issue or a reasonable time has passed I will delete the repo. Specifying exact versions works for me, so not sure if it is a bom issue\nxml\n    <dependencies>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-core</artifactId>\n            <version>1.3.8</version>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-testing</artifactId>\n            <version>1.3.8</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.test-framework.providers</groupId>\n            <artifactId>jersey-test-framework-provider-grizzly2</artifactId>\n            <scope>test</scope>\n            <version>2.25.1</version>\n        </dependency>\n    </dependencies>. Don't. Jersey 2.28 is not supported in Dropwizard 1.3.x. Dropwizard 2.0 will support it.. Yeah @jplock that seems sensible \ud83d\udc4d . You're right that there is / was a debate if it's too aggressive of a check: https://github.com/google/error-prone/issues/1144 \nDo you expect the following test to pass (I just wrote it offhand, but I can add it to the PR):\n```java\n@Test\npublic void testEquality() {\n    final HashSet> params = new HashSet<>();\n    final OffsetDateTime dt = OffsetDateTime.of(2018, 1, 1, 1, 0, 0, 0, ZoneOffset.UTC);\n    params.add(new InstantSecondParam(Long.toString(dt.toInstant().getEpochSecond())));\nassertThat(params)\n    .contains(new InstantParam(Long.toString(dt.toInstant().toEpochMilli())));\n\n}\n```\nEven though the params represent the same instant of time the test fails with the following message:\nExpecting:\n <[2018-01-01T01:00:00Z]>\nto contain:\n <[2018-01-01T01:00:00Z]>\nbut could not find:\n <[2018-01-01T01:00:00Z]>\nWhich can be confusing. Is the test contrived? Yes, as one should prefer Set<Instant> instead.\nA rebuttal could be that the types in the standard library don't act that way (and this test passes):\njava\n@Test\npublic void testEquality2() {\n    final String str = \"Hello World\";\n    final StringBuilder builder = new StringBuilder().append(str);\n    final CharBuffer buffer = CharBuffer.wrap(str);\n    assertThat(builder)\n        .isNotEqualTo(buffer)\n        .isEqualToIgnoringCase(buffer);\n}\nReading the assertions aloud doesn't make sense (ignoring underlying assertion implementation), as how can something be equal but not equal at the same time!\nIn the end, while linters should not be taken as the whole truth, I want to address the noise generated on compilation and either:\n\nGlobally suppress the EqualsGetClass check\nSuppress EqualsGetClass on a class by class basis\n\nLooking over the effected classes, I'm not overly concerned either way as lint instances fall under classes that in tests, effectively final, aren't acted upon by users. Only PrincipleImpl and AbstractParam need close scrutiny and I don't see how they'd be abused by this change. Anyways thoughts appreciated.. I got this. Can you expand upon the use case for this scenario? A scenario where specifying properties was available, but command line options weren't.. Are you ensuring that the response is closed?. Thanks for bringing the issue forward. Yes, Dropwizard appears to be susceptible to client crafted X-Forwarded-For family of headers. Ideally there would be a way to only trust X-Forwarded-For from a certain number of IPs (akin to nginx and traefik), but no such configuration appears to exist for Jetty. Spring boot has this feature disabled by default and recommends enabling it only if running behind a proxy.\nWhile I would normally be hesitant to change this behavior, I would be in favor of this config change for the default value, as \"not-being-susceptible-to-hostile-user-input\" should be the default.\nRegarding spec compliance, please file any discrepancies with the Jetty project.. Thanks @JLLeitschuh for pointing it out!. Try setting discardingThreshold to 0, otherwise events will be dropped under load. > does dropwizard uses logback Asyncappender for type console and file by default, instead of logback's ConsoleAppender and FileAppender\nIt wraps the FileAppender and ConsoleAppender in an AsyncAppender.. @joschi sure thing, I'll update the docs\n@mattnelson yes, I believe your conclusion is correct as I haven't encountered the request log printing under any other level, so the discardingThreshold should treat all requests equally.\n@Superluli I have found that if I have high importance logging statement (eg: auditing) to extract that into a db insert, durable message queue, or anything else that makes me confident enough to say \"I can be done with this request because I know I have audited it\". It seems add a lot of code to workaround a problem that I find to be small, but I'm sure there are those out there who would be very appreciative of a seamless transition. Though I do have to wonder, if it involves a breaking change anyways, how much better is this approach?. Yeah sounds good, I'm ok with this.. Yeah I can add that functionality in, it doesn't affect my use case (the clients of my api always seem to call with empty params ?bar=&baz=&qux=, which need to be interpreted as absent). If  but this class is to ignore whitespace as well, do you have suggestions on names? It wouldn't be just NonEmpty strings anymore. \n. > especially since Jersey Bean Validations could be used for this (with @NotEmpty and @NotBlank) for non-optional parameters\nI think the key here is \"non-optional parameters.\" Ideally I want to define optional parameters that if present, contain data (ie a string with a length greater than 0). If there is no data, then I want to the parameter to act as if it was absent.\nI'm fine if my implementation (the last commit of this PR) isn't merged -- it's easy enough to define per project.\n. Would that work? A ConstraintViolationException .getConstraintViolations() returns a Set<ConstraintViolation<?>>, and that would make determineStatus too narrow  to use. Please advise.\nImplemented your other suggestions. \n. ConstraintViolationExceptionMapper is a default exception mapper, and it will take precedence over a custom ExceptionMapper<ConstraintViolationException> that is registered.\n. Good catch! I rashly changed the current example in the name of aesthetics, thanks for correction.\n. Absolutely, it should.\n. Yes, that's more clear.\n. Fixed. Sometimes the IDE gets a little aggressive with imports :blush:\n. Does this mean that if I define a single advanced logger that all the other loggers won't take affect?\nGiven the following configuration\nyaml\nlevel: INFO\nloggers:\n  \"com.example.dw.Thing\": DEBUG\nadvancedLoggers:\n  \"com.example.app\": \n    level: DEBUG\n    appenders:\n      - type: console\n        threshold: ALL\nCorrect me if I'm wrong, but the logic here makes me think that com.example.dw.Thing won't be registered as DEBUG\n. Happy to oblige :+1: \n. Would it make sense to have\njava\nassertThat(rc.getEndpointsInfo())\n        .containsOnlyOnce()(\"    GET     /callme (io.dropwizard.jersey.DropwizardResourceConfigTest.TestDuplicateResource\"))\n. Instead of hand writing hashCode can you use Objects.hash?\n. newTreeSet accepts a Comparator, any reason why you couldn't reuse EndpointComparator?\n. java\npublic static <T> Entity<T> json(final T entity) {\n    return new Entity<T>(entity, MediaType.APPLICATION_JSON_TYPE);\n}\n. No need to delete this snippet of code. My sample in the comment was abbreviated\n. Not to get off topic, but this should already be possible if you define your own ExceptionMapper<ConstraintViolationException> and register it. (You'll also need to set registerDefaultExceptionMappers to false). Feel free to post on the dropwizard-user channel for additional questions.\n. I'm guessing tree is a typo :smile: \n. Is this needed here? If not, consider dropping it.\n. Why not orElse(Duration.seconds(5))?\n. Can you explain this change and why it's needed?\n. I'm assuming these lines are commented out by mistake, right? :smile: \n. Ah yes, but if you do it for this pull request, it as no chance of being accidentally merged and saves us time. We're lazy too!\n. @arienkock what about this?\n. Why should this now be a 400?\n. Nope, not in this case. It should be a 500 error because the client meets the input spec, except the server is unable to deserialize it because of the BrokenRepresentation (ie, the BrokenRepresentation can be fixed with a @JsonCreator, for instance)\n. Looks like you used a tab instead of spaces here. This issue also occurs in the tests. Please fix.\n. How do you feel about the following implementation instead (it's a bit shorter):\n``` java\n@Test\npublic void testCurrentLogFileNameIsEmptyAndAppenderUsesArchivedNameInstead() throws Exception {\n    final FileAppenderFactory appenderFactory = new FileAppenderFactory<>();\n    appenderFactory.setArchivedLogFilenamePattern(folder.newFile(\"test-archived-name-%d.log\").toString());\n    final FileAppender rollingAppender = appenderFactory.buildAppender(new LoggerContext());\nfinal String file = rollingAppender.getFile();\nfinal String dateSuffix = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"YYYY-MM-dd\"));\nfinal String name = Files.getNameWithoutExtension(file);\nAssert.assertEquals(\"test-archived-name-\" + dateSuffix, name);\n\n}\n```\n. Awesome, make the change and then this pull request looks good to me :+1: \n. Can you add an additional assertion about the response message\n. How do you feel about the following implementation:\n``` java\ntry {\n    final File file = new File(TCP_BACKLOG_SETTING_LOCATION);\n    return Integer.parseInt(Files.toString(file, Charsets.UTF_8));\n} catch (SecurityException | IOException | NumberFormatException e) {\n}\nreturn tcpBacklog;\n```\nIt's a bit shorter\n. How do you feel about condensing the two functions into:\njava\npublic static int getDefaultTcpBacklog() {\n    return SystemUtils.IS_OS_WINDOWS ? DEFAULT_TCP_BACKLOG_WINDOWS : DEFAULT_TCP_BACKLOG_LINUX;\n}\nWe already have a dependency on apache commons lang in core modules, so this shouldn't add any weight (but you'll need to reference the dependency in dropwizard-jetty's pom)\n. I'll let @joschi make the call. It's the same implementation as netty's, so I'm ok with either. \n. Gah, that's because the exception message starts with \"No suitable constructor\", which is one of our heuristics for a programmer error :crying_cat_face: \nWe'll have to change the heuristics (and not the test case).\n. Thanks for the tip, I'll have to take another look. I know I took a few swings at it in #1544 and #1527\n. I don't think we need to be in a rush to merge this PR, as I'd rather this PR stays open to remind us (me) to investigate this issue\n. This should probably be moved to the 1.1.0 section, as 1.0.0 has already shipped ;)\n. Still scratching my head, so I've decided to do a brain dump. I think the root cause is that there is not a great way to differentiate between various errors of JsonMappingException\nExamples from the JsonProcessingExceptionMapper test cases:\nClient Errors :\n\nExpecting an object, but JSON is false throws a JsonMappingException of \"Can not construct instance of foo: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)\". This should be a client error because the wrong json type was submitted.\nExpecting a URI, but JSON is \"no-scheme.com\", throws a JsonMappingException of \"Unexpected IOException (of type java.net.MalformedURLException): no protocol: no-scheme.com\". Ideally there would be a way to reach the underlying cause, but JsonMappingException is the root. Other exceptions while deserializing can be uncovered (like DateTimeException). Looks to only affect test case returnsA400ForMalformedInputCausingIoException\nExpecting a list but given a string throws a JsonMappingException of \"Can not deserialize instance of java.util.ArrayList out of VALUE_STRING token\"\nDeserializing a DateTime from [1,1,1,1] throws a JsonMappingException of \"Unexpected token (VALUE_NUMBER_INT), expected END_ARRAY: Expected array to end.\"\n\nServer Errors:\n\nBrokenRepresentation is missing a constructor and the exception is a JsonMappingException \"Can not construct instance of BrokenRepresentation: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"\nNonBeanImplementation doesn't contain any information on serialization and exception is a JsonMappingException \"No serializer found for class NonBeanImplementation and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\"\nTrying to construct from an interface throws a JsonMappingException of \"Can not construct instance of IInterface: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information\"\n\nThese seven situations all use JsonMappingException as the root cause and this is where we had to introduce heuristics. The following code gets us pretty close, but doesn't work on the client errors mentioned above.\n``` java\nfinal JsonMappingException ex = (JsonMappingException) exception;\nfinal Throwable cause = Throwables.getRootCause(ex);\n// Exceptions that denote an error on the client side\nfinal boolean clientCause = cause instanceof InvalidFormatException ||\n    cause instanceof PropertyBindingException ||\n    cause.getClass() != JsonMappingException.class;\nif (!clientCause) {\n    LOGGER.error(\"Unable to serialize or deserialize the specific type\", exception);\n    return Response.serverError().build();\n}\n```\n. Please remove copyright\n. Do you mind splitting up each of these assertions into a separate test case with a descriptive name like the other tests found in the file?\n. Ideally, this may have been split into another PR, but that's ok here.\nCan you write a test for this?\nEDIT: and also update the PR description to mention this feature so when updating the release notes we won't miss anything\n. Should this param converter be more like Jersey's default AbstractStringReader?\n. Does this method need to be included? Looks like you're just delegating to super.\n. Oh no, another copyright \ud83d\ude1b \n. Do you know how it will break backwards compatibility because doesn't the current classes get instantiated through StringConstructor, which calls AbstractStringReader\n. Looks like the copyright came back \ud83d\ude09 \n. I was able to cut the implementation in half and make it somewhat compatible with the FuzzyEnumModule that we use for Jackson enum serialization. I think it could be a good idea if params and body enums were handled the same way:\nIf there isn't anything fundamentally wrong with my suggested foundation, I'd like to see it integrated and improved upon \ud83d\ude04 \n. No problem -- the power of open source \ud83c\udf89 \nTo answer your questions:\n- Yes it is probably prudent to make the implementations exactly the same.\n- So extracting the shared code into an Enums class in dropwizard-util would be a fine idea\n- And yes a rename to FuzzyEnumParamConverterProvider, I'm assuming, will help discover-ability \n. Looks like there was a change that made readsEnumsUsingToStringWithDeserializationFeatureOff test case fail. Also looks like there is a style nitpick remaining.\n. Not sure if I'm a fan of using this exception, as it looks like it forces the use of another exception mapper.\nHave you tried doing just a WebApplicationException with the Response.noContent().build()?\n. Actually, looking at the code, I believe even if you supplied a WebApplicationException with a fully built response, it will respond with a json payload and a no content status \ud83d\ude22 \nI'm not sure if this is the intended purpose of WebApplicationException. Let me ponder this.\n. Yeah, couple sentences later\n\nSee the class ExceptionMapperBinder for a list of the default exception mappers.\n\nWhich is similar to the other snippets in the documentation.\n. It's a cut-and-paste-with-unsaved-changes-that-fixed-this-issue \ud83d\ude1e \nfixed.\n. I would feel better if \"(Jetty's default)\" were in yaml comments, to aid the copy + paste use case \ud83d\ude04 \nyaml\nexcludedProtocols: [SSL, SSLv2, SSLv2Hello, SSLv3] # (Jetty's default). Comment out the jetty default to convey specifying a regex as an excluded cipher suite is supported (not many people may know this).. How did you arrive at a default discarding threshold of 51? Isn't it -1?. nvm, ignore this comment, I forgot -1 meant undefined \ud83d\ude1e . Should we prefer /var/run/dropwizard.sock (Stackoverflow)?. Yeah that's fine. If I were using unix sockets I'd most likely change the socket location anyways...to something like /var/run/<servicename>.sock. But it may be something to add in the documentation (eg. normally unix domain sockets are in /var/run, but since we may not be running as root or have adequate permissions, store the file in /tmp). May need to disable this test for windows builds, no?. I commented out that line and the tests fails (locally), so it doesn't look like a default.. How do you feel about the logging section on the configuration page?. What do you mean by copy-paste? copy-paste the class name to register? Or copy-paste the contents?\nIf you're worried about informing users to register the exception mapper, maybe we can do something like we've done with other exception mappers (we define default ones that can be overrode). Ah yes, great catch. Updated \ud83d\udc4d . Compromise with \"n events may be discarded\"? I realized that \"will possibly\" means \"maybe\" \ud83d\ude0a . I agree that public is not needed, but dropwizard-e2e isn't deployed to maven and it's not imported into other dropwizard modules. The other applications in e2e suffer the same problem that the access is too wide. Maybe another PR is needed to clean up all the unnecessary wide access.. I can get on board the remote train.. Spring boot makes references to consuming web services with a REST client \ud83e\udd14 \nIf we take the case where a dropwizard app will have a client library and use REST clients (using Stripe here to keep things straightforward), the project structure would look like\n\ncom.stripe.stripe-client\nbank-api-client\netc\ncom.stripe.stripe-app\nclient\netc\n\nI'd think that having com.stripe.stripe-client.* and com.stripe.stripe-app.client could cause confusion even though the terminology is correct.\nI'm even open to switching to a structure like:\n\ncom.stripe.stripe-library (stripe's client actual artifact name is stripe-java, so something to consider)\ncom.stripe.stripe-app\nclient\ncom.stripe.stripe-core \n\nTo me, core sounds like a module used in other modules, library sounds like something that is included as part of a larger whole, and app is something that is deployed.\nWhy does naming things have to be so hard \ud83d\ude16 . Since naming is hard, I've gone back to calling it client instead of remote. We can discuss what they should be named another time, and keep this PR focused on elaborating their descriptions.. Thinking out loud here; it seems like a little bit of a hack to override the content-type. I was thinking that it may be possible to remove the hard coded application json content type from the exceptionmappers, but it looks like it is since we moved to Jersey 2.0. Is a plain string valid HTML? (no <html> tag, etc). Should the argument be String driverClazz instead of PooledDataSourceFactory? It doesn't look like any other properties from the configuration are useful for JDBI. And it would make it easier to extract the creation and configuring of a DBI instance that isn't tied to a DBIFactory. Just realized databaseTimeZone needs to be accounted for too, so might not be as straightforward as I initially thought \ud83e\udd14 . Good point, I probably should stop trying to kill two birds with one stone, and continue to do what I am currently doing. I maintain a JdbiUtils in my code, so that I can do the following in my tests:\njava\nfinal DBI jdbi = JdbiUtils.configureDbi(new DBI(\"url\"), \"\", Optional.empty());\nI don't think this should hold up this PR. :+1:. That would be interesting to see \ud83d\ude04 \nBut if you think that would detract from the PR, we can continue in another issue/pr.. Ok sounds good to me \ud83d\udc4d . It looks to me, since nothing fancy is going on with the log format, isDebugEnabled is not necessary, considering that debug calls isDebugEnabled as well before actually logging.. Same thing here.. The difference between\n```java\nLOG.debug(\"Something to say\", throwable);\n// and\nif (LOG.isDebugEnabled()) {\n    LOG.debug(\"Something to say\", throwable);\n}\n```\nshould be so minimal in this case (we're talking about in the middle of a jersey exception handler!) that I would prefer more the concise approach. \nThank you for making the changes.. Ah yes, I have to keep reminding myself about the correct usage. Since this is an example of a status flag, volatile should be used here. I have updated the PR . I feel like the TLS configuration code is duplicated in three places: server, client, and now logging. It's fine for this PR, but I'm curious if we could ever consolidate these options so that none of the implementations are ever out of date (like we saw recently with lack of a jce provider for clients). Does this overwrite the exception mapper that a user may registered for handling server errors?. Excellent! Then, if it's not to much to ask (so we don't regress on this behavior), can you write a unit test where you register a custom new LoggingExceptionMapper<Throwable> (ie. return a 500 error with response of like \"server is down :(\") and assert that your listener picks up the exception, and the client still sees our custom \"server is down\" response?. As long as custom new LoggingExceptionMapper<Throwable> overrides this one here, then this PR doesn't break backwards compatibility \ud83d\udc4d \nWith that, is there anything left you'd like to address before I give this PR another look?. Are there benefits to using a BigDecimal when it is converted into a double straightaway?. I can't help but think if someone set\nyaml\nmaxMessagesPerSecond: -2\nthat this should fail fast instead of ignoring it (eg. the dash was a typo). So I was thinking of using a validation constraint for the range (0, \u221e). Unfortunately the Min annotation cannot represent an exclusive range, and DecimalMin isn't technically supported for double according to the bean validation spec -- but Hibernate Validator might support it\nso you might want to try something like:\njava\n    @DecimalMin(value = \"0\", inclusive = false)\n    private Double maxMessagesPerSecond;\nAnd write a test that ensures that validation fails if someone enters 0 or below. What do you think?. If the configured provider doesn't work, should this exception be propagated instead of falling back -- in order to alert the user their provider is incorrect?. I haven't looked too close at the impl but I'm in agreement that when believe the situation where the initial level is WARN and there are two tasks to set the level to DEBUG and INFO then no matter when the two tasks are executed or finished the final log level should be set back to WARN. Yeah fractional makes sense, if you want 30 messages per minute, you'd set to this 0.5. I think you could be on to something, you could have it like (may not be the best name):\nyaml\nmessageThrottle: 1ms\nHere you'd be throttling logging to 1 message per millisecond.. Try:\njava\n    @BeforeClass\n    public static void setUp() {\n        assumeFalse(SystemUtils.IS_OS_WINDOWS);\n    }\nEdit: (that made the test ignored on my windows machine). Can this be written more straightforward with something like Math.ceil? a la\njava\nint high = (int)Math.ceil(intervals) + 1\n. hibernate-core is only brought in with dropwizard-hibernate, so this would still be a new dependency to non-hibernate orm users.\nYou may be able to accomplish the same thing using Javassist, which is already a dependency of dropwizard-core.. Looks like this was changed accidentally. Looks like there are multiple occurrences of the before/setUp swap \ud83d\ude04 \nI'll assume you'll fix all of them, so I'll stop commenting when I see one.. Looks like after/tearDown suffered the same fate. Does this mean the temporary file allocated in the test will need to be deleted?. Should this test also confirm that the exception message contains something about the value being out of range?. While you may not be able to extend DurationDeserializer, have you seen what the implementation would look like if you delegated to DurationDeserializer.INSTANCE, after bounds checking? I feel like the code may be shorter and less prone to maintenance.. This is an unused import\nsuggestion\nHmm, idk how these github suggested changes work \ud83d\ude06 . IMO, no need to deprecate just because it's overloaded.. Any particular reason this test was removed? Should it now return a 200 or something else?. I feel like somewhere here, it'll pay to mention Unwrapping.Skip as I see it's used on tests with types like IntParam. The documentation says that the endpoint will fail ... but if I understand correctly, Jersey 2.28 / Hibernate validator 6 will cause the endpoint to succeed? You can probably delete the sentence about the caveat, as it sounds like it doesn't exist anymore. Is this workaround required anymore? Sounds like this section can be deleted. Just curious, any commentary on why the *ParamConverters changed to return empty even in the face of bad values? Is it because they've consolidated the behavior of the *ValidatedValueUnwrappers into them?. Huh, I wonder what I meant when I originally wrote that (I think I am the one). The linked issue is closed. Hmm \ud83e\udd14 . Will OptionalInt be a true replacement in v1.3.9? I thought it could only be replaced with the new functionality brought in Jersey 2.28 + hibernate validator 6.0. Code snippet is either out of place, or needs a .. code-block:: java. Should this be MyApplicationConfiguration or MyConfiguration?. I pinned the openjdk image previously due to a bug (https://github.com/dropwizard/dropwizard/pull/2559). Do we still want to pin to a specific version? Else we can just use latest. Sounds good, I callout that the ratio is defined by logback.. ",
    "robomark": "Yes, this would be helpful - I ended up running my tests with a similarly hacked copy of ViewMessageBodyWriter, which isn't a sustainable practice. Thanks for identifying this.\n. ",
    "petergphillips": "In fact HttpHeaders can be injected into the ViewMessageBodyWriter, in a similar fashion to #651.  Using the ContextInjectableProvider from #651 the rule declaration becomes:\njava\n @ClassRule\n  public static final ResourceTestRule resources = ResourceTestRule.builder()\n    .addResource(new MemberNodeResource(backend, mockNode()))\n    .addProvider(new ViewMessageBodyWriter(new MetricRegistry()))\n    .addProvider(new ContextInjectableProvider<HttpHeaders>(HttpHeaders.class))\n    .build();\nNote that I haven't setup a view renderer, so I will just get the plain html returned.  Then to test:\njava\n        String response = resources.client().resource(\"/test/cancel\").get(String.class);\n        org.assertj.core.api.Assertions.assertThat(response).contains(\"Test Cancelled\");\n. We've managed to get it working by copying the code from com.sun.jersey.spi.container.servlet.ServletContainer.ContextInjectableProvider into a new file:\njava\npublic class ContextInjectableProvider<T> extends SingletonTypeInjectableProvider<Context, T> {\n    public ContextInjectableProvider(Type type, T instance) {\n        super(type, instance);\n    }\n}\nand then the rule becomes:\njava\n @ClassRule\n  public static final ResourceTestRule resources = ResourceTestRule.builder()\n    .addResource(new MemberNodeResource(backend, mockNode()))\n    .addProvider(new ContextInjectableProvider<>(HttpServletRequest.class, request))\n    .build();\nwhere request is a mock instance for testing (e.g. created using Mockito).\n. ",
    "akushe": "Most of the projects which I am using are restful and have this resource.I assumed that other projects might also have but I can correct the description\n. Fair point\n. ",
    "oddcb": "Oops. Sorry. My bad. Had a jersey-multipart dep. still on 1.18.\n. ",
    "jhalterman": "Will do...\n. @joschi I think this issue was closed a bit too soon. \nAs @t-oydna points out and as the slf4j manual describes, having an explicit dependency on logback or anything else can and will cause conflicts with other things on the classpath. I know of one project, where I had championed Dropwizard, that was forced to abandon it entirely because of this. In that project, Spark, which like Dropwizard also uses slf4j but instead opts for a log4j bridge, sets up the classpath and loads the log4j bridge before Dropwizard can attempt to load logback. Obviously slf4j complains, but since Dropwizard uses logback APIs directly, there is no way to make logging work for both Spark and Dropwizard. \nRegarding this:\n\nyou can exclude the logging framework from other libraries and replace them with the appropriate SLF4J legacy bridge\n\nIn the case of spark, when used via spark-submit, there is no way to exclude log4j.\nSo two thoughts:\n- There is absolutely no point in Dropwizard even using slf4j if it requires, through a dependency, usage of Logback. As the slf4j manual states, this negates the purpose of slf4j.\n- The logback dependency, basically, makes Dropwizard's ability to log incompatible with any other technology that is similarly opinionated about logging and runs in the same process/classloader, like Spark. \nWhy limit potential adoption of Dropwizard and force users to abandon it over logging?\n. ",
    "darkjune": "I think original design of thread pool is this, share all threads in one thread pool, avoid thread context switching cost.\n. ",
    "bramp": "It looks like Jetty has changed their defaults to be sensible: https://github.com/eclipse/jetty.project/commit/2d52280179a7d9f8b2449c49bcb0847e02115082 thus resolving this issue in jetty-9.2.2.v20140723\n. ",
    "vishvananda": "This seems to be fixed for maxThreads but not adminMaxThreads.\nIf maxThreads is set too low, it errors as expected.\nIf adminMaxThreads is set to something far too low (say 2), the service will happily start without displaying an error message from jetty and then not be able to deal with requests. It also hangs on shutdown for the full 30 second timeout while it is waiting for jetty to shutdown.\nI suspect either the admin connector is taking a different route through jetty and skipping the exception, or the exception is getting eaten somewhere on the dropwizard side. \nUsing dropwizard 0.9.1 fwiw\n. ",
    "fedotxxl": "\nThe following is the Dropwizard ExceptionHandler that is processing the errors it\n\nWhen I manually throw new JsonMappingException this handler is used. Otherwise (on converting response to json exception) dropwizard doesn't use any handler - it just calls com.yammer.dropwizard.jetty.UnbrandedErrorHandler\nI think this is critical problem - I can't correctly map JsonMappingException\n. Fixed. \n1. Read http://stackoverflow.com/a/27513081/716027\n2. Or implement custom LoggingFactory  (e.g. https://gist.github.com/fedotxxl/0b3cc5e5e4eaeffdcde1f9834796edc6) and override getLoggingFactory() of your Configuration class to return instance of new loggingFactory (I used this approach).\n. ",
    "sysmat": "in dropwizard v 0.8.x you just register filter to jersey:\n1) CustomContainerResponseFilter implement ContainerResponseFilter\n2) environment.jersey().register(new CustomContainerResponseFilter());\n. I use dropwizard:1.0.5 and what is actual solution to use:\n@Context\nHttpServletRequest request;\nI was trying but  request is always null\n. ",
    "VSJTech": "Adding dropwizzard servlet filter is not working.. it is not getting invoked nor i see the loggers getting printed from the filter class.\nI have implemented a class that implements filters and added the same to the server application. Any help is appreciated.\nPurpose of my filter: when application starts i want to get my filter invoke and get my application to redirect to a url(for SSO authentication). and get the page returned back to my application after authentication\n. ",
    "caub": "Thanks yes, I didn't read the Getting Started yet, I see the advantage of a fat jar, I still have kept my method in https://github.com/cyrilauburtin/jersey-hibernate-h2/blob/master/pom.xml#L101\nquick question is it possible to package it as a classic war and run it on tomcat8 or still jetty? I guess  it wouldn't be that easy with all the dynamic configuration, I'm just asking and I don't really need that\n. ok thanks, not an expert in this, Jetty for example is very good at translating between dynamic code configuration and xml files\n. ",
    "bnese": "I'm sorry, but I caused all your comments to disappear when I rebased my pull request.\nYour comment: \"Is there a reason for using the Jetty UserIdentity instead of allowing the bundle to define the type of principal that the Authenticator returns?\"\nBasicAuthenticationFilter need an object/interface that provides data to SecurityContext (Principal and a list of authorized roles belonging to the Principal) and UserIdentity seemed like a good candidate.\n. @joschi, fixed! :)\n. ",
    "happysundar": "Hi, \nIs this in dropwizard 0.7.1 release? \nThanks!\nSundar\n. Thank You for your response!\nOn Tue, Aug 5, 2014 at 8:38 AM, Nick Telford notifications@github.com\nwrote:\n\nThis was specifically excluded from the 0.7.1 release as it changed the\nconfiguration API for logging, making it incompatible with the 0.7.x API.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/542#issuecomment-51215237.\n. \n",
    "jairamc": "Seems like\n# the maximum lifetime of an idle connection\n closeConnectionIfIdleFor: 1 minute \nis the same case. \n. ",
    "dirkraft": "How's that look?\n. ",
    "esnellman": "Would porting to Jersey 2.x allow me to do Asynchronous work?  \nI really want to do this in dropwizard: https://webtide.intalio.com/2013/04/async-rest-jetty-9/\n. ",
    "wonderb0lt": "Hey, is there anything to do here? The build seems to fail for a dependency issue. The build failure seems to be persistent, I'm getting it too on my local mahine. Where could one find that metrics-logback 3.1.0-SNAPSHOT dependency?\n. I can't believe this is happening. Thanks @saadmufti for all your work!\n. I've considered that, but as far as I could see that, this concerns servlets (it's a class in javax.servlet, and filters a ServletRequest) and not JAX-RS. I'm not sure if servlet filters should be documented in Dropwizard at all.\n. Makes sense, I will  spin up an example for Servlet filters also and change the section titles accordingly.\n. I've now also included an example for Servlet Filters which follows the example I wrote for Jersey Filters. The respective sections have been renamed. \nSince I haven't registered any Servlet Filters in my projects yet, I've followed examples from the Internet on registering them. It'd be nice if anyone could verify that this is indeed the correct and \"canonical\" way to register them.\n. @celkins Thanks I'll incorporate Jetty's bundled filters and the more idiomatic way for registering filters. I'll also add that these servlet filters still apply to Jersey requests. \nAbout your point that one would rather create new JAX-RS/Jersey filters, @grahamoregan made a point for also including servlet filters from my point of view.\n. ",
    "ankel": "Is there any update on moving on to Jersey 2 ?\n. ",
    "sent1nel": "Is this PR still blocked? Looks like the CI build is passing now..\n. ",
    "jonathanmorley": "If you have resources that implement interfaces, it appears they do get added to Dropwizard as resources with the expected paths, but logging of the resources (The following paths were found for the configured resources) does not occur unless you give an @Path annotation on the implementing class. This is not the same as Dropwizard 0.7.1, where they would get logged correctly too.\n. ",
    "ryantenney": "I'm very sorry for the delay!\n. Metrics 4 isn't going to happen anytime soon.  I wanted to get a 3.2 release out, with some fixes/small features like this.  We could probably make that happen before the Dropwizard 0.9 release.\n. ",
    "kschulst": ":-D hehey!\n. ",
    "ganeshs": "Long pending. Wow! \n. ",
    "vaamyob": "Now all we need is 0.8.0 to be released.\n. It's been 4 months since this issue was opened.  I'm surprised @codahale hasn't responded, since overriding the default DW behavior seems like it would be one of the first things a new project would want to do.  How else are you going to get ConstraintViolationExceptions to the client?\n. ",
    "esemsch": "Brilliant, many thanks @saadmufti !\n. ",
    "devinrsmith": "Yay! Let's go 0.8.0!\n. @mhurne ... are you saying you tried\nmystring: \"001\"\nand got \"001\" out? B/c that's what I want! Instead though, I'm getting \"1\".\n. @joschi pushed\n. I ran into a potentially similar issue a couple months ago with 0.7.1 vs 0.8.0-rc1, but didn't have the time to verify what I was seeing. This sounds very similar.\n. My full conf is:\n```\nserver:\n  rootPath: '/api/*'\napplicationConnectors:\n  - type: http\n    port: 9000\n  adminConnectors:\n  - type: http\n    port: 9001\nmetrics:\n  reporters:\n    - type: log\n```\nMust be something different about my app. \nI thought at first it might have something to do with the Java8Bundle https://github.com/dropwizard/dropwizard-java8, but the issue is still present when I don't include the bundle.\n. On stepping through with a debugger, it's trying to validate a TimeUnit context of some sort. If I get rid of the metrics block it works, so I'm pretty sure it's some combo of something involving MetricsFactory.\n. Looks like google cache has an instance where a user on stack overflow posted a very similar NPE:\nhttps://webcache.googleusercontent.com/search?q=cache:fyHJz3DBUzUJ:www.scriptscoop.xyz/34209414/dropwizard-0-9-1-fails-to-load-metrics-configuraton-for-ganglia&num=1&hl=en&gl=us&strip=0&vwsrc=0\n. I've enforced and verified there is only one version of Hibernate Validator.\nThanks for quick responses guys... I'll try to pare down my application to minimally demonstrate the issue. I'll be sure to link to it here, or post the solution if I figure it out.\n. I've figured out the issue, and it does have to do with different versions of Hibernate.\nUnfortunately, it was something that the enforcer couldn't find. \nMy project and dropwizard is using BOMs / dependencyManagement sections. Our dependencyManagement section declared a dependency management of 5.1.3.Final. Once DW gets around to actually depending on a version, our dependencyManagement section \"wins\" and 5.1.3.Final is imported by DW (instead of the 5.2.2.Final). So there isn't even a chance for the enforcer to notice different versions.\nThanks.\n. Yes, we are using a different process to deal with deleting the logs.\nI don't need TimeBasedRollingPolicys removal machinery... and it seems like since they provide that option, DW should too.\n. I was using 0.9.2. It was on an H2 database that wasn't created with liquibase. (It was created with JDBI DAO.)\nWhen I create a simple database with liquibase, I'm successfully able to dump it successfully.\nI went ahead and wrote migrations.xml by hand for my case. I'm assuming that my underlying database had complex constraints that liquibase wasn't able to figure out. \nI didn't save the files, so I'm not able to share the db files. I can spend some time regenerating a similar schema via JDBI to reproduce.\n. ",
    "sirusdv": "Popped in just to say thank you @saadmufti !\n. ",
    "mkouba": "@mveitas I think that's fair enough. I will create a new dropwizard-views-trimou repo under trimou organization (https://github.com/trimou). Thanks for quick reply.\n. @mveitas Hello again. We've moved the proposed module under Trimou extensions (https://github.com/trimou/trimou/tree/master/extensions/dropwizard) and just released the first version. It's available in the maven central repo: http://search.maven.org/#artifactdetails|org.trimou|trimou-extension-dropwizard|1.6.0.Final|jar. Is there the list of external modules you mentioned above? Or should I send a pull request to the Dropwizard docs?\nThanks!\n. @joschi Great, thanks!\n. ",
    "gdusbabek": "@nicktelford it probably is an odd case. We have a large application that has been in production for quite some time. It has it's own configuration settings, logging settings, and of course, it's own metric registry.\nIt currently has thrift and raw netty+jackson API endpoints. We've been experimenting replacing them all with Dropwizard.\nWe've found that as long as we respect the Dropwizard bootstrap process (providing our own ConfigurationSourceProvider etc., everything works fine. We did end up having to write logging AppenderFactory implementations for airbrake and zmq-logstash though. My only gripe is that DW kind of forces logback upon you.\n. Good points. I'd like to focus on solving a particular problem and be able to add REST support to it. Dropwizard enables this well for the most part.\nUnless you're well-versed in the process of standing up HTTP services using Java, putting it all together is a little intimidating.\n. ",
    "twogood": "I have the same issue!  I need @JsonCreator support for one of my enums, but FuzzyEnumModule gets in the way. Is there any way to work around this?\n. @chrsan Exactly what I need, and much cleaner than what I was currently writing. \nTack s\u00e5 hemskt mycket!\n. Why mess with the AssetBundle when you can add the AssetServlet in the run method?\n``` java\nAssetServlet assetServlet = new AssetServlet(\"/status\", \"/status\", \"index.html\",\n                Charsets.UTF_8);\nenvironment.admin().addServlet(\"statusWeb\", assetServlet).addMapping(\"/status/*\");\n```\n. ",
    "chrsan": "We do it like this in out own module which we register at bootstrap:\n``` java\n@Override\npublic JsonDeserializer<?> findEnumDeserializer(Class<?> type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    List factoryMethods = beanDesc.getFactoryMethods();\n    if (factoryMethods == null) {\n        return null;\n    }\nfor (AnnotatedMethod am : factoryMethods) {\n    JsonCreator creator = am.getAnnotation(JsonCreator.class);\n    if (creator != null) {\n        return EnumDeserializer.deserializerForCreator(config, type, am);\n    }\n}\n\nreturn null;\n\n}\n```\n. Var s\u00e5 god ;)\nOn Wed, Jun 25, 2014 at 12:30 PM, David Eriksson notifications@github.com\nwrote:\n\n@chrsan https://github.com/chrsan Exactly what I need, and much cleaner\nthan what I was currently writing.\nTack s\u00e5 hemskt mycket!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/549#issuecomment-47084522\n.\n. \n",
    "gjesse": "+1 thanks for the tip\n. Is the 1.3.3 release still coming soon with this fix?. ",
    "lagrwilson": "I see that Dropwizard 0.7.0 was release on April 4.\nhttps://groups.google.com/forum/#!topic/dropwizard-user/PmlnUR7Li6g\nIs there a way to set up dropwizard so that 2 different and equal applications can run?  Can I use one jar file in my target directory, and type in 2 commands and have Dropwizard spin off 2 different services?\n. We would like to create one jar file. Within the 1 jar file would be 2 java main classes which are the 2 applications.  If we type in the command app1, the app1 class will fire up using the app1.yaml configuration.  If we type in the command app2, the app2 class will fire up using app2.yaml configuration.\nThe logic behind this is to deploy one jar but have our ops guys type in either the command to start one application or the other one.\n. Dear Graham,  but the java main which server is pointing to is the same.  How do I get them to differ and to be equal. (I'm not looking to code an embedded application within a master application).\n. Sure.  Thank you for your help.\n. ",
    "betrcode": "So happy to have made this amazing contribution! ;-)\n. ",
    "Zoroaster668": "The Travis CI build fails due to a connection reset during a unit test; not sure yet why that is.\n. Hmm.  Now the tests are passing.  Not sure why that is, either, as I didn't change anything.\n. OK, I've made the requested changes, and thanks for the advice on\nTravisCI.  :)  Please let me know if you see anything else you'd like\nchanged.\nOn Fri, Jun 13, 2014 at 4:13 PM, Jochen Schalanda notifications@github.com\nwrote:\n\nIn\ndropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java:\n\nimport java.util.List;\n import java.util.Map;\n import java.util.concurrent.ExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n\nPlease use the SLF4J Logger\nhttp://www.slf4j.org/apidocs/org/slf4j/Logger.html like the rest of the\nDropwizard project.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/558/files#r13769751.\n. I'm happy to help but I'm not sure what you mean - I haven't really used\nGithub much, so sorry if I sound kind of dumb here.  The changes are pushed\nto the branch tied to the pull request as I understand it; I'm not sure\nwhat it is about the pull request I need to update.  Just let me know\nexactly what it is you need and I'll get it done.\n\nThanks, Patrick\nOn Sun, Nov 9, 2014 at 8:38 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nIn\ndropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java:\n\nimport java.util.List;\n import java.util.Map;\n import java.util.concurrent.ExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n\nWould you mind updating this PR with the changes you've made? Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/558/files#r20058721.\n. \n",
    "kryger": "A month ago.\n. ",
    "besquared": "Sorry I should mention the example is from a DW 0.7.0 application. Haven't looked back at 0.6.x.\n. This is fine I suppose. A bit ugly to sprinkle it in here and there but will certainly work. Thanks!\n. ",
    "justrudd": "The main use case for me is configuring logging for different environments and different geographies. Environments are dev, qa, and prod. Geographies are...well...geographies (US, Canada, etc.). We have different databases clusters, redis clusters, etc. at the environment and geography level. I know the Dropwizard way is to have YAML file per configuration needed. But having seen developers forget to add configuration, I've been doing a more of a single file configuration.\nSecondly, all appenders get added to the root logger. To solve this, I have to do it the RequestLogFactory way.\nNow I can do some of what I need via code in a ConfiguredBundle. But by the time my ConfiguredBundle.run is called, logging is initialized. So I end up doing a lot of LoggerContext manipulation, stopping appenders just to re-add them with the correct environment/geography settings. So basically re-doing all the work that LoggingFactory was doing. And because I can't do everything in my  ConfiguredBundled, I've now got to ask \"What are you trying to accomplish?\", \"I'm trying to do foo\", \"OK. You need to update ConfiguredBundle\", or \"OK. You need to derive a class from , copy and paste the code to look similar to .\nIt is much easier to make all these decisions in a single logback.groovy file.\nAnother use case that has come in very handy for me, is to add an extra file appender that gets attached to a specific logger. So all logging will go to the root logger and all it's appenders, but I \"fork\" the logging to go to a new file. This way if I want to debug what just one component is doing, I don't have to look through all the noise of the main log file. The only way I've found to do this is the \"RequestLogFactory way\", but not exactly because in this use case I actually do want additivity (RequestLogFactory turns it off). Now if I've already gotten it written, no big deal to turn on in a configuration file. If I don't have it written, I've got to go write it, get it plumbed in, and then turn it on in configuration vs. using the facilities that exist in Logback directly.\nAnd the final use case for me is filters. The only filter that is used is the threshold filter. And in order for me to add my own filters, I've got to derive classes from ConsoleAppenderFactory and FileAppenderFactory (I don't use Syslog so I didn't have to derive a class from that). Why do I use filters? We have \"tracers\" that we fire through our code to ensure things are working properly. That tracer is a unique string that get's added to the MDC context. We want those log events to bypass the main log file (which is post processed every 15 minutes looking for real errors. And we know the tracers are going to cause errors so no reason to have that triggered) and to a tracer appender that is monitored as events come through. So as I said, I had to derive classes from the normal appender factories and implement my own appender factory. Again it isn't hard code to add, but I knew the logback groovy and XML syntax fairly well. With DW, I had to learn the DW way (appender factories) plus what the programmatic logback code looked like (which isn't always the same as the XML or groovy).\nThere is nothing listed here that can't be done with some code written in DW (i.e. you could make a generic class that looks like a RequestLogFactory that you can just configure through YAML. You could add filter configuration to AbstractAppenderFactory, etc.), but I wonder why you would. This PR allows people that have simple logging needs to continue using DW's setup. But for those (like me) that need some of the advance features (MDC filtering), we can turn it off and let logback configure itself.\n. I assume when say Jersey XML, you mean the web.xml stuff if you were running Jersey out of a servlet container. Since DW runs out of an embedded Jetty, configuring those with XML would not be appropriate. And since Jetty XML is just calling methods on the same classes that DW embeds, that wouldn't be appropriate either.\nAlso I don't believe that with Hibernate and the Validator that DW is explicitly blocking outside configuration. With the HibernateBundle for instance, there is a protected virtual method that gets called that is passed the Hibernate Configuration object that allows me to do whatever I want to it. I can change properties in code, I can pull in a .properties file, or I could even overwrite all the properties from an XML file. DW has done things to make it easier to get off the ground and running, but it did not hide all the knobs and buttons I'm allowed to press.\nThe same could be said for the Validator (it isn't quite as clean as Hibernate ORM is).\nBut with Logback, there are no callbacks to let me tweak it the way I need. It is bootstrapped so early in the process, by the time my code starts getting executed, I can't do anything to it w/o tearing it all down and setting it back up. I get the simplicity of it for Operations. I do. But as logback evolves, DW will always be playing catch up on configuring features. \nMy preference would be for the default logging to work as is. It covers 80% of what people need. But for those of us who need more, let us turn it off and configure it using all the normal logback facilities.  So far I've been lucky to use DW for a few dozen services. And out of those, most were happy to use the default configuration. But for those where I needed the customization, it was harder than it should be to let me do what I needed to do.\n. So this has been open 9 months. It is out of date (I didn't keep it up to date with 0.8 code), and it appears that it isn't going to be applied. It looks like a pretty even split between those that do want it and those that don't want it.  \nRegardless, I have moved on from DW to other tools (primarily because I'm not using Java day-to-day) so I have no interest in this anymore. Luckily, it would appear that @DeanPoulin did what most of you want - reimplemented logback configuration in YAML.\n. ",
    "skjegg": "Just adding my 2cents. I would like to use the logstash-encoder to format my log statements as JSON. While looking into it, I ended up implementing support for it the \"DropWizard\" way. See : https://github.com/skjegg/dropwizard/tree/logstash-encoder  I am very tempted now to toss it, and adopt something along the lines of what @rkapsi is doing in anticipation of more sophisticated logging configurations further down the line. \n. Yes, creating a new AppenderFactory is an option.  However, in my particular usecase, I don't trust the central logging server, network,etc to be up 100%, so I'm using the logstash-agent to tail the log files for me as a buffer. Looking closer at the PR from @justrudd , I think I like that approach better, as I am also anticipating a need for more sophisticated configurations, some that would have absolutely no relation to logstash. \n. +1 . If Jersey 2 doesn't allow for unregistering exception mappers, yet retains the utterly broken un ordered Set implementation, it could make moving to 0.8 difficult for us. \n. +1 for this to be merged... \n. ",
    "sschwell": "+1 on ability to optionally configure logback natively.\n. ",
    "ChristerF": "+1 for this ability too - we're running a Dropwizard service inside of Tomcat 7 (using Wiz2War) and for that use case you want logging configuration in DW to be disabled.\n. @nicktelford Given the support shown for this, any chance this can be merged into 0.8 soon?\n. I'm using Dropwizard as a library itself hosting inside Tomcat (bypassing Jetty and using Tomcat's servlet container) and while this works pretty well, the logging configuration is a huge sore point.\nHere is a proposal: Move this static code section in Application.java:\nstatic {\n        // make sure spinning up Hibernate Validator doesn't yell at us\n        LoggingFactory.bootstrap();\n    }\nand move that to DefaultServerFactory's buildServer section instead. This would make the point where Logging gets configured more well defined and would allow an override of the ServerFactory if you want to build a different kind of server where logging is handled differently.\nSee https://github.com/twilio/wiztowar for an example (DW 0.6) to get an understanding of why this is useful.\nTo preempt any \"why run in Tomcat\" questions - we have to run in Tomcat due to our apps also using a SIP Service container which is only compatible with Tomcat.\n. @Supagoat I don't think @rkapsi's suggest workaround is implemented in .8 - thus this PR to fix that.\n. I'm thinking this PR https://github.com/dropwizard/dropwizard/pull/567 achieves what is necessary. Vote it up if you think it does.\n. ",
    "danharvey": "+1\nI also agree, we're starting to output logging JSON so would prefer to be able to configure logback more than dropwizard allows.\nI guess we should also do this for the request logging in Jersey as well?\n. ",
    "GreyTeardrop": "+1\nI have another usecase for native Logback configuration.\nOne of bundles that my application uses logs some DEBUG-level statements in its initialize phase. I'd like to enable those at my development environment, but there seems to be no way to do that: Dropwizard resets log level to WARN early at application startup and won't set any other log levels until Configuration is parsed, which is too late for my purpose.\n. @kilemensi Is there already some software design or ticket for the refactoring you've mentioned? I'm curious 'cause I right now can't see how all usecases could be covered without a significant backward compatibility breakage. If logging is only configured by configuration YAML then by definition logging is not configurable before YAML is loaded and parsed, which is pretty late at application startup. Parsing configuration earlier could presumably have backward compatibility issues.\n. The problem with exception mappers in Jersey 1.x is caused by ExceptionMapperFactory class, as it stores all exception mappers in HashSet and has unpredictable iteration order (even though complete set of singletons in DefaultResourceConfig has predictable ordering).\nHowever, Jersey 2.x replaces that HashSet with LinkedHashSet. It might resolve exception mappers ordering issue for Dropwizard 0.8, but I haven't yet had a chance to check that.\n. ",
    "Supagoat": "A gigantic +1 for me.  I really like dropwizard and would love to use it in production, but I've gotten to the level of testing to where the logging has become a show stopped for me.\n. pparth: I would argue that without the ability to shut of logging from certain packages, dropwizard fails to meet its production-ready statement.  We should not be forced to choose which 3rd party libraries we use  based on their log output.  \nAs an example, I'm using htmlunit for some scraping.  It logs incredibly verbosely (hundreds of lines for a single page view) at the WARN level for things that, to me, are irrelevant.  The library otherwise works great for me, but I can't have it throwing all that garbage into logs, and I don't want to switch all my info logging to the ERROR level just so I can set the dropwizard log level to ERROR and still get all the log messages I want.\nHeck, even during development there are many libraries whose DEBUG messages don't matter to me and which clutter up the logs I'm trying to look at for my development use.  \nI have no need for a massive logging framework.  I don't see why this is such an all-or-nothing concept for you.  I fully support the configuration of dropwizard logging through its yamls with the option to override with the almost-as-simple logback.xml (or groovy) configuration.  The fact is that if  you compare the configuration options dropwizard offers for logging to what it has for http/s connectors, there's clearly a gap in capabilities offered.  \nAnyway, rkapsi's workaround is sufficient for my needs so I'll continue on evaluating dropwizard for production use.  \nNow, if as kilemensi says, the yaml configuration in .8 can handle this, then I'll be satisfied.\n. Glenn: Yes I just saw Ted's reply to me in the dropwizard users group.  I haven't tested his suggestion yet (just read it and am about to) but if that works, it'd make me happy!  It wasn't clear you could do that from the dropwizard documentation.\n. Yeah, as am I.  Between being informed that you CAN set logging levels per package in the yml and rkapsi's workaround for the rest, I'm happy to wait for .9\n. ",
    "pparth": "-1 for me too.\nIf you have to use Filters, Markers, extra files per env, geography and whatever other business entity you need, then your setup is complex enough to justify a proper CD process and a centralised Log management tool like LogStash along with Elasticache and Kibana. Even the notion of spawning multiple log files here and there and trying to derive business value or debug by searching into each and every one of them, is absurd!\nDropwizard is not for everyone out there! The overview states clearly its purpose:\nIts goal is to provide performant, reliable implementations of everything a production-ready web application needs. Because this functionality is extracted into a reusable library, your application remains lean and focused, reducing both time-to-market and maintenance burdens.\nIf you do not understand what this means, stay with a more intra-enterprise friendly web framework solution. Dropwizard is heavily opinionated for a reason: to cover the aforementioned requirements stated in the overview.\n. +1\n. +1\n. Agree that Jersey Client is too broken to be used in a production system, after updating to Jersey 2. There are also many major issues reported in the relevant Jersey project that no-one is actually handling. I am not sure whether Dropwizard people can push Jersey people towards fixing them, but we cannot embrace 0.8.X versions if these do not get fixed.\n. Agree that Jersey Client is too broken to be used in a production system, after updating to Jersey 2. There are also many major issues reported in the relevant Jersey project that no-one is actually handling. I am not sure whether Dropwizard people can push Jersey people towards fixing them, but we cannot embrace 0.8.X versions if these do not get fixed.\n. https://java.net/jira/browse/JERSEY-2688, https://java.net/jira/browse/JERSEY-2736, https://java.net/jira/browse/JERSEY-2698, https://java.net/jira/browse/JERSEY-1708 for starters.\n. +1\nI really don't understand how Dropwizard team is discussing about actually releasing a 0.8 version without supporting the ability to properly configure Jersey Client's keepalive and retry policies. \n. Comparing to Dropwizard 0.6.X, Jersey Client support in 0.8.X is actually crippled. Most of the configuration options are not even working. I have the feeling that we are not talking here about \"bugs\" but large sections of missing functionality that was previously supported and it somehow got missed in the latest versions. \nNevertheless, we will try to add bugs for each and every one of them if you feel that this is the way we should handle them.\n. +1\n. @arteam Is this going to be efficient? I thought that the Dropwizard 0.6.2 approach was to be as performant as possible.\n. @arteam I do not think the release plan for this, is acceptable. This is a memory leak issue in one of the most core components of Dropwizard, Jersey, whose maintainers categorised it as Critical. Waiting for months until 0.9.X version with the fix is out, shows that you do not handle Dropwizard latest version as a production-worthy framework. We are trying to switch from 0.6.2 to 0.8.x for many months now, waiting for major fixes to be applied and now we need to wait for 0.9.x, with whatever that means in terms of backward compatibility etc!\n. @arteam I do not understand the notion of \"our goal is just to develop\" without trying to offer even a very small number of versions that are production-worthy. We are using version 0.6.2 in hundreds of micro-services of a large company and i can assure you it is production-worthy. We do not care about using latest versions of Jetty, Jersey etc., obviously, by staying at this version, as it is rather old. But it is stable. Since then, there are no other production-worthy versions. The ship has sailed for 0.7.x long ago (i do not even get why you do not mention this in its documentation...) and now you are telling me that 0.8.x is going to have the same fate too! \nI get that we can fork and everything but i am really confused: don't you have the need to say to people that you actually maintain a version X that IS battle-tested and they can use it without any major issues until version Z is prepared?\n. @ryankennedy @b I have the outmost respect for the work you are doing regarding Dropwizard and if i gave you a different impression then this is my fault and i am truly sorry. I know that you perform work for free, trying to maintain an excellent framework and no-one should be disrespectful to you. My tone had to do with confusion though and not with anger that you do not do your work properly. \nI am confused because version 0.6.2 is a perfect example of what you describe in Overview: Its goal is to provide performant, reliable implementations of everything a production-ready web application needs. Because this functionality is extracted into a reusable library, your application remains lean and focused, reducing both time-to-market and maintenance burdens. but later versions seem to miss the point, in my opinion. @codahale was really focused on this initial description about Dropwizard and he was very adamant about Dropwizard being heavily opinionated in order to be a lean, mean, well-oiled machine used in really demanding, high traffic, production systems of companies like Yammer (and Upwork for that matter). The statement in \"The Next Steps\" section saying that You\u2019ve got a Hello World application ready for production that\u2019s capable of doing 30,000-50,000 requests per second is actually from this era and denotes exactly that: you do not expect this kind of traffic for a web service operating in a simple enterprise application. \nNow, i assume that this, initial focus for the project, stays true. If the focus is switched to Dropwizard being a theoretical, academic work that it should not be judged by anyone, that the maintainers do not care in what environments it is used and big companies are especially banned, just let me know so that we can decide what route to follow from now on. Obviously, this has nothing to do with maintaining our own fork, producing fixes with PRs etc. It is about where this thing is headed to.\nSo, based on my assumptions, 0.7.x is unusable. I really do not understand why it is still documented and mentioned as a release that someone can actually choose to use it. ). 0.8.0 is surely much better but it has a lot of missing functionality, especially regarding Jersey, in compare to 0.6.2. Jersey Client was riddled with configuration issues. Jersey in general was still very unstable with lots of critical bugs. 0.8.1 seems to do the trick and be a strong base to strengthen the product and build on it. \nBut if you handle https://java.net/jira/browse/JERSEY-2786 which is a Critical memory leak bug, as something that can wait for months to find its way to Dropwizard (the issue was resolved last March and even if you do not want to fork Jersey on your own (???), 2.18 was out on the 5th of June. Assuming that you are going for a 0.9.0 RC in a few weeks, IT IS going to be months until the fix is present in a stable 0.9.x version and i am pretty sure that you are not going to continue maintaining the 0.8.x line), my assumptions are wrong. \n. I may have the benefit of the doubt because English is not my native language, but there is no doubt about your tone when you continuously say to me \"shut up and go someplace else\". Nevertheless, i still say that i have a lot of respect to this project and to your work and that i am just judging where this project seems to be heading to, which apparently is something that i should not do because Coda Hale is not here now and all you capitalist employees in your big-time companies, should not talk at all and just go to hell. You are so biased, that i am not going to argue more about this. \nWe have contributed to this project in numerous ways. In code too, (i am not the only person working on this) but not as much as we or the community could benefit from, indeed. But code is not the only form of contribution you should care about. We contributed in providing our valuable comments for various issues either here or in Google groups, both for Dropwizard and also for Metrics. \nWe also offer another form of contribution which the community should be very interested in: battle testing Dropwizard in very demanding, high-traffic, production, web services. We are the ones that are taking the major risk of hardening this framework by using it in production. And when a component hicks up even for a few seconds, thousands of requests may go bad. Most of the well-hidden bugs arise in such environments. And we are the ones, naturally, to take the hit. You will never find these in 1rqs/sec traffic. Most things work perfect in such an environment.\nWe are the ones that give momentum to the fame of this project. Endorsement by major companies is what made Dropwizard known to people out there. We would never use it if Yammer was not behind it back then. Hundreds of Stars are due to people working in these companies. And when the time comes for community members to score a job somewhere, by mentioning that they contribute to the Dropwizard project, they will make it because they will say that Dropwizard is used by Yammer and Upwork and not because @ryankennedy says so. \nUnfortunately, sending away major endorsers will mark the death of the project, eventually. \n. Thanks @joschi for considering adding these critical Jersey fixes to the 0.8.x line. I really hope that other critical issues we may find in the near future, find their way into 0.8.x without us having to move forward to 0.9.x. \n. Got it. Unfortunately, we are at the end of migrating from 0.6.2 to 0.8.x.\nCan you point me to the major changes in 0.9.x comparing to 0.8.x?\n. Sorry for misunderstanding. I was asking about the major points that made you consider moving to a 0.9.x line of code. What were the reasons you did not apply the changes in the release notes to 0.8.x line? Some architectural issues that break things?\n. Anything new regarding Dropwizard + GRPC integration? Is there, at least, a way to swap the Jetty server to another one?. @tburch Looks good! Nice! thanks!\n@tburch  what are you doing with Swagger support? I was thinking about keeping the HTTP connector for this reason only. . ",
    "justinuang": "+1\nI've been wanting to implement something like an elasticsearch slowlog, which effectively writes all the search requests to the index.search.slowlog logger, and puts them in a separate file. This requires a configuration like this (the following is in log4j, but it would be trivial to translate it to the logback.xml/groovy)\nhttps://github.com/elasticsearch/elasticsearch/blob/master/config/logging.yml\n```\nrootLogger: ${es.logger.level}, console, file\nlogger:\n  # log action execution errors for easier debugging\n  action: DEBUG\n  # reduce the logging for aws, too much is logged under the default INFO\n  com.amazonaws: WARN\nindex.search.slowlog: TRACE, index_search_slow_log_file\n  index.indexing.slowlog: TRACE, index_indexing_slow_log_file\nadditivity:\n  index.search.slowlog: false\n  index.indexing.slowlog: false\n```\nBasically, to do this, we would need to augment dropwizard with the ability to not make all appenders attach to the root logger, but let each logger specify the appenders it logs to. In addition, we need a way to turn off additivity. I'm don't mind whether this is enabled by logback.xml or by augmenting the dropwizard logging factory, but I do want to point out that the current logging is not sufficient for some simple use cases.\n. ",
    "raheemdaya": "+1\n@pparth \nI think you are going from one extreme to another.  The fact that I want additional control over my logs should not warrant the need to go completely overboard with a log management solutions.  Implementing such a solution implies the addition of unnecessary cost and complexity.  \"Even the notion of spawning multiple log files here and there and trying to derive business value or debug by searching into each and every one of them, is absurd!\"  I don't think giving someone the ability to extract out actionable log information using something like markers is absurd.  \nI am at a loss as to how this would, in any way, make the framework not performant or unreliable.\n. ",
    "DeanPoulin": "Based on comments in this thread about keeping this functionality able to be natively configured via yaml for a given dropwizard service, I took a stab at achieving that.\nWe also had the desire to log certain messages to separate log files. Here's the approach I took. This seems to play very nicely with current logging functionality with the additional capability to log to separate log files via configuration. We are currently using dropwizard 0.6.2 in production, so I did this off that tag but should be trivial to apply to 0.7.x & 0.8.x as well.\nHere's the general idea:\nCurrent 0.6.x configuration for file logging:\nyaml\n  file:\n    enabled: true\n    timeZone: EST5EDT\n    threshold: ALL\n    currentLogFilename: /var/log/my-service/my-service.log\n    archivedLogFilenamePattern: /var/log/my-service/my-service-%d.log.gz\nNew configuration with optional additional appenders:\n``` yaml\nfile:\n    enabled: true\n    timeZone: EST5EDT\n    threshold: ALL\n    currentLogFilename: /var/log/sui/sui.log\n    archivedLogFilenamePattern: /var/log/sui/sui-%d.log.gz\n#optional additional appenders\nappenders:\n  - enabled: true\n    timeZone: EST5EDT\n    threshold: ALL\n    currentLogFilename: /var/log/my-service/activity.log\n    archivedLogFilenamePattern: /var/log/my-service/activity-%d.log.gz\n\n    # the class/namespace you want to have logged to another file\n    logger: com.mycompany.myservice.webservice.logging.LoggingFilter\n\n    # should the logs also show up in the main file (true = yes | default = yes)?\n    additive: false\n\n  - enabled: true\n    timeZone: EST5EDT\n    threshold: ALL\n    currentLogFilename: /var/log/my-service/foo.log\n    archivedLogFilenamePattern: /var/log/my-service/foo-%d.log.gz\n    logger: com.mycompany.myservice.webservice.Foo\n\n```\nWith the above configuration, logs for com.mycompany.myservice.webservice.logging.LoggingFilter will be logged to an additional file /var/log/my-service/activity.log and will not show up in the main log file for the service. Logs for com.mycompany.myservice.webservice.Foo will show up in the main log file and will also be logged to a separate file /var/log/my-service/foo.log.\nHere's the changes I made to facilitate this functionality: https://github.com/DeanPoulin/dropwizard/commit/b9df4187dba758305ad2a9ecbdf6ff126dbf8651\n. Thanks for letting me know @joschi, that makes sense. Would this be something you would consider pulling into 0.8.x?\nSince you won't have any further releases for 0.6.x or 0.7.x we would be comfortable using our modified version and then jumping up to 0.8.x once it's ready.\n. I'll send another PR to master with the same functionality if this would be something you'd like to incorporate in dropwizard. Our DevOps group would love it. :+1: \n. I will send through the PR to 0.8.x soon, Sorry for the delay.\n@brentryan - That sounds like a feature/enhancement to logging in general, the goals of logging are pretty specific:\nFrom the docs @ http://www.dropwizard.io/manual/core.html#log-format\n\nLog Format\nDropwizard\u2019s log format has a few specific goals:\nBe human readable.\nBe machine parsable.\nBe easy for sleepy ops folks to figure out why things are pear-shaped at 3:30AM using standard UNIXy tools like tail and grep.\n\nI'd suggest using something like logstash to parse your logs for other purposes vs outputting JSON in the logs.\n. Happy to report we're using this implementation successfully in our production environments off my fork, we're still on the older v0.6.x release. Exactly why I LOVE open source and dropwizard!\nI'll push to get this PR sent soon, the logging implementation is a little different in 0.8.x so it's a bit more work to translate directly.\n. ",
    "kennycason": "I know this is closed, but I literally wasted days figuring out how to get logback working (I just reset the context after DropWizard was up and running). All this was because I wanted to control logging level for different loggers. I think if the documentation was updated to show an example, the number of complains about logging would drop significantly. Thanks!\nyaml\nlogging:\n  level: INFO\n  loggers:\n    org.hibernate: WARN <--- this was the golden nugget i was looking for! \n  appenders:\n    - type: console\n      threshold: ALL\n      timeZone: UTC\n      target: stdout\n    - type: file\n      threshold: ALL\n      currentLogFilename: /srv/kraken/log/kraken.log\n      archivedLogFilenamePattern: kraken-%d.log.gz\n      archivedFileCount: 5\n      timeZone: UTC\n. ",
    "mikeycmccarthy": "As soon as I've finished the upgrade from 0.6.2 I'll give it a spin and let\nyou know :)\nBut theoretically yes - http://stackoverflow.com/questions/21569536/can-i-use-apache-httpclient-without-commons-logging-jar\nOn 12 May 2014 16:47, Nick Telford notifications@github.com wrote:\n\nYou're quite right, good catch. Have you tried an exclusion? Does\nhttpclient work correctly without commons-logging?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/571#issuecomment-42849260\n.\n. That makes sense - the jcl bridge is one of the few dependencies I need to\ninclude outside of the dropwizard ones when I am working on a DW project.\nWant me to rustle up a pull request?\n\nOn 12 May 2014 17:25, Jochen Schalanda notifications@github.com wrote:\n\nWe probably should exclude the Apache Commons Logging library in general\nand add the SLF4J JCL bridge http://www.slf4j.org/legacy.html to\ndropwizard-logging (which already includes the bridges for Log4j and JUL).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/571#issuecomment-42854247\n.\n. I cloned your fork, ran a dependency analysis on it and commons-logging has now disappeared from dropwizard-core.\n\nI don't know if it is over the top but I added this to our enforcer configuration:\n<bannedDependencies>\n   <excludes>\n     <!-- This should not exist as it will force SLF4J calls to be delegated to log4j -->\n     <exclude>org.slf4j:slf4j-log4j12</exclude>\n     <!-- This should not exist as it will force SLF4J calls to be delegated to jul -->\n     <exclude>org.slf4j:slf4j-jdk14</exclude>\n     <!-- Ensure only the slf4j binding for logback is on the classpath -->\n     <exclude>log4j:log4j</exclude>\n     <!-- As recommended from the slf4j guide, exclude commons-logging -->\n     <exclude>commons-logging:commons-logging</exclude>\n     </excludes>\n</bannedDependencies>\nThat last exclude will stop commons logging ever sneaking in again.\n. Sure, I'll add them both together. It'd be good to finally be able to\ncontribute to this project.\nOn 12 May 2014 17:48, Jochen Schalanda notifications@github.com wrote:\n\nThat's actually quite a good idea. Could you please open another issue or\nPR for that?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/572#issuecomment-42857115\n.\n. My pull request has opened an issue, my bad.\n. Note that build failing is correct behaviour, error message from those logs is:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce (enforce) on project dropwizard-client: Some Enforcer rules have failed. Look above for specific messages explaining why the rule failed. -> [Help 1]\n. Sure, will do that now.\nOn 13 May 2014 11:40, \"Jochen Schalanda\" notifications@github.com wrote:\nIt would be great if you could rebase your branch on the current master.\nThis should also fix the Travis CI build.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/574#issuecomment-42940132\n.\n. No problem at all, glad to be able to contribute in some way.\n. The way I got around this was to call environment.getApplicationContext().setContextPath and environment.getAdminContext().setContextPath from within a run method, and retrieved the app and admin context path from our custom Configuration object (within a ConfiguredBundle).\n\nIt isn't elegant because we have two properties specific to server that don't live with the server block in the YAML, but it works and there are supporting tests. I can't add these to the server block because the server part of this block gets validated, and I think this happens before anything I can override.\nI'll try to understand where in the DW tests this kind of thing would be exercised and send in a pull request that includes the new test. The actual non-test code is simple I think (famous last words), it is just:\nenvironment.getApplicationContext().setContextPath(applicationContextPath);\n    environment.getAdminContext().setContextPath(adminContextPath);\nat the appropriate point in one of the ServerFactory classes.\n. Brilliant, this saves us having a custom module and extra configuration file toggle for the root path. Much appreciated!\n. Obviously I'm biased on this one :) The concerns I'd seen were summed up in #676 which is now closed. I couldn't see any compelling reason why SimpleServer and DefaultServer would differ in what they could do but I may well have missed it. \n. Sorry, I think I was linking to the wrong place there. This is going back a bit now but there was some chatter on the google group, some of it relating to assets paths when you use a custom path (e.g. https://groups.google.com/forum/#!searchin/dropwizard-user/assets/dropwizard-user/UaVcAYm0VlQ/1-FErS_tRE4J).\nLooking back on that thread to remind myself I can see a comment from @nicktelford \n\nThe URLs in your service constitute an API, and having the API configurable at runtime strikes me as a horrible idea. Clients should be able to unambiguously use your service without needing to know anything about the runtime configuration. For this reason, you should be hard-coding path prefixes like this in the service itself.\n\nEven though that's not how we use it I'm included to agree, but it seems inconsistent that it is available on one server factory and not the other for no reason that I could make out.\n. Thanks @nicktelford , makes sense.\n. +1\n. Great hack, cheers @cmicali . Will give that one a go today.\n. Many thanks, much appreciated! \n. We've looked at doing something like this. I personally think you'd want some kind of way of marking some properties as sensitive so they don't turn up in logs. I know our operations team wouldn't be happy if the production database username and password details starting turning up in Splunk logs that we all have access to :)\nMaybe @Senstive or something similar? Or a new type of object that replaces String for passwords and the such-like?\n. This also affected us - we had to rollback to 0.8.1.\n. I think this must be true by default. I can't seem to find the usage page for that plugin to confirm this so I'll check the code instead. I think the build wouldn't have failed if it wasn't true by default.\n. I'll add it so it's explicit.\n. ",
    "kulbhushanchaskar": "environment.jersey().disable() blocks all rest resources registered with the jersey.. ",
    "cernautan": "I do not know if this is the right topic but I'll throw it out anyway.\nIn the current release 0.7.0, it seems that the integration of the access log and jetty is a bit broken.\nBasically, for all requests, the size of the response is always -1 (response.getLongContentLength()) and this translates to a '-' in the access log. See: http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractNCSARequestLog.java\nthe line: \nlong responseLength = response.getLongContentLength();\nif (responseLength >= 0)\n[...]\nBecause the output stream is already clsoed and thus Response is commit at the time the access log entry is created, response.getLongContentLength() is always returning -1.\nI do not know the Dropwizard code too well but I do not think it is a jetty issue.\nI do not know if this is a bug but I thought of worth mentioning to add it for your test cases.\n. Also, it seems that the default implementation of:\npublic void log(Request request, Response response) from AbstractNCSARequestLog is pretty non Common Log Format compliant. Sometimes it added extra spaces before 'user', 'auth' or even before 'content size' fields.\nI think it is better to overwrite this method altogether. What do you think?\nIf you agree I can help with this.\n. ",
    "alindsey": "Oops, wrong project.  Intended to send to cvent/dropwizard.  Sorry.\n. ",
    "kagrela": "I don't know where to put this code in the repository and if it's inline with policy of this project, so maybe someone will review and adjust it and create pull request to have such a functionality. \nMy approach would be writing such two classes:\n```\npublic class AdminConstraintSecurityHandler extends ConstraintSecurityHandler {\nprivate static final String ADMIN_ROLE = \"admin\";\n\npublic AdminConstraintSecurityHandler(final String userName, final String password) {\n    final Constraint constraint = new Constraint(Constraint.__BASIC_AUTH, ADMIN_ROLE);\n    constraint.setAuthenticate(true);\n    constraint.setRoles(new String[]{ADMIN_ROLE});\n    final ConstraintMapping cm = new ConstraintMapping();\n    cm.setConstraint(constraint);\n    cm.setPathSpec(\"/*\");\n    setAuthenticator(new BasicAuthenticator());\n    addConstraintMapping(cm);\n    setLoginService(new AdminMappedLoginService(userName, password, ADMIN_ROLE));\n}\n\n}\n```\n```\npublic class AdminMappedLoginService extends MappedLoginService {\npublic AdminMappedLoginService(final String userName, final String password, final String role) {\n    putUser(userName, new Password(password), new String[]{role});\n}\n\n@Override\npublic String getName() {\n    return \"Hello\";\n}\n\n@Override\nprotected UserIdentity loadUser(final String username) {\n    return null;\n}\n\n@Override\nprotected void loadUsers() throws IOException {\n}\n\n}\n```\nand using them in the way:\nenvironment.admin().setSecurityHandler(new AdminConstraintSecurityHandler(...))\n. @glennmcallister \nWhat name you suggest instead of Hello?\nMy case is usage of dropwizard 0.7 on heroku so:\n- the port of admin is the same as port of normal endpoints\n- I'm having creds in heroku config and I'm reading them at app startup and setup AdminMappedLoginService to protect admin\nWhat is correct approach in my case then?\n. ",
    "sfitts": "Interestingly the docs here (http://dropwizard.readthedocs.org/en/latest/manual/testing.html) do not reference that class.  Although I can't get the test there to work as expected.  I'd be curious to know when that class was removed and where its functionality went (I'm guessing it provided the normalized JSON handling, which is what I can't get working).\n. Except that all #fixture does is find and read in the file.  I ended up creating a utility method with the above code (mainly because I like the fixture files to be more readable).  Easy enough, but the docs still need some correction.\n. ",
    "MatthewEdge": "I am encountering the same issue. I ended up just removing the whitespace from my fixture files to get the tests to pass.\nI think #jsonFixture was supposed to be replaced by #fixture \n. Confirmed. #fixture still expects an exact match, whitespace and all, or the test fails. I'm not sure why the original behavior was changed from #jsonFixture to #fixture. This new behavior needs to be explicitly pointed out\n. ",
    "rowlanch": "I would also add that I had to modify the deserializesFromJSON() test by using  isEqualsToByComparingFields(T other).  E.g.,\njava\n@Test\npublic void deserializesFromJSON() throws Exception {\n    final Person person = new Person(\"Luther Blissett\", \"lb@example.com\");\n    assertThat(MAPPER.readValue(fixture(\"fixtures/person.json\"), Person.class))\n            .isEqualsToByComparingFields(person);\n}\n. ",
    "gsmith85": "@joschi looking at the noted commit, the only thing that changed in the serializesToJSON method in the documentation was a line break was added.  \nThe crux of this issue is unaddressed, the example provided in the documentation on how to compare a JSON fixture with arbitrary spacing to the result of a ObjectMapper#writeValueAsString is still inaccurate and the test will fail.\n. ",
    "babyman": "I am following the posted testing guide and can confirm this is still an issue, it would be helpful if the documentation or the code was fixed as right now the mismatch causes confusion to people ( could be just me o_O ) trying to learn how best to use dropwizard.\n. ",
    "nqv": "No body are using dropwizard-views?\n. Thank you for your comment @joschi . Fixed that.\n. @joschi Would you please also backport this to release/0.7.x branch\n. ",
    "obfischer": "@joschi Tested 0.8.0-SNAPSHOT with this fix. It increased the number of requests by 800%! Great!\n. Thank you.\n. Thanks, Jochen. resourceFilePath() is really small but helpful.\n. I will check that.\n. null is a valid parameter. ObjectMapper does not throw an exception instead it uses a default implementation of JsonFactory. I added a test for that.\n. ",
    "justinrmiller": "Agreed, I think it would be a great addition, especially in bandwidth\nconstrained environments.\nOn Sun, Aug 3, 2014 at 4:49 PM, Justin Plock notifications@github.com\nwrote:\n\nAny additional thoughts on this? I saw on the mailing list a decision was\nmade regarding external modules but I'm not sure how this would fair. In my\nopinion, I think it fits the Dropwizard mission of building restful\nservices on the JVM.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/609#issuecomment-51007245.\n. This appears to be addressed in master: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java\n\nFor what it actually does:\nhttp://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/server/ForwardedRequestCustomizer.html\nIt would appear that you can just ignore the flag if you're not using proxies, etc.\n. ",
    "jyc4617": "Hello Nick,\nI tried to do a pull to get a copy of software, so I clicked \"pull request\" on the page and that is what happened, I do not understand why it did a merge request.\nI came from Mercurial/Bitbucket background where doing a pull request is simple and straightforward, but at github it seems to be painful, how do I get the URL from github web to feed into \"git clone\" command?\nEddie Chen\n(A Developer)\nOn Jun 13, 2014, at 12:58 AM, Nick Telford notifications@github.com wrote:\n\nWhat are you trying to achieve here...?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "gedl": "Of course: https://gist.github.com/gedl/5e359a7cdf8d6f83b099\nDropwizard version 0.71\nThanks for helping.\n. Added https://gist.github.com/gedl/5e359a7cdf8d6f83b099#file-workaround which is a workaround. Needs to be hooked to Jersey \nHope it helps somebody else.\n. I clearly have a clumsy fix, but I'm more worried about breaking the\nprevious contract.\nI'm of the opinion that such break needs to be thoroughly documented\nincluding how to \"keeps things running\".\nI'm neutral on how an empty body should be seen: whether a default request\n(ie default constructors for all parameters) or a faulty one, albeit HTTP\nspec does not deem an entity mandatory in the case of POST or PUT.\nWhat do you think?\nOn 25 Jun 2014 21:43, \"Jochen Schalanda\" notifications@github.com wrote:\n\nThis behaviour has been added (incidentally by me) in #431\nhttps://github.com/dropwizard/dropwizard/issues/431 and #433\nhttps://github.com/dropwizard/dropwizard/pull/433 (also see #232\nhttps://github.com/dropwizard/dropwizard/issues/232 and #233\nhttps://github.com/dropwizard/dropwizard/pull/233) and is intentional.\nI think we should discuss whether this behaviour should be configurable\n(either throw a ConstraintViolationException or skip validation for null\nreferences and return it). Personally I'm in favor of throwing a\nConstraintViolationException but YMMV.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/625#issuecomment-47155973\n.\n. Good point. I vote for @NotNull as @Valid does not necessarly mean the\ninstance is not null (null is a non-value and such is not invalid by\ndefinition).\n\nG.\nOn 25 Jun 2014 23:12, \"Jochen Schalanda\" notifications@github.com wrote:\n\nI think that the null check should only occur if the request method\nparameter is annotated with @Valid or @Validated and that we can simply\nresolve this issue by moving the check a little down\nJacksonMessageBodyProvider#validate().\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/625#issuecomment-47165801\n.\n. Should the exception be thrown when is marked as @NotNull instead ?\n\nBeing null does not necessarily mean the request is invalid, as the parameter(s) can be optional.\n. ",
    "jelgh": "I did now run in to this problem as well. I'm migrating our system from Dropwizard 0.6.1 to 0.7.1 and now our log in doesn't work because our clients sends an empty json POST. Did you guys come up with a way around this by keeping legacy client support (that will continuously send empty json POSTs)? \n@joschi you mention Jersey's upstream, but it's not available in Dropwizard 0.7.1 is it?\n. ",
    "chrislbs": "In case someone came here like me trying to resolve a similar issue and can't upgrade the dropwizard version to the latest immediately. I tried using @gedl workaround but it made the assumption that .available() would always return non-zero. I made a modification to just go ahead and copy the entity stream to a byte array regardless to ensure we truly know if anything is on the input stream.\nhttps://gist.github.com/chrislbs/b64a9346db07840076b8 \n. ",
    "rupert654": "Wait, does this mean I need to write a custom MessageBodyWriter for every single entity in my application that I want to produce multiple media types of?\n. ",
    "AlexTalks": "Perhaps could refactor it, thought perhaps this made sense as it required no significant changes to the rest of the code base and just adapted the existing classes... any suggestions?\n. Can change of course - the reason for calling it start instead of run was to be explicitly different from io.dropwizard.Application and io.dropwizard.cli.ServerCommand, as those just have run while these have start and stop.\n. ",
    "jchilders": "I am having the same issue, and the suggestion made by @joschi did not seem to help. Here's the full command:\njava -Dserver.applicationConnectors\\[0\\].port=8080 -cp ...\nThis gives a large stacktrace, the core of which seems to be:\nERROR [2014-07-22 22:13:46,228] com.sun.jersey.core.spi.component.ProviderFactory: The provider class, class com.sun.jersey.server.impl.model.parameter.multivalued.JAXBStringReaderProviders$RootElementProvider, could not be instantiated. Processing will continue but the class will not be utilized\n! java.lang.IllegalArgumentException: argument type mismatch\nI tried putting the following in my config file, but received the same error:\nserver:\n  applicationConnectors:\n    - type: http\n      port: 8090\n. Update to this: I was able to get  '-Ddw.server.applicationConnectors[0].port=8090' working, but only after I had added this same property to my config.yml. For example, if my config.yml has the following:\nserver:\n  applicationConnectors:\n    - type: http\n      port: 8085\nAnd I run the app with:\n-Ddw.server.applicationConnectors[0].port=8090\nThen the app starts on port 8090, which is the desired behavior. If you remove the 'server' section from config.yml, however, and pass that same -D argument, the application fails to start with the following exception:\nException in thread \"main\" java.lang.IllegalArgumentException: Unable to override server.applicationConnectors[0].type; node with index not found.\n. ",
    "clarkbreyman": "Thank you @mcarrierastonish for the fix!\n. ",
    "marcelstoer": "\nWhile there's no doubt that AutoValue or Project Lombok would reduce some of the boilerplate code (so would using Groovy instead of Java :wink:), it doesn't significantly help in demonstrating Dropwizard's capabilities.\n\nI disagree but I accept that this may be subjective. By removing all boilerplace the relevant Dropwizard code gets a much better representation. Cut away everything not-Dropwizard and what you're left with is just the Dropwizard essence. Sounds to me like a valid goal for any tutorial.\n. ",
    "marcohu": "I'm new to Dropwizard and still trying to find my way so I might be missing something (or it has been a recent development?), but as of DW 0.8.1 it seems possible to customize error pages with relative ease:\njava\npublic void run(Configuration config, Environment env)\n{\n    ...\n    env.getAdminContext().setErrorHandler(new CustomErrorHandler());\n    env.getApplicationContext().setErrorHandler(new CustomErrorHandler());\n}\nNot too bad, but having the ability to declare the handler in the configuration would be great!\n. ",
    "CeccoCQ": "Hi, I've similar problem because I've always \"Lock Wait timeout\" error.\nI'm trying to execute a lot of same concurrent http request, so I saw connections grow fast on my MySQL Cluster and I don't know how solve this problem.\n. ",
    "123surya": "can we enable prepared statement caching?\n. ",
    "Onewaysidewalks": "I have figured out that this overriding via the command line is somewhat more specific than \"will be added if not exists\". The configuration property to be overriden must ALSO actually exist on the Configuration class extension, or Jackson will fail serialization (See ConfigurationFactory.java, line 60ish) due to the property not being known to the configuration class.\nI can see the benefit of having such, and thus am marking this closed.\n. ",
    "philandstuff": "I'm currently using DropWizard with a proxy server, but this PR wouldn't solve my problem because I need a whitelist of non-proxyable hosts on the local network.  I have raised #681 as an alternative (not mutually exclusive) way to add proxy functionality.  More details there.\n. @glennmcallister I'm happy to add documentation, but I'm unclear about what the rationale here is.  docs/source/manual/client.rst documents HttpClientBuilder but doesn't exhaustively list all its methods.  Neither using(HttpRequestRetryHandler) nor using(SchemeRegistry) are currently documented.  Is the purpose of that documentation to be exhaustive or just to provide an overview?\nEDIT: Reading my post back, this could be taken harsher than I meant it. I'm not asking a rhetorical question, I genuinely don't know the answer and am interested to hear it.  Tone of voice is hard on the internet.\n. I see this doesn't cleanly merge anymore.  I tried rebasing to master, but now the test that @rnewstead1 and I wrote won't work.  The original test inspects the built HttpRoutePlanner by calling AbstractHttpClient.getRoutePlanner().  However something has changed, and now the HttpClient that this builder returns is not an instance of AbstractHttpClient and instead appears to be of type org.apache.http.impl.client.InternalHttpClient.  This class holds the HttpRoutePlanner in a private field and provides no means to inspect it.\nIn short, I can rebase the production code, but I don't know how to write a test to verify the behaviour.\n. In Jackson 2, @JsonValue is used to mark a method to serialize to, but also (as a special case) is used to mark how enums should deserialize. From the javadoc for @JsonValue:\n\nNOTE: when use for Java enums, one additional feature is that value returned by annotated method is also considered to be the value to deserialize from, not just JSON String to serialize as. This is possible since set of Enum values is constant and it is possible to define mapping, but can not be done in general for POJO types; as such, this is not used for POJO deserialization.\n\nRather than consuming toString, would it make sense to consume this annotation in FuzzyEnumModule as well to maintain compatibility with base Jackson?  Without this, enums that deserialize correctly in raw Jackson will throw JsonMappingException when FuzzyEnumModule is added.\nEDIT: I realize this might be a separate but closely related issue. Should I keep the discussion here or open a new one?\n. ",
    "CaptainNTR": "Thanks, this explains everything. Hope Jersey 2.x is implemented soon.\n. Sorry, I added spaces after the brackets in the original message. Now it makes more sense...\n. Thanks so much! This solved it.\n. ",
    "RobertButera": "I was able to serve assets from the root path using ConfigurableAssetBundle on DW 0.7.1.  Essentially you need to:\nAdd the bundle like this:\n  bootstrap.addBundle(new ConfiguredAssetsBundle(\"/assets/\", \"/\"));\nSet the jersey URL pattern as follows:\n  environment.jersey().setUrlPattern(\"/services/*\");\nAnd then set the overrides like this:\nassets:\n    overrides:\n      /: /foo/bar/\n. ",
    "TurtleShip": "I am assuming you are referring to this PR ( https://github.com/dropwizard/dropwizard/pull/545 )\nThanks for your kind answer, @saadmufti ! :-)\n. Thank both @saadmufti  and @arteam for your replies! :+1: \n. Let me check. Thanks!\n. Sounds good to me :+1: \n. Thanks! :+1: \n. ",
    "krismassey": "I've created a PR to add this functionality -> https://github.com/dropwizard/dropwizard/pull/677\n. ",
    "qualidafial": "Could somebody on the Dropwizard team take a look at this? I'm also dealing with this behavior in my build.\nWe are using SnapCI, which provides environment variables with database connection url and credentials which are only valid during the build.\nThe first unit test with a DropwizardAppRule completes fine, but during the teardown our dw.database.* properties which were set on the command line are being clobbered. Subsequent tests which use DropwizardAppRule fail as a result.\nA more complete solution than this PR provides would be to reinstate system properties to their former values during teardown, rather than clearing them outright.\n. ```\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.Application;\nimport io.dropwizard.Configuration;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.dropwizard.testing.junit.DropwizardAppRule;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\npublic class DropwizardAppRuleTest {\n@BeforeClass public static void setSystemProperty() { System.setProperty(\"dw.foo\", \"foo\"); }\n// non-static so the app is set up and torn down for each test below\n  @Rule public final DropwizardAppRule RULE = new DropwizardAppRule<>(FakeApp.class, null);\npublic static class FakeConfig extends Configuration { @JsonProperty String foo; }\npublic static class FakeApp extends Application {\n    @Override public void initialize(Bootstrap bootstrap) {}\n    @Override public void run(FakeConfig configuration, Environment environment) throws Exception {\n      environment.jersey().disable();\n      assertThat(configuration.foo, equalTo(\"foo\"));\n    }\n  }\n@Test public void test1() {}\n  @Test public void test2() {}\n}\n```\nEdit: removed FakeResource class for brevity\n. Ping?\n. Yep, I missed that. Will fix.\n. Fix pushed.\n. ",
    "xabierlaiseca": "@mcarrierastonish then, in my opinion, the message is wrong\n. It does make sense!\nI wrote the message too quickly, I''l be more careful next time :-P\n. ",
    "rnewstead1": "@joschi Unit tests added for the default HttpRoutePlanner and using a custom HttpRoutePlanner.\n(Pairing with @philandstuff )\n. Fixed, thanks\n. ",
    "martin-g": "\nnew HibernateBundle(Person.class, Email.class, Attachment.class)\n\nI find the above much cleaner than \n\nClass[] entities = new Class[]{Person.class, Email.class, Attachment.class};\nnew HibernateBundle(entities);\n\nAlthough I think the old way to call it should still work.\nAdditionally it fails at compile time. The new API fails at runtime which I find worse.\n. ",
    "meshuamam": "Please have a look at the PR: https://github.com/dropwizard/dropwizard/pull/694\nThanks\n. ",
    "federecio": "doesn't answer your question but you might be interested in taking a look at https://github.com/federecio/dropwizard-swagger\n. ",
    "t1": "is that ok?\n. @jplock: Say I want to write a Twitter client. Then I want to test it against the Twitter API. Sometimes it's easier to test against the real engine (and this has a lot of advantages), but sometimes it's better to test against a mock (maybe the service is not available, yet; or managing test data on that service is difficult; or you want to test corner cases like error codes, etc.). I could use, e.g., Wiremock for this, but staying in the JAX-RS world is sometimes much easier. That's why I'd like to use this rule: I don't have to care about app, config, port, etc. It's just the mock resource that I have to take care of.\n. ",
    "saem": "@jplock That still creates a dependency cycle, which may not be an issue in some projects (as you've shown), but not all.\n. I'm not sure how to put it besides one is valid HTTP, and the other is not -- at the very least this needs to be configurable. Many front-end libraries and HTTP clients aren't prepared to handle 422, considering the wider HTTP ecosystem.\nFor instance, many JavaScript developers who'd consume this API often refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Response_codes, http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html, etc... At least for me, all the top google hits for HTTP status codes don't even mention 422.\nWe're attempting to transition to a HTTP Hypermedia API, being compliant with HTTP is that much harder.\nFundamentally, this issue far broader than Dropwizard. Any other client (JavaScript library/framework, whatever), that does conform now may need tweaking because of non-compliance.\nAs for migrating old clients, simply providing migration notes, and a configurable fallback to old behaviour (to be remove in the next major version) should be sufficient.\n. This is the worst, and now I'm in a circle too.\n- I think 422 is wrong, because it's not HTTP\n- I think 400 isn't quite right because it's referring to syntax\nAlso this is the latest version of the RFC you linked earlier, in which case they made it less semantics.\nIn regards to the SO post, Kristian quoted the WebDAV Protocol intro\nWhile the status codes provided by HTTP/1.1 are sufficient to describe most error\nconditions encountered by WebDAV methods, there are some errors that do not\nfall neatly into the existing categories. This specification defines extra status \ncodes developed for WebDAV methods (Section 11)\nAs it says, \"WebDAV methods\", and as per the first sentence makes a clear delineation between it and HTTP 1.1.\nI'm leaning towards 400, but not by much. I think it makes the most amount of sense making it a configurable thing, I have no clue what the default should be, the two things I'd be thinking about:\n- Leave it as 422 for compatibility -- and might become a defacto standard\n- Move to 400 for HTTP 1.1 compliance, and let people consciously break it\n. Even if 422 remains the dropwizard default, and there is a configuration to go the other way that's workable.\n@glennmcallister \nIn regards to the Stack Overflow post. One person, who didn't know the answer in the first place, hitting accept on a SO post hardly constitutes a strong argument, if at all a data point. As for the answer itself, as @nickbabcock points out it's not out right unreasonable. That being said, if you look at the part of the WebDAV spec (not HTTP) he quotes, it clearly states \"While the status codes provided by HTTP/1.1 are sufficient to describe most error conditions encountered by WebDAV methods, there are some errors that do not fall neatly into the existing categories. This specification defines extra status codes developed for WebDAV methods (Section 11)\". Emphasis added is my own, but to be clear that entire RFC is not the protocol most are working with. I would ask that we stop referencing a non-HTTP RFC as if it is.\n422 is not valid HTTP, you're pointing to a list of registered codes, I believe the intention is to avoid collisions across protocols that are a super set of HTTP, the same as say internet socket port number registration done by IANA.\nSpecifically, in regards to Section 11 of RFC4918, what you are quoting is out of context:\n```\n11.  Status Code Extensions to HTTP/1.1\nThe following status codes are added to those defined in HTTP/1.1\n   [RFC2616].\n```\nThe title clearly states that these are extensions, within a document that clearly states it's for a different protocol (WebDAV).\nAs I pointed out earlier, except for Google not knowing the difference, and an apocryphal answer on SO, can we not reference an RFC for a protocol (WebDAV) that the vast majority aren't concerned with, and stick to HTTP?\n. @joschi @JonMR I think this got lost in the discussion but this is a bit forward looking, specifically at hypermedia. I agree, within the context of an \"old school\" API where the client has to know much more about how the server behaves and has lots of specialized logic then yeah, no big deal.\nIn our particular scenario we were going to have 400 return a response entity with a \"remediation\" rel, that would allow the client to fix say a missing pre-requisite. For example, it tries to send a pre-formatted email, but the specific template for that doesn't exist, the system can return a 400, and a body containing an error code, and remediation rel allowing you to create the required template. My concern is that yeah, currently the http library (angular) we're using is workable, I'm concerned that as we deal with other clients that aren't so forgiving, we'll be stuck. That will be an awkward migration.\n. @jamisonhyatt out of curiosity have you got a newer solution, or which solution have you settled on for JSON logging?\n. ",
    "evnm": "@V0L0DYMYR, can you provide more information on the situation in which you see that error? As @joschi asked in response to the initial issue, can you check what version of Logback you're pulling in, please? Providing the output of mvn dependency:tree could be helpful, for instance.\nHave you tried running mvn clean before packaging the project?\n. @Lael-Costa, could you file a separate issue and provide an example stacktrace from the NPE you're seeing, please? I don't see how it could be the exact NPE tracked by this issue, since the specific case is now guarded by a null check.\n. Thanks for the quick turnaround time!\n. @getconcar Can you give a concrete example of the deficiency you're identifying, please? It sounds like it may differ from this issue specifically, in which case we should file a separate one.. Another consideration which arguably adds weight to @kilemensi's proposal is the fact that any post-1.x release that removes Guava and Joda APIs from Dropwizard would technically warrant a major version bump, as per semver. If there's truly a desire to roll forward with pure-JDK8 in the near term, a 0.9.x migration branch could be a good means of avoiding a hasty 2.0.0 release.\n. 0.10.0, then?\n. Thanks for the thorough review, @arteam. I've heeded your feedback and updated the diff.\nIn digging further into the dropwizard-auth tests, I decided to collapse AuthBaseResourceConfig into AbstractAuthResourceConfig. I don't think the usefulness of the two separate classes warrants the complexity imposed by a class hierarchy of DropwizardResourceConfig within a test package. So, this change now comprises two commits, the first of which does a bit of cleanup within the auth tests.\nThe meat of the change which adds support for polymorphic Principals now reflects your comments. PolymorphicAuthValueFactoryProvider and AuthValueFactoryProvider each extend AbstractValueFactoryProvider directly. The meat of their respective createValueFactory methods is offloaded to a package-private PrincipalContainerRequestValueFactory class. The rest of the two provider classes is basically boilerplate.\nAnd I added a PolymorphicPrincipalEntityTest which wires the new pieces up and ensures that authentication by multiple Principal subclasses in a resource actually works.\nI'm not sure how (or if it's even worth it) to test PrincipalContainerRequestValueFactory. Taking a look at Jersey's source, AbstractContainerRequestValueFactory itself isn't tested, so I couldn't find a precedent for mocking ContainerRequest injection functionality.\nStill not a fan of the \"PolymorphicFoo\" naming convention, but I still can't come up with anything better.\n. Change should now be good to go. I took the liberty of adding myself to the contributors page, too. Hopefully not too gauche.\nThanks again for the thoughtful review, @arteam!\n. Looks good to me. A nice separation of concerns.\n. Updated the branch with the following:\n- Rebase on current master\n- Inline the noop Consumer\n- Rm unnecessary @Provider annotation\n- Make DummyExceptionMapper private and static\n. Perhaps I'm missing some background on this, but what motivated the change in the first place? Has the current code been observed to cause problems or is this more an issue of unclear/inaccurate documentation?\nIt seems to me that this change would contradict the very purpose of thread-pooling in the default case. Is it wise to max out pools at a single thread by default? Assuming that the average Dropwizard user probably doesn't customize their ExecutorService(s), I could imagine this change resulting in frustrated surprise when folks' underlying executors effectively become Executors.newSingleThreadExecutor().\n. I see now. Thank you for clarifying.\nFrom the ThreadPoolExecutor javadoc:\n\nUsing an unbounded queue (for example a LinkedBlockingQueue without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy. Thus, no more than corePoolSize threads will ever be created.\n\nCode LGTM. Could you break up the commit message, though, please? Would prefer a to-the-point subject line and then the rest of your description in a body paragraph. This makes git log output a lot easier to scan on the command-line.\n. \ud83d\udc4d\nHowever, we'll have to wait until an actual committer can chime in.\n. LGTM\n. To minimize the change, we could simply expose getEnvironment(). Consumers could then access the ObjectMapper via Environment.getObjectMapper().\nNot sure if we care, though. LGTM!\n. Yep, seems consistent to me.\n. This line in the exception chain indicates that none of the config fields inherited from AbstractServerFactory are being picked up:\nCaused by: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"requestLog\" (class io.dropwizard.server.DefaultServerFactory), not marked as ignorable (6 known properties: \"adminMaxThreads\", \"adminConnectors\", \"applicationConnectors\", \"applicationContextPath\", \"adminMinThreads\", \"adminContextPath\"])\nThose six fields are defined in DefaultServerFactory. Could something have changed in the way jackson-databind traverses class hierarchies resulting in it not resolving a comprehensive set of properties? Nothing stands out as such from a quick scan of the Jackson 2.7 changelog, but I'm admittedly not familiar with the codebase.\n. LGTM\n. This is tough. In principle, any condition that prevents clean process shutdown should be avoided. But since ExecutorServices don't really have a \"start\" state transition (i.e. they're essentially initialized as being in the \"started\" state), it's somewhat of a hack to stuff them into managed lifecycles.\nOne workaround would be to make ExecutorServiceManager's constructor take an ExecutorServiceBuilder rather than an ExecutorService and then invoke ExecutorServiceBuilder#build in the manager's start method. This would be a breaking change though, so is off the table for now.\nFor any applications that are prone to this bug, we could add an alternate constructor to ExecutorServiceManager which enacts this lazy executor construction. Given this, I think we could add a test case like the one you've written that passes when the builder-accepting constructor is used.\n@randyp, have you run into this bug in production? Or did you just happen to notice it in development? I think it may be one of those cases where the rough edge is preferable to the kludge that would be required to fix it.\n. Worst case, I think we re-file this as an issue and slap the 2.0.0 milestone on it. At present, there aren't any plans for a 2.x release train, but I created the milestone to track breaking nice-to-have changes like this that we could feasibly revisit in the future when a major version bump looms.\n. @thomaslee, is this still something you'd like to tackle?\n. If you only need authentication (i.e. not authorization), then take a look at PolymorphicAuthDynamicFeature. It allows you to specify Authenticators for specific Principal subclasses. See the motivating issue for details.\nAs pointed out in #1632, there is a gaping hole in this feature when it comes to authorization. This may be fixed in future, pending the resolution of this issue.\n. @vivekkothari Shall we close this issue or are you still concerned with the lack of polymorphic authorization?\nWe decided to close #1632 after increasing the amount of documentation around PolymorphicAuthDynamicFeature. @psamsotha's thorough discussion of the issue really drove home for me how complicated the auth stack is, especially in terms of coupling between authentication and authorization. Barring some drastic rewrite, there seems to be a general preference for explicit documentation of shortcomings rather than additional functionality to cover corner cases.\n. Looking at the history of the file in question, the showDetails guard was introduced in 2014. @joschi, do you remember what the motivator was for this?\nIf I were to guess, I'd assume it was to prevent cases where a pathological client could induce large response payloads if a developer was longwinded when writing exception messages. Debatable whether this is a realistic concern, but this file's history shows a similar tack being taken with regard to logging: https://github.com/dropwizard/dropwizard/commit/9f2df976b2b1fda7dfb19fbdfd0c670914791f8a\n. Is Dropwizard 1.0 frozen yet? Could we bake this change into it to take advantage of the major version bump?\nOne (hacky) alternative that preserves API compatibility would be to allow TaskExector instances to be composed with POST bodies via a chainable method. To illustrate, your lines 99 and 100 of TaskServlet.java could become:\ntaskExecutors.get(task)\n    .withPostBody(getBody(req))\n    .executeTask(getParams(req), output);\nwithPostBody would return a copy of the TaskExecutor with a postBody field initialized to the argument String.\nI don't like having to treat the parameters and request body differently in such a way, but I think it's best to avoid breaking changes at all costs.\n. LGTM, aside from documentation nit. @arteam, mind chiming in, please? Would be more comfortable merging with your signoff, since you had opinions on this change.\n. Running SimpleServerFactoryTest in isolation (i.e. mvn test -Dtest=SimpleServerFactoryTest passes, but I reliably get the failure when running all of dropwizard-core tests in one go.\nPrinting the param map within TaskServlet#getParams indicates that Jetty's implementation of HttpServletRequest isn't populating the params map with query parameters in POST requests. I initially thought that perhaps the upgrade from Jetty 9.3.11.v20160517 to Jetty 9.3.11.v20160721 introduced the issue, but the test failure occurs at the upgrade commit and at the commit prior.\nDid some digging in Jetty's Request and HttpUri classes, but didn't turn up anything. Consider me stumped for now.\n. I think the issue may stem from the Jetty upgrade after all. While I was poking around earlier, 9.3.9.v20160721 was being pulled in by 1.0.1-SNAPSHOT builds of dropwizard-servlets, even when I'd checked out commits that predated the actual bump to that version of Jetty.\nI pulled down the Jetty source at the jetty-9.3.11.v20160721 tag and used a few scattered printlns to trace request state as the offending POST-with-query-params from SimpleServerFactoryTest passes through the server. The correct request metadata is traceable through a number of jetty-server classes (HttpChannelOverHttp, HttpChannel, and Request).\nBut then the query parameters aren't extracted from the URI when TaskServlet#doPost is invoked. Printing req.getQueryString() in there shows it to be name=test_user, as it should be. And the weirdest thing is that the extraction codepath in Jetty's Request#extractQueryParameters method doesn't run until after the TaskServlet has finished.\nI'm going to file a separate issue, since it doesn't seem to me that this relates to #1606\n. Very neat. LGTM.\n. Any reason this hasn't been merged yet? All committer feedback seems to have been addressed.\n. I'd err on the side of not including functionality that isn't expressly asked for, as you suggest.\nTo be honest, this kind of \"out of thin air\" injection tends to scare me. I'm wary of supporting multiple injection mechanisms in the same class, but in this case it's more about playing ball with one of our dependencies (i.e. Jersey) than adding frivolous bells and whistles.\n. @victornoel, I've since put together a bundle for integrating Dropwizard with j2e-pac4j, if you're interested. It's pretty much just a layer of glue between a pac4j config file section and org.pac4j.j2e.filter.SecurityFilter, but perhaps it could suit your application's needs.\nMore generally, I'm curious what your experience has been using pac4j in a Dropwizard application, if you have any initial reactions.\n. Sounds good, @victornoel. I'd like to see this issue closed once and for all. I'll happily accept PRs to dropwizard-pac4j too, if you think you have a clean solution to integrating pac4j with Jersey.\n. Thanks for bringing this up, @psamsotha.\nMy primary concern when putting a469b20 together was to minimize the amount of complexity added to the dropwizard-auth package while adding support for my immediate use case (multi-Principal authentication). dropwizard-auth was already a major source of confusion within Dropwizard, as evidenced by the high proportion of issues and mailing list threads created by users unsure how to use it. I didn't want to make it any worse, so opted to restrict my change to authentication and included a disclaimer stating as such.\nThis restraint resulted in an obvious deficiency, in terms of rote functionality. Your suggestion points in the direction of a fine solution, but I think that supporting both authentication and authorization for polymorphic Principals could introduce great risk of misconfiguration. In such cases, use of the RolesAllowed annotation would require consumers to be diligent in exhaustively configuring their AuthFilters with Authorizers that enforce the desired role policy. Omission of a AuthFilterBuilder.setAuthorizer() call for a given AuthFilter would result in that filter's Principal type being handled by the default PermitAllAuthorizer, possibly resulting in endpoints being erroneously exposed. In this way, the feature would \"fail open\" in an undesirable way.\nThis could be avoided if we could enforce with a compile error the specification of both an authenticator and an authorizer for all AuthFilters passed to PolymorphicAuthDynamicFeature.\n. Thanks for taking the time to write your thought process in such detail. I think we're in agreement as to the behavior of the components in question.\nI'm in favor of documenting the subtleties of the existing implementation rather than trying to augment it to cover additional use cases. Especially without any open issues indicating taht additional functionality is required by users.\nSince you've put in so much effort already, would you like to put a change together adding to the Javadoc of PolymorphicAuthDynamicFeature? I'd be happy to review a PR if you'd like to move the discussion to one.\n. I think a mailing list thread would be a good recourse if we can't come to agreement here in a timely fashion, but I don't think it's necessary just yet. If developing a separate module is acceptable to you, I think we can move forward. Exposing certain internals of HttpClientBuilder strikes me as a reasonable idea, as there very well may be other use cases that could be neatly solved by extending it.\n. It seems to me that many of the concerns one could have about a CachingAuthorizer would apply also to CachingAuthenticator. For instance, concerns about auditability or credential-revocation are valid in either case. Arguably, the same logic that validates the existence of CachingAuthenticator supports the addition of a CachingAuthorizer\u2014developers should be allowed to decide for themselves whether or not their application warrants Principal-caching.\nI'm curious what the Dropwizard team thinks on the matter.\n. This issue can now be closed, since #1639 was merged.\n. Thanks, @v-ladynev!\n. This behavior keeps coming up. In addition to #834, #1444 earlier this year updated maximumPoolSize's default value and fixed a related logging issue.\nHave you observed this issue causing problems for an application?\nWithout evidence starvation in production workloads, I don't think Dropwizard is the best home for a custom ThreadPoolExecutor implementation. Given that all existing usages of ExecutorServiceBuilder are separate from the main server thread pool, any lack of pool growth shouldn't directly impact server throughput. There may be an impact if there's a dropwizard-client RPC in a request path, but this isn't a default case.\nWe should of course provide the ability to configure custom ExecutorServices wherever possible (e.g. JerseyClientBuilder.using(ExecutorService)), giving any applications that are affected the ability to inject such a queue-size-aware executor.\n. LGTM. Good catch.\n. I was hoping we could link to the commit which introduced this inconsistency, but the lineage is tricky to track down. LogbackAccessRequestLogFactory originated in dropwizard-jetty and its documentation has been incorrect since its inception.\nThis is clearly a correct documentation fix though, so LGTM.\n. LGTM. Thanks for taking care of these!\n. That's a good question.\nBased on my reading of this code, LifecycleEnvironment hands management off to Jetty, so the lifecycle of managed objects is tied to that of the server. In the case of ServerCommand, when the Jetty server is started, the managed metrics reporter is too.\nI suspect that the reasoning behind this was that metrics are only warranted for long-running processes and the server command is the main entry point for an application's long-running process.\nTo expose metrics in non-server commands, one would feasibly extend LifecycleEnvironment to handle managed objects differently.\n. > 1. Is this considered a bad use of a command and if so is there s recommended practice.\nBy \"a long running worker inside of our drop wizard env\", do you mean that you'd like to run a long-running process within the same shell environment/on the same instance as a Dropwizard server?\nYou could alternatively use a Task. It depends on whether you want your worker to run as its own process separate from your server application (use a Command) or if it can be run concurrently with your server, triggered by an endpoint on the server's admin port (use a Task).\n\n\nWould Dropwizard be interested in having support for something like this in LifecycleEnvironment?\n\n\nThis is the second time to my knowledge that the topic of long-running, non-HTTP-server commands have come up recently (the other involved running a gRPC server). I think it's an interesting idea that should be discussed, but it would represent a concerted push to expand Dropwizard beyond solely supporting HTTP servers. Given that the project at its core trumpets simplicity and the Unix philosophy (\"do one thing well\"), I imagine this idea could be contentious.\n. Thanks for clarifying. LGTM!\n. You should be able to get around this by defining a default constructor in your Application subclass and invoking BootstrapLogging.bootstrap(Level) with the desired log level:\n```\nimport ch.qos.logback.classic.Level;\nimport io.dropwizard.logging.BootstrapLogging;\npublic FooApplication extends Application {\n  protected FooApplication() {\n    BootstrapLogging.bootstrap(Level.DEBUG);\n  }\n...\n}\n```\n. You're right, my mistake. Had to look this one up: https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.5\nThe Javadoc comment on Application is misleading, as it insinuates that subclasses can control the level of bootstrapped logging. This should be fixed.\nI think it'd be a good idea to provide a means of configuring the log level passed to BootstrapLogging.bootstrap(Level): #1662\n. LGTM\n. LGTM, aside from comment/spelling nits\nDoes your application override Application#addDefaultCommands(Bootstrap) to swap out the default ServerCommand? This brings up an interesting question: what is the recommended path for running a non-Jetty/HTTP Dropwizard server?\nAnother option would be augment ServerCommand to support server types beyond Jetty. This will be relevant to a future Dropwizard release which includes HTTP/2 support.\n. Gotcha, thanks for clarifying. I admittedly haven't looked into dropwizard-http2 yet.\ngRPC support would be a great candidate for a 3rd-party module. To date, Dropwizard has been staunchly focused on HTTP services, so maintaining official support for other protocols would warrant a wider discussion.\n. Why not go all the way and have the function produce Commands?\n. If we're going to be strict, given that the new constructor exposes additional functionality, this change would warrant a minor version bump, according to the precepts of semantic versioning.\nI think that the best we can offer right now is to clarify a roadmap for the next few releases. From this, we can all rally around a specific task list for changes that are to be included in the next release.\n. I think this is a valid concern, but I don't think it's as simple as invoking ExecutorService#shutdown within the dispose method. Doing so is the right thing to do as long as the ExecutorService isn't shared (see third paragraph in ExecutorServiceProvider Javadoc).\nIn this case, we can't guarantee that the service isn't shared. For example, the ExecutorService used in JerseyClientBuilder may be passed in via the appropriate using method, in which case that executor could be used in other parts of an application.\nAll of this is to say that a fix for this issue is still possible, it would just need to be nuanced. I can put a change together and we can take further discussion to a PR.\n. Good catch. Pity this Logback codepath isn't thread-safe. Perhaps they're wanting to avoid synchronization because logging tends to be such a hot path. The DeferredProcessingAware interface could use a Javadoc.\nIf I'm understanding the issue correctly, then a fix would be to simply remove the prepareForDeferredProcessing invocation in Dropwizard: https://github.com/dropwizard/dropwizard/pull/1678\n. Hello Dominik. Thanks for the report.\nI'd rather not change default behavior. I think the best and least-surgical solution would be to simply add accessor methods for excluded paths and MIME types to io.dropwizard.jetty.GzipHandlerFactory. This could feasibly be included in the 1.1.0 release of Dropwizard.\nCan you clarify what you mean by \"flushing fixed somehow?\"\nRegarding the getApplicationContext().getGzipHandler() oddity, it makes sense that it would return null, because the GzipHandler installed by Dropwizard wraps the application handler. I was just in this code the other day and noticed this disclaimer in Environment.java. I'm not sure why methods intended for internal use were left public, but perhaps it was accidental that a path to the getGzipHandler() method was left open in the first place.\n. Would additional GzipHandlerFactory configuration not solve your problem, though? We should focus on a near-term solution which solves your problem before considering wider refactoring work.\nWhile GzipHandler has no flush method, it does have a method to enable/disable synchronous flushing. Perhaps this too could be made configurable in Dropwizard.\nThis is an interesting case, given that a preference for small, timely messages is fundamentally at odds with message compressibility. It seems to me that the Deflator.SYNC_FLUSH behavior might be the closest available option to what you need.\n. Weird. I have no idea how Chrome populates that EventStream tab, but I imagine that it's outside of Dropwizard's scope.\nShifting discussion over to your PR from here.\n. @jimm-porch server.gzip.enabled is still present in 1.x and should continue to work.\n. I don't know Jetty's internals super well, but I think that it comes down to the semantics of what the idle timeouts on Connectors mean (emphasis mine):\n\nThe max idle time is applied:\n- When waiting for a new message to be received on a connection\n- When waiting for a new message to be sent on a connection\nThis value is interpreted as the maximum time between some progress being made on the connection.\n\nI think that in the case you're describing, where you stick a Thread.sleep(...) within a resource method, the server is pausing during request-handling rather than while Jetty is waiting for bytes to be transferred. That is to say, a connection is idle if it's hung in the transfer state rather than the request-handling state.\nSomebody please correct me if I'm wrong. This is what \"idle timeouts\" mean in Netty/Finagle parlance, at least. These other server libraries provide more granular types of timeouts (ex: Finagle), which unfortunately Jetty doesn't seem to provide. \n. Thanks for the feedback, @saumitrabhave. Good suggestion. I updated the change accordingly.\nSince a shutdown grace period has to be threaded through JerseyClientBuilder via a public method, this change will now be slated for the 1.1.0 release.\nI also took the liberty of tacking on the @ClientAsyncExecutor annotation proposed in #1679, since I'm already in that file.\n. I agree that this makes sense as something that the library should offer a means of overriding.\nInstead of simply moving the location of the hardcoded ObjectMapper#enable call, what if we added a protected ObjectMapper configureObjectMapper(ObjectMapper) method to DefaultConfigurationFactoryFactory? That way, consumers could enable ObjectMapper functionality without having to touch the create method.\n. I think it's important for processes to return sensible exit codes. Currently, doing so should be as simple as invoking System.exit(exitCode) in your Command implementation.\nOne way to improve upon this would be to modify Command#run to return an int which could be fed to System.exit() by the framework rather than force the user to invoke it manually. This unfortunately would be a breaking change.\nAnother way that I'm not a huge fan of would be to introduce an Exception type which encodes an exit status to be fed to System.exit() by Dropwizard's CLI mechanism. Maybe others disagree, but it seems wrong to rely on exception-handling to deal with exit status.\nHappy to entertain any ideas you have, so fire away!\n. I think the exception-as-nonzero-status-code-container idea is the best near-term option. I think the best overall solution is to change Command#run to return an int, but we should punt on that until plans for a 2.x release train start whispering on the wind.\n. The more we dig into this, the more it's becoming apparent that we're increasing coupling between Application and Cli and convoluting the semantics of Command failure. I'm sorry for getting you this far and then getting cold feet, but before we continue, perhaps there's a simpler alternative that would suit you immediate needs.\nIf you don't care about the specific value of the non-zero exit status, you could simply throw ArgumentParserException or ConfigurationException. This would result in an exit status of 1 and you'd get whatever message you want sent to stderr. Or else we could talk about adding additional exception types to the catch chain in Cli#run that would return false.\nA cool thing for a future major version bump would still be to provide a mechanism for exiting Dropwizard applications with a wider range of exit statuses (perhaps even providing helpers for abiding by errno.h), ideally by changing the return type of Cli#run.\n. You know what... I think what we should do is add a final catch clause within Cli#run which would return false on any Throwable. This would introduce precisely the behavior we want\u2014returning non-zero exit status when a command blows up.\nWould you like to take this to a PR? The amount of effort you've put into this issue I think warrants credit on the commit. :)\n. I created a 2.0.0 milestone to track another nice-to-have issue that would similarly warrant a major version bump. A 2.x release train is pretty far from any of our minds at the moment, but the milestone can be used on GitHub to prevent issues like this from falling through the cracks.\n. Judging by the ServerConnector logging, the Jetty server is started up and then immediately shut down before the tests actually run.\nWhat is the contents of app-integration-testing.yaml?\n. Change looks great. Thanks for the contribution!\nI guess we can punt on adding similar configurability for path/MIME-type inclusion/exclusion as a separate change, if there's still any interest in doing so.\n. I too saw your comment on #1672, but hadn't had a chance yet to reply.\nI agree that a test case would be the best way to move forward. If possible, we should avoid further shots in the dark like #1678. Given that this latest race is seemingly within Logback itself, perhaps we should reach out to its maintainers. I'm curious if these issues have arisen before and if the Logback team will have any guidance. \n. As far as I can tell, request logging has been handled asynchronously since its inception.\nI'm worried that defaulting to synchronous logging could induce performance issues. I believe that it would be a stopgap for this issue (and #1699), but some perf testing is in order before we introduce the change.\n. This seems to be a Jackson issue, specifically in relation to its Hibernate module. I think this StackOverflow question may help lead you to an answer.\n. Nice catch. Thanks!\n. This is a great use case.\nApplication#getConfigurationClass has been final since its inception within com.yammer.dropwizard.Service in 2011, so I think it's safe to say that this was done as a precaution rather than to prevent a regression that we should be mindful of. Thankfully, removing final from a method doesn't break ABI compatibility, so I think this would be a fine addition to 1.1.0.\nFor flavor, I noticed that the equivalent method on io.dropwizard.cli.ConfiguredCommand isn't declared final, so this change arguably improves consistency across the codebase, albeit in a marginal way.\nI'm curious if any other maintainers will have different opinions on this change, so I'm going to let the PR bake for a day or two before merging.\n. Merged. @jhaber, thanks for the contribution,  and thanks @arteam for chiming in!\n. Have you tried setting server.applicationContextPath instead of server.rootPath?\n. Remove the leading slash in the path you pass to URI#create.\nAs per the documentation of Response#created, the path must be relative. In your case, \"/category/...\" is an absolute path. See JERSEY-2838 for more information.\nI modified io.dropwizard.server.SimpleServerFactoryTest to illustrate this case and verified that removing the leading slash results in rootPath or applicationContextPath being heeded.\n. Hello Timur. Are you overriding the application context path in your config file?\n. I think the problem has to do with the difference between the context path and the servlet path. As I understand it, the context path precedes servlet paths and is not included within them. For instance, given a path /context_path/foo/bar where /context_path is the application context path, then filters must be registered for URL patterns that match /foo/bar.\nIn your case, I suspect that .addMappingForUrlPatterns(null, false, \"/*\") is actually what you want. This wildcard path will result in all paths being filtered, which I assume is what you want.\n. If my assumption above is correct, then the behavior in 0.9.x may have been relying on a bug. Jetty's changelog doesn't indicate anything changes to context path interpretation between 9.2.13.v20150730 and 9.3.9.v20160517 (the versions on which Dropwizard 0.9.3 and 1.0.0 depend, respectively).\nDoes this change in behavior actually cause problems for you? Does using a path pattern of \"/*\" not work for your application? Instead of debating what \"working properly\" means, perhaps we can just improve the documentation on context path interpretation.\n. Since the last two catchs are identical, let's collapse them. You can do this by simply replacing ConfigurationException with Throwable (and removing the import). A comment to the effect of \"unexpected exceptions result in non-zero exit status of the process\" is probably a good idea, too.\n. New commit doesn't seem to have been pushed.\n. Thanks for taking this one home!\n. Hello Ryan. A few questions:\nIs there any error message included in the 400 you get from your server? For instance, when I've run into issues like this, it's typically because the JSON in the request body isn't properly formatted, in which case you get a \"Unable to process JSON\" message in the response.\nCan you provide more detail about your application? What version of Dropwizard are you using? What authenticators/authorizers are you using in conjunction with the @Auth annotation? What happens if you remove the @Auth parameter of receivePost?\n. LGTM\n. Spent a bunch more time digging on this today, but still no solution. It seems to be related to how o.e.jetty.server.Request objects are recycled between requests.\nTo summarize, Request has a recycle method which nulls out the object's state (including the _queryParameters field) and is presumably meant to be run between individual HTTP requests. For some reason, TaskServlet#doPost is invoked prior to Request#recycle, which results in the request's query parameters not being extracted and the default empty map being used. \nPatching o.e.jetty.server.Request to remove the if (_queryParameters == null) guard around the extractQueryParameters() method results in query parameters universally being extracted and the SimpleServerFactoryTest#testBuild passing.\nIt's unclear to me if this situation is a Jetty bug or the result of mismanagement of HTTP request lifecycles in SimpleServerFactoryTest. I fiddled with httpRequest helper method to ensure that all input/output buffers associated with requests are closed, but the test still fails.\n. Good find!\nThe dropwizard-core tests to pass if you set asyncAppender.setNeverBlock(false); in the wrapAsync method. It appears the async logging queue is filling up during test runs, which perhaps tickles some race condition. I'm about to get on a flight and go on vacation, so can't dig any further today.\n. My last comment was a bit hasty. The tests still fail with asyncAppender.setNeverBlock(false), albeit inconsistently. All indications continue to point towards a race condition hidden somewhere.\nThe best lead we have still seems to be the AbstractAppenderFactory#wrapAsync call, as pointed out by @nickbabcock above. It's invoked by the ConsoleAppenderFactory used for request logging. dropwizard-logging isn't used in this test class (because SimpleServerFactoryTest builds a ServerFactory directly from the configuration file), so we can ignore it.\nThe issue seems to stem from a bad interaction between Jetty's request-handling lifecycle, Logback's RequestLogImpl, and Logback's async appender functionality. I stumbled upon a familiar-sounding issue filed against a Logback+Logstash encoder library which calls out the same lack of thread-safety in Logback that's come up in relation to Dropwizard in #1672 and #1686.\nWhen enabling DEBUG output for test runs in my branch which instruments jetty-server and dropwizard-{core,servlets}, I notice that an access event is not logged for the first GET request in SimpleServerFactoryTest#testBuild. With ConsoleAppenderFactory#wrapAsync removed, the test passes and both testBuild requests are logged.\nSo, the best inclination I have at this point is that Request.recycle() is not invoked within Jetty when an async appender is used for request logging. This prevents the shared Request object from clearing its request parameters. And thus when the POST /secret/tasks/hello?name=test_user request is handled, the empty query parameters from the prior GET /service/test are still used.\n. 1. As far as I'm aware of, the SimpleServerFactoryTest#testBuild case is the only reported instance of the issue. It's possible that it is liable to affect production servers, but the likelihood thereof is low because SimpleServerFactory isn't used by default.\n2. Without a root cause, it's hard to say why this issue would occur only in tests.\n3. An immediate fix would be to enforce synchronous request logging. The impression I'm left with by this issue and #1686 is that we really need to reach out to the Logback maintainers for guidance on dealing with the library's use of mutable state.\n. Yikes. Unsettled by the number of fingerprints I'm leaving all over these Logback-related issues.\nPerhaps we can patch Logback itself to make the AccessEvent#prepareForDeferredProcessing method idempotent. At the very least, we should seek guidance from the Logback maintainer(s) before burning more time on these issues.\n. Your analysis is correct, with one clarification (emphasis mine):\n\nin the call to addBundle, the ConfiguredBundle must have a generic type that is a supertype of Configuration (by the signature of addBundle) but also a subtype of Configuration (by the signature of initialize which takes Bootstrap<?>).\n\nThe type parameter of the ConfiguredBundle passed to Bootstrap#addBundle must be a subtype of Configuration and a supertype of T extends Configuration. So the ? type must lie within the parental chain between T and Configuration. But in practice, ? would typically be equal to T, as in the cases illustrated by dropwizard-hibernate's tests.\nThis issue has come up before. That PR, which bounded the wildcard type in ConfiguredBundle#initialize, was merged but then reverted when it was found to break bundles in previous versions of Dropwizard.\nIn my opinion, this change should have been reconsidered prior to the release of 1.0.0. Given that it's a breaking change, I don't see how we could include it in a release any time soon.\n. We could introduce a 2.0.0 milestone on GitHub. To my knowledge, the topic hasn't even come up yet, since 1.0.0 is still fresh off the presses. So while we can keep track of issues like this, I really can't guess when the next major version bump will be.\n. That would work, but would introduce temporary boilerplate that would ideally be removed in 2.x in favor of adding an explicit type to ConfiguredBundle. This would break all applications that rely on this TypedConfiguredBundle and increase the 2.x migration burden.\nIMO, this would only be reasonable if the API of the new Bundle subclass is frozen and does not diverge from that of ConfiguredBundle over the course of the 1.x release train. This would make migration to 2.x a one-line change.\n. I think the takeaway here is \"don't use relative paths\". Dropwizard's currentLogFilename configuration field under logging.appenders gets plugged into Logback's FileAppender#setFile. This call boils down to new java.io.File(currentLogFilename), meaning that relative paths are rooted in an application's working directory.\nThe Logback version went from 1.1.3 to 1.1.7 in the span of Dropwizard 0.9.3 to 1.0.0, but the behavior of FileAppender#setFile didn't fundamentally change between these releases. I can't say why this behavior would have changed for you, but in any case, I'd avoid using relative paths if you can.\n. Thanks for reporting the issue, Gili.\nRather than change the type of the configPath field, perhaps we could add a new io.dropwizard.configuration.ConfigurationSourceProvider which produces an InputStream from a file within a JAR. The configPath string could be formatted according to the JAR protocol expected by java.net.URL (i.e. \"jar:file:/path/to/some.jar!/path/to/file\").\nDropwizardTestSupport could then optionally invoke Bootstrap#setConfigurationSourceProvider depending on the state of configPath.\nWould you be interested in bringing this change to a PR?\n. Hello @rpawarmca. The question of what is the best-of-breed Java SOAP client library is outside of Dropwizard's scope, since we'll never be in the business of providing a SOAP library. I think the dropwizard-users mailing list would be a more suitable venue for your question, so perhaps you could ask there?\n. Hello @ggrnd0. We are indeed alive, but can't guarantee responses within minutes of issues being filed.\nI'm not sure I understand your example. The @Auth annotation is intended for use with request parameters, but you seem to be using it for an instance field of your MyService class. Is this the case? Perhaps your resource and service classes were abbreviated, in which case more context might help us understand the issue.\nAlso, could you provide the full stacktrace of the IllegalStateException that you're seeing, please?\n. Change looks good! Just a couple documentation nit-picks.\n. Thanks for taking care of this, @victornoel.\n. Hello Jayson. This is an interesting issue.\nSubresources are supported by Dropwizard, and I think it'd be worthwhile to add a test case to DropwizardResourceConfigTest that illustrates this. As mentioned by the SO questioner, the subresource function works if its return type is a concrete resource class. As shown by the test in #1717, subresource locators can point to subclasses, so a good approach could be to bound the expected polymorphic resource class with an interface.\nAt the risk of seeming heretical, I suspect that the problem stems from the usage of the Any type rather than a particular deficiency in Dropwizard or Jersey. In Scala (which I'm far more familiar with than Kotlin), the analogous Any type is the type system's wildcard lower bound used as an alternative to j.l.Object to encompass primitive types as well as objects. Thus it's arguably more of a type system formalism than a type that should be used in practice. If the case is the same in Kotlin, then I don't see how using Object would be any worse than using Any, not to mention that using Object wouldn't result in this NPE.\n. Gotcha, thanks for clarifying. As I commented on #1718, this issue seems to only occur when an HTTP verb annotation is omitted on the subresource locator method, which my test didn't account for.\n. Ah, I see. The issue occurs when the resource method lacks an HTTP verb annotation. When I change the interface-returning resource method in #1717 to instead return Object, the tests still pass because I'd added @GET.\nThanks for taking care of this, Nick. LGTM\n. Thanks, Nick! Nice job catching this one.\n. Could your deployment workflow allow you to set the prefix configuration option of GraphiteReporter? If you use some configuration management system to distribute templatized Dropwizard config files to your instances, you could simply include the hostname in the prefix:\nmetrics:\n  reporters:\n    - type: graphite\n      prefix: common.prefix.for.my.app.59.13.234.31\nThe purpose of the prefix config option is to be general enough to satisfy most use cases. I'm hesitant to entertain a hostname-prefixing patch, since it strikes me as one among multiple possible pieces of application metadata that could feasibly be used to prefix metrics. For instance, you could imagine using a PID or something cloud-provider-specific like an EC2 instance ID or tag.\n. I think the short answer is \"no\". JAX-RS specifically intends for NotFoundException to trigger 404s.\nSee the javas.ws.rs package summary:\n\nNotFoundException\u2014A runtime exception indicating a resource requested by a client was not found on the server.\n. D'oh. My bad.\n\nI'm not sure that there's a right answer here, but I think it'd be make sense to return 204s on Optional.empty(). I think it's beneficial to compel applications to be explicit about when they return errors. The semantics of whether an endpoint returns 204 or 404 is an application concern, but I think it makes sense to force developers to explicitly throw NotFoundException or a 404  Response if they truly want to convey a client error.\nThe concern would be confusion caused by this behavior changing in Dropwizard. Many applications may be implicitly relying on their Optional.empty() results being translated into 404s.\n. Supporting hot-reloading of config files would require some work in dropwizard-config.  One might be able to do this without breaking any APIs, but a ConfigurationFactory which separated hot-reloadable and non-hot-reloadable config options into two sections wouldn't be compatible with preexisting config files. I'd argue that maintaining consistency across all configuration sources trumps the neatness of a config separated based on reloadability.\nHowever, I think simply documenting the config options that were hot-reloadable would be sufficient. I'd be happy to review a PR that added a reloading ConfigurationFactory, if anyone was motivated to put one together.\n. It appears that Logback doesn't \"officially support\" multiple appenders within the same JVM writing to the same file. You may run the risk of corrupting your log file, but it's not clear to me why one of the appenders would be silenced entirely.\n. Thanks, @cmicali!\n. Those are the same Logback codepaths that I've been spelunking in while debugging #1699. There seems to be a growing number of fingers pointing to Dropwizard's Logback-enabled request logging.\n. LGTM. Good find! Thanks for taking care of this and thanks, @nickbabcock for the test case.\n. Thanks, @nickbabcock!\n. This is cool. Thanks, @nickbabcock!\nI agree with @jplock. Including the feature in dropwizard-jetty and disabling it by default would cover the bases of 1) not introducing unexpected new behavior, 2) making it easy to enable the feature, and 3) avoiding additional dependencies.\nIn order to help avoid the case where an invalid cert silently fails upon hot reload, perhaps we could add an onFailure callback as an (e.g. a Consumer<Throwable>) instance field and constructor argument to SslReloader. This callback would be triggered upon hot-reload failure and could, for instance, emit log statements or metrics which an operations team could wire into alerting.\nAnybody have opinions on the Task vs filewatcher approaches? I don't have a strong opinion one way or the other, but @nickbabcock's Task implementation seems more idiomatic, arguably being akin to administrative tasks like GarbageCollectionTask.\n. Thanks for outlining your findings, @victornoel.\nIt sounds like it would make sense to modify AssetServlet to extend DefaultServlet rather than HttpServlet. I think that an initial PR making this change should simply mimic the existing functionality of AssetServlet. We can then start to leverage the additional functionality of DefaultServlet in future changes, if it makes sense to do so.\nI'm not familiar with Jetty's notion of \"welcome files/servlets\", but based on the Javadoc, it sounds feasible to implement AssetServlet's index file behavior in terms of welcome files.. Hello Huawei. Thanks for asking.\nThere are no such plans at this time. The chained+polymorphic approach you describe sounds like the right way to do what you want.. It seems to me that a solution to this within Dropwizard would be identical to what you're already doing in your application. I don't think the alternative of adding a LifeCycle.Listener to the Jetty server object would enforce the desired ordering guarantees.\nWe could add your dummy managed object (ManagedShutdownLogger?) as a public class that users would optionally use in their applications. I'm not sure that there's enough general utility from this feature to include it by default.. Thanks for taking care of this. This change is fine, but I question how much of a problem the issue in reality.\nNeither dropwizard-testing nor dropwizard-example should be imported within an application's compile scope. Dropwizard's root pom and dropwizard-bom/pom.xml both put Mockito in the test scope, so applications depending on dropwizard-core shouldn't be affected.. Good catch. I took a stab at updating the documention in #1854.. Thanks for the review, @nickbabcock. I figured you'd be a good person to add as a reviewer here, since you've touched the SSL cert code recently..  Makes sense to me. We should be noisy when releasing this in the next stable versions, given the possibility that it changes behavior out from under folks.. @jplock Any reason this isn't suited for the 1.0.6 milestone?. I slotted this change for 1.1.0, but technically the change in response payload format would be a breaking change (since folks might be relying on the HTML output to detect 5xx's, for example). I'm inclined to let it slip, since this strikes me as somewhat of a bugfix.\nThanks, @ibwhite!. I like @joschi's Read The Docs idea. \nAlternatively, if we were to go the public cloud route, we could host it directly out of an S3 bucket with an SSL'd CloudFront distribution, since the site is just static HTML.\n. The lock-granularity improvement is enticing. I'd vote for including it in 1.1.0, unless any issues crop up in the release candidates.. @ibwhite I also would like to be able to make use of this change in production, so I share your sense of haste.\nI'm going to defer to other committers, though. It seems to me that it's somewhat debatable whether this change represents an introduction of new functionality or, as you say, a bugfix-esque improvement. @jplock, @arteam, what do you guys think?. Set the milestone to 1.1.0. Perhaps this can be cherry-picked into a second 1.1.0 release candidate.. I vote for including this change in 1.1.0, provided we can get it into a release candidate or two in order to kick the tires.. That code block is a contrived example of how configuration factory classes work in Dropwizard.\nAs the preceding paragraph says, \"if your application requires a set of configuration parameters in order to connect to a message queue, for example, we recommend that you create a new MessageQueueFactory class\". The code block is simply show how one would hypothetically go about implementing such a class.\nClosing this issue, as the class in question is hypothetical, not missing.. Thanks for the contribution, @frojasg. This seems useful.\nCould you add a JavaDoc to AutoCloseableManager providing some context, please?. Thank you for contributing!. Change LGTM.\n@arteam I wouldn't think so. The fields claimed to trigger the issue in #1990 aren't optional, so the @UnwrapValidatedValue shouldn't be relevant to them.. Thanks for reporting, @zloster.\nI'm not sure what we can do about this. I don't see it as a bug, but as an instance of misconfiguration. It's debatable whether it's Dropwizard's responsibility to guard against this, since Jetty already does so.\nOne option to preemptively prevent the failure would be to override the thread pool in DefaultServerFactory if we infer that the configured application connectors will impose a number of acceptor and selector threads that exceeds the user-configured maxThreads. But then we'd be lying to users in saying that they have full control over their server's thread count.\nOtherwise, any further validation of maxThreads would have the same effect that you've observed\u2014the server would fail at runtime with a configuration error.\nMaybe we can present a more actionable error message than that emitted by Jetty. Or barring that, mention the case in the user manual with remediation steps. What do you think?. Would you be interested in taking a stab at adding some of this information to the user manual? I think it may suffice simply to flesh out the maxThreads documentation in the configuration section.. Thanks for reporting and tackling this, @tbartley!\nThis seems to me like a good hole to plug. However, the stack trace should include a Throwable's message, if present, so I think we can remove the stdErr.println(t.getMessage()); entirely.. Thanks, @tbartley!. This is great. Couple question:\n\nWhy not support java.time.Duration too?\nWhy not use the SQL interval type instead of strings?. Thanks for submitting these, @msymons!. Jackson 2.8.9 includes a handful of patches in addition to the Deserializer fix, but none of them sound worrisome. I'm inclined to merge this, since we should address the vulnerability ASAP.. As @nickbabcock suggested, a good way to move forward would be to implement this functionality as a module outside of dropwizard-validation. Treating such a module as a proof-of-concept, we then decide whether to incorporate the new validation annotation as a mainline contribution. . Thanks for responding to #2130, @FredDeschenes.\n\nInstead of introducing a new annotation, what if we added an boolean exclusive element to MinDuration (defaulting to false) which would control whether the value was treated inclusively or exclusively? This element could feasibly be added to the rest of the min/max validation annotations in Dropwizard as well.\nIn this case, the usage in DataSourceFactory would become\n@MinDuration(value = 1, unit = TimeUnit.SECONDS, exclusive=true)\nprivate Duration maxWaitForConnection = Duration.seconds(30);. As I understand it, the issue raised in #2130 is that the defined minimum duration is too large. The solution is to lower the default such that any positive real number is valid.\nI believe our two solutions be to equivalent\u2014the set of positive real numbers is equal to the set of real numbers with an exclusive minimum of zero.\nDoes that make sense?. I think 1 ms is a reasonable default. Do you agree?\nI don't want to unilaterally drive the bus here. @nickbabcock, what do you think?. Whoops, looks like this branch has diverged from master. @FredDeschenes, could you please resolve the merge conflicts so we can get it in?. Ah, my bad. The \"rebase and merge\" option was selected and is a lot less forgiving when it comes to merge conflicts. Squash+merge is green, so we're good to go.. As a counterpoint, y not that?. Hello John. I'm not sure that I understand the use case. Use of the word \"console\" makes me think that the command will drop you into some sort of interactive console, which this change does not provide.\nCan you extrapolate on the cases in which you want to parse configuration and start the server's lifecycle without starting the server itself? I wonder if there's an alternative way your problem(s) could be solved.. Thanks for putting the change together, but it sounds to me that this is best left within your application rather than the framework. As @joschi points out, the existing ConfiguredCommand class should already do most of the heavy lifting involved in running a non-daemonized program that reads a config file.. Sounds like a job for an @Deprecated annotation.. Removing it would warrant a major version bump, so it seems to me like the right thing to do is your first option, @jplock\u2014deprecate in 1.3.7 and remove in 2.0.0.. You're right. I got a bit overzealous with these super()s while trying to get resource injection to compile with the new class hierarchy. Will remove these.\n. You're right. Another vestige of a battle with the compiler. Will remove.\n. How about \"A {@link ResourceTestRule} builder which enables configuration of a Jersey testing environment.\"?\n. I think this statement could be made a bit more clear for those who aren't familiar with the code it refers to. How about \"Encapsulates data required to configure a {@link ResourceTestRule}. Primarily accessed via {@link DropwizardTestResourceConfig}.\"\n. Sounds good. Too bad Java doesn't provide something like Consumer.noop() akin to Function.identity().\n. \"Tries to run two tasks on the executor that...\"\n. Perhaps a question for @arteam: why throw here instead of proxying to the other execute with the empty string? This would be the first use of UnsupportedOperationException in a public method of a public class within the Dropwizard codebase. It seems to me that an empty request body is a valid invocation, so is there a specific reason to throw?\n. I'm all for improving clarity, but because Java enum types are defined as classes, references to them can also be null. For example, the following is valid code:\nenum Foo { Allow, Deny }    \nfinal Foo foo = null;\nIf it seems ambiguous to use boolean values within the context of authorization (i.e. if it's not obvious that true=authorized, false=unauthorized), then an Allow/Deny enum would be more explicit. However, given that all of this is private code internal to the class, I think it's a fair tradeoff to use booleans to avoid introducing a new class. I think an inline comment on the cache type semantics is definitely warranted.\n. I think an inline comment is warranted here, pointing out the convention of implicitly treating absolute resource paths as being rooted within the application's resources directory [1]. \n[1] https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_names\n. Regardless, I think an inline comment could help. The very fact that we're having this conversation indicates that clarity is warranted.\n. Good catch. Funny that this wasn't brought up as part of #473.\n. How about a Javadoc comment on the class, since there currently isn't one?\n/**\n * A {@link ConfigurationSourceProvider} which reads the configuration\n * from a resource file.\n *\n * In order to abide by the calling conventions of\n * {ClassLoader#getResourceAsStream} [1], absolute path strings\n * (i.e. those with leading \"/\" characters) passed to {@link #open(String)}\n * are converted to relative paths by removing the leading \"/\".\n *\n * See [1] for more information on resources in Java and how they are\n * loaded at runtime.\n *\n * [1] https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html\n */\npublic class ResourceConfigurationSourceProvider implements ConfigurationSourceProvider {\n...\n. You can add the Javadoc within your local issue/1640 branch. When you commit and push the changes, the PR should update itself.\nIf you're feeling brave and want to keep the whole PR within a single commit, then you can use git rebase to squash the two commits into one.\n. Mind updating the commit message? I don't think it's clear what this change is addressing, exactly.\nOr better yet, squash the initial commit and this reversion into one.\n. Should this getConstructor() call be reverted too?\n. Ditto\n. Adding this line without the above change to FileAppenderFactory doesn't result in a test failure for me. How did you confirm that the triggering policy isn't started?\n. Shouldn't triggeringPolicy.start(); be invoked below in the else block too?\n. *Instantiator\n. \"Pre-constructed configuration object\" would suffice\n. Nope, I was just pointing out that the configuration parameter doc is either clipped or needs rewording.\n. database field isn't initialized or used in this example, so please delete this line.\n. Looks like this didn't get updated in your more recent commits. Mind fixing the configuration param documentation so I can merge, please?\n. Derp. My bad.\n. A+ Javadoc, would read again\n. Definitely, thanks for mentioning. It would be nice to collapse this and io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory into a single class parameterized on the type of event, since they're now almost identical. This would be a breaking change, though.\nI took the liberty of updating AsyncLoggingEventAppenderFactory's Javadoc too, since it also incorrectly links to AsyncAppenderFactory.\n. Nit: \"Note that registration of the filter will follow...\"\n. Nit: \"passing the filter as a {@link Class} to the {@link #AuthDynamicFeature(Class)} constructor will result in dependency injection, while objects passed to {@link #AuthDynamicFeature(ContainerRequestFilter)} will be used directly.\"\n. According to the Javadoc, we should use Comparator.nullsLast(Ordering.natural()) here.\n. Could you add a brief Javadoc to this class explaining what it does, please?\n. Rm extra newline\n. Ditto brief Javadoc\n. Ditto brief Javadoc\n. - Single space after slashes\n- s/patter/pattern/\n. This line's pretty long. Let's break it up and move the Joiner to a static field:\nfinal String errorMsg = String.format(\n    \"%s must be one of [%s]\", parameterName, joiner.join(constants));\nthrow new WebApplicationException(getErrorResponse(errorMsg));\n. s/duration/size/\n. s/duration/size/\n. Are the defaults clearly documented anywhere?\n. Whoops. Shoulda kept reading. :-X\n. Re: Http2, the manual already states as such:\nNote that your JVM also must provide ``TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`` cipher.\nI will add a supportedCipherSuites override to the provided h2 connector example configuration.. I had to dig into Logback source code to figure out where 51 comes from. Let's call out that if no discarding threshold is specified, then a default of queueSize / 5 is used.. Some of these new lines are very long. Let's break them up a bit:\nprivate Database createDatabase(\n        ManagedDataSource dataSource,\n        Namespace namespace\n    ) throws SQLException, LiquibaseException {. Ditto\nCloseableLiquibase(\n        String changeLogFile,\n        ResourceAccessor resourceAccessor,\n        Database database,\n        ManagedDataSource dataSource\n    ) throws LiquibaseException, SQLException {. Ditto\nCloseableLiquibaseWithClassPathMigrationsFile(\n        ManagedDataSource dataSource,\n        Database database,\n        String file\n    ) throws LiquibaseException, SQLException {. Ditto. Ditto. You get the idea.. LoggingExceptionMapper itself implements ExceptionMapper, so the implements clause here isn't necessary.. Derp, yes.. I typically prefer flatter conditional tree, but in this case it seems reasonable. \ud83d\udc4d. Not sure why I opted for .equals all over the place \ud83d\ude11. Let's drop the public so that it's not accessible to the world.. Mild preference to word this \"n records will possibly be discarded\".. s/, that it/ will/\ns/includes/include/. Maybe length instead of bytes?. Let's add a @see pointing to e.g. the Heroku documentation.. Ah, right. sgtm.. {@code AutoCloseableManager}. Let's phrase this \"The start operation does nothing (i.e. it's a no-op).\". \"it calls\" -> \"Calls\". I think we should clarify what the difference is between the api and core packages.. Consider putting the \"validations, crypto, ...\" list in parentheses.. Just wondering, primarily: Is this terminology that's widely used already or are we innovating here?. Fix wording. Maybe just end the sentence at \"adds in the Default.class group\"?. TIOLI: Rm comma after \"Now\", add one after /person/v1. occurred. contains. Take it or leave it: Mild preference for \"HTTP/2\" in the error message.. What's the reasoning behind using H6? Seems a little too deep to me. H4s have a similar weight and would allow folks to still use sub-headers.. I tend to like the format used by Twitter's Finagle project, which first frames the problem that the change sets about to solve and then describes the chosen solution. This has the benefit of encouraging contributors to think concretely about what problem they're solving, rather than making changes for change's sake.\nIn this model, the solution section could include a description of the testing done.. \"less than (or equal to, if in 'inclusive' mode) {value}\". Perhaps something worded like the following, for this and the other equivalent javadocs.\n\"True if the validation is to allow values equal to {@code value}. False if the validation is to be exclusive. Defaults to {@code true}.\". Rm that second \"to\". ditto. ditto, for all of these. I don't think we want to let this one be that low. #2051 reduced the minimum from one second to 50ms and I don't see a reason to deviate from this.. Here and below, I think the phrasing should be \"include x in the JSON map\" rather than \"include x to the JSON map\".. \"To customize how timestamps are formatted, set the property to the corresponding DateFormatter string\". Reword last sentence here.. Ditto, reword last sentence.. This is includeMDC (final two chars capitalized) below.. \"more fast\" -> \"faster\". I think removing the Bundle hooks in Bootstrap is apt to surprise people who expect their existing bundles to work after a minor version bump. Would you be opposed to holding off on removing this until 2.0.0?. -1 space indentation in the comment.. ",
    "mhurne": "You may be interested in:\nhttps://github.com/dropwizard/dropwizard/commit/35b955c3ef1c4b0dcfecf512049d9c4c685c0e99\nOnce that change is in a release, the presence of a @JsonCreator annotation in the enum will result in use of the annotated method to deserialize the value rather than Dropwizard's PermissiveEnumDeserializer. It's not exactly what you're looking for, though. FuzzyEnumModule should probably only use the PermissiveEnumDeserializer if there is no @JsonCreator and no @JsonValue, not just if there is no @JsonCreator, since (as you are obviously aware) Jackson supports use of @JsonValue for both serialization and deserialization in the absence of @JsonCreator.\n. Perhaps a ResourceHelpers class, similar to io.dropwizard.testing.FixtureHelpers?\n. Thanks, Jochen!\n. Would you agree that isA would have the effect that was probably originally intended?\n. Interesting; I was able to reproduce this in one of my projects as well.\n. With a debugger attached, I found that putting double quotes around the value did result in the String \"001\" rather than \"1\". So I don't think there's a bug here; rather, I believe this is how YAML is meant to behave. See http://en.wikipedia.org/wiki/YAML#Casting_data_types\n. According to my debugger, yes, I did get \"001\". Perhaps the method you're using to check the value is throwing you a curveball as well?\n. Thanks! I agree, Duration would benefit from implementing Comparable as well. However, hopefully this change can be merged in isolation and a separate pull request can be used for the change to Duration.\n. I just created issue #754 to cover modifying Duration to implement Comparable.\n. Fantastic. Thanks!\n. I know there's always a debate to be had about this sort of change because Dropwizard aims to be opinionated. IMO, this is a case where the opinion(s) should be defaults, but customization should be easy to achieve via configuration. Otherwise, we all customize it anyway, but have to do so by jumping through hoops.\nMaybe something like the following should be possible:\nappenders:\n    - type: file\n      layout:\n        type: json\nI acknowledge that I may not be aware of reasons to avoid supporting this, or reasons why it may be difficult to achieve...\n. ",
    "jontejj": "This should depend on com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING being enabled or not in the object mapper?\n. ",
    "zhilongweng": "I am sorry \uff0cwhat do you mean\uff1fI am a new guy ,would you mind teaching in detail?\n. ",
    "kevinherron": "+1\nI think this is one of a few things that could be done to make Dropwizard a little bit more 'embeddable' friendly, which is something I know others besides myself are doing.\n. ",
    "jnaous": "And here's the stacktrace:\njava.lang.NullPointerException\n            at com.sun.jersey.api.core.ScanningResourceConfig.init(ScanningResourceConfig.java:80)\n            at com.sun.jersey.api.core.ScanningResourceConfig.onReload(ScanningResourceConfig.java:133)\n            at com.sun.jersey.spi.container.servlet.WebComponent.onReload(WebComponent.java:656)\n            at com.sun.jersey.spi.container.servlet.ServletContainer.reload(ServletContainer.java:517)\n            at com.appdynamics.framework.extensions.rest.ExtensionResourceRegistrar.extensionStarted(ExtensionResourceRegistrar.java:43)\n            at com.appdynamics.framework.extensions.DefaultExtensionContext.startExtension(DefaultExtensionContext.java:112)\n            at com.appdynamics.framework.extensions.ExtensionManager.addNewExtensions(ExtensionManager.java:106)\n            at com.appdynamics.framework.extensions.ExtensionManager.apply(ExtensionManager.java:66)\n            at com.appdynamics.framework.extensions.ExtensionManager.apply(ExtensionManager.java:32)\n            at com.appdynamics.framework.configuration.ConfigurationManager$1.run(ConfigurationManager.java:209)\n            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n            at java.lang.Thread.run(Thread.java:744)\n. Hi Jochen, Is there a maven repo I can use for prebuilt binaries to check?\nThanks.\nOn Sun, Feb 15, 2015 at 2:29 PM, Jochen Schalanda notifications@github.com\nwrote:\n\n@jnaous https://github.com/jnaous Any news on this? Could you reproduce\nit with Dropwizard 0.8.0-rc1 or 0.8.0-rc2?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/704#issuecomment-74440926\n.\n. \n",
    "CoreyBehrends": "Mike, you took the idea right out of my head.  Was going to start coding this up tonight for a massive project we are about to take on.  Excellent work!\n. If I can help in any way, let me know.\n. ",
    "mikedanese": "@CoreyBehrends I'm glad to hear there's interest. The pull request will include a few doc, organization, and test coverage improvements so please stay tuned in to any updates. I'm hoping to have the branch ready by the weekend.\n. Since no responses from any committers, I've pulled the module out into it's own project here. I'll be publishing artifacts with versions 0.6.2, 0.7.1, and 0.8.0-SNAPSHOT (corresponding with the compatible version of dropwizard) to Maven Central within the next couple days. I'd really like to see this get pulled into the core project though, as I think it's a big improvement.\n. Whoops did not mean to close the issue.\n. sounds good, I've just pushed the project to sonatype here\nhttp://search.maven.org/#artifactdetails%7Ccom.porch%7Cdropwizard-views-handlebars%7C0.7.1%7Cjar\nI'll be working on the other requirements over the next couple days and will post here again when they are done.\nRepository will be hosted here:\nhttps://github.com/porchdotcom/dropwizard-views-handlebars\n. Updated documenation https://github.com/porchdotcom/dropwizard-views-handlebars.\n@joschi I'm a little confused about the last physical requirement \"Must deploy a production artifact to OSS sonatype, under a sub domain/groupId of io.dropwizard with segregated deployment permissions from DW core\". How should I go about doing this?\n. ",
    "mulloymorrow": "Good work Mike!\n. ",
    "nckturner": "I would definitely use this!  Handlebars provides some useful features and since I'm already using emberjs (which also uses handlebars), it would be a welcome addition.\n. ",
    "marcushenrique": "Nice work guys!\n. ",
    "bjorntorewiken": "+1\n. ",
    "nottix": "+1\n. ",
    "wangyingang": "+1\n. ",
    "dbyron0": "Doesn't the code here: http://grepcode.com/file/repo1.maven.org/maven2/com.sun.jersey/jersey-server/1.17.1/com/sun/jersey/api/core/DefaultResourceConfig.java?av=f#62 mean that iterating mappers happens in a predictable/stable order?  If so, then isn't the bug elsewhere?  I still totally support being able to override the built-in mappers.\n. ",
    "fzakaria": "Honestly why even have LoggingExceptionMapper ?\nIt seems like it can be replaced with a Filter and achieve the same functionality ?\nSee : https://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/container/ContainerResponseFilter.html\nWhy don't we just remove it...\n. This issue is to see if thats worthwhile incorporating in the main dropwizard code. if so , I can send PR.\n. hmm..\nThis is what I\"m seeing.\nDoesn't that mean the dependency is pulled in from dropwizard-jetty ?\n[INFO] |  +- io.dropwizard:dropwizard-jersey:jar:1.0.0:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.23.1:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.23.1:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.7.6:compile\n[INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.7.6:compile\n[INFO] |  |  |  \\- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.7.6:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.23.1:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.3.6.v20151106:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-io:jar:9.3.6.v20151106:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.3.6.v20151106:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-xml:jar:9.3.6.v20151106:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-continuation:jar:9.3.6.v20151106:compile\nhttps://github.com/eclipse/jetty.project/blob/d737e1c638653988ce7d8e5bfb89859347e1c306/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n. Ugh it was a dependencyManagement in my root pom causing the confusion.\nClosing.\n. ",
    "eepstein": "I think the bug fix also has a minor bug in it.  In particular, \"case 4\" of the unit tests seems to be different that one would imagine with a pair of exclude and include filters.\nNormally with such a pair the logic is:\ninclude =  !isExcluded && isIncluded\nAnd that logic is sequential.  The default is a case where isExcluded == false by default and isIncluded == true by default.\nSo the exclusions are applied first and then anything that makes it past the exclusions and is in the explicit set of inclusions gets included.  But the logic in place now has case 4's includes overriding the excludes, which given that the default behavior is including-everything, is strange.  One has explicitly excluding something and then support explicitly overriding the exclusion.  That's double the effort when all that's needed is: don't put the thing in the exclusion list in the first place.  \nIn short, exclusions should be applied first, and the items that aren't excluded are now the set from which items may be explicitly included.  No explicit inclusion means: include everything not explicitly excluded (case 3).  Case 4, as coded, is inverted. \n. For #4 isn't the common approach: everything that is not in the excludes list and is in the includes list should be included?   The way it's written the includes list overrules the excludes list.  Is that correct / intended?\n. I'm looking at the test cases - which do correctly test for the documented logic - and the result is unexpected.  Basically if I have an includes list of {\"inc, \"both\"} I expect those items to show up in the output.  What's odd is that when I now add in a excludes list of {\"both\", \"exc\"}, first of all \"both\" stays in the result set and, even weirder, \"any\" suddenly shows up in the result set.  In other words, I've done a complicated configuration (4 settings) to get a simple result (1 exclusion, namely \"exc\").  \nThe logic as-is amounts to extra work.\nThe old code did have a bug in it.  The usual way one does this kind of exclusion/inclusion lists (Eclipse, Spring, et. al.) is:    isNotExclude && isIncluded,   which in this case looks like:\npublic MetricFilter getFilter() {\n    return new MetricFilter() {\n        @Override\n        public boolean matches(final String name, final Metric metric) {\n            boolean isNotExcluded = getExcludes().isEmpty() || !getExcludes().contains(name);\n            boolean isIncluded =  getIncludes().isEmpty() || getIncludes().contains(name);\n            // Match name that isNotExcluded && isIncluded\n            return isNotExcluded && isIncluded;\n        }\n    };\n}\n. I'm looking at the logic for the matches() method of the MetricFilter and see that OR logic is used for the case where both excludes and includes is set.  Shouldn't that be AND logic - which is more common:\nif (useIncl && useExcl) {\n                return getIncludes().contains(name) || !getExcludes().contains(name);\n            }\nbecomes:\nif (useIncl && useExcl) {\n                return getIncludes().contains(name) && !getExcludes().contains(name);\n            }\nThe above approach means the entire method simplifies down to:\nreturn !excludeMetricNamed(name) && includeMetricNamed(name);\nWhere those methods can be defined as:\n```\nprivate boolean excludeMetricNamed(String name) {\n    return !getExcludes().isEmpty() && getExcludes().contains(name);\n}\nprivate boolean includeMetricNamed(String name) {\n    return getIncludes().isEmpty() || getIncludes().contains(name);\n}\n```\nWhich is, I think, what the original (buggy) method implementation was going for.\nIn terms of filtering, this is more common and treats the filters as a sequence of excludes, then includes.  With the special default of no includes means include all.\nNormal operation: include all.  Add an exclude filter: exclude whatever's listed.  Add only an include filter: just include what's listed.   Add both: first exclude; then include what's left.\nThis common pattern makes more sense with Regexs.  But then, the whole filtering works better with those.\n. +1 a simple includesRegex that augments the existing includes: would be enough.\n. Hi Travis,\nWas looking at the latest request and I don't see the simpler change.  Can you point me to your branch?\nThanks.\n. OK.\nThe thing is, if you have a switch to go between regexes and ordinal values you end up with 5 parameters.  In other words, the overall parameter count goes up.  Is there benefit ?\n\nOn Feb 22, 2015, at 1:37 PM, Artem Prigoda notifications@github.com wrote:\nI'm more fond to the original implementation.\nI think a switch is a more simple and transparent solution for users. Having 4 parameters (includes, excludes, includesRegex, excludesRegex_) doesn't sound great for me. If you use regular expressions - you usually don't need ordinal includes and excludes. Also ability to use several regular expressions is a benefit over writing one big regex monster.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dropwizard/dropwizard/pull/884#issuecomment-75461686.\n. Ah.  No, I misunderstood.  I like what @ToadJam did better: treat the existing parameters as regex expressions.  That makes good sense.  Thanks for explaining it.\n. There is, however, one thing I'd still change.  This has:\n\nif (useIncl && useExcl) {\n                return stringMatchingStrategy.containsMatch(getIncludes(), name) ||\n                        !stringMatchingStrategy.containsMatch(getExcludes(), name);\n            }\nbut I think that should be:\nif (useIncl && useExcl) {\n                return stringMatchingStrategy.containsMatch(getIncludes(), name) &&\n                        !stringMatchingStrategy.containsMatch(getExcludes(), name);\n            }\nwhich if we generalize it to the case where the includes filter is empty, we no longer need to check the useIncl and useExcl variables at all.  Per #890 \n. Yes, that variant produces the same result.\n! excludes.contains(name)\nIs always true when excludes.isEmpty(), so that is the same with a simpler (read: better) implementation.\nIn terms of whether things are included first and then excluded or vice-versa, so long as the logical operator between the terms is && both terms will always be evaluated - both filters will be applied - and hence ordering is actually irrelevant.  For historical reasons I think of excludes coming first, but in fact && logic means there is no effective sequence.\n. I actually had coded it with regexes too - was looking at that.  Shall I do a pull request and you can see if there's something worth incorporating?\n. Done.  Thanks!\n. Thanks @arteam for rebasing.  (I only realized after I'd merged and committed that a rebase would have been better.)  And thanks too for your inclusive approach.  Makes it fun!\n. Yes, will do.\n. Updated.\n. Is there any interest in this?  I've put together an initial impl. and am open to contributing it as a bundle.\n. I got it most of the way done. This was for DW 0.8.x however. \nWith 0.9.2 the main need - transactions outside the persistence layer - was addressed. \nI can share what I have (if I can find it). \n\nOn Jun 15, 2016, at 11:44 AM, Carsten Klein notifications@github.com wrote:\n@eepstein any progress on the jpa bundle?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Will do. I'll see where I put it. Was on a different dev box at the time. \nOn Jun 15, 2016, at 2:10 PM, Carsten Klein notifications@github.com wrote:\n@eepstein how about making this a public project then \ud83d\udc4d\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi Carsten,\n\nI\u2019m really sorry to say I don\u2019t have access to the code anymore.  It was under contract at a company on their machines backed by their repo\u2026 they were OK with o/s contributions, but seems I never did that and since they\u2019re not a current client I don\u2019t have the code.  :-/\nEzra\n\nOn Jun 15, 2016, at 2:10 PM, Carsten Klein notifications@github.com wrote:\n@eepstein https://github.com/eepstein how about making this a public project then \ud83d\udc4d\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/dropwizard/dropwizard/issues/920#issuecomment-226321109, or mute the thread https://github.com/notifications/unsubscribe/ADQ5Q1ukqbcZOwS9sw6iRnKFAgbWbhE9ks5qMGo8gaJpZM4DqKZx.\n. \n",
    "flavor8": "Aha - yeah isA does the job.\n. ",
    "bilalaslam": ":+1: on this feature\n. ",
    "Athou": "Ok thanks, I wanted to avoid exposing this setting in my config.yml file as it's not really configurable for the app.\nI'll keep my workaround then.\n. You're right, probably not :)\n. I can reproduce this one. It's probably due to a jersey version mismatch between dropwizard and your explicit dependency on jersey-media-multipart.\nReplacing the jersey-media-multipart dependency in your pom with the new dropwizard-forms module and replacing environment.jersey().register(MultiPartFeature.class) with bootstrap.addBundle(new MultiPartBundle()); as described on https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/forms.rst should do the trick.\n. ",
    "punya": "@joschi sorry, I missed a couple of lines in the java examples, I'm creating an additional PR to cover them\n. @joschi the edits in this and my previous PR don't show up at http://dropwizard.io/manual/configuration.html . How do I make that happen?\n. @joschi does this PR need any further work?\n. ",
    "kmejka": "Ok, thanks for the quick response.\nI tried the solution you propose first, but the contents of the input stream were empty. My code:\nLOG.debug(\"Request \"+request.toString());\nfinal ByteSource byteSource = new ByteSource() {\n   @Override\n   public InputStream openStream() throws IOException {\n      return request.getInputStream();\n    }\n};\nLOG.debug(\"charset \"+request.getCharacterEncoding());\nfinal String contents = byteSource.asCharSource(Charset.forName(request.getCharacterEncoding())).read();\nLOG.debug(\"contents: \"+contents);\nThe contents is an empty string. Am I doing something wrong?\n. Unfortunately I cannot reset this inputStream. I get these returns for methods of the InputStream:\nrequest.getInputStream().available() -> 0\nrequest.getInputStream().markSupported() -> false\n. I did some more tests: I made the method accept only a single parameter - HttpServletRequest. In this situation I can read the message body from the InputStream - the stream is not at the end. If a deserialize the message either way - to a String parameter or to a POJO class representing the JSON - the InputStream is at the end. So... essentially either I can get the message only in one of the three ways at a time: from the HttpServletRequest#getInputStream, from the String input param or from a POJO. Is this determined by Jersey implementation or by dropwizard? Is there any way to do what I want, or....?\n. Ok that would be a solution to my problem. Thanks for you input :)\n. @carlo-rtr I think you can close this issue now.\n. @joschi I thought the issue #1060 was about that (a duplicate perhaps?), and it's closed. It is even mentioned there as a duplicate. Unless I understood the purpose of the task differently (it's got no description). In that case I''m wrong :).\nI just wanted to help out, I know that issue trackers tend to get messy with old tasks which don't need to -open at all.\n. Ok, well then you should disregard my comment :)\n. Great, thx for merging :)\n. @mcarrierastonish how do you dump the defaults in the config script?\n. @mcarrierastonish so you're essentially dumping just the configuration file that you've passed right? What about the jvm environment variables?\n. @patrox go ahead, I've got more than enough on my plate right now.\nWe can talk about it further next Tuesday when we meet :)\n. You're right, perhaps I should've written them myself, instead of using the code my IDE blurped out. I'll amend the commit.\n. ",
    "neg3ntropy": "I tried to write some tests (with limited time) but did not find a way to get the HttpClientMetricNameStrategy. I can take another stab at it but I need a suggestion on that.\n. @saadmufti I do not have the strength to do that (nor I believe it is valuable to add 20 lines of hard code to test a easy one)\n. Amended commit with tests (thanks @arteam ). Should be good to go.\n. ",
    "mfisher": "Hold on that - can't seem to find the code I was looking at previously...\n. ",
    "oillio": "The primary use case is when I need configuration data, but not environment data.  Config data is not available in Application#initialize.\nIf I was implementing the ConfiguredBundle/EnvironmentBundle setup described above, I would want to implement the basic Bundle as well to round the implementation out and match the Command implementation.  It would be useful to have a consistent interface across any of my dropwizard libraries.  It would be better to just always provide a bundle, instead of sometimes provide a bundle, sometimes provide some other object that must be run in initialize.\n. Yep, the goal is to run the Command under test without also running the ServerCommand.  I wanted a way to run a Command as close as possible to how it will be run in production.\nIt is common for me to have setup and configuration occurring in my Application initialize method which is required by my Commands.  It seems wasteful to need to duplicate this initialization, or do other backflips, so that I can create an Application class for command testing.\n. I ran into this problem as well and I think I have tracked down the issue.  I am by no means an expert in the internals of Jersey, so this may not be completely accurate.\nIt looks like jersey-media-json-jackson automatically registers org.glassfish.jersey.jackson.JacksonFeature (via JacksonAutoDiscoverable).\nIt will register its own FilteringJacksonJaxbJsonProvider which appears to override the dropwizard JacksonMessageBodyProvider.\nThe new provider doesn't get its object mapper set and uses a default one, ignoring the mapper in the Environment.\nFirst off, you may consider setting the org.glassfish.jersey.internal.InternalProperties.JSON_FEATURE property in Dropwizard.  This will ensure this (or any other) JSON feature doesn't stomp on the Dropwizard provider.\nYou may also want to do what the FilteringJacksonJaxbJsonProvider does and check the JSON_FEATURE property.  If it is set to some other value, do not register your own provider.  This would have made my life slightly easier.\nIf you want to support the option of entity filtering in Dropwizard, there doesn't look to be a clean fix.  We will need a provider that does both the JsonIgnore stuff currently in Dropwizard's custom provider and the functionality in FilteringJacksonJaxbJsonProvider.\nI wrote a workaround to make this work in my project.  Maybe it will be helpful to others.  It isn't pretty, if anyone has any ideas on a better way to do this, let me know.\nhttps://gist.github.com/oillio/1c1845059caf47527f94202bf14b2dca\nI'm happy to write up the JSON_FEATURE functionality described above into a PR, and I can work on a solution to support the entity filtering functionality in DW, if there is interest.  Supporting entity filtering will probably require taking a dependency on jersey-media-json-jackson\n. Jersey rejected my request to allow inheriting: https://github.com/jersey/jersey/pull/221\nLooking a little deeper, I am wondering why Dropwizard defines a JacksonJaxbJsonProvider at all?\nIt is currently being used to define the ObjectMapper to be used.  From what I understand, Jersey recommends this to be defined through an ObjectMapperProvider, such as in this example:  https://github.com/jersey/jersey/blob/2.23.1/examples/json-jackson/src/main/java/org/glassfish/jersey/examples/jackson/MyObjectMapperProvider.java\nThe JsonProvider is also adding support the @JsonIgnoreType annotation.  There may be another way to provide this as well.\nI would be happy to dig deeper into the possibility of replacing JacksonMessageBodyProvider altogether, if this would be of interest.\n. ",
    "amirhmd": "hi there Im new to open source and would love to contribute to DropWizard. Can anyone help me get started? Or is DropWizard for people who are more experienced in open source?. ",
    "aantoniadis": "any news on this issue?\n. @jplock I am currently working on the hooks. In the meantime I solved the reported problem by subclassing the default server factory like the following:\n``` java\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\npublic class MyServerFactory extends DefaultServerFactory {\nprivate Server server;\n\n@Override\nprotected Server buildServer(LifecycleEnvironment lifecycle, ThreadPool threadPool) {\n    if (this.server == null) {\n        this.server = super.buildServer(lifecycle, threadPool);\n    }\n    return this.server;\n}\npublic Server getServer() {\n    return this.server;\n}\n\n}\n```\nAnd accessing the server through getServer from the configuration in Application.run().\nObviously this solution is not clean and leaks too much. I will come back with a PR on the hooks\n. After some thinking on how should the hooks be implemented, I realized that they should be similar to lifecycle listeners. Actually, I found a response to my answer at StackOverflow (http://stackoverflow.com/questions/26054748/dropwizard-session-clustering).\nAlthough lifecycle listeners seem to solve this particular problem, I believe that there should be either a more explicit way to install hooks or a more flexible way to manipulate the objects created (a bit more dependency-injection friendly). I believe that the latter may be better since it provides more flexibility in case somebody wants to do some customizations (in my case the biggest problem was that ServerCommand was created by Application and I couldn't change it or subclass it). \nWhat are your thoughts? \n. ",
    "brackxm": "The goal is to setBaseResource on the jetty ServletContextHandler.\nThis was done in 0.6.x.\nThe normal implementation would be to add a method setBaseResource on ServletEnviroment calling the same method on its handler.\nThe work around would be to access handler via reflection.\n. in 0.6.2 this was done here\nhttps://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java#L370\n. Thanks for looking into this.\nYes it is still a problem.\nresource:\n```\npackage io.dropwizard.bug;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\n@Path(\"1\")\npublic class Service {\nprivate static final Response RESPONSE = Response.ok(\"message\").build();\n\n@PUT\npublic Response put() {\n    return RESPONSE;\n}\n\n}\n```\ncurl:\ncurl -XPUT localhost:8080/1 -d hello\ncurl -XPUT localhost:8080/1 -d hello\n. thanks\n. ",
    "charbonnier666": "sorry how can I use in project or in a single response ?. @arteam Thanks, but where I must put ? (I fork dropwizard-example) ...and I don't find JerseyClientConfiguration in my project... mm. Hi Simons, how do you register user class ? I have same problem. Resolved, I miss this one:\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));. @arteam about 40MB (byte array in blob), it's writing correct on db but after closing connection it seems to write some log about file... don't you think so?. @arteam Yes \ud83d\udc4d  If I disable hibernate trace it doesn't appears anymore . @arteam  Alright, if I have a compiled distribution folder (only html, js (client-side), css, etc.) I can put in resources and I'll have under some path ready on start ?. @nickbabcock in example.yml (and in my app) i have this:\nnot enough?\n```\nLogging settings.\nlogging:\n# The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.\n  level: INFO\n# Logger-specific levels.\n  loggers:\n# Sets the level for 'com.example.app' to DEBUG.\ncom.example.app: DEBUG\n\n# Redirects SQL logs to a separate file\norg.hibernate.SQL:\n  level: DEBUG\n\nLogback's Time Based Rolling Policy - archivedLogFilenamePattern: /tmp/application-%d{yyyy-MM-dd}.log.gz\nLogback's Size and Time Based Rolling Policy -  archivedLogFilenamePattern: /tmp/application-%d{yyyy-MM-dd}-%i.log.gz\nLogback's Fixed Window Rolling Policy -  archivedLogFilenamePattern: /tmp/application-%i.log.gz\nappenders:\n    - type: console\n    - type: file\n      threshold: INFO\n      logFormat: \"%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg %n\"\n      currentLogFilename: /tmp/application.log\n      archivedLogFilenamePattern: /tmp/application-%d{yyyy-MM-dd}-%i.log.gz\n      archivedFileCount: 7\n      timeZone: UTC\n      maxFileSize: 10MB\n``. @nickbabcock I confirm, without%d` works! now i'll try branch test. @nickbabcock yes, with your fix log is written!. @nickbabcock but for my project how can it works? even if I put 1.2.0-SNAPSHOT dropwizard version I haven't fix, right?. @arteam yesss !!! i'm stupid, i've got same problem some months ago but I forgot it!! many thanks @arteam  \ud83d\udc4d . hi @arteam , I don't want to say stupid things :) , but I believe in 1.1.0 doesn't work too (seem to remember having tried it). @nickbabcock thanks nick :) . @joschi  simply to complete the authentication options, to find the right library I had to spend a bit of time. A tip for those who will be in the same situation ;). ",
    "piersy": "Thanks works.\nCheers!\n. ",
    "shivangshah": "I just stumbled upon this issue. Any idea why the logFormat does not print line number? I described the problem in detail here: \nhttps://github.com/dropwizard/dropwizard/issues/975\n. So I made the changes you told me for 1) and 2). Seems like changing 2) actually broke the application altogether and now the server itself doesn't start. \nHere's the error\n```\nScanning for projects...\nUsing the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1\n\nBuilding app 1.0\n--- exec-maven-plugin:1.2.1:exec (default-cli) @ app ---\nmdm.yml has an error:\n  * Unrecognized field at: server.adminMinThreads\n    Did you mean?:\n      - minThreads\n      - maxThreads\n      - adminContextPath\n      - allowedMethods\n      - gid\n        [16 more]\n\nBUILD FAILURE\nTotal time: 2.212 s\nFinished at: 2015-03-29T02:20:00-08:00\nFinal Memory: 16M/309M\n\n```\nAnd here's the yml\nserver:\n    type: simple\n    maxThreads: 1024\n    minThreads: 8\n    maxQueuedRequests: 1024\n    adminMinThreads: 1\n    adminMaxThreads: 64\n    applicationContextPath: /mdm\n    adminContextPath: /admin\nI am going to do more digging on why this happens (maybe something lingering from 0.7 upgrade to 0.8)\n. So apparently the type: simple doesn't work when you want to use some specific types of properties. So getting rid of them finally got the server running but still can't get to context path. Here's the code sample:\nYML Snippet\nserver:\n    maxThreads: 1024\n    minThreads: 8\n    maxQueuedRequests: 1024\n    adminMinThreads: 1\n    adminMaxThreads: 64\n    applicationContextPath: /mdm\n    adminContextPath: /admin\n    applicationConnectors:\n        - type: http\n          port: 8080\n          bindHost: 0.0.0.0   # only bind to loopback\n          headerCacheSize: 512 bytes\n          outputBufferSize: 32KiB\n          maxRequestHeaderSize: 8KiB\n          maxResponseHeaderSize: 8KiB\n          inputBufferSize: 8KiB\n          idleTimeout: 30 seconds\n          minBufferPoolSize: 64 bytes\n          bufferPoolIncrement: 1KiB\n          maxBufferPoolSize: 64KiB\n          acceptorThreads: 1\n          selectorThreads: 2\n          acceptQueueSize: 1024\n          reuseAddress: true\n          soLingerTime: 345s\n          useServerHeader: false\n          useDateHeader: true\n          useForwardedHeaders: true\n        - type: https\n          port: 8443\n          keyStorePath: abc.jks\n          keyStorePassword: pqr\n          keyStoreType: JKS\n          validateCerts: false\n          validatePeers: false\n    adminConnectors:\n        - type: http\n          port: 8081\nServer Start:\n```\nimport com.bazaarvoice.dropwizard.assets.ConfiguredAssetsBundle;\nimport com.totvslabs.mdm.app.config.ServerConfiguration;\nimport io.dropwizard.Application;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\npublic class MdmApplication extends Application {\n    public static ServerConfiguration serverConfiguration;\n    @Override\n    public void initialize(Bootstrap bootstrap) {\n        bootstrap.addBundle(new ConfiguredAssetsBundle(\"/web-apps/swagger-ui/\", \"/swagger-ui/\", \"index.html\", \"swagger\"));\n    }\n@Override\npublic void run(ServerConfiguration serverConfiguration, Environment environment) throws Exception {\n    MdmApplication.serverConfiguration = serverConfiguration;\n    System.out.println(\"***************************\");\n    System.out.println(\"CONTEXT PATH: \" +environment.getApplicationContext().getContextPath());\n    System.out.println(\"***************************\");\n\n}\npublic static void main(String[] args) throws Exception {\n        new MdmApplication().run(args);\n    }\n}\n```\nHere's the output (emphasis on the context path):\n```\nScanning for projects...\nUsing the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1\n\nBuilding app 1.0\n--- exec-maven-plugin:1.2.1:exec (default-cli) @ app ---\n02:35:17,300 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]\n02:35:17,300 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]\n02:35:17,300 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]\n02:35:17,300 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Setting up default configuration.\n02:35:18,181 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@7c8326a4 - Propagating INFO level on Logger[ROOT] onto the JUL framework\n02:35:18,182 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@7c8326a4 - Propagating INFO level on Logger[com.totvslabs.mdm] onto the JUL framework\n02:35:18,182 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@7c8326a4 - Propagating WARN level on Logger[com.couchbase] onto the JUL framework\n02:35:18,182 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@7c8326a4 - Propagating WARN level on Logger[org.elasticsearch] onto the JUL framework\n02:35:18,182 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@7c8326a4 - Propagating WARN level on Logger[org.reflections] onto the JUL framework\n02:35:18,184 |-INFO in ch.qos.logback.classic.AsyncAppender[async-console-appender] - Attaching appender named [console-appender] to AsyncAppender.\n02:35:18,184 |-INFO in ch.qos.logback.classic.AsyncAppender[async-console-appender] - Setting discardingThreshold to 51\n02:35:18,191 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy - Will use gz compression\n02:35:18,192 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy - Will use the pattern ../logs/mdm-app-%d.log for the active file\n02:35:18,194 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern '../logs/mdm-app-%d.log.gz'.\n02:35:18,194 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight.\n02:35:18,196 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Sun Mar 29 02:35:18 PDT 2015\n02:35:18,198 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - File property must be set before any triggeringPolicy or rollingPolicy properties\n02:35:18,198 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - Visit http://logback.qos.ch/codes.html#rfa_file_after for more information\n02:35:18,198 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - Active log file name: ../logs/mdm-app.log\n02:35:18,198 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - File property is set to [../logs/mdm-app.log]\n02:35:18,199 |-INFO in ch.qos.logback.classic.AsyncAppender[async-file-appender] - Attaching appender named [file-appender] to AsyncAppender.\n02:35:18,199 |-INFO in ch.qos.logback.classic.AsyncAppender[async-file-appender] - Setting discardingThreshold to 51\nINFO  [2015-03-29 09:35:18,223] org.eclipse.jetty.util.log: Logging initialized @1098ms\nWARN  [2015-03-29 09:35:18,320] com.google.common.cache.CacheBuilder: ignoring weigher specified without maximumWeight\n\nCONTEXT PATH: /\n\nINFO  [2015-03-29 09:35:18,345] io.dropwizard.server.ServerFactory: Starting MdmApplication\nINFO  [2015-03-29 09:35:18,599] io.dropwizard.jetty.HttpsConnectorFactory: Supported protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]\nINFO  [2015-03-29 09:35:18,599] io.dropwizard.jetty.HttpsConnectorFactory: Supported cipher suites: [TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_DH_anon_WITH_AES_128_GCM_SHA256, TLS_DH_anon_WITH_AES_128_CBC_SHA256, TLS_ECDH_anon_WITH_AES_128_CBC_SHA, TLS_DH_anon_WITH_AES_128_CBC_SHA, TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_anon_WITH_RC4_128_SHA, SSL_DH_anon_WITH_RC4_128_MD5, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_DH_anon_WITH_DES_CBC_SHA, SSL_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA, SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA, SSL_RSA_EXPORT_WITH_RC4_40_MD5, SSL_DH_anon_EXPORT_WITH_RC4_40_MD5, TLS_RSA_WITH_NULL_SHA256, TLS_ECDHE_ECDSA_WITH_NULL_SHA, TLS_ECDHE_RSA_WITH_NULL_SHA, SSL_RSA_WITH_NULL_SHA, TLS_ECDH_ECDSA_WITH_NULL_SHA, TLS_ECDH_RSA_WITH_NULL_SHA, TLS_ECDH_anon_WITH_NULL_SHA, SSL_RSA_WITH_NULL_MD5, TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_3DES_EDE_CBC_MD5, TLS_KRB5_WITH_RC4_128_SHA, TLS_KRB5_WITH_RC4_128_MD5, TLS_KRB5_WITH_DES_CBC_SHA, TLS_KRB5_WITH_DES_CBC_MD5, TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA, TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5, TLS_KRB5_EXPORT_WITH_RC4_40_SHA, TLS_KRB5_EXPORT_WITH_RC4_40_MD5]\nINFO  [2015-03-29 09:35:18,624] org.eclipse.jetty.setuid.SetUIDListener: Opened application@6c008c24{HTTP/1.1}{0.0.0.0:8080}\nINFO  [2015-03-29 09:35:18,624] org.eclipse.jetty.setuid.SetUIDListener: Opened application@216e0771{SSL-HTTP/1.1}{0.0.0.0:8443}\nINFO  [2015-03-29 09:35:18,624] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@21079a12{HTTP/1.1}{0.0.0.0:8081}\nINFO  [2015-03-29 09:35:18,626] org.eclipse.jetty.server.Server: jetty-9.2.9.v20150224\nINFO  [2015-03-29 09:35:18,989] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nNONE\n\nINFO  [2015-03-29 09:35:18,994] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@bf75b5c{/mdm,null,AVAILABLE}\nINFO  [2015-03-29 09:35:18,996] io.dropwizard.setup.AdminEnvironment: tasks = \nPOST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)\nPOST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)\n\nWARN  [2015-03-29 09:35:18,996] io.dropwizard.setup.AdminEnvironment: \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!    THIS APPLICATION HAS NO HEALTHCHECKS. THIS MEANS YOU WILL NEVER KNOW      !\n!     IF IT DIES IN PRODUCTION, WHICH MEANS YOU WILL NEVER KNOW IF YOU'RE      !\n!    LETTING YOUR USERS DOWN. YOU SHOULD ADD A HEALTHCHECK FOR EACH OF YOUR    !\n!         APPLICATION'S DEPENDENCIES WHICH FULLY (BUT LIGHTLY) TESTS IT.       !\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nINFO  [2015-03-29 09:35:19,000] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@2753316c{/admin,null,AVAILABLE}\nINFO  [2015-03-29 09:35:19,006] org.eclipse.jetty.server.ServerConnector: Started application@6c008c24{HTTP/1.1}{0.0.0.0:8080}\nINFO  [2015-03-29 09:35:19,009] org.eclipse.jetty.server.ServerConnector: Started application@216e0771{SSL-HTTP/1.1}{0.0.0.0:8443}\nINFO  [2015-03-29 09:35:19,010] org.eclipse.jetty.server.ServerConnector: Started admin@21079a12{HTTP/1.1}{0.0.0.0:8081}\nINFO  [2015-03-29 09:35:19,010] org.eclipse.jetty.server.Server: Started @1886ms\n```\nHope this helps\n. @joschi I am not sure I understand. All the swagger integration docs with dropwizard per the following link (and many others) show how to set the basePath and they all mention the following http://stackoverflow.com/questions/23301054/how-to-use-swagger-with-dropwizard-0-7-0\nenvironment.jersey().register(new ApiListingResourceJSON());\n  environment.jersey().register(new ApiDeclarationProvider());\n  environment.jersey().register(new ResourceListingProvider());\n  ScannerFactory.setScanner(new DefaultJaxrsScanner());\n  ClassReaders.setReader(new DefaultJaxrsApiReader());\n  SwaggerConfig config = ConfigFactory.config();\n  config.setApiVersion(API_VERSION);\n  config.setBasePath(\"..\" + environment.getApplicationContext().getContextPath());\nI just need to get the applicationContextPath. And from the code above you can see that I do try to get it after Application#run() .. So where am I doing it wrong?\nAnd seems like it does pickup the type \"default\" if a type is not defined. So that's fine.\n. Actually on a second run, I found the answer: \n@Override\n    public void run(ServerConfiguration serverConfiguration, Environment environment) throws Exception {\nDefaultServerFactory factory = (DefaultServerFactory) serverConfiguration.getServerFactory();\nSystem.out.println(\"CONTEXT PATH: \"+factory.getApplicationContextPath());\n...\nThis gives me the applicationContextPath from the yml itself which is exactly what I am looking for. Thanks for the help!\n. @carlo-rtr logback seems to be working just fine because we have another stand alone project with logback.xml with the exact same logformat and it prints line numbers just fine. Matter of fact it even works with v0.7.1 of dropwizard. Did the logback version change with v0.8?\n. @carlo-rtr I am sorry .. I can replicate this problem with 0.7.1 as well on my local env but not in our production .. probably got to do something with mismatch of logback jars?  .. Also, I mentioned in the original question that doing the exact same pattern with logback-test.xml in the same project and running tests prints the line numbers just fine .. So I am literally in the dark as to where I should start my debugging with .. because with standalone logback it looks just fine but with dropwizard it doesn't .. Any other pointers that you can share in regards to this? I am pretty sure logback community would bring me back here to talk to you guys.\n. got it ... I will try it out ..\n. @carlo-rtr : So I dig deep inside the code and although I didn't get a chance to actually fork the project and give it a try to change the code myself, I think I might have found the problem. \nIn v0.8 AbstractAppenderFactory : https://github.com/dropwizard/dropwizard/blob/master/dropwizard-logging/src/main/java/io/dropwizard/logging/AbstractAppenderFactory.java#L112\nI have a feeling that the \"includeCallerData\" should be set to \"true\" before you add the appender. I was able to come to that conclusion of using the \"includeCallerData\" from here : http://stackoverflow.com/questions/13944641/logback-ayncappender-not-printing-file-and-line-number\nAnd it makes sense too. Because being async, if you don't have calller data, you won't get the line #\nLet me know what you think .. If I get time, I will go ahead and fork out the project and try this change myself. If you get a chance to test this change out, greatly appreciated !\n. @saadmufti Agreed @carlo-rtr Thank you! Can you let me know the Request # so I can subscribe to it .. possibly even know when it will be getting released ?\n. ",
    "smileprem": "I get the same exception while running with 0.8.0-SNAPSHOT version. Jersey version is still not upgraded?. Any idea when will this be upgraded?\n. Hi @joschi - thanks for the response. Could you please have a look at the below sample app?  \nhttps://github.com/prem82/async-logger-api  \nPlease check the POM xml. Without explicitly mentioning the \"jersey-container-servlet\" dependency, the async API does not work (dropwizard version 0.8.0-SNAPSHOT)  \nInput parameters to test:\nhttp://localhost:9090/logger/async  \nHeaders:\nUser-Agent: Fiddler\nHost: localhost:9090\nContent-Length: 74\nContent-Type: application/json  \nRequest Body:\n{ \"appID\" : \"smileprem\",  \"logType\" : \"WARN\", \"message\" : \"Test Message\" }  \nI get the below exception:\nCausing: javax.servlet.ServletException: java.lang.UnsupportedOperationException: Asynchronous processing not supported on Servlet 2.x container.  \nAm I missing something here?\n. Thanks guys. It works with 0.8.0-rc2 version. Any idea of 0.9.0 release date?.\n. Oops... that was a typo :)\nThanks guys for the help...\n. ",
    "zbiljic": "There seems to be a problem when packaging application from console with Maven.\nYou may want to switch to Dropwizard version 0.8.0-rc2.\n. ",
    "pims": "From experience, swapping the @Auth and the @Valid params worked for us.\njava\n    @POST\n    @Timed\n    @ExceptionMetered\n    public Object createSolution(@Auth Object userPlaceholder, @Valid TransportObject validatedObject) throws JsonProcessingException {\n        String response = \"Hello\";\n        return response;\n    }\n. @glennmcallister 100% agree. Just wanted to share our current workaround.\n. Awesome. Good job Ryan!\n. ",
    "X3Cutor": "Thanks for the viable workaround, I had a gut feeling there'd be some simple way of fixing this short-term.\n. Nice to see that the issue is being fixed, although I won't be upgrading to a version of dropwizard that incorporates the fix anytime soon so I'll have to make due with the workaround. I couldn't help but notice the following line though: \"Fixed security issue where info is leaked during validation of unauthenticated resources(#768)\", surely that should say \"authenticated resources\"? \n. ",
    "bandrzejczak": "I thought the problem was with the initialization of server, but it was the client that had an error in it. I've forgotten to upgrade dropwizard-testing. Sorry for all the fuzz.\n. ",
    "shruti-palshikar": "Any updates on this?\n. ",
    "wardr": "Better yet: Problem solved. The solution is to pass StandardCharsets.UTF_8 to the View constructor. \n. ",
    "chrishaum": "I'm actually still seeing this issue after upgrading from 0.7.x to 0.8.x.\nI'm using the new AuthFactory.binder(authFactory) registration, but my @Auth annotation is still causing errors similar to the one above.\nDoes anybody have any ideas for other ways to fix this?\n. ",
    "TheTweak": "+1, the final Client, constructed by JerseyClientBuilder, is mostly configured with default settings, rather than using settings provided in JerseyClientConfiguration, e.g. \"maxConnections\" and \"maxConnectionsPerRoute\", and the default Apache's PoolingHttpClientConnectionManager is used and not the InstrumentedHttpClientConnectionManager.\n. Good job, but how about client keep alive settings? ApacheConnector creates HttpClientBuilder with systemProperties set to false, so one can't use http.keepAlive system property to disable it for example. Probably setting timeToLive on connection manager could be a workaround if one want to completely disable persistent connections...\n. +1, I've created an issue in Jersey's JIRA about keepAlive a month ago https://java.net/jira/browse/JERSEY-2736\n. @arteam cool, are you going to propose it for official usage in Dropwizard, when it would be done? Btw there is another issue new ApacheConnector could fix: #863 \n. My question got answered on Tomcat mailing list and it don't relate to DBCP. \nThe thing is that dropwizard-db 0.6.2 is using Tomcat DBCP's GenericObjectPool, which have this closed connection check upon return to pool, while dropwizard-db 0.8.1 is using Tomcat JDBC ConnectionPool which is more straightforward and don't have such check.\nWhat was the reason of moving to Tomcat JDBC pool from DBCP?\n. @arteam may be you could add validator, validatorClassName properties from Tomcat JDBC pool properties to DataSourceFactory, then we could write our own validator instead of just using SQL validation queries.\n. I can create PR with corresponding changes if you will take a look at it\n. ",
    "dhs3000": "Thank you for the compilation output. I added the upper bound for the type parameter and the wildcard in the method so it compiles now :)\n. Let's say, there is a team-wide default set of bundles that is used for all webservices. They all use the same (superset) of configuration. Instead of adding all the bundles in every Application I'd like to add a single default bundle that adds all bundles I need.\n``` java\nclass DeploymentConfiguration extends Configuration {\n    boolean production = true;\n}\nclass App extends Application {\n    @Override\n    public void initialize(Bootstrap bootstrap) {\n        bootstrap.addBundle(new DefaultBundle());\n    }\n@Override\npublic void run(DeploymentConfiguration configuration, Environment environment) throws Exception {\n    // ..\n}\n\n}\nclass DefaultBundle implements ConfiguredBundle {\n    @Override\n    public void run(DeploymentConfiguration configuration, Environment environment) throws Exception {\n    }\n@Override\npublic void initialize(Bootstrap<? extends DeploymentConfiguration> bootstrap) {\n    bootstrap.addBundle(new BundleA());\n    bootstrap.addBundle(new BundleB());\n}\n\n}\nclass BundleA implements ConfiguredBundle {\n    @Override\n    public void run(DeploymentConfiguration configuration, Environment environment) throws Exception {\n        environment.servlets().addServlet(\n                \"someservlet\",\n                new SomeServlet(configuration.production)); // <-- using configuration\n    }\n@Override\npublic void initialize(Bootstrap<? extends DeploymentConfiguration> bootstrap) {\n}\n\n}\n```\nWith Bootstrap<?> in the class DefaultBundle I can't add another ConfiguredBundle<DeploymentConfiguration>, that produces a compile error. \n. Thanks, I created https://github.com/dropwizard/dropwizard/pull/984\n. ",
    "rjnichols": "Yes, sorry this can be closed.\n. ",
    "jweissrfid": "I just created the PR so you can look over the code. As I put in the PR notes - if there is interest and I need to move things around and get this code over at the Modules, just let me know...\n. @bjoernw, I've added support for multiple scheduler instances. I'm in a hotel room trying to figure out why the build (and tests) pass cleanly on my Mac but are failing in the Travis CI server. Would be interested in your feedback if the new commits, code-wise, would meet your suggested requirements.\n. Travis Ci is now happy. Balls is in your court - if there is something else for me to help out with / offer, please let me know. \n. @radius314 - my contribution here is open for community review, and if the community wants to adopt it -- awesome. If not, oh well. I don't want to misrepresent my ability to contribute long-term on this project; I don't have a need to run multiple DW instances on a single box, and I don't have the time to put more features into my submission right now. \nI'm sure someone could fork this code and make it multi-instance friendly if that was truly a requirement that prevented the adoption of this PR.\n. ",
    "bjoernw": "I worked on something similar and ended up integrating spring and quartz and let dropwizard manage the spring context that contained the schedulers. One of my requirements was to support multiple scheduler instances (for heavy vs. light jobs). Have you considered letting one bundle manage multiple scheduler instances?\n. :+1:\n. @radius314 what are your concerns when it comes to multiple DW instances?\n. ",
    "evanova": "Thanks for fixing it!\n. ",
    "arungupta2008": "i have dropwizard version 0.7.0-1 can we fix this for this version ? Please \n. ",
    "radius314": ":+1: \n. What happens if you have multiple DW instances?\n. What happens if you specify the admin port also from the command line?\n. ",
    "meshuga": "Branch https://github.com/meshuga/dropwizard/commits/issue-804-failing-test contains failing test. Sorry for not using the base class for the test case, but I couldn't find any other way ;)\n. ",
    "orende": "I've been looking at this today and there are a few problems in the test: firstly, a JsonProcessingExceptionMapper should be added as a resource. This mapper then correctly identifies the error as a HTTP 400 error, but this is rethrown as a HTTP 500 error because the OptionalMessageBodyWriter is not found when attempting to write the 400 response using the text/plain media type.\n. ",
    "carminexx": "Sorry, I forgot to reply; thanks to @arteam I solved the problem. It was due to missing reference in Maven-shade transformers. I added the ServicesResourcesTransformer and now the program runs without problems.\n. As of today, in 0.8.x is there the possibility to have different appenders for loggers, like your example?\nOr everything should be done through the logback xml configuration?\n. Any resource that consumes a java POJO as request body:\n@POST\npublic Response myResource(MyPOJO myPojo)\nAnd, assuming your POJO is like:\nclass MyPOJO {\n      private String one;\n      private String two;\n}\nPass it JSON-serialized to the resource, with at least one field with null value:\n{\n     \"one\" :  \"something\",\n     \"two\" : null,\n}\n. Sorry for late reply.\nAs @CrossfireCurt noted, the problem was due to another Jackson dependency, that was the 2.6 version instead of the 2.5 required by drop wizard. Oddly, in 0.8.3 and lower everything worked even if Jackson version was 2.6\n. ",
    "mhaligowski": "Got the same issue with BasicAuthFactory, but instead of throwing an NPE, the request is null and it gets ignored, resulting in all the requests in the test being rejected with 401.\nSeems related to this one: https://github.com/dropwizard/dropwizard/issues/651.\n. ",
    "Lugribossk": "Aha, thanks! Would it be an idea to extend ResourceTestRule with a way to specify the test container factory? That way when a test gets complex enough that the in-memory container is not enough, it can be easily migrated to use another container, without having to be rewritten to be a JerseyTest subclass?\n. Hmm, it looks like it's a little more complicated than that to get the GrizzlyWebTestContainer working. It expects a ServletDeploymentContext with ServletProperties.JAXRS_APPLICATION_CLASS set to the class name of the ResourceConfig to use, which it then creates a new instance of. But the ResourceConfig that ResourceTestRule creates is modified to add the resources the test needs, but that change is then not reflected in the instance created elsewhere.\nAny ideas for how to solve that? Otherwise I think I will change it to just default to InMemoryTestContainer, and add a note in the documentation that more advanced tests will need to be JerseyTest subclasses.\n. ",
    "martinborgman": "A servlet engine typically defines a secure endpoint and a non secure endpoint. If you look at tomcat for example it has a non secure port, by default on port 8080, and a secure port, by default on port 8443, defined in it's configuration for this.\nYou can mark a servlet as \"confidential\". This means that if you want to access that particular servlet you'll need to access it using the secure endpoint. The port using TLS.\nIf you access the servlet marked \"confidential\" using the non secure port, the servlet engine will redirect you to the secure endpoint.\nWhen using a reverse proxy server, you'll need to tell the servlet container whether the connection being used is secure, and if there is secure and non secure content, how to redirect to the proper endpont.\nI don't know what you've fixed inn the latest version of Dropwizard, but I will try to take a look.\n. ",
    "Trundle": "LGTM\n. LGTM\n. Does the @SuppressWarnings here have any effect? Can't really see what could cause a unchecked warning right now.\n. I think there should be a check whether it's really an Optional (e.g. if (!Optional.class.equals(rawType)) { return null; }). Right now, a converter is returned for any generic that has a type parameter for which some converter exists, resulting in a ClassCastException when being used (lines 37 and 54).\n. Can be replaced by a static import of javax.ws.rs.core.MediaType.APPLICATION_JSON.\n. Unused import (as well as java.net.URI and java.util.zip.Deflater).\n. Shouldn't it rather throw an UnsupportedOperationException? Alternatively, it could return new ByteArrayInputStream(buffer).\n. ",
    "artemabalmasov": "Hi Joschi\nIssue is that i got exception on startup. \nResource :\n``` java\nimport com.google.common.base.Strings;\nimport java.util.Collection;\nimport java.util.Set;\nimport javax.inject.Inject;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.CookieParam;\nimport javax.ws.rs.DefaultValue;\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n...\n@Path(\"Path\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic class EmailChangeResource {\n...\n    @Inject\n    private EmailChangeRequestBuilder emailChangeRequestValidator;\n@POST\n@Path(Routes.EMAIL_CHANGE_AJAX)\npublic Response changeEmailAjax(\n        @CookieParam(Cookie.NAME) String cookie,\n        @FormParam(\"newEmail\") @DefaultValue(value = \"\") String newEmail,\n        @FormParam(\"source\") @DefaultValue(value = \"\") String source,\n        @Context HttpServletRequest httpRequest) {\n\n...\n}\n}\n```\nTest:\n``` java\nimport com.sun.jersey.core.util.MultivaluedMapImpl;\nimport io.dropwizard.testing.junit.ResourceTestRule;\nimport org.glassfish.jersey.client.ClientResponse;\nimport org.junit.*;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.Invocation;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.MultivaluedMap;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n@RunWith(MockitoJUnitRunner.class)\npublic class EmailResourceTest{\n   @ClassRule\n    public static ResourceTestRule resources  = ResourceTestRule.builder()\n            .addResource(new EmailChangeResource())\n            .build();\n    @Test\n    public void testPositive() throws Exception {\n        ClientResponse response = queryResource(\"/email/change\", validCookie(), validMpsCookie(), VALID_NEW_EMAIL, VALID_SOURCE);\n        Assert.assertEquals(200, response.getStatus());\n        ...\n    }\n}\n```\nMay It be linked with JNI ?\nThank you!\n. ",
    "Larry0ua": "Guys, as the topicstarter mentioned, the root cause of the problem is the 'Throw from Within Finally' antipattern used in ResourceTestRule.apply() - if an exception happens in the teardown it'll overwrite the original exception (which really should be debugged, not a teardown one). The cause of the problem of almost everyone is the mess in the classpath, but still we should see the problem, not a strange NPE from the junit/dropwizard implementation.\nSo my suggestion is to add a proper logging to the ResourceTestRule.apply (wrap finally block to one more try-catch, log the new exception but do not rethrow) and fix the problem in JerseyTest.tearDown() - handle the case when setTestContainer method returns null if there was no test container before (as setUp did not complete).\nOnce again - the real problem is that developers receive a strange NPE and not the exception they should fix, and this is the problem of the dropwizard code.\n. ",
    "drsnyder": "\nI tried to debug and track down why setTestContainer was returning NULL but haven't had much progress. Please assist. I will also raise a issue with @oillio who write the jersey2-guice adaptation.\n\nIn my case, in this block in JerseyTest, old is null so the call to setTestContainer(null).stop(); ends up calling stop() on null.\nIs this a dropwizard issue or a jersey one?\n. @yunspace it looks like this issue is resolved in the latest version of jersey with this code block that first checks to see if the old container is null.\nI tried to use a newer version of JerseyTest which seems to have resolved the issue.\ncompile(\"io.dropwizard:dropwizard-testing:0.8.0\") {\n      exclude group: \"org.glassfish.jersey.test-framework.providers\"\n    }\n    compile \"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.17\"\n. ",
    "sudheshrajan": "Surprisingly on changing my dropwizard-testing dependency 1.1.0, I receive the same error:\njava.lang.NullPointerException\nat io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:201)\nat org.junit.rules.RunRules.evaluate(RunRules.java:20)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\nat org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)\nat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\nat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\nat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)\nat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)\nat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\nI have attached a cut down version of my code below: \npublic class ProfileResourceTest extends BaseTest {\nprivate static ProfileService profileService = mock(ProfileService.class);\nprivate static AuthenticatedSession authenticatedSession = mockAuthenticatedSession();\nprivate static UserProfile userProfileFixture = mockUserProfileFixture();\n@Context\nprivate ContainerRequest request;\n@ClassRule\npublic static final ResourceTestRule resources = ResourceTestRule.builder()\n        .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n        .addResource(ProfileResource.class)\n        .build();\n@Test\n\npublic void test_resource_getProfile_success() throws ProfileNotFoundException {\n    // setup\n    doReturn(userProfileFixture).when(profileService).getUserProfileByUserId(any());\n    // execute\n    UserProfile userProfile = resources.getJerseyTest().target(\"/v1/user-profile/\")\n            .request()\n            .accept(MediaType.APPLICATION_JSON_TYPE)\n            .get(UserProfile.class);\n// verify\nverify(profileService).getUserProfileByUserId(any());\n\n// assertNotNull(userProfile);\n\n}\n. ",
    "jshort": "Code in question:\npublic static Client buildClient(DropwizardAppRule<ConerDropwizardConfiguration> appRule) {\n    return new JerseyClientBuilder(appRule.getEnvironment())\n            .using(appRule.getConfiguration().getJerseyClientConfiguration())\n            .build(\"test-client\");\n}\n. Debug info:\nSo I noticed that we are using the same DropwizardAppRule object to build a Client for each unit test in the unit test class.  The first test passes but the second test fails since the appRule object's enivironment.metricRegistry.metrics hash already has the 4 metrics that the InstrumentedHttpClientConnectionManager constructor adds to the metricRegistry.\nI suppose prior to recent merges that these metrics were not cached.\n. Here is a workaround to this as this bug is fixed:\nhttps://github.com/jshort/coner/commit/4f6a622543548211dc2569f62b00dbc7c04e2f64\n. Still exists with: 16096 Jan 18 10:05 dropwizard-client-0.8.0-rc2-20150117.172343-98.jar\nYour tests in the gist above seem like they should fail based on the behavior I'm seeing.  I'll try to determine the delta between my test code and yours.\nSo I have recently refactored our tests to build a single client per class as opposed to a client per test in each class.  Even doing so, I get the IAE on whatever is the 2nd class that junit runs.\n. @joschi in your test, change the following and make the app rule static and your test will fail.\n@Rule => @ClassRule\n. I see, but after a refactor where I only build the client once per test class, then the 2nd integration test class that runs will fail with the same error so there is some sort of state caching across test classes as well.\nEDIT: Actually even running a single integration test class in intellij, it fails the same way without stripping the Metrics that have the client name in them before instantiating the client.  This means that since I initially reported the bug, that something has changed such that just creating the DropwizardAppRule is passing the MetricsRegistry through the InstrumentedHttpClientConnectionManager constructor.  Though even as I have typed the last sentence, that doesn't make sense since the 'test-client' name isn't even brought into the picture until the first time I build a Client.\njava.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.test-client.available-connections already exists\n    at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)\n    at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.<init>(InstrumentedHttpClientConnectionManager.java:57)\n    at io.dropwizard.client.ApacheClientBuilderBase.createConnectionManager(ApacheClientBuilderBase.java:192)\n    at io.dropwizard.client.JerseyClientBuilder.buildConfig(JerseyClientBuilder.java:185)\n    at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:166)\n    at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:152)\n    at org.coner.it.IntegrationTestUtils.buildClient(IntegrationTestUtils.java:38)\n    at org.coner.it.CreateEventIntegrationTest.<init>(CreateEventIntegrationTest.java:33)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:408)\n    at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)\n    at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\n. So here is the the top of my test class\n```\npublic class CreateRegistrationIntegrationTest {\n@ClassRule\npublic static final DropwizardAppRule<ConerDropwizardConfiguration> RULE = IntegrationTestUtils.buildAppRule();\n\nprivate final Client client = IntegrationTestUtils.buildClient(RULE);\n\n...\n```\nand the exception occurs on that last line above.  I still don't understand how it is complaining about the duplicate metric since until that buildClient(RULE) method is called, the notion of 'test-client' doesn't exist.\nI changed it to:\n```\n    @ClassRule\n    public static final DropwizardAppRule RULE = IntegrationTestUtils.buildAppRule();\nprivate static Client client;\n\n@BeforeClass\npublic static void setupClass() {\n    client = IntegrationTestUtils.buildClient(RULE);\n}\n\n```\nand it works without my metric stripping code.  I vaguely remember that junit instantiates a new instance of the class for each test so I wonder if it had already run the buildClient(RULE) method for another test (though it had not 'run' yet).\n. So I worked around it:\nhttps://github.com/jshort/coner/commit/547320a9a4ef2ce40ad0a4952f6f8f103060d680#diff-d7fea026ac41251215bf751076924074\nNote that by setting the db user/pass/url/driver directly in the Hibernate Configuration rather than using the dropwizard DataSourceFactory and a ConnectionProvider, everything works as it used to.\nThe code is, admittedly, much simpler/cleaner, but I still wonder if something changes in the DataSourceFactory since 0.8.0 such that this way of configuring hibernate to connect to hsqldb is no longer supported.  Or it might be Hibernate?. By the way, the DAOTestRule in master works in this case and is MUCH cleaner (have to add a few more invocations in the builder to use hsqldb vs h2).\nWhen will this class make it into a release?. [INFO] +- io.dropwizard:dropwizard-core:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard:dropwizard-util:jar:1.0.5:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.8:compile\nWorks for me (just migrated from 0.8.0 => 1.0.5\nCan you show us the output from mvn dependency:tree. Interesting: I injected my applications Environment into my jersey resource and then used that object mapper to serialize the object I pass to Response.ok().entity(...) and it serializes fine!  So something in the DW framework that takes the jax rs Response object and serializes it to clients is not using the Environment.getObjectMapper() it seems.. This is related to #1341 and @RobeEW's workaround fixed this problem.  Seems that some Jackson provider is getting found first?. ",
    "gautampriya": "This issue still exists. I am struggling with it right now. While it is true that one can provide unique names, however, if I want to use a fresh client each time I need a new one in the same class/test class/(in general in the same context), then this issue is limiting my approaches. What are the reasons that the behaviour was changed in 0.8.0 in a way that introduces this bug/limitation. Can the metrics registry be cleared when a client is closed? Is there a plan to fix this issue? What is the work around for now short of supplying unique names.\nI am using dropwizard-client 0.8.2\njava.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.cs.available-connections already exists\n    at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)\n    at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.(InstrumentedHttpClientConnectionManager.java:63)\n    at io.dropwizard.client.HttpClientBuilder.createConnectionManager(HttpClientBuilder.java:287)\n    at io.dropwizard.client.HttpClientBuilder.buildWithDefaultRequestConfiguration(HttpClientBuilder.java:182)\n    at io.dropwizard.client.JerseyClientBuilder.buildConfig(JerseyClientBuilder.java:347)\n    at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:315)\n    at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:309)\n. ",
    "scottaj": "I recently ran into a situation where having access to the request body would have been useful. I wanted to make a data loading task task that could take a large blob of JSON data. I was surprised that Tasks could not access the POST request body.\nWould you be opposed to a PR that provided access to the request body to the Task object? I think there are probably a lot of situations where it could be useful. The URL parameters would could still be used as the main configuration method that makes sense to me, but it would make providing larger amounts of data to a task easier.\n. I think I branched off of a failing build. I can rebase once I see master is green.\n. I rebased off the green master build, so mine should pass now.\nI'm happy to change the implementation, just let me know what approach you think makes the most sense and I'll go down that road.\n. hey @arteam did you have a chance to look at this and have any thoughts on what you'd like a backwards compatible approach to look like? \nI think it would either need to be a property that is set and accessed and not passed into execute, or some type of custom subclass.\nOf the two, the setting a property approach seems cleaner to me.\n. This has now been reimplemented as a backwards compatible change. \nI'm not sure how coverage dropped because I'm pretty sure I covered every line I added, unless it counts the stuff I added to the example app.\n. I can overload the existing create method with all the new variations. \n1661 doesn't really solve this issue. It makes it easier to roll your own proxy factory, because at least you don't have to recreate the aspect, but you still have to roll your own because you can't configure UnitOfWorkAwareProxyFactory. That looks like a much better solution. I can rework this PR to incorporate those changes.\nWe've found UnitOfWorkAwareProxyFactory very useful, we have a number of tasks and some middleware that need database access and that makes it very easy to do that.. I made the changes for the implementation suggested by @arteam and added a quick test.. Bummer, I'm not really surprised those bean naming assumptions are baked in there though.\nWe added the following test (using the reflections library) to our app to stop ourselves from footgunning this. It is pretty basic and doesn't check for the argument count portion of bean naming, but it might be useful for others in the future:\n```java\npackage campspot.resources.v2;\nimport campspot.CampspotTest;\nimport com.google.common.collect.ImmutableSet;\nimport org.junit.Test;\nimport org.reflections.Reflections;\nimport org.reflections.scanners.MethodAnnotationsScanner;\nimport org.reflections.util.ClasspathHelper;\nimport org.reflections.util.ConfigurationBuilder;\nimport org.reflections.util.FilterBuilder;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport java.lang.reflect.Method;\nimport static org.assertj.core.api.Assertions.assertThat;\npublic class ResourceBeanValidationBugTest extends CampspotTest {\n  @Test\n  public void resourceMethodsAreNotBeanMethods() {\n    ConfigurationBuilder configuration = new ConfigurationBuilder()\n      .setUrls(ClasspathHelper.forPackage(\"campspot.resources.v2\"))\n      .setScanners(new MethodAnnotationsScanner())\n      .filterInputsBy(new FilterBuilder().includePackage(\"campspot.resources.v2\"));\nReflections reflections = new Reflections(configuration);\n\nImmutableSet<Method> resourceMethods = ImmutableSet.<Method>builder()\n  .addAll(reflections.getMethodsAnnotatedWith(GET.class))\n  .addAll(reflections.getMethodsAnnotatedWith(POST.class))\n  .addAll(reflections.getMethodsAnnotatedWith(PUT.class))\n  .addAll(reflections.getMethodsAnnotatedWith(DELETE.class))\n  .build();\n\nassertThat(resourceMethods.size()).as(\"No resource methods found, are you sure you entered the right package?\").isGreaterThan(0);\n\nfor (Method method : resourceMethods) {\n  String errorMessage = String.format(\"Method %s in class %s should not start with 'get' or 'set'. Use 'fetch' and 'apply' instead. See https://github.com/dropwizard/dropwizard/issues/2008 for details.\", method.getName(), method.getDeclaringClass().getName());\n  boolean hasBeanName = method.getName().startsWith(\"get\") || method.getName().startsWith(\"set\");\n\n  assertThat(hasBeanName).as(errorMessage).isFalse();\n}\n\n}\n}\n``. @arteam Did you have any more thoughts on this change? We are trying to use dropwizard and hibernate to connect to a DB cluster that has separate connections for the read master and write replicas. The fact that a DAO instance is statically linked to a single connection despite the fact that you can change the connection in the@UnitOfWork` annotation makes that challenging.. As far as the OT question goes: \nWe ran into this. We've started using typed HQL queries instead of the new criteria API wherever possible and have had really good results from that.. Sorry, I missed the email update of this PR!\n\n\nWe have a fork of some similar but more hacked together code running in production. We have a chore to update that app to use this version, but haven\u2019t had the resources to do that. I do have a test app very bare-bones drop wizard hibernate app (I could look into publishing it) that demonstrates the feature working. I am pretty confident in the code because the approach is pretty simple. It is just some extra logic around handling multiple database connections (which drop wizard already supports) and some changes to DAOs to not tightly couple them to a single database connection.\nI\u2019m happy to take any steps you think are necessary to demonstrate it is working properly\n\n\nCircular dependency. Dropwizard-hibernate depends on dropwizard-testing, and was able to get away with that by having drop wizard-testing only depend on hibernate-core and not the drop wizard hibernate package. I replaced some publicly exposed hibernate-core classes with drop wizard classes that wrap them, so to keep the hibernate tests helper classes around would have required making dropwizard-testing depend on dropwizard-hibernate. So I moved those test helper classes to their own package to resolve that. Hopefully that explanation was not too confusing\n\n\nWe\u2019ve looked a lot into alternatives, none are available that really work for us. There are some drivers for certain DBs that claim to do it, but we didn\u2019t really have any luck with that, and it is not a general purpose solution. From the dropwizard side, I don\u2019t think there is a way to do this with the current dropwizard-hibernate implementation. You can have multiple connections, but the way DAO classes are designed in hibernate right now means they are fundamentally tightly coupled to one particular database connection, regardless of what connection you set up in your @UnitOfWork annotation. This means that to have read and write connections right now, you would have to have separate DAOs and duplicate code across them for any read actions. From a practical perspective (at least in our case) this would lead to an unacceptable amount of duplicated code in our codebase, because many of our write operations also require reads.. It seems like if you are explicitly extending this class, you would always want to use the post body form, otherwise you would just extend Task. \n\n\nFurthermore, that would complicate the TaskServlet implementation because it would have to call both execute methods, which in turn could lead to confusing implementations where a user implements both execute methods and runs conflicting code in them.\n. Yes, that was incorrect. Fixed and also made it an overload so we could keep the no args version.. ",
    "clamothe": "I wasn't able to successfully configure my own Dropwizard 0.8.0-rc1 app with https. I tried also using the keystore from the example. Eventually I built dropwizard-example and HTTPS would still not work in this application. I had the same issue chook experienced.\nI read that perhaps I needed to install the Java Cryptography Extension, however that did not have any effect.\n. LocalDate is a time-zone-less date.  The DateTimeZone parameter of that constructor has no effect unless the Object represents a date with a time. In that case, the date time is forced to the specified timezone before it is truncated to it's date.\nIn calling the constructor without a specified DateTimeFormatter, it is consistent with DateTimeParam.\n. ",
    "ddossot": ":tired_face: Sorry I forgot to specify the version :tired_face: I'm using 0.8.0-rc1.\nAnd yes, I will add the extra information you asked to this issue.\n. I was using the wrong entity with my JAX-RS resource...\n\n... sorry.\n. ",
    "phxql": "The order in which jersey emits the events is:\nIn case of exception:\n- MATCHING_START\n- REQUEST_MATCHED\n- REQUEST_FILTERED\n- RESOURCE_METHOD_START\n- RESOURCE_METHOD_FINISHED\n- ON_EXCEPTION\n- EXCEPTION_MAPPER_FOUND\n- EXCEPTION_MAPPING_FINISHED\n- RESP_FILTERS_START\n- RESP_FILTERS_FINISHED\n- FINISHED\nIn case of no exception:\n- MATCHING_START\n- REQUEST_MATCHED\n- REQUEST_FILTERED\n- RESOURCE_METHOD_START\n- RESOURCE_METHOD_FINISHED\n- RESP_FILTERS_START\n- RESP_FILTERS_FINISHED\n- FINISHED\nMy proprosed fix is to replace RESOURCE_METHOD_FINISHED with RESP_FILTERS_START. With this fix the transaction is rolled back in case of an exception. If no exception happens, the transaction is committed.\n. ",
    "lhcjackson-toast": "That sounds good. \nFYI, I patched UnitOfWorkApplicationListener in my project, and I am committing on \"FINISHED\" event. They passed my integration tests and are working well so far. Here is a snippet of the code,.\njava\n            else if (event.getType() == RequestEvent.Type.FINISHED) {\n                if (this.session != null && event.getException() == null) {\n                    try {\n                        commitTransaction();\n                    } catch (Exception e) {\n                        rollbackTransaction();\n                        this.<RuntimeException>rethrow(e);\n                    }\n                    finally {\n                        closeSessions();\n                    }\n                }\n            }\n. ",
    "gordysc": "Wow, I feel dumb.  Thanks!!\n. ",
    "patrick-m-m": "A more proficient Java colleague of mine solved this with a standard servlet approach that works like this:\n``` Java\nServletContextListener scl = new ServletContextListener() {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        // CORS filter:\n        Map corsInitParams = ImmutableMap.of(\n                CrossOriginFilter.ALLOWED_ORIGINS_PARAM, getCORSOrigins(config.getAllowedDomains()),\n                CrossOriginFilter.ALLOWED_METHODS_PARAM, \"GET,POST\",\n                CrossOriginFilter.ALLOW_CREDENTIALS_PARAM, \"true\",\n                CrossOriginFilter.ALLOWED_HEADERS_PARAM, \"X-Requested-With,Content-Type,Accept,Origin\"\n        );\n    FilterRegistration.Dynamic corsFilter = environment.servlets().addFilter(\"crossOriginFilter\", CrossOriginFilter.class);\n    corsFilter.setInitParameters(corsInitParams);\n    corsFilter.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/services/*\");\n\n    // JSONP filter:\n    Map<String,String> jsonpInitParams = ImmutableMap.of(\n            \"jsonp\", \"callback\",\n            \"json-mime-types\", MediaType.APPLICATION_JSON,\n            \"allowed-methods\", \"GET\"\n    );\n\n    FilterRegistration.Dynamic jsonpFilter = environment.servlets().addFilter(\"jsonpFilter\", RmnJsonpFilter.class);\n    jsonpFilter.setInitParameters(jsonpInitParams);\n    jsonpFilter.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/services/*\");\n}\n\n@Override\npublic void contextDestroyed(ServletContextEvent sce) {\n}\n\n};\nenvironment.servlets().addServletListeners(scl);\n```\nThe contextInitialized handler does exactly what we need it to do: add the JSONP filter after the AbstractServletFactory has finished initializing, giving us the needed filter order (JSONP filter at the end of the list).\nI would like to leave this open for your consideration. I feel a dropwizard core hook would be a more natural and intuitive way to accomplish this control.\nThanks for your hard work on this project; verily, it is awesome.\n. ",
    "natnan": "Yes, there should be.\nBut in case you need a way to accomplish that; this works for me:\n``` java\n    SslConfigurator sslConfig = SslConfigurator.newInstance();\n    SSLContext sslContext = sslConfig.createSSLContext();\n    SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(sslContext, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\nRegistry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create().register(\"https\", sslConnectionSocketFactory).build();\n\nClient client = new JerseyClientBuilder(environment).using(configuration.getJerseyClient())\n    .using(registry)\n    .build(\"jersey\");\n\n``\n.((ServletContainer) environment.getJerseyServletContainer()).getApplicationHandler().getServiceLocator()is null inApplication.run()` as jersey itself has not been initialized yet,\nI guess it'd be best that I create my own DI container using HK2 and link(bridge?) it to the jersey's container. But given the documentation of HK2 and infrequent usage of it, it's not easy to find out whether it's possible or not and how..\n. By DI container, I actually meant the ServiceLocator that I could create in Application.run(), not ServletContainer. I couldn't find a way to bridge one ServiceLocator to another though..\nGuice bridge is useful if I decide to go back to Guice, but is not the issue at hand. Thanks.\n. Looks like I have forgotten to close this issue. If you check my other issue #1026, I have found a solution to that. But yeah, HK2 is quite difficult to work with given the lack of documentation.\nSo, either you create your own service locator instead of registering binders to Jersey, and only register your ServiceLocator\n```\n// create your binders here\n// random UUID is added for random locator name generation so DropwizardAppRules wouldn't fail\nserviceLocator = ServiceLocatorUtilities.bind(UUID.randomUUID().toString(), binders.toArray(new Binder[binders.size()]));\n    environment.getApplicationContext().getAttributes().setAttribute(ServletProperties.SERVICE_LOCATOR, serviceLocator);\n// create your healtchecks here.\n```\nor you \"bridge\" your service locator: https://github.com/natnan/dropwizard-executor-test/blob/master/src/main/java/com/natnan/dropwizard/executor/ExecutorApplicationBridge.java\n. I'm not 100% sure about this but I think you cannot access the objects that are registered to Jersey until after run() is finalized because Jersey is not initialized yet. \nI think you might need to customize JooqBundle a little so it has a getConnectionProvider() method. Since bundles' run method is run before the Application, the connection provider should be ready to use. That's the only solution I can think of at the moment.\n. Looks like there is a simple way to do this and java8 module has done it.\n``` java\npublic void initialize(final Bootstrap<?> bootstrap) {\n        bootstrap.getObjectMapper().registerModules(new JavaOptionalModule());\n        bootstrap.getObjectMapper().registerModules(new JSR310Module());\n    final ValidatorFactory validatorFactory = Validation\n            .byProvider(HibernateValidator.class)\n            .configure()\n            .addValidatedValueHandler(new io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper())\n            .addValidatedValueHandler(new OptionalValidatedValueUnwrapper())\n            .buildValidatorFactory();\n    bootstrap.setValidatorFactory(validatorFactory);\n}\n\n```\n. According to Jersey Documentation: Rules of Injection\n\nThere are some restrictions when injecting on to resource classes with a life-cycle of singleton scope. In such cases the class fields or constructor parameters cannot be injected with request specific parameters.\n\nWhen you register a resource instance to jersey, it is automatically in singleton scope.\njava\nenv.jersey().register(new DiceResource(diceEngine))\nFrom the logical point of view, if you were able to inject Foo to your object, there would be concurrency problems among requests.\nSo you either need to put @Context as method parameters (which you've tried already) or register your resource class as follows:\njava\nenv.jersey().register(DiceResource.class)\nHow you can inject your dependencies in this case is something I can't answer for dropwizard 0.7.x though. On dropwizard 0.8 you can use jersey's HK2 injection.\n. It was my misunderstanding of HK2 ServiceLocator.\nSo, in my application class I create a ServiceLocator as following:\n``` java\n    final Client jersey = new JerseyClientBuilder(environment).using(configuration.getJersey()).build(\"jersey\");\nServiceLocator locator = ServiceLocatorUtilities.bind(new AbstractBinder() {\n  @Override\n  protected void configure() {\n    bind(jersey).to(Client.class);\n  }\n});\n\n```\nTurns out, if you don't give a name to bind method, it uses a default name and if that name already exists, it simply returns the old locator. So when I run multiple tests using DropwizardAppRule in one JVM, the same locator is used again and again and that returns a closed Jersey Client after the first run. Simply changing it to \njava\n   ServiceLocator locator = ServiceLocatorUtilities.bind(UUID.randomUUID().toString(), new AbstractBinder() {\n      @Override\n      protected void configure() {\n        bind(jersey).to(Client.class);\n      }\n    });\nfixed it.\n. It would be really nice if this makes it to 0.9. As a (controversial) hardcore Optional user, I haven't been able to validate those values because of a bug with @UnwrapValidatedValue, leaving the API half-baked. \nAnd the lack of List<@NotEmpty String> strs;, sigh..\n. +1, can't use the new @Auth due to a requirement.\n. I don't know if it's a 1.0 issue or not, but it doesn't look like @ahus1's solution can work with Filters. Considering https://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java#L38\nif (!authenticate(requestContext, credentials, SecurityContext.BASIC_AUTH)) {\n            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));\n        }\nand https://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java#L137\nfinal Optional<P> principal = authenticator.authenticate(credentials);\n            if (!principal.isPresent()) {\n                return false;\n            }\n, how the filter works is black&white. So, if filter is called, it will throw exception; if not, optional principal will not be assigned.\nAm I missing something? Is there a way to make it work without implementing my own Filter? I've been wanting to not use my own Filter/Factories for a long time, but there is always a blocker :).\n. Sure, I wouldn't mind. But what kind of clarification should I add? Some warning like \"warning: If you don't set this (jerseyClient.maxThread) high enough to match server.maxThreads, some requests may fail due to congestion on jersey client thread pool.\"? \n. Ah yes, of course. If it's used by a Managed service of sort, it's not relevant.\n. I handle the ConstraintViolationException with my custom exception mapper to return a DTO with field name and error message; so that the frontend can handle it better (focus, mark etc.). I ended up fixing this on my exception mapper (probably missing a lot of edge cases but good enough at the moment). I was hoping to contribute this to ConstraintMessage class, but I couldn't figure out how I could incorporate into the existing logic there yet. So I'll just drop my fix here so maybe someone can handle it or guide me to it.\n```\n    public static ViolationDto createViolationDto(ConstraintViolation<?> constraintViolation) {\n      try {\n        StringJoiner pathJoiner = new StringJoiner(\".\");\n        Class<?> beanClass = constraintViolation.getRootBeanClass();\n        for (Path.Node node : constraintViolation.getPropertyPath()) {\n          Class<?> currentBeanClass = beanClass;\n          String fieldName = node.getName();\n          PropertyDescriptor propertyDescriptor = new PropertyDescriptor(fieldName, currentBeanClass);\n          beanClass = propertyDescriptor.getPropertyType();\n          Optional getterJsonAnnotation = Arrays.stream(propertyDescriptor.getReadMethod().getAnnotations())\n              .filter(annotation -> annotation.annotationType().equals(JsonProperty.class))\n              .findFirst();\n          if (getterJsonAnnotation.isPresent()) {\n            String getterName = ((JsonProperty) getterJsonAnnotation.get()).value();\n            if(!Strings.isNullOrEmptry(getterName)) {\n              getterName = fixArraySuffix(node, getterName);\n              pathJoiner.add(getterName);\n              continue;\n            }\n          }\n      Field field = FieldUtils.getField(currentBeanClass, propertyDescriptor.getName(), true);\n      Optional<Annotation> fieldJsonAnnotation = Arrays.stream(field.getAnnotations())\n          .filter(annotation -> annotation.annotationType().equals(JsonProperty.class))\n          .findFirst();\n      if (fieldJsonAnnotation.isPresent()) {\n        String fieldJsonName = ((JsonProperty) fieldJsonAnnotation.get()).value();\n        if(!Strings.isNullOrEmptry(fieldJsonName)) {\n          fieldJsonName = fixArraySuffix(node, fieldJsonName);\n          pathJoiner.add(fieldJsonName);\n          continue;\n        }\n      }\n\n      String propertyName = fieldName;\n      propertyName = fixArraySuffix(node, propertyName);\n      pathJoiner.add(propertyName);\n    }\n\n    return new ViolationDto(pathJoiner.toString(), constraintViolation.getMessage());\n  } catch (IntrospectionException e) {\n    log.error(\"Error on violation reflection.\", e);\n  }\n\n  // be safe\n  return new ViolationDto(constraintViolation.getPropertyPath().toString(), constraintViolation.getMessage());\n}\n\nprivate static String fixArraySuffix(Path.Node node, String propertyName) {\n  // thanks to lack of methods on Node interface, here comes the hack\n  if (node.toString().endsWith(\"]\")) {\n    propertyName = node.toString().replace(node.getName(), propertyName);\n  }\n  return propertyName;\n}\n\n``\n. Oh thanks. Do you know if there is any issue reported on the Jetty side?. What are the current problems? Travis builds and no assertions inUnixSocketConnectorFactoryTest`?\n. http://stackoverflow.com/questions/1800317/impossible-to-make-a-cached-thread-pool-with-a-size-limit\nThis sums it up I believe.\nDropwizard's default ExecutorService comes with new LinkedBlockingQueue<>(); which is an infinite queue. That means, if you set up a pool with minThread:1 (and set maxThread to int-max if you want), you'll never get more than one thread. Which we realized this once on production some time ago :) and we changed the queue to SynchronousQueue with maxThread(Integer.MAX). For that use case, that was enough.\nBut recently, we required better fine-tuning with the ability of starting many threads (say 30) right away when needed, and increase it to a certain point (say 100 threads) on high load. You can accomplish that with minThread, limited queue, and maxThread.\nHowever, without allowCoreThreadTimeOut, that means 30 threads will always be alive. And that's not what we want. \n<rant>\nIt's actually quite surprising to me how limited the ExecutorService options are in Java. You can't do much smart tuning. For example, I would have liked another queue after maxThread (which was my assumption in the first place). RejectedExecutionHandlers are hardly sufficient.\nOr have minThread where the threads are always alive (allowCoreThreadTimeOut: false today), and then threads that are produced as soon as minThread is not enough. \n</rant>. So far, my attempts to reproduce this on dropwizard-example project have failed.. It's been on classic mode since then but it is a good time to switch back and test again. Though the architecture of our application has changed and it's no longer multiple services, so that may not trigger the issue we were having then. I'll get back with results later next week. . Stressing the system doesn't trigger the thread count jump on our single application. It might very well be because it's now single dropwizard application instead of 4 that communicate with each other, but since nobody else has come across this, I think we can close this issue. The most important part is that it's documented somewhere (here) and there is a workaround.. ",
    "krutsko": "thanks @natnan, i will check it \n. @arteam We faced the same issue with dropwizard 0.8.2. \nI noticed, that finalizer was added into ClientRuntime of Jersey 2.18. https://github.com/jersey/jersey/blob/4eece8eeb3947becdf91188a63412b5011eae2b5/core-client/src/main/java/org/glassfish/jersey/client/ClientRuntime.java#L297 which close() the connector. \nThen, underlying apache client 4.4.1 http://grepcode.com/file/repo1.maven.org/maven2/org.apache.httpcomponents/httpclient/4.4.1/org/apache/http/impl/client/HttpClientBuilder.java#1184 close() the connection manager, cause it's not shared by default. \nSo, the patch provided by @carlo-rtr seems valid to me. What do you think, guys?\n. @nickbabcock yes, we have running a service with the fix, and the bug not show up.\nIn our case with 0.8.2, we create a Jersey Client (JC) for each upstream dependency and we never close() these clients. On each request JC creates the ClientRuntime and at some point ClientRuntime get finalized and shutdown the connection manager of the entire client and the next request lead to \"Connection pool shut down\". So in my understanding, the notion of shareConnectionManagerEnabled mean \"Connection Manager is shared between multiple ClientRuntimes\".\nI can imagine the case when shareConnectionManagerEnabled is false, then JerseyClient should be created/closed explictly on each request.\nAnyway, I will try to prepare the test for my PR.\n. @nickbabcock I have added few tests, please take a look. Thanks!\n. just my 0.02\u20ac, I like the idea of fixing this by https://github.com/dropwizard/dropwizard/pull/1232 and looking forward to have this backported into 0.8.3.\n. ",
    "RichardBradley": "I'd love to have an answer to this one.\nI've been poring over this in the debugger and I can't figure it out.\nThe \"jooq bundle\" is registering a ConnectionProvider into a DropwizardResourceConfig during run()\nHow can I get it back out again in other code during run? I can't find a ServiceLocator or anything like it nearby.\nI find the HK2 stuff impossible to follow.\n. Thanks for your reply. I still don't understand how to do this though :-(\nin my Dropwizard app, I have:\n```\npublic class MyApp extends Application {\n    @Override\n    public void initialize(Bootstrap bootstrap) {\n        bootstrap.addBundle(new JooqBundle() {\n            @Override\n            public DataSourceFactory getDataSourceFactory(Configuration configuration) {\n                return configuration.getRelationalDatabase();\n            }\n        });\n    }\n@Override\npublic void run(Configuration configuration, Environment environment) throws Exception {\n  org.jooq.ConnectionProvider connPool = ???;\n}\n\n}\n```\nThe JooqBundle creates a ConnectionProvider and registers it with Jersey:\nenvironment.jersey().register(new JooqBinder(cfg));\n    ...\n    JooqBinder {\n      bind(configuration.connectionProvider())\n                .to(ConnectionProvider.class);\n    }\nI'd like to use that pool in my \"run\", rather than creating a second pool.\nAre you able to help me fill in the \"???\" bit? I can't figure it out from the two links in your previous post. \n. > I'm not 100% sure about this but I think you cannot access the objects that are registered to Jersey until after run() is finalized because Jersey is not initialized yet.\nYes, you're right. The binder isn't invoked until after \"run()\" has finished. \nSo there's not going to be a way to use Jersey DI inside run() without a lot of changes.\n\nI think you might need to customize JooqBundle a little so it has a getConnectionProvider() method\n\nWill do, thanks\n. (I agree -- the HK2 DI stuff has been \"enterprised\" to the point where it is impossible to understand and more of a hindrance than a help. The rest of Dropwizard works quite well though; I prefer it to Spring, which has plenty of its own over-engineering issues.)\n. ",
    "phavelar": "This is too much... better luck switching to Spring Boot.\n. ",
    "marchign": "In order to let the ServiceLocator build the healthchecks I am using Jersey INITIALIZATION_FINISHED event as follow:\n```\nenvironment.jersey().register(new ApplicationEventListener() {\n  @Override\n  public void onEvent(ApplicationEvent event) {\n    if (event.getType() == ApplicationEvent.Type.INITIALIZATION_FINISHED) {\n      ServiceLocator serviceLocator = ((ServletContainer) environment.getJerseyServletContainer()).getApplicationHandler().getServiceLocator();\n        for (NamedHealthCheck healthCheck : serviceLocator.getAllServices(NamedHealthCheck.class)) {\n          environment.healthChecks().register(healthCheck.getName(), healthCheck);\n        }\n      }\n   }\n@Override\npublic RequestEventListener onRequest(RequestEvent requestEvent) { return null; }\n\n});\n```\nThen, I register the healthcheck class in the AbstractBinder, e.g.:\nenvironment.jersey().register(new AbstractBinder() {\n  @Override\n    protected void configure() {\n      // ...\n      bind(SampleHealthCheck.class).to(NamedHealthCheck.class);\n    }\n});\nIt is fragile since it relies on the init order of dropwizard components but it works with 1.0.0 and I did not find a better solution.\n. ",
    "sunds": "Thank you @natnan !  I was able to get this working with DW 1.0.1 by passing in my own service locator in the run() method as you specified above:\nenvironment.getApplicationContext().getAttributes().setAttribute(ServletProperties.SERVICE_LOCATOR, locator);\nThis handy utility will allow you to scan and load dependencies at runtime as an alternative to compile time generation of inhabitant files. This makes running from your IDE easier:\nlocator = HK2RuntimeInitializer.init(\"iris-services\", false, new String[]{\"com.your.class.path\"});\n. ",
    "baharclerode": "I put together a bundle here https://github.com/baharclerode/dropwizard-hk2 that makes it easy to register health checks, metrics, and lifecycles/managed the same as resources and have them injected by HK2.\n. ",
    "moxie0": "@sul3n3t Did you ever find a workaround for this?  I'm also trying to migrate to 0.8.1, and this is the next thing I've run into.\nI don't know how you did this in 0.7, but I had a MultiBasicAuthProvider facade that would delegate to a BasicAuthProvider with the correct injectable type.\nIt looks like for Dropwizard 0.8 we'd have to create our own alternate AuthFactoryProvider that does the same thing?\n. @carlo-rtr The facade looks more difficult to write in the 0.8 world, so it might be nice if that delegation was built into the AuthFactoryProvider.  I looked at it a little, but I'm not familiar enough with the H2K injection stuff to know what is injected at what point, and where it would be safe to delegate.\n. @vpandey-rms If you're moving into Dropwizard 0.9.0 land, I packaged up a little library that does straight 0.8-style Auth annotations (no Roles), and allows you to register multiple principal types:\nhttps://github.com/WhisperSystems/dropwizard-simpleauth\n. Is this not an upgrade-blocker for most dropwizard users? Maybe I'm unusual, but almost every resource across every dropwizard service I run is auth-protected.\nShould I bite the bullet and rewrite every resource test across every service I maintain to use JerseyTest instead of ResourceTestRule, or is fixing this on the roadmap for the next dropwizard release?\n. In pairing down a test case I realized that a 3rd party module I was using was the culprit, sorry for the trouble!. ",
    "ojacobson": "As a workaround, creating a config file example.yml as follows:\nserver:\n    type: default\n    applicationConnectors:\n        -   type: http\n            port: 8080\nand starting the server with\njava -Ddw.server.applicationConnectors[0].port=5000  -jar build/libs/dropbear-all.jar server example.yml\nsucceeds, and binds the server to port 5000 (with the admin listener on port 8081 as usual). Having to spell out the default config far enough to give the -D properties something to override feels wrong to me, but does work.\n. > It's a known issue #636\nAha, thanks. I had a look through the tracker before posting it, but didn't see that one. Feel free to close this as a duplicate; no need for the additional clutter. :)\n. I'm not actually married to the emtpy map as the default configuration, but dropwizard-views ought to be able to do a sane thing by default. It has been able to do so, in the past.\nThis should retain compatibility with apps that have already overridden getViewConfiguration. That mechanism feels pretty sane to me.\n. I would assume that changing the initialization order of bundles counts as a breaking change, so I don't expect to see this out in a hurry. However, the current behaviour is pretty surprising: two calls to what appear to be the same API that are ordered the obvious way when the operands are both Bundle or both ConfiguredBundle cease to be ordered the obvious way when the types differ.\n. @joschi Well, take the Hibernate bundle as an example of bundle dependencies: code that uses the Hibernate bundle that lives directly in the app class obviously runs after the Hibernate bundle gets configured, but if that code gets refactored into a bundle of its own, for example if it's built separately or to structure the app a bit, then that bundle needs a way to get at the Hibernate bundle, or at least to get its entity manager:\n``` java\npublic abstract class UsersBundle implements Bundle {\n    / \u2026 /\n    public void run(Environment environment) {\n        environment.jersey().register(new UserAPI(getEntityManager())); // Looks sane, but isn't\n    }\nprotected abstract EntityManager getEntityManager();\n\n}\npublic class ExampleApp extends Application {\n    / \u2026 /\n    public void bootstrap(Bootstrap bootstrap) {\n        bootstrap.addBundle(hibernateBundle);\n        bootstrap.addBundle(new UsersBundle() {\n            protected abstract EntityManager getEntityManager() {\n                return hibernateBundle.getEntityManager(); // The dependency\n            }\n        });\n    }\n}\n```\nCode like this looks safe, since the bundles are registered in the right order, but is actually unsafe, because the entity manager in the Hibernate bundle will only be created after the UsersBundle's run method has already completed.\nI use exactly this pattern of refactoring functional chunks into bundles, which depend on services exposed by other bundles using overridden get methods, in some of my own apps. For the most part, it works really well, but bundle ordering is a constant headache. My current workaround is to push the get methods down into the leaf nodes of the dependency graph (into UsersAPI, in the example above), and lazily fetch things to a fault, but that's a lot of code spent overriding trivial getters.\n@ryankennedy It's not a huge problem to support a wrapper, at least as a transitional state. The code for that's in this pull request.\n. ",
    "pavgup": "Totally agreed on the Configuration not making sense as a requirement, but I guessed the docs had some reason I couldn't see.  To be clear, the docs are still suggesting an illegal inclusion of ExampleConfiguration in the MultiPartBundle declaration.\n. @joschi woot, happy to help!\n. ",
    "colemanserious": "+1 for pulling this into 0.8x.  Dean: are you still interested in moving this forward?\n. ",
    "aeells": "+1 for the same reasons - we want to convince the Ops guys this is an awesome tool. Be grateful if we could get some feedback on whether this is likely to make it into an upcoming release. Thanks and keep up the great work! :+1: \n. ",
    "stantonk": "@DeanPoulin was there ever a PR accepted for this? I need the very same abilities. Kinda wish Dropwizard just let logback do logging and stuck to what it does well.\n. @arteam is there documentation on how to use this? I don't quite see how:\n\nOf cource, nothing stops us from implementing a factory, that creates a ManagedDataSource. The problem is that dropwizard-jdbi, dropwizard-hibernate anddropwizard-migrations modules require DataSourceFactory for the configuration. DataSourceFactory is closely tied with the Tomcat pool. So if we use an another pool, we are forced to write own factories for JDBI, Hibernate, etc...\n\nhas been sidestepped.\n. Seems like one is still left needing something like https://github.com/DeloitteDigitalUK/dropwizard-hikaricp, which as far as I can tell, still misses out on the nice features that DBIFactory provides.\n. @zarub2k thx!\n. ",
    "sisingh": "@DeanPoulin , if I change log level in yml file, would that be reflected at run time. For e.g, I want to change the log level.\n. ",
    "akankshasaxena": "Hi , \nI can see there is /tasks/log-level path is available everytime when I start the dropwizard server, I am trying to change this log-level by using admin port , but not yet found any working solution.\nI need to change the log level at runtime without restarting the server, I tried changing in YML file but I need to restart the server. \nAny solution for this ?\n. ",
    "Madhukar07565": "Hi all,\nHow to log the messages to different files based on some condition in an application and not based on the log level.\nFor e.g:\nI have sent a request to application in the logs it will print response code, headers and etc. But based on some condition headers should print to another log file not to the regular log file.\n. logging:\n  level: INFO\n  loggers:\n    \"io.dropwizard\": INFO\n    \"org.hibernate.SQL\":\n      level: DEBUG\n      additive: false\n      appenders:\n        - type: file\n          currentLogFilename: /var/log/myapplication-sql.log\n          archivedLogFilenamePattern: /var/log/myapplication-sql-%d.log.gz\n          archivedFileCount: 5\n  appenders:\n    - type: console\nwhile running the application it is throwing below error:\n- Unrecognized field at: logging.type\n  Did you mean?:\n  - level\n  - loggers\n  - appenders\nBut the above example presents in dropwizard documentation.\nPlease let me know how to solve.\n. 0.8.1\n. ",
    "HaVonTe1": "I can see why you dislike the idea of adding a new AppenderFactory instead of enriching the existing one. At the time I made this fork I didn't liked the idea of adding a bunch of new properties and conditions in FileAppenderFactory. But I will try to do so if you decline this PR. I realy like DW and I realy missed the SizeBased TriggerPolicy :) \n. I am. But it would be OK for me if you decline this PR. \n. ",
    "MarkHerhold": "I can answer some of your questions because I have recently been investigating the issue myself, but don't know what the best practices are. Take my answers with a grain of salt.\n\nI must inherit the WebApplicationException or do I can throw directly a WebApplicationException object?\n\nIf you are like me, you will want an application/JSON response to result from throwing an exception.\nYou need to create your own exception class by extending WebApplicationException.\n``` java\n/\n * A HTTP 409 (Conflict) exception that produces an application/JSON response.\n */\npublic class MyConflictException extends WebApplicationException {\n    /\n     * Create a HTTP 409 (Conflict) exception.\n     */\n    public MyConflictException() {\n        super(Responses.conflict().build());\n    }\n/**\n * Create a HTTP 409 (Conflict) exception.\n * @param message the String that is the exception message of the 409 response.\n */\npublic MyConflictException(String message) {\n    super(Response.status(Responses.CONFLICT).\n            entity(new JSONExceptionMessageContainer(message)).type(MediaType.APPLICATION_JSON).build());\n}\n\n}\n```\nJSONExceptionMessageContainer:\n``` java\n/*\n * Simple container for mapping an exception message to a JSON object\n /\npublic final class JSONExceptionMessageContainer {\n    private String message;\npublic JSONExceptionMessageContainer(String message) {\n    this.message = message;\n}\n\npublic String getMessage() {\n    return message;\n}\n\npublic void setMessage(String message) {\n    this.message = message;\n}\n\n}\n```\n\nI just need to throw it from a resource method?\n\nYes. Do throw new MyConflictException(\"something conflicted!\")\n\nAny more concrete example on internet? The documentation is not good on this part\n\nTell me about it! Here are some pages I have open right now:\nJersey - WebApplicationException and Mapping Exceptions to Responses\nSO - Return Jersey exceptions in JSON\nSO - JAX-RS / Jersey how to customize error handling?\nDropwizard and Jersey ExceptionMappers\nYou may also want to look into ExceptionMappers as a part of Jersey, which some of these links talk about.\n. This behavior was as described (the \"expected\" case) in DW 0.7.1 where the\npath for the resource would be added automatically. I have double checked\nthis behavior and think that it is a great feature. That is why I believe\nthat this is a regression in 0.8.0-rc3.\nAre you saying that this is the new expected behavior? Any clues as to why\nthere is a difference between 0.7.1 and 0.8.0-rc3?\nOn Feb 16, 2015 3:36 AM, \"Jochen Schalanda\" notifications@github.com\nwrote:\n\nAs far as I can tell that's completely correct. You need to build a proper\nURI with UriBuilder\nhttps://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/UriBuilder.html\n(yours will literally just contain the ID of the Person instance).\nfinal URI uri = UriBuilder.fromResource(PeopleResource.class)\n                .path(\"{personId}\")\n                .build(person.getId());\nreturn Response.created(uri).build();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/878#issuecomment-74474427\n.\n. I've done some further digging. The reason the URIs are resolved to a full path is because Jersey's 1.x (whatever specific version is used in DW 0.7.1) contains some code to the ContainerResponse class when setting headers to look at URIs for the location header and resolve them further if needed.\n\nHere is a code snippet:\njava\n    private void setHeaders(MultivaluedMap<String, Object> headers) {\n        this.headers = headers;\n        Object location = headers.getFirst(HttpHeaders.LOCATION);\n        if (location != null) {\n            if (location instanceof URI) {\n                final URI locationUri = (URI)location;\n                if (!locationUri.isAbsolute()) {\n                    final URI base = (statusType.getStatusCode() == Status.CREATED.getStatusCode())\n                            ? request.getAbsolutePath()\n                            : request.getBaseUri();\n                    location = UriBuilder.fromUri(base).\n                            path(locationUri.getRawPath()).\n                            replaceQuery(locationUri.getRawQuery()).\n                            fragment(locationUri.getRawFragment()).\n                            build();\n                }\n                headers.putSingle(HttpHeaders.LOCATION, location);\n            }\n        }\n    }\nI will try to see what Jersey 2.x is doing next or if this functionality was removed.\n. The latest Jersey 2.x docs state that Jersey should be resolving to an absolute URI.\nlocation - the URI of the new resource. If a relative URI is supplied it will be converted into an absolute URI by resolving it relative to the request URI (see UriInfo.getRequestUri()).\nIt seems like others are having a similar problem.\nIt looks like this issue is already being tracked in JERSEY-1910 but it is shown as fixed, resolved, and released in \"version 2.3\" back in September 2014. This doesn't match up with the versions of Jersey on Maven Central (the latest is currently 2.16). Can anyone explain the version differences?\nEdit: Oops closed the issue.\n. @briehman Thanks\n. I have a bad habit of clicking that comment and close button. :/\n. The auth stuff in my project is already going to need to be refactored to move to DW 0.8.0. Having this change at the same time as the other 0.8.x stuff is better than making devs make sweeping revisions to everything twice in short succession.\n+1\n. ",
    "edpichler": "Wow, excelent answer @MarkHerhold \nThanks! Now it's clear and working.\n. I will wait for a more stable version, with the proper documentation. I'm just deploying to production.\n. @carlo-rtr Sorry, I pasted the wrong code.\nThis seems a bug. The documentation must be updated.\nI followed this documentation http://dropwizard.io/manual/configuration.html\n. @carlo-rtr could you reopen this issue if my last comment is correct and this is really a bug?\n. I also posted on the user group. But I believe documentation should be updated.\n. 0.7.1\n. @joschi Documentation said:\n\"HTTPS: Extends the attributes that are available to the HTTP connector\"\n\"Default: Extends the attributes that are available to all servers\"\n. Thank you! @joschi  So I just need to upgrade?\n. @carlo-rtr thank you very much.\n. ",
    "leodangal": "Thanks!  @MarkHerhold \n. ",
    "eiden": "@joschi Thanks for reviewing this so quick! I have changed the exception handling to just propagate LiquibaseException\n. @arteam Thanks for reviewing this! I appreciate the feedback, and I'll address the things you have pointed out\n. @arteam, I have made some changes to address the issues you pointed out. I've also added a three new tests. Let me know if I should squash the commits. \n. ",
    "briehman": "I opened a Jersey issue for this since I am seeing it in 2.17 also:\nhttps://java.net/jira/browse/JERSEY-2838\n. ",
    "sebeichholz": "Hi, is it correct that there is no fix in Jersey for this issue yet?\nI updated my DW application from 0.7.x to 0.8.1 and this error forces me to make code changes I don't want :-(\n. @joschi Ok, thanks.\n. I see that the Auto stuff has changed since 0.8.x\nGive me some time to adjust my code to these changes.\n. ",
    "markreddy": "The PingServlet is a separate project, please see: https://github.com/dropwizard/metrics You should log an issue there. \nIn the meantime when testing you could do the following:\njava\nassertThat(response.getContent()).isEqualTo(String.format(\"pong%n\"));\nAs per https://github.com/dropwizard/metrics#L33-L34\n. ",
    "jasonsturges": "Excellent - thank you.  Looking forward to dropwizard-forms availability on Maven.\n. ",
    "ToadJam": "I created a PR for this issue here: https://github.com/dropwizard/dropwizard/pull/884\n. That works for me - I'll go ahead and make the change unless someone prefers my initial solution\n. I haven't pushed them yet - I was waiting a few days to see if there was any additional feedback. I'll get the new version up on Monday.\n. I agree with your feedback @arteam and I've incorporated it in my latest commit\n. Thanks @arteam! I apologize, that last commit was sloppier than I would like, but I've amended the fixes and pushed them up again. Please take another look when you get the chance.\n. ",
    "timtyler": "Using Java 8? If so, Dropwizard claim to have a fix for this ResourceTestRule issue. It is here: \nhttps://github.com/dropwizard/dropwizard-java8\n. ",
    "vandanagopal": "If I give a custom name to all the registered hibernate bundles, then I get the below error:\nUnregistered Hibernate bundle: 'hibernate'. Is it required that atleast one bundle have the default hardcoded \"hibernate\" name?\n. Thanks, posted it on the user group.\nOn Mon, Apr 25, 2016 at 3:34 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nClosed #1531 https://github.com/dropwizard/dropwizard/issues/1531.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1531#event-639529403\n. \n",
    "viswacvfk": "Are you able to register multiple hibernate bundles in the same dropwizard application? I am facing similar errors.. ",
    "prb": "This issue was patched in the application in question by overriding AbstractParam#errorMessage in the subclasses in question, but the easy fix in general is simply not to return the input (verbatim) in the response.\n. @joschi I agree that it's a problem without a generic solution, other than perhaps to insist (probably futilely) that UI developers write clean, safe code...  In this case, the security scanning code is attempting to assess the risk of an XSS issue in that it inspects the JSON bodies for the interaction rather than the content actually delivered to the UI layer.\nOne option would just be to have a global configuration parameter for all AbstractParam and descendants that controls whether input is included with error messages.\n. The docs and code are inconsistent, too...\n\"1 second\" https://github.com/dropwizard/dropwizard/blob/2655ac703a0f6ddb4eae933a74dae3d12fde287f/dropwizard-metrics/src/main/java/io/dropwizard/metrics/MetricsFactory.java#L29\n\"1 minute\" https://github.com/dropwizard/dropwizard/blob/2655ac703a0f6ddb4eae933a74dae3d12fde287f/dropwizard-metrics/src/main/java/io/dropwizard/metrics/MetricsFactory.java#L44\n. See also #892.\n. IMHO, the FuzzyEnumModule should be removed and replaced with a note in ALL CAPS SHOUTING to remind people not to fill Dropwizard full of half-baked features that cause unexpected behavior and override behaviors of core libraries.  Dropwizard is an amalgam of frameworks, not a dumping ground.  Let Jackson be Jackson, Jersey be Jersey, etc.\n. Won't this potentially block until there is a connection available?\n. This is the query that's used to validate connections in the pool (depending on settings, while idle, on borrow, on return), and the timeout wrapping is already implemented at the statement level in the Tomcat pool that DW uses.\nPresuming that we trust the pool's validation activities, then just checking the age of org.apache.tomcat.jdbc.pool.PooledConnection#getLastValidated probably provides an adequate healthcheck (and that healthcheck already uses the timeout and lifecycle settings for the pool).\n. Interesting note.  The JDBC driver could (and should) be configured (e.g., socket settings for the Postgres driver) to alleviate the failure scenario for the Tomcat pool, but the HikariCP pool sounds like a nice piece of work.\n. ",
    "kirillgroshkov": "Ran into the same issue. Got fixed when I stopped reusing Response object.\n. ",
    "asiletto": "@yvandb I think if you are using a filter based authentication, you can try to set the user name as said here: https://groups.google.com/forum/#!topic/dropwizard-user/lVP0nDI-NT4\n. ",
    "eternal0": "Probably a good plan of action, to mitigate this from happening in the future is in addition to the rule being able to return what port it bound to, it should also be able to return what address it bound to\n. ",
    "sixinli": "Thanks for the fix! \n. ",
    "jeham": "I still see this noise in 0.8.0.\n. ",
    "sclausen": "+1 really annoying. can't wait for an update ;)\n. ",
    "kenota": "@arteam, thank you for suck quick reaction, especially on Saturday.  I have tried my code with 0.8.0-rc5 and can confirm that issue seems to be resolved with 0.8.0-rc5. \nShould I close this issue myself or somebody from dropwizard project should do that?\n. ",
    "brianwawok": "I still vote for a log of \"Using frequency of X for metric Y\".. maybe info level for your overall frequency, then debug for each metric...\n. ",
    "silkentrance": "@eepstein any progress on the jpa bundle?\n. @eepstein how about making this a public project then :+1: \n. @eepstein oh well, no problem. will look into this then myself...\n. ",
    "bladecatcher": "@silkentrance I'd put together JPA (for all persistence), Dropwizard using guice-persist (for DI and made writing transactional methods easy with @Transactional annotation). The drawback is the @Transactional semantics don't work in Jersey 2 resources (as they're not loaded by Guice) for which I ended up having to use manual transaction management. An example implementation is presented here https://github.com/oregami/dropwizard-guice-jpa-seed .\nHaving said that, I don't recommend using guice with dropwizard at all, as it's painful to setup DI into Jersey resources and it can also break in the future due to incompatibilities.\n. Can you try http://localhost:8080/api/rubbish.html ?\nIf that returns a valid response, maybe you could make your server rootPath \"/\" instead of \"/api\" ?\n. I've decided to stop using dropwizard-guice, as the road ahead is unclear. I'm falling back on plain old Guice, creating the injector using \ninjector = Guice.createInjector(...)\nThe main reason for using dropwizard-guice was so I could inject into Jersey2 resources. A workaround I've decided to use for now is to manually inject into jersey resources. for example:\nExampleResource r = new ExampleResource();\ninjector.injectMembers(r);\nenvironment.jersey().register(r);\nOf course, this also means that now I'm dealing with Singleton resource classes , which is not necessarily a bad thing! \n. Thanks for linking me to soabase. Here are the issues I'd run into ,while trying to integrate it with Dropwizard 1.0.0-SNAPSHOT : https://github.com/soabase/soabase/issues/32 \n.  I have migrated from HubSpot's dropwizard-guice to soabase and it's worked\ngreat for me so far with Dropwizard 1.0.0 . soabase solves the big problem\nof Guice injection into Jersey 2 resources\nhttps://github.com/bladecatcher/dropwizard-soabase-guice-entitymanager demo application glues Guice and Dropwizard 1.0.0 using Soabase\nOn Tue, Apr 19, 2016, 9:07 AM Jordan Zimmerman notifications@github.com\nwrote:\n\nhttp://soabase.io/guice.html\nI wrote this which is compatible with the old Jersey-Guice but works with\nJersey 2.0\n-Jordan\n\nOn Apr 18, 2016, at 3:53 PM, Andrew B notifications@github.com wrote:\nThe current module that we use for Guice integration,\ncom.hubspot.dropwizard:dropwizard-guice is no longer updated and is falling\nfar behind the current version of Dropwizard. (See\nHubSpot/dropwizard-guice#79 <\nhttps://github.com/HubSpot/dropwizard-guice/issues/79> )\nDo any third-party modules enable Google Guice usage on Dropwizard\n1.0.0-rc2, or is there another recommended way to perform dependency\ninjection in 1.0.0-rc2 ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub <\nhttps://github.com/dropwizard/dropwizard/issues/1522>\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1522#issuecomment-211713841\n. \n",
    "scottescue": "I just created and published a JPA module for Dropwizard that I derived from Dropwizard Hibernate.  It provides a shareable, thread-safe EntityManager that works with the UnitOfWork annotation.  There's no persistence.xml needed; setup and configuration is nearly identical to Dropwizard Hibernate. \nI hope other people find this useful.  So far I've published versions to work with Dropwizard 0.9.0 - 0.9.3.  I'm holding off on releasing a version compatible with Dropwizard 1.0.0 in hope I can get some feedback first.\nGithub: https://github.com/scottescue/dropwizard-entitymanager\nUser Guide: http://scottescue.com/dropwizard-entitymanager/\n. ",
    "scho": "Have you tried the way it is done here:\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java\nIt worked for me, except that I couldn't assert the result in case of a non-200 response (we render json with some error information, but grizzly always renders html/text).\nAnother idea:\nHave you tried to test it with an integration test and the DropwizardAppRule?\n. That was FAST. Thanks!\n. Does this take the configuration (AbstractServerFactory::getRegisterDefaultExceptionMappers) into account?\n. In our application, we disable adding the default exception mappers in order to customize some of them. It would be nice to not loose that ability. Maybe make it configurable?\n. Looks good to me!\n. I deserialize it using Jackson and then I validate the record using Hibernate:\njava\nValidation.byProvider(HibernateValidator.class).configure().buildValidatorFactory().getValidator().validate(record);\nAll the Java8 Optional stuff works with Jackson.\n. I've tried to reproduce with a minimal example, but I couldn't reproduce it. This issue is somehow related to our project setup, but I don't know what exactly caused it.\nThanks for looking into it anyways.\n. FYI: Upgrading to dropwizard 1.0.3 finally fixed the issue for us.\n. We've experienced, that recreating clients from time to time is not a good idea, because it leaks resources (we even had performance issue). So all our clients are singletons now.\n. Isn't the whole idea with the WebApplicationException that you don't need an exception mapper?\nHave you tried throwing a RuntimeException?\n. Have you tried changing the generic type from Throwable to something else?\n. It shows up in the log file on startup.\n. Have you tried registering RuntimeExceptionMapper.class instead of an instance of it?\n. Okay, thanks for the reply. I don't think it's worth adding the dummy managed object to dropwizard, if this is the only way of doing it.. Does the file end with .json? Which command do you use, server?\nWe've been using json configuration files since version 0.7.x and currently, we are on 1.0.5.. Can you post the output from mvn dependency:tree?\nEdit: Forget about maven dependencies. It doesn't work for me either, if the JSON file contains tabs. Replace them with spaces and you should be fine.. Cool, this was really fast. Thanks!. This comment is no longer valid, please see https://github.com/dropwizard/dropwizard/issues/2195#issuecomment-356627159\nWith the upgrade to dropwizard 1.1.6 the warning is gone and I see an error which goes all the way up to the LoggingExceptionMapper:\nERROR [2017-12-11 09:42:13,352] [1f320cd2c64c2810] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: 1f320cd2c64c2810\n! org.eclipse.jetty.io.EofException: Early EOF\n! at org.eclipse.jetty.server.HttpInput$3.getError(HttpInput.java:1104)\n! at org.eclipse.jetty.server.HttpInput$3.noContent(HttpInput.java:1093)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:307)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:250)\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:200)\n! ... 62 common frames omitted\n! Causing: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:217)\n! at org.glassfish.jersey.message.internal.InboundMessageContext.hasEntity(InboundMessageContext.java:772)\n! at org.glassfish.jersey.logging.ServerLoggingFilter.filter(ServerLoggingFilter.java:106)\n! at org.glassfish.jersey.server.ContainerFilteringStage.apply(ContainerFilteringStage.java:132)\n! at org.glassfish.jersey.server.ContainerFilteringStage.apply(ContainerFilteringStage.java:68)\n! at org.glassfish.jersey.process.internal.Stages.process(Stages.java:197)\n! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:318)\n! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)\n! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:267)\n! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)\n! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)\n! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)\n! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)\n! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)\n! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:89)\n! at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:120)\n! at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:135)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)\n! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)\n! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)\n! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)\n! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241)\n! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52)\n! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:454)\n! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)\n! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)\n! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at org.eclipse.jetty.server.Server.handle(Server.java:564)\n! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:317)\n! at org.eclipse.jetty.server.HttpChannelOverHttp.earlyEOF(HttpChannelOverHttp.java:239)\n! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1444)\n! at org.eclipse.jetty.server.HttpConnection.parseRequestBuffer(HttpConnection.java:351)\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:234)\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)\n! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110)\n! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)\n! at org.eclipse.jetty.util.thread.Invocable.invokePreferred(Invocable.java:128)\n! at org.eclipse.jetty.util.thread.Invocable$InvocableExecutor.invoke(Invocable.java:222)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:294)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:199)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:673)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:591)\n! at java.lang.Thread.run(Thread.java:745)\nTo me, it looks like io.dropwizard.jersey.errors.EarlyEofExceptionMapper does not catch this, since the exception is wrapped with a javax.ws.rs.ProcessingException.. With the upgrade to dropwizard 1.1.6, we also introduced the Jersey HTTP logging feature (org.glassfish.jersey.logging.LoggingFeature), which calls javax.ws.rs.container.ContainerRequestContext#hasEntity which then throws the exception in my previous comment. Without the logging feature, there is still only a warning being logged. \nFor now, our plan is to move to the newest dropwizard version and see if the problem is still there.. We still see them, but the stack trace has changed (we are now on dropwizard 1.2.3):\nWARN  [2018-05-03 14:27:03,118] [] org.eclipse.jetty.server.HttpChannel:  /some/path\n! org.eclipse.jetty.io.EofException: Early EOF\n! at org.eclipse.jetty.server.HttpInput$3.getError(HttpInput.java:1126)\n! at org.eclipse.jetty.server.HttpInput$3.noContent(HttpInput.java:1115)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:309)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:252)\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:200)\n! ... 52 common frames omitted\n! Causing: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:217)\n! at org.glassfish.jersey.message.internal.InboundMessageContext.hasEntity(InboundMessageContext.java:772)\n! at org.glassfish.jersey.servlet.WebComponent.filterFormParameters(WebComponent.java:670)\n! at org.glassfish.jersey.servlet.WebComponent.initContainerRequest(WebComponent.java:520)\n! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:471)\n! ... 48 common frames omitted\n! Causing: javax.servlet.ServletException: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF\n! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:489)\n! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)\n! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:120)\n! at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:135)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at com.flaregames.microservice.commons.web.filters.RequestLoggingFilter.doFilter(RequestLoggingFilter.java:46)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)\n! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)\n! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)\n! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)\n! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241)\n! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52)\n! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:455)\n! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)\n! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)\n! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at org.eclipse.jetty.server.Server.handle(Server.java:530)\n! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:347)\n! at org.eclipse.jetty.server.HttpChannelOverHttp.earlyEOF(HttpChannelOverHttp.java:239)\n! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1442)\n! at org.eclipse.jetty.server.HttpConnection.parseRequestBuffer(HttpConnection.java:356)\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:239)\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)\n! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)\n! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)\n! at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:382)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626)\n! at java.lang.Thread.run(Thread.java:745)\nWe are planning to move over to dropwiard 1.3.1 soon, I can then tell, if the upgrade helped in any way.. @shail We are on dw 1.3.5 and still have this issue.. ",
    "vultron81": "I am also having issues getting ResourceTestRule to work with BasicAuthFactory and GrizzlyTestContainerFactory for v0.8.0.  I tried to implement what was done in the OAuthCustomProviderTest.java code but no matter what I do I get a HTTP 401 error.  Also my custom Authenticator is never called.  Below is how I am initializing the ResourceTestRule:\n@ClassRule\n    public static final ResourceTestRule resources = ResourceTestRule.builder()\n            .setTestContainerFactory(new GrizzlyTestContainerFactory())\n            .addProvider(AuthFactory.binder(new BasicAuthFactory(new CustomAuth(), \"Test-Realm\", User.class)))\n            .addResource(new MyResouce())\n            .build();\nI then call my resource in my tests via:\nResponse response = resources.getJerseyTest().target(\"/mypath\")\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, \"user pass\")\n                .post(Entity.json(\"blah\"));\nI have also tried using the HttpAuthenticationFeature unsuccessfully. Any help would be appreciated.\n. Thanks Glenn.  I was able to get it working by using your example and properly formatting the Authorization header.  However, I am a little disappointed I could not get it to work using the ResourceTestBuilder() and instead having to inherit from the JerseyTest class.\n. ",
    "ferdy-lw": "After a couple of hours hacking around with this, there is a solution, albeit inelegant. As per Carlo's solution (see his branch), if you configure ResourceTestRule to use GrizzleyWebTestContainerFactory and set the DeploymentContext to a ServletDeploymentContext you still run into the issue of the ResourceConfig being reflectively created.\nI'd really like to be able to test my resources using the resource rule; however, all my resources require @Auth.\nInstead of using DI you can simply hold onto a static reference. In the ResourceTestRule class add a static class of the DropwizardResourceConfig, and construct it with the rule when building the ServletDeploymentContext. When Grizzly constructs the ResourceConfig the static reference to the rule will already be there and can be used to register providers again.\n``` java\npublic static class ResourceTestResourceConfig extends DropwizardResourceConfig {\npublic static ResourceTestRule msResourceTestRule = null;  // Keep a reference to the RULE\n\npublic ResourceTestResourceConfig(ResourceTestRule rule) {\n    msResourceTestRule = rule;\n}\n\npublic ResourceTestResourceConfig() {\n    super(true, new MetricRegistry());\n\n    ResourceTestRule resourceTestRule = msResourceTestRule;\n\n    for (Class<?> provider : resourceTestRule.providers) {\n        register(provider);\n    }\n    for (Map.Entry<String, Object> property : resourceTestRule.properties.entrySet()) {\n        property(property.getKey(), property.getValue());\n    }\n    register(new JacksonMessageBodyProvider(resourceTestRule.mapper, resourceTestRule.validator));\n    for (Object singleton : resourceTestRule.singletons) {\n        register(singleton);\n    }\n}\n\n}\n@Override\npublic Statement apply(final Statement base, Description description) {\n    final ResourceTestRule rule = this;\n    return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n            try {\n            test = new JerseyTest() {\n                @Override\n                protected TestContainerFactory getTestContainerFactory() throws TestContainerException {\n                    return testContainerFactory;\n                }\n\n                @Override\n                protected DeploymentContext configureDeployment() {\n                    return ServletDeploymentContext.builder(new ResourceTestResourceConfig(rule))\n                                .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, ResourceTestResourceConfig.class.getName())\n                                .build();\n                }\n            };\n            test.setUp();\n            base.evaluate();\n        } finally {\n            if (test != null) {\n                test.tearDown();\n            }\n        }\n    }\n};\n\n}\n```\n. Good point. What about using ThreadLocal to store the rule?\nAnother path I looked at but couldn't figure out how to do was setting the ServletProperties.SERVICE_LOCATOR to the locator you created when making the deployment context. I'm not sure how that property is used.\n. @alph486 the proposal is internal to the rule, the way you use it should be exactly the same as before, so no additional complexity.\n``` java\nprivate static final RunDao msRunDao = mock(RunDao.class);\nprivate static final UserDao msUserDao = mock(UserDao.class);\nprivate static final BasicAuthenticator msAuthenticator = new BasicAuthenticator(msUserDao);\n@ClassRule\npublic static final ResourceTestRule RESOURCES = ResourceTestRule.builder()\n        .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n        .setIsServletContext(true)\n        .addProvider(AuthFactory.binder(new BasicAuthFactory<>(msAuthenticator, AuthBundle.BASIC_REALM, User.class)\n                .responseBuilder((prefix, realm) -> AuthBundle.BASIC_FAILURE_RESPONSE)))\n        .addProvider(GeneralExceptionMapper.class)\n        .addResource(new WFRRuns(msRunDao))\n        .build();\n```\n@carlo-rtr ThreadLocal wont work as the grizzly container runs the requests in a separate worker thread. The problem with using the service locator property is it used as an attribute in WebComponent and the way I see to get it into the attribute is through a ServletContextListener, which is registered in the ServletDeploymentContext as a listener class, and I see no way to get closure over the rule.\nHowever, staying on the same path as before, instead of a single static test rule reference I got it to work via a map whose key is the rule hash, when creating the servlet deployment context the rule hash can be included as an init parameter. When the ResourceConfig is constructed the servlet config (and init params) are injected so it can lookup the rule for that config. (I've also changed the impl. to handle both servlet and non servlet contexts.)\n``` java\npublic static final String RULE_ID = \"io.dropwizard.testing.junit.resourceTestRuleId\";\npublic static class ResourceTestResourceConfig extends DropwizardResourceConfig {\npublic static Map<String, ResourceTestRule> msResourceTestRule = new HashMap<>();\n\npublic ResourceTestResourceConfig(String ruleId, ResourceTestRule rule) {\n    super(true, new MetricRegistry());\n    msResourceTestRule.put(ruleId, rule);\n    ResourceTestResourceConfig.configure(this, rule);\n}\n\npublic ResourceTestResourceConfig(@Context ServletConfig servletConfig) {\n    super(true, new MetricRegistry());\n    ResourceTestResourceConfig.configure(this, msResourceTestRule.get(servletConfig.getInitParameter(RULE_ID)));\n}\n\npublic static Application configure(ResourceTestRule resourceTestRule) {\n    return ResourceTestResourceConfig.configure(DropwizardResourceConfig.forTesting(new MetricRegistry()), resourceTestRule);\n}\n\npublic static Application configure(DropwizardResourceConfig config, ResourceTestRule resourceTestRule) {\n\n    for (Class<?> provider : resourceTestRule.providers) {\n        config.register(provider);\n    }\n    for (Map.Entry<String, Object> property : resourceTestRule.properties.entrySet()) {\n        config.property(property.getKey(), property.getValue());\n    }\n    config.register(new JacksonMessageBodyProvider(resourceTestRule.mapper, resourceTestRule.validator));\n    for (Object singleton : resourceTestRule.singletons) {\n        config.register(singleton);\n    }\n\n    return config;\n}\n\n}\n@Override\npublic Statement apply(final Statement base, Description description) {\n    final ResourceTestRule rule = this;\n    return new Statement() {\n        @Override\n        public void evaluate() throws Throwable {\n            try {\n            test = new JerseyTest() {\n                @Override\n                protected TestContainerFactory getTestContainerFactory() throws TestContainerException {\n                    return testContainerFactory;\n                }\n\n                @Override\n                protected DeploymentContext configureDeployment() {\n                    if (! isServletContext) {\n                        return DeploymentContext.builder(ResourceTestResourceConfig.configure(rule)).build();\n                    } else {\n\n                        String ruleId = String.valueOf(rule.hashCode());\n                        return ServletDeploymentContext.builder(new ResourceTestResourceConfig(ruleId, rule))\n                                .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, ResourceTestResourceConfig.class.getName())\n                                .initParam(RULE_ID, ruleId)\n                                .build();\n                    }\n                }\n            };\n            test.setUp();\n            base.evaluate();\n        } finally {\n            if (test != null) {\n                test.tearDown();\n            }\n        }\n    }\n};\n\n}\n``\n. After delving into it a little more it appears that this might be working as expected?@Authdoes not supportrequiredany more. So to have optional injection of the principal is now not supported, in which case does this mean we must always have a final filter that will create asecurityContextthat must return a principal of the type expected (which must have some indication that it is not actually an authenticated principal)? This seems a little difficult to implement optionally protected resources now. \n. No, it still fails with the NPE in theChainedAuthFilter. If I do add the null check so it doesn't cause the NPE, it then fails further downstream when attempting to provide the principal to the@Auth` annotation:\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java#L67\nThe @PermitAll seems to still require a principal - and the docs imply that with @PermitAll. All authenticated users will have access to the method. \n1162 uses the PermitAllAuthorizer, it doesn't address the Authenticator and the requirement that a securityContext must be added. The authorizer is used on the principal gotten from the securityContext.\nI'm running into the issue that if I have any chained auth filters one of them must provide a security context or throw an exception otherwise I get an NPE. This means I can't mix resources that use @Auth with ones that don't (regardless of required or not).\n. After reading through the source and the comments I think the way it currently works is fine, and with a little rehash of my auth strategy I was able to use my (cookie auth) filter and respond correctly.\nThe filter must throw an exception or set the securityContext - this make sense with the understanding that auth filters are only used when a resource has a role annotation or @Auth; consequently, the filters must provide a security context or error, and this implies the responded error will be the first of the chained filters if they all fail.\nWhile I like the new filtering, it makes for much simpler building authenticated (and authorized) principals, it does make it harder to have an optionally authenticated resource as you always have to provide a principal even with @PermitAll. If there are no credentials there really should be no principal.\nThanks for following up so quickly, the new auth filtering is a great enhancement.\n. ",
    "alph486": "Thanks @ferdy-lw for the insight and workaround. This is all unfortunately complex considering setting up Auth in production is a simple matter of registering an AuthFactory. I'm sure most folks would expect this work similarly when configuring a ResourceRule and adding a provider.\n. Hi @vvondra , I ended up reorganizing my services to enable different authentication for my token resources. In other words, the auth service is now a different service/deployable artifact altogether.\n. @shtratos Thanks. In truth, I've since moved on from this project, but good suggestion.\n. ",
    "michaelbraun": "Didn't realize it was registering as a singleton rather than a per-request creation. Thank you for your explanation and help! There is no issue so I'm closing.\n. I would think it would work the exact same way as OptionalValidatedValueUnwrapper does for Optional<?> but instead it would do...\njava\n@Override\n    public Object handleValidatedValue(final OptionalInt optional) {\n        if (optional.ifPresent()) {\n           return optional.getAsInt(); //This should wrap as an Integer\n        }\n        return null;\n    }\nSomething like that?\n. ",
    "thesmith": "I see. When I include dropwizard-client and I don't have slf4j-api stuck to 1.7.10 in my dependencyManagement, dropwizard-client tries to bring in both versions and triggers my own enforcer run.\nIt would be nice for users not to have to set slf4j-api in their dependencyManagement, although it's not a big issue.\n. Gotcha. Cheers!\n. +1\n. Looks like @joschi got to it before I had a chance :)\n. I stopped the Jersey client following requests by setting the follow_redirects property:\nfinal Client client = (new ForkedJerseyClientBuilder(environment))\n            .using(conf)\n            .build(\"blah\")\n            .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.FALSE);\nDoes that help? This is obviously for javax.ws.rs.client.Client.\n. ",
    "McPringle": "Hi @willie68,\nDo you specify a custom URL pattern for your resources and/or your assets? I found the solution to this problem and documented it on the new migration wiki page:\nhttps://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-0.7.x-to-0.8.x#migration-of-custom-url-pattern\nHope that solves your problem, too.\nMcPringle\n. I think a wiki could be useful, where everyone can add information about migration steps. For example I use a lot of Apache commons lang features which are now in a different package. Easy to solve if you know it. Can be hard to find if you first think the library was replaced by guava which provides nearly the same functionality.\n. Thanks @carlo-rtf, I started adding hints to the wiki.\n. ",
    "blezek": "@mcarrierastonish, perfect.  I forgot to mention that we are using Dropwizard v0.7.1.  I couldn't immediately tell if the fix is in 0.8 or not.  Closing for now.\n. ",
    "unindented": "@joschi It makes the page look stale though.\n. ",
    "velocipedist": "I can add an integration test - we have one in our tenacity project, so it should be quick and easy enough\n. @arteam just wrote some behavioral integration tests for this. However, this forced me to put a test-scoped dependency on dropwizard-testing in dropwizard-client. I've noticed you've got other integration tests which avoid doing that, so am not sure whether this was done on purpose and my change will not cause objections.\n. @arteam @joschi @jplock \nI've applied the review feedback. We now have a single commit that is ready to merge.\n. @arteam acted on your feedback, but for the change of the IP used in a test. Please see my detailed comment - curious to know your opinion.\n. @arteam thanks for your help!\nbtw. are there any timelines set on dw 0.8.1 release?\n. @thesmith perhaps you've got the bandwidth to look at #949 ?\n. @jplock I noticed you've added it to the 0.9.0 milestone. Does this mean there will be no 0.8.2?\n. A bit OT, but will ask anyway.\n@jplock what are the timelines for this? I'm asking because we found a bug with the metrics library version used by 0.8.1 where request durations are not reported correctly for async resource usage. We were hoping to patch this (unless already done) before the next release of dw.\n. FYI: @chrisgray (see the comment around release schedules and metrics)\n. It's a shame that CloseableHttpClient is an abstract class, not an interface.\nI'm happy to apply the change you've suggested as there is probably no need to make external clients exposed to this new class. However, I would much prefer to have a uniform interface.\n. fair point, will do.\n. will do\n. So this is number is an error margin needed to make the test stable - I'll put it under a named constant.\nIt should not be greater, because you would otherwise not verify that there is real change.\nNo, it has to be less then. Basically, first we show that the following is true:\ntotal_request_duration < connect_timeout + measurement_error   (1)\nthen we show that after changing to connect_timeout' = connect_timeout+measurement_error+a_bit we have:\ntotal_request_duration > connect_timeout'\n                                        = connect_timeout+measurement_error+a_bit\n                                        > connect_timeout+measurement_error\nNow, because we've showed the (1) this would a contradiction, unless have changed the connection timeout to more than connection_timeout + a_bit.\nHence our test shows that the setting works.\n. So this is interesting. We found this IP on stackoverflow and it makes the test work and CI to pass. On the other hand, when I use the one you suggest I get SocketTimeoutException rather than ConnectionTimeoutException. Even when I change the expected exception the test does not pass because the timeout settings are not observed.\nSo not sure what you want to do here. Shall we just drop the test if we cannot make it work?\n. ",
    "paukiatwee": "The issue is fixed after update based on your comment commit.\nHowever, I think the proper way to fix this is to rethrow exception as org.glassfish.jersey.server.internal.process.MappableException as the doc mention:\n* A runtime exception that contains a cause, a checked or runtime exception,\n * that may be mapped to a {@link javax.ws.rs.core.Response} instance.\n * <p>\n * The runtime will catch such exceptions and attempt to map the cause\n * exception to a registered {@link javax.ws.rs.ext.ExceptionMapper} that\n * provides an appropriate {@link javax.ws.rs.core.Response} instance.\n. I confirm this bug (DW 0.9.1). Anyway to fix this at DW level? Currently my workaround is manually open Hibernate Session see https://github.com/paukiatwee/budgetapp/blob/master/src/main/java/io/budgetapp/dao/AuthTokenDAO.java#L36\n. I tested this PR and it is working! Passed all my tests. My app at Github.\nSet up\nTokenAuthenticator tokenAuthenticator = new UnitOfWorkAwareProxyFactory(hibernate).create(TokenAuthenticator.class, FinanceService.class, financeService);\n// auth\nfinal OAuthCredentialAuthFilter<User> authFilter =\n        new OAuthCredentialAuthFilter.Builder<User>()\n                .setAuthenticator(tokenAuthenticator)\n                .setPrefix(\"Bearer\")\n                .setAuthorizer(new DefaultAuthorizer())\n                .setUnauthorizedHandler(new DefaultUnauthorizedHandler())\n                .buildAuthFilter();\nAuthenticator\n```\npublic class TokenAuthenticator implements Authenticator {\nprivate final FinanceService financeService;\n\npublic TokenAuthenticator(FinanceService financeService) {\n    this.financeService = financeService;\n}\n\n@UnitOfWork\n@Override\npublic Optional<User> authenticate(String token) throws AuthenticationException {\n    java.util.Optional<User> option = financeService.findUserByToken(token);\n    if(option.isPresent()) {\n        return Optional.of(option.get());\n    } else {\n        return Optional.absent();\n    }\n}\n\n}\n```\nPreviously financeService.findUserByToken(token) will throw error.\n. ",
    "rkettelerij": "I don't think it's wise to stick to 1.6 just for the sake of not having a dependency-reduced-pom.xml in your base dir. That being said, if you set createDependencyReducedPom to false the maven-shade-plugin won't create such a file.\n. ",
    "jondavidnd1": "I was looking over the changes to the documentation for this issue, and I think the code examples may be missing some info.\nIt seems like this line:\njava\nfinal Function<AuthFilter.Tuple, SecurityContext> securityContextFunction = return new SecurityContext() {\nshould be more like this:\njava\nfinal Function<AuthFilter.Tuple, SecurityContext> securityContextFunction = new Function<AuthFilter.Tuple, SecurityContext>() {\n            @Override\n            public SecurityContext apply(final AuthFilter.Tuple input) {\n                return new SecurityContext() {\n                     ...\n                };\n            }\n       };\n. ",
    "WarFox": "The issue I reported could be rectified if the invalidValue is not printed. \nIs it something that could be considered? \nI don't see a point in printing out the value that was sent in the request payload.\n. Please have a look at the pull request https://github.com/dropwizard/dropwizard/pull/1001/\nand advice if it is okay.\n. I agree with @carlo-rtr about the debug logs, that could be of help to some projects.\nShould we add the debug logs?\n. ",
    "piefel": "Funny, I was just about to prepare a patch that used that very function to log invalid messages on the server side. On the client, it probably is not as necessary, since the client might know what it just sent.\n. Since the format() call is also used for the trace logging in JacksonMessageBodyProvider where printing the invalid value is harmless but helpful, I wonder whether there couldn\u2019t be a second format function that would exhibit the classic behaviour.\n. Yes, of course, a typical Copy & Paste error. What\u2019s the procedure now? I\u2019m new to this. Shall I fix it and create a new pull request, or will someone manually fix it after the merge?\n. ",
    "micheee": "I see. Coming from the tutorial it was not obvious why the applicationContextPath changed there. Thanks for the clarification. Should I add your explanation to the docs?\n. ",
    "zloster": "I've added a pull request for updating the test code to dropwizard 1.0.3 from 0.8.1 at FrameworkBenchmark project. The results from my local test look very promising.\n. I've done some research recently about the static pages website hosting.\nLet's start with this list: https://designrope.com/toolbox/static-web-hosting/ It covers most of the offers. Please note that some of the services are not functional anymore. Others were bought from the bigger players. For example DivShot was bought from Firebase.\nMine conclusion from reviewing the offers was that custom domain with custom SSL certificate (Let's encrypt or something else) is in the paid layers or the limits for the maximum allowed traffic are too low.\nSo free is not an option.\nHowever one notable missing offer is from GitLab pages. They support custom SSL certificate on custom domains. They don't have hard limits on the traffic. Also have excellent deployment procedures with customizations (the basic option is to spin a Docker image in the cloud where the build runs, also it is possible to provide your own runner machines). They have example project that's building sphinx documentation. And here are the logs from sample deploy of the said site. I currently use GitLab pages with Let's Encrypt certificate for very small static site. The main hassle is the key rotation - I haven't automated it yet and there could be obstacles.\nOther interesting options seem to be Netlify offer for Open Source projects. They offer their Pro plan for free. I don't know if they have sphinx support and how the SSL keys rotation is working.\nOf course the above options are worth considering if you try to go with absolute free way. I don't know what kind of traffic hits the dropwizard domain. The Amazon S3 and the similar bucket offers will cost something and are not predictable. Yes, it could be half a dollar a month. Or more. The key rotation procedure is manual again or will need custom implementation.. > I'm not sure what we can do about this. I don't see it as a bug, but as an instance of misconfiguration. It's debatable whether it's Dropwizard's responsibility to guard against this, since Jetty already does so.\nI agree that it could be viewed as more of misconfiguration than a bug. The documentation definitely needs improvement in this area. Also a guard against this at validation level will require replication of the Jetty's calculation of the default number of acceptor and selectors threads or changes in Jetty to expose the result of it calculated defaults. The configuration is in at least 2 objects (the server config and the connectors configuration) if only HTTP connector is configured which complicates the validation logic. IMO too much work for insignificant gain.\n\nOne option to preemptively prevent the failure would be to override the thread pool in DefaultServerFactory if we infer that the configured application connectors will impose a number of acceptor and selector threads that exceeds the user-configured maxThreads. But then we'd be lying to users in saying that they have full control over their server's thread count.\nOtherwise, any further validation of maxThreads would have the same effect that you've observed\u2014the server would fail at runtime with a configuration error.\n\nIndeed this doesn't look like as a solution.\n\nMaybe we can present a more actionable error message than that emitted by Jetty. Or barring that, mention the case in the user manual with remediation steps. What do you think?\n\nPlease don't forget that I'm not familiar with Jetty's internals and many people will be in the same situation when reading the docs. Maybe adding one or two paragraphs with the following information. Feel free to correct me if I've mistaken something:\n\nJetty (at least 9.3.x - 9.4.x family) is using a shared thread pool - Jetty's manual This includes the threads that will be processing the requests.\nEach connector (HTTP, HTTPS) consumes additional threads from the above thread pool. The defaults are max 4 threads if the CPU have many cores, less in the other cases. The formulas are already described in the HTTP connector documentation.\nminThreads and maxThreads configuration is not only for the request processing threads (because of the shared thread pool), so this should be clarified in the documentation.\nJetty will throw java.lang.IllegalStateException: Insufficient threads:xxx in case of too aggressive limit on the thread counts.\n(This is the most unclear to me) Separate admin context for an application. Will it be using separate thread pool?. \n",
    "johann8384": "There are several metricsets for OS and Filesystem metrics. If you incorporated those you might be able to define some rules around what is considered \"% utilized\".\nhttps://github.com/turn/metrics-system/tree/master/src/main/java/com/turn/metrics/system\nhttps://github.com/tguzik/metrics-os/blob/master/src/main/java/com/tguzik/metrics/os/OperatingSystemGaugeSet.java\nIt would possibly get complicated though because there would be different variables you'd want to include. Some users may want to take into account \"% remaining HEAP\" and \"% CPU Utilization\" but otthers might want to determine their capacity entirely based on disk I/O metrics.. ",
    "axelfontaine": "Hi everyone,\nI just wanted to let you know that we've published a three part article on how to build a Continuous Deployment pipeline from GitHub to AWS for Dropwizard applications, using Travis CI and Boxfuse: https://boxfuse.com/blog/dropwizard-aws.html\nIt makes it a breeze to get up and running and it comes with out of the box deep integration for the Dropwizard config format with autodetection of ports and healthchecks (https://boxfuse.com/docs/payloads/dropwizard.html).\nThe entire setup we describe is 100% free, very reliable and very easy to get started with.\nBest regards,\nAxel\n. Hi @carlo-rtr , first of all let's put things into perspective: neither Heroku nor AWS are completely open source nor do they offer you a completely free solution. You get a small free tier with enough capacity for a single low volume app (limited to 1 year for AWS).\nNow as for Boxfuse you are absolutely correct in saying that (just like AWS & Heroku) it is based on a freemium model, albeit for commercial applications. But even for those we do have a free plan that matches the AWS free tier, so the overall solution is completely free forever for applications that fit that.\nAs for open source applications, we offer Boxfuse for free: https://boxfuse.com/pricing.html#open-source (We are strong believers in open source and are in fact running a successful open source project ourselves which will break the 1M download mark in 2015: https://github.com/flyway/flyway)\nBoxfuse is by far the easiest way to get Dropwizard apps on AWS. You can literally go from Dropwizard jar to brand new minimal AMI to EC2 instance in under 60 seconds with a single command, and all ports and healtchchecks in ELBs & security groups will be configured automatically based on the info extracted from your Dropwizard yaml file.\nIn part 3 of our Dropwizard blog post series (https://boxfuse.com/blog/dropwizard-aws-travisci.html) we also showed how you can set up a full continuous deployment pipeline for Dropwizard to AWS using an open-source project on GitHub, Travis CI & Boxfuse. All together for 0 dollars forever (except for AWS after 1 year when the free tier expires).\nGive it a try and you'll be pleasantly surprised :-)\nCheers\nAxel\n. @carlo-rtr No worries. I never took anything personally, I was just trying to clarify what we're offering.\nHowever I feel you should think again about AWS and Heroku are offering. In fact their entire business is made aroung you paying for convenience and tooling. In all you want to do is pay for hardware, you should look at https://www.hetzner.de & http://ovh.com . They will provide you with just the hardware and you get fantastic value. In fact the same machine (say Hetzner EX40 and AWS c3.4xlarge) costs you 10x more on AWS. Why? ... You guessed it: you pay for convenience and tooling.\nI would go even further and say that AWS+Boxfuse is in fact a lot cheaper than Heroku, when it comes to easily manage, deploy & scale Dropwizard applications in the cloud. :-)\n. ",
    "greenreign": "@carlo-rtr Just stumbled over this issue because AWS deployment caught my eye.  We have a fully automated pipeline (git post commit hooks, jenkins, aws opsworks) that we've muscled through with chef recipes but are looking to improve it.  Do you have more details on what you are looking to achieve here?\n. ",
    "mattmcclain": "Of course. I was using dropwizard-jdbi to query for rows in an Amazon Redshift DB with timestamps that fell on a particular date (1/1/2015) in UTC (Redshift timestamps are always in UTC). So, I created the DateTime objects with UTC timezone and binded them to the SQL using the SQL objects API. The returned rows, however, did all fall on the date I wanted. Instead of getting rows between 1/1/2015 00:00:00.000Z and 1/2/2015 00:00:00.000Z, I got rows between 12/31/2014 18:00:00.000Z and 1/1/2015 18:00:00.000Z. So, both of the binded dates got shifted back 6 hours, and my JVM's timezone was US Central (UTC-6). When I passed the JVM argument \"-Duser.timezone=UTC\", I got back the correct rows.\nTo answer your 2nd question, there is no peril in the conversion from DateTime to milliseconds. The peril happens after this, either in converting the milliseconds to the Timestamp object (in \"new Timestamp(value.getMillis()\") or converting the Timestamp into a binary value that's sent to the database - I'm not sure which one, but my guess is the latter. Either way, the root cause is that Timestamp is a thin wrapper around java.util.Date, which is known to use the JVM timezone in some unexpected situations.\n. Artem,\nI see that you declare the time columns as \"TIMESTAMP WITH TIME ZONE\". In Redshift, TIMESTAMPs don't have time zones, so that could be the difference. What happens if you just declare them as TIMESTAMP?\nThanks,\nMatt\n[Bazaarvoice]\nMatthew McClain\nStaff Data Scientist\nm: 217.721.5606\ne: matt.mcclain@bazaarvoice.commailto:matt.mcclain@bazaarvoice.com\nSitehttp://www.bazaarvoice.com/  |  Bloghttp://www.bazaarvoice.com/blog  |  Twitterhttp://twitter.com/Bazaarvoice\n. Artem,\nI'm glad that was able to reproduce the issue. Thanks for taking the time to look into this.\nMatt\n[Bazaarvoice]\nMatthew McClain\nStaff Data Scientist\nm: 217.721.5606\ne: matt.mcclain@bazaarvoice.commailto:matt.mcclain@bazaarvoice.com\nSitehttp://www.bazaarvoice.com/  |  Bloghttp://www.bazaarvoice.com/blog  |  Twitterhttp://twitter.com/Bazaarvoice\nFrom: Artem Prigoda notifications@github.com<mailto:notifications@github.com>\nReply-To: dropwizard/dropwizard reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Saturday, April 4, 2015 6:17 AM\nTo: dropwizard/dropwizard dropwizard@noreply.github.com<mailto:dropwizard@noreply.github.com>\nCc: Matt McClain matt.mcclain@bazaarvoice.com<mailto:matt.mcclain@bazaarvoice.com>\nSubject: Re: [dropwizard] dropwizard-jdbi: Binding joda-time DateTime objects to SQL uses JVM timezone, not the timezone in the DateTime object (#968)\nWell, now I see the problem.\nWhen handing SQL TIMESTAMP the database doesn't take into account a user time zone during writing, and doesn't convert to the user timezone during reading (by the way, I was wrong that a JDBC driver pass an epoch timestamp, actually it's a string in_ISO 8601_ ).\nFor example, if you write a date 12-31-2014 18:00:00-06:00 to the database in UTC, it will be\nsaved as 12-31-2014 18:00:00. When you read it back in UTC-06:00, it will be '12-31-2014 18:00:00-06:00', which is correct, but when you read it UTC, it will be 12-31-2014 18:00:00Z,\nwhich probably not the thing you want.\nAn easy solution, of course, is to advice to users just to switch to TIMESTAMP WITH TIME ZONE.\nBut I think on an application level we can also give users facility to set a DB time zone during reading and writing dates. For example, it could be useful if a developer is not in a control of the DB schema.\nI will try to create a PR.\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/dropwizard/issues/968#issuecomment-89551520.\n. ",
    "pablote": "I just run into this issue. Is there way a to set the timezone on a per column basis instead of the whole database? I'm currently working against a DB which has datetime columns in different timezones, even within the same table. Thanks.\n. ",
    "ayushvora": "Hey, so is this gonna solve the problem where, if timeZone is specified within an appender, it's rejected and the timeZone attribute directly under the requestLog attribute is picked up instead?\nI see @reines spoke about this in #580:\n\nif the user specified a timezone and a log format, the timezone would be totally ignored.\n\nSome of us dropwizard users here ran into this issue and we thought of asking about it because the behaviour seemed little surprising.\n. Are we then bound by Jetty's interface? Do we have to add multiple handlers in that case (as many as no. of appenders)? What's being planned?\n. ",
    "arthurtsang": "Thanks.  turns out it's my own fault.  resume(Throwable) does work fine with ExceptionMapper.  Sorry for that.\n. ",
    "leandroandrade": "You can do that, for example: \n`\n@Resource\nManagedExecutorService mes;\n@GET\n    @Path(\"{uuid}\")\n    public void byId(@Suspended AsyncResponse response, @PathParam(\"uuid\") String uuid) {\n        supplyAsync(() -> this.service.byId(uuid), mes)\n                .whenComplete((result, error) -> Optional.ofNullable(error)\n                        .ifPresent(erro -> response.resume(erro.getCause())))\n                .thenAccept(response::resume);\n    }`\nThe method erro.getCause() will call the exceptionMapper defined.. ",
    "kerrykimbrough": "CI failed after last commit, because of a transient failure unrelated to this PR. But I can't see how to request a new CI build. What to do?\n. Done\nOn Fri, Apr 10, 2015 at 2:32 AM, Jochen Schalanda notifications@github.com\nwrote:\n\nIn\ndropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java\nhttps://github.com/dropwizard/dropwizard/pull/981#discussion_r28126570:\n\n@@ -72,20 +72,30 @@ public void before() {\n     }\npublic void after() {\n-        for (ServiceListener listener : listeners) {\n-        try {\n-            stopIfRequired();\n-        }\n-        finally {\n-            resetConfigOverrides();\n-        }\n-    }\n  +\n-    private void stopIfRequired() {\n-        if( jettyServer != null) {\n\nMinor code style nitpick: Please remove the leading space inside the\nparentheses, and add one after if.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/981/files#r28126570.\n. \n",
    "BenRomberg": "Thank you guys so much, this is exactly what I was just looking for. I just googled \"queryparam optional empty string\" and didn't even expect a dropwizard specific solution, but guess what, it was the first search result =). Don't know if this is the right place to say \"thank you\", but this contribution just saved me a lot of work! Thanks a lot @evnm @arteam =). For anyone interested to use this with Dropwizard 1.3:\n```\n@JsonTypeName(\"logback-access-with-context\")\npublic class AccessWithContextRequestLogFactory extends LogbackAccessRequestLogFactory {\n    private String requestLogName = \"logback-access-with-context\";\n@JsonCreator\npublic AccessWithContextRequestLogFactory(Optional<String> name) {\n    name.ifPresent(requestLogName -> this.requestLogName = requestLogName);\n}\n\n@JsonProperty\npublic String getName() {\n    return this.requestLogName;\n}\n\n/**\n * Adjusted from {@link LogbackAccessRequestLogFactory#build(String)}\n */\n@Override\npublic RequestLog build(String name) {\n    Logger logger = (Logger) LoggerFactory.getLogger(\"http.request\");\n    logger.setAdditive(false);\n\n    LoggerContext context = logger.getLoggerContext();\n\n    AccessWithContextRequestLog requestLog = new AccessWithContextRequestLog();\n\n    LevelFilterFactory<IAccessEvent> levelFilterFactory = new NullLevelFilterFactory<>();\n    AsyncAppenderFactory<IAccessEvent> asyncAppenderFactory = new AsyncAccessEventAppenderFactory();\n    LayoutFactory<IAccessEvent> layoutFactory = AccessWithContextLayout::new;\n\n    for (AppenderFactory<IAccessEvent> output : getAppenders()) {\n        requestLog.addAppender(output.build(context, name, layoutFactory, levelFilterFactory, asyncAppenderFactory));\n    }\n    return requestLog;\n}\n\n}\npublic class AccessWithContextRequestLog extends LogbackAccessRequestLog {\n    /*\n     * Adjusted from {@link ch.qos.logback.access.jetty.RequestLogImpl#log(Request, Response)}\n     /\n    @Override\n    public void log(Request jettyRequest, Response jettyResponse) {\n        JettyServerAdapter adapter = new JettyServerAdapter(jettyRequest, jettyResponse);\n        IAccessEvent accessEvent = new AccessWithContextEvent(jettyRequest, jettyResponse, adapter);\n        if (getFilterChainDecision(accessEvent) == FilterReply.DENY) {\n            return;\n        }\n        iteratorForAppenders().forEachRemaining(appender -> appender.doAppend(accessEvent));\n    }\n}\npublic class AccessWithContextLayout extends LogbackAccessRequestLayout {\n    static {\n        defaultConverterMap.put(\"X\", AccessMdcConverter.class.getName());\n    }\npublic AccessWithContextLayout(Context context, TimeZone timeZone) {\n    super(context, timeZone);\n    setPattern(\n            \"%h %l %u [%t{dd/MMM/yyyy:HH:mm:ss Z,\" + timeZone.getID() + \"}] [%X] \\\"%r\\\" %s %b \\\"%i{Referer}\\\" \\\"%i{User-Agent}\\\" %D\");\n}\n\n}\npublic class AccessWithContextEvent extends AccessEvent {\n    private final Map mdc;\npublic AccessWithContextEvent(HttpServletRequest httpRequest, HttpServletResponse httpResponse, ServerAdapter adapter) {\n    super(httpRequest, httpResponse, adapter);\n    this.mdc = MDC.getCopyOfContextMap();\n}\n\npublic Map<String, String> getMdc() {\n    return mdc;\n}\n\n}\npublic class AccessMdcConverter extends AccessConverter {\n    private final MDCConverter delegate = new MDCConverter();\n@Override\npublic void start() {\n    delegate.start();\n}\n\n@Override\npublic void stop() {\n    delegate.stop();\n}\n\n@Override\npublic String convert(IAccessEvent event) {\n    if (!(event instanceof AccessWithContextEvent)) {\n        return \"\";\n    }\n    LoggingEvent loggingEvent = new LoggingEvent();\n    loggingEvent.setMDCPropertyMap(((AccessWithContextEvent) event).getMdc());\n    return delegate.convert(loggingEvent);\n}\n\n}\n```\nUsage:\n Create a file META-INF/services/io.dropwizard.request.logging.RequestLogFactory with content package.of.the.AccessWithContextRequestLogFactory\n In the Dropwizard configuration, set server.requestLog.type to \"logback-access-with-context\".. ",
    "ckingsbu": "Thanks, I've submitted a pull request for this here:  https://github.com/dropwizard/dropwizard/pull/1000\n. OK, I've switched it over to the io.dropwizard.util.Size class for validation.   I'm not happy with my docs for the syntax.   Anybody know of some existing example syntax I can point to?   HttpConnectorFactory can make use of this as well.\n. Thanks, fixed the typo\n. Hi Akshay, the change I made was specifially for the max file size of a\nsingle log.   The archivedFileCount:\nhttp://www.dropwizard.io/0.7.0/dropwizard-logging/apidocs/io/dropwizard/logging/FileAppenderFactory.html\nlooks to control the number of logfiles that are rolled(archived).  It the\nnumber of files, not days.\nOn Tue, Sep 29, 2015 at 4:36 AM, Akshay Maniyar notifications@github.com\nwrote:\n\nHey just wanted to know one thing, how will archivedFileCount work here.\nWill it ensure that a maximin of 7 files are only maintained? Or will it\nmaintain the files for the last 7 days?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1000#issuecomment-143852552\n.\n. Sure, looks easy enough, let me give it a try now.\n. \n",
    "akshaymaniyar": "Hey just wanted to know one thing, how will archivedFileCount work here. Will it ensure that a maximin of 7 files are only maintained? Or will it maintain the files for the last 7 days?\n. Hey just wanted to know one thing, how will archivedFileCount work here. Will it ensure that a maximin of 7 files are only maintained? Or will it maintain the files for the last 7 days?\n. ",
    "johnwiesel": "Very much looking forward to this merge.\n. ",
    "horzelam": "I'm waiting for this support too : - )\n. ",
    "softarn": "@arteam I've updated the commit. Thank you for the comments!\n. Possible duplicate: https://github.com/dropwizard/dropwizard/issues/1541\n. thanks, updated\n. So much boiler code for equals, hashcode. That's why I chose the\ncomparator, want me to switch anyway?\nOn Apr 20, 2015 9:31 PM, \"Artem Prigoda\" notifications@github.com wrote:\n\nIn\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java\nhttps://github.com/dropwizard/dropwizard/pull/1002#discussion_r28720803:\n\n+\n-        public String getHttpMethod() {\n-            return httpMethod;\n-        }\n  +\n-        public String getBasePath() {\n-            return basePath;\n-        }\n  +\n-        @Override\n-        public String toString() {\n-            return String.format(\"    %-7s %s (%s)\", httpMethod, basePath, klass.getCanonicalName());\n-        }\n-    }\n  +\n-    private static class EndpointComparator implements Comparator, Serializable {\n\nCould we just make EndpointLogLine to implement\nComparable?\nIf it so, we won't need to specify a comparator explicitly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1002/files#r28720803.\n. Thanks for tip, didn't know about it I'll check it out!\nOn Apr 20, 2015 9:35 PM, \"Artem Prigoda\" notifications@github.com wrote:\nIn\ndropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java\nhttps://github.com/dropwizard/dropwizard/pull/1002#discussion_r28721112:\n\n\npublic String getBasePath() {\nreturn basePath;\n}\n  +\n@Override\npublic String toString() {\nreturn String.format(\"    %-7s %s (%s)\", httpMethod, basePath, klass.getCanonicalName());\n}\n}\n  +\nprivate static class EndpointComparator implements Comparator, Serializable {\nprivate static final long serialVersionUID = 1L;\n  +\n@Override\npublic int compare(EndpointLogLine endpointA, EndpointLogLine endpointB) {\nint basePathComparison = endpointA.getBasePath().compareTo(endpointB.getBasePath());\n\n\nWhat do you think about using Guava's ComparisonChain\nhttps://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ComparisonChain.java\n?\nSomething like this:\nreturn ComparisonChain.start()\n                    .compare(this.basePath, other.basePath)\n                    .compare(this.httpMethod, other.httpMethod)\n                    .result();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1002/files#r28721112.\n. \n",
    "karel1980": "Update:\n- The order in which the MessageBodyReaders are attempted depends (in my case) on the result of Providers.getCustomProviders(locator, MessageBodyReader.class) in MessageBodyFormat, which takes us down the hk2 rabbit hole. A place I'm not willing to visit right now, because\n- Using the JsonIgnoreType annotation does indeed help (but it may not for others who don't want to, or are unable to add the jackson-annotations dependency)\n. ",
    "young-druid": "Thanks a lot for explanation. It is not a dropwizard's issue at all.\n. ",
    "cccmpuser": "Did you find solution for this issue? It happens only in IE for me.. ",
    "vanDonselaar": "Another option could be to use the SharedMetricRegistries. It's not as nice as proper dependency injection (it's a singleton class), but at least it doesn't require reflection.\n. Excuse me, but what was the reason for reverting this? I think it's a good fix and I'm looking forward to the release. :+1: \n. ",
    "TomCools": "Great Idea. I'll rework what I have and push it as a Module once i got everything working. :-).\n. @yunspace I read that page and I know it is possible in Jetty. What I meant with the lines \" Yet, for now, it is not possible to add a WebSocket-class to the embedded Jetty.\" is that it is not possible to add a websocket on Jetty through te current Dropwizard API. environment.servlets() (which is basically the Jetty Environment) does not contain any method to enable this.\nI am currently making a Bundle myself to integrate a way to add Websockets easily using the current core configuration.\nI have changed my issue above to make it clear that i'm talking about adding it through Dropwizard.\n. I have finished my Bundle project and it is available as a 3th party module:\nhttp://modules.dropwizard.io/thirdparty/    -> dropwizard-websocket-jee7\n. rootPath works, but i wonder what the setContextPath is used for then?\nI like to set it in code for a simple integration test, for which i just want to invoke the run()-method.\n. ",
    "joakime": "org.eclipse.jetty.servlet.ServletTester was not removed.\nIt's available still, but as part of the <classifier>tests</classifier> artifact.\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-servlet</artifactId>\n    <version>9.3.0.v20150612</version>\n    <classifier>tests</classifier>\n</dependency>\n. Has 2.0.0 been started on a branch I can look at?. @nickbabcock regarding not stripping Content-Length, that is an excellent question.  I'll consult with @gregw and see what's going on.. The general policy is to have defaults that follow industry practices for security.\nThe change from 9.2 to 9.3 followed industry practice.\nThe change from 9.4.11 to 9.4.12 has the same potential impact, the more locked down the cipher suite the less likely old clients that haven't updated themselves will be able to connect.\nUpgrading to Java 11 will essentially cause the same exclusions as Jetty 9.4.12 (RSA ciphers are disabled), but in the Java 11 case it's disabled at the JVM.\nUpgrading to Java 12 will cause all DES ciphers to be disabled at the JVM too.\nThe kind of change that 9.4.12 brings to the table isn't new.\nThe default behaviors have to be secure.\nIt's up to the individual deployments to evaluate the new security reality by configuring their own environment to make themselves intentionally vulnerable.. ",
    "devmage": "@arteam I pulled down your fork and merged master with your branch. Only conflict was with the dropwizard-spdy/pom.xml that you removed, which was trivially resolved (by removing it again). All current tests passed.\n. After some digging, this appears to be a Jetty 9.3.x feature, so this would entail a Jetty version bump: https://github.com/eclipse/jetty.project/commit/a308c087edae79917b40dbc8e1b5f0c0b3b15b12\nSo this issue would be blocked by https://github.com/dropwizard/dropwizard/issues/1036\nAs an aside, the Jetty documentation at 9.2.10 talks about ProxyConnectionFactory as though it exists, but delving into the jetty-server project at that version shows no such object. Fun.\n. @arteam thanks for the tip! I'll make sure my colleagues are aware.\n. ",
    "arienkock": "I suspect an easy way to support this is to allow the initialSize property of the DataSourceFactory to be 0. During startup the connection pool initializes (in my version this happens at org.apache.tomcat.jdbc.pool.ConnectionPool.init(ConnectionPool.java:464) [tomcat-jdbc-8.0.28.jar:na]) and that wouldn't happen if the initial size was 0.\n. In case it was lost in the exchange: the travis config on my branch was reverted as suggested.\n. Sure. From the Javadoc of the ConnectionPool constructor: Instantiate a connection pool. This will create connections if initialSize is larger than 0.\nJust pushed changes w.r.t. code review.\n. In the last commit I removed the try catch and code comment before the unit test.\n. Correct, the argument being that if the app can run without a DB (and be in an unhealthy state) why would it not be able to start. Useful in cases where you know a DB connection is of bad quality and you don't want a deployment to fail.\n- I just removed the other try-catch from the unit test\n. Just to make CI work on my branch. As mentioned in the comments, changes to this file can be ignored.\n. Failing in the catch case makes it possible to distinguish between expected behavior (assertion exceptions) and unexpected problems (e.g. build env stuff)\n. ",
    "cchesser": "+1 for offering a compatibility module for consumers to stay current with dropwizard, but allow migration from Jersey 1 to 2 (as this can be quite painful for service assembly owners). It would be nice to achieve this vs. pinning to dropwizard to 0.7.1 for the interim.\nPerhaps naming could be dropwizard-jersey-glassfish (2) or dropwizard-jersey-sun (1. Or just keeping dropwizard-jersey and a dropwizard-jersey-compat /  dropwizard-jersey-legacy module.\nMigrating from Jersey 1.x to 2.0\n. ",
    "ghenkes": "@joschi Thanks for the reply. Yeah, I saw Jersey all over in the code. For my purposes I really only needed dropwizard-core and it's almost free of direct Jersey dependencies. There's just one direct dependency dropwizard-core has on Jersey. (And one unused import.)\nWhat are your thoughts on adding a way to get a ServletContainer from dropwizard-jersey, so there's an abstraction between dropwizard-core and Jersey. Then consumers would be able to add their own drop-in implementation of dropwizard-jersey via dependency management. It doesn't solve the Jersey problem for all dropwizard modules, but it would at least allow consumers to run a barebones dropwizard service.\n. @joschi Here's the code for what I'm proposing. I can open a pull request if it's easier to review there.\nAdd the following to dropwizard-jersey\n``` java\n/*\n * Extends {@link ServletContainer} to provide consumers of dropwizard-jersey a means of obtaining a ServletContainer\n * without directly depending on Jersey.\n /\npublic class JerseyServletContainer extends ServletContainer {\nprivate static final long serialVersionUID = 8217023192775181696L;\n\n/**\n * Create Jersey Servlet container.\n */\npublic JerseyServletContainer() {\n}\n\n/**\n * Create Jersey Servlet container.\n * @param resourceConfig container configuration.\n */\npublic JerseyServletContainer(final ResourceConfig resourceConfig) {\n    super(resourceConfig);\n}\n\n}\n```\nThen in dropwizard-core's Environment change line 79 to:\njava\nthis.jerseyServletContainer = new JerseyContainerHolder(new JerseyServletContainer(jerseyConfig));\n. @arteam @carlo-rtr I made a small change to JerseyServletContainer to take in a DropwizardResourceConfig rather than a ResourceConfig. I also pulled in the latest changes from dropwizard into my fork, that's why you'll see those 2 merge commits.\n. I've added more documentation and tests.\n. Thanks all for the discussion!\n@arteam \n\nSpeaking of the implementation, I would prefer to see it more focused without changing other Dropwizard logging classes. I don't know if it's possible, because I don't have much experience with logback-access, but I expected its integration to be more simple.\n\nFor the most part the changes to the other classes are to allow for reuse of the existing appenders (console, file, syslog) supplied by dropwizard.\n@All\nSeems like we are all in agreement that we should investigate replacing the current request logging with Logback Access. As far as what my team was looking for it was the ability to customize the request log format, specifically being able to add request headers. The current SLF4J version is backed by AbstractNCSARequestLog in Jetty. It's log method is what decides the format of the log. By using Logback Access' AccessPatternLayout it gives users greater flexibility to control the log format (see the link for options).\nAs far as being able to fully replicate the SLF4J log format by default I'll start with examples of each.\nSLF4J:\n10.0.2.2 - - [18/Jan/2016:14:17:09 +0000] \"GET /healthcheck HTTP/1.1\" 200 148 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36\" 185\nLogback Access\n10.0.2.2 - - [18/Jan/2016:14:19:01 +0000] \"GET /healthcheck HTTP/1.1\" 200 148 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36\" 182\nwhen using the format:\n%h %l %u [%t{dd/MMM/yyyy:HH:mm:ss Z,UTC}] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" %D\nHere's a table showing the fields and values for both examples:\n| Type | Client Host | Remote Log Name | User | Date | Requested URL | Status Code | Response's Content Length | Referer | User-Agent | Elapsed Time |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| SLF4J | 10.0.2.2 | - | - | [18/Jan/2016:14:17:09 +0000] | \"GET /healthcheck HTTP/1.1\" | 200 | 148 | \"-\" | \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36\" | 185 |\n| Logbook Access | 10.0.2.2 | - | - | [18/Jan/2016:14:19:01 +0000] | \"GET /healthcheck HTTP/1.1\" | 200 | 148 | \"-\" | \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36\" | 182 |\nA couple notes:\n1. Remote Log Name will always be just a - in both formats.\n2. Client Host in SLF4J flexes to the X-Forwarded-For header if it is set (and preferProxiedForAddress is true, which dropwizard is hardcoding). I don't see a way of doing this through configuration in Logback Access, but it maybe to possible to replicate this behavior by defining a custom converter.\nNext steps:\nI'll go ahead and remove the SLF4J implementation and replace that with Logback Access. I'll set it up to use the log format I showed above by default. I'll start investigating the custom converter for the Client Host, unless you guys don't think it's worth maintaining that functionality.\n. I've refactored the code a little so the Logback Access logging will now default to the format I mentioned above. This refactoring also allowed me to switch a few things back to the way they were originally, so this change has less impact on the existing code.\nI've left the SLF4J pieces in based on @jplock's comment. (@jplock I assume your question meant leave it in this PR and once this change is merged do a second PR to remove the SLF4J implementation.)\nNext I'll start investigating the custom converter for the Client Host.\n. Here's the behavior of the code currently in this pull request with respect to the client host field in the access log, based on the x-forwarded-for header and the useForwardedHeaders config:\n| Type | X-Forwarded-For Header Present | useForwardedHeaders Property | Client Host Field |\n| --- | --- | --- | --- |\n| Both | no | n/a | IP address |\n| Both | yes | true (default) | header value |\n| SLF4J | yes | false | header value |\n| Logbook Access | yes | false | IP address |\nI bolded the difference between the implementations. This is what I was going to attempt to align using the custom converter, however the more I think about it the more I feel that the current SLF4J version behavior is incorrect. The dropwizard user specifically chose not to use forwarded headers, yet they are still being applied to the access logs. Thoughts?\n. @arteam I've implemented your requested changes; added new dropwizard-request-logging module, added packages for the factories and impls, cleaned up code based on your other comments\n. @arteam I've applied your suggestions in the unit test. Thanks!\n. @jplock the easiest way is probably to change LayoutFactory to return a Layout, rather than a PatternLayoutBase. I would have done that originally, however all use cases within dropwizard used a PatternLayout and this will require casting to a PatternLayout in buildLayout in order to set the pattern like this:\nif (!Strings.isNullOrEmpty(logFormat) && formatter instanceof PatternLayout) {\n    ((PatternLayout) formatter).setPattern(logFormat);\n}\n. @pandaadb https://github.com/dropwizard/dropwizard/pull/1415 adds the ability to configure the format of the request log. It is available in master and targeted for the 1.0.0 release.\n. I looked into this some last week as well and came to the same conclusion as @xiaodong-xie, that appender.stop() should be removed.\nWhen stop is called we eventually get to the stop method in OutputStreamAppender, which has Javadoc that states: Stopped appenders cannot be reused. So it looks like calling stop may have worked ok prior to Logback 1.1.5, but I don't think it was intended to.\nIn addition to the change in @xiaodong-xie's pull request there also needs to be a change to the DefaultLoggingFactoryTest::testConfigure class and corresponding logging_advanced.yml test resource, because the com.example.newApp and com.example.notAdditive appenders are writing to the same log file which is not allowed by Logback.\n. Also, I'd caution that it looks like Logback 1.1.5 and 1.1.6 has introduced a few new bugs so I'm not sure at what point the Dropwizard Committers want to upgrade the Logback version, or if they'd rather wait for these to be fixed. I've tried out 1.1.6 with the corresponding changes to dropwizard that I've mentioned above and didn't see any issues, but that may just be for my use case.\n. ",
    "shtratos": "@alph486 I wonder if polymorphic principal would solve your case: https://github.com/dropwizard/dropwizard/issues/1318\n. ",
    "j4n1": "IMHO, wrong user request is definitively not a warning, it\u2019s a debug event indeed. \nWe will have logs bloated with exceptions caused by a bug in client. Really can\u2019t see how this, client error, can be a warning on the server side, but maybe I\u2019m overseeing something.\n. ",
    "PixelBumper": "+1 definitely a show stopper for us\n. +1 I hit the wall because of this too.\n. ",
    "tocr": "Surely I can submit a PR. Give me a few days please.\n. I have submitted a PR #1437 regarding this\n. @psamsotha Good point, thank you. \nAdded @PermitAll to the list of checked class-level annotations.\n. You are right. I replaced the unnecessarily general WebApplicationException in the tests\n. ",
    "patrox": "@jplock I believe that this has been addressed in: https://github.com/dropwizard/dropwizard/pull/1437 and it can be closed.\n. @kmejka Hi buddy !\nAre you going to follow up this issue ?\nOtherwise, I'd like to pick it up - so it will get finally resolved.\n. the funniest part is that it's actually already done (in a simplified form) in our codebase - I would just have to extract it and provide a way of securing the sensitive information, like username, password, etc.\nRegarding the core idea of exposing configuration - it would work just like @mcarrierastonish described - as the specific Configuration class would be serialized and then pretty-printed to log.\nSo, in log you would get an \"effective\" configuration, which would take yaml/json configuration file, defaults defined in the config class and environment overrides into account - here is a shortened example for dumping configuration for the dropwizard-example example.yml + HelloWorldConfiguration.java\nINFO  [2016-03-31 22:06:16,809] io.dropwizard.Application: Effective config: \n{\n  \"template\" : \"Hello, %s!\",\n  \"defaultName\" : \"Stranger\",\n  \"logConfig\" : true,\n  \"viewRendererConfiguration\" : {\n    \".ftl\" : {\n      \"strict_syntax\" : \"true\",\n      \"whitespace_stripping\" : \"true\"\n    }\n  },\n  \"metrics\" : {\n    \"type\" : \"graphite\",\n    \"durationUnit\" : \"MILLISECONDS\",\n    \"rateUnit\" : \"SECONDS\",\n    \"excludes\" : [ ],\n    \"includes\" : [ ],\n    \"frequency\" : \"10 seconds\",\n    \"useRegexFilters\" : false,\n    \"host\" : \"localhost\",\n    \"port\" : 8080,\n    \"prefix\" : \"\",\n    \"transport\" : \"tcp\"\n  },\n  \"database\" : {\n    \"driverClass\" : \"org.h2.Driver\",\n    \"abandonWhenPercentageFull\" : 0,\n    \"alternateUsernamesAllowed\" : false,\n    \"commitOnReturn\" : false,\n    \"rollbackOnReturn\" : false,\n    \"user\" : \"sa\",\n    \"url\" : \"jdbc:h2:./target/example\",\n    \"properties\" : { },\n    \"defaultTransactionIsolation\" : \"DEFAULT\",\n    \"useFairQueue\" : true,\n    \"initialSize\" : 10,\n    \"minSize\" : 10,\n    \"maxSize\" : 100,\n    \"logAbandonedConnections\" : false,\n    \"logValidationErrors\" : false,\n    \"maxWaitForConnection\" : \"30 seconds\",\n    \"minIdleTime\" : \"1 minute\",\n    \"validationQuery\" : \"/* Health Check */ SELECT 1\",\n    \"checkConnectionWhileIdle\" : true,\n    \"checkConnectionOnBorrow\" : false,\n    \"checkConnectionOnConnect\" : true,\n    \"checkConnectionOnReturn\" : false,\n    \"autoCommentsEnabled\" : true,\n    \"evictionInterval\" : \"5 seconds\",\n    \"validationInterval\" : \"30 seconds\",\n    \"removeAbandoned\" : false,\n    \"removeAbandonedTimeout\" : \"60 seconds\",\n    \"defaultReadOnly\" : false\n  },\nFor the purpose of securing \"sensitive\" configuration settings, I see two options for now:\n- mark sensitive fields with annotations, i.e. @JsonProperty has a nice attribute for that:\njava\n@JsonProperty(access = JsonProperty.Access.WRITE_ONLY) // will skip it during serialization\nprivate String password = null;\n- the other option (suggested by my colleague @kubagruszka), would be to introduce a new simple wrapper class, i.e. Password which would have a custom JsonSerializer registered, which in turn would obfuscate the sensitive information, by i.e. serializing the password to ***.\n. @glennmcallister, @jplock, @ryankennedy could you please review the above suggestion and let me know if you're fine with that? Any comments / suggestions are more than welcome.\n. @ryankennedy I like your proposal with Google Docs and some POC code, so I created a very short document, describing some hows, whens, whats which describe some of ideas from this issue with some proposals how to address them.\nEveryone with the link to the document should be able to comment - and I'm open for any feedback.\nhttps://docs.google.com/document/d/1lxZ8oVLKl8Bas2pobN-PT-3ZHMkMaBAqsPDEdWS6BeI/edit?usp=sharing\n. @joschi @jplock @ryankennedy @nickbabcock \nCurrently in our company we are implementing a functionality to support printing the current, effective service configuration. We have decided to implement it as an admin task (like @jplock suggested few comments above), so the access to it can be limited.\nDo you think it would be a valuable addition to the dropwizard core ?. @joschi, @fexbraun that bug seems to have been fixed few days ago (according to the logback jira).\n. Bumping logback version to the one which includes the fix should address the issue\n. hi @toadzky, I was a bit curious about your issue - so I downloaded your project, took a look and I've a possible suspect - as when I removed the lombok from picture I got the same results from both endpoints:\n$ curl localhost:8080/ -H 'Accept: text/plain'\n[{\"field1\":\"a\",\"field2\":null},{\"field1\":null,\"field2\":{\"x\":0,\"y\":1}}]\n$ curl localhost:8080/ -H 'Accept: application/json'\n[{\"field1\":\"a\",\"field2\":null},{\"field1\":null,\"field2\":{\"x\":0,\"y\":1}}]\nBTW, @JsonInclude(ALWAYS) is not needed (as @nickbabcock already wrote), as it's the default one.\n. @toadzky - I took a step further and found something which might help you, as I imagine that removing lombok for you might be not acceptable:\nhttps://github.com/paradoxical-io/jackson-lombok\nPlease give it a try and let us know.\n. @toadzky,  @nickbabcock OK, looks like the url which I posted has been a dead-end, but I've been able to pinpoint what exactly is wrong in this scenario.\nSeems like there is an interference between Jackson's AfterburnerModule and Lombok (which is not so surprising, given the fact that both are messing with the Java bytecode).\nI've found it out by looking up how the internal ObjectMapper used for Jackson in Dropwizard is configured:\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java#L58\nWhen I tried to serialize a Lombok annotated class using ObjectMapper with AfterburnerModule, it indeed was skipping the null fields, once I removed the AfterburnerModule, the null fields were included.\nBesides, I've also found this past issue: https://github.com/dropwizard/dropwizard/issues/1111, describing how the set-up a customized ObjectMapper, in case if some of the pre-registered modules are not needed.\n. Testing it right now - once the tests will pass, I'll post a PR.\n. @jplock when you'll have spare 5 minutes, could you please have a look at: https://github.com/dropwizard/dropwizard/pull/1489 ?\nI've updated tests & javadoc, to cover the new field.\n. It's disabled by default, just like DataSourceFactory.commitOnReturn\n. > I think we need a setter in the DataSourceFactory. \n\nDo you also need to add it when the pool is built?\n\nyes, missed these - but already changed, thanks!\n. @joschi Sorry for that - I guess that IDEA reformatted text during save - should I revert these changes ?\n. @jplock: good idea, with switching to j.u.Optional, as:\n- DW requires JDK8 anyway, so whoever is(will be) using DW is(will be) on JDK8\n- according to semver, moving from 0.9.x to 1.0.0 might/will mean braking (incompatible) changes\n. @jplock https://github.com/dropwizard/dropwizard/pull/1493\n. hi @TheWizz - I had similiar issue in the past with headers - but not in Dropwizard.\nI've prepared a test which should reflect the behaviour which you've described, can you have a look and confirm if my understanding is correct?\nhttps://gist.github.com/patrox/db5aa7b3f00939dae393\n. the above test will currently fail with java.lang.UnsupportedOperationException - as there will be an attempt to add item to a singletonList (immutable).\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java#L99\nFull stacktrace:\njavax.ws.rs.ProcessingException: java.lang.UnsupportedOperationException\n    at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:109)\n    at io.dropwizard.client.DropwizardApacheConnectorTest.applyShouldHandleMultipleHeadersWithTheSameKey(DropwizardApacheConnectorTest.java:195)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at com.intellij.junit4.JUnit4TestRunnerUtil$IgnoreIgnoredTestJUnit4ClassRunner.runChild(JUnit4TestRunnerUtil.java:341)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\nCaused by: java.lang.UnsupportedOperationException\n    at java.util.AbstractList.add(AbstractList.java:148)\n    at java.util.AbstractList.add(AbstractList.java:108)\n    at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:99)\n    ... 32 more\n. @jplock, @joschi could you please have a look at the issue reported by @TheWizz as this might be a :bug: I can provide a PR with a fix - as after writing a test I'm already warmed up :)\n. @arteam, @jplock, @joschi could you please have a look at my proposed solution for this ?\nhttps://github.com/dropwizard/dropwizard/pull/1498\nPlease note, that in test I had to mock a lot of stuff - as I wanted to closely reproduce the issue.\nFYI - I have checked all similiar cases from commit mentioned by @arteam (https://github.com/dropwizard/dropwizard/commit/0f7724003eb47051dfda838e7889d2649b25b006) - and seems like this was the only one which could be problematic.\n. hi @devinrsmith, can you please provide more details, like i.e. which Dropwizard version are you using?\nI'm asking, as I've checked it myself - and it worked as expected in 1.0.0-rc2-SNAPSHOT.\n\nI've definitely got a non-empty db\n\nThe mentioned db was created by db migrate or was it created without using liquibase ?\nDid you try to run the dropwizard-example migration ?\nOnce you provide more info, I'll try to help you.\n. Here is a result of my db dump:\ndropwizard/dropwizard-example $ java -jar target/dropwizard-example-1.0.0-rc2-SNAPSHOT.jar db dump example.yml\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd\">\n    <changeSet author=\"patrox (generated)\" id=\"1459323075021-1\">\n        <createTable catalogName=\"EXAMPLE\" schemaName=\"PUBLIC\" tableName=\"PEOPLE\">\n            <column autoIncrement=\"true\" name=\"ID\" type=\"BIGINT(19)\">\n                <constraints primaryKey=\"true\" primaryKeyName=\"PK_PEOPLE\"/>\n            </column>\n            <column name=\"FULLNAME\" type=\"VARCHAR(255)\">\n                <constraints nullable=\"false\"/>\n            </column>\n            <column name=\"JOBTITLE\" type=\"VARCHAR(255)\"/>\n        </createTable>\n    </changeSet>\n</databaseChangeLog>\n. Last thing which comes to my mind without more details:\n\nuser: username\npassword: super_secret\nurl: jdbc:h2:./target/mydb\n\nAre you sure that these are correct ?\n. There is also an option to create a copy of existing H2 DB using Script tool, which is part of H2:\nQuote from http://www.h2database.com/html/tutorial.html:\n\njava org.h2.tools.Script -url jdbc:h2:~/test -user sa -script test.zip -options compression zip\n\nI suspect that this might be an issue with liquibase - as you wrote that it worked for simpler DB, but I will wait for you feedback, as I was not able to reproduce it. If you could send a failing schema, then this would be really helpful.\n. @jplock, sure that would work - thought that the idea (behind this commit: https://github.com/dropwizard/dropwizard/commit/0f7724003eb47051dfda838e7889d2649b25b006), was to get rid of guava's collections in favour of JDK ones, but I guess in this place it will be more convenient to use Lists.newArrayList\n. @arteam shouldn't this commit be reverted as well: https://github.com/dropwizard/dropwizard/commit/171bbe63d836a53d966845283ba4f777cfb0fecc ?\n. the same applies to OffsetDateTimeArgumentTest.apply\n. @jplock, @joschi could you please have a look at the above PR addressing the described issue ?\n. Addressed in #1506\n. Closes #1505.\n. a bit similiar issue: #1156 \n. Hi @stringy05, are you planning to add the support for this, as I'm also interested in this functionality.\nI can create a PR, if you are not planning to do it.. @stringy05, @arteam I have created a PR adding support for configuring the ServiceUnavailableRetryStrategy while using either HttpClientBuilder, or JerseyClientBuilder.\nCould you please have a look ? https://github.com/dropwizard/dropwizard/pull/2185. Hi Brock,\nso can I complete the PR, or do you want to do it ?\nWe are also interested in getting it merged :). Hi @mgtriffid, @nickbabcock !\nI also think it's a valuable configuration option, so I created a PR for that.\nCould you please have a look ?\nhttps://github.com/dropwizard/dropwizard/pull/2184. @nickbabcock Yeah, sorry for that, after reinstalling IDEA my old settings disappeared :(\nShould be fixed.. @arteam Sure, sorry I missed that - otherwise I would fix it sooner ! Thanks for the nitpick :). @joschi Can you please have a look ?. To be honest I didn't consider it, as I haven't seen any downsides of using it, but I guess it could be made configurable by some additional boolean flag, i.e. isAdminThreadPoolMonitored.. @joschi @nickbabcock @arteam Can I please ask one of you, for an opinion regarding the above ?. Thanks @nickbabcock - that makes sense, as I was trying to access it too soon and it turned out to be not created (yet).\nCheers!. To avoid evaluating it, if it's not needed.\n. force of habit - I've changed it\n. minor: to many _and_s\n. This part was quite tricky, as internally it's named quite inconsistently :cry:\nBut I guess this is a punishment for forcing access to the field via reflection :wink: . ",
    "thiagomoretto": "Did it! Added the surefire configuration to the parent pom. Just a line.\n. Thanks Carlo! After some research I don't think it is a Dropwizard issue neither Jersey (at least the core). After debugging Jersey code I couldn't find anything suspect, seems that it did its job. Unfortunately I didn't see Jersey's Grizzly test container code yet and adding jersey-grizzly-connector didn't fix the problem.\nThis issues affects only the test code base, the application works fine, as already stated. So, it is not a critical problem.\nI gonna dig deeper about this issue and post any update here when I find any solution about that. I gonna also check with Jersey guys if someone there knows anything that can help me.\n. @baank AFAIK @Path annotation on class level is not necessarily required, so you can add @Path just on method level. Instead of a better message, we could fix this.\nSo, I've just send a pull request (https://github.com/dropwizard/dropwizard/pull/1067) with a possible fix, maybe we could discuss there if this issue was really fixed or we should do something yet.\n. ",
    "patricioe": "+1 on this issue.\n. ",
    "rondagostino": "To some degree that makes sense in theory, but the reality is that many people will be using JRE 1.7 for a while.  Corporate customers often purchase extended support to receive security updates long after the public end-of-life date.  I'm not arguing the wisdom -- just the reality.  I would prefer to see JRE 1.7 supported for a while longer -- perhaps until Java 9 becomes available in 2016.\nRon\n\nOn May 20, 2015, at 2:57 PM, Cemalettin Koc notifications@github.com wrote:\nI have seen https://github.com/dropwizard/dropwizard-java8 this project recently and thought why there is such a project. One of the core values Dropwizard brings is security. Given that the end of public updates of Java 7 has been announced, supporting a publicly not updated version of Java is not necessary.\nI am in favor of supporting JDK8 as a minimum version and bring all nice features implemented by @joschi and JDK8 features into directly Dropwizard.\n\u2014\nReply to this email directly or view it on GitHub.\n. Duplicate of #1702 . Actually, #1702 documents how to workaround the default value in Jetty 9.3 but does not actually fix the configuration guide, which still incorrectly states (none) instead of the Jetty 9.3 default of ^.*_RSA_.*_(MD5|SHA|SHA1)$. \n",
    "Lael": "The NPE also shows up if you're missing @GET/@POST/... annotation on a resource method that has a @Produces annotation. This is in Dropwizard 1.0.0. Thanks!\n. ",
    "cbehrends": "I've actually refactored my services so that I no longer require multiple datasources.  If you think this is something worth fixing I'd still be willing to pitch in and take a look shot at it.\n. I think the reason it get's registered twice has less to do with DW and more to do with how the HTTP spec works.  When you leave off the trailing slash, most web servers will do a redirect to the same URL with the trailing slash.  \nThe reason I think this happens is that from a web (REST) point of view http://mydomain.com/somevalue\nmaps to an representation of \"somevalue\" while http://mydomain.com/somevalue/ maps to a listing of \"somevalue\".\nWhile I see where you're coming from, I think our DevOps guys have worked around this by first making sure our calls to REST endpoints have the proper slashes and secondly by tweaking the query that they use to visualize data from Graphite/Graphana.\nHope this helps!\n. ",
    "FMPAR": "I've just encountered this issue as well, I've dropped down to 0.7.1 for now. Any chance on a fix for this in a future version?\n. I am also experiencing this issue -  right now our only options are to explicitly deal with the sessions for the second bundle or try to incorporate a different container solution. A fix would be much appreciated.\n. ",
    "gberberoglu": "jackson 2.6.0 is released! https://github.com/FasterXML/jackson-core/commit/80b8319500e68434ca6da91eb7b9243918cdff02\n. ",
    "jar349": "@teamwork523 @jplock Sorry I didn't respond yesterday; I try hard not to work on Sundays. :-)\nI saw the issue that you posted for Fallwizard and will address it there.  Just responding here for closure.\n. ",
    "teamwork523": "Thank you @all for helping out. I will continue the discussion with @jar349 on the Fallwizard thread.\n. ",
    "ipropper": "If you have time, there should be a testing section explaining how to test Validation.\nI think you should explain when the @valid keyword is/is not needed. \n. ",
    "earthling": "+1\n. I would just like to have the logger reference appenders by name, as they could if logback were configured via xml or groovy. Really, I would just like the yml configuration to have feature parity with the xml configuration.\n. I like Ryan's idea. I also like @arteam's idea, though I don't think it makes sense to define appenders inline with the logger like that. I'd rather just let the appender have a name and let the 'advanced' logger configuration syntax reference the appender by name (much the same as a conventional logback.xml would do).\n. Would it be so terrible to change the configuration syntax?\nFailing that, if the appenders reference loggers (which is reversed from logback configuration files), how would additivity be configured?\n\nIn case the default cumulative behavior turns out to be unsuitable for your needs, you can override it by setting the additivity flag to false. Thus, a branch in your logger tree may direct output to a set of appenders different from those of the rest of the tree.\nhttp://logback.qos.ch/manual/configuration.html\n\nFor example, some loggers should log to all appenders, while other loggers should log to only one appender.\n. ",
    "wakandan": "do you think specifying debug level per appender per logger would be useful? I think it might be a bit overkill....\n. alright so this looks okay? How do I proceed? Thanks.\n. @arteam thanks for you input. I'm gonna update my code :+1: \n. @arteam added tests and changed code styling\n. @arteam aaaahhhh. I understood now, never thought of that. Okay I will update my code :+1: \n. @arteam I modified the code as you requested. \"advancedLoggers\" key can be read from the configuration file and it will override settings from \"loggers\" key. Please review. Thanks :+1: \n. @carlo-rtr 's idea is actually not bad. I was thinking about doing the same thing since we have some logback configuration file. One thing the old-fashioned xml logback might be good for is that they can do scanning for changes in the xml file (during runtime, and reload config), which is very very handy for debugging in production. \n@ryankennedy 's approach seems nice for both readability & backward compatibility. Should we proceed with that?\n. ...so is there a consensus approach for this? I'm still interested in pushing for this feature if possible\n. alright @arteam I will check that. Thanks for your comments :+1: \n. @arteam updated\n. thanks! :+1: \n. wrongly pushed a pr from my working copy\n. :+1: \n. can anybody take a look?\n. can anybody take a look?\n. @carlo-rtr thank you for your pointer, but it's still not clear how to do it properly. I created a discussion here and it turns out I'm not the only one with this problem. I'm surprised the documentation doesn't mention anything about this matter, at all.\n. As promised in https://github.com/dropwizard/dropwizard/issues/1231\nThanks to Stan Svec from https://groups.google.com/forum/#!topic/dropwizard-user/OEC1kprTKMs \n. @joschi updated\n. @joschi updated :+1: \n. Thanks! :dancer: \n. @nickbabcock it was what I thought needed, it can be changed easily. Thanks for you feedback :+1: \n. I'm not sure what Maven syntax you are referring to is. Please point me to some docs. Thanks.\n. Ah my bad, it's a convention used in my company - we just always use that in our code. It's there to handle a lot of null/empty/etc cases that we have, in this case it may be a bit overkill.\n. Ah you mean this? compile group: 'commons-collections', name: 'commons-collections', version: '3.2' \n. I understand now, you want to use maven dependency declaration syntax, got it\n. ",
    "douzzi": "+1\nBeing able to configure different loggers to log to different files is really important for many applications.\n. ",
    "ra2085": "It does work with the LoggingFilter constructor without parameters, however, I wish to log the request and response bodies/entities.\nclient.register(new LoggingFilter(Logger.getLogger(MyTest.class.getName()), true));\nThe Response body is logged, but the Request body just prints whitespaces.\n. Disabling gzipEnabledForRequests solves the issue.\n. Awesome. It does work. My bad. :(\n. ",
    "hrishikesh-kumar": "JerseyClientConfiguration clientConfig = new JerseyClientConfiguration();\nclientConfig.setGzipEnabled(false);\nclientConfig.setGzipEnabledForRequests(false);\nClient client = new JerseyClientBuilder(environment).using(clientConfig).build(\"myClient\")\nclient.register(new LoggingFilter(Logger.getLogger(MyTest.class.getName()), true));\n. ",
    "gilbode": "Looks like the issue is resolved in Jackson.\n. Thanks for looking into this, I'm wondering if maybe the afterburner module was not the culprit.  I was running my app from gradle where the classpath consisted of jar files  in the local cache, directories etc. (i.e. different code sources).  \nWhen we build our app we create a single JAR file and the warnings go away.  I had suspected it was due to the afterburner settings done by dropwizard but wonder if there is some further limitation of having multiple code sources.  It isn't immediately obvious to me what is actually causing the issue however.  All of my application classes are in a single directory code source on the classpath at the time I was encountering the error.\n. ",
    "martintreurnicht": "I'm trying out setting checkConnectionOnBorrow to true in the DataSourceFactory configuration. I'll keep you posted on the result\n. Yes making that change did resolve the issue, thanks\n. ",
    "mattuuh7": "@nickbabcock thanks this works! I have tried to work around by overloading the suspend method in InMemoryConnector but seems Grizzly test factory did the work already. Thanks again\n. Thanks. Also from the doc, are both the factory classes and the actual widget classes required? what is the suggested break-down of properties between widget class and factory class?\n. ",
    "RawToast": "I've created a pull request for this:\nhttps://github.com/dropwizard/dropwizard/pull/1102\n. No problem :)\n. I would add the @JsonIgnore property to the ValidationMethod. See this pull request: https://github.com/dropwizard/dropwizard/pull/1108\nWithout the tag, erroneous properties are added to the json during testing (when following the testing documentation).\n. ",
    "vzx": "@mattnelson Thank you for your suggestion. However, the JodaModule does not seem to respect this setting. Image this small test code snippet:\n``` java\nObjectMapper om = new ObjectMapper()\n        .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n        .setDateFormat(new SimpleDateFormat(\"YYYY-MM-dd\"))\n        .registerModule(new JodaModule());\nString s = om.writeValueAsString(new Object() {\n    public DateTime d = new DateTime();\n});\nSystem.out.println(s);\n```\nThis outputs: {\"d\":\"2015-06-12T11:58:53.775Z\"}. Possibly, this is a bug in the JodaModule and should be reported there.\n. Thanks for the suggestion. Luckily, the existing DateTimeSerializer can be re-used though. Eg.\njava\nJodaModule jodaModule = new JodaModule();\njodaModule.addSerializer(DateTime.class, new DateTimeSerializer(new JacksonJodaDateFormat(ISODateTimeFormat.dateTimeNoMillis().withZoneUTC())))\n1112 looks very promising.\n. I made a pull request for this: https://github.com/dropwizard/dropwizard/pull/1193\n. > but I'm slightly worried about breaking backward compatibility.\nBackwards compatibility in what way? The only case it will \"break\" is when someone throws a WebApplicationException without any entity (eg. just a message and status code, or even only just a status code), which end up in Jetty just returning a basic HTML page for the status code (and I can't imagine anyone relies on this). If a WebApplicationException has an entity, it bypasses the ExceptionMapper chain entirey.\nYou can check out my full description about it in issue https://github.com/dropwizard/dropwizard/issues/1192.\n. How should I move this forward? Should I share this pull request or the issue with a certain team member, post it to some mailing list?\n. @nickbabcock \n\nThe thing I'm unsure of is if there is sufficient test coverage in this area. There are multiple constructors for WebApplicationException, and I'd like to see test cases for than just one so that the behavior is stated. For instance, a test case ensuring that if someone constructed an exception with a Response (with/without) an entity that it is passed through to the client.\n\nI definitely agree with this, however I'm unable to add a test case for this to LoggingExceptionMapperTest. Somehow in an actual Dropwizard application, a WebApplicationException which contains an entity never enters the LoggingExceptionMapper#toResponse (which can be verified quite easily manually by using a debugger). But when run from LoggingExceptionMapperTest the exact same exception does enter the LoggingExceptionMapper#toResponse, and so this test would produce a false positive.\nExample of WebApplicationException with entity which works correctly in an actual app:\njava\n@GET\n@Path(\"web-application-exception-with-entity\")\npublic void webApplicationExceptionWithEntity() throws WebApplicationException {\n    throw new WebApplicationException(\"exception message\", Response.status(Response.Status.NOT_FOUND)\n        .type(MediaType.APPLICATION_JSON_TYPE).entity(\"{\\\"code\\\": 9001}\").build());\n}\nTest case which fails when put into LoggingExceptionMapperTest:\n``` java\n@Test\npublic void webApplicationExceptionWithEntityNotTouched() throws Exception {\n    try {\n        target(\"web-application-exception-with-entity\").request(MediaType.APPLICATION_JSON).get(String.class);\n        failBecauseExceptionWasNotThrown(WebApplicationException.class);\n    } catch (WebApplicationException e) {\n        final Response response = e.getResponse();\n    assertThat(response.getStatus()).isEqualTo(404);\n    assertThat(response.readEntity(String.class)).isEqualTo(\"{\\\"code\\\": 9001}\");\n}\n\n}\n```\n@ryankennedy \nAs for ForbiddenException, it does derive in the end from WebApplicationException (through ClientErrorException which is usually generated in Jersey clients only). The bigger problem here is that any ClientErrorException is derived from WebApplicationException and as such \"bleeds\" through to the web app layer if not caught and handled correctly (this in my eyes is major flaw in JAX-RS/Jersey, but that's beside the point).\nBut even then, if any Jersey client throws some ClientErrorException with an entity (because let's say some remote server returns a rich error message), this will also be returned to Bob, regardless of the implementation LoggingExceptionMapper (remember any WebApplicationException with an entity will be passed through).\n. @ryankennedy I'm very sorry for the confusion I caused. I misunderstood something about the ClientErrorException, and did not communicate my point about the design flaw clear. The NotFoundException is a ClientErrorException, which I thought were  are usually only thrown from JAX-RS clients, when a request returns any faulty response. But it's not related to JAX-RS clients specifically.\nThe design flaw I meant was about using a JAX-RS Client. For example, consider:\njava\nClientBuilder.newClient().target(\"..\").request().get(String.class);\nWhen the URL returns 404, it will throw a NotFoundException (and in case of some other non-successful error, it will throw some other WebApplicationException). So if my app A communicates with app B in this way, and doing the request to app B results in some error, a WebApplicationException is generated, which then bubbles up to the web layer, and is translated into an HTTP response. So if app B is internal and its error output is not intended for the whole wide world, I have to take care to catch WebApplicationException, and re-throw it in some other way.\n\nFor the record, I do actually wish there was a version of WebApplicationException that allowed me to quickly pass a string into the response body for surfacing in the HTTP response. I don't think we ought to be co-opting the exception message for that purpose, though.\n\nPersonally I always expect the exception message of the WebApplicationException to be the message to show to the API user (and as such construct my own ExceptionMapper for WebApplicationException to do so), but perhaps this breaks other people's expectations. I'm not sure how else to implement it though because as you say there is no other way to carry a message inside the WebApplicationException.\n. ",
    "akhaidem": "I am having the exact same issue.Initially I thought, it must be due to some registration but I have checked, and it looks okay to me. Any body who can give any pointer will be great! Thanks!\n. ",
    "mnrasul": "I am working off the master branch. I have the following two additional lines. @akhaidem @myftiu Could you possibly be missing the second line? I am not sure if RolesAllowedDynamicFeature is present in 0.8 or not, so included it, as I am using it. \nenvironment.jersey().register(RolesAllowedDynamicFeature.class);\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder(User.class));\n. @ahmed-isam have a look at this sample (https://github.com/mnrasul/dropwizard-immutable-bean/commit/59893b5a0102fc04c5a3952b51468f47a3c0d6ab) It has a basic functioning basic auth setup. \n. @ahmed-isam I tested using the following curl commands. Are you running the project in its original form? or modified form? If there are any differences, they must be the cause of failures...\n``curl http://localhost:9000 expected response is Can't touch this...\ncurl http://localhost:9000 --user abc:abcexpected response isYou got permission!`\n\n. ",
    "ivanjeukens": "I am using 0.9.2 and have the exact same problem. \njava\n@POST\npublic Response addOrcamento(@Auth User user, OrcamentoRepresentation orc) {\n...\n}\nand on run\n``` java\nenvironment.jersey().register(\n                new AuthDynamicFeature(new BasicCredentialAuthFilter.Builder()\n                        .setAuthenticator(new DefaultAuthenticator())\n                        .setRealm(\"SEC REALM\")\n                        .buildAuthFilter()));\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n```\n. ",
    "psamsotha": "For any future readers, here is the reason for the error.\nWhen Jersey starts up, it builds a model of all the resources. In the model includes all the parameters. The Jersey validates the model. It does this to benefit us, by making sure that the all the models can be processed correctly during a request. Part of the validation process consists of validating the parameters. There are some rules that guide what parameters we can have. For instance we can only have one entity body parameters (excluding things like @FormParam and @FormDataParam). The entity parameter is generally the parameter with no annotation.\nThe way the validation works for parameters is that it for each parameter, Jersey traverses all the ValueFactoryProviders and it passes the Parameter (which is a model of the actual parameter) to the ValueFactoryProvider, and expects a Factory to be returned. If a Factory is not returned from one ValueFactoryProvider, then it goes on to the next until either a Factory is returned, or all the ValueFactoryProviders have been checked and no Factory has been returned by any of them. In which case Jersey throws a ModelValidationException, as there is no ValueFactoryProvider to handle that parameter.  Things like @PathParam, @QueryParam, @FormParam and other framework parameter annotations have their own ValueFactoryProviders automatically installed.\nThat being said when traversing the parameters, Jersey give one pass for a single entity parameter. So for the error to occur in an example such as\njava\n@POST\npublic Response addOrcamento(@Auth User user, OrcamentoRepresentation orc) {\n...\n}\none of those parameter passes are failing. The OrcamentoRepresentation parameter will be given the entity parameter pass, but the User fails as there is no ValueFactoryProvider that returns a Factory for that parameter.\nBut the thing is, the AuthValueFactoryProvider is the component that provides the value for the @Auth User parameter. You can see here in the source\nhttps://github.com/dropwizard/dropwizard/blob/2565a66fbb62e28c8e7ac2754be14e594fd1b445/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java#L53-L59\nwhere it actually returns the Factory. The only thing that could cause it to fail is if the following condition were to fail\njava\n!principalClass.equals(parameter.getRawType())\nBut it shouldn't fail, as the principalClass is obtained through our passing the class to the AuthValueFactoryProvider.Binder<>(User.class);. As long as the principalClass and the actual parameter class are the same, the condition should pass.\n@ivanjeukens I've tested with your exact configuration with 0.9.2, and it works fine. Maybe a clean and build. Or maybe the problem is somewhere else. I don't know. But I hope I gave you some idea of what the problem is.\n. I'm thinking maybe you should add @PermitAll also. Currently to get authentication with no authorization (using the AuthDynamicFeature), you need @PermitAll on each method. It would also make sense to add the class-level support. This is also consistent with how the RolesAllowedDynamicFeature is implemented.\n. Normally you would use the authorizer with the Jersey RolesAllowedDynamicFeature. How it works is that the filter gets the roles from the @RolesAllowed annotation, and iterates over the array, calling the SecurityContext#isUserInRole(String role) method each iteration. DW's implementation of SecurityContext simply delegates the isUserInRole call to the authorizer's` authorize method, passing in a single String. In pseudo code\njava\nAuthorizer authorizer ...\nSecurityContext context ...\n    @Override\n    public boolean isUserInRole(String role) {\n        return authorizer.authorize(role);\n    }\n...\nRolesAllowed annotation ...\nString[] roles = annotation.value();\nfor (String role: roles) {\n     if (context.isUserInRole(role)) {\n         ...\n     }\n}\nSo unless you plan on explicitly using/calling the authorizer yourself, I'm not sure what the use would be. @akdev do you have a specific use case for this? Just curious.\n. The ResourceTestRule runs it own JerseyTest explicitly. You seem to be trying to extend JerseyTest yourself and using the ResourceTestRule. If you are using the latter, you shouldn't use the former, as the rule already starts a server application instance.\nThe result with your current configuration is that 1) you have two application instances running, and 2) your client configuration (configureClient) is not being used for the ResourceTestRule client.\nOnce you get rid of extending JerseyTest, you can just register the MultiPartFeature with the client from the ResourceTestRule\njava\nresource.client().register(MultiPartFeature.class).target(..)...\nFor the ResourceTestRule (server) configuration, instead of trying to register the MultiPartFeature with the configure method of the JerseyTest (which you got rid of), you should do something like\njava\n@ClassRule\npublic static final ResourceTestRule resources = ResourceTestRule.builder()\n        .addResource(new ServerSideResource())\n        .addProvider(MultiPartFeature.class)\n        .build();\nHere's a complete test\n``` java\npublic class MultiPartTest {\n@ClassRule\npublic static final ResourceTestRule resource = ResourceTestRule.builder()\n        .addProvider(MultiPartFeature.class)\n        .addResource(new TestResource())\n        .build();\n\n@Path(\"test\")\npublic static class TestResource {\n    @POST\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public String post(@FormDataParam(\"test-data\") String testData) {\n        return testData;\n    }\n}\n\n@Test\npublic void testClientMultipart() {\n    final FormDataMultiPart multiPart = new FormDataMultiPart()\n            .field(\"test-data\", \"Hello Multipart\");\n    final String response = resource.client()\n            .register(MultiPartFeature.class)\n            .target(\"/test\")\n            .request()\n            .post(Entity.entity(multiPart, multiPart.getMediaType()), String.class);\n    assertThat(response, is(\"Hello Multipart\"));\n}\n\n}\n```\n. Look at the current (9.3) auth documentation. 1.x auth seems to be pretty much backward compatible with the latest 9.3, at least from what I can tell. So that documentation should still be good. There's really not much change. If you look at the Basic Authentication section, you'll see the three main providers you'll want to register and how to register them.\nAnother thing is you will need to make your principal class implement Principal, which I don't think was the case in 0.8.x\n. Haven't tested, but I'll take your word for it that it doesn't work. In which case, it looks like the bug was fixed, but not for all cases, i.e. for this particular case when being registered through a DynamicFeature as an instance (or maybe that's by design - who knows). Normally when components are registered through ResourceConfig#register (by class or instance), they will be injected by Jersey. I guess in the case of being registered in the DynamicFeature (as an instance) this is not the case. It would work though if it was registered as a class in the DynamicFeature. But that's not really an option in this case.\nOne solution I can see is to do something like this and explicitly inject it.\n. @victornoel yeah  it's pretty much the same reason. The session would need to be re-implemented to be a proxy. Or create your own factory for the session and make it a proxy yourself.\n. @victornoel Th problem is not that you want the filter to be registered as a class, it's that you want the filter to be injected. Without creating a whole new feature that would support this use case, trying to allow passing a class would require changing the current API(s). Neither of these are required though if your main objective is just to solve this specific problem of the injections.\nTo solve the main problem of the injection, we could just explicitly inject the filter, the same way as proposed in the link I previously provided. \njava\n@Override\npublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n    final ServiceLocator locator = ServiceLocatorProvider.getServiceLocator(context);\n    locator.inject(authFilter);\n   ...\n}\nThis won't have any effect on the current filter implementations that don't require any injections. And no changes need to made to any APIs.\n. I see now. I don't see anything wrong with that. You should make a PR.\n. One thing to note though is that there really isn't any difference between registering the filter as a class or as an instance, as far as the behavior is concerned. The only difference is the lack of injection.\nSo there's a couple of choices.\n1. Explicitly inject\n2. Overload the constructor.\nPros/Cons\nExplicit Injection\n- (pro) No extra constructor\n- (con) explicit injection instead of letting framework handle it\nOverload\n- (pro) Letting the framework handle creation and injection\n- (con) Overload may be confusing and misused.\nWhat are your thoughts @victornoel ?\n. \"add as less as possible extra code inbetween dropwizard and jersey\" @victornoel I'd have to agree. I guess we can agree the constructor (with documentation) is the winner.\nOne other thing. There was a PolymorphicAuthDynamicFeature added in 1.0.0, which allows for the use of multiple exclusive authentications. Should we also update this to allow for classes, or just leave it until someone actually requests for it? I'm pretty much for the latter. Any thoughts on this @evnm ?\n. Let's take a step back and take a look at how all these components interact. Maybe this will shed some light on how to proceed.\nSo the components involved with the AuthDynamicFeature don't actually do any authorization. What actually does the authorization, is Jersey's internal RolesAllowedRequestFilter that gets registered in the RolesAllowedDynamicFeature. If you look at the code for the RolesAllowedRequestFilter, you'll see that all it does is get the SecurityContext and call its isUserInRole method.\nThe SecurityContext gets set up in the AuthFilter, which gets invoked just before the RolesAllowedRequestFilter. After the authentication, the AuthFilter creates a SecurityContext with the Authorizer. The SecurityContext#isUserInRole simply delegates to the Authorizer#authorize method\njava\nrequestContext.setSecurityContext(new SecurityContext() {\n    @Override\n    public boolean isUserInRole(String role) {\n        return authorizer.authorize(principal.get(), role);\n    }\n});\nSo with any AuthFilter, no matter how it's registered, whether directly through Jersey\njava\nfinal BasicCredentialAuthFilter filter\n        = new BasicCredentialAuthFilter.Builder<PrincipalOne>()\n                .setAuthenticator(authenticatorOne)\n                .setAuthorizer(authorizer)\n                .buildAuthFilter();\nenv.jersey().register(filter);\nenv.jersey().register(RolesAllowedDynamicFeature.class);\nOr through the AuthDynamicFeature\njava\nfinal BasicCredentialAuthFilter filter = ...\nenv.jersey().register(new AuthDynamicFeature(filter));\nenv.jersey().register(RolesAllowedDynamicFeature.class);\nthe AuthFilter will set up the SecurityContext properly for the RolesAllowedRequestFilter.\nThe problem with registering the filter directly through Jersey is that it gets invoked for all resources endpoints. That is why we use the AuthDynamicFeature; so that the feature can determine which endpoints it should be registered with. That's really the only role of the AuthDynamicFeature.\nThe RolesAllowedDynamicFeature does something similar. It has its registration algorithm to determine which endpoints should get the RolesAllowedRequestFilter registered, based on the authorization annotations. Because of this, if the filter is registered with an endpoint for which we do not have an AuthFilter also registered, then the authorization will fail, as the SecurityContext never gets set up.\nAll that being said, without changing anything, it is still possible to use the PolymorphicAuthDynamicFeature and still have authorization. The PolymorphicAuthDynamicFeature will register the authentication filter for each endpoint with an @Auth principal parameter\njava\n@GET\npublic Response get(@Auth SomePrincipal principal) {}\nIf we want authorization on the same endpoint, we can just add a @RolesAllowed annotation, and the RolesAllowedDynamicFeature will automatically register the authz filter for this endpoint.\njava\n@GET\n@RolesAllowed({ \"ADMIN \"})\npublic Response get(@Auth SomePrincipal principal) {}\n@evnm Let's try and break down you points of worry.\n\nIn such cases, use of the RolesAllowed annotation would require consumers to be diligent in exhaustively configuring their AuthFilters with Authorizers that enforce the desired role policy. Omission of a AuthFilterBuilder.setAuthorizer() call for a given AuthFilter would result in that filter's Principal type being handled by the default PermitAllAuthorizer\n\nAs mentioned previously the XAuthDynamicFeature's role is simply to determine which endpoints should get registered an authentication filter. The RolesAllowedDynamicFeature, is what actually registers the authorization filter based on the Roles annotations.. So in the current state, your same worry applies to just using the AuthFilter, with or without an XAuthDynamicFeature. If the user register the RolesAllowedDynamicFeature and doesn't register an Authorizer, then yes, it will use the default PermitAllAuthorizer. \njava\nfinal BasicCredentialAuthFilter filter\n        = new BasicCredentialAuthFilter.Builder<PrincipalOne>()\n                .setAuthenticator(authenticatorOne)\n                //.setAuthorizer(authorizer)  // no authorizer\n                .buildAuthFilter();\nenv.jersey().register(filter);\nenv.jersey().register(RolesAllowedDynamicFeature.class);\nHere is the problem you are worried about. It applies to all cases. It doesn't matter what filter is registered or in what way. If the user fails to register an Authorizer, and they register the RolesAllowedDynamicFeature, then the RolesAllowedRequestFilter will ultimately call the PermitAllAuthorizer. It is up the user to understand this about the architecture in general, not just in regards to using an XAuthDynamicFeature.\nLet's look at the point I was making about using the registration algorithm that's used in the AuthDynamicFeature, also for the PolymorphicAuthDynamicFeature. But let's first examine the current implementation of the AuthDynamicFeature and see how it determines which endpoint should get registered the authentication filter\n``` java\n@Override\npublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n    final AnnotatedMethod am = new AnnotatedMethod(resourceInfo.getResourceMethod());\n    final Annotation[][] parameterAnnotations = am.getParameterAnnotations();\n    //@DenyAll shouldn't be attached to classes\n    final boolean annotationOnClass = (resourceInfo.getResourceClass().getAnnotation(RolesAllowed.class) != null) ||\n        (resourceInfo.getResourceClass().getAnnotation(PermitAll.class) != null);\n    final boolean annotationOnMethod = am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class) ||\n        am.isAnnotationPresent(PermitAll.class);\nif (annotationOnClass || annotationOnMethod) {\n    context.register(authFilter);\n} else {\n    for (Annotation[] annotations : parameterAnnotations) {\n        for (Annotation annotation : annotations) {\n            if (annotation instanceof Auth) {\n                context.register(authFilter);\n                return;\n            }\n        }\n    }\n}\n\n}\n```\nSo we can see there are two types of checks\n1. Check if the endpoint or it's class has any authorization annotations.\n2. Check if the resource method has an @Auth parameter.\nThese checks are mutually exclusive, with the authorization annotations taking precedence. This kind of makes sense because when we are using the RolesAllowedDynamicFeature, it will register its authorization filter for all resource/methods annotated with the authorization annotations. So we should make sure to register authentication, attempting to use the same registration algorithm as the RolesAllowedDynamicFeature. This way there is always authentication to set up the SecurityContext for the Jersey filter to call.\nIf there are no authorization annotations, then just having an @Auth parameter is enough to register the authentication filter. In this case, whether or not we use the RolesAllowedDynamicFeature doesn't matter, as the RolesAllowedDynamicFeature on registers authorization when authorization annotations are present.\nBut the @Auth annotation isn't the only we to enable authentication. We can simply annotate classes/methods with @PermitAll. This also kind of makes sense. Just because we have authentication doesn't always mean we need access to the principal. So with @PermitAll, whether or not we have an @Auth parameter, there is authentication.\nNow with all that said, how does this effect the PolymorphicAuthDynamicFeature?\nWell for one, I don't think it's feasible to allow the case of just using @PermitAll by itself. There's no way to determine which filter should get registered. Actually this is the case for all authorization annotations.\nSo that brings us to the point of how do we sync the registration of the authentication filter with the registration of the authorization filter by the RolesAllowedDynamicFeature, just like the AuthDynamicFeature does?\nWell now that I think about it, I don't see how it's possible. The AuthDynamicFeature doesn't take the @Auth annotation into consideration, when registering by looking for authorization annotations. Remember I said they are mutually exclusive in the current implementation. With the poly feature we would need to somehow combine these two checks. And I'm not sure it really makes much sense to do so, or may add way too much complexity.\nI guess sometimes you need to write your thoughts down to disprove your own theories :-)\nSo I guess that still leave us with the main problem about how do we get authorization with the poly feature? As mentioned above, just adding the authorization annotations on the resource method, along with using the RolesAllowedDynamicFeature is enough.\nI guess for now we should just document how it could/should be done. I propose maybe something along the lines of\n\nTo use authorization with the PolymorphicAuthDynamicFeature, you need to register the RolesAllowedDynamicFeature with Jersey/DropWizard. Unlike when using the AuthDynamicFeature, where authorization annotations are allowed on classes, only methods (with corresponding @Auth principal parameters) should be annotated with @RolesAllowed\njava\n@GET \n@RolesAllowed({ \"ADMIN\" })\npublic Response get(@Auth MyPrincipal principal) {}\nThe PolymorphicAuthDynamicFeature MUST NOT be used with the AuthDynamicFeature. Only one should be used. Using both will cause undesired behavior.\n\nAlong with the basic usage of the PolymorphicAuthDynamicFeature in the documentation, I think the above should give users enough information to get started.\nAll of this is up for discussion. All the above provided information is to help others get a better picture of what's going on. If we're in agreement that the current implementation should just be left alone, and just documented, I guess all that's left is to document the poly feature.\nI've provided a complete test case in this gist. Nothing is modified. Simply adding the authorization annotation along with the RolesAllowedDynamicFeature is enough to get it working correctly.\n. @evnm I ended up just adding a section in the main documentation. Seems more fitting there. Also removed the sentence in the javadoc about using the AuthDynamicFeature\n. Resolved with #1637\n. Are you using the HK2 Guice bridge? If so, make sure the version matches the HK2 version pulled in by Jersey. The easiest way to check, if you are in your IDE, is to simply remove the Guice bridge, look at your dependencies in the IDE, look for HK2 and see the version the HK2 jars are. For the most part, all the HK2 jars should be the same version. That will be the version of the bridge you will want to use. Or you can just mvn dependency:tree and see that way. \n. The problem is that non-prematching filters are not called before the sub-resource locator method is called. At this point, the resource method has not been matched yet, so the filter is not called yet either. It gets called just prior to the resource method being called. And the authentication filter is what will set the Principal in the SecurityContext. When there is no Principal for the parameter injection, you will see this error message.\nhttps://github.com/dropwizard/dropwizard/blob/7acede06f2df73f1db80461e44ba23708eb6bdd5/dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalContainerRequestValueFactory.java#L17-L24\n. ",
    "earzur": "thank you @psamsotha, very helpful !\n. ",
    "nishantshobhit": "@earzur @ivanjeukens did you guys manage to solve this problem?\n. ",
    "roblittle": "I had a similar issue, when updating an DW API from 0.7.1 to 0.9.2 (with oauth2 auth, and almost 300 unit tests, about 1/2 of which tested various resource endpoint POST/PUTs,) which - revealed this same issue described above.\nMy Application.java had the environment.jersey().register() of the new AuthValueFactoryProvider and the newDynamicFeature hooks, both with the proper token object.  \nHowever - because my API worked when compiled with -DskipTest=true, and my issue was just in programmatic execution of unit tests... i dug deeper into my ClassRule annotation in my resource tests. \nThat was where i was only registering the AuthDynamicFeature and NOT the AuthValueFactoryProvider.  \nI added the registration to the ClassRule for each unit test, and i was back to all tests passing.\n. ",
    "mdeanda": "I ran into a similar issue simply importing the wrong annotation:\nimport javax.websocket.server.PathParam;\nimport javax.ws.rs.PathParam;\nIt may not be the case for you but I lost a few days on it.. ",
    "bhavneet91": "@mdeanda Thanks your comment helped!. ",
    "Sushisource": "Ah, ok. That said, I get read timeouts from something that takes more than 500ms to respond without my manual workaround, but I don't timeout with the workaround -- so something still seems fishy.\n. ",
    "joaocenoura": "Sorry, just had the opportunity to dig deeper now.\nThe problem seems to be in io.dropwizard.cli.ConfiguredCommand, particularly in:\nprotected void cleanup() {\n    if (configuration != null) {\n        configuration.getLoggingFactory().stop();\n    }\n}\nIf I comment configuration.getLoggingFactory().stop(); IntegrationTest loggers and works as supposed.\nWould be really nice to add a feature that would skip stopping LoggingFactory, something like passing a flag in RULE.getApplication().run(...) or providing a variable in the test-example.yml. I don't mind implementing a solution after discussing the best approach.\n. ",
    "amdw": "I hit this problem also, and lost quite a bit of time trying to work out why logging wasn't working as expected.\nOne way to work around it is to call the configure() method on the LoggingFactory again immediately after the run(\"db\", \"migrate\", ...) call. This puts the appenders back so logging starts working again:\n@BeforeClass\n    public static void migrateDb() throws Exception {\n        RULE.getApplication().run(\"db\", \"migrate\", CONFIG_PATH);\n        RULE.getConfiguration().getLoggingFactory().configure(RULE.getEnvironment().metrics(), RULE.getApplication().getName());\n        LoggerFactory.getLogger(IntegrationTest.class).info(\"Try it now! *****\");\n    }\nWhen I do indeed see that message in the output:\nINFO  [2016-10-20 14:19:17,896] com.example.helloworld.IntegrationTest: Try it now! *****\nOne thing we could do is add this configure() line to the IntegrationTest in dropwizard-example, so that at least people who use that test as a model for their own don't also lose time puzzling over this. However this is obviously not an ideal fix.\nThe root cause of the problem is that there seems to be an assumption in the command run() methods that once they exit, the process will also exit. (Otherwise, what could justify stop()ping the LoggingFactory in ConfiguredCommand.cleanup() as @joaocenoura pointed out?)\nEither:\n1. This assumption is valid, in which case the example IntegrationTest should not call run(\"db\", \"migrate\", ...) to set up the database schema before the test, and should do it some other way instead (perhaps just adding a run() flag as @joaocenoura suggested), or\n2. The assumption is invalid, in which case ConfiguredCommand should not stop() the LoggingFactory in the way it does now.\nI'm fairly inexperienced with DropWizard, so it would be great if someone in a position to do so could say what sort of PR is likely to be accepted to address this, if any.\n. @nickbabcock - thanks very much for looking at this.\nUnfortunately it's not at all easy to test DropWizard logging, because the DefaultLoggingFactory wraps all configured appenders in async appenders, so my initial attempts suffered from nondeterministic interleaving of the test assertions and the async appender flushing. (I don't know whether that was the problem with your attempt.)\nI did put together the following:\nhttps://github.com/amdw/dropwizard/commit/8452c2f787e7e70e7dd021b5026be44c46d41670\nThis relies on a Thread.sleep() to try to make sure the async appender gets flushed before the assertions run, so it is not really committable as-is, but it does reproduce the behaviour reliably for me.\nTo do this properly, I think it would be necessary for the test app configuration to specify some alternative to DefaultLoggingFactory which makes the appenders synchronous so that the logging behaviour can be tested deterministically.\nI hope this helps.. ",
    "Rsgm": "I noticed on http://dropwizard.github.io/dropwizard/0.9.0-SNAPSHOT/docs/manual/auth.html, that the oauth2 configuration sets prefix SUPER SECRET STUFF. The previous configuration for basic auth sets the realm to SUPER SECRET STUFF.\nThe oauth2 prefix configuration should be included, and set to Bearer.\nPrefix defaults to Basic, but it would be a good idea to set the prefix on basic auth documentation. At the very least this would help understand it is being set and used for basic auth as well.\nIt is also worth noting that @RolesAllowed may be set on types, but Dropwizard auth only looks for @RolesAllowed on methods.\n. ",
    "JamesXNelson": "What I generally do in your situation is \"fake static\" using @Before and @AfterClass.  You can make your instance field for the server null, and guard it behind a server() method which does a null check, inits the rule, and calls its .before().  In your @AfterClass you can teardown the server via server().after();\nWrap that up in an abstract class, and use stub methods to configure your server.\n. So, basically, any other framework that is also opinionated about logging won't work in dropwizard?\n. ",
    "AndresGuerraMax": "Sorry, it seems that @NotNull should be used instead of @NotBlank; that was a misleading error message.\n. ",
    "profes": "Done\n. Done\n. Travis build failed in some strange place. All tests pass on my machine. Can you rerun it on travis?\n. True. Fixed here https://github.com/dropwizard/dropwizard/pull/1194\n. ",
    "gregw": "Gzip handling has been moved to a new interceptor architecture so that it works correctly with all async IO modes.\nThere is no similar interceptor yet on the input side.\nI'll look at making this interception point in the near future, but it would be good to have somebody from the dropwizard team to collaborate with when creating a gzip input handler\n. Ignore this comment. @joakime  pointed out that gzip is done with Content-Encoding not Transfer-Encoding. Stand by for a fix in gziphandler\n\n@nickbabcock good question. \nHowever, if you look at the RFC: https://tools.ietf.org/html/rfc7230#section-3.3.3 you see \nIf a Transfer-Encoding header field is present in a request and the chunked transfer coding is not the final encoding, the message body length cannot be determined reliably; the server MUST respond with the 400 (Bad Request) status code and then close the connection.\nIf a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length.  Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error.  A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.\nSo a valid request should not have both a content-length and a transfer-encoding field, thus there should not be a need to remove content-length.  Recent versions of jetty do apply this condition and will respond with a 400 if both are present.\n. ",
    "dylanscott": "@carlo-rtr is this a reasonable change? I wasn't sure if this was deliberately left out initially.\n. ",
    "jtmelton": "Just wanted to leave a note here describing what the issue was: maven had a corrupted download a the servlet-api jar which was causing this error. That error didn't show up until I did another fresh checkout, and then tried to build the full project. Deleting the jar from my local repo and re-downloadng it solved the problem. Hopefully this will help anybody who runs across the same issue.\n. Yes, this seems like a reasonable approach to me.\n. ",
    "kkrushnyakov": "\nAdded JerseyIgnoreRequestUserAgentHeaderFilter (ClientRequestFilter implementation) setting ignoreUserAgent flag in org.glassfish.jersey.client.ClientRequest to true\nUpdated DropwizardApacheConnector not to skip User-Agent header.\n. Hello! I've made all corrections mentioned in your comments. Can you merge my fixes, please?\n. Hello. I have added unit test you asked for. Can you check it and include this issue in 0.8.3 milestone to get it available with 0.8.3 release please? \n. Done\n. Done\n. \n",
    "BernhardBln": "Thanks for the link, joshi!\n. Guys, sorry I have to get back to this - I still can't make it work. (Using Dropwizard 0.8.1, by the way).\nI annotated my ContainerRequestFilter like this:\n@Provider\n@Priority(Priorities.AUTHORIZATION)\npublic class PrivilegeRestrictionFilter implements ContainerRequestFilter\nAnd it still doesn't work (even if I put a priority of 15000), the Dropwizard Authentication is executed after this filter.\nAnd when I look into the dropwizard-auth package, I actually don't see a Filter there...\nBernhard\n. ",
    "ruimateus": "After further investigation, it seems that InstrumentedHttpClientConnectionManager shuts down the pool for an unknown reason:\nDEBUG [2015-07-11 14:12:44,652] org.apache.http.impl.conn.HttpClientConnectionOperator: Connecting to ****/****\nDEBUG [2015-07-11 14:12:44,652] org.apache.http.impl.execchain.MainClientExec: Connection discarded\nDEBUG [2015-07-11 14:12:44,652] org.apache.http.impl.conn.DefaultManagedHttpClientConnection: http-outgoing-6409: Close connection\nDEBUG [2015-07-11 14:12:44,652] com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager: Connection released: [id: 6409][route: {s}->****:443][total kept alive: 0; route allocated: 7 of 1024; total allocated: 21 of 1024]\nDEBUG [2015-07-11 14:12:44,653] com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager: Connection manager is shutting down\nAfter this point, any HttpClient call, returns an exception _java.lang.IllegalStateException: Connection pool shut down_\nPoolingHttpClientConnectionManager shuts down on close() and finalize() method.\nWhen does Dropwizard closes the CloseableHttpClient?\nThanks\n. ",
    "edenman": "@nickbabcock I'm already using dropwizard-java8 (it's great!) but it doesn't solve this problem.\n@arteam #1112 looks like it would almost work.  Main issue is that I'd need to avoid that constructor call to Jackson.newObjectMapper() entirely (presumably by implementing a ProvidesCustomObjectMapper interface on the Application that's passed into Bootstrap's constructor).\n. @arteam does that approach sound ok?  Any preference on what that ProvidesCustomObjectMapper interface's name?  Once I get the go-ahead I don't mind writing up the PR.\n. If we're being opinionated, then maybe the answer to all of this is to just get rid of Joda-Time entirely in 2.0.  Force people to upgrade to java8 time (if the creator of Joda thinks the java8 stuff is better, I believe him).  Or at least remove the hard joda-time dependency and allow people to add the dependency themselves if they really really don't want to migrate?\n. ",
    "nicoruti": "I'm facing the same issue as @ToastShaman (using dropwizard v0.9.1): the archivedFileCount does not trigger the removal of old files when using in conjunction with maxFileSize.\nThis leaves either the option to have one infinite large log file or infinite many log files, which are both not very useful for production-use.\n. @arteam Thanks for your hint with the date-pattern. Removing the date solves the issue. :+1: \n. ",
    "esigma5": "I ran into the same problem and would like to have the feature of combining maxFileSize and archivedFileCount, as @ToastShaman offered\n. ",
    "wedgwoodtom": "I think this is still open.  I have the same issue and see no way to configure tcp proxy protocol support in dropwizard although Jetty supports it via a startup module.  \nFor ex, java -jar ../jetty-distribution/start.jar --module=webapp,deploy,proxy-protocol\nIs there some way to configure this?  Dropwizard encapsulates the jetty configuration, so I am trying to determine how to configure this option if it is possible.\n. ",
    "ssesha": "One way around this currently is to create and register another command which is a clone of the Server Command. I just changed the run method to add the ProxyConnectionFactory like so:\n```\nprotected void run(Environment environment, Namespace namespace, T configuration) throws Exception {\nfinal Server server = configuration.getServerFactory().build(environment);\ntry {\nserver.addLifeCycleListener(new LifeCycleListener());\ncleanupAsynchronously();\n//Enable proxy protocol parsing for all connectors\n  for (Connector connector : server.getConnectors()) {\n    if (connector instanceof ServerConnector) {\n      ServerConnector serverConnector = (ServerConnector) connector;\n      LOGGER.info(\"proxy protocol parsing enabled on {} port {}\", serverConnector.getName() , serverConnector.getLocalPort());\n      serverConnector.addFirstConnectionFactory(new ProxyConnectionFactory());\n    }\n  }\nserver.start();\n} catch (Exception e) {\n  LOGGER.error(\"Unable to start server, shutting down\", e);\n  try {\n    server.stop();\n  } catch (Exception e1) {\n    LOGGER.warn(\"Failure during stop server\", e1);\n  }\n  try {\n    cleanup();\n  } catch (Exception e2) {\n    LOGGER.warn(\"Failure during cleanup\", e2);\n  }\n  throw e;\n}\n}\n```\nand registered this as a separate command in the initialize phase of my Application\n@Override\n  public void initialize (Bootstrap<ProxyConfiguration> configurationBootstrap) {\n    configurationBootstrap.addCommand(new ProxyServerCommand<>(this));\n  }. ",
    "jlordiales": "No worries @arteam. I'll try to submit a PR this week or the next one. Thanks!\n. PR created!\n. ",
    "zarub2k": "I resolved the problem by addressing the maven jar conflict. \n\ncom.fasterxml.jackson.core\njackson-databind\n2.5.1\n\nI added the above dependency in my  and the problem is resolved. This particular jar is conflicted with 2.4.4 version jar.\n. Resolved by me\n. ",
    "VinnuKVK": "Thanks buddy! :)\n. ",
    "kaydoubleu": "Had the same issue; getting the error \"com.fasterxml.jackson.datatype.guava.deser.HostAndPortDeserializer overrides final method deserialize\".\nThis could be resolved by updating to a newer version. In my case from 2.2.2 to 2.8.8.\nThank you :). ",
    "StanSvec": "For some reason Jersey is trying to use AuthValueFactoryProvider for injecting of the User instance into the method even when no authentication is used. Looks like a bug.  Do you use @Auth annotation on another method or on class level for this resource class?\n. I've located the bug and will provide fix for this.\n. That was super quick! :+1:  I wish to see such pace on commercially supported products. :) Thanks a lot.\n. ",
    "derrikcurran": "No @Auth annotations in that class.\n. ",
    "afrin216": "@nickbabcock  Addressed your comments. Thanks.\nYeah it could make the logs a little longer. But we could organise it so that only for those endpoints with restricted return types, further info such as content-types gets printed. Eg :-\nGET /abc MyResourceClass\n        Accepts  - application/json,  text/html\n        Produces - application/xml\nGET /abc2 MyResourceClass\nGET /abc3 MyResourceClass\nGET /abc4 MyResourceClass\nWould be useful atleast during debugging.\n. Eh right! Changes do look cleaner now. Thanks! :smile: \n. @nickbabcock Yes, that's it. So that consumers can copy pasting from the console directly get the context path without looking anywhere else (We have quite a few including myself). My bad. Reverted!\n. Addressed in https://github.com/dropwizard/dropwizard/pull/1683/commits/a6b55d1c1dc48646370290a0d1d6c1fa0a04f633\n. ",
    "mbknor": "We have also seen this issue when bootstrapping dropwizard apps instrumented with newrelic. This sometimes (always?) causes slf4j/logback to init slower than usuall, which causes this problem. I have a proposed fix which I will send as a pull-request soon.\n. Looks like this issue has already been fixed in v 0.9.0-rc5 - https://github.com/dropwizard/dropwizard/commit/847275afd08b217bd98c633c6c7c2d1ab84b8cc0\n. nice. For the record, here is the workaround we have created for fixing this issue related to newrelic and dropwizard 0.7 and 0.8 in production.\nhttps://gist.github.com/mbknor/34944ea4589a5fc6974c\n. ",
    "mrmanc": "@mbknor that\u2019s awesome news\u2026\u00a0thanks for the update. We\u2019ll look forward to the release. :+1: \n. ",
    "AFulgens": "@mbknor Awesome, thanks for the update, looking forward for v0.9.0 :clap:\n. ",
    "mtakaki": "This is my work around for this: I copied the class com.codahale.metrics.jersey2.InstrumentedResourceMethodApplicationListener to inside my project and the class loader will take it over the one from the metrics package. You can keep this until the fix is actually merged and added back to dropwizard.\nBTW, that fix https://github.com/dropwizard/metrics/issues/825 didn't fix the issue for me and I sent another PR for it: https://github.com/dropwizard/metrics/pull/861 Feel free to grab that file from my PR. It's working for me and I have already deployed this fix to my environment.\n. ",
    "camerondavison": "looks like this got fixed in 9.3 FYI\n. Ah, I think because of https://github.com/dropwizard/dropwizard/commit/05d3fcdb6f5e15a998b1bf68ce57d829f7c1e6fe I thought that this was new. This problem has been around for a while. Maybe you could do something like\n/*package*/ void setRequestLog(RequestLogFactory requestLog) {\n    this.requestLog = requestLog;\n}\nmaking it package local, so that jackson could use it, but not breaking any other people that are using the java apis.\n. ",
    "tjcutajar": "See https://java.net/jira/secure/ReleaseNote.jspa?projectId=10014&version=17325\n. @mattnelson Ah crap. Thanks for pointing me to that. I didn't realise logback access is configured differently.\n. @evnm @arteam On review this looks a bit trickier than just removing the prepareForDeferredProcessing() call. If you run the hello world application in dropwizard-example for instance and hit the /hello-world resource the logging of the requests themselves become inconsistent.\n. There seems to be another race to call appendLoopOnAppenders in RequestLogImpl and AsyncAppenderBase where they both end up calling doAppend in  UnsynchronizedAppenderBase.\n. Yeah a reproducer would be nice. I will report back if I manage to write a failing test.\n. Since this is not really reproducable anymore as the fix attempt was reverted in 1.0.2 i'll describe the original problem. If you define a custom request logFormat, e.g %reqAttribute{someAttibuteName}, and set a corresponding request attribute the expected value gets logged intermittently.\n. This is a duplicate of #1686 \nApologies that perhaps the title and description of it is not clear. Considering the state of request logging is actually worse than it was before it makes sense for #1678 to be reverted.\n. There isn't any impact of the API change to ch.qos.logback.core.encoder.Encoder as far as I can see.\nNotes: https://logback.qos.ch/news.html. ",
    "andrejserafim": "Not really, invalid entities just propagate all the way to the resource code unless I include the above dependency. I can try replicating in a clean project if that helps.\n. After some tinkering, I found a conflicting dependency - jersey-media-json-jackson was overriding the correct dropwizard and jersey behaviour.\n. Indeed, I had to - it's overriding jersey behaviour in all manner of unexpected ways, better to do without it.\n. ",
    "harshil07": "@andrejserafim i'm running into this as well. Can you share what the solution was? Did you just exclude the jerysey-media-json-jackson lib? \n. i somewhat agree with @henryptung. It is a bit weird that it happens in different hibernate sessions. Also it leads to weird use cases where now the principal passed in to the resource is from a different session and calling accessors on foreign keys causes exceptions because the previous session has already expired but the object referenced is from that session. right now we circumvent those issues by re-querying the principal when needed.\n. Happy to test @jplock but I'm not entirely sure on how to build the module for java 8.\n. ",
    "lehcim": "Last night I was wondering how to configure Dropwizard logging with different file appenders and additivity setting. Today morning I'm reading your PR ...\nThank you very much, you made my day!\n. Here is the PR. Please forgive me if something is wrong, this is my first pull request on github...\n. I tried to disable the compression in io.dropwizard.client.HttpClientBuilder, at the end of createClient :\n``` java\nprotected ConfiguredCloseableHttpClient createClient(\n            final org.apache.http.impl.client.HttpClientBuilder builder,\n            final InstrumentedHttpClientConnectionManager manager,\n            final String name) {\n        // ....\n        if (routePlanner != null) {\n            builder.setRoutePlanner(routePlanner);\n        }\n    // because Gzip is managed at the Jersey level\n    builder.disableContentCompression() ;\n\n    return new ConfiguredCloseableHttpClient(builder.build(), requestConfig);\n}\n\n```\nand it work as expected withclientConfig.setGzipEnabled(false);\nHowever, with clientConfig.setGzipEnabled(false);, I don't see the expected Accept-Encoding: gzip in the request.... I think the header is to be added by GzipDecoder, see the first if statement:\n``` java\npublic class GZipDecoder implements ReaderInterceptor {\n    @Override\n    public Object aroundReadFrom(ReaderInterceptorContext context) throws IOException {\n        if (!context.getHeaders().containsKey(HttpHeaders.ACCEPT_ENCODING)) {\n            context.getHeaders().add(HttpHeaders.ACCEPT_ENCODING, \"gzip\");\n        }\n    String contentEncoding = context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);\n    if (contentEncoding != null &&\n            (contentEncoding.equals(\"gzip\") || contentEncoding.equals(\"x-gzip\"))) {\n        context.setInputStream(new GZIPInputStream(context.getInputStream()));\n    }\n    return context.proceed();\n}\n\n}\n```\nbut it can't work here, we are in a ReaderInterceptor, we already got the response ... if we really want to add the Accept-Encoding value at the Jersey level, GzipDecoder has to implements ClientRequestFilter as well.\nWill test it, and submit a PR if OK.\n. Here is the pull request: https://github.com/dropwizard/dropwizard/pull/1268\n. Not tested #1270 yet, but after reading the diff I think it should work OK.\nAbout the Accept-Encoding: gzip in GZipDecoder: you need to set/unset this header at the Jersey level if you want/don't want compressed responses with an client whose compression was disabled (in my PR, I have not added a boolean in the configuration). \nAnyway, in current GZipDecoder I think the add(HttpHeaders.ACCEPT_ENCODING, \"gzip\")  is dead code : we are in a ReaderInterceptor, not in a ClientRequestFilter, we already have the response, it's too late to say we accept some encoding or not.\n. Just tested it, and yes, #1270 work as expected.\nThank you !\n. ",
    "helt": "any thoughts anyone? Any hints which direction to take, so i can fix it and propose a pull request?\n. ",
    "shankyty": "Do I have to still create two repo?\n. ",
    "chrisholmes": "Will do. It looks like the exceptions that get thrown are different depending on the OS used, which is a bit frustrating.\n. I think I'm done with changes here. Everything looks to be passing, but it does seem to fall afoul of the intermittent timeout errors in tests that master is also experiencing.\n. ",
    "a14n": "sorry, I forgot to add the version. I use 0.8.2.\n. I just check with the 0.9.0-rc3 and it works well.\n@nickbabcock thanks for your help.\n. ",
    "smcwhtdtmc": "Looks good - why didn't I think of that... ;)\n. Done and pushed.\n. While I was in there, I found another edge case... I'm quite unsure what to do about this one, but that didn't stop me from trying.\nWhat do you think about https://github.com/smcwhtdtmc/dropwizard/commit/515b4d04b184d424daa55bd69c896f9c8e65bf01?\nHere are my concerns with this approach: Is there a better way to discover resource methods than the DynamicFeature? Is post(null) even supposed to reach the validator, or is that something that should be caught earlier in the stack, like post(Entity.json(null)) is?\n. (If commenting on a merged pull request is bad, apologies in advance.)\nJacksonMessageBodyProvider doesn't run in the scenario I'm talking about. .post(null) gets you a request without any Content-Type header. With no Content-Type header, ReaderInterceptorExecutor doesn't find a bodyReader, which gets you a null entity.\nBeanValidation notices the null entity (yay), but the ConstraintValidationException gets formatted like '${resourceMethod}.argN may not be null' in the current code (boo).\nYou can see this in action with the test case in the branch I linked. I was suspicious that this may just be an artifact of the way the test is set up, so I tried it on a real service (0.9.0-rc3) and got the same behavior.\n. Thanks for digging that out. It looks like the same thing. I'm convinced this isn't an exception rendering problem anymore.\n. ",
    "yiweig": "+1 for this issue, working with non-Jersey resource Hibernate DAOs and would like to just be able to attach @UnitOfWork (or something similar) to my methods to get the transaction handling.\n. ",
    "dotCipher": "Does anyone have thoughts on proper implementation?  I was thinking of employing an AOP framework like AspectJ, or even just doing something similar to the HibernateBundle where you just pass in the non-resource classes you want the transactions handled for.  Thoughts?\n. I'd be fine with whatever works with the least overhead here.  Let me know what your implementation looks like when you have it open sourced and we can see what works best for Dropwizard.\n. @mcarrierastonish Any updates?\n. ",
    "dmitrygusev": "We're doing something similar with tapestry-ioc and Tapestry's @CommitAfter\nin our backend/REST services:\nhttps://github.com/satago/tapestry-jpa-transactions/\nTapestry-IoC is a lightweight tool that can do simple AOP.\nWe're not using it with Dropwizard though, but I see no reasons why they\ncan't be used together.\nOn Saturday, September 12, 2015, Cody Moore notifications@github.com\nwrote:\n\nDoes anyone have thoughts on proper implementation? I was thinking of\nemploying an AOP framework like AspectJ, or even just doing something\nsimilar to the HibernateBundle where you just pass in the non-resource\nclasses you want the transactions handled for. Thoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1240#issuecomment-139808796\n.\n\n\nDmitry Gusev\nAnjLab Team\nhttp://anjlab.com\n. ",
    "mariokostelac": "Do we know why we're facing these issues? I'm facing similar issues on CircleCI.\n. ",
    "m8r-ubnc5g": "This was not intended as a question. It is more like a improvement to implemt sth. like a \"BeforeShutdownHandler\".\n. ",
    "ahmed-alamer": "Basically I have a resource, and I am decorating the method with @UnitOfWork when I try to interact with DAO it throws org.hibernate.HibernateException: No session currently bound to execution context\n. Any clues!? I even tried to implement my own AuthFilter and registered it after wrapping it with AuthDynamicFeature and yes, I tried without AuthDynamicFeature with no effect! The filter method never get called. So now, I am getting this JSON.\njson\n{\n  \"code\": 403,\n  \"message\": \"User not authorized.\"\n}\nThis is the filter\n``` java\n@Slf4j\npublic class BasicAuthenticationFilter extends AuthFilter {\npublic BasicAuthenticationFilter(BasicAPIAuthenticator basicAPIAuthenticator,\n                                 BasicAPIAuthorizer basicAPIAuthorizer) {\n\n    this.authenticator = basicAPIAuthenticator;\n    this.authorizer = basicAPIAuthorizer;\n    this.realm = \"SolarCoin API Users\";\n}\n\n@Override\npublic void filter(ContainerRequestContext containerRequestContext) throws IOException {\n    try {\n        String authHeader = containerRequestContext.getHeaders().getFirst(\"Authorization\");\n        log.debug(\"Got Auth Header - {}\", authHeader);\n\n        String token = new String(BaseEncoding.base64().decode(authHeader));\n        log.debug(\"Token - {}\", token);\n\n        Optional<User> userOptional = authenticator.authenticate(token);\n        if (!userOptional.isPresent()) {\n            throw new AuthenticationException(\"Fucked up token\");\n        }\n\n        User user = userOptional.get();\n        log.debug(\"Current User - {}\", user);\n\n        APISecurityContext securityContext = new APISecurityContext(\n                user,\n                authorizer,\n                containerRequestContext);\n\n        containerRequestContext.setSecurityContext(securityContext);\n    } catch (AuthenticationException e) {\n        throw new InternalServerErrorException();\n    }\n\n}\n\nprivate class APISecurityContext implements SecurityContext {\n    private final User user;\n    private final Authorizer<User> authorizer;\n    private final ContainerRequestContext context;\n\n    public APISecurityContext(User user,\n                              Authorizer<User> authorizer,\n                              ContainerRequestContext context) {\n        this.user = user;\n        this.authorizer = authorizer;\n        this.context = context;\n    }\n\n    @Override\n    public Principal getUserPrincipal() {\n        return user;\n    }\n\n    @Override\n    public boolean isUserInRole(String s) {\n        return authorizer.authorize(user, user.getToken());\n    }\n\n    @Override\n    public boolean isSecure() {\n        return context.getSecurityContext().isSecure();\n    }\n\n    @Override\n    public String getAuthenticationScheme() {\n        return \"BASIC\";\n    }\n\n}\n\n}\n```\n. @mnrasul This one doesn't work. it just redirect me to the unauth handler.\nActually, I had this working in a previous version of DW where I was doing curls and whatever client you wanna use as Basic Bas64(token:)\n. Is there a way to do header Authorization: Basic base64(token:) ?\n. ",
    "dhagge": "In case anyone else is looking for a solution to this issue the following is a viable work around:\n```\npackage com.whatever;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PushbackInputStream;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.GZIPOutputStream;\nimport com.google.common.base.Throwables;\nimport com.google.common.io.ByteStreams;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.eclipse.jetty.client.api.ContentProvider;\nimport org.eclipse.jetty.client.api.Request;\nimport org.eclipse.jetty.client.util.BytesContentProvider;\nimport org.eclipse.jetty.http.HttpHeader;\nimport org.eclipse.jetty.proxy.ProxyServlet;\nimport org.eclipse.jetty.servlets.GzipFilter;\n/*\n * Transparent proxy servlet that supports gzip\n * \n * Created by damian.hagge on 9/14/15.\n /\n@Slf4j\npublic class TransparentGzipProxyServlet extends ProxyServlet.Transparent {\npublic TransparentGzipProxyServlet(String proxyTo, String prefix) {\n    super(proxyTo, prefix);\n}\n\n/**\n * Dropwizard + jetty ProxyServlet handles proxy requests, however, if the original caller\n * sent a gzipped payload along with a \"content-encoding: gzip\" header, the header gets copied into the\n * proxyRequest but the body is not gzipped. This results in the target endpoint (e.g. the place the\n * request is proxied to) erroring out since it receives a gzip header but the body is not gzipped.\n * <p/>\n * This method customizes the request before it is proxied to gzip the body if the content-encoding specifies\n * that it should be gzipped but it is not.\n * <p/>\n * https://github.com/dropwizard/dropwizard/issues/1254\n * <p/>\n * @param proxyRequest The proxy request that will be sent on to the target endpoint\n * @param request The original request\n */\n@Override\nprotected void customizeProxyRequest(Request proxyRequest, HttpServletRequest request) {\n    String encoding = proxyRequest.getHeaders().get(HttpHeader.CONTENT_ENCODING);\n    if (StringUtils.isNotBlank(encoding) &&\n            (encoding.toLowerCase().contains(GzipFilter.GZIP) ||\n                    encoding.toLowerCase().contains(GzipFilter.DEFLATE))) {\n        try {\n            // Use a pushbackstream to look ahead and read the gzip signature from the request\n            PushbackInputStream pb = new PushbackInputStream(request.getInputStream(), 2);\n            byte[] signature = new byte[2];\n            int bytesRead = pb.read(signature);\n            if (bytesRead != 2) {\n                throw new IllegalArgumentException(\n                        \"Request has gzip content-encoding but doesn't have data (2 bytes) to be read.\");\n            }\n            pb.unread(signature); //push back the signature to the stream\n\n            if (!isGzipped(signature[0], signature[1])) {\n                log.debug(\"Request has gzip content-encoding but body is not gzipped. Gzipping...\");\n                proxyRequest.content(createGzippingContentProvider(pb, request.getContentLength()));\n            } else {\n                log.trace(\"Request has gzip content-encoding and body is already gzipped.\");\n            }\n        } catch (IOException e) {\n            throw Throwables.propagate(e);\n        }\n    }\n}\n\n/**\n * Determine, based on the first two bytes of a payload, if the payload is gzipped\n * @param b1 First byte of the payload\n * @param b2 Second byte of the payload\n * @return True if the payload is gzipped, false otherwise\n */\nboolean isGzipped(byte b1, byte b2) {\n    return (b1 == (byte) (GZIPInputStream.GZIP_MAGIC)) &&\n           (b2 == (byte) (GZIPInputStream.GZIP_MAGIC >> 8));\n}\n\n/**\n * Create a content provider that provides gzipped content\n * <p/>\n * @param source The non-gzipped source stream\n * @param sourceSize The size of the source stream\n * @return A content provider which provides gzipped content\n */\nContentProvider createGzippingContentProvider(InputStream source, int sourceSize) {\n    ByteArrayOutputStream byteOutput = null;\n    GZIPOutputStream gzipOut = null;\n    try {\n        byteOutput = new ByteArrayOutputStream(sourceSize / 2);\n        gzipOut = new GZIPOutputStream(byteOutput);\n        ByteStreams.copy(source, gzipOut);\n        gzipOut.finish(); // this writes the final gzip bytes\n\n        /**\n         * Ideally we would not copy the bytes into memory via a byte buffer here and instead do something like:\n         *\n         *     // sourceStream --> zipperOutStream(->intermediateStream -)--> resultStream\n         *     final PipedInputStream resultStream = new PipedInputStream();\n         *     final PipedOutputStream intermediateStream = new PipedOutputStream(resultStream);\n         *     final GZIPOutputStream gzipOutStream = new GZIPOutputStream(intermediateStream);\n         *     final AtomicInteger byteSize = new AtomicInteger(0);\n         *     try {\n         *         IOUtils.copy(sourceStream, gzipOutStream); // or do this in a separate thread to prevent deadlocks?\n         *     } finally {\n         *         IOUtils.closeQuietly(gzipOutStream);\n         *         IOUtils.closeQuietly(intermediateStream);\n         *     }\n         *\n         * and then return an InputStreamContentProvider:\n         *\n         *     final Pair<InputStream, Integer> inputStreamAndSize = getGzipCompressedStream(request.getInputStream());\n         *     return new InputStreamContentProvider(inputStreamAndSize.getLeft()) {\n         *         @Override\n         *         public long getLength() {\n         *             return inputStreamAndSize.getRight();\n         *         }\n         *     };\n         *\n         * however, this (above) approach doesn't seem to be working.\n         */\n        byte[] bytes = byteOutput.toByteArray();\n        return new BytesContentProvider(bytes);\n    } catch (IOException e) {\n        throw Throwables.propagate(e);\n    } finally {\n        IOUtils.closeQuietly(gzipOut);\n        IOUtils.closeQuietly(byteOutput);\n    }\n}\n\n}\n```\n. ",
    "archanmishra": "we are facing the same issue with a lot of our DB threads going in abandoned state .\n. ",
    "anandagarwaal-zz": "+1 facing the issue.\n. #1777 Fixes this issue.\n. ",
    "andersem": "https://github.com/dokku/dokku-postgres/issues/22 shows a discussion about this for dokku\n. Incredible response time!\n. ",
    "espenhoh": "Yes works :). Thanks a lot! There are a lot of tests breaking, is it normal?\n. I am not familiar with Travis CI or continuos integration, is it something I should look into?\nBut then I guess it's under control and I will build dropwizard without tests\n. ",
    "bripkens": "You can use WebSockets with Jetty using the org.eclipse.jetty.websocket.servlet.WebSocketServlet and the configure method:\n@Override\n  public void configure(WebSocketServletFactory factory) {\n    factory.setCreator(dataSocketCreator);\n  }\n. What do you think should a WebSocketEnvironment do?\n. @jplock: Changed the package name. Sorry for that!\n. Done\n. ",
    "fexbraun": "Hi, can you please attach an example.\n. Hi Jochen, \nYes, on a new machine with a new workspace these tests were failing.\nMy default locale is \"de_DE\" when the tests are executed within eclipse, and then they fail.\nWhen I execute the tests via mvn test the default locale is \"en_US\" and the tests are fine.\n. @joschi works fine for me.\n. @joschi works fine for me.\n. Hi,\nReturn of empty map was introduced to simplify usage of mustache views module: \n\"It's awkward to demand configuration from apps, even when they don't have any need to override the defaults.\"\n\"You can pass configuration through to view renderers by overriding getViewConfiguration:\"\nSee:  https://dropwizard.github.io/dropwizard/manual/views.html\nAnd +1, I like the idea of enabling hot-deployment during development.\n. It's the CliTest, isn't it?\nIt's failing due http://jira.qos.ch/browse/LOGBACK-397 which a Logback user reported in 2012 and wich is not fixed yet.\nIn io.dropwizard.logging.DefaultLoggingFactory.stop() Artem added a lock to avoid some CMEs, which is obviously not enough to workaround LOGBACK-397 completely. \nI would guess, that it could be hard to fix the root cause. It's not very elegant but an option would be to catch/log/ignore the CME in io.dropwizard.logging.DefaultLoggingFactory.stop(). Question: Should we retry the call one time?\nOther option would be not to touch any production code, but catch the exception in the test.\n. I can see @nickbabcock 's point, although it is working on my machine.\n@joschi the tests are about correct rendering of the views, not about git's line ending settings. \nSo why not removing the line ending from the templates as suggested in\nhttps://github.com/dropwizard/dropwizard/pull/1287\nand\nhttps://github.com/dropwizard/dropwizard/pull/1286\n?\n. \n. Hi @nickbabcock, let me pull up my comment from the commit to this PR:\nJustification:\nIn general: lean software development - don't keep long lists of ancient items which will never be done.\nConcrete:\n- AbstractServerFactory also tested via DefaultServerFactoryTest,\n  SimpleServerFactoryTest\n- DefaultServerFactory already has a Test\n- Environment Test cost/benefit is arguable\n- getApplicationContext() is out and public now, we can't change it\n- Commented code in HttpsConnectorFactory not needed for 2 years now, commented code is a burden not a help\n. ",
    "maffe": "@nickbabcock Such exceptions happen when the model has invalid annotations, for example:\n``` java\n@XmlRootElement\npublic class Customer {\n  private Integer customerNumber;\n@XmlID // can only be used on strings\n  public Integer getCustomerNumber() {\n    return customerNumber;\n  }\npublic void setCustomerNumber(final Integer customerNumber) {\n    this.customerNumber = customerNumber;\n  }\n}\n```\nLog entry (with the proposed extended logging):\nERROR [2015-10-15 13:37:47,615] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: 284fe2ebbaa1a788\n! com.sun.xml.internal.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions\n! at com.sun.xml.internal.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:91) ~[na:1.8.0_60]\n! at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:445) ~[na:1.8.0_60]\n! at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:277) ~[na:1.8.0_60]\n! at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:124) ~[na:1.8.0_60]\n! at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$JAXBContextBuilder.build(JAXBContextImpl.java:1123) ~[na:1.8.0_60]\n! at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:147) ~[na:1.8.0_60]\n! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60]\n! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60]\n! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]\n! at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]\n! at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:247) ~[na:1.8.0_60]\n! at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:234) ~[na:1.8.0_60]\n! at javax.xml.bind.ContextFinder.find(ContextFinder.java:462) ~[na:1.8.0_60]\n! at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:641) ~[na:1.8.0_60]\n! at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:584) ~[na:1.8.0_60]\n! at org.glassfish.jersey.jaxb.internal.AbstractJaxbProvider.getStoredJaxbContext(AbstractJaxbProvider.java:311) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.jaxb.internal.AbstractJaxbProvider.getJAXBContext(AbstractJaxbProvider.java:296) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.jaxb.internal.AbstractJaxbProvider.getMarshaller(AbstractJaxbProvider.java:263) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.jaxb.internal.AbstractJaxbProvider.getMarshaller(AbstractJaxbProvider.java:230) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.jaxb.internal.AbstractCollectionJaxbProvider.writeTo(AbstractCollectionJaxbProvider.java:266) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! ... 55 common frames omitted\n! Causing: javax.ws.rs.InternalServerErrorException: HTTP 500 Internal Server Error\n! at org.glassfish.jersey.jaxb.internal.AbstractCollectionJaxbProvider.writeTo(AbstractCollectionJaxbProvider.java:274) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:683) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:424) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:414) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:312) ~[iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:364) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:134) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:44) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.Server.handle(Server.java:497) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [iphvp-webservice-1.0-SNAPSHOT.jar:na]\n! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]\n0:0:0:0:0:0:0:1 - - [15/Okt/2015:13:37:47 +0000] \"GET /customer HTTP/1.1\" 500 316 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0\" 421\nInstead of evaluating the Response.Status.Family, one could check if the exception is a javax.ws.rs.ServerErrorException (which extends WebApplicationException).\n. ",
    "lecummins": "This is great, I have been looking to be able to do this for a while. Just one question - is it possible to use two different session factories within a single resource method? I have a number of resources that need to be able to access user settings from one database and information from a different one. I would have thought that this would be possible since each of the DAOs takes in their relevant bundle that they will use.\n. ",
    "nathan-olson": "This totally breaks if you need to use both databases within one resource call by having the UnitOfWork value coupled directly with the bundle name.  My use case is such that I need to update a legacy database with a bit of data, but also create an entry within my new database within a POST.  However, since the transaction has to be tied to one, and only one, bundle (even if I set 'transactional' to false), then I only have context into one of my databases, making it impossible to solve my use case\n. ",
    "dineshbhagat": "It's awesome that Dropwizard hibernate supports multiple hibernate bundle.\nCould you please share document where I can use multiple bundles. I could not find any reference of this here: http://www.dropwizard.io/0.6.2/manual/hibernate.html\nI am using dropwizard-hibernate-0.9.2.jar.\nConsider I have working REST resource method for path /getResult, just that I need to use slave DB along with existing master DB for this resource.\nI am still getting exception: \n```\n! org.hibernate.HibernateException: No session currently bound to execution context\n! at org.hibernate.context.internal.ManagedSessionContext.currentSession(ManagedSessionContext.java:75)\n! at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014)\n! at io.dropwizard.hibernate.AbstractDAO.currentSession(AbstractDAO.java:36)\n! at io.dropwizard.hibernate.AbstractDAO.namedQuery(AbstractDAO.java:57)\n```\nSuggest If I am missing anything.\nReferred following site for the issue.\nhttp://stackoverflow.com/questions/30212125/no-session-currently-bound-to-execution-context\nTried,\nResourceClass method has   \n@Path(\"/getResult\")\n@GET\n@UnitOfWork\nConfiguration.class has DB related configs.\n```\npublic class MyApplication extends Application {\n private final HibernateBundle slaveHibernateBundle =\n            new HibernateBundle(TableClass.class) {\n                @Override\n                public DataSourceFactory getDataSourceFactory(Configuration configuration) {\n                    return configuration.getDataSourceFactory1();\n                }\n                @Override\n                protected String name() {\n                    return \"slave-hibernate\";\n                }\n    };\n public static void main(String[] args) throws Exception {\n        new MyApplication().run(args);\n    }\n@Override\n public void initialize(Bootstrap bootstrap) {\n        bootstrap.addBundle(slaveHibernateBundle);\n    }\n@Override\n public void run(Configuration configuration, Environment environment) throws Exception {\n     GenericDBDAO slaveDbTable = new GenericDBDAO<>\n       (slaveHibernateBundle.getSessionFactory(), \"TableClass\");\n    environment.jersey().register(new AbstractBinder() {\n            @Override\n            protected void configure() {\n                                bind(slaveDbTable).to(GenericDBDAO.class);\n                    }\n                  }\n }\n}\n```. Yes, It is correct that \nif we do not specify a value in @UnitOfWork then it considers default hibernate bundle.\nBut If I specify like @UnitOfWork(value = \"slave-hibernate\") then it consideres only slave hibernate session.\nBut, I am trying to connect to both master and slave DB within the same resource \"/getResult\".\nIs there any way to achieve this in Dropwizard-hibernate?\nPlease suggest an alternative if exists.. ",
    "yateam": "You could work this around by splitting your resource method into several parts, each of them talks to a different database. Then annotate each of these parts (functions or services) with @UnitOfWork(value = 'needed-db'). And remove the top UnitOfWork annotation from the resource method.\nit could be something like this:\n```\n@Path(\"/getResult\")\n@GET\n//@UnitOfWork -- comment this out\nResult getResult() {\n   service.talkToDb1();\n   service.talkToDb2();\n}\nclass Service {\n  @UnitOfWork(value = \"db1\")\n   void talkToDb1() {}\n@UnitOfWork(value = \"db2\")\n   void talkToDb2() {}\n}\n``. Hello, has this concern https://github.com/dropwizard/dropwizard/issues/1334#issuecomment-235998121 been addressed in any way? thanks. The following workaround might work for some cases (works for me, at least). \nExtendUnitOfWorkEventListenerand in theonEventhandler, open session (unitOfWorkAspect.beforeStart) for all requests (don't check if@UnitOfWorkis present). Also do that whenevent.getType() == RequestEvent.Type.LOCATOR_MATCHEDrather thanRequestEvent.Type.RESOURCE_METHOD_START`. That way all filters will be included in the unit of work.\nOf course, that works only if all the methods need to be transactional and only one database is going to be used (may be other factors?). But to be honest, that's a majority of simple CRUD systems.. Hi vaibhavdhawan, in my project I moved to a more traditional way of handling multitenancy - with one database and a tenant_id column in necessary tables. Although, I started as described in the first post I had to employ a more simplified approach - due to integration difficulties which I could not afford to spend time on in my relatively small project. \nAll I have is a global tenant registry (ThreadLocal<Tenant>) where I store a tenant current for a request. And the tenant filter. See here for more details: https://github.com/scottaj/dropwizard-auth-multitenancy-example. I loosely followed that implementation.. By host I mean the same thing as what javax.servlet.ServletRequest returns when its getServerName is invoked - the host name of the server. I would like to get that hostname during application configuration phase - so I pass it to some internal services - which do not serve requests (like Resource classes do) - thus do not have a direct access to a server context object.. Thanks! I actually  tried to look for similar bugs before submitting this one but did not see #1806 . Turned out that the problem is with @PathParam in a parent resource - test framework seems not be able to inject it. I guess, you may close the issue.. Yes, correct.. Seems like it had been fixed here: https://github.com/hibernate/hibernate-orm/commit/f90845c30c2a6d5e14eeafd32a4c9d321d3a55ef\nAnd the corresponding Hibernate issue is this one: https://hibernate.atlassian.net/browse/HHH-11585\nAccording to this issue the fix got only into 5.2.10. Sad.. Maybe rename the issue to Update to Hibernate 5.2.10 then?. Thanks! Yes I know about UnitOfWork proxy.\nUnfortunately such workaround could lead to issues described here:\nhttps://github.com/dropwizard/dropwizard/issues/1334#issuecomment-235998121\n. Found a workaround - haven't checked it yet, but looks promising anyway.\nIn your DAO class (assuming you use Hibernate) , add a method something like this:\n```\npublic User save(User user, Runnable afterCommit) {\n    currentSession().getTransaction().registerSynchronization(new Synchronization() {\n      @Override\n      public void beforeCompletion() {\n      }\n  @Override\n  public void afterCompletion(int status) {\n    if (status == Status.STATUS_COMMITTED) {\n      afterCommit.run();\n    }\n  }\n});\nreturn persist(user);\n\n}\n```\nThen the client might look something like this:\nuserDAO.save(user, () -> emailGateway.sendNewUserEmail()). ",
    "rgbj": "I had a look (and indeed, make us of right know) https://github.com/elastic/elasticsearch-metrics-reporter-java. I also found https://github.com/tomcashman/metrics-elasticsearch and https://github.com/dropwizard/dropwizard-elasticsearch. What I can't find in these is something akin to the class io.dropwizard.metrics.graphite.GraphiteReporterFactory tailored for elasticsearch, which would allow me to configure metrics-to-elasticsearch rather than code it in. E.g., I can't right now write:\nmetrics:\n  reporters:\n    - type: elasticsearch\n      host: some.host\n      port: 9200\nin my dropwizard app yaml configuration file. So that's what I had in mind.\n. That's what I was wondering -- will do it this way, then. Thanks for your answer, your time and dropwizard!\n. ",
    "pandaadb": "Hey,\nyes sure, this is my factory extension: \n```\n@JsonTypeName(\"hostnameFile\")\npublic class HostnameFileAppender extends FileAppenderFactory implements AppenderFactory {\nprivate static final String HACKERY = \"NO_VALUE_DROPWIZARD_HACKERY\";\npublic HostnameFileAppender() {\n    setCurrentLogFilename(HACKERY); // hackery to make validation work.\n}\n@Override\nprotected FileAppender buildAppender(LoggerContext context) {\n    RollingFileAppender appender =  (RollingFileAppender) super.buildAppender(context);\n    if(HACKERY.equals(getCurrentLogFilename())) {\n        appender.setFile(null); // set this name to null if the hackery is applied. We want this, it means there is no renaming of log files going on.\n    }\n    return appender;\n}\n}\n```\nNote the construct setting the value of the file name. This is because currentLogFilename in FileAppenderFactory is annoted with a @NotNull annotation. \nIn the create method  it resets the filename to Null. This enabled the default FileAppender to use the archive name instead. It will then create file names with the rollovername by default, not renaming any of the files when rolling over. \nIn our use case this was important because we rsync logs to our logstash deployment, and we a rename of the current log file would cause double parsing which we don't want. \nNote: you will have to enable the new factory by adding it to the services in META-INF/services so that it can be used in the yaml file. \nHope this helps, let me know if you need more info. \n. @nickbabcock \nI have looked through it and you are right. My \"hack\" only works for the correct appender since the default FileAppender does not like to have null values. \nThing is, even the RollingFileAppender explodes with the file being null. Maybe this can be a different validation. I looked through your factory and it appears that an elegant solution might be something like that: \n@ValidationMethod(message = \"File must not be null\")\n    public boolean isValidFile() {\n        return !archived || currentLogFilename != null;\n    }\nThis way, instead of validating the actual property, it validates the functionality instead. Since for the rolling appenders, the policy defines the filename. \nI hope that makes sense? \n. Hey - first time pull request. Let me know if I messed it up and/or something is missing :) That was much more convenient that I thought it would be. Might do that more often :) \n. I am closing this since dropwizard added support for logger config and separate appenders in 0.9.1\n. That is fine, but you can define your own log formats for your other loggers. Why not be able to have your own log format for request logging? \n. Hi. yeah .. no idea why that happened. My eclipse is configured to use spaces but I guess Mac just ignores that and does whatever :/ I went through it manually and replaced it with spaces where I saw tabs. \n. yep, works for me :) \n. ",
    "JensRantil": "I, too, find currently logger limitting; My usecase is that I need to have a separate file that only logs a certain logger. I need this while keeping the same loggers as usual for all other appenders.\n. > had you successfully cloned the repo in the past with fsckobjects enabled?\nNo.\n\nIs it possible this is the first time you've cloned with it turned on?\n\nThis is the first time I clone it, I think.. ",
    "vitorreis": "@joschi Happy to help =)\n. The time has passed and I already don't remember exactly in which page was the issue, so I am closing the issue.\nThanks, in the next one I will also doc which exactly is the page in order to remember and submit the fix\n. Indeed. fixed.\n. Indeed. fixed.\n. ",
    "lefloh": "How could I miss that? Thanks!\nSeems like then it could easily be solved if MustacheViewRenderer would use CacheBuilder#expireAfterWrite?\n. Yes there is a code change required. I would suggest to add a cache property to the view configuration:\nviews:\n  .mustache:\n    cache: false\nThe ViewRenderer implementations would need to bypass the LoadingCache in this case. Shall I provide a pull request?\n. Tu sum up again: If you want to recompile mustache views during local development you should create a new MustacheFactory on each request. There's no big code change necessary. An example can be found here. \n. I already proposed a solution 7 month ago. It would be nice to get some feedback or otherwise just close this issue.\n. Hi @arteam \nThanks for getting back. I opened PR 1814.\nDon't get me wrong, I know there are much more important features on your list.\nthanks\nFlo\n. ",
    "acwwat": "Hello, any update on this issue? This feature would certainly help with faster local development. Even better, this can be combined with support for loading templates from the file system which I have implemented for my own project. Can open new issue and submit PR for it if appropriate.\n. Thanks all.\n. @nickbabcock I have some questions/comments about the exception mapper change.\n1. I personally don't have a preference on ExtendedExceptionMapper over ExceptionMapper and it seems to fit the use case better anyway, so the change is OK. But just wondering - is the usage of ExtendedExceptionMapper common in JAX-RS development?\n2. For the example in App1, given that the custom exception mapper is specifically for handling MustacheNotFoundException to return a 404 error, it should be checked for instead of ViewRenderException.\n. @nickbabcock Oh and also, if we decide to use ExtendedExceptionMapper, maybe we should also update ViewRenderExceptionMapper that I added earlier to be more consistent.\n. Submitted PR #1820 with a possible implementation.\n. @nickbabcock I added a test/example to e2e on overriding the standard 503 response on missing mustache view with a 404 response.\n. That makes sense. I've removed the logging from ViewMessageBodyWriter and added the logging code to ViewRenderExceptionMapper to preserve the original exception logging behavior.\n. Suggested way is indeed cleaner. Updated code per your comments - will address the other comment regarding tests separately. Thanks.. I have created a separate test class MustacheViewRendererFileSystemTest per your suggestion. However I am contemplating whether copying the original tests is sufficient. I can create more tests by providing templates in a folder other than src/test/resources so they are surely not included in the classpath, but I am not sure if there is a convention for naming that folder (e.g. src/test/more-resources exists in another DR sub-module, is that name OK?) Just don't want to mess any existing convention up (still finding my way around submitting PRs). Please let me know your preference and I can do one more update. Thanks.. ",
    "mwhipple": "@mattnelson I should be able to get something together that I can post for you in some form if not as a directly usable artifact tomorrow. The working implementation with logback-access that I have doesn't use this change and instead extends the top level configuration object (the ugliness of which inspired the PR)\n. I'd left out extending Discoverable so the logback access module won't be as convenient to use pending https://github.com/dropwizard/dropwizard/pull/1412, but it should be able to be handled with an explicit registration of a Jackson module in the consuming service. I extracted most of the implementation and I'll publish the present state in the morning (should work but could stand cleanup) and work on info about the Jackson module when time allows.\n. @mattnelson https://github.com/mwhipple/dropwizard-logback-access - still awaiting enough time to be in a presentable state and published but at least enough to start with.\n. @ajmath To answer the question about having to use the ServiceLoader META-INF/services file: the issue is that classes normally aren't initialized until they are needed in Java (spec) so there needs to be some reference pointing to the class to have it picked up. There are different ways to do it but the ServiceLoader is standard and there's no good automatic way.\n. I've also started a (presently very thrown together) external implementation of this functionality to be loaded as a plugin. If this is going to be merged into the main project then I'll kill mine now, otherwise I'd potentially be interested in finding a way to merge the code. \n. As a disclaimer (that I'll be adding to the README) my project is code that I quickly ripped out of an app this week and would need a bit of attention before being releasable on its own. \n. IIRC, to match the existing pattern exactly may require some filtering or similar since Dropwizard builds missing values using the literal \" - \", so when there are two consecutive missing  the dashes are separated by two spaces rather than one. That was the only thing that changed in our logs after adopting the equivalent logback access pattern.\n. To speak for myself only: the functionality that motivated my team's switch to logback-access was to allow debug logging of full requests and responses and later to log additional information from the request headers (the latter may be available with DW also).\n. @ashic What I've done in older versions is create a custom server factory and change the implementation there.  Extend DefaultServerFactory, overwrite the addRequestLog method to provide logback access (possibly grabbing the updated module), and then do the Discoverable/META-INF dance\n. does the reqParameter format conversion not presently work properly?\nOn May 8, 2017 8:07 PM, \"Omar Yasin\" notifications@github.com wrote:\n\nWould there be interest in this being expanded so request attributes,\nwhich can be set using the ContainerRequestContext.setProperty would be\nusable in logback as well, or is there another preferred way of getting\nrequest-scoped data into logs?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1415#issuecomment-300024694,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA6cYH8Ng-PBBMDCm3HbgRkTNrpciTzNks5r365SgaJpZM4HFSMc\n.\n. That's what I'd expected to happen which led me to discover this. It makes sense that it's more explicit now that I know about it. \n. \n",
    "CrossfireCurt": "I am experiencing this issue on 0.8.3.\n. Looks like I was using a jackson package that was too new:\ncom.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.3\nChanged it to\ncom.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.5.1\nnow it works!\n. ",
    "pramit11": "I also faced the same issue. Found the exact reason for error. Here, jackson afterburner module version is jackson-module-afterburner-2.5.1, while jackson databind version is jackson-databind-2.6.0. Jackson afterburner directly depends on databind, hence they should be compatible version, so same version should resolve the issue, either both 2.5 or both 2.6 or later.\nIn this particular case, there is an attribute called _nullProvider, which afterburner is using from databind, and it was removed in 2.6.\n. ",
    "MalsR": "Hi All,\nWe also experienced the same problem with jackson 2.6.2 and older version of dropwizard 0.7.1 to be precise. We had the same stacktrace as @carminexx did. We reproduced this issue by having a json payload with a null value. e.g. \"exampleAttribute\": null\nUpgrading the jackson version to 2.6.5 has fixed the issue for us. I had a look at the Jackson issues list to see if there was a particular bug raised for the fix but could not find any. Does anyone else know? \nThanks\nMals\n. ",
    "nikhil578": "Upgrading to jackson version to 2.6.5 doesn't fix this problem with dropwizard 0.8.3.\n. ",
    "devindi": "Fixed this issue by updating jackson-module-afterburner like this\ncompile ('io.dropwizard:dropwizard-core:0.8.1')\n                {exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-afterburner'}\ncompile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.6.7'\n. ",
    "criccomini": "FYI I prefer this to 1304. We have use cases for Optional as well. Having to do a new argument factory for each complex type with Optional is really irritating.\n. ",
    "zacharyvoase": "Oh, I'm going to close this as (effectively) a duplicate of #1271 \u2014 the docs clarify the situation, but they do need to be pushed to dropwizard.io.\n. ",
    "narunarthy-invn": "Upgraded to Dropwizard 0.8.4 and the compression is working.\n. ",
    "ankgoyalEXP": "I am facing the same issue with com.yammer.dropwizard 0.6.2. Is there any way to fix in this repo?\n. ",
    "achaphiv": "Ah I see this was fixed in #1308.\n. Oh also, it does work if you specify the type like so:\n@GET\npublic Iterator<String> iterators() {\n  return Arrays.asList(\"foo\", \"bar\").stream().iterator();\n}\nbut I was using Object return type for these examples because I stumbled onto this problem when I needed to return a Response for setting headers.\nI.E. this started failing:\n@GET\npublic Response iterators() {\n  return Response.ok()\n      //.header(...)\n      .entity(Arrays.asList(\"foo\", \"bar\").stream().iterator())\n      .build();\n}\n. ",
    "ahus1": "I am maintaining a keycloak-dropwizard library. For my examples accessing SecurityContext directly worked. It might not work for other types of authentication.\nThe following code calls logout, but only if the user is currently logged in:\n@GET\n@Path(\"/logout\")\npublic LogoutView logout(@Context SecurityContext context) throws ServletException { \n    if (context.getUserPrincipal() != null) {\n        request.logout();\n    }\n    return new LogoutView();\n}\n. ",
    "R-Gerard": "+1 for missing the required = false flag.\nAccording to the 0.9 documentation:\n\nIf you have a resource which is optionally protected (e.g., you want to display a logged-in user\u2019s name but not require login), you need to implement a custom filter which injects a security context containing the principal if it exists, without performing authentication.\n\nI'd rather not implement a new filter just because one of my APIs has optional auth. I looked into extending OAuthCredentialAuthFilter, but its constructor is private (so the class is essentially marked final), which forces me to copy-paste the implementation.  :disappointed: \n@ahus1 's solution works for me. Perhaps this should be included in the documentation as an alternative to rolling your own auth filter.\n. ",
    "lewisd32": "I should have mentioned I was using 0.9.0, but it looks like you figured it out. Thanks! :)\n. ",
    "blommish": "Tried JDK 1.7/1.8\nBut it might be as simple as the jar does not exist on our nexus and it does not get downloaded.. \nI came to the conclusion after writing it here that the issue is not actually related to dropwizard at all..\n. But that means I do need java 1.8. Shouldn't dropwizard work fine with 1.7?\n. @joschi Hmm, I do not get this to work at all. If I understand ir correctly, the error should actually not happen when using Java 7. \nAnd running Java 8 with doclint turned off does not solve the problem\nReason: Invalid JDK version in profile 'javadoc-jdk8+': Unbounded range: [1.8 for project unknown:hk2-parent\n. @joschi I finally found it. Due to the parent pom we are using, we cannot have maven 3+, therefor using Maven 2.2.1. When running maven 3.3.3 it worked.\nThanks a lot for your help and explanations!\n. ",
    "rvs-fluid-it": "In some cases I deploy my Dropwizard applications on a JEE-container (see https://github.com/rvs-fluid-it/wizard-in-a-box) In that context  it is considered bad practice to start threads which are not managed by the application server.\nBut irrespective of the deployment scenario, I think it is a valuable feature to be able to fine tune the used threadpool (minThreads, maxThreads, ...). Also from the perspective of operations it is interesting to have all the used threadpools listed in the yml-file.\n. @mattnelson \nThe root issue I'm trying to solve is that the number of threads used by the health check thread pool is not configurable.\n. @joschi @dropwizard/committers \nI agree that an unsupported use case is not a good driver to change the codebase.\nSo back to the drawing table ...\nBut I welcome a bit of input from you.\na) Do you find it valuable, especially from an OPS point of view, that all the thread pools witch are started by Dropwizard are fine-tunable from the yml configuration file (number of threads, ...)?\nb) (Class Design) What is or should be the responsibility of the Environment class? Should it just be a dumb wrapper object or should it also contain behaviour (=instantiating a thread pool) ? In case if it also would contain behaviour, should the behaviour then be executed in the constructor?\n. ",
    "eitan101": "OK. I'll do that. A few questions:\n1. The bundle consists of instrumented Jetty websocketContainer. Do you think that I can create a pull request to the metrics repository?\n2. Could you add a reference to the official / third party bundles in the manual ?\n3. Currently the documentation does not mentioning anything about websockets. I can create a piece of documentation that show how to do it by yourself, or add link to the third party bundles?\n. @ryantenney, do you think that instrumented jetty websocketContainer should be part of the metrics repository or a third-party metrics module ?\n. I moved the project to third party repository.\n. I prefer changing returned type of getContainer(). But Christopher Elkins is thinking else\nDo you want me to fix it back or leave it as it is ?\n. OK. I changed it back to simply return Servlet instead of ServletContainter as you had suggested. This gives answer also to the rest of your comments, right ?\n. ",
    "crudbug": "@arteam this solves the issue. Thanks !\nFollowing - https://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-0.8.x-to-0.9.x\nWe need to add filter and also factory provider. \nenv.jersey().register(new AuthDynamicFeature(userBasicCredentialAuthFilter));\nenv.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n. ",
    "Allsimon": "It seems that I can reproduce this on 1.0.0-rc3-SNAPSHOT\n. Yes I can reproduce it on RC2 too\nAuthenticator looks like this:\nhttps://gist.github.com/Allsimon/84f4930e211211dfd064d40e7ddb1e56\nApplication class is :\nhttps://gist.github.com/Allsimon/5387ca3a5f8ddb487fe78daa4ddf6ad2\nFull project here: https://gitlab.com/Allsimon/Temp\n. Yes, on every request :) On the reproduction project I published, you just have to GET  localhost:8080/Sync/static and it will happens\n. Did you manage to inject field directly via dagger2 ? I can inject with constructors just fine, but fields injection clash with HK2\n. ",
    "yumingcao-okta": "Not sure why this PR is reopened, #1361 addressed this issue for me. @Allsimon you should use UnitOfWorkAwareProxyFactory when constructing authenticator.\n. ",
    "henryptung": "@arteam Should this really be closed? To me, having the Hibernate transaction not span both authentication and actual execution is actually a bug. There is an opening here where an account can be deleted between authentication and execution. This may or may not cause violation of invariants, but is at least an unexpected thing to worry about, and at worst could cause very subtle, but severe security holes (e.g. unintended reinsertion of an account object via cascading).\nWhile supporting creation of sessions/transactions in multiple places is a mostly-works approach, I'm very worried that the illusion of one-transaction-per-request (which I think is the intent of the API) can be risky.\nEDIT: To me, it makes a lot of sense to instead implement this using a paired ContainerRequest/ResponseFilter with high priority (< AUTHENTICATION); not sure though if that leaks resources in certain situations. It would, however, explicitly make the session and transaction span both method execution and filter processing, which I think is the fundamental thing of concern here.\n. ",
    "utsab-banerjee": "Hi, I am using environment.getJerseyResourceConfig().getContainerRequestFilters().add(new FilterClass(Dao)) to add a request filter but getting Hibernate exception. Same dao, when used within a resource is working fine.\n. ",
    "Pooja19934": "You can use ManagedSessionContext.bind() and then unbind after use. Pass sessionfacory instance of other hibernate bundle in the constructor dao. ",
    "rupertlssmith": "The dependency comes through org.glassfish.jersey.core:jersey-server:jar:2.22.1, and unfortunately that seems to the be latest build available in maven central.\n. This can be worked around by excluding hk2 from dropwizard, in a projects pom.xml:\n```\n\n\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-bom</artifactId>\n        <version>${dropwizard.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n    </dependency>\n\n    <!-- hk2 dependencies are excluded as there is a malformed parent pom on 2.4.0-b31. -->\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>0.9.1</version>\n        <exclusions>\n            <exclusion>\n                <groupId>org.glassfish.hk2</groupId>\n                <artifactId>hk2-api</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.glassfish.hk2.external</groupId>\n                <artifactId>javax.inject</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.glassfish.hk2</groupId>\n                <artifactId>hk2-locator</artifactId>\n            </exclusion>\n        </exclusions>                \n    </dependency>\n\n```\nThen explicitly import hk2 version 2.4.0-b33 instead.\n. Yep, same issue. I'll close this one.\n. ",
    "josephlbarnett": "Hmm interesting, if I build a new standalone minimal project, it works properly.  Something in our actual application must be conflicting with the default dropwizard provider somehow?\n. It appears that adding:\n<dependency>\n            <groupId>org.glassfish.jersey.media</groupId>\n            <artifactId>jersey-media-json-jackson</artifactId>\n            <version>2.22.1</version>\n</dependency>\nas a dependency is what causes this to break\n. https://github.com/jbarnettwomply/dropwizard-jersey-media-conflict displays the issue.  if the jersey-media-json-jackson dependency is removed, the test passes.  alternatively, if the if (false) is changed to if (true) in Java8Application.java in order to manually register a provider, the test passes.\n. rebuilding jersey-container-jetty-http with the diff applied in https://github.com/jersey/jersey/pull/243 appears to fix this issue, but not sure what other incompatibilities may lay elsewhere?\n. We found that logging was more informative (stacktraces on serializations/other internal server errors) in the Jetty implementation, and maybe a couple of other things?  It's been a while.  It also just felt weird to test against grizzly but run against jetty in actual server usage.\n. looks like this will be fixed in jersey 2.26 ( https://github.com/jersey/jersey/commit/b62aa3fb8f787fba54868e5346a837d661c2f500 ). Thanks Nick, we'll take a look -- is there an ETA for the next release of master?. fwiw, https://github.com/jbarnettwomply/dropwizard/tree/jersey-2.26 is a work in progress on updating to 2.26.  currently not high priority for us, and running into issues with hk2 providers/binders, but if someone wants to pick up from there it may or may not be a helpful starting place. Linked PR does the class-based registration (or at least will once the build is green). still a couple of PersonResource constructors to clean up -- doing so from the DropwizardTestResourceConfig isn't quite working for me yet.. Sorry for the lots-of-intermediate-versions of this PR, but the current one now both passes and does not throw any of the org.glassfish.jersey.internal.inject.Providers warnings. It's possible that we could add something like the DropwizardTestResourceConfig block that's using bytebuddy to .jersey().register() -- I'm not sure how safe or effective that would really be given the trouble I've had getting it to work (the 2 comments I added today to explain some of the changes makes me not super comfortable with that area of the work so far).   If i understood more about why the .jersey().register()s work better than the ResourceTestRule invoked registrations, I might go down that path.  But it's worth a shot, just not sure I have time to do so at the moment.. I think you're right though -- I know we do jersey().register() on resource instances, and assume other downstreams do as well.. @nickbabcock based on the comments in https://github.com/eclipse-ee4j/jersey/issues/3700 I'm not sure they're keen to fix this shortfall.  However, based on @jplock's suggestion, updated the change to be much smaller and not require downstream migrations.\nCouple semi-strange things to note, but functional and I think ok; would love feedback from someone who knows jersey/hk2 better:\n1)  Need to explicitly check for hk2 Binders (as opposed to jersey.internal Binders), as Providers.isProvider() only recognizes the jersey.internal ones.\n2)  Need to dynamically subclass the binder, as jersey appears to only actually register the first instance of a given class (ComponentBag.registerModel keys duplicates off the componentClass, and then the instance doesn't get added to the bag). there's a register(Class) method that handles that case mostly -- I suppose I could add to the exception on line 139 to check for instanceof Class in case there's something like a Collection<Object> being iterated through and registered via register(Object) , and that collection containing a Class instance. updated to check for Class instances, can look into javassist later if that's desired. Added test (which fails without the instanceof Class<?> check) and migrated bytecode instrumentation to javassist.. bumped this version to avoid https://github.com/jeremylong/DependencyCheck/issues/1394. yep, meant to have an abstractbinder here too, but missed from the diff.  still failing with that, so working through it.  pushing updated wip diff now. yep, that's where I was struggling with getting the PersonResource tests to pass & not warn, updated PR now.. Without this, the PersonResourceExceptionMapperTest is unable to instantiate a PersonResource, despite the bytebuddy enhanced binder that should be able to bind PersonResource to the constructed instance passed to the ResourceTestRule.  No idea why :(. without separating out Resources from Provider singletons, dropwizard-example's Protected*ResourceTests fail trying to bind/register a Class. updated. That's a valid question -- if there's another (safer) way to dynamically subclass the SpecificBinder, or to register it in such a way that multiple instances of it actually get bound by hk2, I'd love suggestions on that.. Also note that mockito-core and hibernate-core already both pull in byte-buddy as a dependency (mockito only in test scope though). ",
    "RobeEW": "FWIW, a work around is to turn auto discovery off:\nenvironment.jersey().property(CommonProperties.FEATURE_AUTO_DISCOVERY_DISABLE, Boolean.TRUE);\nThis needs to be done for any jersey http clients you build, too:\nnew JerseyClientBuilder(environment)\n            .withProperty(CommonProperties.FEATURE_AUTO_DISCOVERY_DISABLE, Boolean.TRUE)\n            .build('main');\n(Incidentally, doesn't everyone love double negative flags?)\n. ",
    "lazee": "Thnx @RobeEW ! Really saved my day :). ",
    "tomshen": "JSR-349 looks like the right link, so I changed the link name and URL instead.\n. ",
    "mikewatt": "I've come come across a scenario where this causes a 500, which should probably be a 4xx. I believe it is related to this change, although I'm not sure where the appropriate fix is.\nThe JSR310 module re-throws parser exceptions as JsonMappingExceptions (https://github.com/FasterXML/jackson-datatype-jsr310/blob/7eccc43bbaac9e742f80b3897256563e28812345/src/main/java/com/fasterxml/jackson/datatype/jsr310/deser/JSR310DeserializerBase.java#L60), so if the client request body contains a value that is not parseable into the necessary instance type, a 500 is generated.\nIs this fix to handle this in the exception mapper, or should the JSR310 module throw a different exception, or something else entirely?\n. Hi Nick,\nThanks for quickly taking a look at this. I think there are still cases where deserializers throw JsonMappingException (not subclasses) which would still result in a 500. For example, JSR310DeserializerBase. \nI'm not all that familiar with the code, but it seems pretty hard to distinguish a serialization exception from a deserialization exception given a JsonMappingException. Possibly checking if exception.getLocation() is non-null, but that seems a bit dodgy.\nI think for our case, we will end up implementing a custom ExceptionMapper and looking at the exception.getCause() to determine the response.\n. Sounds like the most appropriate fix (in this specific case) is changing the JSR310 deserializers to throw InvalidFormatException as necessary. With the original commit in this pull request, the exception mapper is probably doing the best it can.\n. ",
    "boncey": "I've come up with a simpler (in my opinion) way of doing layouts in Dropwizard/Freemarker.\nI've posted my solution on StackOverflow, take a look and let me know if it helps please.\nhttp://stackoverflow.com/questions/19664760/how-can-i-embed-one-dropwizard-with-freemarker-view-in-another-one/36412964#36412964\nAs an aside, it would be nice (for this) if View#resolveName could be made protected so it could be called from the TemplateView class in my solution.\n. ",
    "edwardsb": "Did you add this to your jersey environement?\n//If you want to use @Auth to inject a custom Principal type into your resource\n    environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\nWhere User.class is your Principle implementation.\n. ",
    "nate9": "Yes, I am working off of the dropwizard examples. I simply edited it to use return a sub resource for testing.\n. ",
    "badunk": "I'm running into the same issue\n. @nate9 Actually its quite silly, I just realized it actually still works - just add the Auth annotation only to the subresource\n. ",
    "parkdcom": "But sometimes you really want to check access in the root resources and not the subresources. I still think this is a regression from 0.8.x. We have the following structure \n/users/{user_id}/vehicles/{vehicle_id}\nThis is set up in two classes: UsersResource and VehiclesResource. /users/{user_id} returns the VehiclesResource. \nWe would like to set up security in the UsersResource using @Auth so we can verify if the user has access to the specified user's vehicles. We need this because the user could have an admin role, and should have access to all users. Currently we have to check permission for this in the VehiclesResource class, which seems a bit odd. \nAlso when we want to provide a /users/me endpoint, we have no access to the currently authenticated user.\n. Thanks for your fast response!\nYes, we indeed register AuthDynamicFeature:\nenv.jersey().register(new AuthDynamicFeature(\n    new JwtAuthFilter.Builder<User>()\n        .setJwtConsumer(consumer)\n        .setRealm(\"realm\")\n        .setPrefix(\"Bearer\")\n        .setAuthorizer(new ParkdAuthorizer())\n        .setAuthenticator(new JWTAuthenticator(guiceBundle.getInjector().getInstance(AuthManager.class)))\n        .setUnauthorizedHandler(new JsonUnauthorizedHandler())\n        .buildAuthFilter()));\nNote that the @Auth parameter in other cases works fine. This problem only occurs when returning sub-resources, either using an instance of the sub-resource, or statically as in the given example of Vehicles.\nMaybe the cause of this problem is related to #1352? But the OP of that issue didn't mind moving his Auth checks completely to the sub-resource. We however, for the reasons mentioned in the previous post, would like to check the authenticated user in the parent resource.. @arteam Did you already have some time to look into this? Thanks!. ",
    "conleym": ":+1: \nThat's fast turnaround!\n. ",
    "richmidwinter": "Good call, thanks!\n. ",
    "shashank261": "+1\nThanks & Regards\nShashank Harwalkar\nOn Tue, Jan 12, 2016 at 10:19 PM, Justin Plock notifications@github.com\nwrote:\n\n+1 from me\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1361#issuecomment-170971675\n.\n. \n",
    "kkamkou": "+1\n. ",
    "t-oydna": "As far as I know logback is the only native implementation of sl4j so the only possible conflict is with the adaptation layers (e.g. slf4j-log4j12).\nBTW, here is the solution I ended up with, for anyone interested (works with any framework):\n1 . Create a logback appender that redirects all its logs to your framework:\nYourAppender implements ch.qos.logback.core.Appender.Appender<ILoggingEvent>\n2 . Make this an appender in the configuration (loback.xml), probably the only one:\n<configuration>\n    <appender name=\"LoggingFramework\" class=\"package.YourAppender\"/>\n    <root level=\"DEBUG\">\n        <appender-ref ref=\"LoggingFramework\"/>\n    </root>\n</configuration>\n3 . In your Dropwizard application (applies your logback configuration at the earliest possible point):\n@Override\npublic void run(Configuration configuration, Environment environment) throws Exception {\n   LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();\n   lc.reset();\n   ContextInitializer ci = new ContextInitializer(lc);\n   ci.autoConfig();\n}\nThis has worked well for us. We lose some messages during startup, but still better than nothing.\n. Sure @zackehh , here you go:\nlogback.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n\n\n\n\n\n```\nLogbackToLog4jAppender.java\n``` Java\npublic class LogbackToLog4jAppender implements Appender {\n    @Override\n    public void doAppend(ILoggingEvent event) {\n        IThrowableProxy throwableProxy = event.getThrowableProxy();\n    if (!(throwableProxy instanceof ThrowableProxy)) {\n        // also true if throwableProxy is null\n        log(event, null);\n    }\n    else {\n        ThrowableProxy throwableProxyImpl = (ThrowableProxy)throwableProxy;\n        Throwable t = throwableProxyImpl.getThrowable();\n\n        log(event, t);\n    }\n}\n\nprotected void log(ILoggingEvent event, Throwable t) {\n    Logger.getLogger(event.getLoggerName()).log(toLevel(event.getLevel()), event.getMessage(), t);\n}\n\npublic static org.apache.log4j.Level toLevel(Level level) {\n    return org.apache.log4j.Level.toLevel(level.levelInt);\n}\n\n@Override\npublic boolean isStarted() {\n    return true;\n}\n\n@Override\npublic FilterReply getFilterChainDecision(ILoggingEvent arg0) {\n    return FilterReply.ACCEPT;\n}\n\n}\n```\nNote\nThis impementation is very ineffecient compared to creating a logger once since it has to look up the apropriate logger each time ( Logger.getLogger(...) ). It's important to set the minimum level in the logback configuration to a reasonably high level. If you set the level in log4j this appender higher than in logback this appender will look up the log4j logger for every log message, tell log4j to log and then log4j will ignore the message.. ",
    "davireis": "For the record, I have been struggling with this as well. I work around the spark problem by using my own jars from spark modified to use logback instead of log4j. It is quite a pain, but it works. However, thereare  some scenarios where spark is brought through a dependency, and it gets harder to use the same trick. For example, currently I cannot run my code in spark notebook (https://github.com/andypetrella/spark-notebook) because of this.\n. ",
    "dav009": "sorry to pollute the issue. \n@davireis similar problem around here, with a different set of libs (Storm + logback + slf4j + log4j). Essentially the same thing, just wondering if you found a better work around than having your own spark-fork \n. ",
    "socketplugs": "@dav009, this worked for me :)\njavascript\nconfigurations.all {\n    // To prevent slf4j complaining about multiple logging implementations (and failing), trick gradle into providing only a single\n    // implmentation (logback).\n    resolutionStrategy.dependencySubstitution {\n        // Substitute one module dependency for another\n        substitute module('org.slf4j:slf4j-log4j12') with module('ch.qos.logback:logback-core:1.1.3')\n        substitute module('org.slf4j:log4j-over-slf4j') with module('ch.qos.logback:logback-core:1.1.3')\n    }\n}\n. ",
    "imarios": "I really don't see why this issue is closed :(. I have nightmares every time I need to have Spark and Dropwizard work together. \n. @joschi I agree, whining doesn't help. I wish I had the bandwidth to help here. Maybe have the ticket open so that someone can help to close it? If it's closed it means that is a non issue. \n. ",
    "aliakhtar": "This is REALLY frustrating. \n. ",
    "whitfin": "@t-oydna out of interest, could you please share your Appender impl? . @t-oydna awesome, that works just fine. Interesting about the logs swallowed at startup but I too can live without those for now :) thanks!. Likewise, same issue; and it's not viable to move to the children due to the auth duplication it'll lead to.. @yp I used the @Auth on the parent resource and then passed it through to the subresource, I think.. @arteam is there a repository holding the latest snapshot of Dropwizard, or do we have to build it ourselves? \n(also, thank you greatly for this PR, works perfectly). ",
    "JohnnyMarnell": "@socketplugs 's work around is a godsend and saved me! (if you're lucky enough to be using gradle). if I use IntelliJ and setup an Application with DropWizard main, I can debug and hit breakpoints, however if I make a change (not method sig) and save, it says compilation finished, but no changes :(\n. ",
    "earlye": "Alternatively, you could use this:\nhttps://github.com/earlye/dropwizard-multi-config\n. ",
    "jansoren": "@arteam and @jplock - It was difficult to find the dropwizard archetype in the documentation. Is it possible to mention it in the \"Getting Started\"-section in http://www.dropwizard.io/ ?\n. I will make the changes and make a new pull request :)\n. @jplock - could you please take a new (code)review? :-)\n. Thanks mate :)\n\n. Just finished creating the code generator and refactored to only use jersey as you suggested @nickbabcock. You can find the plugin here - REST API Codegenerator Maven Plugin\n. The plugin is not published on maven central yet. \nFor now I've only covered the basics, and will later expand the plugin as I work on my application. Hopefully someone will create some pull requests :-)\nI do not understand why you get that error. I just cleaned my .m2 folder, cloned the plugin and ran mvn clean install. Did you add the plugin without building the jar locally?\n. The REST API Codegenerator Maven Plugin now generates ReactJS code aswell \ud83d\ude42 . @nickbabcock - as you mentioned in #1475 I have now started implementing the code-generator.\n. Thanks for the great feedback :+1:  I will look into it.\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. ",
    "eserlan": "Just run the Application.main method in IntelliJ. Remember to add server whatever.yml to the program arguments.\nThen you can run it in debug mode and it will hotdeploy your changes, as long as you dont change any signatures or some such. Then you have to restart the application. \nWay faster than running the maven commands each and every time you make a change\n. ",
    "rattrayalex": "Is hot deploy possible with Gradle?\n. ",
    "lingz": "That sounds like a fine solution if you want resource test to work out of\nthe box. Would it be possible to check if exception mappers are already\nregistered and to only register them if nothing of that type is already\nregistered?\nBests,\nLing\nOn Dec 14, 2015 3:38 PM, \"Nick Babcock\" notifications@github.com wrote:\n\n(Thinking out loud here). I think the best approach may be a\nregisterDefaultExceptionMappers in the ResourceTestRuleBuilder, which by\ndefault is enabled, and will register all the default exception mappers\nlike the registerDefaultExceptionMappers yaml setting (which is also true\nby default).\nHow does that sound?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1381#issuecomment-164416277\n.\n. \n",
    "karussell": "@joschi can you elaborate on dropwizard and guava? Why isn't guava just an optional dependency? Have read that removing them was kind of 'considered' https://github.com/dropwizard/dropwizard/pull/1365#issuecomment-162184147 at some point :). ",
    "evanj": "Hmm... I'm confused how my commit could have caused a class cast exception between two logging frameworks. I'm going to attempt to trigger a rebuild.\n. I did not know about that method; this is great. Fixed! PS. The reason I was digging through dropwizard code is because of the following blog post. I don't think the stack trace they posted is possibly the cause of their native memory leak, so I was looking for other candidates. Again: I doubt this is it, but it can't hurt.\nhttps://gdstechnology.blog.gov.uk/2015/12/11/using-jemalloc-to-get-to-the-bottom-of-a-memory-leak/\n. ",
    "WayneWang12": "Hi guys, I've encountered the same problem on the post https://gdstechnology.blog.gov.uk/2015/12/11/using-jemalloc-to-get-to-the-bottom-of-a-memory-leak/ \nNearly the same image when using jemalloc and updatewindow takes more than 75% memory. And when it exceeds docker's limit memory, marathon kills the container while jvm stays at a reasonable level.\nAfter hardworking I've finally solved the problem by building an uncompressed jar. I think there might be some problem when loading jars in starting process. Because in my case it takes a lot of memory(more than 70% of total) when it starts and never release it. But when using uncompressed jars, the starting memory stays at 20%. Wish this information may help you to find the root cause.. ",
    "ajmath": "Any feedback on this?  I'm open to doing the work but I want to make sure that it is something that will be accepted.\n. @brentryan will that also work for the logger being used by Jetty that logs basic HTTP request events?\nAlso, how do you configure dropwizard to use your custom appender?\n. Nevermind on how to configure it.  I saw an example in ConsoleAppenderFactory.java\n. For the curious, here is what I ended up doing to make this work.\nhttps://gist.github.com/ajmath/e9f90c29cd224653c218\nMy only gripe is having to add the file META-INF/services file that contains my class name.  Is there a way to have this done automatically via reflection?\n. @ragebiswas Unfortunately we aren't using the shade plugin so I didn't hit this problem.  Though, I remember a similar problem from a while back when I tried using that plugin.  I believe you can configure have it exclude certain files or force a certain version of a file in the result jar.\n. ",
    "jamisonhyatt": "@jplock I think those changes made it more difficult to do what @ajmath did in the gist he linked.  I commented on this issue here, https://github.com/dropwizard/dropwizard/issues/1451\n. I haven't done any more work on the implementation; what's in my fork is\nthe current state.  I was waiting for the 1.0 release, but since then I've\nhad other work that's a higher priority.  I think it's at least a 4-5 hours\nof design and refactor away from being ready for a review.\nFeel free to take it and run with it.\nOn Wednesday, October 5, 2016, Saem Ghani notifications@github.com wrote:\n\n@jamisonhyatt https://github.com/jamisonhyatt out of curiosity have you\ngot a newer solution, or which solution have you settled on for JSON\nlogging?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1451#issuecomment-251817361,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFJZITtmPxotNZsdcbfRPUeSTg0uTAGqks5qxCO5gaJpZM4HVAMT\n.\n\n\n-Jamison-\n. ",
    "ragebiswas": "@ajmath Thanks for the gist (https://gist.github.com/ajmath/e9f90c29cd224653c218) - very helpful. One issue I see is that when I generate a dropwizard uber-jar with the maven shade plugin, the manifest file gets overwritten and dropwizard is unable to find the custom appender. Did you face this problem?\n. ",
    "heldeen": "@ragebiswas, the maven shade plugin has support for rewriting the manifest with the relocated classes. See https://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html#ServicesResourceTransformer\n. ",
    "knguyen142": "Found it here, thanks! https://github.com/dropwizard/dropwizard/commit/d78431ad8c8d1c545b6b553228b6eb629562d601\n. ",
    "jelmerterwal": "I got the same problem and used gradle shadowJar to create my fat jar. The solution for me was to exclude the license dir. Somehow the final jar could not be extracted which was what liquibase tried.\nIn my build.gradle file..\n```\n...\nplugins {\n  id \"com.github.johnrengelman.shadow\" version \"1.2.3\"\n  ...\n}\n... \nshadowJar {\n    exclude 'META-INF/license/'\n    mergeServiceFiles {\n        exclude 'META-INF/MANIFEST.MF'\n        exclude 'META-INF/.SF'\n        exclude 'META-INF/.DSA'\n        exclude 'META-INF/.RSA'\n    }\n    relocate 'META-INF/resources/static', 'static'\n    manifest {\n        attributes 'Main-Class': mainClassName\n    }\n}\n```\n. I agree about the backward compatibility, maybe an additional matching strategy which will behave this way (which must be explicitly set, like the way it is for regex now)? Or, change this behaviour with a major version? The way includes and excludes work combined with the default matching strategy makes no sense in my opinion.\nOr, maybe the concern can de documented, and we can still make this improvement? Several changes in the tests already happen.. changing the way the default matching strategy works. I think the name is in line with useRegexFilters. If you have any further feedback let me know.. @joschi Just thought this might be something a lot of people might need. However, I do understand your point.\nI believe that is exactly the approach taken :). 'inc' is part of 'incWithSuffix'. 'exc' (one of the excludes) is part of 'excWithSuffix'. none of the excludes match 'incWithSuffix' and 'inc' (one of the includes) matches . ",
    "janolaveide": "I think this is would be very useful. I have in fact written my own Config\nprovider that merges 2 config files using the yaml merge directive, but I\nthink this PR solves the common/local requirement better.\nDen torsdag 24. desember 2015 skrev Justin Plock notifications@github.com\nf\u00f8lgende:\n\nCan the tasks be broken out into a separate PR? I think that is useful,\nbut I'm personally not sure I'd want to support any type of configuration\nhierarchy as it makes debugging less explicit and error prone.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1394#issuecomment-167105206\n.\n. In DW 0.8 I am using Spring to @Inject into my jax-rs classes without\nproblems. I have written a Spring bundle that does most of the heavy\nlifting. HK2 does not get in the way. I am planning a blog post on this\nsoon. Feel free to ask if you have any specific questions.\n\nDen torsdag 22. september 2016 skrev Jacek Furmankiewicz \nnotifications@github.com f\u00f8lgende:\n\nWe have been one of the early adopters of DW and been using it in\nproduction for over 3 years.\nHowever, we are stuck on 0.7 and cannot move to a higher version.\nThe reason for this is the ** HK2 DI that Jersey 2 introduced (and\nDW adopted in 0.8). It just refuses to play nice with the our Spring\ncontext that we use everywhere for DI.\nWe've had 2 senior architects spend 3 weeks trying to get it to work and\nHK2 fails to play nicely with Spring no matter what. It wants to @Inject\nhttps://github.com/Inject its own beans into our JAX-RS classes, even\nthough those are existing Spring beans and have already been injected with\nexisting Spring beans.\nThe only solution seems to write a custom HK2 service locator that just\nfetches the beans directly from Spring and hope that works.\nHowever, Dropwizard seems to offer no API to allow defining a custom\nServiceLocator in HK2 to override the default one.\nIf we cannot get this to work, we cannot be stuck on 0.7 and will be faced\nwith the difficult choice of moving to a different platform...which we\nwould hate, since we all love Dropwizard.\nHelp please :-/\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3oeE9YUjSRu7zPls5notAKFUtH1Sks5qspvDgaJpZM4KEA7s\n.\n. All my resources are managed by Spring through a @Component annotation an\npackage scanning. They have services injected which themselves have daos\ninjected etc. Works fine, never had hk2 getting in the way\n\nDen torsdag 22. september 2016 skrev Jacek Furmankiewicz \nnotifications@github.com f\u00f8lgende:\n\nWe have the opposite. All of our classes (including JAX-RS resources) were\nSpring beans from the beginning and we @Inject https://github.com/Inject\nother Spring beans (e.g. DAOs) into them.\nWhere the bloody HK2 gets in the way is that now wants to also implement\nthe @Inject https://github.com/Inject itself (even though Spring has\nalready done it), so HK2 gives an an error like \"unable to find bean of\ntype SomeEntityDao\" (as that bean is a Spring bean, not an HK2 bean).\nBasically, HK2 seems to want to manage JAX-RS resources by itself and does\nnot handle the case at all where it's already part of another DI engine\ncontext.\nThis worked perfectly fine and was working great prior to Jersey 2, we had\na DW app and Spring to manage all the beans inside it. Then came Jersey 2\nwith HK2 and ruined everything.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736#issuecomment-249011334,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3my1AVjEDtSZEyNHjr-bxa58__dRks5qst4UgaJpZM4KEA7s\n.\n. Yes they are, Spring does the injection. Have you tried constructor\ninjection? I am not using field injection the way you do, otherwise my\nresources  are similar to your example\n\nDen torsdag 22. september 2016 skrev Jacek Furmankiewicz \nnotifications@github.com f\u00f8lgende:\n\nAre your JAX-RS resources Spring beans as well? When you have @Inject\nhttps://github.com/Inject on those, who does the injection? HK2 or\nSpring?\nEvery time HK2 sees an @Inject https://github.com/Inject in a JAX-RS\nresource, it wants to inject that resource itself. We can't stop it from\ndoing that.\nSimple example;\n``\n@Service https://github.com/Service // Spring Service bean itself\n@Path https://github.com/Path(\"/mealService\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic class MealServiceResource {\n@Inject\n private SomeSpringDao dao;\n``\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736#issuecomment-249014171,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3rTKWF9Sfw5dbvXLmBeHcgmH5F-eks5qsuDIgaJpZM4KEA7s\n.\n. I don't stop it. It never tries to. \n\nSendt fra min iPad\n\nDen 22. sep. 2016 kl. 22.22 skrev Jacek Furmankiewicz notifications@github.com:\nSo how do you stop HK2 from trying to @Inject inject that SomeSpringDao bean?\nSwitching to contructor injection would be ugly and require rewriting hundreds of JAX-RS resources across multiple apps that use the same base framework....\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes I do\n@component on jax-rs resource, constructor injection and getting beans with\nannotation @path from app context and registrering these with dw\n\nDen torsdag 22. september 2016 skrev Jacek Furmankiewicz \nnotifications@github.com f\u00f8lgende:\n\nAh, sorry, just read your comment. So you do not use @Inject\nhttps://github.com/Inject for Spring beans on JAX-RS resources, versus\nwe do.\nSo your solution would not work for us.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736#issuecomment-249018218,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3gU3Y9-ZnH2U2RKtZkW7GbkW6nSVks5qsuS4gaJpZM4KEA7s\n.\n. Just to be clear, i do use  @inject on the constructor, but if you cannot\nchange that i guess you are out of options  for the time being. spring boot\nnext?\n\nDen torsdag 22. september 2016 skrev Jacek Furmankiewicz \nnotifications@github.com f\u00f8lgende:\n\nWell, I am glad it works, but we do not use constructor injection anywhere\nin our, we use @Inject https://github.com/Inject everywhere for\nconsistency (and the code has much less boilerplate).\nA cleaner IMHO solution would still be to drive HK2 with a pass-through\nServiceLocator that just gives it any bean it wants from an already\nexisting Spring context.\nBut we need DW to give us the ability to override the ServiveLocator\nwithin Jersey, which right now the API does not allow us to.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736#issuecomment-249019855,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3hE2wv2AQahlSwRXGOwHWf0---Emks5qsuY4gaJpZM4KEA7s\n.\n. I see the same behaviour as you describe with field injection, However, if\nI change @Inject to @Autowired,  field injection also works without H2K\ngetting in the way. Maybe an alternative if the bridge approach does not\nwork.\n\nOn 22 September 2016 at 23:02, Jacek Furmankiewicz <notifications@github.com\n\nwrote:\nHm we tried it before, a few months ago, but it did not seem to work for\nus.\nAccording to the docs, it was supposed to just pick it up if it was in the\nclasspath.\nThe docs you are pointing to seem to have some extra instructions on how\nto wire the two together.\nLet me try that and see if that works. Maybe that could do it.\nWill try and let you know if we hit any snags or unknowns. HK2 is somewhat\nof an undocumented beast.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1736#issuecomment-249026865,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHFP3lvv55Onn6FAU9BuQ4bV-pi6p32nks5qsuzlgaJpZM4KEA7s\n.\n. +1 on this one. \n",
    "jmcampanini": "i'm running into a similar situation. in short, i'd like to be able to configure this value in code rather than YAML, since it's not a run-time configurable option (i have frontend assets that depend on this prefix being present).\nwalking through the code, it seems that the jersey.setUrlPattern call works, it's just that the code in the application's run() block is ran BEFORE the code in AbstractServerFactory, and the jersey.setUrlPattern does a blind override. the priority of the value ends up being:\n1. YAML configured rootPath\n2. the field's default value of \"/\"\n3. the value you configure in your application's run() block\nand since 2 is always present, it always ignores 3.\ni'm working around this for my particular use case by using the YAML file. if i come up with a cleaner solution to this, i'll propose a PR (my ideal would be having it sort to 1, 3, 2)\n. i rebased and forced-pushed. if that's an issue, i can try to undo the commits. please let me know.\n. w00t! happy to help. looking forward to this getting released :)\n. :+1: just didn't want to have it in this initial commit - wanted to change as little as possible. should the move of the \"normalizing\" logic be it's own PR?\n. ",
    "matsumana": "I submited. Please review.\n1410\n. I fixed it.\nPlease review.\n. I agree.\nPlease review again.\n. I fixed it.\nPlease review again.\n. Thank you for merge!\nWhen will 1.0.0 be released?\n. I see. Thank you!\n. ",
    "ashic": "We're trying to log some http headers as part of access logs. It looks like this should support that. Is there a way to get this working with 0.9.2, or is there an alternative until 1.0 is out?\n. ",
    "omarkj": "Would there be interest in this being expanded so request attributes, which can be set using the ContainerRequestContext.setProperty would be usable in logback as well, or is there another preferred way of getting request-scoped data into logs?. @mwhipple Sorry -- I realized shortly after sending this that %reqAttribute{KEY} can be used to retrieve attributes (as opposed to request parameters).. ",
    "minisu": "@jplock I fixed the issues that you commented on.\n. > Thanks, I guess I'm a little confused under what scenario secure will be true in this case?\nsecure will be true if the incoming requestContext is secure (which happens for example if the incoming request is made over HTTPS). \nWe want our filter to keep the state of requestContext.getSecurityContext().isSecure().\n. I suggest that you read this section of the Apache HTTP Client documentation. It explains how connections are managed and how they relate to threads. . @joschi I agree with your comment and updated the PR accordingly.. Did you consider moving the Guava stuff to a dropwizard-guava module instead (similar to how Java 8 specifics used to reside in dropwizard-java8)?. @JsonProperty isn't required on setters with the default ObjectMapper configuration. However, if the user opts for an ObjectMapper with mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE) the current code won't work; so I agree that @JsonProperty should be added.. Thanks @nickbabcock! How about now? I also added a corresponding test in SimpleServerFactoryTest.. Confirmed. This code takes 10 seconds to execute (but only 1 second if you add .minThreads(10)):\n```java\n@Override\npublic void run(TestingConfiguration configuration, Environment environment) throws Exception {\n    ExecutorService executorService = environment\n        .lifecycle()\n        .executorService(\"testing\")\n        .maxThreads(10)\n        .build();\nlong startTime = currentTimeMillis();\nCountDownLatch countDownLatch = new CountDownLatch(10);\n\nfor(int i = 0; i < 10; i++) {\n    executorService.submit(() -> {\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        countDownLatch.countDown();\n    });\n}\n\ncountDownLatch.await();\nSystem.out.println(\"Done in \" + (currentTimeMillis() - startTime) + \" ms\");\n\n}\n```. When looking closer, there's actually a log.warn printed if a user does this misconfiguration.\nI also see that this issue has been discussed before: #1643, #834 and #1444. Fixed!. > I think we should add documentation on how to enable fail on unknown properties if we are removing it as the default. I haven't looked but I assume there is documentation for the inverse (which is no longer true) so we can probably just update that.\nI couldn't find anything in the documentation covering this, but I've now added it in the most recent commit.. > can you make this final?\nSure.\n\nAlso, do we need to check that a SecurityContext has been set before calling this to avoid a NPE?\n\nGood question. I searched a bit and found that such a null check is done in the Jersey examples of how to implement a ContainerRequestFilter. So yes, I think we should do it too.\n. Nice catch! I changed it now to Optional#empty.. Seems like this is redundant since ConfigurationFactoryFactoryTest tests the same behavior, but in a more apt place (since the behavior is implemented by DefaultConfigurationFactoryFactory).. This test case seems to in practice test that Dropwizard fails on unknown JSON properties, which is no longer the expected behavior. There also seems to be other test cases covering other variants of non-deserializable request entities.. ",
    "ant3": "Happy to make changes, but will wait for feedback before committing.\n. Well I made the changes anyway - but happy to adjust if there are further comments.\n. So you were using https://docs.jboss.org/hibernate/orm/4.1/javadocs/org/hibernate/id/TableHiLoGenerator.html.  I haven't used it myself, but the javadoc for hibernate version 4.1 has it marked as deprecated.  The link above suggests that you should move to using SequenceStyleGenerator (even in Hibernate 4.1).  This class still exists in Hibernate 5 - https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/id/enhanced/SequenceStyleGenerator.html.\nIs there any reason that you cannot use SequenceStyleGenerator?\n. I'm not aware of a fork.  You can of course use the older version, or create your own fork, but I would be surprised if there is no way for you to migrate.  Which 'hidden sentence' are you talking about?\n. Yes, these are good points.  I should have put in a parameter (and will do), to enable/disable lazy loading.  So with lazy loading enabled both eager and lazy loading will work and with it disabled only eager loading will work (as now).\nI think lazy loading should be enabled by default as it makes things 'just work' and anyone familiar with hibernate will expect it.  Those who want to use eager loading will be unaffected either way.\nI understand arteam's point about lazy loading often causing problems, but this is almost always due to hibernate sessions being closed at the wrong time.  This can be a great cause of frustration to new hibernate users and does sometimes cause hard to fix bugs.  However, the beauty of this use-case is that it is a fully encapsulated layer boundary, so we know exactly when to close the session and we can be sure the hibernate entities won't be referenced after the method has exited*.\nOf course, I'm happy to go with the majority view, but that's my opinion :-).\n- - The Entities could be referenced if the resource method spawned another thread which used them after the method exited - but I think this is a crazy edge-case, and ultimately crazy developers can break any framework.\n. Any comments?  Is this what you were thinking of?\n. Nick: The serialisation of objects (returned by a resource method) to JSON (or whatever protocol) happens after the RESP_FILTERS_START event, so if we close the session at that point it is closed when we do the serialisation and hence we cannot handle lazy loading of objects.  This wasn't a problem before as lazy loading was explicitly disabled and any objects that were not loaded (lazy proxies) were serialised as nulls.  Now I have added the option to handle lazy loading we need to ensure that the Hibernate session stays open until after the serialisation to the wire protocol (e.g. JSON).\n. Thanks Nick.  You are correct.  If the user sets Lazy Loading to off then the only thing that happens differently (compared to previous codebase) is that the session gets closed later (as you previously noticed).\n. I agree that there is a potential issue here.  Sorry - my fault.  The suggested solution should work as far as I can see.\nWhen I wrote the code at issue I assumed that user code would manage transactions, but it is perfectly reasonable to leave this to the framework, so it is indeed an issue.\nI will have a look at creating a fix, but I'm a bit busy for the next few days so it won't be immediate I'm afraid.\n. Sorry for the delay.  This came at an awkward time for me.  I will try to create a fix today or tomorrow.\n. I have had chance to look more at this, and I am having problems reproducing the issue.\nI created a test that causes a constraint violation when the transaction commits, but as far as I can see, the exception thrown in the FINISHED event is still before the response has been sent - and the ON_EXCEPTION event still triggers.  So I still get a sensible error response.\nI can put this test in a pull request if that is useful, but I can't make it fail (in a meaningful way) so I'm not sure it has much value.\n@apgeorge, can you tell me in detail what your code does to generate this error, or even better submit a test case.\n. I have committed the test to my fork but won't create a PR.\n. @pkwarren: Thanks for this.  My knowledge of the dropwizard test infrastructure is obviously less that yours :-).  What you have done is broadly what I think needs to be done.\n@apgeorge: Does the fix from @pkwarren fix your issue?  I think it should.\n@arteam: The fix involves changes to the Aspect code, which I think you originally wrote.  What are your thoughts?\n. These changes look sensible to me.  One minor comment:\nIn LazyLoadingTest the estApplication (line 51) uses lazy loading, but the LazyTestApplication (line 94) doesn't use it.  This seems a bit confusing.\n. Good point :-).  I hadn't noticed that method.\n. Yep, could use it here too.  This one is a bit more complex though, the operation being performed is a commit,  I changed things as I did because I thought it was closest to the old code, which I presumed threw an exception if the transaction was marked for rollback.  If that is the case then using canRollback() is correct, but while we are discussing this I wonder if you have an opinion on it?\n. I tend to steer away from Guava stuff through force of habit because it isn't normally worth bringing in the extra dependency just to tidy up the code a bit (IMHO) - but of course Dropwizard already uses it so there isn't really any cost.  In short, yes.\n. ",
    "alexitooi": "hi @ant3,\nunfortunately we have found a downside of upgrading hibernate from 4.x to 5.x in dropwizard!\nwe have been using an identifier generator which is removed in hibernate 5.x and so far we could not figure out a way on how to make our existing db work with the new identifier generators :(\nwe used the \"hilo\" strategy which hibernate implemented with \"org.hibernate.id.TableHiLoGenerator\" (creates a table with the next_hi value) and it seems that we can not migrate this...do you have any hints? is there probably a fork of DW 1.0 with hibernate 4.x ?\n. hi, yeah we realized that just now that it was deprecated...unfortunately we don't see a way to migrate to the newly introduced generators since also hibernate user guide states in one hidden sentence it is not compatible. do you might know of a fork of DW with hibernate 4.X in place?\n. ",
    "souravmitra": "@jplock Added to the release notes. Thanks.\n. @jplock : Thanks for the comments. Do you see usage of name() outside subclasses of MigrationBundle?\n. Made the change. Thanks\n. Done\n. ",
    "srengasamy": "Thank you\n. ",
    "djnawara": "Not sure if this is helpful, but FYI\u2026\nI'm setting up a new app locally and tried to use the version listed on the site, 0.9.2, but I get the same problem above. I'd copied this out of one of the examples:\nxml\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-bom</artifactId>\n        <version>${project.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\nIt's causing dropwizard-core to pull in dropwizard-jetty but with my version as declared in my pom, 1.0.0-SNAPSHOT. That dropwizard-jetty version exists and does not have a RequestLogFactory.\nI took out the basepom stuff above and now things work.\n. ",
    "nheitz": "This seems to have been the result of a mismatch in jackson parsers.  All works fine now with dropwizard 0.9.2 and jackson 2.6.3 combination.\n. I was going based on mvnRepository:\nhttp://mvnrepository.com/artifact/io.dropwizard/dropwizard-configuration/0.9.2\nbut the version of jackson-dataformat-yaml that is brought in does not match.\n. @arteam ...the only thing that worries me slightly is that BouncyCastle does not have a provider for JSSE, only JCE (it seems).  When I tried to set \"provider\" to \"BC\" in the tls config, I ran into that issue.  What I am unsure about is whether the code I highlighted above is used also for provisioning the SSE implementation.. I can provide you with a pkcs12 truststore that only works with BC, or I can try out your fix myself... Which would be preferable?. I was seriously tempted to have a go....but then I faced a moment of uncertainty when I saw how you'd approached it.  I will attach an exemplar pkcs12 keystore that should fail under SunJCE (java 8) and succeed with BC.\nIn looking at your implementation, it looks like you are reusing \"configuration.getProvider\" for specifying \"BC\" for trust store.  When I tried to set \"provider\" to \"BC\" in configuration, however, dropwizard failed to create the secure socket extension, because BC doesn't have an implementation of that.  \nIt is a bit tricky to see where that use of the provider is...would that failure somehow be avoided by your try-catch fallback approach?\nkeystore-trustore.zip\n. It is line 80-83 of DropwizardSSLConnectionSocketFactory that I believe will continue to cause failure.  \nMy original idea for a fix was to add another property to the tlsConfig called \"trustStoreProvider\", possibly...but then it's not clear to me what the \"provider\" property is intended to be used for.  Would it be overengineering to add \"sseProvider\", \"keystoreProvider\", and \"truststoreProvider\" to the tlsConfiguration, for completeness?. I think there might be additional evidence to support splitting the providers in dropwizard config:\nit turns out there is a BouncyCastle TLS provider, but it has a different provider name, so having a single \"provider\" attribute in yaml (for tlsConfig) used for both SSE and JCE is problematic.\nThis flirts with being a backwards incompatible change, depending on naming, so I await your thoughts, @arteam .. @arteam \nOk, I had a go at the solution.\nhttps://github.com/dropwizard/dropwizard/pull/2390\nNot too onerous in the end.  I did add bouncycastle as test component explicitly to dropwizard-client, as it is impossible to do effective testing otherwise.  I did not modify the BOM....please let me know if I should update the BOM as well to inherit version information for test dependencies, or if what I've done is sufficient.. @arteam ,  Sorry for the newbie question, but as this is my first PR to dropwizard....do I close this issue, given that the PR has been merged, or do you do that at some point?. ah right.  I may have difficulties compying with a shorter key setup. AS @arteam suggests, the main reason to bring in bouncycastle is to support stronger encryption in the PKCS12 container (i.e. AES256 with CBC) which definitely falls outside the standard Oracle JVM support.\nI personally use openjdk because it doesn't have key size restrictions.\nI can certainly add an \"assume\" style assertion at the top of the unit test to to check for AES key support, but then it is likely the test will never run!  Let me think on this.. @nickbabcock \nI've (tentatively) pushed a fix for this issue, but I would appreciate if you could test it in your \"reduced strength\" env, as I struggled to be fully confident here.  Keystore and Truststore strengths have been dropped (AES -> 128, RSA -> 1024), so I'm anticipating success.\nhttps://github.com/dropwizard/dropwizard/pull/2411. wow...from java.security (this area has gotten weird and confusing):\n\n\nIf the jar files are not present in the legacy location\n      and the 'crypto.policy' Security property is not defined,\n      then the JDK will use the unlimited settings (equivalent to\n      crypto.policy=unlimited)\n\n\nThis is true from jdk8u152, apparently, and as of java 9, unlimited will be the default.\nGlad it worked.. I was emulating an initial implementation proposed by @arteam ....I suspect the motivation was to provide as soft an integration as possible, falling back to default providers.\nIf you feel the WARN log is insufficient, however, I'm happy to propagate and enforce a more strict configuration correctness.. ",
    "skstronghold": "addInterceptorFirst and addInterceptorLast. Basically, I want to intercept tracing info for each request/response using Zipkin.\n. I would love to work on this feature in my spare time. Can you give me a basic idea of what all needs to be done?\n. ",
    "alexheretic": "That's just it, before the change while the default queue is unbounded this means that the maximumPoolSize is irrelevant (other than being lower than corePoolSize will cause exception)\nBefore the change the default executor was effectively a single thread pool.\nI put the assertCanExecuteAtLeast2ConcurrentTasks method in the tests to make this clear. The following usage of ExecutorServiceBuilder is misleading\njava\n@Test\npublic void thisIsNotACachedThreadPool() {\n    ExecutorService exe = executorServiceBuilder\n        .maxThreads(Integer.MAX_VALUE)\n        .build();\n    assertCanExecuteAtLeast2ConcurrentTasks(exe); // fails\n}\nThe above test will fail with or without my src changes. (Without my changes this is the default)\nIndeed the following will also fail:\njava\n@Test\npublic void thisIsNotDualThreadPool() {\n    ExecutorService exe = executorServiceBuilder\n        .maxThreads(2)\n        .build();\n    assertCanExecuteAtLeast2ConcurrentTasks(exe); // fails\n}\nUnbounded queue => maxThreads doesn't have an effect\njava\n@Test\npublic void thisIsADualThreadPool() {\n    ExecutorService exe = executorServiceBuilder\n        .minThreads(2)\n        .maxThreads(2)\n        .build();\n    assertCanExecuteAtLeast2ConcurrentTasks(exe); // passes\n}\n@Test\npublic void thisIsStillADualThreadPool() {\n    ExecutorService exe = executorServiceBuilder\n        .minThreads(2)\n        .maxThreads(Integer.MAX_VALUE) // no different in effect from maxThreads 2\n        .build();\n    assertCanExecuteAtLeast2ConcurrentTasks(exe); // passes\n}\nTo get what it looks like it was doing (but wasn't) you'd need to:\njava\nExecutorService exe = executorServiceBuilder\n            .maxThreads(Integer.MAX_VALUE)\n            .workQueue(new SynchronousQueue<>())\n            .build();\nI opted to change it the least that I could so that it would warn in the dodgy cases, and not-warn in the not-dodgy cases.\nI hope that makes sense, try running the tests to see for yourself.\n. How about this one?\n. ",
    "sabarivasan": "I have taken JamisonHyatt's branch as a starting point and added support for ILoggingEvent and IAccessLog: https://github.com/dropwizard/dropwizard/compare/master...jamisonhyatt:AddJsonFileAppender?expand=1\nI have created the following PR: https://github.com/dropwizard/dropwizard/pull/2180\nPlease take a look. Hi @arteam , will these changes get included into the dropwizard 1.3.0 milestone ? I am not sure what the next steps toward that direction are. We at Cvent would like this feature to be included in a release version of dropwizard. As you can see from the original ticket, there are others who are interested in JSON logging as well.. @mattnelson, the proposal is to decouple the LayoutFactory from a pattern-based layout. JSON is not a pattern-based layout. The discussion in https://github.com/dropwizard/dropwizard/issues/1451 has the context.\nRegarding your other point, given that console logging is usually human-read while JSON is processed by log processing utilities (which read them from files), I am not sure I see the value in adding support for JSON console logging. . Hi @arteam, @evnm, let me know if we can help in any way to move this along. As Brent Ryan said, we at Cvent are waiting on this 1.3.0 milestone internally before we upgrade to latest dropwizard version. We'd strongly prefer not do this off a fork.. ",
    "toadzky": "would anyone object to a config option that flattens the MDC into the root object? i opened a PR (#2293) that would enable this. it's not a big change.. I went looking for the code that was having a problem and it's been changed. So I wrote a quick project to demonstrate the problem.\ndropwizard-serialization-test.zip\nHere's the data classes:\njava\n@Value\npublic class InnerDataClass {\n    private int x, y;\n}\njava\n@JsonInclude(ALWAYS)\n@Value\npublic class DataClass {\n    private String field1;\n    private InnerDataClass field2;\n}\nwith a couple of simple GETs:\n``` java\n@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public List doThings() {\n        List list = new ArrayList<>();\n        list.add(new DataClass(\"a\", null));\n        list.add(new DataClass(null, new InnerDataClass(0, 1)));\n        return list;\n    }\n@GET\n@Produces(MediaType.TEXT_PLAIN)\n@SneakyThrows\npublic String doThingsWithString() {\n    List<DataClass> list = new ArrayList<>();\n    list.add(new DataClass(\"a\", null));\n    list.add(new DataClass(null, new InnerDataClass(0, 1)));\n    return new ObjectMapper().writeValueAsString(list);\n}\n\n```\nHere's the results:\nbash\n$ curl localhost:8080/ -H 'Accept: application/json'   \n[{\"field1\":\"a\"},{\"field1\":null,\"field2\":{\"x\":0,\"y\":1}}] \n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                 \n$ curl localhost:8080/ -H 'Accept: text/plain'                                                                       \n[{\"field1\":\"a\",\"field2\":null},{\"field1\":null,\"field2\":{\"x\":0,\"y\":1}}]\n. I tried it with and without lombok and got inconsistent results, so I didn't mention lombok as a possible cause. In this case, Lombok generates getters correctly, and the manually created object mapper works as expected, but the built in one does not.\nAs for the link @patrox provided, the project is misnamed IMO because it doesn't have anything to do with Lombok specifically, it has to do with the @ConstructorProperties annotation, which is a standard JavaEE annotation. Jackson 2.7+ support @ConstructorProperties by default, and is only relevant in PARSING, not serializing.\n. It looks like I should open a ticket with Jackson's Afterburner module. Thanks.\n. ",
    "vanvlack": "@nickbabcock done.\nWould you like me to squash the commits down?\n. @nickbabcock done, thank you!\n. Yea, didn't know that was available. With that annotation, will drop the enum and just use strings/ignore case\n. ",
    "prabhjot85": "I would like to take this up. However, want to understand the expectation on the possible implementations. In a real use case, the expectation would be that user has access on all roles OR at least one of those OR should both implementations need to be provided (in example app e.g.)?\n. You can write an implementation of ContainerResponseFilter and tweak the response in the filter as per your requirement. Here is quick hack I've written.\n```\npublic class NotFoundResponseFilter implements ContainerResponseFilter {\n    @Override\n    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {\n        if(responseContext.getStatus() == 404){\n            responseContext.setEntity(\"This page is not found;\");\n        }\n    }\n}\n```\nAnd then register it with your Application class.\nenvironment.jersey().register(new NotFoundResponseFilter());\nHTH\n. ",
    "akdev": "@psamsotha I think this solves my use case  thank you. An example like this in the docs would be very useful.\n. ",
    "randyp": "@evnm Apologies for delayed response. Redacting previous version of this comment, as I understand your response more clearly.\nThe obvious correct answer is exactly what you said, which is about deferring ExecutorServiceBuilder#build until Lifecycle start using a new constructor.\nThinking...\n. Closing this PR since I no longer think this test case is valid.\n. I agree.\n. That would 'fix' the zombie process problem, but would not address the core issue: managed objects in the LifecycleEnvironment are not being stopped if an exception is thrown in Application#run.\nUnless the current behavior is intentional dropwizard does not shutdown/stop all managed objects such as object/connection pools, executor services, etc.\nIn addition, I suspect that threads in the executor services were intentionally not daemonized, but could be wrong.\n. Closing this issue, as there is a reasonable fix for this issue.\nCreation of executor services should deferred until server start, and the dropwizard does not yet support this out of this box.\n. ",
    "spudone": "AbstractServerFactory.createThreadPool looks like it does not use daemon threads, which would be one way to fix this issue (not sure if that is the only place though).\n. This alternative works well for us in 0.9.2 with Jersey 2 resources (appears to pick up where Hubspot left off):\nhttps://github.com/xvik/dropwizard-guicey\n. ",
    "isaki": "To get around this behavior you can do several things.\n1. If you are using a standard executor under the hood, you could provide your own thread factory that has an UnhandledExceptionHandler that invokes System.exit.\n2. If you are using a scheduled executor under the hood, #1 won't work. You will have handle the exceptions in your runnable.\n3. Write a service that watches other services and restarts/aborts if they have a problem. Again, UnhandledExceptionHandler is useful here. For scheduled tasks, you can track the ScheduledFutures and periodically call get() to capture the ExecutionException's thrown (they should contain the original exception).\nYou could also write an event driven system using Guava's AsynchronousEventBus that can restart services/abort your process. You will need to engineer your implementations of Managed to generate events instead of exceptions (or wrappers that catch the exceptions and generate events). This is a bit more work but is the most flexible. I strongly encourage you to use the AsynchronousEventBus as the normal EventBus executes in the thread that generated the event, which may be a problem.\n. Oddly enough Eclipse happily builds the original pull request and passes all the unit tests (I just double checked to make sure I hadn't overlooked an error). Regardless, I have pushed a fix.\n. I wonder if @andrewaylett's solution could be enhanced to use an @BeforeClass static method in a base class that other tests could be inherited from rather than use a static block. Still, creating a base test class with the static block and using child test classes should have the same effect (I just like using the jUnit annotations for class level initialization and tear down).. Actually, the web is correct for the legacy version. Just ignore me.. Greetings! I'm just following up to see if there are any updates on this issue. Thanks!. Not a problem; I was just following up as this one intrigues me.. One of the test cases tests raw Jackson (with the Guava module enabled) and it works as anticipated. The interesting thing is this seems to be triggered by one of the modules included by DropWizard (I was originally going to submit this to Jackson, but when running with vanilla Jackson I couldn't reproduce the issue) when interacting with Guava data types. It is entirely possible this still falls on Jackson. I will attempt to one by eliminate the including modules provided by DropWizard and see if I can isolate the incompatibility.. Alright; I've got some interesting things to report. I've added two new unit tests, and one of them has given me a very surprising result.\ntestDropWizardExplicit()\nThis fails just like testDropWizard. The only module in play is Guava. It is using the same Json parsing invocations as the actual DropWizard code base. This fails. This points to a bug within the tree parser for Jackson.\ntestHybridExcplicit()\nThis succeeds, unlike testHyrbrid(). The difference? There shouldn't be any. I have reproduced the code within the Jackson DropWizard factory class directly in my unit test and it works (with all modules enabled) using the parser of testOK(). It fails when the factory method is called from the DropWizard Jackson factory class (test Hyrbrid()).\nThis one I can't explain. I'm probably missing something obvious.\n```Java\npackage io.isaki.jsandbox;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collection;\nimport org.junit.Test;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonSubTypes.Type;\nimport com.fasterxml.jackson.annotation.JsonTypeId;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.ObjectCodec;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.node.TreeTraversingParser;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\nimport com.fasterxml.jackson.datatype.guava.GuavaModule;\nimport com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\nimport com.fasterxml.jackson.datatype.joda.JodaModule;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport com.fasterxml.jackson.module.afterburner.AfterburnerModule;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport com.google.common.collect.ImmutableList;\nimport io.dropwizard.jackson.AnnotationSensitivePropertyNamingStrategy;\nimport io.dropwizard.jackson.DiscoverableSubtypeResolver;\nimport io.dropwizard.jackson.FuzzyEnumModule;\nimport io.dropwizard.jackson.GuavaExtrasModule;\nimport io.dropwizard.jackson.Jackson;\nimport io.dropwizard.jackson.LogbackModule;\npublic class JacksonYamlBugTest {\n@Test\npublic void testOk() throws JsonParseException, JsonMappingException, IOException {\n    final String resource = \"/break_file.yml\";\n\n    final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n    mapper.registerModule(new GuavaModule());\n\n    // Dropwizard does this even though it is the default\n    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n    final TestObject object;\n    try (final InputStream is = this.getClass().getResourceAsStream(resource)) {\n        if (is == null) {\n            throw new IOException(\"Unable to locate resource: \" + resource);\n        }\n\n        object = mapper.readValue(is, TestObject.class);\n    }\n\n    assertNotNull(object);\n\n    assertEquals(6, object.get().getIntValue());\n\n    final BaseTest t = object.get().getObject();\n    assertEquals(TestType.ARRAY, t.getType());\n    assertTrue(t instanceof ArrayTest);\n\n    final Collection<String> contents = ((ArrayTest) t).get();\n    assertEquals(2, contents.size());\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"one\")));\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"two\")));\n}\n\n@Test\npublic void testDropWizard() throws IOException {\n    final String resource = \"/break_file.yml\";\n\n    final JsonFactory provider = new YAMLFactory();\n\n    final ObjectMapper mapper = Jackson.newObjectMapper();\n\n    // This does this:\n    // mapper.registerModule(new GuavaModule());\n    // mapper.registerModule(new LogbackModule());\n    // mapper.registerModule(new GuavaExtrasModule());\n    // mapper.registerModule(new JodaModule());\n    // mapper.registerModule(new AfterburnerModule());\n    // mapper.registerModule(new FuzzyEnumModule());\n    // mapper.registerModule(new ParameterNamesModule());\n    // mapper.registerModules(new Jdk8Module());\n    // mapper.registerModules(new JavaTimeModule());\n    // mapper.setPropertyNamingStrategy(new\n    // AnnotationSensitivePropertyNamingStrategy());\n    // mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());\n\n    // Dropwizard does this even though it is the default\n    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n    final TestObject object;\n    try (final InputStream is = this.getClass().getResourceAsStream(resource)) {\n        final JsonParser p = provider.createParser(is);\n        final JsonNode node = mapper.readTree(p);\n\n        object = mapper.readValue(new TreeTraversingParser(node), TestObject.class);\n    }\n\n    // And we failed in 'readValue' so this is never reached.\n    assertNotNull(object);\n\n    assertEquals(6, object.get().getIntValue());\n\n    final BaseTest t = object.get().getObject();\n    assertEquals(TestType.ARRAY, t.getType());\n    assertTrue(t instanceof ArrayTest);\n\n    final Collection<String> contents = ((ArrayTest) t).get();\n    assertEquals(2, contents.size());\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"one\")));\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"two\")));\n}\n\n@Test\npublic void testDropWizardExplicit() throws JsonParseException, IOException {\n    // See\n    // https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java\n    final String resource = \"/break_file.yml\";\n\n    final JsonFactory provider = new YAMLFactory();\n\n    // final ObjectMapper mapper = Jackson.newObjectMapper();\n    final ObjectMapper mapper = new ObjectMapper(provider);\n    mapper.registerModule(new GuavaModule());\n\n    // Dropwizard does this even though it is the default\n    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n    final TestObject object;\n    try (final InputStream is = this.getClass().getResourceAsStream(resource)) {\n        final JsonParser p = provider.createParser(is);\n        final JsonNode node = mapper.readTree(p);\n\n        object = mapper.readValue(new TreeTraversingParser(node), TestObject.class);\n    }\n\n    // And we failed in 'readValue' so this is never reached.\n    assertNotNull(object);\n\n    assertEquals(6, object.get().getIntValue());\n\n    final BaseTest t = object.get().getObject();\n    assertEquals(TestType.ARRAY, t.getType());\n    assertTrue(t instanceof ArrayTest);\n\n    final Collection<String> contents = ((ArrayTest) t).get();\n    assertEquals(2, contents.size());\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"one\")));\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"two\")));\n}\n\n@Test\npublic void testHybrid() throws JsonParseException, JsonMappingException, IOException {\n    // See\n    // https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java\n\n    final String resource = \"/break_file.yml\";\n\n    final ObjectMapper mapper = Jackson.newObjectMapper();\n\n    // Dropwizard does this even though it is the default\n    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n    final TestObject object;\n    try (final InputStream is = this.getClass().getResourceAsStream(resource)) {\n        if (is == null) {\n            throw new IOException(\"Unable to locate resource: \" + resource);\n        }\n\n        object = mapper.readValue(is, TestObject.class);\n    }\n\n    // We never reach here\n    assertNotNull(object);\n\n    assertEquals(6, object.get().getIntValue());\n\n    final BaseTest t = object.get().getObject();\n    assertEquals(TestType.ARRAY, t.getType());\n    assertTrue(t instanceof ArrayTest);\n\n    final Collection<String> contents = ((ArrayTest) t).get();\n    assertEquals(2, contents.size());\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"one\")));\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"two\")));\n}\n\n@Test\npublic void testHybridExplicit() throws JsonParseException, JsonMappingException, IOException {\n    final String resource = \"/break_file.yml\";\n\n    final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n\n    // This should be the same code! WHY DOES IT WORK??!?!\n    mapper.registerModule(new GuavaModule());\n    mapper.registerModule(new LogbackModule());\n    mapper.registerModule(new GuavaExtrasModule());\n    mapper.registerModule(new JodaModule());\n    mapper.registerModule(new AfterburnerModule());\n    mapper.registerModule(new FuzzyEnumModule());\n    mapper.registerModule(new ParameterNamesModule());\n    mapper.registerModules(new Jdk8Module());\n    mapper.registerModules(new JavaTimeModule());\n    mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());\n    mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());\n\n    // Dropwizard does this even though it is the default\n    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n    final TestObject object;\n    try (final InputStream is = this.getClass().getResourceAsStream(resource)) {\n        if (is == null) {\n            throw new IOException(\"Unable to locate resource: \" + resource);\n        }\n\n        object = mapper.readValue(is, TestObject.class);\n    }\n\n    // We never reach here\n    assertNotNull(object);\n\n    assertEquals(6, object.get().getIntValue());\n\n    final BaseTest t = object.get().getObject();\n    assertEquals(TestType.ARRAY, t.getType());\n    assertTrue(t instanceof ArrayTest);\n\n    final Collection<String> contents = ((ArrayTest) t).get();\n    assertEquals(2, contents.size());\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"one\")));\n    assertTrue(contents.stream().anyMatch((x) -> x.equals(\"two\")));\n}\n\n/**\n * I use enums for types.\n *\n * @author isaki\n */\nprivate static enum TestType {\n    EMPTY,\n    ARRAY;\n}\n\n/**\n * Parent class for child class object property.\n *\n * @author isaki\n */\n@JsonAutoDetect(\n    getterVisibility = Visibility.NONE,\n    creatorVisibility = Visibility.NONE,\n    isGetterVisibility = Visibility.NONE,\n    fieldVisibility = Visibility.NONE,\n    setterVisibility = Visibility.NONE)\n@JsonTypeInfo(\n    use = JsonTypeInfo.Id.NAME,\n    include = JsonTypeInfo.As.PROPERTY,\n    property = \"type\",\n    visible = true)\n@JsonSubTypes({\n    @Type(name = \"EMPTY\", value = BaseTest.class),\n    @Type(name = \"ARRAY\", value = ArrayTest.class)\n})\nprivate static class BaseTest {\n\n    @JsonTypeId\n    @JsonProperty\n    private final TestType type;\n\n    public BaseTest() {\n        super();\n        this.type = null;\n    }\n\n    public final TestType getType() {\n        return this.type;\n    }\n\n}\n\n/**\n * Implementation of complex object property resolution.\n *\n * @author isaki\n */\nprivate static class ArrayTest extends BaseTest {\n\n    @JsonProperty\n    @JsonDeserialize(as = ImmutableList.class, contentUsing = StringStripDeserializer.class)\n    private final Collection<String> value;\n\n    @SuppressWarnings(\"unused\")\n    public ArrayTest() {\n        super();\n        this.value = null;\n    }\n\n    public Collection<String> get() {\n        return this.value;\n    }\n}\n\n/**\n * Special deserializer that illustrates issue.\n *\n * @author isaki\n */\nprivate static final class StringStripDeserializer extends JsonDeserializer<String> {\n\n    @Override\n    public String deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException {\n        final ObjectCodec c = p.getCodec();\n\n        // BUG: This throws NPE in some cases\n        final JsonNode t = c.readTree(p);\n\n        return t.asText().trim();\n    }\n\n}\n\n/**\n * Complex object contained by outer object.\n *\n * @author isaki\n */\n@JsonAutoDetect(\n    getterVisibility = Visibility.NONE,\n    creatorVisibility = Visibility.NONE,\n    isGetterVisibility = Visibility.NONE,\n    fieldVisibility = Visibility.NONE,\n    setterVisibility = Visibility.NONE)\nprivate static final class HelloWorld {\n\n    @JsonProperty\n    private final int intValue;\n\n    @JsonProperty\n    private final BaseTest object;\n\n    @SuppressWarnings(\"unused\")\n    public HelloWorld() {\n        super();\n        this.intValue = 0;\n        this.object = null;\n    }\n\n    /**\n     * @return the intValue\n     */\n    public int getIntValue() {\n        return this.intValue;\n    }\n\n    /**\n     * @return the object\n     */\n    public BaseTest getObject() {\n        return this.object;\n    }\n\n}\n\n/**\n * Outer object\n *\n * @author isaki\n */\n@JsonAutoDetect(\n    getterVisibility = Visibility.NONE,\n    creatorVisibility = Visibility.NONE,\n    isGetterVisibility = Visibility.NONE,\n    fieldVisibility = Visibility.NONE,\n    setterVisibility = Visibility.NONE)\nprivate static final class TestObject {\n\n    @JsonProperty\n    private final HelloWorld helloWorld;\n\n    @SuppressWarnings(\"unused\")\n    public TestObject() {\n        super();\n        this.helloWorld = null;\n    }\n\n    public HelloWorld get() {\n        return this.helloWorld;\n    }\n}\n\n}\n```. You need to ship the jar and its dependencies (unless you are using a shaded/uber artifact, then you only need the single artifact) as well as any external resources. In this case, config.yml would be an external resource. You could hardcode the config path in your main as an alternative, but that makes testing really hard. If you want a simple start up, you could wrap your command in a simple executable with a default location for where you have deployed the config as pert of your deb install.. You can do what you want already with a custom DBIFactory subclass; just override the build method to inject your stuff and return that. That's how I make sure my custom add-ons are the same for unit tests and production code.\nMy case is different; I want to actually have a custom DBI subclass that is returned by the factory so I can override several DBI methods to have custom functionality.. The issue there is I would lose all the nice setup DropWizard does; I would have to do it all myself (as in copy and paste DW code, and try to remember to keep it in sync; this is not ideal). I could of course decorate what is returned from DBIFactory in my custom factory to get my custom functionality. I prefer to subclass both DBIFactory and DBI, hence why the two approaches I suggested are what I'm really looking for.. I took a look at the Jackson class and a similar paradigm would not meet my needs as everything there is static and won't let me inject anything of my own. That being said, I think there is a way I can get us both what we want in DBIFactory (which is object method based and not static) by splitting the configuration out of the factory method and into a protected configure method; this would allow me override the build methods as I require and still invoke the DropWizard configuration on my subclass of DBI.\nWould you find this approach agreeable?. @nickbabcock, Let's continue the discussion from #2067 regarding the configure method design here.\nWe have two goals which may be difficult to simultaneously achieve:\n\nAllow simplistic configuration of argument factories by passing only the JDBC driver name.\nAllow users to have custom configuration passed to their override of the configure method for added functionality.\n\nI started by looking at how customization is currently supported:\n\nTimeZone data is created by an overridable method.\nI opted to pass the PoolDataSourceFactory (which doubles as the config object) to configure for everything else as part of #2067.\n\nPersonally, I think we should unify the configuration/customization paradigms within this class (i.e. drop the time zone method altogether, but this will likely break code for anyone relying on being able to override that method). I don't your policy for introducing breaking changes with respect to version incrementation. But, this is a bit of a \"cart before the horse\" statement as I haven't pitched any of the ideas I've tried thus far.\nBelow you will find the two ideas I thought about and abandoned before deciding to let #2067 stand on its own and to move the discussion to a later time (now).\nLet me know any thoughts/ideas you have.\nAbandoned Solution 1: Multiple Configure Methods\nWe can create two configure methods, one with a String as the second parameter and one with the PooledDataSourceFactory second parameter.\nRoughly, the code would work like this:\n```Java\nprotected void configure(final DBI dbi, final PooledDataSourceFactory configuration) {\n    this.configure(dbi, configuration.getDriverClass());\n}\nprotected void configure(final DBI dbi, final String driverClazz) {\n    // Configure body here\n}\n```\nThis approach has the issue of requiring a breaking change every time the configuration needs another piece of data as we would need to add parameters to the simple method. That, or we need to add more and more methods and add default values. This also doesn't lend itself to making TimeZone a function of a single configuration source.\nAbandoned Solution 2: Lambda\nThis was the idea I floated in #2067; I abandoned it but I figured I'd share my reasoning here.\nFirst, create a new interface.\nJava\n@FunctionalInterface\npublic interface DBIArgumentConfig {\n    String getDriverClass();\n}\nThen, have PooledDataSourceFactory implement this interface.\nFinally, update DBIFactory to use this in the configure method:\nJava\nprotected void configure(final DBI dbi, final DBIArgumentConfig configuration) {\n    // Code\n}\nThen, when you want to do something simple, you can do this:\nJava\n// DBI created somewhere\nfinal DBIFactory factory = new DBIFactory();\nfactory.configure(dbi, () -> \"you.driver.class.Name\");\nWhile I appreciate the elegance of such a design, it suffers from the same problem as the first solution. We would break the ability to use this interface as a @FunctionalInterface if something else became required (such as time zone information).\n. I want to let you know I haven't forgotten about this; I haven't had time to dig into it. I will try to get this soon.. Unfortunately, I think there are going to be quite a few things required unless you want to just force the test version to H2 (which defeats the purpose of driverClass). What it seems like you are after is a builder pattern that hides the construction of DataSourceFactory. My local git repo has the dropwizard-testing-jdbi fully configured (BOM and dropwizard-parent are updated appropriately), but I'm not clear on the specific setup for the sane defaults you are looking for as well as exactly what functionality you are looking for (i.e. a JUnitRule, an extension to DBIFactory, a stand alone class to create DBI instances for testing, etc...).\nThanks!. Please let me know if you still want these changes; if not I'll close this issue. Thanks!. I think I understand now what you are going for. I've got some ideas to play with. I'll get back to you when I have some time to work on this. Thank you for the clarification!. For some reason the Travis CI changes completed successfully but the pull request shows them as pending.. Github support has asked me to close and re-open this to try and fix the hung Travis status.. Re-opening as per GitHub support.. Thank you!. I have seen cases from time to time where the javac compiler will allow a particular generic declaration/implied cast but IDEs such as Eclipse and IntelliJ do not. This is usually fixable with minor code changes so that things work everywhere.\nEDIT: Now that I have DropWizard working in Eclipse, I am unable to reproduce this error (and the Eclipse compiler is severely strict when it comes to generics). Can you verify what JRE system library you are using for the DropWizard project in IntelliJ? For example, in Eclipse I am using JavaSE-1.8 (which makes sense as I only have Oracle Java JDK 1.8u131 installed on this machine). \nEDIT2: Created pull request to share the work I did to make DropWizard's code base work nicely with Eclipse (#2092).. I've never seen a parametrized unit test before. I also have no idea why that fixes the issue.. You are most welcome. Thanks for merging!. I ran into this exact problem and never found a simple fix. I have an effective workaround, however.\nBasically, for root, I set up a redirect using a resource class that would handle the \"/\" and redirect to my index file.\nIn your example, you could do this (this is kind of a poor implementation, but it illustrates the concept):\n```Java\n@Path(\"/\")\npublic class IndexResource {\nprivate static final String INDEX = \"/index.htm\";\n\n@GET\npublic Response get() throws Exception {\n    final URI tmp = new URI(INDEX);\n    return Response.seeOther(tmp).build();\n}\n\n}\n```\nThen, you would not include \"/\" in your asset bundle. However, you will still need set up index.html as an asset so the redirect has something to serve.. I haven't really dug into this part of the code base, so I'm not sure how easy a fix would be. I defer to the owners of the project for that. I strongly suspect it is not something straightforward to implement, but I could be wrong.. I like the rootPath solution; I may look to utilize that when I have time to tackle some technical debt in my own applications!. The documentation gives a clue:\nJava\n/**\n * When annotating a Jersey resource method, wraps the method in a Hibernate session.\n * <p>To be used outside Jersey, one need to create a proxy of the component with the\n * annotated method.</p.\n *\n * @see UnitOfWorkApplicationListener\n * @see UnitOfWorkAwareProxyFactory\n */\nI would check out this issue:\nhttps://github.com/dropwizard/dropwizard/pull/1361\nMy approach would be as follows (disclaimer: I've never used this functionality and haven't fully researched it):\n\nRemove @UnitOfWork resource in question from Jersey.\nCreate new replacement resource for the URL that was removed.\nIn the new replacement resource, give it access to the original resource and proxy described above.\nInvoke the original resource, check its status and any entities for custom handling, and return that Response to the caller.\n\nThere might be a better way than this, but this is what my superficial research led me to.. Is JerseyViolationExceptionMapper the right spot?. Closing this issue; further discussion will be in the PR.. Well that was unexpected. I will work on getting the code coverage up. While I'm at it, I noticed that the validation mapper and its unit test class do not share a name; is this intentional? If not, I can rename it as part of my changes.. I'm not sure how to clear out the \"changes requested\" failure. I thought committing the requested changes would fix it.. Good to know, thanks!. Would it be possible to this merged into 1.1.X as well as 1.2.X if 1.2.X is a ways out? Thanks!. For some reason this PR is picking up code changes from other PRs from a commit history perspective (code that has already been merged; as such no code changes). I will hard reset my fork once this PR is either merged or rejected and work in branches going forward.. I added some logging around managed executor tear down (only if things go awry and only if DEBUG logging is enabled).. Are there any further changes you would like to see? Thanks!. There are alternative solutions to the code generation problem. For example ReflectASM has proven to be pretty performant (it is used by Kryo, which makes sense since the same authors maintain Kryo and ReflectASM).. That is some rather old code; I think the class you want is dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java.\nYou should read the documentation on prudent: https://logback.qos.ch/manual/appenders.html\nThere are serious ramifications to setting this to true. If you are willing to pay the costs, it is probably safe. I will defer to the owners of this library to correct me if I am wrong.\nProvided it is safe, it would be an easy PR to add an option for configuring prudent, with false being the correct default and documentation telling people not to change this unless they know what they are doing.. No problem! I took a look at your PR and while I'm not an owner of this repo it looks reasonable.\nYou will however need unit tests; your PR failed the coverage requirements.. I agree that using logrotate for the compression is way better (and if this PR goes through, it should probably throw an exception or something if prudent is enabled with logback's compression enabled). Another option would be use a syslog appender and no need to deal with prudent at all.. @mattnelson I've also been using javax.ws.rs-api 2.1 without issue for quite some time now (I have a dependency on it in a non-dropwizard library and it hasn't caused any issues by forcing this version in my managed dependencies).. I doubt this is a breaking change from a drop wizard code perspective (things should still build and unit tests should still work). It may, however, break code referencing this library who are using these values to allocate buffers. If a program needs a 1 KiB buffer but is using the current Size.KILOBYTES this change will break that application as the buffer will be 24 bytes smaller.\nI think this change is necessary. It may be worth pushing to 2.0 and posting a notice in the upgrade guide for migrating from 1.X to 2.0. I personally would love to see this change in 1.X series, however, I think the safer approach is called for in this instance.. There may be a nice way to fix this; I do something similar for working with some of my own date and time constructs (for example, 60 seconds and 1 minute are equal in spite of using different units of measurement). I'll take a look at this and see if the logic I utilized is applicable here.. Actually, this class is actually bugged. It violates the Comparable contract. Two objects may show compareTo == 0 while equals returns false.. I have added a unit test to my local code base that fails (which should succeed).\n```Java\n    @Test\n    public void verifyComparableContract() {\n        final Size kb = Size.kilobytes(1024L);\n        final Size bytes = Size.bytes(kb.toBytes());\n    assertThat(bytes.compareTo(kb)).isEqualTo(0);\n    assertThat(kb.compareTo(bytes)).isEqualTo(0);\n\n    // If comparator == 0, then the following must be true\n    assertThat(bytes.equals(kb)).isTrue();\n    assertThat(kb.equals(bytes)).isTrue();\n}\n\n```\nI will submit a PR with a fix.. This is the rule (which apparently is just a very strong suggestion) from the Java 8 documentation for Comparable:\nIt is strongly recommended (though not required) that natural orderings be consistent with equals. This is so because sorted sets (and sorted maps) without explicit comparators behave \"strangely\" when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the equals method.. Additionally, just because a language supports new syntax, that doesn't mean the new syntax is the right answer in many cases.\nFor example, even though lambda based looping is nice and clean to read often times it is not as fast as a direct loop implementation (depending on several factors; I've gotten only comparable performance in the best of cases and significantly slower in others, such as working with arrays).\nOld constructs should only be upgraded if it makes sense to do so and the change enhances the code (such as replacing raw types with proper generic declarations when possible).\nBut, that is just my $.02.. That's awesome.. DropWizard has been making an effort of divorcing its hard dependency on logback and adding back a dependency seems like a step in the wrong direction. Does SLF4J support this?. Is there a way to make this optional/configurable?. Does this mean that future DropWizard releases will be compiled with the JDK9 compiler or is this purely for compatibility testing?. Awesome, thank you for the information!. For JdbiFactory, can you please follow the configure paradigm in io.dropwizard.jdbi.DBIFactory? I had implemented that to inject custom configuration in my own subclass of DBIFactory. Thanks.. One note on the configure implementation, you can drop the PooledDataSourceFactory argument; the was something I hadn't wanted there in the first place but had no other simple way of getting some of the things required to configure the legacy mappers/translators. There is no harm in leaving it, it just was something added as a shortcut and due to design requirements. Thanks!. This is super exciting, I look forward to migrating when this is ready. Thanks for the work @FredDeschenes !. Rename the file to something *Test.java. By default, Maven only runs tests that have classes that follow this naming convention.\nThisIsATestObject.java would not be run whereas ThisIsAnObjectForTest.java would.. Will there be a 1.3.2 release to pick up this change?. I would do one of the following using the request input stream:\n\nMaintain a buffer in memory that tracks and track how much data has been read (you may wish to have a pool of reusable buffers for memory/gc reasons) that will throw if the limit is exceeded. I'd implement them using some sort of close/finish mechanic that on close, if no errors found, dump the buffer to disk.\nWrite to disk and if the limit is exceeded, close the write handle and nuke the file (thus you don't write the entire payload if you don't have to).. @LeducH You would need to have it in your resource. A simple implementation would be to have some sort of buffer object, which could be as simple as a byte[] stored in a ThreadLocal. You could also just simply allocate a byte[] on every request as well.\n\nYou would need to read the stream yourself (and modify my simple example to match your work):\n```Java\nprivate final ThreadLocal cache;\npublic YourConstructor(final int maxFileSize) {\n    super();\nPreconditions.checkArgument(maxFileSize > 0);\n\nthis.cache = ThreadLocal.withInitial(() -> new byte[maxFileSize]);\n\n}\n@POST\n@Path(\"/post/file\")\n@Consumes(MediaType.APPLICATION_OCTET_STREAM)\npublic Response postTheFile(final InputStream requestStream) throws IOException {\n    final byte[] buffer = cache.get();\n    int read = requestStream.read();\n    int i = 0;\n    for (; read != -1 && i < buffer.length; ++i) {\n        buffer[i] = (byte) read;\n        read = requestStream.read();\n    }\nif (read != -1) {\n    // Error, I'll just throw, you do what you want\n    throw new IOException(\"Max File Exceeded\");\n}\n\n// This method needs to know how far into the buffer to go.\nthis.writeFile(buffer, i);\n\n}\n```\nThis is based on this: https://stackoverflow.com/questions/10326460/how-to-avoid-outofmemoryerror-when-uploading-a-large-file-using-jersey-client\nI don't know if it will work as I've never actually tried this. Let me know if this completely fails and I'll try to come up with something else.\nYou might also want to wrap this all in a try/finally block to zero out the buffer after every use if you feel that is necessary.. The issue still remains for a specific corner case. I will look into putting together some tests to reproduce it and possibly submit a PR to fix it (or at least share the tests so someone else can fix it if I can't find the time to patch it in the near term).. I can get you a pretty simple object model to use to reproduce it fairly quickly. I should have some time today to dedicate to this. I'll reply back in a bit.. I've broken down the problematic classes into three simple examples (you really only need two, but my original issue involved 3, so I've left it that way).\n1) A base abstract class that contains the primary validation method.\n2) One or more child classes that implement an extended validation method.\nI'm sure this isn't the best design. Ideally I'd like to just hit each class with its own @SelfValidating method and have them all be run down the entire hierarchy. My workaround has each class overriding the base class validate and invoking super.validate.\nAnyway, here is a super simplified version of what triggered the issue:\nBase Class\n```Java\npackage io.isaki.jsandbox.svtest;\nimport java.util.Objects;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.validation.selfvalidating.SelfValidation;\nimport io.dropwizard.validation.selfvalidating.ViolationCollector;\n@JsonAutoDetect(\n    getterVisibility = Visibility.NONE,\n    creatorVisibility = Visibility.NONE,\n    isGetterVisibility = Visibility.NONE,\n    fieldVisibility = Visibility.NONE,\n    setterVisibility = Visibility.NONE)\nabstract class AbstractExample {\n@JsonProperty(\"s\")\nprivate final String s;\n\nprotected AbstractExample() {\n    super();\n    this.s = null;\n}\n\nprotected AbstractExample(final String s) {\n    super();\n    this.s = Objects.requireNonNull(s);\n}\n\n@SelfValidation\npublic final void validate(final ViolationCollector collector) {\n    if (this.s == null) {\n        collector.addViolation(\"s value cannot be null\");\n    }\n\n    this.extendedValidation(collector);\n}\n\npublic final String getS() {\n    return this.s;\n}\n\nprotected abstract void extendedValidation(final ViolationCollector collector);\n\n}\n```\nImplementations\n```Java\npackage io.isaki.jsandbox.svtest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.validation.selfvalidating.SelfValidating;\nimport io.dropwizard.validation.selfvalidating.ViolationCollector;\n@SelfValidating\npublic final class ImplOne extends AbstractExample {\n@JsonProperty(\"x\")\nprivate final int x;\n\n/**\n * Serialization constructor.\n */\n@SuppressWarnings(\"unused\")\nprivate ImplOne() {\n    super();\n    this.x = 0;\n}\n\npublic ImplOne(final String s, final int x) {\n    super(s);\n    if (x < 1) {\n        throw new IllegalArgumentException();\n    }\n\n    this.x = x;\n}\n\npublic int getX() {\n    return this.x;\n}\n\n@Override\nprotected void extendedValidation(final ViolationCollector collector) {\n    if (this.x < 1) {\n        collector.addViolation(\"x must be at least 1\");\n    }\n}\n\n}\n```\n```Java\npackage io.isaki.jsandbox.svtest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.validation.selfvalidating.SelfValidating;\nimport io.dropwizard.validation.selfvalidating.ViolationCollector;\n@SelfValidating\npublic final class ImplTwo extends AbstractExample {\n@JsonProperty(\"c\")\nprivate final char c;\n\n/**\n * Serialization constructor.\n */\n@SuppressWarnings(\"unused\")\nprivate ImplTwo() {\n    super();\n    this.c = 0;\n}\n\npublic ImplTwo(final String s, final char c) {\n    super(s);\n    if (!validateC(c)) {\n        throw new IllegalArgumentException();\n    }\n\n    this.c = c;\n}\n\npublic char getC() {\n    return this.c;\n}\n\n@Override\nprotected void extendedValidation(final ViolationCollector collector) {\n    if (!validateC(this.c)) {\n        collector.addViolation(\"c must be a lowercase letter\");\n    }\n}\n\nprivate static boolean validateC(final char c) {\n    return c >= 'a' && c <= 'z';\n}\n\n}\n```\nExpected Behavior:\nValidation should occur on the child classes via the parent class method when validated as part of an API POST/PUT in a Dropwizard resource.\nResult:\nException thrown due to lack of SelfValidation annotation in child classes and the API call fails even for valid payloads.\nEDIT:\nThis was done using Dropwizard 1.3.8.. There is a POM problem on JDBI's side, I'll close this and open new PR with a fixed JDBI3.. I like the idea of splitting jodatime support into dedicated modules (similar to what's being discussed for Guava) to minimize dependencies for those using DropWizard but not jodatime.. The link provided in the original post provides this alternative:\nString.split(String, int) and setting an explicit 'limit' to -1 to match the behaviour of Splitter.\nFor my own knowledge, what is the advantage of removing Guava?. @joschi Thanks for the info! I tend to avoid most of the convenience functions in Guava, but I personally am a fan of Guava's multi maps, tables, and immutable collections. If you aren't using those things, I can see why eliminating such a dependency is ideal. And as @alex-shpak has mentioned, fewer direct dependencies can be a very good thing.. @jplock I think that separating into their own modules is ideal or provide easy instructions for users how to inject Guava support into the Jackson/JDBI support provided by DropWizard. Additionally, it would be great if Jodatime was also split out so that those who don't use it (and instead use Java 8's time functionality) don't have to include Jodatime JARs and dependencies in their builds (or uber jars for those that shade).\nI know specifically for JDBI it should be easy to split out and provide users instructions for how to inject additional support. We could provide convenient factory subclasses for Guava, JodaTime, or both.\nSnippet from JdbiFactory.java in dropwizard-jdbi3:\nJava\n    protected void configure(final Jdbi jdbi) {\n        jdbi.installPlugin(new SqlObjectPlugin());\n        jdbi.installPlugin(new JodaTimePlugin());\n        jdbi.installPlugin(new GuavaPlugin());\n    }. It looks like supportedCipherSuites is supposed to be an array (based on the stack trace). See my change below.\nyml\nserver:\n  rootPath: /1.0/top/\n  applicationConnectors:\n    - type: http\n      port: 8080\n    - type: h2\n      port: 8445\n      maxConcurrentStreams: 1024\n      initialStreamRecvWindow: 65535\n      keyStorePath: /space/tls/keyStore # required\n      keyStorePassword: changeit\n      trustStorePath: /space/tls/trustStore # required\n      trustStorePassword: changeit\n      supportedCipherSuites:\n        - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n  adminConnectors:\n    - type: http\n      port: 8081. If you want the exact second the thing is available, add a Managed object that is the very last thing you register in your run method for your application that drops a file or some other thing that lets you know its ready. You could also send your logging to syslog and watch that way or just grep the log.\nRough idea:\n```Java\npublic class HelloWorld implements Managed {\n    @Override\n    public void stop() throws Exception {\n        // Tear down notification?\n    }\n@Override\npublic void start() throws Exception {\n    // Do your notification here.\n}\n\n```. There seems to be a bug in a unit test unrelated to this change. Since it is related to throttling, it is likely a timing issue (the test went slow, so more log lines made it; this is purely speculation as I haven't had a chance to look into the failure):\n```\njava.lang.AssertionError: \nExpecting elements:\n<[\"INFO  [2018-08-02 22:11:35,024] com.example.app: Application log 0\",\n    \"INFO  [2018-08-02 22:11:35,032] com.example.app: Application log 1\",\n    \"INFO  [2018-08-02 22:11:35,041] com.example.app: Application log 2\",\n    \"INFO  [2018-08-02 22:11:35,111] com.example.app: Application log 9\",\n    \"INFO  [2018-08-02 22:11:35,210] com.example.app: Application log 19\",\n    \"INFO  [2018-08-02 22:11:35,311] com.example.app: Application log 29\",\n    \"INFO  [2018-08-02 22:11:35,410] com.example.app: Application log 39\",\n    \"INFO  [2018-08-02 22:11:35,511] com.example.app: Application log 49\",\n    \"INFO  [2018-08-02 22:11:35,614] com.example.app: Application log 59\",\n    \"INFO  [2018-08-02 22:11:35,710] com.example.app: Application log 69\",\n    \"INFO  [2018-08-02 22:11:35,810] com.example.app: Application log 79\",\n    \"INFO  [2018-08-02 22:11:35,910] com.example.app: Application log 89\",\n    \"INFO  [2018-08-02 22:11:36,011] com.example.app: Application log 99\"]>\n to have at most 12 times \n    at io.dropwizard.logging.ThrottlingAppenderTest.overThrottlingLimit(ThrottlingAppenderTest.java:118)\n```. I'll dig into it and see if there is something I can do to eliminate the dependency on wall clock (or use wall clock to determine the cap if I can't inject manual timing). I may not get to it today; I'll submit a PR when I have a chance to mess with it or update here if there is nothing I could do.. I've looked at the test and there are a number of issues with respect to relying on wall clock time for assertions. If things ever run fast or slow (as was the case here), tests can fail in several places. As such, this won't be a simple fix. Look for a PR from me in the coming days.\nIn the meantime, do you want me to pull your change from master into this branch or do you just want to merge this branch as it seems the other two CI systems passed it (which leads me to believe the POM fix I submitted to JDBI3 seems to have fixed the DropWizard build issues with JDBI3 3.3.0)?\nLet me know!. You may notice two commits; I accidentally checked in a POM change to make my Eclipse happy (as I didn't feel like moving the plugin to a profile; which I will do in a different PR at some point).\nEDIT: Didn't know DW was using NullAway; addressed that and a small  bug in my rewrite.. Too many commits, will submit clean PR.. The reason for this PR was discussed in another PR I submitted that had CI fail due to the issues addressed by this PR (see #2451).. Interesting, CI failed on unrelated code (you can see the test affected by this PR was successful):\n3628[INFO] ------------------------------------------------------------------------\n3629[INFO] Reactor Summary:\n3630[INFO] \n3631[INFO] Dropwizard Project ................................. SUCCESS [ 22.195 s]\n3632[INFO] Dropwizard Documentation ........................... SUCCESS [  5.187 s]\n3633[INFO] Dropwizard BOM ..................................... SUCCESS [  0.344 s]\n3634[INFO] Dropwizard Utility Classes ......................... SUCCESS [ 14.676 s]\n3635[INFO] Dropwizard Jackson Support ......................... SUCCESS [  6.828 s]\n3636[INFO] Dropwizard Validation Support ...................... SUCCESS [  8.641 s]\n3637[INFO] Dropwizard Configuration Support ................... SUCCESS [ 20.134 s]\n3638[INFO] Dropwizard Logging Support ......................... SUCCESS [ 13.902 s]\n3639[INFO] Dropwizard Lifecycle Support ....................... SUCCESS [  5.961 s]\n3640[INFO] Dropwizard Metrics Support ......................... SUCCESS [  5.814 s]\n3641[INFO] Dropwizard Jersey Support .......................... FAILURE [ 30.649 s]\n3642[INFO] Dropwizard Servlet Support ......................... SKIPPED\n3643[INFO] Dropwizard Jetty Support ........................... SKIPPED\n3644[INFO] Dropwizard Request Logging Support ................. SKIPPED\nHere is the specific failure:\n[INFO] Running io.dropwizard.jersey.DropwizardResourceConfigTest\n3502[ERROR] Tests run: 17, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.875 s <<< FAILURE! - in io.dropwizard.jersey.DropwizardResourceConfigTest\n3503[ERROR] logsEndpointsContextPath(io.dropwizard.jersey.DropwizardResourceConfigTest)  Time elapsed: 0 s  <<< ERROR!\n3504java.lang.RuntimeException: Could not start jersey\n3505    at io.dropwizard.jersey.DropwizardResourceConfigTest.runJersey(DropwizardResourceConfigTest.java:47)\n3506    at io.dropwizard.jersey.DropwizardResourceConfigTest.logsEndpointsContextPath(DropwizardResourceConfigTest.java:249)\n3507Caused by: org.glassfish.jersey.test.spi.TestContainerException: java.net.BindException: Address already in use: bind\n3508    at io.dropwizard.jersey.DropwizardResourceConfigTest.runJersey(DropwizardResourceConfigTest.java:45)\n3509    at io.dropwizard.jersey.DropwizardResourceConfigTest.logsEndpointsContextPath(DropwizardResourceConfigTest.java:249)\n3510Caused by: java.net.BindException: Address already in use: bind\n3511    at io.dropwizard.jersey.DropwizardResourceConfigTest.runJersey(DropwizardResourceConfigTest.java:45)\n3512    at io.dropwizard.jersey.DropwizardResourceConfigTest.logsEndpointsContextPath(DropwizardResourceConfigTest.java:249)\nI suspect there is a resource/socket somewhere from another test that failed to be cleaned up or something else holding the desired listening port. It seems to be specific to the AppVeyor CI as my previous commit failed at the exact same spot for the same CI solution.. I haven't dug too deeply into the issue; I have the same failure in two builds on the same CI system (my first commit and then my second to remove an additional unused import I missed on my first pass). It is possible there is something messed up specific to the AppVeyor instance.. It looks like AppVeyor worked this time!. Thank you sir!. You should look at your application logs to see if you see anything; it might help to enable debug logging for both Jetty and DropWizard (or everything). Unfortunately NGINX logs tell us nothing useful other than \"I lost my upstream connection\".. It might be worth telling NGINX to reuse a pool of connections to your upstream DW applications.\nhttps://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive\n. @jplock I have done as you have requested; please let me know if the wording works for you!. That might be a good idea. I wrote a quick test to see if it is required and it is. Java only chooses the specific when it is being called on the type that implements the more specific method and when it is not lost due to type erasure.\n```Java\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport org.junit.Test;\npublic class PolyTest {\n@Test\npublic void testA() {\n    final TestIFace test = new TestHelper(\"A\");\n\n    final Collection<?> x = this.getCollection();\n    for (final Object o : x) {\n        test.handle(o);\n    }\n}\n\n@Test\npublic void testB() {\n    final TestHelper test = new TestHelper(\"B\");\n\n    final Collection<?> x = this.getCollection();\n    for (final Object o : x) {\n        test.handle(o);\n    }\n}\n\n@Test\npublic void testC() {\n    final TestIFace test = new TestHelper(\"C\");\n    test.handle(this.getClass());\n    ((TestHelper) test).handle(this.getClass());\n}\n\nprivate Collection<?> getCollection() {\n    final Collection<Object> ret = new ArrayList<>(3);\n    ret.add(Integer.valueOf(100));\n    ret.add(\"This string is a string\");\n    ret.add(this.getClass());\n\n    return ret;\n}\n\nprivate interface TestIFace {\n\n    void handle(Object o);\n}\n\nprivate static final class TestHelper implements TestIFace {\n\n    private final String a;\n\n    TestHelper(final String a) {\n        super();\n        this.a = a;\n    }\n\n    @Override\n    public void handle(final Object o) {\n        System.out.println(this.a + \" Object: \" + o.toString());\n    }\n\n    public void handle(final Class<?> clazz) {\n        System.out.println(this.a + \" Class: \" + clazz.getName());\n    }\n}\n\n```\nGives the output:\nA Object: 100\nA Object: This string is a string\nA Object: class io.isaki.jsandbox.PolyTest\nB Object: 100\nB Object: This string is a string\nB Object: class io.isaki.jsandbox.PolyTest\nC Object: class io.isaki.jsandbox.PolyTest\nC Class: io.isaki.jsandbox.PolyTest\nEDIT: I should mention that doing something this simple works (using my example):\nJava\n        @Override\n        public void handle(final Object o) {\n            // Defer to our specific class handling\n            if (o instanceof Class) {\n                this.handle((Class<?>) o);\n            } else {\n                System.out.println(this.a + \" Object: \" + o.toString());\n            }\n        }\nSee the results below:\nA Object: 100\nA Object: This string is a string\nA Class: io.isaki.jsandbox.PolyTest\nB Object: 100\nB Object: This string is a string\nB Class: io.isaki.jsandbox.PolyTest\nC Class: io.isaki.jsandbox.PolyTest\nC Class: io.isaki.jsandbox.PolyTest. Good catch! I missed the doc references when making the change. Thank you!. I can confirm, it isn't even listed:\nhttps://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-core/. This still seems to be an issue.\nFailure to find io.dropwizard:dropwizard-assets:jar:1.3.7 in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]\nEDIT:\nThe listing is weird. It seems the source and java doc are there but not the actual library.\ndropwizard-assets-1.3.7-javadoc.jar               2018-10-02 11:30     25146      \ndropwizard-assets-1.3.7-javadoc.jar.asc           2018-10-02 11:30       659      \ndropwizard-assets-1.3.7-javadoc.jar.md5           2018-10-02 11:30        32      \ndropwizard-assets-1.3.7-javadoc.jar.sha1          2018-10-02 11:30        40      \ndropwizard-assets-1.3.7-sources.jar               2018-10-02 11:30      3305      \ndropwizard-assets-1.3.7-sources.jar.asc           2018-10-02 11:30       659      \ndropwizard-assets-1.3.7-sources.jar.md5           2018-10-02 11:30        32      \ndropwizard-assets-1.3.7-sources.jar.sha1          2018-10-02 11:30        40      \ndropwizard-assets-1.3.7.jar.asc                   2018-10-02 11:30       659      \ndropwizard-assets-1.3.7.pom.asc                   2018-10-02 11:30       659\nSource: https://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-assets/1.3.7/. It's been quite a few hours and it is still missing. Any ideas?. Looks like there is at least one more missing:\nCould not resolve dependencies for project <redacted>: Could not find artifact io.dropwizard:dropwizard-db:jar:1.3.7 in central (https://repo.maven.apache.org/maven2) -> [Help 1]. That looks like everything. Thank you for all the help!. I'm not 100% convinced this is the right approach. I wrote the current throttling logger test (the original was horribly flaky and if run on a machine with any amount of load would straight up fail). Let me play with it a bit and get back to you. As @nickbabcock mentioned, it feels bad to have to create this instance to fix the issue.. I have an alternate fix. It passes @OrDTesters reproducing steps and I'm currently running the full build. I will submit a PR and you guys can choose which approach you like better.. I have a fix for this I used in my own builds. I'll submit a PR.. I've submitted the PR and it fixes the Circle-CI issue. However, there are failing unit tests. See #2560 . That is really odd. As much as I dislike pinning to an older JDK version, that might be the only way. Let's leave my PR open for now. I want to play with this a bit, if that is ok with you!. TL;DR: I understand the issue. It can't be fixed until all distros using the 8u181-b13 hack upgrade to the official 8u191/8u192 source.\nThe long version\nI'm sure that the DropWizard team is already aware of all of this, but I'm going to give some background so those getting here via Google search understand the issue.\nIn order to function well under JDK8, Jetty utilizes ALPN boot to modify certain key classes that are JVM version specific. There is a version for 8u181 and there is a version for 8u191. The problem is that Ubuntu (and possibly other distributions) are using a modified 8u181 that contains back ported fixes from 8u191 that actually break a few things (since not everything was back ported, some functionality is straight up broken, hence the need to disable the url class path check for surefire to function as a good example of this).\nHaving tested the dropwizard-http2 build with both the 8u181 and 8u191 boot jars for ALPN, I have come to the conclusion that neither is able to fix the weird hybrid version that is 8u181-b13.\nThus, the only reasonable solutions at this time are either to pin the version that is not 8u181-b13 (the original PR that led me to this investigation chose 8u171 as specifying 8u181 runs the risk of bringing in the awful patchset of b13) or to abandon Java 8 altogether (not feasible).\nThis was a really interesting learning experience; hopefully Linux distributions (looking at you Ubuntu) start moving from 8u181-b13 to 8u191 soon.. I don't understand why some fixes were patched into 8u181 rather than just upgrade to 8u191. It really is bizarre! I'm keeping an eyes on this as so I can remove the security disable from my own builds. If anything interesting happens I'll be sure to submit a PR/Issue!. If you use managed dependencies, you can just override the version. That being said, I might put together a PR with a few other library updates as well for 1.3.x if I get the time.. I think we should add documentation on how to enable fail on unknown properties if we are removing it as the default. I haven't looked but I assume there is documentation for the inverse (which is no longer true) so we can probably just update that.. NOTE: CircleCI does not have the newest Java available yet.. The reason I prefer this is that we use the same object that was used in the test rather than relying on a side effect of invoking configure on a new instance (that just happens to change the same static state that this version modifies). As such, it is clearer to anyone supporting this in the future what is going on as opposed to having to dig through the implementation of DefaultLoggingFactory to discover that using a new instance does get you where you need to be.\nBoth are valid solutions; the new instance is fewer lines of code but I personally find counter-intuitive. At the end of the day it purely comes down to preference.. I think ideally it would be nice to not modify static state with object instance methods (unless that object was a singleton, and even then it's a bit strange). Given the way the integration with SLF4J is currently architected, I don't see a way around that without a major refactoring (and you wouldn't eliminate the static state, which would mean methods to support unit tests regardless).\nI like the idea of maybe having some sort of package private (possibly static) reset method that can be used by unit tests (I'd say annotate it with @VisibleForTesting but DropWizard has moved away from Guava). I'll look into that.. I apologize for the delay; my professional responsibilities had me tied up so I didn't get a chance to look at this. I've pushed a new 'clear' concept for unit tests using the default logging factory. I don't love the method name so if you want it renamed I'm open to suggestions. Let me know if this works better for you @nickbabcock and @OrDTesters. Thanks!. It looks like there is some flakiness in the authentication tests; that is outside the scope of this PR. I may try to look at it in the future though.. I can reproduce the AppVeyor error by messing with the Thread.sleep calls; it's most likely a timing issue and not related to this PR. I'll submit a separate PR once I come up with a fix.. Travis failed on depcheck for slf4j: https://nvd.nist.gov/vuln/detail/CVE-2018-8088. This CVE has been around since March, so not sure why it is showing up now and not across all builds.. Using Guava's MoreExecutors.directExecutor() with Caffeine seems to have done the trick. Thank you for the suggestion! This is way more elegant than what I had done originally.. This wasn't my unit test, so I was trying to go the least level of effort to make sure builds pass reliably. I shall definitely check out Awaitility for future reference!. The best thing might be to just scrap this test case.. I'll submit a PR to remove the case.. If the app fails to start you get NPE from various methods even in 1.3.5. I wonder if there is a way we can fail the entire test file if the rule/test app fails to bootstrap itself with an appropriate error.. I originally had configure taking a second parameter as a String (called driverClazz), however the configuration class also happens to be the factory. Should anyone extend PooledDataSourceFactory to have extra options in their YAML config, they may wish to have that extra data available to their own configure method. That was my thinking anyway. I can very easily swap this back to using just a plain String.\nAs for databaseTimeZone, that is taken care of by a method so configure doesn't access it directly.\nIn retrospect, it might be ideal to take that as a parameter to configure instead of the method override approach; however I don't want to break any existing code in the field that might be using an override of the database time zone method.. There could be another approach. We could create a minimally defined interface that is parent of PooledDataSourceFactory that has only the method(s) we need for setting up the default argument settings. Then, the configure method could take this interface as a second argument. If this interface has only one method, say getDriverClass(), then for easy testing you could do something like this:\nJava\nconfigure(new DBI(\"url\"), () -> \"io.dropwizard.driver.Driver\");\n. I'll look into it; I want to get the API right now so when I subclass this, I don't have to change it later if I don't have to. It might be worth moving to another issue, but it doesn't hurt to think about for a bit.. After looking into this, I feel it is probably worth pushing to another issue/PR and I'll update my downstream code when the time comes.\nI have pushed one last change to remove some unused imports from the unit test.. If you look at the byte code you realize is not entirely unnecessary. It's admittedly splitting hairs for predefined static strings; you are basically saving a one time allocation for the error log string. It gets interesting in the server JVM when branch prediction can optimize away the \"if (LOG.isDebugEnabled)\" check. I'm not sure LOG.debug itself would be removed in this case; likely you end up still invoking the call and having the method body optimized away (unless your LOG.debug ended up inlined by the JIT).\nFrom a best practice perspective, however, it is ideal to have consistency.\nTake this example:\nJava\nLOG.debug(\"Something to say \" + result.toString());\nIn this case, what actually happens under the hood is that the toString() method is invoked on result (may or may not be cheap) following by String concatenation (not cheap) before LOG.debug is actually invoked. In the case where LOG.isDebugEnabled() would return false, you do a bunch of work for no logging output. This is unlikely to be optimized away as \"toString()\" varies wildly across implementations and may even have side effects (if it is poorly designed).\nIf you wrap the call in LOG.isDebugEnabled(), on a cold JVM you pay the cost of a boolean to save some potentially expensive operations. On a hot server JVM the entire block is eliminated. On a hot server JVM in the case debug is true, the if check is simply eliminated.\nBy always doing this, whether it is needed or not, you ensure that if someone changes the log line to become costly you don't have to worry the developer remembered to add the if {} decoration.\nI personally do this for all log levels as a stylistic choice. Typically if you are certain you will always be logging at INFO, it is sufficient to do it only for DEBUG. Since I do turn logging way down from time to time, it makes sense.\nIn this case, it is purely a stylistic choice and I have made your requested changes.\nI just wanted to share why I added the checks.\nThanks!. See my response to your other mention of this. TL;DR: Done.. No problem! Hopefully removing those lines buys back the line coverage.. Automated IDE style rules. I'll manually remove it.. Easy enough.. Automated IDE style. I'll manually remove it.. It doesn't really matter; this saves having to clear the state and reset the variable in @Before and/or @After. Your code base; your style choice.. Technically, constructor and method parameters are local to the code block and if they are immutable, should be declared as final by your logic. However, it is your code base and I'll undo the automated IDE fixes.. AssertJ is absolutely not Eclipse friendly. JUnit asserts are recognized for import in Eclipse. AssertJ have to be manually done.. done. Done. I still prefer JUnit over AssertJ :-). Done. Did it in constructor since its called before every test anyway.. Completed.. Completed.. Done.. The first removed line is not null safe but the second is. So maybe the original intent was to be null safe? Also, it seems that this is no longer ensuring that the path is not the root. Is that the intention?. @joschi /facepalm\nMy bad.. The downside of that suggestion is that invoking Stream.of actually causes an extra object allocation which isn't really needed (and thus hurts performance). I personally feel that the current implementation is perfectly readable and thus changing it to use stream doesn't add any value to compensate for the downside.. Done. Commit inbound.. ",
    "kedarjavalkar": "I got it partially working by\n```\npublic class RuntimeExceptionMapper implements ExceptionMapper {\n    @Override\n    public Response toResponse(NotFoundException exception) {\n        Response defaultResponse = Response.status(Status.OK)\n                .entity(JsonUtils.getErrorJson(\"default response\"))\n                .build();\n    return defaultResponse;\n}\n\n}\n```\nThis only works on incorrect APIs and not on resource calls\nmy steup : \n```\n@Override\npublic void initialize(Bootstrap bootstrap) {\n    bootstrap.addBundle(new AssetsBundle(\"/webapp\", \"/\", \"index.html\"));\n}\n@Override\npublic void run(WebConfiguration configuration, Environment environment) throws Exception {\n    environment.jersey().register(RuntimeExceptionMapper.class);\n    ((AbstractServerFactory) configuration.getServerFactory()).setJerseyRootPath(\"/api/*\");\n// Registering Resources\nenvironment.jersey().register(new AuditResource(auditDao));\n....\n\n}\n```\nNow, \nhttp://localhost:8080/api/rubish goes through overridden ExceptionMapper method\nhttp://localhost:8080/rubish.html results in default 404 page\nhow do i setup so that whenever unknown pages are requested dropwizard will show up a custom 404 page\n. Appreciate your help., but http://localhost:8080/api/rubish is caught using ContainerResponseFilter\nI need to catch static html page requests that are failed(404).. the URL would be http://localhost:8080/rubish.html\n. I changed server rootPath to \"/\" and now paths that are configured under resources are served as static html page request\nExample: http://localhost:8080/valid is a registered path and Dropwizard is looking for a similar page in assets directory\n. Instead of returning VIEW, I am using return Response.seeOther(new URI(\"/index.html\")).build();\nThank you all while I was offline :). Guess so. If im able to log into two different files and it is also archived then it will solve my requirement. ",
    "michaelkrnac": "Iam also try to find a way to serve custom 404 pages for not available assets.\nI found this post https://groups.google.com/forum/#!searchin/dropwizard-user/custom$20404%7Csort:relevance/dropwizard-user/mE17ednUCMM/ZuPKkhBdAAAJ\nBut it is not working for me\n```\n    @Override\n    public void run(CertConfiguration configuration, Environment environment) {\n     // init Error pages\n     final ErrorPageErrorHandler epeh = new ErrorPageErrorHandler();\n     // 400 - Bad Request, leave alone\n     epeh.addErrorPage(401, \"/error/general-error\");\n     epeh.addErrorPage(402, \"/error/general-error\");\n     epeh.addErrorPage(403, \"/error/403\");\n     epeh.addErrorPage(404, \"/error/404\");\n     epeh.addErrorPage(405, 499, \"/error/general-error\");\n     epeh.addErrorPage(500, 599, \"/error/general-error\");\n     environment.getApplicationContext().setErrorHandler(epeh);\n     environment.getAdminContext().setErrorHandler(epeh);\n\n     ErrorResource  errorResource = new ErrorResource();\n     environment.jersey().register(errorResource);\n\n```\nIs there a way to set Custom 404 Error Pages?. Thanks a lot. Works for me.\n\n\nAdd to XYZconfig.yml\nserver:\n  registerDefaultExceptionMappers: false\n\n\nAdd to XYZApplication.java\n\n\n```\n    @Override\n    public void run(CertConfiguration configuration, Environment environment) {\n    // init Error pages\n     final ErrorPageErrorHandler epeh = new ErrorPageErrorHandler();\n     // 400 - Bad Request, leave alone\n     epeh.addErrorPage(401, \"/error/general-error\");\n     epeh.addErrorPage(402, \"/error/general-error\");\n     epeh.addErrorPage(403, \"/error/403\");\n     epeh.addErrorPage(404, \"/error/404\");\n     epeh.addErrorPage(405, 499, \"/error/general-error\");\n     epeh.addErrorPage(500, 599, \"/error/general-error\");\n     environment.getApplicationContext().setErrorHandler(epeh);\n     environment.getAdminContext().setErrorHandler(epeh);\n\n     ErrorResource  errorResource = new ErrorResource();\n     environment.jersey().register(errorResource);\n\n```\n\n\nAdd to ErrorResource.java\n```\n@Path(\"/error\")\npublic class ErrorResource {\npublic ErrorResource () {\n}\n@Path(\"404\")\n@GET\n@Timed\n@Produces(MediaType.TEXT_HTML)\npublic Response error(){\n    return Response.status(404).entity(new ErrorView()).build();\n}\n```\n\n\nWorks with assets and API.\nSo maybe this issue can be closed?. ",
    "patrickreck": "I see. Adding @NotNull did the trick. I expected that it would be automatic since there is no default parameter. Thanks!\n. ",
    "KonstantinYegupov": "(maxFileSize is present in 0.9.2: https://github.com/dropwizard/dropwizard/blob/v0.9.2/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java)\n. It does not need code; you just need to regenerate the documentation from the code.\n. ",
    "apgeorge": "Have raised the below issue introduced by the above changes. https://github.com/dropwizard/dropwizard/issues/1604 \n. Sure, will take a shot at the test case tomorrow. Thanks.\n. @ant3 I gave this a shot today and here are my findings.\n1. We couldn't replicate the issue in the test that you commited.\n   The only key difference between what your test does and what we are doing is that we return the created domain object back from the resource method. Tried modifying your test to do the same but that still didn't replicate the issue.\n2. We tried to replicate this issue in our own integration tests but we still couldn't replicate it. So, the integration test fails as expected, but the behaviour on the app is different. We get 500 return in test but 200 in the app.\n3. When we downgrade to RC2, we no longer face this issue.\n4. Setting the lazy flag to false in the hibernate bundle doesn't resolve the issue.\nI wonder if this is because during the tests the event handling happens to run synchronous, but whereas in the app it's asynchronous? I haven't had a chance to look at the dropwizard code yet, but this is my hunch as of now.\n. Hi @ant3 , I think this may have introduced a bug. Now the session will be closed and the transaction committed only after the serialization has happened. So if there are any database exceptions during the transaction commit (column val exceed/constraints etc..) they happen only after the serialized response has been sent back. So the client assumes things are fine, but actually the server logs show the exception.\nI guess we will still need to end the transaction or commit it in the RESP_FILTERS_START event. And session can be closed in FINISHED event.\n. ",
    "guilhermemt21": "Hi @nickbabcock ,\nI have not tried the 1.0 yet. Is it possible that a specific new dependency on 0.9.2 affects how custom validations work on resource?\nI also suspect that my problem is in the server initialization. Once my server is up, all calls in the resource has the same behavior (or all requests run the my validator, or all skip).\n. @nickbabcock \nSomehow my validations started working after adding this two lines on my ValidationProvider:\n@ Provider\n@ Consumes(MediaType.APPLICATION_JSON)\nIt seems that now my own validations have precedence against JacksonJasonProvider and everything works like a charm =D\n. ",
    "anev": "Hi,\nI think this is done on purpose, take a look at the \"Log Format\" chapter in the manual:\n```\nDropwizard\u2019s log format has a few specific goals:\nBe human readable.\nBe machine parsable.\nBe easy for sleepy ops folks to figure out why things are pear-shaped at 3:30 AM using standard UNIXy tools like tail and grep.\n```\n. ",
    "garntsev": "Using @Context HttpServletResponse response and setHeader method doesn't help:\nContent-Type: {text/html, q=1000}; charset=UTF-8\n. @Produces(\"text/html; charset=UTF-8\") hepled, thank you!\n. ",
    "pavelkokush": "ok, thanks. Yep, it is not big problem.\n. One potential problem with ByteStreams#limit(\u2026): It called only after jersey persist full file on disk in something like /var/xxx/MIMEyyy.tmp file. So for big files it will be time consuming and maybe not safe(if server disk not very big)\n. 1. Yep, on prod sometimes we generate a lot of logs in short period of time. I verified that with \"immediateFlush=false\" it spend much less time on writing to log file (~ 2-3 times). We also write logs in Redis, so it is not big problem that we may lost some logs in file in very edge case.\n\n\nAdded in FileAppenderFactoryTest . Have to refactor impl and test a bit, hope it is ok:) . How to test it with real yaml configuration?\n\n\nAdded documentation and javadoc.. Yep, setting attribute on the file appender should be enough. As I remember, I just found that it is not easy to write clean test for it. Also I found some code duplications in existing impl. So I improved code a bit. But If you do not think that is better or if you feel that it not safe improvement, then I can remove \"refactoring\" part and leave only \"feature\" part. @arteam simple implementation posted in https://github.com/dropwizard/dropwizard/pull/2193. I do not know about special dropwizard features... But file will not be persisted on disk automatically if you work directly on HttpServletRequest \n@POST\n@Consumes(\"multipart/form-data\")\nvoid upload(@Context HttpServletRequest request);\nThen you can use ServletFileUpload\nServletFileUpload upload = new ServletFileUpload();\nupload.setSizeMax(XXX);\nupload.setFileSizeMax(YYY);\nInputStream inputStream = upload.getItemIterator(request).next().openStream();\n It will throw exception when you read inputStream if any limits reached.. \n\n",
    "thomaslee": "\nLooking at the source maxThreads only applies to the applicationConnectors and the InstrumentedQueuedThreadPool that they use (AbstractServerFactory::createThreadPool). Admin connectors have their own QueuedThreadPool and maxThreads doesn't apply to it.\n\nPerhaps the code has changed since you looked at it, but to me it looks to me like:\n1. Application connectors and admin connectors are added to a common Jetty Server instance.\n2. That Server instance itself has a single thread pool of up to maxThreads threads.\nWhat seems to be happening here is the total number of threads configured for your application connectors + admin connectors exceeds the maximum number of threads in the (shared) thread pool.\nRelevant code: https://github.com/dropwizard/dropwizard/blob/d6dfbcbf821fd1b7f3aab881c34302095f3a3cfc/dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java#L159-L173\nAs such this seems to be expected behavior. Would you agree?\n. @ajermakovics hm yeah thanks for the clarification -- on closer inspection I see what you mean.\nSo just to rephrase in my own words: expected behavior here is applicationConnectors threads should be configurable entirely independently of adminConnectors, but we seem to be failing some validation step in the Server ctor such that we need to make maxThreads at least as large as combined application + admin thread counts in order for the server to start.\nOr something like that. \ud83d\ude01  I'll dig in a little more.\n. It's hard to see how this is supposed to work. The validation in Jetty's Server.doStart will validate the application thread pool is large enough for all configured connectors -- not just the application connectors. So you can't start a Server instance unless your \"global\"/\"server\" thread pool is large enough to accommodate the acceptor+selector thread counts for all connectors (even though connectors don't have to share the \"server\" pool).\nThis feels like either a Jetty bug or a mistake in the way the Jetty API is being used in DW. I might raise an issue against the Jetty folks with a small repro case & see what they have to say, entirely possible there's a non-obvious way to make this work the way we expect it should.\n. Sorry, yes -- ought to be able to pick it up this weekend. \ud83d\udc4d \n. ",
    "ajermakovics": "Hey @thomaslee \nYes, looks like that is the place where application thread pool is created: DefaultServerFactory.java#L159-L173\nAnd then there is the Admin threadpool created here DefaultServerFactory.java#L218\nThe app threadpool uses the maxThreads setting and admin uses adminMaxThreads. I've just tried to start an app using 1.0.0-rc2 and this config: \nyml\nserver:\n  maxThreads: 20\n  adminMaxThreads: 20\n  applicationConnectors:\n    - type: http\n      port: 8080\n      acceptorThreads: 4\n      selectorThreads: 8\n  adminConnectors:\n    - type: http\n      port: 8081\n      acceptorThreads: 4\n      selectorThreads: 8\nbut the result was the same. \nTbh, I would have expected the app to start with these settings. It appears like there's a mismatch between the config and Jetty's threadpool validation.\nIn here Server.java#L356-L374 Jetty sums up application and admin connectors. And then compares the sum to only the application threadpool. Not quite sure what's the best way to solve it though.\n. ",
    "xiaodong-xie": "I don't think it's related to MDC.\nHere is my analysis:\n1. It's because RollingFileAppender is more strict from 1.1.5, as it will check whether the triggeringPolicy is started or not.\n2. In class FileAppenderFactory, we first stop then start the appender, so the triggeringPolicy is stopped. \n3. I managed to pass all test cases in dropwizard-logging module by just removing line 202 appender.stop();.\nSo my question is, is appender.stop(); really necessary? \nHere is my PR: https://github.com/dropwizard/dropwizard/pull/1481\n. Thanks, @ghenkes. :)\nNoticed what you described in your comment, when upgrading Logback to 1.1.6. So I just added another commit to fix the test case. But you're right about those new bugs introduced in Logback 1.1.5 and 1.1.6 of course. \n. If we only upgrade logback to 1.1.5, build will pass: https://travis-ci.org/dropwizard/dropwizard/builds/116483726\nBut logback 1.1.6 introduced some other more strict stuff: (http://logback.qos.ch/codes.html#earlier_fa_collision)\n```\nFile/FileNamePattern option has the same value \"...\" as that given for appender [...] defined earlier.\nIf a FileAppender/RollingFileAppender defined earlier has the same File option as the current appender, then those two appenders are in collision as FileAppender instances cannot share the same output target. To prevent loss of data, the current appender will not start. Make sure that each appender has a unique File option.\nBy analogy the same restriction applies to the FileNamePattern option of RollingFileAppender. Make sure that each RollingFileAppender has a unique FileNamePattern option\n```\nSo if we want to upgrade 1.1.6, we need to tweak yaml/logging_advanced.yml file...\n. @arteam, thanks for merging... :)\n. I'll look into those test failures.... https://github.com/liquibase/liquibase/commit/9acf2fb33208ebd0673ef7b5f3f63ddc585194bb#diff-df4fa5e5aa8d525d2a3caaaa237ec2df\nLiquibase updated CHECKSUM_ALGORITHM from 7 to 8. . Changed contents in test-db.mv.db file, due to the CHECKSUM_ALGORITHM change in Liquibase.\n7:0f9e4aa31e065bbdffa9eb3ead0ae2c8 -> 8:b0ec2153e830053427f3182dfa7ae6dd\n7:3a61a7a72c9ce082b7059215975e6e09 -> 8:0f3683b37321ccfb1694a044986de4d9\n7:aad8d260150f46b5a4663fc4b2a80474 -> 8:d3ff16527dcfc0c86495d15619027d5e. Ping @jplock, finally I made the build pass. \ud83d\ude04 . Thanks for merging, @jplock. \ud83d\udc4d \ud83d\ude04 . If more fine grained controls are needed, probably need to set both minThreads and workQueue. . If this line were not removed, test DefaultLoggingFactoryTest::testConfigure will fail if we upgrade logback beyond 1.1.5\n. Created a PR against Liquibase https://github.com/liquibase/liquibase/pull/756. Before the bug is fixed, we have to add this workaround.. ",
    "DNewfield": "This issue was initially reported against version 0.9.2, but was only fixed in 1.0.0...\n..would you accept a patch (basically the same one previously offered) against branch release/0.9.x to address this there, too?  The downside is that would necessitate releasing 0.9.4 to get the fix out...\n. ",
    "nitram509": "@jplock \nrevised the comment and explicitly named the modules.\nWhat do you think, is it more clear now?\n. OK, got it.\nI would like to use the original config file of the application to avoid maintaining two config files.\nThat's why I found overriding more charming.\nMaybe just change the comment to make clear, that this is optional?\n. Not sure what you mean.\nI add 'dropwizard-testing' to my classpath with scope test.\nWhen searching for \"JerseyClientBuilder\" there is just one class.\nSee source:\nhttps://github.com/MeteoGroup/jbrotli/blob/master/jbrotli-servlet-examples/dropwizard/src/test/java/org/meteogroup/jbrotli/servlet/HelloBrotliApplicationTest.java\n. May I change the comment?\nOr what do you propose how to adapt this PR?\n. Thanks for pointing this out.\nI will test and adopt the docs.\n. ",
    "raymerd": "I'll break this up into multiple response for sake of readability ...\nParent pom has the following dependencies:\n<dependencies>\n    <dependency>\n        <groupId>org.assertj</groupId>\n        <artifactId>assertj-core</artifactId>\n        <version>3.3.0</version>\n        <scope>test</scope>\n    </dependency>            \n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>${junit.version}</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>`\n. parent pom includes the bom's for dropwizard and spring platform\n       <!--<dropwizard.version>1.0.0-rc1</dropwizard.version>-->\n<dropwizard.version>0.9.2</dropwizard.version>\n<springplatform.version>2.0.3.RELEASE</springplatform.version>\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-bom</artifactId>\n            <version>${dropwizard.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.spring.platform</groupId>\n            <artifactId>platform-bom</artifactId>\n            <version>${springplatform.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n. The pom for the module with the failing test case contains the following dependencies.\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-client</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-testing</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-beans</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aspects</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n    </dependency>\n</dependencies>\n. checking the dependency tree in mvn with the following command line: \n$micron-core draymer$ mvn dependency:tree | grep INFO | sed 's/[INFO]//g' | egrep '(+-)|(-)' | sed 's/+-//' | sed 's/-//' | sed 's/|//g' | sed 's/\\ *//' | sort | uniq \naopalliance:aopalliance:jar:1.0:compile\nch.qos.logback:logback-classic:jar:1.1.3:compile\nch.qos.logback:logback-core:jar:1.1.3:compile\ncom.fasterxml.jackson.core:jackson-annotations:jar:2.6.0:compile\ncom.fasterxml.jackson.core:jackson-core:jar:2.6.3:compile\ncom.fasterxml.jackson.core:jackson-databind:jar:2.6.3:compile\ncom.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.6.3:compile\ncom.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.6.3:compile\ncom.fasterxml.jackson.datatype:jackson-datatype-jdk7:jar:2.6.3:compile\ncom.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.6.3:compile\ncom.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.6.5:compile\ncom.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.6.3:compile\ncom.fasterxml.jackson.module:jackson-module-afterburner:jar:2.6.3:compile\ncom.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.6.3:compile\ncom.fasterxml:classmate:jar:1.1.0:compile\ncom.google.code.findbugs:jsr305:jar:3.0.1:compile\ncom.google.guava:guava:jar:18.0:compile\ncommons-codec:commons-codec:jar:1.10:compile\nio.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-core:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-httpclient:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-json:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-logback:jar:3.1.2:compile\nio.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile\nio.dropwizard:dropwizard-client:jar:0.9.2:compile\nio.dropwizard:dropwizard-configuration:jar:0.9.2:compile\nio.dropwizard:dropwizard-core:jar:0.9.2:compile\nio.dropwizard:dropwizard-jackson:jar:0.9.2:compile\nio.dropwizard:dropwizard-jersey:jar:0.9.2:compile\nio.dropwizard:dropwizard-jetty:jar:0.9.2:compile\nio.dropwizard:dropwizard-lifecycle:jar:0.9.2:compile\nio.dropwizard:dropwizard-logging:jar:0.9.2:compile\nio.dropwizard:dropwizard-metrics:jar:0.9.2:compile\nio.dropwizard:dropwizard-servlets:jar:0.9.2:compile\nio.dropwizard:dropwizard-testing:jar:0.9.2:compile\nio.dropwizard:dropwizard-util:jar:0.9.2:compile\nio.dropwizard:dropwizard-validation:jar:0.9.2:compile\njavax.annotation:javax.annotation-api:jar:1.2:compile\njavax.servlet:javax.servlet-api:jar:3.1.0:compile\njavax.validation:validation-api:jar:1.1.0.Final:compile\njavax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\njoda-time:joda-time:jar:2.9:compile\njunit:junit:jar:4.12:test\nnet.sourceforge.argparse4j:argparse4j:jar:0.6.0:compile\norg.apache.commons:commons-lang3:jar:3.4:compile\norg.apache.httpcomponents:httpclient:jar:4.5.1:compile\norg.apache.httpcomponents:httpcore:jar:4.4.4:compile\norg.aspectj:aspectjweaver:jar:1.8.8:compile\norg.assertj:assertj-core:jar:3.3.0:test\norg.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile\norg.eclipse.jetty:jetty-continuation:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-http:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-io:jar:9.2.15.v20160210:compile\norg.eclipse.jetty:jetty-security:jar:9.2.15.v20160210:compile\norg.eclipse.jetty:jetty-server:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-servlet:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-servlets:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-util:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-webapp:jar:9.2.13.v20150730:compile\norg.eclipse.jetty:jetty-xml:jar:9.2.15.v20160210:compile\norg.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b31:compile\norg.glassfish.hk2.external:javax.inject:jar:2.4.0-b31:compile\norg.glassfish.hk2:hk2-api:jar:2.4.0-b31:compile\norg.glassfish.hk2:hk2-locator:jar:2.4.0-b31:compile\norg.glassfish.hk2:hk2-utils:jar:2.4.0-b31:compile\norg.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\norg.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.22.1:compile\norg.glassfish.jersey.connectors:jersey-apache-connector:jar:2.22.1:compile\norg.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.22.1:compile\norg.glassfish.jersey.containers:jersey-container-servlet:jar:2.22.1:compile\norg.glassfish.jersey.core:jersey-client:jar:2.22.1:compile\norg.glassfish.jersey.core:jersey-common:jar:2.22.1:compile\norg.glassfish.jersey.core:jersey-server:jar:2.22.1:compile\norg.glassfish.jersey.ext:jersey-bean-validation:jar:2.22.1:compile\norg.glassfish.jersey.ext:jersey-metainf-services:jar:2.22.1:compile\norg.glassfish.jersey.media:jersey-media-jaxb:jar:2.22.1:compile\norg.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.22.1:compile\norg.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.22.1:compile\norg.glassfish:javax.el:jar:3.0.0:compile\norg.hamcrest:hamcrest-core:jar:1.3:test\norg.hibernate:hibernate-validator:jar:5.2.2.Final:compile\norg.javassist:javassist:jar:3.18.1-GA:compile\norg.jboss.logging:jboss-logging:jar:3.3.0.Final:compile\norg.mockito:mockito-core:jar:1.10.19:test\norg.objenesis:objenesis:jar:2.2:compile\norg.ow2.asm:asm-debug-all:jar:5.0.4:compile\norg.slf4j:jcl-over-slf4j:jar:1.7.12:compile\norg.slf4j:jul-to-slf4j:jar:1.7.12:compile\norg.slf4j:log4j-over-slf4j:jar:1.7.12:compile\norg.slf4j:slf4j-api:jar:1.7.12:compile\norg.springframework:spring-aop:jar:4.2.5.RELEASE:compile\norg.springframework:spring-aspects:jar:4.2.5.RELEASE:compile\norg.springframework:spring-beans:jar:4.2.5.RELEASE:compile\norg.springframework:spring-context:jar:4.2.5.RELEASE:compile\norg.springframework:spring-core:jar:4.2.5.RELEASE:compile\norg.springframework:spring-expression:jar:4.2.5.RELEASE:compile\norg.springframework:spring-web:jar:4.2.5.RELEASE:compile\norg.yaml:snakeyaml:jar:1.16:compile\nI have no classpath set in my environment.\n. I will look again at the artifacts in my .m2/repository and see what I can find.\n. Ok, this is a head scratcher -- spring-web depends on jetty 9.3.7 ... the only place I can find the 9.2.x jetty components are transitive dependencies from jetty artifacts included by dropwizard artifacts or in spring boot, which I am not using. \nI will exclude spring boot from things and see what happens.\n(example of jetty 9.2.15 transitive dependencies from dropwizard follows)\n+- io.dropwizard:dropwizard-jersey:jar:1.0.0-rc1:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.22.2:compile\n[INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.22.2:compile\n[INFO] |  |  |  - javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.22.2:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.22.2:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.7.3:compile\n[INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.6.5:compile\n[INFO] |  |  |  - com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.7.3:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.22.2:compile\n[INFO] |  |  |  - org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.22.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.3.8.v20160314:compile\n[INFO] |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile\n[INFO] |  |  |  - org.eclipse.jetty:jetty-io:jar:9.2.15.v20160210:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.3.8.v20160314:compile\n[INFO] |  |  |  - org.eclipse.jetty:jetty-xml:jar:9.2.15.v20160210:compile\n[INFO] |  |  - org.eclipse.jetty:jetty-continuation:jar:9.3.8.v20160314:compile\n[INFO] |  +- io.dropwizard:dropwizard-servlets:jar:1.0.0-rc1:compile\n[INFO] |  |  - io.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-jetty:jar:1.0.0-rc1:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.3.8.v20160314:compile\n[INFO] |  |  |  - org.eclipse.jetty:jetty-security:jar:9.2.15.v20160210:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.3.8.v20160314:compile\n[INFO] |  |  - org.eclipse.jetty:jetty-http:jar:9.3.8.v20160314:compile\n[INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:1.0.0-rc1:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile\n[INFO] |  |  - io.dropwizard.metrics:metrics-json:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-request-logging:jar:1.0.0-rc1:compile\n[INFO] |  |  - ch.qos.logback:logback-access:jar:1.1.3:compile\n[INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile\n[INFO] |  - org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile\n. To close this out for any other folks suffering through this.  The answer is to not use the spring platform \"bom\".  The simple trick of stating exclusions did not work. Simple direct dependencies does work.\nThere is joy in mudvill.  Thanks @joschi \n. ",
    "wsz87": "I had a quite similar problem after migration from 0.9.2 to 1.0.0 (stable version).\nIt seems that setting up CORS filter is a little bit different than it used to be.\nIn version 0.9.2 it looked like that:\n```\n        FilterRegistration.Dynamic filter = environment.servlets().addFilter(\"CORSFilter\", CrossOriginFilter.class);\n    filter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, environment.getApplicationContext().getContextPath() + \"*\");\n\n```\nand now for 1.0.0:\n```\n        FilterRegistration.Dynamic filter = environment.servlets().addFilter(\"CORSFilter\", CrossOriginFilter.class);\n    filter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, \"*\");\n\n```\nContext path (environment.getApplicationContext().getContextPath()) is not needed anymore in addMappingForUrlPatterns.\n. ",
    "TheWizz": "Thanks, guys, for fixing this one so quickly!\n-JM\n. I'm using JsonProperty annotations in my DW 1.0.5 project. I see that the following dependency is included:\nGroup ID: com.fasterxml.jackson.core Artifact ID: jackson-annotations Version: 2.7.0\nThis artifact includes the JsonProperty class. If your problems persist, you may want to try adding this as en explicit dependency in your POM file.. ",
    "cwang": "Highlight done.\n. ",
    "svenwb": "Thanks a lot! That works fine for me :-)\n. ",
    "fspinnenhirn": "FYI:\nI've encountered the exact same issue as @devinrsmith using dropwizard 1.0.0 - it turns out the Liquibase data dump used the default schema, whereas my tables were created in a different schema.\nThe fix for issue #584 lets you specify the catalog and/or schema for which to generate the database changelog via the CLI parameters --catalog and --schema\nThe example from the dropwizard documentation, but with a custom schema would look as follows:\njava -jar hello-world.jar db dump --schema mySchema helloworld.yml\n. ",
    "foikila": "@joschi thank you! Now it seems to work as intended.\nThis is the result:\ndatabase:\n  driverClass: org.sqlite.JDBC\n  url: \"jdbc:sqlite::memory:\"\n  properties:\n    charSet: UTF-8\n. ",
    "jklukas": "I'm not surprised this is considered too much complexity for base Dropwizard. Thanks for taking the time to consider.\nI'll look into the possibility of making a dropwizard module or otherwise releasing this publicly. We've previously been templating configs with mustache and compiling them in a separate step before starting up a service, but the SubstitutingSourceProvider is a nice framework to allow filling out of the template within the same process. We're planning to continue down that path and would like to provide an option for others who want to do the same.\n. @brentryan - Can you go into a little more detail about that? I'm not familiar with ConfigTasks, and it looks like this might be an interface that no longer exists? Is this the same thing as a Task accessible through the admin http port?\n. An admin task that needs to be configured sounds like a reasonable approach.\n. ",
    "arnaud-deprez": "Hi @mattnelson, sorry for my mistake.\nBy the way, I found this issue https://github.com/dropwizard/metrics/issues/663 which might be a good solution.\nThanks for the information, the status might be a good fit as spring does the same thing (even if they are using 503 instead of 500).\nSo I'll close this issue and put a +1 on https://github.com/dropwizard/metrics/issues/663.\n. ",
    "erikvanoosten": "Will the same be done for the health check registry in SharedHealthCheckRegistries?\n. Yes, that is the better place. In fact the project is listed there.\nBut why allow only one place?\nThis PR was created after some confusion from a user. The other referred project, 'dropwizard-scala' apparently also has metrics integration. By including this reference we can at least indicate a choice.\nBTW, I tried to get more information from the dropwizard-scala maintainers about their plans and goals so that it would be easier to recommend which project combination to use. Unfortunately I did not get a response yet.\n. ",
    "jakeswenson": "Sorry just realized I should have started a discussion first. I can start that if necessary. \n. Thanks @jplock!\n. What version of lombok are you using? Does it work if you change the type from string to something else? either that or try adding another field and let us/me know if it works. I work on https://github.com/paradoxical-io/jackson-lombok which should have been obsoleted with the jackson issue you mention, but we ran into errors with constructor selection.\n. ",
    "pacey": "You indeed could just create a ThreadPoolExecutor but I thought it would be nice to use a managed thread pool provided by Dropwizard using Environment#managedExecutorService.\n. ",
    "trasa": "something like https://github.com/xvik/dropwizard-guicey ?\n. It would be useful to override metrics-uri as well; our use case is that for reasons outside of our control we must provide metrics on a url other than :adminport/metrics and do so by adding another MetricsServlet to the environment.admin(). . ",
    "pritam620": "@joschi  I have posted my query on the mailing list at https://groups.google.com/forum/#!topic/dropwizard-user/-zoKO4feIAE\n. ",
    "santanusinha": "Lombok version: 1.16.6\nThe issue does not depend on type. Adding fields also does not help.\n. Not yet. Will try and let you know.\n\nUpset the established order, and everything becomes chaos. I'm an agent of\nchaos. Oh and you know the thing about chaos, it's fair.\nOn Wed, May 4, 2016 at 7:03 PM, Nick Babcock notifications@github.com\nwrote:\n\nI upgraded the main branch to 2.7.4 in 3316980\nhttps://github.com/dropwizard/dropwizard/commit/3316980cf617c0c8bd67b15af0884adcc4c50e23,\ndid you have to give the snapshot a try?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1534#issuecomment-216866206\n. \n",
    "head-thrash": "Tested 1.0.0-rc2 with overriden jackson-databind, works fine.\n. ",
    "postwait": "This works for me and in my derivative example.  Thanks!\n. ",
    "vy": "Thanks so much for the prompt response @nickbabcock! I will be following #1527 as well. (BTW, let me know if there is anything I can further help with. I am up for the job.)\n. @situokko, no, the issue is not just with URL-types -- it was there for demonstration purposes -- but about how shall we treat non-JsonProcessingException errors thrown by ObjectMapper#readValue(), i.e., the deserializer. I mean, when the user input does not result in a valid instance instantiation, should it really be the server's fault? And where/how shall we draw the line?\n. Because a non-deserializeable input means \"bad content\", not a \"service error\"?\n. I am not 100% happy with the catch (Throwable cause) approach, but I thought it would be better to come up with a patch to start the discussion.\nSo I understand your point: a BrokenRepresentation should be a 500. On the other hand, I want my bogus URLs (see #1539) to be treated as 400. Any suggestions on how to differentiate them?\n. ",
    "situokko": "If the issue is with URL-types, maybe use String field for the url instead, and validate proper url-string with regexp validation annotation and add separate helper-getter that returns the string as URL-object?\n. @vy In a way I agree with you, I would want my server to return 500 only in cases where there is bug in my server code. Now it is very easy to get 500 just by sending invalid requests (invalid JSON contents or field values). \nAnother way to think of it as bad design to have such data-types for JSON-object that throw exceptions when constructed with illegal content, such as invalid URL.\nCurrently I am using separate \"Model\" (data) Pojos for server's internal handling and converting them to \"View\" Pojos that have more or less the same content, but in just the right format for JSON serialization&deserialization. It causes me to have twice as many classes (=> redundancy), but in the end less hassle.\n. Related a bit, I am using Toastshaman JWTAuthFilter it works great for JAX-RS resources but would love to be able to use it also for Jetty Websocket connections. Currently there's no way let the filter do then authentication or inject @Auth Principal-object for WS-connection but I have to do the authentication manually during UpgradeRequest.\nI commented this in Toastshaman-JWT AuthFilter project before but then I realised it should be actually handled on DW AuthFilter side.\n. @nickbabcock Ohh, nice, my bad, didn't notice to set the version number, I am using 0.9.x. I'll switch to 1.0 once the final release comes out!\n. @joschi This would have been the example code\n```\nclass MyResourceTest extends TestBase {\n    @ClassRule\n    public static final ResourceTestRule resources = ResourceTestRule.builder()\n        .addProvider(new AuthValueFactoryProvider.Binder(User.class))\n        .addProvider(new RestExceptionMapper())\n        .addProvider(new MyConstraintViolationExceptionMapper())\n        .addResource(injector.getInstance(MyResource.class))\n        .build()\n@Test\npublic void testSomething() {\n    Response res = doRequest(getUser(8).getEmail(), 81, [])\n\n    assertThat(res.getStatus()).isEqualTo(422)\n\n    //readEntity() will fail because response is not instanceof RestErrorView that MyConstraintViolationExceptionMapper\n    //but the standard {error: [...]} produced by ConstraintViolationExceptionMapper\n    def error = res.readEntity(RestErrorView.class)\n    assertThat(error.errorCode).isEqualTo(RestException.ENTITY_VALIDATION_ERROR)\n}\n\n}\n```\n. I managed to workaround this by adding 'com.squarespace.jersey2-guice:jersey2-guice-impl' as the first dependency in my own Gradle project. Still unsure if I'll run in to problems with Jersey later on but at least I got the tests running now!. ",
    "Tandolf": "Yes i have tried runtimeexception, i even tried writing an customexception. And exceptionmapped it.\nIts like it doesn't register providers at all.\n. Yes i have tried \"RuntimeException\", \"NotFoundException\" and my own \"CustomException\".\nIs there any way to se that the exceptionmapper actually gets registered at startup\n. okey, just checked my log, apparantly it doesn't get listed as a provider at startup. Now the question is. Why. \n. yeah and it didn't work\n. Okey after much research this is what i have found out.\nThe order of registration matters. If you register providers after resources they will not be registered. By raising my provider to the top of all registered objects it suddenly got registered in the jersey environment.\nBut disabling Jersey exceptionmappers did work, next problem is that apperantly there is another exceptionmapper underneath that will map out an html-response and the log will log out a warning that there is already a mapper for those exceptions and this one apparently has priority over my mapper.\nif not disabling jersey exceptions i get a json-object. when disabling i get an html-response that overrides my mapper.\nIf i know made an customexception everything suddenly works and i can build my own html.\nBare in mind im only a junior dev so i dont have enough experience concerning this. But if someone could shed some light over the multiple exceptionmappers then please do, i'd love to learn more about it.\n. ",
    "ezweave": "Here's a slightly longer trace.\njava.lang.NoSuchMethodError: com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;\n    at com.fasterxml.jackson.databind.cfg.MapperConfig.<clinit>(MapperConfig.java:50)\n    at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:535)\n    at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:452)\n. Dropwizard 0.9.2, Maven 3.3.9.\nHere is my output from mvn dependency:tree\n[INFO] io.thegist:the-gist:jar:1.1-SNAPSHOT\n[INFO] +- com.alchemy.api:alchemyapi:jar:1.0:compile\n[INFO] +- io.dropwizard:dropwizard-core:jar:0.9.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-util:jar:0.9.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.6.0:compile\n[INFO] |  |  +- com.google.guava:guava:jar:18.0:compile\n[INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile\n[INFO] |  |  \\- joda-time:joda-time:jar:2.9:compile\n[INFO] |  +- io.dropwizard:dropwizard-jackson:jar:0.9.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.6.3:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk7:jar:2.6.3:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.6.3:compile\n[INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.6.3:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.6.3:compile\n[INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.12:compile\n[INFO] |  |  \\- ch.qos.logback:logback-classic:jar:1.1.3:compile\n[INFO] |  +- io.dropwizard:dropwizard-validation:jar:0.9.2:compile\n[INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.2.Final:compile\n[INFO] |  |  |  +- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  |  |  +- org.jboss.logging:jboss-logging:jar:3.2.1.Final:compile\n[INFO] |  |  |  \\- com.fasterxml:classmate:jar:1.1.0:compile\n[INFO] |  |  \\- org.glassfish:javax.el:jar:3.0.0:compile\n[INFO] |  +- io.dropwizard:dropwizard-configuration:jar:0.9.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.6.3:compile\n[INFO] |  |  |  \\- org.yaml:snakeyaml:jar:1.15:compile\n[INFO] |  |  \\- org.apache.commons:commons-lang3:jar:3.4:compile\n[INFO] |  +- io.dropwizard:dropwizard-logging:jar:0.9.2:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.1.2:compile\n[INFO] |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.12:compile\n[INFO] |  |  +- ch.qos.logback:logback-core:jar:1.1.3:compile\n[INFO] |  |  +- org.slf4j:log4j-over-slf4j:jar:1.7.12:compile\n[INFO] |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.12:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-util:jar:9.2.13.v20150730:compile\n[INFO] |  +- io.dropwizard:dropwizard-metrics:jar:0.9.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-jersey:jar:0.9.2:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.22.1:compile\n[INFO] |  |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.22.1:compile\n[INFO] |  |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.22.1:compile\n[INFO] |  |  |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  |  |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.22.1:compile\n[INFO] |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b31:compile\n[INFO] |  |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b31:compile\n[INFO] |  |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b31:compile\n[INFO] |  |  |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b31:compile\n[INFO] |  |  |  \\- org.glassfish.hk2:hk2-locator:jar:2.4.0-b31:compile\n[INFO] |  |  |     \\- org.javassist:javassist:jar:3.18.1-GA:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.22.1:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.22.1:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.6.3:compile\n[INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.6.3:compile\n[INFO] |  |  |  \\- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.6.3:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.22.1:compile\n[INFO] |  |  |  \\- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.22.1:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.2.13.v20150730:compile\n[INFO] |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-io:jar:9.2.13.v20150730:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.2.13.v20150730:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-xml:jar:9.2.13.v20150730:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-continuation:jar:9.2.13.v20150730:compile\n[INFO] |  +- io.dropwizard:dropwizard-servlets:jar:0.9.2:compile\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-jetty:jar:0.9.2:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.2.13.v20150730:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-security:jar:9.2.13.v20150730:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.2.13.v20150730:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-http:jar:9.2.13.v20150730:compile\n[INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:0.9.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-json:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile\n[INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.6.0:compile\n[INFO] |  \\- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile\n[INFO] +- io.dropwizard:dropwizard-testing:jar:0.9.2:compile\n[INFO] |  +- junit:junit:jar:4.12:compile\n[INFO] |  |  \\- org.hamcrest:hamcrest-core:jar:1.3:compile\n[INFO] |  +- org.mockito:mockito-core:jar:1.10.19:compile\n[INFO] |  +- org.objenesis:objenesis:jar:2.2:compile\n[INFO] |  +- org.assertj:assertj-core:jar:2.2.0:compile\n[INFO] |  \\- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.22.1:compile\n[INFO] |     +- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.22.1:compile\n[INFO] |     +- org.glassfish.jersey.core:jersey-client:jar:2.22.1:compile\n[INFO] |     \\- org.ow2.asm:asm-debug-all:jar:5.0.4:compile\n[INFO] \\- org.mongojack:mongojack:jar:2.6.0:compile\n[INFO]    +- org.mongodb:mongodb-driver:jar:3.2.1:compile\n[INFO]    |  +- org.mongodb:bson:jar:3.2.1:compile\n[INFO]    |  \\- org.mongodb:mongodb-driver-core:jar:3.2.1:compile\n[INFO]    +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.1-1:compile\n[INFO]    +- de.undercouch:bson4jackson:jar:2.7.0:compile\n[INFO]    +- javax.persistence:persistence-api:jar:1.0.2:compile\n[INFO]    \\- commons-io:commons-io:jar:2.4:compile\n. @joschi I am.  The config is pretty simple:\n<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <version>2.3</version>\n        <configuration>\n          <createDependencyReducedPom>true</createDependencyReducedPom>\n          <filters>\n            <filter>\n              <artifact>*:*</artifact>\n              <excludes>\n                <exclude>META-INF/*.SF</exclude>\n                <exclude>META-INF/*.DSA</exclude>\n                <exclude>META-INF/*.RSA</exclude>\n              </excludes>\n            </filter>\n          </filters>\n        </configuration>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>shade</goal>\n            </goals>\n            <configuration>\n              <transformers>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                  <mainClass>io.thegist.GistApplication</mainClass>\n                </transformer>\n              </transformers>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n. @jplock that's what I'm thinking.  I don't know why it just started happening.\n. Rolling it back fixed it.  MongoJack wanted to use it as well, which just exacerbated the issue.  Should I close this?\n. ",
    "silvpol": "Just realised this is now fixed in master, closing.\n. ",
    "BusComp": "Ok, I'll write a pull request, but it may take 1-2 days to push it.\nThanks\n. #1560 \n. ",
    "deeTEEcee": "still having same issues with not being able to register in 1.0.0-rc3. it works when i use the same type but not with Throwable or sub-classes. \n. ooh, i forgot that dropwizard used these dependencies, that's my fault. then i guess my question is what was the reason behind separating the request logs?\n. ",
    "fredzica": "I am having the same problem. My endpoint is annotated with @Produces(MediaType.TEXT_HTML) and it validates its parameters (for instance: @Length(min = 8)). When the validation does not pass, I suppose it tries to write Json along with a 400 status code, but as the method is meant to produce HTML output another error occurs and HTTP 500 is returned.\n. @jplock Yeah, it does. Thanks.\nUsing dropwizard 0.9.2 here\n. ",
    "kanhaiyaagarwal": "Thanks a lot guys for this thread , i have tried what not to solve this issue,\nadding     @Produces(MediaType.APPLICATION_JSON) solves my issue\n. ",
    "msteinhoff": "Hey @nickbabcock, thank you for the documentation.\nI see that you have updated it in the rst file. How does dropwizard documentation publishing work? Is this already online somewhere?\nRegarding to work on this issue, have you something in mind how this problem could be approached?\n. ",
    "NickEckert": "Yea I'm having a problem using two different authenticators for two different resource methods. I tried registering them separately and using chained factories but nothing works and I feel like using different types of authentication should be possible.\n. ",
    "RohanNagar": "This is also related to auth and what @NickEckert is talking about - I want to protect two resource methods with different Principals. One basic auth using a user's username a password, and another basic auth using an application name and password. Registering twoAuthValueFactoryProvider.Binder<> instances does not seem to be working. Any information on this?\n. Awesome @HunterSherms, that should work out for me! Thanks a bunch \ud83d\ude04\n. It is possible, I use it in my applications. Check out https://github.com/RohanNagar/thunder\n. @lutzhorn I would expect the @DefaultValue of a stream to be null. In the case that I don't want to provide a value for it, I want it to be empty and to tell me that it is empty. I would like the chance to use the null value myself before it automatically returns a 400.\nBasically, I want to create an endpoint where a client can hit the endpoint to publish some text to a database, and optionally can attach an image to that text. Am I going about this the right way?. I've opened an issue at Jersey but I'm not hopeful for a response, the response rate for issue questions there seem low. I suppose I can try on StackOverflow too. Thanks for the help, @lutzhorn.. @nickbabcock Good idea! I may look into that, I think that would be useful to have in other situations as well.. I'm seeing the same issue with Jackson as well. I think its the same issue reported in the Jackson repo.\nI was also wondering, now that Dropwizard 1.3.0 supports JDK 9, I imagine more people will try to migrate their Dropwizard apps from 1.8 to 1.9 (or to 1.10). Is there a guide for this? Right now in order to run it I need to use --add-modules java.xml.bind both when compiling and when running the jar. I'm wondering if there's a cleaner way.. What do you want to know? You can start the application in IntelliJ and then issue a curl request to the HTTP you want to test.. Maintainers, you can probably close this issue... Hey guys looks like you're already aware but 1.3.6 fails to install properly:\n[ERROR] Failed to execute goal on project api: Could not resolve dependencies for project com.sanctionco.thunder:api:jar:2.0.1-SNAPSHOT: Failed to collect dependencies at io.dropwizard:dropwizard-testing:jar:1.3.6: Failed to read artifact descriptor for io.dropwizard:dropwizard-testing:jar:1.3.6: Could not transfer artifact io.dropwizard:dropwizard-parent:pom:1.3.6 from/to sonatype-apache (https://repository.apache.org/releases/): Connect to repository.apache.org:443 [repository.apache.org/207.244.88.140] failed: Connection timed out (Connection timed out) -> [Help 1]. Installing 1.3.6 is working for me now - thanks!. @keirlawson I believe changes have been made in Dropwizard to support Java 11 in the next release (v2.0.0 ?). @joschi is there a 2.0.0-rc1-SNAPSHOT version for all Dropwizard components? Seems like there is not one for the dropwizard-testing artifact:\n[ERROR] Failed to execute goal on project api:\nCould not resolve dependencies for project com.sanctionco.thunder:api:jar:2.1.1-SNAPSHOT:\nCould not find artifact io.dropwizard:dropwizard-testing:jar:2.0.0-rc1-SNAPSHOT. Thanks, I just forgot to include the snapshot repo in my pom.xml \ud83e\udd26. Just a style suggestion for these methods:\njava\nSet<T> set = Stream.of(e1, e2, e3, e4, e5).collect(Collectors.toSet());. @isaki-x sounds good, didn't think of the performance hit but that makes sense.. Does adding the two dependencies above mean that Dropwizard applications will no longer need --add-modules java.xml.bind on Java 9+? Right now I need to manually include that option when running on Java 9\n(Or not since they are runtime dependencies?). ",
    "HunterSherms": "Hey @RohanNagar! From what I have found you can't use multiple Principle types. Our work around was to create a parent object with the various user types as properties and a getUser() method that throws a Forbidden exception if you try to access one of the null properties. Please let me know if you find a more elegant solution!\n. Hey @darrenhaken - I'm extremely happy with Dagger in DW. The code is indeed generated based on annotations, but it happens at compile time and is pretty much exactly what you would write by hand. Feel free to reach out if you have any questions.\n. @Allsimon I use constructor injection. Makes unit testing with Mockito etc. very easy.\n. \"HK2 defines services and injection points that can be dynamically discovered at runtime\"\nUse Dagger and find your bugs at compile time instead \ud83d\ude09 . ",
    "vivekkothari": "For Authentication sake it PolymorphicAuthDynamicFeature does solve the issue.\n. I am closing this issue now.\n. ",
    "Raghav2211": "@RohanNagar But this is only works on constructor injection not on field injection. Can you guide how to do via field injection?. @RohanNagar  But when i've to change the version of dropwizard from 1.0.0 to 0.7 it works !! is glassfish depedency doing wrong in versioning?. ",
    "cacsar": "I just ran into this as well, I had hoped to be able to do it via setting init parameters on env.getAdminContext.setInitParameter but it looked as though only a new empty config gets passed to AdminServlet. We have some healthcheck monitoring code that expects results under /health (like Spring), . Yep, I went with a line similar to that for the present. I'm reasonably interested in fixing it, but I'm not sure when I'll get to it.. ",
    "tootedom": "Do you not then hit issues due to the SecurityManager, if you don't execute in the AccessController:\n- https://github.com/netty/netty/issues/4936\n- https://github.com/netty/netty/issues/3680\n(Sorry I missed a test in HttpConnectorFactoryTest, I'm just adding that).\n. How about the following?\n```\nreturn AccessController.doPrivileged(new PrivilegedAction() {\n            @Override\n            public Integer run() {\n                // Determine the default somaxconn (server socket backlog) value of the platform.\n                // The known defaults:\n                // - Windows NT Server 4.0+: 200\n                // - Linux and Mac OS X: 128\n                int somaxconn = tcpBacklog;\n            try {\n                final File file = new File(TCP_BACKLOG_SETTING_LOCATION);\n                somaxconn = Integer.parseInt(Files.toString(file, Charsets.UTF_8));\n            } catch (SecurityException | IOException | NumberFormatException e) {\n                // file.exists() may throw a SecurityException, in this\n                // case we are just returning the default somaxconn that was passed in.\n            } finally {\n                return somaxconn;\n            }\n        }\n    });\n\n```\n. Thanks guys, will post updates in a few mins, based on the comments, just giving it all final review/test.\n. Hi there,\nHopefully I covered the comments.  But if I've missed anything, let me know.\nthanks\n/dom\n. Yes /proc/sys/net/core/somaxconn is only on nix systems, but the method will return on systems without the /proc filesystem, returning default 128 for nix systems (i.e. OSX) and 200 for windows\n. sorry,will fix.\n. Are you sure you want apache commons lang pulled into dropwizard-jetty pom.xml?\n. ",
    "jeremygehrshg": "@joschi How about default to showing the error message without the classpath and have the showDetails flag append the offending class?  I don't think an error message like this would be useful for anything malicious.\n{\n  \"code\": 400,\n  \"message\": \"Unable to process JSON\",\n  \"details\": \"Unrecognized field \\\"foo\\\" not marked as ignorable\"\n}\n. It will, thanks @tmack8001 \n. ",
    "tmack8001": "I agree with @jeremygehrshg that providing some information regarding the failure wouldn't be \"leaking potentially insecure implementation details\" to a malicious actor. Having this available to be configured would greatly ease my integration efforts internally (e.g. having showDetail=true in a development and integration environment while leaving off in a staging and production environment). Instead I'm currently just re-registering this JsonExceptionMapper with jersey a second time and ignoring the warning. \nI'm not sure if defaulting to \"true\" is really the correct approach, but definitely exposing a way for downstream users to set it up in their configuration files would be ideal.\n. hopefully this configuration value will help you out @jeremygehrshg once 1.1.0 is upon us\n. yeah no problem @arteam I've been using this setup for several months and definitely helps to reduce the number of integration questions I get from other developers\n. ",
    "yinzara": "Can we please merge this into master for the next release?  It's a feature I really could use.\n. Thanks! I look for it in the next release!\n. ",
    "ajlanghorn": "@joschi Thanks for the super-speedy work on this! So awesome. In ec8a15c, it looks like you upgraded the Jackson version to 2.6.7 but noted in the commit message and readme that you'd gone to 2.6.5. Was that intentional?\n. @joschi Do you happen to have a date for a 0.9.3 release so we don't need to build from master? :)\n. Oh, just noticed it's there!\n. Thanks @jplock!\n. :D\nOn 3 August 2016 at 13:39, Nick Babcock notifications@github.com wrote:\n\nClosing because 1.0 is out\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1613#issuecomment-237225626,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AApukVwso5AhC4JaFrjPfJwJzTvtLtctks5qcIwEgaJpZM4I_GaO\n.. I think this might actually be an Upstart issue, and not a Dropwizard one. It's just that this behaviour has started to exhibit itself since we upgraded.\n. \n",
    "SimonsUnikaNamn": "Found that I had not registered the user class\n. I forgot but if you check the examples they have you should be able to figure it out, just go step by step. It was probable an extension or annotation of some sort. @jplock yeah things seems to be working but it is annoying to have those warnings in the build output, will this be fixed?. Cool, thank you for an excellent framework :). ",
    "darrenhaken": "Do you have an example?\nOn Fri, Jul 1, 2016 at 5:44 PM -0700, \"Justin Plock\" notifications@github.com wrote:\nYou can do this using the simple server instead of the default server. \n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's ok I found one, thanks for your help!\nOn Fri, Jul 1, 2016 at 5:48 PM -0700, \"Darren Haken\" darrenhaken@gmail.com wrote:\nDo you have an example?\nOn Fri, Jul 1, 2016 at 5:44 PM -0700, \"Justin Plock\" notifications@github.com wrote:\nYou can do this using the simple server instead of the default server. \n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Guice had issues when wiring up the Jersey HTTP client provided as part of Dropwizard.\nI ended up removing it from the project and hand rolling dependencies as it's a microservice and didn't have many classes anyway.\nHaving looked into Dagger I was not very impressed with the requirement to create an interface which then a class is compiled from via annotations. I tend to not be keen on annotation processing.\nI'll check out HK2 over the next couple of days.\n. @terranmoccasin I'll give it a try now. \nI've tried https://github.com/HubSpot/dropwizard-guicier but I'm having some complaints from Jersey about it right now.\n. @terranmoccasin can you provide an example of wiring up soabase?\nI have looked at the docs:\nJava\nInjectorProvider injectorProvider = ...\nbootstrap.addBundle(new GuiceBundle<>(injectorProvider));\nWhat is the concrete type for the injector provider?\n. @terranmoccasin \nI did the following:\nJava\nbootstrap.addBundle(new GuiceBundle<>(new StandardInjectorProvider<>(\n            binder -> {\n                binder.bind(HealthResource.class);\n            }\n        )));\nSeems to at least resolve my dependency. Is there anything else I need to do?\nAny example repos or gists are welcome \ud83d\udc4d \n. @terranmoccasin this might sound stupid but how would I know if I'm using the Guice's servlet module?\nNice work on the reflections! I was thinking of doing something with reflection for auto wiring\n. This worked like a charm and it's certainly not needed for the framework\n. ",
    "leeavital": "@jplock a string is perfectly valid JSON right? Is there a reason that this is expected behavior?\n. Hm. After doing some debugging, it looks like the request is hitting jersey's MessageBodyWriter before the Jackson one that dropwizard registers. \nI think the Jackson message body writer would add the quotes, because any Jackson ObjectMapper will add the quotes. \nIs there an easy way to change the ordering so the jackson one comes first?\n. ",
    "jain0882": "Thanks for your prompt response.\nI am using 0.9.2 version of dropwizard.\nBelow is example to build response. I think I get the answer of mine problem, I need to use Range field of HTTP Request, but that wont stop above error.\nprivate Response buildStream(final ByteBuffer byteBuffer) {\n        StreamingOutput streamer = new StreamingOutput() {\n            public void write(final OutputStream output) throws IOException, WebApplicationException {\n                final WritableByteChannel outputChannel = Channels.newChannel(output);\n                try {\n                    outputChannel.write(byteBuffer);\n                } finally {\n                    outputChannel.close();\n                }\n            }\n        };\n        return  Response.ok(streamer).status(200).header(HttpHeaders.CONTENT_LENGTH, byteBuffer.limit()).build();\n    }\n. Just to scratch previous message, Range doesnt solve the problem.\n. ",
    "ogregoire": "Well, that was fast.\nIndeed, downgrading to 1.0.0-rc2 provided me with a status 500 Internal Server Error, which I expect more.\nBut I still can't handle the exception instead of throwing that 500. Is there anything I should do to handle those?\n. I don't really like what you describe though. I think I'll add a layer between the resource and the DAO, and proxy that layer with @UnitOfWork (since it's apparently possible). But thanks for leading me there, and also thanks for the very fast answers as well! :)\n. As being the OP, this issue has NOT been solved. That is confirmed. However a workaround, which I described in my previous post, is to add a layer in between. @nickbabcock I added a new layer in-between to handle the exceptions myself.\nSo I faced other problems. I created #1625 to work on this, but in the end, it was a miserable failure because of the Guice integration. I then created #1661 which allowed me to integrate dropwizard-hibernate's  @UnitOfWork mechanism directly in Guice.\nI still use that intermediary layer. Some might consider it a workaround, I don't as I get more control. Though the initial problem stays. Basic and \"normal\" usage of @UnitOfWork is broken.. Note this is directly linked with my remarks of #1621.\n. Thanks for looking into this. But I wouldn't consider this an \"improvement\" per se, it's more like fixing something that has been overlooked in the context of DI, a kind of design flaw. Given this, is there any way to have this \"fix\" in 1.0.0 already?\nThe current workaround is to copy/paste the entire UnitOfWorkAwareProxyFactory code and adapt it.\n. Ok, fair enough. Thanks!\n. Do not take this PR yet. There are several other design issues. Currently, this only adds handler to proxies. Some DI frameworks don't allow access to their proxies (as a proxy, not as a usable object) and creating an appropriate proxy plus providing that proxy as the final proxy is rather hard in most frameworks.\nI now think it's better to not expose javassist at all. UnitOfWorkAspect should be the main entry point for DI frameworks, and should probably be made visible and somehow accessible.\nI'll play with this a bit more and will try to find an acceptable, more generic solution.\nIn the meantime, should I close this PR? Keep it open? In any case, please remove the 1.1.0 milestone\n. I'm gonna create a new pull request with my suggested changes. I see no troubles with the new idea. I don't know how to handle properly revert and stuff like that in git / GitHub, so I hope I don't break anything by deleting my branch.\n. Shouldn't it be sessionFactories instead of this.sessionFactories? If yes, would it be possible to overload newAspect instead of changing its signature?. ",
    "hasanmumin": "I think this issue is still ongoing in version 1.0.2.  i using DataExceptionMapper but noting to change. This before upgrade register code and this exception mapper\n. @nickbabcock Hi. Than you for your response.\nif you have little time please follow below step and you can test.\n1- Please clone : https://github.com/robeio/robe/tree/DW1.0-migration\n2- Change robe.yml hibernate section for with your properties.\n3- Than run RobeApplication with server robe-admin/robe.yml \n4- Add breakpoint to DataExceptionMapper\n5- goto http://127.0.0.1:8080/robe/languages/example from your browser.\nConsole log:\n\nERROR [2016-10-24 09:07:55,346] org.hibernate.internal.SessionImpl: HHH000346: Error during managed flush [Validation failed for classes [io.robe.admin.hibernate.entity.Language] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n    ConstraintViolationImpl{interpolatedMessage='may not be null', propertyPath=code, rootBeanClass=class io.robe.admin.hibernate.entity.Language, messageTemplate='{javax.validation.constraints.NotNull.message}'}\n]]\n\nBrowser:\nBad Request.\nAnd it pass the breakpoint.\nHere jersey register DataExceptionMapper .\nHere example hibarnate excepiton resource for you. \n. ",
    "robertfirek": "@nickbabcock I think this problem still exists. Example project: https://github.com/robertfirek/dropwizard-exception-mapping\nLooks like problem is somewhere in the UnitOfWorkAspect. When transaction start, this aspect throws exception which is not wrapped with MappableException. Not-mappable exceptions always generate 500. \nDropwizard version: 1.0.6. ",
    "wind57": "Why was this closed? I can reproduce it\n. ",
    "terranmoccasin": "I've managed to get my project working well with Guice. The main gotchas:\n1. Making sure you're using JSR330 annotations instead of com.google.inject annotations when possible\n2. Clashes with HK2, which can be resolved by using the HK2-guice bridge\nI've been able to use the soabase-guice bundle, which is a pretty small dependency, to wire up my project.\n. @darrenhaken Cool, yeah lemme know if you run into any problems. I wrestled with a lot of obscure stack traces, but it ended up being a quick fix by changing @BindingAnnotation to @Qualifier and @Inject from com.google.inject to javax.inject.\nhttps://github.com/soabase/soabase/issues/35 is the thread where I'm hoping to get DW 1.0 support into soabase. For now, there's a link to my fork with the changes required to get things working with 1.0.0-rc3 (mainly matching the Jersey, Jackson, and HK2 versions) that you can use as a reference.\n. @darrenhaken Nope, that's pretty much it. Only other things I can think of...\n1. If you're using Guice's ServletModule, replace it with JerseyGuiceModule.\n2. If you're using any HK2 bindings (like the latter portion of this SO answer), remember to register it yourself, since it doesn't seem like soabase-guice will do those for you.\nI also added binding resources via reflection at runtime (inspired by dropwizard-guice AutoConfig) by using org.reflections.\n```\n  private static final Reflections REFLECTIONS = new Reflections(BASE_PACKAGE_PATH);\n/*\n   * Bind all @Path annotations with in our package. These binded classes will automatically be\n   * registered into Jersey via the soabase-guice bundle.\n   /\n  private void bindJerseyPaths() {\n    REFLECTIONS.getTypesAnnotatedWith(Path.class).forEach(pathClass -> bind(pathClass));\n  }\n```\n. @darrenhaken You don't really need it - it's the Guice extension for configuring servlets and binding them to paths (AKA map \"/test\" to MyTestServlet.class), but the Jersey resources handle that with @Path(\"/test\") annotations. The only reason I'm using it is because I have custom Filters for my servlets, and I wanted to make sure they're created via Guice.\n. ",
    "saumitrabhave": "I have moved away from guice. I have been using hk2 for DI in multiple DW projects, I think its pretty neat.\n. ohh, I missed that use-case,\none alternate place can be https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java#L349 \nhere we can shutdown the executorService explicitly after client.close(), as it is the environment shutdown() callback everything has to go away anyways i guess.\nor some mix of both of these approaches, to handle shutdown in dispose() when custom execService is not provided via using() and do it in lifecycle shutdown if custom execService is provided to builder.\nI think you will have better idea of whats needed, please link this issue to PR so I can add my 2 cents.\n. One Suggestion, Not sure if calling shutdown only is sufficient as shutdown() just acts like a gatekeeper and rejects any new tasks to be submitted but it does nothing to the tasks already in execution or in queue. We might need to awaitTermination based on some config value\nFor Reference, I looked at https://github.com/dropwizard/dropwizard/blob/master/dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/ExecutorServiceManager.java there is a shutdownTime config which provides the duration to wait for executorService to complete any in-progress work.\nwithout awaitTermination, graceful destruction will not occur for this executor service, for eg. when java process is normally killed.\nHope that makes sense. \n. Thanks, @evnm .\n. ",
    "LeDominik": "I have to say I'm very happy with Dagger 2 in Dropwizard. Took me a little bit of head-scratching in the beginning but now it's really neat; my little trick is that I have an EnvModule which gives me a lot of the Dropwizard things, like e.g. the fully configured ObjectMapper -- I create everything in run() and pass the re-usable stuff in the nice builder-syntax when creating my component. \nAnd then I just have a production @Component and a few for testing-purposes (especially one with fake implementations instead of real connections). I have not yet done multiple scopes for session / request but shouldn't be too hard.\nWhat I just \u2764\ufe0f about Dagger 2 is that it's just generated code and I can honestly report the compiler did report a lot that other systems would have told me sometime lazily...\n. Thanks! Regarding flushing -- this is my theory: in the end you have a org.glassfish.jersey.media.sse.EventOutput which implements a ChunkedOutput<OutboundEvent> on which one calls write(event) each time something should go to the browser. If you look at the source of this you'll see that it writes out the event as mandated by the SSE standard and then calls flushQueue.\nI did not invest the time to find out exactly how this works but my suspicion is (because the GZipHandler has no flush()) that there's just no mechanism to pass on the command: write out your buffers even if they're not yet filled up! So I suspect my nice SSE messages are hanging around in the 8kByte GZIP buffer...which especially with short messages takes some time to fill.\nBecause AFAIK in general there's no reason why you couldn't compress that stream...\nRegarding the exposure in the API I have two thoughts:\n- I understand that you want to have a minimal API surface for which guarantees are provided; I guess technically speaking you could switch out Jetty without breaking the API compatibility\n- But sometimes you want to dig deeper, and I think there should be something like an @Experimental API that allows one to access Jetty's handlers & all the fun... maybe mark them deprecated so every IDE screams at you: be sure you know what you're doing... otherwise it leads to workarounds -- I mean this is a ton of code depending on \n. Nice catch @evnm -- setting setSyncFlush(true) works nicely \ud83d\udc4d \nHowever a very fun thing happens in Chrome (53.0.2785.57 beta (64-bit) on OS X to be precise)...\nWith sync flush enabled everything works (JavaScript receives events) but while the thing is running the inspector doesn't show the events:\n\n(if you click on preview it shows nothing. Once the stream has ended the \"EventStream\" tab becomes available)\nTurn the compression off and you'll get a live preview:\n\nLive Preview:\n\nBut that's really a non-issue. Thinking about it sync-flush is probably fine for most applications because typically we just have JAX-RS resources returning a full JSON (so no chunking at all, everything comes in one \"big bang\" -- sync-flush makes no difference in this situation) or we're heading for streaming and want a flush() to flush() :smile:\nSo :+1: if this becomes configurable; thanks again!\n. I think this solution is great, it's about streaming and not about MIME types so for this purpose the change just feels right \ud83d\udc4d \n. ",
    "leordev": "Hey guys, I decided to go on with the default HK2...\nBut now I'm confused in how can I inject an object in AuthDynamicFeature (dropwizard-auth) ->> https://gist.github.com/joschi/f706e394172988f9200b#gistcomment-1853132 \nAny ideas for that?\n. ",
    "alex-shpak": "If you still interested I created HK2 integration for dropwizard: https://github.com/alex-shpak/dropwizard-hk2bundle\nEnabling injection for dropwizard objects like health-checks and etc.\nYou also can obtain ServiceLocator from there. Just register some service and inject ServiceLocator.\nBasically there are 2 service locators: one before server initialization and one after, which has first ServiceLocator as parent.. Hi! I would like to put my 5 cents.\nIs there still reason to keep both Bundle and ConfiguredBundle in 2.0.0?\nAs far as I can tell there is no difference between them except signature, so maybe for simplicity it's reasonable to keep only one kind of Bundle with configuration?. Maintainers,\nDo you think my suggestion above is reasonable? I could work on PR solving it.. As an option I guess you can use one of DI integrations: with HK2 or Guice to inject into validators. I'm not sure that upgrade to validation api 2.0.1 is possible at the moment, since jersey validation package still depends on 1.1.0.Final version.\nSee https://github.com/eclipse-ee4j/jersey/blob/master/pom.xml#L1949. This is great!\nRegarding https://github.com/jersey/jersey/issues/3675\nI guess Jersey's team intention was for everybody to use Binder from jersey package in future. So maybe it will be good to get rid of direct hk2 usage in code.\n. Flickering customJsonProviderClient and customJsonProviderRoundtrip in e2e tests look like an ordering issue, similar to mentioned https://github.com/jersey/jersey/issues/3670\nAdding Rank(1) from hk2 to CustomJsonProvider to force ordering solves that issue. But it doesn't look like a decent solution.\nAlso according to this decreasing declaration distance by setting @Produces and @Consumes for CustomJsonProvider to applcation/json solves issue.\nP.S. https://github.com/nickbabcock/dropwizard/pull/1. I think there are 2 points for media type annotations:\n - Rank is not obvious enough, we then have to document this hardcoded number 10 so enduser have to put over 10 to add own provider.\n - By javadoc that I mentioned before looks like declaration distance is default for ordering since JAX-RS 2.x, I think it's wise to order providers by how it meant by JAX-RS\nOn another hand we also potentially need to document how to make wildcard provider work.\nPersonally, I think in project that uses dropwizard I would use rank to register my own provider, since I control that code.\nAnyway It is a breaking change.. This is interesting... while I was testing rank ordering turned that using AbstractBinder and skipping raking makes tests pass without need for mediatype annotations.\njava\ncontext.register(new AbstractBinder() {\n    @Override\n    protected void configure() {\n        bind(new JacksonMessageBodyProvider(mapper))\n            .to(MessageBodyReader.class)\n            .to(MessageBodyWriter.class)\n            .in(Singleton.class);\n    }\n});\nSo maybe that is a solution \ud83d\udc4d \nUPDATE:\nUnfortunately it broke tests in dropwziard-testing :(. >  a user supplied provider would take precedence.\nI debugged it a bit.\nUser's custom provider will take precedence if registered via ResourceConfig. If registered via AbstractBinder it should have at least same rank as JacksonMessageBodyProvider. After sleeping with it over weekend,\nI think I still worry about hardcoded value for rank, even tho it brings less breaks into update. I can presee how one can spend hours debugging and then hit into hardcoded value.\nOptionally we can keep rank now for compatibility, and change to media types annotations in 2.0.0 release, If merging Jersey 2.27 into 1.x.x is an options.\nI really would like to see Jersey 2.27 soon!\nBack on ranking: here is how descriptors are ordered.\nSo two descriptors with same rank will come by order they were added, which is risky.\nSo by the end we have such options:\n1. Move JacksonMessageBodyProvider to AbstractBinder instead of jersey resource config, which will move it from customMbrs to mbrs and eventually will move it down in list. here\n2. Set @Consumes and @Produces in CustomJsonProvider to lower declaration distance.\n3. Use @Rank(1) annotation on CustomJsonProvider to move this provider upfront\n4. Use @Priority(Priorities.ENTITY_CODER) on CustomJsonProvider, same as 3 but not dependent on hk2\nI'm not sure that option 1 is less breaking than 2-4, even if there is no need to change test. It highly depends on how user registered his custom provider in first place.\nOption 3, meanwhile, is relying on hk2 which I think is bad.. @isaki-x Less direct dependencies is better, I believe.. Maybe you would be interested, I came up with some alternative (hacky?) solution\nhttps://github.com/alex-shpak/dropwizard-hk2bundle/blob/master/src/main/java/net/winterly/dropwizard/hk2bundle/validation/InjectValidatorBundle.java\nIdea is to set custom ConstraintValidatorFactory which reuses default ConstraintValidatorFactoryImpl before jersey initialisation and InjectingConstraintValidatorFactory after.. Yes, in my case ResourceContext resolved once. I think single ConfiguredValidator created per request, but not ResourceContext\nI don't have confidence that it's fully functional, more testing definitely required.\nBut according to this it looks like ResourceContext is singleton in jersey 2.25\nIf such switching of ConstraintValidationFactory in runtime is okay with maintainers I can create PR.. But maybe distribute it as bundle? So that users who need injection just add it.\nAnd then I guess if you use setValidator you know what you do.\nI'm just not quite sure where to put such bundle. @nickbabcock \nHere I made an example https://github.com/dropwizard/dropwizard/pull/2432\nLooks like it works, one can use @Context as well @Inject in custom ConstraintValidator. I added tests:\n - In core: InjectValidatorBundleTest unit tests for bundle\n - in e2e\n   - InjectValidatorBundleTest test that injection work as well as usual validators.\n   - DefaultValidatorTest regression test, that validators work with/without bundle.\nI'm not sure where to place them correctly, so in case if something not on it's place please guide me.\nFrom tests it looks like change is backward compatible, even with bundle registered. The only option that comes to my mind that if somebody had @Inject in constraint validator from before 1.0.0 and kept it until now.\nAbout registering bundle by default:\nWhile examining code I haven't found other bundles registered by default. I'm not sure is there reason for that or convention.\nAlso to mention, the only reason of having this functionality in bundle is because of shared instance of MutableValidatorFactory between initialize and run methods.. Hi!\nAs I mentioned in PR, I didn't find way to share instance of MutableValidatorFactory between initialize and run methods, that's why it's implemented as Bundle. @nickbabcock Hi!\nYes, this should work. I didn't want to intrude into EnvironmentCommand.run() method since it's nice and clean now.\nTo make it nice I see two options:\n1. Change Environment constructor to accept ValidatorFactory. This requires changing quite of tests code. This looks like more proper solution, but more changes. Also I'm not sure what to do with Environment.setValidator() method.\n2. Add additional constructor for Environment that accepts ValidatorFactory and calls original constructor as well as validator logic. Like this:\n```java\npublic Environment(String name,\n                       ObjectMapper objectMapper,\n                       ValidatorFactory validatorFactory,\n                       MetricRegistry metricRegistry,\n                       @Nullable ClassLoader classLoader,\n                       HealthCheckRegistry healthCheckRegistry) {\n        this(name, objectMapper, validatorFactory.getValidator(), metricRegistry, classLoader, healthCheckRegistry);\n    ConstraintValidatorFactory constraintValidatorFactory =\n        validatorFactory.getConstraintValidatorFactory();\n\n    if (constraintValidatorFactory instanceof MutableValidatorFactory) {\n        jersey().register(new SetValidatorFactoryFeature(\n            (MutableValidatorFactory) constraintValidatorFactory\n        ));\n    }\n\n}\n\npublic static class SetValidatorFactoryFeature implements Feature {\n\n    @Inject\n    private ResourceContext context;\n\n    private final MutableValidatorFactory mutableValidatorFactory;\n\n    public SetValidatorFactoryFeature(MutableValidatorFactory mutableValidatorFactory) {\n        this.mutableValidatorFactory = mutableValidatorFactory;\n    }\n\n    @Override\n    public boolean configure(FeatureContext featureContext) {\n        ConstraintValidatorFactory originalFactory =\n            context.getResource(InjectingConstraintValidatorFactory.class);\n\n        mutableValidatorFactory.setValidatorFactory(originalFactory);\n        return true;\n    }\n}\n\n```\nI can create PR for preferable case!. I created two PRs https://github.com/dropwizard/dropwizard/pull/2521 and https://github.com/dropwizard/dropwizard/pull/2522 to solve this, both of them works. Also we can start with way proposed in #1360 and mark Bundle as @Deprecated and then remove it later.. By UnsatisfiedLinkError looks like that native method not found.\nMaybe you have to specify image to run maven in appveyor, e.g. image: ubuntu\nHere more info:\nhttps://www.appveyor.com/docs/getting-started-with-appveyor-for-linux/#running-your-build-on-linux\n. ",
    "ramsrib": "Guys, please include a section for Dependency Injection in the official documentation with some examples.. Does soabase is supported by the dropwizard community?. Most common mistake is using object instance instead of class. \nInstead of registering a object instance like this\nenvironment.jersey().register(new AuthDynamicFeature(new ExampleAuthFilter()));\nuse the class while registering the filter (so that @Context injection will work as expected),\nenvironment.jersey().register(new AuthDynamicFeature(ExampleAuthFilter.class));\n. Hey, Can you guys add this in the (dropwizard-hibernate) documentation? . yeah, I tried with the latest stable version (1.2.3) and it worked.. Since Junit 5 has been released. It would be nice if someone updates the dropwizard testing documentation with JUnit 5 specific example.. You are right!, I missed to annotate with @UnitWork. \nThanks a lot for quick response.\n. Found an answer, \nAdded the dropwizard-http2 as maven dependency and added the following configuration to the yaml file.\n```\n- type: h2\n  port: 8445\n  keyStorePath: example.keystore\n  keyStorePassword: example\n```\nAfter doing the above stuffs,  my server is not starting and failing with the below error:\nINFO  [2017-03-03 03:50:31,286] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /\nINFO  [2017-03-03 03:50:31,286] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /admin\nINFO  [2017-03-03 03:50:31,294] io.dropwizard.server.ServerFactory: Starting Application\n**org/eclipse/jetty/alpn/ALPN$ServerProvider**\nIt seems like I've to manually add alpha-boot to the dependencies and i did that and now it's failing with this error:\norg.eclipse.jetty.alpn.ALPN must be on JVM boot classpath\n. How to add alpha-boot in the JVM boot classpath?. This documentation clearly says alpha-boot should be on the JVM boot classpath to make it work.\nhttp://dropwizard.readthedocs.io/en/latest/manual/configuration.html#http-2-over-tls\nIs there a right way to set boot classpath on production servers? \nFor Jetty server, adding an parameter --add-to-start=http2 enables the http2 connector: \nhttp://www.eclipse.org/jetty/documentation/current/http2-enabling.html\n. Is it possible to enable http2 support in dropwizard without manually setting a alpn-boot jar (using -Xbootclasspath) in the classpath?\ni.e Is it possible to add an parameter like jetty (--add-to-start=http2) to enable http2 support in dropwizard?. Is this issue fixed in the latest version (1.2.3 or 1.3.0-rc4)?. @joschi Tested with 1.3.0-rc5 (compiled against Java 9) and it worked perfectly.. Awesome guys. . > Maybe we should mark the criteria method as deprecated\nThat would be better.. @arteam AbstractDAO doesn't expose any method to return criterialBuilder. And criteriaQuery is not helpful without a criterialBuilder (especially if you've where clause in your queries). \n. yeah, I started using currentSession() to build my queries. I feel Criteria Builder is too verbose (too many lines) to build simple queries. \nOT: Is there a way to build a typed query against hibernate entities without using Criteria Builder?. Thanks!.. 1.3.0-rc6 fixed the issue.. yeah, sometimes sessions are useful too. Anyways, I looked at the DefaultServerFactory to include option to configure SessionDataStore.  I'm not successful with that, any suggestions or hacks to enable session-store-jdbc jetty module in dropwizard?. @asamaraw How do you use JDBCSessionDataStore with dropwizard? I couldn't find any example/documentation. . Can we include this in the documentation?. Thanks for the detailed response. Default PersistenceException handler will be really useful. . 400 (Bad request) is more appropriate (although 409 also makes sense). Yeah, Opt-in exception mapper along with documentation will be good enough. I updated my example ( https://github.com/ramsrib/dropwizard-exception-mapper-example) with proper exception mapper.\nIf that sounds good, i can create a pull request with that exception mapper.. ",
    "cchacin": "@jplock @joschi do you have a release date for 1.0.0?\n. ",
    "bruce-genhot": "@arteam , OK, thanks, going to try that.\n. It works, thank you.\n. OK, thanks, it works for me now.\n. ",
    "victornoel": "@joschi Here it is, you can run it with mvn exec:exec (it needs Java 8, I set up the maven-toolchain-plugin, but you can simply remove it from the pom and also don't forget to change the path to java in the maven-exec-plugin, it doesn't follow the toolchains).\nThe Application:\n```\npackage bug.injection;\nimport java.io.IOException;\nimport javax.annotation.Priority;\nimport javax.annotation.security.PermitAll;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Priorities;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.Response.Status;\nimport javax.ws.rs.ext.Provider;\nimport org.eclipse.jetty.server.session.SessionHandler;\nimport org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;\nimport io.dropwizard.Application;\nimport io.dropwizard.Configuration;\nimport io.dropwizard.auth.AuthDynamicFeature;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\npublic class MyApplication extends Application {\n    public static void main(String[] args) throws Exception {\n        new MyApplication().run(args);\n    }\n@Override\npublic void initialize(Bootstrap<Configuration> bootstrap) {\n    assert bootstrap != null;\n}\n\n@Override\npublic void run(Configuration configuration, Environment environment) throws Exception {\n    assert environment != null;\n\n    environment.servlets().setSessionHandler(new SessionHandler());\n\n    // activate the filter on protected resources\n    environment.jersey().register(new AuthDynamicFeature(new AuthenticationFilter()));\n    // handle authorisation in resources\n    environment.jersey().register(RolesAllowedDynamicFeature.class);\n\n    final Sessions sessResource = new Sessions();\n\n    environment.jersey().register(sessResource);\n}\n\n}\n@Path(\"/status\")\nclass Sessions {\n@GET\n@PermitAll\npublic Response status() {\n    return Response.ok().build();\n}\n\n}\n@Provider\n@Priority(Priorities.AUTHENTICATION)\nclass AuthenticationFilter implements ContainerRequestFilter {\n@Context\nHttpServletRequest request;\n\n@Override\npublic void filter(ContainerRequestContext requestContext) throws IOException {\n    assert requestContext != null;\n\n    assert request != null;\n    final HttpSession session = request.getSession(false);\n\n    if (session != null) {\n        return;\n    }\n\n    throw new WebApplicationException(Status.UNAUTHORIZED);\n}\n\n}\n```\nThe POM:\n```\n\n4.0.0\nbug.injection\nbug-injection\n0.0.1-SNAPSHOT\n<properties>\n    <java-version>1.8</java-version>\n    <maven.compiler.source>${java-version}</maven.compiler.source>\n    <maven.compiler.target>${java-version}</maven.compiler.target>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n    <jersey.version>2.23.1</jersey.version>\n    <dropwizard.version>0.9.3</dropwizard.version>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.glassfish.jersey</groupId>\n            <artifactId>jersey-bom</artifactId>\n            <version>${jersey.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-bom</artifactId>\n            <version>${dropwizard.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-auth</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>de.svenkubiak</groupId>\n        <artifactId>jBCrypt</artifactId>\n        <version>0.4.1</version>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-toolchains-plugin</artifactId>\n            <version>1.1</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>toolchain</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <toolchains>\n                    <jdk>\n                        <version>1.8</version>\n                    </jdk>\n                </toolchains>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.codehaus.mojo</groupId>\n            <artifactId>exec-maven-plugin</artifactId>\n            <version>1.5.0</version>\n            <extensions>true</extensions>\n            <configuration>\n                <executable>/usr/lib/jvm/java-8-openjdk/jre/bin/java</executable>\n                <arguments>\n                    <argument>-ea</argument>\n                    <!-- Classpath -->\n                    <argument>-classpath</argument>\n                    <classpath />\n                    <!-- Main class -->\n                    <argument>bug.injection.MyApplication</argument>\n                    <argument>server</argument>\n                </arguments>\n            </configuration>\n        </plugin>\n    </plugins>\n    <pluginManagement>\n        <plugins>\n            <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->\n            <plugin>\n                <groupId>org.eclipse.m2e</groupId>\n                <artifactId>lifecycle-mapping</artifactId>\n                <version>1.0.0</version>\n                <configuration>\n                    <lifecycleMappingMetadata>\n                        <pluginExecutions>\n                            <pluginExecution>\n                                <pluginExecutionFilter>\n                                    <groupId>org.apache.maven.plugins</groupId>\n                                    <artifactId>maven-toolchains-plugin</artifactId>\n                                    <versionRange>[1.1,)</versionRange>\n                                    <goals>\n                                        <goal>toolchain</goal>\n                                    </goals>\n                                </pluginExecutionFilter>\n                                <action>\n                                    <ignore></ignore>\n                                </action>\n                            </pluginExecution>\n                        </pluginExecutions>\n                    </lifecycleMappingMetadata>\n                </configuration>\n            </plugin>\n        </plugins>\n    </pluginManagement>\n</build>\n\n\n``\n. Ah, callGETon/statusto see the exception caused by the nullHttpServletRequest` \n. Great, it works perfectly!\nFYI, it does not with @Session because of #1362 I think.\n. Hi, I'm back on this:\nAfter some reading (mainly of the documentation of Configurable.register(java.lang.Object component)), actually, there should be support for injection of the @Context annotated members of the ContainerRequestFilter (at least supported by default of course) if it was registered by AuthDynamicFeature as a class and not an instance.\nSo it would be interesting if AuthDynamicFeature would support passing a class instead of an instance in the constructor (maybe both exclusive cases should be available even).\nI tested it and it does work.\nWhat do you think?\n. I'm not sure I understand what you say w.r.t. what I just said\u2026\nI was simply proposing to redefine AuthDynamicFeature like this:\n```\npublic class AuthDynamicFeature implements DynamicFeature {\nprivate final ContainerRequestFilter authFilter;\n\nprivate final Class<? extends ContainerRequestFilter> authFilterClass;\n\npublic AuthDynamicFeature(ContainerRequestFilter authFilter) {\n    this.authFilter = authFilter;\n    this.authFilterClass = null;\n}\n\npublic AuthDynamicFeature(Class<? extends ContainerRequestFilter> authFilterClass) {\n    this.authFilter = null;\n    this.authFilterClass = authFilterClass;\n}\n\n@Override\npublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n    final AnnotatedMethod am = new AnnotatedMethod(resourceInfo.getResourceMethod());\n    final Annotation[][] parameterAnnotations = am.getParameterAnnotations();\n    if (am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)\n            || am.isAnnotationPresent(PermitAll.class)) {\n        registerAuthFilter(context);\n    } else {\n        for (Annotation[] annotations : parameterAnnotations) {\n            for (Annotation annotation : annotations) {\n                if (annotation instanceof Auth) {\n                    registerAuthFilter(context);\n                    return;\n                }\n            }\n        }\n    }\n}\n\nprivate void registerAuthFilter(FeatureContext context) {\n    if (authFilter != null) {\n        context.register(authFilter);\n    } else if (authFilterClass != null) {\n        context.register(authFilterClass);\n    }\n}\n\n}\n``\n. To be explicit: by doing so, you get injection (for@Contextand@Inject) into the filter as desired when usingauthFilterClass`.\n. I'm not sure, but maybe the best is to add as less as possible extra code inbetween dropwizard and jersey, so I\u00a0personally prefer the addition of a constructor with good documentation (which would refers to jersey's documentation of register) and let the user add extra things if he needs it.\nThe problem with explicit injection is also with the fact that if people really need to pass an object and not a class, it is because they have a custom constructor for their class, and then implicitly (from the pov of the user) explicitly (from the pov of dropwizard auth) injecting will open the door to complex initialisation steps in an already initialised object. So I also prefer the simple solution for this :)\nBut I'm surprised because when registering an object using environment.jersey().register(), there is injection, so maybe what I'm saying is not so problematic\u2026\n. Actually @psamsotha, it seems that PolymorphicAuthDynamicFeature already works with classes (but not objects), so the needs for passing object may arises, but the probability seems low.\nI would have like to make a PR for AuthDynamicFeature but I'm going to be unavailable for a month, and honestly, I decided to stop using the dropwizard-auth package (I preferred to integrate pac4j with dropwizard, if it is successful I will make a bundle of it I think), but if you want to wait that time, I will do it gladly :)\n. > @victornoel, I've since put together a bundle for integrating Dropwizard with j2e-pac4j, if you're interested. It's pretty much just a layer of glue between a pac4j config file section and org.pac4j.j2e.filter.SecurityFilter, but perhaps it could suit your application's needs.\nFYI @evnm, I answered this on the mailing list discussion here the other day :)\nBasically there is no big problem using pac4j with dropwizard except for the handling of the configuration that was a bit cumbersome (I\u00a0would have liked to be able to exploit more easily DI but I think maybe it's because I'm not skilled enough with DI in dropwizard :).\nAnyway, right now I can't, but soon I will:\n- propose the PR discussed here in order to finish what I started\n- propose an integration of pac4j for jersey (out of scope of dropwizard)\n- and then I guess we could integrate it in your project (i.e., propose 2 bundles in dropwizard-pac4j)\n. I made a PR (#1715) to finally close this issue :)\n. @abhishek199-dhn here is not the best place to solve Jersey injection problems, so I would recommend to ask directly on jersey's discussion groups.\nThat being said, I'm not sure how to fix your problem. One solution would be to register a class and put its dependencies in an hk2 AbstractBinder registered also into jersey... but it's not very elegant, true.. @evnm is this present in 1.1.x only?. @arteam for now I enable it by myself with this workaround:\njava\n        environment.lifecycle().addServerLifecycleListener(server -> {\n            Handler handler = server.getHandler();\n            while (handler instanceof HandlerWrapper) {\n                handler = ((HandlerWrapper) handler).getHandler();\n                if (handler instanceof BiDiGzipHandler) {\n                    LOG.info(\"Setting sync flush on gzip compression handler\");\n                    ((BiDiGzipHandler) handler).setSyncFlush(true);\n                }\n            }\n        });\nSo don't bother with it except if it's very easy and you plan to release many 1.0.x before 1.1.x is released :)\nThanks!. @arteam by the way, I think you forgot to add it to the changelog of the released 1.1.0 :). Should be alright now :)\n. Nevermind, it seems that Jetty test framework does not support this functionality (according to https://java.net/jira/browse/JERSEY-2644) but using Grizzly2, it does work (with GrizzlyWebTestContainerFactory).\n. Thanks, good idea, even though it's not perfect in case one need to exploits inejction from Jersey, but it should be ok for now, I will do it by hand :)\n. After reading a bit how DefaultServlet was organised, here are some conclusions I arrived to:\n- We could almost replace AssetServlet with DefaultServlet as-is and play with the configuration:\n  - dirAllowed may be set to false\n  - resourcesBase (or relativeResourceBase? not clear ^^) should be set to AssetServlet's resourcePath)\n  - welcomeFiles should be set to the indexFile\n  - UTF8 is already used by default\n- We should actually extend DefautlServlet to ensure getResource is called with a path without the uriPath, so we must strip it before passing it to DefautlServlet.getResource().\n- It's not clear what should be done with the welcomeServlet parameter... I'm not sure what it does actually ^^ I guess we should simply disable whatever it does :)\nNote also some differences with AssetServlet:\n - it enables ranges for everything if acceptRanges is set to true, and disable them otherwise.\n - it can do resources caching from disk (different from client caching, which is support like AssetServlet)\n - it supports pre-gzipped files (disabled by default)\n - it supports etags (I have no idea what it is ^^ disabled by default)\n - it can do directory listing, as said before\nAll of this means then that AssetBundle could have a bit more configuration than what it already has...\nThis is all for now, I will maybe consider making a PR in some weeks, when I get some time, so if you have opinions, advices and recommendations, don't hesitate :). @evnm Some experiment was done by @nbauernfeind in the context of dropwizard-bundles/dropwizard-configurable-assets-bundle#28 and his conclusions were that maybe it would be a better idea to implement gzip support in AssetServlet because it would be difficult to reimplement some of the functionalities already provided on top of DefaultServlet.\nThese conclusions applies to dropwizard-configurable-assets-bundle's AssetServlet but I guess most of them extend to dropwizard's\u2026. @joschi good call, it works with this version :)\nI close the issue then!. Whoups no, I made a mistake when I tested and it does NOT work with 1.1.0-rc2 :). ",
    "philipp94831": "@sysmat Same here, is there a solution yet? I want to inject the HttpServletRequest into my AuthFilter. ",
    "abhishek199-dhn": "Hi\n@evnm  @victornoel \nI'm a beginner and i'm stuck with this ...need help.\n@Context injection works with classes but not able to make it work with Objects.\nDropwizard Version:- 1.1.0\nContainerRequestFilter \n````java\npublic class ApplicationIPAuthFilter implements ContainerRequestFilter {\nprivate static final Logger LOGGER = LoggerFactory.getLogger(ApplicationIPAuthFilter.class);\nprivate HerculesRestAccessor restAccessor;\nprivate String applicationName;\n\n@Context\nprivate HttpServletRequest httpServletRequest;\n\npublic ApplicationIPAuthFilter(){\n}\n\npublic ApplicationIPAuthFilter(HerculesRestAccessor accessor, String applicationName) {\n    restAccessor = accessor;\n    this.applicationName = applicationName;\n}\n\n@Override\npublic void filter(ContainerRequestContext requestContext) throws IOException {\n    // need remote Ip\n    String remoteIp = this.httpServletRequest.getRemoteAddr();\n    ....\n}\n\n}\nDynamicFeaturejava\npublic class ApplicationIPAuthFeature implements DynamicFeature {\nprivate final HerculesRestAccessor accessor;\nprivate final String applicationName;\n\npublic ApplicationIPAuthFeature(HerculesRestAccessor accessor, String applicationName) {\n\n    this.accessor = accessor;\n    this.applicationName = applicationName;\n}\n\n@Override\npublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n    if (resourceInfo.getResourceMethod().getAnnotation(ApplicationIPAuthRequired.class) != null) {\n\n        // not working\n        context.register(new ApplicationIPAuthFilter(accessor, applicationName));\n\n         //@Context injection works in ContainerRequestFilter for classes\n        //context.register(ApplicationIPAuthFilter.class);\n    }\n}\n\n}\n````\nDropwizard Application \n````java\n// does not work\n environment.jersey().register(new ApplicationIPAuthFeature(restAccessor, Constants.APP_NAME));\n// does not work\n environment.jersey().register(new AuthDynamicFeature(new ApplicationIPAuthFilter(restAccessor, Constants.APP_NAME)));\n````\nIs there any way i can solve this.?. @victornoel \nThanks.:) \nI think its jersey issue...Injections don't work when registering as an object.\nFinally i got it working by injecting both the fields and register the filter as a class.\n. ",
    "ravindra1986": "Hi All,\nI am new to jersey I wrote one jersey filter and at ContainerRequestContext set some attribute. after I wrote 1 more class and getting ContainerRequestContext  I used @Context annotation but I am getting the null.\nuse of ContainerRequestContext   at helper class.\n@Context\n    private ContainerRequestContext request;\nPlease help me asap.. ",
    "mrb": "@joschi Hey there! Sorry about that - I just made the documentation public https://docs.codeclimate.com/v1.0/docs/pmd and https://docs.codeclimate.com/v1.0/docs/checkstyle - I'd be happy to answer any other questions you have!\n. @joschi @ryankennedy I would recommend tweaking the configurations for these engines before we integrate the PR support, would be happy to help with that!\n. @ryankennedy @joschi Awesome!! Let me know how I can help if anything comes up.\n. ",
    "gurrie": "Hi,\nMany thanks for the feedback. My thinking was not to replace the existing http client with the caching client but rather to provide an option on the JerseyClientBuilder to create a caching client or a standard client. That way the developer would be free to chose the implementation based on their needs. \nAs you mentioned this would require pulling in the httpclient-cache module as a dependancy. If you are still uncomfortable with putting it in the core, I would be happy to create it as an external module, but as you mentioned it would require a few changes to the existing code to support the change. \nI am happy to describe what I would require in that case if you see this as being beneficial? It would also potentially be beneficial to instrument the cache so we could provide metrics on the cache usage etc.\nRegards\nBrian\n. Do you think it would be beneficial to move this conversation to the dev mailing list?\n. Hey, nope if you guys would prefer it as a standalone module that's fine.\nWould you like me to explain which changes would be required or do you have\nan idea already?\nOn 20 July 2016 at 02:28, Evan Meagher notifications@github.com wrote:\n\nI think a mailing list thread would be a good recourse if we can't come to\nagreement here in a timely fashion, but I don't think it's necessary just\nyet. If developing a separate module is acceptable to you, I think we can\nmove forward. Exposing certain internals of HttpClientBuilder strikes me\nas a reasonable idea, as there very well may be other use cases that could\nbe neatly solved by extending it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1633#issuecomment-233814165,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAOzX2rmhk0TxBJNpx89sfAa63KUfxcpks5qXXm2gaJpZM4JKzse\n.\n. \n",
    "mskager": "I had forgot to add @Produces(MediaType.APPLICATION_JSON). That solved the issue with @NotNull not being evaluated. Sorry for my confusion. Closing ticket. \n. ",
    "Jimexist": "thanks for the opinions and comments - I think that PR looks great to me!\n. what about the value being an enum:\njava\nprivate enum AuthzResult {\n  Allow, Deny\n}\nso it's rather clearer that the tri-state of true, false, null in the boolean case.\n. that's a valid point, a comment should suffice since it's private\n. ",
    "sheldon-sminq": "Ok found the issue  I used the  https://github.com/xvik/dropwizard-guicey library for guice support in dropwizard. From the dependency tree  the HK2 Guice bridge is at version 2.4.0-b31, but the latest dropwizard jersey is at 2.4.0-b34. This could be the root cause.\n. ",
    "jmif": "Thanks for the information. \u00a0I'm currently using a command to run a long running worker inside of our drop wizard env.\nTwo questions:\n1. Is this considered a bad use of a command and if so is there s recommended practice.\n2. Would Dropwizard be interested in having support for something like this in LifecycleEnvironment?\n. Thanks for the information\n. ",
    "cgendreau": "1) My understanding is that I should create my own Servlet with @MulipartConfig and register it with environment.getApplicationContext().addServlet(...) ?\n2) My main goal is to set a limit on the InputStream I may receive:\njava\n@POST\n@Consumes(MediaType.MULTIPART_FORM_DATA)\npublic void uploadFile(@FormDataParam(\"file\") final InputStream inputStream,\n                                    @FormDataParam(\"file\") final FormDataContentDisposition contentDispositionHeader){ ...}\n. ah yes sorry, there were 2 different things.\n1) This is what I was referring to:\nMultipartConfigElement mce = new MultipartConfigElement(\"/tmp\", 10, 1, 10);\nenvironment.getApplicationContext().addServlet(FileUploadServlet.class, \"/upload\").getRegistration().setMultipartConfig(mce);\nFileUploadServlet is my own class.\n2) This is indeed part of the JAX-RS resource I had and it is replaced by a plain FileUploadServlet in what I mentioned above. It was more a wish to be able to keep the JAX-RS resource but configure the underlying Servlet. This is becoming more a Jersey thing than Dropwizard. Thanks for your suggestions with limited/bounded InputStream, that should definitely work even I have to admit I'm not sure what will happen with the \"rest\" of the stream once we reach the limit (do we need to consume it or we can just return) but, this is again outside of the Dropwizard scope.\nThanks for you help @joschi \n. I have just tested a JAX-RS resource combined with a wrapped stream from ByteStreams#limit(\u2026) and it works perfectly with a proper Exception handling/mapping.\nFor the records, Apache commons-fileupload can also work directly on a HttpServletRequest so it can be easily combined with a JAX-RS resource.\nSorry for the noise, at least it makes some kind of documentation for that.\n. ",
    "dknc": "Override the default constructor of the concrete dropwizard application does not work as super constructor will be always called first and call BootstrapLogging.bootstrap(Level.DEBUG) in sub class make no effect as the bootstrap method will set bootstrapped flag to true after it is called, subsequent call to this method just simply returns. \n. ",
    "tbartley": "Submitted #1664 pull against v1.0.x branch but it fails VersionEye testing. I didn't change any POMs - how can I fix that?\n. We are coming all the way from 0.7.2 \ud83d\ude0a . If only the software didn't work so well we'd've been more motivated to move sooner.\n. Also, I wasn't sure how to approach writing a unit test in HttpClientBuilderTest.java. Some guidance there would be appreciated.\n. Thanks for the feedback @arteam I've made your suggested changes and implemented additional unit test coverage following your suggested pattern.\nI ummed and ahhed over the DropwizardSSLConnectionSocketFactory constructor unit test using reflection to check private field value but I liked using a getter for the verifier field on this class even less since it would imply getter for tlsConfiguration field for consistency which exposes that to internal modification which implies need for immutable TlsConfiguration .... Also, the getter would've needed to be public rather than package protected since unit test is in a different package.\nI have also squashed my commits.\n. No problem at all. This software works so well for us. Thank you for the far greater contribution you make.\n. Only concern is that doesn\u2019t match the style of other optional parameters for that class e.g. trustStorePath, keyStorePath, \u2026.\nCheers,\nTim\nOn Apr 10, 2017, at 2:44 PM, Justin Plock notifications@github.com<mailto:notifications@github.com> wrote:\n@jplock requested changes on this pull request.\nLet's make private String certAlias be optional\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/dropwizard/dropwizard/pull/2001#pullrequestreview-31954710, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADMGnCIOO90yEpA91khrQTA4Z6ikd01Pks5rupSTgaJpZM4M5Oxp.\n. Thanks @jplock - I've removed the @Size constraint.. Thanks @evnm - true. I've tidied that up.. Ach! I'd been diligent about that elsewhere. Missed it here. Thanks.\n. Sure\n. Sure\n. Sure\n. Ensuring that if a value for certAlias is provided it's min length is 1. Maybe this is unnecessary.. Yeah - the codeclimate checker pulled me up on that too. Am working through everything it reported.. ",
    "Ferada": "I need something similar for testing a separate command for an application, so this comes in handy. Now, could this also use ConfiguredCommand instead of EnvironmentCommand?\n. ",
    "rishair": "I got to this PR a couple days late but it seems to assume usage of the Hibernate ORM. We have a similar rule and set of classes that provide support for JDBI based DAOs that I'm hoping to contribute back eventually. Would it make sense to package the changes in this PR under a more specific namespace and perhaps extract out common interfaces to leave room for other DB libraries to fill in? \nAlthough, after going through this diff I'm finding it difficult to find ways to converge on a single interface because usages of Hibernate ORM vs JDBI are very different. Support for multiple DB access methods is just something to keep in mind as the story for testing continues to unfold.\n. ",
    "dr3s": "LA5_0 = 58\nLA5_2=44\nalt5=6\n. Now that I look at the statement, I have a trailing : on :idtype:\njdbi must have fixed the parsing to prevent the bad sql\n. ",
    "jimm-porch": "If you wanted to just completely turn off GZIP in Dropwizard 1.x endpoints, how would you do it?  I'm trying to find out how to do it, it seems like the feature disappeared with 1.x\n. ",
    "cakofony": "Thanks for the quick feedback!  I implemented your suggestion and added testing.\nI'm not sure how to run the style tests locally, I might have to re-push in a couple minutes\n. ",
    "moezubair": "Thanks @arteam!\nI am able to create a single client, but was not aware that you can also set connection management settings to have a connection pool.\n. ",
    "ssunzulily": "How do I do the following in a dropwizard project?\nHibernate4Module hm = new Hibernate4Module();\n    hm.disable(Feature.USE_TRANSIENT_ANNOTATION);\n. ",
    "jhaber": "Thanks for the quick turnaround!\n. ",
    "burakdede": "Yes I tried both ways\nfirst by \nenv.getApplicationContext().setContextPath(\"api\")\nsecond\nserver:\n    adminMinThreads: 1\n    adminMaxThreads: 64\n    applicationContextPath: /api/*\nStill no luck with path prefix on Location.\n. Yes, I verified with my tests too and somehow I missed that Jersey bug.  Thanks anyway.\n. ",
    "htimur": "Hi @evnm, yes the application context path is overridden, and that application context is used to set the url mapping:\nenvironment.servlets().addFilter(\"Guice Filter\", GuiceFilter.class).addMappingForUrlPatterns(null, false, environment.getApplicationContext().getContextPath() + \"*\")\n. @evnm the issue appeared after migrating to dropwizard 1.0, previously with 0.9 version it was working without any problems. \n. @evnm Thanks, you are right, it would be good to improve documentation on context path interpretation.\n. ",
    "gongmingqm10": "Hey Nick, how did you launch this App?\nIt works in our local environment where we launch it via Intellij. \nBut it failed in the integration env where we start it via java -jar test-SNAPSHOT.jar server integration.\n. ",
    "matthewwoodruff": "Hey,\nI'm working alongside @gongmingqm10 and carried out a little more research. \nDropwizard 0.9.2 has a dependency on spullara/mustache.java version 0.8.17 but Dropwizard 1.0.0 uses 0.9.2\nI've created a simple application mustache-resolution to test the two versions of spullara/mustache.java in isolation and it appears as though versions 0.9.x don't support partial imports such as  {{ ../partials/header }} although 0.8.x versions do.\nWe've found a similar thread in the mustache.java forum and posted an update here.\n. ",
    "Rwprice": "Whoops, my bad, I was making a mistake in my authfilter that was actually the cause. Its working as expected now. You can delete/close this issue\n. ",
    "markelliot": "Doesn't really help, but I found an open logback ticket for this issue and proposed a patch here: https://github.com/qos-ch/logback/pull/336. I also mentioned this on the mailing list, but haven't heard back from any maintainers about if or when this would get merged.\n. seemed simple enough to just hammer out: #1917.. The logback default is false, so I stuck with the existing behavior as the\ndefault -- this seems like it will be the least surprising. Happy to flip\nthe default if there's a preference to do so.\nOn Tue, Feb 7, 2017 at 2:36 AM Justin Plock notifications@github.com\nwrote:\n\n@markelliot https://github.com/markelliot @nickbabcock\nhttps://github.com/nickbabcock should we provide a sane default and set\nthe default to true (to never block)? I'm not sure what the more explicit\napproach would be or what users would expect the default behavior to be.\n/cc @dropwizard/committers\nhttps://github.com/orgs/dropwizard/teams/committers\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1917#issuecomment-277883668,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAp3Q6J-DdiK4LpTE6-smncRfgotSgtUks5rZ9ivgaJpZM4L4xFC\n.\n. logback 1.1.10 includes the following fix:\nThe AccessEvent.prepareForDeferredProcessing() method was not idempotent. This caused subtle bugs under Jetty. See LOGBACK-1189 for details.. I took latest at the time, probably makes sense to go further.\nOn Tue, Feb 14, 2017 at 9:34 AM Friso Vrolijken notifications@github.com\nwrote:\nJust curious, any reason not to update to the latest greatest (1.2.1)?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/1918#issuecomment-279655168,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAp3Q8O26wVdgnYSpuJJl6iwGV0BwfXNks5rcXUagaJpZM4L42z9\n.\n. not really sure where to put common settings in docs, LMK if you'd like me to move this somewhere else.. cool, moved there. \n",
    "msbit01": "That makes sense to me. Is there a way we can prioritize this for the next breaking release so it doesn't slip through the cracks again?\n. ",
    "phss": "This might be hacky but what if there was another ConfiguredBundle (let's call it TypedConfiguredBundle) that would have a signature of void initialize(Bootstrap<T> bootstrap);?\nThat would also imply the need of another bootstrap.addBundle method that takes the TypedConfigurationBundle.\nI will give it a try later on and report back, but could this work?\n. ",
    "codebuff": "I tried to follow the tutorial .\nIt compiled fine (mvn package), however it didn't run. (... server hello-world.yml)\nThis commits makes changes to getting started doc to address the issue.\nPlease note that:\nThe code in example repo is different than that of getting started doc, which doesn't have this issue, but that would require creation of one more file (in getting started tutorial), this commits avoid that by changing two lines in method sayHello)\n. dropwizard version 0.9.1, project created from archetype (as per tutorial)\nOptional of Java8 (Guave doesn't include orElse)\n. ",
    "Tibor17": "@cowwoc \n@evnm \nI am from Maven Surefire project. I see you have mentioned Jira issue 855. If you need to have any support just let me know.\n. @joschi \nI have my project https://github.com/tibor17/javaee-samples in my public repository. There is JUnit Runner which is a kind of very fast injector of Beans. The bean is wrapped with proxy after constructor of test class has finished.\nTherefore I need the method called later because I am not able to provide the bean while I call the method addResource(). For you it should not be a problem because the JUnit evaluation method will have our beans ready by my framework but not at the time when initializing the field of Rule (it's the constructor of test class).. @joschi \nIt looks like this:\n```\n@RunWith(InjectionRunner.class)\npublic class MyTest {\n     @Inject\n     private MyProductionResource resource;\n @Inject\n private Dao dao;\n ...\n\n @Rule\n public final ResourceTestRule resources = ResourceTestRule.builder()\n        .addResource(resource)\n        .build();\n\n @Test\n public void testRestResource() {\n }\n\n}\n``. Theresourcewill be null. Therefore a new method should be added withProducer` of Java 1.8.. @joschi\nThx I will try that.\nDo you also deploy SNAPSHOTs to Maven Central?\nWhen you plan a release?\n. @joschi \nCool, it works:\n```\n@RunWith(InjectableRunner.class)\npublic class ResourceTest {\n    @Inject\n    private ReportAdapterService resource;\n@Rule\npublic final ResourceTestRule RULE = ResourceTestRule.builder()\n        .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n        .addResource(() -> resource)\n        .build();\n\n@Test\npublic void shouldReceiveXml() {\n    assertThat(RULE.target(\"/report-adapter/report/1\")\n            .request()\n            .get(XyzReport.class))\n            .isEqualTo(new XyzReport().setSomeData(5L));\n}\n\n}\n``. @joschi \nSince it works fine, can you add it to releasenotes and use it in the nearest release version?. If I used Jersey 2.26 I gotjava.lang.NoSuchFieldError: INCLUDE_ALLIt is thrown in dropwizardResource#before()and the variabletestis null. Constructornew JerseyTest()fails which calls methodconfigureDeployment()overridden in dropwizardResource.  The methodconfigureDeployment()calls constructornew DropwizardTestResourceConfig(configuration)which finally throwsNoSuchFieldError` and here is the stack trace:\n0 = {StackTraceElement@3460} \"org.glassfish.jersey.server.ResourceConfig$State.(ResourceConfig.java:114)\"\n1 = {StackTraceElement@3461} \"org.glassfish.jersey.server.ResourceConfig.(ResourceConfig.java:356)\"\n2 = {StackTraceElement@3462} \"io.dropwizard.jersey.DropwizardResourceConfig.(DropwizardResourceConfig.java:55)\"\n3 = {StackTraceElement@3463} \"io.dropwizard.testing.common.DropwizardTestResourceConfig.(DropwizardTestResourceConfig.java:33)\"\n4 = {StackTraceElement@3464} \"io.dropwizard.testing.common.Resource$1.configureDeployment(Resource.java:188)\"\n5 = {StackTraceElement@3465} \"org.glassfish.jersey.test.JerseyTest.(JerseyTest.java:207)\"\n6 = {StackTraceElement@3466} \"io.dropwizard.testing.common.Resource$1.(Resource.java:180)\"\n7 = {StackTraceElement@3467} \"io.dropwizard.testing.common.Resource.before(Resource.java:180)\"\n8 = {StackTraceElement@3468} \"io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:99)\"\n9 = {StackTraceElement@3469} \"org.junit.rules.RunRules.evaluate(RunRules.java:20)\"\n10 = {StackTraceElement@3470} \"org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\"\n11 = {StackTraceElement@3471} \"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\". @jplock \nWhen you want to cut new Version 2.0.0 or 2.0.0-RC1?. It seems there is a fix commit since 2017 - https://github.com/eclipse-ee4j/jersey/issues/3700\nDid you try the commit? If it works, we would have a reason to announce the Jersey team to push the commit to master.. @joschi \nI know you do not use it in dropwizard. I only said to use it local PC and announce this PR with test result.. Providers should not implement a required interface.\nWhy the warning states to implement interface? Jersey interface?\nIs it regression in 2.27? Did you try out with 2.26?. I think they are determining a typical Java Resource class in Jersey. Then this warning is absolutely irrelevant. They should rephrase the warning then.. @joschi I sent my comment. The reason I want to have the latest Jersey in Dropwizard is the fact that the serializer of javax.json.JsonObject (used by client of resource class) produces a strange JSON and numbers are not serialized at all. There are some extra attributes like chars, string. String value 1 in JSON attribute is interpreted as JsonNumber. I hope new version would fix this.. Right!\nThis is Supplier which means its value java.lang.Object should be retrieved\nand passed to singletons.\nHere we miss the supplier's call \".get()\" while adding to singletons.\npublic B addProvider(Supplier providerSupplier) {\nsingletons.add(providerSupplier);\nreturn (B) this;\n}\nOn Mon, Aug 13, 2018 at 12:23 PM Serhiy Palamarchuk \nnotifications@github.com wrote:\n\nCould it be a misuse of Jersey resource api at?\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/common/Resource.java#L66\nAccording to Jersey logic it verifies that the value provided is not\nlocal, abstract, interface, inner etc.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2418#issuecomment-412473736,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA_yR8IWEhPGY0Jopv7W84l1cqkkVMt-ks5uQVOZgaJpZM4U6kNQ\n.\n\n\n-- \nCheers\nTibor\n. I was wrong, the singletons are suppliers Set<Supplier<?>> singletons. So the code is ok.. You should use higher version maven-surefire-plugin:2.22.1 because this is able to work with any JUnit5 version. The JUnit5 provider should not be used. It's enough to use the JUnit5 engine in POM dependencies.. closing as following the discussion on google discussion.. @joschi What happened with the Travis build? Any test error? I don't see it actually.\nProbably you could not push it therefore to master.. Yes, I mentioned maven-shade-plugin too. We use it in Apache Maven but you have to check the license of guava if you want to inline it in dropwizard.. There are still 8 open issues in version 2.0.\nCan the Dropwizard committers make a decision about this issue and make a bigger progress on it?. Guava is breaking backwards compatibility. It is found as a problematic library nevertheless historically many people have used it before. One way would be to remove it completely or write utilities in Dropwizard which substitutes Guava and the last alternative would be to use maven-shade-plugin and shift Java packages and inline into dropwizard libs.. @joschi \nRemoving Guava happens elsewhere but here important point is to make stable Dropwizards towards users since it is a big project. As you can see Google breaks typical rules of what major.minor.incremental version means and you can really expect broken compatibility with increased minor version. Next bad with Guava is the modularity because this is library having multiple responsibilities in single Jar instead of a good design with modular Guava which was in past.. ",
    "rpawarmca": "Thanks @evnm , let me check on the mailing list.\n. ",
    "ggrnd0": "Is there anyone alive\n. Full StackTrace too long.\nThere first part\n\nWARN  [2016-08-31 15:31:57,432] org.glassfish.jersey.internal.Errors: The following warnings have been detected: WARNING: Unknown HK2 failure detected:\nMultiException stack 1 of 3\njava.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request\n    at io.dropwizard.auth.PrincipalContainerRequestValueFactory.provide(PrincipalContainerRequestValueFactory.java:20)\n    at io.dropwizard.auth.PrincipalContainerRequestValueFactory.provide(PrincipalContainerRequestValueFactory.java:12)\n    at org.glassfish.jersey.server.internal.inject.ParamInjectionResolver.resolve(ParamInjectionResolver.java:134)\n    at org.jvnet.hk2.internal.ClazzCreator.resolve(ClazzCreator.java:211)\n    at org.jvnet.hk2.internal.ClazzCreator.resolveAllDependencies(ClazzCreator.java:234)\n    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:357)\n    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:471)\n    at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:162)\n    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2022)\n    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:114)\n    at org.jvnet.hk2.internal.ServiceLocatorImpl.getService(ServiceLocatorImpl.java:692)\n    at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:78)\n    at org.jvnet.hk2.internal.ClazzCreator.resolve(ClazzCreator.java:211)\n    at org.jvnet.hk2.internal.ClazzCreator.resolveAllDependencies(ClazzCreator.java:234)\n    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:357)\n    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:471)\n    at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:162)\n    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2022)\n    at org.jvnet.hk2.internal.ServiceHandleImpl.getService(ServiceHandleImpl.java:114)\n    at org.jvnet.hk2.internal.ServiceLocatorImpl.getService(ServiceLocatorImpl.java:692)\n    at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:78)\n    at org.jvnet.hk2.internal.ClazzCreator.resolve(ClazzCreator.java:211)\n    at org.jvnet.hk2.internal.ClazzCreator.resolveAllDependencies(ClazzCreator.java:234)\n    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:357)\n    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:471)\n    at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:162)\n    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2022)\n    at org.jvnet.hk2.internal.ServiceLocatorImpl.getService(ServiceLocatorImpl.java:679)\n    at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:78)\n    at org.jvnet.hk2.internal.ClazzCreator.resolve(ClazzCreator.java:211)\n    at org.jvnet.hk2.internal.ClazzCreator.resolveAllDependencies(ClazzCreator.java:234)\n    at org.jvnet.hk2.internal.ClazzCreator.create(ClazzCreator.java:357)\n    at org.jvnet.hk2.internal.SystemDescriptor.create(SystemDescriptor.java:471)\n    at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:162)\n    at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2022)\n    at org.jvnet.hk2.internal.ServiceLocatorImpl.internalGetService(ServiceLocatorImpl.java:765)\n    at org.jvnet.hk2.internal.ServiceLocatorImpl.getService(ServiceLocatorImpl.java:704)\n    at org.glassfish.jersey.internal.inject.Injections.getOrCreate(Injections.java:172)\n    at org.glassfish.jersey.server.model.MethodHandler$ClassBasedMethodHandler.getInstance(MethodHandler.java:284)\n    at org.glassfish.jersey.server.internal.routing.PushMethodHandlerRouter.apply(PushMethodHandlerRouter.java:74)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage._apply(RoutingStage.java:109)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage._apply(RoutingStage.java:112)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage._apply(RoutingStage.java:112)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage._apply(RoutingStage.java:112)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage._apply(RoutingStage.java:112)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage.apply(RoutingStage.java:92)\n    at org.glassfish.jersey.server.internal.routing.RoutingStage.apply(RoutingStage.java:61)\n    at org.glassfish.jersey.process.internal.Stages.process(Stages.java:197)\n    at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:318)\n    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)\n    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:267)\n    at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)\n    at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)\n    at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)\n    at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)\n    at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n    at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)\n    at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)\n    at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50)\n    at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1174)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1106)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n    at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240)\n    at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51)\n    at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:459)\n    at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)\n    at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)\n    at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n    at org.eclipse.jetty.server.Server.handle(Server.java:524)\n    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:319)\n    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)\n    at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n    at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n    at java.lang.Thread.run(Thread.java:745)\n. > The @Auth annotation is intended for use with request parameters, but you seem to be using it for an instance field of your MyService class.\n\nIf it not intended to use in field than it will not works on... But its works =)\n. ",
    "apatrida": "this originated from: http://stackoverflow.com/a/39295594/3679676\nwould be good to update that SO when this is resolved.\n. @evnm Any in Kotlin will compile the method signature to ByteCode as:\nFrom source:\nfun foo(): Any\nactual bytecode\npublic final foo()Ljava/lang/Object;\n  @Lorg/jetbrains/annotations/NotNull;() // invisible\nAs you can see from a perspective of Dropwizard and anything Java, it sees Object.  In fact the user actually tried using java.lang.Object and hit the same error.  \nAnd it is intended that Any functions as both a type system bound and also as an alias for java.lang.Object.\nSo this error should be easily reproducible in Java with java.lang.Object return type.\n. As you see in https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2496 there is a section talking about polymorphism that shows using Object (or in our case Any) as a valid model.\n. Yes, a sub-resource REQUIRES that no verb be present, or it is not a sub-resource.\n. thanks for the fix!\n. @nickbabcock \n\nWhether it is a good idea to have a method return Object can be left up to discussion, but the code should not throw a NPE.\n\nThis judgement was already made by Jersey as promoted + acceptable.  As you see in https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2496 there is a section talking about polymorphism that shows using Object (or in our case Any) as a valid model.  So it is recommended by Jersey and yet crashed Dropwizard.  (all about sub-resources here: https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2592)\n. ",
    "sidwagle": "Hi Nick,\nYes I never got past this issue, have it on the shelf at the moment will\nrevisit this in a couple of days to see if I get anywhere.\nI used the Dep tree visualization of Intellij and made sure all the\nslf4j-api version are excluded except the one needed by dropwizard but I\nstill get the same error message. I am building a shaded jar.\nThanks,\nSid\nOn Mon, Sep 26, 2016 at 10:50 AM, Nick Babcock notifications@github.com\nwrote:\n\n@sidwagle https://github.com/sidwagle, is this still an issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/1724#issuecomment-249644350,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AClBo0ct97vWST1FU-hxtg1Kce63lqAZks5quAX_gaJpZM4J4e32\n.\n. \n",
    "rafael-driutti-olx": "Hi!\nI see your point, but I tend to identify my hosts (and things in general) by name rather by AWS id, process id or other difficult to remember reference, so that I can easily find them on my metrics storage. Especially on multiple instance/HA/ASG setups.\nI just thought was better to add this kind of logic to the application rather than the init scripts or deploy pipelines. Must be because I'm a sysadmin not a developer :D\nThanks for the feedback!\n. ",
    "manuel-hegner": "How should this work in the end? Lets say you have your WatchService and it signals a changed config. Should Dropwizard now simply parse this file and override the fields of the existing config object? That would work without any kind of API changes, but is kind of risky. If the app changed any field in the config, that change is lost now. This could also create racing conditions. \nOn the other hand the WatchService could throw an event. Maybe the Configuration base class could contain an update method that is called with the changed Configuration and the user can implement this update method himself and decide what to with the new values?. Oh that is interesting. When I start my server without the custom factory I get the error\nException in thread \"main\" com.fasterxml.jackson.databind.JsonMappingException: YAML decoding problem: while scanning for the next token\nfound character      '\\t(TAB)' that cannot start any token. (Do not use \\t(TAB) for indentation)\n in 'reader', line 2, column 1:\n        \"inputs\": [\nThis suggests that he tries to parse the JSON file as a YAML and that fails because tabs are illegal in YAMLs.\nI am also currently on 1.0.5 and I start the server with built.jar server config.json. Then I would argue that the missing tab support for JSON is a bug, because it should be valid. I would like to add a more explicit JSON parsing support to the ConfigurationFactory that supports tabs and other possible pitfalls, ~~but I can't find the class where the JSON is parsed.~~\n~~All I see is that YamlConfigurationFactory calls com.fasterxml.jackson.dataformat.yaml.YAMLParser. Does this parser also support JSON or is there a condition I overlooked?~~\nDo you know of any relevant tests that I could adapt to parsing JSONs with tabs?\nEdit: Nevermind my first question. I just read that JSON within a YAML file is part of the YAML standard and thus every YAML parser should be able to parse most kinds of JSON. It would still be nice to use a real JSON parser that also supports all kinds of whitespaces if the file ends in .json .. Okay, I did this as a new ConfigurationFactory now. The remaining codeclimate issues should be all false positives now.. No problem. It is a pleasure to work for an open source project with a contribution process that works so well.. Oh sure, I didn't realize this library was used.. Is this error still present after you switch IntelliJ to the  eclipse\ncompiler?\nNick Babcock notifications@github.com schrieb am Do., 29. Juni 2017,\n18:08:\n\nCC PR author: @manuel-hegner https://github.com/manuel-hegner to see if\nthey have any insight.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2089#issuecomment-312014694,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALtEXPksjSBTFpoy8W57vhAqoz3Gfe7wks5sI8vqgaJpZM4OF86y\n.\n. I'll look into it tomorrow, but I have no IntelliJ.\n\nNick Babcock notifications@github.com schrieb am Do., 29. Juni 2017,\n19:39:\n\nSwitching to the eclipse compiler fixed the issue.\nIs there anyway we can get those tests to compile with out-of-the-box\nintellij?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2089#issuecomment-312039157,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALtEXJL7DxVHyLV2qEIjzm7Q6y_MOT7bks5sI-E7gaJpZM4OF86y\n.\n. I have no idea why this hels with the problem. Sometimes IntelliJ is weird this way I guess.\n\nBut nice if this works :grinning:. Okay, I started looking at how to implement this. I would need two dependencies to implement this cleanly in dropwizard-validation. The first one is slf4j, which I think would not be a problem. The other one is Javassist to implement the code generation. This is already a transitive dependency of dropwizard-jersey (through jersey and hk2-locator) and part of dropwizard-bom. I am not sure if it would be okay to add this dependency explicitely to dropwizard-validation. What are your thoughts?. Yeah, Reflectasm is definitely the better choice for this kind of problem. I just thought that with javassist all of this could be done within java-validation. I don't really see anyone using this if it is in a new project.. Ich think performance should not be a problem with how the code turned out. Since I use code generation instead of reflection the runtime overhead should be only once per class. But it is never a bad idea to have a benchmark and I look into writing one.. Finally got around to writing a benchmark. As predicted the code generation overhead is negligible. @SelfValidating is still slower than ValidationMethod because Hibernate needs to reevaluate the given error string (templating engine) every time instead of only once per annotation, but it is still much faster than some other hibernate validation annotations.\nHere the results:\nSelfValidatingBenchmark.selfValidating    avgt    8  3243,249 \u00b1 41,973  ns/op\nSelfValidatingBenchmark.validationMethod  avgt    8   568,652 \u00b1 10,330  ns/op\n. Oh yeah sorry. Of course I did that before assuming a false positive. The hash matches. I would agree that a 4XX is the expected behaviour. This is an excellent addition.. I will look into fixing this.. I fixed the inheritance problem but I am not sure in which case the problem with two log messages occurs. @dave1e6  Could you give me a test case (maybe based on my PR #2344) that shows that problem?. If you can write a test for this corner case or describe it well enough I will write the fix, no problem.. I am not sure yet if all the problems mentioned in #2336 are solved by this PR and it should not be merged until this was clarified.. Since there was no more comment concerning #2336 I think this could be merged now. If there is another problem I can handle it in another PR.. We set the factory to a JSONConfigurationFactoryFactory in our app so that the config is parsed as json instead of yaml.. I added a test that should fail without the fix of this PR.\nIt simply calls the test support with an explicit configuration object and uses an application with a ConfigurationFactoryFactory that automatically fails.. I think I did that now but I am not sure if my GIT client removed them again. The github view is confusing for these cases.. ",
    "sam-berry": "@jplock I believe that I've confirmed that this is a requirement specific to MySQL. According to the Hibernate documentation (see the second to last paragraph about arbitrary connection properties), and the MySQL documentation (see \"useUnicode and characterEncoding\") these properties appear to be MySQL configuration that Hibernate just passes through.\nSo, this probably isn't appropriate for the DW docs since the example is using Postgres. I'm not certain if a Postgres configuration requires additional parameters or not, if somebody has a Postgres sandbox ready it could be worth a quick test. I've added a StackOverflow Q&A for this that will hopefully find others who are in the same position.\n. In the first iteration here, the session context was set internal to UnitOfWorkAspect and made available through getters. This puts a bit of a burden on testing since it requires instantiating a UnitOfWorkAspect and running it's beforeStart function in order to set the current session.\nI have updated the ThreadLocals to exist in their own class, so that tests are able to set the session factory directly without dealing with the aspect.\nSee ed2f3b4 for the change. I've left this commit independent for reviewing purposes but if this ends up being accpeted it probably makes most sense to squash it up into f5a92fb9f8d2d64ff311a28481a63101ae1ba71f.. @arteam Thanks for the response. I understand this is a big change so let me try and explain the situation a bit more.\nTo clarify, I want to allow UnitOfWork to dynamically assign a session factory per request and use that factory for all operations inside of the entire request. The problem with hardcoding session factories is that it may not be safe to use two separate bundles inside of a request. Initially, I thought I could avoid the suggested change by abandoning AbstractDAO for something like the following:\n```\npublic class ReportDAO {\n  private final SessionFactory readSessionFactory;\n  private final SessionFactory writeSessionFactory;\npublic ReportDAO(\n    SessionFactory readSessionFactory,\n    SessionFactory writeSessionFactory\n  ) {\n    this.readSessionFactory = readSessionFactory;\n    this.writeSessionFactory = writeSessionFactory;\n  }\npublic List findAllReports() {\n    return readSessionFactory.getCurrentSession()\n      .createQuery(\u201c\u2026\u201d)\n      .list();\n  }\npublic void createReport(DailyOccupancyReportModel report) {\n    writeSessionFactory.getCurrentSession().persist(report);\n  }\n}\n```\nSome downsides of delegating session factory like this is that it ignores what UnitOfWork determines, rendering UnitOfWork a mechanism for starting and ending transactions. It also can produce data inconsistencies inside of a single request depending on the nature of the read and write database instances. For clustered environments, read instances may not always be up-to-date. Sometimes there is a brief lag in replication. This puts a bit of a burden on the client code to remain conscious that writing something and immediately reading it is not entirely reliable. Because of this, it seems important to support assigning a session factory to be used globally inside of a single request so that reads can be directed at master inside of requests that make modifications.\nThe issue with AbstractDAO being dependent on SessionFactory at the time of construction is that it prevents the session factory from being dynamically assigned without creating new instances of your DAOs.\nI think it is a pretty nice pattern to set an application up with singleton DAOs, and right now that requires defining a session factory at build time. It seems that in order to use AbstractDAO with multiple bundles you need to either instantiate DAOs at runtime inside of requests, or assign and access the session factory statically by thread. \nHelloWorldApplication.java:83 highlights the issue that I am trying to resolve here. A Hibernate bundle is specific to a single datasource, so in order to support a dynamic datasource based on request (i.e. UnitOfWork) it cannot be hardcoded at build time.\nPlease let me know if this is more clear or if there are better ways to communicate the problem I'm trying to solve.. Let me provide an example to try and explain this more thoroughly.\nThis resource utilizes the UnitOfWork annotation to determine session factory at the request level. staleResponse is an example of the kind of error code that can be written when multiple session factories are used in a single request. Specifically, when a read instance is used inside of an unsafe request, e.x. a record is created then immediately retrieved to be returned.\n```java\n@Path(\"/reports\")\npublic class ReportResource {\n  private final ReportDAO reportDAO;\npublic ReportResource(ReportDAO reportDAO) {\n    this.reportDAO = reportDAO;\n  }\n@GET\n  @Valid\n  @Timed\n  @UnitOfWork(\"read-only\") // session factory with connections to read replica databases\n  public ImmutableSet fetchReports() {\n    return reportDAO.fetchReports();\n  }\n@POST\n  @Valid\n  @Timed\n  @UnitOfWork(\"write\") // session factory connected to master\n  public Report createReport(@NotNull @Valid Report request) {\n    return reportDAO.createReport(request);\n  }\n@POST\n  @Path(\"/stale-response\")\n  @Valid\n  @Timed\n  @UnitOfWork(\"write\")\n  public ImmutableSet staleResponse(@NotNull @Valid Report request) {\n    Report report = reportDAO.createReport(request);\n    // If connected to a read replica there is a chance that this fetch\n    // will not find the newly created record. If there is replication\n    // lag in the system then only the master instance can be trusted\n    // as up to date.\n    return reportDAO.fetchReport(report.id);\n  }\n}\n```\nThere are a number of different ways to architect using two session factories in a single request. I.e., use the \"write\" connection for createReport and the \"read\" connection in the fetchReport DAO method. I think ideally the connection gets assigned at the request level so that all DB operations inside of a single request are reliably synchronous. . Another thing that may be useful; this pattern for handling session factory is similar to what Hibernate does internally. From what I can tell org.hibernate.context.internal.ManagedSessionContext is what Hibernate uses to track current session internally and it is driven by a ThreadLocal.\nA difference to note is that Hibernate supports multiple sessions per thread. Notice ManagedSessionContext.java:43 uses a map and tracks by factory. I think that a convenient purpose of UnitOfWork is that it figures out a specific datasource to use for a request, so it doesn't seem to me that supporting multiple sessions per thread is necessary.. Closing this in favor of #2428 . I believe that this change requires some architectural insight that I do not have; I am not sure if the intent of the dropwizard-hibernate module is to be centered around UnitOfWork. It appears to me that it currently is geared that way and I think that makes a lot of sense - but this change creates a literal coupling that did not previously exist.\nThere are certainly a number of options that could be explored to offer both a DAO implementation that requires a session factory to be provided and one that is driven off of the context.\nBut, if the goal is to direct clients toward using UnitOfWork for configurations than perhaps it is best to stick to a single DAO.. Another option here would be to create multiple ThreadLocals, one for each piece of state.. It is kind of a drag to force clients to handle the nullable - curious if anyone thinks it would be better to throw an exception here if any of these properties are fetched before they are initialized.. I don't think that equals/hashcode/toString make sense here but correct me if I'm wrong.. ",
    "rvowles": "The reason @Component and @Autowired work is that the Spring/Jersey library specifically looks for those and thunks them in. If you actually use Spring without classpath scanning or @Component or old-school auto-wired, you have to provide your own service locator.. ",
    "m-at-nu": "Thanks a lot! In version 1.0.2 both loggers are working again :-).\n. ",
    "jmoney8080": "We used it in a custom ExceptionMapper to hook into our error hierarchy.\nValidationErrors validationErrors = new ValidationErrors(Object.class, exception.getConstraintViolations());\n        ApiError error = new ApiError(ErrorCode.VALIDATION, exception.getMessage(), validationErrors, RequestIdUtils.getApiRequestId());\n        logger.info(String.format(\"%s : Bad Request (%s) %s\", getContextString(), error.getId(), error.getMessage()));\n        return Response.status(ConstraintViolations.determineStatus(exception.getConstraintViolations()))\n                .entity(error)\n                .build();\nThat's what we did in 0.9.  In 1.0 we are reworking the Exception stuff but if there is a more preferred approach than what io.dropwizard.validation.ConstraintViolations#determineStatus used to do we will gladly investigate.  io.dropwizard.validation.ConstraintViolations#determineStatus was just never deprecated so we had no idea it was being removed in 1.0.\n. No worries at all! It was 1.0, expected some pain.\nIt seems all methods in ConstraintMessage require an Invocable parameter.  Any suggestions on how to get one of these from an ExceptionMapper?\n. HA! Thanks!  Using ExceptionMapper<JerseyViolationException> worked like a charm!  Thanks again!\n. I have a PR for this: https://github.com/dropwizard/dropwizard/pull/1743\nI'm unsure how to write a test case as Discoverable is kind of opt-in.  How would you recommend one?  Hard code a check for META-INF.services?\nAlso, where would it go as it's something that kind of needs to run project wide(in every module) and if you really want to be fancy, in every dropwizard based project so users do not hit this issue as well :)\nbut again, i have no idea how to write said test so any suggestions would be helpful :)\n. Added test, ci is running\u2026\n. ci ran and github checks passed\n. New PR https://github.com/dropwizard/dropwizard/pull/1755\nclosing this PR out.\n. PR: https://github.com/dropwizard/dropwizard/pull/1746\n. That's telling you that differentbtransitive versions of jackson-annotations are being brought in. \nIf you exclude jackson-annotations from dropwizard-core and include it yourself in your pom.xml it should go away. \n. @jplock / @joschi - this is the new PR that's branched from release/1.0.x\n. i'll give something a shot, maybe this weekend.\n. What is the process of porting this down into at least 1.3.x?  Just cherry-pick into the 1.3.x branch and open another PR?. ",
    "j11m": "The ChunkedOutput solution is what I was looking for. Thanks!  For posterity...\n```\npackage com.example.helloworld.resources;\nimport com.example.helloworld.core.Template;\nimport com.google.common.base.Optional;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.glassfish.jersey.server.ChunkedOutput;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.MediaType;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.atomic.AtomicLong;\n@Path(\"/hello-world\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class HelloWorldResource {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HelloWorldResource.class);\nprivate static final ExecutorService executor = Executors.newCachedThreadPool();\n\nprivate static final String SEPARATOR = java.security.AccessController.doPrivileged(\n        new sun.security.action.GetPropertyAction(\"line.separator\"));\n\nprivate final Template template;\nprivate final AtomicLong counter;\n\npublic HelloWorldResource(Template template) {\n    this.template = template;\n    this.counter = new AtomicLong();\n}\n\n@GET\n@Path(\"/streaming\")\n@Produces(MediaType.TEXT_PLAIN)\npublic ChunkedOutput<String> sayHelloStreamed(@QueryParam(\"name\") Optional<String> name) {\n    final ChunkedOutput<String> output = new ChunkedOutput<>(String.class, SEPARATOR);\n    executor.execute(\n            () -> {\n                try (ChunkedOutput<String> out = output) {\n                    Thread.sleep(5000);  // Explicitly show the headers coming before any Response Body\n                    for (int i = 0; i < 100; i++) {\n                        out.write(RandomStringUtils.randomAlphabetic(100) + counter.incrementAndGet());\n                        Thread.sleep(500);\n                    }\n                } catch(Exception ex) {\n                    System.out.println(\"Chunked output error!!!!!!\");\n                }\n            }\n    );\n    return output;\n}\n\n}\n```\n. ",
    "sudhirsrepo": "I able to resolve my Jersey + Jetty dependency issue. Hope it will help.\n```\n  \n    <version.jersey>2.26-b03</version.jersey>\n\n    <version.jetty>9.2.14.v20151106</version.jetty>\n\n</properties>\n\n```\nComplete pom.xml Jersey + Jetty dependency\n. ",
    "ganeshcse2991": "Can you help me on how to do it?\nI tried with shadow plugin but I am not sure what I am doing wrong.\n. ",
    "jrwiegand": "@joschi Thanks. \ud83d\udc4d \n. ",
    "mrdon2": "Yep, 1.0.2 fixes it.  Thanks!\n. ",
    "davidmankin": "Thank you.  I've wanted this feature several times!\n. ",
    "gogo649": "remove +- javax.servlet:servlet-api:jar:2.3:compile.   \nhehe\n. ",
    "ooxi": "Thanks, you saved me a ton of trouble!. ",
    "uditnarayan": "@gogo649  Thanks, worked for me too.\nCan u please explain, how you arrived at that conclusion?. ",
    "lutzhorn": "servlet-api is required twice:\n\njavax.servlet:javax.servlet-api:jar:3.1.0:compile\njavax.servlet:servlet-api:jar:2.3:compile\n\nThe second version is required by com.cloudhopper.proxool:proxool:jar:0.9.1:compile which is an additional dependency added to those that Dropwizard adds. So there are incompatible versions of servlet-api on the classpath.\nThe solution hence is to exclude the older version.. I think your header value is not valid. The underscore _ in en_in seems not to comply with the RFC.\nlanguage-range  = ( ( 1*8ALPHA *( \"-\" 1*8ALPHA ) ) | \"*\" )\n\nThere is a dash -, not an underscore _.. Two question to clarify why this change would be needed:\n\nDo any other JAX-RS components in Dropwizard use javax.ws.rs.Priorities?\nWhat happens if the change is not made?. What would be the@DefaultValueof a stream? What do you expect to happen?.@DefaultParamrequires aStringasvalue`:\n\n````java\n@Target({ElementType.PARAMETER, ElementType.METHOD, ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface DefaultValue {\n/**\n * The specified default value.\n */\nString value();\n\n}\n````\nWhat would it mean to write something like this?\njava\n@DefaultValue(\"foo\") @FormDataParam(\"param1\") InputStream param1\nThe string foo as a value for an InputStream makes no sense. I don't think what you want to do is possible using these annotations.\nBTW, this question is not a Dropwizard question. It is about JAX-RS and com.sun.jersey.contribs:jersey-multipart. I suggest you close this issue here and check at Jersey.. It should be easy to extend SizeUnitTest, SizeTest, SizeUnit, and Size with this.\nWhy don't you open a PR?. Are there tests that will fail after this change? If not, tests for features that will be broken by such a change should be added first.. Yes, because Size.equals is\n````java\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if ((obj == null) || (getClass() != obj.getClass())) {\n        return false;\n    }\n    final Size size = (Size) obj;\n    return (count == size.count) && (unit == size.unit);\n}\n\n````\nBoth the count and the unit must be equal.\nThis does not look like a bug to me.. The file is clean: https://www.virustotal.com/#/file/8be18af0cd240be35c89644b61883abd6937bc3c40fbf7267442170cd17f01f9/detection. Are you using Maven? If yes, try to exclude the dependency of oauth2-client on jersey-media-json-jackson:\n````xml\n        \norg.glassfish.jersey.security\noauth2-client\n2.26\n\n\norg.glassfish.jersey.media \n jersey-media-json-jackson\n\n\n\n````. Your YAML file is hard to read. Is really everything written on one line? Could you please edit your question so that code/configuration is displayed as it is in your files?. >  However is seems that the URL is matched first, then the method. Is\n\nthis the correct behaviour?\n\nYes, that's how JAX-RS is specified: \nhttps://abhirockzz.wordpress.com/2015/03/02/quick-peek-at-jax-rs-request-to-method-matching/\nLutz\n. Which data of ILoggingEvent or of StackTraceElement[] callerData = event.getCallerData(); do you want to include?. getCallerData returns an StackTraceElement[]. This is an array containing the stacktrace. Which element in this array would contain the call stack element you are interested in?. Try to add the @Valid annotation on the Fruit:\njava\n public Response validation(@Valid Map<String, Map<String, @Valid Fruit>> fruits) {\nSee http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_cascaded_validation. ",
    "chriskessel": "I've upgraded these gradle dependencies for the move to Dropwizard 1.0:\ncompile group: 'io.dropwizard', name: 'dropwizard-client', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-assets', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-views', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-metrics', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-metrics-graphite', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-servlets', version: '1.0+'\n    compile group: 'io.dropwizard', name: 'dropwizard-views-mustache', version: '1.0+'\n    compile group: 'com.google.inject.extensions', name: 'guice-throwingproviders', version: '3+'\n    compile group: 'com.github.roskart.dropwizard-jaxws', name: 'dropwizard-jaxws', version: '1.0+'\n    compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0+'\n    compile group: 'com.yunspace.dropwizard', name: 'dropwizard-xml', version: '41'\nSince the stacktrace came when running a unit test, I grabbed the testRuntime dependencies from \"gradle dependencies\":\ntestRuntime - Runtime dependencies for source set 'test'.\n+--- org.jetbrains.kotlin:kotlin-stdlib:1.0.0\n|    \\--- org.jetbrains.kotlin:kotlin-runtime:1.0.0\n+--- com.fasterxml.jackson.module:jackson-module-jsonSchema:2.7.0\n+--- com.github.roskart.dropwizard-jaxws:dropwizard-jaxws:1.0+ -> 1.0.0\n|    +--- org.apache.cxf:cxf-rt-frontend-jaxws:3.1.6\n|    |    +--- xml-resolver:xml-resolver:1.2\n|    |    +--- org.ow2.asm:asm:5.0.4\n|    |    +--- org.apache.cxf:cxf-core:3.1.6\n|    |    |    +--- org.codehaus.woodstox:woodstox-core-asl:4.4.1\n|    |    |    |    \\--- org.codehaus.woodstox:stax2-api:3.1.4\n|    |    |    \\--- org.apache.ws.xmlschema:xmlschema-core:2.2.1\n|    |    +--- org.apache.cxf:cxf-rt-bindings-soap:3.1.6\n|    |    |    +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |    |    +--- org.apache.cxf:cxf-rt-wsdl:3.1.6\n|    |    |    |    +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |    |    |    +--- wsdl4j:wsdl4j:1.6.3\n|    |    |    |    \\--- org.ow2.asm:asm:5.0.4\n|    |    |    \\--- org.apache.cxf:cxf-rt-databinding-jaxb:3.1.6\n|    |    |         +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |    |         +--- org.apache.cxf:cxf-rt-wsdl:3.1.6 (*)\n|    |    |         +--- com.sun.xml.bind:jaxb-impl:2.2.11\n|    |    |         \\--- com.sun.xml.bind:jaxb-core:2.2.11\n|    |    +--- org.apache.cxf:cxf-rt-bindings-xml:3.1.6\n|    |    |    \\--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |    +--- org.apache.cxf:cxf-rt-frontend-simple:3.1.6\n|    |    |    +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |    |    +--- org.apache.cxf:cxf-rt-bindings-soap:3.1.6 (*)\n|    |    |    \\--- org.apache.cxf:cxf-rt-wsdl:3.1.6 (*)\n|    |    \\--- org.apache.cxf:cxf-rt-ws-addr:3.1.6\n|    |         +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |         +--- org.apache.cxf:cxf-rt-bindings-soap:3.1.6 (*)\n|    |         \\--- org.apache.cxf:cxf-rt-ws-policy:3.1.6\n|    |              +--- wsdl4j:wsdl4j:1.6.3\n|    |              +--- org.apache.cxf:cxf-core:3.1.6 (*)\n|    |              \\--- org.apache.neethi:neethi:3.0.3\n|    \\--- org.apache.cxf:cxf-rt-transports-http:3.1.6\n|         \\--- org.apache.cxf:cxf-core:3.1.6 (*)\n+--- com.hubspot.dropwizard:dropwizard-guice:1.0+ -> 1.0.0.2\n|    +--- com.squarespace.jersey2-guice:jersey2-guice-impl:1.0.6\n|    |    +--- com.google.inject.extensions:guice-multibindings:4.0\n|    |    |    \\--- com.google.inject:guice:4.0 -> 4.1.0\n|    |    |         +--- javax.inject:javax.inject:1\n|    |    |         +--- aopalliance:aopalliance:1.0\n|    |    |         \\--- com.google.guava:guava:19.0\n|    |    +--- com.google.inject.extensions:guice-servlet:4.0\n|    |    |    \\--- com.google.inject:guice:4.0 -> 4.1.0 (*)\n|    |    +--- org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2 -> 2.23.1\n|    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1\n|    |    |    |    +--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    |    +--- javax.annotation:javax.annotation-api:1.2\n|    |    |    |    +--- org.glassfish.jersey.bundles.repackaged:jersey-guava:2.23.1\n|    |    |    |    +--- org.glassfish.hk2:hk2-api:2.4.0-b34\n|    |    |    |    |    +--- javax.inject:javax.inject:1\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-utils:2.4.0-b34\n|    |    |    |    |    |    \\--- javax.inject:javax.inject:1\n|    |    |    |    |    \\--- org.glassfish.hk2.external:aopalliance-repackaged:2.4.0-b34\n|    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    +--- org.glassfish.hk2:hk2-locator:2.4.0-b34\n|    |    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    |    +--- org.glassfish.hk2.external:aopalliance-repackaged:2.4.0-b34\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-utils:2.4.0-b34 (*)\n|    |    |    |    |    \\--- org.javassist:javassist:3.18.1-GA -> 3.18.2-GA\n|    |    |    |    \\--- org.glassfish.hk2:osgi-resource-locator:1.0.1\n|    |    |    +--- org.glassfish.jersey.core:jersey-server:2.23.1\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-client:2.23.1\n|    |    |    |    |    +--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    |    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    |    \\--- org.glassfish.hk2:hk2-locator:2.4.0-b34 (*)\n|    |    |    |    +--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    |    +--- org.glassfish.jersey.media:jersey-media-jaxb:2.23.1\n|    |    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    |    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    |    +--- org.glassfish.hk2:hk2-locator:2.4.0-b34 (*)\n|    |    |    |    |    \\--- org.glassfish.hk2:osgi-resource-locator:1.0.1\n|    |    |    |    +--- javax.annotation:javax.annotation-api:1.2\n|    |    |    |    +--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    +--- org.glassfish.hk2:hk2-locator:2.4.0-b34 (*)\n|    |    |    |    \\--- javax.validation:validation-api:1.1.0.Final\n|    |    |    \\--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    +--- com.squarespace.jersey2-guice:0-jersey2-guice-spi:1.0.6\n|    |    |    \\--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    |    +--- com.google.code.findbugs:jsr305:3.0.1\n|    |    \\--- org.slf4j:slf4j-api:1.7.16 -> 1.7.21\n|    +--- com.google.code.findbugs:annotations:3.0.1\n|    |    +--- net.jcip:jcip-annotations:1.0\n|    |    \\--- com.google.code.findbugs:jsr305:3.0.1\n|    +--- io.dropwizard:dropwizard-core:1.0.0 -> 1.0.2\n|    |    +--- io.dropwizard:dropwizard-util:1.0.2\n|    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.7.6\n|    |    |    +--- com.google.guava:guava:19.0\n|    |    |    +--- com.google.code.findbugs:jsr305:3.0.1\n|    |    |    \\--- joda-time:joda-time:2.9.4\n|    |    +--- io.dropwizard:dropwizard-jackson:1.0.2\n|    |    |    +--- com.google.guava:guava:19.0\n|    |    |    +--- io.dropwizard:dropwizard-util:1.0.2 (*)\n|    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.7.6\n|    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.7.0 -> 2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.7.6 (*)\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-databind:2.7.6 (*)\n|    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-databind:2.7.6 (*)\n|    |    |    +--- com.fasterxml.jackson.module:jackson-module-afterburner:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-databind:2.7.6 (*)\n|    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.7.0 -> 2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.core:jackson-databind:2.7.6 (*)\n|    |    |    +--- org.slf4j:slf4j-api:1.7.21\n|    |    |    \\--- ch.qos.logback:logback-classic:1.1.7\n|    |    |         \\--- ch.qos.logback:logback-core:1.1.7\n|    |    +--- io.dropwizard:dropwizard-validation:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-util:1.0.2 (*)\n|    |    |    +--- org.hibernate:hibernate-validator:5.2.4.Final\n|    |    |    |    +--- javax.validation:validation-api:1.1.0.Final\n|    |    |    |    +--- org.jboss.logging:jboss-logging:3.2.1.Final\n|    |    |    |    \\--- com.fasterxml:classmate:1.1.0\n|    |    |    \\--- org.glassfish:javax.el:3.0.0\n|    |    +--- io.dropwizard:dropwizard-configuration:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-jackson:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-validation:1.0.2 (*)\n|    |    |    +--- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.7.6\n|    |    |    |    \\--- org.yaml:snakeyaml:1.15\n|    |    |    \\--- org.apache.commons:commons-lang3:3.4\n|    |    +--- io.dropwizard:dropwizard-logging:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-jackson:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-validation:1.0.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-logback:3.1.2\n|    |    |    |    \\--- io.dropwizard.metrics:metrics-core:3.1.2\n|    |    |    |         \\--- org.slf4j:slf4j-api:1.7.7 -> 1.7.21\n|    |    |    +--- org.slf4j:slf4j-api:1.7.21\n|    |    |    +--- org.slf4j:jul-to-slf4j:1.7.21\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.21\n|    |    |    +--- ch.qos.logback:logback-core:1.1.7\n|    |    |    +--- ch.qos.logback:logback-classic:1.1.7 (*)\n|    |    |    +--- org.slf4j:log4j-over-slf4j:1.7.21\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.21\n|    |    |    +--- org.slf4j:jcl-over-slf4j:1.7.21\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.21\n|    |    |    \\--- org.eclipse.jetty:jetty-util:9.3.9.v20160517\n|    |    +--- io.dropwizard:dropwizard-metrics:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-lifecycle:1.0.2\n|    |    |    |    +--- org.slf4j:slf4j-api:1.7.21\n|    |    |    |    +--- com.google.guava:guava:19.0\n|    |    |    |    +--- org.eclipse.jetty:jetty-server:9.3.9.v20160517\n|    |    |    |    |    +--- javax.servlet:javax.servlet-api:3.1.0\n|    |    |    |    |    +--- org.eclipse.jetty:jetty-http:9.3.9.v20160517\n|    |    |    |    |    |    \\--- org.eclipse.jetty:jetty-util:9.3.9.v20160517\n|    |    |    |    |    \\--- org.eclipse.jetty:jetty-io:9.3.9.v20160517\n|    |    |    |    |         \\--- org.eclipse.jetty:jetty-util:9.3.9.v20160517\n|    |    |    |    \\--- io.dropwizard:dropwizard-util:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-jackson:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-validation:1.0.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    \\--- org.slf4j:slf4j-api:1.7.21\n|    |    +--- io.dropwizard:dropwizard-jersey:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-jackson:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-validation:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-logging:1.0.2 (*)\n|    |    |    +--- org.glassfish.jersey.core:jersey-server:2.23.1 (*)\n|    |    |    +--- org.glassfish.jersey.ext:jersey-metainf-services:2.23.1\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    \\--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    +--- org.glassfish.jersey.ext:jersey-bean-validation:2.23.1\n|    |    |    |    +--- org.glassfish.hk2.external:javax.inject:2.4.0-b34\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-server:2.23.1 (*)\n|    |    |    |    +--- javax.validation:validation-api:1.1.0.Final\n|    |    |    |    \\--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    +--- io.dropwizard.metrics:metrics-jersey2:3.1.2\n|    |    |    |    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    |    \\--- io.dropwizard.metrics:metrics-annotation:3.1.2\n|    |    |    |         \\--- org.slf4j:slf4j-api:1.7.7 -> 1.7.21\n|    |    |    +--- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.6\n|    |    |    |    +--- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.7.6\n|    |    |    |    \\--- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.7.6\n|    |    |    |         \\--- com.fasterxml.jackson.core:jackson-annotations:2.7.0 -> 2.7.6\n|    |    |    +--- org.glassfish.jersey.containers:jersey-container-servlet:2.23.1\n|    |    |    |    +--- org.glassfish.jersey.containers:jersey-container-servlet-core:2.23.1 (*)\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-common:2.23.1 (*)\n|    |    |    |    +--- org.glassfish.jersey.core:jersey-server:2.23.1 (*)\n|    |    |    |    \\--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    |    |    +--- org.eclipse.jetty:jetty-server:9.3.9.v20160517 (*)\n|    |    |    +--- org.eclipse.jetty:jetty-webapp:9.3.9.v20160517\n|    |    |    |    +--- org.eclipse.jetty:jetty-xml:9.3.9.v20160517\n|    |    |    |    |    \\--- org.eclipse.jetty:jetty-util:9.3.9.v20160517\n|    |    |    |    \\--- org.eclipse.jetty:jetty-servlet:9.3.9.v20160517\n|    |    |    |         \\--- org.eclipse.jetty:jetty-security:9.3.9.v20160517\n|    |    |    |              \\--- org.eclipse.jetty:jetty-server:9.3.9.v20160517 (*)\n|    |    |    +--- org.eclipse.jetty:jetty-continuation:9.3.9.v20160517\n|    |    |    \\--- org.apache.commons:commons-lang3:3.4\n|    |    +--- io.dropwizard:dropwizard-servlets:1.0.2\n|    |    |    +--- org.slf4j:slf4j-api:1.7.21\n|    |    |    +--- io.dropwizard:dropwizard-util:1.0.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-annotation:3.1.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    \\--- ch.qos.logback:logback-classic:1.1.7 (*)\n|    |    +--- io.dropwizard:dropwizard-jetty:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-logging:1.0.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-jetty9:3.1.2\n|    |    |    |    \\--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    +--- org.eclipse.jetty:jetty-server:9.3.9.v20160517 (*)\n|    |    |    +--- org.eclipse.jetty:jetty-servlet:9.3.9.v20160517 (*)\n|    |    |    +--- org.eclipse.jetty:jetty-servlets:9.3.9.v20160517\n|    |    |    |    +--- org.eclipse.jetty:jetty-continuation:9.3.9.v20160517\n|    |    |    |    +--- org.eclipse.jetty:jetty-http:9.3.9.v20160517 (*)\n|    |    |    |    +--- org.eclipse.jetty:jetty-util:9.3.9.v20160517\n|    |    |    |    \\--- org.eclipse.jetty:jetty-io:9.3.9.v20160517 (*)\n|    |    |    \\--- org.eclipse.jetty:jetty-http:9.3.9.v20160517 (*)\n|    |    +--- io.dropwizard:dropwizard-lifecycle:1.0.2 (*)\n|    |    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    +--- io.dropwizard.metrics:metrics-jvm:3.1.2\n|    |    |    \\--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    +--- io.dropwizard.metrics:metrics-servlets:3.1.2\n|    |    |    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    +--- io.dropwizard.metrics:metrics-healthchecks:3.1.2\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.7 -> 1.7.21\n|    |    |    +--- io.dropwizard.metrics:metrics-json:3.1.2\n|    |    |    |    \\--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    |    |    \\--- io.dropwizard.metrics:metrics-jvm:3.1.2 (*)\n|    |    +--- io.dropwizard.metrics:metrics-healthchecks:3.1.2 (*)\n|    |    +--- io.dropwizard:dropwizard-request-logging:1.0.2\n|    |    |    +--- io.dropwizard:dropwizard-jetty:1.0.2 (*)\n|    |    |    +--- io.dropwizard:dropwizard-logging:1.0.2 (*)\n|    |    |    \\--- ch.qos.logback:logback-access:1.1.7\n|    |    |         \\--- ch.qos.logback:logback-core:1.1.7\n|    |    +--- net.sourceforge.argparse4j:argparse4j:0.7.0\n|    |    \\--- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:1.0.3\n|    +--- io.dropwizard:dropwizard-jackson:1.0.0 -> 1.0.2 (*)\n|    +--- io.dropwizard:dropwizard-jersey:1.0.0 -> 1.0.2 (*)\n|    +--- io.dropwizard:dropwizard-jetty:1.0.0 -> 1.0.2 (*)\n|    +--- io.dropwizard:dropwizard-lifecycle:1.0.0 -> 1.0.2 (*)\n|    +--- io.dropwizard:dropwizard-servlets:1.0.0 -> 1.0.2 (*)\n|    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    +--- io.dropwizard.metrics:metrics-healthchecks:3.1.2 (*)\n|    +--- com.google.inject:guice:4.0 -> 4.1.0 (*)\n|    +--- com.google.inject.extensions:guice-servlet:4.0 (*)\n|    +--- org.glassfish.jersey.core:jersey-server:2.23.1 (*)\n|    +--- org.reflections:reflections:0.9.10\n|    |    +--- com.google.guava:guava:18.0 -> 19.0\n|    |    +--- org.javassist:javassist:3.18.2-GA\n|    |    \\--- com.google.code.findbugs:annotations:2.0.1 -> 3.0.1 (*)\n|    +--- javax.servlet:javax.servlet-api:3.1.0\n|    +--- javax.inject:javax.inject:1\n|    +--- org.slf4j:slf4j-api:1.7.12 -> 1.7.21\n|    +--- org.glassfish.hk2:hk2-api:2.4.0-b34 (*)\n|    +--- javax.ws.rs:javax.ws.rs-api:2.0.1\n|    \\--- com.google.guava:guava:18.0 -> 19.0\n+--- com.yunspace.dropwizard:dropwizard-xml:41\n+--- io.dropwizard:dropwizard-assets:1.0+ -> 1.0.2\n|    +--- io.dropwizard:dropwizard-core:1.0.2 (*)\n|    \\--- io.dropwizard:dropwizard-servlets:1.0.2 (*)\n+--- io.dropwizard:dropwizard-core:1.0+ -> 1.0.2 (*)\n+--- io.dropwizard:dropwizard-views:1.0+ -> 1.0.2\n|    \\--- io.dropwizard:dropwizard-core:1.0.2 (*)\n+--- io.dropwizard:dropwizard-metrics:1.0+ -> 1.0.2 (*)\n+--- io.dropwizard:dropwizard-metrics-graphite:1.0+ -> 1.0.2\n|    +--- io.dropwizard:dropwizard-metrics:1.0.2 (*)\n|    \\--- io.dropwizard.metrics:metrics-graphite:3.1.2\n|         \\--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n+--- io.dropwizard:dropwizard-servlets:1.0+ -> 1.0.2 (*)\n+--- io.dropwizard:dropwizard-views-mustache:1.0+ -> 1.0.2\n|    +--- io.dropwizard:dropwizard-views:1.0.2 (*)\n|    \\--- com.github.spullara.mustache.java:compiler:0.9.2\n+--- com.google.inject.extensions:guice-throwingproviders:3+ -> 3.0\n|    \\--- com.google.inject:guice:3.0 -> 4.1.0 (*)\n+--- com.newrelic.agent.java:newrelic-api:3.30.1\n+--- com.newrelic.agent.java:newrelic-agent:3.30.1\n+--- project :referenceCache\n|    +--- org.jetbrains.kotlin:kotlin-stdlib:1.0.0 (*)\n|    +--- com.google.code.gson:gson:2.5\n|    +--- com.google.guava:guava:19.0-rc3 -> 19.0\n|    +--- com.google.inject:guice:4+ -> 4.1.0 (*)\n|    +--- org.glassfish.jersey.core:jersey-client:2.22.1 -> 2.23.1 (*)\n|    +--- javax.inject:javax.inject:1\n|    +--- org.slf4j:slf4j-api:1.7.13 -> 1.7.21\n|    +--- io.dropwizard.metrics:metrics-core:3.1.2 (*)\n|    +--- project :domain\n|    |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.0.0 (*)\n|    |    +--- org.projectlombok:lombok:1.16.8\n|    |    +--- org.slf4j:slf4j-api:1.7.13 -> 1.7.21\n|    |    +--- com.fasterxml.jackson.core:jackson-databind:2.5.2 -> 2.7.6 (*)\n|    |    +--- com.conducivetech:processedFlightHistory:20151006102512\n|    |    |    +--- com.intellij:annotations:12.0\n|    |    |    +--- joda-time:joda-time:2.7+ -> 2.9.4\n|    |    |    +--- org.slf4j:slf4j-api:1.7.2 -> 1.7.21\n|    |    |    +--- com.yammer.metrics:metrics-core:2.2.0\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.2 -> 1.7.21\n|    |    |    +--- com.yammer.metrics:metrics-graphite:2.2.0\n|    |    |    |    +--- com.yammer.metrics:metrics-core:2.2.0 (*)\n|    |    |    |    \\--- org.slf4j:slf4j-api:1.7.2 -> 1.7.21\n|    |    |    +--- postgresql:postgresql:9.2-1003.jdbc4\n|    |    |    +--- com.google.code.gson:gson:2.2.2 -> 2.5\n|    |    |    +--- org.projectlombok:lombok:1.14.4 -> 1.16.8\n|    |    |    +--- commons-lang:commons-lang:2.6\n|    |    |    \\--- joda-time:joda-time:2.2 -> 2.9.4\n|    |    +--- org.reflections:reflections:0.9.10 (*)\n|    |    \\--- com.google.guava:guava:19.0-rc3 -> 19.0\n|    \\--- project :hub\n|         +--- org.jetbrains.kotlin:kotlin-stdlib:1.0.0 (*)\n|         +--- org.projectlombok:lombok:1.16.8\n|         +--- com.google.code.gson:gson:2.5\n|         +--- com.google.guava:guava:19.0-rc3 -> 19.0\n|         +--- org.glassfish.jersey.core:jersey-client:2.22.1 -> 2.23.1 (*)\n|         \\--- org.slf4j:slf4j-api:1.7.13 -> 1.7.21\n+--- com.flightstats:java-threescale:20160706085811\n|    +--- org.projectlombok:lombok:1.16.6 -> 1.16.8\n|    +--- org.slf4j:slf4j-api:1.7.12 -> 1.7.21\n|    +--- com.google.guava:guava:18.0 -> 19.0\n|    +--- org.glassfish.jersey.core:jersey-common:2.17 -> 2.23.1 (*)\n|    +--- org.simpleframework:simple-xml:2.7.1\n|    |    +--- stax:stax-api:1.0.1\n|    |    +--- stax:stax:1.2.0\n|    |    |    \\--- stax:stax-api:1.0.1\n|    |    \\--- xpp3:xpp3:1.1.3.3\n|    \\--- com.google.code.gson:gson:2.3.1 -> 2.5\n+--- org.slf4j:slf4j-api:1.7.13 -> 1.7.21\n+--- com.fasterxml.jackson.core:jackson-databind:2.5.2 -> 2.7.6 (*)\n+--- org.reflections:reflections:0.9.10 (*)\n+--- com.google.guava:guava:19.0-rc3 -> 19.0\n+--- junit:junit:4.12\n|    \\--- org.hamcrest:hamcrest-core:1.3\n+--- org.assertj:assertj-core:3.5+ -> 3.5.2\n\\--- org.mockito:mockito-core:2.1+ -> 2.1.0\n     +--- net.bytebuddy:byte-buddy:1.4.26\n     +--- net.bytebuddy:byte-buddy-agent:1.4.26\n     \\--- org.objenesis:objenesis:2.4\n. Ok, thanks!\n. Excluding jackson-databind does seem to solve the problem:\ncompile ('com.squareup.retrofit2:converter-jackson:2.1.0') {\n        exclude module: 'jackson-databind'\n    }\n. ",
    "sarrafkeshav": "@chriskessel : did you find a solution ? I have encountered the same bug.. ",
    "andrewaylett": "Calling into JerseyGuiceUtils before running tests can also help.  We added a static block to each affected test file, which is painful but effective:\nstatic {\n    JerseyGuiceUtils.install((s, serviceLocator) -> null);\n}.\n",
    "GrumpyDBA": "Try this:\nJerseyGuiceUtils.reset();\nLiterally just had what looks like the exact same issue in the test I was looking at.\nI can't comment as to the reasons why it fixed it, or indeed if it is a better or worse solution than @andrewaylett's ( I'd probably use his in future though)\n. ",
    "Gabology": "@joschi 1.0.2\n. Minimal steps to reproduce:\nUsing dropwizard/example project add the following lines in src/main/java/com.example.helloworld/resources/HelloWordResource.java:\njava\n    @GET\n    @Path(\"/localdate\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String receiveLocalDate(@QueryParam(\"localDate\")Optional<LocalDate> localDateParam) {\n        if (localDateParam.isPresent()) {\n            final LocalDate actualDateTimeParam = localDateParam.get();\n            LOGGER.info(\"Received a date: {}\", actualDateTimeParam);\n            return actualDateTimeParam.toString();\n        } else {\n            LOGGER.warn(\"No received date\");\n            return null;\n        }\n    }\nRun mvn package, build fails during integration tests with:\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.857 sec <<< FAILURE! - in com.example.helloworld.IntegrationTest\ncom.example.helloworld.IntegrationTest  Time elapsed: 2.857 sec  <<< ERROR!\njava.lang.RuntimeException: javax.servlet.ServletException: io.dropwizard.jersey.setup.JerseyServletContainer-4005e485@ad3bc60b==io.dropwizard.jersey.setup.JerseyServletContainer,1,false\n    at com.google.common.base.Throwables.propagate(Throwables.java:160)\n    at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:224)\n    at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:140)\n    at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:147)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\nCaused by: javax.servlet.ServletException: io.dropwizard.jersey.setup.JerseyServletContainer-4005e485@ad3bc60b==io.dropwizard.jersey.setup.JerseyServletContainer,1,false\n    at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:661)\n    at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:419)\n    at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:875)\n    at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:349)\n    at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:778)\n    at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:262)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:113)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:230)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.server.Server.start(Server.java:411)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.Server.doStart(Server.java:378)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)\n    at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:222)\n    at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:140)\n    at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:147)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\nCaused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization.\n[[FATAL] No injection source found for a parameter of type public java.lang.String com.example.helloworld.resources.HelloWorldResource.receiveLocalDate(java.util.Optional) at index 0.; source='ResourceMethod{httpMethod=GET, consumedTypes=[], producedTypes=[text/plain], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.example.helloworld.resources.HelloWorldResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@72237be8]}, definitionMethod=public java.lang.String com.example.helloworld.resources.HelloWorldResource.receiveLocalDate(java.util.Optional), parameters=[Parameter [type=class java.util.Optional, source=localDate, defaultValue=null]], responseType=class java.lang.String}, nameBindings=[]}']\n    at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555)\n    at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184)\n    at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350)\n    at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n    at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255)\n    at org.glassfish.jersey.server.ApplicationHandler.<init>(ApplicationHandler.java:347)\n    at org.glassfish.jersey.servlet.WebComponent.<init>(WebComponent.java:392)\n    at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177)\n    at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369)\n    at javax.servlet.GenericServlet.init(GenericServlet.java:244)\n    at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:640)\n    at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:419)\n    at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:875)\n    at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:349)\n    at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:778)\n    at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:262)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:113)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:230)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\n    at org.eclipse.jetty.server.Server.start(Server.java:411)\n    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:105)\n    at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n    at org.eclipse.jetty.server.Server.doStart(Server.java:378)\n    at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n    at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)\n    at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:222)\n    at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:140)\n    at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:147)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n. @joschi \nSeems that worked, thanks!\n. ",
    "karolmie1": "@OverlyExcessive That was a great question. In fact It would fit nicely on stackoverflow. I would upvote that.. Pre-gzipping would be pretty sweet, especially if it would support brotli.. ",
    "Wstunes": "hello @arteam \nIt seems that you are familiar with the logging part. Could you please help me in https://github.com/dropwizard/dropwizard/issues/1827 ?\n. @arteam  Could you please have a look at this issue?\n. @arteam\nah Got it.\n  And how long do you estimate it will take to contact the logback team and fix this issue? We encoutered this critical problem in prodution.\n  Is there a workaround for now?what about I write a log appender on my own and get the request parameter in the url programmingly? Are there examples or documentations for the  customized log appender?\n. @arteam  I want to test it now. But I add dropwizard from the pom.xml. How can I add your latest change to my project and test it?\n. @arteam \nThanks for the tutorial.\nI've tested the new fix_reqAttribute_request_logs branch.\nNo logs are missing now. But another critical problem appears.\nI just used the same log format in the base.yml like this\nrequestLog:\n    appenders:\n      - type: file\n        currentLogFilename: ./logs/runtimeService-requests.log\n        archive: true\n        logFormat: \"%h|%reqParameter{something}|%reqParameter{somethingelse}\n\nBut in the request log file  it writes\n%PARSER_ERROR[something]|%PARSER_ERROR[somethingelse]\nThe logback request parameter parser is not working fine.\nCan you help fix this?\n. @arteam\nHi I've done a deep test in your branch and found out the problem.\nIf the log format configuration in the base.yml contains a patternLayout like reqParameter and reqAttribute, the corresponding \"RequestAttributeConverter.class\" and \"RequestParameterConverter.class\" will invoke their start() method to register when the application is started.\nBut now you've overrided the original RequestParameterConverter to SafeRequestParameterConverter in the defaultConverterMap. I find when the application is on, the start() method in \"RequestAttributeConverter.class\" is invoked but nothing is invoked in the new \"SafeRequestParameterConverter.class\". This results in the PASERERROR.\nSo could you check what's wrong with it?\nAnd Could you leave your contact information with me because it's a urgent issue for me . My email is wangshuogr@qq.com. Thanks\n. Hi @arteam \nThe new change takes effect and the logging works fine and no logs are lost any longer!\nMany thx for solving the problem.\nI see this will be fixed in 1.0.5.\nSo when will 1.0.5 be released?\nThis is a big update and could the release come faster?\n. @arteam\nThanks again for solving the reqParameter problem.\nAnd I have another concern.\nI'm afraid that reqAttribute or other parameters in the log format have the same problem.\nSo you can take care of it in later versions of dropwizard.\n. @coveralls   @arteam   @jplock \nI've tested the new fix_reqAttribute_request_logs branch.\nNo logs are missing now. But another critical problem appears.\nI just used the same log format in the base.yml like this\n\nrequestLog:\n    appenders:\n      - type: file\n        currentLogFilename: ./logs/runtimeService-requests.log\n        archive: true\n        logFormat: \"%h|%reqParameter{something}|%reqParameter{somethingelse}\n\nBut in the request log file it writes\n%PARSER_ERROR[something]|%PARSER_ERROR[somethingelse]\nThe logback request parameter parser is not working fine.\nI've done a deep test in your branch and found out the problem.\nIf the log format configuration in the base.yml contains a patternLayout like reqParameter and reqAttribute, the corresponding \"RequestAttributeConverter.class\" and \"RequestParameterConverter.class\" will invoke their start() method to register when the application is started.\nBut now you've overrided the original RequestParameterConverter to SafeRequestParameterConverter in the defaultConverterMap. I find when the application is on, the start() method in \"RequestAttributeConverter.class\" is invoked but nothing is invoked in the new \"SafeRequestParameterConverter.class\". This results in the PASERERROR.\nAnd Could you leave your contact information with me because it's a urgent issue for me . My email is wangshuogr@qq.com. Thanks\n. @t-tsutsumi \nThanks a lot. It works.\nBut the request and response content are splited into multiple lines.\nIs there some way to format the request log programatically because I may want to filter something. ",
    "jroitgrund": "My rationale was that if you wanted a simple redirect you wouldn't wrap it in a WebApplicationException. What is the difference in semantics between a plain redirect response and a WebApplicationException if not logging?\n. ",
    "CodingFabian": "Fixed via https://github.com/dropwizard/dropwizard/pull/1795 thanks\n. @arteam thanks should be sufficient - i tried to come up with a pr on my own, but I was unable to decide how to deal with the -1 setting. Looks like you decided that one would not want to manually set it?\n. agreed. in my opinion this is good to be merged.\n. In my case it is @nickbabcock\n. \nI came across this as well during profiling. setName() is quite expensive. Depending on the timeline of 1.2, would it be possible to cherry pick this to 1.1? The change itself is quite straightforward.. @arteam is there any roadblock with backporting this to 1.1? happy to help.. thank you!. is it possible to merge this to 1.1.x? as its actually a 1.1.x regression due to jetty upgrade.\nWe would like to be able to use this feature again without the need to wait for 1.2. ",
    "wilbertpol": "I did a quick check and request logging is working again. Thanks!\n. ",
    "Sounie": "Interesting timing, as the developer of FindBugs has recently announced that he will be coming back to work on it.\nhttps://news.ycombinator.com/item?id=12886665\nI can't vouch for how FindBugs compares with error-prone or how long it will be before it does get some updates, but just thought that it was worth mentioning.\n. Just realised I should have created a branch, will close this.. ",
    "chrischarlton001": "Thanks for that. This isn;t a load or performance thing. I've got 2x app servers running averaging 15% CPU load, and a single MySQL server (5.7.14) running under about 20% load, so I don't think it is a raw capacity issue.\nDo you know whether DW maintains its own connection pool internal to the stack? I.e. in the Tomcat Apache JDBC Connection pool package? Perhaps this is leaking, hence grabbing another connection from the DB when it needs the next one, and so on. As you can tell, I don;t know much about how that pool is configured or whether I can affect it.\nHappy to provide any more info... and thanks for your interest\nChris\n. Thanks for your comments - problem solved.\nThere was a clash between DW (Tomcat) connection pool management, and MySQL's connection pool management. A DBA had set  interactive_timeout and wait_timeout to 30 seconds. It looks like MySQL was trying to drop what it thought were idle/abandoned sessions - but DW didn't think they were (being managed as part of the pool). This caused DW to throw an error and grab a new connection - and the cycle continued. So the moral is - have one system or the other managing connection pools and not both (and watch your DBA's too!)\nThanks\n. ",
    "matthewjsummers": "Hi @arteam \nThe custom appender is simply an extension of FileAppender, that uses a LogstashLayout:\nhttps://gist.github.com/matthewjsummers/65feb02d4e6a4822919e88f2b06e93f2\nLogstashLayout should support both ILoggingEvents and IAccessEvents.  Is there anything that needs to be changed in the extended FileAppender, shown in the gist above?\n. Hi @arteam \nMy bad - the underlying framework does support both, but you need to choose a LogstashAccessLayout. I think this just means we need two logappenders - one logging for ILoggingEvents and one for IAccessEvents.\nThanks for your help, closing this down.\n. ",
    "rosslight": "Let me try package  application as a war file.\nThank you.\n. When i add the Level.INFO, the LoggingFeature worked. \nThank you.\n. Let me try the SQL union operation. but JDBC support the feather by set allowMultiQueries=true and i want to know if JDBI support the feature.\n. ",
    "milansismanovic": "Sorry for the newby question: Where would you put the above code snippet in?\nIs this in a class that extends Application like this (from the documentation https://jersey.github.io/documentation/latest/deployment.html#environmenmt.appmodel):\npublic class MyApplication extends Application{...}\nAnd where would this be in this class. \nI have the problem to not be able to start a class at startup from Jersey classes.\nHelp would be greatly appreciated.\nCheers,\nmilan. ",
    "mcummingscb": "I'm using 1.0.4\n. @joschi - it's the HelloWorld application from the Getting Started doc: http://www.dropwizard.io/1.0.3/docs/getting-started.html\n. OK, I can't easily do that, my code is not open source.  What specifically do you want to see?  I'm using Java 1.8 and java.util.Optional.  I can try updating my dependencies and a different version of Dropwizard.\n. OK, I cloned the dropwizard repo.  I can run the server and tests just fine from the command line.  However, I see the same incorrect parameter type error in my IDE.  I should have mentioned that that's where I see this issue with my project too, in IntelliJ.\n. @joschi I suppose that this could be an IDE issue.\n. No, but I also git cloned the dropwizard repo and I see it there too. @joschi \n. > OK, I cloned the dropwizard repo. \n@joschi ^^^\n. As I stated, this could be an issue with IntelliJ, I opened a forum question on their site too.  But. . . this is a heads up to you, anyone who used IntelliJ and Java 1.8 (maybe other versions), will see this.\nHa ha, you closed it.  OK.  I am using Java 1.8, the rest of my code is 1.8.\n. Agreed @joschi I see now that it's not a Dropwizard issue (that wasn't immediately clear to me) yet is still an issue that someone can hit if they're using IntelliJ.  It's annoying if you're new to Dropwizard and bootstrapping a new project.\nI found a way to disable these checks here: https://www.jetbrains.com/help/idea/2016.2/coding-assistance-for-rest-development.html\nThat will probably work fine but I will follow up if it doesn't.\n. ",
    "dren-dk": "I've just created a pull request with the change as it did seem to be very straight forward.\n. On it.\n. Ok, I have added test code and javadoc.\n. I understand, if the 1.0.x branch isn't going to live for ages, then I'll be happy to wait for 1.1.0\n. Yes, that's exactly what I was missing, thank you for showing me that.\n. My preference would be to format the log message in my own ExceptionMapper, so could this go into the ExceptionMapper as well?\n. ",
    "aminy": "challenge accepted! \ud83d\ude09 \nI will dig a bit deeper and get back to you on this thread with a possible solution or a workaround. \n. ",
    "ClintEsteMadera": "sorry, that was embarrasing, I swear I tried once and it didn't work... anyway, thanks! \u00af\\_(\u30c4)_/\u00af. ",
    "huaweigu": "thanks!\n. ",
    "vaibhavdhawan": "Hi yateam, \nDo you mind sharing this code? i am trying to achieve multi-tenancy on a database level through hibernate. \n. Hi yateam, \nThanks for the response. I did look at the source code and yes it is indeed a good way to implement multi tenancy at DB level. I tried to take it a notch higher and tried to make changes to the framework itslef. However still stuck with an exception deep in the framework. \n. ",
    "sathish-hike": "@joschi This is the real world issue that we are facing.\nWhy are you closing it? If its a design decision, lets keep it open so that our committers can track it and provide an easy solution. Opinionated frameworks won't stay for long.\nCreated this new one since you've locked https://github.com/dropwizard/dropwizard/issues/1367\nPlease reopen this issue https://github.com/dropwizard/dropwizard/issues/1848 or https://github.com/dropwizard/dropwizard/issues/1367\nOnly the resolved issues should be closed.. I tried above solution, still facing same issue. Here is my error report:\n```\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/Users/sathish/workspace/test/lib/phoenix-4.4.0.2.4.2.0-258-client.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/Users/sathish/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.1.7/9865cf6994f9ff13fce0bf93f2054ef6c65bb462/logback-classic-1.1.7.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nException in thread \"main\" java.lang.IllegalStateException: Unable to acquire the logger context\n    at io.dropwizard.logging.LoggingUtil.getLoggerContext(LoggingUtil.java:46)\n    at io.dropwizard.logging.BootstrapLogging.bootstrap(BootstrapLogging.java:45)\n    at io.dropwizard.logging.BootstrapLogging.bootstrap(BootstrapLogging.java:34)\n    at io.dropwizard.Application.(Application.java:24)\n    at com.test.MyApplication.(MyApplication.java:19)\n    at com.test.Application.main(MyApplication.java:23)\n:run FAILED\nFAILURE: Build failed with an exception.\n```. ",
    "vybs": "thanks much for fixing this. when will this make into the official release @arteam . @arteam  is there a slated release for this anytime soon, i,e 1.2.0 ?. ",
    "monishkumarg": "Hi Arteam,\nIf I remove logback from dependency, I am getting java.lang.NoClassDefFoundError: ch/qos/logback/classic/Level Error.\nPlease let me know what i can do for this case.\nThanks,. ",
    "kedarr": "@monishkumarg Were you able to resolve the issue ?. ",
    "blling": "2148  maybe will  use guice instad of hk2. @joschi  Do you have any plan of impliment jersey-guice module ?\nHere are some init work maybe it will help you a little.. ",
    "umcodemonkey": "To clarify for anyone coming later (thanks @joschi for validating), prior to this change, if you import the dropwizard-bom, and depend on both dropwizard-testing and mockito in test scope, the dependency management in the bom would force your dependency of mocktio to Mockito 2. IMO, the bom should not be managing this dependency, as the point of the bom is to manage dependencies of end users, not for internal usage. Also, dropwizard-test does not need to have a compile dependency on mockito, as it's only used for it's internal tests, and is not required to use any of the classes from dropwizard-test.\n@joschi is correct that after this change users will no longer get a transitive dependency on mockito, but since it a best practice with Maven to explicitly depend on artifacts that you use, this is a net positive to impacted users in any case.. ",
    "nathklei": "@evnm I've shortened lines based on your comments. Thanks!. Thanks for the feedback.  I could overload the constructor, keeping the old one in-tact, to avoid this. What do you think?. Sure! made this change. Made this change. Made this change, and fixed the test a bit to actually check for an active conn. before closing (it wasn't an effective test before).. Done.. Done.. ",
    "fabito": "Hmm, just found the customizeBuilder method. \nIt works for me. \nSorry for the inconvenience, you may ignore this PR.. ",
    "eonwhite": "Thanks for the review and merge @evnm!\nThat leaves the other place where I've noticed a non-JSON response on errors -- the DefaultUnauthorizedHandler for 401s, which returns text/plain.\nThat one doesn't bug me as much because it's so trivial to override when you set up auth (I have a little mini-lib I use to do this -- https://github.com/ibwhite/starwizard) -- but maybe if we're fixing this error response for 1.1.0, we should fix that default as well in the same version?\nLet me know your thoughts, happy to submit a PR for that as well if you'd like.. Hey @jplock -- sure, I think that would be great. I got that code from @pablo-meier FTR. The dropwizard-swagger module is awesome btw, thanks for your work on it.. @evnm Is there any chance that this feature could make it into an earlier milestone, perhaps the 1.1.x release?\nI really need optional resource protection for something I'm working on now, and was actually about to go and write a PR for the exact same approach myself, so I was really delighted to see this written and merged. I was slightly less delighted to see it's two whole minor versions away.\nI can rely on 1.2.0-SNAPSHOT for a bit while developing, but I don't want to roll something into prod with a snapshot dependency.\nSince Dropwizard made a breaking change to remove the optional flag from @Auth several releases back, addressing this is somewhat of a bugfix as well as a feature. Understand if 1.1.x is feature-locked, but figured I'd ask!. \ud83d\udc4d  Thank you so much @evnm and @jplock! I really appreciate moving this up. My production codebases thank you!. Thanks, great point. I've pushed a commit to address this as you suggested.. ",
    "kjetilv": "Not yet, at least. It's just a null check before dereferencing.. I got an actual NPE in the wild, yes. It happens :-). In that case, I need to get back to this later and figure out how to provoke an NPE within the test case.\nAll I really want is an error handler that doesn't mask my errors with its own. This is a pretty obvious fix, since NPE's do happen in the wild, and they will be masked with a new NPE by this code.. OK, that probably won't happen, sorry. I won't get the time. I hope you're not feeling obligated to let me do the honors or anything. I don't need commit credits, I just need a runtime that handles exceptions :-)\nThis code assumes that the message of any given Throwable is non-null. It is well-known and documented since the dawn of time as a property that may be null. It's in the Javadoc and has been there since 1.0. Not checking it isn't a bug, it's a trivial mistake, almost a typo. Easily remedied by checking it. These things creep into the code base from time to time, and when we spot them we fix them.\nHoping to keep using dropwizard in the future,\nYours truly,\nKjetil. Thanks for taking it seriously \ud83d\udc4d \nThough I'd argue it is not contrived, and that you won't need a \"devious\" deserializer to provoke it, just a badly written one. You refer to a rogue JacksonMappingException, but if you look at the code, you'll see it's the CAUSE of the JME that is queried. \nAll it takes is for some code to handle a null badly and end up with an NPE, which gets wrapped in the JME. NPE's have null messages, as can any exception. It is perfectly legal according to the Javadoc for Throwable. \n(I agree the test case was contrived though. I may have been subconsciously trying to make a point. Thanks again.). ",
    "sandakith": "HI All, Any information regarding \"Static Asserts Bundles with HTTP Basic Auth\" in dropwizard..?\nIt seems Jetty has a way to do this, I would like to know if there is a way in dropwizard. http://stackoverflow.com/questions/10750978/basic-http-auth-for-static-pages-in-jetty-8\n. Thank you for your reply. Is this something dropwizard could do in a future release soon. E.g., adding a parameter block in the config (with necessary details) to enable and disable assets basic auth? \nIf there are no such plans, we could go ahead, try it out - if it works as expected and then possibly put a pull request ... please let us know. . ",
    "Gaudon": "Any update on this? I seem to be running into the same issue.. I've taken a look at most of, if not all the available resources on DropWizard-example as well as the source here on github. Including the OAuthCredentialAuthFilter mentioned.\nIt could be that I'm an idiot and doing something glaringly incorrectly, but if so, I just can't seem to find it or understand what it is.. Most of these are things I also thought to check and can give you direct answers for. \n\nDoes DashboardCredentials implement Principal? Yes.\nRemove Hibernate. Did not correct the issue.\nRemove authorization. Yes the API works as expected, but without any sort of authentication or authorization\nReturn a dummy authentication object. Returning any Optional in the DashboardAuthenticator.authenticate() method always yields a null object in any @Auth injected resource method.\nEnsure the filter is firing and works as expected. The filter works as expected.\n. I will remove hibernate and see how much breaks. If it's possible to test it easily without Hibernate I will update my comment and post back.\n. In an attempt to remove Hibernate and make authentication not @unitofwork aware I did the following.\n```\n// Authentication\n//DashboardAuthenticator authenticator = new UnitOfWorkAwareProxyFactory(hibernateBundle).create(DashboardAuthenticator.class, new Class[]{SessionDAO.class, UserDAO.class}, new Object[]{sessionDAO, userDAO});\nDashboardAuthenticator authenticator = new DashboardAuthenticator(sessionDAO, userDAO);\nDashboardAuthorizer authorizer = new DashboardAuthorizer(sessionDAO);\nDashboardAuthFilter authFilter = new DashboardAuthFilter(authenticator, authorizer);\n\nenvironment.jersey().register(new AuthDynamicFeature(authFilter));\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(DashboardCredentials.class));\n```\nDashboardAuthenticator.java\n```\n@Override\n//@UnitOfWork\npublic Optional authenticate(Object credentials) throws AuthenticationException {\n        DashboardCredentials dbCredentials = (DashboardCredentials)credentials;\n        dbCredentials.setToken(\"ABCDEF\");\n        dbCredentials.setUserId(45);\n    return Optional.of(dbCredentials);\n\n}\n```\nYields the following error as before:\n\nERROR [2017-05-02 15:40:33,637] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: 3535da080f38cdef\n! java.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request\n. Not entirely, no. It certainly could. \n\nThe DashboardCredentials for all intents and purposes only needs to contain the Token to validate it's an active token and inversely find the associated user to which it belongs. \nThis in turn could be used to populate the suggested DashboardUser class. \nIt's a better design choice, and I'm changing it to do that just now. \nI don't think it's related or the root cause however to the issue I'm experiencing. . I've updated it based on your suggestion. I'm quite new to DropWizard.. Like single digit days new for work. \nWith that being said, Here's the \"overview\" of the components involved that are exposed on my side of the framework. There isn't a lot going on here. \n\"ApplicationClass\".java\n```\n...\n// Authentication\nDashboardAuthenticator authenticator = new UnitOfWorkAwareProxyFactory(hibernateBundle).create(DashboardAuthenticator.class, new Class[]{SessionDAO.class, UserDAO.class}, new Object[]{sessionDAO, userDAO});\nDashboardAuthFilter authFilter = new DashboardAuthFilter(authenticator);\nenvironment.jersey().register(new AuthDynamicFeature(authFilter));\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(DashboardUser.class));\n...\n```\n```\npublic class DashboardAuthenticator implements Authenticator {\n    private SessionDAO sessionDAO;\n    private UserDAO userDAO;\npublic DashboardAuthenticator(SessionDAO sessionDAO, UserDAO userDAO) {\n    this.sessionDAO = sessionDAO;\n    this.userDAO = userDAO;\n}\n\n@Override\n   @UnitOfWork\n   public Optional authenticate(DashboardCredentials credentials) throws AuthenticationException {\n        Session session = sessionDAO.findSession(credentials.getToken());\n        ...\n        User user = userDAO.findByUserId(session.getUserId());\n        DashboardUser dashboardUser = new DashboardUser(user.getEmail(), user.getId());\n        return Optional.of(dashboardUser);\n   }\n```\n```\n@PreMatching\n@Provider\n@Priority(Priorities.AUTHENTICATION)\npublic class DashboardAuthFilter extends AuthFilter {\nprivate DashboardAuthenticator authenticator;\n\npublic DashboardAuthFilter(DashboardAuthenticator authenticator) {\n    this.authenticator = authenticator;\n}\n\n@Override\npublic void filter(ContainerRequestContext requestContext) throws IOException {\n\n    DashboardCredentials credentials = getCredentials(requestContext);\n\n    try {\n        Optional<DashboardUser> authUserResult = authenticator.authenticate(credentials);\n\n        if(!authUserResult.isPresent()) {\n            throw new WebApplicationException(Response.Status.UNAUTHORIZED);\n        } else {\n            // Success\n        }\n    } catch (AuthenticationException e) {\n        throw new WebApplicationException(Response.Status.UNAUTHORIZED);\n    }\n}\n\nprivate DashboardCredentials getCredentials(ContainerRequestContext requestContext) {\n    DashboardCredentials credentials = new DashboardCredentials();\n    credentials.setToken(requestContext.getHeaderString(\"Authorization\"));\n    return credentials;\n}\n\n}\n```\n```\n@Path(\"/students\")\n@PermitAll\n@Produces(MediaType.APPLICATION_JSON)\npublic class StudentsResource {\nprivate final StudentDAO studentDAO;\n\npublic StudentsResource(StudentDAO studentDAO) {\n    this.studentDAO = studentDAO;\n}\n\n@GET\n@UnitOfWork\npublic List<Student> getAllStudents(@Auth DashboardUser dashboardUser) {\n    // TODO(Gaudon): Apply authorization restrictions.\n    return studentDAO.getAll();\n}\n\n}\n```\nI'll post the class here just because you made an edit. But it does indeed implement principal.\n```\npublic class DashboardUser implements Principal {\nprivate String name;\nprivate int id;\n\npublic DashboardUser() {}\n\npublic DashboardUser(String name, int id) {\n    this.name = name;\n    this.id = id;\n}\n\n...\n\n@Override\npublic String getName() {\n    return name;\n}\n\n}\n```\nThe above scenario compiles and runs just fine, but still produces the same IllegalStateException.\n\nIllegalStateException: Cannot inject a custom principal into unauthenticated request\n. You are absolutely correct, and that completely fixed it.\n\nI don't know what \"Authentication Scheme\" as a string should be in this context, but I will look into what it's used for. \nIn the mean time I'll update the above class in case other people have this issue.\nVery much appreciate the help. I tried to find a donation link off your github page links to buy you a beer. I failed to find any such link! Thanks all the same.. ",
    "yp": "Same issue here. @parkdcom @whitfin @Gaudon how did you get around this issue?. ",
    "kishaningithub": "Firebase hosting offers free SSL to custom domains. I have used it for several of my client's static sites.. ",
    "s101d1": "Just returning Response object with status 200. Above code just an example. The point is why can't I send mock object. . ",
    "adrienpessu": "@joschi Thank you very much for the quick response.\nI have a compilation error because it can not find the Java class behind the annotation JsonProperty.\nThe dependencies in my pom.xml look like this : \n`\n\n1.0.5\n\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>${dropwizard.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-auth</artifactId>\n        <version>${dropwizard.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.github.toastshaman</groupId>\n        <artifactId>dropwizard-auth-jwt</artifactId>\n        <version>1.0.2-0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.bitbucket.b_c</groupId>\n        <artifactId>jose4j</artifactId>\n        <version>0.5.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mongodb.morphia</groupId>\n        <artifactId>morphia</artifactId>\n        <version>1.2.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.jamierf.dropwizard</groupId>\n        <artifactId>dropwizard-logging-loggly</artifactId>\n        <version>0.8-SNAPSHOT</version>\n    </dependency>\n    <dependency>\n        <groupId>com.smoketurner</groupId>\n        <artifactId>dropwizard-swagger</artifactId>\n        <version>1.0.5-4</version>\n    </dependency>\n    <dependency>\n        <groupId>com.github.fge</groupId>\n        <artifactId>json-patch</artifactId>\n        <version>1.9</version>\n    </dependency>\n\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>2.0.82-beta</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.assertj</groupId>\n        <artifactId>assertj-core</artifactId>\n        <version>3.5.1</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>1.2.5</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-java</artifactId>\n        <version>1.2.5</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-testing</artifactId>\n        <version>${dropwizard.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-client</artifactId>\n        <version>${dropwizard.version}</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>`. Even when I add in the pom.xml the dependency :\n\nGroup ID: com.fasterxml.jackson.core Artifact ID: jackson-annotations Version: 2.7.0\nIt does not work.\nThe output of mvn dependency:tree is :\n[INFO] com.xxxxx.xxxx.api:service:jar:1.0.0-SNAPSHOT\n[INFO] +- io.dropwizard:dropwizard-core:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard:dropwizard-util:jar:1.0.5:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.8:compile\n[INFO] |  |  +- com.google.guava:guava:jar:19.0:compile\n[INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile\n[INFO] |  |  \\- joda-time:joda-time:jar:2.9.4:compile\n[INFO] |  +- io.dropwizard:dropwizard-jackson:jar:1.0.5:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.7.8:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.7.8:compile\n[INFO] |  |  \\- ch.qos.logback:logback-classic:jar:1.1.7:compile\n[INFO] |  +- io.dropwizard:dropwizard-validation:jar:1.0.5:compile\n[INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile\n[INFO] |  |  |  +- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  |  |  +- org.jboss.logging:jboss-logging:jar:3.2.1.Final:compile\n[INFO] |  |  |  \\- com.fasterxml:classmate:jar:1.1.0:compile\n[INFO] |  |  \\- org.glassfish:javax.el:jar:3.0.0:compile\n[INFO] |  +- io.dropwizard:dropwizard-configuration:jar:1.0.5:compile\n[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.7.8:compile\n[INFO] |  |  |  \\- org.yaml:snakeyaml:jar:1.15:compile\n[INFO] |  |  \\- org.apache.commons:commons-lang3:jar:3.4:compile\n[INFO] |  +- io.dropwizard:dropwizard-logging:jar:1.0.5:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.1.2:compile\n[INFO] |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile\n[INFO] |  |  +- ch.qos.logback:logback-core:jar:1.1.7:compile\n[INFO] |  |  +- org.slf4j:log4j-over-slf4j:jar:1.7.21:compile\n[INFO] |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.21:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-util:jar:9.3.9.v20160517:compile\n[INFO] |  +- io.dropwizard:dropwizard-metrics:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard:dropwizard-jersey:jar:1.0.5:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.23.2:compile\n[INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.23.2:compile\n[INFO] |  |  |  \\- javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.23.2:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.23.2:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.7.8:compile\n[INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.7.8:compile\n[INFO] |  |  |  \\- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.7.8:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.23.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.3.9.v20160517:compile\n[INFO] |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-io:jar:9.3.9.v20160517:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.3.9.v20160517:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-xml:jar:9.3.9.v20160517:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-continuation:jar:9.3.9.v20160517:compile\n[INFO] |  +- io.dropwizard:dropwizard-servlets:jar:1.0.5:compile\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-jetty:jar:1.0.5:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.3.9.v20160517:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-security:jar:9.3.9.v20160517:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.3.9.v20160517:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-http:jar:9.3.9.v20160517:compile\n[INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-json:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-request-logging:jar:1.0.5:compile\n[INFO] |  |  \\- ch.qos.logback:logback-access:jar:1.1.7:compile\n[INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile\n[INFO] |  \\- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile\n[INFO] +- io.dropwizard:dropwizard-auth:jar:1.0.5:compile\n[INFO] +- com.github.toastshaman:dropwizard-auth-jwt:jar:1.0.2-0:compile\n[INFO] +- org.bitbucket.b_c:jose4j:jar:0.5.1:compile\n[INFO] |  \\- org.slf4j:slf4j-api:jar:1.7.6:compile\n[INFO] +- org.mongodb.morphia:morphia:jar:1.2.0:compile\n[INFO] |  +- org.mongodb:mongo-java-driver:jar:3.2.2:compile\n[INFO] |  +- cglib:cglib-nodep:jar:2.2.2:compile\n[INFO] |  \\- com.thoughtworks.proxytoys:proxytoys:jar:1.0:compile\n[INFO] +- com.jamierf.dropwizard:dropwizard-logging-loggly:jar:0.8-SNAPSHOT:compile\n[INFO] |  +- ch.qos.logback.contrib:logback-json-classic:jar:0.1.2:compile\n[INFO] |  |  \\- ch.qos.logback.contrib:logback-json-core:jar:0.1.2:compile\n[INFO] |  +- ch.qos.logback.contrib:logback-jackson:jar:0.1.2:compile\n[INFO] |  \\- org.logback-extensions:logback-ext-loggly:jar:0.1.2:compile\n[INFO] +- com.smoketurner:dropwizard-swagger:jar:1.0.5-4:compile\n[INFO] |  +- io.dropwizard:dropwizard-assets:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard:dropwizard-views:jar:1.0.5:compile\n[INFO] |  +- io.dropwizard:dropwizard-views-freemarker:jar:1.0.5:compile\n[INFO] |  |  \\- org.freemarker:freemarker:jar:2.3.23:compile\n[INFO] |  +- org.glassfish.jersey.media:jersey-media-multipart:jar:2.23.2:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.2:compile\n[INFO] |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.2:compile\n[INFO] |  |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  |  \\- org.jvnet.mimepull:mimepull:jar:1.9.6:compile\n[INFO] |  \\- io.swagger:swagger-jersey2-jaxrs:jar:1.5.12:compile\n[INFO] |     +- io.swagger:swagger-jaxrs:jar:1.5.12:compile\n[INFO] |     |  +- io.swagger:swagger-core:jar:1.5.12:compile\n[INFO] |     |  |  \\- io.swagger:swagger-models:jar:1.5.12:compile\n[INFO] |     |  |     \\- io.swagger:swagger-annotations:jar:1.5.12:compile\n[INFO] |     |  \\- org.reflections:reflections:jar:0.9.10:compile\n[INFO] |     |     \\- com.google.code.findbugs:annotations:jar:2.0.1:compile\n[INFO] |     \\- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.1:compile\n[INFO] +- com.github.fge:json-patch:jar:1.9:compile\n[INFO] |  \\- com.github.fge:jackson-coreutils:jar:1.6:compile\n[INFO] |     \\- com.github.fge:msg-simple:jar:1.1:compile\n[INFO] |        \\- com.github.fge:btf:jar:1.2:compile\n[INFO] +- junit:junit:jar:4.12:test\n[INFO] |  \\- org.hamcrest:hamcrest-core:jar:1.3:test\n[INFO] +- org.mockito:mockito-core:jar:2.0.82-beta:test\n[INFO] |  +- net.bytebuddy:byte-buddy:jar:1.4.8:test\n[INFO] |  \\- org.objenesis:objenesis:jar:2.4:test\n[INFO] +- org.assertj:assertj-core:jar:3.5.1:test\n[INFO] +- info.cukes:cucumber-junit:jar:1.2.5:test\n[INFO] |  \\- info.cukes:cucumber-core:jar:1.2.5:test\n[INFO] |     +- info.cukes:cucumber-html:jar:0.2.3:test\n[INFO] |     +- info.cukes:cucumber-jvm-deps:jar:1.0.5:test\n[INFO] |     \\- info.cukes:gherkin:jar:2.12.2:test\n[INFO] +- info.cukes:cucumber-java:jar:1.2.5:test\n[INFO] +- io.dropwizard:dropwizard-testing:jar:1.0.5:test\n[INFO] |  \\- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.23.2:test\n[INFO] |     +- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.23.2:test\n[INFO] |     \\- org.ow2.asm:asm-debug-all:jar:5.0.4:test\n[INFO] \\- io.dropwizard:dropwizard-client:jar:1.0.5:test\n[INFO]    +- org.glassfish.jersey.core:jersey-client:jar:2.23.2:compile\n[INFO]    |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO]    |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b05:compile\n[INFO]    |  |  +- org.glassfish.hk2:hk2-utils:jar:2.5.0-b05:compile\n[INFO]    |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b05:compile\n[INFO]    |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b05:compile\n[INFO]    |  \\- org.glassfish.hk2:hk2-locator:jar:2.5.0-b05:compile\n[INFO]    |     \\- org.javassist:javassist:jar:3.20.0-GA:compile\n[INFO]    +- org.apache.httpcomponents:httpclient:jar:4.5.2:test\n[INFO]    |  +- org.apache.httpcomponents:httpcore:jar:4.4.4:test\n[INFO]    |  \\- commons-codec:commons-codec:jar:1.9:test\n[INFO]    +- io.dropwizard.metrics:metrics-httpclient:jar:3.1.2:test\n[INFO]    \\- org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.23.2:test. I use IntelliJ too. When I execute mvn clean compile with the IDE or in command line it's the same result.. I found it.\nThe issue come from my private repository. It download empty jar.\nThank you very much for helping me investigate.. ",
    "zizifn": "Thank for quick reply this issue.\nI found another workaround by override toString() method.\npublic enum Event { @JsonProperty(\"forgot password\") FORGOT_PASSWORD{\n @Override\npublic String toString() {\nreturn \"forgot password\";\n}\n}; }\nThis looks complicated than @JsonProperty. But it's a workaround anyway.\nIf I can ask, why dropwizard override some deserialize instand of use Jackson directly?. ",
    "wbf1013": "@joschi \njava version \"1.8.0_101\"\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\nCentOS release 6.8 (Final)\n. ",
    "MadalinaPatrichi": "Is this going to be merged in? It would be awesome to have this feature in. ",
    "mutaherul": "Thanks.. ",
    "jsauvain": "@arteam \nI just tried to use this feature with 1.2.0-SNAPSHOT from nexus.\nio.dropwizard.jackson.LogbackModule imports the Level class from Logback. Could you please fix that?\njava.lang.NoClassDefFoundError: ch/qos/logback/classic/Level\n        at io.dropwizard.jackson.LogbackModule$LogbackDeserializers.findBeanDeserializer(LogbackModule.java:49)\n        at com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomBeanDeserializer(BasicDeserializerFactory.java:1657)\n        at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:102)\n        at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:403)\n        at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)\n        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)\n        at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)\n        at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)\n        at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:476)\n        at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:3899)\n        at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3765)\n        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2099)\n        at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:128)\n        at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:92)\n        at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:124)\n        at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72)\n        at io.dropwizard.cli.Cli.run(Cli.java:74)\n        at io.dropwizard.Application.run(Application.java:93). ",
    "omryhay-unibeam": "@arteam - After checking it with a test application, without any add-ons or bundles, it seems to be working.. ",
    "mrice": "Awesome, thanks Justin!. ",
    "jay-genhot": "@joschi \nHi , I still can not resolve my issue, my issue here is my normal java class is a util class, it does not managed by Application#run, and there is static field need the value from yml file. Code section below:\npublic class Util {\npublic static final String testValue = configuration.fields;\n}\nHow can make this works? thank you very much.. ",
    "JChrist": "I'd be willing to give it a shot, if you could point me to the right direction for implementing this. I haven't had much success yet, even the simplest test case fails with server error (500 response) when the annotations are on an interface. I tend to believe it is due to the grizzly test container, but I am not sure.. ",
    "MaxMao": "I was expecting to see an unzipped version of \"form\" data in httpbin.org response. Maybe it's the server side which does not honor \"gzip\" Content-Encoding properly? My web server is not able to handle the zipped form data as httpbin.org.. ok, feel free to close this ticket then.. ",
    "aaanders": "Thanks for reviewing @joschi . Nice, thanks @joschi, nice and clean. (Grepping for stream() made me think it was a bad idea to use it :D ) . Fixed. ",
    "kahd1993": "@evnm thanks for your explain!. ",
    "jeppe-style": "I have an alternative fix for this issue that adds the sub-resource locator methods in the UnitOfWorkApplicationListener (it was done as an university assignment). Please see the code in my fork. \nI also created a test for it based on the JerseyIntegrationTest. It has one caveat that when an SQL exception is thrown a MessageBodyProviderNotFoundException is thrown. It is fixed by adding the @Produces(MediaType.APPLICATION_JSON) to the methods annotated with @UnitOfWork.\nRunning the tests provided by @arteam with this fix the issue is not there though.. ",
    "frojasg": "@evnm Thanks for the feedback. \nI added some documentation. Please let me know if I need to improve it \ud83d\ude04 . Thank @evnm! . ",
    "zheng-wang": "Cool, thanks for such a detailed answer. I'll try it out.. ",
    "gggitpl": "return Response.ok(\"\u8fd4\u56de\u4e2d\u6587\u6c49\u5b57\").header(HttpHeaders.CONTENT_TYPE,\n                    MediaType.APPLICATION_JSON + \";charset=UTF-8\").build();\nThis setting can be resolved, would like to know if there is a unified place can be set. @jplock @arteam \nthank you very much. ",
    "osigida": "@arteam \ud83d\udc4d . @arteam, I'm trying to use version 1.0.7 which was released yesterday, but it looks like something went wrong at the upload to maven central and some of the artifacts are not there.\nAt the moment I miss https://search.maven.org/remotecontent?filepath=io/dropwizard/dropwizard-jersey/1.0.7/dropwizard-jersey-1.0.7.jar \nMaybe there are more.\nCould you please check?\nThanks a lot in advance. ",
    "t-tsutsumi": "@joschi FYI, the v1.1.0 seems to be corrupted as well. :-(\n* http://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-servlets/1.1.0/dropwizard-servlets-1.1.0.jar. @arteam Unfortunately, http://repo.maven.apache.org/maven2/io/dropwizard/dropwizard-views/1.0.7/dropwizard-views-1.0.7.jar still unavailable.\n. It seems to be working. thanks!. Yes. I will submit a pull request.\nFYR: If alpn-boot version is old, Http2IntegrationTest ends with thread death. When testing with Java 8u131, the following log is recorded.\nINFO  [2017-04-24 17:50:59,036] org.eclipse.jetty.server.Server: Started @4081ms\nWARN  [2017-04-24 17:50:59,148] org.eclipse.jetty.util.thread.QueuedThreadPool: \n! java.lang.NoSuchMethodError: sun.security.ssl.SignatureAndHashAlgorithm.getSupportedAlgorithms(Ljava/util/Collection;)Ljava/util/Collection;\n! at sun.security.ssl.ServerHandshaker.clientHello(ServerHandshaker.java:698)\n! at sun.security.ssl.ServerHandshaker.processMessage(ServerHandshaker.java:217)\n! at sun.security.ssl.Handshaker.processLoop(Handshaker.java:1026)\n! at sun.security.ssl.Handshaker$1.run(Handshaker.java:966)\n! at sun.security.ssl.Handshaker$1.run(Handshaker.java:963)\n! at java.security.AccessController.doPrivileged(Native Method)\n! at sun.security.ssl.Handshaker$DelegatedTask.run(Handshaker.java:1416)\n! at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.fill(SslConnection.java:736)\n! at org.eclipse.jetty.server.NegotiatingServerConnection.fill(NegotiatingServerConnection.java:153)\n! at org.eclipse.jetty.server.NegotiatingServerConnection.onFillable(NegotiatingServerConnection.java:98)\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)\n! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110)\n! at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:278)\n! at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:148)\n! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110)\n! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)\n! at org.eclipse.jetty.util.thread.Invocable.invokePreferred(Invocable.java:128)\n! at org.eclipse.jetty.util.thread.Invocable$InvocableExecutor.invoke(Invocable.java:222)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:294)\n! at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:126)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590)\n! at java.lang.Thread.run(Thread.java:748)\nWARN  [2017-04-24 17:50:59,148] org.eclipse.jetty.util.thread.QueuedThreadPool: Unexpected thread death: org.eclipse.jetty.util.thread.QueuedThreadPool$2@57ec85be in dw{STARTED,8<=8<=1024,i=4,q=0}\n. Solved.. I also saw the same thing. Probably, the SessionHandler will work with this. However, there is concern about maintaining backward compatibility. I think more tests will be required.\nAlso, If you run the test case of @orangecoding, I recommend adding the following code.\n```diff\ndiff --git a/src/main/java/com/example/test/TestSessionHandler.java b/src/main/java/com/example/test/TestSessionHandler.java\nindex 75726cd..5d7924b 100644\n--- a/src/main/java/com/example/test/TestSessionHandler.java\n+++ b/src/main/java/com/example/test/TestSessionHandler.java\n@@ -3,6 +3,10 @@ package com.example.test;\n import javax.servlet.http.HttpSessionEvent;\n import javax.servlet.http.HttpSessionListener;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.SessionIdManager;\n+import org.eclipse.jetty.server.session.DefaultSessionIdManager;\n+import org.eclipse.jetty.server.session.HouseKeeper;\n import org.eclipse.jetty.server.session.SessionHandler;\npublic class TestSessionHandler extends SessionHandler{\n@@ -24,4 +28,18 @@ public class TestSessionHandler extends SessionHandler{\n     });\n}\n+\n+  // Sets the interval of the scavenge task to 5 seconds.\n+  @Override\n+  protected void doStart() throws Exception {\n+    Server server = getServer();\n+    HouseKeeper houseKeeper = new HouseKeeper();\n+    houseKeeper.setIntervalSec(5);\n+    SessionIdManager sessionIdManager = new DefaultSessionIdManager(server);\n+    sessionIdManager.setSessionHouseKeeper(houseKeeper);\n+    server.setSessionIdManager(sessionIdManager);\n+    server.manage(sessionIdManager);\n+    sessionIdManager.start();\n+    super.doStart();\n+  }\n }\n```\n. @nickbabcock OK, I will submit a pull request.\n@orangecoding I think that the session will be destroyed by the next access after the maxInactiveInterval has elapsed, or the scavenge task.\n. @dbaronster Probably there is a problem with dependency definition. Please check whether an obsolete dependency (e.g. old Jersey) is defined in the pom.xml if using Maven.. @Wstunes The logFormat is incorrect. Correct as follows:\nyaml\nlogFormat: \"%h|%t{yyyy/MM/dd HH:mm:ss}|%D|%requestContent|%responseContent\"\nIn addition, it is necessary to register TeeFilter as follows.\njava\nenvironment.servlets().addFilter(\"teeFilter\", TeeFilter.class).addMappingForUrlPatterns(null, false, \"/*\");. @Wstunes There are several solutions; but perhaps extend the TeeFilter is easiest.. I'd forgotten until seeing this issue, but It\u2019s been on my mind for a while.\n@jplock Are the following changes intended?\nhttps://github.com/dropwizard/dropwizard/commit/18f8d48c7ce9dca4fb38f59a4ec411badde3667c#diff-caef1b6b9ef1c31a0d71011c4fcb8c27L396\n. @jplock Hmm, it seems to me that began using BOM is Jackson, not Jersey. Is this wrong?. Oh, I noticed that the above commit comment include and simplify BOM.  That means you did it together. Thanks a lot!. ",
    "shawnsmith": "FYI: I'm getting a new Logback status warning from any attempt to use this ConsoleAppender because its start() method is never called.  Hooking up the context allows the context to capture the following warning:\nWARN in ch.qos.logback.core.ConsoleAppender[null] - Attempted to append to non started appender [null].. Good idea, I've updated the PR.. ",
    "vrolijken": "1.1.0, I'm busy crafting a pull request, did not expect feedback this fast ;-). Great! thanks for the reply and sorry I didn't look good enough (didn't find it in the issues). ",
    "j-baker": "Ah, sorry. Yes, it's very reasonable, but I couldn't get it to work. I'll hopefully take another look soon.. ",
    "fabriziocucci": "@nickbabcock, I was exactly talking about describing the recommended structure by example highlighting the use case like you did! :+1: \nAnd I guess another source of confusion is related to what follows the recommendation:\n\nOur applications tend to look like this:\n-- com.example.myapplication:\n---- api: Representations.\n---- cli: Commands\n---- client: Client implementation for your application\n---- core: Domain implementation\n---- jdbi: Database access classes\n---- health: Health Checks\n---- resources: Resources\n---- MyApplication: The application class\n---- MyApplicationConfiguration: configuration class\n\nHere it looks like api and client are actually packages of the same project, which is true for api if, as you said, you are not planning on distributing a java library for other developers. But then again, if that is the case, the client package doesn't make much sense there.\nUltimately, it would be nice to clarify that the recommended structure make sense if you want your microservice to be easily consumable by other (Java) microservices.. > The client package is used to house code that accesses other HTTP endpoints -- not your own endpoints.\nWay better this line than the one currently existing in the documentation! :smile: \n\nIn seriousness, and as an aside, there are many ways to create a client library, and it's made difficult because one often doesn't control the environment in which the client library is used.\n\nIn general, thas is unfortunately true for whatever library/framework...\n\nThe easiest way to distribute access to your microservice is to document the API\n\nCompletely agree!. \"...one can combine the project-api and project-application modules into a single project...\"\nDoes it sound more accurate?. \"...and deserialization logic.  Instead of using a HTTP client...\"\nDouble white space after the dot, not sure if it's intentional.. \"...call the HTTP endpoint.  The client library ...\"\nDouble white space after the dot, not sure if it's intentional.. I'm going to throw this as it came up to my mind right now so feel free to ignore! :smile: \nNaming the module project-client (in the \"client library\" scenario) and the package client (in the \"NO client library\" scenario) can still cause a little bit of misunderstanding (even though the new comments help a lot). \nHave you guys thought about renaming the client package into something like remote, service or something like that?\nTo be more concrete, I'll write down an example based on the conventions I've adopted in one of my projects. I have two microservices, aggregation-service and recommendation-service. The aggregation-service depends on the recommendation-service in that it requires an invocation of the recommendation-service REST API. So, in the aggregation-service I have my remote package where I've created a JAX-RS annotated interface representing the recommendation-services and called RemoteRecommendationService (and ultimately instantiated using jersey-proxy-client). Again, this is just a (fairly opinionated) convention, but makes it clear what are the \"remote\" dependencies of a service and could potentially avoid the \"client\" naming clash...\nUltimately, that package (i.e. client) should contain [client]s for [external]/[remote] [service]s (i.e. any word surrounded by square brackets is, kind of, representative of that package).. @evnm I can honestly tell you that I usually take Dropwizard, Spring Boot and JHipster as reference for widely used conventions but I don't remember seeing this anywhere.\nAnyway, I see your point: introducing a brand new terminology may cause even more confusion than keeping the project-client module and the client package as they are.\nI guess it's all a matter of deciding whether this explicit disambiguation is worth it or not, also bearing in mind that, ultimately, this is just a recommendation.. > I'd think that having com.stripe.stripe-client.* and com.stripe.stripe-app.client could cause confusion even though the terminology is correct.\nMy point too, this is why I ended up using remote as package in the application module.\nBut, as you mentioned, the terminology client for that package is indeed correct, at least from a technical prospective. It is also generic enough such that the package can (potentially) host any client for services the application depends upon (i.e. not only REST over HTTP).\n\nTo me, core sounds like a module used in other modules, library sounds like something that is included as part of a larger whole, and app is something that is deployed.\n\nI feel, and I may be wrong, that core is kind of more suitable (or at least more common) in the context of frameworks rather than applications. While library sounds quite generic (maybe too much?).\nNaming is a tough business indeed! :sweat: . ",
    "stefan-zh": "Proposing this solution: https://github.com/dropwizard/dropwizard/pull/1987. If https://github.com/dropwizard/dropwizard/pull/2161 goes in, I will close this PR. I was looking for an Exception-free equivalent of type.getMethod(\"fromString\", String.class). I am only confused as to in what cases does this occur?. ",
    "maksymgendin": "I think I found how you can reproduce this!\nEnable TRACE level logging for org.hibernate.validator, so the line 108 in org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree gets executed and you get those ClassCastExceptions.. For reproducing you need org.apache.logging.log4j:log4j-core and log4j2.xml on your classpath.\nlog4j2.xml example:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\">\n    <Appenders>\n        <Console name=\"console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %class{36}:%M(%L) - %msg%n\"/>\n        </Console>\n    </Appenders>\n    <Loggers>\n        <Root level=\"trace\">\n            <AppenderRef ref=\"console\"/>\n        </Root>\n    </Loggers>\n</Configuration>. @joschi https://github.com/maksymgendin/dropwizard-error. The only workaround that I know is setting the log4j2 log level for Hibernate validator higher than TRACE.. @joschi Yeah, seems to be fixed in 5.4.2.Final. Thanks for reporting, @nickbabcock!. ",
    "vyaasprashanth": "Even I'm getting the same error when I use log4j2. ",
    "tsheasha": "Hey, any idea when this will be released?. @joschi Any idea when a fix will be ready? Also any advice in the mean time as to how to work around this?. ",
    "TaylorHG": "Is this still being tracked? I'd love to get my logs back.. ",
    "rsb5003": "Apologies for initially forgetting to add that when putting together this test project. But that doesn't resolve the issue. I've updated the project to include it for you to see. \nWhen debugging this problem, I tried several different variations of versions between dropwizard and jetty. In certain cases I'll get a different NoClassDefFoundError. For example if you upgrade to the jetty version to 9.4.2.v20170220, keeping dropwizard at 1.0.7, you'll get the below error. But the only solution I found to resolve all NoClassDefFoundErrors and be able to use the ProxyServlet.Transparent class is to upgrade dropwizard to 1.1\nException in thread \"main\" java.lang.NoClassDefFoundError: org/eclipse/jetty/client/ProtocolHandler\n    at com.comcast.ace.ProxyServerApplication.addProxyServlet(ProxyServerApplication.java:52)\n    at com.comcast.ace.ProxyServerApplication.lambda$addProxyServlets$0(ProxyServerApplication.java:45)\n    at java.util.ArrayList.forEach(ArrayList.java:1249)\n    at com.comcast.ace.ProxyServerApplication.addProxyServlets(ProxyServerApplication.java:45)\n    at com.comcast.ace.ProxyServerApplication.run(ProxyServerApplication.java:40)\n    at com.comcast.ace.ProxyServerApplication.run(ProxyServerApplication.java:17)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)\n    at io.dropwizard.cli.Cli.run(Cli.java:75)\n    at io.dropwizard.Application.run(Application.java:79)\n    at com.comcast.ace.ProxyServerApplication.main(ProxyServerApplication.java:20)\nCaused by: java.lang.ClassNotFoundException: org.eclipse.jetty.client.ProtocolHandler\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 11 more. So I guess my point in this ticket is that if you are using dropwizard 1.0.7, and the compatible jetty version 9.3.9.v20160517 functionality is broken and you can't use the ProxyServlet.Transparent class...\nNot trying to be difficult. Just thought this would be a problem the dropwizard team would want to know about. If there is a solution to this problem, other than upgrading to dropwizard 1.1.0, I'd be interested in learning it. But in the meantime I'll plan on upgrading to 1.1.0 in order to solve this problem.. I have added the jetty-client dependency as you suggested (your last post said 'jersey' which I don't think you meant). That's what I was saying in my first post this morning (along with some admitted irrelevant information). I forgot to add it when I was quickly putting the very basic test project together.\nMy project in the repository posted is up to date, so you should be able to look at that and see the dependencies. If you run that project it will fail when trying to instantiate the ProxyServlet.Transparent class. (located on line 52 of the ProxyServerApplication class).. @joschi I updated my test project with the compile as you recommended. That solved the problem with being able to instantiate the ProxyServlet.Transparent class!\nThanks for you help in looking into this problem! I think my team will likely upgrade to dropwizard 1.1.0 anyway, however this is great to know there is a possible solution while still using dropwizard 1.0.x. ",
    "yoavsreb98p6": "We are using async appenders too. It seems that in 1.2.0 those appenders are not closed as part of the DefaultLoggerFactory.stop method as they used to before, but instead the async appenders just being flushed. This means that command like db that don't set a shutdown hook, don't have a way to stop the async appenders. \nI am able to mitigate this by explicitly calling LoggingUtil.getLoggerContext().stop() in case of DB commands. . ",
    "mmusnjak": "It seems that having fsckobjects = true in my git config exposed this, when removed clone was successful.. ",
    "SenhorCastor": "The library that the debugger is taking me is:\njetty-server-9.4.2.v20170220.jar. For some reason jetty-util was not being correctly imported.\nI added \ncompile 'org.eclipse.jetty:jetty-util:9.4.2.v20170220'\nto my build.gradle and now its working alright.\nNot going to dig much deeper why.\nI got the idea from stackoverflow. ",
    "beautifwhale": "IDE pollution was the problem, the dropwizard-heroku.jar was added as a library to the build path in Eclipse properties. Removing this cleared the above console errors. Thank you both @joschi @arteam for the quick replies. . @joschi This wasnt really a question more of a heads up, but I've moved this to the group.. ",
    "flip111": "@joschi it's not clear what is meant here with \"environment\" and why methods like setDefaultName should go there. I mean \"specifying environment variables\" is a mean to what ends?. ",
    "stefan-kolb": "Why do we need such a configuration anyway? Think about a simple REST API that just returns stuff from JAX-RS resource classes. \nCat resources from /cats\nCat 1 from /cats/1\nFor me it is unclear why I want to pass default values through a configuration class? A minimal example should work without such a configuration class?!. ",
    "gaojun301": "sync to 1.2.0-s. 12. ",
    "janbartel": "If the dropwizard folks need any further help, the jetty team will be happy to answer any questions.. @nickbabcock  not sure why your code isn't working, it looks approximately right to me.  @t-tsutsumi does your code work?\n. @nickbabcock  excellent. And it would be great to have a way to change the scavenge interval via dropwizard setup.. ",
    "orangecoding": "\ud83d\udc4d Thanks!. well, maybe this is a stupid question, but if I set setMaxInactiveInterval to a certain number of seconds, I would expect the session to be destroyed after that time and the eventHandler will be called. At least it was like that before I've updated. Am I wrong? \nThis is what the docu says.\n\nSets the max period of inactivity, after which the session is invalidated, in seconds.. Thanks, I saw this, but the metrics do not appear when I collection the metrics via admin endpoint. Do I have to initialize this somehow by myself? I thought this is done automatically?. \n",
    "BenScholl": "Thanks for the encouragement!\nI don't really understand why AbstractParam puts a Response in the exceptions it raises. This stops them from getting mapped, as ServerRuntime.Responder.mapException doesn't map exceptions that have an entity attached.\nIf instead AbstractParam just wrapped up the error text and status in the WebApplicationException, then LoggingExceptionMapper would be able to handle these exceptions and create the proper response itself.\nNice simple solution ... or am I missing something?. Good point - that would be a much less intrusive approach.\nHere's a ViewEntityMessageBodyWriter (suggestions for better names welcome...)\nhttps://gist.github.com/BenScholl/e8568e59078565337f90a2e4d709d489\nYou just register separate instances to handle ErrorMessage and ValidationErrorMessage and it intercepts the appropriate responses. No need to mess about with AbstractParam and exception mappers.\nI imagine most people using views would want this. Is it worth me putting together a pull request for dropwizard-views?. I think this won't affect most Dropwizard apps, unless they specifically set objectMapper.enableDefaultTyping() or do funky things with e.g. @JsonTypeInfo.\nAt least that's my understanding after reading the excellent paper at https://github.com/mbechler/marshalsec\nFor reference: https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization. I don't think it is a big deal either way.\nHowever, just looking at the Alexa top 5:\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -H 'Accept-Language:;' http://www.google.co.uk\n200\n\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -H 'Accept-Language:;' https://www.youtube.com\n200\n\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -H 'Accept-Language:;' https://www.facebook.com\n200\n\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -H 'Accept-Language:;' https://www.baidu.com\n200\n\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -H 'Accept-Language:;' https://www.wikipedia.org\n200\n\n. Fair point - that is a bit misleading for anyone reading the test. I'll add some tags to make clear that it's HTML.. Totally agree. That's the same reason I'm injecting HttpHeaders here instead of just using the mediaType from the method parameters.\nIt would be nice to get rid of the hard coded application/json references at some point, but of course that affects all the parameter classes as well as the exception mappers ... and with my limited DW knowledge I have no idea what it might break.... ",
    "dbaronster": "With log level increased, I found that it was a ClassNotFound error on RuntimeExecutorsBinder$BackgroundSchedulerLiteral. Fixed by adding to pom:\n<dependency>\n  <groupId>io.dropwizard</groupId>\n  <artifactId>dropwizard-jersey</artifactId>\n  <version>1.1.0</version>\n</dependency>. No, that was premature. I'm still getting FAILED org.eclipse.jetty.server.Server@46147496: java.lang.NoClassDefFoundError: org/glassfish/jersey/server/internal/RuntimeExecutorsBinder$BackgroundSchedulerLiteral\npom.xml has:\n<dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-core</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-client</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-assets</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-http2</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-testing</artifactId>\n            <version>1.1.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-auth</artifactId>\n            <version>1.1.0</version>\n        </dependency>\nI've tried removing dependencies to no avail.. Solution was here: https://github.com/smoketurner/dropwizard-swagger/issues/67\n. ",
    "cwagnello": "I know this issue is closed but how is anyone supposed to know that they need to add a TeeFilter? Or is this fixed in newer versions of Dropwizard?. I'm not sure. I don't see much in the Jetty logging docs about what gets logged.. ",
    "lightswitch05": "@joschi I made the requested changes, let me know if it needs more work. @ashishs you might be interested in my work-around. It isn't the most straightforward solution, but it works nicely and should be fairly resistant to future Dropwizard changes\nFirst, create an AuditLogger class:\n```java\n/\n * AuditLogger is a wrapper around a standard SLF4J logger specifically for AUDIT logs.\n * Since SLF4J does not allow for custom log levels, it works by adding a AUDIT marker\n * to all log messages. Log message are created under the ERROR level logs.\n \n * @author Daniel White\n /\npublic final class AuditLogger {\nprivate static final Marker AUDIT_MARKER = MarkerFactory.getMarker(\"AUDIT\");\n\n@SuppressWarnings(\"PMD:LoggerIsNotStaticFinal\")\nprivate final Logger logger;\n\nprivate AuditLogger(final Class<?> clazz) {\n    logger = LoggerFactory.getLogger(clazz);\n}\n\npublic static AuditLogger getLogger(final Class<?> clazz) {\n    return new AuditLogger(clazz);\n}\n\n/**\n * Create an AUDIT log with a string message.\n *\n * @param message the message string to be logged\n */\npublic void log(final String message) {\n    logger.error(AUDIT_MARKER, message);\n}\n\n/**\n * Log a AUDIT message according to the specified format and arguments.\n *\n * @param format    the format string\n * @param arguments a list of arguments\n */\npublic void log(final String format, final Object... arguments) {\n    logger.error(AUDIT_MARKER, format, arguments);\n}\n\n}\n```\nNext, create two filter factories AuditExcludeFilterFactory &AuditOnlyFilterFactory`:\n```java\n/*\n * Creates a filter factory to exclude AUDIT logs. Use this filter\n * for appenders that should not contain AUDIT logs.\n /\n@JsonTypeName(\"audit-exclude-filter-factory\")\npublic class AuditExcludeFilterFactory implements FilterFactory {\n    private static Filter auditFilter = new Filter() {\n        @Override\n        public FilterReply decide(final ILoggingEvent event) {\n            Marker marker = event.getMarker();\n            if (marker != null && \"AUDIT\".equals(marker.getName())) {\n                return FilterReply.DENY;\n            }\n            return FilterReply.NEUTRAL;\n        }\n    };\n@Override\npublic Filter<ILoggingEvent> build() {\n    return auditFilter;\n}\n\n}\n```\n```java\n/*\n * Creates a filter factory to only accept AUDIT logs. Use this filter\n * for appenders that should only contain AUDIT logs.\n /\n@JsonTypeName(\"audit-only-filter-factory\")\npublic class AuditOnlyFilterFactory implements FilterFactory {\n    private static Filter auditFilter = new Filter() {\n        @Override\n        public FilterReply decide(final ILoggingEvent event) {\n            Marker marker = event.getMarker();\n            if (marker != null && \"AUDIT\".equals(marker.getName())) {\n                return FilterReply.ACCEPT;\n            }\n            return FilterReply.DENY;\n        }\n    };\n@Override\npublic Filter<ILoggingEvent> build() {\n    return auditFilter;\n}\n\n}\n```\nFinally, configure your Dropwizard log appenders to use the Audit filters:\n```yml\nlogging:\n  loggers:\n     level: ERROR\nappenders:\n    - type: console\n      filterFactories:\n        - type: audit-exclude-filter-factory\n    - type: console\n      # This format is exactly the same as the default format, except that it uses the marker (AUDIT) instead of the log level (which is ERROR for audit logs)\n      logFormat: \"%-5marker [%d{ISO8601,UTC}] %c: %m%n%rEx\"\n      filterFactories:\n        - type: audit-only-filter-factory\n    - type: file\n      currentLogFilename: logs/my-api.log\n      archivedLogFilenamePattern: logs/my-api-%d-%i.log.gz\n      maxFileSize: 100MB\n      filterFactories:\n        - type: audit-exclude-filter-factory\n    - type: file\n      currentLogFilename: logs/my-api-audit.log\n      archivedLogFilenamePattern: logs/my-api-audit-%d-%i.log.gz\n      maxFileSize: 100MB\n      logFormat: \"%-5marker [%d{ISO8601,UTC}] %c: %m%n%rEx\"\n      filterFactories:\n        - type: audit-only-filter-factory\n```\nYou also have to setup a META-INF entry for the log filters. See Logging Filters\nThis allows AUDIT logs to be created - matching the default Dropwizard format. By defining a special logFormat that uses the AUDIT marker instead of the log level, it appears as an AUDIT level log in the logs & console, vs. an ERROR level - which is how it is implemented. Setting it to be ERROR level ensures the AUDIT level logs are always created. I tried to make them INFO level logs with a filter factory to always include them, but it looks like Filter Factories are only used if the log level is already included. An INFO level log with the threshold set to ERROR never makes it to the Filter Factory to determine if it should be included or not.. I missed that one, editor added it automatically. . ",
    "anujkumar04": "issue still exist after adding @Valid \njava\n   @POST\n    public Person sayHello(@Valid @Validated(TestValidated.class) @NotNull Person person) {\n        String name = person.getName(); // get a NPE\n        return new Person(\"test\", \"test@test.com\");\n    }. I commented that line but still have the same issue. I noticed that if I do not specify any group class it works, so\n@Valid @Validated @NotNull : works\n@Valid @Validated(TestValidated.class) @NotNull : does not work\njava\npublic interface TestValidated {\n}\nI am using:\nxml\n  <dependencies>\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-core</artifactId>\n      <version>1.0.5</version>\n    </dependency>\n  </dependencies>. 1.1.x does not solve this issue\nadded a failing test case #2052. thank you that works, you may discard/close the pull request. ",
    "dllx": "Thank you! That's another incentive for us to upgrade our Dropwizard version.\n(Simply changing the logback version via pom dependencies does not work, alas.). ",
    "davidinjc": "Thank you for posting this, helped us zero in on why the interrupted flag was getting reset!. ",
    "mi5c": "Hi @nickbabcock thanks for looking into this. Seems the setting the file encoding on jvm via\n-Dfile.encoding=UTF8 or -Dfile.encoding=UTF-8\nwon't help, the log line will become\nINFO [date] [logger] - <C3><A4>\nwhich is a bit better, but I think a PR for the LayoutWrappingEncoder is still needed.\nI have added a task for myself to investigate whether this fixes the issue.\nThanks again for your help!\n. ",
    "ruslander": "@nickbabcock here is how my config looks like \nserver:\n  requestLog:\n    appenders:\n      - type: console\n      - type: file\n        currentLogFilename: /var/log/application.log\n        archive: false\n        timeZone: UTC\n  applicationConnectors:\n    - type: http\n      port: 8080\n  adminConnectors:\n    - type: http\n      port: 8081\nwhat I want is to disable that particular logger or filter out that line. ",
    "pehala": "No, I need to check User which is being sent, not User who is sending it. User who is sending can be ADMIN, but can send normal User in request.. Your example will work and is not what is causing the problem. To make it not work you have to persist User to DB and refer it only by ID, which is enough to save him, like this.\njava\n@Path(\"/\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class TestResource {\n    @POST\n    public String secret(@NotNull @Valid SecretProject project) {\n        return \"\\\"Success\\\"\";\n    }\n}\n```java\npublic class SecretProject {\n    private ProjectUser user;\n@JsonProperty\npublic ProjectUser getUser() {\n    return user;\n}\n\n@JsonProperty\npublic void setUser(ProjectUser user) {\n    this.user = user;\n}\n\n@ValidationMethod(message = \"Only admin can have SecretProject assigned.\")\npublic boolean isUserAdmin() {\n    return user.getRoles().contains(\"ADMIN\");\n}\n\n}\njava\npublic class ProjectUser {\n    @Id\n    private Long id;\nprivate Set<String> roles;\n\n@JsonProperty\npublic Long getId() {\n    return id;\n}\n\n@JsonProperty\npublic void setId(Long id) {\n  this.id = id;\n}\n\n@JsonProperty\npublic Set<String> getRoles() {\n    return roles;\n}\n\n@JsonProperty\npublic void setRoles(Set<String> roles) {\n    this.roles = roles;\n}\n\n}\n``\nNow there will be problem, you don't have to send whole definition of User, you can send just this.curl -d '{ \"user\": { \"id\": 1 } }' -H 'Content-Type: application/json' http://localhost:8080`\nYou can also trick @ValidationMethod by sending User with different Roles than he has in DB, for example User(id = 1) with only Manager role can be sent like this and Validation will pass.\ncurl -d '{ \"user\": { \"id\": 1, \"roles\":[\"ADMIN\"] } }' -H 'Content-Type: application/json' http://localhost:8080\n. Thank you, sadly lazy loading doesn't work because problem is that object is not fetched from Database at all.\nI think there should be annotation like @FetchFromDB which would replace all associated entities from request body with actual entities from Database.. ",
    "jottinger": "The Jersey code wouldn't compile for me. I have dropwizard-core and dropwizard-testing included as project dependencies; does that not include dropwizard-client? If it does, then the JerseyClientBuilder code is, from the best I can tell, out of date.. ",
    "novaterata": "Just my 2c,, The client created using JerseyClientBuilder and RULE.environment actually works with the intended jackson configuration. The client from RULE.clent() seems to ignore the environment completely. So, maybe explaining the difference and use cases would help.. Really, I just want to know the recommended way of including HATEOAS links to resources in entities. We have singleton resources in a nested topology that is incompatible with stuff like JSON.API that require everything to be a collection of stuff with ids. I'm frankly baffled that my problem is so unique. I did try just registering on the main jersey(),  thanks for the debug tips\nOn Wed, Jan 24, 2018, 5:23 PM Artem Prigoda notifications@github.com\nwrote:\n\nHm, I don't think you need to enable scanning for the package where the\nrepresentation class is located.I think you can just enable\nDeclarativeLinkingFeature on the resource config returned by\nenvironment.jersey(). If Jersey still doesn't pick up the annotation, I\nwould point breakpoints to ResponseLinkFilter and HeaderProcessor and run\nthe app in the debug mode. Maybe there's some issue in annotation scanning\nfor classes generated by the Kotlin compiler.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2252#issuecomment-360294054,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABlGHQYBB850Kb_OpS4NCkJlgdRxaT2Uks5tN61WgaJpZM4RrYoZ\n.\n. The problem was the use of DeclarativeLinkingFeature::class instead of DeclarativeLinkingFeature(), for some reason using either a KClass or adding .java and getting the Class does not register the feature. Only passing the feature as an instance works.. Kotlin user and OP. I am still experiencing this.\n\nOn Thu, Jun 14, 2018, 7:32 PM Nick Babcock notifications@github.com wrote:\n\nExcellent, Java 10 / Kotlin users, let us know if you're still\nexperiencing this warning with v1.3.3.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2307#issuecomment-397468962,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABlGHYIXYm3HvzCTX2PGCtmLlcSbOjiQks5t8vKfgaJpZM4SpTfo\n.\n. dropwizard-2307.zip\n@joschi Finally got around to creating a repo project. Just run with gradlew run and you'll see the warning in the logs. @joschi Thanks, I'll try it. So, In addition to the use of  covariant Generics (in keyword) causing this in Kotlin, The use of functional type, e.g. K -> V, (UriInfo, String) -> URI, etc. , Will also result in the warning. I got around this by replacing my injected functional interfaces with explicit interface implementations. It's ugly, but a simple workaround. I'll close for now even though it still seems like a bug somewhere.. Right, I just mean it's a bug somewhere, not necessarily dropwizard/jersey,\nbut maybe Kotlin. Either way it's warning about something that doesnt seem\nto matter since it works just fine either way. At least we have a\nworkaround which is good enough for me.\n\nOn Wed, Jun 20, 2018, 1:19 PM Jochen Schalanda notifications@github.com\nwrote:\n\n@novaterata https://github.com/novaterata I'm not sure it is a real bug\nand not some incompatibility between the Java and the Kotlin type systems\n(generics). With Jersey being a Java framework without explicit support for\nKotlin, that might pose a problem.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2307#issuecomment-398829073,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABlGHRDgSz_Ge1LEAgJXejsvOtCUJpc4ks5t-oQggaJpZM4SpTfo\n.\n. Can't repro now.. Looks like it's the adminContextPath. I didn't realize I would need to configure both the ingress controller and each service to know about the path, I just thought the ingress controller would handle that somehow.. Actually adminContextPath still didn't work with ingress secondary path. @joschi This is not a bug with dropwizard I don't think, I just assumed someone else has surely used dropwizard with an ingress controller on a path other than / and might have some insight on how to get routing to work in that environment. The ingress-nginx community refuse to answer in anyway other than just links to the same documentation I've read a hundred times and is essentially gaslighting me. So, I posted here out of desperation, but to tell the truth, I no longer need this functionality as we decided not to expose the admin service. I'm closing the issue and hopefully someone else solves the problem at a later date. I'm tired of thinking about it.. There is a simple workaround: Don't use default parameters (e.g. @QueryParam foo: String? = null) in controller methods. Since null can be treated as default this shouldn't be a blocker for anyone.. \n",
    "mrwilby": "Also perhaps this is a better question for the mailing list. Hmm. ",
    "agyan2": "We have been setting both timeout and connectionTimeouts. The problem which i see is that during SSL handshake, if the backend goes down, timeout is not terminating the connection.\nOn researching, saw this issue reported in HttpClient, and possible change in the usage, per the last comment on the thread.\nhttps://issues.apache.org/jira/plugins/servlet/mobile#issue/HTTPCLIENT-1478\n. ",
    "raynorchenfr": "@nickbabcock Thanks!. ",
    "pipiliang": "I tried, still same error,  dw version is 0.8.0.\nimport org.glassfish.jersey.media.multipart.MultiPartFeature;. Sorry to answer so late, for some reason can not switch to the newer version, so only by adding MultiPartBundle to solve it. ",
    "FredDeschenes": "I've found a way to get this to compile in both Eclipse and IntelliJ, currently running the tests to see if everything is still good (although it shouldn't change anything at runtime). I'll send a PR if everything still works.\nEDIT : PR here : #2095 . I'd say Java generics are weird ;). The parametized test just tells JUnit to create multiple instances of the test, using the values provided by the @Parameters as constructor arguments for the instance. For GenericsTest, this means that 6 instances of the test are created, being fed by the data returned by the GenericsTest::data function.\nThe issue itself has nothing to do with this though, it's just \"ye olde Java generics\" acting differently depending on which compiler is used. In this case, Generics::getTypeParameter(Class<?> klass, Class<? super T> bound) expects bound to be a Class<? super T>, but in this case, the IntelliJ compiler was seeing bound as a Class<?>, which at runtime would make no difference (as Java generics aren't reified and the T itself isn't really relevant for getTypeParameter), but in theory could cause some troubles, so the compiler wouldn't let it go through.\nWe used to get weird issues like this at work a couple of years ago when some people used Eclipse and others used IntelliJ. Usually, Eclipse's compiler is the one that \"whines\" the most about those issues, this one just happened to annoy IntelliJ's compiler instead.\nTLDR : As I mentioned above, Java generics are weird, and the tiny differences in how the different compilers handle them are annoying (considering that most of the time, it makes absolutely no difference at runtime).. Coverage went down because this line is unreachable but needed for compilation (since Throwables.propagate is now deprecated). Not much I can do I think.. No problem, I was looking at the code for CachedAuthorizer and CachedAuthenticator and noticed the authorizer hadn't been updated.\nI've pushed a new commit with the modification to the unit test.. You're welcome!. I agree that this shouldn't return a server error, but I don't agree that the error should just be ignored and the default language used.\nIMO, a 400 - Bad Request should be returned and the client should either not send the header, or send a properly formatted one.. Weird, I would've thought that most sites wouldn't let this go through.\nI've also thought about having a configuration, but the views configuration is just a Map. We could have an overrideable function in \"ViewBundle\", but that's a bit weird. Also I think the feature is only available in Freemarker and not in Mustache, which makes this even trickier to configure.. After a quick look at this, it seems that most of the usages of @MinDuration could be replaced by a @NonZeroDuration annotation. IMO it doesn't really make sense to enforce minimum durations for most of those configurations (even though it might not be a good idea to have a specific setting this low, it should still be the user's decision), especially those 4 ones in DataSourceFactory that have their minimum set to one second (maxConnectionAge, maxWaitForConnection, minIdleTime and validationQueryTimeout).\nI'll go ahead and make a PR for this later this afternoon/tomorrow.. Good idea, but that seems like a different issue.\n2130 is about some @MinDuration values being set to pretty high values when all we want to validate is that a duration was actually set. We could of course not add the @PositiveDuration and just make sure the values in the @MinDurations are set to low enough values.. Yeah I guess it does make sense, just might be a little harder to get what's going on when reading the annotation.\nAnyway I've added the exclusive mode to MinDuration and MaxDuration, should I modify MinDuration usages to be something like @MinDuration(value = 0, unit = TimeUnit.NANOSECONDS, exclusive = true)?. I switched 'exclusive' to 'inclusive'.\nAs for displaying the operator, I can either add them to the current text or replace words by them (ex: \"greater\" -> \">\"), but since the message is in an annotation it needs to be constant so we can't change the message depending on the mode.\nAs for the original issue of the @MinDuration annotations, there's around 30 of them but #2130 was specifically for the ones in DataSourceFactory so 7. I'll create another PR once this is merged and you decide on what the minimum value should be.. I fixed those conflicts this morning in 3b8413d, everything says there's no conflict anymore on my side (\"This branch has no conflicts with the base branch\"), is it showing you conflicts?. Thanks, I'll go ahead and make another PR to actually fix #2130 !. Looks like we'd just need to separate the renderable template extensions from the configuration key used in ViewBundle (getSuffix would become getConfigurationKey or something like that).\nOnly issue I have is that it would now be weird to configure FreeMarker with the .ftl key when you might be rendering other file formats as well. We could change the configuration keys to be the name of the engine (ie: freemarker and mustache, which I think makes more sense anyway), but this would break compatibility. Any thoughts on this?. The configuration key change could also just be done for the next major version. It's weird, but it works and isn't really a big deal.\nAs for the configurable file extensions it would be pretty hard to implement cleanly with the current configuration setup for view renderers (the configurations just being maps that can have any value, although Mustache seems to only have 2 configurable options (but I'm not familiar with Mustache so I might be mistaken)). Would definitely be a good feature to have though.. @arteam : This works but we risk having people overwriting their configuration if they decide to have let's say a .ftl key and a .ftlh key (whichever is second in getSuffixes would take precedence). We could also just document it properly if you think that's enough (most people would probably never run into this \"issue\" anyway).\nWe could also have FreemarkerViewRenderer.configure log a warning that the configuration is being set twice or attempt to merge both configs.. After reading a bit more about these extensions in Freemarker's documentation (here and here), it seems that the feature requires Freemarker >= 2.3.24, whereas Dropwizard uses 2.3.23 (which seems like it's the latest version before it became an incubating Apache project, but is over 2 years old). Should I take this opportunity to update to the latest 2.3.27-incubating version (everything appears to be working at first glance after the update)?. Alright I'll go ahead and look at this this afternoon.\nJust to recap:\n- Update Freemarker ~~and Mustache~~ to latest version~~s~~ (nevermind, Mustache is already at the latest version)\n- Change getSuffix to getConfigurationKey (with mustache and freemarker as keys)\n- Use regexes in isRenderable to match file names\n- Update documentation\nAnything else I missed?. Yeah that's what I figured, thanks for the quick fix!. @isaki-x : Will do.. I validated that all Dropwizard-specific mappers are now not required as they are either supported out of the box by jDBI or one of its plugins (Joda or Guava). Should we include those plugins by default or just document that they exist and should be added if required by the project?. I added the JodaTime and Guava plugins and also added the jDBI3-bom to Dropwizard's bom, but I'm not super used to Maven, just make sure I haven't messed up the dependencies to everything else ;). Concerning the documentation, I thought about having a new 'JDBI3' page with updated documentation content (although it's going to be pretty similar) and flagging the 'jdbi2' page to tell new projects that they should use the new 'jdbi3' module but existing projects can update at their discretion. Sounds good?\nEDIT: I'll also update the paths in the JDBI2 docs as some of them are now broken.. Thanks for the quick merge @joschi :P. Don't know if this is still relevant, but you could write your own AuthFilter. The authenticate method gives you access to the ContainerRequestContext which has the URIInfo.\nBut why not just use an authorizer?. Should be good now.. Ah I look at the release notes for 2.27 and 2.28, that explains it. Thanks!. Oh that's nice, I didn't even know it existed! I'll change this and update the PR.. Removed 'this'. Turns out ExtensionMethod has requireNonNull for type and method (which couldn't really be null anyway) so I'll remove those unnecessary checks as well.. Yeah the joys of file paths on Windows with Git... I'll rename those properly.. Yeah this was copied from the DBIHealthcheck in the jdbi2 module, I'll convert them.. Test added. Yeah I could keep it private and send it as an argument to buildSQLLogger.. Yeah I wasn't sure about adding that since it looks like you're removing Guava. Should I use the one in com.google.common.annotations or io.dropwizard.logback.shaded.guava.annotations?. ",
    "imochurad": "My version of DW is 1.0. Personally, to fix this problem I have copied dropwizard's ConstraintMessage and removed caching part from it and I'm using that class instead of the one that framework provides.\nI should mention that my ConstraintMessage is invoked in my custom exception mapper that extends  ExceptionMapper<JerseyViolationException>.. ",
    "ollifer": "I have similar issue. \n@StringEnumeration(enumClass = ComparisonOperator.class)\n    private String operator;\n```\npublic class StringEnumerationValidator implements ConstraintValidator{ \n....\n@Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        if (!AVAILABLE_ENUM_NAMES.contains(value)) {\n            String message = String.format(\"%s is invalid. Valid values are: %s\", value, AVAILABLE_ENUM_NAMES);\n            context.disableDefaultConstraintViolation();\n            context.buildConstraintViolationWithTemplate(message).addConstraintViolation();\n            return false;\n        }\n        return true;\n    }\n```\nI always get the same error message that was generated at the first time, regardless of new constraint message value.\nPlease take a look at ConstraintMessage.MESSAGES_CACHE. Probably it invalidates cache in wrong way. > Ah, I see, it's a custom annotation. Adding the invalid value to the violation message would defeat all caching attempts. I'm torn \ud83d\ude15\nUnfortunately no, invalid value is cached at the first time and further values cannot be appeared.\nMaybe problem exists only with custom annotations.\nMy workaround is to define own  ExceptionMapper<JerseyViolationException>.\n. ",
    "stringy05": "It's not directly related so I will put it into a second PR. Basically I\nwas trying to use the Retry Strategy to inject a NTLM token when a 407 is\nreceived from the Proxy. I'd added it to the docs, however took it out as\nIt works but is pretty unreliable\nOn 28 June 2017 at 23:11, Nick Babcock notifications@github.com wrote:\n\nThank you for an awesome pull request \ud83c\udf89\nSomething that isn't obvious to me is how ServiceUnavailableRetryStrategy\nis related to NTLM authentication. If not required, it may be prudent to\nbreak that into another PR so those changes can be more easily digested and\nreviewed.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/pull/2091#issuecomment-311655352,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGqxwHDecRI8KPdW9-Ll2uhPbND2U7Wcks5sIlENgaJpZM4OHdDx\n.\n. I'll do that tonight. I'll make it work the same way as the\nHttpRequestRetryHandler, where it only actually takes effect if the retries\nis > 0\n\nOn 5 July 2017 at 04:50, Artem Prigoda notifications@github.com wrote:\n\nAfter #2091 https://github.com/dropwizard/dropwizard/pull/2091 is\nmerged, we could add support for ServiceUnavailableRetryStrategy.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2093#issuecomment-312934381,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGqxwN5PMoBlm92B9xXrEkqZcJAVjWoSks5sKoldgaJpZM4OJOx5\n.\n. Hi Patryk\n\nI had actually done this change but hadn't finished the doco. I think I'd\nadded some changes to another class as well, maybe the JerseyClientBuilder\nYep, here's the commit:\nhttps://github.com/stringy05/dropwizard/commit/18906dd087f36fc201597ec2891bac515795a687\nI'd also started updating the documentation as well, might want to add that\nas well\nCheers\nBrock\nOn 26 October 2017 at 07:55, Patryk Najda notifications@github.com wrote:\n\n@stringy05 https://github.com/stringy05, @arteam\nhttps://github.com/arteam I have created a PR adding support for\nconfiguring the ServiceUnavailableRetryStrategy while using either\nHttpClientBuilder, or JerseyClientBuilder.\nCould you please have a look ? #2185\nhttps://github.com/dropwizard/dropwizard/pull/2185\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2093#issuecomment-339468326,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGqxwKwNYURExEOpFEB4El2kTHWvTxvAks5sv6A5gaJpZM4OJOx5\n.\n. \n",
    "izrobin": "Well do'h confusing me... Sorry! And thanks!. ",
    "dsKarthick": "@mattnelson Thanks for pointing me to https://github.com/dropwizard/dropwizard/pull/1965. Maybe you are already aware but just to be clear https://github.com/dropwizard/dropwizard/pull/1965 fixes DefaultServerFactory.java, not SimpleServerFactory.java\nRegarding bitly, I hate long urls. But I guess we don't really need shortening here as Github itslelf does shortening. . ",
    "tmszdmsk": "@petr-bazant but aren't servlet filters completely isolated from Jersey context? I believe they share nothing.. I consider writing a test for that. What are your suggestions in the context of test level & packaging?. @joschi, @lutzhorn \nMy use case:\nI have dropwizard-auth set up to do authentication in Priorities.AUTHETNICATION = 1000  phase (by extending AuthFilter.java#L16). \nI have another filter that requires authentication data to be present in SecurityContext. It is marked with Priorities.AUTHORIZATION = 2000.\nIt works completely fine unless I wrap Principal-like object in Optional wrapper. Because of that my filter is wrapped in WebApplicationExceptionCatchingFilter. It has no Priority annotation, hence executes in default Priorities.USER = 5000 phase. \nIn the result, my filter fails because authentication is performed later.\n@joschi \n\nYou could write a resource test for this which triggers an exception. See http://www.dropwizard.io/1.1.4/docs/manual/testing.html#testing-resources for details.\n\n\ud83d\udc4d . @joschi @lutzhorn \nI've committed a test that shows how my use case looks like (https://github.com/dropwizard/dropwizard/pull/2138/commits/30f8cd8822c818b89f862df477c323179579a2c2).\nOn master only one of them passes.. ",
    "fgsilveira": "Thanks for your feedback and workaround Scott! I will test this in a few minutes.\nDo you see any possibility of \"fixing\" this in a better way? Or maybe this is a feature request?!\n. Hi Artem,\nYes, I receive the error message from subject when using this configuration. I tried /api, /api/ and /api/*, nothing changes. As I said on the first message, I don't much experience, all I can say is what I did and what I've tried already. . Yes Artem, it works, so maybe it was a confusion from my part, because by following the \"Hello World\" example and creating hello-world.yml I thought config.yml was only related to framework configurations, not directly related to the application itself. \nI'm sorry for all the noise, can you please evaluate if the documentation of the example could be improved in that sense?. ",
    "carldowns": "https://groups.google.com/forum/#!msg/dropwizard-user/a_jNCLE7oXM/J4B-R_FlYcEJ\nThe above works.\nRecommend changing the rootPath to include a \"/*\" wildcard to match any Resource's @Path:\nserver:\n    rootPath: /api/*\n. ",
    "mlinsky": "Is this still needed? Is @UnitOfWork still not working?. ",
    "vogtb": "Yeah, this is still broken.. ",
    "swagle": "This change is missing in the 1.2.x line. Hit this issue when trying to use this feature on 1.2.0 bits published to maven central.. Hi @joschi, you are right the patch is present, this breaks at io.dropwizard.Application#bootstrapLogLevel. ",
    "jdimeo": "I must be missing something because I just pulled down 1.2.0 from Maven Central today in eager anticipation of this PR, and the source code for Application.java has import ch.qos.logback.classic.Level; and APIs that reference Level thus triggering indirect class not found compilation errors when I try to use Log4j. \nI thought I was correctly following the instructions given in #1900 to exclude logback classic, and in reviewing the diffs, references to Level have been replaced with a String. So is it correct that Application still uses Level and seems to require logback classic?\nThe SHA1 of the sources.jar I pulled down for core is 2c35bff8aeb55631cfd21cbe9c021c4d60b9e4df. So, to be more precise, you are correct in that I can get a clean compile with javac (specifically mvn clean compile). However, my IDE (specifically Eclipse) is fooled (or too smart for its own good, depending on how you look at it). See:\n\nThat prevents me from running my service through the IDE (or once compiled into a runnable jar/executable).\nThank you for the demo app! A skeleton app is worth a thousand words.\n. ",
    "rvsasseen": "After a lot of googling, I found that there are further server config settings (\"external\", etc) needed which are described at https://www.dropwizard.io/1.3.5/docs/manual/core.html#logging. Edit: Actually, they're already listed at https://github.com/dropwizard/dropwizard/pull/1900, but they were not official at that point in time. Edit: They're also in the dropwizard-nologback demo code mentioned above, in the example.yml file.. Thanks for taking a look. I am currently trying to work around this by making a separate project for this and having it use logback, instead of including it in my main project which uses log4j2. I hope to get back to this specific problem later. . ",
    "msymons": "I managed to do a PR that included a lot of commits that were not intended.. I managed to do a PR that included a lot of commits that were not intended.. The linked issue had a 2.8.10 milestone added on 21st June 2017 and I see that @joschi has already added a request there for a 2.8.x bugfix release.  So, watch for that bugfix and then Dropwizard 1.1.x can be updated.. @joschi, per your advice in #2595 I have upgraded dropwizard to 1.3.x\nNow that I have done that I am also very interested in knowing when 1.3.9 might be released.\nI do have one question about 1.3.9.  Will it use slf4j v1.7.26?  This has been updated for the 2.0.0 branch via #2652.  The reason why this matters is that v1.7.26 addresses CVE-2018-8088\nI see from #2578 that this is a false positive for dropwizard.  However, using 1.7.25 does give threat warnings when projects that use dropwizard are analysed.... far easier to just use 1.7.26.\n(Should I log an issue/PR?). @joschi, will v1.2.x branch also be updated to use Jackson 2.9.8 (and remove custom deserializers)?\nThe usage of jackson v2.9.6 results in vulnerability alerts in analysers such as Dependency-Check, which then need to be suppressed.\n. ",
    "amr": "I've deemed my attempt at delegating session creation to HK2 to be incompatible with Dropwizard Hibernate bundle and doesn't really allow making use of its features such as @UnitOfWork. I have abandoned this approach/pattern. Closing.. ",
    "smifun": "I changed  build method which creates DBI to return DBI instead of IDBI and it works. Didn't expect that it would be that simple. Thanks.. ",
    "namannigam": "@arteam Assuming that the default response is gzipped from dropwizard. Even if I include the Accept-Encoding:gzip header. I don't get back a Content-Encoding:gzip in the response headers. \n\nWhy your custom filter doesn't work is not clear, maybe your filter is executed before the Jersey servlet and it rewrites the header.\n\nDo you see any such changes from the shared code? Since we had not intentionally overridden the headers. Just wanted to set the value as such.. > How big is your response? By default responses less than 256 bytes are not compressed. Also, only GET methods are compressed by default.\nApproximately 150KB. Using both GET and POST. Have tried enabling using \ngzip:\n     enabled: true\n     minimumEntitySize: 256B\n     bufferSize: 32KB\nStill, won't work for me.\nWould debug the FilterChain further for this. Thanks.. Update - The additionally added ResponseHeader doesn't seem to be working but the default Response Headers from Dropwizard works fine. \nOur bad, the size we compared this against was the formatted content's size on Chrome. The raw content-length(size) pointed us to the correct metrics.\nClosing this. Not an Issue.. @keirlawson Could be related to https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j. ",
    "debraj-manna": "hibernate-validator 5.4.x has security vulnerability CVE-2017-7536 . Is there any plan to upgrade it in 1.2.x and 1.3.x also? . @joschi Shouldn't then javax.el show up in the dependency tree ? I am not seeing any javax.el in the dependency tree. . Thanks @joschi . \nIt was coming from javax.servlet.jsp:jsp-api from hadoop-common. I just printed the class path info\nClassLoader cl = this.getClass().getClassLoader();\nString classAsResource = ExpressionFactory.class.getName().replace('.','/') + \".class\";\nEnumeration<URL> urls = cl.getResources(classAsResource);\nSystem.out.printf(\"Looking for: %s%n\",classAsResource);\nwhile (urls.hasMoreElements())\n {\n      URL url = urls.nextElement();\n      System.out.printf(\"Found: %s%n\",url.toExternalForm());\n }. Can you please let me know how to mark request logging as external ? I have not specified anything related to request logging in my configuration.\n. Adding the below in configuration.yaml solved the issue\nserver:\n    requestLog:\n        type: external. Anyone any thoughts on this one?. @arteam - This will be available in which release? \nIs there any workaround for this now?. Thanks @arteam . Any idea when can we expect to have 1.3.2 released?. @arteam - Will it be possible to port the same fix to 1.2.6 ?. @nickbabcock @arteam - In which version this fix is available? Is there any workaround for this now?. @arteam - Will this be in 1.3.2 and 1.2.6 also ?. Thanks @arteam . @arteam - I can see 1.2.6 tag. Any idea when can we expect the release?. Thanks @arteam the new releases 1.2.6 & 1.3.2 are showing up I missed it.. I took a thread dump when the upload was stuck.  Below is the link\nhttps://gist.github.com/debraj-manna/20b62dd3cbc9e7badb05fdb01e513fcd\nIn stack trace POST /management/upgrade/uploadbundle is the api in context.\nThis does not look like an issue in jetty as discussed here\nhttps://www.eclipse.org/lists/jetty-users/msg08629.html . Can the same change be done for 1.2.x branch? Below is the issue for upgrading jetty-server to 9.4.12 in 1.2.x release\nhttps://github.com/dropwizard/dropwizard/issues/2495. Thanks @arteam .\nIf you can provide us some idea by when can we expect the minor 1.2.x release with Jetty 9.4.12 or 1.4. It will really help us. . @arteam - Can we reopen this issue?. > Is there any further update on either the 2.0.0 release date or a potential 1.4. update with jetty 9.4.12?\nI am also interested to know the same.. @arteam - Any idea when can we expect a 1.2.x release with Jetty 9.4.12 ?. @joschi - 1.3.8 is using jetty 9.4.11. Any idea when can we expect 1.3.9 to be released ?. @joschi - Any idea when can we expect dropwizard 1.3.9 ?. ",
    "mszabo-wikia": "Leaving a note here that this is blocked by https://github.com/eclipse-ee4j/jersey/issues/3871 on Jersey side (as per https://github.com/dropwizard/dropwizard/pull/2298 conversation), so that nobody starts working on it prematurely :). Eclipse has not yet released Jersey version 2.28, which will be the first Jersey version published under the Jakarta EE umbrella and which will include this upgrade. Likely it will happen soon, as there's some ongoing work in their repo related to that.. @nickbabcock Thanks for the quick response.\nFrom a quick glance around there - it seems Validators.newValidatorFactory would provide us with a ValidatorFactory correctly configured with Dropwizard's Hibernate etc. settings. Then it could be invoked in a Jersey context, overriding ConstraintValidatorFactory with Jersey's implementation. What do you think?. Yes, Guice \" Swiss army knife\" Provider injection works for this case :). ",
    "twbecker": "Is this still planned for 2.0? We've been using 6.x for some time in non-dropwizard apps and it's a substantial improvement.. ",
    "usulkies": "HI, I'm working on the upgrade to hibernate validator 6.0.14.Final along with the new jersey 2.28 in my fork.\nHope to open pull request soon.. Hi @joschi, please see my PR #2617.\nAll tests are passing for me (except for a strange verify failure on a vulnerability of a non-existing dependency)\nFeel free to compare and take the good from it. ;-)\n. @joschi is this issue still blocked?. We enabled DEBUG level for jetty and dropwizard, but found nothing informative.\nThe requests that are failing do not appear at all in the logs. Not even headers, not to say the bodies.\nWe used tcpdump and this is how it looks in Wireshark:\n\nIt is filtered to show the data transmission between the dropwizard application port (8080) and the nginx ports (52822, 39808).\nThere are 4 requests here: 1 starts at 08:36, 2 at 09:04, 3 at 09:08 and 4 at 09:10.\n1 and 4 were failed because of connection reset sent by the application.\nThey both started with TCP retransmission, but #2 also started with retransmission and didn't fail.\nIt seems that the problem is somewhere very low, maybe even not jetty level but java.net.\nBut why should it start happening after Dropwizard upgrade? (and it do happens again and again!)\nMaybe it's something with dropwizard 1.3.x behaviour that causes in some indirect way to packet loss under heavy load (it happens during heavy concurrent load)?\nIs there something from the /metrics endpoint that can help us with this analysis?\nMany thanks, \nUziel. Update: We managed to reproduce the problem with version 1.2.8, by decreasing the number of application instances to 1 in the load balancer.\nThis means that this happens because of the high concurrent load. \nMight there be something in DW 1.3.x that changed some configurations or added some overhead to the processing time, and made it more sensitive to load failures?\nCan you suggest configuration changes to workaround the problem? keep-alive? rate? max connections? etc.. Another update: Currently it seems that the problem is solved by using a stronger machine instance in AWS. Moved from m3.medium to m5.large (8 cores), and no more Connection reset for a few builds until now. Sounds promising.\nI'm closing the issue, although the question is still open, whether the problem get be solved by configurations to overcome the requests load. Maybe use nginx rate liimit, maybe something else.. @sgomadam The default for acceptQueueSize, according to DW documentation:\nhttps://www.dropwizard.io/1.3.5/docs/manual/configuration.html#http\nis: \n\nThe size of the TCP/IP accept queue for the listening socket.\nSo if it really works, the solution may be by changing DW configuration or changing the system defaults.. OS Default tcp queue:\nOn m3.medium instance:\ncat /proc/sys/net/ipv4/tcp_max_syn_backlog\n128\nOn m5.xlarge instance:\ncat /proc/sys/net/ipv4/tcp_max_syn_backlog\n512\n\nSo it makes sense that changing this parameter alone by configuration will solve the problem all the same.\nAnd still, as some mentioned above - we have no clue why it happens a lot more on 1.3.x (I DID reproduce it on 1.2.8 using one instance for LB instead of 2)?\nWhat is the overhead that was added in 1.3.x that causing the TCP queue to blow up?\n. I see that version 1.3.6 is released without this fix. The fixing commit, 3e1e1ab6f34abbd12ea329cf23f9d11262cb6c69, is missing from the changes list.\nWhen is it planned to be included?\n. Hi, Jersey 2.26 release notes (https://jersey.github.io/release-notes/2.26.html) states that one of its new features is the theoretical ability to replace Jersey's dependency on HK2 with any other implementation of Jersey's InjectionManager interface.\nNow I checked and found that Dropwizard has a few explicit uses of HK2, especially its AbstractBinder. I wonder whether there's a simple way to eliminate this explicit dependency on HK2, and make it possible to use any dependency injection framework that will fully implement the InjectionManager, although HK2 is still Jersey's default.. > @usulkies Good catch, thanks! Thankfully, it was quite simple to replace the HK2 binders with Jersey binders.\n\nUnfortunately, HK2 is still the only DI-implementation available for Jersey and it doesn't look like that's going to change soon. \ud83e\udd14\n\nYes I know. In my company we're working with Dropwizard 1.3.x and Google Guice DI, and we're currently using dropwizard-guicier, which in turn uses jersey2-guice  to bind Guice with Jersey. I don't know yet if and how we'll be able to move to DW 2.0 when it is released.\nI've opened a PR to the latter, but it seems that this project is no longer maintained.\nI searched if someone tried to implement Jersey's InjectionManager for Guice, but except for this not-recently-touched issue - found none.\nWill keep try and looking for a solution. Please let me know if you find any. Keep the good work!\n. What is the reason for this increase?. Why did you add the @NotNull validation?. ",
    "Ezcred": "Got it. Will check who is sending that. Thanks for the help. Closing issue.. ",
    "baronlior": "@nickbabcock - OK. I'm good to go.\n\nplease check the link on the last commit was placed properly - I wasn't able to verify that.\n\nCheers, Lior. ",
    "genz10": "Yes,\nI think I can accept those trade-off. Soon i'll submit PR regarding this configuration.\nThanks for your answer @isaki-x\n. Thanks @arteam for your feedback, somehow I've missed some important part behind prudent mode, such as :\nIn prudent mode, file compression is not supported nor allowed. (We can't have one JVM writing to a file while another JVM is compressing it.)\nIn my opinion, it will trigger another problem such as archiving and massive log size (CMIIW). Reason behind I want to enable prudent mode was I have multiple JVM writing on the same log file.\nDo anyone here have more simple and elegant solution ? \nThanks! . Yeah I think these trade off are not balance, once someone enable prudent mode (if this PR goes through) there's possibility they will suffer another problem, i also consider to find another solution instead of enabling prudent mode.\nShould we close this PR or continue goes through ? . ",
    "euclio": "I believe this would fix the issue where PATCH is not supported natively by JerseyTestin Java 8.\nhttps://stackoverflow.com/questions/29499106/using-patch-with-jersey-client-api-for-unit-testing\n. ",
    "jcalcote": "Good idea and I will. I have one concern. The change will break backward\ncompatibility because currently kilobytes represents a multiple of 1024 and\naccording to the OSI definition KB should be a multiple of 1000 and KiB is\n1024. Thoughts?\nJohn\nOn Fri, Sep 15, 2017 at 12:49 AM lutzhorn notifications@github.com wrote:\n\nIt should be easy to extend SizeUnitTest\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/test/java/io/dropwizard/util/SizeUnitTest.java,\nSizeTest\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/test/java/io/dropwizard/util/SizeTest.java,\nSizeUnit, and Size with this.\nWhy don't you open a PR?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2152#issuecomment-329697453,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADA8lPiwnqe23DxDDOy0SxdHtLPtjB9ks5sih4WgaJpZM4PW05_\n.\n. The PR is open at https://github.com/dropwizard/dropwizard/pull/2154.. \n",
    "dccarlos": "I have the same problem, if I exclude that jersey-media-json-jackson the OAuth2 client doesn't work. ",
    "wejoy": "Well, the problem has been solved by using https://github.com/johnrengelman/shadow, Thanks for the help!\nCodes here\ngroovy\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'\n    }\n}\n```groovy\napply plugin: 'java'\napply plugin: 'application'\napply plugin: 'com.github.johnrengelman.shadow'\nproject.ext {\n    baseName = 'DWSample'\n    mainClass = 'com.hjess.dwsample.MainApp'\n    version = '1.0.0'\n    classifier = 'release'\n}\nshadowJar {\n    mergeServiceFiles()\n    mainClassName = project.ext.mainClass\n    baseName = project.ext.baseName\n    classifier = project.ext.classifier\n    version =  project.ext.version\n}\ntask release(type: Copy, dependsOn: 'shadowJar') {\n    from 'src/main/conf'\n    into 'build/libs'\n}\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    def dwVersion = '1.1.4'\n    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dwVersion\n}\ntasks.withType(JavaCompile) {\n    options.encoding = \"UTF-8\"\n}\n```. 0.9.2 is good without shadowJar, any version above is not.. ",
    "abhpoda": "I'm using dropwizard 0.9.2 and facing this issue. I've been successfully running my application without using any shadow plugin.  But suddenly it stopped working and I face the same issue while trying the run the jar file.\nRunning jar : java -jar ProjectName-1.0-SNAPSHOT.jar server  configuration.yml\nHere's my gradle file \n```\ngroup 'myGroup'\nversion '1.0-SNAPSHOT'\napply plugin: 'groovy'\napply plugin: 'java'\nsourceCompatibility = 1.8\nrepositories {\n    maven { url 'http://myArtifactory/jcenter' }\n}\ndependencies {\n    compile 'org.codehaus.groovy:groovy-all:2.3.11'\n    compile 'io.dropwizard:dropwizard-core:0.9.2'\n    compile \"org.glassfish.jersey.core:jersey-client:2.21\"\n    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.22.2'\n    compile group: 'org.json', name: 'json', version: '20090211'\n    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'\n    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.10.1'\ntestCompile group: 'junit', name: 'junit', version: '4.12'\n\n}\ntask fatJar(type: Jar) {\nmanifest {\n    attributes 'Implementation-Title': 'ProjectName',\n            'Implementation-Version': version,\n            'Main-Class': 'mypackage.DropWizardApplication'\n}\nbaseName = project.name\nfrom { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\nwith jar\n\n}\n```\n. ",
    "parasanger": "Any ideas appreciated\nUsing 1.3.5  shadowjar/gradle and I'm getting  (getting the same thing when I use gradle jar alone)\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/Users/xxxx/git/myfitnesspal/build/libs/myfitnesspal-1.0-SNAPSHOT-all.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)\nWARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\nio.dropwizard.configuration.ConfigurationParsingException: out/production/resources/mypal.yaml has an error:\n  * Failed to parse configuration at: server.applicationConnectors.[0]; Could not resolve type id 'http' as a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]: known type ids = [] (for POJO property 'applicationConnectors')\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.xxx.myfitnesspal.config.MyFitnessPalConfiguration[\"server\"]->io.dropwizard.server.DefaultServerFactory[\"applicationConnectors\"]->java.util.ArrayList[0])\nwith config snippet:\nserver:\n  applicationConnectors:\n    - type: http\n      port: 8080\n. ",
    "rferreira": "Great find! . ",
    "reftel": "Anything I can do to move this one forward? @arteam?. @stefan-zh: does this patch still solve your problem?\n@BorisNaguet: does this version of https://github.com/dropwizard/dropwizard/pull/1987 address all your comments?. Thank you! =). In the APIs for our applications, we have a standardized format for error messages, including things like extended error codes, which are part of the API documentation. In the fromString implementation for an enum that is part of the API (it's only ever referenced by the resource class), we then throw a WebApplicationException with the correct extended error code.\nThe lines here ensures that that exception itself is propagated, and not wrapped, so that the error code etc. that the fromString implementation indicated are used in the response.. ",
    "danpeter": "Ok I think it is an issue of me not calling get(Class<T>)and not calling response.close();, thereby not closing the underlying connection. \nConsuming the response body correctly solved it.. @nickbabcock I rebased but it is still failing. ",
    "eodonohoe": "Yes, that was the behaviour I encountered.. This is still broken for me with 1.3.0 running liquibase 3.5.5.  There is missing commit in that build but it is in the 3.6.0 branch\nCaused by: java.lang.StringIndexOutOfBoundsException: begin 2, end 3, length 1\n    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3116)\n    at java.base/java.lang.String.substring(String.java:1885)\n    at liquibase.util.SystemUtils.getJavaVersionAsInt(SystemUtils.java:1184). Just following up.  I haven't had another instance of this issue.\nIt also looks like the fix to this might have been made here(see comments made July 11th and after): https://github.com/eclipse/jetty.project/issues/2233. I second the dependency bump, especially for jdbi3.\nEncountered a strange issue with JDBI3 3.2.1 that is in Dropwizard 1.3.8 which I believe will be fixed by an upgrade to JDBI3 3.5.1.  The change has to due with ignoring static methods that may be in an interface.\nI think this is due to the java compiler adding a static method that for a switch statement on an enum that is in one of our default methods on the interface.\njava.lang.IllegalStateException: Method [CLASS_NAME_REMOVED].$SWITCH_TABLE$[METHOD_NAME_REMOVED] must be default or be annotated with a SQL method annotation.\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.lambda$buildMethodHandler$11(SqlObjectFactory.java:129)\n! at java.util.Optional.orElseThrow(Optional.java:290)\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandler(SqlObjectFactory.java:129)\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.lambda$null$9(SqlObjectFactory.java:120)\n! at java.util.HashMap.computeIfAbsent(HashMap.java:1126)\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.lambda$methodHandlersFor$10(SqlObjectFactory.java:120)\n! at java.util.Map.computeIfAbsent(Map.java:957)\n! at java.util.Collections$SynchronizedMap.computeIfAbsent(Collections.java:2672)\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.methodHandlersFor(SqlObjectFactory.java:104)\n! at org.jdbi.v3.sqlobject.SqlObjectFactory.attach(SqlObjectFactory.java:81)\n! at org.jdbi.v3.core.extension.Extensions.lambda$findFor$0(Extensions.java:70)\n! at java.util.Optional.map(Optional.java:215)\n! at org.jdbi.v3.core.extension.Extensions.findFor(Extensions.java:70)\n! at org.jdbi.v3.core.Jdbi.withExtension(Jdbi.java:435)\n! at org.jdbi.v3.core.OnDemandExtensions.lambda$create$2(OnDemandExtensions.java:61). ",
    "avboy72": "It appears that this fix was temporary hack, as it is broken again in Java 10. Java 9 is now end of life.. ",
    "lvc": "@joschi \nDropwizard\n|Component | API report|\n|:---:|:---:|\n|Assets|view|\n|Authentication|view|\n|Core|view|\n|Database Support|view|\n|HTTP Client|view|\n|Jackson Support|view|\n|JDBI Support|view|\n|Metrics Support|view|\n|Test Helpers|view|\n|Validation Support|view|\nMetrics\n|Component | API report|\n|:---:|:---:|\n|Metrics Core|view|\n|Metrics Graphite|view|\n|Metrics JVM|view|\n|Metrics Jackson|view|\nOthers will be added soon.... ",
    "AnDyXX": "\nIs it possible to achieve backwards compatibility for the current junit4 users with a common core module?\n\nYep, just my first impuls was to not change anything - rather add new functionality to separate module.. I changed code so JUnit4 and JUnit5 code is in the dropwizard-testing module. \nChanged junit 4 dependency from junit to junit-vintage-engine.\nCommon code extracted.. Ok I made JUnit 5 optional and updated restored comments.. I had to downgrade maven-surefire-plugin  to 2.19.1 version to make oit work with JUnit5.  codeclimate \u2014 42 issues to fix are mostly because of tests for JUnit5 that are copied from junit 4 counterpart. Any hints on this ones?. PR code rebased.. Actually this one comes from this class: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/test/java/io/dropwizard/testing/junit/TestEntity.java\nIt is used in tests there: io.dropwizard.testing.junit5.DAOTestExtensionTest#rollsBackTransaction and similar test is there: io.dropwizard.testing.junit.DAOTestRuleTest#rollsBackTransaction\n. I addressed your comments, have to look at other failing issues.. ",
    "shankhanildas": "As of now, dropwizard version 1.1.0. ",
    "MaciejCiszewski": "I was not able to reproduce this bug in version 1.3 nor in 1.1.0.  Whenever I use the client created with:\nfinal Client client = new JerseyClientBuilder(environment).using(config.getJerseyClientConfiguration())\n.build(getName());\nI could see that at least 'leased-connections' have non-zero value. After debugging I can see that metrics reflects perfectly the state of the connection pool. Are there any other conditions required to reproduce this bug?. ",
    "ashishs": "@isaki-x SLF4J supports the AUDIT facility.. ",
    "andyatkinson": "Here is a bundle that may be helpful:\nhttp://maria-gomez.me/software/how-to-log-audit-information-with-dropwizard/\nhttps://github.com/mariagomez/dropwizard-audit. ",
    "yash9patel": "You guys were right I did have conflicts in my pom file and it is resolved. Sometimes you need someone to check for basics again.. ",
    "kewats": "Thanks @arteam. Not sure if you are looking for the server property from the yml alone or the entire content. Here is what I have under server:\nserver:\n  applicationConnectors:\n  - type: http\n    port: 8080\n  adminConnectors:\n  - type: http\n    port: 8081\nI have not used gzip configuration as I believe it is enabled by default.\nHere is the skeleton of my REST resource code:\n@GET\n@Path(\"/foo/bar\")\n@Produces(MediaType.APPLICATION_JSON)\npublic MyDataList getData() {\n  return service.getData();\n}\nPlease let me know in case any more details are needed. Thanks!\n. Logging was very useful, thanks! Looks like my response is getting compressed indeed, however not sure why response headers do not have \"Content-Encoding: gzip\".\n\nDEBUG [2017-10-23 12:23:16,031] org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor: org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor@57ed37d5 compressing java.util.zip.Deflater@687972c\n. That's what it seems like. I will confirm on that as soon as I get a chance. But, surely compression is working fine for me. Many thanks for your help, I am closing this issue!. \n",
    "bearrito": "I'm not able to build and test at the moment. \nYour analysis of the problem is correct. My issue was identical to RunDbVacuum extends ConfiguredCommand<ReplicaConfig<Replica>>.  If this PR solves that problem then LGTM.. ",
    "clickthisnick": "@evnm I believe I addressed your comments, please take a look :). H6 are shrunk and gray in github\nH4 are normal sized and bold\nI generally use H6 so that people can tell the difference between the template and the text that the user has entered. Updated to use that convention~ Thanks!. ",
    "shail": "@scho does this problem still arise for you? Using dropwizard 1.1.8 this is still a problem for me. Any update here?. @nickbabcock I've only been able to test it by running a server (adding a Thread.sleep to an endpoint) and then running a curl command and hitting Ctrl-C to close the socket. I haven't been able to reproduce this in a test because by killing the client connection, the DropwizardAppRule never returns anything for the error.. @nickbabcock In the DropwizardTestSupport class if we could get access to the jettyServer instance variable there, we could see the request log which I think would return something similar?. @nickbabcock I've narrowed down where the issue is arising I believe. When Jetty tries to handle writing the response, it uses the Jersey servlet which throws an EofException when it can't write to the client given the connection has been broken. If we use an ExceptionMapper which will again try to write to the client when returning the Response object, we'll get an EofException which doesn't get caught.\nThis is just a proof of concept, not really what we need:\nhttps://github.com/dropwizard/dropwizard/pull/2541/files. @nickbabcock Great thanks! I'll update the tests and clean up the description to reference the issue.. @nickbabcock circleci is failing tests, but when i run mvn test locally from the dropwizard root, all the tests pass for me locally.\nError from CirclieCI:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test (default-test) on project dropwizard-util: There are test failures.\n[ERROR] \n[ERROR] Please refer to /home/circleci/dropwizard/dropwizard-util/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.\n[ERROR] The forked VM terminated without properly saying goodbye. VM crash or System.exit called?\n[ERROR] Command was /bin/sh -c cd /home/circleci/dropwizard/dropwizard-util && /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -Duser.language=en -Duser.region=US -jar /home/circleci/dropwizard/dropwizard-util/target/surefire/surefirebooter3195648702704555551.jar /home/circleci/dropwizard/dropwizard-util/target/surefire 2018-11-12T19-14-07_235-jvmRun1 surefire5858238720049321047tmp surefire_03002315795213124853tmp\n[ERROR] Error occurred in starting fork, check output in log\n[ERROR] Process Exit Code: 1\n[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: The forked VM terminated without properly saying goodbye. VM crash or System.exit called?\n[ERROR] Command was /bin/sh -c cd /home/circleci/dropwizard/dropwizard-util && /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -Duser.language=en -Duser.region=US -jar /home/circleci/dropwizard/dropwizard-util/target/surefire/surefirebooter3195648702704555551.jar /home/circleci/dropwizard/dropwizard-util/target/surefire 2018-11-12T19-14-07_235-jvmRun1 surefire5858238720049321047tmp surefire_03002315795213124853tmp\n[ERROR] Error occurred in starting fork, check output in log\n[ERROR] Process Exit Code: 1\n[ERROR]     at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:671)\n[ERROR]     at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:533)\n[ERROR]     at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:278)\n[ERROR]     at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:244)\n[ERROR]     at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1194)\n[ERROR]     at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1022)\n[ERROR]     at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:868)\n[ERROR]     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)\n[ERROR]     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)\n[ERROR]     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)\n[ERROR]     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)\n[ERROR]     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)\n[ERROR]     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)\n[ERROR]     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)\n[ERROR]     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)\n[ERROR]     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)\n[ERROR]     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)\n[ERROR]     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)\n[ERROR]     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:956)\n[ERROR]     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)\n[ERROR]     at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)\n[ERROR]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[ERROR]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n[ERROR]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[ERROR]     at java.lang.reflect.Method.invoke(Method.java:498)\n[ERROR]     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n[ERROR]     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n[ERROR]     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n[ERROR]     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nError from AppVeyor:\n[ERROR] Errors: \n[ERROR]   JerseyClientIntegrationTest.testBufferedGzipPost:111->postRequest:209 \ufffd Processing\nAny idea what this means? Are there some docs on how to debug these CircleCI tests? Looks like a lot of the other pull requests have this same issue. Ah ok no worries, thanks for the heads up re: circle CI. I'll rebase your changes once it has landed and retest the appveyor build. Thanks!. @nickbabcock After squashing my commits into a single one, looks like appveyor and travis-ci both pass :) \nLet me know if I should make any more changes to the code, thanks!. @nickbabcock Makes sense to me!\nWhen you say \"update this to reference issue and spell out the original problem + chosen solution\", do you mean in the final squashed commit message? Or is there somewhere else I should be doing this? . @nickbabcock updated, thanks!. @nickbabcock let me know if i need to make anymore changes, thanks!. @isaki Yeah it would be great if we could print out some more information as well. But I didn't see anything in DropwizardAppRule that would allow for that. ",
    "suvodeep-pyne": "This is still a problem in 1.3.8. The thing is the exception is thrown before the request is processed. One of the ways of reproducing this is \n```\nnc -v localhost 8080\nPOST /api/endpoint HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 20\n```\nThe empty lines at the end are required to complete the HTTP request. Here content length is 20, however, nothing is provided triggering the EOF exception.\nHowever, I was unable to find a straightforward way of consuming the exception. It seems to get triggered before the appHandler actually handles the request.\n```\n! org.eclipse.jetty.io.EofException: Early EOF\n! at org.eclipse.jetty.server.HttpInput$3.getError(HttpInput.java:1138)\n! at org.eclipse.jetty.server.HttpInput$3.noContent(HttpInput.java:1126)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:313)\n! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:256)\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:200)\n! ... 46 common frames omitted\n! Causing: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF\n! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:217)\n! at org.glassfish.jersey.message.internal.InboundMessageContext.hasEntity(InboundMessageContext.java:772)\n! at org.glassfish.jersey.servlet.WebComponent.filterFormParameters(WebComponent.java:670)\n! at org.glassfish.jersey.servlet.WebComponent.initContainerRequest(WebComponent.java:520)\n! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:471)\n! ... 42 common frames omitted\n! Causing: javax.servlet.ServletException: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF\n! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:489)\n! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655)\n! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:35)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45)\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)\n! at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)\n! at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)\n! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)\n! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1317)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)\n! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)\n! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)\n! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219)\n! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:239)\n! at io.dropwizard.jetty.ContextRoutingHandler.handle(ContextRoutingHandler.java:38)\n! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:674)\n! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:67)\n! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)\n! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n! at org.eclipse.jetty.server.Server.handle(Server.java:531)\n! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)\n! at org.eclipse.jetty.server.HttpChannelOverHttp.earlyEOF(HttpChannelOverHttp.java:238)\n! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1583)\n! at org.eclipse.jetty.server.HttpConnection.parseRequestBuffer(HttpConnection.java:360)\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:250)\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)\n! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)\n! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762)\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680)\n! at java.lang.Thread.run(Thread.java:745)\n```. Well. There seems to be a workaround. You can create a filter class which filters the exception and checks for Early Eof. This is a hack very specific for my case. However, you get the idea. I have tested this and it works. Here's the filter snippet.\n```\n@Override\n  public void doFilter(\n      final ServletRequest request,\n      final ServletResponse response,\n      final FilterChain chain)\n      throws IOException, ServletException {\n    try {\n      chain.doFilter(request, response);\n    } catch (ServletException e) {\n      if (isEarlyEofException(e)) {\n        log.debug(\"EOF Exception encountered - client disconnected during stream processing.\", e);\n    if (response instanceof HttpServletResponse) {\n      ((HttpServletResponse) response).setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  } else {\n    throw e;\n  }\n}\n\n}\nprivate boolean isEarlyEofException(final ServletException e) {\n    return e.getCause() instanceof ProcessingException\n        && e.getCause().getCause() instanceof EofException\n        && e.getCause().getCause().getMessage().equals(EARLY_EOF_MSG);\n  }\n```. ",
    "ddekany": "Perhaps both the old file extension and the template engine name should be accepted, for backward compatibility, and if both key is used, that's an error.\nWhile we are here, it's also a bit strange that the matching file extensions are hard-coded. I think that the matching file name patterns should be just a configuration option, and what's hard coded now should only be the default. A use case is file name patterns like *.ftl.html, or even just *.html. It's not standard, but some users do that, as they prefer templates to be associated with the HTML editor or viewer.. Definitely update FreeMarker regardless of this issue. The incubating status has nothing to do with code stability/maturity; it's purely a branding/political thing. So using 2.3.23 makes as much sense as using any other random older version.. @arteam: Note that it's not an exactly correct assumption that you only have to look at the file extension. It's mostly true, yes. But just consider foo.ftl.html (and I have seen it with non-FreeMarker templates as well). So regular expressions matched against the whole file name are better.. I hope you plan to update to FreeMarker 2.3.27 in the backward-compatible branch as well.. But, you can set the template_exception_handler though Configuration::setSetting. I'm nor sure why's it not working. Something that's maybe a sign of the real problem is if you didn't get an exception for the incorrect attempt,  TemplateExceptionHandler=rethrow. That's not a valid setting name with T, and FreeMarker then throws an exception.. ",
    "georgespalding": "I see. Planning to move to dw 1.2 anyway, so I'll close this, then.. ",
    "qmnonic": "That seemed to work - thanks!. ",
    "LukaszP1": "@joschi  Yes, you're right. I'm sorry - I'm new on github.\nIs it possible to move this issue, or should I close this issue and open another in https://github.com/dropwizard/metrics ?. ",
    "Ryan-Miao": "@nickbabcock Thank you,  I didn't make it clear before. I just want a Java side MessageResource, such as Spring MessageSource. \nI have finished it by just copy the Spring MessageResource. Here is my solution: easy-i18n, and I have integrated it with my test:   https://github.com/Ryan-Miao/l4dropwizard/blob/master/src/main/java/com/test/domain/resource/LocalResource.java. @arteam Thank you! It's very happy to hear the solution for view render. Currently, we just use Dropwizard as a web service. Maybe consider rendering page in the future.. ",
    "Kinchkun": "Thanks for your fast response and workaround. I can confirm that the workaround works :). ",
    "ehrmann": "Could someone look at codeclimate? It's getting to the point where it's making the test less readable.. I think I made all the changes. If Github can squash the fixup commits, nice. If it can't, I can squash them and force push so the commit log is clean.. It did cover mark() and markSupported(), but reimplementing them was pretty easy.. ",
    "henryso": "Sorry, I typed in the wrong window.. ",
    "GautamGupta": "It's probably also a good idea to link to that part of the documentation in the configuration section (or to update it).. Sure thing, here you go: #2305. ",
    "fipp": "I used it to verify that some variables was not null on a object (assert foo.bar != null && foo.spam != null), in a task that iterated over these objects and performed HTTP requests to a remote REST API.\nAfter reading up on what AssertionError should actually be used for, I've changed my logic to throw an Exception instead.\nBut isn't that besides the point? If the code used in a task throws an Error, shouldn't it be logged a bit more aggressively than a WARN? I'd argue that an Error is more serious than a Exception, which is logged as ERROR?. Perhaps Errors can be caught, logged (as ERROR), and rethrown? I'll make a suggestion in a PR. \nThanks for your input!. ",
    "javasoze": "Hey Evan, perhaps console is not an ideal name...\nMy use case is that I have a command line application (not a server), e.g. standard public static void main(). But I find it very useful to leverage some of the functionality that Dropwizard provides, e.g. configuration management, encapsulation of logging etc. So by creating this command, I can just run my program inside run() with access to a parsed configuration and other goodies that come with Dropwizard.\nI understand it is not a standard usecase.. ",
    "alexplischke": "I did not! \ud83d\udc4d \nAwesome, that worked. Thanks a lot!. ",
    "frederic-h": "While that works my scenario looks a little different. I am registering the interface and have the underlying HK2 (over a bridge to Weld) resolve the actual (or mock for tests) implementation.. @joschi https://github.com/frederic-h/dw-interfaces-log\nExpected Log\n```\nINFO  [2018-02-05 09:12:58,784] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nGET     /extra (service.api.ExtraResource)\nGET     /hello (service.api.HelloResource)\n\n```\nActual Log\n```\nINFO  [2018-02-05 09:13:43,298] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nGET     /extra (service.api.ExtraResource)\n\n```. ",
    "peterklijn": "Btw, this is also the case with custom validators, like so:\n```java\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\nimport org.joda.time.DateTime;\npublic class CustomComponentValidator implements ConstraintValidator {\n@Override\n  public void initialize(final ValidCustomComponent constraintAnnotation) {}\n@Override\n  public boolean isValid(final CustomComponent value, final ConstraintValidatorContext context) {\n    final DateTime now = DateTime.now();\n    context.disableDefaultConstraintViolation();\n    context\n        .buildConstraintViolationWithTemplate(\"The time is ==> \" + now.toLocalTime())\n        .addConstraintViolation();\nreturn false;\n\n}\n}\n```\nIn this case it will keep displaying the time of the first encounter.. ",
    "willp-bl": "Thanks for merging\nThe failure on the 1.2 branch is probably down to the config interface/format changes in freemarker itself.. I'll try that, thanks. ",
    "rbjorklin": "Created an issue in the hibernate issue tracker for this.. Wasn't aware that both were supported. Thanks!. ",
    "li-a": "This also gives us an easier way to change just the layout in order to change exceptions back to the standard Logback format (prefixed w/ tab, no more exclamation points). Thanks!. ",
    "vinaysshenoy": "I just saw @arteam reply on #2261. \nThis might probably be caused by the same issue. I'll check with rc6 and report back.. Yes, the issue has been fixed with 1.3.0-rc6. Closing this.. ",
    "jplace": "Wow, thanks for the prompt response!\nFor others out there:\nI resolved to disable gzip for the entire Dropwizard app, then register a GZipEncoder with just my Jersey servlet.\nenvironment.jersey().register(GZipEncoder.class);\nThis lets me support gzip in my Jersey resources, but avoid gzip in my proxy servlet.\n. ",
    "edovale": "Here is the output of mvn dependency:tree\n[INFO] Scanning for projects...\n[WARNING] The project io.huru:example:jar:1.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] Building truebook 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ truebook ---\n[INFO] io.huru:example:jar:1.0-SNAPSHOT\n[INFO] +- io.dropwizard:dropwizard-core:jar:1.3.0-rc6:compile\n[INFO] |  +- io.dropwizard:dropwizard-util:jar:1.3.0-rc6:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile\n[INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.2:compile\n[INFO] |  |  \\- joda-time:joda-time:jar:2.9.9:compile\n[INFO] |  +- io.dropwizard:dropwizard-jackson:jar:1.3.0-rc6:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.9.4:compile\n[INFO] |  |  \\- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.9.4:compile\n[INFO] |  +- io.dropwizard:dropwizard-validation:jar:1.3.0-rc6:compile\n[INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.4.2.Final:compile\n[INFO] |  |  |  +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile\n[INFO] |  |  |  \\- com.fasterxml:classmate:jar:1.3.4:compile\n[INFO] |  |  +- org.glassfish:javax.el:jar:3.0.0:compile\n[INFO] |  |  \\- org.javassist:javassist:jar:3.22.0-GA:compile\n[INFO] |  +- io.dropwizard:dropwizard-configuration:jar:1.3.0-rc6:compile\n[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.9.4:compile\n[INFO] |  |  +- org.apache.commons:commons-lang3:jar:3.7:compile\n[INFO] |  |  \\- org.apache.commons:commons-text:jar:1.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-logging:jar:1.3.0-rc6:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-logback:jar:4.0.2:compile\n[INFO] |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile\n[INFO] |  |  +- ch.qos.logback:logback-core:jar:1.2.3:compile\n[INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n[INFO] |  |  +- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile\n[INFO] |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-util:jar:9.4.8.v20171121:compile\n[INFO] |  +- io.dropwizard:dropwizard-metrics:jar:1.3.0-rc6:compile\n[INFO] |  +- io.dropwizard:dropwizard-jersey:jar:1.3.0-rc6:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.25.1:compile\n[INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:4.0.2:compile\n[INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.9.4:compile\n[INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.9.4:compile\n[INFO] |  |  |  \\- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.9.4:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.4.8.v20171121:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-io:jar:9.4.8.v20171121:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.4.8.v20171121:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-xml:jar:9.4.8.v20171121:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-continuation:jar:9.4.8.v20171121:compile\n[INFO] |  +- io.dropwizard:dropwizard-servlets:jar:1.3.0-rc6:compile\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-annotation:jar:4.0.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-jetty:jar:1.3.0-rc6:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:4.0.2:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.4.8.v20171121:compile\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-security:jar:9.4.8.v20171121:compile\n[INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.4.8.v20171121:compile\n[INFO] |  |  \\- org.eclipse.jetty:jetty-http:jar:9.4.8.v20171121:compile\n[INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:1.3.0-rc6:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:4.0.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:4.0.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-jmx:jar:4.0.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:4.0.2:compile\n[INFO] |  |  +- io.dropwizard.metrics:metrics-json:jar:4.0.2:compile\n[INFO] |  |  \\- com.papertrail:profiler:jar:1.0.2:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:4.0.2:compile\n[INFO] |  +- io.dropwizard:dropwizard-request-logging:jar:1.3.0-rc6:compile\n[INFO] |  |  \\- ch.qos.logback:logback-access:jar:1.2.3:compile\n[INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile\n[INFO] |  \\- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile\n[INFO] +- io.dropwizard:dropwizard-jdbi3:jar:1.3.0-rc6:compile\n[INFO] |  +- io.dropwizard:dropwizard-db:jar:1.3.0-rc6:compile\n[INFO] |  |  \\- org.apache.tomcat:tomcat-jdbc:jar:9.0.4:compile\n[INFO] |  |     \\- org.apache.tomcat:tomcat-juli:jar:9.0.4:compile\n[INFO] |  +- org.jdbi:jdbi3-core:jar:3.0.1:compile\n[INFO] |  |  +- org.antlr:antlr-runtime:jar:3.4:compile\n[INFO] |  |  |  +- org.antlr:stringtemplate:jar:3.2.1:compile\n[INFO] |  |  |  \\- antlr:antlr:jar:2.7.7:compile\n[INFO] |  |  \\- net.jodah:expiringmap:jar:0.5.6:compile\n[INFO] |  +- org.jdbi:jdbi3-sqlobject:jar:3.0.1:compile\n[INFO] |  +- org.jdbi:jdbi3-jodatime2:jar:3.0.1:compile\n[INFO] |  +- org.jdbi:jdbi3-guava:jar:3.0.1:compile\n[INFO] |  \\- io.dropwizard.metrics:metrics-jdbi3:jar:4.0.2:compile\n[INFO] +- io.dropwizard:dropwizard-migrations:jar:1.3.0-rc6:compile\n[INFO] |  +- org.liquibase:liquibase-core:jar:3.5.4:compile\n[INFO] |  \\- com.mattbertolini:liquibase-slf4j:jar:2.0.0:compile\n[INFO] +- io.dropwizard:dropwizard-client:jar:1.3.0-rc6:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-client:jar:2.25.1:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.25.1:compile\n[INFO] |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.25.1:compile\n[INFO] |  |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b32:compile\n[INFO] |  |  \\- org.glassfish.hk2:hk2-locator:jar:2.5.0-b32:compile\n[INFO] |  |     \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b32:compile\n[INFO] |  +- org.glassfish.jersey.ext.rx:jersey-rx-client:jar:2.25.1:compile\n[INFO] |  +- org.apache.httpcomponents:httpclient:jar:4.5.5:compile\n[INFO] |  |  +- org.apache.httpcomponents:httpcore:jar:4.4.9:compile\n[INFO] |  |  \\- commons-codec:commons-codec:jar:1.10:compile\n[INFO] |  +- io.dropwizard.metrics:metrics-httpclient:jar:4.0.2:compile\n[INFO] |  \\- org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.25.1:compile\n[INFO] +- org.elasticsearch.client:elasticsearch-rest-high-level-client:jar:6.1.3:compile\n[INFO] |  +- org.elasticsearch:elasticsearch:jar:6.1.3:compile\n[INFO] |  |  +- org.apache.lucene:lucene-core:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-analyzers-common:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-backward-codecs:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-grouping:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-highlighter:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-join:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-memory:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-misc:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-queries:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-queryparser:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-sandbox:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-spatial:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-spatial-extras:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-spatial3d:jar:7.1.0:compile\n[INFO] |  |  +- org.apache.lucene:lucene-suggest:jar:7.1.0:compile\n[INFO] |  |  +- org.elasticsearch:securesm:jar:1.2:compile\n[INFO] |  |  +- org.elasticsearch:elasticsearch-cli:jar:6.1.3:compile\n[INFO] |  |  |  \\- net.sf.jopt-simple:jopt-simple:jar:5.0.2:compile\n[INFO] |  |  +- com.carrotsearch:hppc:jar:0.7.1:compile\n[INFO] |  |  +- org.yaml:snakeyaml:jar:1.17:compile\n[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.9.4:compile\n[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.9.4:compile\n[INFO] |  |  +- com.tdunning:t-digest:jar:3.0:compile\n[INFO] |  |  +- org.hdrhistogram:HdrHistogram:jar:2.1.9:compile\n[INFO] |  |  +- org.apache.logging.log4j:log4j-api:jar:2.9.1:compile\n[INFO] |  |  \\- org.elasticsearch:jna:jar:4.4.0-1:compile\n[INFO] |  +- org.elasticsearch.client:elasticsearch-rest-client:jar:6.1.3:compile\n[INFO] |  |  +- org.apache.httpcomponents:httpasyncclient:jar:4.1.2:compile\n[INFO] |  |  +- org.apache.httpcomponents:httpcore-nio:jar:4.4.5:compile\n[INFO] |  |  \\- commons-logging:commons-logging:jar:1.1.3:compile\n[INFO] |  +- org.elasticsearch.plugin:parent-join-client:jar:6.1.3:compile\n[INFO] |  |  +- org.locationtech.spatial4j:spatial4j:jar:0.6:compile\n[INFO] |  |  +- com.vividsolutions:jts:jar:1.13:compile\n[INFO] |  |  \\- org.apache.logging.log4j:log4j-core:jar:2.9.1:compile\n[INFO] |  \\- org.elasticsearch.plugin:aggs-matrix-stats-client:jar:6.1.3:compile\n[INFO] +- com.hubspot.dropwizard:dropwizard-guice:jar:1.0.6.0:compile\n[INFO] |  +- com.squarespace.jersey2-guice:jersey2-guice-impl:jar:1.0.6:compile\n[INFO] |  |  +- com.google.inject.extensions:guice-multibindings:jar:4.0:compile\n[INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile\n[INFO] |  |  \\- com.squarespace.jersey2-guice:0-jersey2-guice-spi:jar:1.0.6:compile\n[INFO] |  +- com.google.code.findbugs:annotations:jar:3.0.1:compile\n[INFO] |  +- com.google.inject:guice:jar:4.0:compile\n[INFO] |  |  \\- aopalliance:aopalliance:jar:1.0:compile\n[INFO] |  +- com.google.inject.extensions:guice-servlet:jar:4.0:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile\n[INFO] |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile\n[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  +- org.reflections:reflections:jar:0.9.10:compile\n[INFO] |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile\n[INFO] |  +- javax.inject:javax.inject:jar:1:compile\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile\n[INFO] |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b32:compile\n[INFO] |  |  \\- org.glassfish.hk2:hk2-utils:jar:2.5.0-b32:compile\n[INFO] |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO] |  \\- com.google.guava:guava:jar:24.0-jre:compile\n[INFO] |     +- org.checkerframework:checker-compat-qual:jar:2.0.0:compile\n[INFO] |     +- com.google.errorprone:error_prone_annotations:jar:2.1.3:compile\n[INFO] |     +- com.google.j2objc:j2objc-annotations:jar:1.1:compile\n[INFO] |     \\- org.codehaus.mojo:animal-sniffer-annotations:jar:1.14:compile\n[INFO] +- org.jdbi:jdbi3-postgres:jar:3.0.1:compile\n[INFO] |  \\- org.postgresql:postgresql:jar:9.4.1212:compile\n[INFO] +- org.junit.jupiter:junit-jupiter-engine:jar:5.0.3:test\n[INFO] |  +- org.apiguardian:apiguardian-api:jar:1.0.0:test\n[INFO] |  +- org.junit.platform:junit-platform-engine:jar:1.0.3:test\n[INFO] |  |  +- org.junit.platform:junit-platform-commons:jar:1.0.3:test\n[INFO] |  |  \\- org.opentest4j:opentest4j:jar:1.0.0:test\n[INFO] |  \\- org.junit.jupiter:junit-jupiter-api:jar:5.0.3:test\n[INFO] \\- io.dropwizard:dropwizard-testing:jar:1.3.0-rc6:compile\n[INFO]    +- junit:junit:jar:4.12:compile\n[INFO]    |  \\- org.hamcrest:hamcrest-core:jar:1.3:compile\n[INFO]    +- org.objenesis:objenesis:jar:2.6:compile\n[INFO]    +- org.assertj:assertj-core:jar:3.9.0:test\n[INFO]    \\- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.25.1:compile\n[INFO]       \\- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.25.1:compile\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2.466 s\n[INFO] Finished at: 2018-02-15T09:58:26-05:00\n[INFO] Final Memory: 26M/324M\n[INFO] ------------------------------------------------------------------------. For some reason the tests in the example application are not getting picked up by surefire.. @arteam Are you sure the test is running? I was able to replicate the behaviour running straight form maven.. That is a good catch @arteam but I fail to see how that could prevent a command from running. Can you explain this?. I have renamed the Test and still maven is not picking it up.\nI have also updated the junit5 deps to the latest.. ",
    "SriniMurthy": "Anybody found a resolution for this issue? I have tried various databases, drivers, even put the driver jar in the classpath manually to no effect. ",
    "schmee": "Just for the record I encountered this issue today when upgrading a project from Dropwizard 1.2.0 to 1.3.5. The problem pops up in an integration test using the DropwizardAppRule and the test is using JUnit 4.12. If I get around to it I'll try to extract a minimal example, but for now I just wanted to leave a note that the issue still exists in 1.3.5.. Turns out this was a PEBKAC error, the DB driver was not configured properly. Sorry for the noise!. ",
    "tvaughan77": "@schmee Could you elaborate when you say the DB driver wasn't configured properly?  I'm trying a Dropwizard 1.2.0 -> 1.3.5 upgrade and all my IntTests that were using a @Classrule to spin up a MySQL instance are failing because of an apparent ClassNotFoundException...\nIt's weird, because the Flyway migration works fine, but then the first time I try us use a DBI handle.open() it barfs.... > @schmee Could you elaborate when you say the DB driver wasn't configured properly? I'm trying a Dropwizard 1.2.0 -> 1.3.5 upgrade and all my IntTests that were using a @Classrule to spin up a MySQL instance are failing because of an apparent ClassNotFoundException...\n\nIt's weird, because the Flyway migration works fine, but then the first time I try us use a DBI handle.open() it barfs...\n\nAnswering my own question . . . . \nSomewhere between 1.2.0 and 1.3.5 the DataSourceFactory changed such that it needs to be provided with a driverClass String property.  In my Dropwizard 1.2.0 codebase there must have been some classpath scanning magic going on because my IntTests had historically been able to get away with just this configuration:\nDataSourceFactory dataSourceFactory = new DataSourceFactory();\n        dataSourceFactory.setUrl(this.mySQLRule.getDbUrl());\n        dataSourceFactory.setUser(this.mySQLRule.getDbUser());\n        dataSourceFactory.setPassword(this.mySQLRule.getDbPassword());\nOnce I added dataSourceFactory.setDriverClass(\"com.mysql.jdbc.Driver\");  everything started working again\nThe bitch about this was that because the default driver set in the DataSourceFactory was the empty string (\"\"), the stack traces were pretty tough to figure out what Class couldn't be loaded.  Perhaps the Tomcat ConnectionPool guys would benefit from adding a check if the String isn't null/empty. ",
    "aedwards-act": "There was a similar issue raised previously https://github.com/dropwizard/dropwizard/issues/1935 it was closed as their were integration tests proving the behavior works, however they only seem to test posting application/json, the issue appears when posting application/x-www-form-urlencoded\nhttps://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java#L208. I believe it is, but I'm not certain. I will try to find out.\nI would have expected a 415 response from the server if it was not supported.. @arteam I notice in your unit test that you're not asserting the form parameters, but you seem to be printing them out? I assume you were using the printout to verify that the form parameters were correct?. Issue seems to be that the server we're talking to doesn't support gzip encoding and doesn't handle it gracefully. Closing issue.. This was seen in dropwizard 1.2.2.\nWhen we, previously, used version 8.2 we would get the expected java.net.BindException.. ",
    "asamaraw": "@ramsrib, you can achieve this using JDBCSessionDataStore in Dropwizard 1.2.2.. @ramsrib, here you go https://gist.github.com/asamaraw/7cce23eb76cc06eba9ffef4033bf415f. ",
    "Rafael-Simonelli": "Unfortunately the console doesn't print the stack. Maybe something I can configure in Dropwizard's YML to show it? Either way, I removed the log4j references (they were used because of the legacy code) and the problem persisted. \nSince it doesn't happen in debug, any tips on how to solve the issue? . mvn dependency:tree showed no other jasper reports reference.\nI even built a project from scratch instead of adding a new module on my previsous project, but nothing changed. I managed to print the Stack Trace, it is the following.\nAny ideas?\njava.lang.ExceptionInInitializerError\n        at net.sf.jasperreports.engine.fill.JRBaseFiller.<init>(JRBaseFiller.java:108)\n        at net.sf.jasperreports.engine.fill.JRVerticalFiller.<init>(JRVerticalFiller.java:69)\n        at net.sf.jasperreports.engine.fill.JRVerticalFiller.<init>(JRVerticalFiller.java:57)\n        at net.sf.jasperreports.engine.fill.JRFiller.createBandReportFiller(JRFiller.java:200)\n        at net.sf.jasperreports.engine.fill.JRFiller.createReportFiller(JRFiller.java:215)\n        at net.sf.jasperreports.engine.fill.JRFiller.fill(JRFiller.java:115)\n        at net.sf.jasperreports.engine.JasperFillManager.fill(JasperFillManager.java:667)\n        at net.sf.jasperreports.engine.JasperFillManager.fill(JasperFillManager.java:648)\n        at net.sf.jasperreports.engine.JasperFillManager.fillReport(JasperFillManager.java:970)\n        at <my_package_info>\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)\n        at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)\n        at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)\n        at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$VoidOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:143)\n        at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)\n        at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)\n        at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)\n        at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)\n        at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)\n        at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)\n        at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:267)\n        at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)\n        at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)\n        at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)\n        at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)\n        at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)\n        at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)\n        at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)\n        at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)\n        at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)\n        at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n        at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45)\n        at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)\n        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n        at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241)\n        at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52)\n        at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:455)\n        at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:69)\n        at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)\n        at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)\n        at org.eclipse.jetty.server.Server.handle(Server.java:530)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:347)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:256)\n        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)\n        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)\n        at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247)\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140)\n        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)\n        at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:382)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626)\n        at java.lang.Thread.run(Unknown Source). Thanks for the reply.\nWill do the non-AuthenticationException way.. Ok, thanks for the reply!. ",
    "aharin": "Indeed, however Dropwizard does add support for PATCH method via a custom annotation io.dropwizard.jersey.PATCH. The io.dropwizard.client.io.dropwizard.client.JerseyClientBuilder also allows to submit patch requests. The issue here is the test client from DropwizardAppRule, which uses org.glassfish.jersey.client.JerseyClientBuilder . A simple workaround however is to set JerseyClientBuilder.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true). ",
    "1605200517": "@joschi thanks for anticipating this proposal -   I would like to, there is not much to do, I am not just sure where (to which build profile) to add this one:\n```\n\norg.owasp\ndependency-check-maven\n<configuration>\n    <format>ALL</format>\n</configuration>\n<executions>\n    <execution>\n        <goals>\n            <goal>check</goal>\n        </goals>\n    </execution>\n</executions>\n\n\n```. pull request: https://github.com/dropwizard/dropwizard/pull/2296. @joschi strange enough, locally it builds after enforced cache updates.. travis job fails as previously with \"could not connect to Central\" I think it is some bug in the dependency check plugin https://github.com/jeremylong/DependencyCheck/issues/978 \nAdditionally, I can't understand the problem with org.glassfish.jersey.ext.rx version in dropwizard.client, this was not me  (c). ",
    "mgtriffid": "Thanks for such a quick merge, @joschi! :+1: . Method useProtocol is marked as deprecated, so changing to setProtocol.. SSLContextBuilder#setProvider() calls Security.getProvider() under the hood.\njava\n    public SSLContextBuilder setProvider(final String name) {\n        this.provider = Security.getProvider(name);\n        return this;\n    }\nOracle Standard JDK comes with 10 providers, SUN and SunJCE among them. SUN is what Security.getProviders()[0].getName() returns on my JDK. Index 0 means it has the highest priority. That's why \"SUN\" in the example above. But I think now that it's better to specify default value as SunJSSE, as the provider which will be by default used with TLSv1.2 (in JDK 8) is in fact SunJSSE.\nBC and Conscrypt will work if they were previously configured using Security.addProvider() or Security.insertProviderAt().. There is no desperate need in it, because Security.getProvider(null) doesn't throw NPE, but you're right, better to check. Updated.. ",
    "andrewoh531": "Here are the debug logs below. I can see the Authorization being sent (value replaced for obvious reasons). The unformatted JSON works in POSTMAN so I don't think it's the server either. If there's anything you can point me to I'd appreciate it.\nDEBUG [2018-03-13 20:53:27,844] org.apache.http.client.protocol.RequestAddCookies: CookieSpec selected: ignoreCookies\nDEBUG [2018-03-13 20:53:27,849] org.apache.http.client.protocol.RequestAuthCache: Auth cache not set in the context\nDEBUG [2018-03-13 20:53:27,851] com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager: Connection request: [route: {s}->https://api-stg.Server.com:443][total kept alive: 0; route allocated: 0 of 1024; total allocated: 0 of 1024]\nDEBUG [2018-03-13 20:53:27,876] com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager: Connection leased: [id: 0][route: {s}->https://api-stg.Server.com:443][total kept alive: 0; route allocated: 1 of 1024; total allocated: 1 of 1024]\nDEBUG [2018-03-13 20:53:27,878] org.apache.http.impl.execchain.MainClientExec: Opening connection {s}->https://api-stg.Server.com:443\nDEBUG [2018-03-13 20:53:27,956] org.apache.http.impl.conn.DefaultHttpClientConnectionOperator: Connecting to api-stg.Server.com/11.22.33.44:443\nDEBUG [2018-03-13 20:53:27,956] org.apache.http.conn.ssl.SSLConnectionSocketFactory: Connecting socket to api-stg.Server.com/11.22.33.44:443 with timeout 500\nDEBUG [2018-03-13 20:53:28,130] org.apache.http.conn.ssl.SSLConnectionSocketFactory: Enabled protocols: [TLSv1, TLSv1.1, TLSv1.2]\nDEBUG [2018-03-13 20:53:28,131] org.apache.http.conn.ssl.SSLConnectionSocketFactory: Enabled cipher suites:[TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]\nDEBUG [2018-03-13 20:53:28,131] org.apache.http.conn.ssl.SSLConnectionSocketFactory: Starting handshake\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory: Secure session established\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory:  negotiated protocol: TLSv1.2\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory:  negotiated cipher suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory:  peer principal: CN=Server.com, O=\"CloudFlare, Inc.\", L=San Francisco, ST=CA, C=US\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory:  peer alternative names: [Server.com, *.Server.com]\nDEBUG [2018-03-13 20:53:28,269] org.apache.http.conn.ssl.SSLConnectionSocketFactory:  issuer principal: CN=CloudFlare Inc ECC CA-2, O=\"CloudFlare, Inc.\", L=San Francisco, ST=CA, C=US\nDEBUG [2018-03-13 20:53:28,273] org.apache.http.impl.conn.DefaultHttpClientConnectionOperator: Connection established 11.11.11.11:53818<->11.11.11.11:443\nDEBUG [2018-03-13 20:53:28,273] org.apache.http.impl.conn.DefaultManagedHttpClientConnection: http-outgoing-0: set socket timeout to 500\nDEBUG [2018-03-13 20:53:28,273] org.apache.http.impl.execchain.MainClientExec: Executing request POST /v1/orders HTTP/1.1\nDEBUG [2018-03-13 20:53:28,273] org.apache.http.impl.execchain.MainClientExec: Proxy auth state: UNCHALLENGED\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> POST /v1/orders HTTP/1.1\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Authorization: Basic SECRET\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Content-Type: application/json\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Content-Encoding: gzip\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Transfer-Encoding: chunked\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Host: api-stg.Server.com\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Connection: Keep-Alive\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> User-Agent: Sample Server Integration (Sample Server Integration)\nDEBUG [2018-03-13 20:53:28,276] org.apache.http.headers: http-outgoing-0 >> Accept-Encoding: gzip,deflate\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"POST /v1/orders HTTP/1.1[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Authorization: Basic SECRET[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Content-Type: application/json[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Content-Encoding: gzip[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Transfer-Encoding: chunked[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Host: api-stg.Server.com[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Connection: Keep-Alive[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"User-Agent: Sample Server Integration (Sample Server Integration)[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"Accept-Encoding: gzip,deflate[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"a[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,306] org.apache.http.wire: http-outgoing-0 >> \"[0x1f][0x8b][0x8][0x0][0x0][0x0][0x0][0x0][0x0][0x0][\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,308] org.apache.http.wire: http-outgoing-0 >> \"b3[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,308] org.apache.http.wire: http-outgoing-0 >> \"[0x85][0x8e][0xc1][0xe][0x82]0[0xc][0x86][0xdf][0xa5]g[0x2][0x8b][0xf1]\"'[0x89][0x9e]<p[0xe3][0x1][0xe6],B[0xc2]6[0xd2]u[0x12]Bxw;A[0xaf][0xee][0xd4][0xfe][0xfd][0xbe]v[0xb][0xb0]g=T[0xd6]G[0xc7]P.[0xa0][0xf7][\\n]\"\nDEBUG [2018-03-13 20:53:28,308] org.apache.http.wire: http-outgoing-0 >> \"[0xe]*?)[0xc8][0xc0]D\"tf[0x96][0xa8]j[0xae][0xb0]J[0xe2]][0x88][0x16])[0xe1]c[0xe7][0x1d][0xd6][0xd1][0xde]S[0xb][0xea][0xa8][0xf6]'[0xe2][0xb3]\u007f[0xa1][0xab][0xb5][0xc5] [0x93][0x9b]G[0x89]B$'[0x81][0xf4][0x97][0xef][0x8e][0xc][0xd0][0xea]~[0x90][0x88]1[0xf0]Y[0xb7][0x8c]4[0xea]97[0xde][0xa6][[0x82][0x98]No_#|[0xf4][0x84][0x86][0xc5]m{[0xb2][\\r]%[0xab]c[0x1e]CY[0x14][0xd3]4[0xe5]_8[0xc9][0x85][0xd9](9[0xf0][0xf3][0xb4]38[0xfc][0xd3]>[0x10][0xac][0xeb][0x1b]U[0x92][0xaa][0xbc][0x1a][0x1][0x0][0x0][\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,308] org.apache.http.wire: http-outgoing-0 >> \"0[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,308] org.apache.http.wire: http-outgoing-0 >> \"[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"HTTP/1.1 403 Forbidden[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Date: Tue, 13 Mar 2018 20:53:35 GMT[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Content-Type: text/html; charset=UTF-8[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Transfer-Encoding: chunked[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Connection: keep-alive[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Set-Cookie: __cfduid=d8effcc657ba5bfbaa780fa24639da5251520974415; expires=Wed, 13-Mar-19 20:53:35 GMT; path=/; domain=.Server.com; HttpOnly; Secure[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"X-Frame-Options: SAMEORIGIN[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Strict-Transport-Security: max-age=15552000[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Expect-CT: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Server: cloudflare[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"CF-RAY: 3fb1640e0b47657b-SYD[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"Content-Encoding: gzip[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"830[\\r][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"[0x1f][0x8b][0x8][0x0][0x0][0x0][0x0][0x0][0x0][0x3][0xc5]Xmo[0xdb]8[0x12][0xfe][0xee]_1e[0x81][0xed][0x97][0xc8][0xb2][0xd3]4m[0x1d]IE[0x9a]f[0xb7]9[0xf4][0xb0]E_p[,[\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"[0x83][0xa6]F[0x12]c[0x8a][0xd4][0x92][0x94]_vo\u007f[0xd4][0xfd][0x86][0xfd]c[0xb][0x92][0xb2]#;N[0xfa][0x82];\\[0xf2][0xc5][0xe4][0xc][0x1f][0xce]<[0x9a][0x19][0xe][0x99]<x[0xf5][0xf3][0xc5][0x87]Oo/[0xa1][0xb2][0xb5][0xc8][0x6][0xc9][0x83]([0xfa][0x95][0x17] ,\\][0xc2][0xd3][0xcf][0x19]$N[0x0]LPcR\"Utm[0x80][0xe3])([0x91]s$ [0xa8],S[0x82]2[0xfa][0xf8][0x9e]d[0x90]<[0xf8][0x15]e[0xce][0x8b][0xcf]Qt[0x3][0xd5][0xe1][0x0][0x1c][0x86]z[0xfa]mP[0xcf][0xee][0x81]z[0xf6][\\r]P[0xa5][0xed][0xd0][0xdc][0xc4]!/o[0xa3]D[0xd1].R[0x85]4[0xcf][0x6][0x89][0xe5]V`vn-J[0xcb][0x95][0x84]w[0xf8][[0xcb]5[0xe6][0xf][0xe0][0xdf]p!T[0x9b][0x17][0x82]jL[0xe2][0xa0]7[0x18]$5Z[\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"[0xac][0xa2][0xda][0xa0]M[0xc9][0xc7][0xf]?F[0xcf][0x8][0xc4]Y'[0xa8][0xac]m\"[0x7][0xb1]H[0xc9][0x85][0x92][0xe]5[0xfa][0xb0]n[0x90][0x0][0xb][0xa3][0x94]X\\[0xd9][0xd8][0x19]|[0xb6][0x85][0xb9][0xf][0xe5][0x97][0xe8][0xe3]yt[0xa1][0xea][0x86]Z>[0x13]}[0xa0][0xab][0xcb][0xf4]2/[0xf1][0x88]UZ[0xd5][0x98][0x8e]{[0x0][0x92][0xd6][0x98][0x12][0xad]f[0xca][0x9a][0xde][\\n]\"\nDEBUG [2018-03-13 20:53:28,381] org.apache.http.wire: http-outgoing-0 << \"[0xa9][0xb8][0xcc]qu[0x4]R[0x15]J[0x8][0xb5][0xbc][0xb5]d[0xc1]q[0xd9](m{[0x8b][0x96]<[0xb7]U[0x9a][0xe3][0x82]3[0x8c][0xfc][0xe0][0x88]Kn9[0x15][0x91]aT`:>[0xaa][0xe9][0x8a][0xd7]m[0xbd][0x19][0x7]T[0xc1][0xe5][0x1c]4[0x8a][0x94][0x18][0xbb][0x16]h*DK[0x80][0xe7])a[0xc5]4LE[0xcc][0x18][0x2][0x95][0xc6]\"%1[0xcb]e[0xc4]J[0x1e][0x7]Q[0xcc][0x8a]!j[0xad][0xb4][0x19]z%[0xbb]n[0xb0][0xe3][0xce][0x8f]k[0xcc]9M[0x89]a[0x1a]Q[0x1e]5Z]#s[0x1f]0[0xec][0xbd][0x93][0x7][0xcf]?gw[0x1b][0xf3][0xe8][0xc6][0x18][0x8e][0xce][0x9e]G_[0xb4][0x87][0xe3][0xb7][0x9b][0xb4][0x1b]{[0x1e]r\u007f}6S[0xf9][0xfa][0x8f][0x9a][0xea][0x92][0xcb][0xc9][0xe8][0xac][0xa1]y[0xce]e9[0x19][0xfd][0x99][0x4][0x13][0xfa]n[0xe1][0xc6]/[0xc3]4ol[0x1f][0xea][0x9a].h[0x98]%`4[0xeb];[0xe2]gM|[0xfd][[0x8b]z=[0xac][0xb9][0x1c]^[0x1b][0x92]%[0x9d] [0xbb]#[0xd3][0xfc]^[0xe3]Q[0x97]k[0xdf][0xb5][0xe3][0xef][0xd8]Xuh[0xc3][0xfd][0xa4][0xfc][0x1e]pV[0xc][0x99][0xaa]k[0xb5][0x7]>[0x18][0xc][0x92][0xb8]Kr[0xc7]l6[0x0]Hr[0xbe][0xe8]\"0Zj[0xda]4[0xa8][0x89][0x9b][0xef]$][0x1]aED[0x5]j[0xb][0x9b][0x1f][0x91][0xff][0xf0]n[0xc8][0x94][0x9a]s[0xc][0xe3].[0x96][0xc3][0x8c][0xd7]#[0x90]SK#[0xab][0xa9]4[0x82]Zt[0xe5][0x87][0xce][0x4]N[0x83][0x92]![0xd9][[0x81][0xd4] [0x84]i[0xe8][0xa6][0x87]I[0x9c][0xf3]E[0xcf][0x8e][0xce]B[0xbf]K[0x94][0xa3][0xa5]\\[0xb8],[0xde]Z[0xb7]#[0xd8]s[0xe4][0x96]+[0x9d][0xd8]Y[0xef][0xd8][0x8][0xbf][0x2][0x82]Z[0xa0]v[0x9][0xbf]][0xea]*[0xf3][0xf8][0x96][0x13][0xac][0xa2]B[0xa0],q[0xea][0x0][0x4][0x97]H[0xb2][0x9f]%B[0xad]4[0x82][0xb1][0xd8]$q5[0xee]C[0x1c][0xf7][0xb6]7[0xed][0xec]fUb[0x1a]*o[0xe3][0xab][0xba][0x11]hqj[0x90]MY[0x85]l[0xbe]%j#[0x2][![0x18]d[0xad][0xe6]v[\\r]^[0x7][0xac][0x2][0xca][0x18][0x1a][0x93][0xc4][0xe]6[0x3]ZX[0xd4][\\r]][0xbb]pH[0xe2][0xea]xK[0x88][0xa7][0xd7][0x5][0x1b][0xc4][0xc3][0x8e][0x3][0x17]mAz[0x98]5[0x13]R[0xd7][0xb3][0xc6][0xcb]J[0xf0][0xb2][0xf2][0xf1][0xc0]hcYE#W[0x1d])[0x97]=[0xda][0xef]\"[0xbe][0xa7]pK[0x85])[0xd1][0xd6][0xd2][0x80]][0xaa][0x1d][0xb5];[0x14]\"\nDEBUG [2018-03-13 20:53:28,384] org.apache.http.headers: http-outgoing-0 << HTTP/1.1 403 Forbidden\nDEBUG [2018-03-13 20:53:28,384] org.apache.http.headers: http-outgoing-0 << Date: Tue, 13 Mar 2018 20:53:35 GMT\nDEBUG [2018-03-13 20:53:28,384] org.apache.http.headers: http-outgoing-0 << Content-Type: text/html; charset=UTF-8\nDEBUG [2018-03-13 20:53:28,384] org.apache.http.headers: http-outgoing-0 << Transfer-Encoding: chunked\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Connection: keep-alive\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Set-Cookie: __cfduid=d8effcc657ba5bfbaa780fa24639da5251520974415; expires=Wed, 13-Mar-19 20:53:35 GMT; path=/; domain=.Server.com; HttpOnly; Secure\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << X-Frame-Options: SAMEORIGIN\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Strict-Transport-Security: max-age=15552000\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Expect-CT: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Server: cloudflare\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << CF-RAY: 3fb1640e0b47657b-SYD\nDEBUG [2018-03-13 20:53:28,385] org.apache.http.headers: http-outgoing-0 << Content-Encoding: gzip. Thanks! I did some more digging around and it appears it's registered by Jersey. Here's an open issue against Jersey on the issue: https://github.com/jersey/jersey/issues/3425\nI was hoping there might be a more elegant way but looks like there isn't :( . ",
    "hheg": "I'm getting almost the same problem.\nWARN   [22:06:12.763] [main] o.g.j.i.Errors -  The following warnings have been detected: WARNING: Parameter authFilterClass of type java.lang.Class<? extends javax.ws.rs.container.ContainerRequestFilter> from private final java.lang.Class<? extends javax.ws.rs.container.ContainerRequestFilter> io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type.\nDropwizard 1.3.0 and Oracle java 9.0.4+12. ",
    "psimonazzi": "I see the same warning as @hheg, in a plain Java project.\nHere is a minimal test project that uses the same code found in the Authentication chapter of the documentation.\ndropwizard-test1.zip\n./gradlew installDist\n./build/install/dw-test/bin/dw-test\nYou shoud see the warning in the logs.\n. ",
    "johannesheinz": "+1\nSame here. I also used the code snippets about Authentication in the docs.. ",
    "VibyJocke": "+1\nI'm getting the same warning with a Java 8 project using Dropwizard 1.3.0 and 1.3.1. The authentication is implemented according to the OAuth2 example in the docs.. ",
    "SoftwAal": "+1. ",
    "glfp": "+1 also with Java 10. +1 also with Java 10. +1. Thanks ! Tested, now works well !. ",
    "cuzz22000": "Still seeing this warning with v1.3.3 on Java 8.. Sorry false alarm my bad.. imported module for swagger is importing v1.3.1 dependancies for auth. assets, and views. Tested with refreshed dependancies for module on DW v1.3.3 and warnings have vanished.\nFor reference repo can be found here -> https://github.com/cuzz22000/dropwizard-ornament. ",
    "llyys": "showDetails: true\nIs not sufficient, I don't want to expose to the world about error details in json response. This part is fine.\nBut I need to have information about Error that caused this.\nSo if there was some error at 2am, I'm unable to see anything from error log, \neven if I configure logger io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: DEBUG\nThis will be still logged as debug not an error.\nIf you annoyed about these errors, you can turn off logger for JsonProcessingExceptionMapper, and sleep well ;)\nBut rest of developers should not suffer and struggle by swallowed exceptions in log. \n. The appender will still output log message starting with \n... DEBUG : .... \nAnd you should avoid logging DEBUG level messages in prod.\n\nIf you want to see the details, enable debug logging.\n\nI would argue that its much easier to pinpoint from log output what class logs you don't want to see and add those classes to certain level.\nas  io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: NEVER\nrather than specifically googling and figuring out that there should be some DEBUG level logging switched on.\nRight now initially it's hard to figure out what's wrong with api, Unable to process JSON clearly indicates that there is something wrong and error log should be place to take a look, but if developer has not specifically configured\nio.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: DEBUG it's only guessing and stumbling without any help from logs or anywhere.\nAlso, by seeing something like this in prod log config\nio.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: DEBUG \nis wierd and it feels wrong.\nWhat I'm trying to say is that helpful error messages are really important, and useful for rapid issue resolving. \nThis issue caused me approx 4 hours of stumbling without any clue what's wrong with the api. \nI had no clue that there is needed such hack, to set specific class to DEBUG level, to see an internal binding error real cause, and I'm trying to help other developers in future, avoiding being stuck with no clue what's wrong with JSON binding. \n. ",
    "pstorch": "I think the problem is here https://github.com/dropwizard/dropwizard/blob/117cd08130cfebb1e78345672edf7b922d6e215e/dropwizard-logging/src/main/java/ch/qos/logback/core/recovery/ResilentSocketOutputStream.java#L54\nThis method is not overrideable from outside the package. Maybe we can ask over here  http://jira.qos.ch/secure/IssueNavigator.jspa to open it to be overrideable by any subclass? . I've opened a ticket here: https://jira.qos.ch/browse/LOGBACK-1400. I've also opened a PR for Logback to fix it: https://github.com/qos-ch/logback/pull/417\nBut there wasn't a commit to logback since February and there are a lot of open PRs. So I don't expect anything soon.\nWhat else can be done in Dropwizard? Extract the ResilentSocketOutputStream class in it's own jar file (e.g. module) which can be excluded in case an app wants to use another logging implementation? \nOther ideas?. ",
    "gmariotti": "Thanks @joschi. I imagine that the only possible solution is to use the DropwizardAppRule, am I correct?. ",
    "corcorb": "FWIW, I was able to work around this by explicitly adding javax.xml.bind:jaxb-api as a dependency \u2014 would it make sense for this to be added as dependency for Jackson itself?\nxml\n    <dependency>\n        <groupId>javax.xml.bind</groupId>\n        <artifactId>jaxb-api</artifactId>\n        <version>2.3.0</version>\n    </dependency>. ",
    "jmrodriguez": "I fixed the java.lang.NoClassDefFoundError: javax/activation/DataSource error by adding the next dependency in the POM\n<dependency>\n            <groupId>javax.activation</groupId>\n            <artifactId>activation</artifactId>\n            <version>1.1.1</version>\n        </dependency>\nand fixed the JAXB issues by adding these other dependencies\n<dependency>\n            <groupId>javax.xml.bind</groupId>\n            <artifactId>jaxb-api</artifactId>\n            <version>2.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.sun.xml.bind</groupId>\n            <artifactId>jaxb-core</artifactId>\n            <version>2.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.sun.xml.bind</groupId>\n            <artifactId>jaxb-impl</artifactId>\n            <version>2.3.0</version>\n        </dependency>\nI also had to add these two properties to in the pom\n<maven.compiler.source>1.9</maven.compiler.source>\n        <maven.compiler.target>1.9</maven.compiler.target>\nThe application now runs, however the Jackson reflection warning still shows up. ",
    "suryatej16": "This issue would have been detected with the following fix #2295 . Thanks for the response! Yes, I will open a PR to add the dependency check.. @joschi created PR #2323 . @joschi Added a suppression file to ignore false positives. Just a general question, how did you distinguish those as false positives?. Updated with review comments.. ",
    "PixxelP": "Thanks for the info!. ",
    "LeducH": "Thanks  for your notes. Let me be a concrete. So consider the example  link\n@isaki-x \nWhere would I integrate the in memory buffer? \n@pavelkokush \nI assume I need to add an additional argument to the uploadFile method to be able to the ServletFileUpload \n. The funny thing is I tried this method that you proposed.  As you might see further down the bad think is sometimes when the files are to large it takes quite long. There was a hint to look into the WriteInterceptor. \nWhen I found something I will post my findings\n```java\n@POST\n  @Consumes(MediaType.MULTIPART_FORM_DATA)\n  public Response uploadFile(\n      @FormDataParam(\"file\") InputStream uploadedInputStream,\n      @FormDataParam(\"file\") FormDataContentDisposition fileDetail)\n      throws IOException {\n    String fileName = fileDetail.getFileName();\n    String uploadedFileLocation = uploadPath + fileName;\nLong size = writeToFile(uploadedInputStream, uploadedFileLocation);\n return Response.ok(size).build();\n\n}\n// save uploaded file to new location\n  private Long writeToFile(InputStream uploadedInputStream, String uploadedFileLocation)\n      throws IOException {\n    int read;\n    final int BUFFER_LENGTH = 1024;\n    final byte[] buffer = new byte[BUFFER_LENGTH];\n    long size = 0;\n    OutputStream out = new FileOutputStream(new File(uploadedFileLocation));\n    while ((read = uploadedInputStream.read(buffer)) != -1) {\n      out.write(buffer, 0, read);\n      size += read;\n      if (size > 2 * 1014 * 1024) {\n        LOGGER.info(\"FileMetaData size exceeds 2MB\");\n        throw new BadRequestException(\"Server unavaible\");\n      }\n    }\n    out.flush();\n    out.close();\n    return size;\n}\n```\n. ",
    "PeterWippermann": "You're welcome! This was a nice chance to learn a bit more about javadoc ;-)\nThank you for maintaining this project!. ",
    "boogie4eva": "This issue still persists for 1.3.5 . ",
    "matt-snider": "@manuel-hegner since you contributed this feature it would be great to get some feedback. Maybe constraint violations were intended to be handled differently and this is the wrong spot for it? Let me know.. ",
    "trustin": "I think it's doable with sphinxcontrib-redoc - https://sphinxcontrib-redoc.readthedocs.io/. ",
    "atkawa7": "Checkout https://github.com/atkawa7/httpsnippet for generating code snippets with springfox and redoc. ",
    "vishal-kedia": "@nickbabcock  I have tried all of that and it doesn't work, if we remove the entity from the response in exception mapper then it works fine.. New exception mapper with which i tried.\n```\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.ext.ExceptionMapper;\nimport com.test.TestException;\nimport io.dropwizard.jersey.errors.ErrorMessage;\npublic class TestExceptionMapper implements ExceptionMapper{\n@Override\n  public Response toResponse(TestException exception) {\n    return Response.ok(new ErrorMessage(\"test\")).build();\n  }\n}\nand simplified exception as below:\npublic class TestException extends RuntimeException{\n/*\n   * \n   /\n  private static final long serialVersionUID = -7005260865437222239L;\n}\nand error throwing resource:\n@Path(\"/v2/test\")\npublic class TestResource {\n@GET\n  public Response test() {\n    throw new TestException();\n  }\n}\n``. and it gives the same error -Error while closing the output stream in order to commit response.. @nickbabcock sorry for trouble, i have done the stupidest mistake possible. Forgot to initialize thecodeinApplicationExceptionCode constructor. and in exception mapperex.getCode().getCode()is returning 0 and status is getting set as 0 in responseResponse.status(ex.getCode().getCode())`. Thanks for all the help.. ",
    "giordy": "After some more debugging I noticed that the method that was not functioning properly was not marked as open.\nSo both the class and the methods must be declared as open (=extendable). \nIf you don't declare anything as open you will get an error at run time about the class being final. \nIf you use open only on the class, no error will be printed and the code will fail silently.. ",
    "black-snow": "@joschi There you go:\n```java\npublic class FrontendTestingApplication extends Application implements Observer {\nprivate static FrontendTestingApplication instance;\n\npublic static void main(final String[] args) throws Exception {\n    instance = new FrontendTestingApplication();\n    instance.run(args);\n}\n\npublic static FrontendTestingApplication getInstance() {\n    if (instance == null)\n        instance = new FrontendTestingApplication();\n    return instance;\n}\n\n@Override\npublic String getName() {\n    return \"FrontendTesting\";\n}\n\n@Override\npublic void initialize(final Bootstrap<FrontendTestingConfiguration> bootstrap) {\n    bootstrap.addCommand(new TestCommand<FrontendTestingConfiguration>(this));\n}\n\n...\n\n```\n```java\npublic class TestCommand extends ConfiguredCommand {\nprivate FrontendTestingApplication app;\n\nprotected TestCommand(Application<B> app) {\n    super(\"test\", \"xy\\r\\n\");\n    this.app = (FrontendTestingApplication) app;\n}\n\n...\n\n```\n```java\npublic class FrontendTestingConfiguration extends Configuration {\n@NotEmpty\nprivate String whatever;\n\n@JsonProperty(\"whatever\")\npublic String getWhatever() {\n    return whatever;\n}\n\n@JsonProperty(\"whatever\")\npublic void setWhatever(String whatever) {\n    this.whatever = whatever;\n}\n\n}\nyml\nlogging:\n  level: INFO\n  loggers:\n    \"org.apache.http.client.protocol.ResponseProcessCookies\": \"OFF\"\nwhatever: test\n``. See the exampleMyConfig` in the first post - I just changed the name.. Updated https://github.com/dropwizard/dropwizard/issues/2357#issuecomment-388802017. That worked! Thanks Jochen!. ",
    "velo": "Well, for junit 5 I assume a whole lot of the testing framework need to be refactored.. @nickbabcock done, new test created\nhttps://github.com/dropwizard/dropwizard/pull/2358/files#diff-5437abfdefaf76c4162e6d7eae39ee09. And it passed on jdk 10 (also here)... extremely odd. If another ExceptionMapper captures it first it will do whatever the original exception mapper did.  This one will only trigger for uncaught exceptions.\nThe services I already have, and testing using this, are working fine.. owww, sorry, now I get what you mean.\nSo, if you add a custom new LoggingExceptionMapper<Throwable>, the one include on test support won't trigger....\nThis only collects uncaught exceptions.  I handle a few exceptions as 400 and when I do that nothing is collected here.. Na, I'm happy with it.. ",
    "Sessa93": "@joschi Also minimizeJar is set to false, ProGuard and Maven Shade do not exclude anything related to dropwizard/jackson. The version of jackson-databind is 2.5.3, which does not include ReferenceType\nI think this is implied by the current version of dropwizard (1.3.2), correct?. Sorry, i've posted the wrong output of # mvn dependency:tree now it is correct. ",
    "maxbalan": "was my mistake as I thought forgot the injection \nenvironment.jersey().register(new AuthValueFactoryProvider.Binder<>(Identity.class));. ",
    "monler": "Ah, that's a bummer :(\nThanks anyway.\nI was trying to prevent users seeing the template errors. I find out that freemarker has a feature which is attempt-recover. It solves my issue at least for now.. ",
    "rogatty": "It would be great to have this implemented one way or another. I created a ticket in Freemarker issue tracker: https://issues.apache.org/jira/browse/FREEMARKER-103. @ddekany you're right, I've tried it and it works as expected. I was confused by the fact that it's not anywhere in the Configuration::setSetting method. I suspect @monler didn't pass configuration from the yaml file to getViewConfiguration method as I did at first.\nThanks!. ",
    "StephenSouness": "Sorry for my confusing naming convention there.  I originally copied and pasted without checking that the wording made sense - I have now edited the issue to indicate that the second UUID can be regarded as \"mutated\".\nI only ran the test a couple of times myself, so only witnessed that the original and mutated values were never equal.\nI don't think that the possibility of two outcomes detracts from the reported issue though.. My bad.  I could have specified a much simpler mutation and never triggered the overflow.\nI'm not sure if there is a preferred approach to validating UUID - perhaps a regular expression would suffice?  Then throw an exception if the input does not match.\nAnother alternative that I have just come across involves comparing the UUID's toString value against the original input String.. 100% agree.\nThe regular expression approach is a little bit complex, particularly if catering for an edge case (nil/null value).. Cheap is good.\n\ud83d\udc4d . ",
    "ochedru": "If the remote log service has very good response times, I am afraid limiting the queue capacity will not help.. The problem with Guava's RateLimiter is that it will not allow small bursts of messages without blocking, so I went for a simple implementation based on a ring buffer of timestamps. It does not block until the time window is \"full\".\nI still have to fix the tests in the PR, though.. Your approach using ops makes sense as well. However, I have two problems with RateLimiter:\n\n\nGuava will block temporarily even if we are under the limit on average. For example, if the limit is 10 logs per second, but the application is logging every second 5 messages in a row, that will take 0.5 second with the rate limiter.\nIdeally, we would implement throttling in the worker thread and this would not be a problem. But this is not possible because the worker code is deep inside logback.\nThat is why I have to throttle before enqueing the message. At this point, I think it is not acceptable to wait: this makes the whole async logging useless. My throttle implementation decides without waiting if the incoming message is kept and sent to the queue, or discarded.\n(Yes, RateLimiter has the tryAcquire method to avoid blocking, but then we will likely discard messages whereas we are under the limit on average.)\n\n\nRateLimiter is configured with an integer number of permits per second. This is less flexible that a time window and a number of messages. If I want to configure throttling for 50000 messages per day, I cannot do that directly with RateLimiter.\n. My bad, I did not read thoroughly the documentation: RateLimiter is indeed suitable for our use case. Thank you for pointing me to this page!\nI updated the PR but I still have to fix the tests regarding timing differences between the CI platforms... I will try to get rid of the ugly Thread.sleep() calls using a CountDownLatch or something.. Following your comments, I amended the PR to use a throttle defined by a Duration.. Sounds good. It must be @Nullable as well, I guess.. \n\n",
    "AntonQUT": "Thanks Nick, I'll try - although I think the problem is the dependencies with the other applications I am running (Elastic Search and Galago). So if I take these out, I am guessing the problem will disappear.  Here is the POM file - if you see anything obvious, can you please tell me:\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<modelVersion>4.0.0</modelVersion>\n<prerequisites>\n    <maven>3.0.0</maven>\n</prerequisites>\n\n<groupId>com.anton.taskiirservice</groupId>\n<artifactId>TaskiirService</artifactId>\n<version>0.0.1-SNAPSHOT</version>\n<packaging>jar</packaging>\n\n<name>TaskiirAPI</name>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <dropwizard.version>1.2.2</dropwizard.version>\n    <mainClass>com.anton.taskiirservice.TaskiirService.TaskiirAPIApplication</mainClass>\n    <swagger.version>1.5.3-M1</swagger.version>\n    <jdk.version>1.8</jdk.version>\n</properties>\n\n\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>${dropwizard.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-jdbi</artifactId>\n        <version>${dropwizard.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.39</version>\n    </dependency>\n\n    <dependency>\n        <groupId>com.wordnik</groupId>\n        <artifactId>swagger-annotations</artifactId>\n        <version>${swagger.version}</version>\n    </dependency>\n\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>transport</artifactId>\n    <version>5.3.2</version>\n</dependency>\n<dependency>\n  <groupId>com.google.code.gson</groupId>\n  <artifactId>gson</artifactId>\n  <version>2.7</version>\n  <scope>compile</scope>\n</dependency>\n\n\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>2.4.1</version>\n            <configuration>\n                <createDependencyReducedPom>true</createDependencyReducedPom>\n                <transformers>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                        <mainClass>${mainClass}</mainClass>\n                    </transformer>\n                </transformers>\n                <!-- exclude signed Manifests -->\n                <filters>\n                    <filter>\n                        <artifact>*:*</artifact>\n                        <excludes>\n                            <exclude>META-INF/*.SF</exclude>\n                            <exclude>META-INF/*.DSA</exclude>\n                            <exclude>META-INF/*.RSA</exclude>\n                        </excludes>\n                    </filter>\n                </filters>\n            </configuration>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                    <configuration>\n                        <transformers>\n                            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n                            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                <mainClass>${mainClass}</mainClass>\n                            </transformer>\n                        </transformers>\n                    </configuration>\n\n                </execution>\n            </executions>\n        </plugin>\n        <plugin>\n            <artifactId>maven-jar-plugin</artifactId>\n            <version>2.6</version>\n            <configuration>\n                <archive>\n                    <manifest>\n                        <addClasspath>true</addClasspath>\n                        <mainClass>${mainClass}</mainClass>\n                    </manifest>\n                </archive>\n            </configuration>\n        </plugin>\n        <plugin>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.6.1</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n        <plugin>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.4</version>\n            <executions>\n                <execution>\n                    <id>attach-sources</id>\n                    <goals>\n                        <goal>jar</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n        <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.10.3</version>\n            <executions>\n                <execution>\n                    <id>attach-javadocs</id>\n                    <goals>\n                        <goal>jar</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n\n<reporting>\n    <plugins>\n        <plugin>\n            <artifactId>maven-project-info-reports-plugin</artifactId>\n            <version>2.8.1</version>\n            <configuration>\n                <dependencyLocationsEnabled>false</dependencyLocationsEnabled>\n                <dependencyDetailsEnabled>false</dependencyDetailsEnabled>\n            </configuration>\n        </plugin>\n        <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.10.3</version>\n        </plugin>\n    </plugins>\n</reporting>\n\n\n`\n. ",
    "aschilling": "Thank you for your suggestion. Is there a way to use EnvironmentVariableSubstitutor together with System Rules?. As described in https://www.dropwizard.io/0.8.0/docs/manual/core.html#environment-variables I would like to have in my code environment variables declared like:\n\ndefaultSetting: ${DW_DEFAULT_SETTING:-default value}\n\nHowever, to do so I need to modify the initialize method to add the SubstitutingSourceProvider, which is located in the Application class which in turn is not used if I use DropwizardClientRuleto test my code\n. Sorry it was a missunderstanding. Thank you very much for your hep. Just found that #2045 already discussed the problem I am facing, sorry for the duplicated question. Thank you for your response and sorry for not beeing precise enough.\n\n\nWhen given the dropwizard config that uses json logging and includes requestContent\nOne would expect that the request content is logged to the console\nInstead the content is always \"\" (verified this), as the content stream will be consumed to deserialize the body\n\n\nNo this is not my point and it is not the case. When using your dropwizard config, the requestContent is printent to std-out. However, it is directly printed to std-out without consideration of any configured TeeFilter. This behavior is different if you use the regular request log such as:\nserver:\n  requestLog:\n    appenders:\n      - type: console\n        logFormat: '\"requestContent\":{%requestContent}'\nWhen using this dropwizard configuration any configured TeeFilter is considered for printing the requestContent to std-out. This behavior is also documented in here https://logback.qos.ch/manual/layouts.html#AccessPatternLayout under the requestContent variable.\nA particular use case where I use the TeeFilter configuration is to stip away confidential data embedded in the requests content, when logging the request.\nTo be clear I do not suggest any behavioral change for registering the TeeFilter. I just want to point out that the TeeFilter is considered for printing and modifying the request content in case of the regular request access log, but not considered if the access-json is used as layout option.\nBest regards\nAndy\n. Sure:\npublic class ExtendedTeeFilter extends TeeFilter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n        super.doFilter(request, response, filterChain);\n        request.setAttribute(AccessConstants.LB_INPUT_BUFFER, \"this is a test\".getBytes(UTF_8));\n    }\n}\nMake also sure to register in the Dropwizard run method via\nenvironment.servlets().addFilter(\"teeFilter\", ExtendedTeeFilter.class).addMappingForUrlPatterns(null, false, \"/*\");\n. ",
    "ralemy": "That is awesome and makes perfect sense. Thanks, Nick. \nShould I submit a pull request then, and if the changes were not too much perhaps you approve it?. ",
    "DrMattFaulkner": "FYI the use case here is for AWS and to use IAM Auth Token instead of passwords. With the tokens rotating. \nOnce a connection is created I think it's OK for that to \"hang\" around even after a password change. But any new connections would need to pickup the new details.\nI will take a look and see if this is something that can easily be done.. Any news on when 2.0.0 will be released? Or even a version with backports for compatibly with JDK11?. ",
    "haasted": "I'm embarrassed to say that it's somehow working now, seemingly without any modifications. Must have had a bad day.\nApologies for the inconvenience, and thanks for putting together a great stack!. Minor update as I found the source of the issue.\nI had experimented with using Grizzly as a test container, but unfortunately neglected to depend on the same version imported by DW. \nIt seems that merely the presence of the incorrect jersey-test-framework-provider-grizzly on the classpath was enough to trigger the issue, i.e. adding the following caused the problem:\ntestCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.27'\n\nChanging the version to 2.25.1 fixed the issue.. ",
    "ben-manes": "Thanks for this! \ud83d\ude04 \nI don't know if its helpful, but I did notice an instrumented cache. A minor enhancement over Guava was to allow for a custom StatsCounter, with the canonical example using Dropwizard. This allows for push-based stats collection if that helps for code reuse.\nI would implore you to not use JCache if that is seriously considered in a later iteration. I think it is mostly harmful, as it was designed for selling vendorware and not for helping developers. I can go into technical details later if necessary.. fyi, you can set Caffeine.executor(Runnable::run) so that asynchronous work (like eviction) is run on a calling thread. This is especially convenient for unit tests, where you might inject in that configuration while keeping the default async. (The eviction work is cheap, so async here is merely to smooth out tail latencies but often not necessary).. You're welcome! \ud83d\ude04 \nbtw, when you do have to wait for asynchronous results, Awaitility is a very elegant alternative to Thread.sleep.. Oh, are you depending on an eviction order? The cache is not LRU and has some inherent randomness to protect from HashDoS style attacks.. We brute force through over a million tests, taking 1hr on travis (parallelized). Yet somehow I still sneak a few bugs in there... \ud83d\ude1e\nbut yeah, should be on me if it breaks \ud83d\ude04 . ",
    "cmckn": "This will do it:\n\nimport io.dropwizard.Application;\nimport io.dropwizard.Configuration;\nimport io.dropwizard.setup.Environment;\n\npublic class MetricRegistryBugApplication extends Application<Configuration>\n{\n    public static void main( String[] args ) throws Exception\n    {\n        new MetricRegistryBugApplication().run( \"server\" );\n    }\n\n    @Override\n    public void run( Configuration c, Environment e ) throws Exception\n    {\n        String json = e.getObjectMapper().writeValueAsString( e.metrics() );\n    }\n}\n\nSeems to be an issue with a different IllegalName, but under no circumstances can I get a MetricRegistry to serialize via Jackson with a 1.3.x release:\n\ncom.fasterxml.jackson.databind.JsonMappingException: Failed to load class 'com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf': IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf (through reference chain: com.codahale.metrics.MetricRegistry[\"metrics\"]->java.util.Collections$UnmodifiableMap[\"jvm.threads.deadlocks\"])\n    at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:291)\n    at com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(SerializerProvider.java:1223)\n    at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1342)\n    at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:510)\n    at com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(PropertySerializerMap.java:90)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(MapSerializer.java:1043)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer._findSerializer(MapSerializer.java:1148)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:716)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:639)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)\n    at com.fasterxml.jackson.module.afterburner.ser.ObjectMethodPropertyWriter.serializeAsField(ObjectMethodPropertyWriter.java:87)\n    at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719)\n    at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)\n    at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3905)\n    at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3219)\n    at com.test.metricregistrybug.MetricRegistryBugApplication.run(MetricRegistryBugApplication.java:22)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87)\n    at io.dropwizard.cli.Cli.run(Cli.java:78)\n    at io.dropwizard.Application.run(Application.java:93)\n    at com.test.metricregistrybug.MetricRegistryBugApplication.main(MetricRegistryBugApplication.java:16)\nCaused by: java.lang.IllegalArgumentException: Failed to load class 'com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf': IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf\n    at com.fasterxml.jackson.module.afterburner.util.MyClassLoader.loadAndResolve(MyClassLoader.java:100)\n    at com.fasterxml.jackson.module.afterburner.ser.PropertyAccessorCollector.generateAccessorClass(PropertyAccessorCollector.java:170)\n    at com.fasterxml.jackson.module.afterburner.ser.PropertyAccessorCollector.findAccessor(PropertyAccessorCollector.java:97)\n    at com.fasterxml.jackson.module.afterburner.ser.SerializerModifier.changeProperties(SerializerModifier.java:63)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:381)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:279)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:231)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:165)\n    at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1389)\n    at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1336)\n    ... 20 more\nCaused by: java.lang.NoClassDefFoundError: IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf\n    at java.lang.ClassLoader.preDefineClass(ClassLoader.java:654)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:761)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:642)\n    at com.fasterxml.jackson.module.afterburner.util.MyClassLoader.loadAndResolve(MyClassLoader.java:94)\n    ... 29 more\n\n. Same issue. I've tried all the methods available in MetricRegistry to build a serializable Collection of Metric-s. No dice. I also can't for the life of me find where and how the /metrics endpoint on the administrative port is serviced. Thanks for taking the time!\n\nimport io.dropwizard.Application;\nimport io.dropwizard.Configuration;\nimport io.dropwizard.setup.Environment;\n\npublic class MetricRegistryBugApplication extends Application\n{\n    public static void main( String[] args ) throws Exception\n    {\n        new MetricRegistryBugApplication().run( \"server\" );\n    }\n\n    @Override\n    public void run( Configuration c, Environment e ) throws Exception\n    {\n        String json = e.getObjectMapper().writeValueAsString( e.metrics().getMetrics() );\n    }\n}\n\nwill cause:\n\ncom.fasterxml.jackson.databind.JsonMappingException: Failed to load class 'com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf': IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf (through reference chain: java.util.Collections$UnmodifiableMap[\"jvm.threads.deadlocks\"])\n    at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:291)\n    at com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(SerializerProvider.java:1223)\n    at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1342)\n    at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:510)\n    at com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(PropertySerializerMap.java:90)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(MapSerializer.java:1043)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer._findSerializer(MapSerializer.java:1148)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:716)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:639)\n    at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)\n    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)\n    at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:3905)\n    at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3219)\n    at com.test.metricregistrybug.MetricRegistryBugApplication.run(MetricRegistryBugApplication.java:22)\n    at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43)\n    at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87)\n    at io.dropwizard.cli.Cli.run(Cli.java:78)\n    at io.dropwizard.Application.run(Application.java:93)\n    at com.test.metricregistrybug.MetricRegistryBugApplication.main(MetricRegistryBugApplication.java:16)\nCaused by: java.lang.IllegalArgumentException: Failed to load class 'com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf': IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf\n    at com.fasterxml.jackson.module.afterburner.util.MyClassLoader.loadAndResolve(MyClassLoader.java:100)\n    at com.fasterxml.jackson.module.afterburner.ser.PropertyAccessorCollector.generateAccessorClass(PropertyAccessorCollector.java:170)\n    at com.fasterxml.jackson.module.afterburner.ser.PropertyAccessorCollector.findAccessor(PropertyAccessorCollector.java:97)\n    at com.fasterxml.jackson.module.afterburner.ser.SerializerModifier.changeProperties(SerializerModifier.java:63)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:381)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:279)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:231)\n    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:165)\n    at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1389)\n    at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1336)\n    ... 17 more\nCaused by: java.lang.NoClassDefFoundError: IllegalName: com.codahale.metrics.jvm.ThreadStatesGaugeSet$$Lambda$57/802243390$Access4JacksonSerializer998fedcf\n    at java.lang.ClassLoader.preDefineClass(ClassLoader.java:654)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:761)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:642)\n    at com.fasterxml.jackson.module.afterburner.util.MyClassLoader.loadAndResolve(MyClassLoader.java:94)\n    ... 26 more\n. You beat me to it, but yes; the MetricRegistry is written to an OutputStream using ObjectWriter#writeValue within MetricsServlet#doGet. My tests fail with the same error as above using equivalent calls. Can anyone reproduce this? I've seen the issue in several of my own projects using various Dropwizard versions, as well as the example application.. Yes, I discovered this outside of testing. I only used testing resources to get stack traces -- here's an application with a /metrics endpoint. I get a 400 response. Thanks for looking into it!. >As a workaround, you can use Jackson.newMinimalObjectMapper() (which doesn't register the afterburner module), to serialize the registry.\nYou're a wizard -- this is totally adequate for now. Wish I had more to contribute, but I'm stumped on this. Could there be classpath differences between testing and not?\nEnjoy your holiday and thanks again!. ",
    "supreethrao": "Thanks for the response but I did not realise we were using a custom encoder which reads the appender type console-json. . ",
    "mikey-t": "That's what I needed, thanks! Is it true to assume that most people would know to do that or is that something that should be added to the readme for beginners like me?. I ran mvn not mvnw and I ran it in the dropwizard-example directory and not the root dropwizard directory. That might have been implied for someone not so new to Java - I'm not sure.. ",
    "tsundberg": "@joschi, I had no idea :)\nBut I also see that you clarified the docs a bit more which is what I really was looking for.\nEvery small step in a good direction counts.. ",
    "MurahariVadapalli": "CREATE TABLE mapped_identifer (mappedIdentifierID  NUMBER(19) UNSIGNED GENERATED always as IDENTITY(START with 1 INCREMENT by 1) PRIMARY KEY,\n    namespaceID NUMBER(10) NOT NULL,\n    vendorIdJson CLOB NOT NULL,\n    vendorIdJsonMd5 VARCHAR2(32) NOT NULL,\n    createdTime TIMESTAMP default CURRENT_TIMESTAMP,\n    updatedTime TIMESTAMP default CURRENT_TIMESTAMP,\n    status NUMBER(10) default '0' NOT NULL,\n    CONSTRAINT UC_Mapped_Id_NsID_VeIdJsonMd5 UNIQUE(namespaceID,vendorIdJsonMd5)\n  ) ;\nThis is my schema for accessing the db using the ojdbc in the drop wizard\n. ",
    "artheus": "Even type: classic is not working. \nI've tried by using this config:\n...\nserver:\n  requestLog:\n    type: classic\n    appenders:\n      - type: console\n...\nRunning this in Debug mod in IntelliJ setting a breakpoint at the row I linked to in the previous comment, gives me this:\n\nWhich to me is proof that the type parameter for requestLog is completely ignored.. Sorry. My bad. For some weird reason I was using version 1.0.0, not latest. Updating my pom to use the latest version, everything works as expected.. ",
    "serhiypal": "Could it be a misuse of Jersey resource api at? https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/common/Resource.java#L66\nAccording to Jersey logic it verifies that the value provided is not local, abstract, interface, inner etc.\nIn the case above it can fail the check due to lambda.. nevermind, DropwizardTestResourceConfig handles it correctly. Interestingly is that PersonResourceTest with Grizzly test container does not have this issue whereas PeopleResourceTest does.. @Tibor17 , can you take a look at https://github.com/eclipse-ee4j/jersey/issues/3700 and https://github.com/eclipse-ee4j/jersey/pull/3918#issuecomment-414949771? Potentially that will unblock this issue with further steps. So the WARNING is not something to bother with according to the comment https://github.com/eclipse-ee4j/jersey/pull/3918#issuecomment-414994499. So it seems in those tests PersonResourceTest and PeopleResourceTest we just need to register class instead of instance to get rid of WARNING. there is already commit in master that upgrades Jersey to 2.27, but wondering when it's going to be shipped https://github.com/dropwizard/dropwizard/pull/2395. does this work align with the latest comment at https://github.com/eclipse-ee4j/jersey/issues/3700#issuecomment-424596364?. you need to add JAXB to the classpath since Java 11 has couple of deprecated modules removed\n<dependency>\n                <groupId>javax.xml.bind</groupId>\n                <artifactId>jaxb-api</artifactId>\n                <version>${jaxb.api.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.glassfish.jaxb</groupId>\n                <artifactId>jaxb-runtime</artifactId>\n                <version>${jaxb.runtime.version}</version>\n            </dependency>. are you upgrading runtime or compile time to Java 11 as well?. @keirlawson , 1.3.x does not support Java 11 (removed deprecated modules, asm), so you can run on Java 11 bytecode compiled at 8th level adding libraries mentioned above. To support Java 11 there was a bump of jersey, hk2 that transitively lead to asm, that caused a lot of changes in code base as jersey API \"slightly\" changed and everything is going to be addressed in 2.0.0 which we are waiting for. . is there any timeline of getting 2.0.0 released (alpha, beta, testing) so we could plan roadmap accordingly?. Not sure this will work with PeopleResourceTest/PersonResourceTest. Do we want to clean this thing?. ",
    "dnwe": "Ah thanks @joschi \u2013 I hadn't spotted the version bump on the release branches that wasn't in master.. ",
    "simarpreets": "Found a duplicate #2419 . ",
    "ngton": "@joschi Thank you!\nI'm using DW 1.3.5\nIt was caused by missing dropwizard-http2. I'm now getting:\n\nFailed to parse configuration at: server.applicationConnectors.[1].supportedCipherSuites; Cannot deserialize instance of java.util.ArrayList out of VALUE_STRING token\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.ibm.itsm.topology.service.config.Config[\"server\"]->io.dropwizard.server.DefaultServerFactory[\"applicationConnectors\"]->java.util.ArrayList[1]->io.dropwizard.http2.Http2ConnectorFactory[\"supportedCipherSuites\"])\n\nIs that likely a JVM issue or another dependency that I'm missing?. ",
    "OndraZizka": "Quick verification in Groovy (groovyConsole):\n```\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nnew String(Files.readAllBytes(Paths.get(\"/proc/sys/net/core/somaxconn\")));\n```. Just a note. You say that affected users can override it in settings. However, the system limit still applies.\nUsers trying beyond that will not get over that effectively, AFAICT. Maybe there could be a WARNING issued when trying to use a larger value?\nTo actually change the limit on linux, the user needs to run:\nsysctl -w net.core.somaxconn=2048\nTypically added to sudo nano /etc/rc.local.\n. I suspect there is still another bug in Jetty in how it handles the sockets with refused connections. Setting higher accept queue will make it close to impossible to hit in real world scenarios though.\nWhen we hit this issue, we see connection timeouts on the client side after 60 seconds. If it was just the accept queue full, the client would get the rejection and fail the connection right away. But it does not - instead, it keeps waiting. I think what is happening is described here: https://blog.cloudflare.com/this-is-strictly-a-violation-of-the-tcp-specification/\nIn short, Jetty doesn't close() the rejected connections properly, blocking the next client port reuse.. Or maybe not. Petr Kacer said he checked with ss and there were no CLOSE_WAIT pending.. Thanks! Fixed where?\nAlso, could the documentation please be more specific on what is considered \"OS default\"? I think that in this case it is appropriate to go into impl detail and enumerate the sources of the value for individual OSes. Or perhaps link to the source of the util lib. Would be much appreciated.. Got it: https://github.com/dropwizard/dropwizard/pull/2430. Duplicates https://github.com/dropwizard/dropwizard/issues/2429. ",
    "shashank-devisetty": "xml version=\"1.0\" encoding=\"UTF-8\"\ndatabaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n<changeSet id=\"1\" author=\"shashank\">\n    <loadData file=\"data.csv\" tableName=\"MY_TABLE\" separator=\"|\"/>\n</changeSet>\n\nThe below is my data.csv file\nconfig_id|config_name|config_value\n1|fieldSet|[]\n2|overdueDayLimit|6\n3|notificationThreshold|300\n4|assignmentClass|app.core.users.BalancedUserFormatter\nThe column config_value of my table is a column of type CLOB. This migrations xml gets executed and seed data gets loaded perfectly without any errors for 1.3.2  but throws the above exception for 1.3.5 version. @joschi Any updates reg the issue??. ",
    "thogar-computer": "Have removed the time based rollover %d and it all seems to be working fine now.\nCheers.   \nP.S Agreed, it would be nice for dropwizard to set the totalSizeCap.  . ",
    "volphy": "I have created one:\nhttps://github.com/dropwizard/dropwizard/pull/2443. Good idea. I agree that Hamcrest does not need to be in Dropwizard's BOM.. Please do not forget about making another 1.3.* release at the same time.. ",
    "oliver-steinbrecher": "I'd like to implement a scenario like this:\nhttps://stackoverflow.com/questions/24995307/jersey-2-filter-uses-container-request-context-in-client-request-filter \nThe idea is to have a proper client filter which can access the containerRequestContext. The container context then contains authentication details which I an reuse in the clients downstream call. \n```\npublic class RequestIdClientRequestFilter implements ClientRequestFilter {\nprivate ContainerRequestContext containerRequestContext;\n\npublic RequestIdClientRequestFilter(ContainerRequestContext containerRequestContext) {\n    this.containerRequestContext = containerRequestContext;\n}\n\n@Override\npublic void filter(ClientRequestContext clientRequestContext) throws IOException {\n    String value = containerRequestContext.getProperty(\"property-name\");\n    clientRequestContext.getHeaders().putSingle(\"MyHeader\", value);\n}\n\n}\n```\n. ",
    "bennyflint": "Ok, that's good to know. Thx.. ",
    "jraylee": "Thanks for the quick response @jplock. I tested out your patch and can confirm that I no longer see the memory leak and sessions are getting cleaned up as expected.. Would it be possible to have this included in the 1.3.6 release?. ",
    "dpodder": "Bad news on this bug--we're still seeing this, even with the dropwizard 1.3.8 release.\nOn the other hand: I was finally able to publish a standalone repro case for this bug (dpodder/dropwizard-stress). Running it in \"stress\" mode for 5-15 minutes can reliably trigger the bug for us on an Ubuntu 18.04 VM with 4 cores and 16 GB RAM (we've seen it on several other Linux flavors, however).\nPlease let me know if I can help provide any more details to unblock the investigation for this issue.. ",
    "leoconco": "Sure, added https://github.com/dropwizard/dropwizard/pull/2475. ",
    "abhrj": "@Uziel\nThis is just a suggestion from a drop-newbie.\nSince you can reproduce the problem with different versions of DW, you can,\nif possible, try the test without DW, by directly using its dependencies.\nThis might help narrow down your investigation.\nOn Thu, Aug 23, 2018 at 11:02 AM, Uziel Sulkies notifications@github.com\nwrote:\n\nUpdate: We managed to reproduce the problem with version 1.2.8, by\ndecreasing the number of application instances to 1 in the load balancer.\nThis means that this happens because of the high concurrent load.\nMight there be something in DW 1.3.x that changed some configurations or\nadded some overhead to the processing time, and made it more sensitive to\nload failures?\nCan you suggest configuration changes to workaround the problem?\nkeep-alive? rate? max connections? etc.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/dropwizard/issues/2461#issuecomment-415296464,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AkeAh6-dH3IXPhq9soG2QPc7FZlQvFtRks5uTj5lgaJpZM4WC-J4\n.\n. \n",
    "sgomadam": "We notice a similar issue with DW 1.3.x. We use t3.medium. With concurrent load, it occasionally throws 502 or SocketTimeoutException(Connection reset). \nWe also noticed that running with custom server config in a Docker image with OpenJDK fixes the issue.\nOur default config does not have any custom server config. But if we add the following, we do not see any errors.\nserver:\n  type: default\n  applicationConnectors:\n    - type: http\n      port: 8080\n      acceptQueueSize: 256\n. Following workaround kind of solved the problem for our load. I am pretty sure with more load/less machine power, this issue might crop up again.\nWe have upgraded back to Dropwizard 1.3.5\n1) acceptQueueSize to 256. Dropwizard sets the queue size to be 128, if it is not provided in the config yaml.\n. yeah, changing the DW config to 256 and more works for us. \nThing to note here is that the DW version 1.2.8 and 1.3.5 sets the default input queue size as \nthe size of the TCP/IP accept queue for the listening socket(128 in  our case). For some reason, DW 1.2.8 does not have the problem with that configuration and 1.3.5 needs a larger queue size.. ",
    "biletnikov": "We have exactly the same issue.\nAWS ELB -> Dropwizard   (1.3.5)  (in Docker container with the Bridge network driver, OpenJDK 1.8)\nand it drops 502 sometimes, especially if I wait 1-2 minutes and send about 40 requests in parallel, 5-10 of them maybe failed with 502. But the next attempt to send these 40 requests in few seconds later is usually successful. \ntype:default did not help us.\nserver:\n  type: default\n  minThreads: 8\n  maxThreads: 1024\n  maxQueuedRequests: 1024\n  applicationConnectors:\n  - type: http\n    port: 10022\n  adminConnectors:\n  - type: http\n    port: 10023\nELB log says that their receive 502 from the destination. At this moment we have one host behind ELB.\n. I checked the service again on the same environment, but downgraded it to DW 1.2.7 and the issue DISAPPEARED!\nIt means we have an issue in DW 1.3.5\nthe only thing I had to do for the downgrade is skipping :\nJSON logging lib:\n```\n        \nio.dropwizard\ndropwizard-json-logging\n${dropwizard.version}\n\n```\nwhich is supported since 1.3.1\nCheck jetty versions in these 2 releases:\n9.4.10.v20180503     in DW 1.2.7\n9.4.11.v20180605     in DW 1.3.5\nI have downgraded to 9.4.10.v20180503 in DW 1.3.5 to see results:\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n        <version>${dropwizard.version}</version>\n        <!-- TODO : temp jetty downgrade for finding the issue -->\n        <exclusions>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-server</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-http</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-webapp</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-servlet</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-servlets</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-util</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-security</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>org.eclipse.jetty</groupId>\n                <artifactId>jetty-continuation</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <!-- TODO : temp jetty downgrade for finding the issue -->\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-server</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-http</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-webapp</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-servlets</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-servlet</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-util</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-security</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-continuation</artifactId>\n        <version>9.4.10.v20180503</version>\n    </dependency>\n\nbut  I have the same 502 issue with the older Jetty!  It means ,it is not Jetty,  it is something wrong with DW 1.3.5. @sgomadam \nthank you,   you are right!\nI set acceptQueueSize to 1024  for the connector and the problem is solved!\nAs acceptQueueSize has default OS value in 1.3.5, it is not enough for small EC2 instances.\n@usulkies \nyou could back to smaller EC2 instances by increasing acceptQueueSize manually, if it was the only reason to scale them.\nIn general, the problem is not obvious and many people will face it, because DW is used to build microservices,  most of them are tiny and works on small cloud instances.\nI would suggest to discard the default OS acceptQueueSize  or warn about the problem in the config.. ",
    "yael-lorenzo-olx": "It is an Openshift Issue. \nI have the same experience with this.\n``` @GET\n    @Path(\"/api/jira/timeout\")\n    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n    public String timeout() throws IOException, InterruptedException {\n        Thread.sleep(35000);\n        return \"ok\";\n    }. ",
    "winklehner": "Could it be that reason is null and not EOF?. In my case its always caused when the server sends data to the client, but the client stops receiving or disconnects during transfer. I will try to build up a test case. . Great, than I can lean back and wait for an update ;). Okay. The reason I would like to get rid of this error, is that it floods the log with dumping the full stack trace. Isn't there any way to catch it with an CustomEOFException handler and just log e.g. \"Client abort\"?. ",
    "ldm810": "Thanks @nickbabcock . ",
    "james-millner": "@joschi Even if I declare a dependency for Guava Version 24.0-jre before my Dropwizard dependencies I still receive the same issue.\nDoes this require that I remove the independent dependencies and simply provide a reference to the dropwizard-bom?. @joschi After further analysis it looks like FutureFallback has been removed in Guava versions 20 & above. ",
    "bobtiernay-okta": "This version of Jetty fixes a critical SSL performance bug that pegs CPU. I think it would be useful to point this out in the docs if not backported.\nWhen is the ETA of the 2.0.0 release which includes the fix? Currently I\u2019ve had to override the Jetty versions in the pom which isn\u2019t ideal.. Thanks!. ",
    "boatmisser": "Is there any further update on either the 2.0.0 release date or a potential 1.4.* update with jetty 9.4.12?. ",
    "martinmalek": "Bump. ",
    "honglou2001": "debug a restful API (via HTTP request).   could you provide some info about this? thanks. ",
    "seanstaley": "Awesome. Thanks!. Having the same issue today with 1.3.7 with dropwizard-core.. ",
    "lfoppiano": "Thanks @joschi for the tip, indeed seems a problem from my code (when left the command empty it works as expected). \nI close it for now and if I find anything related to it I reopen it. . ",
    "ansarisufiyan777": "Hi @joschi,\nSince this error is not coming in the local environment, I can't really depict the same in the example project. Can you please explain here the possible scenarios which can generate the above error.\nThanks. Found the issue, I was doing my environment setup on a different thread not on the main thread, I moved all the environment setup to the main thread, I feel now it is working fine as expected.\n`environment.healthChecks().register(\"subscription\", new SubscriptionHealthCheck());\n    environment.jersey().register(new SubscriptionResource());\n    environment.jersey().register(new CacheResource());\n\n    environment.getApplicationContext().getServletHandler().addServletWithMapping(\n            SubscriptionWebServlet.class, \"/events/*\"\n    );\n\n\n    environment.getApplicationContext().getServletHandler().addServletWithMapping(\n            RecoveryWebServlet.class, \"/replayRequest/*\"\n    );`.\n",
    "coderunner": "@nickbabcock This has been a while and I've shift gears since then, but IIRC the problem is exactly that the after method is not called (and the clean up not performed on system properties) when the service fails/throws in the run method. This is not so bad because this is really an edge case that should not happen, but when it does, it makes the troubleshooting difficult since unrelated tests start failing as well.. ",
    "carlzogheib": "Is there a reason why https://www.dropwizard.io/1.3.6/docs/ and https://www.dropwizard.io/1.3.7/docs/ are not a thing?. ",
    "pauldambra": "I was doing it the wrong way!\n```\n        //make a session handler\n        final SessionHandler sessionHandler = new SessionHandler();\n        sessionHandler.setSessionCookie(\"MY_DESIRED_COOKIE_NAME\");\n        sessionHandler.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\n    //give it to a cache\n    final NullSessionCache sessionCache = new NullSessionCache(sessionHandler);\n    sessionCache.setSaveOnInactiveEviction(true);\n    sessionCache.setSaveOnCreate(true);\n\n    //give the cache to it\n    sessionHandler.setSessionCache(sessionCache);\n\n    //make a datastore\n    final RedisSessionDataStore sessionDataStore = new RedisSessionDataStore(new JedisPool(), new RedisConfiguration(1000));\n\n    // give it to the cache\n    sessionCache.setSessionDataStore(sessionDataStore);\n\n    // give the handler to the application\n    environment.getApplicationContext().setSessionHandler(sessionHandler);\n\n```\nthat handler/cache setup dance is odd to me. recording it here for future searchers.... ",
    "n1b0r": "Thanks for the information.. ",
    "tapifolti": "I would like to reproduce this log info, e.g.:\ncom.lateralreality.projectservice.admintasks.scheduled.GeneralReportResultToWebShop.reportProjectsOfWebShop:247 \nwhich consist of: [fully qualified class name].[method name]:[line number of the source code]\nRight now I can access only the loggerName which is the  [fully qualified class name], So method and line number would also be desirable.. based on doc of StackTraceElement[]: \"The frame at the top of the stack represents the execution point at which the stack trace was generated. \" I suppose that is the log line of the code, which code location would be required. So the index is: 0.. ",
    "philipzhaoTS": "Thanks!. thank you for the example! That really helps!. ",
    "OrDTesters": "@nickbabcock I don't believe this failure is related to my changes, as this issue seems to occasionally occur in other builds that don't include my changes, so it's probably flaky for some other reason (https://travis-ci.org/dropwizard/dropwizard/jobs/455793243, https://travis-ci.org/dropwizard/dropwizard/jobs/455616746, https://travis-ci.org/dropwizard/dropwizard/jobs/455605635, https://travis-ci.org/dropwizard/dropwizard/jobs/455555882). Furthermore, in my own Travis builds I don't see the same issue (https://travis-ci.org/OrDTesters/dropwizard/builds/455185698).. I have rebased onto master.\n\nWe can also reset the status printer via StatusPrinter.setPrintStream(System.out);. However, I chose to use configure for two reasons: 1) I want to make sure that the system is in a legal state, which I presume configure does, and 2) If there are other fields set in configure other than the status printer, now or in the future, they will hopefully also be cleaned up by this change.\nI tried every pair of test methods in this module, and none of them seem to suffer from this problem other than the tests in ThrottlingAppenderWrapperTest.. @nickbabcock I don't have much to add; as you've said, @isaki's implementation is similar to mine. Given that I don't have that much experience with this project, perhaps @isaki's fix is preferable.\n\nThat being said, I agree that it's strange to create a new instance in a teardown. On the other hand, the lines of code added into the teardown in this fix seem to essentially clean out the whole state of the defaultLoggingFactory, so it might as well be a new object. Given that, it also looks strange to keep using the same object for two purposes (testing as well as clean up).\nPerhaps a clearer fix would be to modify (or create a new method) the existing reset method in the DefaultLoggingFactory itself so that it also resets the status printer/does the other setup in the configure method. However, as I said, I am not familiar enough with this project to know if that would cause issues elsewhere.. ",
    "efimovandr": "I think the API provided is misleading and people will keep making this mistake.. ",
    "sergeiwp": "I think it makes sense to keep method naming closer to ThreadPoolExecutor, i.e. coreThreads() instead of minThreads(). Also worth referring ThreadPoolExecutor doc for the fields meaning.. ",
    "eichstam": "Great idea, very useful.. My dropwizard services receives requests from many diverse clients. Occasionally I want to debug issues and would like to log all request headers so I can pick through any additional information passed along in headers. Since the client apps are diverse I don't know what all the possible headers are called.. ",
    "sjoerdtalsma": "Updated the Pull request to target master and made requested change + added unit test for deserialisation (missing property -> default false + minimum config with true). Can you make sure that after merging to master, this also gets backported to 1.3.x?\nWe're still on the latest 1.3 version \ud83d\ude09 . Isn\u2019t 1.3 the official \u2018current\u2019 release though?\n\nOp 16 nov. 2018 om 15:12 heeft Nick Babcock notifications@github.com het volgende geschreven:\nCan you update the javadocs and the configuration docs with this new value?\nCan you make sure that after merging to master, this also gets backported to 1.3.x\nNo, I don't think that is how that works. We tend to reserve patch releases for security updates or major bugs\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > Can you update the javadocs and the configuration docs with this new value?\n\nDone 15 days ago. Is there more I should/can do before this can be merged?. Agree. Removed deprecation but kept the @see reference. ",
    "p-upadhyay": "Okay. So It is not recommended to run admin port on the same port as the application? I thought with 'simple' server type, dropwizard allows that. Please correct me if I'm wrong.\n. Thanks Nick, I was not worried about metrics. I was actually worried about CSV injection via CSVReporterFactory.java.\nApplications or framework when create a csv from untrusted data, that can be used in exploiting csv injection. I agree above comment was little vague and I should've given some more details. If you're already taking care of this or there is no untrusted data getting exported through this class or validated before the export, please ignore this issue. \nAlso, please find below few references to CSV Injection\nhttp://georgemauer.net/2017/10/07/csv-injection.html\nhttps://www.owasp.org/index.php/CSV_Injection\n. Got it! Thanks.. ",
    "petermant": "Since this contains breaking changes (according to the JDBI release notes) shouldn't it be 1.4.0 not 1.3.9?. ",
    "oswaldquek": "Closing as we found out it was our fault. We weren't closing javax Responses in code which led to the underlying OS/jvm/whatever running out of file descriptors. Amateurs!. ",
    "sergioescala": "The Travis CI failed because slf4j-api-1.7.25.jar: CVE-2018-8088 were identified with vulnerabilities, but that error is not related to my change:\n[ERROR] Failed to execute goal org.owasp:dependency-check-maven:3.3.4:check (security-check) on project dropwizard-jackson: One or more dependencies were identified with vulnerabilities: slf4j-api-1.7.25.jar: CVE-2018-8088 \nany suggestions?. Hi, @joschi thanks for your comment!\nI wanted to help with those changes and about the last one, you're right! I can make them private static final if you think it's better. \nI think the only that doesn't change the code drastically its the if sentence.\nPlease let me know which ones can be applied to keep them! \n. ",
    "rodmc123": "Some more detail, according to the hibernate documentation for version 5 and above this should just work with: \n@Id\n  @GeneratedValue\n  private UUID id; \nSource: https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html\nIt keeps failing because it doesn't find the hibernate_sequence table. \n. ",
    "nyoakaway": "Hi Nick, exactly, it appears that this is okay! But accessing Url via HTTPS does not just open, as if there was no SSL installed! I do not know if there is any other procedure or some other way to try to reinstall the certify!. Hello Nick. \nInternal curl error: curl: (35) schannel: next InitializeSecurityContext failed: SEC_E_ILLEGAL_MESSAGE (0x80090326) - This error usually occurs when a fatal SSL/TLS alert is received (e.g. handshake failed). More detail may be available in the Windows System event log.\nExternar curl error: curl: (35) error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure\nAny possible idea of \u200b\u200bwhat it might be?. ",
    "keirlawson": "Yep, I would assume it is the same issue.. I get this issue regardless of whether I compile with JDK 8 or 11, running against 11.\nAdding your snippet to the POM resolves the issue, however it would be great if Dropwizard could support Java 11 without the need for workarounds.. ",
    "cricket007": "Should the \"other versions\" page also list the versions in between 1.3.4 and 1.3.8?\nhttps://www.dropwizard.io/1.3.8/docs/about/docs-index.html. Sounds good. \ud83d\udc4d\nAnd what about the 1.3.8 release notes? https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst. Thanks! I'll open new issues for anything else I see. . ",
    "wurstbrot": "Hi @joschi \nhi @arteam ,\nthank you for including #2620 . I updated my version of dropwizard to 1.3.8, but I am still vulnerable (as the fix will come with this release). Due to the high criticality of the fixed vulnerabilities a release should be addressed soon.\nWhen will 1.3.9 be released?\nCheers,\nTimo. ",
    "alexterman": "@arteam Thanks for your reply.. ",
    "dependabot[bot]": "OK, I won't notify you about version 6.x.x again, unless you re-open this PR or update to a 6.x.x release yourself.. OK, I won't notify you about any of these dependencies again, unless you re-open this PR or update them yourself. \ud83d\ude22. OK, I won't notify you again about this release, but will get in touch when a new version is available.\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.. ",
    "harpreet86": "I am not sure about the details of the issue but when you run \"mvn dependency-check:aggregate\" on a maven project using dropwizard, the reports generated show this vulnerability because of the javax.annotation-api and the exclusion of this from dropwizard does not allow application to strat. Can you please elaborate.. Please refer the attached screenshot displaying vulnerability reported in javax.annotaion-api, where I \n\nhave used io.dropwizard-core:1.3.8 dependency and org.owasp:dependency-check-maven:4.0.1 maven plugin otherwise let me know if I am doing something wrong.. @joschi, I have suppressed it as of now but is there any list of false positives documented by dropwizard like such scenarios because this vulnerability is getting introduced in my project by dropwizard and excluding it is not helping. . @joschi I am not able to find any reference for CVE-2015-2808, CVE-2013-2566 in suppressed-cves.xml\nPlease suggest. ",
    "vijayarumugam": "Removing the jersey-client solved the problem. Closing this. ",
    "gukkes": "Yes that was missed definitely! Thank you for pointing this out.\nHowever, I've tried with your example as well and the error remains the same both in Eclipse, Intellij even with Maven or Gradle.. It is related to some dependency trickery with the Maven BOM in dependenyManagement-section. If you put the exact same versions on your dependencies, without the BOM, it simply does not work (I compared both via dependency:tree). Still need to find a working solution in Gradle.. We used the latest grizzly 2.28. Can be closed. Relying on 2.25.1 solves the issue.. ",
    "teenageorge": "The problem was in using khttp which did not work well with the response from JaxRS Response. Hence closing this issue.. ",
    "rrusu656e74": "If there are any other details i need to include here, i'm happy to provide. Good question. And following that i think you answered my question. \nBased on https://jersey.github.io/documentation/latest/client.html#d0e5255  if you don't read the entity, then you need to close the response manually by invoking Response#close().\nThat's what I'm missing probably. Thank you!. ",
    "Superluli": "ok let me try that. \nBut meanwhile my external logback.xml's fileAppender and consoleAppender doesn't have discardingThreshold set either but there's no log lost there. I don't have the blocking queue size set up also so it defaults to 256 in both cases. . @nickbabcock does dropwizard uses logback Asyncappender for type console and file by default, instead of logback's ConsoleAppender and FileAppender? When I check logback documentation, seems like discardingThreshold and queueSize is only used by Asyncappender. ok that explains. thanks!. @joschi I agree, Logback's FileAppender and ConsoleAppender are synchronous by default. The behavior of dropwizard's wrapping them with AsyncAppender should be documented. \nFurthermore from high level I don't think it's a good idea for a framework to silently drop logs as a default behavior. . ",
    "paulkennethkent": "Thanks for the feedback @joschi @jplock,  the tests have now been modified to use JUnit 5 and AssertJ libraries.  . ",
    "jspiewak": "Good call. I had been looking at the logEndpoints above, which didn't have the prefix.\n. ",
    "Xorlev": "Given that these are custom headers, would it not be appropriate to make this X-Client-Request-Id and X-Service-Request-Id?\n. ",
    "nwjsmith": "Looks like there is no cause param for the method?\n. ",
    "aaylward": "These braces (this line and line 83 below) should probably also be bumped up a line.\n. ",
    "jaredstehler": "if you start the server on an ephemeral port (by specifying '0' in the config) then you can guarantee it'll be free during tests. (see https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java#L110)\n. ",
    "cab222": "This a minor nit pick around code duplication, but perhaps we can use a private method that takes a Set and key, then this does the check, warn, and add. We could probably use that in four places\n. ",
    "lvauthrin": "Just a small note: the add(...) method on Set returns false if the element already exists in the set so the contains check here is actually superfluous.  The code could be changed to:\nif (!items.add(name)) {\n    LOGGER.warn(\"Overriding the existing {} registered with the name: {}\", type, name);\n}\n. ",
    "brettwooldridge": "@prb Come on over, the water's nice.  We're fully Dropwizard enabled. :+1: \n. ",
    "kirill-vlasov": "I totally agree, file is updated.\n. ",
    "v-ladynev": "Sorry, it is not about \n\nconvention of implicitly treating absolute resource paths as being rooted within the application's resources directory\n\nit is about (as described in Using Methods of java.lang.ClassLoader)\n\nThe methods in ClassLoader use the given String as the name of the resource without applying any absolute/relative transformation (see the methods in Class). The name should not have a leading \"/\". \n. I am agree, of course. How to add that comment?\n. Looks good for me. So how to add this comment to the pull request?\n. Thanks for your kind help. I will try.\n. @evnm I have added a comment.\n. \n",
    "rwwarren": "Just updated it to 1.0.2 and I agree there should be a non version specific link\n. ",
    "Sijmen": "Wouldn't this change the current default behavior of unknown timezones? Normally Jackson would serialize it as  TimeZone.getTimeZone(zoneId), see FromStringDeserializer. This change would change this behavior to using UTC.  Maybe this should be in the release notes and documentation?. ",
    "ricogini": "That means that each DropwizardApacheConnector has a fixed behavior for all requests. I would prefer a parametrizable behavior which can decide on request basis. I would prefer to replace the boolean flag isEntityRepeatblewith a  com.google.common.base.Predicate<Object> isEntityRepeatablePredicate. This predicate can then be used to determine in chunked encoding mode if the entity of a request is repeatable.. As mentioned above I would prefer to evaluate the predicate here:\nJava\nif (chunkingEnabled) {\n   final boolean isEntityRepeatable = isEntityRepeatable.apply(jerseyRequest.getEntity());\n   return  new JerseyRequestHttpEntity(jerseyRequest, isEntityRepeatable)\n} else {\n  return new BufferedJerseyRequestHttpEntity(jerseyRequest);\n}. I'm not sure if I understand this. Its okay to setup the connector on client level. It should handle the requests more flexible. Therefore it can be parametrized with a predicate which decides if a entity of  a request can be repeated or not. . In the mean time I did further testing. I think its not possible to repeat a request with body in chunked mode, because the writeEntity of Jersey's ClientRequest can't be only called once. That means making the JerseyRequestHttpEntity.isRepeatable() returning true will cause failures. What we were trying to achieve is to prevent  entity buffering because we have very large request entities. I'll try to find a better solution.. I think this will not work because Jersey's ClientRequest can't write the entity twice. I think only raw byte arrays should be repeatable if there is no gzip used.. \n```Java\n    private static class JerseyRequestHttpEntity extends AbstractHttpEntity {\n    private ClientRequest clientRequest;\n    private final boolean gzipEnabled;\n\n    private JerseyRequestHttpEntity(ClientRequest clientRequest, boolean gzipEnabled) {\n        this.clientRequest = clientRequest;\n        this.gzipEnabled = gzipEnabled;\n        setChunked(true);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isRepeatable() {\n        return !gzipEnabled && clientRequest.getEntityClass() == byte[].class;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public long getContentLength() {\n        return -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>\n     * This method isn't supported at will throw an {@link java.lang.UnsupportedOperationException}\n     * if invoked.\n     * </p>\n     */\n    @Override\n    public InputStream getContent() throws IOException {\n        // Shouldn't be called\n        throw new UnsupportedOperationException(\"Reading from the entity is not supported\");\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void writeTo(final OutputStream outputStream) throws IOException {\n        if (isRepeatable() && clientRequest.isCommitted()){\n            byte[] data = (byte[]) clientRequest.getEntity();\n            outputStream.write(data);\n        } else {\n            clientRequest.setStreamProvider(contentLength -> outputStream);\n            clientRequest.writeEntity();\n        }\n    }\n\n```\nThat way we can pass the predicate.. ",
    "Alexey1Gavrilov": "Looks like by default the printed path starts with double slashes \"//\".\nIf urlPattern == '/*', then rootPattern = '/', and if contextPath == '/', then rootPath = '//'.\nAs the result the output from a simple test service looks like:\nINFO  [2018-02-19 20:58:45,383] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:\nGET     //time (com.telenordigital.dropwizard.example.service.resource.ExampleResource)\n\n. ",
    "kewpiedoll99": "i suggest you change \"rollbacked\" to \"rolled back\". does this just throw the first error in the list?. ",
    "damagode": "This is a tricky situation. We tried to mimic the previous behavior so If an exception is thrown during the process we should let the exception bubble up. The thing with multiple sessions is that for certain operations such as rollbackor session.close we need to ensure that the operation is executed for all the sessions before letting the exception bubbles up. If we want to change this behavior in the future we are prepared to notify multiple exceptions.. "
}