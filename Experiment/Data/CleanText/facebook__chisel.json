{
    "dstnbrkr": "+1\n. Hi @jdriscoll - try this in ~/.lldbinit instead:\ncommand script import /path/to/chisel/fblldb.py\n. Great catch! Before I review, mind signing our CLA?\n. +1\npropose we merge this after the other outstanding PRs to save everyone a big rebase\n. brew update should fix this (will get the new formula). Try that and let me know if it still seems to be missing. I just uninstalled, reinstalled homebrew and was able to brew install chisel with no issue.\n. Thanks! Will take a look.\n. I'm not able to reproduce this. I tried masking a view in all orientations and the mask appeared in the correct place. The mask command converts the rect of the masked view to the window's coordinate system. So if for some reason one of the views in the path from the window to the target isn't being rotated, then the coordinate systems will get out of sync and the mask command won't work.\n\n. brew update should fix this (will get the new formula). Try that and let me know if it still seems to be missing. I just uninstalled, reinstalled homebrew and was able to brew install chisel with no issue.\n. Both the homebrew recipe doesn't add this line to ~/.lldbinit either (both manual and brew installs require it to be added manually).\nI would prefer it if the brew recipe did add this line, but hesitant to modify a user's dotfiles from a homebrew recipe.\nStill, good to know you had the expectation that it would modify ~/.lldbinit - so maybe I'll take another look at this.\n. Yep, the caveats are displayed at the end of installation.\n. I see what you mean in the README, will clarify that in either case there's a manual step.\n. On it, thanks @jkubicek (sha is the checksum btw)\n. All set - brew install will now install the 1.1 tag\n. ",
    "gol0fguf123": "...\n. ",
    "kastiglione": "I'm :+1: \n@facebook/team-chisel Any thoughts before merging?\n. @RichardSimko, @pszalko Pull requests welcome!!\n. :sparkles:  @RichardSimko \n. Nice find @simonwhitaker, thanks.\n. Thanks for the PR @bencochran. For us to review/accept this, are you willing to sign our Contributor's License Agreement?\n. Thanks for this, just the one comment for now :palm_tree: \n. We should combine showview and showlayer into a single command.\nargh, @arigrant you too fast!\n. :+1: I created an issue to track that.\n. @alistra What's the deal here, why is this necessary in AppCode? Is this a bug in AppCode? If so, any changes now might be dead weight later.\n. @alistra Awesome, thanks!\n. The issue Priority was changed to Critical: http://youtrack.jetbrains.com/issue/OC-9356\n. @alistra Thanks for letting us know, and for filing this in the first place :gem:.\n. > Relaunched Xcode. \"po\" and \"p\" still unavailable. Any idea about how to get \"po\" and \"p\" back?\nHmm, have you looked in Console.app to see if any logs might be of use to figure out what's going on?\n. Thanks for letting us know.\n. This would be much easier to do after or along with #62.\n. Interesting. I just checked and mine are all 0644, no x bit at all.\n. @clintron I'm going to close this since it's become inactive, but if you find permissions to be a problem again, please let us know. Thanks :pear:.\n. > Note: unborder button was working\nStrange.\nThanks for the fix :fireworks: \n. Hi @soniccat, thanks for the pull request! Before we can review this, we'll need you to sign our Contributor License Agreement. \n. Yep, I see now that you've signed it. I must have be mistaken. Thanks.\n. Hi @soniccat, there's a PR open that combines a bunch of the show* commands into a single command called visualize, see #25.\nWhat do you think about adding NSData support to the new visualize command? If so, would you be willing open a new PR once that's been merged?\nFor the command to print NSData as a UTF8 string, I'm ok with it, but since it's the first command of it's kind I'd like to hear what @arigrant and others in @facebook/team-chisel think.\nThanks for getting the ball rolling on these!\n. ch or chisel?\n. While we're doing a big rename, does anyone else find the file names to be a bit too splat? I don't know what the python file name conventions are, but I'm thinking they'd benefit with either snake_case or CamelCase. Yay/nay?\n. I'm going to close this, but we can always reopen in.\n. Thanks for the debugging this @antons. Before we can review/accept this, we'll need you to sign our Contributor License Agreement. \n. @antons Apologies, it seems there was a bit of latency between the time you signed and when it becomes visible in our internal list.\n. Item no. 1 sounds very strange. Any idea why? In any case, -bounds seems more the natural choice.\nItem no. 2 seems like something lldb should just handle, but seemingly we're just not there yet.\nI'm :+1: for this regardless. I'll let this PR sit for a day or so and see if anyone else in @facebook/team-chisel has any feels.\nThanks @antons :whale: \n. :cool: \n. Thanks @antons :hammer:\nI have a couple comments, after that I'm :+1: \n. Thanks @Thunor!\n@dstnbrkr Did you want this?\n. @Thunor Can this issue be closed?\n. Thanks @btxkenshin, we'll investigate.\nRelated #24.\n. Hi @btxkenshin, @starFelix, @ignazioc, are the problems described here still occurring?\n. Closing, but please do reopen if you're seeing any of these in Xcode 6.\n. Thanks for catching and fixing this.\n. :+1:\nWe're using Chisel for iOS work, but would be happy to accept contributions that port the iOS specific commands to support Mac too.\n. @kolinkrewinkel Did you adapt any of the commands to OS X?\n. Thanks, I completely forgot!\n. @antons We definitely dropped the ball on this PR, but we'll make sure we give this the attention it needs.\n@mattjgalloway Have you tried this out?\n. :+1: \n. Let's do this.\n. :+1: \u2013\u00a0Anyone else?\n. :ship: \n. @chml I'm going to close this since it's inactive, but if you have some code that allows us to reproduce this, please reopen, thanks!\n. @Javache I haven't had a look at this, but pvc has been updated to use +[UIViewController _printHierarchy] (see #61). With that change, this problem may go away for you.\n. This might be fixed by dlopen-ing libobjc.\n. Neither dlopen nor target module add resolve this issue. Turns out the objc runtime functions work just fine without any of that, it's just the reference to the typedef Ivar that's causing the problem. Changing that to void * smooths everything over.\n. Thanks for opening this issue. :+1: \n. Hi @bryansum, I know this isn't quite what you were looking for, but there's an article by @arigrant in issue 19 of objc.io that covers LLDB and Chisel. http://www.objc.io/issue-19/lldb-debugging.html\n. I first read it as \"bin\" \"side\" :trollface:. I'm less confused now though.\n. :shipit: \n. Thanks! Looks like this was just merged in #51.\n. @KingOfBrian :heart: it! Thanks for submitting, I have a few comments.\n. Cool, and again thank you!\nI'll wait a day or two to see if anyone wants to add anything. I'll look at #55 soon too.\n. :ship: \n. Right, I'm not so sure about the existing logic in fblldbbase.py. I recall looking at that a while back and thinking that perhaps it should pass 0 for the base, which handles any of base 2, 8, 10, or 16.\n. @KingOfBrian Argh, kind of forgot about this. I'll try to look at it soon. I'm no expert on accessibility so I kind of procrastinated :disappointed:. Feel free to ping.\n. For anyone else looking, here's a compare view to see relevant changes in this diff:\nfacebook:master...KingOfBrian:feature/KingOfBrian/AccessibiltyTree\n@KingOfBrian \n1. Can you merge in master for easier reviewing and so it can be merged when ready?\n2. Can you edit the summary to add some example output of the pae command?\nAs for the number of commands evaluated to get the output, one of the things Chisel does elsewhere is call private methods which generate similar output, and from there Chisel scrapes the output. Perhaps there's a private method that could be used to do some of the work that's being done in this PR. You could look at these headers for any leads: https://github.com/nst/iOS-Runtime-Headers. Turns out there's dozens if not hundreds of accessibility related methods in NSObject.\nAlong these lines, I've had the thought that Chisel could benefit from having a library of its own that would be dynamically loaded into the app so that the code we want evaluated is run more directly.\n. @KingOfBrian Is this pull request superseded by #70? Or is there functionality here that's missing in #70?\n. Closing since I understand this to be superseded by #70. @KingOfBrian if this is incorrect, feel free to re-open.\nThanks so much for your time, effort and contribution! :gem: \n. According to my radar, the underlying bug in lldb has been fixed in Xcode 6.3 - Build 6D520o.\n. @mattjgalloway As the original author of bmessage, do you have any thoughts on this? If you're happy, I think we can merge it.\n. If you insist :)\n. Resolved by #95 \n. @a2 Wanna merge this?\n. Thanks @a2 \n. > My only concern is the increasing complexity in loading the two modules\nYep, that's my concern too. The good thing is there will be feedback sooner than later when attempting to implement this.\n. > help with getting community involvement as well, as I expect most people are put off by the foreign python way of doing lldb stuff\nYep, this too!\n. @alloy raised a good (and obvious, yet missed) point on Twitter: this approach will be troublesome on device.\n. Some experimentation will be required. First hurdle is getting the library from the computer loaded into the process on the device.\n. Thanks for the report :mag:. I've opened a pull request to fix the issue.\n. @dstnbrkr I don't remember the specifics of why this was originally castes this way. This change Works For Me\u2122 but I don't want to cause any breakage. Thoughts?\n. @alanzeino Did you say the CLA form shows you've already signed it? https://code.facebook.com/cla\n. @alanzeino Are you still planning to make changes?\n. @alanzeino \n\n. Thank you @bartoszj :+1: \nWould you mind signing Facebook's Contributor License Agreement? If you have any questions I'd be happy to help answer. https://code.facebook.com/cla\n. @bartoszj Thanks for submitting this! I have a couple comments above.\nWhat do you think about adding two commands, one to turn this on, one to turn if off. All of our other commands work this way, so we should be consistent unless there's a good reason not to be. If we have two commands, they can both have a default speed, with the undo command having a speed of 1.\n. Great! :bow: \n. Thanks @bartoszj! I left a couple comments, the main one is about giving slowanim a default speed value so that it could be typed without having to provide an explicit speed.\n. :boom: \nLooks good. I'll checkout this branch and give it a try and merge if all goes well. Thanks!\n. Thanks for this contribution! And thanks for being patient and awesome :+1: \n. Thank you @mblsha :octocat: \nWould you mind signing Facebook's Contributor License Agreement? If you have any questions I'd be happy to help answer. https://code.facebook.com/cla\n. @mblsha I've left a couple comments. Thanks for submitting this pull request!\nThe only thing that needs to be figured out Xcode/lldb version support.\n. :ship: :ship: :ship: Thanks @mblsha!\n. @moreindirection Can I interest you in opening a pull request to fix the stuff you've seen broken with Swift? :cake: \n. Thanks @samjohn :star:\nWould you mind signing Facebook's Contributor License Agreement? If you have any questions I'd be happy to help answer. https://code.facebook.com/cla\n. :ship: \n. Thanks again!\n. @KingOfBrian How does this pull request compare / contrast to #55?\n. Thanks @a2, and apologies @gkassabli for the dropped ball. I had asked a question and was waiting to hear back, but perhaps it wasn't seen.\n. @dopcn What do you think about having option flags to allow the desired directory to be opened in Terminal, or maybe Finder as well? For example ppath -t to open in Terminal. These don't need to be added to this pull request, but they'd be nice to add sooner or later.\n. @dopcn What do you think of the comments I made?\n. Thanks @dopcn, I'm happy to accept this. Before that, can you merge from master because there are now conflicts.\n. Thanks @dopcn!\n. I've asked before about trivial changes, but unfortunately was told signing is still a requirement. The good news is that the license takes seconds to submit if you're not worried about what it says :) But seriously, it's short and straight forward. I found it very easy to scan through.\nEither way, I appreciate you taking the time to give the valuable feedback, and the time to open the pull request. Thank you!\n. Hi @moreindirection, did you decide against signing the CLA?\n. @moreindirection Please feel free to reopen anytime.\n. haha thanks @wincent! Maybe Chisel has nice things to say about LLDB, you never know :trollface: \n. Thanks!\n. Thanks! Have you tried beta 2 which came out yesterday? If you do try it, mind updating this issue if it is resolved? Hopefully it's just a beta bug.\n. I guess this is as simple as a breakpoint condition on [NSThread isMainThread].\n. Thanks for the reports! I will try to take a look at this soon.\n. @yxztj I just tried running pviews using the \"Master-Detail Application\" template that comes with Xcode. I could not reproduce the error you've reported. I am using the latest Xcode GM, 6.3.2 GM. If you're able to try the GM and let me know whether the GM fixes this for you, that would be great. Or, using whichever version you have installed currently, could you try creating a new project based on the \"Master-Detail Application\" template and let me know if pviews is broken? Thanks!\n. @donshefer I just tried caflush using Xcode 6.3.2 GM, and could not reproduce the error you reported. When you update to 6.3.2, if you try caflush on your Swift project and it still fails, I would love to know and investigate more. Thanks!\n. @nickkjordan I am seeing different errors when I run visualize. I'll look into them. I was calling visualize on a view. Were you calling it on a image, view, or layer?\n. Thanks for the report. Can you run the below command from your app's lldb console and let me know what the output is?\nscript print lldb.debugger.GetSelectedTarget().GetTriple()\n. When did you install or last updated Chisel? We should support this arch as of January 5th, see #69.\n. Here's the code that chooses whether to use UIColor or NSColor:\nhttps://github.com/facebook/chisel/blob/c5e57331805f9f1d67d88eb61603a75575ce8ab9/commands/FBDisplayCommands.py#L48-L58\n. Oh! We need to submit an update to homebrew. In the meantime, you might want to try installing from git, which should be pretty straightforward.\n. It should, but I'm not entirely sure. The Mac support was provided by @kolinkrewinkel in #45. Please do file any issues you run into and we can look at fixes.\n. You're welcome! Thanks for reporting.\n. Resolved by homebrew/homebrew#38140\n. Nice, thank you!\nI trust you that all the encoding values are right :)\n. I've wondered about this too, but have never looked into it. It would be great to have, however I don't know if Xcode is going to be a willing participant. It may need to be an Xcode plugin.\nI'll leave this open as something that would be great to have, let's track it.\n. Yes, it would!\nhey @natansh hurry up already!\n. @MarcoSero Check out #86 \n. Resolves #85 \n. Thanks for the pull request @apoorvcode. Why is this no longer necessary? It was added in #69 because we have some commands that have conditional behavior based on the architecture.\n. Thanks for the submission. Let me know if I've missed anything about why this isn't needed.\n. Thanks for the report! I'll look into this and get back to you, hopefully soon :stuck_out_tongue_winking_eye: \n. @palcalde Which version of Xcode are you using? With Xcode 6.2 / lldb-320.4.160, the problem is that the SBInputReader class is not exposed through the lldb module. I haven't tried Xcode 6.3, hopefully the missing class is a temporary regression.\n. Fixed by #92 \n. @mattjgalloway Thoughts on this?\n. :ok_hand: thanks\n. @DerekSelander Thanks for the report!\nHow did you install chisel? We had a recent report like this and the problem was using an older version installed from homebrew. The brew formula has since been updated. If you're using brew, check that you're using the latest version.\nGenerally speaking, Chisel doesn't have a test suite (it would be great to add one: #15) and the majority of contributors and maintainers use Chisel with iOS. If you were interested in opening pull requests for Mac compatibility, that would be awesome!\n. Reopened following accidental close\u2026\n. @DerekSelander Feel free to re-open and we can discuss any OS X issues further.\n. @palcalde Thanks!\nI've left a couple comments.\nAlso, can we make the mask a flag? (You can see examples of how to do flags in other chisel commands.) I'd prefer not to arbitrarily change the command from flickering to masking. Ideally, this could also use a border instead of flicker or mask, but I'm not asking you to go that far :stuck_out_tongue_winking_eye: .\n. > About the border instead of masking, I will investigate and try to see if I can put it in the open PR.\nTo be clear, it's not important to add border support. I'm only concerned about keeping flicker support. I'd rather not remove flicker support, but if we want to augment it with mask support, :+1:.\nFor async mode, are there consequences to leaving it in async mode? Or should it be returned to off after vs completes?\n. Thanks for the explanation. Let's do it. A masking vs is better than a broken vs.\nI have one more comment, otherwise looks good and thank you so much for the pull request!\n. :fireworks: \n. Thanks for the pull request! Was this done using a tool? Could you update the pull request to leave out all the indentation, whitespace, and line wrapping changes? It would be great to remove unused vars, but I'd rather avoid reformatting the entire code base.\n. Thanks again for the pull request!\n. Thanks for the report. I'll look into this today.\n. @nealsun Did you install from git, homebrew, or some other way?\n. Ok I'll install from homebrew and see what's up.\n. Ok thanks. Will get to this!\n. Thanks everyone!\n. :sparkling_heart: \n. Thanks for the ping, will put this on my todo list.\n. Thanks!\n. Do you know what image format the underlying CGImageRef uses?\nThe visualize command is making use of UIImagePNGRepresentation, which the documentation states:\n\nA data object containing the PNG data, or nil if there was a problem generating the data. This function may return nil if the image has no data or if the underlying CGImageRef contains data in an unsupported bitmap format.\n. I should look into what it would take to support other formats.\n. Nice. Can I interest you in trying a pull request :smile: \n. Let me know if you have any questions, happy to answer anything.\n. > would it be a faux pas to expr @import CoreFoundation in my command?\n\nNah. In fact I think it would be great to do, UIKit too. Thinking aloud, I wonder if it could be done on the first time any breakpoint is hit. Then by using Chisel, you get these for free.\n. Not to give you scope creep, feel free to put it in your command only. Someone can look to make it more general later.\n. Cast the color to void *?\n. Yup, that is what I meant. Hmm. Maybe one of:\npo [UIColor colorWithCGColor:(id)[[UIColor redColor] CGColor]]\npo [UIColor colorWithCGColor:(CGColor *)[[UIColor redColor] CGColor]]\npo [UIColor colorWithCGColor:(CGColor *)(void *)[[UIColor redColor] CGColor]]\n. Oh, I'm curious why you're going from UIColor to CGColor to UIColor?\n. Looks good, thank you!\n. @ZevEisenberg Thank you! If you have any other ideas, would love to get more pull requests or issues as well.\n. I missed this issue, sorry about that! I'll look into this.\n. Fixed by #117 \n. Great addition, thanks @VTopoliuk!\nI think this just needs to error when run on device and is good to go.\n. Looks like you'll need to merge master into this branch now.\n. @VTopoliuk shall we merge this? cc @mattjgalloway \n. Resolved by #111.\n. @VTopoliuk there are other commands that overwrite the pasteboard, which I tend to think of as generally a good thing, but you make a good point. We should either add a global setting, so that users can control this. Alternatively we could add a flag to commands to allow people to enable/disable pasteboard functionality. I think a global setting is better than per-command, what do you think?\n. @VTopoliuk Happy to merge this. @alexch2000 would you mind a small update to for the comments I left. They are minor, so if you're busy I'm ok to land as is.\n. That's no delay!\nthanks :sparkles: \n. Thanks for the pull request!\nWhy not one command (say pmethods) and let the person pass either a class or an instance?\n(lldb) pmethods self\n- (void)setSignInButton:(id)arg0 \n- (id)signInFailureText\n- (void)setSignInFailureText:(id)arg0 \n- (void).cxx_destruct\n......\n(lldb) pmethods [self class]\n+ (id)test:(id)arg0\n. :+1: I will take a look tomorrow (it's the end of the night for me now)\nOne question: What happens if you call pmethods XYSomeClass?\n. thanks, will try this out today or tomorrow!\n. constVariable refers to the variable that is const, that you want to edit. For example, given this definition:\nobjc\nconst CGFloat labelWidth = fullWidth - iconWidth - padding * 2;\nIf you wanted to reassign labelWidth in lldb, you could use the above statement, except with labelWidth instead of constVariable. Note however, we tried this with x86, but not x86-64, or on arm.\n. :sparkles: thanks!\n. Done! https://github.com/facebook/chisel/releases/tag/1.3.0\nI'll open a pull request to update homebrew.\n. https://github.com/Homebrew/homebrew/pull/44839\n. :cake: \n. Thanks for looking into this!\n. There are a bunch of places using int() in combination with the fb.evaluate* functions, seemingly to avoid this function's hardcoded 16. Would you be interested in switching those to use this fixed evaluateIntegerExpression?\n. Chisel has a pdata command added by @bartoszj in #83.\n. Thanks for submitting ideas! Keep em coming :sparkler: \n. This sounds familiar to #12. I wonder if those underlying issues were resolved, and if so if there's been any regressions.\n. Good point, sorry I was too quick to answer. In the past I used AppCode a bit, but not lately. Have you filed a ticket with JetBrains?\n. To answer your first sentence, Chisel isn't intended to be Xcode only, and so should work in AppCode. However I'm not aware of any contributors who use AppCode, so I'd have to unfortunately call AppCode unsupported.\n. Interesting idea, thanks! We'll get this reviewed soon.\n. Thanks @idrisr \n. The above two lines could be a single line.\n. Why is thread return required?\n. Accidental whitespace.\n. Whitespace.\n. Don't need return False.\n. May as well move this type of check directly to where it truly applies. Would that be armv[67] only?\n. -drawViewHierarchyInRect:afterScreenUpdates: is iOS 7 only. Are you willing to update this to support iOS 6?\n. :+1: \n. I think this should be try/except instead of if/else.\n. The (BOOL) cast is unnecessary with the use of evaluateBooleanExpression.\n. This (BOOL) cast too.\n. Can you put an else here and print an error message? We could assume object is a class and include the class name in the error message. Or not if there's a good argument not to assume an objc object.\n. Yes, I misunderstood the original intention of catching 0x000000. :+1: \n. \"relative address\"?\n\"framework or library\"?\n. The use of self here is misleading. To offer a possible wording:\n\nPrint out the value of the key path expression using -valueForKeyPath:.\n. What do you think about treating this case as equal to po? That way, we can all type pkp except when evaluating something fancy.\n. I liked the previous way, using split('.', 1), makes the above 3 lines a one liner, and still allows for handling the case where there is no key path.\n. In a previous commit you had it evaluating object as an expression, before evaluating the -valueForKeyPath:. How come you removed that? It seems useful because it could allow:\n\npkp [someObject methodTaking:1 and:2].foo.bar.whatever\n. > My python is terrible.\nDon't worry, Chisel was written by objc developers :)\n\nI also see the possibility of stepping through the key path in python and asking the object if it responds, and the stepping, or printing a good error message if it doesn't respond.\n\n:dollar: \nOoh! It would even allow typos correction if we queried inspected the selectors on an object and found the nearest match.\n. See my other comment. Personally, while debugging, I'd rather make things as convenient as possible :)\n. Thanks for looking into it! It's probably diminishing returns to implement walking the key path.\n. There's a triple-space between the sentences, not sure if intended. One is the norm in Chisel.\n. This looks like a mistaken edit, unless I'm missing something.\n. We have a function by the same name in fblldbbase.py. Can we have one single unified version? Can we use int(s, 0) to get automatic base conversion from the text of the input?\n. When does 0x7fffffff happen?\n. Four space indent here.\n. Yep, @selector has been working for me.\n. It works at work. I'll try this on a new/empty project and confirm it works.\n. Works as expected even in a brand spanking new app project.\n. Hey @arigrant, what do you think about baseline Xcode support? Should Chisel support anything more than just the current version of Xcode?\n. @mblsha Which version of Xcode includes r222189? That date is pretty recent\u2026\n. Instead of checking for variations at these call sites, would you mind doing a normalization inside currentArch(). In other words, make currentArch() return 'x86_64' instead of 'x86_64h'. Thoughts?\n. Thanks. As of now, any differences between the two don't matter to Chisel. This pull request will fix bmessage and taplog. If we ever need to differentiate, we can figure out the best approach then.\n. Thought: have ppath capable of printing other paths other than docs, and have it take an argument to specify which specific path. Otherwise, perhaps ppath can just print the app root, and then it's easy for users to append Documents or any other subpath.\n. In other parts of Chisel, in addition to printing a value, we've copied it to the pasteboard. Would you mind adding that here?\n. > evaluateExpressionValueInFrameLanguage() is not actually called anywhere\n:+1: \n. It seems this will always be true, since foundLocally will always be false in this elif branch.\n. Use evaluateObjectExpression.\n. Use evaluateObjectExpression.\n. Use evaluateObjectExpression.\n. Use evaluateObjectExpression.\n. Use evaluateObjectExpression.\n. Use evaluateObjectExpression.\n. Use evaluateIntegerExpression.\n. Use evaluateIntegerExpression.\n. What do you think of getting the model as a string, then do the string search in python? Might be clearer that way.\nAlternatively, is there any benefit choosing which selector to call based on availability, such as respondsToSelector:@selector(accessibilityActivate)?\n. False positive on my part. This can be left as is, apologies for the misdirection.\n. Were you intending to rectify this in 55cca664bd211f226026a51d5413350a76645e29?\n. :+1: \n. Can you make constants for these numbers?\n. This could use evaluateObjectExpression() instead of evaluateExpressionValue(), which would make the NSString cast unnecessary.\n. :+1: \n. This can call os.system() directly, it's not necessary to call it via HandleCommand(). \n. What do you think about calling this slowanim?\n. Can we run this for all windows instead of just the one at index 0?\n. This is awesome!\nFor what it's worth, another way that might have worked is to use NSArray's custom implementation of -setValue:forKey::\nobjc\n[[[UIApplication sharedApplication] windows] setValue:@(speed) forKey:@\"speed\"]\n. Where allowable, can we change the XYClass * casts to simply id?\n. Can we provide a default? If I call slowanim, maybe set it to 0.25? Perhaps we can dig up the speed the simulator uses, but that's hardly worth spending much time on.\n. Can these methods be made instance methods, and then foundElement made into an attribute? Or does this value need to persist from one chisel command invocation to the next?\n. This could be echo -n to avoid the tr piece.\n. Seems /bin/sh doesn't handle -n like bash and zsh do. Oh well. Thanks for trying.\n. Default oldView to None?\n. Can you comment on why SetAsync is necessary? And, remove the space after SetAsync?\n. Now that oldView defaults to None, the None here can be removed.\n. Just noticed this. We don't really do this anywhere else with any output. Do you think it's necessary to mention Chisel and VS by name?\n. This block shouldn't be removed. recursionName is used below.\n. :joy: \n. Ah yes, I meant to include an example output, thanks for asking!\nFor a view controller, something like:\n<XXXViewController: 0xdddddddd>: didTapButton:\nIf there are multiple actions:\n<XXXViewController: 0xdddddddd>: didTapButton:, didTouchButton:\nThe output would be messier if the target provides a verbose -description method. Perhaps this shouldn't rely on the built in -description and should instead manually format the <Class: 0xdddddddd> string.\n. What's the reason for using 0/1 instead of False/True?\n. IANAPG either, but I believe format is preferred over %. However, format does not require named args, so a middle ground is:\npython\nHTTPMethod = fb.evaluateExpressionValue('(id)[{} HTTPMethod]'.format(request)).GetObjectDescription()\nEDIT: However there's a readability advantage to the way @VTopoliuk has it now.\n. Let's spit out an error when attempted on device.\n. \"portable\" is definitely opaque to me. I'm good with --base64. Other suggestions: --inline(-data), --embed(-data)\u2026\n. I'm not sure if we state an official iOS version support. If we don't, this is as good a time to start. So yeah, let's say iOS 7+.\n. s/--portable/--embed-data/\n. A few extra blank lines here.\n. Could this be\npython\npretty = 1 if options.plain is None else 0\n(seems grammatically more natural, at least in english)\n. It looks like this line should be moved into the elif not runtimeHelpers.isIOSDevice(): branch. EDIT: Oops I had \"Show notes\" turned off, didn't see that I was duplicating @mattjgalloway's comment.\n. I left a couple comments. Primarily needs a fix for the location of dataFile.\n. @mattjgalloway Ah I see. I didn't know that sandbox apps could write to /tmp. If that works, then sweet!\n. This could be && instead of ; to prevent curl from trying if the base64 decoding fails.\n. Note to self, I think this should be parameterIndex + 3 because the $argN aliases start at 1.\n. Is there a reason not to make this 0 so that it handles decimal and hex?\n. Did you want to have two separate asserts? One on the class, and another on depth?\n. The if isn't necessary, the for for loop will do nothing on an empty range.\n. This assert shouldn't be necessary, since it's already checked earlier in the run method.\n. This looks like it should be something more like:\npython\nassert true, \"Recursive bordering is only supported for UIViews\"\nassert depth <= 0, \"Recursive bordering requires a depth greater than 0\"\n. I see. It reads like it's assert bad values on the depth, yet giving an unrelated error message.\n. I see. It reads like it asserts bad values on the depth, yet giving an unrelated error message.\n. Is this a backwards compatible change, will it still work < iOS 8.1?\n. This method is only publicly available in iOS 8 and later. Do you know if it's available on iOS 7.x? Ideally we should still support iOS 7.x, or at least should handle it gracefully.\n. 1. This should use or instead of binary |.\n2. Maybe extract into a helper method, isSimulator?\n3. Is there a reason this isn't using evaluateObjectExpression?\n. This method looks superfluous.\n. This could be more efficient and also simple by comparing the results of rfind for 'RETURN' and '\\n'.\n. The above three functions all use an initial 4 space indent, which should be 2 spaces in sticking with the project's default.\n. @longv2go Do you plan to update this description?\n. @longv2go This is still in need of fixing.\n. @longv2go You don't need the (BOOL) cast when calling evaluateBooleanExpression.\n. This will produce false positives. Negative origin isn't necessarily a cause of views not showing.\nCould this use CGRectIntersectsRect to see if a view's frame shares space with its superview?\n. Maybe instead of 0, a small number in case this has a garbage or unintentional value that is not exactly zero but still results in an alpha that makes the view essentially invisible. Also what happens when the alpha is less than zero, is that a case this should check?\n. Can the wrapping parens be moved into isKindOfClass?\n. Which inputs cause int to throw?\n. This file is compiled with ARC turned off, otherwise there'd be bridge casting on the context.\n. Theoretically yes, in practice it's currently always present. I wanted to try to make this code easy to digest, so I left out the NULL checks here and also don't check the return value of malloc_get_all_zones. In part I feel semi justified because this is not intended for production use, just debugging. Thoughts?\n. :+1:\n. Cool, cargo cult is exactly what I wanted to avoid.\n. ^ this.\nThe info should be in malloc.h, but since they're not, I documented what I know internally to this implementation.\n. I just tried re-declaring malloc_get_all_zones inside this file, and giving that declaration a docblock. I was hoping this local declaration would override the one in malloc.h, and cause Xcode to show the local docs on option-click, but it didn't work. I could avoid importing malloc.h and create my own header that declares what this file uses, with its own documentation, but I don't think that's really a better approach.\n. @modocache What do I add here to indicate the block can't be null? Should I add an assert internally too?\n. I'll think about this some more. I'm down with \"make it easy for people to read documentation\" but the documentation in these comments does not belong in this file's header.\n. props does not ever get freed.\n. attrs does not ever get freed.\n. My python is clearly lacking, how does this else: section work? Does it only run if the for loop has nothing to loop over (in this case view count is zero)?\n. Why do all of these check that the selector exists first?\n. What is the mnemonics behind this name? What does xt mean?\n. Can has verb? Ideally I would call this settext but that is too close to setxt (though see my comment on that name too).\n. This won't handle any first responder that has subviews. Is there a reason for that? I'm not aware of anything that prevents a view with subviews from being first responder.\n. In chisel this idiom isn't common. I'd prefer we only guard if there's a reason for it, and even better if we could add a comment why that reason is.\n. I see, thanks. How about setinput, settext? However, for existing accessibility commands, we use \"a11y\" naming. It's foreign, but we might want to be consistent with that? What do you think @gkassabli?\n. > this branch of code is only executed when a view has no subviews.\nRight, and I'm wondering about cases where some text input view has internal subviews. There's no guarantee that that a text input view will always have no subviews. I think the isFirstResponder check should go above the loop, and if it fails, then loop over subviews. This would make it breadth first, but I don't see a problem with that, do you?\n. This file doesn't need ARC disabled. And actually, it needs ARC enabled because there are no -release calls, so the objects allocated in here are leaking.\n. Will this file always be #imported? If so, then these aren't necessary.\n. Wanna add NS_ASSUME_NONNULL_BEGIN?\n. I dislike myself for asking, but can we either do aClass or cls?\n. Indentation is off. Can you use { and } around the if's body?\n. Is an autorelease pool required?\n. I wonder if we should use [object isKindOfClass:cls] here? It will be pretty common to look for duplicates of NSString, NSArray, NSDictionary, etc, but those are all implemented as class clusters and as such are essentially abstract classes and no instances will be found. These collection objects will actually be internal subclasses, and I we definitely don't want to force callers to refer to internal subclasses for many reasons.\nOn the flip side, there might be cases where the caller wants to find duplicates based on exact class matching, not subclasses. I suspect this will be the less common case, so I would be fine with not supporting this case right now, and dealing with it later.\n. The (id) cast after the && should be (BOOL).\n. The (id) cast after the && should be (BOOL).\n. That's definitely more readable. The use of maxsplit was to avoid doing more work than necessary. \n. This might not work, it will have to be tested or double checked. My question is around the nature of the range values returned by the malloc system. Does range.size indicate the class instance size, or does it indicate the full size of the block of memory that malloc returned.\n. Another check to perform before calling the block, is to check if the object is being deallocated, presumably by calling -allowsWeakReference.\n. I wonder what all possible outcomes are when object is not actually an objc object. At this point, all that is known is that the memory is large enough, but a lot of allocations will pass that test. Will object_getClass return nil if it's given something that's not an objc object, or could it assert and crash? If the latter, this code will need it's own getClass implementation.\n. Elsewhere in chisel, there's a check that a given private method exists before calling. Would you be willing to add a respondsToSelector: check here too?. I think this can be left out.. There is a Continue() function that can be called directly, but given the way Chisel is currently architected, doing it this way is cleaner. Wanna change this to 'process continue' to match the 'process interrupt' used below?. Should this code save the current value of async and set it back after?. Does lldb silently accept an empty command? I ask because the description says zzz 3 \"process interrupt\" is equivalent to just zzz 3, so I'm presuming this means lldb doesn't error on empty commands.. I think that's right, but I didn't think its affect was for only one command, I'm thinking it stays in async mode until something calls SetAsync(False). If that is the case this command should change it back to the original value after it's done.. \ud83d\ude0e I did overlook the default.\nGiven the declared default, don't feel strongly either way about handling an empty command.. \ud83d\ude1b\nThis pull request is old, I'll close it. It is a good question though. My first thought is that it's ok to ignore NSProxy, because proxies are semantically not the type of class that would allocate much, especially not variable length objects like arrays and other collections.. I spelunked last night, and the main thing is that the async setting decides whether Resume() or ResumeSynchronous() is called. I didn't write any code though which would really answer the question. I don't know if those other cases really confirm it either way.\nSince it must work as is, we can leave this for another day \ud83d\udc4d . If you do more changes to pcomponents in the future, it'd be nice to check that it is actually CKComponent.. class OpenSandboxBox?. If someone doesn't know these commands, they might also not realize that the // comments are not supposed to be written. Generally I prefer not adding comments at the end of command lines, but if you feel strongly then they should at least be commented with # which is the shell syntax for comments.. Can the overlay be dismissed? Or is it going to remain on screen for the rest of the time the app is running?\nWhy can't this be:\nobjc\n[UIDebuggingInformationOverlay prepareDebuggingOverlay]. 1. The use of dispatch_once implies the overlay can only be shown once. If it can be dismissed, what happens the second time dio is run?\n2. While that's true when compiling code with clang, when evaluating code from lldb, private/internal classes and methods can be invoked with typical objc syntax.. After glancing at this article on UIDebuggingInformationOverlay, it appears this code also needs a call to [[UIDebuggingInformationOverlay overlay] toggleVisibility].. So I think this method could look something like this:\npython\nfb.evaluateEffect(\"[UIDebuggingInformationOverlay prepareDebuggingOverlay]\")\nfb.evaluateEffect(\"[[UIDebuggingInformationOverlay overlay] toggleVisibility]\"). Did you have any alternative names you considered? I think dio is good as an alias for a more memorable name, but I'm not sure what to call that. debugoverlay?. doverlay \ud83d\udc4d . Does this do anything beyond mkdir -p?. I don't know much about Xcode's install action. Why install into a temp path and then copy from there into the true destination?. According to the docs, the above two should be flipped. DSTROOT=/ and INSTALL_PATH=$(PREFIX).. Should this be set to NO in the .xcodeproj? I'm fine with it here either way, but I'm wondering why not have it default to this anyway.. @keith Dear Sir Make-a-Lot: how do I conditionally do this? If there's no LD_DYLIB_INSTALL_NAME, then I want to leave this out, so that it remains unset.\n  . @keith does this change look legit? The original here was still adding LD_DYLIB_INSTALL_NAME=... to xcodebuild command, but this change appears to fix that.. What do you think about using the Python API, instead of parsing the output of breakpoint list?\nFor example, it would roughly look like:\npython\nfor breakpoint in target.breakpoint_iter():\n  for location in breakpoint:\n    if pattern.search(location.GetAddress().symbol.name):\n      location.SetEnabled(False). typo: should be \"regular\", not \"relative\". lldb has an alias command named rb for regex breakpoint. I think it makes sense to call this rbenable and rbdisable, what do you think?. Enabling/disabling via filename and module definitely seem useful!. These two lines are no longer used.. This can be re.compile(expression, re.I). This also doesn't need the format, I think it can be just .search(str(location)).. Nice addition \ud83d\udc4d . This documentation block uses benable where it should be rbenable.. This doesn't appear to be implemented. I don't think it's necessary to implement, since br dis (breakpoint disable) does this already.. What does id = {0x0000024e} represent? The address of the breakpoint is in the location: address = 0x00000001832ef564.. Do you mean you want rbdisable 0x1832ef564 to disable the breakpoint whose address is 0x00000001832ef564?. Maybe add special cased input handling. If the user's input expression matches 0x[[:xdigit:]], then when building the regex, add a 0* after the 0x. So 0x1832ef564 would become 0x0*1832ef564.. I don't think this should be documented. A builtin command already does this: breakpoint enable (or br en for short).. Likewise, this is builtin.. Did you find this was necessary in your experience? I'm curious what are some example cases where these commands need to apply to the breakpoint itself instead of working only on the locations.. why the change to setValue:forKey:?. why up to 10?. can you explain min_var_count and max_var_count? I'm not clear on their purpose.. It looks like this check can be removed.. I see now why you have this. Never mind :). Now that pviews supports -w, I don't think it's worth having a separate command. A user could get pwindow by adding this to their ~/.lldbinit:\ncommand alias pwindow pviews --window %1. This results in a framework named Chisel_macOS. Ideally there would only be one framework, but a fat binary can't have both a simulator x86_64 slice and also a macOS x86_64 slice.. you could do not ret.startswith('0x'). you could do print fb.evaluateExpressionValue(ret).GetObjectDescription(). what are these changes about?. ",
    "mattjgalloway": "LGTM!\n. Awesome! I like this. Can you add updating the README to the diff please?\n@arigrant What do you think?\n. This LGTM. Anyone else @facebook/team-chisel ?\n. @kastiglione Yeh. Although I just did some more, with things like:\nvisualize [0xabcd0123 image]\nWhere 0xabcd0123 is a UIImageView, and found there need to be a slight fix. Commented on that line though. Once that's in I think it's good to go.\nThanks for doing it @antons - it's pretty neat!\n. @facebook/team-chisel Everyone OK with this? Happy for me to merge (once conflicts are resolved)?\n@antons Looks like you'll need to resolve conflicts first. Can you do that and update please?\n. @antons Thanks once again!\n. FWIW I plan to add other methods like exercising AL ambiguity on certain views / all views currently on screen.\n. Ping on this one. Would be a nice one to have I think.\n. @CHMin9 Any idea how to reproduce this? Do you have a project that reliably reproduces it?\n. LGTM. Ship it!\n. I like this idea a lot.\nHuge +1 from me.\n. Closing this out as it works in Xcode 6.3. It must have been an issue in the first beta. Presumably works now because we use _printHierarchy.\n. @kastiglione LGTM. Ship it!\n. LGTM. Ship it!\n. We should ship this. @kastiglione did you check it works on ARM yet?\n. LGTM. I'll merge it.\n. Overall LGTM, sans the comments. @kastiglione - any thoughts before we merge?\n. @VTopoliuk How about the nit? Can you fix that and then I think we're good to go!\n. Let's do it.\n. I see what you mean. This looks good to me. @kastiglione what do you think?\n. nit: Remove the extra 2 spaces.\n. I think you need this here:\nimageDataAddress = fb.evaluateObjectExpression('UIImagePNGRepresentation((id)' + commandForImage +')')\nI was having trouble with certain commands if I didn't cast to id.\n. @antons Any chance you can fix the indenting here please? I'm guessing this happened in the merge.\n. @antons And here, no need to change this. I'm guessing this happened in the merge.\n. Oh right, yep sure!\n. I would prefer:\nHTTPMethod = fb.evaluateExpressionValue(\"(id)[%s HTTPMethod]\" % (request)).GetObjectDescription()\nBut then again, I ain't no Python guru.\n. Presumably this only works on the simulator then? Could we base64 this maybe and throw it into curl as a base64 encoded string?\n. Could this be useBase64Data or something? portable seems like a strange name for this parameter.\nOr, just always do base64 data?\n. Probably no need to do this, since it's available in iOS 7 and I don't think we support <iOS 7. Although I can't remember for sure. @kastiglione?\nAnd if we do supper <iOS 7 I would prefer in the else case here to print an error, and include an option to skip the data part of this.\n. nit: Move this inside the elif not runtimeHelpers.isIOSDevice():.\n. I don't get how 'portable' makes sense here still. It sort of makes sense, but not intuitive to me.\nSince you're copy-pasting the curl command anyway, I don't see why it matters that the base64 is ugly.\n. Ah ok. Big amounts of data!\nI still do think that portable is a bad name. Maybe even it should be dataStyle and then options are tmp or base64 and it defaults to the one which makes most sense for the current platform.\n. Happy to see what @kastiglione / @arigrant think too.\n. Oh whoops sorry!\n. @VTopoliuk actually pointed out that this is required outside of the elif, as it's used down on line 476.\n. Hmm. Actually, it would be best to set to None here, and then inside the elif not runtimeHelpers.isIOSDevice() set it to the string. That way it's only set if we did actually write it to the file.\n. It would be nice to at least warn if this fails.\n. ",
    "arigrant": "Looks good to me. I am going to merge.\n. Thanks!\n. Thanks though!\n. Thanks for this! I need you to sign the CLA before I can merge.\nhttps://developers.facebook.com/opensource/cla\n. Thanks. I hope you find these useful!\n. Awesome work. Thanks! :D\n. Haha. That's orthogonal to this. We should actually merge show{view,layer,image,imageref} into \"visualize\" which basically does an -isKindOfClass: check and assume the else clause means imageref. Thoughts?\n. Thanks for the PR @alistra. For us to review/accept this, are you willing to sign our Contributor's License Agreement?\n. Thanks! I appreciate you taking on making this work for AppCode! It feels heavy to pass around the result object everywhere though. What if we added a method to FBCommand that was def print(self): and people could just call that? Then the infrastructure could set the result object on the command objects when it ran them.\nWe'd also need to find a way to lint/protect against use of the raw print command but that is a separate issue.\n. Looks great, thanks!\n. This shouldn't be needed. What happens when you try to load the commands without doing this?\n. I agree that this should be part of the visualize command. Ideally it might be visualize data --string or something. It might be worth us investigating subcommands similar to frame info and breakpoint set.\n. That would be great to have an editor! Why not make it --application/-a? Then if I did visualize data --image --application=Photoshop you could convert it into a temp image and then just execute the python:\nos.system('open <image> -a <Application>').\nThis would allow strings and images to share the same flag.\n. Excellent, thanks!\n. I am not sure where the issue with frame comes from that you are seeing but this code is definitely wrong when the view has a non-identity transform. Let's merge! :D\n. show view is equivalent to [view setHidden:NO]. If you want to actually see the view you need to do showview view. There is an open issue already to improve the naming here.\n. Yeah!\n. Looks good to me. Let's take it. Thanks!\n. This is a bug in LLDB that happens every once in a while. The only solution that I have found is to restart Xcode/LLDB and then the issue goes away. Can you confirm that?\n. Thanks!\n. This is really similar to presponder except it's only views. :D\n. This looks great to me, let's take it! :D\n. Once the conflicts are merged I am free to merge this.\n. s/free/fine/\n. Looks good to me! Thanks.\n. Thanks!\n. Isn't this the same as 'slowanim' and 'unslowanim' or have we not merged that, @kastiglione ?\n. What happens when you type in a command?\nCheck that ~/.lldbinit has the correct contents and restart Xcode. If it still doesn't work then try this command in the debugger:\ncommand source ~/.lldbinit\n. Looks great to me! I'll let @kastiglione take a peek as well though.\n. This is great. Thanks!\n. This is super brittle and couples the implementation to\nsys.modules[\\'FBFindCommands\\'].FBTapLoggerCommand.taplog_callback\nInstead we should use the SetCallbackMethod on SBBreakpoint.\n. Add a period at the end.\n. I'd imagine that you'd often then go to execute a command with this address. I'd be great to put the address on the clipboard, just like fv and fvc do.\n. I wonder if we don't want to merge this into fvc where it is the behavior when given the --view flag. We could then make the current behavior the --name flag (which is default for backwards compatibility).\n. Grabbing the layer and asking it to draw in the context should be sufficient.\n. Do you mind adding an NSObjectHelpers file and making an isKindOfClass method? Other than that I am so happy for this and totally psyched. Thanks for doing this!\n. You can use evaluateObjectExpression and avoid the cast.\n. Maybe we should make evaluatePointerExpression?\n. You can use the shortcut lldb.process for this. :D\n. We should probably also make evaluateObjectDescription.\n. I feel like pdocspath might be a better command here, even if it is a bit verbose. Luckily the prefix matching will then allow pdocs to work as well. Thoughts?\n. What does this look like when it prints?\n. s/interactible/interactable/g\n. ",
    "pszalko": "Hi Richard, \nI had the same issue with config file. However, after short googling I found out the way how the config file should look like. \nHere is mine .lldbinit file:\ncommand script import /path/to/chisel/fblldb.py\n. ",
    "richardsimko": "Thank you! That fixed it :)\nKeeping the issue open so the developers can change the readme.\n. @kastiglione Done!\n. ",
    "jamieomatthews": "sorry, didnt realized someone already patched this!\n. ",
    "simonwhitaker": "@arigrant No problems - done!\n. @kastiglione You're welcome! Nice repo. :smile: \n. ",
    "jdriscoll": "That works. Thanks!\n. ",
    "bencochran": ":pencil: Signed. \n. Updated to run showview and showlayer through the same method. Also made showlayer produce retina images from retina apps.\n. Well, got around to that sooner than I thought. Attached pull request as promised.\n. :smiley: Thanks for taking over, @antons!\n. ",
    "alistra": "@arigrant signed.\n. @kastiglione I was thinking about this.\nI reported it now:\nhttp://youtrack.jetbrains.com/issue/OC-9356\nLet's wait for the AppCode guys to say something I guess.\n. The Issue was marked to be fixed in AppCode 3.0\n. ",
    "jkubicek": "I think I've addressed all the comments. Please let me know if I've missed anything or if you notice any issues!\n. :sparkling_heart: :+1:\n. @kastiglione Unless I'm missing something (I'm fairly new to Python) we still need an if statement. \"0x000000\" is a valid return value and is what my original int() conversion was designed to catch. I did wrap the int() function in an exception block, though.\n. Merged into fvc!\n. ",
    "stevewehba": "Yes, I looked in the console log and I don't see anything related to \n\"chisel\" or Xcode add ons.\nOn 7 Mar 2014, at 12:14, Dave Lee wrote:\n\n\nRelaunched Xcode. \"po\" and \"p\" still unavailable. Any idea about how \nto get \"po\" and \"p\" back?\n\nHmm, have you looked in Console.app to see if any logs might be of use \nto figure out what's going on?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/chisel/issues/14#issuecomment-37063063\n. Please disregard my previous issues. I found the problem. The console \npane was defaulting to \"Target Output\". Not sure why or what caused it \nto change from \"All Output\". But I changed it back to \"All Output\" and \nall is well -- including the new chisel commands. Thanks.\n\nOn 7 Mar 2014, at 12:14, Dave Lee wrote:\n\n\nRelaunched Xcode. \"po\" and \"p\" still unavailable. Any idea about how \nto get \"po\" and \"p\" back?\n\nHmm, have you looked in Console.app to see if any logs might be of use \nto figure out what's going on?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facebook/chisel/issues/14#issuecomment-37063063\n. \n",
    "ghost": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. ",
    "JJSaccolo": "Done :) \n. ",
    "soniccat": "Hmm, I've done it before sending the pull request. I've saved it on my hard drive. Should I do anything else with it?\n. @kastiglione @arigrant thanks for the replies. Yes, it's better to have only one command. I'll wait until #25 has been merged and I'll send another pull request. Should commands look like visualize data --string and visualize data --image? \nNow I think about opening data as a string in an external editor. It can be useful when we have a huge json in data. Should I call it visualize data --string --editor?\n. @kastiglione @arigrant added data visualization in the visualize function\n. ",
    "mmmulani": "Dave: I think PEP8 says everything is supposed to be snake_case\n. updated!\n. this would be pretty interesting and I think useful overall. (My only concern is the increasing complexity in loading the two modules)\nit would probably help with getting community involvement as well, as I expect most people are put off by the foreign python way of doing lldb stuff\n. for iOS 7 and 8 or is this just a 7 problem?\nI wonder if there's some way to hack it in\n\nOn 12 Dec 2014, at 18:00, Dave Lee notifications@github.com wrote:\n@alloy raised a good (and obvious) point on Twitter: this approach will be troublesome on device.\n\u2014\nReply to this email directly or view it on GitHub.\n. sounds like way too much effort for a brittle mechanism that would run on every lldb start up.\n\ncould we fake this with lldb expressions and blocks to create the stuff at runtime/first use? (maybe only in the case of on device?) \n\nOn 12 Dec 2014, at 23:49, Zachary P. Landau notifications@github.com wrote:\nYeah you'll probably run into a copy issues loading onto a device. lldb in general would make it very easy, but that assumes you can have write+execute pages, so that method is probably out. The next method would be to save the library onto the device and then dlopen it (easiest way is probably have some code on the client side that knows how to download it from an endpoint). Or just always ship it as part of your debugging app.\nBut you'll have to sign the library with the same key that the main app was signed. The best way to do that is probably have a little script that looks at the key used to sign the main app, and try to sign the library with the same key.\n\u2014\nReply to this email directly or view it on GitHub.\n. I would stick to UTF-8, IMO the other encoding don't really matter.\n\nI like the idea of copying to clipboard, opening in editor, etc. but maybe have that as a separate command, so you could chain them like:\n\npstr dataVariable\n$12 = @\"...\"\ncopy $12\n<$12 is now on the clipboard>\neditor $12\n \n. \n",
    "antons": "@kastiglione I\u2019ve done it before submitting the pull request.\n. @kastiglione No idea why 1 matters, but apparently there\u2019s something wrong with frame. Today a toolbar in a simulator was rendered at 320\u00d764@2x using bounds, and at 10240\u00d72048@2x (!) using frame. No wonder it sometimes fails to initialize a an image context on device, because it is too large.\n. @mattjgalloway Thanks for reminding me about it.\n. @kastiglione Good idea about the error message. Nice to know evaluateBooleanExpression doesn\u2019t need a cast. Done.\n. @arigrant Are you talking about something like this?\n. @arigrant As you suggested, I tried using lldb.process and lldb.frame. Unfortunately they fail half the time. Bugs in LLDB?\n. @arigrant @kastiglione @mattjgalloway Any news on this?\n. @mattjgalloway Good idea. Pushed the change. \nThanks to @bencochran for the original implementation!\n. @mattjgalloway @arigrant I resolved the conflicts.\n. @mattjgalloway Done. ;-)\n. @mattjgalloway Yep, missed it during merge. Fixed now.\n. @mattjgalloway I intentionally changed it to match the sentence above. Are you okay with keeping it?\n. ",
    "rounak": "I keep getting an error No available formula for chisel. Am I missing something? \n. brew update worked, thanks. Silly of me to not have tried that before.\n. ",
    "dchirita": "Did it fail to create your .lldbinit at ~/.lldbnit?\n. ",
    "fsjack": "Thanks @arigrant .\nAnother problem raised.\nError [IRForTarget]: Call to a symbol-only function 'memset' that is not present in the target\nerror: warning: function 'UIGraphicsBeginImageContextWithOptions' has internal linkage but is not defined\nnote: used here\nerror: The expression could not be prepared to run in the target\nThen as expected,Preview show up but also a alert show up with it saying \"Could not open a empty file\".\n. ",
    "btxkenshin": "@arigrant   \nWhat do you mean restart Xcode/LLDB?I tried restart Xcode many times, nothing happend. \n. ",
    "starFelix": "I also had trouble by using these commands.\nerror: instance method 'undoManager' has incompatible result types in different translation units ('id' vs. 'NSUndoManager *')\nnote: instance method 'undoManager' also declared here\nerror: 1 errors parsing expression\nCan anyone help me?\n. ",
    "ignazioc": "Same issue\n```\n(lldb) po _sampleView\n>\n(lldb) showview _sampleView\nerror: Execution was interrupted, reason: Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.\nThe process has been returned to the state before expression evaluation.\n(lldb) \n```\nI cannot use any \"gui\" related command, like mask/umask border..\nI'm using xCode 5.1.1 and lldb version\n~$ lldb --version\nlldb-310.2.37\n. ",
    "alper": "You are right. That was it. (Unfamiliarity with how the homebrew package search works.)\n. ",
    "kolinkrewinkel": "Yep, the command list in the readme has a checkbox to denote what's supported and what isn't. I'll close this for now, unless the support is inadequate.\n. :shipit: lgtm\n. ",
    "facebook-github-bot": "Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. ",
    "pbernery": "I didn't really expect brew install to modify my conf file though I expected to have it work as soon as brew install was finished.\nI think an update of the install instructions would be enough. As I mentioned, it suggests that editing the ~/.lldbinit is only needed when installing manually while is is required for both methods.\nI just saw that brew info chisel gives information about that, in the Caveats section. This info could also be displayed at install time (I don't it has been displayed).\n. Correct, I missed it.\n. ",
    "javache": "Yup, that's good enough for me.\n. ",
    "suite22": "@bryansum I copy and pasted from help like you suggested. Nothing special but it's now up for improvement - https://github.com/facebook/chisel/wiki\n. ",
    "idrisr": "Seems to me the best way to do this is to use something like Sphinx to autogenerate documentation from the code and then require all functions have sufficient documentation within the code. Ideas / comments?\n. I believe @KingOfBrian is correct and it should be base 10. Created this pull request: https://github.com/facebook/chisel/pull/119.\n. @jernejstrasner @nealsun can you please do a brew info chisel in the terminal and post your results.\n. @Gargo did you install using brew? Post your results from doing these commands in the terminal: \nls /usr/local/Cellar/chisel/ and cat ~/.lldbinit\n. @adad184 are you still having this issue? Can you run command script list when visualize is no longer working? Also please post the contents of your ~/.lldbinit.\n. @adad184 cool.  looks like this issue can be closed.\n. I can confirm this bug. Here is a simple app to quickly reproduce the issue: https://github.com/idrisr/wivarBug.\nAlso I added a watchpoint to that ivar using the Xcode GUI tools and using wivar self _number. You can see from below that there are different memory addresses being watched so the error is likely somewhere in calculating the memory offset of the ivar.\n\n. I've submited this pull request to fix this issue: https://github.com/facebook/chisel/pull/117\n. Is that valid syntax? Am I missing something?\n```\n\n\n\n\nlldb >>>> e\nEnter expressions, then terminate with an empty line to evaluate:\n  1: CGFloat p = (CGFloat )&constVariable\n  2: p = 1.0\n  3:\nerror: use of undeclared identifier 'constVariable'\n``\n. great, thanks!\n. I agree it would be cleaner to replace theint(fb.evaluate)calls with the newfb.evaluateIntegerExpressionmethod. I'll put a new PR in soon.\n. 1. I _believe_ that LLDB will return the expression cast tointin decimal, though I am not certain enough on this to say this is true in all cases. \n2. The0prefix does indicate a octal usually, but not for this python command. The second argument is the numeric value of the base you want, so if you wanted octal, the 2nd argument would be8.  I'm including theint()` docstring for Python below.\n\n\n\n\n```\nIn [1]: int?\nDocstring:\nint(x=0) -> int or long\nint(x, base=10) -> int or long\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n``\n1. That's a good point.ptrdiff_tcan be larger than anint`. https://www.gnu.org/software/libc/manual/html_node/Important-Data-Types.html\n. Yeah that comment is misleading. '0' indicates an octal string literal.\n. We're all newbs once, not an issue. \n~/ refers to your home directory. You can put your .lldbinit in other places, but then Xcode won't automatically load it. If you put it somewhere other than ~/.lldbinit, you need to source it in Xcode in the LLDB session like this:\n(lldb) command source <mypath>/.llbinit \nwhere <mypath> is replaced by the path of your .lldbinit\n. Good point. I agree it would be better to make this int(output, 0) to handle any integer literal.\n```\nPython 3.4.3 (default, Jul 13 2015, 12:18:23)\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nint('0o13217', 0)\n5775\nint('0xf3217', 0)\n995863\nint('0b1010110', 0)\n86\nint('123', 0)\n123\n```\n. \n\n\n",
    "KingOfBrian": "Updated per your comments.   I've been waiting for a pkp command for a few months now, but adding a command to lldb directly was a bit intimidating.  I was psyched to see chisel and how easy it was to add commands!   @adamhrz discovered chisel in a talk at cocoaconf boston. \nI'm also eyeing an Accessibility helper command, but again, my python's terrible.   Will keep it on my mind tho, I have an ugly accessibility issue that it'd help greatly in.\n. I cleaned it up a bit, and I'm starting to like python.   I moved some functions into helpers, as I think they're nice and re-usable, but whatever you want organization wise works for me.\n. No problem!  The basic interplay with accessibility, is that if accessibilityElementCount != NSNotFound, traverse the accessibility tree, otherwise, traverse the subviews.  This is the same method that voice over uses.   It then print out every element, if isAccessibilityElement = YES, print the accessibilityLabel/Value, otherwise print out a no-op string.\nIf there's any other info you want, just ask!\n. Hey @kastiglione , I did a number of updates to address most of your issues (I think).  I'm a bit nervous about the integer fix, but I believe it's correct.\nI searched the private headers and wasn't able to find one.  That would of been nice!\n. Yea, no worries, glad we got something better in.  I may add some thing to print out more information when I have some ax work, but thanks for following up.\n. Great idea!   Although I had fun figuring out how to use objective-c via python, it wasn't the most productive process.\nI don't think the slowness of the commands is that big of a deal, but I bet developers would be more inclined to contribute if it wasn't so painful to develop for.\n. This is fantastic.  Great finds on the AX stuff!\n. Much better approach, with fewer round trips by a large margin.   The different types of AX values can be added pretty easily.  forceStartAccessibilityServer is awesome, I'm gonna add that to FRY to enable AX.\nI've never determined traversal choices via a nil accessiblityLabel, and I think it may cut the tree off a bit early.  A UITableView accessibilityLabel for instance is used to store the empty table view AX value, and without actually testing, I'm not sure how this would work.   There are other instances, like a navigation bar item where the accessibilityLabel is duplicated in an internal view.   It's not important to pick up that distinction, but for a debug tool, I think it'd be better to be more liberal.    And, some magic inside of _accessibilityElementsInContainer may behave differently than I think.\nAnyway, this approach is definitely the correct one.  I don't have time to test it, as my AX work has passed for now.\n. My python is terrible.  Cleaned it up a tad.    I also see the possibility of stepping through the key path in python and asking the object if it responds, and the stepping, or printing a good error message if it doesn't respond.\n. It's an interesting idea, to add durable-ness, but I think it'd need a lot more checks than the presence of a '.' to be worth implementing.  IE, [UIApplication sharedApplication].keyWindow would still blow up.  I'd rather blow up in all slightly-wrong scenarios just keep clarity of intent.\n. Yea, looking at it again, I totally agree.\n. So I added some basic stepping through the key path, but an object can return a value from -valueForKey: and return false from -respondsToSelector:.    So I'm not sure this will work without some more thought.  There's no -respondsToKey: functionality.\nI'm not sure if you use FuzzyAutocomplete, but that does perform a good deal of completion/typo fixes when using po (when it works).   pkp does not get the auto-completion help like po does though.   Any idea how that could be fixed?\n. 0x7fffffff is NSNotFound (on 32 bit systems, whoops).   This indicates that the view is not an accessibility container.   If it returns 0, the traversal stops, if it returns 0x7fffffff, the subviews tree is traversed.\nI'm struggling with my python here, I imagine there's a cleaner way to represent it.\n. I'm not entirely sure why int(s,16) was used in the other version.  Are we sure it's not broken for values > 10?   I think it's broken but went un-detected, since having more than 10 VC's is rare, where over 10 subviews is common.\n. So I put in a fix for evaluating integers that prompted my method, and removed my method.   I believe it should be working properly now.\n. It would be helpful to add the ability to print the accessibility value and traits if possible.   If you had the values for them, adding an optional second argument to pa11y would be pretty easy.\n. ",
    "a2": ":+1:\n. Does @selector(_printHierarchy) work? Should we use NSSelectorFromString(@\"_printHierarchy\")?\n. ",
    "mrtom": "I wonder if Zack L (at FB) would be a good person to speak to about loading onto a device.\n. ",
    "zlandau": "Yeah you'll probably run into a copy issues loading onto a device. lldb in general would make it very easy, but that assumes you can have write+execute pages, so that method is probably out. The next method would be to save the library onto the device and then dlopen it (easiest way is probably have some code on the client side that knows how to download it from an endpoint). Or just always ship it as part of your debugging app.\nBut you'll have to sign the library with the same key that the main app was signed. The best way to do that is probably have a little script that looks at the key used to sign the main app, and try to sign the library with the same key.\n. ",
    "jamesgpearce": "The CLA is good now. Go for it.\n. ",
    "alanzeino": "Thinking of removing the requirement for the view controller to have a nav controller, since that isn't a requirement for a view controller to be dismissed.\n. Yep, lemme update this to make it more robust.\n. ",
    "bartoszj": "Done.\n. @kastiglione I agree with two commands. slowanim and unslowanim would be OK? Also I'll check slow animation on all windows.\n. Updated.\n. I've found that iOS Simulator is using 0.1 as speed value and I've set it in theslowanim command.\n. ",
    "mblsha": "Ok, done ;-)\n. evaluateExpressionValueWithLanguage() works fine in Xcode 6.0+. Once 6.2 becomes final maybe evaluateExpressionValueInFrameLanguage() will work as well.\n. Not sure, it's not yet in 6.1.1, so evaluateExpressionValueInFrameLanguage() is not actually called anywhere and is present for future reference. Hopefully LLDB in 6.2 beta has it, but I haven't verified it.\nI'll try it once it becomes final.\n. ",
    "moreindirection": "It looks like there are still a few problems in Swift. Any commands that are of the form \"po EXPRESSION\" need to be changed to \"expression -O -l objc++ --- EXPRESSION\"\n\"pviews\" and \"pca\" are two examples - just grep for:\nHandleCommand('po\nWould really like to see these changes merged into master, though. It's great to be able to still use Chisel commands when I hit a Swift breakpoint.\n. @kastiglione Sure, I just created pull request #73\n. Do I really have to sign the CLA for such a trivial change as adding arguments to LLDB commands?\n. ",
    "samjohn": "done\n. yeah, I can do that. I wasn't sure if there were any significant differences between x86_64 and x86_64h that would need to be addressed elsewhere in the code. This fix works for bmessage but I haven't tried out all the functionality in the repo so it may still break in other places. \n. ",
    "gkassabli": "Hey, @KingOfBrian.\nThat's a great idea. I haven't looked into that, but I will try to add this in next iteration of command\n. @kastiglione Yeah, I fixed it there. Apologies for not responding in thread\n. Unfortunately, despite the fact that accessibility behaves very differently in simulator and device - methods used are pretty much the same, so I didn't find any selector that can be used for this.\nI will change search to be python-based, though\n. You're right. Did it correct way initially, but refactored wrong way\n. Not sure how to do use it with a string. If I try evaluateObjectExpression(...) I get string address, instead of actual string in case or evaluateExpressionValue(...).getObjectDescription(). Any suggestion on how to do it right?\n. Yes, this should work properly now\n. Will address first 2 comments\n3. EvaluateObjectExpression will give us string address, while we need string python representation. expressionValue().GetObjectDescription() seems best way for that\n. ",
    "goldensecret": "totally. wrong place- never mind...\n. ",
    "dopcn": "@kastiglione sorry, back and working on it now...\n. Update copy to the pasteboard before print\n. have thought about this before. It seems to me the word docs path is a little ambiguous, maybe docs dir path is better but too long. Here use ppath is just easy to type in. will change to the name suggested.\n. @kastiglione hi I tried evaluateObjectExpression() and evaluateExpression() but only get pointer value instead of string value so I keep using evaluateExpressionValue() and split the string output in the new implementation. Am I missing something?\n. I don't know why echo -n just doesn't work as os.system()'s parameter. The -n will be taken as part of pathString and copied into pasteboard\n. ",
    "donshefer": "I'm seeing something similar in my Swift project:\n(lldb) caflush\nerror: :1:22: error: expected ',' separator\n(void)[CATransaction flush]\n. ",
    "yxztj": "Hi, I'm also seeing this error:\n(lldb) pviews\nerror: :1:20: error: expected ',' separator\n(id)[(id)[UIWindow keyWindow] recursiveDescription]\n. ",
    "nickkjordan": "This is bad, but I can't quite remember at this point.  I think it was on a layer though, because I remember doing some animations around then\n. ",
    "ignat980": "I am also getting this error. \n(lldb) caflush\nerror: <EXPR>:1:22: error: expected ',' separator\n(void)[CATransaction flush]\n                     ^\n                    ,\nI am running the command within a swift context, and I have no idea how to change the language from swift inside the debugger. I think this is related to #74 and #68 .\n. ",
    "alireza": "Seems like the problem only occurs in Swift projects in which lldb expects swift commands.\nBasically, in the python scripts commands sent to the debugger using lldb.debugger.HandleCommand are all in objc. They won't work when lldb debugger is in swift mode.\n. ",
    "stkent": "Same issue and output as @ignat980 above. Is there an easier fix than explicitly updating all the commands sent to the debugger to use expression -l objc++?\n. ",
    "schwarrrtz": "Same issue and output as @ignat980 and @stkent. Similar issues with flicker.\n. ",
    "theonepa1": "self is of type UICollectionViewController. Ran mask and got following error.\n(lldb) mask self.view\nerror: error: use of undeclared identifier 'self'\nerror: 1 errors parsing expression\nTraceback (most recent call last):\n  File \"/usr/local/opt/chisel/libexec/fblldb.py\", line 81, in runCommand\n    command.run(args, options)\n  File \"/usr/local/Cellar/chisel/1.2.0/libexec/commands/FBDisplayCommands.py\", line 55, in run\n    layer = viewHelpers.convertToLayer(args[0])\n  File \"/usr/local/opt/chisel/libexec/fblldbviewhelpers.py\", line 51, in convertToLayer\n    if fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[CALayer class]]' % viewOrLayer):\n  File \"/usr/local/opt/chisel/libexec/fblldbbase.py\", line 69, in evaluateBooleanExpression\n    return (int(evaluateIntegerExpression('(BOOL)(' + expression + ')', printErrors)) != 0)\n  File \"/usr/local/opt/chisel/libexec/fblldbbase.py\", line 61, in evaluateIntegerExpression\n    output = evaluateExpression('(int)(' + expression + ')', printErrors).replace('\\'', '')\nAttributeError: 'NoneType' object has no attribute 'replace'\n. ",
    "webdevotion": "@ultramiraculous, from what I saw in #121 you expected this ticket to be resolved as wel.\nToday I still get an error when running for example mask self.view in lldb.\nGot rid of my Homebrew install and using a clone from the main branch.\nbash\n(lldb) mask self.view\nerror: error: use of undeclared identifier 'self'\nerror: 1 errors parsing expression\nerror: error: use of undeclared identifier 'None'\nerror: 1 errors parsing expression\nerror: <EXPR>:1:13: error: expected ',' separator\n(void)[None removeFromSuperview]\n            ^\n           ,\nerror: <EXPR>:1:22: error: expected ',' separator\n(void)[CATransaction flush]\n                     ^\n                    ,\nerror: error: use of undeclared identifier 'None'\nerror: 1 errors parsing expression\nTraceback (most recent call last):\n  File \"/...path-to-chisel.../chisel/fblldb.py\", line 79, in runCommand\n    command.run(args, options)\n  File \"/...path-to-chisel.../chisel/commands/FBDisplayCommands.py\", line 93, in run\n    viewHelpers.maskView(viewOrLayer, options.color, options.alpha)\n  File \"/...path-to-chisel.../chisel/fblldbviewhelpers.py\", line 24, in maskView\n    origin = convertPoint(0, 0, viewOrLayer, window)\n  File \"/...path-to-chisel.../chisel/fblldbviewhelpers.py\", line 46, in convertPoint\n    fromLayer = convertToLayer(fromViewOrLayer)\n  File \"/...path-to-chisel.../chisel/fblldbviewhelpers.py\", line 51, in convertToLayer\n    if fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[CALayer class]]' % viewOrLayer):\n  File \"/...path-to-chisel.../chisel/fblldbbase.py\", line 69, in evaluateBooleanExpression\n    return (int(evaluateIntegerExpression('(BOOL)(' + expression + ')', printErrors)) != 0)\n  File \"/...path-to-chisel.../chisel/fblldbbase.py\", line 61, in evaluateIntegerExpression\n    output = evaluateExpression('(int)(' + expression + ')', printErrors).replace('\\'', '')\nAttributeError: 'NoneType' object has no attribute 'replace'\n. ",
    "pvinis": "this.\nx86_64h-apple-macosx\n. i actually changed the border function to use NSColor instead of UIColor and its ok now, but i thought it should choose by itself. maybe i have to change everything UI* to NS?\n. i installed it with brew.\n% brew info chisel\nchisel: stable 1.1.0\nhttps://github.com/facebook/chisel\n/usr/local/Cellar/chisel/1.1.0 (18 files, 112K) \n  Built from source\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/chisel.rb\n==> Caveats\nAdd the following line to ~/.lldbinit to load chisel when Xcode launches:\n  command script import /usr/local/opt/chisel/libexec/fblldb.py\n. oh.. i dont have that code.. mine was [UIColor ....\nis the version in brew that old?\n. yep. i will do that. thanks. will it also work for UIWindow stuff etc?\n. thanks again.\n. ",
    "MarcoSero": "That was quick! Thank you.\n. ",
    "palcalde": "Thank you! I used to use this command a lot to jump between siblings and superviews. It was great. And a lot faster than the built in tree hierarchy view in the debugger :-) \n. @kastiglione I'm using 6.3, tho this command has been broken since last 3/4 months. I think since XCode 6.0. I've created the pull request #92  with a fix, instead of using SBInputReader which as you mention is not accesible anymore I used the standard stdin. I tested it and seems to work fine. Let me know what you think. \n. @kastiglione thanks for reviewing. I will add a comment about the async mode. The reason is because if you are on lldb console and type vs, the script blocks the thread waiting for user input. That is expected, however, if you type on continue in the debugger XCode enables the simulator again but lldb becomes absolutely blocked. You can't stop the execution or anything like that. The only thing you can do is quit simulator to kill the lldb process. \nI found that if you run in async mode, lldb runs in a diff thread so it doesn't become blocked when you continue debugger in vs mode. You can stop again and keep using it normally. \nAbout the border instead of masking, I will investigate and try to see if I can put it in the open PR.\n. @kastiglione The only reason I moved flickering to masking is because the new implementation doesn't use SBInputReader, it uses stdin which blocks the thread waiting for user input. SBInputReader was a separated buffer so the previous implementation did a while loop hiding/showing the view every 0.1 sec. \nSince adding an async implementation with stdin in python is not trivial (it would require a Queue a Thread and a couple of methods) I just thought it wasn't worth it and just went for a simple mask behavior, which is also great to see what view you are on. That is the only reason why I change it :)\nI added one more commit fixing the issues you mentioned.\n. Sure, no worries it was fun dealing with lldb and Python a little bit! :+1: \nI will update the pull request with your comment.\n. Pull Request updated. \n. The only reason why I put that in the message is because is the only command in Chisel (that I know) that stops lldb waiting for user input. \nI thought it could be useful to remind people they are in vs mode. \nI can reverse it if you feel more comfortable. Just let me know! \n. @kastiglione reverted message so is consistent with the rest of commands.\n. ",
    "aledista": "I changed my commit. I left out style conventions and removed unused imports, vars and fixed a couple of minor issues. I generally use PyCharm to identify issues like that.\n. Readded :+1: \n. You're welcome!\n. ",
    "nealsun": "@kastiglione Yes, I installed from homebrew. I got this error after run 'brew upgrade' \n. ",
    "jernejstrasner": "Same thing here.\n. @idrisr sorry for the late reply, but this does not happen anymore in the latest version.\n. ",
    "skywinder": "@facebook-github-bot  done!\n. ",
    "mohamede1945": "You are correct. My data is in JPG format. I'll close it as invalid.\n. ",
    "dostrander": "@adad184 When you mean \"debug first time\" do you mean when you first start your debugging session it only works one time (ex: one breakpoint it works, the next it doesn't). Or it only works for one debugging session(the next time you push run it doesn't work) ? \n. ",
    "adad184": "it works only for one debugging session.  When i rerun the debugging session, it's failed.\n. it seems the issue was gone  after i upgrade my Xcode to release version. ( now is Version 7.0.1 (7A1001))\nmy ~/.lldbinit content is \n\ncommand script import \"~/Library/Application Support/Realm/rlm_lldb.py\" --allow-reload\ncommand script import /usr/local/opt/chisel/libexec/fblldb.py\n. sure  :)\n. \n",
    "ZevEisenberg": "Reference: when you Quick Look a color in the variables list:\n\n. Definitely interested. I\u2019ll put it on my list for my job\u2019s semi-weekly hack days.\n. @kastiglione would it be a faux pas to expr @import CoreFoundation in my command? I'm trying to have it be able to differentiate between UIColor, CIColor, and CGColor (and maybe NSColor?)\n. Specifically:\npython\nresult = frame.EvaluateExpression('(CFTypeID)CFGetTypeID({color}) == (CFTypeID)CGColorGetTypeID()'.format(color=color))\n. I've seen it advised to always import UIKit on an exception breakpoint. I had put a UIKit import in my ~/.lldbinit, but it seemed to slow down Xcode every time I started a debugging session. I'll try again some time.\nCurrent question: here's an error I'm getting in lldb:\nerror: cannot initialize a parameter of type 'CGColor *' with an rvalue of type 'CGColorRef' (aka 'CGColor *')\nFrom a python line like this:\npython\ncolorToUse = '[UIColor colorWithCGColor:(CGColorRef){}]'.format(color)\nSeen anything like this?\n. Or, to simplify the question, what is the right way to call this in lldb?\npo [UIColor colorWithCGColor:(CGColorRef)[[UIColor redColor] CGColor]]\n. Nope:\n(lldb) po [UIColor colorWithCGColor:(void *)[[UIColor redColor] CGColor]]\nerror: cannot initialize a parameter of type 'CGColor *' with an rvalue of type 'void *'\nerror: 1 errors parsing expression\n(assuming that's what you meant?)\n. Just a simple test case to reproduce what I\u2019m seeing in the script with a CGColor. I didn\u2019t have a CGColor handy in an app, so I was making one from a UIColor in the debugger. If I can make a CGColor in code and reference it in the script and it works, I guess I will ignore this issue for now as an edge case. I\u2019ll try that, and your suggestions.\n. None of the suggestions worked, but worse, the actual case I'm trying to use also doesn't work. If I'm on a breakpoint and I have a local variable, cgColor, of type CGColorRef:\n```\n(lldb) po cgColor\n [ (kCGColorSpaceDeviceRGB)] ( 0 0.478431 1 1 )\n(lldb) po [UIColor colorWithCGColor:cgColor]\nerror: cannot initialize a parameter of type 'CGColor ' with an lvalue of type 'CGColorRef' (aka 'CGColor ')\nerror: 1 errors parsing expression\n(lldb) po [UIColor colorWithCGColor:(id)cgColor]\nerror: cannot initialize a parameter of type 'CGColor ' with an rvalue of type 'id'\nerror: 1 errors parsing expression\n(lldb) po [UIColor colorWithCGColor:(CGColorRef)cgColor]\nerror: cannot initialize a parameter of type 'CGColor ' with an rvalue of type 'CGColorRef' (aka 'CGColor ')\nerror: 1 errors parsing expression\n(lldb) po [UIColor colorWithCGColor:(CGColor )cgColor]\nerror: use of undeclared identifier 'CGColor'\nerror: expected expression\nerror: 2 errors parsing expression\n(lldb) po [UIColor colorWithCGColor:(struct CGColor )cgColor]\nerror: cannot initialize a parameter of type 'CGColor ' with an rvalue of type 'struct CGColor '\nerror: 1 errors parsing expression\n(lldb) expr @import CoreGraphics\n(lldb) po [UIColor colorWithCGColor:(struct CGColor )cgColor]\nerror: cannot initialize a parameter of type 'CGColor ' with an rvalue of type 'struct CGColor '\nerror: 1 errors parsing expression\n```\nSo I can't use it in my script because it doesn't even work in the real debugger, at least not with the incantations I'm using.\n. It looks like this is maybe already done in chisel? Does this code work? https://github.com/facebook/chisel/blob/master/commands/FBAutoLayoutCommands.py#L44\npython\nlldb.debugger.HandleCommand('expr (void)[%s setBorderColor:(CGColorRef)[(id)[UIColor %sColor] CGColor]]' % (layer, color))\n. @kastiglione alright, I got a workaround thanks to @jvisenti: http://stackoverflow.com/a/31810890/255489\nI believe it's related to the UIColor going out of scope, and -CGColor returning an internal pointer:\nobjc\n@property(nonatomic,readonly) CGColorRef CGColor;\n- (CGColorRef)CGColor NS_RETURNS_INNER_POINTER CF_RETURNS_NOT_RETAINED;\nPR should be in at some point soon-ish\n. @kastiglione updated return statements\n. Cool, that looks like exactly what I was hoping for.\n. Copied the pattern from elsewhere in the script. Happy to change it.\n. Cone to think of it, the != 0 is already returning a boolean. We can just return that.\n. ",
    "VTopoliuk": "I added --portable parameter to embed data into the final command. So now iOS Device is supported, but script will fire error if executed without --portable on device and request has body data.\n. I updated parameter name\n. Hey @kastiglione, actually I would like to have this command without auto-copy to pboard feature. I will not be happy to know my pboard was overridden by any reason. Debugging is iterative process and pboard can contain some important address or string. What about leaving this command as is?\n. @kastiglione I'm totally agree with you. Making global settings will be nice feature, but have per-command support is good feature too. For example I'm not interested on copying result to pboard by default, but sometimes I can override it with flag. So having both features is even better =)\nBut what about merging this request as is for now? Looks like very nice feature.\n. We don't want to proceed event (click on button for example), so we just skip it\n. same for arm32\n. http://comments.gmane.org/gmane.comp.debugging.lldb.devel/1511\n\"I don\u2019t think we currently supporting setting Python breakpoint callbacks through the SB API\"\nBut anyway I will try to find another solution\n. Yeah, it's a bottleneck for now. I can't find the way to pass raw data to curl.\n. @mattjgalloway actually 'portable' in this case means portable command or \"you can run this command on other computers, not current one only\"\nhttp://dictionary.reference.com/browse/portable\nbase64 looks ugly and contains overhead on every run, not sure always output it is a good option.\n. In my real-life test base64 is longer than one screen\n. This command works on OS X as well, but this method available only for 10.9+\n. @mattjgalloway actually same file are used in two cases:\n1. To embed data\n2. To write data to file\nIf I will place name generation under the not runtimeHelpers.isIOSDevice(): condition, then it will be not available here with --embed-data option.\n. Should we go? \n. @kastiglione do you think it's ready for merge?\n. Oh, you are totally right!\n. ",
    "ilkera": "Thanks Alex for doing this. It will be so helpful!\n. ",
    "alexch2000": "@kastiglione Sorry for delay. I have changed code.\n. ",
    "longv2go": "@kastiglione Now It supply only one command 'pmethods', it take two options, if '-a' set, it would print all class methods and instance mehtods, if '-c' set, it would only print class methods, default it only print intance methods.\n. @kastiglione The pmethods can take an Instance of some Class or a Class object as its argument, and It \nwould print the same thing. I know the argument is an Instance or just a Class object. It use the options '-a' '-c' to determine print the class methods or instance methods.\n```\n(lldb) pme self\n- (id)signInService\n- (id)usernameTextField\n- (bool)isValidUsername:(id)arg0 \n......\n(lldb) pme [self class]\n- (id)signInService\n- (id)usernameTextField\n- (bool)isValidUsername:(id)arg0 \n......\n(lldb) pme -a self\n+ (id)test:(id)arg0 \n- (id)signInService\n- (id)usernameTextField\n- (bool)isValidUsername:(id)arg0 \n- (bool)isValidPassword:(id)arg0 \n- (id)signInSignal\n......\n```\n. Good idea!\n. I just add a new '-a' option to show the implementation address of the method\n. the fb.evaluateIntegerExpressionValue would round the express with \"(int)( expr )\"\uff0c this can cause error when the expr is \"({ ... })\"\n. It support since iOS 8\n. ",
    "ultramiraculous": "Also probably resolves #80.\n. ",
    "tomaskraina": ":+1: \n. ",
    "erydo": "@idrisr \u2014 Re 0 for octal, I was not referring to the argument to int. I was referring to the comment in the line:\npy\nelif output.startswith('\\\\'): # Or as \\0 (Dec)\nWhich appears to erroneously interpret LLDB output with a leading \\0 as representing decimal when it likely should represent octal and use base = 8 instead in the suggestion above.\n. Because the stripped prefix indicates the base of the literal, it seems like it would make more sense to preserve that information rather than asking int() to attempt to automatically detect.\nFor example, if the output were \\x20 (decimal 32) and the prefix were stripped, int() would assume 20 was in base 10.\nSuggestion:\npy\nif output.startswith('\\\\x'): # Booleans may display as \\x01 (Hex)\n    output = output[2:]\n    base = 16\nelif output.startswith('\\\\'): # Or as \\0 (Dec)\n    output = output[1:]\n    base = 10\nelse:\n    base = 10\n  return int(output, base)\nThree additional comments, from my own unfamiliarity:\n1. Because the expression given to LLDB is wrapped in (int)(\u2026) above, doesn't LLDB always return that value in decimal? It isn't attempting to render a pointer type.\n2. The 0 prefix is usually used to indicate octal, not decimal as indicated in that comment. Is that different here?\n3. To accommodate cases of e.g. a ptrdiff_t which may be longer than an int, should the above use (long long) rather than (int)?\n. ",
    "dxclancy": "I did see #12 before commenting but it wasn't clear to me whether #12 only effects printouts?  For instance,  does not launch theUIImage into preview for me either. \n. ",
    "anbarasu0504": "Thanks a lot :)  got it working :+1: \n. ",
    "eithanshavit": "Thanks, I adopted this code from one of the other files, so overlooked that.\n. I think this method shouldn't rely on being called from run, so it needs to protect itself by asserting as well.\n. Can you please elaborate a bit, or give an example? Notice that I've changed the code a bit in a new commit, but assert still in place.\n. There might be a misunderstanding here. The purpose of this assert is to make sure recursive bordering is not used for layers (or anything that's not a UIView or NSView). However regular bordering is still permitted for layers. So if you're in the code path that takes you to this else block, we should validate that depth is not provided to make sure recursive bordering won't happen.\n. Ok, I'll add a comment that should make it clearer.\n. ",
    "fbdeveloper": "\"Print the class and instance methods of a class.\"\n. \"Object-C\" should be \"Objective-C\"\n. \"Invalid argument. Please specify an instance or a Class.\"\n. \"id or Class\" should be \"instance or Class.\"\n. I find the combination of '-a' and '-c' to be a bit counter-intuitive. What about '-i/--instance' for instance and '-c/--class' for class and if neither is specified then it defaults to both. This ensures that there aren't any combinations that don't make sense.\n. How about: \"No instance methods were found.\"\n. Typo s/Methos/Methods/\n. This is correct. Can you change the comment to be a bit more assertive? Maybe \"Use numberWithLongLong: rather than -[NSString stringWithFormat:] since evaluateExpression doesn't work with variable arguments.\"\n. This could be removed if you use fb.evaluateIntegerExpressionValue a few lines above.\n. s/mast/must\nI don't quite understand this comment, especially the \"1-st\" part.\n. ",
    "PaulTaykalo": "parameters_type\n. encoding \nor typeEncoding\n. Invalid RETURN argument\n. In case of objective-C code its's better to split by ; instead of newlines\nAlso it's probably will be better to check expression by using regexp on the last expression\nSomething like\n/\\s*RETURN\\w*\\s*\\(.*)\\s*\\)\\s*;\\s*/\nBut searching for RETURN itself - is, probably fine\n. RETURN\n. There's simple object_isClass method in objc_runtime\nNo need to tweak around with metaclasses\n. ",
    "ryanolsonk": "Interesting! Probably makes sense to update FLEX to pass NULLs, yea?\n. Is it possible that either introspect or enumerator could be NULL?\n. I love how you can just pass a block through the context param. Makes things so clean.\n. Sure, I think I basically cargo culted the NULL checks from the few existing places I found using this API.\n. I think we probably do want to keep these comments internal since they're about the malloc API that's being wrapped. This function provides a nice abstraction so that users don't have to worry about these details.\n. Haha, well it's not so unreasonable to check there. Infer might yell about it.\n. ",
    "modocache": "nit: Seems like these comments should be placed as a docblock above the function; that way you could option-click to see it in Xcode. I'd also swap out the === headers === in favor of something more Doxygen/Xcode-esque.\n. I understand your \"it's describing an external API\" philosophical argument. My argument is far more practical: move the comments into a docblock and chisel developers can option-click to see them anytime. If you leave them where they are, they can't.\nSome context: especially for relatively small projects, I prefer to make it easy for people to read documentation, even if it makes it harder to maintain that documentation. For example, rather than see the documentation for -[MyClass myMethod] for details, I prefer to provide a full explanation for each docblock. Similarly, here I think developers could find this information more easily if it were in a docblock, even if notes on malloc don't really belong in a docblock for a different function.\nThat's my personal preference, though--hence the \"nit\" on my original comment. :wink: \n\nI just tried re-declaring malloc_get_all_zones inside this file, and giving that declaration a docblock. \n\nThis is definitely overkill in my book.\n. If you mean nullability identifiers, you could:\n1. Wrap the header in NS_ASSUME_NONNULL.\n2. Add nullable or _Nullable (or __nullable if you're supporting Xcode 6.4 and prior) to all nullable parameters and return values.\nYou should still check for null in the implementation. Without certain warnings enabled, it's very easy for users to accidentally pass a nullable pointer to a parameter marked as nonnull; see: http://modocache.io/clang-warn-nullable-to-nonnull-conversion. Even with those warnings enabled, it's still pretty easy, although newer versions of the Clang static analyzers may catch more of these cases.\n. You could also use str.splitlines() here instead, unless the maxsplit=1 here is important to you.\n. ",
    "tecknut": "Yes that's exactly it. My python isn't that great either, only found out about this while writing this code. \n. There was one instance where an unrecognised selector erred out, so I decided to be defensive and guard them. \nI'm happy to change this if there's a strong opinion. But there is at least one which caused a stuff to fail, can't remember off hand though. \n. I chose input because this acts like someone inputing text into a text field/text view which has the cursor in it. \nI could change this to inputtext and the previous command to settext. \nI went with terse commands based on whats currently there in lldb and chisel. Again, no hard opinion on what these should be called.\n. It's just short for text. As per the comment bellow, I based the name on other examples of short hand commands. \n. This command is intended to be used after selecting a text field/text view, making it first responder, then setting the text on it. \nWith that in mind, if anything else is first responder at the time this command is run it will either do nothing, or set the text property on it. \nI took the happy path for this, but I could put checks in the setTextInView function which only set text on classes which respond to setText:.\n. I had started to write this in the accessibility command file. But I changed after thinking about the purpose of the command. It does use accessibility, but it's not the primary point of the commands.\n. Just looking back over the code, this branch of code is only executed when a view has no subviews. \n. I've been trying to replicate the error I had and haven't been able to. I'll push up changes with these checks taken out.\n. Nope, no issue. Pushed it up.\n. Pushed up setinput settext.\n. ",
    "Gricha": "Ah you are right, in the previous version I used MRR intentionally but end-solution definitely does not need it. I'll clean it up\n. Ha, good catch\n. Oh I should clean it up, in the ideal world I thought it might be useful but also - the idea changed, not to mention these objects are retain cycles, so they get no releases :P\n. Ok I tested again, and I think it should be MRR after all. Reason for that is that object iterator will return anything that is an object, but cannot be retained. Example:\nobjc\n*** -[NSTaggedPointerStringCStringContainer retain] called, not supposed to happen\n. I'm fine with both. I think using isKindOfClass for now might actually be better, since we might want to look at subclasses right away. Let me change that.\n. ",
    "dmpv": "Sure. Updated the request.. ",
    "zats": "I actually set a default value on the command option, it probably got lost because I didn't break it at certain line length (is there a style guide you'd like to follow here?)\nThe default parameter is , default='process interrupt'\nShould I add a check for an empty command and replace it with default value?. seems like I didn't understand the meaning of SetAsync(). \nFrom documentation I thought that it detaches execution of the following command (continue in this case) allowing function to be evaluated even after we continue the execution.\nDid I misunderstand it? Or maybe I'm just missing the point of your comment . What about NSProxy subclasses?. sorry, I was wondering around the repo \ud83d\ude42 \nyou are right, I saw proxies mostly being used for mocking in testing frameworks, not sure if it's a production use-case. I actually don't see it being used like that in other cases we either enable reset async conditionally or don't do it at all in FBFindCommands.py\nI don't mind resetting if you are certain we should do it. \nSadly, no documentation, and I don't feel like lldb spelunking right now \ud83d\ude33. thanks for taking a look and agreed! \nwe need to move to that approach when we can write plugins in something more \"objective\" and something more \"C\" to simplify dealing with plugins\n. ",
    "agisilaos": "Oups my bad there! Yeah makes sense.. I think the commands are self explanatory so I dropped the comments there. Good point. ",
    "hulizhen": "\nYes, it can be dismissed by tapping the upper-right Dismiss button on the overlay window.\nBecause the UIDebuggingInformationOverlay class is a private class, we have to get the class object via Objective-C runtime functions.. How about doverlay? Just like the command dcomponents which is already shipped with Chisel.\n\nP.S. d stands for debug, just like p for print, f for find. Thus we can keep the naming conventions in a coherent way :). Sorry for the late reply, I didn't see these ones :(\n\n\nI just tried your two-line code above with fb.evaluateEffect(), and it does works amazingly.\n\n\nIt seems that the overlay feature does not work on iOS 11, but still works on older system. I will update the code when there is any workaround.\n\n\nThank you :). ",
    "keith": "Removed with above changes. Ah yes, nice I didn't re-think this after I made some other changes, updated. I'll set it in the project since there's no reason to archive it anyways. yea seems fine, shouldn't have had the quotes in the first place I think, my bad.. ",
    "sunbohong": "target = lldb.debugger.GetSelectedTarget()\n  for breakpoint in target.breakpoint_iter():\n    for location in breakpoint:\n      if expression_pattern.search('{}'.format(location)):\n        location.SetEnabled(on)\nWhat do you think about using location? \nThey have some different.\n``\nlocation    2.1: where = SunLigth__66+[SUNNetService httpAsyncPostWithDictionary:completionBlock:]_block_invoke + 1984 at SUNNetService.m:37, address = 0x0000000104514dfc, unresolved, hit count = 0  Options: disabled \naddress     SunLigth`__66+[SUNNetService httpAsyncPostWithDictionary:completionBlock:]_block_invoke + 1984 at SUNNetService.m:37\nsymbol      id = {0x00006db1}, range = [0x00000001001e063c-0x00000001001e0ec8), mangled=\"__66+[SUNNetService httpAsyncPostWithDictionary:completionBlock:]_block_invoke\"\nname        __66+[SUNNetService httpAsyncPostWithDictionary:completionBlock:]_block_invoke\nSo that,we can use `benable disabled` to switch all breakpoints to `enable`,and also as follow\nuse benable disabled to switch all breakpoints to enable\nbenable disabled\n\n\nbenable address\nbenable 0x0000000104514dfc\n\n\nbenable filename\nbenable SUNNetService.m \n\n\nbenable module\nbenable UIKit\nbenable SunLigth \n\n\n``\n. sincebr dis(breakpoint disable)has already this.\nShould we uselocation.GetAddress()` to search?. \n\nlocation    57.1: where = libsystem_kernel.dylib`mach_msg_trap + 4, address = 0x00000001832ef564, resolved, hit count = 0 \naddress     libsystem_kernel.dylib`mach_msg_trap + 4\nsymbol      id = {0x0000024e}, range = [0x000000018095b560-0x000000018095b56c), name=\"mach_msg_trap\"\nname        mach_msg_trap\nwhen i set breakpoint at this address(0x0000024e),only symbol contain 0x0000024e.\nSo i want search address and symbol.How do you think?\n. i am sorry.i mean that i want search 0x1832ef564 ,not 0x00000001832ef564. yes. ok,i will remove it. If we use br disable 41 to off 41,and benable 41 only enable locations's state.\nThe 41 41.1 will be ignore.\n. ",
    "dhcdht": "That can fix #198 .  There is another MR that can fix it separately\nhttps://github.com/facebook/chisel/pull/241\nI guess because function declaration of setValue:forKey doesn't need id , just id\n. ",
    "PeteTheHeat": "Yup I was hoping the if/else flow was clear, if a window is passed in, do some new stuff, else fall back to what the code was doing before. . Yup, I tried to delete it but it came back in the merge somehow lol, I'm too used to hg these days. I'll remove it. "
}