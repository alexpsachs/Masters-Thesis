{
    "RSO": "Looks good, maybe @lbekkema can review the SCSS?\n. Looks good! Please address comments before merging!\n. Oops, did a rebase instead of a merge, need to adjust to the Github workflow some more ;-)\n. FYI, the !== null check introduced an error, fixed in 119adfad3cc897421de78fa4f48651c6a66acb99\n. What happened here? Can't view these changes\n. Can't we come up with a fancy hipster name for this project?\n. Haven't really thought about it, no. We're open for suggestions! I agree that it's confusing, so let's do some brainstorming:\n- react-datey\n- react-date-input\n- react-date-selector\nWhat do you think?\n. @martijnrusschen any idea on how we can be sure that the new timeout is the right one?\n. Will add\n. SASS is a gem which we don't have any source control for, yet.\n. Awesome! This is my first browserify package, so I really appreciate the help!\n. Released in 6604aca9422b75895506a70f266a9b2c4e655aef\n. Awesome! Thanks for submitting this. I have two minor comments, after that I think this is good to go.\n. Sorry for getting back to you so late, but I've just discovered a problem with this pull request.\nA while ago I added a functionality that would increment/decrement the part of the date which your cursor highlighted. This no longer works properly when you change the dateFormat, because of all the implicit dependencies on the dateFormat..\nThe way I see it there are two things we could do here:\n1. Change the behaviour so that the up/down keys always just increment the day\n2. Add a method getDatePartForKeyPosition to the props\nI'd vote for 1. What do you think?\n. Yes, I'm aware of this. At HackerOne we unfortunately haven't set up browserify yet, so that's why we only use browserify to track internal dependencies.\nI'm open to receiving pull requests to make this repository work as a full browserify package, to accommodate the \"normal\" cases. We'd just have to figure out how to include it in our own codebase.\n. Now that #81 has been landed, I think that this ticket can be closed. Can you confirm?\n. Thanks for taking the time to send in this pull request. As you might have noticed, #46 has gone stale. If you could come up with a fix for my concerns in this Pull Request, I'd be happy to merge it! (I would suggest removing the arrow-up/arrow-down functionality).\n. Hey @illing2005 !\nThanks, how would you like this to work? At this point it is not possible indeed, mostly because I'm not quite sure how the component should behave.\nWhat do you expect to see when you open the date-picker when it's empty? I'm thinking the current month?\n. Could you elaborate as to why you closed the pull request? I'd be interested in landing something that fixes this, if I can find a proper way to make it work in all cases.\n. Well, at HackerOne we're still not up and running with modules, so for that we still need a file that compiles and sets the DatePicker variable on the window.\nI would be perfectly fine with this file being generated as a separate react-date-picker-global.js or even as part of a separate repo, it's just that I couldn't find a clean/simple way to do this without React and Tether being compiled in that file as well.\nSo, I would like to have a file, that holds all datepicker-specific stuff, without having all the external dependencies compiled inside of it. Does this help?\n. Sorry for the late reply, I was hoping to reply sooner, but my flight to SF took a little more preparation than expected.\nI'm kind of worried about the three inline if's that power this pull request. The logic feels a little implicit. I couldn't find a better spot/way to do this, so I guess we should just do it like this!\nDid you try any other solutions to achieve this goal?\n. Yeah, this is way better!\n. Yeah, I agree about the example. I was hoping to trick @lbekkema or @jenskanis in designing a Github page for this component, with documentation etc.\nGreat job on the PR, I'll let @martijnrusschen decide if it's alright with him, but it looks good to go! Awesomesaus!\n. I've had to make some changes since the whole example structure got changed, but you PR has been merged! Thank you so much for your effort!\n. (BTW: I postponed the tests because I have trouble running them locally, there's something strange going on with node/iojs/jest/some other packages, which is really frustrating. I'm looking into alternatives for Jest)\n. @hahahana @lbekkema implemented a way of disabling dates, so you could say that the user is only allowed to select dates within a certain range. He decided to re-use the \"disabled\" state that we had for dates that were not in the current month, which really made things harder to understand. IMO all we have to do is split up the two different disabled states and give them their own styling:\n- Disabled (can't select)\n- Not in the current month (can select, but will switch months)\n. Hey, thanks for taking the time to submit this pull request! \nUnfortunately we're not fully running browserify yet at HackerOne, which is a shame. What this means is that we actually include the react-datepicker.js file in our own application JavaScript. In order for this flow to keep working for us, we need to have a compiled DatePicker file, which doesn't pack its external dependencies (moment and React).\nI tried figuring out how to get this to work, but haven't found a way yet. Do you maybe know how we can achieve just this? Any solution would be fine, really, as long as we can support both browserify/global.\nRef #71 \n. I will spend some time on this tomorrow if you don't have time, I didn't try the peerDependencies stuff, so that might be the missing link!\n. Ah yeah, now it's starting to make sense! Awesome!\nWhat should we do with Tether? I see that you still require it externally in the example, did you run into any trouble?\n. @lappkast that addition is because React/MomentJS are now packed with that file. I don't think this makes sense, since I assume that only non-browserify users will use this file. I'm testing this pull request locally to see what the best option is for packing files.\n. Awesome, this should be good to go. There are some changes that I have to apply to get this working for HackerOne (or any other party relying on globals), but I'll just add that in a follow up commit. @lappkast I'll also get that the react-datepicker.js file back to its original size.\n. Thanks for the help! I'm kinda new to all the browserify/bower/npm stuff, so I really appreciate that you're taking the time to help out! Things are starting to make sense now ;-)\n. Thanks! This is actually my first plugin with this setup, so all help/input is appreciated!\n. And yeah, now that I know about npm test I have to say that I like it too ;-)\n. BTW, @natlownes how do you feel about grunt in this repo? I keep running into troubles upgrading packages because of their grunt counterparts not being maintained properly, and I keep reading about people dropping grunt/gulp for vanilla npm. I think I'm going to try out and drop grunt in favour of plain npm tasks.\n. Sorry for the late merge! Thanks!\n. Sorry for the late merge, thanks for fixing this!\n. Hmm, I'm not quite sure what I should change here. The git repo has those files in a .jsx extension. Do you have any suggestions as to what I should fix?\n. Could you verify if v0.6.0 fixed this issue?\n. Thanks for this, it's a lot to take in at once, but I hope to do a first run through the PR's today, and get some real work done in this repository tomorrow!\n. Could you elaborate as to why we need webpack in favour of browserify to solve this issue? (a link/whatever would be fine as well)\n. Cool! Yeah, this is my first project with both browserify and webpack, so I just wasn't sure about all the pros/cons. Thanks again for taking the time to fix this, I'll check it out and see what I can do. Would you mind if I'd try to split this PR up in multiple PRs? I'm unsure if it's needed, but it might help me get an understanding of the whole situation and fixing #88 sooner.\n. I just tested this and everything looks good. I landed the other PR's, so you should be able to rebase this PR.\nWhen I run grunt build my react-datepicker.min.js file changes, is it outdated, or are we running different versions of the dependencies?\nWebpack seems interesting, shouldn't we also be able to drop SCSS compilation out of the gruntfile and let webpack handle it?\n. I'll see if I can find the time to continue work on this later this week. Sorry for the delay!\n. Damn, dat pressure ;) I'm feeling confident that I'll have time to work on this tonight! Just sit tight!\n. Merged through #93. Thank you so much for the help! And the patience ;-). I'll get a new release out today!\n. Interesting! How would you imagine this to work? \n. Interesting! /cc @lbekkema @jenskanis\n. @KeitIG what do you think about the proposed solution? Would that fit your need? Or do you think we should build this in a different way. As always, you're free to create a PR with the proposed changes.\n. Hey @hahahana! Thanks for the PR. I'll go through the README and update accordingly. Tested your PR in both Firefox/Chrome!\n. I haven't tested it yet in 0.13, could you confirm if the datepicker works in 0.13? \n. @martijnrusschen I pushed a fix, can you get the demo back up and running? I have no clue how any of this works :P\n. We should just move to github pages.. Any word on that @martijnrusschen ?\n. Good call, classSet is deprecated, I'll remove it!\n. This should be fixed in 0.6.2! Sorry for the inconvenience\n. Can you run rm -r node_modules and try again? I can't reproduce.\n. Instead of doing this, I'd much rather pack the externals with the example.js. I'm working on a commit that should fix that, please stay tuned!\n. Fixed in 895f7b3748639c1b5dd55124dc56c1f7c2a85162\n. Ah, sorry, must have forgotten to do one! I'll get on it right now!\n. Should be fixed! Thanks for the compliment!\n. Interesting feature request. I think that I would be open to implementing something like this, but would like to add some tests before I add it to the codebase.\nSmall comment on the code change:\nWouldn't this work the same as the code you proposed?\n``` javascript\nvar disabled = day.isBetween(maxDate, minDate);\nif (minDate.isAfter(maxDate)) {\n  disabled = ! disabled\n}\n```\nI'll see if I can find some time this weekend to write some tests. Thanks for the suggestion!\n. Interesting approach. I get your hesitation concerning onChange(null) it doesn't seem optimal. I will see if I can dig into this PR a little further early this week. Thanks for taking the time to submit this suggestion, I really appreciate it!\n. Sorry for the wait. I didn't find the time to check this out any further, so lets just go with this solution!\n. Hi @QingkaiLi I'm sorry that we weren't clearer on dropping support for React 0.12. If you provide a PR for an older version I might consider merging it, but I will not spend time myself on supporting older versions of React. \nBecause of React's alfa-stage every new version will have breaking changes, which makes it harder to support multiple versions.\n. Hey! Thanks for taking the time to write up this issue!\nI like your approach, although I'm not sure if it wouldn't be a little too much for a small library like this one. \nI figure we could also just stop supporting 0.12 in the next version (I'm not sure if there are statistics as to how many people still use 0.12). Being that both react and this datepicker are still 0. I figure we can still make breaking changes in small version bumps.\n. Thank you so much for taking the time to create this PR! I really appreciate it.\n. Thanks for reporting this issue. It's unfortunate that I didn't find the time to respond sooner. I'll see if I can reproduce/fix!\n. Interesting suggestion. I always imagined that at some point we needed some sort of varaible classNames. If I understand you correctly you're suggesting to only add the option to change the input className?\n. Interesting case. My thoughts originally were to not change the value of the input without the user actually doing so (e.g. click on a date or change the value). I think you convinced me, but I would like to get some more input from others before implementing.\n. From what I understand Tether is causing this. I'm open to removing Tether as a dependency, if that's needed, but I don't think that I can find the time for this myself in the next couple of weeks.\n. Hey!\nThanks for taking the time to write this! I will look in to this PR first thing tomorrow, as I have the feeling that there might be a better way to do this. I'm also going to look in to a solution to the unreadable PR's because of the big changes in the compiled files.\n. I'm wondering, are error classes the only use case for adding this className? I'm kinda weary of adding classes like this, as is it doesn't really seem to scale that much (e.g. I'm afraid that someone wants a different className for selected days in the future).\nWe could also think of adding a property that indicates that the datepicker is in an error state.\nAll in all, if we cant figure out a better way I'd be OK landing this once the comments are addressed, as I don't want to block you for such a small request.\n. Thanks, I had some other changes myself, so will run grunt build again on master. I'm wondering if there isn't a better way of doing this. It feels like we should either:\n- have more control over versions that npm installs\n- not include the compiled files in source control\n. Thanks!\n. Awesome! This looks great, I'll see if I can get to reviewing this tomorrow, thanks for taking the time to write this PR!\n. Thanks again for this PR, there were some merge conflicts in the compiled files (sigh), so I merged it manually. Let me know if I missed anything in the merge!\nI'll also see to adding a localized example to the examples (and maybe see to finally adding github pages for the examples).\n. Version 0.8 just got release by @martijnrusschen !\n. Hi there! I can indeed see that a disabled property would make sense. Do you think that you have time to setup a PR? I personally don't think that I'll find the time for it anytime soon, so it would be awesome if someone else could step up to make it!\n. Thanks!\n. Hey there! Thanks for taking the time to create this PR. Unfortunately this code is needed to prevent deprecation warnings on React 0.13. I would be willing to support 0.12 as well, but only if we take an approach as suggested in #101. Do you think that you can adjust your PR to make the check conditional?\n. Furthermore: I'm not sure how far I can go guaranteeing that we will keep supporting older versions of React. I'll promise to always consider PR's like this that don't seem to costly.\n. Hi @at0g! Thanks for taking the time to setup this PR. Unfortunately I was away on vacation, so it took me a little longer to respond. From the looks of it you're doing a couple of different things, that might make it harder for me to review this PR (and see what goes wrong), therefor I'll try and get some of the (needed) changes in master separately.\nI will start with enabling ES6 and upgrading babel-loader, and adding onChange as a required prop.\nAfter that I'll check back on this diff, I'm not entirely sure on the use of the spread operator now, but I'll hope to get things running first, so I can see how everything plays out.\n. Upgraded babel-loader and propTypes are now in master. I think that it might be wise to leave the spread operator as is for now, and just focus on the onBlur functionality, which is interesting on its own. Do you think that you'll have time to update your PR?\n. That would be great, thanks!\n. Hey @arqex,\nSorry for getting back to you this late, I've been away on vacation.\nI agree that for now momentjs is better suited to be a peerDependency, but I'm not completely sure yet as to how that would work. Does it mean that I'll have to manually install momentjs in order to be able to develop on the datepicker? Or should I maybe make it a devDependency and a peerDependency?\nnpm/npm#6565 seems to state (like @martijnrusschen's comment) that in the future peerDependencies aren't installed automagically anymore, but when I run npm install it also doesn't seem to install them, so I'm really not sure how this all should work out.\nI'll try and play with this a little further, have you tried getting this working on your own? If so, I would really appreciate a PR!\n. I'm also not quite sure where to draw the line between dependencies and peerDependencies, why not make all dependencies peerDependencies?\n. So, I did some more reading on peerDependencies, and based on https://github.com/npm/npm/issues/5080#issuecomment-40510098 I think that we shouldn't use peerDependencies for this. Could you maybe try and see if the the npm dedupe command fixes your problem?\n. How are you including the datepicker? Are you doing a require('react-date-picker') or are you include the react-datepicker.js file in your source? The latter shouldn't include momentjs.\nI just checked the react-datepicker.js file and it seems odd that it still includes Tether and lodash, so I guess I'll remove those from the package as well, and assume that all dependencies are loaded externally.\n. react-datepicker.js is now 18kb, does this solve this issue?\nOn a separate, somewhat related note: I'm also going to remove the example from this repository and instead turn it into a github page, this aught to clean up the PRs a lot.\n. A little more info on what I did to make the file smaller: in webpack.config.js we now state that all external libraries are in fact expected to be available already (React, Moment, react-onclickoutside, Tether and lodash). This means that the file now only holds datepicker specific code.\n. > As for what to put in the build, it is complicated to decide what to leave out. In your case I think it should be a great idea to leave react-onclickoutside and Tether. There is a big chance that the datepicker is the only lib that use them and they are not big enough to be a problem if they are repeated.\n\nI think this is all personal preference (I just noticed that HackerOne had two copies of Tether inside its packed JS because of the way we packaged the lib), that's why I think it would be best to just defer all dependency loading to the user. That way the user has all control.\n\nThe scary part here really is that H1 uses underscore in it's codebase :) let's hope that we don't use any lodash-specific methods in the datepicker ;-)\n. Hmm, interesting approach. I guess I initially made it a controlled input to allow for masking/styling of the input while typing (--/--/----), but haven't gotten to implementing that yet. What's the reason for you to make the datepicker uncontrolled?\n. Thanks! I've merged the PR to master, will perform a release later today.\n. Thanks! :D\n. I'm not really that well versed in the SSR bit, but shouldn't #113 have fixed this?\n. Right, I think I know where this issue is coming from. I was a bit confused, as we clearly only load Tether when document is defined, but then I realised that we just figured out that the webpack externals feature has a strange side-effect: if you say you expect a dependency to be global, it will make it global if it isn't already.\nI'll have to dig into this, we noticed this @Hacker0x01 when we tried to upgrade and suddenly our underscore was replaced by lodash in the global namespace.\n. I will check it out, however, as of yet I have no way to test in IE, I'll have to look into that as well.\n. I'll have to download an IE11 vm for my mac, so that'll take some time. If somebody else could provide me with a trace/screenshot/whatever it would mean a lot to me!\n. Fixed in dad57db772c492b9446e78da183f6a7984e6f1a5. @martijnrusschen will do a release. Thanks for reporting!\n. Now I'll have to figure out how to run tests in sauce-labs, and write a test for this in IE!\n. I would say that the peerDependencies are pretty usable for this?\n. SGTM. Not sure if I can find the time to work on this, so a PR would be much appreciated.\n. :+1: \n. Looks good to me!\n. We can't do it like this. The require was placed inside of the if because otherwise serverside rendering would fail (at the moment of writing that code Tether did not support server side rendering).\n. Yeah we should probably set up automated testing if we want to keep supporting SSR\n. :+1: Awesome stuff, thanks!\n. Let's hold off until we got a working PR \n. Hehe, that's what we get for making changes like this on a Friday afternoon. Sorry @strawbrary!\n. And thanks for reporting!\n. Apart from that small stylistic suggestion this looks good to me!\n. :+1: \n. Thanks! Sounds reasonable and easy to fix.\n. I can see how this could be problematic. For now the easiest way I can see is to edit the CSS and then re-focus the input. That should work, right?\ndistant-future-thinking: It would be awesome to have some sort of stylesheet-playground, allowing for easy composition of your own stylesheets in the docs.\n. Having a prop to autoFocus doesn't sound like a bad idea.\n. @rafeememon thanks for the PRs! Sorry for taking so long to respond. I will test this diff and merge it. I also heard that you plan on shooting in some issues this weekend, I will reserve a day next week to work on the datepicker in the hope that we can work to an v1.0.0 release somewhere at the end of this month.\n. I like the idea of having an optional icon in the input to open the calendar, I've seen this before in other places and it feels like good UX to have.\n\nWhy not add an open method to the component?\n\nHow do you see this work?\n. Thanks! Change looks good. If you fix the lint errors this should be good to go!\n. You can update the files in your branch and git-push the changes\n. Thank you very much for taking the time to contribute!\n. (@rafeememon I'm assigning you since you mentioned you had a branch ready for this. Let me know if you can't work on this and I will happily take over)\n. Awesome stuff! This looks pretty much ready to go. Few concerns: \n- aren't we losing test coverage?\n- it seems easy to miss a .clone call on moment. Something like moment/moment#1754 would be awesome, but I'm not sure how we could enforce this now. Thoughts?\n. No, I wouldn't go for a moment fork, that would defy the purpose of having moment (and we would need to re-introduce DateUtil ;-)). Okay, @rafeememon this PR looks good to me. I'll leave the merging to you. Agree that we need to be looking out for possible .clone mistakes.\n. Yeah, we had this before, but I think some of this got lost in one of @lbekkema's styling refactors.\n. I would love to hear other people's thoughts on this matter. Personally I don't have any experience using TypeScript, and even though I like the concept, I'm not quite sure if I would use it for a plugin like this.\nOne of the most important things to me is that the source code of this plugin should be as easy as possible for new people to dive in to, I feel that with ES2015 we're already on a limp that might not be necessary.\nHow would this be different from PropTypes? I would think that those are meant to intercept most of the typing issues, right?\n. From https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html:\n\nAn easy migration strategy for anyone upgrading their code to avoid isMounted() is to track the mounted status yourself. Just set a _isMounted property to true in componentDidMount and set it to false in componentWillUnmount, and use this variable to check your component's status.\nAn optimal solution would be to find places where setState() might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in componentWillUnmount, prior to unmounting.\n\nSo basically your approach is what is suggested in the first paragraph and mine (#292) is the one suggested in the second paragraph, right? I would really prefer just not to have callbacks dangling when the component isn't mounted anymore. The code in your PR works for now, but might be error prone when more then one action is being done inside the callback.\n. > If we analyze where the problem relies I think the only problematic point is when we lose focus from the input because it is unmounted and it tries to hide the calendar by calling to setState.\n\nScenario:\n1. Input has focus (state.focus = true)\n2. We unmount the element\n3. Input loses focus because it was unmounted (state.focus still true), sets timeout\n4. Timeout callback runs and tries to hide the calendar (state.focus = false)\n5. Warning: you can't call setState from an element that is unmounted\nhandleFocus can't be problematic because you can't focus an element that is unmounted, handleBur and handleSelect are a proxy to hideCalendar so if we fix hideCalendar it would fix handleBlur.\n\nInteresting trail of thought. I agree that the other cases are pretty hypothetical. Would you like it more if I update my PR to only track/clear the blur timeout?\n. Thanks for the report. Hopefully I can check this out later today!\n. Hmm, I'm also unsure as to how to fix this. I really don't want to add back those dist files (they really pollute PRs). We could maybe add something to the release script that adds them, create a tag, and then removes them again? Not sure how that would work.\nI would love to know how many people still use Bower, and would like us to support it.\n. Yeah, I think that the react-datepicker-bower repository might be the way to go. @martijnrusschen what do you think, would we be able to manage that as well, or should we leave that to someone else in the community?\n. Closing as dupe of #303 \n. We need this file in the git repository in order to package the plugin for Bower.\n. What are these? I didn't check the grunt site, but I also don't think that the naming here is really obvious.\n. Let's prefix this item class\n. Found this suggestion at http://facebook.github.io/react/tips/communicate-between-components.html and I liked it! It seems similar to the following Coffeescript we use at HackerOne:\ncoffeescript\nhandleClick: (item) -> =>\n  @setState clicked: item\nrender: ->\n  div onClick: @handleClick(item)\nWhat do you guys think?\n. No clue, this is a generated file.\n. Confirmed, it does.\n\nBy default JSHint warns when you omit break or return statements within switch statements\n. It transforms JSX to JavaScript.\n. It's not a sleep, it's the period within we expect the method to return true.\n. Check the commit.\n. Let's default to YYYY-MM-DD by setting it in getDefaultProps.\n. Why did you put dateFormat in state? It could just be accessed from this.props right?\n. The indentation level on these lines are 4 spaces instead of 2.\n. master has moved from React 0.11 to 0.12, if you run npm install and try to rebuild this should all be back to normal!\n. I think that I'd rather have this logic inside of it's own method:\n\n```\nhandleClick: function(event) {\n  if (this.props.disabled) return;\nthis.props.onClick(event)\n}\n``\n.browserify->webpack. I'd prefernpm installovernpm i. I think thatclassNameis not really declarative. Maybe for now we should go withinputClassName, unless you have another suggestion?\n. How about just defaulting theclassNametodatepicker__inputthroughgetDefaultProps? That way we can just do{this.props.className]here.\n. Otherwise we might want to call thisadditionalClassName.\n.--save`\n. Maybe add a note that this requires rails-assets.org? \n. Yeah, probably good to pick up in a separate PR though.\n. This would probably look nice with destructuring:\nfunction getDateInView({moment: currentMoment, minDate, maxDate})\n(except for the moment variable which would overwrite the required moment.\n. Yes, DateUtil should go. Looking forward to your follow-up PR!\n. Yeah, I remember having some doubts when landing that PR, but didn't put too much thought in it. Are you suggesting to get rid of onClear and rely on onChange to detect clearing the input?\nThe only thing I'm wondering is if people actually would want to distinguish the clear action from just manually clearing the input. I can't think of a reason why people would want this though.\n. Agreed.\n. SGTM.\n. ",
    "lbekkema": "Walked trough the CSS with @martijnrusschen. We did some quick fixes. After these are pushed, this PR is ready to be merged. \n. :+1:\n. @martijnrusschen Can you take a look at making the style.css file? I wasn't able to create one.\n. Whitespace is being added by Grunt, IIRC.\n. I think we can call this heading as we only have this type of headings (for now). \n. Let's rename this class to topbar.\n. And this one to topbar__wrapper, so this looks a little bit more logical in HTML.\n. ",
    "martijnrusschen": "Looks good!\n. Not a priority right now\n. Fixed by #34 \n. We have tests now :+1: \n. @markijbema \n. LGTM\n. Ref #33 \n. Did you really update sass? I only see some CSS changes?\n. This is fixed by #48\n. Closing this since #48 is already merged.\n. Great work, did you notice that there's another pull request that implements custom date formatting? That one is almost finished, but blocked on a problem where the highlighting doesn't work anymore while incrementing/decrementing the date (https://github.com/Hacker0x01/react-datepicker/pull/46#issuecomment-62491466)\n. Merge hell, will follow up with new PR\n. New PR #64\n. Looks good!\n. Lets add this to the travis output too.\n. Thanks for creating this Pull Request. I tested this in all major browsers (including IE 11 and lower) and it works perfect now.\n. This fix is now released in https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.4.0\n. Looks good!\n. Would it be worth to add some tests that supports this feature?\n. Thanks, looks great! I agree about the example, at first that was a quick hack to show the datepicker, but with these different configurations it becomes really ugly. I'll try to make something better this weekend.\n. This PR is out of date. Lets fix this so we can see if this is merge-able or not.\n. Nice, what about some tests?\n. I agree, looks better!\n. Agreed, the old situaon gave a better overview what's in a month and what's not. The only downside of the previous implementation was the it's hard to make a difference between disabled dates and dates that aren't in the current month. I'm not sure how we should solve that since there's 1 really big difference between those: The ability to click on a date.\n. @lbekkema Can you update the PR with the suggestion of @hahahana?\n. Closing this in favor of #212 \n. Looks good, now we should add some content :)\n. Is this still an issue? If so, can you post a screenshot?\n. Sorry, my bad. We're working on improved examples, those improvements will avoid issues like these.\n. A new demo has been deployed: https://hacker0x01.github.io/react-datepicker\n. The demo was cached and should work again now. (otherwise do a hard refresh of that page) @jonrh @vegetableman Can you confirm this is working for you now?\n. Hmm, looks like the old demo is still cached on your side. The new example only uses the example.js as source. \n. Will work on that soon!\n. Thanks, fixed!\n. @QingkaiLi I'll make sure this will be released today!\n. Here it is: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.7.0\n. Can you try upgrading to React 0.13? getDOMNode is being deprecated in favor of findDOMNode.\n. From the React 0.13 release notes:\n\nAdded new top-level API React.findDOMNode(component), which should be used in place of component.getDOMNode(). The base class for ES6-based components will not have getDOMNode. This change will enable some more patterns moving forward.\n\nhttps://facebook.github.io/react/blog/2015/03/10/react-v0.13.html\n. Thanks for adding!\n. Should be fixed with #319.\n. Ah, this one was mentioned in #319, but looks like you're right.\n. @iam4x Can you confirm this is fixed now?\n. Sorry for the delay @cy6eria. I'm really busy this week, so I'll try to get back to you this weekend or early next week! One thing I noticed is that your PR changes 20.000 lines of code, this makes things really hard to review. Is there any way to get your change smaller?\n. This has been fixed in b61725c82750ac4963c38c12cdc8cbf1c1ded33e, not sure if this was fixed before, but it looks like that this PR isn't needed anymore.\n. Sorry for the delay @kevzettler. I'm really busy this week, so I'll try to get back to you this weekend or early next week! One thing I noticed is that your PR changes 20.000 lines of code, this makes things really hard to review. Is there any way to get your change smaller?\n. I merged #108 yesterday and will release a new version before the end of this week.\n. Thanks!\n. Agreed. I'll take a pass on this soon!\n. Nice example of how we can show code examples: http://www.gpbl.org/react-day-picker/#examples/Basic calendar\n. @MahatmaManic Did you try to add the stylesheet by yourself?\n. New examples are added to https://hacker0x01.github.io/react-datepicker, we will update this page with better documentation on how to install and include the datepicker.\n. I believe this should be added on the fly while we're adding new functionality.\n. Do you still want to introduce dynamic props? Any way we can help you?\n. Hi @at0g \nThanks for taking the time to create this PR. I'm really busy at the moment, but I'll try to take another look this week to find out what's going wrong.\n. I tried moving the dependency to peerdependencies, but when running npm install I got the following message:\n\u279c  react-datepicker git:(dependencies) npm install\nnpm WARN peerDependencies The peer dependency moment included from react-datepicker will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency \nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\nNot sure if we want to change this or not, the documentation I found about the difference between dependencies is not really clear to me, but maybe you could help me out with this. \n. @rafeememon What do you think? Should we change this? I checked our dependency list and it looks like we're relying on small lib mostly, but moment.js is the only heavy lib in this list. Should we move this (breaking change) or just keep is as it is?\n. Thanks! Released this change in v0.64.0. Ah, yeah that's related to #122. I was thinking about what dependencies should be peer/external dependencies and which one should be like the normal dependencies. Any thoughts?\n. Just released 0.9.0 (https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.9.0)\n. Is this still an issue? If so, can you post a POC?\n. Just released 0.9.0 (https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.9.0)\n. Thanks!\n. Nice work! We could probably work a little bit on the positioning of the element when it's positioned to the top, but that's future work. Can you fix the merge conflicts so I can merge your PR?\n. Thanks again, I'll look into it soon!\n. Thanks!\n. Yes just released a new version https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.10.0\n. I have pushed the latest changes to the dist files. Are they up to date now?\n. Looks like the same issue as #137\n. Thanks, I'll take a look at #135 to make sure it works fine with our config too.\n. Thanks, will release this today.\n. Hi @raorao. This is something that was added in React 0.13. We're happy to support merge a PR that adds backward compatibility of the React 0.12 behaviour, but be aware that React is still in beta and you will continue having breaking changes until React hits 1.0.\n. I haven't tried it yet, but I'm happy to merge a PR that ups the React version :)\n. This works with 0.14 now.\n. Can you show an example where this is happening?\n. Looks like this issue has been fixed. Let me know if there's any help needed.\n. Fixed by #140 \n. Thanks, will release these changes today.\n. Version 0.11.2 has been released!\n. Debugging here #150, would be cool if we could reproduce these issues in a test.\n. Thanks for looking into this, I'll see if I can create a PR based on your changes. Would be happy to get this fixed though!\n. @sconno05 Can you confirm, that PR fixed your issues too? I'm happy to merge it if it fixes the IE issues. Thanks @dcousineau!\n. To make sure, did you point it to the correct branch? Looking at his repo, it should be bugfix-ie-infinite-loop\n. Cool, lets do this! Thanks for confirming the fix @sconno05 \n. Released: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.11.5\n. Resolving this, lets reopen if it still occurs! Thanks guys!\n. lgtm\n. Sorry you're right. Not completely sure what the right thing is to do local dev and maintaining the gh-pages, but for now I'm relying on tests to build now functionality. Any ideas how to fix this?\n. Yep, this is a bug. Looks like the disabled isn't propagated to the input itself. Could probably be fixed by adding a disabled={this.props.disabled} in the date_input.jsx file around line 80.\n. Sorry about that! Thanks for fixing though!\n. I added an IE10 test runner to check if this is failing because of IE10. Trying to reproduce the issues noted in #141.\n. Adding this runner so we can catch this bug as soon as we're adding more tests\n. Oh man, that shouldn't break. I'll spend some time this week to get this fixed. (+ add a test)\n. Not sure if it's worth the change. This is a breaking change for everyone using the Datepicker (and you can simply change to default if you want something else)\n. Documentation has been update a while ago. Let me know if you need anything else.\n. No update yet. It would be awesome if someone could help here with providing a pull request.\n. Which version of React are you running?\n. Is this still happening. We made some changes around the virtualFocus element. Curious if this solved your issues too.\n. Hi, thanks for taking the time to look into this! I added some comments and tried to answer your question. Hope you can make something out of this.\nPS. Don't worry about failing travis, looks like some unreliable saucelabs stuff.\n\nI'm not sure if you guys want this if you do there is one thing that needs to be handled that I wasn't sure how you would want it handled. That is the arrow at the top. As soon as the datepicker leaves the bottom of the target that arrow is now pointing at the wrong thing.\n\nThis was implemented recently to position the popover at the top of the input field if there's no space below the input. \n. Thanks, merged the PR and will do a release soon!\n. Did someone track down the cause of this issue? Would love to fix this.\n. Should be fixed with #319. \n. Removed Sauce Labs. Having a different ticket open for adding it back.\n. Awesome, this might solve some problems I've been experiencing with Lodash too.\n. Hi @ntdb! Great stuff! See my inline comment to make sure this works fine!\n. Agreed. Documentation sucks. We'll get some better documentation soon!\n. Documentation has been updated a while ago. Let me know if you need anything else.\n. Looks like the fix.\n. Happy to merge it once the questions has been answered.\n. Fixed by #171\n. Nice thanks!\n. Great improvements, thanks!\n. Can you give an example how this should work?\n. Thanks!\n. Could you provide some steps to reproduce the issue you're solving here?\n. This fixes #171 right?\n. Ping\n. @xrado I was hoping on getting a reply on this, no activity from @JustHereForTheBugReport since the initial PR.\n. This was changed in https://github.com/Hacker0x01/react-datepicker/pull/165, @ntdb do you have any idea why this isn't working in Firefox?\n. This was moved to Github pages, removing for now since we're working on new documentation.\n. Hi guys, I'm working on an improved version of the documentation. Take a look at https://github.com/Hacker0x01/react-datepicker/pull/189 to see if that makes it more clear. Comments are welcome!\n. Thanks, sorry for the delay!\n. This is caused because selected is a required prop in calendar.jsx. This looks like a leftover after we've added more functionality like placeholders. I'll go ahead and remove this to get rid of those warnings.\n. Just tried to reproduce this issue with the following code:\n```\nexport default React.createClass({\n  displayName: \"Default\",\ngetInitialState() {\n    return {\n      startDate: null\n    };\n  },\nhandleChange(date) {\n    this.setState({\n      startDate: date\n    });\n  },\nrender() {\n    return \n\n        \n          {\"\n          \u00a0 \u00a0 {\"selected={this.state.startDate}\"}\n          \u00a0 \u00a0 {\"onChange={this.handleChange} />\"}\n        \n      \n\n\n\n;\n  }\n});\n```\nThis example works fine for me and doesn't show an initial selected date. This allows me to select a date that will be saved in the state as startDate. I guess this is the best way to solve this issue.\nFurthermore, I just discovered that the <DatePicker placeholder=\"hi /> doesn't need a selected too :)\n. Hmm, okay. Looks like its still failing for people: #179\n. Yep duplicate of #187 \n. Do you have a proof of concept of this, so we can reproduce this issue?\n. Tried to reproduce this, but couldn't find the issue.\n. Ah yeah, noticed this as well. Need a little offset when we're showing the popover on top. Looks like it's positioning in the middle of the input now.\n. Oh that might be an oversight from our side! Sorry about that.. Would be\nawesome if someone could contribute to the documentation with their\nexperiences.\nOn do 29 okt. 2015 at 22:05 Jason notifications@github.com wrote:\n\nOh holy wow. Here's the fix. Add this:\nrequire('react-datepicker/dist/react-datepicker.css')\nWhy is this not in the documentation!!!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/194#issuecomment-152326521\n.\n. Thanks!\n. Does a date range work for you? http://hacker0x01.github.io/react-datepicker/ has an example that only enables a specific date range. If not, it should be able to build something that fits your needs easily. The only problem is that I don't have the time to build it in the next few weeks, so if you can submit a pull request, I'm happy to review it.\n. We could consider something like https://www.npmjs.com/package/moment-business to detect weekends?\n. I merged a new feature today that introduces includeDates. I guess that fixes this problem too. Likely to release this new feature tomorrow in a full packed release.\n. Fixed by #247 \n. Thanks for clarifying!\n. Thanks, looks good. Please make sure the PR is up to date with the latest master so we are able to merge this PR.\n. Agreed.\n. Would be awesome if you could create a PR to upgrade React!\n. I released a few minor versions to get this working, but it looks like we're still depending on React. things in https://github.com/Pomax/react-onclickoutside. We need to figure out what's wrong here, but I have no time left anymore for today. Would be awesome if you had some time today to look into this.\n. Version 0.14.5 should fix this issue.\n. Nice start, according to the issue you noted a few warnings:\n- Warning: React.render is deprecated. Please use ReactDOM.render from require('react-dom')\n- Warning: Popover.getDOMNode(...) is deprecated. Please use ReactDOM.findDOMNode(instance)\n- Warning: React.unmountComponentAtNode is deprecated. Please use ReactDOM.unmountComponentAtNode from require('react-dom') instead. \n\nLooking at your code it looks like the first two warnings are fixed. Do you have any plans to fix the other warning as well?\n. Would be cool, I can merge it when you're ready!\n. Yes this is an error introduced in #198. I released a few minor versions to get this working, but it looks like we're still depending on React. things in https://github.com/Pomax/react-onclickoutside. We need to figure out what's wrong here, but I have no time left anymore for today. Would be awesome if you had some time today to look into this.\n. This has been fixed in the latest release.\n. Yup, looks like the dependencies aren't ready for 0.14 yet. I need to figure out what's going wrong but not sure when I have time to investigate this.\n. Yes this is an issue with the latests version of the datepicker. You can use version 0.13.0.\n. That might be it! I'll try that in our example app.\nOn vr 16 okt. 2015 at 20:32 Thiago notifications@github.com wrote:\n\nyou may have same issues with webpack when using two versions of react...\nhttps://medium.com/@dan_abramov/two-weird-tricks-that-fix-react-7cf9bbdef375\n2015-10-16 14:59 GMT-03:00 Torsten R\u00fc notifications@github.com:\n\nDoes 0.13.0 work with React 0.14 though?\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/Hacker0x01/react-datepicker/issues/204#issuecomment-148786202\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/204#issuecomment-148796839\n.\n. Please submit a PR\n\nOn Mon, Oct 26, 2015 at 2:50 PM Pierre de la Martini\u00e8re \nnotifications@github.com wrote:\n\nLooks like the classic problem with react 0.14, refs node are now only\naccessible by this.refs.reference and not\nReactDOM.findDOMNode(this.refs.reference).\nAre you open to a PR @martijnrusschen https://github.com/martijnrusschen\nor do you think you can fix that soon ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/204#issuecomment-151139204\n.\n. Version 0.14.5 should fix this issue.\n. Does that resolve your issues? Otherwise, I'll be happy to merge a PR if someone could add some refs.\n. I'll take a look next week. Let me know if you have found anything in the mean time.\n. So, to be clear. You want a tabIndex value on the input field?\n. Yes this is an issue with the latests version of the datepicker. You can use version 0.13.0.\n. Version 0.14.5 should fix this issue.\n. Thanks, this is great!\n. Having some issues with creating an example for this awesome thing. Mind looking into it what's going wrong? https://github.com/Hacker0x01/react-datepicker/pull/219\n. Shouldn't we document this somewhere? :)\n\nOn Wed, Feb 10, 2016 at 3:46 PM Rafee Memon notifications@github.com\nwrote:\n\nClosed #221 https://github.com/Hacker0x01/react-datepicker/issues/221.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/221#event-545852279\n.\n. What about wrapping the container in a wrapper? I know this sounds a bit odd, but that prevents adding extra functionality.\n. Did you try to rebase with the latest master? Looks like you're still running against an old master.\n. Should be fixed now!\n. Did you guys resolve this issue?\n. I'm sorry that we couldn't help you. \n. The package already requires 0.14 or higher. What do we need to change?\n. Correct. React 0.14 includes some breaking changes. I think the best solution for now would be checking out on an old commit before the change to React 0.14. (see https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html)\n. Okay, I'll add that info to the Readme\n. Could you please rebase your diff to make sure the changes are only affecting new code?\n. There's no activity on this PR anymore. This issue will be addressed in #277\n. Thanks!\n. Not sure if we should do this. \n. Yep, don't think it's worth it at this moment.\n. Thanks for putting this up!\n\nOn Wed, Nov 11, 2015 at 8:41 PM Evan Jacobs notifications@github.com\nwrote:\n\nSweet, thanks @martijnrusschen https://github.com/martijnrusschen :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/232#issuecomment-155889509\n.\n. Duplicate of #90\n. SGTM\n\nOn Thu, Nov 19, 2015 at 2:40 PM phil notifications@github.com wrote:\n\nThis was just fixed in 4.3.0: Pomax/react-onclickoutside#51\nhttps://github.com/Pomax/react-onclickoutside/issues/51\nShould we switch the dependency back to a ^ range on 4, or another range\nthat still specifically excludes 4.2.0?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/234#issuecomment-158059439\n.\n. merged\n. Merged a PR to updates this plugin to the latest version. Didn't see any problems here anymore.(https://github.com/Hacker0x01/react-datepicker/commit/1f88061db37c4a5050199b6d5a5bba850be19e8c)\n. Pinned the version again. Should resolve the issue\n. Same here, I'll make sure this double checked next time. Looks like react-onclickoutside upgraded to babel6 and might cause some issues here.\n. I downgraded react-onclickoutside to make sure it doesn't fail anymore.\n. Thanks, looks good. Please make sure the PR is up to date with the latest master so we are able to merge this PR.\n. Are you sure? I just tried to reproduce this, but it worked fine for me:\n\n<DatePicker\n          selected={this.state.startDate}\n          onChange={this.handleChange}\n          id=1 />\n. Could you try to latest version (0.16.0), this should resolve your issue.\n. Please try 0.16.1. 0.16.0 contained some errors.\n. Awesome!\n. What browser are you running, and can you did you notice any errors in your console?\n. Thanks!\n. We've updated the docs. This should be more clear now. (btw, npm start is a valid command now)\n. Thanks @arahansen for picking this up! Really appreciate the work you did here. And a big plus for adding tests for the new functionality! Please take a look at the comments and we're happy to merge this!\n. Thanks, looks good. Please make sure the PR is up to date with the latest master so we are able to merge this PR.\n. Fixed by #285\n. Works!\n. Not really interested in changing our current test setup at this point.\n. @RSO This is exactly what you were wondering about today. Looks like we need an .npmignore.\n. Yeah looks like it, I moved it to the root now. Hopefully this fixes the issue.\n. I'll release a patch version to fix this issue.\n. Released 0.16.1 with the fix (https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.16.1)\n. Awesome!\n. We need better tests.. Build passes, but examples are failing.\n. Care to look into this? I ported the changes from #228, but it doesn't work for me.\n. Replaced by #277\n. Thanks!\n. Great work! Looks like you're on a hunt to track down all the issues :) \n. Wondering if there's a way to test this.. I have a feeling that the hideCalendar stuff is really fragile and would love to have some tests.\n. But that shouldn't block this PR of course. Just looking for a way to improve our coverage on this.\n. Yes, great UX improvement, really love your help on this component :)\n. Valid point. Thanks for adding tests and an example! \n. @rafeememon This should fix the issue described in #193\n. LGTM!\n. We might want to consider showing the example with 2 Datepickers, I guess that's the most used situation. What's your take on that?\n. So coverage is in the output now, but need to figure out how I can actually test the right files:\n=============================== Coverage summary ===============================\nStatements   : 100% ( 0/0 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 0/0 )\nLines        : 100% ( 0/0 )\n===============================================================================\n. Awesome! Also my first time working with this coverage tool, curious if we can use this information in a way it helps us improving the overall code coverage.\n. @rafeememon Do you think this is fixed by #319?\n. Should be fixed with #273\n. Interesting and thanks for your contribution! I'll check this tomorrow.\n. Thanks!\n. LGTM\n. You can try setting focus on true for the time being. This should set the calendar open when loading the page. See https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L44\n. What about a custom trigger that triggers it $('.datepicker__input').click()\n. I don't think that's possible right now. You could trigger a click with jQuery on page load, but that's a bit fragile. If you can work out something else, I'm happy to review it.\n. Interesting, if we do this, how would the API for handling locales, custom week days look like? We should make sure the examples are updated/added too. (since this is a breaking change) For me, this sound like the biggest blocker before we move to a v1.0 of this component.\n. Also, adding @RSO here to discuss the change and the future of using moment.js in the component.\n. Yep, as long as it stays easy to implement and use this component. Are we able to set some sane default s of the moment locales? Would prefer having a good default setup that people can overwrite if they want.\n. Sounds interesting. @rafeememon What do you think?\n. I like the approach. Especially the fact that you can use your global moment locale in the component. Furthermore, the ability to pass in a moment locale as a prop makes it behaving the same as before.\n. Nice!\n. Agreed\n. Hi @kumarharsh, \nI had a hard time understanding what you wanted to achieve, but looks like you found it out. All styles are prefixed with `datepicker__ to scope it correctly according to BEM. (See https://github.com/Hacker0x01/react-datepicker/blob/master/src/stylesheets/datepicker.scss). Does this work for you?\n. What's the class you want to style. Can you provide the current class the overlay has, and is there a reason we should allow custom classes for that overlay?\n. Right, I get it. So the goal you want to achieve here is to style 2 datepickers differently. IMO, a really specific use case but I'll see if I can work out something.\n. Nice, @RSO can you take a look?\n. Nice suggestion, I don't think we have any non-hacky ways to do this at this moment. How would you like to implement this. Any suggestions?\n. Yeah, opening/close via prop sounds a good idea. \n. Would be great if you could kick this off!\nOn di 5 jan. 2016 at 21:42 Gaston Sanchez notifications@github.com wrote:\n\nWhy not add an open method to the component?\nAlso, is somebody working on this? I can make a PR.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/283#issuecomment-169126946\n.\n. @M3lkior The datepicker API is described in https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\n. Nice work, and thanks for adding test + an example!\n. Sure, I'll do a release tomorrow. Can you run on the master branch in the mean time?\n. Here you go https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.18.0\n. This should be fixed by #307\n. Something like this could work https://github.com/jsdoc3/jsdoc\n. Some more information http://blog.fusioncharts.com/2013/12/jsdoc-vs-yuidoc-vs-doxx-vs-docco-choosing-a-javascript-documentation-generator/\n. Got a first version running in a way that generates markdown files for each component file. (https://github.com/Hacker0x01/react-datepicker/pull/348) This is almost ready to go and could be nice first version to start with. Ideally, I'd add a new page to the GH pages website where we publish these docs in a nice way.\n. Closing this out since we have generate API documentation now. We'll add more docs over time once the internal API becomes more stable. Having a playground is a nice to have for me, but not a blocker for v1.0. Also, improving the generate documentation by copying it to the GH pages site is still on my list.\n. > Agreed that it's easy to miss a .clone call, and unfortunately I don't have a good answer other than being hypervigilant in PRs =( Maybe @martijnrusschen has thoughts here\n\nYep agree. Not sure if it's possible to write a linter for this, but that could help in this case. Reading up on the discussion in moment/moment#1754, it looks like https://github.com/WhoopInc/frozen-moment could help here. Did you consider this? (or am I missing the point here? :) )\n. Okay I'm convinced :)\n. We could debate if this should be part of an v1.0 or not.\n. sgtm\nOn Sat, Apr 30, 2016 at 4:56 PM Rafee Memon notifications@github.com\nwrote:\n\n(trying to close out as many tickets as possible)\n@martijnrusschen https://github.com/martijnrusschen, I think it's best\nif we concentrate on making our one theme look as best as possible rather\nthan supporting multiple styles. Consumers are free to add to our CSS as\nthey see fit. I'll close this out unless you disagree.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/295#issuecomment-215971543\n. Yes, great first step. Would be cool to discuss some possible options here for styling. Suggestions?\n. With #308 merged, we now have the ability to style datepicker__day--outside-month.\n. We'll be adding a default styling for this as soon as we have a idea on how to style this.\n. @tomazzaman Do you have suggestions on how this should look like?\n. Looks like https://codecov.io/ can help us here. Will see if I can set this up!\n. Yeah both options are similar to each other I guess. One think I like about Codecov is that it's more in your face since it outputs the difference in the PR. I think that will help people more than having the output in the CI (Travis).\n. @rafeememon's suggestion should work in this case. \n. Not sure on how to fix this, we fixed this issue in for NPM by adding an .npmignore that overwrites the .gitignore file, but doesn't look like something like that is available for Bower.\n. @rso do you think it would be doable to create a script that includes this in the release process? Way to go here looks like:\n- Fork current repo into new bower specific repo\n- Add dist folder back in the bower repo\n- On a release of the main repo, also release bower repo.\n\nI think this would be doable if we can automate this form the main repo.\n. Thanks!\n. Yup looks like the same problem.\n. Nice work!\n. Nice work!\n. Looks like one of the tests is still failing.\n. I pushed a change for the codecov hook in travis.yml. Not sure if it fixes the issue, but this looks to be the recommended way to do this.\n. Okay, looks like I made a mistake in the codecov config. I fixed that, so it should be able to post its status to GH now. This diff looks good to go.\n. Nice work. Can you make sure the CI passes, and would love to see some tests added if you have time for that.\n. Finishing in #326\n. @PetarIvancevic's answer looks probably like the way to go here. Do we want to document this somewhere?\n. Can you please add some tests and update your PR to make this mergeable?\n. Can you post an example of how you're using the component?\n. You can probably use the filterDate option for this.\n. Example: http://hacker0x01.github.io/react-datepicker/#example-8\n. Oh I just noticed that the filterDate option isn't released yet. I'll go ahead and release a new version so you can start using this.\n. Latest release is now available on NPM. Release notes: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.19.0\n. Added some tests for the today button. Still need to add tests to test the actual onClick\n. Looks like I screwed up a merge conflict..\n. @rafeememon Can you help out here? Not sure what the should be removed.\n. lgtm\n. Sucks that the package has no tests too ;) But yeah, code looks cleaner!\n. Yep sounds good. I'll try to get a release out today.\n. Just ran a release and updating the component to 0.20.0 should solve the problem. Can you confirm this works?\n. I guess the error might be in this file https://github.com/Hacker0x01/react-datepicker/blob/57d422bbb4d516f969f3fe2336bc1609510cdf33/webpack.config.js#L56. We moved from plain tether.js to a React package that creates wrapper around tether. Can you confirm this @rafeememon?\n. Can you check if there are any bower references left? I guess the gitignore will have some references to bower, for example.\n. Just released v0.21\n. Have you tried this with the latest version? We changed some things in how we serve files to the package. This might work for you too.\n. Please try 0.21.0\nOn di 9 feb. 2016 at 18:42 Narendra Sisodiya notifications@github.com\nwrote:\n\nI am using \"react-datepicker\": \"0.20.0\",\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/337#issuecomment-181976209\n.\n. Yep, looks like it. Closing due inactivity.. @rafeememon Yeah would be nice to get rid of it. Somehow lodash failed to upgrade so took that one out for now.\n. Had the same issues locally. Looks like lodash moved some things in this update, since we're only including some parts of the lodash lib this may impact us more than expected.\n. Extracted to https://github.com/Hacker0x01/react-datepicker/pull/342\n. lol\n. You'll need moment.js as a dependency. Please post your dependency tree if\nyou have already included moment.\nOn do 11 feb. 2016 at 20:34 Alex Wilmer notifications@github.com wrote:\nFresh install, typical React project:\nnpm install react-datepicker --save\nimport DatePicker from 'react-datepicker';\nPages crashes with\nreact-datepicker.min.js?1928:1 Uncaught ReferenceError: require is not defined\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/347.\n. I'm not sure what's on line react-datepicker.min.js?1928, any chance to check if there's anything relevant?\n. What about just documenting the datepicker.jsx? Or do you see any other files that could be useful to document?\n. Sounds good, wrapping up this initial PR with just Datepicker.jsx\n. Hmm didn't have the same feeling. To me the today button feels more like a special button that behaves like the other date inputs. Do we have other examples of these buttons that are behaving different?\n. Can you try this again with v0.23.2?\n. Ah yes that looks like the same issue. Moving the scripts to the end of the body solves it for now, but souporserious/react-tether#7 should fix in a more stable way.\n. Can you try this again with v0.23.2?\n. @rafeememon did you see https://github.com/Hacker0x01/react-datepicker/issues/357#issuecomment-184847108?\n. Yep, will kick off a minor release. 1.0 is coming closer!\n. https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.23.0\n. We moved away from tether. Closing this as we're not using that lib anymore.. We switched to ESLint with standard.js config and specific React rules.\n. Flaky diff, proposed a new PR.\n. Hi @PBRT \n\nThanks for contributing to our component. I'm using a automated script to generate those docs. I created a new PR that uses the scripts and renames the prop (I found the prop name really confusing). See #370\n. The docs are based on the proptypes in the component. If there's no proptype defined, this change would be gone the next time I generate the docs.\n. There are more missing propTypes we should add. I'm working on a new set of linters that should flag these.\n. yeah className would be preferable. But what does className refer too in this case? This could refer to multiple things here (eg. inputfield, calendar, etc.) Or am I thinking to complicated here?\n. I agree that added a parameter for this feels wrong. This is really a CSS thing and we should keep that in CSS. I just updated the datepicker in our own Codebase (since I just finished the upgrade to React 0.14) and I noticed that I had to add a z-index to the .datepicker__tether-element to make sure it didn't fall below other parts. (A z-index of 2 worked fine here.) \n. 1. Feels silly but keeps it simple\n2. Sounds nice, but feels wrong.\n3. This is probably the best UX, but I don't think this is really stable and reliable in the future.\nThis comment isn't really helping, but wanted to share my thoughts.\n. All open for getting rid of moment. I don't have time to work on that currently, but I'm welcoming PR's to make this simpler.. Moment was removed in #1527 . @rafeememon Can you give your opinion about this? You can run the linter by running npm run eslint.\n. @rafeememon \n. @rafeememon Can you do a sanity check on the added propTypes. It's Friday evening, could have missed something :)\n. Wondering if we should set the isRequired flag on some of the new propTypes. Thoughts?\n. Fixed the comments. Will merge this when Travis is happy.\n. Not sure about this. If you look at the way BEM CSS works, you should have a root class that's used like we do now. Getting rid of that makes the CSS less BEM'ish. Can't we change the classes to something more specific for this component instead? Here's some documentation on BEM http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\n. Something like .react-datepicker?\n. I think the problem is 2-sided:\n1.  I think we should try to wrap all our classes with a specific prefix for our component. This avoids any potential override issues. For example, datepicker we have here, but also close-icon are easily overwrite-able where this shouldn't happen by default.\n2. We should try to maintain a \"block\" class as the base class for this component. We can debate what the block is. The current datepicker class is probably the the best candidate, but I agree that it's not 100% correct. (for example, the input isn't an element of the datepicker block.)\n. What about:\n- react-datepicker\n  - react-datepicker__input\n    - possible child classes\n  - react-datepicker__calendar\n    - children \nTrying to figure out the best structure on solving this and moving forward.. Still have the wrapper div this way, lets try to iterate and find the best solution.\n. Or we introduce to 2 level classes:\n- react-datepicker-input\n- react-datepicker-calendar\n. This is probably a breaking change since people are relying on our classes.\n. Do we like this new format? I'll rebase and merge this if we like it. (lets keep the input field styling discussion out of this PR)\n. This looks good to go\n. Fixed with #391\n. Probably best to make date the default. \n. Since, we're excluding /lib in .git now, does this actually change something on how we serve files in our package? Looks like the initial description of the PR is different from the actual implementation now.\n. SGTM\n. LGTM, didn't test it but I assume you tested the new CSS.\n. Okay, this seems to be a nice feature. If someone is able to implement this, we're happy to support it!\n. This will be available in the next release! Thanks @jmfrancois!\n. @rafeememon What do you suggest here? Make the type configurable as a prop?\n. A bit custom, but that should work indeed.. LGTM\n. Fixed by #416 \n. Thanks!\n. > I think it draws more attention to those dates rather than deemphasizing them, which is what I think we should aim for.\nExactly, that's the reason I'm still doubting about this.\nI'm not sure if we shouldn't add some basic styling here. This feels as a pretty basic feature and something that should be included in the datepicker by default. \n. Of course :) Trying to give this some attention by creating this PR. Hoping this could gives others some inspiration on how to solve this.\n. I think the proposal in http://codepen.io/jochenberger/pen/RoxqyZ looks too much like disabled days, and that could confuse people when picking a date. What do you think?. Closing this out because of inactivity.. Was unused. Removed it.\n. Closing this out because of inactivity.. Released in 0.33.0 (https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.33.0)! \n. Released 0.25, this should fix the issue I think. https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.25.0\n. Done: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.25.0\n. Thanks!\n. I think you need this loader: https://github.com/webpack/css-loader\n. Check out this config. We're using the datepicker internally to load the examples: https://github.com/Hacker0x01/react-datepicker/blob/master/webpack.docs.config.js\n. Nice work!\nOn Sun, Apr 3, 2016 at 5:13 PM Rafee Memon notifications@github.com wrote:\n\nMerged #439 https://github.com/Hacker0x01/react-datepicker/pull/439.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/439#event-612737868\n. Will upgrade this weekend if no-one beats me.\n. Opened a PR for react-tether: https://github.com/souporserious/react-tether/pull/15\n. Lets try to keep redbox-react in the stack is possible. It's a great tool when developing the examples site.\n\n@halloffame It's just a devDependency. Doesn't hurt the component itself.\nI'll try to make the dependency compatible with React 15.\n. Agree lets get rid of redbox-react for now :)\n. We're almost there. #469 should remove the latest blocker.\n. I'll do a release tomorrow :)\nOn vr 29 apr. 2016 at 22:06 Rafee Memon notifications@github.com wrote:\n\n@martijnrusschen https://github.com/martijnrusschen, I merged the final\nchange in #451 https://github.com/Hacker0x01/react-datepicker/pull/451.\nI think it's time to cut a release [image: :beers:]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/444#issuecomment-215866419\n. Done: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.27.0\n. Thanks!\n. I guess the examples site hasn't been deployed yet. I'll trow a release\ntoday that should update the site too. Thanks!\nOn do 28 apr. 2016 at 10:48 Dimitris Tsironis notifications@github.com\nwrote:\n@martijnrusschen https://github.com/martijnrusschen There is the same\ntypo in the website\nhttp://hacker0x01.github.io/react-datepicker/#example-3. There is a\nbundle.js in gh-pages branch, but I'm not sure I should mess with it!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/450#issuecomment-215355505\n. Should be fixed now!\n. Depends on react-redbox. Opened a PR to support React 15: https://github.com/KeywordBrain/redbox-react/pull/52\n\nLet see how long this takes. It this takes more than a few days, we should remove this dependency.\n. Awesome! Great work!\nOn vr 29 apr. 2016 at 22:03 Rafee Memon notifications@github.com wrote:\n\nMerged #451 https://github.com/Hacker0x01/react-datepicker/pull/451.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/451#event-646154369\n. I like the idea. Can we get some test coverage for this?\n. \ud83d\udc4d \n. Okay lets do this, and move back to the NPM package as soon as your PR is merged.\n. Sounds good to me!\nOn vr 29 apr. 2016 at 21:26 Rafee Memon notifications@github.com wrote:\nmove back to the NPM package as soon as your PR is merged\nTBH, I don't think this is a good idea -- the code base quality is poor\nand has bitten us a couple times in the past. I think we can maintain a\nmuch better TetherComponent in this library, and perhaps extract it out\nafter iterating on it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/469#issuecomment-215855106\n. Manual merge\n. Nice work!\n. Can you post the log here? Or push the change and let Travis build it?\n. Thanks for changing this. Going to double check this to make sure it doesn't break our existing font sizes\n. Seems like this might be fixed now?. I pushed 0.40.0 with the fix included.. No problem :). Hmm, do we know which commit broke this? And yes, more tests... Hi @ehkasper, thanks for letting us know! We would welcome a PR if you have time to add it.\n. Agreed. Thinking about this, it might be nice to show display this somewhere in the readme, but it sounds to complicated to incorporate this into the release process. \n. Sorry, so I need to change the badge every time I roll out a new release?\n. Haha no, it's in #501\n. Ping @rafeememon \n. This should be possible now.. Seems reasonable, @rafeememon what do you think?\n. Give me a sec\n. Here you go https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.28.0\n. Interesting! I haven't used 15.2 myself yet, so can't confirm the issue. Seems we're hitting this error because of reason 2:\nYou are using a non-standard DOM attribute, perhaps to represent custom data. Custom data attributes should always have a data- prefix, as described in https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\n\n@rafeememon Can you confirm this is the case. If so, we should start renaming our props to make sure these are all valid.\n. Done, you can now download v0.28.1, thanks all for the input!\n. Found the issue?\n. Instead of closing the PR, could we try to fix the linter? Since this fixes #517, I'd like to get this trough :)\n. I like this, @rafeememon what do you think?\n. We should probably update the readMe to make sure anyone knows that tests you can use Enzyme for tests. Here's some more information: https://github.com/airbnb/enzyme\n. @rso Is this ready to go or do we need more changes before we land this?\n. This should be fixed with the next release (should happen this week)\n. Planning to do a release today. Stay tuned :)\nOn Sat, Jul 23, 2016 at 11:33 AM Rafee Memon notifications@github.com\nwrote:\n\n@thangaduraicse https://github.com/thangaduraicse, you can easily build\nyour own dist of the component in lieu of a release.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/525#issuecomment-234709318,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKK2khUS6s6DIgKfr2nrvw_OVENlXks5qYd_bgaJpZM4JNvAI\n.\n. @thangaduraicse Here you go https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.28.2\n. I created a new PR with the updated code. See #577\n. Closing this out because of inactivity.. Thanks for submitting your PR! Seems like a nice addition to the dateFormat options. Would you mind adding some tests for the new functionality? This way we can make sure this will keep working in the future ;)\n. Not yet, I'll get to it today.\n. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Hi @FND, \n\nI'm updating this package in #601. This changes the mixin to a regular HOC since the implementation has been changed. What happens if you try this branch with your proposed fix?\n. #651 was merged today. Do we still need this PR after we've upgraded the package?. Can you add a screenshot on how this looks like?\n. If someone has time to fix the build, I can merge this ASAP.\n. @salmankhann If you can fix the build, I can merge this for you.\n. Closing due inactivity.\n. I like this, this may warrant a new example on the example site (not blocking this PR). Can you please rebase so this is ready to merge?\n. Sorry,  I merged again a PR that affects your code. I'm really sorry! If you have no time to update the PR again, I can try doing that before I merge it in. Also, is there a way increase the code coverage of the touched code? It seems that it doesn't hit the target of 75%.\n. Awesome!\n. I'll release this soon!\n. Sounds like a nice addition, can you please fix the lint warnings? Thanks!\n. Thanks!\n. I'll take a look tomorrow.\nOn Tue, Oct 4, 2016 at 10:29 AM Alexey notifications@github.com wrote:\n\nPlease add customInput prop to docs\nhttps://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/551#issuecomment-251326163,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKJ8bpvkW061r84RrktLX75d5q6umks5qwg5TgaJpZM4JrsEd\n.\n. Thanks, if someone could dig into this to find out what's going wrong that would be really appreciated. \n. Yeah I think this was fixed in one of the recent releases. Closing this out.. Sorry I can't approve this PR, code style is important to maintain the quality of the project. The checks are there for a reason and merging a failing PR will cause others problem creating PRs.\n. We'll release a new version soon.\nOn Sun, Sep 18, 2016 at 2:11 PM Cody Jenkins notifications@github.com\nwrote:\nI believe the change won't be available until a new version is published\nto npm (maybe v0.30.0)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/558#issuecomment-247844144,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKOEJhaxDJlHC_XyM7mc2oPoGDeRrks5qrSpngaJpZM4JxJwj\n.\n. Awesome!\n. Tomorrow. Sorry for the delay!\n\nOn Tue, Oct 4, 2016 at 7:34 AM Greg Poole notifications@github.com wrote:\n\n@martijnrusschen https://github.com/martijnrusschen when are you\nplanning your next release? I'm hoping to start using this feature in one\nof my projects.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/561#issuecomment-251300078,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKFFg_KXmSf4sVcyOIE-ZAuAApDanks5qweVOgaJpZM4J2dtv\n.\n. Done!\n. Awesome!\n. Looking into the same issue for Master. I'll keep you posted.\n. @iknowcss I made the test pending to fix the build. Couldn't find the root cause of the issue and wasn't able to reproduce this locally. Go ahead and rebase with master to fix your PR.\n. @rafeememon Anymore comments on this?\n. Hi @MarkReeder, \n\nThis looks good to go. I had some issues merging the branch to master since src/calendar.jsx is conflicting. Could you update your PR so I can merge this ASAP?\n. @grumd @rafeememon Can you verify this is correct?\n. I agree, would love to see if someone could diff up a PR.. Thanks for adding this!\n. Thanks!\n. This seems the way to go. However, 2 tests where this method is used are failing because we moved from a mixin to HOC. Anyone wants to look in this? cc @rafeememon \n. @magsout That could be, but it doesn't magically fixed the tests. If you have time looking into this, that would be appreciated. \n. @jochenberger Correct, I'd love to get some help on this. I don't have time to fix this in the next few weeks.. Code wise, I think this implementation is a bit cleaner over the one you created in #651, but since your implementation saves a lot of issues with fixing all the tests, I think it's worth the tradeoff here since it's still understandable and doesn't look that bad.. Going with #651. Can someone fix the example, to make sure this won't happen to other people as well?. @jochenberger Agree. Would love to have that updated before we starting releasing a V1 version. Something I'm planning to do in the next few weeks. Do you have suggestion on things we need to update in the docs? (we should probably move this to a different issue.). @alex-shamshurin The project is still maintained and active. However, maintaining doesn't mean you should fix all issues yourself.. Yes please go ahead and submit a PR. All help is welcome :)\nOn Wed, Oct 26, 2016 at 5:00 PM Osipov Vladimir notifications@github.com\nwrote:\n\nNow, time in selected date resets after any changes. It's very\nuncomfortable if you are using datepicker with timepicker. I'm resolved\nthis bug and wrote tests to check it here\nhttps://github.com/zouxuoz/react-datepicker. Can send pull request?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/606, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKKXpFU08PZXZkmgiVvoPm4QVrKXNks5q32rvgaJpZM4KhR3I\n.\n. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. We can probably simplify the Travis setup a bit since it supports Yarn out of the box now: https://blog.travis-ci.com/2016-11-21-travis-ci-now-supports-yarn. Having a lock file in your repository shouldn't hurt since it's only used for local development AFAIK. Even projects like https://github.com/facebook/react are using lock files.. Also, according to the Travis docs, you'll need a lock.file so that Travis can detect that you're using Yarn.. @josiahsprague This project is still maintained. We welcome PRs to improve functionality or fix bugs. . Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Fix has been merged. Will be released soon.. Thank you!. Looks like this is fixed. Awesome thanks!. Interesting, would you be able to fix this and create a PR?. Sounds like a good idea, do you have time to add it in?. Thanks!. Awesome!. Fully agree btw!. could you fix the build so we can land this?. Any chance you can add it in?. Nice catch!. Would you mind adding an example to the docs on how this works? Similar to the year dropdown.. Awesome, thanks for the help!. Thanks for fixing this!. Closing as a duplicate of #507.. Thanks for helping with this!. @github1 Before I can merge this, it would be awesome if you could rebase your PR with the latest master branch to make sure this can be merged.. Thanks a lot!. This should be fixed now. Please let me know if this isn't the case.. Improvements to the docs are welcome! Thanks!. Awesome, closing this now :). Thanks!. Nice work, thanks!. I can release later today.. Looks good to me, can you add some tests to cover this?. Closing due inactivity. . Pushed 0.40.0 with this included.. Looks good to me. Can you make sure the build succeeds?. @ro-savage Thanks for creating this. How's your progress with the internal testing?. Seems fine for now, we can revisit later and if you find the fix in the mean time let me know!. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Hi @mtrabelsi, feel free to improve our documentation/readme/examples. I'd love to get some extra thoughts on this how to improve and make this developer friendly. Feel free to open a PR with updated and changes.. Thanks!. Should fixed now. Thank!. @dylanscott Thanks for making this change. However, our documentation is auto generated on each release. This will be fixed with the next release.. @rafeememon What do you think of this PR? Do you have time to review this one?. The build fails on some lint errors:\n/home/travis/build/Hacker0x01/react-datepicker/docs-site/src/examples/custom_calendar_class_name.jsx\n   7:3   error  Bad line breaking before and after ','                    comma-style\n  33:11  error  Expected indentation of 12 space characters but found 10  react/jsx-indent-props\n  34:11  error  Expected indentation of 12 space characters but found 10  react/jsx-indent-props\n  35:11  error  Expected indentation of 12 space characters but found 10  react/jsx-indent-props\nCan you please fix that, so I don't have to merge in a failing build?. I'm a little in doubt here. But it seems a fairly simple solution. Can you add a test case to make sure this doesn't break once someone tries to refactor this and doesn't know about this case?. Awesome, thanks!. Sorry, that was an error on my side. Should be fixed now!. Happy to merge this, can you resolve the merge conflicts so I can merge this?. Thanks!. Any suggestions or PRs are welcome :). Thanks!. Todo:\n- Fix the build\n- Replace codecov, or leave it out?. Hmm, it seems 0.41 introduced some regressions that weren't in 0.40. Hopefully someone is able to find the root cause, so this can be fixed.. Should be fixed now?. Lets get this rebased and merged. I'm cleaning stuff up, so we can make the last breaking changes before we announce a 1.0.. Hmm, it seems 0.41 introduced some regressions that weren't in 0.40. Hopefully someone is able to find the root cause, so this can be fixed.. Should be fixed now. Hmm, it seems 0.41 introduced some regressions that weren't in 0.40. Hopefully someone is able to find the root cause, so this can be fixed.. +1 on more investigation and a fix :) Happy to help reviewing any solutions for you.. Adding some recent contributors for their opinion on this: @mgrdevport, @jochenberger, @ro-savage, @rafeememon.. > IMO the most important thing to settle on is the API, which includes the components we will expose, the props that they'll take in, and possibly even the styles. I think it stands to be cleaned up pretty substantially, and there are a few breaks that we've wanted to make but deferred on. Once we've settled on the API I think we'll have a clear path forward to getting to a releasable v1.\n\nWe might just leave it as it is, if there's no urgent reason to do it. I agree that API is the most important piece to settle on, but looking at the comments it seems pretty decent currently.. I'd love to get rid of grunt and move everything to webpack. However, I don't have the time to convert the scripts. I have a WIP open to migrate to webpack 2: #735.. @aij What would you do to make that easier to understand? I'm open for suggestions.. @alex-shamshurin Correct, the demo site generates a bundle.js which is committed to the gh-pages branch. I think we should just add it to the ignore list for the master branch. Thoughts?. It helps to have a demo site to use as a local development environment. You can directly see and test your changes.. Getting closer. V1 should be ready before the end of the year.. This is amazing!. Can you also remove lodash from the package.json or are we still using this internally?. Merging this to get people unblocked.. Thanks for looking into this @gavacho!. Have you tried upgrading to 0.42? That should solve the problem as well.. The coverage reports aren't always helpful. I'm fine with merging in this case.. Thanks @aij for putting this together. Can you maybe explain a bit on what's happening in this PR? Also, I merged some other Pull Requests so a rebase is welcome.. Thanks for the extensive comment! I think having a more generic solution for the problem we solved in the recently merged PR should be fine. I'm not really against that, I think I didn't realize that this was solving the problem as well when I merged that PR. Lets try getting this PR merged and see where we are after that. I'd really like focussing on getting in a more stable state again and it seems this would help moving to a more generic solution for multiple problems.\nThanks again!. Sorry for the delay on this. Thanks for the useful explanation. I'm going to merge this and hope nothing serious brakes :). Done. PR has been merged and released. Closing this out.. Fixed by #788 . Can you tell me why you want to ignore this?. Agree, it's best practice to have the yarn.lock file checked into git.. Looks like the build is failing. Are you planning on fixing the build?. Yep it has been failing for a long time, a build doesn't start failing on its own. . Thanks!. Sorry for the delay here. I\u2019m currently on vacation but I\u2019ll do a release\nas soon as I get back home.\nOn Wed, 28 Jun 2017 at 23:31, Philip Tzou notifications@github.com wrote:\n\nI don't know... Since I am not the owner of this project:)\nOn Wed, Jun 28, 2017 at 2:44 AM Clara Attermo notifications@github.com\nwrote:\n\nI think this commit 82a48b0\n<\nhttps://github.com/Hacker0x01/react-datepicker/commit/82a48b0bf4653da69d4297bdbe2c090ad6c6f5d4\nfixes this problem. Not yet released though. When can we expect a release\n@philiptzou https://github.com/philiptzou ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<\nhttps://github.com/Hacker0x01/react-datepicker/issues/802#issuecomment-311610793\n,\nor mute the thread\n<\nhttps://github.com/notifications/unsubscribe-auth/AAxbiQtDCr44sdqUofQz3jZNxGaFFI-8ks5sIiBxgaJpZM4MvFGt\n.\n\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/802#issuecomment-311715237,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKMF-qzT-FsxM4Osw4mQwTxiDM7Olks5sIn_0gaJpZM4MvFGt\n.\n. @obartra ES6 classes seem to be the new standard. Welcoming help to get the codebase migrated!. Closing due inactivity.. Looks great! Thanks for the contribution!. Nice work, I just merged a PR that changes the codebase to ES6 classes that's causing merge conflicts right now. I can merge this after the conflicts are resolved.. This got fixed by #1072.. Sorry I merged another PR that's conflicting with yours. Can you double check your changes and rebase against the most recent master? I'll merge it directly afterwards.. Closing this since it's a duplicate of #941 941. That's a different datepicker. You can install this datepicker here: https://www.npmjs.com/package/react-datepicker.. Nice, is this something that could be implemented in the component itself?. For ES6 classes, getInitialState has been deprecated in favor of declaring an initial state object in the constructor: http://stackoverflow.com/a/33447222. We'll need to rewrite getInitialState to this new flavor.. This is definitely not by design. I think we missed this one during the refactor, and I'm supportive to get it back in. My guess is that adding it back as a static property would be fine?. This looks like a bug, is this still happening?. @shadrech Thanks, yes. Codecov only complains about the fact that the current test coverage of this PR is below the target of 75%. Currently the overall coverage floats around 95% for the complete project.. Not sure why codecov isn't liking them. Need to look into that, but for now this seems fine. @aij Any thougths on this PR?. @alex-shamshurin ^. Sorry for the confusion, forgot to release this earlier.. Should be possible now.. Closing due inactivity.. Is this still an issue?. Should be fixed now.. Fixed by #857 . @mgrdevport I tried merging with master to get the latest changes in. Can you verify this is done correct? I want to make sure I didn't merge in any unwanted changes.. Thanks!. Looks good! Can you resolve your merge conflict so I can merge this?. @alex-shamshurin I'm not completely sure how to fix these build files. We'll need them in the gh-pages branch, but it doesn't seem possible to exclude files just from 1 branch.. > Why we cannot it exclude from this branch? On each build these files will be recreated. Yes, it prevents from easy switching to the branch which tracks these files, but we can delete these files ant then checkout.\n\nIt's currently ignored from the master branch and all feature branches. The problems is that to completely fix it, we need to exclude it from gh-pages as well. But that means we need to fix our deployment of the demo site in a different way. Open to suggestions, but it seems unrelated to this PR.. Yeah, it's a bit complicated but if you take out the compiled files from the PR those will be re-generated when doing a new release.. Thanks!. According to https://www.npmjs.com/package/react-datepicker 0.51.0 is the latest published version.. Closing due inactivity.. Seems fixed.. Closing due inactivity.. Merged.. Should be fixed now.. If you're able to modify the scripts, I'm happy to take a look. We use react-docgen from Facebook to generate docs based on the proptypes.. > Only thing is that, if there is a way to add some description for some of the props. That would be useful.\nSee https://github.com/reactjs/react-docgen#example on how to add additional information to a prop.. This fix is released. Let me know if this happens again.. Closing due inactivity.. Anything actionable what we can do today? Removing internal state seems more like a long term solution.. Hi, can you please bring back the following files:\ndocs-site/bundle.js\ndocs-site/style.css\nIf that's done, I can merge the PR.. Upgraded per #896 . Closing due inactivity.. Thanks, added @ajj and @alex-shamshurin ad maintainers.. Nice work!. If popper is proposed by tether itself, I'd be supportive in moving to\nthat.\nOn Thu, 22 Jun 2017 at 18:59, Justin Toh notifications@github.com wrote:\n\n@rafeememon https://github.com/rafeememon @alex-shamshurin\nhttps://github.com/alex-shamshurin I guess this fix isn't going\nthrough? =S\nOn a side note, any plans to migrate over popper.js\nhttps://popper.js.org/? I can start working on it this weekend =)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/899#issuecomment-310440570,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKKlKjLKq5Dtzo091i6zpiIY4_DX9ks5sGp1YgaJpZM4OAeym\n.\n. Yeah would love to see a PR \ud83d\udc4d . I released the new popper implementation, this should be resolved. Let me know if this still happens.. These docs are autogenerated by this file: https://github.com/Hacker0x01/react-datepicker/blob/master/scripts/generateMarkdown.sh. We should try to fix the problem here, to keep your fixes after the next release :). That should work.. I\u2019ll release this as soon as I get back from my vacation. Probably Monday.\nOn Thu, 6 Jul 2017 at 17:43, Clara Attermo notifications@github.com wrote:\nPlease release this code. This bug is stopping me from upgrading to React\n15.6 :-(\n@rafeememon https://github.com/rafeememon @martijnrusschen\nhttps://github.com/martijnrusschen\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/904#issuecomment-313361750,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKGkPNCFfgtNmOUgBYOwRNiMprBLtks5sLLpGgaJpZM4OBYAo\n.\n. Can you explain what you're missing, or maybe just create a PR with new info?. Closing due inactivity.. I\u2019m not able to review this PR due to my vacation. If you guys feel this is good to merge, go ahead and merge it as soon as you feel it\u2019s a good replacement for what we have today. . Sure, if you suggest a PR with some possible solution than we can take a look to see if we think it's a worthy addition.. This should be fixed now.. Consider it done!. 0.50.0 is released.. I can squash on merge.\nOn Tue, 11 Jul 2017 at 10:27, Alexander Shamshurin notifications@github.com\nwrote:\nCould you squash you commits into one-two and without merge commits?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/936#issuecomment-314372047,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKF2LJkxr1quFUHRdqoWTFZZf-h8Eks5sMzIPgaJpZM4OSpHY\n.\n. Perhaps #1001 might help?. Ah yes, just upgrading it for my own sanity to get it removed from the yarn outdated list in that case :). This seems like an uncommon way of fixing this. Isn't there a javascript function that can check if there's something supplied that's a number? I'm  afraid that fixes like these are getting refactored at some point and will be gone because nobody can remember why this was added.. Any chance we can add a regression test to avoid breaking this again?. @aij Thoughts? Good to merge?. @buhuitou This should be good to merge when the merge conflicts are resolved. Can you take a look, so that we can merge this one?. Closing due inactivity.. Closing since it's a dupe :). Lets fix the merge conflict, and this should be good to merge.. Closing due inactivity. Can you be more specific and post the errors here?. Done.. Looks like a nice improvement, but the build is still failing so can't merge this PR currently.. Will do one now!. Totally off topic, but huge props to the design! This looks terrific! Would love to have support for multiple designs so we can offer this by default as an option.. I think an additional prop could work here. I would assume that normal behaviour would close the datepicker after picker a date, but I'm fine with overriding this if you need different behaviour.. Awesome, thanks!. Just pushed: https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.53.0. It's was fixing all changes that didn't got merged into 0.50 because of a bug in the release script. See 0.50 for relevant changes.. Awesome!\n. Can do it later today\n. Got some merge conflicts, but should be good to go when resolved.. @kblodget We're waiting on resolving the merge conflicts.. Closing due inactivity.. Sounds reasonable. Lets do it!. Yeah I think the new behaviour is better and should be the default. Lets roll with that!. Unsure why the coverage tool isn't picking up the tests, but a 50% coverage drop seems weird for this change.. Not sure, but looks like the coverage tool is just a bit buggy. Happy to merge this if @lbelinsk approves it as well.. Sounds like plan!. Awesome, thanks for the help!. Lets fix the linter so we can move towards merging this.. Looks like 1 test is still failing. Can you fix the build so that I can merge it?. Looks like the build is still failing. Do you know what's going wrong?. What's left to merge this PR? Looks like it's mostly just the failing build. Anyone working on this?. It looks like the current build is failing on Cannot resolve module 'moment'. Is this something you can easily fix, so that we can see what's next?. Can you fix the merge conflicts?. Thanks!. Seems solid. Lots of changes, so lets hope we don't break anything. How should we move forward with this. First merge part 1?. @prayerslayer Part 1 got merged. Can you rebase your PR so that we can merge part 2 as well?. > I'll probably need to refactor how locales are handled. A major advantage of date-fns is that it doesn't include a bazillion locales right away, so we'd probably need to give up string locales (locale=\"fr\") in favour of locale data that is useful for the formatting function (locale={require(\"date-fns/locale/fr\")} / locale={moment.localeData('fr')}).\n\nSounds fine. As long as we discuss this as a breaking change\n\nWhat gives me a bit of headache is the UTC offset. As far as I see there is no way to get a JS Date with a timezone other than what you're currently in. Ofc you can do something like new Date(Date.UTC(year, month, day)), with year, month, day being values in UTC, but the Date object will still show GMT+2 or whatever. Not sure yet how to work around this, advice is welcome.\n\nNot sure how what's desired here. Any suggestions?. This looks like a CSS bug. Are you using the CSS provided by the component?. Interesting idea. I think we should drop anything that's not supported by date-fns by default. So lets see if we can get a version ready that just does the basics with Date-fns without breaking the moment.js implementation. The date-fns implementation will be less feature rich but we can document the differences.. Closing in favor of #1527.. Should be good to go when merge conflicts are resolved.. Closing due inactivity.. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Lets fix the merge conflict and this should be good to go.. I released 0.58 which should fix this problem I believe.. We downgraded from 6.1 to 6.0 to fix this problem.. Oh wait, sorry my bad. 0.57 should fix the issue based on https://github.com/Hacker0x01/react-datepicker/pull/1083. Can you describe what's not working for you?. I'm a bit hesitant of releasing a new version, but I'll cut a patch release so we can give people access to the latest version to play with.. Can you try 0.58.0?. Thanks for looking into this, any help upgrading the set up would be appreciated.. Sweet :) I just merged the temp fix. I\u2019ll try to run a release tonight as\nwell.\nOn Thu, 2 Nov 2017 at 19:41, Mateusz Burzy\u0144ski notifications@github.com\nwrote:\n\nI might try to do this later, need to assess the required work though,\nhowever it should be pretty straightforward - I've done it already over\ndozens of time ;)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1089#issuecomment-341520146,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKAJq3qVbvRWdoedrL9YiB3IGQVy_ks5sygzwgaJpZM4QGPym\n.\n. @Andarist Not attached at all :) This is just a leftover from our buildstack as how it was designed 3 years ago. Feel free to remove anything you don't like.. Can you try 0.58.0?. Thanks, giving this a go.. It loos like these scripts broke the re-generation of the documentation site stored in /docs-site. I just pushed some changed to there and don't see these reflected when running the build scripts. . Yeah sorry, still having issues. Are you able to help me out here?\nOn Mon, 1 Jan 2018 at 02:06, Mateusz Burzy\u0144ski notifications@github.com\nwrote:\nI'm not sure if I understood correctly. Were you able to fix the issue or\nis there an issue with the changes and the fix is needed?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/1115#issuecomment-354631531,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKLZuCcp6yco1FaH6wP066x-g8O_jks5tGC-ggaJpZM4QRrdx\n.\n. To publish new changes to the gh-pages branch I'm using a script that's stored here: https://github.com/Hacker0x01/react-datepicker/blob/master/docs-site/publish.sh. This script also uses the npm build scripts, but I'm not sure whether this is actually updating the bundle.js in the docs-site folder. After pushing some changes to the docs-site and running the release script, I didn't see those changes committed to the gh-pages branch, so I thought the new scrips might not take this case into account yet.. cc @Andarist. No concrete plans with CircleCI. Needs more love before I can replace Travis. Sticking with Travis for now.. Hmm, I would prefer changing back the compiled CSS files to the original names to avoid breaking behaviour for existing installations.. Thanks, yes that would be appreciated!\n\nOn Mon, Nov 6, 2017 at 12:15 PM, Honza Jerabek notifications@github.com\nwrote:\n\nAgree! I saw you were doing some building refactors, so I changed the\nnames, but previous state would be better for most users.. I can send a PR\nafter lunch ^^\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/1121#issuecomment-342118994,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKEz_-bVg6EbhMkF1mE_gk9Z2bUInks5szupJgaJpZM4QTEx6\n.\n. Can you add some tests to cover your new behaviour? We want to avoid breaking this behaviour next time someone touches this code.. Should be fixed with 0.60.2. Duplicate of #730. Can you tell a little bit more about your fix and what issue you're solving? Also adding a test would be appreciated.. Upgraded in 14f886b283e73bb8a4b0fb26e27c0cce4892136a. Seems worth it, can you make sure the build's succeeding?. I agree this is probably better, however there's some discussion going on here #122.. Not sure if we can make this change without breaking everyone's datepickers. What do you think?. Okay lets do this. We use yarn.lock instead of the package-lock.json, so lets make sure that's updated. . @Kerumen Let me know if you want to proceed with this, happy to merge now we're reaching consensus. . Which commit are you looking for? Does 0.61.0 fixes the issue for you?. We'll get a new release out this week. Most likely today or tomorrow.. Can you add some tests?. It looks there's a merge conflict, can you make sure that's resolved so that I can merge this when it's ready?. Can you add some tests to make sure these changes are covered?. There's a tests folder in the project. You can run these tests locally by running yarn test.. Can you please resolve the merge conflicts so that I can cleanly merge this PR?. Okay, brought back ESlint for the non-style rules. I didn't look into the separate commit yet, but I don't think that's a blocker. I know a lot of folks are also using prettier plugins in their editors, so I guess that's less important to have all prettier changes in a separate commit. We can look into this later on though. If you have something, feel free to whip up a PR.. Thanks!. I'll cut a release to verify this works as expected!. Awesome, that fixed it!. What's this about?. Thanks!. Thanks!. Sweet, thanks!. Great work!. Thanks for fixing!. @ivstefano See question above.. Closing due inactivity.. Please check out the failing build. Also, can you add a test for this functionality?. Did you have a chance to look at this? Otherwise, I'm going to clean this from our list.. Could you perhaps add a test to make sure this won't break again?. Looks good. Thanks!. Should be fixed with the next release.. Sounds like a great improvement! I could actually use this.. Closing per #1289. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Just pushed a release. Version 1.2.1 should have all changes included.. Build seems to be failing. Also, any way to add a test for this behaviour?. Closing due inactivity. Cool let me know once this is done.. Closing due inactivity.. Sorry for the delay, this looks good. Thanks!. Nice work! Thanks.. Thanks for submitting this, can you expand a bit on what you're changing here and why? No worries about the large diff, it's doable. :). Thanks, for the info!. Can you give some context on what's changed here?. Closing due inactivity. . I don't have any experience with this, but if we can do this in a way that we can support this for people that have less experience with it (Linters? Tests?), it sounds like a nice addition. There's some historical context around this in #299 where TypeScript was suggested.. Looks great, how do we make sure others are adding types as well when adding new functionality? Is there a way to enforce this somehow? It needs to be user-friendly and self-guiding to make sure people keep contributing.\n\nAlso, how do we migrate? It seems we can migrate piece by piece, but is there a way to measure progress?. > We could run flow from the build system so contributors would see flow errors right away, like with eslint. Another option would be to run it during testing, but it's often convenient to see type errors sooner rather than later.\nSounds like a good idea, I think it would be good add this in before we land the PR that's open. Thoughts? I found a few articles related to this but doesn't seem like there's a default way of doing this.\n\nFor measuring progress, I see React is using flow-coverage-report. I haven't used it yet, but it looks pretty straightforward.\n\nLooks interesting! But lets focus on adding the default checks to the CI first.. https://react.rocks/blog/post/flowtype-continuous-integration/. Nice work \ud83d\udc4d . Looks like the CI integration works, shall we go ahead and merge this? . Good question, need to dive into that. I was planning on upgrading webpack as well, but haven't got the time to make this happen. . Can you expand a bit on the use case here?. Can we get the merge conflicts resolved so I can merge this?. Yep that's the way to do it \ud83d\udc4d . @aij Let me know once this is ready to merge.. > If you add luxon support alongside moment, yes, but when I replace moment I need to change all the examples, which contain userland code :)\nI have no clear picture of the usage of Luxon vs Moment currently but would it be an idea to implement it in a way that we can run Luxon next to moment? Giving the users the flexibility to use whatever library they want to use (Luxon, Moment, Pure JS dates, etc.) Another route would be to remove moment altogether (something like #1059). \n. Moment was removed in #1527.. Merged the PR, closing this. Nice work!. Again, nice work!. It's not, but it's driven by volunteers who all have a full time job as well. I'm sorry for the delay. Can you perhaps add a test for your fix, so that we won't break this again in the future?. No reason, but happy to cut another release. It looks like some checks are failing on code coverage. Any chance we can get that fixed?. Just tested this on the latest Chrome and seems to work fine for me. Can you try this with a different browser and see if it might be related to your Chrome?. I'm using Version 65.0.3325.181 (Official Build) (64-bit). Does it happen on any specific example, or isn't that relevant to reproduce the issue?. Hmm, interesting issue. Have you tried this with the latest Chrome as well? I haven't been able to reproduce the issue. I'm not sure if you have time to take a look, but if you can reproduce this on the local build, perhaps we can find out what's going wrong. \n(We (and many others) use this date picker in our production apps and it doesn't seem to be causing any issues for us). Should be fixed now. Thanks for taking a look at this! Can you get the test fixed?. Done!. Good question. We have multiple discussion about moving away from moment to libraries like Luxon, or making moment optional so that you can use any library for your date picker.\nIdeally, I think it would be great if the date picker could handle multiple date engines. This allows customers that use the library they prefer (for example, at HackerOne we use moment at many places in the app and that's why we choose this library for the date picker) but someone else could use date-fns and might not want to include moment just for this date picker.. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. There are some merge conflicts we need to fix before merging.. Thanks, merged!. Fixed. Nice!. Any help with this would be welcomed :). Sorry, didn't catch this as it was failing some checks. Merged it now!. Going to merge this as a band-aid. . Can you check the failing build?. Thanks!. Hi, thanks for making these changes. Seeing the size of the PR, I'll let @aij take a pass on this too. . No worries just wanted an extra pair of eyes on this PR. No need to split up if it's up to me.. Thanks for your contribution!. Thanks, looks good! . Don't worry too much about it, if you can fix the merge conflicts I can get it fixed.. Sorry, I can merge it directly after you resolved it. Didn't catch this one earlier.. Thanks, codecov is a strange tool. . Thanks!. Looks fine, but you have some unrelated changes in the PR. Can you get rid of those?. Closing due inactivity.. Thanks, nice catch!. Moment.js was removed in #1527, starting v2.0.0, this package doesn't use Moment anymore.. Thanks :). Any way we can add a test for this behaviour?. https://reactdatepicker.com/ contains a lot of examples, is this what you're looking for?. Can you be a little bit more descriptive about what you would like to see?. Would be great if you could add a test for this as well :). lgtm. Looks good!. How're things going?. Great work! Can you add a test for this functionality?. I tried reproducing this with the examples site, but was unable to reproduce the error. Does someone have some steps to reproduce, or is it under specific circumstances?. Let's try :). Nice work!. Will try to get a new version out today. I'm totally supportive of this change. I think the time is ready to get moment.js removed. We've had many requests before, but weren't able to get this done due to the large amount of work required. This will require a major release of the package, but happy to get that done. I'd love to get some more eyes on this PR before merging it. Once that's done, let's fix the merge conflicts and get it shipped.. Thanks, I merged it. Going to release a new major version today to reflect the breaking changes.. V2.0.0 is now live!. Thanks!. Looks like the CI is failing. I can't merge a failing PR.. Sorry took a bit longer than usual. Thanks for your contribution!. @Darrken found some leftovers, good to go?. Moment was removed in v2.0.0. This should resolve your concerns,. Would appreciate if you can submit a PR for this.. Awesome, thanks!. Thanks!. You are not going to continue this?. I don\u2019t think this was done yet. Any help would be appreciated.\nOn Mon, 26 Nov 2018 at 21:24, chris baker notifications@github.com wrote:\n\nHello!\nExcited to see that react-datepicker has dropped Moment.js in lieu of\nnative Dates. Has anybody put together a release of the typescript types\nthat remove moment as well?\nThanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1556, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKABX2t8hNzv7CyC4Cm8R0Qvyq62Eks5uzE3ngaJpZM4Yzw6v\n.\n-- \nThanks,\nMartijn Russchen\nProduct Manager HackerOne\n. Thanks. Thanks. Nice!. If you can rebase this PR, I'm happy to merge it.. Looks like you have a merge conflict. Can you fix that?. Looks good!. Thanks for your commitment. Merged it now, and will release this later this week.. Thanks for bringing this up. I think it would be good to move to the newer APIs as we only support React 16 and higher anyways.. Nice, thanks!. Done!. I guess I forgot to add, but you can simply check out the commits done between 2.0 and 2.1.. Thanks! . Looks good, merging it and will release this later this week.. Just curious, how do you see this being used?. If you can resolve the merge conflict, I'm happy to merge this.. What's being fixed? How does renaming these variables fix this?. The first file is the compiled version of the latter file. Renamed the second so it's clearer for others.\n. I would suggest to move this to getDefaultProps (http://facebook.github.io/react/docs/reusable-components.html#default-prop-values)\n. getDefaultProps: function() { \n  return {\n    dateFormat: 'YYYY-MM-DD'\n  };\n},\n. Did you compile the new JS? This should be removed right?\n. We could add something like https://www.npmjs.com/package/grunt-trimtrailingspaces to avoid this.\n. Are these changes related to your PR?\n. I see a lot of npm install in these docs: https://docs.npmjs.com/cli/install.\n. This newline isn't needed.\n. Would it make sense to add some defaultProps to the popover component? Not sure if you need those properties by default?\n. Np, Lets wait for the final verdict and I'm happy to merge it.\n. Looks like you've writing this directly into the compiled css, there should be a .scss file that compiles into this css file.\n. nvm, looks didn't check the other PR out yet. Should be fine now.\n. Should we remove the clearSelected method too?\n. I think return unless startDate || endDate might look cleaner but thanks for fixing this issue!\n. Boyscout\n. You can remove these.\n. I should really implement an auto-prefixer for CSS\n. Not sure what this actually does, but do you need to add \"\" here? Or does [\".jsx\", \".js\"] work too?\n. Does it make sense to have this function in getInitialState, what about moving this out of it, and just call it from the getInitialState?\n. +1 for adding tests!\n. Is this needed?\n. No problem, as long as it doesn't break the current implementations :)\n. Adding @RSO here since he did the initial Karma setup.\n. :+1: \n. Yes, as far as I know, DateUtil was introduced as a way to avoid using moment objects. But since we're still heavily using moment, I would prefer using moment across the app instead of heaving this in-between state we're in now. So yeah, I guess I agree with refactoring this, and getting rid of the DateUtil object.\n. Nice one!\n. This isn't used anymore?\n. Ah!\n. This is an interesting feature. Would you mind porting this to the main repo? \n. I'd like to make this more explicit by saying showTodayButton={true}\n. Not 100% related to this diff, but does it make sense to wrap a function in this function? \n. Not sure where this is being used but feels cleaner to just call the root function instead of wrapping the function in a wrapping local function.\n. Fair enough.\n. Correct.\n. Fixed\n. Moved this to a prop.\n. Strange, linter should catch this too.\n. Need to investigate how I can get this working with moment as defaultProp\n. These changes shouldn't be part of this PR. Focussing on generating useful output first.\n. Revert\n. Error:\n\nError with path \"src/datepicker.jsx\": Error: [{type: ImportDefaultSpecifier, start: 7, end: 13, loc: [object Object], local: [object Object], id: null, name: null}] does not match type Printable\nError: [{type: ImportDefaultSpecifier, start: 7, end: 13, loc: [object Object], local: [object Object], id: null, name: null}] does not match type Printable\n    at Type.Tp.assert (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/node_modules/ast-types/lib/types.js:56:15)\n    at genericPrintNoParens (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:219:26)\n    at genericPrint (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:164:9)\n    at printRootGenerically (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:105:15)\n    at maybeReprint (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:97:16)\n    at print (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:75:29)\n    at exports.printComments (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/comments.js:324:22)\n    at printWithComments (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:61:16)\n    at print (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:66:20)\n    at Printer.print (/Users/martijn/.nvm/versions/node/v4.2.3/lib/node_modules/react-docgen/node_modules/recast/lib/printer.js:118:21)\n. Okay with this change? We could move the moment to the calendar.jsx in a different PR. (requires too much changes to keep this clean). Is there any use case where moment as a prop is useful?\n. Bash always fun:\n```\n\u279c  react-datepicker git:(api-docs) react-docgen src/datepicker.jsx | docs/buildDocs.sh\n/Users/martijn/Development/react-datepicker/docs/generateMarkdown.sh:65\n    Object.keys(props).sort().map(function(propName) {\n           ^\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (native)\n    at generateProps (/Users/martijn/Development/react-datepicker/docs/generateMarkdown.sh:65:12)\n    at generateMarkdown (/Users/martijn/Development/react-datepicker/docs/generateMarkdown.sh:75:5)\n    at buildDocs (/Users/martijn/Development/react-datepicker/docs/buildDocs.sh:29:20)\n    at Socket. (/Users/martijn/Development/react-datepicker/docs/buildDocs.sh:22:3)\n    at emitNone (events.js:72:20)\n    at Socket.emit (events.js:166:7)\n    at endReadableNT (_stream_readable.js:905:12)\n    at doNTCallback2 (node.js:441:9)\n    at process._tickCallback (node.js:355:17)\n```\nGenerating all files works as a charm, but only generating datepicker.jsx errors.\n. Workaround, generate all files and exclude the ones you don't need :)\n. Fixed :)\n. Where does this format come from? Any documentation on what's available?\n. Should we link that from the readme or maybe the docs? (docs has an option to add summaries per proptype)\n. See https://github.com/reactjs/react-docgen/blob/master/example/components/Component.js on how to add that\n. @rafeememon Are you adding a summary to this proptype?\n. Do we need to add a proptype for this?\n. Trying to finalize the ESlint conversion. I'll add it as part of cleaning up all lint errors.\n. Tried to use the \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"] config but didn't get it working. This rules below are copied over from our own app and can be modified if we want something different.\n. Works at this moment. We can relax the settings at any time :)\n. Not sure what we discussed here but I thought we were going with a top level react-datepicker-input class first. In that case, we should fix the jsx instead.\n. My bad, probably missed those.\n. Same as first comment.\n. This isn't used anymore?\n. :+1: \n. Where are we using this now in the examples? Shouldn't we pass this into one of the examples?\n. No I thought with removing the className from the from the input field wouldn't render the input with the correct class anymore. We should apply this somewhere in an example right?\n. Looks like this isn't working:\nnpm ERR! peerinvalid The package react@0.14.7 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer react-dom@0.14.7 wants react@^0.14.7\n. /*eslint-disable */\nconst { date, locale, minDate, maxDate, excludeDates, includeDates, filterDate, dateFormat, onChangeDate, ...rest } = this.props\n/*eslint-enable */\n. This should fix the build. We can revisit this once ES Lint has a better solution for this.\n. That's even better :)\nOn Fri, Jul 8, 2016 at 6:48 PM Rafee Memon notifications@github.com wrote:\n\nIn src/date_input.jsx\nhttps://github.com/Hacker0x01/react-datepicker/pull/522#discussion_r70104609\n:\n\n@@ -83,10 +83,11 @@ var DateInput = React.createClass({\n   },\nrender () {\n-    const { date, locale, minDate, maxDate, excludeDates, includeDates, filterDate, dateFormat, onChangeDate, ...rest } = this.props\n\nI'd prefer to be much more explicit about what is being disabled and\napplying it to the line in question rather than a block, just to prevent\nactual badness from sneaking in. i.e.\n... // eslint-disable-line no-unused-vars\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/522/files/34eafed9c5f203664caa992fa30c2d1a754fe12f#r70104609,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABWNKK3U5JjS75BVbCcWycBzkv8cKJWpks5qTn9dgaJpZM4JIJQx\n.\n. .find is a nice method.\n. .prop is fancy too\n. We could prefix the numbers with the month if that makes sense?\nOn Tue, Jul 19, 2016 at 8:48 AM kaylieEB notifications@github.com wrote:\nIn src/day.jsx\nhttps://github.com/Hacker0x01/react-datepicker/pull/527#discussion_r71280276\n:\n\n@@ -66,8 +66,12 @@ var Day = React.createClass({\nrender () {\n     return (\n-      \n-        {this.props.day.date()}\n-      <div\n-          className={this.getClassNames()}\n-          onClick={this.handleClick}\n-          aria-label={day-${this.props.day.date()}}\n\nThanks for asking! I actually originally thought it should be a label\nassociated with a unique ID, but realized that there would be duplicates so\nwent with aria-label instead, which provides more of a description. On\nthe other hand, the roles are for semantic purposes, and elements with\noption roles are required to be within a listbox role to mark them as a\ngroup of available choices.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/527/files/9bd3b3acd2b41d9be1bbc2e9badd1e6229372eb3#r71280276,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWNKE99UXeiMZnBxMmK7vCRktMH-94Wks5qXHMlgaJpZM4JOV7b\n.\n. Any reason why we should make this optional? UI wise, I think this should be scrollable by default and there's no need for toggling this currently. @rafeememon thoughts?\n. This isn't needed. Docs are auto generated with every new release. \n. I guess ev is the event here? Would you mind changing that to event?\n. You can ignore this, this document will be auto generated on every release.\n. What about something more descriptive, like: monthsShown. Not the best naming but open for suggestions.\n. Same here.\n. And here.\n. This rule is deprecated\n. This rule is deprecated.\n. This linters are now enabled by setting \"ecmaVersion\": 6,\n. Need to enable this manually since this isn't part of the ES6 standard.\n. TDD :). Would disabledKeyboardNavigation be better? Or do I miss something?. You can remove this, docs will be automatically updated on every release.. Maybe add some tests to cover your change?. Just curious, why is adding cross-env needed here?. Can you please run yarn so this package is added to the lock file as well?. I guess this line shouldn't be changed?. You can remove this submissions. This will be autogenerated when releasing a new version.. Do we need this change?. Why's this changed?. This change isn't needed.. Might be good to check if there's a # displayed if there's no weeklabel prop is passed.. Can you please exclude changes to this file from the PR? This will be automatically updated when I'm going to run a new release.. Can you please exclude changes to this file from the PR? This will be automatically updated when I'm going to run a new release.. Can you please exclude changes to this file from the PR? This will be automatically updated when I'm going to run a new release.. Problem is that we need the .js and .css files in the gh-pages branch for the docs. It seems pretty hard to ignore something in one branch but have it checked in into the other branch. I read something about it here: https://stackoverflow.com/questions/1836742/using-git-how-do-i-ignore-a-file-in-one-branch-but-have-it-committed-in-another but haven't found the silver bullet yet. Ideas are welcome!\n\nWe can't ignore the .md files since those are served in the docs folder in the master branch.. Yeah seems an artifact of recent changes. We don't use Tether anymore.. Auto generated file, should be removed from this PR.. Please remove the entire file. This isn't used.. Feel free to update the example and submit a PR. Maybe say \"Time\" here?. Maybe say \"Time\" here?. So should we remove the prepublish command and move to prepare completely? . That's a good one. I actually tried upgrading a while ago but got stuck on a error I couldn't explain. See #735.. Isn't this if always true when there's an event available?. Is this method called externally? How's this being used in this component?. Please revert this. Looks like this is based on an older branch?. I think we should change the m variable to a more descriptive name. Any suggestions?. If you want to continue with adding a text to the button, I'd recommend you let the user configure the text. Also, adding some tests would be appreciated :-). This change seems not intentional . Looks like both are the same now. I'm fine with this. . This seems like an extra comma.. ",
    "hahahana": "Have you guys thought anymore about this? It's especially confusing given react-date-picker is something different on React Components. \n. I took a stab at this in my repo. It depends on my other PR (#72), so I haven't submitted it here yet. \n. Take a look at my second commit, I pulled in a method that I was saving in another PR, where it proved to really be necessary. I added a safeDateFormat method too, does that make it feel a bit less implicit?\nWhat do you think? I personally can't think of anything else to do at this point.\nI'll take a stab at writing some tests in the meantime.\n. I rebased\n. Sorry, I don't have time right now to set up any tests.\n. I find this really confusing. I pretty much expect not current month days to look 'disabled'. It is clear that you can click on them because when you hover over a disabled date it shows that it is selectable.\nFor example, March is a huge month, and now it just looks like a blanket of dates:\n\nI personally find the old version much easier to read:\n\n\nSee the standard in datepickers: http://www.eyecon.ro/bootstrap-datepicker/\n\nExample in the wild: \nhttp://www.kayak.com/\n\n. I'm not sure what you mean, you were still able to click on the date if it wasn't in the featured month. I think that's pretty standard and expected behavior.\n. It's probably just my build setup? I haven't really been checking the output file. Can you rerun it on your machine? \n. I was able to get this to work without using the range library, as long as you are using moment 2.9.0. \ninRange = day._date.isBetween(startDate, endDate);\n. ",
    "michiel3": ":+1: \n. > IE test is still needed.\nI can confirm that this behaves as expected in IE. Cool!\n. White space boya?\n. ",
    "jjoos": "Looks good, some questions inline. How do I run these tests locally, could you add that to the readme?\n. Let's merge it back after that!\n. Tested and it works, let's merge it back.\n. What's that doing in this pull?\n. Why do we need this?\n. So we're doing a sleep here, are these ms?\nIs he polling or does he always wait for the whole timeout?\n. ",
    "meg2208": "@RSO no problem! This should be ready to merge.\n. I will try to dig in as soon as I have a chance. Probably within the next 5 days. This is a valid concern and a nice feature of the plugin. After a quick glance at the code, I think we should be able to re-parse out the year/month/day based on the keydown event target and retain the current functionality...since the date format string is available as a prop. I think what I just described is pretty much #2. Anyways, I think I would have a go at that before resorting to removing some of the value-add functionality and implementing #1.\nThanks for the input!\n. ",
    "mattdell": "I'm aslo having this issue. Would be great to be able to use it this way.\n. ",
    "MandarinConLaBarba": "I've submitted a PR for this: https://github.com/Hacker0x01/react-datepicker/pull/81\n. ref #47 \n. Hmm, perhaps you can use browserify-shim in the projects that want moment and react as global deps? https://github.com/thlorenz/browserify-shim/wiki/browserify-shim-recipes#three-as-global\n. Sweet :)\nRe tether, I think an oversight on my end. I think it should be removed from globals if it's a dep for this plugin, and instead use require('tether') where applicable. I can do that later if you want\n. You mean react-datepicker.js? I thought it was already in the source tree. I will have to test this out w/ webpack, I've never used that before.\n. Sweet, very glad to help out.\n. ",
    "maxweber": "Oh I didn't see that :smile: Ok I close this pull request and wait for the other one.\n. Ok cool. I've removed the arrow-up/arrow-down functionality from date_input.js (but not the corresponding helper stuff in DateUtil yet).\n. @martijnrusschen thanks, I wasn't aware of React's getDefaultProp. Change is done in 22eb8323e95d463952c009e92aee04add54e8ea2\n. Sorry, I compiled it, but I forgot to include it in the commit. Added in 564d11e\n. ",
    "azizijunaid": "for past date disbable\nconst today = new Date();\n,. ",
    "sabinbogati1": "Did anyone solved it??\nI am also trying to disable the past days.... . ",
    "jbrumwell": "I still had some work I needed to do on. Can you elaborate on the use cases you need to support?\n. Yeah should be fairly easy to achieve, I'll take a look this weekend if I get time\n. This will just give it an option to be used in both controlled and uncontrolled. Our main requirement was to be able to get the value out of the datepicker and there was no link to the date input.\n. Thanks Remon for your great component :+1:\n. :+1: just had this need as well\n. ",
    "lapponiandevil": "We're getting the error:\nReferenceError: React is not defined\nhttp://localhost:8080/js/app.bundle.js\nLine 36348\nWith webpack and npm, and no bower and no browserify. It also seems to stem from the same problem, that React is an assumed global.\nDoes this PR solve that problem?\nAlso, it seems this PR adds react.datepicker.js as a file on its own, is that intended?\n. \nyes, exactly =)\nI'm having trouble resolving tether now too.\n. ",
    "binarykitchen": "i cannot remember nor reproduce. because your comment comes in five months late after reported.\n. ",
    "natlownes": "I usually do a npm install && npm test when I'm first checking out a project.  Definitely a take-it-or-leave-it pull request - just something I noticed.  I won't cry a billion tears if you don't care.  Thanks!\n. Awesome, my pleasure!  And yeah, the fact that those npm scripts can be written as if ./node_modules/.bin is in already in your path is very helpful; no more having to have to follow a list of instructions to get a project's tests running or install anything globally.\nre:  grunt, gulp:  I used grunt once and thought that writing a Makefile was way easier.  I think gulp is easier to deal with; it's all mostly just something -> some number of transforms -> some destination, which is easy to understand and pretty easy to debug.  If you want, you could drop everything, define each build step as npm scripts and have an npm run build or whatever that runs them all in order.  \nre:  further input on your project:  something I wanted to do in a project of mine was to declare this project as an npm dependency, require it in my nonsense code and use it as part of my usual build process.  I added it as a dependency to package.json just fine and blindly tried requiring a couple different files; the react-datepicker.js in the root and requiring react-datepicker/src/datepicker directly and both failed because of JSX.  I think the good thing to do would be to have a build step that does the JSX -> Javascript business and then for you to publish that to npm.  I was going to do that anyway, so I'll open a pull request for that if you'd like.\nAnd hey:  thank you so much for writing tests in this project!  I think this is the only React date-thing I could find that both has some tests and doesn't require jQuery.\n. ",
    "iam4x": "@RSO You should publish a builded file without JSX synthax in it and minified for NPM packages. This will allow webpack/browserify users work with react-datepicker with npm install react-datepicker\nI'll open a PR.\n. @mikha @jaseemabid \nTry npm install --save react-datepicker@iam4x/react-datepicker#fix-npm-use-webpack and use it this way:\nvar DatePicker = require('react-datepicker);\n// or ES6 style\nimport DatePicker from 'react-datepicker'\nCan I have feedback? This shouldn't run server side yet, because of Tether dep.\n. @oliveiraethales You should have https://github.com/webpack/style-loader with webpack to require css files, or just do it as normal in the html:\n<link rel='stylesheets' href='dist/react-datepicker.css' />\n. When the PR #89 is merged, everything should be fine with $ npm install react-datepicker\n. I've tried to have a same build for browser and node with browserify, couldn't achieve it. Mainly because of this:\nWith webpack, you can define externals namespaces for every use (amd, commonjs & browser):\n{\n      'react/addons': {\n        root: 'React',\n        commonjs2: 'react',\n        commonjs: 'react',\n        amd: 'react'\n      }\n    },\n    {\n      'moment': {\n        root: 'moment',\n        commonjs2: 'moment',\n        commonjs: 'moment',\n        amd: 'moment'\n      }\n    },\n    {\n      'react-onclickoutside': {\n          root: 'OnClickOutside',\n          commonjs2: 'react-onclickoutside',\n          commonjs: 'react-onclickoutside',\n          amd: 'react-onclickoutside'\n      }\n    }\nWith browserify and browserify-shim it wasn't enough, since react/addons and react-onclickoutside have different namespaces depending on environment. Actual:\n\"browserify-shim\": {\n    \"react/addons\": \"global:React\",\n    \"moment\": \"global:moment\",\n    \"react-onclickoutside\": \"global:OnClickOutside\"\n  },\nIf you find something for browserify, I'm happy to give it another shot but I lost almost a day wrapping my head around this issue :)\n. Sure,\nFirst you can merge https://github.com/Hacker0x01/react-datepicker/pull/86 and https://github.com/Hacker0x01/react-datepicker/pull/87 which are included into my PR, I needed them.\nThen I will rebase and try to breakdown things.\n. I'll have some time tomorrow to review and rebase my branch :+1: \n. #109 fixes it\n. I may have a simple fix in head without dropping Tether for now, I need it too.\n. It's good for me!\n. @martijnrusschen This is correct, I've checked it (I need it for my project too)\nLook at the end of files changed, he just adds this.props.className if it has one.\n. ",
    "jaseemabid": "The version installed with npm in unusable at the moment due to this issue \n. ",
    "oliveiraethales": "Also having this issue, trying @iam4x solution now (:\n. Some progress :D Thanks @iam4x! But the positioning is still bad ): And there's a JS error when I click on any calendar day. Also, is it 'normal' to require the datepicker css through something like \nrequire('../../../node_modules/react-datepicker/dist/react-datepicker.css') for it to work correctly? Or I should mess with something in webpack config?\n\nCheers!\n. ",
    "FoxxMD": "Thank you @iam4x ! Your solution worked for me. \n. @iam4x any idea when this can be merged?\n. We :heart: you @RSO ! We're on your time.\n. :heart: \n. ",
    "ryan1234": "No pressure, but I'd also love to see this PR merged. =)\n. Yeah I was thinking we could push out the function to clear to the user as an option prop, but I didn't want to clutter the \"interface\" to the component. Thanks for the review. =)\n. Just checking in to see if you've had a chance to think more about this PR.\n. What version of react are you using?\n. Sounds good. I'll just keep my eye out for the switch when it happens. Bummer they've introduced some breaking changes, but I suppose to be expected. =)\n. ",
    "jmfurlott": "What is the status of this merge? As well as updating the package to work with React 0.13? Can these PRs be merged?\n. ",
    "mschipperheyn": "Click on the year and get a pulldown that allows you to quickly change the year. In this case, it should also be visually clear the the year is clickable. \n. ",
    "martpie": "Any news on this ? :)\n. Hi @RSO. Yes, the above solution is what we see in almost every calendar plugins. I currently have no time for this due to a lot of work, I'll see if I can work on it this week-end. The only thing really stopping me is \"how to simulate an infinite years list ? Should a lazy loading be done ?\n. useful ref http://zippyui.com/react-date-picker/\n. same problem as @cnardi-git \n. hi ! \nAny news on this ? \n. Looks like the classic problem with react 0.14, refs node are now only accessible by this.refs.reference and not ReactDOM.findDOMNode(this.refs.reference).\nAre you open to a PR @martijnrusschen or do you think you can fix that soon ?\n. Working well. Thanks !\n. see #90 for year selection.\n. ",
    "manuelmeurer": "Yep, it works fine, have been running it with 0.13 for a couple of days now.\n. :+1: cheers!\n. ",
    "jonrh": "+1, came for demo but not working\n. ",
    "vegetableman": "same issue\n. \n@martijnrusschen  Did a hard refresh, still the same result for the above url (http://cdn.rawgit.com/Hacker0x01/react-datepicker/master/example/index.html) , although, the demo works fine locally.\n. ",
    "robbinjanssen": "I'm not able to create a branch/pull request, so here are the fixes I applied to achieve this.\nIn util/date.js add:\njs\nDateUtil.prototype.isBetween = function(begin, end) {\n  return this._date.isBetween(begin._date, end._date, 'day');\n};\nin calendar.jsx at line 87 add:\njs\nif (minDate._date !== null && maxDate._date !== null) {\n  disabled = !(minDate.isBefore(maxDate) ? day.isBetween(minDate, maxDate) : !day.isBetween(maxDate, minDate));\n}\n. I think it does. I can test it tonight in my own fork and let you know, but im quite sure it is the same.\nThanks for picking this up!\nEdit: to clarify, my goal is to achieve the following datepickers:\nBetween 2015-04-05 and 2015-04-10:\n\nAnd not between 2015-04-05 and 2015-04-10:\n\n. ",
    "rafeememon": "I'm not this should be implemented, in the interest of keeping a simple API.  This is possible with either excludeDates or filterDate.\n. @martijnrusschen, I don't think it was addressed actually.  Will make a separate fix\n. Oops, yeah I think I misread this bug the first time around.\n. @mqklin does the readOnly prop work for your use case?\n. Closing this for the sake of getting to #inboxzero, as it looks like the issues mentioned here are addressed\n. I think this should be changed, but I think we should wait to break this right before the v1.0 release.  The reasoning behind this is that the DatePicker depends on moment, but it's extremely likely that consumers will be depending on moment independently in their app code (at the very least to use the DatePicker API), so it should use the same physical dependency to line up the versions.\n. Probably fixed by #277 \n. Yup, just verified\n. I don't think this can be implemented as stated -- excluded values are necessarily finite, so going far into the past/future can get to valid dates.  I can see this working with includeDates, minDate, and maxDate instead.\n. Closing in favor of #413 \n. Fixed by #277 \n. I don't think this is an issue anymore now that DateUtil has been removed.\n. I'm able to reproduce something with the picker at the bottom of the examples page.  Not sure if this is what @unkw had in mind:\n\n. This can probably be closed in favor of #247\n. Probably the same issue as #160 \n. Most likely fixed by #277 \n. We might be able to add readonly to the input, as suggested here: http://stackoverflow.com/questions/7610758/prevent-iphone-default-keyboard-when-focusing-an-input  But this seems likely to break those who are using manual input.\n. Turns out we already have the (undocumented) readOnly property, which should help in this situation.\n. Maybe I closed this too soon =P\n@uniphil, my thought process was that if a user wants to hide virtual keyboard (for whatever reason) they probably don't care about the user typing in a date, so readOnly would be safe.\nIf you're aiming to allow keyboard input when viewed on a desktop but still want to hide the virtual keyboard on mobile, I guess you could toggle the readOnly prop according to the browser/OS/etc.  However I think this might fall beyond the scope of this library since it's so specific, but is still possible to implement with a browser-detection library and setting the prop accordingly.\nAm I missing anything here?\n. Agreed, we can settle this once and for all if someone with experience could take a look.  Thanks for offering to help, let us know what you find out!\n. Closing for lack of activity and being sufficiently addressed for now\n. @pablolmiranda, I'm not sure what there is to fix; passing anything that is neither a moment object nor null is not a supported API.\n. @pablolmiranda taking this discussion to #627\n. Agreed -- this is a breaking change\n. Probably the easiest thing to do would be to have two different callbacks with different logic, maybe called handleStartDateChange and handleEndDateChange.\n. I'm not sure this is something we can do.  The date input allows an arbitrary date format to be specified, which could include slashes/dashes, month names, weekdays, etc.\n. I have high hopes that this might also fix #160\n. I'll be traveling over the next week or so, but I can take a crack at it after that!\n. Found some time to dig into this on the train, and came away feeling that this will be extremely fragile.  Supporting all of locale, weekdays, and weekStart is a fight against moment.js when we try not to modify global state.  I think there are three options here:\n1) Fix this up and accept that we're still modifying global state, even though we're trying to avoid that.\n2) Wait for a feature like https://github.com/moment/moment/pull/2774, which would effectively let us subclass the global locale with the modifications that we want.\n3) Remove the locale, weekdays, and weekStart options entirely, and defer to the global moment.js handling of these.  I figure users will be localizing their moment configurations anyway, but this removes the ability to have picker-specific locale configuration.  Then again, picker-specific locales seem a bit contrived to me.\n. Awesome, thanks for the CR!\n. Done!  There's definitely a lot of room for tests to be written on the top-level component\n. LGTM :+1:\n. Hey @wzup, thanks for reporting this.  It appears to be an issue with the date inRange calculation.  Making a fix now.\n. Also working on an improvement to the example\n. Good idea, pushing a fix now\n. Got this working -- needed to add coverage instrumentation to the webpack test build:\n=============================== Coverage summary ===============================\nStatements   : 94.51% ( 310/328 ), 1 ignored\nBranches     : 94.44% ( 119/126 ), 7 ignored\nFunctions    : 88.98% ( 105/118 )\nLines        : 92.83% ( 220/237 )\n================================================================================\nI've never worked with a JS code coverage tool before so I'm not sure what to make out the output, but it's a start!\n. Yup it is!\n. Hey @lucygilbert, thanks for the quick updates here!  I'm having a problem with your latest change set where the picker quickly appears and disappears when I click to focus (using Chrome).  Could you take a look at that?\n. Awesome, it's working on my end now.  Thanks!\nRe: forceUpdate; I'm having a little trouble seeing why the calls are necessary -- I naively tried commenting them out and I can't seem to break the picker.  Can you provide a test case or a workflow that breaks if the calls are removed?\n. That makes sense.  Thanks for tracking that down, and thanks for the work you put in here!  LGTM :+1: \n. We would depend on the consumer to customize the moment locale themselves -- it would actually be very similar to what happens in the initializeMomentLocale method that is removed in this PR.  To have the same effect they would need to do this (where locale, weekStart, and weekdays are the old properties):\n```\nimport moment from 'moment';\n...\nmoment.locale(locale, {\n  week: {\n    dow: weekStart\n  },\n  weekdaysMin: weekdays\n});\n```\nThis would also open up the ability to customize other things, like month names.  Once we have the complete story figured out I'll update the docs and examples with our suggestions.\nI was thinking this could be part of a v1.0 milestone as well.  I'll try to think of other things that should be included in the major release.\n. I think in @JeffGuKang's case, he was being limited by the default props, specifically locale: \"en\" and weekdays: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"], which is why he is forced to pass in values to override them.  Ideally the datepicker should be able to work easily when the global moment locale is set, e.g. with require('moment/locale/ko').\n. Found some more extreme sadness re: locales\n- Setting locales locally on moment objects only allows setting the language; options like weekdays and week start are not available http://momentjs.com/docs/#/i18n/instance-locale/\n- If the weekdays and week start options are set globally, the change propagates to the configuration of the entire locale, like en.  It must be the case that locale info is stored in one central place in moment.js and is not copied when configured manually\nrafee = moment().locale('en')\nrafee.localeData().firstDayOfWeek() // 0\nrafee.clone().startOf('week').toISOString() // 2016-02-07T00:00:00.000Z\nmoment.locale('en', {week:{dow:4}})\nrafee.localeData().firstDayOfWeek() // 4\nrafee.clone().startOf('week').toISOString() // 2016-02-11T00:00:00.000Z\nMainly because of the second point, I think the weekdays and weekStart options are _unsupportable_ if we don't want to modify the global state.  However, because of the first point, we can still support the locale prop, and defer to the global config if it's not set (by removing the default locale prop).\n. Updated my PR to reflect my new vision.  Thoughts/comments welcome from everyone!\n. After sleeping on it I've become increasingly convinced that this is the right way to go.  I've updated the readme and examples with the new approach. @martijnrusschen, @RSO, could you take another look at this?\n. Let's do it -- these fixes are a long time coming\n. Let's handle this in #377\n. This might be fixed with v0.18.0, can you try it with that version?\nRe: #287 \n. @martijnrusschen, @RSO, I've also finished a refactor of the calendar display components that removes all uses of DateUtil.  It builds on this PR but I'll wait to push that for the sake of keeping the diff small.\nHappy holidays!\n. I've been thinking about how this could work by having open/closed state managed by a prop rather than state.  Then the consumer has complete control over when it is open.  I'll experiment around with this.\n. Agreed that an open prop is the way to go.  See my comment on https://github.com/Hacker0x01/react-datepicker/pull/531#issuecomment-234735758 for potential complications with the implementation\n. @wwwebman, contributions to implement this are welcome. Hey @psibi, can you give more details here?\n. Hey @smelnikov, we added a filterDate property to the date picker to handle this use case.  Let us know if that works for you.\n. @RSO, please take a look when you get a chance, thanks!\n. Took a crack at writing tests, but it's going to be annoying... I started with the approach recommended on stack overflow, but it turns out an error isn't thrown when setState is called in an unmounted component -- only a warning message is printed =(\n. Not required after #319\n. Hey @RSO, thanks for taking a look.\n- I suppose we do lose test coverage, but it is mostly just from removing the moment wrapper methods and their tests.  Now that this uses moment directly we don't need to re-test moment.  However, more tests can (and should) be added to test the things that used these.\n- Agreed that it's easy to miss a .clone call, and unfortunately I don't have a good answer other than being hypervigilant in PRs =(  Maybe @martijnrusschen has thoughts here\n. A linting rule is an interesting idea.  I started putting a rule together here: https://github.com/rafeememon/jscs-moment-immutability  I'll put the finishing touches on it and integrate it here tomorrow.\n. Got the rule working.  I'll make a separate PR to add it in.\n. Hey @mike-engel, glad you would find this useful.  I think the way this would work is we would publish a lib directory which is src cross-compiled with babel.  I'd like to get the API in a slightly more usable state before we do this though.\n. Now publishing compiled class files with #404, but not sure the API is in its final state where we can declare this finished yet.\n. (trying to close out as many tickets as possible)\n@martijnrusschen, I think it's best if we concentrate on making our one theme look as best as possible rather than supporting multiple styles.  Consumers are free to add to our CSS as they see fit.  I'll close this out unless you disagree.\n. Aha, found the thread: #78  It looks like the main concern was that dates not in the current month looked non-selectable because they had the same styling as disabled dates.  I'm not sure what the proper styling should be but a good first step is implementing the --outside-month class.\n. We can probably use something like Coveralls here.  Possibly relevant docs:\n- https://coveralls.zendesk.com/hc/en-us/articles/201769715-Javascript-Node\n- http://mluby.azurewebsites.net/coveralls-io-w-node-travis-ci/\nEDIT: Just saw your comment, looks like that will work too!\n. Unfortunately I don't have experience with TypeScript either, and I agree that it may hinder the approachability of the code base.  I think this would be a huge lift for not a lot of gain.\n@aspirisen, can you give an example of a case where a typing file would be valuable to a project consuming this library?  If it would be valuable, is there a path for generating a typing file from ES6?\n. Talked to @martijnrusschen about this; given that none of us have TypeScript experience I don't think this is something we can do.  Sorry!\n. IMO, this is still an anti-pattern because this effectively implements isMounted and only avoids using React's implementation.  Agreed with @RSO that we should cancel the callbacks to fix the places where setState might be called, as the blog post suggests.\n. What code tool are you using?  Can you add import 'react-datepicker/dist/react-datepicker.css'; as the docs suggest to bring in the stylesheet (if it's webpack/browserify based)?\n. @ir-fuel, it's in the \"Installation\" example in the readme =)\n. Thanks for the report.  Looks like this applies to any two pickers on the example page.\n. This is a limitation of react-onclickoutside, namely the ignore-react-onclickoutside class.  When clicking on another picker, the click doesn't trigger the first picker to close because of the class.\n. Should be fixed by #319 \n. It looks like React libraries generally have poor support for bower -- in fact Facebook doesn't publish a bower library for React (there's a shim repository, yuck), and popular React libraries don't publish to bower (redux, react-router).  I suspect not many people are using the datepicker bower library since we just discovered this now.\n. Stumbled upon this today: the approach taken by Elemental UI may work, specifically their approach to using a bower publishing script.\n. We're removing support for bower for the time being.  Please re-open this if you'd like to see us bring it back!\n. ```\nRunning \"jscs:files\" (jscs) task\nmomentImmutability: Clone required for moment.js operations at src/day.jsx :\n    46 |    if (!startDate || !endDate) return false;\n    47 |\n    48 |    const before = startOfDay(startDate).subtract(1, \"seconds\");\n-------------------------------------------------^\n    49 |    const after = startOfDay(endDate).add(1, \"seconds\");\n    50 |    return startOfDay(day).isBetween(before, after);\nmomentImmutability: Clone required for moment.js operations at src/day.jsx :\n    47 |\n    48 |    const before = startOfDay(startDate).subtract(1, \"seconds\");\n    49 |    const after = startOfDay(endDate).add(1, \"seconds\");\n----------------------------------------------^\n    50 |    return startOfDay(day).isBetween(before, after);\n    51 |  },\n\n\n2 code style errors found!\n```\n\n\nIt worked!  It turns out this case is actually okay because startOfDay returns a cloned object, but it's probably better to make it more explicit anyway.\n. Possibly related to #273 \n. Should be fixed by #319 \n. Aha, forgot I had a fix for the other test in my git stash =P\n. @martijnrusschen, the codecov CI results always seem to get stuck in pending, do you know what might be going on?\n. Hooray, codecov worked now!\n. Not required anymore after #319\n. @aspirisen, heads up that these changes are going in\n. You'll need to bind the context of your component to the function passed to the onChange prop.  Try:\n<DatePicker\n  dateFormat=\"YYYY/MM/DD\"\n  selected={data.get('startDate')}\n  onChange={this.handleChangeDate.bind(this)}\n  placeholderText=\"First Date\"/>\n. Hey @silvenon, we added the filterDate prop in #307, which will be available in the next release.\n. Hey @TheSisb, there's no hidden option for this but it sounds like a good request.  This could be an initialDate prop that, if specified, will set the calendar's view to that date on first load.\n. @PetarIvancevic's solution sets the selected date, but @TheSisb was looking for a way without doing that.\nEDIT: Oops, misread @uniphil's code at first.  Currently there is only a very hacky way to do this involving following a refs chain and setting state from an external call.\n. Fixed in #486 \n. Abandoned\n. @DavidTheSimon, @osala-netquest, can you post your code that shows this problem?  Unfortunately we can't help you otherwise.\n. I think this is the intended use and in fact not a workaround.  We made a change recently where we no longer store the selected date as internal state, and instead leave it up to the user to store the selected date as the \"single source of truth.\"  Storing the date twice could lead to inconsistencies between what is shown and what the wrapper components think is shown, so we now defer this entirely to the user.\n. The docs could definitely be better re: props, but I should point out that the readme and every example show the datepicker used this way, e.g. https://github.com/Hacker0x01/react-datepicker/blob/master/docs/src/examples/clear_input.jsx\n. Yeah =( It might be good if we can contribute back!\n. This was fixed with #319 (all async operations where this can happen have been removed), but I don't think it's been released yet.  @martijnrusschen should we cut a release?\n. Ah, darn.  Looks like the tether declaration needs to be removed (rather than replaced with react-tether as it looks like react-tether doesn't export a global).  I think this is safe because classnames appears to work without an issue.\n. Per #335, this should address all of the issues here.\n. Haha yeah, realized that as soon as I pushed.  Updating the docs as well\n. Might be better to have this in a /scripts directory\n. Probably a z-index issue; try finding the datepicker__tether-element at the end of the DOM when you click the picker, and increasing its z-index until it's visible.\n. Woot!\n. Hey @te-chris, a couple questions:\n- Are you installing the datepicker via npm or bower?\n- What does your dependency tree under react-datepicker look like, i.e. are moment and react included in node_modules under react-datepicker?  Or are they only in your topmost node_modules?\n. @te-chris, right, but are they also present in node_modules under react-datepicker (i.e. node_modules/react-datepicker/node_modules)?  If they are, they'll be loaded separately because of how node resolves dependencies.  Deleting them from there should do the trick.\n. Oh, also, what versions of moment and react are you using in your project?  If they're different versions than what satisfy the datepicker's dependencies (currently react is ^0.14.0, moment is ^2.10) then the datepicker will install and load them as additional dependencies.\n. @te-chris, please look in node_modules/react-datepicker/node_modules and tell me what's there =)\n. Ah, I think npmv3 changed how dependencies are resolved.  What version of node and npm are you using?\nWhat are you observing that is telling you that react and moment are being loaded twice?\n. Just looked into bower-webpack-plugin, and it looks like it's making webpack look in bower_components for dependencies.  I'd recommended using either npm or bower for dependencies, but not both; sometimes they can interact in strange ways, and they do essentially the same thing.  If you don't explicitly need bower-webpack-plugin I'd get rid of it.\nWe officially removed bower support in #330, so we should probably stop publishing the bower_components directory anyway.\n. Hmm, are you sure you removed all references to bower in your config?  Looks like there are ways to load from bower in addition to bower-webpack-plugin, e.g. https://webpack.github.io/docs/usage-with-bower.html\n. Awesome, glad you got it working!\nAlso, completely out of curiosity, I see you also have react-date-picker in your package.json -- are there any features in that picker that you'd like to see here?\n. Looks like babel-plugin-react-constant-elements is to blame, based on the description of what it does: https://babeljs.io/docs/plugins/transform-react-constant-elements/\nThe datepicker uses refs internally, so I don't think they can be compatible.\n. Hmm, interesting.  Could you show us your entire dependency tree (without grep react), and maybe also your .babelrc?\n. Missed the update here -- glad you got this working, and hopefully this can be useful to others in the future!\n. @raptoria, is there a chance you could try this out before we merge it so we can be sure it solves your problem?  I built the branch and pasted the contents of react-datepicker.min.js here: http://hastebin.com/falidujulo.js  If you replace the contents of react-datepicker.min.js with that you should be able to try it out.  Let us know!\n. Ah yeah, I think datepicker__container got changed to datepicker__tether-element.  Here's the new stylesheet: http://hastebin.com/ciqekeyodo.css  Let us know if that works.\n. Is it possible to use moment localizations so that the dates are always in the timezone that you specify?  I'm weary of adding this to the API of the datepicker and breaking the simple contract of today being \"today.\"\n. Understood that this is not a breaking change, but in general I would prefer to not add to the API, as we need to support it.  Can you explain why this approach is better than using localization?\n. I think part of the job of software engineering is finding the right API and set of features that:\n- makes common use cases easy\n- makes advanced use cases possible\nA big advantage of using the moment.js library is that we are able to leverage its plugins, like moment-timezone, making it unnecessary to duplicate its effects.  As we move towards a 1.0 release of the datepicker we're focusing on cleaning up the API, and I'm not convinced that the today prop belongs for this use case because you can use moment-timezone.  Keep in mind that once a prop is added, we need to support it long-term.\nFor your use case I suggest that you do one of the following:\n1. Use moment-timezone.  I can think of a lot of reasons why this is probably a good idea even aside from the datepicker\n2. Override the font-weight style for datepicker__day--today so that it doesn't look different from other days, and possibly set selected to the date that you have in mind\n. You can use a library like jquery to find .datepicker__day--today elements, inspect the day, and toggle the font accordingly.\nI _strongly_ recommend using moment-timezone here.\n. @nsisodiya, understood, but this is an example of the XY Problem.  You should use moment-timezone to accomplish what you're trying to do.\n. Please also add test cases for the new prop.  Thanks!\n. Hold off on merging until discusson on #338 is resolved\n. I like this idea; here are a couple things I thought of\n- I think this should probably be exposed as a separate component, possibly DatePickerWrapper to separate logic (currently the DatePicker and the DateInput are pretty tightly coupled).  As a bonus, this could be a mixin, or as an extra bonus, an annotation??\n- Open state would need to be entirely managed by the user since\n  - we probably don't want to attach random callbacks to the child component\n  - most elements don't have focus/blur state\n. :+1: \nIt would be cool to entirely get rid of lodash as a hard dependency (probably still need it in devDependencies).  I think the only thing that needs to be figured out is one use of isEqual\n. @martijnrusschen yeah that was odd.  Taking a complete shot in the dark, but maybe it has to do with the cache settings in .travis.yml?  It's probably safe to remove that block regardless\n. Cool, I'll take a look at it when I get a chance\n. @martijnrusschen, it was a caching issue =P  Clearing out the cache on the travis website made the build work after I made the code fixes\n. Unfortunately it's not possible to change the parent element for the popover because of the tethering library we use.  The issue you're seeing is probably a z-index problem, so try increasing the z-index of .datepicker__tether-element.\n. What is the problem you are seeing?\n. @vsai, there were some issues with that prop the last time I tried to use it, but it may be fixed now (from a couple bugs I fixed over there =P)\nThis may be something we implement, but I'm still interested in hearing the exact problems aside from the z-index issue so that we can have the right reasoning for adding this to the API.\n. @vsai, could you try adding the new lines from #378 to your stylesheet, and if you're still having the issue, would you mind putting together an example app showing the problem?  I'm a little perplexed that adding the z-index didn't work for you.\n. Added the renderCalendarTo prop with #380 \n. @alex-wilmer, could you link us to the project that shows this problem (preferably a minimum-viable-project that shows this)?  This could be any number of things, but I suspect it might have to do with the webpack setup.\n. Abandoned\n. Looks like some good stuff.  As a side note, I'm not sure we should document the API of internal components, e.g. Day.  If we document it then we need to support it, and having the freedom to change it would be great.\n. @martijnrusschen, probably just DatePicker right now, but we'll add more when we start making other components as public API, like Calendar and DateInput\n. Looks like bootstrap-datepicker provides a switch called linked for this: https://bootstrap-datepicker.readthedocs.org/en/latest/options.html#todaybtn\nI don't feel strongly about it either way.  We can leave this open for now and see what other people think.\n. Let's stick with the current behavior\n. Looks like this was introduced when we upgraded react-tether to v0.3.1, which has an eagerly-evaluated document.body reference.\n. @strawbrary, can you verify that changing the portion of code referenced in the stacktrace fixes your problem?\nAround react-datepicker.min.js:6:16300:\n...renderElementTo:document.body...\nChange to:\n...renderElementTo: typeof document !== 'undefined' && document.body...\n. Thanks -- going to make a PR into react-tether\n. Should be fixed in v0.23.1\n. @martijnrusschen, it looks like v0.23.1 didn't publish correctly, can you try deleting node_modules, re-installing and republishing v0.23.2?\n. Woot!\n. You can adjust the dropdown placement with the popoverTargetOffset prop, described here: https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\n. @ConAntonakos, please give us the steps to reproduce this issue\n. @ConAntonakos, can you show us the code that is using the datepicker?\n. I'm able to run the code you posted in one of my apps without any issues.  Any other info you can provide would be great.  Ideally, if you can create a sample project that has the minimum code needed to repro this, we can narrow this down quickly.\n. Just thought of something -- are your scripts being loaded in head or body?  If they're in head and running immediately, the document won't be available yet and the appendChild call will fail.\n. Not sure what is typically advised for react apps -- it would work if you render the app only after document.ready, but I find it easier just to include the script right before the closing body tag.\n. @karydja, can you give us more information about your setup, specifically whether your script is running in <head> or <body>?  I think this might be because body doesn't exist on document until it's been outputted, as indicated on this stackoverflow question.  If it's in head can you try moving it to body?\n. I think I puzzled this out -- submitted a fix at souporserious/react-tether#7.  In the meantime, version 0.21 of the datepicker should be safe to use.\n. Should be fixed in v0.23.1\nEDIT: Should actually be fixed in v0.23.2\n. :+1: \n. Thanks for the report.  I reported this issue at souporserious/react-tether#8\n. Added a failing unit test which will pass when the react-tether bug is fixed.\n. @andrewBalekha, we merged a temporary fix for the problem and published v0.23, please give that a try.\n(Note the breaking change re: localization if that applies to you, more info in the readme)\n. Made a proper fix for this and released v0.23.1\n. @vl-lapikov make sure react-tether is bumped to v0.3.3, maybe try clearing out node_modules and re-installing\n. @vl-lapikov, does it work outside of a react-bootstrap modal?  I'm not familiar with the setup of react-bootstrap or how the modal might make things different\n. An example would be great here, ideally it's one of the following\n- Example code showing the problem\n- A simple project that we can run showing the problem\n- A failing unit test\n. I think this might be an issue with how v0.23.1 was published; there's a similar confusing problem on #352 \ncc @martijnrusschen \n. :+1: \n. Yeah, @taxigy was using 0.23.1.  @TonyVeigel confirmed that 0.23.2 works\n. @martijnrusschen could you cut a patch release that includes this fix?\n. Actually it needs to be a real release because of the moment refactor\n. :+1: \n. Figured out the problem.  Submitted a fix to souporserious/react-tether#12\n. @martijnrusschen, this should fix everyone because the new version of react-tether should be picked up, but it would probably be a good idea to make a patch release anyway\n. New version of react-tether released, probably don't need this\n. Thanks for the report!  Confirmed, I got the datepicker into a couple weird states\n\n\n. @mb21, see #470\n. @hakonner, we're open to contributions to fix this\n. Closing per discussion on #363 \n. I'm not sure the typings should live in this repository, as none of the maintainers have experience with TypeScript, and I don't think we'd be able to maintain it properly. (Re #299)\nWhat about making a PR into DefinitelyTyped?\n. My concern is that if it lives here, we need to maintain and support it, and unfortunately I don't think we can.  =P  DefinitelyTyped is far and away my preferred way to go here, but maybe you could also get a repository for typings set up, maybe called react-datepicker-typings?  We could also consider linking to the repository from the readme.\n. Great! :+1: Let us know if you are able to get this working, I'll leave this issue open to track it\n. Don't think this is something we'll do; closing due to inactivity\n. @Atenna, what version are you upgrading from?  We recently made a change where you will need to maintain the selected state and pass it into the DatePicker as the selected prop (see the readme for an example of this).  Could you show us your code?\n. I think the problem is that you're storing the date in startDate, but the state you're passing to the DatePicker is date.  If you change them to match I think it will work!\n. No problem, glad it was something simple =P\n. Hey @aouaki, merging this now\n. Nowadays in my new projects I use standard, which is powered by ESLint but has an opinionated set of options.  It's definitely cool that ESLint has so many options, but so much optionality often leads to insignificant debates about style, and you end up with an extremely custom setup.  This makes the project harder to maintain and hinders approachability.  With standard we wouldn't need to make any decisions and instead can use a configuration used by a large portion of the JS community.\nI'm not sure that JSCS gives us anything more than standard/ESLint, but in the interest of simplifying the build I'd be in favor of removing it.\n. Hey @martijnrusschen, what's the reasoning for changing the name of the prop?  I think className is the generally accepted prop name for this type of thing.\n. Fair point -- personally my first thought is that it refers to the DateInput field since it's the first thing visible and is the only thing that's consistently visible.  Currently it looks like we don't have a way of passing a class name to the calendar, but I could imagine that prop being called calendarClassName or similar.\n. Hey @martijnrusschen, not sure this should have been merged -- I feel pretty strongly that className is the right prop name here and is a needless API break, and we should use calendarClassName for the calendar class.  Let me know what you think.\n. Hey @fmadden, how are you hiding the datepicker input?  Depending on how you're doing that, the browser may not actually be giving focus to the input because it's not in view, and there won't be any keypress events to listen to.  What is the reason for needing access to the click event?  There may be another way to approach the problem.\n. > I am hiding the element using visibility: hidden\nI'm not positive, but I think browsers don't actually give focus to elements that have visibility: hidden, which is probably why the escape key isn't doing anything.\n\nwe are using this component in an application that needs to send some information to the server as soon as the input element is clicked on, and then once again when the calendar popup is closed\n\nCan you use the onFocus and onBlur props for this instead?\n\nI need to know which element on the screen received the date change. This is because we have several date pickers on the screen, each with unique information assigned to them by the server.\n\nWithout knowing much about your setup it sounds like this can be worked around by having different callbacks for each datepicker.\n. Ah yeah, I think there were issues with the onFocus/onBlur callbacks many versions ago; the code surrounding those props has since been completely refactored.  I would highly recommend upgrading if possible because there have been numerous other bug fixes as well, and unfortunately we can't support old versions.  If you're stuck with React 0.13 maybe you can work something out with a combination of onFocus and onChange?\n. Hey @gasipari, you can use the dateFormat prop for this.  Unfortunately it looks like that prop is missing from the docs.\n. What version of the datepicker are you using?\n. Just tried this out -- _i is an internal field of moment objects that you shouldn't be using here (probably i for initial or internal); logging .toISOString() gives the correct result.\n. I'm hesitant to add something like this as we try to finalize an API for a v1.0 release because\n- This potentially encourages bad programming practice by having z-indices appear in both CSS and Javascript\n- The problem is solvable by adding a z-index to the tether element in CSS (assuming you already have a CSS solution set up, which is necessary to make the datepicker usable)\nA potential solution here is to add a default z-index to the tether element (in the datepicker stylesheet) that will be good enough for \"most\" cases, but unfortunately there can't be a value that can cover all cases.  Let me know if I'm off on anything here.\n. Looking back at the refactors it looks like this line got lost.  Maybe we should set the z-index to 2147483647 just for the sake of undoing the regression?\n. :+1:\n. Also relates to #332, #343, #353\n. Seems okay to me -- NPMv3 no longer installs peer dependencies automatically so they need to be added manually like this\n. Hey @karleberts, thanks for helping out here.  I'm wondering if there's another way to approach this without adding to the API.  You mentioned that you want to detect mouseout events on the datepicker__input-container; I think it might be reasonable to just make that the default element appended to.  What do you think?\ncc @martijnrusschen \n. @karleberts, yeah that all makes sense, thanks.  In fact, not making the default as datepicker__input-container leaves open the possibility of getting rid of the container element altogether so that the <input> is the top level element.  I've been wanting to make that refactor for a while...\n. :+1:\n. Hey @arrel, thanks for helping out here.  The API docs are generated with react-docgen so unfortunately these would be wiped out the next time they're generated.  Could you look into adding this info into the props in datepicker.jsx?\n. For posterity here is what my wrapper component looks like:\n```\nimport React from 'react'\nimport DatePicker from 'react-datepicker'\nimport moment from 'moment'\nconst DATE_FORMAT = 'MM/DD/YYYY'\nexport default class SimpleDatePicker extends React.Component {\n  static propTypes = {\n    selected: React.PropTypes.string,\n    startDate: React.PropTypes.string,\n    endDate: React.PropTypes.string,\n    minDate: React.PropTypes.string,\n    maxDate: React.PropTypes.string,\n    onChange: React.PropTypes.func.isRequired\n  };\ngetMoment (string) {\n    return string && moment(string, DATE_FORMAT)\n  }\nonChange (date) {\n    this.props.onChange(date && date.format(DATE_FORMAT))\n  }\nrender () {\n    return \n  }\n}\n``\n. Cool :+1:\n. Re: making things required; I think we should try to keep as few things required as possible.  This makes it much easier to begin using the component and then use more advanced features when applicable, but not being forced to use them.\n. Re #370, #377 \n. Addressing in #388 instead\n. Yep it is, but I think we should get the break in before we release v1.0\n. Isn't the blockdatepickerand elementcalendar, similar to how most of the components are styled now?  I think this change at least makes it more consistent with that naming convention.\n. Thinking about this a little more, the change does remove the.datepickertop-level class, but technically the calendar doesn't nest in the element -- it's appended towith the tethering library.  Also, I don't think we should limit ourselves to having a wrapperdivwith thedatepickerclass as this sets us up to have the top level element be theinputinstead.\n. 1. Definitely agree that all classes should be prefixed withdatepicker.  Theclose-iconclass is sadness that we should fix.  =P\n2. I see what you mean, but take a look at my comment right before yours.  I think it would be great to have it possible for theinputto be the top-level element to integrate with forms as seamlessly as possible.  For example, some styles in common libraries (bootstrap, elemental) expect inputs to be immediate children of certain elements, but forcing the datepicker to be wrapped in a div makes it impossible to work with this without nasty custom styling.\n. Two levels is probably the way to go (since the calendar will not nested), but we probably won't need areact-datepicker-inputclass if it's just anelement.  In fact I think we should _not_ provide styling for the` element so that it can integrate with forms as easily as possible.\n. Continuing on #391, #396\n. I think we should go for it. And yep, addressing the field styling separately in #396\n. LGTM :+1: \n. Same as #377\nSeems reasonable to add the calendarClassName prop. PRs to this effect are welcome\n. Yep and see the discussion there for why it wasn't merged\n. Yep, that's what a PR implementing this should do\n. After you've made the fixes can you squash your commits into one commit?  Thanks!\n. Thanks for the fix!\n. Removed in #412 \n. Hey @peterheesterman, thanks for contributing.  Unfortunately I don't think this is an API that we can support.  It seems like what you really want to get at is the actual text typed in by the user, which can probably be gotten at by following the chains of refs down to the input element.  I think a better approach here would be to expose the onChange event in the DateInput component, which we can probably work into the refactor of that component.\n. After some googling it looks like that error is from how we compile the demo site (appears to be the same  issue described here) but maybe also with how we compile the dist.  Re: IE9; the best way to find out is to give it a try, and we'd be happy to accept any PRs to make it compatible.\n. Thanks for digging into that @Pizdetss.  The reasoning for this is detailed on this issue (perfectly valid IMO).  In another issue, this comment describes a possible workaround, but I haven't tried it out.\n. @vguzev, unfortunately I'm skeptical of including dependencies on forks of repositories because of the risk of the forks being abandoned/falling behind and not picking up new changes, and I'd like to try to stay with the main plugin.  I'm also now skeptical of supporting IE9 for the reasons mentioned in the main plugin, and I'm not sure we can commit to supporting it long-term.  Can you try the workaround I mentioned in https://github.com/Hacker0x01/react-datepicker/issues/398#issuecomment-196706326?\n. Also, from the react-onclickoutside readme:\nNote that this mixin relies on the .classList property, which is supported by all modern browsers, but not by no longer supported browsers like IE9 or even older. For setups that need to support deprecated browsers, using a classlist-polyfill will be necessary.\nPlease try adding classlist-polyfill to your setup to get IE9 working.\n. Added a note about IE9 compatibility in #408 \n. Hey @gnawjaren, good find.  I don't think that can be a solution because maybeDate stores the text of the input regardless of whether it's a valid date, and it would wipe out the user's intermediate text.  I'm sure there's another way to do this though.\n. Fixed by #400\n. Aha, now I understand what you meant.  Yeah, don't think that case is super important as it's nice to keep render state entirely based on props\n. After you're done making the fixes could you squash into one commit?  Thanks!\n. Thanks @gnawjaren!\n. Will be fixed with #391\n. How does an input or type date behave when the browser doesn't support it?  I know the date type is a relatively new thing.\nAlso, how does the experience change if the type is date?\n. @edygar, could you elaborate on how it's a \"better experience\" for the date type? (sorry, edited after I posted and it's not in the notification email)\n. Briefly tried this out, and it looks like it currently won't work.  The native Chrome date picker and handling of the text in the input field conflicts with the DatePicker component's handlers.\n. Sorry that we can't get this fix in for you @edygar.  Maybe we should revisit this when browsers have fully fleshed out the features we'd need to use.\nI'm also wondering what that would imply for the future of this component if all browsers give a native picker for date types.  Something to keep an eye on\n. Hey @edygar -- I think we'll be exposing the type of the input as a prop rather than making date the default as we discussed here.\n. It looks like that plugin would do the trick, and judging from the readme it looks like it's possible to use it independently of the datepicker component by calling injectTapEventPlugin() in your project code.  Let us know if that doesn't work.\n. Hey @thomasduenser, glad you got it working.  Not sure a solution should be included natively in this plugin as it's a very platform-specific thing for a marginal UI improvement, and there are workarounds like the one you found.  However this could be included in a mobile-specific build, which is something I've been thinking about lately.\n. Hey @dmnd, thanks for putting this together -- this is a change I've been wanting to make for a while.  Summarizing my main feedback:\n- I think we should git-ignore the lib directory and have it built as part of the prepublish hook\n- Let's wait to make the API break (i.e. including lib instead of dist) until v1.0\nOnce those are addressed I think this should be good to go.\n. We made the decision a while ago to not include built scripts in the repo =) tl;dr they're a maintenance burden and pollute PRs and diffs (more on #303)\nFor the case you mentioned, npm runs the prepublish hook after install, which I think is for this exact use case.  Hopefully that would allow you to use fixes immediately and not wait for a merge and release.\n. Awesome -- LGTM, but I'd like @martijnrusschen to take a look before we merge\n. Right now this only adds to the files that we publish in the package, allowing access to the \"raw\" JS files without the bundled dependencies, and letting the consumer's module bundler take care of the dependencies.  For v1.0 I think we shouldn't publish our current dist build and only publish lib since module bundlers are so standard now.\n. Thanks for the work here @dmnd!\n. Use the classlist-polyfill for this instead, as mentioned in #398 \n. It looks like these were a step towards the BEM classname model we discussed.  This PR fixes the breaks; let's talk about getting BEM working soon though.\n. What kind of keyboard support do you have in mind here?\n. Closed because of inactivity\n. Hey @strawbrary, good find.  I think this actually brings up the bigger question of what disabled selected dates should look like in general.  My first instinct is to get rid of the blue background altogether for those dates, but I'm not sure.  What do you think?\n. Ah cool, that makes sense.  I'm not sure what the right style adjustment to make is, but you can try adding CSS for .react-datepicker__day--disabled.react-datepicker__day--in-range to get something that works for you.  Let us know if you find something that looks good!\n. Glad you found something that worked for you.  I'm not sure what the right style to use is, and since I think it's going to be a fairly rare case that disabled dates are selected, I'm going to close this out, but feel free to re-open if you want to discuss further.\n. Hey @Pizdetss, this is something we could do, but I'm interested in your use case.  I think having only numbers available on the keyboard wouldn't allow someone to type in a full formatted date, and I'm not sure how a browser will react if a formatted date (i.e. non-numeric) is put into a number field; probably should treat this as undefined behavior.  Am I missing something?\n(want to make sure that if we add this to the API it will be for the right reason)\n. We had some interesting discussion re: using the date type on #402.  The tl;dr was that browser handling for types other than text conflict with the way this component handles the input field.  Specifically for  type='date', focusing opens a native datepicker, imposes a date format that can't be changed, and generally did weird things when I briefly tried it out =P  Not sure if you've considered this, but you can try it out by running the example page and changing the type to date.  I suppose type='tel' could work if your date format only includes number and dashes, even though it seems like a slight abuse of that type.\nAnyway, I think this will be trivial to support as we refactor components in preparation for v1.0.  I'll make sure it gets in\n. Oops, that commit did the opposite of what I wanted -- reverted it\n. Fixed by #400, will be available in the next release\n. Closing for now\n. Not sure I like the way this looks.  I think it draws more attention to those dates rather than deemphasizing them, which is what I think we should aim for.\nI'm tempted to think that we should completely defer to the consumers to style this, which is now possible since we give the --outside-month class.  This situation is similar to what we have for --weekend as well.\n. > I'm not sure if we shouldn't add some basic styling here. This feels as a pretty basic feature and something that should be included in the datepicker by default.\nAgreed, but I don't think we should feel pressured to pick a style just for the sake of picking when it's not clear what the right thing to do is.  In the end the easiest thing to do is to do nothing and defer to consumers =P\n. SGTM\n. What version are you running?  Setting isClearable and readOnly seems to work as expected for me.\n. Ah, turns out this was unwittingly fixed in #407.  @martijnrusschen, we should probably cut a release to include this and other recent fixes\n. Hey @alurim, thanks for submitting this, but unfortunately I don't think we can include it.  We're trying to move in a direction where the DateInput component behaves as closely to a standard <input> as possible, and adding non-standard event propagation is a step away from that.  A better solution here is to instead listen for onChange events, and make the docs site do something sane  =)\n. Closing, but feel free to open an issue if you want to discuss further\n. > an event which has a target element with the current value\nIf this is the protocol that redux-form is expecting, that must be the standard behavior of onBlur for <input>s, right?  (I know it's the protocol for at least onChange.)  I browsed through our code and the blur event from the DateInput is eventually passed to the onBlur prop of DatePicker.  I'm not familiar with redux-form but I'm surprised that didn't work.\nEDIT: Aha, but this leads to the problem that any possibly-invalid text is passed with the event.  A potential fix could be to change event.target.value to either empty or a valid date in the handler, but we should think through whether this would cause any unexpected behavior.\n. @DriesVandermeulen agreed; a fix for the demo page is welcome :smile:\n. This sounds like a question for the postcss folks as I'm not sure any of us have experience with it.  What is the issue you are seeing?\n. I don't think it's possible to do what you're trying to do -- our styles are shipped with a CSS file referencing class names that appear in react components\n. Yep, currently onChange only reflects the selected date, not the user's input.  We're working on refactors for v1.0 that expose components/events in more native ways; I think the current onChange may end up being renamed to onChangeDate.\n. I'll leave this open to make sure we don't forget =)\n. @FredyC contributions to fix this issue are welcome. What about using the renderCalendarTo prop to make the calendar render in the tooltip's DOM tree?\n. Great!\n. @diffractometer, I think the issue is that your config is set up to read css files from your src directory and not node_modules where the datepicker stylesheet will live.\n. No prob! :+1:\n. Making a fix in react-onclickoutside now, please hold\n. Fix submitted at Pomax/react-onclickoutside#73.  Once it merges and a new version is released this should be fixed.\n. @tjcampbell, @janroesner, @andynoelker, the fix is merged, let us know if that fixes the issue for you\n. Awesome! Sorry for the trouble.\n. The new release of react-onclickoutside will be pulled in automatically if you reinstall\n. Probably a dupe of #433 \n. What about setting renderCalendarTo to the panel so that it renders there instead of body?\n. @bekerov, @vguzev, if setting renderCalendarTo doesn't work please create a sample app that demonstrates the problem so we can look into it\n. @montogeek, see my comment above yours\n. Yup, see #444 #451 \n. Hey @dlwalsh, thanks for contributing.  It turns out I was working on this as well -- just created #436.  I implemented the fix in a cleaner way that is easier to unit test and get at the edge cases.  I think it satisfies your use case, but please give it a look and let me know.\n. No prob!  Closing this PR in favor of #436 \n. Failing because of #438 \n. Unbroke the build with 8a0d1829828121b0be44975d4fc6c94f3c1bc1b7; revert when fixed\n. @dmnd, does this sound good to you?\n. Awesome!\n. Yeah, I don't think it makes sense for the day names to have the same class as the dates (react-datepicker__day).  I think the day names should probably be separated into another class, probably react-datepicker__day-name.\n. Yeah please call it react-datepicker__day-name, I think it's much more descriptive of what's going on here\n. See #443 \n. What version of the date picker are you using?\nThis is possibly the same issue as #203, which we have had a lot of trouble tracking down.\n. What version is actually installed? Look at the package.json pulled into node_modules/react-datepicker\n. Yep, try with the latest version, v0.25\n. Here are the things we need before we upgrade:\n- [x] react-tether needs an updated dependency\n- [x] We need a fix for https://github.com/Pomax/react-onclickoutside/issues/79 EDIT: fixed in v4.8.0\n- [x] redbox-react needs an updated dependency EDIT: removing the dependency\n- [x] react-tether needs to be able to accept DOM nodes for renderElementTo EDIT: inlining TetherComponent in this repo instead\n. Looks like redbox-react also needs an updated dependency.  Also could ditch this dependency entirely; the console is good enough for error messages IMO\n. > It's just a devDependency. Doesn't hurt the component itself.\nTBH I think this makes it even more silly that it's blocking the upgrade.  :stuck_out_tongue:  Let's hope that your PR gets merged soon.\n. Unfortunately there's yet another issue -- the react-tether library now only accepts strings (i.e. query selectors) instead of objects (i.e. DOM elements) for the renderElementTo prop.  This will need to be accounted for as well before we can upgrade.\nBuild with the error: https://travis-ci.org/Hacker0x01/react-datepicker/builds/123778821\n. renderElementTo fix: https://github.com/souporserious/react-tether/pull/19\n. We can't remove react from peerDependencies and we need to support our API, so until the fix for react-tether is merged and released we can't upgrade to v15.\n. @peXed, waiting for https://github.com/souporserious/react-tether/pull/19 to merge\n. Since there isn't any movement on the react-tether PR, I think we should probably inline the TetherComponent into this repo and make the changes we need.  Hopefully I can take care of this tonight.\n. @martijnrusschen, I merged the final change in #451.  I think it's time to cut a release :beers:\n. :+1: \n. To have no date selected you should set selected to null.\n\nIf i ever remove the selected attribute, the whole component stop working ( this behaviour is expected ).\n\nCan you elaborate more on how it stops working?  Why is this expected?\n. See #444\n. Cool, yeah I don't think this is something we can easily support but I'm glad you worked around it.  If your use case is that you want to support \"similar-looking\" formats (e.g. 1/3/16 and 01/03/2016) there might be some tricks you can play with strict parsing on this line; see the moment docs for more info\n. Makes sense -- parsing only after pressing enter would be a breaking change for us but please open a separate issue if that's something you think is worth exploring\n. Need to remove react-transform-catch-errors as well...\n. This is finally ready to go!\n. Hey @enriquemgc, thanks for the fix.  Could you write a unit test for this?\n. Thanks!\n. #444, #451 \n. You need to pass the date you want to select to the selected prop.\n. Hey @kvasa, thanks for the contribution, this looks good.  I'll wait for the final approval from @martijnrusschen before we merge this in.\nFor SA: I think the way we'll want to handle this in v1.0 is to remove the inline prop and instead allow direct consumption of the Calendar component.  However this is a good stopgap solution until we get to that world.  (see issue #294)\n. Unfortunately I don't think we should support this -- since dateFormat and locale are taken in as props, the consumer can format the date themselves using that information.  Calling onChange with the moment object is enough information and this becomes API bloat.\n. What version of the date picker are you using?  Also please post the relevant code as it's very hard to tell what's going on without it.\n. How are you declaring your class?  If it's a functional component, it won't work because we use refs; you'll need to use React.createClass or class Blah extends React.Component { ... }.\n. @Gywem, take a look at #334 and #136 as well (please search for this kind of thing in the future)\n. Are you able to build the master branch from this repository, not your fork?\n. Google says: https://paulschreiber.com/blog/2015/06/22/fixing-dlopen-no-suitable-image-found-errors-with-node-sass-and-grunt/\ntl;dr reinstalling node-sass will probably fix it\n. Can you use the renderCalendarTo prop?  The prop takes in a DOM element that the calendar will be attached to, which is document.body by default.\n. Seems fine to me; personally I'd prefer to give a concrete DOM element rather than making an educated guess by walking up the tree and looking for a document.body.\n. The API that you should use for the default unselected date is null.  There are issues with how this is propagated down to the input -- I think react may have gotten pickier about what is passed to an input's value.  The diff in this open PR should fix this going forward by converting null/undefined to the empty string.\n. We don't currently support the autocomplete attribute but a PR is welcome.\n. Added in #489 \n. Code?  Are you setting the selected prop in the DatePicker?\n. Right, can you paste your app code here?  Hard to debug without full context on what's going on =P\n. Cool, glad you were able to get it working!\n. Not sure what you mean by shake, but your image looks like a dupe of #361 \n. This is already the standard behavior of the datepicker\n. It's hard to say without seeing your code -- it's possible that another plugin is removing/disabling the click handler on the document, which this component relies on to close the picker.\n. > move back to the NPM package as soon as your PR is merged\nTBH, I don't think this is a good idea -- the code base quality is poor and has bitten us a couple times in the past.  I think we can maintain a much better TetherComponent in this library, and perhaps extract it out after iterating on it.\n. Clobber the tetherConstraints prop with [] to wipe out the default constraint; relevant pages:\n- https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\n- http://github.hubspot.com/tether/\n. :+1: \n. This is a pretty significant UX change so unfortunately I don't think we can include it in this form\n. I mean that this changes the current user experience enough that it should not be the default behavior, and it will break current expectations of many workflows.  If you want to discuss this further please open an issue\n. You'll need to configure your module bundler (e.g. webpack, browserify) to handle CSS files, or add the stylesheet to your HTML manually.\n. Hey @firedev, it's actually by design that onFocus isn't explicitly mentioned; the idea is that the DateInput component behaves as closely to a standard input as possible by passing through all props with the ...this.props line, and the only ones explicitly mentioned are those that need to be overridden (and are referenced with this.props.name).  There are many props not explicitly mentioned, e.g. placeholder, readOnly\n. Looks fine to me on the demo site:\n\nAre you sure you're using v0.27?  It's been a couple versions since we've had the datepicker__container class in the codebase.\n. Dupe of #464, I think.  What version of the datepicker are you using?\n. The datepicker displays whatever date you pass into the selected prop, so you should already have in hand the value that you'd want to pass to an API.\n. From the demo site:\n\nCan you give a repro?\n. Don't think this is an issue; this was fixed by the moment refactors\n. Yeah, the API of react-onclickoutside changed between v4 and v5.  As a workaround you can probably depend on react-datepicker/lib/datepicker instead, which doesn't automatically bundle react-onclickoutside and will be resolved by your module bundler instead.\n. I'm a little confused here because the when the datepicker is installed, it should recognize that the version of onclickoutside you use in your project isn't compatible, and it should install v4 under the datepicker's node_modules (because of the caret dependency).  Can you poke around your node_modules folder to see what is resolving to what, and maybe try a clean npm install of your entire project?\n. Yeah, in that case the dependencies are set up correctly and unfortunately I don't think there's anything else we can do on the react-datepicker end -- sounds like a question for webpack now.\nAs an aside, updating our version of react-onclickoutside is on the to-do list and a PR doing this would be welcome =)  There are some API changes that need to be sorted out but should be pretty straightforward.\n. I believe this is because the top-level element of the DatePicker isn't an <input>, it's a <div>.  The only thing preventing us from changing it to an input right now is support for the clear button; however, supporting it in its current form is pretty restricting (because of cases like this issue), and it's not too difficult to implement outside of this library.  @martijnrusschen do you have any thoughts here?\n. I'm not familiar with the jquery plugin, but you can check out the demo site to see if this meets your needs: https://hacker0x01.github.io/react-datepicker\n. Hey @lbntly, thanks for the contribution, this looks good!  Could you remove the compiled docs files (bundle.js and style.css) from the PR -- we automatically generate those when we make a release.  Other than that, this should be good to go.\n. Thanks @lbntly!  We can squash on merge so leaving it as-is is fine\n. Thanks @lbntly, LGTM.  I think ideally we will pass all props from the <DatePicker> into the <input> so that we automatically support all possible attributes, but unfortunately we're a couple refactors away from that\n. The dependency version needs to be bumped as well; the API change happened in v5 but we depend on ^4.8.0 (handy semver calculator: http://semver.npmjs.com/)\n. @balsamiqstefano, any luck here?  Would love to get this in so that the onclickoutside dependency doesn't fall too far behind\n. Closing for lack of activity\n. The selected property takes in moment.js date objects, so passing in an object instead should solve the problem\n. This issue is nearly three years old =( The selected prop now takes a Date as of v2.. Hey @jaepage, unfortunately I don't think this is something we should directly support -- the datepicker doesn't do anything special with the startDate and endDate props other than use them for display.  All date selections propagate directly out via onChange to the consumer who can then decide how to set the range props.\nI can think of a couple ways to implement what you need:\n- If, on selecting the end date, the date from onChange is more than x days from the start date, do nothing, or select the latest allowable date instead\n- Set maxDate to startDate + x days so that invalid days are disabled\nLet me know if one of those solutions would work for you.\n. Try replacing new Date() with moment() so that a moment.js object is passed in instead of a standard date.\n. The component doesn't take in date strings; you'll need to create a moment object based on the date and date format before passing it into the selected prop.\n. Hey @griffinmyers, I think this is because of the way the tether library is configured to try to keep the datepicker on the screen as the user scrolls.  Maybe you can work around this by trying the solution from  https://github.com/Hacker0x01/react-datepicker/issues/470\n. Currently not possible, ticket to implement this is #340\n. Hey @lgrapenthin, it's very much intentional that the date is at the beginning of the day (since the component is time-agnostic it's the only thing that really makes sense).  If we were to add an option it would probably be better to specify an offset rather than a UTC flag (docs), but another possible workaround is to set UTC globally with moment.utc() (docs) to make the empty case work.\n. > This is why the picker being timezone agnostic highly irritates me:\n\n\nThe component is supposed to let the user pick a calendar date, not a point in time. A calendar date is defined by Wikipedia as reference to a particular day within a Calendar system.\nBeing able to pick a calendar date is the minimum requirement to any datepicker. Everything else, like adding daytime, casting timezones etc. can be done without a datepicker. If the datepicker also has such capabilities that is great, but it shouldn't make this minimum usecase anymore difficult.\nAt the time react-datepicker makes this very difficult by forcing one to convert the picked date from the users local timezone back.\nWhether the fact that users pick dates in different timezones is relevant to the meaning of the date picked entirely depends upon on what kind of information that date is supposed to specify and as such should be library users choice.\n\nConsider a birthday - Daytime has no meaning in this context. You don't know in what timezone the user was born, just the one in which he tells you about it. Yet react-datepicker merges those two facts of which only one is desired information into one piece of data: A moment object set to the users birthday in the timezone he recited it. Why would I want this?\n5. I. e. consider user1 has picked his m1 in USA, user2 has picked his m2 in GER, both via react-datepicker - Only knowing each users local timezone allows me to determine the calendar dates those users meant when they picked them in the UI.\n\nHey @lgrapenthin, I'm very much familiar with the purpose of a date picker, but if this behavior \"highly irritates\" you, please submit a fix; lecturing us with a tone like that without any inclination for contributing a fix isn't going to get you much sympathy.  In my original reply I attempted to give you a workaround** and I told you what I think the fix should look like.  Unfortunately the default behavior has caused you grief, but it is within your power (yes, you!) to help yourself and all the other consumers of this component.\n** Looks like you would actually need moment timezone to set the global timezone\n. @lgrapenthin -- I'm sorry for misinterpreting your comments; perhaps the miscommunication was because we're both passionate about code and making things work correctly.  The arguments you gave make it clear that this is an issue with no good workarounds.  I think often it's pretty easy to lose sight of what something is actually being built for and how it will be used, and having concrete examples is hugely valuable.  I want to make sure we have a good answer for all of the points you bring up before we settle on a solution.\nI am indeed a contributor and I would like to get a fix for this landed.  Re: design decision -- I used \"probably\" only as a way of brainstorming; the idea I had gives extra flexibility but I'm not sure if the added flexibility has any motivating use cases.  I ask for contributions for all requests as I'm only able to contribute here in my spare time, which I haven't had a lot of lately because of \"real\" work.  I believe to an extent that if one can give a detailed description of a problem, they can also fix the problem =)  Don't forget that you're not alone, and we will give you direction and code review comments if you decide to take a crack at this.  This is one of the greatest benefits of open source!\n. This also seems similar to #398, but it might be something different since you're using IE11.  Do you by chance have SVG elements on your page?  (If so it could be the issue mentioned in the react-onclickoutside readme)\n. Awesome, glad we figured it out!  I'm curious if the shim given on MDN would work as well (https://developer.mozilla.org/en/docs/Web/API/Element/classList#JavaScript_shim_for_other_implementations) but regardless I'm happy you got it working for your case.\n. Ah interesting -- @Pomax (author of onclickoutside) for your SA we were having trouble getting the shim working for SVG elements on IE11 here\n. Are you able to paste your code or create an example page that shows the problem?  The demo site gives an example of this that maybe you can model your code after.\n. @gor181 yep, this is what the demo site shows and what @flyalex described.\nClosing for lack of additional info\n. @ehkasper, @martijnrusschen, my concern is that if we advertise the CDN links they should always be the up-to-date version, and currently releasing to the CDN is not in the release process.  I'm also not sure if this is long-term supportable as I think the vast majority of consumers use module bundlers, where reading from a CDN doesn't make much sense.  What do you think?\n. I'm not sure what you mean by initializes twice -- what is the problem you are seeing?\n. Are you seeing the same problem on the demo site?\n. What is the issue you are seeing?\n. Sorry, I'm not seeing this issue; tried Firefox 43 and 47.  Are there any console error messages, or can you create a sample app that shows the issue?\n. @opusrocks, are you seeing the issue on the demo site?  https://hacker0x01.github.io/react-datepicker/\n. Cool; I think it's probably something going on in your app.  One thing that comes to mind is that if events are stopped propagating by something, it could be preventing them from reaching the date picker and triggering the close\n. @Lacerda can you try doing a clean install of all of your dependencies (i.e. delete node_modules and npm install)?  I suspect something bad happened to them\n. Awesome! I'm going to close this for lack of other information to go on\n. Hey @cristiango, thanks for the contribution.  This seems okay but I'm wondering if this is the wrong solution to your problem; since you mention timezones I wonder if a fix to #498 should be implemented instead.  FWIW I generally prefer fixing the root of the problem rather than giving a workaround, and since this is an API addition I want to make sure it's the right thing to support in the long term.\n. Sorry, the relevant part of the other bug I meant to highlight was the idea of adding a timezone offset option (which is just a more general case of adding a UTC flag).  What do you think?\n. Think this is a similar request to #498 \n. Hey @Lacerda, sorry for the delayed response.  This seems like a good idea, but the way the code is currently structured, any attribute can be passed into dataAttributes and appear on the component.  I think a better API to enforce data-* attributes would be\n<DatePicker dataAttributes={{foo: 'bar'}} />\nwhich turns into\n<input type=\"text\" class=\"datepicker__input\" data-foo=\"bar\">\n. Closing due to inactivity\n. Yeah looks to be the same, closing as a duplicate\n. Hey @alextkachuk, thanks for the PR.  This is a pretty large departure from the current functionality and we need to be very careful when making this change.  I'm not sure that the argument that this is the usual approach is correct; some take our approach (e.g. jQuery UI datepicker) and others take the other (e.g. bootstrap-datepicker).  I think at the very least that this should be behind a boolean flag option, and we most certainly need an answer for #296/#417 as well.  Let me know what you think.\n. The popover position issue can almost certainly be directly fixed as well -- at a high level what probably needs to happen is that the calendar should be repositioned when the month changes\n. > In my view, the best quick solution is setting opacity: 0.x (for example) for days are not in the current month and add my changes (fixed calendar).\nPotentially; this was once the behavior but it was changed because the dates looked too similar to disabled dates.  See the other issues I mentioned for more discussion about that\n\nOption for fixed or not is not good approach because in this case - not fixed mode will have a strong bug. For example, now I can't use react-datepicker in my current project because some modal window needs only top-view calendar and this bug my users found in production.\n\nYes, but the not-fixed mode is the current behavior, so it would be no worse than it is now.  Adding the extra rows without an option to turn them off is potentially undesired behavior for many consumers, including myself.\n\nOn the other hand, if popover position will fix in short period it would be great and in this case option for fixed/not fixed would be additional sugar :-)\n\nI definitely think that the ideal outcome here is that the position problem is solved, which would probably make this PR a moot point.  I'm not comfortable merging this yet because of the things we've been talking about, but feel free to take a stab at the position problem, maybe with the approach I mentioned before.\n. Please do not open duplicate issues; if you have more information please add it to #503\n. Can you elaborate on what you mean by \"not working?\"  Throw in some console.logs or debuggers to see what's going on, and possibly paste your code so we can see what you're doing.\n. Closing for lack of info/activity\n. @martijnrusschen, #522 is merged.  Please cut a patch release so everyone can use it! \ud83d\ude04 \n(For the datepicker we decided to go the route of using the spread operator and disabling warnings for the line; IMO this is the most declarative way of accomplishing what we want)\n. Agreed with @avk -- this is a React-wide problem, and fixing it for this specific component seems silly; the dev tools should be able to give you what you need.\n. Can we call this flag fixedHeight instead?\n. @alextkachuk thanks for the PR!\nRe #361, #510 \n. This might be an upstream problem; see https://github.com/HubSpot/tether/issues/189 and https://github.com/souporserious/react-tether/issues/14\n. LGTM, let's get this merged.  Thanks for the fix @meggantodd!\n. This doesn't look to be our component; are you sure you're filing this in the right place?\n. Thanks for the bug report; resolved with #526 \n. @thangaduraicse, you can easily build your own dist of the component in lieu of a release.\n. Lgtm, thanks for the fix!\n. Hey @schickling, thanks for the PR.  I think this needs to be a little bit more -- this only covers the initial open state, but I think to fully address #283 the open prop needs to also change the open state after the initial mount.\nThe way I can see this working is that if the open prop is specified, then obey the prop, or else delegate to the original open state behavior.  I'm not sure if the callbacks we currently expose make it feasible.  Imagine you wanted to emulate the old behavior; you would probably want to attach callbacks to onFocus, onBlur, and potentially others.  However, we would probably need some special handling of these -- e.g. imagine the case where the picker is open and you click on the calendar; technically onBlur will fire, but we don't want to close the picker.\nI've been putting off addressing #283 because of these complications, but let me know if you want to take a crack at it. :smile: \n. @jbdeboer, feel free to pitch in on this PR to help out\n. @salmanhoque, please include a screenshot of before and after the fix\n. @mtrabelsi, feel free to help out to fix those bugs. @aij, these very well may be things that should be changed, but it was more commentary on the attitude of the comment, not the content =). Dialog tags function much differently than modals, so I think they're unrelated.  This seems like the same issue described here, but judging from the responses it looks like the only solution would be to move the datepicker container to inside the <dialog>.\n. Seems like a webpack problem to me; try wiping out node_modules and npm installing again?  It may also be an issue with any custom module resolution logic in your webpack configuration.\n. Closing for lack of anything else to go on\n. Use null instead of the empty string\n. Nope, not currently possible.  PRs implementing this are welcome!\n. Agreed, I don't think this is something that we could easily support natively given the flexibility of the date formats.. Can you provide more detail here; specifically, can you give us code that reproduces this?\n. @karldanninger, again, it's difficult to provide any help without code that shows this problem =)\n. @karldanninger, as noted in the readme you can change the week start by configuring the week.dow option in moment.  However, if you're really working with the en-gb locale you should probably set the locale to be more semantically correct; be sure to load it as @iknowcss mentioned.\n. @MarkReeder correct; and thanks!\n. Thanks @grumd!\n. Hey @github1, the destructuring plugin should already be included since we use the ES2015 preset.  There were some fairly recent fixes regarding this error; what version of the datepicker are you using?\n. lgtm, thanks!\n. Hey @umurgdk -- thanks for the fix, but unfortunately I don't think it's a good idea to include this.  If this is a problem with upstream (i.e. tether or react-tether) then the bug should be fixed there instead.  If you're looking for a workaround, take a look at #519 and https://github.com/Hacker0x01/react-datepicker/issues/361#issuecomment-218100483\n. Yep!\n. Dupe of #361\n. Unfortunately changing the dependency to peer is a breaking change, so we can't make it until we release v1.0.  The most likely reason for getting multiple moment installations is that dependency ranges don't have a single version that satisfies both, which won't be fixed by changing to a peer dependency here.\n. More discussion about an isOpen prop on #283 and #531\n. Unfortunately we no longer support bower; see https://github.com/Hacker0x01/react-datepicker/issues/303\n. Yep, it's possible -- you'll need to define your own way of setting startDate and endDate based on onChange events.\n. Check out the example on the demo page\n. Actually, I don't think we currently support having selectsStart and selectsEnd on the same picker.  Not sure how the semantics of this would work, but PRs to support this are welcome.\n. Looks good, thanks @arnireynir!\n. Thanks!\n. The reasoning for the same day check here is that the input should only be changed if the new date is different, so as not to clobber a user's intermediate input; state.value will not always be a valid date.  Can you provide a sample app that shows the problem you're describing?\n. Yep, unfortunately this is a pretty common gotcha with the moment library.  Please re-open if you still run into an issue\n. Can you provide a full sample app that shows this?\n. Based on the error message you posted, this might be an issue with how ES6 modules are compiled/consumed, specifically when importing the default export.  Unfortunately I don't have time to look into this, but maybe you can use that as a starting point.\n. Good find @ej23lee -- closing this out since this is react-boilerplate-side\n. Seems reasonable to just change it to if (!event.defaultPrevented) { ... since it complies with both  the react and normal web specs; PRs welcome\n. These W3 docs and W3 schools docs show that defaultPrevented is valid.  Also, from the jQuery docs:\njQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler. Most properties from the original event are copied over and normalized to the new event object.\nwhich I interpret to mean that defaultPrevented is copied over.  I'm also dubious of building around the jQuery API, as it's a separate ecosystem that generally is not relevant for React apps.\n. FIxed by #591 \n. Please change defaultPrevented as discussed on https://github.com/Hacker0x01/react-datepicker/issues/590\n. Thanks!\n. Does this happen on the demo page?\n. Thanks. Any help digging into this would be much appreciated.\n. The highlight will always appear on the selected date passed into the picker.  Are you sure you're passing in the correct dates?\n. Dupe of https://github.com/Hacker0x01/react-datepicker/issues/361\n. Does this work on the demo site?  Are there any console errors?  Can you link to an app that shows this problem?\n. What version of the datepicker are you using?  This line should be creating an empty string when the date is null.\nNot sure if you literally meant it, but you shouldn't be passing an empty string to the selected property to have no date selected; pass in null instead.\n. You can directly read the open state field on the component by a couple different ways (refs, etc).  More discussion about an isOpen prop on #283 and #531\n. Cool, I think what you're asking for is external open state management via an isOpen prop, so I'll close this in favor of #283; let me know if you disagree\n. The dateFormat prop can accept an array of formats where they will all be used for reading but the first one is used for displaying.\n. lgtm, thanks!\n. Probably the same issue as #589 \n. Yep, this is somewhat intentional as we don't commit the built source to the repo.  This is the convention that most npm packages follow.\n. #361\n. Use the filterDate prop; see https://hacker0x01.github.io/react-datepicker/#example-11\n. I think it is intended behavior that clearing the date input propagates a null value; since the component uses moment.js objects for the API, there aren't really any other possibilities.  Can you give a concrete sample app that shows:\n- Sample code\n- Expected behavior\n- Actual behavior\n. Yep, thanks!. https://hacker0x01.github.io/react-datepicker/#example-6. Have you tried importing without assigning to a variable, e.g. import \"react-datepicker/dist/react-datepicker.css\";?  I'm not sure it makes sense to assign a default import for a CSS file.  What is the exact problem you're having?. I'm guessing that the loader is prefixing the datepicker class names in the CSS, which will cause the class names in the JS to not match; you can verify this by inspecting the compiled code.  We don't officially support CSS modules but PRs to that end are welcome.\n@benmratner, as a workaround you could define the loader to only have this behavior for things under node_modules/react-datepicker and have a separate loader definition for the rest of your styles that include CSS modules.. @benmratner is the loader being applied twice to react-datepicker.css?  You'll probably want to exclude it from the second rule. @benmratner, maybe you can use a combination of include/exclude as opposed to a more complicated regex; semantically that's more accurate of what you're trying to accomplish anyway =). @alex-cory, feel free to help out to get CSS modules working. @serkolch, PRs for improvements to the docs are welcome. @Aarbel, given that this feature request has been open for over a year, it will be included much more quickly with the help of outside contributors.. This is one of our favorite issues  #361. I'm pretty skeptical of introducing a new dependency for this; unfortunately I don't think this should be included.  @martijnrusschen thoughts?. Closing in favor of #698. > no new tests added as the logic is very straight forward.\nThis is not a good reason to not add tests; please include tests, even for basic functionality =)\n. Why not pass in minDate and maxDate to be the beginning and the end of the month in question?. What is the use case for restricting the selected day to the current month, yet also allowing changing months?  Isn't this equivalent to allowing the user to select a day with no restrictions?. If you're talking about the days from the previous and next month in the monthly view, you can style the react-datepicker__day--outside-month CSS class to suit your needs, possibly with pointer-events.. #361. Probably the quickest way to get this working is to run the build script and commit the built files to your forked repo.  Then they'll be available to your project when you install the dependency.. From travis\nRunning \"karma:unit\" (karma) task\n25 01 2017 00:00:27.801:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/\n25 01 2017 00:00:27.804:INFO [launcher]: Launching browser Firefox with unlimited concurrency\n25 01 2017 00:00:27.809:INFO [launcher]: Starting browser Firefox\n25 01 2017 00:00:29.887:INFO [Firefox 31.0.0 (Linux 0.0.0)]: Connected on socket /#p3oy7_xb8j_b6wUrAAAA with id 17824565\n...........................................\nFirefox 31.0.0 (Linux 0.0.0) DateInput should recognize a date with trailing whitespace as valid and call onChangeDate with the trimmed date FAILED\n    must be called once with expectedDate\n    AssertionError@node_modules/chai/chai.js:5553:5\n    [3]</module.exports/Assertion.prototype.assert@node_modules/chai/chai.js:210:1\n    [6]</module.exports/chai.assert@node_modules/chai/chai.js:2192:1\n    @webpack:///test/date_input_test.js:103:4 <- test/index.js:49857:6. I don't think comparing the input's length to the pattern's is a good option -- a format can produce a string greater in length than the pattern, e.g. MMMM becomes January. Not supported by this library, but you can probably accomplish it with a custom input.. #361. If I recall correctly, removing those lines would cause the input to not refocus after the calendar is clicked.. Unfortunately that'd be breaking behavior that I'm not sure others would be willing to sacrifice =). @gilbertKaradja, nope, any help creating a proper fix would be great. Agreed with @alex-shamshurin: I think it makes sense that openToDate should override selected if specified, otherwise the date opened should be selected.  Without that behavior I don't think there's a combo of parameters that would make sense to achieve opening to a different date.. The datepicker depends on moment to run, so it cannot be moved to devDependencies.. I think that bit of text is a bit of a conversational piece, not direct instructions on how to use the component, but PRs to clarify the text are welcome.. I don't think we can handle this case well.  The component returns moment objects, which are always attached to a year.  Furthermore, you need to know the year in addition to the month to know how many days are in the month (February).  I think your options are\n\nManually set the min/max dates to a month that looks the way you want, and override the weekday and month/year formatting\nRoll your own solution with a plain table (recommended). IMO the most important thing to settle on is the API, which includes the components we will expose, the props that they'll take in, and possibly even the styles.  I think it stands to be cleaned up pretty substantially, and there are a few breaks that we've wanted to make but deferred on.  Once we've settled on the API I think we'll have a clear path forward to getting to a releasable v1.. @ro-savage, if find is the last thing let's just implement it with filter; it doesn't seem like good practice for a library to install a polyfill and it's one less dependency to worry about. Nope, PRs to fix the problem are welcome =). @Aprillion  -- I'm sorry that this is the impression that you get.  As is the case here and in many open source projects, the collaborators and contributors (you and I included) contribute to issues, pull requests, and discussions in their spare time, and as you can tell from the number of open issues and PRs, we haven't had much spare time as of late.  While we would love to help every user of the component, it is simply not possible, and taking a confrontational attitude towards us, both in #996 and here, isn't going to get you much sympathy.\n\n\nThis project is not interested in my collaboration. The only reply to my PR was that after 2 months of no one merging it, it is no longer possible to merge it due to a conflict (the original file no longer exists).\nSo I closed the PR because I did not get any advice how to address that problem in any other way.\nThen @rafeememon was so unsure about why I had to have such an attitude that he or she \"locked and limited conversation to collaborators\".\nSo I reply here that it was obvious that a PR with conflicts could not be merged - but no one indicated what will the core team do about it. Did I look like someone who would contribute to the PR for next 5 years until an official \"collaborator\" privilege core team member makes their appearance and merge / comment in the PR?\nIf you don't have time to accept or comment on contributions from previously-enthusiastic people, then you should have said at any time between September 18 and November 8:\n\nThank you for your effort, but unfortunately we do not have time to review contributions from new people. This PR cannot be merged at the moment, but if we find some time in next 6 months, we will get back to you. If you still want to contribute, code review of other PRs could really help us improve quality of contributions so they can be reviewed and merged by the core team faster.\n\nThere is no indication in readme.md nor contribution.md that this is a project hostile to newcomers, so I assumed that my contribution would be welcome and I was reasonably frustrated that it wasn't welcome :(. Thanks!. That's fine, we can address removing it in the supporting code later, if we do it at all.  Thanks!. Related to #642 . Thanks @gavacho.  Would you be able to add a test case for this as well?. This is great, thank you!. How would this differ from the cases of onChange being fired with null?. An onClear handler would more declarative, but a null check isn't a huge deal IMO.  I think it would be very error-prone to have two ways of detecting the same event.  I don't think this warrants an API change since the functionality is already supported.. #395. Thanks @Pomax . @caffeine-based-lifeform @martijnrusschen Is there any practical difference between this change, and having the year dropdown respect the min/max dates?  I would prefer to stick to just having it obey min/max, because limiting the number of years is effectively specifying a min and max.. Got it, I think I misunderstood the purpose of this PR, apologies.. Can you try doing a fresh npm install?  The latest release of react-onclickoutside brings in additional transitive dependencies that are probably missing.. Frustratingly, it looks like create-react-class has an implicit dependency on npm >= 3.  It brings in fbjs which itself brings in object-assign.  This is fine for npm >= 3 when dependencies were changed to be installed in a flat structure, but will cause issues for older versions.  However, since npm 2.x is two major versions old, I highly recommend upgrading =)\n\ncc @Pomax. PRs to remove the React.createClass instances are welcome!. All examples are at https://github.com/Hacker0x01/react-datepicker/tree/master/docs-site/src/examples. I hear you; one improvement could be to add links to the code next to each of the examples on the docs site.  PRs for improvements are welcome. You can probably use ReactDOM.findDOMNode: https://facebook.github.io/react/docs/react-dom.html#finddomnode. There is no more appropriate solution unfortunately; the \"React way\" is to not be concerned with DOM nodes at all.. The page also mentions that if the child is a component class, the ref receives the component instance, not the DOM node.  If you need the DOM node of a third-party component I think you're working at the wrong level of abstraction (which is why the approach isn't recommended) but the escape hatch is findDOMNode.. Can you use the debugger to see what's being imported by the require?  You may need to use .default. I don't think that's necessary, you can inspect what is assigned to DatePicker in your code.  Did you try using .default, i.e.\nconst DatePicker = require('react-datepicker').default;\nIt should work OOTB for import statements but you may need to jump through that hoop for requires. Unfortunately it's an artifact of having a build that works with both ES6-style imports and commonjs-style requires.  We prefer using the default export of react-datepicker with an import statement but .default exists for compatibility with commonjs.. Cool, keep in mind that the API will need to be backwards-compatible. That could work; it's not obvious how you might specify the class name for the additional date ranges in a sane way, but maybe you can find something that works well =). @jamparke, contributions to improve the docs are welcome. I'm guessing this was filed in error. Probably the same issue as https://github.com/Hacker0x01/react-datepicker/issues/361. The date format of the header can be set with dateFormatCalendar prop.  I don't think it would be wise to build out infrastructure around separating the month and year because it limits the flexibility (whereas moment supports this flexibility OOTB) and it seems like a contrived use case to style them differently IMO.  Keep in mind that a calendar depends on the month and year to determine its layout; if what you really want is a table of numbers that should be built a la carte =). Agreed that the class names are less than ideal, but unfortunately fixing them would be a breaking change, which I'm extremely hesitant about.. The selected prop should be this.state.startDate. Try passing the moment object itself (not the formatted string) into the datepicker, and you'll probably also need to set the locale prop to localeString. Wrong project?. Cool, PRs to improve the readability are welcome \ud83d\ude04 . Hey @hozefaj, thanks for the work here, but unfortunately the API docs are autogenerated, so this will be wiped out the next time a release is made.  I think a proper fix here needs to involve changing the autogeneration process.. I'm not particularly familiar with it, but the script is https://github.com/Hacker0x01/react-datepicker/blob/master/scripts/generateMarkdown.sh. It looks like it's written by Facebook and I'd generally prefer to avoid a custom solution, but maybe there is another doc generator that looks better.. I'm very uneasy about adding a prop that is directly tied to the internal implementation of the component -- aside from increasing the API footprint, it hinders our ability to change the internals in the future.  Relatedly, tether's project status is up in the air, and they are encouraging people to use popper.js instead, which may be worth exploring.. @tohjustin, yep it is =)  But I don't think that's a reason to make the hole any deeper.. @tohjustin, I think it's worth keeping this open to track the blurriness issue; the switch may or may not solve it. From the link in the error message\n\naddComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's render method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n\nSee https://github.com/Hacker0x01/react-datepicker/issues/459. I don't think we use assignments in this repo but you're free to start working on this!. You can style .react-datepicker__tether-element in your stylesheet with the top and left properties.. @willbuckingham, @rmdavenp, if there is a problem please file a bug and/or submit a PR with a fix. Agreed with @alex-shamshurin -- if you need a true read-only/disabled field, use a plain <span>/<div>/<input> etc.. Can you give a concrete use case for needing a function, as opposed to just specifying a new start-of-the-week day?  Any function that doesn't behave in that way would produce unpredictable layout behavior in the datepicker when showing the week number.. What is the error you're seeing?. Fixed in https://github.com/Hacker0x01/react-datepicker/pull/902. You can probably style the outside-month class with visibility: hidden to get what you need.. You can use the filterDate prop to specify a filter that can accomplish this.. @pierre-H did you try bumping popper.js to 1.11.0?. @martijnrusschen, with the caret dependencies, it can be bumped independently -- it only locks in the first non-zero number, and from what I can tell the recent react-popper dependencies on popper.js are also carets.  Regardless, we should make that change =). A unit test for this guy would be great =). Use the readOnly prop: https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\nEDIT (Sept. 19, 2018): This behavior changed with https://github.com/Hacker0x01/react-datepicker/pull/1419, and this is no longer valid.. Reopening, as this behavior changed in #1419. @sahaviev @siarheipashkevich feel free to submit a PR. You must pass a moment object into the selected prop; moment('2017-10-22').valueOf() / 1000 evaluates to a number.. I think this definitely needs a test, @m1n0s if you need to use this immediately you can build your forked repo and use that in your project.. @MarkusLund this doesn't appear to be an issue on the demo site using the repro steps, do you have any more info?. Cool, PRs to fix it are welcome. More generally, you can use any of moment's localization features: https://github.com/Hacker0x01/react-datepicker#localization. I think this is going to be trickier than just updating the proptypes package.  React is declared as a peer dependency supporting two different major versions (0.x and 15.x).  Ideally, the package versions of react and prop-types should match.  I'm not exactly sure if there's some dependency combination that ensures that.  I'm reopening this issue so that we can figure out a solution.. I think this comes up when the datepicker component is used inside of a stateless functional component.  Unfortunately refs don't work inside of SFCs.. In addition to binding the callback to the component, in the provided code, handleDateChange is returning an anonymous function that is never invoked; setState should be the only thing in the callback.. Looks good, thanks!. https://github.com/Hacker0x01/react-datepicker/issues/937. As a workaround to get the exact semantics that you want, I suggest implementing clearable externally from this component, i.e. a button that clears the selected date in your state.. You probably just want to use a simple <input type=\"date\"> for that, no more and no less\nhttp://mobileinputtypes.com/. onChange is meant to fire with a moment object when a valid date is entered; to listen to changes in raw text, use onChangeRaw.  We can't change the API of onChange.. @xizi-xu not with conflicts. > there was 1 line of code changed - what is your wildest guess how many conflicts were there when this PR was created?\n@Aprillion, I'm not sure why you felt that your attitude was necessary, but regardless, a PR with conflicts cannot be merged.. #730 . What is the error you're seeing?. Looks like the problem is here because IE doesn't support Array.find.  PRs to fix the problem are welcome. This API of this component is to call onChange with a moment object, not a string, when the date changes.  If you want the raw string, use onChangeRaw.. I don't know about redux-form, but you need to have it hook into onChangeRaw. Pass null to the selected prop. I think your best bet is to probably roll your own component -- you don't need the overhead of moment.js and the additional functionality that this component provides.. You may be able to hide the red X from IE using this method: https://stackoverflow.com/questions/14007655/remove-ie10s-clear-field-x-button-on-certain-inputs\nI could see a case for adding this to the default styles of the datepicker, but this would be breaking functionality for people using the IE X instead of clearable, so you will probably need to add the rule to your own stylesheet.. As I mentioned, this would be a breaking change for people relying on the X.  It's a minor change but we should still carefully consider it.  In the meantime, you can use the styles in your stylesheet.. Possibly the same issue as https://github.com/Hacker0x01/react-datepicker/issues/1076. Thanks!. This can already be done, although without dragging: you can set startDate and endDate from your onChange handler.  Determining whether the new date should be the start or end of the range can be done with simple logic.. I think determining how to handle clicking a day in the middle should be left to the consumer of the component; there's no obvious right answer, and I don't think one solution will make everyone happy. =). I agree with @aij; to summarize the requirements:\n If the prop is not specified, we need to maintain the existing behavior of relying on component state for backwards compatibility\n If the prop is specified, it must override the state so that it always correlates to the observed state of the picker. > If I as a user want to be able to control the visibility of the calendar with a boolean prop, I would expect the component to close and open on focus and blur, without me doing anything from outside.\nI disagree with this -- if you choose to override the default behavior, you are giving up the automatic handling of open/close state.  You can decide how to update the isOpen prop via the onChange or various other existing callbacks.  Overriding the state when the prop is specified is much easier to understand than expecting a consumer to keep themselves in sync with the picker's state, rather than the other way around.. Let's go with (1) -- as you called out, the other solution adds confusion to the behavior and seems like one step forward and two steps backward.  IMO, the isOpen prop is only viable if it is honored 100% of the time.. That seems like a good clue.  In the screenshot the calendar is displaying duplicate rows for the week of 8-14, probably due to incorrect day arithmetic around DST.. No plans; this would be tricky to support as the date format is completely free-form. Even better, if this is the only thing preventing the picker from working in IE, we should remove the use of .find -- it can be trivially implemented with .filter.. We downgraded the dependency (https://github.com/Hacker0x01/react-datepicker/pull/1083) because of compatibility issues, so I'm skeptical of blindly making this change.. This is probably fixed by #1091, can anyone pull down master and give it a shot before we cut a release?. I'm pretty out of the loop here but maybe @Andarist knows what might be going on?. @aniruddhashevle I'm not sure that's enough to run the new version.  You'll also need to pull in the latest version of react-onclickoutside.. Great, let's close this out but let us know if there are any lingering issues.. Let's get this in, thanks for your work @Andarist . #972. #1091. The caret dependency fixes the first non-zero number in the version.  You'll need to change your dependency to ^0.58.0.. Fixed with https://github.com/Hacker0x01/react-datepicker/pull/1122. id is a prop: https://github.com/Hacker0x01/react-datepicker/blob/master/docs/index.md. https://github.com/Hacker0x01/react-datepicker/issues/1076. Any number of ways -- momentObject.valueOf(), momentObject.format, etc.. You can use the moment.js docs to figure out what you need for your use case: https://momentjs.com/docs/. Unfortunately this is a known issue: https://github.com/Hacker0x01/react-datepicker/issues/730. You must pass a moment() object to the selected prop.  https://momentjs.com/docs/#/parsing/. Closing due to inactivity. I don't think this change is necessary -- the new version will already be brought in by the caret dependency.. What version are you using?  This bug is a dupe (https://github.com/Hacker0x01/react-datepicker/issues/361) but comment on the other one if it's not resolved with the latest version.. Actually, I'm seeing this on the demo page too.  Re-opening. This is one of our favorites: https://github.com/Hacker0x01/react-datepicker/issues/361. Closing as a dupe of https://github.com/Hacker0x01/react-datepicker/issues/730. add mutates the moment object.  You'll need to clone it before adding a month. The callback is called with a date object, not an event.  See the example in the readme. Looks good, thanks!. The first line says it all -- you need to add a CSS loader to your webpack config.. @jsouthern-ngs, you should never be blocked on a release since you can easily unblock yourself by forking the repo.. What is the use case of needing to access January 30th and March 5th when February 27th is selected?. Why does the list of available days need to change at all?  You can pass in the entire list, not just the ones shown in the current view; if the list is large, you can trigger an API call with one of the various callbacks.\nI don't think we should complicate the onChange API to support this.  The visible dates can be derived with a combination of moment.js functions from the selected date.. You can use something like includeDates or dayClassName depending on your needs.. Yes, this is the intended behavior. Thanks @tomtwttr . https://github.com/Hacker0x01/react-datepicker/issues/932. You need to configure your moment locale; see http://momentjs.com/docs/#/i18n/. PRs to fix this are welcome. @martijnrusschen can you please cut a patch release?. Thanks!. #1212. Hey @jeffredodd, thanks for the fix.  I'm more than happy to get this PR merged, but a solution I would much prefer would be to remove the uses of Array.includes and Array.find in the codebase so that the datepicker is compatible with IE for our consumers without a polyfill.  I believe both of those operations can be trivially replaced.. You'll need to use a polyfill to run React in IE9/10: https://reactjs.org/docs/javascript-environment-requirements.html. #730. I believe this is a breaking change, so it shouldn't be enabled by default, but maybe with a prop?. I believe this should be this.props.inRange; day.inRange is a method that will always be defined/truthy\n. Hey @xzyfer, no prob -- I too was finding myself stumbling to find the right way to bootstrap this.  I'm working on a PR that will begin a test suite for the Day component.\n. Looks like this wasn't merged properly\n. This adds a duplicated definition of onClearClick, which is defined below this diff\n. Adding \"\" makes it so files required with their extension (e.g. import \"./calendar.jsx\") can be resolved.  It's a default in webpack and I figured it would be good to keep around.\nFor reference: https://webpack.github.io/docs/configuration.html#resolve-extensions\n. Not explicitly, but I ran into it when constructing Calendar components in my test and thought it would be good to update this.  It's in a separate commit that I can remove if you'd like.\n. Haha, yeah, I was more or less just following the (bad) style from another getInitialState.  Will fix.\n. Good call -- in fact moment should probably be left as is because it's the actual moment library being passed in as a prop\n. Unfortunately I couldn't quite figure out a way to simulate \"clicking outside\" to get this method to trigger\n. There seemed to be a dependency on the example page's h2 margins for this to look right, which I ran into when I removed the dropdown.  I changed this to render as a div, and add a margin if the dropdown is present.\n. Unfortunately this line is problematic.  Modifying _locale touches the global locale, which we want to avoid.  I found this out by trying to change _locale._weekdaysMin in one picker and seeing that it affected all pickers.\n. It looks like triggerUpdate might be unused, does it have a purpose that I'm missing?\n. This removes the ability to open the datepicker by tabbing into the input =(  Is there a way to make this work with your fix?\n. I think we want this to stay as focus so that we can test that both clicking and tabbing into the input open the picker\n. Ah okay, that makes sense.  I think forceUpdate may be a little more semantic in this case, but I'd defer to @martijnrusschen for the final call here.\n. Ultimately I think DateUtil objects should be phased out in favor of just passing around moment objects.  I've often confused myself when trying to figure out if one or the other is required in parts of the code.  For complex operations I think they should be pulled out into static utility methods that act on moment objects.\n. This was depending on the internal state for the date display, not the selected prop.  If just depending on the state and not the prop, there's no way to use the date picker in a useful manner.\n. It seems more sane to not require the user to pass in datepicker__input when giving a custom class name.\n. This method confused me.  I guess this is how the consumer is supposed to get at the date state if not using the prop, but it's a very anti-React way of thinking IMO, and I don't think we should encourage people to use the component this way.\nA lot of the diff in this file revolves around removing the date state and relying on the prop instead.\n. Pressing enter and escape both ended up eventually calling hideCalendar, so this simplifies it a bit\n. onClear seems like API bloat in that it's just onChange with null.  What do you think?\n. I think this isn't relevant anymore since this is now just a click event handler\n. Relevant discussion on #284.  Looks like the issue is that onChange is called when an invalid date is typed into the text input.  I think the right solution is to only call setSelected when the date is valid, rather than clearing out the selected date.  That way onChange will function as @aspirisen expected.\n. @RSO do you have any thoughts here?\n. Right, I think onClear should be handled with onChange(null).  Personally I don't think consumers will need to know the difference between the two clearing actions you mentioned.\n. Cool -- I'll make the fix to setSelected that I mentioned in another PR\n. These are super fragile.  When they work everything is fine, but when they fail it somehow cascades into other test failures completely unrelated to it.  I suspect it has something to do with how the component is mounted/unmounted outside of the system of React TestUtils.\n. This is the meat and potatoes of this change.\n. For this case in particular the onclickoutside API requires that we have a handleClickOutside method.\nFor other cases, I seem to recall that React gives a warning message if you try to use a prop directly as a callback passed into a component.  Not sure if I'm making that up.\n. This is kind of yucky.  Maybe we can allow the today button text to be passed in as a prop, or can we get it out of localeData?\n. Looks like onClear snuck back in here\n. Probably don't need this default, falsy would be implied by not passing in the prop\n. How is this prop set?  Does it need to be passed down from the top level?\n. Please fix up the indentation =)\n. Continuing from before -- it's optional, but how does the consumer use it?  It's not being passed down from the datepicker component.\n. Sometimes I hate Javascript.  At least the tests caught this with ease.\n. Probably should remove moment as a prop entirely and just import.  I've been meaning to do that for a while, ha\n. Spacing =P\n. Localizing the moment as soon as it's passed in allows the localization to be passed to weekdays and week start automatically.\n. This is the best I could come up with without digging into moment internal fields =(\n. Hooray for tests!\n. :sob: This fixes the immediate issue\n. http://momentjs.com/docs/#/displaying/ under \"Localized formats\"\n. Yeah, adding it to the proptype summary sounds like a good idea\n. Yep, working towards some deadlines on my real work though, haha\n. nit: it's safe to get rid of this line, when it's not specified it's undefined which is good enough\n. nit: please fix indenting =)\n. Looking at this again -- the default format actually belongs to DateInput, which is currently internal API.  Re: docs I think we should handle this as we overhaul docs but I don't think it should block this merge\n. Yeah think so, want to take care of that?\n. In general I think devs usually go for PropTypes.any for the children prop, but since this is only code for the demo site it's not a huge deal\n. I think this should be string instead\n. I don't think this should be string, but I'm not sure what it should be instead.  Probably any but it's worth looking at what can be passed into the tether API for this\n. Think this one should've stayed as a bool\n. This seems problematic because the provided stylesheet assumes a .datepicker class, and it's not obvious how to make the existing styles work without copying/pasting them to a new class.  I'd prefer the className prop to be strictly additive to .datepicker, which is the way I've seen other react common components implemented.\n. Changing the class seems reasonable.  It looks like most of the styles are named as datepicker__component although we're admittedly inconsistent with this.  The class should probably be datepicker__calendar instead.\n. See #388 \n. Don't think we want this line, this causes the picker to close when clicking on the calendar (not on a date)\n. Can you give test cases for this?\n. This is the magic line that lets us pass arbitrary props to the <input> element\n. Re #397 \n. Can we minimize to change in logic by simply checking if dateFormat or locale has changed?\n. It's out of scope anyway, we don't receive notifications when the global locale changes\n. Right -- my point is that if the global locale changes, we have no way of knowing until we we-render anyway\n. nit please remove this\n. Can we keep the calling API consistent for safeDateFormat, maybe by passing the entire props object at each caller?\n. Yep -- I think this is an artifact of the webpack config months ago not including .jsx files by default\n. This is a breaking change, but we can break this soon.  I think ideally in v1.0 we will stop publishing the dist build altogether and only publish the cross-compiled lib directory.  When this merges you will be able to include the non-bloated files with require('react-datepicker/lib/datepicker') but for now this will need to stay pointing at dist.\n. I think we will want this as part of the grunt script so that it runs as part of the prepublish hook.  That way the compilation is completely automated and we don't need to have the lib directory committed here\n. Tracking this in #405 \n. Actually would you mind fixing this in a separate commit?\n. No prob =)\n. Yeah -- like I mentioned in my comment let's handle all of those in a separate PR, just wanted to get this working now the way it was before\n. The display of the close icon is controlled in JS instead by not adding it to the DOM if nothing is selected\n. className can still be specified by passing it in as a prop because of the {...this.props} above\n. Moving the styles to the docs-site stylesheet will apply the old styles to all of the examples on the demo site -- is that what you mean?\n. It turns out we won't need a default class anymore; from what I could tell it was only to apply the style, and I don't think it should be there if we want to move towards treating it as a plain <input>.  We have a \"Custom class name\" example that looks like it broke...looking into it\n. The problem was from the specificity of CSS selectors; refactored the demo page styles to make more sense.  No implementation problems =)\n. Yeah, unfortunately I don't think we're ready for this since our dependencies don't support 15.0 yet\n. A day is enabled if it is both in includeDates and between minDate and maxDate, so this needs to take that into account as well\nSee https://github.com/Hacker0x01/react-datepicker/blob/v0.25.0/src/date_utils.js#L9\n. We're trying to keep lodash out of consumer dependencies, if possible\n. I was envisioning this fix as changing the CSS class of the day headers, as in https://github.com/Hacker0x01/react-datepicker/blob/v0.25.0/src/calendar.jsx#L92\nI think changing that class from react-datepicker_-day to react-datepicker__day-name makes much more sense\n. Right, I think it should be refactored to make it work with the __day-name class instead of __day.  The things they will have in common are defined by variables that can be reused.\n. Technically -day isn't a modifier, and I don't think it should be because the day names and dates don't have much in common other than width and height.  Go with #2\n. Please remove the __day class entirely\n. I think this should be the way we do it -- day names and days are fundamentally different and shouldn't inherit from the CSS tree\n. nit can we use TestUtils.renderIntoDocument for this instead?\n. Yep, they are -- setting them in conjunction results in a range being selected\nhttps://github.com/Hacker0x01/react-datepicker/blob/v0.27.0/src/day.jsx#L37\n. I think we should probably call the prop the same thing through all of the components, fixedHeight\n. This can be simplified to this.props.fixedHeight || this.isWeekInMonth(startOfWeek)\n. I'd prefer to be much more explicit about what is being disabled and applying it to the line in question rather than a block, just to prevent actual badness from sneaking in.  i.e.\n... // eslint-disable-line no-unused-vars\n. I don't think the json-loader changes are necessary, are they?\n. I would really prefer to not introduce a dependency on moment-timezone.  Instead of taking in the name of a timezone, we can take in an offset instead and do something like what is described here: http://momentjs.com/docs/#/parsing/parse-zone/\n. (I'm not super familiar with accessibility properties, so sorry if this is a dumb question...)  Is this required to be a unique label within the listbox role?  A month will show days from the previous and next month leading to some duplicate numbers, but not sure if that matters here.\n. Thanks for the info @kaylieEB!  I think prefixing won't be necessary given that it's not a unique ID, but I'm curious how it affects a screen reader; can you give us a little insight into how a screen reader interprets this?  I don't think this will block the PR, but I'm just curious \ud83d\ude04 \n. Did you try simply passing the autoFocus prop to the input element?  It would be nice to delegate this to native HTML if possible.\n. Unfortunately this seems like too much of a hack to include, and it may incur a performance hit as I suspect position() is not cheap to call.\n. Out of curiosity, can this defer go away?  Not sure if focusing happens sync or async\n. (sorry for the back-and-forth, hard to give a complete CR on the train =P)  It looks like this part of the change can probably go away\n. Agreed that it might be useful, but that should be addressed in another PR to separate concerns, especially since it's an API change =)\n. - Can you change this to an else if?  It makes it more clear what should happen if both selected and openToDate change, where selected should take precedence to be consistent with getDateInView\n- You should use the isSameDay helper to avoid some unnecessary state updates\n. === true is unnecessary\n. To follow proper BEM conventions can we change this class name to react-datepicker__year-dropdown--scrollable?\n. This is passed in from the DatePicker component, which has a default of 'MMMM YYYY'.  We should only define this in one place\n. .isRequired\n. Let's avoid mutating the moment object by creating a new object based on date\n. What does this look like on the docs site without any of these overridden styles?  I'd prefer if the docs site reflects exactly what this will look like out-of-the-box. These styles are added to the demo site but are NOT in the datepicker stylesheet.  Why are they necessary, and what does the demo site look like if you remove them from docs-site/style.css?. Oops, looks like this file is generated.  Can you remove the built files from your PR -- we automatically build them when we make a release.. As unfortunate as the existing behavior is, this is a breaking change.  Even though semver dictates that we are allowed to break things since we're 0.x, I'm extremely hesitant to make this change.. How about using .some instead?  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some. Can we avoid a regex here?  It adds some unnecessary obfuscation. I'm not sure why this is needed -- isn't the use case covered by prepublish? https://docs.npmjs.com/misc/scripts. Isn't this only necessary for the test environment?  The dev dependency needs to be v16 so that enzyme is happy, but unless there is something specific to v16 in the datepicker code, I think the peer dependencies can have a wider range.. I generally agree with this, but React is a bit of a special case in my mind with the wide prevalence of old versions.  We're not doing anything adversarial against older versions, so I'd be okay with allowing it \"at your own risk.\". Personally, I don't think it's worth investing in.  To reduce the maintenance burden we should only officially support the newest version.. Instead of hardcoding these I think we should do some kind of detection.  Does the ltr/rtl flag exist in moment somewhere?. Maybe we can steal the list of locales from https://github.com/shadiabuhilal/rtl-detect/blob/master/lib/rtl-detect.js#L137.  I'd also pull that into a util file and encapsulate it as isLocaleRtl. No, sorry; please leave the versioning to us and our build process.. Can we get a better name for this method?  Or better yet, change it to something like areMonthsEqual. I think this should be tightened up a bit:\nfunction hasPreSelectionChanged(date1, date2) {\n  if (date1 && date2) {\n    return getYear(date1) !== getYear(date2) || getMonth(date1) !== getMonth(date2);\n  } else {\n    return date1 !== date2;\n  }\n}. Sure it's opinion, but\n Using function instead of const is much more idiomatic\n The change to the body that I suggested is more direct in what is being compared rather than roundabout. ~~I think it would be much better to avoid modifying the global environment, and instead guard the problematic access to window with an undefined check.~~  I think it would be best to abstract window away in the places where it's accessed to refer to either window or global(?).  Adding a unit test for this would be great as well.. ",
    "QingkaiLi": "Hi RSO, when will you do release? i'm waitting for the latest code\n. Cool, then i needn't override it in my local. just waiting your new release. Thanks\n. I Checked out the new version but there is a issue: Uncaught TypeError: n.findDOMNode is not a function\n. React 0.12\n. can you try : this.getDOMNode()\n. The issue occurs from  toggleFocus method in date_input.jsx. maybe  this.getDOMNode() works. can you fix?\n. i'm using React 0.12 and cause of too may depencies i cannot upgrade it. since react-datepicker is using React 0.12 can you just stay using the version and find other way to solve this problem?\n. Or can you release  react-datepick 0.6.1 using this.refs.input/this.getDOMNode() and React 0.12 and realse react-datepicker 0.7 using React0.13?\n. Because React 0.12 and 0.13 has huge differences. so can you do two release so that all of us can use your component no matter which React version we're using. Thanks\n. ",
    "SinisterGlitch": "Everything still works if you just uncomment this code. \ntoggleFocus: function toggleFocus(focus) {\n        if (focus) {\n          //    React.findDOMNode(this.refs.input).focus();\n        } else {\n          //  React.findDOMNode(this.refs.input).blur();\n        }\n  },\n. ",
    "doodzik": ":+1: \n. The official npm module sites quote the npm i command.\nI am interpreting it the way that the people behind npm want us to use npm i instead of npm install.\nBut I don't have a preference.\n. ",
    "tobia": "I used your datepicker on a Bootstrap-based website, and yes, the input was the only className I had to tweak.\nI made the following change to my copy of the JS file:\n-         className: \"datepicker__input\",\n+         className: \"form-control ignore-react-onclickoutside\",\nform-control is Bootstrap's class that has to be applied to form inputs to give them the library's look.\nI also added ignore-react-onclickoutside to allow users to choose a date with the picker and then tweak it in the text input, or vice versa. Without it, the picker would close whenever the user clicked on the input, which I thought was sub-optimal.\n. I ended up adding ignore-react-onclickoutside to the input element, because from my tests I felt that gives the best user experience.\n. ",
    "hugofloss": "I think disabling the calendar when the text box is focused makes the most sense to me. Reverting the input feels a bit too agressive towards the user.\n. ",
    "voronianski": "@iam4x @martijnrusschen what version are you using? I'm on 0.10.0 and still have tether complaints on server:\nvar el = document.createElement('div');\n           ^\nReferenceError: document is not defined\n. ",
    "kevzettler": "@martijnrusschen any thoughts on this? I noticed its basically the same as #108 after I opened. Definitely a needed feature and small commit.\n. ping @RSO \n. @martijnrusschen the 20,000 lines are from running and committing the built assets from grunt. I thought that was part of the contribution process would you rather those not be commited?\n. ok @martijnrusschen I've removed the built files and now this PR is almost exactly the same as #108 so either one would work for my needs\n. ok nice closing this then\n. +1\n. lgtm\n. ",
    "tylerlee": ":+1: --- I don't know a better way so I'm no help there --- but we're gonna start using react-datepicker so thanks!\n. ",
    "MortalFlesh": "Thanks for merging my changes. You could have just merge src files and build it again - by this you would avoid conflicts.\nI tested it and it's ok! :+1: \nAnd will you make a tag?\n. Great :) thank you\n. ",
    "Asgator": "+\n. ",
    "skurger": "This issue can now be closed.\n. No problem!\n. I'm getting \"Request has expired\" from the link you provided which I think was a screenshot.\nI looked at the demo which has an example using minDate but the dates are correct.  Can you give some more info on how to reproduce?\n. I can fix this later today.  That property was removed from the input sometime after my branch was merged.\n. ",
    "ibjohansen": "Hi!\nOK, thanks, I agree that supporting older versions when we're still on 0.x is not worth the effort. Perhaps I could suggest that you update the package.jso so that it reflects this.\n\"peerDependencies\": {\"react\": \">=0.12 <0.14\"}\nUnfortunately I'm stuck with 0.12 for my project, so I'll just use my fork there.\nI also noted that popover.jsx does uses getDOMNode on line 35:\n  _tetherOptions: function() {\n    return {\n      element: this._popoverElement,\n      target: this.getDOMNode().parentElement,\n      attachment: 'top left',\n      targetAttachment: 'bottom left',\n      targetOffset: '10px 0',\n      optimizations: {\n        moveElement: false // always moves to  anyway!\n      }\n    };\n  },\n. ",
    "tom-james-watson": "Some basic documentation of how to use the date picker could be included in the README as a start\n. There's still no code examples, it would be great if there were code examples in the README showing what props are expected etc.\n. ",
    "MahatmaManic": "+1. I've installed react-datepicker and am trying to make use of it. Currently I am using:\nvar DatePicker = require('react-datepicker);\nand then in render adding a \n \nto my component heirarchy. \nThat makes the html show up, but I'm not seeing any of the styling. (If I copy the css from the react-datepicker module into my own css file then it styles correctly). I assume I must be missing a setup step or doing something wrong with the require/use?\n. ",
    "mqklin": "@martijnrusschen, i want to prevent keypress typing, so i need an onKeyPress prop, or some option like preventKeyTyping={true}\n. I don't really remember... I chose another calendar \n. ",
    "umakajan": "When using react-a11y, I get the following console log message: \nDateInput You have an unlabeled element or control. Add `aria-label` or `aria-labelledby` attribute, or put some text in the element.\nPlease let me know if this is resolved anywhere.. ",
    "at0g": "For #120 \nSorry, but I'm not sure how to fix the jest tests to use babel with experimental / stage 0 support.\n. Thanks @RSO - I'm using my fork on a project, so can't make breaking changes to it. However, I can send you a new PR (from a branch) with just the blur callback.\n. Hey @RSO - new PR #129 contains just the onBlur callback. Going to close this PR.\nThanks.\n. ",
    "arqex": "Hi @martijnrusschen \nA peer dependency is a module needed by the package to work but that it is not installed with the package. That is, if I need to use react-datepicker and moment.js is a peer dependency of it, I will need to have moment.js also installed to make it work, but react-datepicker won't install it for me.\nIn my case I am already using moment.js in my projects. Moment.js is a moderately big library that adds ~50KB to my bundle, if react-datepicker install it again. it will be repeated inside the bundle adding 50KB more to the final size.\nI think moment.js will be better as a peerDependency than a regular dependency. React-datepicker already uses React as a peer dependency.\n. Hi @RSO \nI think they won't be installed automatically as for npm v3.0 and ahead.\nWow! npm dedupe! I have never heard of it, I should have a look. About peerDependencies being deprecated, it is a tough matter. You will never make react a real dependency, as long as you don't want to break any react application installing react-datepicker, but it is true that is difficult to be sure when a dependency is a peerDependency.\nIn the case of moment.js, maybe the best option is to create two different builds, one with moment.js and other without it, like https://github.com/zippyui/react-date-picker/tree/master/dist\nLast week I have been creating my own datepicker because I needed a timepicker too, and I left moment.js as peerDependency, and it is true that I need to install it besides the datepicker to make it work, but on the other hand I get a really lightweight build:\nhttps://github.com/arqex/react-datetime/tree/master/dist\nI think I will leave it as peerDependency but it looks like a matter of taste, isn't it?\n. Hi @RSO,\nGreat news you made the datepicker so lightweight!\nAs for what to put in the build, it is complicated to decide what to leave out. In your case I think it should be a great idea to leave react-onclickoutside and Tether. There is a big chance that the datepicker is the only lib that use them and they are not big enough to be a problem if they are repeated.\nIn the timepicker put react-clickoutside and object-assign inside the bundle.\nCheers\n. ",
    "aij": "@martijnrusschen, @Kerumen It shouldn't break for everyone -- only for users who depend on npm pulling in moment transitively via react-datepicker. Do we know how common that is?\nThose users could fall into two categories:\n\nUsers who never use/call moment() directly.\nUsers who do call moment() directly but failed to declare the dependency.\n\nGroup 1 is correct usage, which would unfortunately be broken by this change when they choose to upgrade. They would only be using react-datepicker in the simplest ways, since they couldn't be passing in any moment props without creating a moment.\nGroup 2 is  already rather fragile, since any change that makes moment no longer available project-wide would break their code. For example, a library upgrade or addition that introduces a new moment dependency on an incompatible version would already break those projects.\nEither way, users who would be broken by switching to peerDependencies should get a warning when they upgrade. (Though the warning may be easy to miss/ignore...)\nI happen to know the projects I'm working on wouldn't be broken by this change. (Though we are also way out of date anyway due to other breaking changes and lack of testing resources.). @Kerumen I didn't say it's safe, just that it won't break for everyone. I don't know how everyone is using the library, so I can't tell whether it will be a breaking change for a lot of people or only a few.\nI would hope only a few though, and I would hope they would (be able to) see the warnings/errors from NPM, but I expect there would be at least some who don't.. The more I look at this,  the more I think a better solution would be the opposite of 1: Make the core API as simple as possible (but no simpler), and add a wrapper around that which adds moment, timezones, timestamps and any other unnecessary but potentially convenient complexity.. @martijnrusschen  Isn't that already configurable via customInput?\nEg: <DatePicker customInput={<input type=\"date\"/>}/>. @dbyzero I think the latest release may have switched some dates back to UTC by accident. We might need more unit tests.. @martijnrusschen I've been busy on other things and haven't had a chance to test, but I think b1615d8fbed00db3bf1dc2ead3cf03585fdb5b73. Note that utcOffset is set via defaultProps, so in most timezones will be truthy by default, preventing the next line for local moments from being used.. @mistadikay It isn't actually additional functionality. Simply using the standard prop names / API would go a long way to aid interoperability. (Not just with redux-forms.)\nIt would break backwards compatibility though.... Does the new onChangeRaw solve this?\nEdit: I guess that only gets you halfway there, since you can't set the value except via a moment object.. @rafeememon I'm fairly sure those are differences of opinions rather than actual bugs. Though FWIW, I found it confusing at first as well...\nFor example, placeholder is currently set per the placeholderText prop. If we were to \"fix\" that so that placeholder from customInput is used instead, then the users who expect placeholderText to be honored would be displeased.\nWould it make sense to render customInput as a component instead of cloning an element? That would give users full control over the rendering of custom inputs. (Though we may want to still support cloning for compatibility.). We don't have time to debug your code for you. If you believe you have found a bug, please take the time to narrow it down to a minimal example so that someone may be able to look at it.. For me, the problem is that as soon as the string is parseable as a date (Eg: 10/10/19) it sends on onChange event, and we feed the resulting moment back into DatePicker via the selected prop. That highlights the date (2019-10-10) in the mini-calendar (which is good), but it also updates the value prop of the input field (which is bad if the user wasn't done typing, as they end up with Eg: 10/10/201999).. Hmm, I was trying to fix this, but part of the issue is that DateInput is used neither as a controlled input nor an uncontrolled input, but something kind of in between. \nI think the cleaner fix would be to make it a stateless, though after that I'm not sure it would really serve a purpose after that... Do we need to keep DateInput around for backwards compatibility? (In case someone might be using it directly?). @dfahlander You seem to be running in to #361 . . date.format() will actually give you an ISO timestamp. date.format('YYYY-MM-DD') will give you an ISO 8601 date.. @seafarring13 Does your custom input have afocus()` method?. @Aarbel Have you submitted a PR?. It certainly sounds like a good idea. We'd just use the existing components by default, but allowing them to be changed via props would add a lot of flexibility.\nFWIW, I've been using \"render props\" since React 0.14, though the pattern didn't have the somewhat misleading name back then. . Closing in favor of #773. (Basically this but rebased, with an additional fix and tests). https://hacker0x01.github.io/react-datepicker/#example-9 seems to be working for me... (Tested at 2017-11-14 14:20 UTC, with CST local time and UTC offset +10:00: It correctly highlights and selects 2017-11-15 as \"today\".)\n@marekadamek Could you provide steps to reproduce? What time zone are you in? In your original report, did you test at 6pm local time or 6pm UTC? Does the issue appear on the example page, or are you doing something different? . @JedWatson AFAICT, the purpose of that is to get the  focus to \"stay\" on the datepicker when clicking within the calendar without closing it. (For example, clicking to the next month arrow shouldn't change the focus, much like clicking the scroll arrows in react-select doesn't change the focus.)\nIt's been a long time since I looked at it, but I think react-select may be preventing handleCalendarClickOutside from getting called, so the calendar refocuses itself as if the click was within the calendar.\nThere may also be some weirdness going on because after calling this.setState, this.state will still have the old value until the next update. I'm not sure the state is guaranteed to be updated between handleCalendarClickOutside and handleBlur, though clicking on a regular input does seem to work. (And we do want to trigger an update/render when the open state is changed.). @donysukardi That's still not quite right. The default should not be outside the selectable range. (And it didn't used to be in 0.39.)\nIt should at least take minDate and maxDate into account.  (I don't know whether it used to take excludeDates into account too as I didn't use that prop.). @alex-shamshurin It works for me at https://hacker0x01.github.io/react-datepicker/#example-26 with both Chrome 58 and Firefox 48.5.\nIn what way is it not working for you?. I don't know how portal or monthShown might be relevant, but selected takes priority over openToDate, and I think that is correct.\nYou can see that behavior in the example actually. When you first open it (and no date is selected), it will open to 1993-09-28. If you select some other day, say 1993-12-25, then the open it again, it will open to the selected date rather than losing your place.. Hmm, to me the use case of providing a default date to open to seems like it would be way more common than wanting to override the behavior of opening to the selected date. It also appears to have been the original intention per #320 and #486.\nI expect changing the behavior would be a breaking change for almost everyone who is already using openToDate -- assuming they followed the example code.\n@alex-shamshurin If I understand your use case, you still do want the selected date to show on the calendar, but you want it to show on the rightmost month rather than on the left, correct? Or would you want the datepicker to open to April even if a date in December is selected?\nThe current behavior of multiple months does seem kind of weird to me. https://hacker0x01.github.io/react-datepicker/#example-30 If you click a day on the right hand month then re-open the calendar again, the months will have shifted. Is that what you're trying to work around?\n@rafeememon I guess for me the first question is: Is that something that needs to be achievable via a simple combination of props? And if so, should we be redefining what the openToDate prop means? If we do want to redefine it, should we go through a deprecation period where we emit warnings for anyone who is currently using it in a way that would beak?\nI'm also having a hard time even thinking of how opening to a non-selected date should behave for the user. For example, for selected=2017-12-20 and forceOpenToDate=2017-02-15, what should happen when the user presses left arrow to select the previous day? Should that select 2017-12-19, or 2017-02-14? If the former, which month should the calendar display at that point? If the later, wouldn't that be a problem for accessibility?\nI guess a lot of it will come down to what the expected use case actually is.. @dvdgarcia What time zone are you using for excludeDates?\nThings get a little screwy when mixing moments in different UTC offsets. (Which is especially easy to do accidentally when you are in a time zone with daylight savings time...). @martijnrusschen I think the recentish API changes wrt timezones has created a fair bit of confusion. (Eg: #747 #727 #627) It doesn't help that the API is undocumented in regards to what sort of moment objects are expected, and a lot of existing examples violate those undocumented expectations. (For example, by passing in local moment objects, or by assuming the moment object received from onChange is suitable to pass back in via selected.). @martijnrusschen I think the main thing that needs to happen with regards to how the API uses moment, is that someone needs to make a decision. That decision should be documented somewhere, and the code and/or examples should be updated to match.\nI ended up opening #781 where I tried to explain the confusion in detail. TL;DR: The current code seems to assume all dates are passed in as local moment objects, yet onChange will send back a mix of local and fixed-UTC-offset moments, and hence the examples violate that assumption. No one seems to know what is correct, because no one has made and documented such a decision, so the interpretation of the moment props keeps getting completely changed (aka \"fixed\") with little to no notice.. Have you tried passing selected={null}?. @jbschrades For use with redux-form, we're using this in a wrapper component\nhandleChange = (date, event) => {\n    if (event && event.type === 'change') {\n      return this.props.onChange(event.target.value);\n    }\n    const strDate = date && date.isValid() ? date.format(validFormats[0]) : '';\n    this.props.onChange(strDate);\n  }\nthen rendering with\n<DatePicker\n          selected={fromString(this.props.value)}\n          onChange={this.handleChange}\n          onChangeRaw={this.props.onChange}\nPart of that is to always store a string in the form value, but also to always pass a local moment object into react-datepicker. (Because the handling of mixed timezones is still rather awkward.)\n. I think any fix for #547 will be also fix this issue in a more general way. Would you mind giving #773 a spin?\nIMHO, it would also be nicer to have the less annoying behavior by default rather than having to explicitly enable it via a prop. Is it even worth making the current behavior of losing user input an option?. Fixed in #773. @martijnrusschen The main problem I was trying to solve, is that the date picker loses (or throws away) user input. (Which has resulted in various bug reports.)\nI think @bbmreed explained the problem reasonably well in #547. \n560 is basically a special case of the same problem. (User input is lost as soon as it can be parsed.)\n768 is another special case. (User input is lost on blur, which is especially unfriendly to users with disabilities.)\nI assume you are familiar with controlled vs. uncontrolled components.\nThe root of the problems is that DateInput is not a controlled component (though it does not behave like a fully uncontrolled component either). Because of that, DatePicker isn't controlling the input, which means the application can't either.\nSo, the obvious next step is to make DateInput a controlled component. When I went to do that, I realized it would no longer serve much of a purpose. Back when it was first created in 9fd86b2aa, it's main purpose seemed to be to handle keyboard events.  Now that has moved to DatePicker, and all DateInput does is store the current value of the input field, and convert the string to and from moments. Changing it to receive and emit raw strings (and not keep state internally any more) would leave it with very little purpose. (It could still be in charge of converting strings to dates and emitting moment events, but having a component for that seems like unnecessary complexity IMHO. If you disagree it could be kept though.)\nThe only major merge conflict now is with commit a95cd8666, which was just merged, and as mentioned in the bug solves a subset of the same problem in a more specialized way...  I'm not sure how you would want the two to be merged. (I'd be inclined to revert the special-case fix in favor of the more general fix, but since you just merged it, I wouldn't expect that to be well received without discussion first.) So... What are your thoughts on reverting that change since it would no longer be needed?\nI'll add some line-comments to try to explain specific changes, but if there's anything else you have questions about, feel free to ask.. @martijnrusschen Ok, rebased and squashed, though I haven't gotten a chance to re-test it yet.. Let me know if you want any other changes.. Have you tried adding the margin to the div.react-datepicker__input-container instead of the input itself? I think that does what you want.. > but perhaps allowing people to customize where react-datepicker__tether-element is attached would be more flexible.\nI believe the renderCalendarTo prop is what you are looking for.. It's a function that takes a moment object and returns whether or not it is a weekday.\nYou can see it in the example code at https://github.com/Hacker0x01/react-datepicker/blob/efa7edc043f04db8ed0a29365e0300c797be06e9/docs-site/src/examples/filter_dates.jsx#L19\nI suppose it would be good if that were included in the example code on the page as well.. @martinek Please avoid committing changes to build outputs like docs-site/bundle.js. It creates needless conflicts.\nOther than that, this looks good.. @spacebaboon I had assumed silently discarding user input was a bug rather than behavior anyone would want. (Much less as the default.)\nYou can still get the old behavior if needed via the onChangeRaw, onBlur, and value props, though I would highly recommend doing something to let the user know the date they entered is invalid / being ignored. (Which was not possible in the older version.)\n@obarta The previous behavior was to reformat your example as soon as the user hit 7, before knowing whether it was to be followed by tab or 78. (Which meant that, when combined with silently discarding invalid dates, when a user entered 4.23.1778<tab>, they would end up with 04/23/2017 instead, and no indication that there was a problem.). @obartra I actually thought about doing that, but onBlur didn't seem quite right. Reformatting user input to the preferred format seems like it would be a friendly confirmation, but only when the user is actually done entering text.\nonBlur happens not only when a user hits tab or clicks elsewhere on the page, but also switches tabs/windows and comes back. (such as to check their calendar) That's probably enough of an edge case that it could be ignored though... . Have you tried upgrading to 0.46.0? Pretty sure this is fixed.\nonChange still won't fire, because existing code expects a valid moment object, but you can use onChangeRaw and onBlur.. @martijnrusschen As long as we're already making API breaking changes, would it make sense to get #740 merged too?. If you want to reset the value of the input string as the user is typing, I think you can still do that via the value prop.\nThe problem with resetting the input every time selected changes, is that it's common to update selected from the onChange function, which results in issues like #560, where the input was getting reset while the user is typing. (If they happened to type an intermediate value that was parseable as a date.). @BillOTei No, that would result in resetting the input while the user is typing.\nSee my comment above. If you want to control the value of the input, you can do so via the value prop. If you choose not to control the value of the input, then the datepicker will do it via internal state.\nWe don't want to reset user input when the selected prop changes, because that usually happens in response to onChange(), which gets called while the user is typing.\nPerhaps we could add a .reset() method, so the datepicker's internal state can be cleared without needing to fully control the component.. @martijnrusschen Sure. It looks like we're going to be using this datepicker for the foreseeable future.. I think this should be suitable for 99% of uses, though users currently passing tether-specific props will need to update. The removed renderCalendarTo shouldn't be needed as much (or at all?), since the calendar now renders more naturally within the DOM rather than at <body>.\nIf anyone does still need renderCalendarTo, I expect we can come up with a workaround.. You can already customize the appearance of those days via the react-datepicker__day--outside-month CSS class.. #740 should fix this when it's merged.. I think the === 0 would handle null better. Treating null and undefined differently here seems surprising.\nmoment.utc().utcOffset(null) returns 0 rather than a moment object.\n. If I understand, you want to set extra props on the input element itself, without making the datepicker as a whole readonly or disabled? Have you tried customInput?. Why only when Enter, Tab, or Esc are pressed?. @buhuitou Some users like to (over)use a mouse. It seems weird to handle Tab differently from clicking to the next field.\nMost users also have a multi-tasking OS these days. I don't know whether switching to a different app should be considered the end of typing or just a pause in typing though. I expect there is no right answer there, and it will be wrong no matter what we do.. @martijnrusschen Sure.\n. What did you use to generate that nice graphic?\nThis seems like a duplicate of #405.\nFor now, as a workaround, I think you can change your import to import DatePicker from 'react-datepicker/lib/datepicker'; to get the unbundled/unminified version.. FWIW, We're currently on React 15.1.0, which doesn't use the prop-types package. The only harm in using components that use the prop-types package seems to be that we get deprecation warnings about how calling prop types directly is not supported. (They're somewhat misleading in that they blame the render method of a component rather than blaming React itself for the deprecated invocation.)\nI do not know how it interacts with 0.14.\nDo we actually support 0.14? The README would appear to indicate 15.5 is required for newer versions of react-datepicker, though package.json still says ^0.14.0 || ^15.0.0.. Should that be an extra option? Do we ever need/want to show both?\nHere's the scss we've been using in our apps:\n```\n// Styling for the mini-calendar\n.react-datepicker {\n  // [Omitted styling to change react-datepicker colors to match our app]\n.react-datepicker__current-month.react-datepicker__current-month--hasYearDropdown.react-datepicker__current-month--hasMonthDropdown {\n    // Avoid showing the month and year a second time when it has month and year\n    // dropdowns.\n    display: none;\n  }\n}\n```\n@martijnrusschen Would it make sense to do something like that ^ by default? It seems like a better default, and if anyone actually needs the old behavior they can still get it with custom styling.. selected is an optional prop. Just pass null to indicate no date is selected, then when today is selected that will be a change.. @guillaumepotier That sounds like a bug then. It should be setting the default pre-selection to the current day, respecting minDate and maxDate.\nJust checking, you're not somehow accidentally passing selected={moment.unix(0)} are you?\nAnyway, PRs welcome if you want to take a stab at fixing it. I'm guessing somehow preSelection is not being initialized correctly in inline mode.. @RobMaple Are you able to reproduce it with the examples at https://hacker0x01.github.io/react-datepicker/ ?\nDST ends on Nov 5 for me, but selecting days before and after seems to be working. (I tried clearing and not clearing at various points, but it didn't seem to make a difference.). How are you resetting the state?. I don't think we provide an official way to reset the datepicker's state. How are you resetting it?. Ok, I'm going to assume this is a duplicate of #888 unless you care to explain how this issue is different.. I'm not sure how often accessibility is being tested. PRs welcome. :smiley: \nFWIW, the project I'm working on also needs accessibility, though we're currently stuck on a fork off of an older version. It would be nice to upgrade of course, but that would require re-testing and it hasn't been a priority.... Duplicate of #932. Works for me.... @lizter I don't know offhand what the issue is, and I have other things I need to work on now, but it's probably enough for someone to get started.... @prayerslayer It appears to be a fragile test. It looks like it will always fail on the first 2 days of the month.. Would you mind making it clearer that this is adding another way to open/close the component from outside? (It can already be set statefully via the the .setOpen() method.)\nI'm all for allowing the state to be fully controlled via props, but in that case, the prop should always take precedence if it is specified. Otherwise we end up with confusing behavior, like the datepicker closes itself despite having isOpen={true}.\nIE, we should use the value of the prop instead of treating it as an edge-trigger to toggle internal state.. @lbelinsk When we call props.setOpen, and the user chooses not to change props.isOpen, how do we make sure the prop and the state are in correlation? It seems to me like we don't.. @lbelinsk I was thinking closer to 1, but making it so props.isOpen would actually allow you to control the state of the calendar. So the example in examples/set_open.jsx would stay the same, except that the opening and closing of the calendar would happen in response to the value of props.isOpen rather than in spite of it.\nTBH, I'm not sure how useful it is to control the openness of the calendar via props. It seems kind of akin to  controlling focus via props, which React has decided not to do. It's not quite the same, because it never makes sense to have two inputs have focus at the same time but it might make sense to have more than one datepicker render as open at the same time, though I expect that would require other code changes as we've made assumptions that kind of tied calendar openness to focus.\nI think we have some confusion in this discussion due to the original comment (and commit message) being slightly misleading. (See my first comment where I requested that be clarified.)\nIn case it wasn't clear enough earlier, the datepicker can already be opened and closed from outside the component, by calling .setOpen(true||false) on the instance of the datepicker that you want to open or close. (Much like focus on a regular input can be set by calling .focus() on it.) \nOf  course, calling .setOpen() is kind of fire-and-forget. It lets the user set the current open state, but not take full control over it. (Since the calendar continues to open/close as usual in response to clicks/focus/etc.)\nPerhaps another source of confusion is that this PR is adding a new setOpen prop, with the same name as the existing .setOpen() method. (Above, I was referring to the existing method, not the new prop.) Perhaps if we do keep the new callback prop it should be named onSetOpen to avoid confusion. (Much like React has .focus() and onFocus.)\nThat said, I still don't understand the motivation for this PR (other than perhaps misunderstanding what is already possible -- which is hopefully clearer now).\nIs it just about being able to open or close the calendar externally? Then perhaps the new example could be updated to use the existing API.\nDoes someone need callbacks in order to respond to the opening/closing of the calendar? Then it seems the new setOpen prop is all that's needed (though I'd still prefer it be renamed to avoid confusion).\nDoes someone need to take control over when the calendar opens or closes? Then we could add the isOpen prop, but we should actually honor it.\nPerhaps an example might help. This page shows how we are using react-datepicker at CCAP: https://wccabeta.wicourts.gov/lawEnforcementCalendar.html Note how clicking the little calendar buttons opens and focuses the corresponding datepicker. That is of course already possible.\nNow could someone elaborate on what it is that Wix is trying to do? (And perhaps how that is different from what the existing API allows?) . @martijnrusschen Sounds good, that way it's clear the changes to the code are independent from the changes to the unit tests.. Are there any problems besides the warning?. Duplicate of #972. Duplicate of #972. What version of Firefox are you using?\nI just tried with Firefox 55.0.3, and it looks normal to me.. @gabriel-card Can you check whether #1066 fixes it for you?. Fixed in #551. Is that all that's really needed?\nFrom some comments on #972 and #1060 it sounds like it might be... I suppose it would at least prevent people from mixing different versions of React, which seems to never go well.. The default is to open to the current date, or the closest in the allowed range. You can use openToDate if you want more control over what date it opens to.\nYour screenshot shows a date in the past. Have you checked whether it opens to maxDate when maxDate is in the future? If so, let us know, otherwise it looks like it's working as expected.. YYYY/MM/DD has no time parts. Add the time parts where you want them to appear in the dateFormat.. It's not acting as if the user selected a date when I tried it. For me, pressing escape is cancelling the selection and keeping the previous value whether it was null or a date.\nCan you reproduce the issue on the demo site, and provide steps to reproduce? . Why can't you use CSS? Does TypeStyle somehow break the browser's support for CSS?\nIf you need help with TypeStyle, I don't think this is the right place.\nIf you're allowed to use <style> tags, dist/react-datepicker.css is all that should be needed.\nIf your intent is to re-implement all the existing CSS, you'll want to look at the source in src/stylesheets/, though keep in mind that would basically be a fork you'll have to maintain yourself.. What browser doesn't support CSS these days? Some sort of react-native thing?. Ok... And you are somehow able to load that CSS into the browser, right?\nIs there some reason you're unable to load the react-datepicker CSS into the browser in the same way?. Have you tried passing minTime based on the selected date?\n. Do the other components happen to be react-select?. @rafeememon yarn.lock will keep us pinned at the previous version. I think this change is actually insufficient.\n@lymancheung Please use yarn add instead of editing the files by hand, and commit both files.. I think it would make more sense to wrap TextField in a component that follows the standard API.. It doesn't just add more flexibility. It also adds more complexity.\nWhat's the reasoning for not also adding customInputValue', 'customInputOnBlur, customInputId customInputClassName etc?. @Kerumen I think the plan is to bump the major only when we think the API is stable. Keeping it at 0 is also truly semver compliant since semver says\n\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.. It should normally close when clicking outside the calendar. See the demo page.\n\n\nWhat is the other input you are testing with? Is it react-select?. @lejoss Without knowing exactly what you did, it could be any number of things... It sounds like you're on the right track though. If you're including both the default style and your custom style, you may need to check on ordering or specificity. https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\nIf you need help learning CSS, there are plenty of resources throughout the web.. It sounds like you need to debug your code. Passing selected={null} seems to be working fine on the examples page.. Sure: Stop passing the value prop. It used to be ignored, but now is used to control the input value, so if you want the old behavior, just don't set the value prop.. That seems more like a placeholder than an actual value.. Please let us know if the placeholderText prop does not suit your needs.. Hmm, it seems like making react-input-mask understand it's own empty value would be a cleaner solution. Is there a reason it can't present itself as empty when it is empty?\nI don't know what you're trying to show by \"2nd issue\". It seems to work when I tried the demo site. Is it at all related to react-input-mask?. Prettier isn't really a replacement for eslint.\nI think it makes sense to use prettier for code formatting while continuing to use eslint for linting. There is a tiny bit of overlap (eg: semicolon enforcement), so they would need to be configured to not contradict each other.\nI also generally prefer keeping the actual change in a separate commit from the automated reformatting if possible. It makes it much easier to rebase any unmerged commits.\n. Should it just be a span instead?. As is, it ends up in the tab order, with no visual indication when it has the focus, and no label nor description for screen readers. . Backspace/delete still work, don't they? As a regular keyboard user (though not exclusively), I would typically use those keys to clear a field (or Ctrl-A + delete), not Tab + Enter.\nIs the clear button supposed to be for consistency with Edge? (I seem to remember seeing clear buttons on inputs in Windows, though I don't have a VM handy right now.) If so, do those close buttons appear in the tab order, or does tab go to the next actual field?\nAnyway, I suppose we can discuss that separately... Actually going to # on clear certainly seems buggy.. This is fixed by #1230 , isn't it?. #1289 has been merged. Thanks @tomtwttr .\nProtip for next time: If you write something like Fixes #issuenumber in your commit/PR, the corresponding issue will be closed when the fix gets merged.. Support for React 15 was dropped in #1047 .\nNo one is going to stop you from using React 15, but you'll be on your own since we decided not to spend resources supporting outdated versions of React.. The required prop will mark the input as required. See the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input (the required attribute)\nIf you want to use it to prompt a message, you can use it to prompt a message, but when and how you do that is up to you. If you want to use it to apply styling, you can use it to apply styling.. I think the problem is that the datepicker in popper behaves weird when resizing (#361), so the calendar ends up  moving on mouse down and you end up not finishing the first click.\nTo confirm, can you test on the fixedHeight example?\nAnother test is to click very deliberately: Press the mouse button down on the arrow, observe whether or not the arrow moves, and make sure the mouse is still over the arrow when you release the button.. This seems like a special-case of #382 .\n@prayerslayer has already moved all the moment code to src/date_utils.js in #1046 and #1052, so it should now be a fairly simple*** matter of implementing that API on top of Luxon.\nI expect PRs would be welcome if anyone cares to support Luxon.\n***: No guarantees as to how simple it will actually be.. I think we should be very careful about discarding user input. Discarding user input when the selected prop changes is not backwards compatible, because that can happen in the middle of typing in a date.\nThere was discussion of resetting the state on blur, which doesn't seem quite right but might not be awful. (Eg: User almost finishes typing, but switching apps forces them to start over. Of course, it's not like they should be typing that much into the input.)\nI see at least two workarounds which would not require incompatible changes:\nA) Take control of the input by passing value and onChangeRaw props. (This gives you a lot more flexibility than you may want to deal with.)\nor B) Make your intention to reset user input explicit by passing ref={p => { this.datepicker = p; }}, and change onClick to\nonClick = () => {\n    this.datepicker.clear();\n    this.setState({selected: moment()});\n  }\nB seems a bit hacky but might be less code... Note that calling .clear() will trigger onChange(null). (Not sure whether that was intentional...)\nWe probably could/should improve the default state management behavior, but it would probably be backwards incompatible, and there doesn't seem to be consensus on how it should work. Part of the problem stems from using onChange for both \"the user has selected a new date\" and \"the current input can be parsed as a date (but there is no indication the user is done typing)\".. That should already be possible. It looks like you'll want your component to render two inline date pickers, and use them to select a range. See the inline example and the date range example.\nLet us know if for some reason those features do not work well together.. Ok... Have you run into any problems in your attempt to create that single input? Have you tried rendering two ReactDatepicker instances as subcomponents for it?. Is this\n\ndatepicker_test.js has a test where it was inputing in one format and expecting it to be formatted in a different way.\n\nsupposed to be in reference to\n expect(\n   utils.formatDate(datePicker.prop(\"selected\"), \"YYYY-MM-DD\")\n ).to.equal(\"1982-12-30\");\n\n?\nThat's not expecting the input to be formatted in a different way. It's expecting the resulting selected value to have the same date as the date that was entered.\nIe, if \"12/30/1982\" is entered in a datepicker with dateFormat set to parse any of [\"YYYY-MM-DD\", \"MM/DD/YYYY\", \"MM/DD/YY\"], then that input should be interpreted as the 30th day of December in the year 1982. (Which means reformatting it as an ISO date should result in \"1982-12-30\".). Yes. Use popperPlacement.. @martijnrusschen Flow is a lot like a linter, in that it doesn't affect the runtime behavior at all, but it does require more annotations than eslint. They can be in comments, but it's prettier when they're not. Transpiling flow is as simple as removing the annotations, which we already seem to have babel configured to do.\nThe way we're using it at work, we have webpack configured to run flow, but it continues even if flow finds errors. (So you'll see the type errors but they don't get in the way of running the code.) On our CI server, we do reject changes that fail to typecheck, though initially we didn't.\nAnother advantage of Flow over TypeScript, is that React uses Flow, so our users are more likely to be familiar with it.\nI added #1307 as a simple example.. > Looks great, how do we make sure others are adding types as well when adding new functionality?\nWe could run flow from the build system so contributors would see flow errors right away, like with eslint. Another option would be to run it during testing, but it's often convenient to see type errors sooner rather than later.\n\nAlso, how do we migrate? It seems we can migrate piece by piece, but is there a way to measure progress?\n\nWe can migrate piece by piece, and even adding flow checking into the build can be it's own piece. (Though probably one that is worth doing [relatively] sooner rather than later, to prevent the other pieces from bitrotting.)\nFor measuring progress, I see React is using flow-coverage-report. I haven't used it yet, but it looks pretty straightforward.. @martijnrusschen Sure, this should be fine to merge.\nI was toying around with webpack integration, but unsure where it would be best. server.js and webpack.docs.config.js are two options. Is webpack.config.js actually used anywhere?. That looks more like a  problem in your code than in react-datepicker. The name prop is passed pretty much straight through to the <input>. You can check with React Devtools to be sure.\nWe can't debug your code of course (especially if you don't even provide it), but if you can narrow the issue down to a minimal reproduction we could take a look at that.. You see that ellipsis (...) in your screenshot? That is where you should be looking to see whether the name is being passed through correctly. (Both on <DatePicker ...> and <input ...>)\nI would guess the problem is in that renderDatePicker component. If you narrow down the code and it does turn out to be a problem in DatePicker, please do provide a minimal example showing the problem. . @nateha1984 Oh, that button didn't used to appear in the tab order, but an href was added recently.\nIt seems like it would be more accessibility friendly not to burden keyboard users and screen reader users with extra complexity  which is only really useful to mouse and touchscreen users.\nEven with a title the clear button still has accessibility issues for sighted keyboard users. It interferes with the tab order and it gives no visual indication that the close button is where the focus is.. #1008 wasn't closed yet. This seems like a duplicate, but please clarify if it is not.. Shouldn't most of these changes be in date_utils.js, or rather a new,  luxon-based version of that file?\nFor example, rather than removing cloneDate, the luxon version of that would just be the identity function.\nOr is the plan to drop support for moment? . Fine by me. :smiley: It will be a major breaking change, but at CCAP we're handling most conversions to/from moment in a single place, which should be relatively easy to switch to luxon. I don't know how common that is though. \nHow long would we expect to maintain a 1.x branch while users transition?. I don't think the months were intended to shift when selecting a day. It seems like a buggy interaction between monthsShown and inline. (Normally, the date picker would close after selecting a date, so re-opening to the last selected date is fine/expected, but staying open and shifting is weird.). To be clear, componentWillMount, componentWillReceiveProps, and componentWillUpdate are already deprecated in 16.3. They will continue to be supported until 17.0.\nDeprecation warnings will be enabled during some future release -- not necessarily 16.4 AFAICT.\nAnyway, we should plan to upgrade, but doing so will most likely involve dropping support for React <16.3.. componentDidMount won't trigger on prop changes. Did you mean they could be converted to componentDidUpdate? It seems kind of weird to setState from componentDidUpdate but the docs don't say it's not allowed...\nI guess I was assuming we would use the new getDerivedStateFromProps, but we might not have to.. @colinrcummings Sounds good to me. Do you mind opening a PR with your\nchanges?\nOn Mon, Apr 30, 2018 at 8:45 AM Colin Cummings notifications@github.com\nwrote:\n\n@aji https://github.com/aji, see here\nhttps://github.com/colinrcummings/react-datepicker/commit/4df29406d2d532014964135e221daf4d230d5df6.\nEverything was pretty straightforward--swapping the lifecycle names and\nchanging this.props to prevProps and nextProps to this.props inside--with\nthe exception of this line\nhttps://github.com/Hacker0x01/react-datepicker/blame/c8cc02330a90c70f837870741eff0cab9474b7a1/src/index.jsx#L177\nin DatePicker from this pull request\nhttps://github.com/Hacker0x01/react-datepicker/pull/1303. Changing it\nto:\nif (!this.state.focused) this.setState({ inputValue: null });\ncaused the following error:\nUncaught (in promise) Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\nBased on the example in this issue\nhttps://github.com/Hacker0x01/react-datepicker/issues/1295, which\nentails changing DatePicker's selected prop, I reused the\nhasPreSelectionChanged check for the inline prop check along with the\nfocused state check.\nLet me know your thoughts...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1367#issuecomment-385402263,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEg31XSxoefdpI_ljf7-66dMR-8RGbApks5ttxVxgaJpZM4Tgbu9\n.\n. As a frequent keyboard user, I appreciate your intentions, though your conclusion seems to be based on a common misunderstanding. All of the functionality needs to be accessible via the keyboard, and it is better to make that functionality readily keyboard accessible rather than forcing keyboard users to use controls that were designed for mousers. The keyboard UI should be designed for a keyboard, not for a mouse.\n\nI do think there is certainly room for improvement. Ideally, the date picker should be strictly better than plain input for selecting a date, for all users.\nRepurposing existing keybindings does mean we lose some of the functionality of a plain text box, but it also makes the bindings discoverable. Since dates tend to be pretty short, losing the ability to navigate within those 10 entered characters seems like a reasonable trade off for being able to more easily change the day/month/year. Is there a way the ease of use / discoverability / functionality trade off here can be improved? (Rather than just tilting more in one direction than the other?)\n\nThe overlay also likely needs to be linked to a trigger button rather than simply tied to input focus.\n\nHow would a user discover how to trigger the calendar to open? For mouse users, the calendar opens as soon as the click the input field to enter a date. Why shouldn't the calendar also open when a keyboard user focuses the input field to enter a date?\n\nThe browser focus actually needs to move from one control to the next so proper key handling can be achieved.\n\nI agree, though I will point out that from a UI perspective, the datepicker is one control. If I tab to a date picker, and then press tab again, focus should go to the next control, just like it does with regular input boxes, checkboxes, radio buttons, select inputs, and even texareas.\nPerhaps the scrollbars on these textareas (if you write a github comment) are a good example of how not every visible/clickable position needs to be focusable. The scroll up arrow, scroll down arrow, drag bar, and throughs can't be selected with the keyboard, but equivalent functionality is available via arrow keys/page up/page down/ctrl+home/ctrl+end or whatever other keybindings your browser may support.. @bcullman We don't use the time part, and I'm not sure Hacker0x01 does either...\nI agree that makes things complicated though, especially since not only can you have separate date and time inputs, but you can also have a unified datetime input.\n. Please don't commit build artifacts (docs-site/bundle.js). They will be updated during the release process. Other than that, this looks great. Thanks. \nCodecov is complaining about the diff coverage, but it looks like (mostly?) false positives. Eg. I think we can safely ignore it.. I think it's not gitignored because of the release script... Though, getting the release script to work with .gitignore is probably a better approach in the long run.\nWelcome to Contributors! :smiley: . I'm seeing the same test failures on master and v1.5.0, but I see they passed on v1.5.0 before. Any idea what may have changed?\nAnyway, I'll look into it.... Oh, it's another transient failure. :disappointed: \nWhat changed is today's date, so today is now rendered on both the last week of May and the first week of June (before the 1st). I expect it will start passing again next week, but it would be good to make the test more reliable.. I think 639fddd4aaa0def6a44995f29e82ffacd51cf430 could be reverted now. It was just to scroll back to the top after auto focusing the bottom example, wasn't it?. Thanks for the contribution! Is that still a problem? I thought I fixed it yesterday in #1390 .. See the customInput prop...\nWe're using a button with a small calendar icon to the right of the input, rendered outside react-datepicker. Eg: https://wcca.wicourts.gov/advanced.html We're only using customInput for the sake of aria-describedby.. javascript\n  handleCalendarClick = () => {\n    this.picker.setOpen(true);\n    this.picker.setFocus(true);\n  }\nI'm not sure both are still needed, but IIRC they were at some point. (Possibly quite a number of releases ago... We're going to be updating to the latest release soon.). Are you able to reproduce the problem on https://reactdatepicker.com/ ? It seems to be working as expected for me.... I originally factored out these functions from date_input. Currently, they are only used in datepicker, but they seemed more general purpose. If you decide we should keep the current date_input API (in case anyone is using it directly), then I think it makes sense to factor these out in order to be able to maintain consistency, but otherwise they could be inlined into datepicker.jsx if you prefer.. eslint-disable-line is needed here because eslint is not picking up on the fact that the prop is actually used via parseDate and safeDateFormat.. This is the new value prop, that now allows the app to control the value of the input, even when it needs to be set to something other than a valid date in the default format.. This is where the raw string events are now handled. (Basically replacing DateInput.handleChange and DateInput.handleChangeDate.). The input value is now maintained as state here, for backwards compatibility with existing apps which do not control it themselves via the value prop.. This avoids overriding user input as soon as the date is parseable, which solves #560 without requiring the app to control the input. (Though if you want tho require the app to control the input value when enabling multiple formats, this could be dropped.). When the datepicker is being used as a controlled component, the input value is determined strictly via the value prop.\nOtherwise, if the user has entered text, that string is maintained as component state, and we should show it. Otherwise, render the selected prop as a string in the appropriate format.. One of the things DateInput did was provide the default input type, though it did it via an if/else listing all the props to pass on both branches. This allows us to avoid that duplication.. Shouldn't this honor minDate and maxDate even when only one of the two is specified?. Minor nitpick: This should use PropTypes.oneOf (like PopperComponent) to avoid misleading warnings when an invalid string is passed in. (The old code has the same issue.). These function arguments are not used.. Please avoid committing build artifacts, as they produce unnecessary conflicts and noise.. Please avoid committing build artifacts, as they produce unnecessary conflicts and noise.. Please follow the existing indentation style. (Two spaces, and closing parenthesis aligned with the start of the line it was opened on.)\nSorry, we should probably automate this.... More (accidental?) indentation... Also below.. ref=\"string\" is deprecated in newer React. The new equivalent is ref={r => this.refs.monthContainer = r} instead, though most people seem to be taking it a step further by avoiding this.refs entirely, though I'm not sure there's any basis for the later beyond a prominent example.. Why should both be required? For dates we allow upper and lower bounds to be specified independently.. We don't always default to the current date, and it is not always valid. See calcInitialState()/ setOpen().. This looks like the file that was deleted with the conversion to Popper. Was it accidentally reverted somehow?. I have a slight preference for standard prop names (eg onChange) if we expect this component to be used directly, so users don't need to wrap the component in another component that does little more than renaming props.. These don't really seem like props that belong to a time component. The usual way to specify additional classes for a component is via a className prop.\nThis approach of special casing on every combination of options seems like it would be unmaintainable though, especially since we allow users to style the datepicker to match their apps.. Making this a function/predicate instead of an array might be more flexible, especially if whole time ranges need to be excluded, or if the exclusions need to depend on the date. (Eg, if it is based on available appointment times from a DB, or varies with DST.)\nIf we expect a fixed/predefined list to be much more common this could be easier to use though. Thoughts?. Indentation here and below.\nAlso seems like a lot of special casing.. @shadrech Yes, they're build outputs. \n@martijnrusschen Is there a way we could improve the release process so everyone doesn't need to manually avoid committing these sorts of changes?. Why was this example removed?. Wouldn't this test pass even if minTime and maxTime are ignored?. It might be a bit cleaner to use separate functions to parse a date and to get the current date. We can leave that for later though, since moment() did serve both purposes too.. @bjankord That sounds reasonable, though I think a better way to handle it would be to actively test  all the versions we support instead of delisting them.. Doesn't this need to take the utcOffset prop into account if we're trying to make it consistent with clicking a date?. This test was meant to avoid regressions of https://github.com/Hacker0x01/react-datepicker/issues/560#issuecomment-248445794\n(example in https://github.com/Hacker0x01/react-datepicker/issues/560#issuecomment-272533692). Note that no prefix of this new string is an ambiguous format for the new date format above.. I don't think it's a good idea to discard user input on every prop change.\nAs you can see from the failed test, this could result in discarding user input as they are typing.. This test used to check the moment passed to onChange. Why shouldn't it do that any more?. Why should this be a variable? Isn't it always going to be \"LLL\"?. This does seem like a good idea. :). We usually bump the version when doing a release, not with every PR.. Why the change from TestUtils.renderIntoDocument to ReactDOM.render?. Could you revert this line? The version will be bumped by scripts/release.sh the next time @martijnrusschen does a release.. If we were to use babel-plugin-flow-react-proptypes, these propTypes could be removed as they would be automatically generated from the types above.. This should get regenerated during the release process. Minor nitpick: Sharing this across the two tests and making it mutable seems a little weird, especially given that both tests will just reassign it first thing.. This could just be a separate local variable.. I'm assuming this is just for testing. It's a bit strange that it's not being updated from handleChange otherwise.. This might make more sense to define elsewhere, or just inline. It's not really moment-specific, and wouldn't make sense to redefine for every date library we might want to support.. I mean, if you want to turn this into a real example for users to copy, it should also update the input when a date is clicked. If it is just a temporary change for testing this specific issue, then it should be reverted before merging.. ",
    "Kerumen": "I totally agree with @aij. I think it's safe to move it into peerDependencies.\nFunny thing is, it's already on the README (https://github.com/Hacker0x01/react-datepicker#installation) so people should be using the library properly.. Yes I get what you mean. We can warn in the changelog/releases/readme and I'd be happy to help people if they file an issue regarding their project :). Some discussion which ended 1 year and a half ago. I think this should be reconsidered.\nI think that everyone who uses the datepicker are already using moment but if we want to be truely semver compliant, this can be released as a breaking change (major).. @aij Yes, seems legit too. npm won't auto-upgrade people and if they manually do it, they will know why their code breaks (if it breaks).. @martijnrusschen Conflicts resolved. I set ^2.0.0 as semver hence people won't have warnings if they install a previous version than 2.19.4. I suppose all moment >=2 works.. @martijnrusschen Thanks for the change! Can you cut a new release? react-popper@0.7.5 has a big perf issue and react-datepicker is currently resolving this version.. We currently have the same issue as @pniebrzydowski. We need the readOnly prop to hide the keyboard.\nPerhaps it was not the best naming for the API (and it's now the same as disabled) but you should name it something like disableNativeKeyboard which toggle the readOnly attribute on the native input.\nThis way, we will have a very clear difference and get back to the previous behaviour.. ",
    "eliseumds": "The distribution build is definitely wrong. It includes https://github.com/HubSpot/tether and https://github.com/lodash/lodash. Shouldn't be a problem if you are using Webpack and Dedupe Plugin, but it can be annoying. One could either:\n- Define both modules as externals in webpack.config.js (just like it was made for React, Moment and React-OnClickOutside)\n- Or split the code in app and vendor builds\n. I think lodash and moment could be good peer dependencies. And there could be multiple distribution bundles.\nAs I said, Webpack users shouldn't have big problems, but not everyone uses it. One thing that can reduce the bundle size a lot is requiring specific lodash modules instead of the whole library. Example:\n``` js\nimport sortBy from 'lodash/collection/sortBy';\nsortBy([...], 'fieldA');\n```\nThe same can be done with moment, so, even if the developers don't have these dependencies already installed, using react-datepicker wouldn't add up much to their final build.\n. Oh, sorry. It's actually not possible yet to import moment modules like that. There's an issue (https://github.com/moment/moment/issues/2373) regarding it.\n. @arqex :+1: \n. ",
    "edshadi": "I can't reproduce it now, I will reopen an issue if/when I do.\n. @morgante thanks for reproducing this, I'm not using min/maxDate anymore so I've moved passed this issue. The issue you're having is the same as this original one for sure.\n. ",
    "morgante": "I'm able to reproduce this using these options:\n<DatePicker minDate={moment().add(1, 'day')} />\nInitially, the calendar appears fine. But once I select a date (ex. November 1), it appears incorrectly, with November 1 occurring on a Monday.\n. ",
    "GalacticWeb": "+1 !\n. +1 !!!\n. ",
    "BrianBlandKY": "Hello, excellent work on this component. Heads up,  I do not believe the disabled props were fully merged into version 0.8.0. The ./src/datepicker.jsx does not match with the master branch. \n. ",
    "ntdb": "@martijnrusschen Thanks! Agreed, this is essentially an minimum viable implementation for my use case. There's lots of room to leverage Tether to a greater extent.\n. This change breaks local development according to the README\n. My solution is to pull both branches and reconfigure the gh-pages package.json file to point to my local version of master. It's not pretty but it works.\n. Naturally, I found some answers after logging an issue. :) I've traced it back to #129. I'm using a custom onBlur callback which causes this code to run, closing the calendar. My first thought is to simply add\njs\nthis.setState({\n  virtualFocus: true\n});\nto the increaseMonth and decreaseMonth functions... but handleBlur gets called after them and resets virtualFocus to false.\n. Ping @thenickcox: if you get the chance, please update this library to latest and report back. Thanks. :)\n. I'm experiencing this out of the box with 0.15.2 and React 0.14.2... but without an onBlur this time. I'll try to track it down.\n. Working on tracking this down. The problem seems to be with this code. Is there a case where virtualFocus is set back to true during that 200ms timeout?\n. Ping @at0g. Any thoughts on what's happening here? The original implementation of handleBlur, for reference.\nIt appears that onBlur is fired by the input when clicking on the popover (tested in FF, Safari, Chrome). This seems like a pretty fundamental problem... months are changeable if onBlur is set to a non-function. Unfortunately, that means that tabbing out of an input does not close the popover (observable in the examples); this is particularly problematic on mobile.\n. @martijnrusschen I don't but it looks like you figured it out! Something to do with button vs a?\n. @martijnrusschen should be good to go. :+1: \n. @martijnrusschen it's actually in datepicker.scss on my other PR. It's also here thanks to webpack. :)\n. ",
    "bkniffler": "Any chance for an updated npm version? \nThank you too!\n. Hey, thanks.. though I still get server-side:\n/xxx/node_modules/react-datepicker/node_modules/tether/dist/js/tether.js:406\n  var el = document.createElement('div');\n           ^\nReferenceError: document is not defined\nI updated to latest 0.10.0\n. ",
    "cschuch": ":+1: I'm also having an issue with this, that fix would solve my problem as well.\n. ",
    "goldenshun": "Thanks Martijn.  Do you have an ETA for when you can merge this in?\n. I ran into this with IE 9 and 10 as well.  It looks like it was introduced with v0.11 (I was not able to reproduce with v0.10).  I verified that this was not caused by my pull request #135.  I would appreciate a fix ASAP, I've been waiting on v0.11.\n. There are no errors being console logged as far as I can see.  I am attaching a screenshot, the steps to reproduce are:\n1. Open IE\n2. Go to http://cdn.rawgit.com/Hacker0x01/react-datepicker/master/example/index.html\n3. Click the first input field\n4. Select a date\n5. IE locks up, must be shut down\n\n. Thanks for the quick turn around guys.\nOn Jul 29, 2015 4:16 AM, \"Martijn Russchen\" notifications@github.com\nwrote:\n\nVersion 0.11.2 has been released!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/141#issuecomment-125911099\n.\n. I am unfortunately still seeing this issue in IE10.  IE9 seems to be working.  I was able to reproduce after upgrading locally and on the examples page.\n. It looks like this is still not working in IE10 as of 0.11.3. I unfortunately will not be able to debug until sometime next week but I would really appreciate a fix.\n. It looks like IE is handling the input's onChange event in an unexpected way, which is causing an infinite loop when you select a value from the calendar.  I made a modification that will fix this.  I am not sure if it is the best fix.  I cannot initiate a pull request though because I needed to add a hack to our version to fix another IE issue, which is preventing the calendar from closing when you press enter.\n\nSee changes made to fix the IE freeze issue:\nhttps://github.com/Hacker0x01/react-datepicker/compare/master...ShipCompliant:66389ec2811168b22bf1d14ba4e2f48fa73393ca\n. I pointed our app to https://github.com/croscon/react-datepicker.git, but\nthe infinite loop was still occurring in IE10.\nOn Thu, Aug 13, 2015 at 4:33 PM, Daniel Cousineau notifications@github.com\nwrote:\n\nNo problem!\nhttps://camo.githubusercontent.com/cb0284baebb09a44f53cb5dc50802394998031c1/687474703a2f2f6d65646961302e67697068792e636f6d2f6d656469612f77547a5053785a4271536f76652f67697068792e676966\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/141#issuecomment-130867294\n.\n. Good call.  Pointing to the correct branch, it does fix our issue.\n\nOn Thu, Aug 13, 2015 at 9:01 PM, Martijn Russchen notifications@github.com\nwrote:\n\nTo make sure, did you point it to the correct branch? Looking at his repo,\nit should be bugfix-ie-infinite-loop\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/141#issuecomment-130936359\n.\n. \n",
    "brianjmcneely": "As a related question, is there anything in React 0.14 that breaks this component? Just looking at what versions of React it allows in the package.json and wondering why. Regardless, it probably shouldn't allow versions below 0.13 if the error that @raorao mentioned is occurring on those versions.\n. @JustHereForTheBugReport You say that \"If the DatePicker is assigned a null value it will continue to show the last displayed value.\" How does that play out if the user wants to clear the input field?\n. ",
    "tonyhb": "You might want to look into parent vs owner refs:  https://gist.github.com/jimfb/0eb6e61f300a8c1b2ce7\nMaybe you're making the calendar in a component which isn't owned by your parent component.\n. ",
    "sjcrank": "I have a similar issue, here is an example:\nindex.js | uploaded via ZenHub\n. I discovered the cause of my problem: I was including React.js in my index.html (not through browserify), but importing react-datepicker via browserify. Since react-datepicker has a react dependency, react was added in node_modules. Thus, I had 2 conflicting Reacts which causes this error message.\n. ",
    "stevenleeg": "I'm having this issue as well (with a similar example as @sjcrank's). Any ideas as to what's going wrong?\n. op, I was doing the exact same thing. that's probably it then. thanks @sjcrank!\n. I'd love to see this as well. Is this a feature that's being worked on?. ",
    "shortstuffsushi": "Hi guys,\nI'm seeing this issue as well, and don't really know enough about React to understand where I'm going wrong. I'm including the DatePicker inside another component, just inside its render block boiling down to effectively this --\nreturn (\n    <div id=\"input-box\">\n        <input id=\"field1\" type=\"text\" ></input>\n        <DatePicker selected={this.state.date} onChange={this.onDateSelect} />\n        <input id=\"field2\" type=\"number\"></input>\n        <input id=\"field3\" type=\"number\"></input>\n    </div>\n);\n- I'm not including React or Moment externally, they're both browserify'd\n- I've used this.props.date, this.state.date, and an arbitrary local date var (I read passing props may be an issue)\nAny idea?\n. Hmm, I have no idea what's changed, but after uninstalling and reinstalling all of my modules (playing around w/ various date picker modules, decided to just dump the node_modules folder), it is now working.\n. ",
    "nadav-dav": ":+1: \n. ",
    "ljconde": "Getting this same issue still in 0.11..\n. Has there been any progress on this? I'm still getting \"document is not defined\" when upgrading to 0.11.4, and have to revert to 0.8.0.\n. Getting this same issue..\n. ",
    "gabroe": "I'm having the same issue... (node ssr)  If I require the datepicker on the server without even using it it shows that error. A workaround I found is that if I require it just before I open the picker I don't see it, in my case I will never render the picker on the server side, so it works.\nI tried to locate the issue and seems to be with tether itself, \nsee: \n``` javascript\nvar transformKey = (function () {\n  var el = document.createElement('div');\n  var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];\n  for (var i = 0; i < transforms.length; ++i) {\n    var key = transforms[i];\n    if (el.style[key] !== undefined) {\n      return key;\n    }\n  }\n})();\n```\nThat code gets executed when you include tether. Does this have to do anything with the way the datepicker is being bundled with webpack? Sorry I have to do something else so I cant keep digging. If I have time later I'll do it.\n. Well, I'm still using it, I just made a fugly workaround, fortunately the component that contains the datepicker has to re-render after some data gets loaded into the page so what I did is if I canUseDom I render the datepicker, otherwise I just render a simple input.\n``` javascript\nimport { canUseDOM } from 'react/lib/ExecutionEnvironment';\n...\ndateField = function(label, minDate, date, onChange){\n    if(canUseDOM){\n      var DatePicker = loadDatePicker();\n      return ;\n    }\n    return ;\n  },\n  loadDatePicker = function(){\n    if(DP == null){\n      DP = require('react-datepicker');\n    }\n    return DP;\n  };\n...\n\n     {dateField('from', moment(), f.getFromDate(), onFromChange)}\n\n``\n. Thanks!, It looks good, I like to usecanUseDom` instead of checking for document, my2c\nimport { canUseDOM } from 'react/lib/ExecutionEnvironment';\n. ",
    "Sridatta7": "Getting same error in 0.12. Are there any workarounds?\n. ",
    "andrerpena": "Just out of curiosity... Do you get any error for inconsistency between\nwhats been rendered on the client and on the server?\nEm Qui, 27 de ago de 2015 11:17, Gabriel Espinola notifications@github.com\nescreveu:\n\nWell, I'm still using it, I just made a fugly workaround, fortunately the\ncomponent that contains the datepicker has to re-render after some data\ngets loaded into the page so what I did is if I canUseDom I render the\ndatepicker, otherwise I just render a simple input.\nimport { canUseDOM } from 'react/lib/ExecutionEnvironment';\n...\ndateField = function(label, minDate, date, onChange){\n    if(canUseDOM){\n      var DatePicker = loadDatePicker();\n      return ;\n    }\n    return ;\n  },\n  loadDatePicker = function(){\n    if(DP == null){\n      DP = require('react-datepicker');\n    }\n    return DP;\n  };\n...\n\n     {dateField('from', moment(), f.getFromDate(), onFromChange)}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/137#issuecomment-135448688\n.\n. \n",
    "vladikoff": "Same error\nimport DatePicker from 'react-datepicker';\nwith\n<DatePicker />\nTrace:\n[1] [piping] error given was: ReferenceError: document is not defined\n  [1]     at /Users/a/b/c/node_modules/react-datepicker/node_modules/tether/dist/js/tether.js:406:12\n  [1]     at /Users/a/b/c/node_modules/react-datepicker/node_modules/tether/dist/js/tether.js:415:3\n  [1]     at i (/Users/a/b/c/node_modules/react-datepicker/node_modules/tether/dist/js/tether.js:7:22)\n[1]     at Object.<anonymous> (/Users/a/b/c/node_modules/react-datepicker/node_modules/tether/dist/js/tether.js:11:2)\n[1]     at Module._compile (module.js:460:26)\n[1]     at Module._extensions..js (module.js:478:10)\n[1]     at Object.require.extensions.(anonymous function) [as .js] (/Users/a/b/c/node_modules/babel-core/lib/api/register/node.js:214:7)\n[1]     at Module.load (module.js:355:32)\n[1]     at Module._load (module.js:310:12)\n[1]     at Function.module._load (/Users/a/b/c/node_modules/piping/lib/launcher.js:32:16)\n. ",
    "Hagbarth": "To anyone interested I created a small wrapper, that you can import instead of the DatePicker.\nIt just renders an input field serverside and on the client it passes the props along using ES7 spread syntax.\nI just \njs\nimport {default as DatePicker} from './IsomorphicDatePicker';\nAnd it seems to work fine.\nhttps://gist.github.com/Hagbarth/2eeb59bcbc303313a10e\n. ",
    "ShardPhoenix": "I also had this problem when running mocha tests, as the import of Datepicker fails because it tries to access 'document' before jsdom() is called in the test (which is what makes 'document' available). I fixed this by moving the require of Datepicker into the render() method of the component that uses it rather than having it as an import at the top.\n. ",
    "sujaykathrotia": "Fixed.\n. This issue is resolved now. Please check the merged PR where this issue was referenced.\n. ",
    "zackify": "i was just going to make this a pull request. Please merge this guys....\n. ",
    "truckingsim": "This freezes in IE11 and IE10 in 0.11.4.  We've been attempting to debug it to figure out why but haven't gotten anywhere with it yet.\n. The last travis build failed due to sauce labs failing.  It couldn't start up a browser to do the karma tests.\nJust an FYI as to why the build failed.\n. @martijnrusschen as @dcousineau said we had some back and forth on this.  I really wanted to leave the default values for popover in the popover component, so I did.  React will use the default value if you pass undefined as the prop value.  So this.props.popoverAttachment in datepicker.jsx has no default, and if not passed will return undefined.  In popover.jsx I moved the values for the three tether properties to props defaults.  So now this.props.attachment and the other two properties will use those if people use the datepicker without those props (see this line in the diff for the defaults).\nSo yeah, basically everything should work as it did before but with the added option of defining the location of the popover.\n. ",
    "dcousineau": "@martijnrusschen @sconno05 try my PR above and let me know if that works for you both (it's working for us)\n. No problem!\n\n. \n. Looks like Travis is still barfing on browser launching\n. @martijnrusschen hah, we actually had some back and forth on this today and IIRC were relying on an unset this.props.popoverAttachment being undefined (and thus allowing the defaultProps), however @truckingsim did all the work so I'll let him chime in when he wakes back up (I may have some wires crossed here).\n. ",
    "gsheppard": "Is there any update regarding this? This is definitely a must have for keyboard interactions.\n. Second this.\n. ",
    "creativej": "What's the status of this issue? It's such a basic form UX, would love to see tab working.\n. ",
    "jotaen": "This maybe somewhat unrelated, but I stumbled across the same error when using Datepicker with the customInput property: In this case you need to ensure, that you pass a stateful component, and not a functional one. That solves the error in this context, because stateless components cannot be refed in React.. ",
    "bjpbakker": "This bug also shows up in the onBlur example: https://hacker0x01.github.io/react-datepicker/#example-9\n. ",
    "blackjk3": "We are also experiencing the same behavior.  @benrlodge were you thinking about submitting a PR? Otherwise, we could look into it at well.\n. ",
    "benrlodge": "@blackjk3 this was just for a personal project so I haven't revisited it, likely won't in the future.\n. ",
    "gl-kunalgupta": "+1\n. ",
    "ge3kusa": "We use this in a few spots and one instance renders the dates correctly. The other wouldn't until I forced the start of the week to be Sunday by passing weekStart=\"0\" as a param. It cleared up after that. I'm not calling that a solution but it might lead to one in the future. At the very least it got us past the issue.\n. ",
    "tomhirschfeld": "+1 here, having the issue in IE. \n. ",
    "benmliang": "+1, on IE 11, The calendar doesn't close, flash back and forth.\n. Thanks a lot :+1: \n. ",
    "gweinert": "+1 here. On IE 11, 10, 9. I also see the calendar flash back and forth.\n. ",
    "fabricior": "+1\n. ",
    "rcoy-v": "I added a new issue #309 for the recent flashing bug in IE, as this thread is for a separate bug.\n. ",
    "akohout": "Ah I see, when I use a Moment object, it works. Maybe this should go anywhere in the documentation :) \n. ",
    "mordrax": "+1, wasted too much time on this (rereading docos)... before finding the solution here\n. ",
    "cnardi-dev": "Solution does not work for me.  I tried setting the date value in state to null, but now I can't select a date without getting the error:  TypeError: t.format is not a function\nAlso, the popover won't close.\nthis.state = {\n   startDate: null\n};\n\nOverall, I would say this implementation is not worthy of 250+ stars... can't even have a 'blank' input field which prevents it from working.\n. ^ This does not work for me. I set the initial state of the date to null, and called it on the selected prop, just like in the example above, but when I select a date from the calendar I get this repeated console error:\nUncaught TypeError: t.format is not a function\nThis prevents the calendar popover from closing.  However, the date value is set into the components state.\n. ",
    "JustHereForTheBugReport": "Alternatively, if default dates should be specified as such, which is apparent to me now:\n    <DatePicker selected={moment()} />\nI think this should be mentioned in the readme.\nMost of the React framework uses value={...} to specify the value, perhaps react-datepicker would consider doing the same.\n. As stated in the original post, currently the datepicker doesn't accept user input from the keyboard. I've submitted a pull request which contains a fix for this issue.\nSome notes on the behavior of this fix:\n- If the user enters an invalid date the onChange method will be invoked with a null value.\n- If the DatePicker is assigned a null value it will continue to show the last displayed value.\nConsumers of this fix will need to review their usage of DatePicker as this behavior is slightly different from the current behavior.\n. @bmcneely The user would need to place the cursor in the field and backspace the value. This will work fine and the value passed to the onChange method will be null as soon as the date becomes invalid or empty. However, do note that there is no way to programatically clear the date input display value with the pull request I have submitted. This is because the aforementioned commit breaks key functionality that would make this possible. If your use case requires programatically clearing the date input display value I would suggest checking out and testing commit 397a8e which was made prior to the changes that led me to raise this issue.\n. ",
    "antonholmquist": "+1\n. ",
    "cglantschnig": "thanks I was looking for that.\nA little \"How to start\"-section would be nice in the readme\n. ",
    "SpencerCDixon": "+1 needs more documentation on getting started for sure\n. Wow cant believe I missed this:\nimport moment from 'moment'; fixed my problem\n. can you paste a gist with the code? I can compare it to what I got working\n. Looks like a great improvement! +1\n. ",
    "mayuelei66": "\nit doesn't show Chinese version. So is there a detail example?\n. ",
    "sergeynechaev": "It seems that moment() locale overrides the DatePicker settings. I've got correct month names only after setting:\nmoment.locale('ru');\nbefore the DatePicker ... />\nAlso for correct weekday names I have to explicit set right names as props:\nDatePicker key={1} dateFormat=\"YYYY-MM-DD\" \n                                 locale=\"ru\" \n                                 weekdays={['\u0412\u0441', '\u041f\u043d', '\u0412\u0442', '\u0421\u0440', '\u0427\u0442', '\u041f\u0442', '\u0421\u0431']} />\n. ",
    "strivek": "you should downloadzh-cn.js from moment.js and   reuqire it  ,  then  set \njavascript\nmoment.locale('zh-cn');\nand set  DatePicker locale\njavascript\n getDefaultProps: function getDefaultProps() {\n        return {\n          weekdays: [\"\u5468\u4e00\", \"\u5468\u4e8c\", \"\u5468\u4e09\", \"\u5468\u56db\", \"\u5468\u4e94\", \"\u5468\u516d\", \"\u5468\u65e5\"],\n          locale: \"zh-cn\",\n          dateFormatCalendar: \"MMMM YYYY\",\n          moment: moment,\n          onChange: function onChange() {},\n          disabled: false,\n          onFocus: function onFocus() {}\n        };\n      },\nin react-datepicker.js\n. ",
    "lindslev": ":point_up_2: \n. Same thing with prop-types\n\n. just decided to purge node_modules ... most recent version of react-datepicker wasn't installed. closing, sorry!. ",
    "marr": "Fwiw, I created a hacker1 theme for a similar date-picker repo here github.com/zippyui/react-date-picker.\nIt allows for programmatically using an input, and has a cleaner implementation, imo.\n. ",
    "jnarowski": "What's the status on this pull request. I'd also like the input to be editable by users, since sometimes they are changing the year and that requires a lot of clicking otherwise. \n. +1\n. ",
    "andyparisi": "Awesome library! Can we please get some movement on this PR? Otherwise i'll be forced to switch libraries. :(\n. Thanks for the quick reply. I'll be keeping an eye out on the thread for updates :)\n. ",
    "dave-handy": "What questions still need to be answered?\n. ",
    "mydudechris": "Bump\n. Bump\n. I tried adding tabIndex to the list of props in the react-datepicker.jsx input render call to no avail. Couldn't get the property to show up anywhere. \n. ",
    "jaceechan": "just like Custom weekdays , let me set the months with other language\n. ",
    "quborg": "any suggestions ?\n. ",
    "tcwilson": "I'm having this same issue.  Also see #137\nI've tried to find a workaround using webpack, but have not been able to.  Currently there is code that attempts to delay the tether require, if window and document are undefined.  https://github.com/Hacker0x01/react-datepicker/blob/master/src/popover.jsx#L70\njavascript\n    } else if ( window && document ) {\n      var Tether = require( \"tether\" );\nUnfortunately, it seems webpack looks at all requires, bundles them up, and evaluates the code at once.  I don't know enough about webpack to go further than this right now.\n. ",
    "xrado": "any plan to merge this in?\n. @gpoole awesome thanks for info\n. ",
    "weebl2000": "If I remove the CSS it works as intended.\n. ",
    "mskeving": "Hey - I'm getting this same problem and I'm not sure how to fix it. Would you mind elaborating a bit more on how you fixed it?\nI'm rendering the datepicker with selected=moment(), but when I click on the input box to get the calendar to popup, I get this error.\n. Thanks for the clarification. I think I have everything set up correctly, though I'm still getting that error 'this._date.locale is not a function.'\nthis is what my code looks like using coffeescript:\n```\nReact = require('react')\nmoment = require('moment')\nDatePicker = React.createFactory(require('react-datepicker'))\nmodule.exports = React.createClass\n    handleChange: (date) =>\n        @setState startDate: date\ngetInitialState: ->\n    startDate: moment()\n\nrender: ->\n    DatePicker\n        selected: @state.startDate\n        onChange: @handleChange\n\n```\nI have also attached a screenshot of what my browser is displaying. You can see from the console that I do have moment available. The errors come up when I click on the date picker. I imagine I'm just missing something silly...\n\n. ",
    "montogeek": "@SpaceMacGyver How do you select a DOM element for the to option?\n. I am getting the same problem\n. @bekerov If you follow the code, renderCalendarTo uses renderElementTo on the TetherComponent, then it will use that element to append the component (https://github.com/souporserious/react-tether/blob/master/src/TetherComponent.jsx#L110), as you can see it accepts any DOM Node element (https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\nWhat I dont know is how you can select a DOM Node element to pass to the renderCalendarTo option\n. Hi @rafeememon I said __days but __day-name is good.\nI will create a PR later today!\nThank you :)\n. I will! :D\n. Thank you :)\n. Any updates on this?. We can't change it since it will lose react-datepicker__day styles, we have two alternatives:\nAdd react-datepicker__day-name class or add it to its container.\n. There are several ways:\n1. Change the class to __day-name and in the SCSS extend __day.\n2. Add the class __day-name without change the SCSS.\nSince this project is using BEM, I would vote for the second option, is another day, the modifier is that is the name day.\nLet me know what works best for you :)\n. ",
    "cowboy": "(Or is there a way to prevent the warning from displaying?)\n. Now that this has been added, can you publish a new release? Thanks!!\n. ",
    "arnars": "Or if this.state.date: null I get the following error:\nWarning: Failed propType: Required propselectedwas not specified inCalendar. Check the render method ofDatePicker.\nThis is when trying not to show date by default, but actually show the placeholderText.\n. ",
    "williamcoates": "If i set selected={this.state.date} and state is initialized to {date: null} this seems to work. Haven't had time to debug why. \n. ",
    "jeannei": "@williamcoates solution worked for me. \nI was getting the error \"Cannot read property 'clone' of undefined.\" I set the initial state to  {date: null} , and set the prop selected={this.state.date} and in the onChange callback updated date    this.setState({date: date}) \n. ",
    "nosoosso": "Ah, it looks like the same issue as #187.\n. ",
    "eversadia": "+1\n. ",
    "jasongonzales23": "Seeing the same issue. Using React 0.14.0 and 0.15.1 of the datepicker.\n. Oh holy wow. Here's the fix. Add this:\nrequire('react-datepicker/dist/react-datepicker.css')\nWhy is this not in the documentation!!!\n. Happy to add to the docs, will squeeze it in here in a sec, but now noticing another bug. The datepicker stays display: none right now. I can manipulate in the dev console and then it works until page refresh.\nWill create a new issue for this.\n. This addresses https://github.com/Hacker0x01/react-datepicker/issues/194\n. Closing this, this is a bug in my CSS.\n. ",
    "ctrlaltdylan": "Even with importing the CSS the datepicker has the same issue for me :disappointed: Playing around with it. ",
    "yasserzubair": "any solution for this yets?. ",
    "stphnlngdncoding": "If anyone is using CSS Modules, you have to import react-datepicker/src/stylesheets/datepicker-cssmodules.scss. ",
    "yoavgecht": "I'm using CSS Modules\nI import react-datepicker/src/stylesheets/datepicker-cssmodules.scss\nnot helping :(. frazboyz - you saved my ass \ud83d\udc4d . ",
    "timukasr": "I have a similar request: I want to whitelist/disable dates by a function. excludeDates or some other prop could accept a function, which takes a Date object as argument and returns true/false to enable/disable a date.\nOne use case is to disable all weekends. Currently I don't see a good solution (besides generating very large excludeDates array and hoping users don't navigate too far away).\n. Detecting weekends is not the main point here. It's more like \"disable/enable days based on a recurring rule\". If we have minDate and maxDate, we could generate all the days and use the current excludeDate prop. But with infinite range we cannot use this approach.\nWeekends was just one example. My current problem is to \"disable all the weekends and national holidays\". Hardcoding this to react-datepicker is not feasible (due to localities and whatnot) and also it is not very dynamic (others might have different rules to disable/enable days).\n. ",
    "liamhubers": "Fixed the issue, had to use moment.isoWeek() instead of moment.week(). Now the weeknumbers are consistent before and after using the datepicker.\n. Not quite sure why I'm getting conflicts..\n. Fixed it :)\n. Merged correctly, seeing anything weird I'm not seeing?\n. Nice catch, thanks!\n. ",
    "arnaudbenard": "Sounds good, I will do that ;)\n. @martijnrusschen done!\n. Let me know when you bump up the version number ;)\n. The last one isn't covered by the tests, I discovered it by using the lib in my app. I can fix it if you want to, no problem :)\n. done!\n. ",
    "PanJ": "@martijnrusschen your PR on https://github.com/Pomax/react-onclickoutside have been merged. I think you can reference the main repository instead. I'm trying to make it work on react 0.14.\n. ",
    "mwanji": "I have a similar error since moving to React 0.14, with react-datepicker 0.14.4.\n. ",
    "SpaceMacGyver": "The issue appears to be present on the examples page as well:\n\nCurrently, the examples do not work (clicking on date inputs does not cause the datepicker component to appear).\n. ",
    "trueter": "Does 0.13.0 work with React 0.14 though?\n. ",
    "thiagoc7": "you may have same issues with webpack when using two versions of react...\nhttps://medium.com/@dan_abramov/two-weird-tricks-that-fix-react-7cf9bbdef375\n. ",
    "ghost": "I would love this feature as well.\n. I just figured out a way to focus the input box.\nGive the DatePicker a ref, like so:\n< DatePicker ref=\"datePicker\"/ >\nThen somewhere call:\nthis.refs.datePicker.handleFocus();\n. It does for me.\n. Hi @rafeememon \nThank you for your response.\nI am hiding the element using visibility: hidden so that it still takes up the physical space it would on the screen and the calendar popup is where I would expect it to be.\nThe reason I need access to the actual click event, is that we are using this component in an application that needs to send some information to the server as soon as the input element is clicked on, and then once again when the calendar popup is closed.  Because the onChange event does not provide an actual javascript event and target element, I can not obtain the needed information when onchange is fired.  I need much more than simply a date from the onChange event.  I need to know which element on the screen received the date change.  This is because we have several date pickers on the screen, each with unique information assigned to them by the server.\nI hope that makes sense.\n. The funny thing about using onBlur, is that if I assign an onBlur event, even if the function does nothing at all, it causes the calendar popup to close when clicking on the arrows to move forward or back a month.  The month advance buttons in the calendar close the calendar when I have an onBlur event, whether it's empty or not.\n. The problem here is that the onChange callback only provides the newly selected date, but not the event associated with it. If we would get the event as lets say second parameter the following code should work:\nhandleInputChange(date, e) {  \n    e.persist();  \n    e.stopPropagation();  \n  }\nIt would work because AFAIK most modals are adding a click listener to window and then check if the click target (in our case the datepicker calendar) is the modal itself or a children of it.\nBUT\nReact datepicker is using the tether library to connect the date input field with the calendar component and tether is placing the calendar outside the modal before the closing body tag for positioning reasons\n\nSo technically the calendar is not inside your modal and thats why it closes. As I wrote already, exposing the React event in the onChange callback would probably solve this, since then you can stop the event from reaching the window onclick listener\n. encounter the same problem\nthe css is not applied\n. Probably related to #488 \n. Were having this issue exact issue too.\nWe can only reproduce it on one specific computer though, really weird.\n. I am also facing the same issue on Android and IOS, date pickers are not getting close after date selection,  it gives the flicker effect after choosing date but it dosen't close. . @timwilkbrandt Thanks.\nI have updated to version 0.43 and it is working now properly as expected.. Same issue here. How can I clear the date picker without explicitly using isClearable?. Thank you. This is exactly what I need. . Figure out it was a webpack include issue with an older version.. Any workaround to make it work with react 16? This is the only incompatible library that I have in my dependencies. ",
    "probablyup": "@Thomsos your solution definitely works, but doesn't address the issue that we shouldn't be touching the internals of @martijnrusschen's components.\nStill think it would be a good idea to add some refs. Will send a PR later on \n. Sweet, thanks @martijnrusschen :)\n. ",
    "ernani": "I am using the datepicker in a functional component where I use it along with redux-form and redux-form doesn't allow me to define ref in a functional component. All I could do is update the source code of this with my bare hands to avoid the error. Can this be made optional instead?. This is not working for me, I have a functional component, won't work with this. ",
    "comoon": "Sometimes the user is so lazy that if a default date is set, he(she) will never check whether the value is correct or not, and you have to leave the field empty. But in this case, if the valid date range is very later than now, he(she) will never find the valid.\n. ",
    "xzyfer": "Refactored and added test coverage for the inRange detection.\n. Sorry, timezones. It's late here I'll happily take a look in the morning.\nOn 30 Oct 2015 8:40 pm, \"Martijn Russchen\" notifications@github.com wrote:\n\nHaving some issues with creating an example for this awesome thing. Mind\nlooking into it what's going wrong? #219\nhttps://github.com/Hacker0x01/react-datepicker/pull/219\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/212#issuecomment-152473888\n.\n. Thanks!. You could be right. I mostly just rebased the existing PR. Without the\nexample page I don't have an environment to easily run this component so\nI'm relying on the tests.\n\nIMHO bringing back the example page would really help with contributions.\nOn 30 Oct 2015 7:31 am, \"Rafee Memon\" notifications@github.com wrote:\n\nIn src/day.jsx\nhttps://github.com/Hacker0x01/react-datepicker/pull/212#discussion_r43440114\n:\n\n@@ -22,12 +22,14 @@ var Day = React.createClass( {\n     if ( this.props.day.sameDay( this.props.selected ) )\n       classes.push( \"datepicker__day--selected\" );\n-    if ( this.props.day.inRange )\n\nI believe this should be this.props.inRange; day.inRange is a method that\nwill always be defined/truthy\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/212/files#r43440114.\n. \n",
    "Reggino": "Thanks for this!\n. ",
    "uniphil": "We're using readOnly at the moment for its #itworks factor, but it would be nice to have this approach reviewed for accessibility. Are there users who need the keyboard input to work?\n. @rafeememon only thing missing is the input of someone with experience using alternate input methods on mobile devices. Hopefully the readOnly approach doesn't add any barriers! I'll throw up a test page, and see if I can find someone to review usability.\n. This was just fixed in 4.3.0: https://github.com/Pomax/react-onclickoutside/issues/51\nShould we switch the dependency back to a ^ range on 4, or another range that still specifically excludes 4.2.0?\n. Cool, revert in a PR at #236 \n. thanks!\n. ooh this would be awesome!\n. We do this by hooking into onFocus, eg.:\njs\nconst SomeComponent = React.createClass({\n  getInitialState() {\n    return { selected: null };\n  },\n  handleFocus() {\n    if (this.state.selected === null) {\n      this.replaceState({ selected: doAnyKindOfMagicDefaultLookupHere() });\n    }\n  },\n  handleChange(newDate) {\n    this.replaceState({ selected: newDate });\n  },\n  render() {\n    return (\n      <DatePicker\n          onFocus={this.handleFocus}\n          onChange={this.handleChange}\n          selected={this.state.selected} />\n    );\n  }\n});\nThis works well for us since we do some computation at focus time to determine which date should be default. However, for simpler cases this is probably annoying to have to set up.\n. ",
    "preacher2041": "I need to implement this readonly functionality, how do I implement this readonly prop?\nThanks\n. Yep, I copied and pasted the code from the github example, I'm relatively new to React and to plugins but this particular one will solve the exact problem I have so keen to use it.\n. `var React = require(\"react\");\nvar DatePicker = require(\"react-datepicker\");\nvar moment = require(\"moment\");\nvar Application = React.createClass({\n    displayName: \"Example\",\n```\ngetInitialState: function() {\n    return {\n        startDate: moment()\n    };\n},\nhandleChange: function(date) {\n    this.setState({\n        startDate: date\n    });\n},\nrender: function() {\n    return ;\n}\n```\n});\nmodule.export = Application;`\nmoment and react have both been installed via NPM as well as the date-picker itself \n. Not sure what I've done but It seems to be working fine now. Thanks for your quick replies, it's a great plugin.\n. Having the same issue, its a bit frustrating for mobile users. That and the fact the keyboard still appears.\n. ",
    "corse32": "I doubt this reply is useful after a year, but anyway - https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L60 see the proptypes definition is bool, I think react itself expects these kinds of \"trigger\" HTML attributes to be a boolean prop, true = attribute, false = no attribute. . ",
    "wasinsandiego": "There is a use case that may be more common as CSS Modules becomes more widely used. Styling child class names you don't control from a css module class requires use of the :global exception.\nI ran across this issue when trying to make the date picker input fields be width: 100% for a responsive layout. Simply setting the input width to 100% doesnt work because the wrapper is styled with display: inline-block and no width defined. The following is how we styled the react-datepicker__input-container class to get this working:\n```css\n.myDatePickerWrapper {\n  width: 100%;\n  & :global .react-datepicker__input-container {\n    width: 100%;\n  }\n}\n.myCustomDatePickerInput {\n  width: 100%;\n}\n```\nWhile this works, we lose some features of CSS Modules within a :global block, like composes. There is also a potential risk of the class name used on the internal wrapper changing on us.\nPerhaps surfacing a 'width' property would work, but an option for wrapperClassName would be more flexible. I understand every corner case cannot be covered, but wanted to mention this use case as it may be common for anyone creating responsive layouts and using CSS Modules.\nGreat component by the way, thank you.. ",
    "Billy-": "+1 I have just run into this issue with css-modules. Imo being able to add a class to the top-level container is more important than the input itself... As you can always style that with .container-class input. ",
    "theSmaw": "Fixes https://github.com/Hacker0x01/react-datepicker/issues/225\n. Super, thanks!\n. ",
    "ryanwilsonperkin": "Sounds like this is likely an issue with confusion between UTC and local time. onChange sends back a momentJS object. I suspect you're doing something like\njavascript\nfunction handler(newDate) {\n  var dateStr = newDate.toString();\n}\nIf so, you can achieve the result you want by first casting to UTC like so:\njavascript\nfunction handler(newDate) {\n  var dateStr = newDate.utc().toString();\n}\n. Can you post a snippet of your code that's interacting with the datepicker?\n. I suspect this is because you're storing finishedReading in your state as a string, rather than a moment object, which is what DatePicker expects for the selected prop. Do you still have the issue if you change your function to:\njavascript\nhandleFinishedReadingChange(date) {\n    console.log(\"ii: \" + date.utc().toString());\n    this.setState({\n        finishedReading: date.utc(),\n    });\n}\n. If you remove the onChange event handler, then you are basically allowing the datepicker to simply render it's internal state, ie an uncontrolled component. The date is as expected because the datepicker is handling the moment dates properly internally.\nYour shouldComponentUpdate is only updating this component when the id changes, you don't have any references to that in the rest of the snippet you uploaded so I assume it's tied to some other functionality in your app. However, since you're not allowing the component to update you won't be passing in the new value to the datepicker's selected prop.\nCan you try something like this:\n``` jsx\nimport React, {Component} from 'react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nexport default class BookForm extends Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  // Initial value is the current time in UTC\n  // Additionally, subsequent moments should all be in UTC now\n  finishedReading: moment.utc()\n}\n\n}\nhandleFinishedReadingChange(date) {\n    console.log(\"ii: \" + date.toString());\n    this.setState({\n      finishedReading: date,\n    });\n  }   \nshouldComponentUpdate(nextProps, nextState) {\n    // Test dates instead of id\n    // Or, chain a series of needed conditionals\n    return this.state.date != nextState.date;\n  }\nrender() {\n    return (\n      \n\n\nFinished reading\n\n\n\n\n\n\n    );\n  } \n}\n``\n. @janimattiellonen what happens if you initially pass innullas the value for theselected` prop?\n. Fixes #229 \n. ",
    "janimattiellonen": "Thanks! Sounds reasonable. I'll try that.\n. Probably my code that errors, but the first time I select a date, the handler gives me the day before. If I select again, a correct date is given.\n. I stripped the code from unrelated stuff. With this code I still get the weird functionality.\n```\nimport React, {Component} from 'react';\nimport DatePicker from 'react-datepicker';\nexport default class BookForm extends Component {\n    constructor(props) {\n        super(props);\n    this.state = {\n        finishedReading: null\n    }\n}\n\nhandleFinishedReadingChange(date) {\n    console.log(\"ii: \" + date.utc().toString());\n    this.setState({\n        finishedReading: date.utc().toString(),\n    });\n}\n\nshouldComponentUpdate(nextProps, nextState) {\n    return this.state.id != nextState.id;\n}\n\nrender() {\n    return (\n        <div className=\"component\">\n            <form className=\"form-horizontal\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"finishedReading\" className=\"col-sm-2\">Finished reading</label>\n                    <div className={'col-sm-8'}>\n                        <DatePicker\n                            selected={this.state.finishedReading}\n                            dateFormat=\"DD.MM.YYYY\"\n                            onChange={::this.handleFinishedReadingChange}\n                        />  \n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}\n\n}\n```\n. If I remove shouldComponentUpdate(), I get \"t.format is not a function\"\n. Even if I remove the call to setState(), I still get the same. \n. If I remove \"onChange={this.handleFinishedReadingChange}\" then the date is as expected.\n. Apparently setting a proper utc value in constructor \"fixed\" this. However, I don't want to use a default date.\n. Sorry, no. I switched to jQuery datepicker :(\n. No problems. Thanks for your time.\n. ",
    "tomdev": "+1 @ryanwilsonperkin for helping each other out \n. ",
    "pablolmiranda": "The problem happens when you pass anything that is not a moment object to DatePicker.selected prop.\nI think it will be nice to fix the issue.\n. Good point. This is why the 'Clear datepicker input' example is broken.\nIf you clean the date picker you receive null on the onChange handler, what will break the component internally. After that happens, every single change on the date will be wrong. You will see the date inside the input field correct, but behind the scenes the date object returned in the handler will be incorrect.\nAnother consequence is, you can not use it as a controlled component and initialize in a empty state.\n. @rafeememon, I will use the 'Clear datepicker input' as a base example. We can change the handler function to:\nhandleChange (date) {\n    console.log(date && date.valueOf()); // This line will show the problem\n    this.setState({\n      startDate: date\n    })\n  },\nAssuming you choose 10/27/2016 on the calendar, the value for date.valueOf() will be 1477526400000. When you build a new Date object using this value you will receive the follow output Wed Oct 26 2016 17:00:00 GMT-0700 (PDT). \nI would expect a timestamp related to 10/27/2016 and not 10/26/2016. \nMakes sense?\n. ",
    "fay-jai": "I'm also running into the same issue as @janimattiellonen: when I click on a day for the first time, it brings me to the day before. However, when I click on it again, it selects the correct day. Similar to his situation, I want to have an initial state for the date to be undefined because this allows the datepicker to not show a selected date by default.\nIs there a workaround for this?. ",
    "vladimir-konnov": "Will duplicate also here from https://github.com/Hacker0x01/react-datepicker/issues/627#issuecomment-311668586\nGuys, I have the same issue with wrong date.\n1. I scroll months say from June to August.\n2. Then for instance I click 08/01/2017 and get 07/31/2017.\nHas anyone found a fix for this issue with wrong date? I'm using react-datepicker v.0.48.0\nP.S. Seems that scrolling months is essential. Guys, I have the same issue with wrong date.\n1) I scroll months say from June to August.\n2) Then for instance I click 08/01/2017 and get 07/31/2017.\nHas anyone found a fix for this issue with wrong date? I'm using react-datepicker v.0.48.0\nP.S. Seems that scrolling months is essential. @romanveryovkin I have found workaround for my case:\nmoment.utc(date.valueOf() + date.utcOffset() * 60000)\nI don't know if it works in your case or in every case.. ",
    "jessica-branchizio": "so ummm anyone figure this out @vladimir-konnov?. ",
    "mhubenthal": "@martijnrusschen sorry, I should have been more specific...we're trying to use an older version of react-datepicker (we haven't made the jump to React 0.14.0 yet). Older versions of react-datepicker specify \"react\": \">=0.12 <0.14\", but I think they should specify \"react\": \">=0.13 <0.14\". It seems that React 0.13.0 replaced getDOMNode with findDOMNode. Thanks!\n. @martijnrusschen thanks for the help. React-datepicker v0.6.2 is the most recent version that will work with pre 0.13.0 React, FYI. \n. ",
    "akhayoon": "how do you access these refs @yaycmyk ?\nBasically, I want to focus on the datepicker input element using these refs.\n. ",
    "shackbarth": "Great, thanks! But please consider not readopting the carat as soon as react-onclickoutside is fixed on npm. There's nothing I like better than knowing that my build is going to work tomorrow as well as it works today if I don't mess anything up.\n. ",
    "cracdev": "you need to add this \"react-onclickoutside\":\"4.1.1\" it's seems the component has another version that is the problem \n\"react\": \"0.14.2\",\n\"react-dom\": \"0.14.2\",\n\"react-datepicker\": \"0.15.2\",\n\"moment\": \"2.10.6\",\n\"react-onclickoutside\":\"4.1.1\"\nlet me know \n. ",
    "angelinacc": "Looks like the issue is resolved, thanks guys.\n. ",
    "tiffting": "I'm having a problem with this, too. This bug prevents me from associating a <label> with the datepicker for a11y.\n. We could not successfully upgrade to 0.16.0, so this isn't a solution right now. Our project fails to find react-datepicker when we try to upgrade.\n. Same here. Thanks, @martijnrusschen! \n. ",
    "xabikos": "I just upgraded to 0.16.1 and I can see the id is populated correctly. Thanks a lot @martijnrusschen \n. I have the same behavior with IE11. Currently I am using version 0.17 but this has some performance issues as on onBlur is called multiple times something that makes the component slow.\n. ",
    "guocheng": "@rafeememon thanks. That's what I am doing atm. I thought there might be a more elegant solution.\n. ",
    "chill5018": "I know this issue is closed, however for others that may stumble across this problem, here is another solution. \n```\nhandleChange = (name, date) => {\n    var change = {};\n    change[name] = date;\n     this.setState(change);\n  };\n....\n\n\n```\nThis will update the state to be: \nstate: { \n  startDate: moment(),\n  endDate: momentDate\n}\n. ",
    "arahansen": "Comments removed! :)\n. Hey, this is something I would actually like to tackle. As far as design is concerned, what would everyone find more useful?\nA timepicker that's available as a separate input element from the existing datepicker?\nOr somehow integrate the timepicker into the datepicker popup?\nI'm personally leaning towards a separate input element. I think it would allow more flexibility for usage.\n. ",
    "vmakhaev": "Done\n. ",
    "strawbrary": "Oh I just saw a .npmignore was added in efc1587 but I guess it doesn't work if it's not in the project root.\n. Thanks.\nBtw there is an npm package called pkgfiles which will show you a preview of what files will be published. Can be useful for getting some insight into npm's behavior.\n. No worries, it's happened to the best of us. :) Thanks for the quick turnaround on the fix.\n. Looks good :+1: \n. @rafeememon Adding typeof document !== 'undefined' works, thanks.\n. Hi @rafeememon, here's a little about my use case and why I'm combining range + filter. I'm creating a UI for querying a slightly offbeat analytics API. When requesting weekly data, the API strictly defines a week as starting on Monday and ending on Sunday, and the API can only return a full week's data, no partials. If you asked for data from Monday to the following Monday (8 days), you'd actually get 14 days of data because the end date includes the start of the next week. Since this would be confusing to the user, I'm restricting which dates can be selected. So in my case I want the unselectable days highlighted because they are part of the range of data returned, but perhaps there are use cases where that wouldn't necessarily be true?\n. I'm no designer, so I just went for a darker gray #999 and that seems okay-ish.\n\n. ",
    "thenikso": "+1\n. ",
    "ardcore": "+1\nwhile minDate and maxDate are easy to validate manually in onChange callback, I believe datepicker should be responsible for the whole validation part (i.e there are also excluded dates)\n. ",
    "lucygilbert": "All the comments have now been addressed.\n. I'll have a look into it. I can't seem to recreate it (Chrome/OSX), but it has appeared before, with early versions of my code. I think it's a problem surrounding setting of focus in the onInputClick.\n. After testing in a few different browser/configurations, I think the problem is just that 100 milliseconds was an over-optimistic wait time for the setTimeout.\n. Hmm, I'll take a look, it might be the case that it was simply previous versions of the code were too brittle and so needed it. It might work without it now.\n. Okay. The forceUpdate in handleBlur can be removed. The one in onInputClick is necessary.\nI'm still working out exactly why this happens but, if you open the date picker then make at least 2 clicks inside it (not selecting a date, just things like changing the month or year), then the calendar will reopen itself if you click in the date input field to close it.\n. I've worked it out. Without the forceUpdate in onInputClick, React allows the date input field to lose focus after the second click inside the date picker (because after the first click it updates because the state properties are different, but after the second click the state properties being set are always the same, so they never trigger an update). \nSo when you click in the input field to close the date picker, it also triggers handleFocus, reopening the date picker.\n. triggerUpdate is just used to force a re-render, because the state has to have changed for the component to update.\nIt could probably be refactored into a forceUpdate, but I noticed that the code doesn't currently use a forceUpdate anywhere, and there are people who are totally against using forceUpdate.\nIf a forceUpdate is okay, then that could be used instead.\n. I hadn't considered that, I'll work the setState back into the code.\n. I'll fix this along with the handleFocus setState.\n. ",
    "victorpavlenko": "Its not worked \n. ",
    "stephenpascoe": "For reference @martijnrusschen's solution works: $('.datepicker__input').click()\n. ",
    "jxm262": "I'd be a fan of this feature as well.  I'm running into an issue where i need to manually control the focus and blur\n. ",
    "dimdimbe": "Is there someone working on this autofocus feature right now? \nIf no, maybe i can help tonight , i need this feature so badly as well so :D \n. ",
    "zelias500": "@jxm262 why not just use vanilla js to focus/blur the input element?\n```\nexport default class Datejumper extends Component {\n    toggleDate = this.props.toggleDate;\n    shownDate = this.props.shownDate;\nfocusHiddenDatepicker () {\n    document.getElementById('date-jumper').focus();\n}\n\nrender () {\n    return (\n        <div className=\"btn btn-default date-jump\"\n             onClick={this.focusHiddenDatepicker.bind(this)}>\n            <i className=\"fa fa-clock-o\"></i>\n            &nbsp;Jump To Date\n            <DatePicker selected={moment(this.shownDate)}\n                        onChange={this.toggleDate}\n                        id=\"date-jumper\" />\n        </div>\n    );\n}\n\n}\n```\n. any updates here? would love to use inline styles with this component. ",
    "MonkeyAlex": "Thanks @zelias500 , your \"focusHiddenDatepicker\" method saved me day.\nThe calendar is now opening happily on button click.. ",
    "adamlibusa": "There is yet a more elegant way using a ref:\n<DatePicker ... ref={(datepicker) => { this.datepicker = datepicker }} />\nand then just:\nfocusHiddenDatepicker () {\n        this.datepicker.input.focus();\n    }\n. ",
    "JeffGuKang": "I think it will better to remain customization points including month such as weekdays, months and weekStart for various use. \nAnd setting the locale by a country code will be the best way, in my case. \n<DatePicker\n  locale=\"ko\"\n  selected={this.state.endDate}\n  onChange={this.handleChangeDate}\n/>\nNow I am applying a localization by import from moment\n```\nvar moment = require('moment');\nrequire('moment/locale/ko');\n\n```\nActually, I had not known how I could do localization until I found docs from moment.js\n. \ud83d\udc4d \n. ",
    "codecov-io": "Current coverage is 93.61%\n\nMerging #277 into master will increase coverage by +0.98% as of 578f97e\n\ndiff\n@@            master    #277   diff @@\n======================================\n  Files            9       9       \n  Stmts          190     188     -2\n  Branches        37      38     +1\n  Methods         90      88     -2\n======================================\n  Hit            176     176       \n+ Partial          4       3     -1\n+ Missed          10       9     -1\n\nReview entire Coverage Diff as of 578f97e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.60%\nBranch #298 has no coverage reports uploaded yet.\nNo diff could be generated. No reports for master found.\n\n\nUncovered Suggestions\n\n+1.52% via src/date_input.jsx#82...85 \n+1.14% via src/datepicker.jsx#100...102 \n+0.76% via src/util/date.js#70...71 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.59%\nMerging #306 into master will decrease coverage by -0.07% as of d4f8b9c\n\ndiff\n@@            master    #306   diff @@\n======================================\n  Files            9       9       \n  Stmts          228     226     -2\n  Branches        47      47       \n  Methods        110     109     -1\n======================================\n- Hit            209     207     -2\n  Partial          5       5       \n  Missed          14      14\n\nReview entire Coverage Diff as of d4f8b9c\n\n\nUncovered Suggestions\n\n+1.33% via src/date_input.jsx#81...83 \n+1.33% via src/datepicker.jsx#99...101 \n+0.88% via src/calendar.jsx#94...95 \nSee 6 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.66%\nMerging #307 into master will increase coverage by +0.07% as of 06cb1cf\n\ndiff\n@@            master    #307   diff @@\n======================================\n  Files            9       9       \n  Stmts          226     228     +2\n  Branches        47      47       \n  Methods        109     109       \n======================================\n+ Hit            207     209     +2\n  Partial          5       5       \n  Missed          14      14\n\nReview entire Coverage Diff as of 06cb1cf\n\n\nUncovered Suggestions\n\n+1.32% via src/date_input.jsx#81...83 \n+1.32% via src/datepicker.jsx#100...102 \n+0.88% via src/calendar.jsx#95...96 \nSee 6 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.66%\nMerging #308 into master will increase coverage by +0.07% as of 97344b8\n\ndiff\n@@            master    #308   diff @@\n======================================\n  Files            9       9       \n  Stmts          226     228     +2\n  Branches        47      48     +1\n  Methods        109     110     +1\n======================================\n+ Hit            207     209     +2\n  Partial          5       5       \n  Missed          14      14\n\nReview entire Coverage Diff as of 97344b8\n\n\nUncovered Suggestions\n\n+1.32% via src/date_input.jsx#81...83 \n+1.32% via src/datepicker.jsx#99...101 \n+0.88% via src/calendar.jsx#94...95 \nSee 6 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.49%\nMerging #310 into master will increase coverage by +2.76% as of 2403856\n\ndiff\n@@            master    #310   diff @@\n======================================\n  Files            9       9       \n  Stmts          230     218    -12\n  Branches        48      47     -1\n  Methods        110     106     -4\n======================================\n- Hit            211     206     -5\n+ Partial          5       3     -2\n+ Missed          14       9     -5\n\nReview entire Coverage Diff as of 2403856\n\n\nUncovered Suggestions\n\n+1.38% via src/datepicker.jsx#90...92 \n+0.92% via src/calendar.jsx#95...96 \n+0.46% via ...dropdown_options.jsx#69...69 \nSee 3 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.61%\nMerging #312 into master will increase coverage by +0.12% as of e29b7fb\n\ndiff\n@@            master    #312   diff @@\n======================================\n  Files            9       9       \n  Stmts          218     223     +5\n  Branches        47      47       \n  Methods        106     107     +1\n======================================\n+ Hit            206     211     +5\n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of e29b7fb\n\n\nUncovered Suggestions\n\n+1.35% via src/datepicker.jsx#97...99 \n+0.90% via src/calendar.jsx#95...96 \n+0.45% via ...dropdown_options.jsx#69...69 \nSee 3 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.32%\nMerging #313 into master will decrease coverage by -3.17% as of a7bfd8e\n\ndiff\n@@            master    #313   diff @@\n======================================\n  Files            9       9       \n  Stmts          218     219     +1\n  Branches        47      47       \n  Methods        106     105     -1\n======================================\n- Hit            206     200     -6\n- Partial          3       6     +3\n- Missed           9      13     +4\n\nReview entire Coverage Diff as of a7bfd8e\n\n\nUncovered Suggestions\n\n+1.37% via src/datepicker.jsx#86...88 \n+0.91% via src/datepicker.jsx#94...95 \n+0.91% via src/calendar.jsx#95...96 \nSee 6 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.49%\nMerging #317 into master will not affect coverage as of 68e648d\n\ndiff\n@@            master    #317   diff @@\n======================================\n  Files            9       9       \n  Stmts          218     218       \n  Branches        47      47       \n  Methods        106     106       \n======================================\n  Hit            206     206       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 68e648d\n\n\nUncovered Suggestions\n\n+1.38% via src/datepicker.jsx#90...92 \n+0.92% via src/calendar.jsx#95...96 \n+0.46% via ...dropdown_options.jsx#69...69 \nSee 3 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.66%\nMerging #319 into master will increase coverage by +0.34% as of 1f6621f\n\ndiff\n@@            master    #319   diff @@\n======================================\n  Files            9       9       \n  Stmts          219     204    -15\n  Branches        47      44     -3\n  Methods        105     100     -5\n======================================\n- Hit            200     187    -13\n+ Partial          6       4     -2\n  Missed          13      13\n\nReview entire Coverage Diff as of 1f6621f\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 90.13%\nMerging #323 into master will decrease coverage by -1.19% as of 45d1d9f\n\ndiff\n@@            master    #323   diff @@\n======================================\n  Files            9       9       \n  Stmts          219     223     +4\n  Branches        47      48     +1\n  Methods        105     105       \n======================================\n+ Hit            200     201     +1\n- Partial          6       7     +1\n- Missed          13      15     +2\n\nReview entire Coverage Diff as of 45d1d9f\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.74%\nMerging #326 into master will increase coverage by +0.42% as of 05add33\n\ndiff\n@@            master    #326   diff @@\n======================================\n  Files            9       9       \n  Stmts          219     206    -13\n  Branches        47      45     -2\n  Methods        105     101     -4\n======================================\n- Hit            200     189    -11\n+ Partial          6       4     -2\n  Missed          13      13\n\nReview entire Coverage Diff as of 05add33\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.82%\nMerging #327 into master will increase coverage by +0.16% as of 40b8bee\n\ndiff\n@@            master    #327   diff @@\n======================================\n  Files            9       9       \n  Stmts          204     208     +4\n  Branches        44      45     +1\n  Methods        100     101     +1\n======================================\n+ Hit            187     191     +4\n  Partial          4       4       \n  Missed          13      13\n\nReview entire Coverage Diff as of 40b8bee\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #328 into master will increase coverage by +0.24% as of a944ca8\n\ndiff\n@@            master    #328   diff @@\n======================================\n  Files            9       9       \n  Stmts          208     189    -19\n  Branches        45      42     -3\n  Methods        101      94     -7\n======================================\n- Hit            191     174    -17\n  Partial          4       4       \n+ Missed          13      11     -2\n\nReview entire Coverage Diff as of a944ca8\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #330 into master will not affect coverage as of 9158d19\n\ndiff\n@@            master    #330   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          11      11\n\nReview entire Coverage Diff as of 9158d19\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #331 into master will not affect coverage as of ed7b372\n\ndiff\n@@            master    #331   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          11      11\n\nReview entire Coverage Diff as of ed7b372\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #335 into master will not affect coverage as of 96f0396\n\ndiff\n@@            master    #335   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          11      11\n\nReview entire Coverage Diff as of 96f0396\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #336 into master will not affect coverage as of c56e6c7\n\ndiff\n@@            master    #336   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          11      11\n\nReview entire Coverage Diff as of c56e6c7\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.10%\nMerging #339 into master will increase coverage by +0.04% as of 45661b0\n\ndiff\n@@            master   #339   diff @@\n=====================================\n  Files            9      9       \n  Stmts          189    190     +1\n  Branches        42     42       \n  Methods         94     95     +1\n=====================================\n+ Hit            174    175     +1\n  Partial          4      4       \n  Missed          11     11\n\nReview entire Coverage Diff as of 45661b0\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.06%\nMerging #341 into master will not affect coverage as of dfd3cc6\n\ndiff\n@@            master    #341   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          11      11\n\nReview entire Coverage Diff as of dfd3cc6\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.53%\nMerging #342 into master will decrease coverage by -0.53% as of 7c44305\n\ndiff\n@@            master    #342   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        42      42       \n  Methods         94      94       \n======================================\n- Hit            174     173     -1\n  Partial          4       4       \n- Missed          11      12     +1\n\nReview entire Coverage Diff as of 7c44305\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.84%\nMerging #344 into master will increase coverage by +0.31% as of 0c15b0d\n\ndiff\n@@            master    #344   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     184     -5\n  Branches        42      41     -1\n  Methods         94      93     -1\n======================================\n- Hit            173     169     -4\n+ Partial          4       3     -1\n  Missed          12      12\n\nReview entire Coverage Diff as of 0c15b0d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.71%\nMerging #345 into master will decrease coverage by -0.13% as of 11be129\n\ndiff\n@@            master    #345   diff @@\n======================================\n  Files            9       8     -1\n  Stmts          184     181     -3\n  Branches        41      39     -2\n  Methods         93      90     -3\n======================================\n- Hit            169     166     -3\n  Partial          3       3       \n  Missed          12      12\n\nReview entire Coverage Diff as of 11be129\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #346 into master will increase coverage by +0.80% as of b8fc931\n\ndiff\n@@            master    #346   diff @@\n======================================\n  Files            8       9     +1\n  Stmts          181     187     +6\n  Branches        39      36     -3\n  Methods         90      88     -2\n======================================\n+ Hit            166     173     +7\n- Partial          3       4     +1\n+ Missed          12      10     -2\n\nReview entire Coverage Diff as of b8fc931\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #348 into master will not affect coverage as of ac4140e\n\ndiff\n@@            master    #348   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        36      36       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of ac4140e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #349 into master will not affect coverage as of b9fe725\n\ndiff\n@@            master    #349   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        36      36       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of b9fe725\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.63%\nMerging #350 into master will increase coverage by +0.12% as of f7e1778\n\ndiff\n@@            master    #350   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     190     +3\n  Branches        36      37     +1\n  Methods         88      90     +2\n======================================\n+ Hit            173     176     +3\n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of f7e1778\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.63%\nMerging #355 into master will not affect coverage as of 71f30ba\n\ndiff\n@@            master    #355   diff @@\n======================================\n  Files            9       9       \n  Stmts          190     190       \n  Branches        37      37       \n  Methods         90      90       \n======================================\n  Hit            176     176       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 71f30ba\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #356 into master will decrease coverage by -1.10% as of 9ddbb4b\n\ndiff\n@@            master    #356   diff @@\n======================================\n  Files            9       9       \n  Stmts          188     187     -1\n  Branches        38      38       \n  Methods         88      88       \n======================================\n- Hit            176     173     -3\n- Partial          3       4     +1\n- Missed           9      10     +1\n\nReview entire Coverage Diff as of 9ddbb4b\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #358 into master will not affect coverage as of c2d3ea0\n\ndiff\n@@            master    #358   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of c2d3ea0\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #359 into master will not affect coverage as of 49d16c3\n\ndiff\n@@            master    #359   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 49d16c3\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #360 into master will not affect coverage as of 6f5b5b8\n\ndiff\n@@            master    #360   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 6f5b5b8\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #362 into master will not affect coverage as of 1736e41\n\ndiff\n@@            master    #362   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 1736e41\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #365 into master will not affect coverage as of 5b6225d\n\ndiff\n@@            master    #365   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 5b6225d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.55%\nMerging #366 into master will increase coverage by +0.04% as of ac20e77\n\ndiff\n@@            master    #366   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     188     +1\n  Branches        38      38       \n  Methods         88      88       \n======================================\n+ Hit            173     174     +1\n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of ac20e77\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #368 into master will not affect coverage as of 803449d\n\ndiff\n@@            master    #368   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 803449d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #369 into master will not affect coverage as of d165114\n\ndiff\n@@            master    #369   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of d165114\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #370 into master will not affect coverage as of 4c7fb41\n\ndiff\n@@            master    #370   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 4c7fb41\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #376 into master will not affect coverage as of cddd03d\n\ndiff\n@@            master    #376   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of cddd03d\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #378 into master will not affect coverage as of 227d92a\n\ndiff\n@@            master    #378   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 227d92a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #379 into master will not affect coverage as of 0b3d6e7\n\ndiff\n@@            master    #379   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 0b3d6e7\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #380 into master will not affect coverage as of eafdd44\n\ndiff\n@@            master    #380   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of eafdd44\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.51%\nMerging #381 into master will not affect coverage as of b5f4f06\n\ndiff\n@@            master    #381   diff @@\n======================================\n  Files            9       9       \n  Stmts          187     187       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            173     173       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of b5f4f06\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.55%\nMerging #383 into master will not affect coverage as of 9a8417e\n\ndiff\n@@            master    #383   diff @@\n======================================\n  Files            9       9       \n  Stmts          188     188       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 9a8417e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.55%\nMerging #384 into master will not affect coverage as of 79b4720\n\ndiff\n@@            master    #384   diff @@\n======================================\n  Files            9       9       \n  Stmts          188     188       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            174     174       \n  Partial          4       4       \n  Missed          10      10\n\nReview entire Coverage Diff as of 79b4720\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.65%\nMerging #385 into master will increase coverage by +1.10% as of 3e773b6\n\ndiff\n@@            master    #385   diff @@\n======================================\n  Files            9       9       \n  Stmts          188     189     +1\n  Branches        38      38       \n  Methods         88      88       \n======================================\n+ Hit            174     177     +3\n+ Partial          4       3     -1\n+ Missed          10       9     -1\n\nReview entire Coverage Diff as of 3e773b6\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.65%\nMerging #386 into master will not affect coverage as of c41e989\n\ndiff\n@@            master    #386   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            177     177       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of c41e989\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.68%\nMerging #387 into master will increase coverage by +0.03% as of db454fd\n\ndiff\n@@            master    #387   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     190     +1\n  Branches        38      38       \n  Methods         88      89     +1\n======================================\n+ Hit            177     178     +1\n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of db454fd\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.65%\nMerging #388 into master will not affect coverage as of f80a430\n\ndiff\n@@            master    #388   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            177     177       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of f80a430\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.65%\nMerging #389 into master will not affect coverage as of 0a86ada\n\ndiff\n@@            master    #389   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            177     177       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 0a86ada\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.65%\nMerging #390 into master will not affect coverage as of 3f60245\n\ndiff\n@@            master    #390   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     189       \n  Branches        38      38       \n  Methods         88      88       \n======================================\n  Hit            177     177       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 3f60245\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #391 into master will not affect coverage as of 2d4e547\n\ndiff\n@@            master    #391   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 2d4e547\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.68%\nMerging #392 into master will increase coverage by +0.03% as of 1abca3c\n\ndiff\n@@            master    #392   diff @@\n======================================\n  Files            9       9       \n  Stmts          189     190     +1\n  Branches        38      39     +1\n  Methods         88      88       \n======================================\n+ Hit            177     178     +1\n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 1abca3c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.68%\nMerging #393 into master will not affect coverage as of 6b8a7b8\n\ndiff\n@@            master    #393   diff @@\n======================================\n  Files            9       9       \n  Stmts          190     190       \n  Branches        39      39       \n  Methods         88      88       \n======================================\n  Hit            178     178       \n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 6b8a7b8\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.84%\nMerging #394 into master will increase coverage by +0.16% as of 64c7e4e\n\ndiff\n@@            master    #394   diff @@\n======================================\n  Files            9       9       \n  Stmts          190     195     +5\n  Branches        39      42     +3\n  Methods         88      88       \n======================================\n+ Hit            178     183     +5\n  Partial          3       3       \n  Missed           9       9\n\nReview entire Coverage Diff as of 64c7e4e\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #400 into master will increase coverage by +1.00% as of d2ec46b\n\ndiff\n@@            master    #400   diff @@\n======================================\n  Files            9       9       \n  Stmts          195     194     -1\n  Branches        42      42       \n  Methods         88      88       \n======================================\n+ Hit            183     184     +1\n+ Partial          3       2     -1\n+ Missed           9       8     -1\n\nReview entire Coverage Diff as of d2ec46b\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #404 into master will not affect coverage as of 7886c3a\n\ndiff\n@@            master    #404   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 7886c3a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #406 into master will not affect coverage as of 29c533f\n\ndiff\n@@            master    #406   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 29c533f\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #407 into master will not affect coverage as of 5e2f122\n\ndiff\n@@            master    #407   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 5e2f122\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #408 into master will not affect coverage as of 0e6a688\n\ndiff\n@@            master    #408   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 0e6a688\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.84%\nMerging #412 into master will not affect coverage as of e68995c\n\ndiff\n@@            master    #412   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     194       \n  Branches        42      42       \n  Methods         88      88       \n======================================\n  Hit            184     184       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of e68995c\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #416 into master will increase coverage by +0.30% as of cec260a\n\ndiff\n@@            master    #416   diff @@\n======================================\n  Files            9       9       \n  Stmts          194     206    +12\n  Branches        42      44     +2\n  Methods         88      90     +2\n======================================\n+ Hit            184     196    +12\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of cec260a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #417 into master will not affect coverage as of e602d76\n\ndiff\n@@            master    #417   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     206       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            196     196       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of e602d76\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #418 into master will not affect coverage as of 05fc513\n\ndiff\n@@            master    #418   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     206       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            196     196       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 05fc513\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #419 into master will not affect coverage as of 73322b0\n\ndiff\n@@            master    #419   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     206       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            196     196       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 73322b0\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #421 into master will not affect coverage as of ecd4c70\n\ndiff\n@@            master    #421   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     206       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            196     196       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of ecd4c70\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.68%\nMerging #423 into master will decrease coverage by -0.46% as of 6287b93\n\ndiff\n@@            master    #423   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     207     +1\n  Branches        44      45     +1\n  Methods         90      90       \n======================================\n  Hit            196     196       \n- Partial          2       3     +1\n  Missed           8       8\n\nReview entire Coverage Diff as of 6287b93\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.14%\nMerging #428 into master will not affect coverage as of 14cc4c7\n\ndiff\n@@            master    #428   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     206       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            196     196       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 14cc4c7\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.44%\nMerging #431 into master will decrease coverage by -0.70% as of 4d9a861\n\ndiff\n@@            master    #431   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     216    +10\n  Branches        44      50     +6\n  Methods         90      92     +2\n======================================\n+ Hit            196     204     +8\n- Partial          2       4     +2\n  Missed           8       8\n\nReview entire Coverage Diff as of 4d9a861\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.44%\nMerging #432 into master will decrease coverage by -0.70% as of e1790bd\n\ndiff\n@@            master    #432   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     216    +10\n  Branches        44      50     +6\n  Methods         90      92     +2\n======================================\n+ Hit            196     204     +8\n- Partial          2       4     +2\n  Missed           8       8\n\nReview entire Coverage Diff as of e1790bd\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.63%\nMerging #435 into master will decrease coverage by -1.51% as of d952387\n\ndiff\n@@            master    #435   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     220    +14\n  Branches        44      51     +7\n  Methods         90      96     +6\n======================================\n+ Hit            196     206    +10\n- Partial          2       5     +3\n- Missed           8       9     +1\n\nReview entire Coverage Diff as of d952387\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.47%\nMerging #436 into master will increase coverage by +0.33% as of 9ddf5ef\n\ndiff\n@@            master    #436   diff @@\n======================================\n  Files            9       9       \n  Stmts          206     221    +15\n  Branches        44      44       \n  Methods         90      90       \n======================================\n+ Hit            196     211    +15\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 9ddf5ef\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.49%\nMerging #437 into master will increase coverage by +0.02% as of 619bd34\n\ndiff\n@@            master    #437   diff @@\n======================================\n  Files            9       9       \n  Stmts          221     222     +1\n  Branches        44      45     +1\n  Methods         90      91     +1\n======================================\n+ Hit            211     212     +1\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of 619bd34\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.47%\nMerging #439 into master will not affect coverage as of ed75dbd\n\ndiff\n@@            master    #439   diff @@\n======================================\n  Files            9       9       \n  Stmts          221     221       \n  Branches        44      44       \n  Methods         90      90       \n======================================\n  Hit            211     211       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of ed75dbd\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.49%\nMerging #441 into master will not affect coverage as of ad49014\n\ndiff\n@@            master    #441   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     222       \n  Branches        45      45       \n  Methods         91      91       \n======================================\n  Hit            212     212       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of ad49014\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.49%\nMerging #443 into master will not affect coverage as of cc7fc1f\n\ndiff\n@@            master    #443   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     222       \n  Branches        45      45       \n  Methods         91      91       \n======================================\n  Hit            212     212       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of cc7fc1f\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.49%\nMerging #445 into master will not affect coverage as of dfca5e7\n\ndiff\n@@            master    #445   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     222       \n  Branches        45      45       \n  Methods         91      91       \n======================================\n  Hit            212     212       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of dfca5e7\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.49%\nMerging #452 into master will not affect coverage as of b6d07e9\n\ndiff\n@@            master    #452   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     222       \n  Branches        45      45       \n  Methods         91      91       \n======================================\n  Hit            212     212       \n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of b6d07e9\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.98%\nMerging #453 into master will increase coverage by +0.49% as of f2ad2c6\n\ndiff\n@@            master    #453   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     249    +27\n  Branches        45      46     +1\n  Methods         91      91       \n======================================\n+ Hit            212     239    +27\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of f2ad2c6\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 96.01%\nMerging #456 into master will increase coverage by +0.52% as of cf70bb3\n\ndiff\n@@            master    #456   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     251    +29\n  Branches        45      46     +1\n  Methods         91      91       \n======================================\n+ Hit            212     241    +29\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of cf70bb3\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 95.95%\nMerging #457 into master will increase coverage by +0.46% as of d7ef316\n\ndiff\n@@            master    #457   diff @@\n======================================\n  Files            9       9       \n  Stmts          222     247    +25\n  Branches        45      45       \n  Methods         91      91       \n======================================\n+ Hit            212     237    +25\n  Partial          2       2       \n  Missed           8       8\n\nReview entire Coverage Diff as of d7ef316\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 92.41%\nMerging #469 into master will decrease coverage by -2.37%\n\ndiff\n@@             master       #469   diff @@\n==========================================\n  Files             9         10     +1   \n  Lines           249        303    +54   \n  Methods          10         13     +3   \n  Messages          0          0          \n  Branches         36         45     +9   \n==========================================\n+ Hits            236        280    +44   \n- Misses            8         14     +6   \n- Partials          5          9     +4\n1. File src/datepicker.jsx was modified. more \n   - Misses 0 \n   - Partials 0 \n   - Hits -2\n\nPowered by Codecov. Last updated by a2f153c\n. ## Current coverage is 92.33%\nMerging #480 into master will not change coverage\n\ndiff\n@@             master       #480   diff @@\n==========================================\n  Files            10         10          \n  Lines           326        326          \n  Methods          13         13          \n  Messages          0          0          \n  Branches         47         47          \n==========================================\n  Hits            301        301          \n  Misses           15         15          \n  Partials         10         10\n\nPowered by Codecov. Last updated by b33a84e...fff08b9\n. ## Current coverage is 92.33%\nMerging #481 into master will not change coverage\n\ndiff\n@@             master       #481   diff @@\n==========================================\n  Files            10         10          \n  Lines           326        326          \n  Methods          13         13          \n  Messages          0          0          \n  Branches         47         47          \n==========================================\n  Hits            301        301          \n  Misses           15         15          \n  Partials         10         10\n\nPowered by Codecov. Last updated by 3e7d472...9447de5\n. ## Current coverage is 92.33%\nMerging #482 into master will not change coverage\n\ndiff\n@@             master       #482   diff @@\n==========================================\n  Files            10         10          \n  Lines           326        326          \n  Methods          13         13          \n  Messages          0          0          \n  Branches         47         47          \n==========================================\n  Hits            301        301          \n  Misses           15         15          \n  Partials         10         10\n\nPowered by Codecov. Last updated by dabd637...c588ad6\n. ## Current coverage is 93.20% (diff: 100%)\nMerging #504 into master will increase coverage by 2.21%\n\ndiff\n@@             master       #504   diff @@\n==========================================\n  Files            10         11     +1   \n  Lines           355        500   +145   \n  Methods          14         15     +1   \n  Messages          0          0          \n  Branches         56         89    +33   \n==========================================\n+ Hits            323        466   +143   \n+ Misses           14         12     -2   \n- Partials         18         22     +4\n\nPowered by Codecov. Last update 0506113...ecca99a\n. ## Current coverage is 90.96% (diff: 100%)\nMerging #506 into master will increase coverage by 0.10%\n\ndiff\n@@             master       #506   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        343     +4   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n+ Hits            308        312     +4   \n+ Misses           14         13     -1   \n- Partials         17         18     +1\n\n\nPowered by Codecov. Last update beb908d...014bff3\n. ## Current coverage is 94.18%\nMerging #508 into master will increase coverage by 1.78%\n\ndiff\n@@             master       #508   diff @@\n==========================================\n  Files            10         10          \n  Lines           329        327     -2   \n  Methods          13         14     +1   \n  Messages          0          0          \n  Branches         48         48          \n==========================================\n+ Hits            304        308     +4   \n+ Misses           15         14     -1   \n+ Partials         10          5     -5\n\n\nPowered by Codecov. Last updated by de50699...e73918e\n. ## Current coverage is 93.92%\nMerging #510 into master will not change coverage\n\ndiff\n@@             master       #510   diff @@\n==========================================\n  Files            10         10          \n  Lines           329        329          \n  Methods          13         13          \n  Messages          0          0          \n  Branches         48         48          \n==========================================\n  Hits            309        309          \n  Misses           14         14          \n  Partials          6          6\n\n\nPowered by Codecov. Last updated by 8da6d8a...c6dcbb8\n. ## Current coverage is 93.93%\nMerging #519 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #519   diff @@\n==========================================\n  Files            10         10          \n  Lines           329        330     +1   \n  Methods          13         13          \n  Messages          0          0          \n  Branches         48         49     +1   \n==========================================\n+ Hits            309        310     +1   \n  Misses           14         14          \n  Partials          6          6\n\n\nPowered by Codecov. Last updated by 8da6d8a...9a15888\n. ## Current coverage is 90.63%\nMerging #522 into master will decrease coverage by 0.27%\n\ndiff\n@@             master       #522   diff @@\n==========================================\n  Files            10         10          \n  Lines           330        331     +1   \n  Methods          13         14     +1   \n  Messages          0          0          \n  Branches         49         49          \n==========================================\n  Hits            300        300          \n  Misses           14         14          \n- Partials         16         17     +1\n\n\nPowered by Codecov. Last updated by bb4a18b...18199cb\n. ## Current coverage is 90.23%\nMerging #524 into master will decrease coverage by 0.39%\n\ndiff\n@@             master       #524   diff @@\n==========================================\n  Files            10         10          \n  Lines           331        338     +7   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         49         56     +7   \n==========================================\n+ Hits            300        305     +5   \n- Misses           14         15     +1   \n- Partials         17         18     +1\n\n\nPowered by Codecov. Last updated by b51259d...4a6e385\n. ## Current coverage is 90.85%\nMerging #526 into master will increase coverage by 0.22%\n\ndiff\n@@             master       #526   diff @@\n==========================================\n  Files            10         10          \n  Lines           331        339     +8   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         49         52     +3   \n==========================================\n+ Hits            300        308     +8   \n  Misses           14         14          \n  Partials         17         17\n\n\nPowered by Codecov. Last updated by b51259d...8f6c825\n. ## Current coverage is 90.85%\nMerging #527 into master will not change coverage\n\ndiff\n@@             master       #527   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        339          \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n  Hits            308        308          \n  Misses           14         14          \n  Partials         17         17\n\n\nPowered by Codecov. Last updated by beb908d...d8d565b\n. ## Current coverage is 90.85% (diff: 100%)\nMerging #531 into master will not change coverage\n\ndiff\n@@             master       #531   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        339          \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n  Hits            308        308          \n  Misses           14         14          \n  Partials         17         17\n\n\nPowered by Codecov. Last update beb908d...7ded8fa\n. ## Current coverage is 88.82% (diff: 9.09%)\nMerging #532 into master will decrease coverage by 2.03%\n\ndiff\n@@             master       #532   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        349    +10   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         55     +3   \n==========================================\n+ Hits            308        310     +2   \n- Misses           14         21     +7   \n- Partials         17         18     +1\n\n\nPowered by Codecov. Last update 8bec6f0...4810f3f\n. ## Current coverage is 90.58% (diff: 100%)\nMerging #534 into master will decrease coverage by 0.26%\n\ndiff\n@@             master       #534   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        340     +1   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n  Hits            308        308          \n  Misses           14         14          \n- Partials         17         18     +1\n\n\nPowered by Codecov. Last update 691b047...82a108a\n. ## Current coverage is 90.85% (diff: 100%)\nMerging #536 into master will not change coverage\n\ndiff\n@@             master       #536   diff @@\n==========================================\n  Files            10         10          \n  Lines           339        339          \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n  Hits            308        308          \n  Misses           14         14          \n  Partials         17         17\n\n\nPowered by Codecov. Last update 691b047...d53d74d\n. ## Current coverage is 90.98% (diff: 100%)\nMerging #540 into master will increase coverage by 0.05%\n\ndiff\n@@             master       #540   diff @@\n==========================================\n  Files            10         10          \n  Lines           353        355     +2   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         55         56     +1   \n==========================================\n+ Hits            321        323     +2   \n  Misses           14         14          \n  Partials         18         18\n\n\nPowered by Codecov. Last update 317293f...7b2961f\n. ## Current coverage is 90.58% (diff: 100%)\nMerging #541 into master will not change coverage\n\ndiff\n@@             master       #541   diff @@\n==========================================\n  Files            10         10          \n  Lines           340        340          \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         52          \n==========================================\n  Hits            308        308          \n  Misses           14         14          \n  Partials         18         18\n\n\nPowered by Codecov. Last update 9d8da30...e145410\n. ## Current coverage is 90.77% (diff: 100%)\nMerging #542 into master will increase coverage by 0.18%\n\ndiff\n@@             master       #542   diff @@\n==========================================\n  Files            10         10          \n  Lines           340        347     +7   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         52         54     +2   \n==========================================\n+ Hits            308        315     +7   \n  Misses           14         14          \n  Partials         18         18\n\n\nPowered by Codecov. Last update 9d8da30...1deac39\n. ## Current coverage is 90.93% (diff: 100%)\nMerging #551 into master will increase coverage by 0.07%\n\ndiff\n@@             master       #551   diff @@\n==========================================\n  Files            10         10          \n  Lines           350        353     +3   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         54         55     +1   \n==========================================\n+ Hits            318        321     +3   \n  Misses           14         14          \n  Partials         18         18\n\n\nPowered by Codecov. Last update ecbb408...a2ef9f0\n. ## Current coverage is 91.25% (diff: 100%)\nMerging #558 into master will increase coverage by 0.26%\n\ndiff\n@@             master       #558   diff @@\n==========================================\n  Files            10         10          \n  Lines           355        400    +45   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         56         68    +12   \n==========================================\n+ Hits            323        365    +42   \n  Misses           14         14          \n- Partials         18         21     +3\n\n\nPowered by Codecov. Last update 0506113...f53d591\n. ## Current coverage is 91.25% (diff: 97.72%)\nMerging #561 into master will increase coverage by 0.26%\n\ndiff\n@@             master       #561   diff @@\n==========================================\n  Files            10         10          \n  Lines           355        400    +45   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         56         68    +12   \n==========================================\n+ Hits            323        365    +42   \n  Misses           14         14          \n- Partials         18         21     +3\n\n\nPowered by Codecov. Last update 0506113...bfad061\n. ## Current coverage is 92.01% (diff: 100%)\nMerging #563 into master will increase coverage by 0.76%\n\ndiff\n@@             master       #563   diff @@\n==========================================\n  Files            10         10          \n  Lines           400        426    +26   \n  Methods          14         14          \n  Messages          0          0          \n  Branches         68         76     +8   \n==========================================\n+ Hits            365        392    +27   \n  Misses           14         14          \n+ Partials         21         20     -1\n\n\nPowered by Codecov. Last update 895f160...2e3bf2b\n. ## Current coverage is 92.36% (diff: 97.56%)\nMerging #564 into master will increase coverage by 0.35%\n\ndiff\n@@             master       #564   diff @@\n==========================================\n  Files            10         11     +1   \n  Lines           426        498    +72   \n  Methods          14         15     +1   \n  Messages          0          0          \n  Branches         76         89    +13   \n==========================================\n+ Hits            392        460    +68   \n  Misses           14         14          \n- Partials         20         24     +4\n\n\nPowered by Codecov. Last update 031ac4a...cfa0c52\n. ## Current coverage is 91.97% (diff: 80.00%)\nMerging #570 into master will decrease coverage by 0.18%\n\ndiff\n@@             master       #570   diff @@\n==========================================\n  Files            11         12     +1   \n  Lines           523        536    +13   \n  Methods          15         16     +1   \n  Messages          0          0          \n  Branches         95         97     +2   \n==========================================\n+ Hits            482        493    +11   \n- Misses           14         15     +1   \n- Partials         27         28     +1\n\nPowered by Codecov. Last update 4177b98...8d6aaed\n. ## Current coverage is 92.36% (diff: 100%)\nMerging #571 into master will not change coverage\n\ndiff\n@@             master       #571   diff @@\n==========================================\n  Files            11         11          \n  Lines           498        498          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         89          \n==========================================\n  Hits            460        460          \n  Misses           14         14          \n  Partials         24         24\n\nPowered by Codecov. Last update 95a870a...441edf8\n. ## Current coverage is 92.36% (diff: 100%)\nMerging #572 into master will not change coverage\n\ndiff\n@@             master       #572   diff @@\n==========================================\n  Files            11         11          \n  Lines           498        498          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         89          \n==========================================\n  Hits            460        460          \n  Misses           14         14          \n  Partials         24         24\n\nPowered by Codecov. Last update 0b4d93b...f1ca29c\n. ## Current coverage is 92.60% (diff: 100%)\nMerging #573 into master will increase coverage by 0.23%\n\ndiff\n@@             master       #573   diff @@\n==========================================\n  Files            11         11          \n  Lines           498        500     +2   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         89          \n==========================================\n+ Hits            460        463     +3   \n  Misses           14         14          \n+ Partials         24         23     -1\n\nPowered by Codecov. Last update 0b4d93b...8b625c7\n. ## Current coverage is 93.20% (diff: 100%)\nMerging #576 into master will increase coverage by 0.83%\n\ndiff\n@@             master       #576   diff @@\n==========================================\n  Files            11         11          \n  Lines           498        500     +2   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         89          \n==========================================\n+ Hits            460        466     +6   \n+ Misses           14         12     -2   \n+ Partials         24         22     -2\n\nPowered by Codecov. Last update f0fea77...8922f2d\n. ## Current coverage is 93.38% (diff: 100%)\nMerging #577 into master will increase coverage by 0.18%\n\ndiff\n@@             master       #577   diff @@\n==========================================\n  Files            11         11          \n  Lines           500        529    +29   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         98     +9   \n==========================================\n+ Hits            466        494    +28   \n  Misses           12         12          \n- Partials         22         23     +1\n\nPowered by Codecov. Last update e25f6fa...2e28e6b\n. ## Current coverage is 92.93% (diff: 100%)\nMerging #578 into master will decrease coverage by 0.26%\n\ndiff\n@@             master       #578   diff @@\n==========================================\n  Files            11         11          \n  Lines           500        538    +38   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89        100    +11   \n==========================================\n+ Hits            466        500    +34   \n- Misses           12         16     +4   \n  Partials         22         22\n\nPowered by Codecov. Last update 8bafff9...b7308ae\n. ## Current coverage is 93.04% (diff: 100%)\nMerging #586 into master will decrease coverage by 0.15%\n\ndiff\n@@             master       #586   diff @@\n==========================================\n  Files            11         11          \n  Lines           500        503     +3   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         89         90     +1   \n==========================================\n+ Hits            466        468     +2   \n  Misses           12         12          \n- Partials         22         23     +1\n\nPowered by Codecov. Last update 17a2484...58f6a8a\n. ## Current coverage is 93.04% (diff: 100%)\nMerging #587 into master will not change coverage\n\ndiff\n@@             master       #587   diff @@\n==========================================\n  Files            11         11          \n  Lines           503        503          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         90         90          \n==========================================\n  Hits            468        468          \n  Misses           12         12          \n  Partials         23         23\n\nPowered by Codecov. Last update 4b8baba...b0598d6\n. ## Current coverage is 93.04% (diff: 100%)\nMerging #591 into master will not change coverage\n\ndiff\n@@             master       #591   diff @@\n==========================================\n  Files            11         11          \n  Lines           503        503          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         90         90          \n==========================================\n  Hits            468        468          \n  Misses           12         12          \n  Partials         23         23\n\nPowered by Codecov. Last update 0750e8e...2f6ddbf\n. ## Current coverage is 93.04% (diff: 100%)\nMerging #593 into master will not change coverage\n\ndiff\n@@             master       #593   diff @@\n==========================================\n  Files            11         11          \n  Lines           503        503          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         90         90          \n==========================================\n  Hits            468        468          \n  Misses           12         12          \n  Partials         23         23\n\nPowered by Codecov. Last update 8a775a3...d34c5ca\n. ## Current coverage is 92.16% (diff: 100%)\nMerging #596 into master will decrease coverage by 0.57%\n\ndiff\n@@             master       #596   diff @@\n==========================================\n  Files            11         11          \n  Lines           509        523    +14   \n  Methods          15         15          \n  Messages          0          0          \n  Branches         91         95     +4   \n==========================================\n+ Hits            472        482    +10   \n  Misses           14         14          \n- Partials         23         27     +4\n\nPowered by Codecov. Last update 917b522...8f3d0a8\n. ## Current coverage is 92.16% (diff: 100%)\nMerging #598 into master will not change coverage\n\ndiff\n@@             master       #598   diff @@\n==========================================\n  Files            11         11          \n  Lines           523        523          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         95         95          \n==========================================\n  Hits            482        482          \n  Misses           14         14          \n  Partials         27         27\n\nPowered by Codecov. Last update 6ec4cb9...0f840bc\n. ## Current coverage is 92.16% (diff: 100%)\nMerging #599 into master will increase coverage by 0.18%\n\ndiff\n@@             master       #599   diff @@\n==========================================\n  Files            12         11     -1   \n  Lines           536        523    -13   \n  Methods          16         15     -1   \n  Messages          0          0          \n  Branches         97         95     -2   \n==========================================\n- Hits            493        482    -11   \n+ Misses           15         14     -1   \n+ Partials         28         27     -1\n\nPowered by Codecov. Last update da1df3b...b359c8f\n. ## Current coverage is 92.16% (diff: 100%)\nMerging #600 into master will not change coverage\n\ndiff\n@@             master       #600   diff @@\n==========================================\n  Files            11         11          \n  Lines           523        523          \n  Methods          15         15          \n  Messages          0          0          \n  Branches         95         95          \n==========================================\n  Hits            482        482          \n  Misses           14         14          \n  Partials         27         27\n\nPowered by Codecov. Last update 4177b98...487566a\n. ## Current coverage is 91.83% (diff: 100%)\nMerging #608 into master will decrease coverage by 0.14%\n\ndiff\n@@             master       #608   diff @@\n==========================================\n  Files            12         12          \n  Lines           536        539     +3   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         97         98     +1   \n==========================================\n+ Hits            493        495     +2   \n  Misses           15         15          \n- Partials         28         29     +1\n\nPowered by Codecov. Last update f1010f4...1a17fa3\n. ## Current coverage is 91.96% (diff: 100%)\nMerging #612 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #612   diff @@\n==========================================\n  Files            12         12          \n  Lines           536        535     -1   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         97         98     +1   \n==========================================\n- Hits            493        492     -1   \n  Misses           15         15          \n  Partials         28         28\n\nPowered by Codecov. Last update f1010f4...0e495a3\n. ## Current coverage is 91.96% (diff: 100%)\nMerging #614 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #614   diff @@\n==========================================\n  Files            12         12          \n  Lines           536        535     -1   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         97         97          \n==========================================\n- Hits            493        492     -1   \n  Misses           15         15          \n  Partials         28         28\n\nPowered by Codecov. Last update f1010f4...18603e3\n. ## Current coverage is 90.31% (diff: 100%)\nMerging #617 into master will not change coverage\n\ndiff\n@@             master       #617   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        547          \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        100          \n==========================================\n  Hits            494        494          \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update 4518d06...1f9cefb. ## Current coverage is 91.00% (diff: 96.55%)\nMerging #626 into master will decrease coverage by 0.83%\n\ndiff\n@@             master       #626   diff @@\n==========================================\n  Files            12         13     +1   \n  Lines           539        589    +50   \n  Methods          16         17     +1   \n  Messages          0          0          \n  Branches         98        106     +8   \n==========================================\n+ Hits            495        536    +41   \n+ Misses           15         13     -2   \n- Partials         29         40    +11\n\nPowered by Codecov. Last update 9c8dfe6...52065ac. ## Current coverage is 91.71% (diff: 100%)\nMerging #629 into master will decrease coverage by 0.12%\n\ndiff\n@@             master       #629   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        543     +4   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         99     +1   \n==========================================\n+ Hits            495        498     +3   \n  Misses           15         15          \n- Partials         29         30     +1\n\nPowered by Codecov. Last update 9c8dfe6...106dc37\n. ## Current coverage is 90.35% (diff: 100%)\nMerging #633 into master will decrease coverage by 1.48%\n\ndiff\n@@             master       #633   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        539          \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         98          \n==========================================\n- Hits            495        487     -8   \n  Misses           15         15          \n- Partials         29         37     +8\n\nPowered by Codecov. Last update 9c8dfe6...276c3f9. ## Current coverage is 90.35% (diff: 100%)\nMerging #645 into master will decrease coverage by 1.48%\n\ndiff\n@@             master       #645   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        539          \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         98          \n==========================================\n- Hits            495        487     -8   \n  Misses           15         15          \n- Partials         29         37     +8\n\nPowered by Codecov. Last update 9c8dfe6...787d39a. ## Current coverage is 90.82% (diff: 100%)\nMerging #648 into master will increase coverage by 0.47%\n\ndiff\n@@             master       #648   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        545     +6   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         99     +1   \n==========================================\n+ Hits            487        495     +8   \n+ Misses           15         12     -3   \n- Partials         37         38     +1\n\nPowered by Codecov. Last update 6a26095...3d22c09. ## Current coverage is 90.35% (diff: 100%)\nMerging #649 into master will not change coverage\n\ndiff\n@@             master       #649   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        539          \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         98          \n==========================================\n  Hits            487        487          \n  Misses           15         15          \n  Partials         37         37\n\nPowered by Codecov. Last update 6a26095...691cbec. ## Current coverage is 90.38% (diff: 100%)\nMerging #651 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #651   diff @@\n==========================================\n  Files            12         12          \n  Lines           539        541     +2   \n  Methods          16         16          \n  Messages          0          0          \n  Branches         98         98          \n==========================================\n+ Hits            487        489     +2   \n  Misses           15         15          \n  Partials         37         37\n\nPowered by Codecov. Last update e07047a...9e6f2ee. ## Current coverage is 90.31% (diff: 100%)\nMerging #653 into master will not change coverage\n\ndiff\n@@             master       #653   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        547          \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        100          \n==========================================\n  Hits            494        494          \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update f159633...2466476. ## Current coverage is 90.31% (diff: 100%)\nMerging #654 into master will not change coverage\n\ndiff\n@@             master       #654   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        547          \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        100          \n==========================================\n  Hits            494        494          \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update 5db4b5f...a500772. ## Current coverage is 90.31% (diff: 100%)\nMerging #655 into master will not change coverage\n\ndiff\n@@             master       #655   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        547          \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        100          \n==========================================\n  Hits            494        494          \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update 1f7edd5...2752706. ## Current coverage is 90.31% (diff: 100%)\nMerging #656 into master will not change coverage\n\ndiff\n@@             master       #656   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        547          \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        100          \n==========================================\n  Hits            494        494          \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update 5db4b5f...290446c. ## Current coverage is 90.54% (diff: 93.93%)\nMerging #657 into master will increase coverage by 0.15%\n\ndiff\n@@             master       #657   diff @@\n==========================================\n  Files            12         13     +1   \n  Lines           552        582    +30   \n  Methods          16         17     +1   \n  Messages          0          0          \n  Branches        101        105     +4   \n==========================================\n+ Hits            499        527    +28   \n- Misses           15         16     +1   \n- Partials         38         39     +1\n\nPowered by Codecov. Last update c4c76c6...853f55b. ## Current coverage is 90.39% (diff: 100%)\nMerging #658 into master will increase coverage by 0.08%\n\ndiff\n@@             master       #658   diff @@\n==========================================\n  Files            12         12          \n  Lines           547        552     +5   \n  Methods          16         16          \n  Messages          0          0          \n  Branches        100        101     +1   \n==========================================\n+ Hits            494        499     +5   \n  Misses           15         15          \n  Partials         38         38\n\nPowered by Codecov. Last update 3f1e195...1c3091a. ## Current coverage is 90.98% (diff: 100%)\nMerging #666 into master will not change coverage\n\ndiff\n@@             master       #666   diff @@\n==========================================\n  Files            13         13          \n  Lines           588        588          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            535        535          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update ea93c7e...cd2a529. ## Current coverage is 91.00% (diff: 100%)\nMerging #667 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #667   diff @@\n==========================================\n  Files            13         13          \n  Lines           588        589     +1   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n+ Hits            535        536     +1   \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 12cc8f5...4c512d4. ## Current coverage is 90.98% (diff: 100%)\nMerging #668 into master will not change coverage\n\ndiff\n@@             master       #668   diff @@\n==========================================\n  Files            13         13          \n  Lines           588        588          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            535        535          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 12cc8f5...2100028. ## Current coverage is 91.63% (diff: 80.00%)\nMerging #671 into master will increase coverage by 0.39%\n\ndiff\n@@             master       #671   diff @@\n==========================================\n  Files            13         13          \n  Lines           594        598     +4   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        109        109          \n==========================================\n+ Hits            542        548     +6   \n+ Misses           13         12     -1   \n+ Partials         39         38     -1\n\nPowered by Codecov. Last update 3ecfc62...1d46fc3. ## Current coverage is 91.74% (diff: 93.93%)\nMerging #673 into master will increase coverage by 0.38%\n\ndiff\n@@             master       #673   diff @@\n==========================================\n  Files            13         13          \n  Lines           602        618    +16   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        110        118     +8   \n==========================================\n+ Hits            550        567    +17   \n+ Misses           14         13     -1   \n  Partials         38         38\n\nPowered by Codecov. Last update faa5f4c...2444fee. ## Current coverage is 91.00% (diff: 100%)\nMerging #677 into master will not change coverage\n\ndiff\n@@             master       #677   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        589          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 77272c4...c27cf21. ## Current coverage is 91.00% (diff: 100%)\nMerging #690 into master will not change coverage\n\ndiff\n@@             master       #690   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        589          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update c56a744...1752e8c. ## Current coverage is 91.00% (diff: 100%)\nMerging #691 into master will not change coverage\n\ndiff\n@@             master       #691   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        589          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update c56a744...ef6a0ce. ## Current coverage is 90.84% (diff: 50.00%)\nMerging #694 into master will decrease coverage by 0.15%\n\ndiff\n@@             master       #694   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        590     +1   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        107     +1   \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n- Partials         40         41     +1\n\nPowered by Codecov. Last update 88c5a28...d34b34e. ## Current coverage is 90.70% (diff: 80.00%)\nMerging #696 into master will decrease coverage by 0.29%\n\ndiff\n@@             master       #696   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        592     +3   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        107     +1   \n==========================================\n+ Hits            536        537     +1   \n- Misses           13         14     +1   \n- Partials         40         41     +1\n\nPowered by Codecov. Last update 88c5a28...edf967d. ## Current coverage is 91.24% (diff: 100%)\nMerging #697 into master will not change coverage\n\ndiff\n@@             master       #697   diff @@\n==========================================\n  Files            13         13          \n  Lines           594        594          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        109        109          \n==========================================\n  Hits            542        542          \n  Misses           13         13          \n  Partials         39         39\n\nPowered by Codecov. Last update 3ecfc62...4f88746. ## Current coverage is 91.06% (diff: 100%)\nMerging #698 into master will increase coverage by 0.06%\n\ndiff\n@@             master       #698   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        593     +4   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        108     +2   \n==========================================\n+ Hits            536        540     +4   \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 0f15f91...c0615cc. ## Current coverage is 91.18% (diff: 96.00%)\nMerging #702 into master will increase coverage by 0.18%\n\ndiff\n@@             master       #702   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        590     +1   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        107     +1   \n==========================================\n+ Hits            536        538     +2   \n  Misses           13         13          \n+ Partials         40         39     -1\n\nPowered by Codecov. Last update 0f15f91...1a1bfaf. ## Current coverage is 91.00% (diff: 100%)\nMerging #703 into master will not change coverage\n\ndiff\n@@             master       #703   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        589          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 88c5a28...bc17425. ## Current coverage is 91.00% (diff: 100%)\nMerging #706 into master will not change coverage\n\ndiff\n@@             master       #706   diff @@\n==========================================\n  Files            13         13          \n  Lines           589        589          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        106        106          \n==========================================\n  Hits            536        536          \n  Misses           13         13          \n  Partials         40         40\n\nPowered by Codecov. Last update 0f15f91...ab89ba6. ## Current coverage is 90.96% (diff: 0.00%)\nMerging #708 into master will decrease coverage by 0.27%\n\ndiff\n@@             master       #708   diff @@\n==========================================\n  Files            13         13          \n  Lines           594        598     +4   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        109        110     +1   \n==========================================\n+ Hits            542        544     +2   \n- Misses           13         15     +2   \n  Partials         39         39\n\nPowered by Codecov. Last update 3ecfc62...c39aed9. ## Current coverage is 91.62% (diff: 100%)\nMerging #710 into master will increase coverage by 0.26%\n\ndiff\n@@             master       #710   diff @@\n==========================================\n  Files            13         12     -1   \n  Lines           602        573    -29   \n  Methods          17         14     -3   \n  Messages          0          0          \n  Branches        110        104     -6   \n==========================================\n- Hits            550        525    -25   \n  Misses           14         14          \n+ Partials         38         34     -4\n\nPowered by Codecov. Last update faa5f4c...ae087ca. ## Current coverage is 91.90% (diff: 100%)\nMerging #715 into master will increase coverage by 0.16%\n\ndiff\n@@             master       #715   diff @@\n==========================================\n  Files            13         13          \n  Lines           618        618          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        118        118          \n==========================================\n+ Hits            567        568     +1   \n+ Misses           13         12     -1   \n  Partials         38         38\n\nPowered by Codecov. Last update 418b8d3...fe02606. ## Current coverage is 91.74% (diff: 100%)\nMerging #717 into master will not change coverage\n\ndiff\n@@             master       #717   diff @@\n==========================================\n  Files            13         13          \n  Lines           618        618          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        118        118          \n==========================================\n  Hits            567        567          \n  Misses           13         13          \n  Partials         38         38\n\nPowered by Codecov. Last update 418b8d3...eae0b44. # Codecov Report\nMerging #721 into master will increase coverage by 0.37%.\nThe diff coverage is 94.44%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #721      +/-\n==========================================\n+ Coverage   91.96%   92.33%   +0.37%   \n==========================================\n  Files          13       13            \n  Lines         622      626       +4   \n  Branches      120      116       -4   \n==========================================\n+ Hits          572      578       +6   \n+ Misses         12        9       -3   \n- Partials       38       39       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.74% <94.44%> (+1.9%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4aba8aa...d2a4595. Read the comment docs.. ## Current coverage is 91.90% (diff: 100%)\nMerging #722 into master will increase coverage by 0.16%\n\ndiff\n@@             master       #722   diff @@\n==========================================\n  Files            13         13          \n  Lines           618        618          \n  Methods          17         17          \n  Messages          0          0          \n  Branches        118        118          \n==========================================\n+ Hits            567        568     +1   \n+ Misses           13         12     -1   \n  Partials         38         38\n\nPowered by Codecov. Last update 418b8d3...42384f0. ## Current coverage is 92.27% (diff: 100%)\nMerging #725 into master will increase coverage by 0.36%\n\ndiff\n@@             master       #725   diff @@\n==========================================\n  Files            13         13          \n  Lines           618        621     +3   \n  Methods          17         17          \n  Messages          0          0          \n  Branches        118        119     +1   \n==========================================\n+ Hits            568        573     +5   \n+ Misses           12         11     -1   \n+ Partials         38         37     -1\n\nPowered by Codecov. Last update 418690c...d6ae6c8. # Codecov Report\nMerging #732 into master will increase coverage by -0.32%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #732      +/-\n==========================================\n- Coverage    91.9%   91.59%   -0.32%   \n==========================================\n  Files          13       13            \n  Lines         618      619       +1   \n  Branches      118      119       +1   \n==========================================\n- Hits          568      567       -1   \n- Misses         12       13       +1   \n- Partials       38       39       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 90.83% <80%> (-1.61%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 418690c...6a2826b. Read the comment docs.. # Codecov Report\nMerging #734 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #734   +/-\n=======================================\n  Coverage   91.96%   91.96%         \n=======================================\n  Files          13       13         \n  Lines         622      622         \n  Branches      120      120         \n=======================================\n  Hits          572      572         \n  Misses         12       12         \n  Partials       38       38\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0642a37...1ae251b. Read the comment docs.. # Codecov Report\nMerging #740 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #740   +/-\n=======================================\n  Coverage   92.33%   92.33%         \n=======================================\n  Files          13       13         \n  Lines         626      626         \n  Branches      116      116         \n=======================================\n  Hits          578      578         \n  Misses          9        9         \n  Partials       39       39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.74% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fea9e1f...1c5b390. Read the comment docs.. # Codecov Report\nMerging #750 into master will decrease coverage by -0.15%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #750      +/-\n==========================================\n- Coverage   92.33%   92.18%   -0.15%   \n==========================================\n  Files          13       13            \n  Lines         626      627       +1   \n  Branches      116      117       +1   \n==========================================\n  Hits          578      578            \n  Misses          9        9            \n- Partials       39       40       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92% <100%> (-0.75%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fea9e1f...87cc878. Read the comment docs.. # Codecov Report\nMerging #757 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #757      +/-\n==========================================\n+ Coverage   92.33%   92.44%   +0.11%   \n==========================================\n  Files          13       13            \n  Lines         626      622       -4   \n  Branches      116      116            \n==========================================\n- Hits          578      575       -3   \n+ Misses          9        8       -1   \n  Partials       39       39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.8% <100%> (+0.05%) | :white_check_mark: |\n| src/calendar.jsx | 90.75% <100%> (+0.75%) | :white_check_mark: |\n| src/month_dropdown.jsx | 96.96% <100%> (-0.33%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bc1cf7...e9d5220. Read the comment docs.. # Codecov Report\nMerging #760 into master will not change coverage.\nThe diff coverage is 33.33%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #760   +/-\n=======================================\n  Coverage   92.44%   92.44%         \n=======================================\n  Files          13       13         \n  Lines         622      622         \n  Branches      116      116         \n=======================================\n  Hits          575      575         \n  Misses          8        8         \n  Partials       39       39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/month.jsx | 90.69% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/datepicker.jsx | 92.8% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/calendar.jsx | 90.75% <0%> (\u00f8) | :white_check_mark: |\n| src/week.jsx | 85% <0%> (\u00f8) | :white_check_mark: |\n| src/day.jsx | 96.77% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df019ff...7d8954c. Read the comment docs.. # Codecov Report\nMerging #761 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #761   +/-\n=======================================\n  Coverage   92.44%   92.44%         \n=======================================\n  Files          13       13         \n  Lines         622      622         \n  Branches      116      116         \n=======================================\n  Hits          575      575         \n  Misses          8        8         \n  Partials       39       39\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c6f53e...9112c48. Read the comment docs.. # Codecov Report\nMerging #763 into master will decrease coverage by -0.15%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #763      +/-\n==========================================\n- Coverage   92.44%   92.29%   -0.15%   \n==========================================\n  Files          13       13            \n  Lines         622      623       +1   \n  Branches      116      117       +1   \n==========================================\n  Hits          575      575            \n  Misses          8        8            \n- Partials       39       40       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.06% <100%> (-0.74%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8930d72...75b0ba1. Read the comment docs.. # Codecov Report\nMerging #766 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #766   +/-\n=======================================\n  Coverage   92.44%   92.44%         \n=======================================\n  Files          13       13         \n  Lines         622      622         \n  Branches      116      116         \n=======================================\n  Hits          575      575         \n  Misses          8        8         \n  Partials       39       39\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8930d72...be5abe6. Read the comment docs.. # Codecov Report\nMerging #769 into master will decrease coverage by 0.08%.\nThe diff coverage is 88.88%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #769      +/-\n==========================================\n- Coverage   92.44%   92.35%   -0.09%   \n==========================================\n  Files          13       13            \n  Lines         622      628       +6   \n  Branches      116      119       +3   \n==========================================\n+ Hits          575      580       +5   \n  Misses          8        8            \n- Partials       39       40       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_input.jsx | 91.3% <100%> (-1.2%) | :x: |\n| src/datepicker.jsx | 92.8% <50%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8930d72...60e5c60. Read the comment docs.. # Codecov Report\nMerging #773 into master will increase coverage by 0.31%.\nThe diff coverage is 95.83%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #773      +/-\n==========================================\n+ Coverage   92.34%   92.65%   +0.31%   \n==========================================\n  Files          13       12       -1   \n  Lines         640      613      -27   \n  Branches      122      114       -8   \n==========================================\n- Hits          591      568      -23   \n  Misses          8        8            \n+ Partials       41       37       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/datepicker.jsx | 93.37% <94.73%> (+0.67%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update efa7edc...cfb2a1a. Read the comment docs.. # Codecov Report\nMerging #782 into master will increase coverage by 0.25%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #782      +/-\n=========================================\n+ Coverage   92.14%   92.4%   +0.25%   \n=========================================\n  Files          13      13            \n  Lines         624     632       +8   \n  Branches      118     119       +1   \n=========================================\n+ Hits          575     584       +9   \n  Misses          8       8            \n+ Partials       41      40       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.59% <100%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 90d3fea...fb82a35. Read the comment docs.. # Codecov Report\nMerging #784 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #784      +/-\n==========================================\n+ Coverage   92.14%   92.18%   +0.03%   \n==========================================\n  Files          13       13            \n  Lines         624      627       +3   \n  Branches      118      118            \n==========================================\n+ Hits          575      578       +3   \n  Misses          8        8            \n  Partials       41       41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.53% <100%> (+0.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 90d3fea...149b10f. Read the comment docs.. # Codecov Report\nMerging #788 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #788      +/-\n==========================================\n+ Coverage   92.14%   92.19%   +0.05%   \n==========================================\n  Files          13       13            \n  Lines         624      628       +4   \n  Branches      118      118            \n==========================================\n+ Hits          575      579       +4   \n  Misses          8        8            \n  Partials       41       41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.6% <100%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 90d3fea...97e95b3. Read the comment docs.. # Codecov Report\nMerging #799 into master will increase coverage by 6.42%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #799      +/-\n==========================================\n+ Coverage   85.75%   92.18%   +6.42%   \n==========================================\n  Files          12       13       +1   \n  Lines         639      640       +1   \n  Branches      128      123       -5   \n==========================================\n+ Hits          548      590      +42   \n- Misses          6        8       +2   \n+ Partials       85       42      -43\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.7% <\u00f8> (+0.79%) | :arrow_up: |\n| src/calendar.jsx | 89.91% <100%> (+1.52%) | :arrow_up: |\n| src/date_utils.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/popper_component.jsx | | |\n| src/date_input.jsx | 91.3% <0%> (\u00f8) | |\n| src/tether_component.jsx | 83.6% <0%> (\u00f8) | |\n| src/month.jsx | 90.69% <0%> (+8.87%) | :arrow_up: |\n| src/day.jsx | 96.77% <0%> (+9.56%) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19f78df...319e535. Read the comment docs.\n. # Codecov Report\nMerging #800 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #800      +/-\n==========================================\n+ Coverage   85.48%   85.55%   +0.06%   \n==========================================\n  Files          12       12            \n  Lines         627      630       +3   \n  Branches      122      122            \n==========================================\n+ Hits          536      539       +3   \n  Misses          6        6            \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 87.05% <100%> (\u00f8) | :arrow_up: |\n| src/date_utils.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5f9bfd...61101ac. Read the comment docs.\n. # Codecov Report\nMerging #801 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #801   +/-\n=======================================\n  Coverage   92.34%   92.34%         \n=======================================\n  Files          13       13         \n  Lines         640      640         \n  Branches      122      122         \n=======================================\n  Hits          591      591         \n  Misses          8        8         \n  Partials       41       41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update efa7edc...f40caba. Read the comment docs.. # Codecov Report\nMerging #803 into master will increase coverage by 6.48%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #803      +/-\n==========================================\n+ Coverage   85.87%   92.36%   +6.48%   \n==========================================\n  Files          12       13       +1   \n  Lines         609      642      +33   \n  Branches      118      122       +4   \n==========================================\n+ Hits          523      593      +70   \n- Misses          3        8       +5   \n+ Partials       83       41      -42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.8% <100%> (+1.08%) | :arrow_up: |\n| src/date_utils.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/popper_component.jsx | | |\n| src/tether_component.jsx | 83.6% <0%> (\u00f8) | |\n| src/date_input.jsx | 91.3% <0%> (\u00f8) | |\n| src/calendar.jsx | 90.75% <0%> (+2.79%) | :arrow_up: |\n| src/month.jsx | 90.69% <0%> (+8.08%) | :arrow_up: |\n| src/day.jsx | 96.77% <0%> (+9.71%) | :arrow_up: |\n| src/month_dropdown.jsx | 96.96% <0%> (+9.79%) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d5b099...1710c42. Read the comment docs.\n. # Codecov Report\nMerging #811 into master will decrease coverage by 0.11%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #811      +/-\n==========================================\n- Coverage   85.99%   85.87%   -0.12%   \n==========================================\n  Files          12       12            \n  Lines         614      609       -5   \n  Branches      118      118            \n==========================================\n- Hits          528      523       -5   \n  Misses          3        3            \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <\u00f8> (\u00f8) | :arrow_up: |\n| src/year_dropdown.jsx | 87.17% <\u00f8> (-0.63%) | :arrow_down: |\n| src/calendar.jsx | 87.96% <\u00f8> (-0.43%) | :arrow_down: |\n| src/year_dropdown_options.jsx | 80% <0%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ad8de0...530a777. Read the comment docs.\n. # Codecov Report\nMerging #822 into master will decrease coverage by 6.76%.\nThe diff coverage is 68.06%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #822      +/-\n==========================================\n- Coverage   92.65%   85.89%   -6.77%   \n==========================================\n  Files          12       12            \n  Lines         613      645      +32   \n  Branches      114      120       +6   \n==========================================\n- Hits          568      554      -14   \n+ Misses          8        7       -1   \n- Partials       37       84      +47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown_options.jsx | 79.31% <33.33%> (-17.12%) | :arrow_down: |\n| src/month.jsx | 82.97% <37.5%> (-7.72%) | :arrow_down: |\n| src/week_number.jsx | 33.33% <50%> (-46.67%) | :arrow_down: |\n| src/week.jsx | 69.56% <50%> (-15.44%) | :arrow_down: |\n| src/tether_component.jsx | 77.77% <54.54%> (-5.83%) | :arrow_down: |\n| src/datepicker.jsx | 91.55% <54.54%> (-1.82%) | :arrow_down: |\n| src/calendar.jsx | 87.71% <69.56%> (-3.04%) | :arrow_down: |\n| src/month_dropdown.jsx | 87.17% <76.92%> (-9.8%) | :arrow_down: |\n| src/year_dropdown.jsx | 87.8% <77.77%> (-9.5%) | :arrow_down: |\n| src/month_dropdown_options.jsx | 53.84% <80%> (-37.83%) | :arrow_down: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 304e408...c1521be. Read the comment docs.. # Codecov Report\nMerging #824 into master will increase coverage by 0.38%.\nThe diff coverage is 96%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #824      +/-\n==========================================\n+ Coverage   85.89%   86.27%   +0.38%   \n==========================================\n  Files          12       12            \n  Lines         645      663      +18   \n  Branches      120      123       +3   \n==========================================\n+ Hits          554      572      +18   \n  Misses          7        7            \n  Partials       84       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown.jsx | 87.8% <100%> (\u00f8) | :arrow_up: |\n| src/year_dropdown_options.jsx | 87.23% <95.83%> (+7.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c81f25...d634df4. Read the comment docs.\n. # Codecov Report\nMerging #825 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #825      +/-\n==========================================\n+ Coverage   92.65%   92.68%   +0.02%   \n==========================================\n  Files          12       12            \n  Lines         613      615       +2   \n  Branches      114      115       +1   \n==========================================\n+ Hits          568      570       +2   \n  Misses          8        8            \n  Partials       37       37\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 93.46% <100%> (+0.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 304e408...942cdd9. Read the comment docs.\n. # Codecov Report\nMerging #828 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #828   +/-\n=======================================\n  Coverage   85.89%   85.89%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          554      554         \n  Misses          7        7         \n  Partials       84       84\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d3d02c3...4fb7e51. Read the comment docs.\n. # Codecov Report\nMerging #833 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #833   +/-\n=======================================\n  Coverage   85.89%   85.89%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          554      554         \n  Misses          7        7         \n  Partials       84       84\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c81f25...76a05c9. Read the comment docs.\n. # Codecov Report\nMerging #835 into master will decrease coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #835      +/-\n==========================================\n- Coverage   85.89%   85.78%   -0.12%   \n==========================================\n  Files          12       12            \n  Lines         645      647       +2   \n  Branches      120      121       +1   \n==========================================\n+ Hits          554      555       +1   \n- Misses          7        8       +1   \n  Partials       84       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 70.83% <\u00f8> (+1.26%) | :arrow_up: |\n| src/calendar.jsx | 86.95% <\u00f8> (-0.77%) | :arrow_down: |\n| src/month.jsx | 82.6% <\u00f8> (-0.38%) | :arrow_down: |\n| src/datepicker.jsx | 91.77% <\u00f8> (+0.21%) | :arrow_up: |\n| src/day.jsx | 89.7% <100%> (-0.44%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...af21d9e. Read the comment docs.\n. # Codecov Report\nMerging #839 into master will decrease coverage by 7.07%.\nThe diff coverage is 26.82%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #839      +/-\n==========================================\n- Coverage   85.84%   78.77%   -7.08%   \n==========================================\n  Files          12       13       +1   \n  Lines         643      716      +73   \n  Branches      128      141      +13   \n==========================================\n+ Hits          552      564      +12   \n- Misses          6       61      +55   \n- Partials       85       91       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 79.66% <14.28%> (-20.34%) | :arrow_down: |\n| src/datepicker.jsx | 89.94% <50%> (-2.15%) | :arrow_down: |\n| src/calendar.jsx | 85.6% <63.15%> (-2.8%) | :arrow_down: |\n| src/time.jsx | 9.09% <9.75%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e7b2fe...e400d89. Read the comment docs.\n. # Codecov Report\nMerging #840 into master will decrease coverage by 0.26%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #840      +/-\n==========================================\n- Coverage   85.89%   85.62%   -0.27%   \n==========================================\n  Files          12       12            \n  Lines         645      640       -5   \n  Branches      120      120            \n==========================================\n- Hits          554      548       -6   \n- Misses          7        8       +1   \n  Partials       84       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 68.18% <\u00f8> (-1.39%) | :arrow_down: |\n| src/month.jsx | 82.6% <\u00f8> (-0.38%) | :arrow_down: |\n| src/calendar.jsx | 87.06% <\u00f8> (-0.66%) | :arrow_down: |\n| src/day.jsx | 89.06% <100%> (-1.08%) | :arrow_down: |\n| src/datepicker.jsx | 91.66% <100%> (+0.1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...0c7caf6. Read the comment docs.\n. # Codecov Report\nMerging #853 into master will decrease coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #853      +/-\n========================================\n- Coverage   86.06%    86%   -0.07%   \n========================================\n  Files          12     12            \n  Lines         646    643       -3   \n  Branches      120    119       -1   \n========================================\n- Hits          556    553       -3   \n  Misses          7      7            \n  Partials       83     83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.1% <100%> (-0.16%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40c7ee7...747683d. Read the comment docs.\n. # Codecov Report\nMerging #854 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #854   +/-\n=======================================\n  Coverage   85.89%   85.89%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          554      554         \n  Misses          7        7         \n  Partials       84       84\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...736db9e. Read the comment docs.\n. # Codecov Report\nMerging #855 into master will increase coverage by 0.17%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #855      +/-\n==========================================\n+ Coverage   85.89%   86.06%   +0.17%   \n==========================================\n  Files          12       12            \n  Lines         645      646       +1   \n  Branches      120      120            \n==========================================\n+ Hits          554      556       +2   \n  Misses          7        7            \n+ Partials       84       83       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.25% <75%> (+0.69%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...0a617b4. Read the comment docs.\n. # Codecov Report\nMerging #857 into master will increase coverage by 0.17%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #857      +/-\n==========================================\n+ Coverage   85.89%   86.06%   +0.17%   \n==========================================\n  Files          12       12            \n  Lines         645      646       +1   \n  Branches      120      120            \n==========================================\n+ Hits          554      556       +2   \n  Misses          7        7            \n+ Partials       84       83       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.25% <100%> (+0.69%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...ac716b9. Read the comment docs.\n. # Codecov Report\nMerging #858 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #858   +/-\n=======================================\n  Coverage   85.89%   85.89%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          554      554         \n  Misses          7        7         \n  Partials       84       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 87.71% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month_dropdown.jsx | 87.17% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3fef2a...26321bf. Read the comment docs.\n. # Codecov Report\nMerging #859 into master will decrease coverage by 0.44%.\nThe diff coverage is 86.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #859      +/-\n==========================================\n- Coverage      86%   85.56%   -0.45%   \n==========================================\n  Files          12       12            \n  Lines         643      651       +8   \n  Branches      119      124       +5   \n==========================================\n+ Hits          553      557       +4   \n  Misses          7        7            \n- Partials       83       87       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 86.07% <86.66%> (-4.07%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd3c9ae...26d0204. Read the comment docs.\n. # Codecov Report\nMerging #860 into master will decrease coverage by 0.17%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #860      +/-\n==========================================\n- Coverage   85.56%   85.38%   -0.18%   \n==========================================\n  Files          12       12            \n  Lines         651      643       -8   \n  Branches      124      120       -4   \n==========================================\n- Hits          557      549       -8   \n  Misses          7        7            \n  Partials       87       87\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 86.79% <100%> (-0.93%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24e0537...268d047. Read the comment docs.\n. # Codecov Report\nMerging #866 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #866   +/-\n=======================================\n  Coverage   86.06%   86.06%         \n=======================================\n  Files          12       12         \n  Lines         646      646         \n  Branches      120      120         \n=======================================\n  Hits          556      556         \n  Misses          7        7         \n  Partials       83       83\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1decff...3f1a2a2. Read the comment docs.\n. # Codecov Report\nMerging #881 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #881   +/-\n=====================================\n  Coverage      86%    86%         \n=====================================\n  Files          12     12         \n  Lines         643    643         \n  Branches      119    119         \n=====================================\n  Hits          553    553         \n  Misses          7      7         \n  Partials       83     83\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd3c9ae...cc56e3d. Read the comment docs.\n. # Codecov Report\nMerging #883 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #883      +/-\n==========================================\n+ Coverage      86%   86.04%   +0.04%   \n==========================================\n  Files          12       12            \n  Lines         643      645       +2   \n  Branches      119      119            \n==========================================\n+ Hits          553      555       +2   \n  Misses          7        7            \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.2% <100%> (+0.1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd3c9ae...eac0d06. Read the comment docs.\n. # Codecov Report\nMerging #889 into master will increase coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #889      +/-\n==========================================\n+ Coverage      86%   86.08%   +0.08%   \n==========================================\n  Files          12       12            \n  Lines         643      647       +4   \n  Branches      119      119            \n==========================================\n+ Hits          553      557       +4   \n  Misses          7        7            \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.3% <0%> (+0.2%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd3c9ae...adfb5aa. Read the comment docs.\n. # Codecov Report\nMerging #896 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #896   +/-\n=======================================\n  Coverage   85.42%   85.42%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          551      551         \n  Misses          7        7         \n  Partials       87       87\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6dc21f2...a255ab4. Read the comment docs.\n. # Codecov Report\nMerging #897 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #897   +/-\n=======================================\n  Coverage   85.42%   85.42%         \n=======================================\n  Files          12       12         \n  Lines         645      645         \n  Branches      120      120         \n=======================================\n  Hits          551      551         \n  Misses          7        7         \n  Partials       87       87\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 813ed49...0a313b4. Read the comment docs.\n. # Codecov Report\nMerging #898 into master will increase coverage by 0.04%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #898      +/-\n==========================================\n+ Coverage   85.42%   85.47%   +0.04%   \n==========================================\n  Files          12       12            \n  Lines         645      647       +2   \n  Branches      120      120            \n==========================================\n+ Hits          551      553       +2   \n  Misses          7        7            \n  Partials       87       87\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.3% <\u00f8> (+0.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 612e050...ca3d9bf. Read the comment docs.\n. # Codecov Report\nMerging #900 into master will decrease coverage by 0.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #900     +/-\n=========================================\n- Coverage   85.47%   85.38%   -0.1%   \n=========================================\n  Files          12       12           \n  Lines         647      643      -4   \n  Branches      120      120           \n=========================================\n- Hits          553      549      -4   \n  Misses          7        7           \n  Partials       87       87\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.1% <\u00f8> (-0.21%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8c5fbe...10ec4b0. Read the comment docs.\n. # Codecov Report\nMerging #901 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #901   +/-\n=======================================\n  Coverage   85.47%   85.47%         \n=======================================\n  Files          12       12         \n  Lines         647      647         \n  Branches      120      120         \n=======================================\n  Hits          553      553         \n  Misses          7        7         \n  Partials       87       87\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8c5fbe...e5464e6. Read the comment docs.\n. # Codecov Report\nMerging #902 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #902   +/-\n=======================================\n  Coverage   85.47%   85.47%         \n=======================================\n  Files          12       12         \n  Lines         647      647         \n  Branches      120      120         \n=======================================\n  Hits          553      553         \n  Misses          7        7         \n  Partials       87       87\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8c5fbe...d9bf9a4. Read the comment docs.\n. # Codecov Report\nMerging #904 into master will decrease coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #904      +/-\n==========================================\n- Coverage   85.47%   85.33%   -0.14%   \n==========================================\n  Files          12       12            \n  Lines         647      648       +1   \n  Branches      120      121       +1   \n==========================================\n  Hits          553      553            \n  Misses          7        7            \n- Partials       87       88       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <100%> (-0.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5d26ae...70d2624. Read the comment docs.\n. # Codecov Report\nMerging #907 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #907   +/-\n=======================================\n  Coverage   85.47%   85.47%         \n=======================================\n  Files          12       12         \n  Lines         647      647         \n  Branches      120      120         \n=======================================\n  Hits          553      553         \n  Misses          7        7         \n  Partials       87       87\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd2a7f3...8f91399. Read the comment docs.\n. # Codecov Report\nMerging #910 into master will increase coverage by 0.18%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #910      +/-\n==========================================\n+ Coverage   85.33%   85.52%   +0.18%   \n==========================================\n  Files          12       12            \n  Lines         648      601      -47   \n  Branches      121      114       -7   \n==========================================\n- Hits          553      514      -39   \n+ Misses          7        3       -4   \n+ Partials       88       84       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.82% <100%> (+0.1%) | :arrow_up: |\n| src/popper_component.jsx | 57.14% <57.14%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 82a48b0...4872f8e. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c450d9a). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #921   +/-\n=========================================\n  Coverage          ?   85.47%         \n=========================================\n  Files             ?       12         \n  Lines             ?      606         \n  Branches          ?      115         \n=========================================\n  Hits              ?      518         \n  Misses            ?        4         \n  Partials          ?       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c450d9a...e698f78. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c450d9a). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #925   +/-\n=========================================\n  Coverage          ?   85.47%         \n=========================================\n  Files             ?       12         \n  Lines             ?      606         \n  Branches          ?      115         \n=========================================\n  Hits              ?      518         \n  Misses            ?        4         \n  Partials          ?       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c450d9a...4f55253. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c450d9a). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #926   +/-\n========================================\n  Coverage          ?   85.4%         \n========================================\n  Files             ?      12         \n  Lines             ?     610         \n  Branches          ?     116         \n========================================\n  Hits              ?     521         \n  Misses            ?       5         \n  Partials          ?      84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 85.45% <\u00f8> (\u00f8) | |\n| src/datepicker.jsx | 91.77% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c450d9a...784ccf2. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c450d9a). Click here to learn what that means.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #930   +/-\n=========================================\n  Coverage          ?   85.64%         \n=========================================\n  Files             ?       12         \n  Lines             ?      613         \n  Branches          ?      116         \n=========================================\n  Hits              ?      525         \n  Misses            ?        4         \n  Partials          ?       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.77% <\u00f8> (\u00f8) | |\n| src/calendar.jsx | 86.72% <50%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c450d9a...cba907e. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c450d9a). Click here to learn what that means.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #931   +/-\n=========================================\n  Coverage          ?   85.64%         \n=========================================\n  Files             ?       12         \n  Lines             ?      613         \n  Branches          ?      116         \n=========================================\n  Hits              ?      525         \n  Misses            ?        4         \n  Partials          ?       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.77% <\u00f8> (\u00f8) | |\n| src/calendar.jsx | 86.72% <50%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c450d9a...cba907e. Read the comment docs.\n. # Codecov Report\nMerging #933 into master will increase coverage by 0.32%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #933      +/-\n==========================================\n+ Coverage   85.62%   85.94%   +0.32%   \n==========================================\n  Files          12       12            \n  Lines         612      612            \n  Branches      116      117       +1   \n==========================================\n+ Hits          524      526       +2   \n+ Misses          4        3       -1   \n+ Partials       84       83       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.77% <\u00f8> (+0.05%) | :arrow_up: |\n| src/calendar.jsx | 88.39% <0%> (+1.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8e85fa...ad655b5. Read the comment docs.\n. # Codecov Report\nMerging #934 into master will increase coverage by 0.04%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #934      +/-\n==========================================\n+ Coverage   85.62%   85.66%   +0.04%   \n==========================================\n  Files          12       12            \n  Lines         612      614       +2   \n  Branches      116      117       +1   \n==========================================\n+ Hits          524      526       +2   \n  Misses          4        4            \n  Partials       84       84\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 86.48% <\u00f8> (-0.24%) | :arrow_down: |\n| src/month.jsx | 82.6% <\u00f8> (\u00f8) | :arrow_up: |\n| src/datepicker.jsx | 91.77% <100%> (+0.05%) | :arrow_up: |\n| src/week.jsx | 74.07% <60%> (+3.24%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8e85fa...5c11eb1. Read the comment docs.\n. # Codecov Report\nMerging #935 into master will decrease coverage by 0.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #935      +/-\n==========================================\n- Coverage   85.99%   85.83%   -0.17%   \n==========================================\n  Files          12       12            \n  Lines         614      614            \n  Branches      118      118            \n==========================================\n- Hits          528      527       -1   \n  Misses          3        3            \n- Partials       83       84       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.08% <100%> (-0.64%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ad8de0...15cb87f. Read the comment docs.\n. # Codecov Report\nMerging #936 into master will decrease coverage by 0.6%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #936      +/-\n==========================================\n- Coverage   85.99%   85.38%   -0.61%   \n==========================================\n  Files          12       12            \n  Lines         614      616       +2   \n  Branches      118      120       +2   \n==========================================\n- Hits          528      526       -2   \n- Misses          3        6       +3   \n- Partials       83       84       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <\u00f8> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 87.96% <\u00f8> (-0.43%) | :arrow_down: |\n| src/month.jsx | 81.81% <100%> (-0.8%) | :arrow_down: |\n| src/week_number.jsx | 35.71% <28.57%> (+2.38%) | :arrow_up: |\n| src/week.jsx | 73.33% <66.66%> (-0.75%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ad8de0...8c0f695. Read the comment docs.\n. # Codecov Report\nMerging #940 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #940   +/-\n=======================================\n  Coverage   85.87%   85.87%         \n=======================================\n  Files          12       12         \n  Lines         609      609         \n  Branches      118      118         \n=======================================\n  Hits          523      523         \n  Misses          3        3         \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.71% <\u00f8> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 87.96% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68713b9...486ab5b. Read the comment docs.\n. # Codecov Report\nMerging #941 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #941      +/-\n==========================================\n- Coverage   85.87%   85.85%   -0.03%   \n==========================================\n  Files          12       12            \n  Lines         609      608       -1   \n  Branches      118      119       +1   \n==========================================\n- Hits          523      522       -1   \n  Misses          3        3            \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.66% <100%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d5b099...3779167. Read the comment docs.\n. # Codecov Report\nMerging #944 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #944   +/-\n=======================================\n  Coverage   85.85%   85.85%         \n=======================================\n  Files          12       12         \n  Lines         608      608         \n  Branches      119      119         \n=======================================\n  Hits          522      522         \n  Misses          3        3         \n  Partials       83       83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 57.14% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b3331b0...36719fb. Read the comment docs.\n. # Codecov Report\nMerging #946 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #946      +/-\n=========================================\n+ Coverage   85.85%   85.9%   +0.04%   \n=========================================\n  Files          12      12            \n  Lines         608     610       +2   \n  Branches      119     120       +1   \n=========================================\n+ Hits          522     524       +2   \n  Misses          3       3            \n  Partials       83      83\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.77% <100%> (+0.1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 072ee92...e73e456. Read the comment docs.\n. # Codecov Report\nMerging #949 into master will increase coverage by 1.32%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #949      +/-\n==========================================\n+ Coverage   85.85%   87.18%   +1.32%   \n==========================================\n  Files          12       12            \n  Lines         608      632      +24   \n  Branches      119      131      +12   \n==========================================\n+ Hits          522      551      +29   \n  Misses          3        3            \n+ Partials       83       78       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 95.55% <\u00f8> (+3.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 072ee92...0627519. Read the comment docs.\n. # Codecov Report\nMerging #955 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #955   +/-\n=======================================\n  Coverage   85.48%   85.48%         \n=======================================\n  Files          12       12         \n  Lines         627      627         \n  Branches      122      122         \n=======================================\n  Hits          536      536         \n  Misses          6        6         \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 57.14% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5f9bfd...35e1707. Read the comment docs.\n. # Codecov Report\nMerging #960 into master will decrease coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #960      +/-\n==========================================\n- Coverage   85.55%   85.46%   -0.09%   \n==========================================\n  Files          12       12            \n  Lines         630      633       +3   \n  Branches      122      124       +2   \n==========================================\n+ Hits          539      541       +2   \n  Misses          6        6            \n- Partials       85       86       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.01% <100%> (-0.5%) | :arrow_down: |\n| src/day.jsx | 87.2% <0%> (+0.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9889f9c...fec0149. Read the comment docs.\n. # Codecov Report\nMerging #963 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #963      +/-\n==========================================\n+ Coverage   85.55%   85.57%   +0.02%   \n==========================================\n  Files          12       12            \n  Lines         630      631       +1   \n  Branches      122      122            \n==========================================\n+ Hits          539      540       +1   \n  Misses          6        6            \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 87.2% <100%> (+0.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9889f9c...ccffb62. Read the comment docs.\n. # Codecov Report\nMerging #965 into master will increase coverage by 0.18%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #965      +/-\n==========================================\n+ Coverage   85.46%   85.64%   +0.18%   \n==========================================\n  Files          12       12            \n  Lines         633      648      +15   \n  Branches      124      129       +5   \n==========================================\n+ Hits          541      555      +14   \n  Misses          6        6            \n- Partials       86       87       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.2% <88.88%> (+0.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fd85eb...a829e8d. Read the comment docs.\n. # Codecov Report\nMerging #971 into master will not change coverage.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #971   +/-\n=======================================\n  Coverage   85.46%   85.46%         \n=======================================\n  Files          12       12         \n  Lines         633      633         \n  Branches      124      125    +1   \n=======================================\n  Hits          541      541         \n  Misses          6        6         \n  Partials       86       86\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.01% <66.66%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fd85eb...546a1db. Read the comment docs.\n. # Codecov Report\nMerging #980 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #980      +/-\n==========================================\n+ Coverage   85.75%   85.84%   +0.08%   \n==========================================\n  Files          12       12            \n  Lines         639      643       +4   \n  Branches      128      128            \n==========================================\n+ Hits          548      552       +4   \n  Misses          6        6            \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 92.09% <100%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19f78df...837a92c. Read the comment docs.\n. # Codecov Report\nMerging #981 into master will increase coverage by 0.18%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #981      +/-\n==========================================\n+ Coverage   85.46%   85.64%   +0.18%   \n==========================================\n  Files          12       12            \n  Lines         633      641       +8   \n  Branches      124      126       +2   \n==========================================\n+ Hits          541      549       +8   \n  Misses          6        6            \n  Partials       86       86\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.42% <100%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fd85eb...2182bc3. Read the comment docs.\n. # Codecov Report\nMerging #992 into master will increase coverage by 0.11%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #992      +/-\n==========================================\n+ Coverage   85.64%   85.75%   +0.11%   \n==========================================\n  Files          12       12            \n  Lines         641      639       -2   \n  Branches      126      128       +2   \n==========================================\n- Hits          549      548       -1   \n  Misses          6        6            \n+ Partials       86       85       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.9% <83.33%> (+0.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 867d5d1...cf3277f. Read the comment docs.\n. # Codecov Report\nMerging #996 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #996   +/-\n=======================================\n  Coverage   85.75%   85.75%         \n=======================================\n  Files          12       12         \n  Lines         639      639         \n  Branches      128      128         \n=======================================\n  Hits          548      548         \n  Misses          6        6         \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.9% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19f78df...5cf21ac. Read the comment docs.\n. # Codecov Report\nMerging #998 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #998   +/-\n=======================================\n  Coverage   85.75%   85.75%         \n=======================================\n  Files          12       12         \n  Lines         639      639         \n  Branches      128      128         \n=======================================\n  Hits          548      548         \n  Misses          6        6         \n  Partials       85       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19f78df...0f2c897. Read the comment docs.\n. # Codecov Report\nMerging #1001 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1001   +/-\n=======================================\n  Coverage   85.75%   85.75%         \n=======================================\n  Files          12       12         \n  Lines         639      639         \n  Branches      128      128         \n=======================================\n  Hits          548      548         \n  Misses          6        6         \n  Partials       85       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19f78df...eaa5487. Read the comment docs.\n. # Codecov Report\nMerging #1007 into master will increase coverage by 6.96%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1007      +/-\n==========================================\n+ Coverage   78.77%   85.73%   +6.96%   \n==========================================\n  Files          13       12       -1   \n  Lines         716      638      -78   \n  Branches      141      129      -12   \n==========================================\n- Hits          564      547      -17   \n+ Misses         61        6      -55   \n+ Partials       91       85       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 87.85% <100%> (+2.25%) | :arrow_up: |\n| src/time.jsx | | |\n| src/datepicker.jsx | 92.09% <0%> (+2.14%) | :arrow_up: |\n| src/date_utils.js | 100% <0%> (+20.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1957c31...55aaa63. Read the comment docs.\n. \n",
    "kumarharsh": "Ah, sorry for not being clear.\nBasically what I am suggesting is that: would it be viable to add another propType to the datepicker which can add some user-defined class to the datepicker overlay?\nThe reason being that, just like users may like to style the datepicker input field, they may like to style the overlay differently too...\n. Right now, there are the classes applied on the Datepicker overlay:\ndatepicker__container tether-element tether-enabled tether-abutted tether-abutted-left tether-element-attached-top tether-element-attached-left tether-target-attached-bottom tether-target-attached-left\nAll of them are the ones supplied by tether, except for the datepicker__container which is specific to the picker.\nI'm suggesting that you allow a user to also specify a class which can be added to this list, say something like: holiday_picker, workday_picker, etc, so that they can style two pickers differently in the same app. Right now users can have only ONE style for the datepicker overlay per app.\nAgain, it's just a suggestion, and I don't require it myself anymore because I will not have two different styled overlays in my app.\n. ",
    "brandonfancher": "I'm having this same exact problem.\n. ",
    "TrofimenkoAI": "Hello guys, I really enjoy date picker, but we have a little bug, when date fields jumps up and down. I mean when select date current position upper on input. Picker change his position randomly when you select month in different ways :(\n(Sorry for bad English)\n. ",
    "aaronmgdr": "two ways I think could work are using optional children prop\n<DatePicker  selected={this.props.startDate} onChange={this.onChangeStart} >\n<i className=\"cal-icon\"/>\n</DatePicker>\nor using an optional Icon prop\n<DatePicker  selected={this.props.startDate} onChange={this.onChangeStart} icon={<i className=\"cal-icon\"/>} >\ninternally something like \nicon() {\n   if (this.props.icon) {\n      <span onClick={this.onInputClick}> {this.props.icon} </span>\n   }\n}\nrender() {\n   return (\n      <div className=\"datepicker__input-container\">\n        <DateInput\n          ref=\"input\"\n          id={this.props.id}\n          name={this.props.name}\n          date={this.state.selected}\n          dateFormat={this.props.dateFormat}\n          focus={this.state.focus}\n          onFocus={this.handleFocus}\n          onBlur={this.handleBlur}\n          handleClick={this.onInputClick}\n          handleEnter={this.hideCalendar}\n          setSelected={this.setSelected}\n          invalidateSelected={this.invalidateSelected}\n          placeholderText={this.props.placeholderText}\n          disabled={this.props.disabled}\n          className={this.props.className}\n          title={this.props.title}\n          readOnly={this.props.readOnly}\n          required={this.props.required}\n          tabIndex={this.props.tabIndex} />\n        {clearButton}\n        {this.props.disabled ? null : this.calendar()}\n        {this.icon()} \n      </div>\n    );\n}\n. yep props sounds great to me.\n. @benwill not sure. i switched to react-date-picker so stopped paying attention\n. based on @schickling comment gonna close this. ",
    "gaastonsr": "Why not add an open method to the component?\nAlso, is somebody working on this? I can make a PR.\n. Because it's not an official API. You just went into the inners of the component to open it.\nIdeally you shouldn't have to do that but until something official comes up I think it's ok.\n. I can :), thanks.\n. Thank you!\nSent from my iPhone\n\nOn 07/01/2016, at 3:36 a.m., Martijn Russchen notifications@github.com wrote:\nHere you go https://github.com/Hacker0x01/react-datepicker/releases/tag/v0.18.0\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this is not the right way to do it. The way they recommend here https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html is a much better way in my opinion.\n\nI'll do a PR.\n. If we analyze where the problem relies I think the only problematic point is when we lose focus from the input because it is unmounted and it tries to hide the calendar by calling to setState.\nScenario:\n1. Input has focus (state.focus = true)\n2. We unmount the element\n3. Input loses focus because it was unmounted (state.focus still true), sets timeout\n4. Timeout callback runs and tries to hide the calendar (state.focus = false)\n5. Warning: you can't call setState from an element that is unmounted\nhandleFocus can't be problematic because you can't focus an element that is unmounted, handleBur and handleSelect are a proxy to hideCalendar so if we fix hideCalendar it would fix handleBlur.\n. Sorry for the late reply, let me check the PR.\n. @RSO I think your way works too :)\n. ",
    "benwill": "Is there any progress with this?\n. +1, think this is much better than how it currently works\n. ",
    "matias91": "I'm trying to do something like this, with no success.\nAny news?\n. ",
    "GrizliK1988": "Hi @fremn, @matias91.\nYou can do what you need by assigning ref property to datepicker component and after that calling this.refs.nameOfRef.setOpen(true).\nThat's it.\n. ",
    "M3lkior": "Or with the React ref-callback attribute : \n<DatePicker {...this.props} className=\"form-control \" ref={(c) => this._calendar = c}/>\n<InputGroup.Addon><i className=\"fa fa-calendar\" onClick={() => this._calendar.setOpen(true)}/></InputGroup.Addon>\n@RSO @martijnrusschen , the Datapicker API is describred somewhere ?\n. Not the setOpen function for example.\nThis doc only list availables props, without descriptions or uses examples. Is it possible to improve this doc ?\nThanks in advance.\n. ",
    "schickling": "This should fix the problem: https://github.com/Hacker0x01/react-datepicker/pull/531\n. ",
    "waynebrantley": "Initially, would be nice to just specify if it is open via props.\n. \" this only covers the initial open state\" - I think that would at least be a good start.  Then do another feature to honor it in more places.  I tried to do an 'in place' edit with your control.  Everything works great, but it requires an extra click.  \nWhat people are after for the open is a 'control' that opens the datepicker other than picking.  Like the React-Date-Picker component has a built in little icon that you click to open the date picker.  You do not have to open it...you can just edit the date.  That would be a better 'larger' feature (which is easier to enable with this open prop).\nNice component.\n. @rafeememon \nI think one year later we have all seen a big adoption of typescript, including support at NPM level for the type definitions.  Any further consideration?. ",
    "wwwebman": "So, there is no any progress with adding isOpen prop or something?. ",
    "aspirisen": "Ok, when i will fix it should  i create a new pull request, or what? Because I haven't had experience in it.\n. Done. Thanks\n. @RSO \n\nOne of the most important things to me is that the source code of this plugin should be as easy as possible for new people to dive in to\n\nYes, on the one hand TypeScript is one more tool that would be nice to know a bit in order to develop application, but on the other hand it allows to know more about the code just by taking a glance on it, for example what a variable is without searching through the whole code, or to know what arguments function requires, what properties has a class and which are allowed for using (public) and which are not (private). In addition, using TypeScript gives a great refactoring ability, correct find usages, go to definition and so on.\nTo my mind TypeScript gets more and more popular nowadays, for example Angular 2 was written in TypeScript and it is one of the recommended languages for developing on Angular and hence there are will be greater amount of developers that will know TS and I think some of them will propagandize using of TypeScript. \n\nHow would this be different from PropTypes? I would think that those are meant to intercept most of the typing issues, right?\n\nYes, it handles type errors but only in runtime, IDE nothing really knows about this types and can't notify you that some arguments are not correct with more guarantees.\n@rafeememon \n\ncan you give an example of a case where a typing file would be valuable to a project consuming this library?\n\nThe most useful things that TypeScript can generate definition files that can be used in IDE separately from the library original source code. For example, there is a repository that contains a lot of declarations of libraries. Any can download declaration for example for jQuery and get autocomplete in IDE that supports TypeScript. Webstorm has built-in system that allows users to download this definitions directly from the IDE. Also, Atom, Sublime, and some other IDE's have support of TypeScript.\nTo my mind TypeScript is more for humans rather that for the technical stuff. The fact that it transpiles ES2015 to ES5 it is just a good feature. The main purpose is type checking as humans tend to be inattentive, make typos, pass incorrect arguments to functions etc. TypeScript helps to handle such errors.\n\nis there a path for generating a typing file from ES6\n\nWell, TypeScript was designed as subset of JavaScript, it means that every JavaScript code is correct TypeScript code (but, there are some pitfalls, but they are not significant and it is simple to fix them). We can just rename all the .jsx files to .tsx and add loader to webpack and it will work, maybe it will demand some additional movements like adding types of React, but it is not difficult. Moreover TypeScript has a very powerful ability to infer types. \nFor example in this code:\n```\nfunction getName() {\n    return \"My Name\";\n}\nvar name = getName();\n```\nTypeScript can guess that name has String type and we don't need to set it manually, and in this example IDE has correct autocomplete for the name variable.\nMaking a conclusion i want to emphasize that by using TypeScript we will get at least these abilities:\n- Good autocomplete\n- Typos correction\n- Generation of types definitions\n- Strict type checking, highlighting of such errors in the editor\n- Better IDE integration such as refactoring\nI believe it is not difficult to add TypeScript support in this library, I can make so to say POC to show how it will look like just as a simple example.\n. Maybe on day :) ok, perhaps it is good to not to have additional instrument now that is not commonly used yet.\n. @Nopzen Try to embed the datepicker's CSS file manually in your HTML document\n. ",
    "psibi": "@rafeememon Ah sorry, it's duplicate of #283.\n. ",
    "melnikov-s": "This is perfect! Thanks @rafeememon , @martijnrusschen \n. ",
    "mike-engel": "@rafeememon This would be great! I'm currently working on a project that needs just this. Right now, however, I have to download a zip of the project and reference the calendar object locally. Would you consider adding the src folder to the package.json files key? That way I could just install this package and get at the singular calendar component (and its required files). Thanks!\n. Thanks @rafeememon. Is there anything I can help with?\n. ",
    "tomazzaman": "Agreed, it will definitely be a UX improvement to show these differently.\n. ",
    "Nopzen": "NB: When i look my inspect tools, the classes are applyed on the html document but not loaded in?\n. @aspirisen - Its added through npm, i guess that datepicker should use the stylesheet it self?\n-  its not possible for me to add the css file from the node_modules folder.\n. @rafeememon - Works :+1:  Thanks!\n. ",
    "ir-fuel": "Maybe this should be added to the main doc here? I stumbled on the same issue.\n. doh\n. ",
    "calbucci": "I'm having a similar problem and adding import 'react-datepicker/dist/react-datepicker.css'; to my component JSX (ES6) doesn't work. I'm using gulp to build my CSS. Any suggestion on what am I missing? I can verify the datepicker* styles are not on the built CSS.\nThe gulp task is this:\n(notice I tried to add the full path of the datepicker.css and still didn't work)\ngulp.task('build-sass', function () {\n    return gulp\n        .src(\n            ['src/styles/**/*.scss',\n            'node_modules/react-datepicker/dist/react-datepicker.css']\n        )\n        .pipe(sass().on('error', sass.logError))\n        .on('error', notify.onError(function (err) {\n              console.error(err.codeFrame ? err.codeFrame : err.message);\n              return 'CSS build failed.';\n        }))\n        .pipe(concat('site.css'))\n        .pipe(gulp.dest('site/compiled-css/'))\n        .pipe(notify('\u2713 CSS build success.'));\n});\n. ",
    "brettjanssen": "It has the same problem in Chrome using a Windows Precision Touchpad (and in fact when you select the date it doesn't populate the field).  It works fine with a mouse though!  Weird.\n. ",
    "raptoria": "+1   I have the same problem with IE10, my error message is:\nLine: 110121\nError: Object doesn't support property or method 'setState'\n. thank you!!!\n. awesome. can't wait!\n. getting this error upgrading to the latest:\nclacey@clacey-VirtualBox:~/react-flask$ npm install react-datepicker --save\nnpm WARN package.json react-flask@0.0.0 No repository field.\nnpm WARN peerDependencies The peer dependency react@^0.14.7 included from react-addons-shallow-compare will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency \nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\nreact-datepicker@0.20.0 node_modules/react-datepicker\n\u251c\u2500\u2500 react-onclickoutside@4.5.0\n\u251c\u2500\u2500 classnames@2.2.3\n\u2514\u2500\u2500 react-tether@0.1.2 (tether@1.1.1, react@0.14.7, react-addons-shallow-compare@0.14.7)\nclacey@clacey-Virtu\nrunning the code:\nERROR in ./~/react-datepicker/dist/react-datepicker.min.js\nModule not found: Error: Cannot resolve module 'tether' in /home/clacey/react-flask/node_modules/react-datepicker/dist\n @ ./~/react-datepicker/dist/react-datepicker.min.js 1:170-187\nwebpack: bundle is now VALID.\n. It solves the setState error, and works wonderfully in IE10 as well.  Does the new version change the classNames? The CSS I had to style the calendar doesn't work with this new version. \n. are you guys going to publish the latest version to NPM? thanx!\n. ",
    "Froncz": "Sorry this was meant for forked repo.\n. Of course I wouldn't mind :) I will be able to do it tomorrow.\n. ",
    "ihsansatriawan": "thx @rafeememon ! i prefer use arrow function onChange={(date) => this.handleChangeDate(date)}\nthx for your suggest\n. ",
    "silvenon": "Suggestion:\n``` jsx\n// weekly include Mondays and Thursdays\n// indexes should start from 1 or 0?\n\n// monthly exclude 5th, 10th and 21th\n// not sure how that would work for leap years :/\n\n```\n. Better suggestion:\njsx\n<DatePicker\n  includeDates={date => moment(date).day() === 4}\n/>\n. :+1: \n. ",
    "PetarIvancevic": "You can do this by creating a new date and pass it to moment. If you store it in your component state then you can do this:\n```\nconst defaultDate = moment(new Date('YYYY', 'MM', 'DD'));\nthis.setState({ startDate: defaultDate });\n...\n\n```\nHope it helps someone.\n. ",
    "leahjlou": "Hi @TheSisb, just opened a PR for this if you want to take a look https://github.com/Hacker0x01/react-datepicker/pull/486\n. @rafeememon Oh right, my bad! I've gone ahead and removed those changes, would you prefer I rebase/squash those commits before merging or leave as is?\n. ",
    "carera": "+1 as I am overloading this component for iOS webview and displaying native iOS datepicker instead\n. ",
    "osala-netquest": "+1.\nTricky solution: assing formatted date to text input in onChange function -> YourDatePickerRef.refs.input.refs.input.value = date.format('YourFormat');\n. ",
    "mbektimirov": "I can confirm the issue.  The code is simple, nothing special:\njs\n<DatePicker\n  className='filter-input'\n  onChange={onDateFilterChange}\n  isClearable={true}\n  showYearDropdown={true} />\n\"react\": \"^0.14.6\",\n\"react-dom\": \"^0.14.7\",\n\"react-datepicker\": \"^0.20.0\",\n. The workaround for this problem is to provide selected date via selected prop with current state:\n``` js\nonDateFilterChange(momentDate) {\n    const date = momentDate ? momentDate.format('YYYY-MM-DD') : undefined;\n    this.setState({ date });\n  }\n// then in render\n\n``\n. @rafeememon I like this solution, but you need to clarify this approach in documentation and describe allDatePicker` props. \n. ",
    "vojty": "yeah that's, thank you!\n. ",
    "te-chris": "hey @rafeememon thanks for getting back to me.  installed via NPM, moment and react are both already in the project. \n. Here's my package.json \n{\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"description\": \"YOUR DESCRIPTION - Generated by generator-react-webpack\",\n  \"main\": \"\",\n  \"scripts\": {\n    \"clean\": \"rimraf dist/*\",\n    \"copy\": \"copyfiles -f ./src/index.html ./src/favicon.ico ./dist\",\n    \"dist\": \"npm run copy & webpack --env=dist\",\n    \"lint\": \"eslint ./src\",\n    \"posttest\": \"npm run lint\",\n    \"release:major\": \"npm version major && npm publish && git push --follow-tags\",\n    \"release:minor\": \"npm version minor && npm publish && git push --follow-tags\",\n    \"release:patch\": \"npm version patch && npm publish && git push --follow-tags\",\n    \"serve\": \"node server.js --env=dev\",\n    \"serve:dist\": \"node server.js --env=dist\",\n    \"start\": \"node server.js --env=dev\",\n    \"test\": \"karma start\",\n    \"test:watch\": \"karma start --autoWatch=true --singleRun=false\"\n  },\n  \"repository\": \"\",\n  \"keywords\": [],\n  \"author\": \"Your name here\",\n  \"devDependencies\": {\n    \"accounting\": \"^0.4.1\",\n    \"babel-core\": \"^6.0.0\",\n    \"babel-eslint\": \"^5.0.0-beta4\",\n    \"babel-loader\": \"^6.0.0\",\n    \"babel-preset-es2015\": \"^6.0.15\",\n    \"babel-preset-react\": \"^6.0.15\",\n    \"bower-webpack-plugin\": \"^0.1.9\",\n    \"chai\": \"^3.2.0\",\n    \"copyfiles\": \"^0.2.1\",\n    \"css-loader\": \"^0.23.0\",\n    \"eslint\": \"^1.2.1\",\n    \"eslint-loader\": \"^1.0.0\",\n    \"eslint-plugin-react\": \"^3.3.0\",\n    \"file-loader\": \"^0.8.4\",\n    \"glob\": \"^6.0.0\",\n    \"isparta-instrumenter-loader\": \"^1.0.0\",\n    \"karma\": \"^0.13.9\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-coverage\": \"^0.5.3\",\n    \"karma-mocha\": \"^0.2.0\",\n    \"karma-mocha-reporter\": \"^1.1.1\",\n    \"karma-phantomjs-launcher\": \"^0.2.1\",\n    \"karma-phantomjs-shim\": \"^1.1.1\",\n    \"karma-sourcemap-loader\": \"^0.3.5\",\n    \"karma-webpack\": \"^1.7.0\",\n    \"lodash\": \"^3.10.1\",\n    \"minimist\": \"^1.2.0\",\n    \"mocha\": \"^2.2.5\",\n    \"moment\": \"^2.11.1\",\n    \"node-sass\": \"^3.4.2\",\n    \"null-loader\": \"^0.1.1\",\n    \"open\": \"0.0.5\",\n    \"phantomjs\": \"^1.9.18\",\n    \"postcss\": \"^5.0.11\",\n    \"postcss-loader\": \"^0.8.0\",\n    \"postcss-svg\": \"^1.0.4\",\n    \"react-addons-test-utils\": \"^0.14.0\",\n    \"react-hot-loader\": \"^1.2.9\",\n    \"react-modal\": \"^0.6.1\",\n    \"rimraf\": \"^2.4.3\",\n    \"sass-loader\": \"^3.1.2\",\n    \"style-loader\": \"^0.13.0\",\n    \"url-loader\": \"^0.5.6\",\n    \"webpack\": \"^1.12.0\",\n    \"webpack-dev-server\": \"^1.12.0\"\n  },\n  \"dependencies\": {\n    \"alt\": \"^0.18.1\",\n    \"alt-utils\": \"^1.0.0\",\n    \"calc-polyfill\": \"^0.1.0\",\n    \"core-js\": \"^2.0.0\",\n    \"formsy-react\": \"^0.17.0\",\n    \"history\": \"^1.17.0\",\n    \"immutable\": \"^3.7.6\",\n    \"jquery\": \"^1.11.3\",\n    \"lockr\": \"^0.8.4\",\n    \"lost\": \"^6.6.3\",\n    \"lt-ie-9\": \"^0.1.0\",\n    \"normalize.css\": \"^3.0.3\",\n    \"react\": \"^0.14.0\",\n    \"react-date-picker\": \"^4.0.6\",\n    \"react-datepicker\": \"^0.20.0\",\n    \"react-dom\": \"^0.14.0\",\n    \"react-input-range\": \"^0.6.1\",\n    \"react-router\": \"^1.0.3\",\n    \"react-slick\": \"^0.9.3\"\n  }\n}\n. Sorry, there's no node_modules dir in there.  there is a bower_components dir\n. Using node 5.4 and latest npm.  Oh of course! Sorry didn't even notice that - a hangover from the generator.  Will remove as we're not using bower at all\n. Removed the bower loader and still getting this\n\n. Thanks for persisting, that was the issue.  Appreciate your patience! :)\n. Tbh I just needed one that worked as on a deadline so that was the next choice ;)\n. ",
    "formigone": "Ah, that makes sense. \nedit\nI've tweak my project, and the error persists. Here's my configs:\njavascript\n// package.json\n{\n   \"name\": \"watchit-client-app\",\n   \"version\": \"0.0.1\",\n   \"scripts\": {\n      \"build\": \"./node_modules/.bin/webpack -p\",\n      \"watch\": \"./node_modules/.bin/webpack --watch\"\n   },\n   \"devDependencies\": {\n      \"babel-core\": \"^6.4.5\",\n      \"babel-loader\": \"^6.2.2\",\n      \"babel-preset-es2015\": \"^6.1.18\",\n      \"babel-preset-react\": \"^6.1.18\",\n      \"webpack\": \"^1.12.13\"\n   },\n   \"dependencies\": {\n      \"moment\": \"2.10.x\",\n      \"react\": \"0.14.x\",\n      \"react-dom\": \"0.14.x\",\n      \"react-datepicker\": \"0.19.x\"\n   }\n}\njavascript\n// webpack.config.js\nmodule.exports = {\n   entry: './index.jsx',\n   output: {\n      filename: 'bundle.js'\n   },\n   module: {\n      loaders: [\n         {\n            test: /\\.jsx?$/,\n            exclude: /(node_modules)/,\n            loader: 'babel',\n            query: {\n               cacheDirectory: true,\n               presets: ['react', 'es2015']\n            }\n         }\n      ]\n   },\n   externals: {\n      'react': 'React',\n   },\n   resolve: {\n      extensions: ['', '.js', '.jsx']\n   }\n}\n``` javascript\n// index.jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Datepicker from 'react-datepicker';\nimport moment from 'moment';\nrender(, document.getElementById('app'));\n```\nNow I get a warning and the same error:\n```\nWarning: getInitialState was defined on DatePicker, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\nUncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's render method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n``\n. I'm not using.babelrc`. Here's my deps tree:\nnpm ls\nmy-app@0.0.1 /home/formigone/sandbox/my-app\n\u251c\u2500\u252c babel-core@6.4.5\n\u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u251c\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u251c\u2500\u252c babel-generator@6.4.5\n\u2502 \u2502 \u251c\u2500\u252c detect-indent@3.0.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 get-stdin@4.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 minimist@1.2.0\n\u2502 \u2502 \u251c\u2500\u252c is-integer@1.0.6\n\u2502 \u2502 \u2502 \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u251c\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2514\u2500\u2500 trim-right@1.0.1\n\u2502 \u251c\u2500\u2500 babel-helpers@6.4.5\n\u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u251c\u2500\u252c babel-register@6.4.3\n\u2502 \u2502 \u251c\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u251c\u2500\u252c home-or-tmp@1.0.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 os-tmpdir@1.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 user-home@1.1.1\n\u2502 \u2502 \u251c\u2500\u252c mkdirp@0.5.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8\n\u2502 \u2502 \u2514\u2500\u252c source-map-support@0.2.10\n\u2502 \u2502   \u2514\u2500\u252c source-map@0.1.32\n\u2502 \u2502     \u2514\u2500\u2500 amdefine@1.0.0\n\u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u2500 babel-template@6.3.13\n\u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u251c\u2500\u2500 convert-source-map@1.1.3\n\u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u251c\u2500\u2500 json5@0.4.0\n\u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u251c\u2500\u252c minimatch@2.0.10\n\u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.2\n\u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.3.0\n\u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n\u2502 \u251c\u2500\u2500 path-exists@1.0.0\n\u2502 \u251c\u2500\u2500 path-is-absolute@1.0.0\n\u2502 \u251c\u2500\u2500 private@0.1.6\n\u2502 \u251c\u2500\u2500 shebang-regex@1.0.0\n\u2502 \u251c\u2500\u2500 slash@1.0.0\n\u2502 \u2514\u2500\u2500 source-map@0.5.3\n\u251c\u2500\u252c babel-loader@6.2.2\n\u2502 \u251c\u2500\u252c loader-utils@0.2.12\n\u2502 \u2502 \u251c\u2500\u2500 big.js@3.1.3\n\u2502 \u2502 \u2514\u2500\u2500 json5@0.4.0\n\u2502 \u251c\u2500\u252c mkdirp@0.5.1\n\u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8\n\u2502 \u2514\u2500\u2500 object-assign@4.0.1\n\u251c\u2500\u252c babel-preset-es2015@6.1.18\n\u2502 \u251c\u2500\u252c babel-plugin-check-es2015-constants@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-arrow-functions@6.4.0\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-block-scoped-functions@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-block-scoping@6.4.0\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-classes@6.4.5\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-define-map@6.4.5\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-function-name@6.4.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 babel-helper-get-function-arity@6.3.13\n\u2502 \u2502 \u251c\u2500\u2500 babel-helper-optimise-call-expression@6.3.13\n\u2502 \u2502 \u251c\u2500\u2500 babel-helper-replace-supers@6.3.13\n\u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-computed-properties@6.4.0\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-define-map@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-helper-function-name@6.4.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-helper-get-function-arity@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502     \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502       \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u2514\u2500\u252c babel-template@6.3.13\n\u2502 \u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502   \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502   \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502   \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-destructuring@6.4.0\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-for-of@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-function-name@6.4.0\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-function-name@6.4.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-helper-get-function-arity@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502   \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502   \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502   \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502   \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502     \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502       \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-literals@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-modules-commonjs@6.4.5\n\u2502 \u2502 \u251c\u2500\u2500 babel-plugin-transform-strict-mode@6.3.13\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-object-super@6.4.0\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-replace-supers@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-helper-optimise-call-expression@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-parameters@6.4.5\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-call-delegate@6.3.13\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 babel-helper-hoist-variables@6.3.13\n\u2502 \u2502 \u251c\u2500\u2500 babel-helper-get-function-arity@6.3.13\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u251c\u2500\u252c babel-template@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-shorthand-properties@6.3.13\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-spread@6.4.0\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-sticky-regex@6.3.13\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-regex@6.3.13\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u2514\u2500\u252c babel-types@6.4.5\n\u2502 \u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502   \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u2502   \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-template-literals@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-typeof-symbol@6.4.3\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-es2015-unicode-regex@6.4.3\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-regex@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2502 \u2514\u2500\u252c regexpu-core@1.0.0\n\u2502 \u2502   \u251c\u2500\u2500 regenerate@1.2.1\n\u2502 \u2502   \u251c\u2500\u2500 regjsgen@0.2.0\n\u2502 \u2502   \u2514\u2500\u252c regjsparser@0.1.5\n\u2502 \u2502     \u2514\u2500\u2500 jsesc@0.5.0\n\u2502 \u2514\u2500\u252c babel-plugin-transform-regenerator@6.4.4\n\u2502   \u251c\u2500\u252c babel-core@6.4.5\n\u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502   \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502   \u2502 \u2502 \u251c\u2500\u252c line-numbers@0.2.0\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 left-pad@0.0.3\n\u2502   \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502   \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502   \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502   \u2502 \u251c\u2500\u252c babel-generator@6.4.5\n\u2502   \u2502 \u2502 \u251c\u2500\u252c detect-indent@3.0.1\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 get-stdin@4.0.1\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 minimist@1.2.0\n\u2502   \u2502 \u2502 \u251c\u2500\u252c is-integer@1.0.6\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u252c is-finite@1.0.1\n\u2502   \u2502 \u2502 \u2502   \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502   \u2502 \u2502 \u251c\u2500\u252c repeating@1.1.3\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u252c is-finite@1.0.1\n\u2502   \u2502 \u2502 \u2502   \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502   \u2502 \u2502 \u2514\u2500\u2500 trim-right@1.0.1\n\u2502   \u2502 \u251c\u2500\u2500 babel-helpers@6.4.5\n\u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502   \u2502 \u251c\u2500\u252c babel-register@6.4.3\n\u2502   \u2502 \u2502 \u251c\u2500\u2500 core-js@1.2.6\n\u2502   \u2502 \u2502 \u251c\u2500\u252c home-or-tmp@1.0.0\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 os-tmpdir@1.0.1\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 user-home@1.1.1\n\u2502   \u2502 \u2502 \u251c\u2500\u252c mkdirp@0.5.1\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8\n\u2502   \u2502 \u2502 \u2514\u2500\u252c source-map-support@0.2.10\n\u2502   \u2502 \u2502   \u2514\u2500\u252c source-map@0.1.32\n\u2502   \u2502 \u2502     \u2514\u2500\u2500 amdefine@1.0.0\n\u2502   \u2502 \u251c\u2500\u2500 babel-template@6.3.13\n\u2502   \u2502 \u251c\u2500\u2500 convert-source-map@1.1.3\n\u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502   \u2502 \u251c\u2500\u2500 json5@0.4.0\n\u2502   \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502   \u2502 \u251c\u2500\u252c minimatch@2.0.10\n\u2502   \u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.2\n\u2502   \u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.3.0\n\u2502   \u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n\u2502   \u2502 \u251c\u2500\u2500 path-exists@1.0.0\n\u2502   \u2502 \u251c\u2500\u2500 path-is-absolute@1.0.0\n\u2502   \u2502 \u251c\u2500\u2500 shebang-regex@1.0.0\n\u2502   \u2502 \u251c\u2500\u2500 slash@1.0.0\n\u2502   \u2502 \u2514\u2500\u2500 source-map@0.5.3\n\u2502   \u251c\u2500\u2500 babel-plugin-syntax-async-functions@6.3.13\n\u2502   \u251c\u2500\u252c babel-runtime@5.8.35\n\u2502   \u2502 \u2514\u2500\u2500 core-js@1.2.6\n\u2502   \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502   \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502   \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502   \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502   \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502   \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502   \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502   \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502   \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502   \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502   \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502   \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502   \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502   \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502   \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502   \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502   \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502   \u251c\u2500\u252c babel-types@6.4.5\n\u2502   \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502   \u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502   \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502   \u251c\u2500\u2500 babylon@6.4.5\n\u2502   \u2514\u2500\u2500 private@0.1.6\n\u251c\u2500\u252c babel-preset-react@6.1.18\n\u2502 \u251c\u2500\u252c babel-plugin-syntax-flow@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-syntax-jsx@6.3.13\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-flow-strip-types@6.4.0\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-react-display-name@6.4.0\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u251c\u2500\u252c babel-plugin-transform-react-jsx@6.4.0\n\u2502 \u2502 \u251c\u2500\u252c babel-helper-builder-react-jsx@6.3.13\n\u2502 \u2502 \u2502 \u251c\u2500\u252c babel-types@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-traverse@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.3.13\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c line-numbers@0.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 left-pad@0.0.3\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.3.18\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 babylon@6.4.5\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c debug@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 globals@8.18.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.1.0\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@1.1.3\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.1\n\u2502 \u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@3.10.1\n\u2502 \u2502 \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502 \u2502   \u2514\u2500\u2500 core-js@1.2.6\n\u2502 \u2514\u2500\u252c babel-plugin-transform-react-jsx-source@6.3.13\n\u2502   \u2514\u2500\u252c babel-runtime@5.8.35\n\u2502     \u2514\u2500\u2500 core-js@1.2.6\n\u251c\u2500\u2500 moment@2.10.6\n\u251c\u2500\u252c react@0.14.7\n\u2502 \u251c\u2500\u252c envify@3.4.0\n\u2502 \u2502 \u251c\u2500\u252c jstransform@10.1.0\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 base62@0.1.1\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 esprima-fb@13001.1001.0-dev-harmony-fb\n\u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.1.31\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0\n\u2502 \u2502 \u2514\u2500\u2500 through@2.3.8\n\u2502 \u2514\u2500\u252c fbjs@0.6.1\n\u2502   \u251c\u2500\u2500 core-js@1.2.6\n\u2502   \u251c\u2500\u252c loose-envify@1.1.0\n\u2502   \u2502 \u2514\u2500\u2500 js-tokens@1.0.2\n\u2502   \u251c\u2500\u252c promise@7.1.1\n\u2502   \u2502 \u2514\u2500\u2500 asap@2.0.3\n\u2502   \u251c\u2500\u2500 ua-parser-js@0.7.10\n\u2502   \u2514\u2500\u2500 whatwg-fetch@0.9.0\n\u251c\u2500\u252c react-datepicker@0.19.0\n\u2502 \u251c\u2500\u2500 classnames@2.2.3\n\u2502 \u251c\u2500\u2500 lodash@3.10.1\n\u2502 \u251c\u2500\u2500 moment@2.11.2\n\u2502 \u251c\u2500\u2500 react-onclickoutside@4.5.0\n\u2502 \u2514\u2500\u2500 tether@1.1.1\n\u251c\u2500\u2500 react-dom@0.14.7\n\u2514\u2500\u252c webpack@1.12.13\n  \u251c\u2500\u2500 async@1.5.2\n  \u251c\u2500\u2500 clone@1.0.2\n  \u251c\u2500\u252c enhanced-resolve@0.9.1\n  \u2502 \u251c\u2500\u2500 graceful-fs@4.1.3\n  \u2502 \u2514\u2500\u2500 memory-fs@0.2.0\n  \u251c\u2500\u2500 esprima@2.7.2\n  \u251c\u2500\u2500 interpret@0.6.6\n  \u251c\u2500\u252c loader-utils@0.2.12\n  \u2502 \u251c\u2500\u2500 big.js@3.1.3\n  \u2502 \u2514\u2500\u2500 json5@0.4.0\n  \u251c\u2500\u252c memory-fs@0.3.0\n  \u2502 \u251c\u2500\u252c errno@0.1.4\n  \u2502 \u2502 \u2514\u2500\u2500 prr@0.0.0\n  \u2502 \u2514\u2500\u252c readable-stream@2.0.5\n  \u2502   \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502   \u251c\u2500\u2500 inherits@2.0.1\n  \u2502   \u251c\u2500\u2500 isarray@0.0.1\n  \u2502   \u251c\u2500\u2500 process-nextick-args@1.0.6\n  \u2502   \u251c\u2500\u2500 string_decoder@0.10.31\n  \u2502   \u2514\u2500\u2500 util-deprecate@1.0.2\n  \u251c\u2500\u252c mkdirp@0.5.1\n  \u2502 \u2514\u2500\u2500 minimist@0.0.8\n  \u251c\u2500\u252c node-libs-browser@0.5.3\n  \u2502 \u251c\u2500\u2500 assert@1.3.0\n  \u2502 \u251c\u2500\u252c browserify-zlib@0.1.4\n  \u2502 \u2502 \u2514\u2500\u2500 pako@0.2.8\n  \u2502 \u251c\u2500\u252c buffer@3.6.0\n  \u2502 \u2502 \u251c\u2500\u2500 base64-js@0.0.8\n  \u2502 \u2502 \u251c\u2500\u2500 ieee754@1.1.6\n  \u2502 \u2502 \u2514\u2500\u2500 isarray@1.0.0\n  \u2502 \u251c\u2500\u252c console-browserify@1.1.0\n  \u2502 \u2502 \u2514\u2500\u2500 date-now@0.1.4\n  \u2502 \u251c\u2500\u2500 constants-browserify@0.0.1\n  \u2502 \u251c\u2500\u252c crypto-browserify@3.2.8\n  \u2502 \u2502 \u251c\u2500\u2500 pbkdf2-compat@2.0.1\n  \u2502 \u2502 \u251c\u2500\u2500 ripemd160@0.2.0\n  \u2502 \u2502 \u2514\u2500\u2500 sha.js@2.2.6\n  \u2502 \u251c\u2500\u2500 domain-browser@1.1.7\n  \u2502 \u251c\u2500\u2500 events@1.1.0\n  \u2502 \u251c\u2500\u252c http-browserify@1.7.0\n  \u2502 \u2502 \u251c\u2500\u2500 Base64@0.2.1\n  \u2502 \u2502 \u2514\u2500\u2500 inherits@2.0.1\n  \u2502 \u251c\u2500\u2500 https-browserify@0.0.0\n  \u2502 \u251c\u2500\u2500 os-browserify@0.1.2\n  \u2502 \u251c\u2500\u2500 path-browserify@0.0.0\n  \u2502 \u251c\u2500\u2500 process@0.11.2\n  \u2502 \u251c\u2500\u2500 punycode@1.4.0\n  \u2502 \u251c\u2500\u2500 querystring-es3@0.2.1\n  \u2502 \u251c\u2500\u252c readable-stream@1.1.13\n  \u2502 \u2502 \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.1\n  \u2502 \u2502 \u2514\u2500\u2500 isarray@0.0.1\n  \u2502 \u251c\u2500\u252c stream-browserify@1.0.0\n  \u2502 \u2502 \u2514\u2500\u2500 inherits@2.0.1\n  \u2502 \u251c\u2500\u2500 string_decoder@0.10.31\n  \u2502 \u251c\u2500\u2500 timers-browserify@1.4.2\n  \u2502 \u251c\u2500\u2500 tty-browserify@0.0.0\n  \u2502 \u251c\u2500\u252c url@0.10.3\n  \u2502 \u2502 \u251c\u2500\u2500 punycode@1.3.2\n  \u2502 \u2502 \u2514\u2500\u2500 querystring@0.2.0\n  \u2502 \u251c\u2500\u252c util@0.10.3\n  \u2502 \u2502 \u2514\u2500\u2500 inherits@2.0.1\n  \u2502 \u2514\u2500\u252c vm-browserify@0.0.4\n  \u2502   \u2514\u2500\u2500 indexof@0.0.1\n  \u251c\u2500\u252c optimist@0.6.1\n  \u2502 \u251c\u2500\u2500 minimist@0.0.10\n  \u2502 \u2514\u2500\u2500 wordwrap@0.0.3\n  \u251c\u2500\u252c supports-color@3.1.2\n  \u2502 \u2514\u2500\u2500 has-flag@1.0.0\n  \u251c\u2500\u2500 tapable@0.1.10\n  \u251c\u2500\u252c uglify-js@2.6.1\n  \u2502 \u251c\u2500\u2500 async@0.2.10\n  \u2502 \u251c\u2500\u2500 source-map@0.5.3\n  \u2502 \u251c\u2500\u2500 uglify-to-browserify@1.0.2\n  \u2502 \u2514\u2500\u252c yargs@3.10.0\n  \u2502   \u251c\u2500\u2500 camelcase@1.2.1\n  \u2502   \u251c\u2500\u252c cliui@2.1.0\n  \u2502   \u2502 \u251c\u2500\u252c center-align@0.1.3\n  \u2502   \u2502 \u2502 \u251c\u2500\u252c align-text@0.1.4\n  \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c kind-of@3.0.2\n  \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-buffer@1.1.2\n  \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 longest@1.0.1\n  \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 repeat-string@1.5.2\n  \u2502   \u2502 \u2502 \u2514\u2500\u2500 lazy-cache@1.0.3\n  \u2502   \u2502 \u251c\u2500\u252c right-align@0.1.3\n  \u2502   \u2502 \u2502 \u2514\u2500\u252c align-text@0.1.4\n  \u2502   \u2502 \u2502   \u251c\u2500\u252c kind-of@3.0.2\n  \u2502   \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-buffer@1.1.2\n  \u2502   \u2502 \u2502   \u251c\u2500\u2500 longest@1.0.1\n  \u2502   \u2502 \u2502   \u2514\u2500\u2500 repeat-string@1.5.2\n  \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n  \u2502   \u251c\u2500\u252c decamelize@1.1.2\n  \u2502   \u2502 \u2514\u2500\u2500 escape-string-regexp@1.0.4\n  \u2502   \u2514\u2500\u2500 window-size@0.1.0\n  \u251c\u2500\u252c watchpack@0.2.9\n  \u2502 \u251c\u2500\u2500 async@0.9.2\n  \u2502 \u251c\u2500\u252c chokidar@1.4.2\n  \u2502 \u2502 \u251c\u2500\u252c anymatch@1.3.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 arrify@1.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c micromatch@2.3.7\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c arr-diff@2.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 arr-flatten@1.0.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 array-unique@0.2.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c braces@1.8.3\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c expand-range@1.8.1\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c fill-range@2.2.3\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u2500 is-number@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u252c isobject@2.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2514\u2500\u2500 isarray@0.0.1\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u2500 randomatic@1.1.5\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 repeat-string@1.5.2\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 preserve@0.2.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 repeat-element@1.1.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 expand-brackets@0.1.4\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 extglob@0.3.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 filename-regex@2.0.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 is-extglob@1.0.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c kind-of@3.0.2\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-buffer@1.1.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 normalize-path@2.0.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c object.omit@2.0.0\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c for-own@0.1.3\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 for-in@0.1.4\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-extendable@0.1.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c parse-glob@3.0.4\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 glob-base@0.3.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-dotfile@1.0.2\n  \u2502 \u2502 \u2502   \u2514\u2500\u252c regex-cache@0.4.2\n  \u2502 \u2502 \u2502     \u251c\u2500\u2500 is-equal-shallow@0.1.3\n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 is-primitive@2.0.0\n  \u2502 \u2502 \u251c\u2500\u2500 async-each@0.1.6\n  \u2502 \u2502 \u251c\u2500\u2500 glob-parent@2.0.0\n  \u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.1\n  \u2502 \u2502 \u251c\u2500\u252c is-binary-path@1.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 binary-extensions@1.4.0\n  \u2502 \u2502 \u251c\u2500\u252c is-glob@2.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-extglob@1.0.0\n  \u2502 \u2502 \u251c\u2500\u2500 path-is-absolute@1.0.0\n  \u2502 \u2502 \u2514\u2500\u252c readdirp@2.0.0\n  \u2502 \u2502   \u251c\u2500\u252c minimatch@2.0.10\n  \u2502 \u2502   \u2502 \u2514\u2500\u252c brace-expansion@1.1.2\n  \u2502 \u2502   \u2502   \u251c\u2500\u2500 balanced-match@0.3.0\n  \u2502 \u2502   \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n  \u2502 \u2502   \u2514\u2500\u252c readable-stream@2.0.5\n  \u2502 \u2502     \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502 \u2502     \u251c\u2500\u2500 isarray@0.0.1\n  \u2502 \u2502     \u251c\u2500\u2500 process-nextick-args@1.0.6\n  \u2502 \u2502     \u251c\u2500\u2500 string_decoder@0.10.31\n  \u2502 \u2502     \u2514\u2500\u2500 util-deprecate@1.0.2\n  \u2502 \u2514\u2500\u2500 graceful-fs@4.1.3\n  \u2514\u2500\u252c webpack-core@0.6.8\n    \u251c\u2500\u2500 source-list-map@0.1.5\n    \u2514\u2500\u252c source-map@0.4.4\n      \u2514\u2500\u2500 amdefine@1.0.0\n. And after many days, I have finally discovered what the problem was. Works like poetry now. There was nothing wrong with react-datepicker + react 0.14. \nWhat solved my problem was to include react-dom in my webpack's externals config, since I was already bringing in react-dom globally alongside react via script tags.\n``` javascript\n// webpack.config.js\nmodule.exports = {\n   entry: './js/index.jsx',\n   output: {\n      filename: 'bundle.js'\n   },\n   module: {\n      loaders: [\n         {\n            test: /.jsx?$/,\n            exclude: /(node_modules)/,\n            loader: 'babel',\n            query: {\n               presets: [\n                     'react',\n                     'es2015'\n               ]\n            }\n         }\n      ]\n   },\n   externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  },\n   resolve: {\n      extensions: ['', '.js', '.jsx']\n   }\n}\n// index.html\n\n\n\n```\n. ",
    "rafgugi": "Hi. I just encountered the same issue. I use react with coffeescript\n...\n  \"dependencies\": {\n    \"express\": \"^4.14.0\",\n    \"js-cookie\": \"^2.1.2\",\n    \"react\": \"^15.3.0\",\n    \"react-datepicker\": \"^0.30.0\",\n    \"react-dom\": \"^15.3.0\",\n    \"react-router\": \"^2.6.1\"\n  },\n  \"devDependencies\": {\n    \"bower\": \"^1.7.9\",\n    \"coffeeify\": \"^2.0.1\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-browserify\": \"^0.5.1\",\n    \"gulp-coffee\": \"^2.3.2\",\n    \"gulp-concat\": \"^2.6.0\"\n  }\n}\nI have no idea what formigone did to solve his issue, but i found myself. Just remove global script for react-dom and use ReactDom = require('react-dom'); for the bundle\nhtml\n<script src=\"node_modules/react/dist/react.js\"></script>\n<--script src=\"node_modules/react-dom/dist/react-dom.js\"></script-->\n<script src=\"bundle.js\"></script>\nI hope this will helps other.\n. sometimes its caused by multiple react loading. else I dont know. ",
    "hariramp": "I don't use those kind of inline reference to react dom script, but I get the same error with latest version of react and react-datepicker. \"npm ls react\" will tell us the list of react component available in node_modules. I saw two version available, I deleted react folder from node_modules and did npm install again which solved my issue. \"npm ls react\" will tell us the list of react component available in node_modules. I saw two version available, I deleted react folder from node_modules and did npm install again which solved my issue. ",
    "nsisodiya": "@rafeememon When I remove .bablerc file, everythings works fine.\nI am using old 5.xxx version for my project which i cannot migrate. Any idea, how to correct this error !\n. I am using \"react-datepicker\": \"0.20.0\",\n. Problem solved.. \n. I checked the code.\nInstead of this\njs\n\"datepicker__day--today\": this.isSameDay(moment()),\nI suggest for having \njs\n\"datepicker__day--today\": this.isSameDay(this.props.today),\nand you can set default value of today is moment() and user will be able to overwrite it.\n. Generated Pull Request - https://github.com/Hacker0x01/react-datepicker/pull/339\n. @rafeememon - instead of timezone, specifying today is much better approach just like selected prop. In my pull request, I have added this props as optional prop.\nAlso, there is no breaking because advance user want this behaviour. normal user will not pass today props. There is not a single date picker exist which provide this functionality. (Setting up custom today)\n. Because, If you want to pass timezone then you have to add moment-timezone library.\nhttp://momentjs.com/timezone/ It is 25KB on gzipped.\nI do not know, just for one simple task, why will we add another library specially this is a client side code.\nCan you explain why this approach is better than using localization\nI exactly do not understand this. localization has nothing to do with it. \nI made a pull request for API so that user can set a different today other than today as seen by the browser.\n. Override the font-weight style for datepicker__day--today - Possible.\nusing selected prop for today -- Not Possible.\nBecause selected prop has different purpose.\nMay you show me how to do this - \"manually apply the bold style to whatever\ndate you want\"\nBecause, I do not think it is possible. I checked the rended html and there\nis no way I can make any selector.\n. @rafeememon - Your DatePicker is showing 9 Feb as Bold which is Today. I want to Bold 8 Feb which is my client's Today. \nWith JavaScript or selector, I can toggle Bold for 9 Feb to look like normal date. But showing Bold on 8 Feb is not possible. That is my problem.\n. Ok, I am done with Test Cases !!\n. Its optional. you can pass or you need not to pass. that is why I have added getDefaultProps\n. This is Optional.\n. ",
    "i4got10": "@rafeememon Probably there is no need to replace whole DateInput. That is really need is to replace native input inside. Looks like its not so hard\n. Please add customInput prop to  docs\n. ",
    "gpoole": "@nsisodiya this may be mostly resolved by #551, is that right?\n. Fixed in #551!\n. @xrado the customInput prop added in #551 may allow something like:\njsx\n<DatePicker customInput={<input onKeyPress={handleEnterKeyPress} />} />\nI believe that change is going to be included in the next release.\n. @martijnrusschen when are you planning your next release? I'm hoping to start using this feature in one of my projects.\n. Awesome thank you!\nOn Thu, 6 Oct 2016, 7:16 PM Martijn Russchen notifications@github.com\nwrote:\n\nDone!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/pull/561#issuecomment-251896271,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACw6AQskBj2I8zTpaEMp7tPDkt_qhGJCks5qxK5fgaJpZM4J2dtv\n.\n. \n",
    "arthur-creek": "No. z-index param resolves  the visibility problem only. It was fixed with CSS.\n. ",
    "vsai": "@rafeememon In https://github.com/souporserious/react-tether/commit/c806cb1fd21438038980e382f4b996ef6d07c8ac, react-tether added support to specify which parent element the tether-element (in this case the calendar) will be added to.\n. @rafeememon The z-index doesn't seem to be working for me. I tried setting the z-index of the calendar div to 1, 100, 1000, etc., but wasn't able to get it to work.\nThe context: I have the DatePicker on a react-bootstrap modal, and I want the DatePicker element be within the modal. The input box works fine, but the actual Calendar is hidden below the div.\nFTR: I tried adding the css z-index style to both, the div with class: \"datepicker__tether-element datepicker__tether-element-attached-left .....\", and it's child with class: \"datepicker\".\nI would imagine adding the calendar div to the same parent as the input box would fix it. But that would involved using the tether-component change.\n. ",
    "alex-wilmer": "I have moment@2.11.1 installed. Which part of the tree do you want me to post... it's too big for npm to show it all I think\n. here's package.json\n{\n  \"name\": \"gdc-submission-system-ui\",\n  \"private\": true,\n  \"version\": \"0.3.20-spr1\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/NCI-GDC/submission-ui.git\"\n  },\n  \"homepage\": \"https://github.com/NCI-GDC/submission-ui\",\n  \"author\": \"OICR\",\n  \"dependencies\": {\n    \"d3\": \"^3.5.12\",\n    \"filesaver.js\": \"0.2.0\",\n    \"graphiql\": \"^0.4.5\",\n    \"graphql\": \"^0.4.14\",\n    \"history\": \"1.13.0\",\n    \"isomorphic-fetch\": \"^2.2.0\",\n    \"lodash\": \"^3.10.1\",\n    \"moment\": \"^2.11.1\",\n    \"normalize.css\": \"3.0.3\",\n    \"rc-tooltip\": \"^3.3.1\",\n    \"react\": \"^0.14.0\",\n    \"react-addons-css-transition-group\": \"^0.14.6\",\n    \"react-datepicker\": \"^0.21.0\",\n    \"react-dnd\": \"^2.0.2\",\n    \"react-dnd-html5-backend\": \"^2.0.2\",\n    \"react-dom\": \"^0.14.6\",\n    \"react-faux-dom\": \"^2.1.1\",\n    \"react-icons\": \"^1.0.3\",\n    \"react-motion\": \"^0.3.1\",\n    \"react-redux\": \"^4.0.6\",\n    \"react-router\": \"1.0.2\",\n    \"redux\": \"^3.0.5\",\n    \"redux-api-middleware\": \"v1.0.0-beta3\",\n    \"redux-localstorage\": \"1.0.0-rc4\",\n    \"redux-localstorage-filter\": \"0.1.1\",\n    \"redux-router\": \"1.0.0-beta4\",\n    \"redux-thunk\": \"^1.0.3\"\n  },\n  \"devDependencies\": {\n    \"autobind-decorator\": \"1.3.2\",\n    \"babel\": \"^6.3.26\",\n    \"babel-core\": \"^6.4.0\",\n    \"babel-eslint\": \"^4.1.6\",\n    \"babel-loader\": \"^6.2.1\",\n    \"babel-plugin-lodash\": \"^1.1.0\",\n    \"babel-plugin-react-transform\": \"^2.0.0\",\n    \"babel-polyfill\": \"^6.3.14\",\n    \"babel-preset-es2015\": \"^6.3.13\",\n    \"babel-preset-react\": \"^6.3.13\",\n    \"babel-preset-react-hmre\": \"^1.0.1\",\n    \"babel-preset-stage-0\": \"^6.3.13\",\n    \"babel-register\": \"^6.3.13\",\n    \"babel-runtime\": \"^6.3.19\",\n    \"babel-plugin-transform-regenerator\": \"6.3.26\",\n    \"chai\": \"3.4.1\",\n    \"chalk\": \"1.1.1\",\n    \"compression-webpack-plugin\": \"0.2.0\",\n    \"connect-gzip-static\": \"1.0.0\",\n    \"conventional-changelog\": \"^0.5.3\",\n    \"css-loader\": \"0.23.0\",\n    \"david\": \"7.0.0\",\n    \"eslint\": \"1.5.1\",\n    \"eslint-config-airbnb\": \"0.1.0\",\n    \"eslint-loader\": \"1.0.0\",\n    \"eslint-plugin-babel\": \"^3.0.0\",\n    \"eslint-plugin-react\": \"3.4.2\",\n    \"expect\": \"1.13.0\",\n    \"express\": \"4.13.3\",\n    \"express-http-proxy\": \"0.6.0\",\n    \"extract-text-webpack-plugin\": \"0.9.1\",\n    \"file-loader\": \"0.8.4\",\n    \"flow-bin\": \"^0.20.1\",\n    \"graceful-fs\": \"4.1.2\",\n    \"isparta-instrumenter-loader\": \"1.0.0\",\n    \"karma\": \"0.13.19\",\n    \"karma-chai\": \"0.1.0\",\n    \"karma-chai-sinon\": \"0.1.5\",\n    \"karma-chrome-launcher\": \"0.2.1\",\n    \"karma-cli\": \"0.1.1\",\n    \"karma-coverage\": \"0.5.3\",\n    \"karma-mocha\": \"0.2.1\",\n    \"karma-mocha-reporter\": \"1.1.1\",\n    \"karma-phantomjs-launcher\": \"0.2.1\",\n    \"karma-sauce-launcher\": \"0.3.0\",\n    \"karma-sourcemap-loader\": \"0.3.6\",\n    \"karma-webpack\": \"1.7.0\",\n    \"mocha\": \"2.3.4\",\n    \"phantomjs\": \"1.9.18\",\n    \"phantomjs-polyfill\": \"0.0.1\",\n    \"react-addons-test-utils\": \"0.14.0\",\n    \"react-hot-loader\": \"1.3.0\",\n    \"react-modal\": \"0.6.0\",\n    \"react-transform-catch-errors\": \"1.0.0\",\n    \"react-transform-hmr\": \"1.0.1\",\n    \"redbox-react\": \"1.1.1\",\n    \"redux-logger\": \"2.0.4\",\n    \"sinon\": \"1.17.2\",\n    \"sinon-chai\": \"2.8.0\",\n    \"style-loader\": \"0.13.0\",\n    \"url-loader\": \"0.5.6\",\n    \"webpack\": \"1.12.2\",\n    \"webpack-dev-middleware\": \"1.2.0\",\n    \"webpack-dev-server\": \"1.12.0\",\n    \"webpack-hot-middleware\": \"2.4.1\",\n    \"escope\": \"3.3.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"scripts\": {\n    \"start\": \"GDC_FAKE_AUTH=1 BASE=submission NODE_ENV=development make -j test server\",\n    \"server:dev\": \"GDC_FAKE_AUTH=1 BASE=submission NODE_ENV=development make server\",\n    \"server:stage\": \"GDC_FAKE_AUTH=1 NODE_ENV=stage make build server\",\n    \"server:prod\": \"GDC_FAKE_AUTH=1 NODE_ENV=production make build server\",\n    \"test\": \"make prepare\"\n  }\n}\n. ",
    "tsurelad": "Webpack usually has the configuration: \nmodule: {\n    noParse: /\\.min\\.js/\n  }\nso the file react-datepicker/dist/react-datepicker.min.js is not being parsed. This file uses the require function which is NodeJS specific function.\n. ",
    "kostik-noir": "use\nimport DatePicker from 'react-datepicker/dist/react-datepicker';\n. ",
    "okcoker": "This is still an issue it seems.\nI'm using webpack 2.4.1, with react/react-dom 15.6.\nI dug a little deeper and found out it was the react-onclickoutside package. When removing all of these calls, my app built properly. So then I tried re-adding the onClickOutside calls and upgrading to the latest version 6.1.1. \nVoila it worked.\nWill send a PR shortly.. ",
    "juancarlosfarah": "I'm using v0.23.1 and I'm getting the error.\n. @martijnrusschen, it's working for me with 0.23.2. Awesome.\n. ",
    "james4388": "Oh nice, thanks\n. I use inside react router and has this problem too.\n. ",
    "HadiAkmal": "@rafeememon \nThere's no popoverTargetOffset prop in the link you provided. I'm having this problem:\n\nTop calendar is having overlay problem with bottom date input field. How do I get the calendar to the front of the input field?. @jochenberger \nI test your codepen and the selected date did not appear in the input field? Why is that?. ",
    "artemv": "For those who came here to fix the input group addon layout issues with DatePicker - there's a relevant https://github.com/Hacker0x01/react-datepicker/issues/484 issue, and solution based on https://github.com/Hacker0x01/react-datepicker/issues/484#issuecomment-264408923 worked for me to solve this issue as well.. ",
    "ConAntonakos": "Hey, @rafeememon. Thanks for your response. I'm simply instantiating a React component <DatePicker />, and when I go to click the <input> HTML element, the error fires and the calendar does not open. The \"selected\" prop works properly, though.\n. Sure. I'm using react-router to render JSX, and I'm placing the <FormDatepicker /> on the page.\n```\nimport React from 'react';\nimport merge from 'lodash.merge';\nimport moment from 'moment';\nimport Datepicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nvar FormDatepicker = React.createClass({\n  displayName: 'Example',\ngetInitialState: function() {\n    return {\n      startDate: moment()\n    };\n  },\nhandleChange: function(date) {\n    this.setState({\n      startDate: date\n    });\n  },\nrender: function() {\n    return ;\n  }\n});\nexport default FormDatepicker;\n```\nFor simplicity, I'm just sticking it into this view component.\n\nAlso, I noticed this:\n\n. @rafeememon Ah, that might be it! Thanks! I do have the bundled script files running in head. Is that typically not advised?\n. ",
    "karydja": "+1 for this same issue. The problem seems to be with react-tether, precisely in this line, that returns null when it should default to document.body, according to it's documentation.\n. @rafeememon I'm using the DatePicker component (with it's basic configuration) inside another component. The script is inside the <head> tag and, when I move it to the end of the <body> tag, it really works like a charm.\nI tried to use previous versions (with the javascript inside <head>) and your commit in react-tether, but I got the same error ):\n. ",
    "MartinHDB": "Same issue when I am calling unit test with enzyme:\nthis.picker = this.component.find(DatePicker).first();\nthis.day = this.picker.find('.react-date-picker__button__input__day').first();\nthis.day.simulate('change', { target: { value: 10 } });\n**TypeError: Cannot read property 'appendChild' of undefined**. ",
    "andrewBalekha": ":+1: \n. @rafeememon Yep, thanks. works now\n. Well DefinitelyTyped is a bit weird and slow :)\nBut facebook immutablejs deftype is stored in same repo. So I was thinking that it's better to keep it here.\n. And I've created a bunch of PR in DefinitelyTyped, but they seems to be dead there :D\n. Good idea, maybe I will do that. thanks!\n2016-02-16 11:55 GMT+01:00, Rafee Memon notifications@github.com:\n\nMy concern is that if it lives here, we need to maintain and support it, and\nunfortunately I don't think we can.  =P  DefinitelyTyped is far and away my\npreferred way to go here, but maybe you could also get a repository for\ntypings set up, maybe called react-datepicker-typings?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Hacker0x01/react-datepicker/issues/363#issuecomment-184627257\n. Ah, I thought it was already there, sorry...\n@radziksh looks good, but admins of DefinitelyTyped are not active. So i think it won't work there as well..\n\nWe probably have to add it to typings...\n. ",
    "Atenna": "I had the same problem yesterday. I am now using v.0.23, no more unmount error.  Thanx for B-day present :+1:\n. @rafeememon from v.0.22\nI'm using the example code from readme with getInitialState and Handle change with the component as shown below. Is there a problem with dependencies?\n```\nReact.createClass(\n{\n    getInitialState: function() {\n        return {\n          startDate: moment()\n        };\n    },\nhandleChange: function(date) {\n    this.setState({\n      startDate: date\n    });\n},\n\nrender: function() {\n    return (\n    <DatePicker selected={this.state.date} onChange={this.handleChange} \n                  dateFormat=\"DD/MM/YYYY\"\n                  locale=\"sk-SK\"/>\n    );\n}\n\n}\n);\n```\n. ah this is awkward, thank you\n. ",
    "vl-lapikov": "v0.23.1:\nDatepicker inside react-bootstrap modal. When I close modal, I get error: unmountComponentAtNode ...\nv0.23.0:\nWorks fine\n. @rafeememon didn't help. I made sure react-tether is v0.3.3.\n. @rafeememon Checked outside react-bootstrap modal and it throws the same error. My steps are about:\n- render list of datepickers\n- choose date in one of them (datepicker A)\n- rerender list of datepickers without datepicker A\nI am busy today, however tomorrow might be able to provide short example.\n. ",
    "TonyVeigel": "I also upgraded and get this same error, react-tether is at v0.3.3. error started with release .22.0 of date picker plugin\n. Works for me with 23.2. Thanks\n. ",
    "taxigy": "Having the same problem in 0.23.1. The component hierarchy is pretty basic, still, when I try to unmount parent component and mount another (via react-router), I get the\nUncaught Invariant Violation: unmountComponentAtNode(...): Target container is not a DOM element.\nexception.\n. I'm having the same problem. I put the DatePicker into a relatively positioned and constrained by width element, so the whole thing is\njsx\n<div style={{display: 'block', position: 'relative', width: '200px', zIndex: 3}}>\n  <DatePicker\n    className='form-control datepicker'\n    dateFormat='MM/DD/YYYY'\n    popoverAttachment='bottom right'\n    popoverTargetAttachment='top right'\n    selected={moment(category.published_at)}\n    onChange={::this.setPublishDate} />\n</div>\nIt behaves this way:\n\n. ",
    "timaschew": "Can confirm the fix in 0.23.2 as well, thank you!\n. ",
    "crunchex": "Having this problem as well. I've been playing around with the tether properties, but haven't come up with a combination that serves as a workaround. If anyone finds one, please lay it down here.\n. ",
    "sattaman": "+1 We're having the same issue\n. ",
    "bekerov": "\n. I cant find samples.\nThis not work ReactDOM.findDOMNode(this.refs.calendar)\nAlso find same question\nhttps://github.com/souporserious/react-tether/issues/14\n. @rafeememon I dont know which property should work. I just want ask, what i should specify in renderCalendarTo.\nI cant find any samples and docs.\n. I'm trying use \n<DatePicker ref='picker'\n    onChange={this.onChange}\n    renderCalendarTo={ReactDOM.findDOMNode(this.refs.calendar)}\n    />\n<div ref='calendar'></div>\nbut it still rendering to document.body\n. please, update this https://www.npmjs.com/package/react-tether\n. @rafeememon im tried but i have depencies conflicts\n. yep, im trying build this repo, and have similar issue. \nI think problem with \"transform\": \"react-transform-hmr\", in .babelrc\n. I found problem inset NODE_ENV=production\n. ",
    "mb21": "Is there some option to force the popup to stay at \"bottom\" and never go to the top to avoid this bug? (I'm not sure what exactly popoverAttachment and popoverTargetAttachment do, but apparently not that...)\n. @rafeememon thanks, this indeed seems to sidestep the issue:\n<DatePicker\n    selected={ this.props.date }\n    onChange={ this.props.handleChange }\n    tetherConstraints={ [] }\n    />\n. ",
    "doucheberg": "Really like the component, any progress on this bug?\n. So as already mentioned, this bug happens when the height of the calendar changes due to month change. The calendar's position does not reflect this (issue with tether component?). When the user clicks \"next month\", the position is moved (in correct direction). It seems like the tether reposition the calendar before the onclick is triggered, so we miss a onclick event and the calendar stays in the same month. After a couple of clicks the calendar has become correctly positioned and the component works as expected again.\nThe tether component is a bit complex, so haven't had the time to really understand it, but have tested a couple of things. If I delay _tether.position() execution in _updateTether, let's say 100ms and remove the for loop inside _move in TetherClass 2452\nThis seems to \"fix\" the problem, but I have no idea of what bi-effects this may give.\nAlso, the jump in the calendar can be a bit annoying to the user when flipping through several months. Another solution would be to have a max-height fix or something so the calendar would not change height, but take up a bit more space on the \"lower\" months. @rafeememon, how hard would this be to implement?\n. ",
    "jbccollins": "+1 Still an issue as of version ^0.33.0\n. Ok somewhere between 0.33.0 and 0.41.1 this has been fixed. Whether intentionally or incidentally I'm not sure. In any case. I'm closing this unless someone can reproduce it with the latest version. #759 is still valid.. @rafeememon lol I forgot that I had created that.. ",
    "rpiaggio": "+1 we are having this issue too. Thank you!. ",
    "Grsmto": "Using fixedHeight prop solved that issue for me (well I'm happy with the behaviour).. You need to polyfill the find method as this is an ES6 one.\nWell actually maintainer should add the polyfill to the demo page :). ",
    "Nandini26": "To avoid calendar shakes based on no.of weeks , we can use fixedHeight attribute. \n<DatePicker fixedHeight \n    selected={ this.props.date }\n    onChange={ this.props.handleChange }\n    />\n. ",
    "bionicpill": "This is still a bug even in the demo when the date picker is above the input box. Reproduce by shrinking your window until the date picker appears above the text input and then click back through the months and watch the calendar jump around.. ",
    "olleolle": "I added fixedHeight={true} option and it looks better. ",
    "radziksh": "I going to do it, but I see that react-datepicker is changed since Febriary. So we need update andrewBalekha's definitions.\n. https://github.com/DefinitelyTyped/DefinitelyTyped/pull/9188. @rafeememon can you, please, review it. Just add like or dislike. I made the most common definition in order to accidentally not restrict users. Next it will be extended, by me or by other programmers.\n. ",
    "aouaki": "Hey guys,\nAny news on this? I can help if you need, there doesn't to be much work left before this is merged...\nThanks\n. ",
    "bhuten": "The cause of the issue unknown but it is not happening anymore ... \n. ",
    "gasipari": "Thanks @rafeememon. It works!\n. ",
    "pirate": "0.23.2, also tried 0.23.1 with no luck\n. ",
    "noguespi": "Got same issue, fixed by adding a CSS with : \n.datepicker__tether-element {\n    z-index: 2;\n}\n. ",
    "felizuno": "The referenced PR resolves the core of my issue, which is really just that the default z-index is 1, where it would be better to have it unset or set to an extremely high value e.g. #378. Given that change to the default style I am inclined to agree that adding a z-index parameter is a bad idea.\nClosing this issue in anticipation of #378.\n. ",
    "ekrokowski": "I have the same case. 2 input fields horizontally in one row:\nLeft input / calendar for the startDate with \npopoverAttachment=\"top left\"\npopoverTargetAttachment=\"bottom left\"\nAnd a right input / calendar for the endDate with \npopoverAttachment=\"top right\"\npopoverTargetAttachment=\"bottom right\" \nThe triangle is on both situations aligned on the left side. There is just missing CSS.\nSimple fix would be to add the following CSS:\n.react-datepicker__tether-element-attached-right .react-datepicker__triangle{\n  left: auto;\n  right: 50px;\n}\nreact-datepicker only sets left: 50px; (even on right-aligned).\n. ",
    "ian-moore": "@ekrokowski yes I have the same problem. Would be nice if there was a way to reposition the triangle\n\n. Also seeing this behavior, the docs are not clear on what the options for the position props actually impact. ",
    "karleberts": "@rafeememon That would work for my case specifically, but I imagine there are times where it might be necessary to put the input in a container with overflow: hidden, which would prevent the calendar from displaying properly.\nI think rendering to an external node is best, I'd just like to be able to decide which node ;)\n. Cool cool. Fixed the indent/prop\n. ",
    "arrel": "Aha! that's why the formatting was so terrible. I'll open another one tomorrow.\n. ",
    "greaber": "IMO, since a date picker just lets you choose a year, month, and day, its state should just be three JavaScript numbers.  The component is just a piece of UI and shouldn't be prescriptive about your data model.  It shouldn't require a heavy dependency like moment.js or even use JavaScript dates.  You can keep whatever you want in Redux -- triples of numbers, JavaScript dates, moment dates, or even strings.  Also, instead of adding timezone awareness as suggested in #507 and #498, it could just allow the user to explicitly pass a value for \"today\" (which would also be a triple of numbers).\n. ",
    "ro-savage": "I used react-datepicker in a previous project and did some PRs. It's a really nice datetime picker.\nHowever, the moment dependency is stopping me from using it again. We have no need for moment and its absolutely huge.\nWould love to see moment become optional. Any updates thoughts @martijnrusschen ?. @rafeememon \nI have created PR #691  to allow react-datepicker to work with CSS Modules.. The changes to docs-site/bundle.js and docs-site/style.css occur when running a npm run build.\nI can remove them and rebase, but it will mean anytime someone does a build in future they will show two modified files in git.. I have created PR #696  the adds the the prop withPortal which creates the calendar in a portal/overlay.\nHere it is running on my project.\n\nHappy to hear any feedback. . react-portal is the same module react-dates uses to create their portal. \nThe alternative I had originally played with was to create a div/portal that contained the calendar set to display: none; then apply a new class when the calendar was opened that made the div visible.\nThis has a few issues that I didn't get around to resolving but nothing that looked like a show stopper. However, when I ran into them I checked the code for airbnb's dates module and saw they used react-portal. So decided to run with that encase there was more edge cases I wasn't aware off.. I have created PR #698 which removes the dependency.. @rafeememon I have added tests for checking if withPortal is correctly working.\nMy testing experience is limited, so you might want to check if those 2 tests cover enough.. @martijnrusschen @rafeememon \nThere is a bug with iOS Safari in landscape mode which is causing issues. (Only on iPhone & in Landscape mode. iPad appears fine).\nIt appears when React creates the new element, iOS safari renders the div without doing a full redraw/applying CSS styles and therefore the calendar doesn't appear on screen.\nI tried a few things to force a redraw but couldn't find out how to reliably do it.\n\nThis is an example, if we change tabs and come back it forces a redraw/render. Changing from landscape->portrait->landscape works as well. \nInternally we are going to push ahead despite that bug, and revisit it later.\nSo if thats still ok for you, it's ready to merge. \nIf the iOS bug is a show stopper. Then I can update the PR in the future. But it might be a couple weeks away. If the merge is accepted, I'll submit a new PR with a fix whenever it becomes a priority for our product.. Alternative strategies would be:\n- Use the react-portal (although I haven't tested if that actually fixes the issue)\n- Render the portal + calendar (or maybe just portal without calendar) on every div, with display: none. However this will mean every input has its own calendar rendered and overlay, which isn't ideal.. @martijnrusschen \nUnfortunately the portal doesn't work as expected on iphone iOS 10.\nWhen you click the datepicker, the portal should be fixed, take up the entire screen, and remove the ability to scroll. \nThis works on all devices we tested including iPad iOS10 but does not work on iPhone iOS10, instead the portal appears at the top of the page, and the viewport stays focused on the the input.\nMy guess is this is something to do with focus being on the input at the same time it tries to change the viewport, and by not focusing on the input when clicked (or focusing on the calendar) it may fix it.\nWe worked around it by using the built-in date picker when we detected an iPhone.\nUnfortunately, I am not at the company anymore and no longer have access to an iPhone to test.\nMaybe release with a known issue, and offer the work around until its fixed?. General feedback:\n\nWe used quiet a bit of the API and found it to be good and completed. I wouldn't see any major breaking changes from where it is now.\nwithPortal sounds like a stupid name to me, but I used the same name as react-dates\nI may be wrong, but I think you have to pass the date picker a moment object. Would be nice to pass a regular JS Date object and it get's handled.\nMoment is great but also huge file size. In our case, we didn't need internationalise or timezones. So it was a big thing to include. Don't really have an alternative. (We used webpack to exclude what we didn't need)\nThe library itself is large coming in at  80.7kb. It is our largest outside react-dom.\nIt looks lots of lodash is being included which is contributing 20.1kb, tether.js is 24.9kb. The source itself is 29.6kb (which still feels rather large).\nThere is probably ways to decrease the overall sizes quiet a bit.\nWould be great to not have the extra days of a month on the calendar. Either they are missing or greyed out.\nCSSModules is working great, this was the first project that I converted the css to cssmodules automatically as a seperate file, and I have since done it again and will continue to (its not the cleanest thing, but CSSModules is still trying to figure out best way to get css + cssmodules to play nice by default)\n\nSource map explorer of react-datepicker\n\n. It should be pretty easy to remove lodash completely.\nJust need to add a polyfill for find, about 300 bytes. And everything else can be replaced with native. \nLet me know if you want a PR for removing lodash.. Done :). Its been a while since I used react-datepicker but we struggled with the way datepicker uses moment as well.\nFrom memory copied our moment object into a new moment object, passed it to datepicker, then copied the result back into another moment object. This was done to ensure correct timezones. (Or something).\nWhatever it was, we struggled for a long time to get our dates correct with react-datepicker given that we are in New Zealand.  It would be great if timezones were handled better. (Offset isn't enough, due to daylight savings). @martijnrusschen lodash is still used in a few places\nhttps://github.com/Hacker0x01/react-datepicker/search?utf8=%E2%9C%93&q=lodash\nin a couple tests, in the gruntfile and the server.\nI didn't remove them because they don't hurt the package size and lodash can be easier to reason with than some of the code that may replace it.\nAlthough I can do a 2nd PR to remove lodash from the entire repo if you'd like. But I wont be able to work on that for at least a few days. \n. I am not sure what you mean by this?\nIf the portal is not shown, then it will use default styles.\nIf the portal is shown, it overwrites styles to make the text/calendar slightly bigger / more readable on a mobile device.\nYou can see what it looks like by scrolling down to the portal example and clicking the calendar.. Yep I can remove generated files (just need to figure out how!)\nWould it make sense to have them in .gitignore then? \nAs every time it's someone makes a change and builds the files, it'll show has changed/updated in git.. Files now removed, and rebased to a single commit.. Yep. Good idea. Updated.. ",
    "prayerslayer": "Hi, I'd like to give it a shot as part of Hacktoberfest. Making big dependencies optional is always nice, because while I'm sure I'll need such a component at some point I'd definitely search for something else due to moment :)\nAre there requirements beyond 1.) getting rid of moment and 2.) maintaining backwards-compatibility (ie. not break anything)? Any part of the code that I should pay special attention to because it's complex, has non-obvious side effects, is not as well tested as other parts, or something like that?\nI looked a bit over the source and would approach it like this:\n\nPR that moves all usages of moment into a separate module, possibly just date_utils\nPR that introduces another version of this module that uses date-fns\n\nThen we can decide how to build the API to use one or the other. Simplest possibility is a separate build?. > I don't think we could completely remove moment while maintaining backwards compatibility\nYeah me neither, unless you'd distribute separate builds for versions with and without moment. If that's not an option we'd need a flag somewhere to know which date utils to use and, as you say, moment as an optional dependency.. Any idea what could be wrong with the failing test? It seems to be occuring also on master (see this build https://travis-ci.org/prayerslayer/react-datepicker/builds/281940187), so I assume it's a dependency issue?\nI'll continue on a branch based on this PR instead of master.. @montogeek There's this https://github.com/Hacker0x01/react-datepicker/pull/1327, but it's quite old by now, and has some blocking open questions.. Realized I commented on an outdated diff: The linter errors regarding moment should go away once you merge latest master into this branch. See #1046 and #1052.. > How should we move forward with this. First merge part 1?\nSince this part contains also part 1, we can close the other and merge only part 2.. Done.. WIP of Part 3 is here: https://github.com/prayerslayer/react-datepicker/tree/feature/optional-moment-part3\n\nI'll probably need to refactor how locales are handled. A major advantage of date-fns is that it doesn't include a bazillion locales right away, so we'd probably need to give up string locales (locale=\"fr\") in favour of locale data that is useful for the formatting function (locale={require(\"date-fns/locale/fr\")} / locale={moment.localeData('fr')}).\nWhat gives me a bit of headache is the UTC offset. As far as I see there is no way to get a JS Date with a timezone other than what you're currently in. Ofc you can do something like new Date(Date.UTC(year, month, day)), with year, month, day being values in UTC, but the Date object will still show GMT+2 or whatever. Not sure yet how to work around this, advice is welcome.. Hi, thanks for taking the time. I already opened a PR to discuss details about this. https://github.com/Hacker0x01/react-datepicker/pull/1059 It has a proof of concept too.\n\n\nNot sure how what's desired here. Any suggestions?\n\nYeah. My proposal is that all timezone related functions would be no-ops when using date-fns, until the library can work with TZs (if ever). That way\n\nwe don't build a subset of moment with less tests\nwe don't extend the underlying library in a non-obvious way\nusers still get to choose based on their needs: Want a really small bundle and TZs are not an issue? Go with date-fns-backed datepicker. Definitely need TZs? Well, then you're stuck with moment anyways.\n\nAt first I tried to extract the TZ logic from moment into something separate, but quickly realized I'm building moment on top of date-fns, as you have to consider TZ information for all regular operations like adding hours etc. That's an option too, but it can be done later imo.. Thanks for reporting, apparently there were two issues with the example:\n1) Set minDate and maxDate, but were not shown in code snippet. Depending on the date, \"today\" might have been an invalid date.\n2) Moment.js apparently removed ambiguity when setting UTC offset. Previously every number <= 12 was counted as offset in hours, now you have to set it in minutes all the time: https://momentjs.com/docs/#/manipulating/utc-offset/\nI'll open a PR to fix this in the next minutes.. Hey, did you have the chance to glance over this? I know it's much to digest, but I'd like to know if there's intent on your side to ship this, or if you think it's too much effort for too little gain :) . Yeah, there's also a half-baked POC in #1059 to support any date library as backend. However straight-up replacing moment is simpler than adding luxon support on top, because we don't need to care about changing the build process and how to distribute react-datepicker with exchangeable date backends.\nWe could replace moment, release a new major version, then check if date-fns support is still desirable.. > Shouldn't most of these changes be in date_utils.js, or rather a new, luxon-based version of that file?\nIf you add luxon support alongside moment, yes, but when I replace moment I need to change all the examples, which contain userland code :)\n\nrather than removing cloneDate, the luxon version of that would just be the identity function.\n\nThat's a good suggestion, thanks.\n\nOr is the plan to drop support for moment?\n\nI tried to probe what is desired in previous issues/pull request, but feel I got no definitive answer, so my plan currently is to drop moment entirely, yes. Mostly because it's easier, we only need to bump the major version. A preview version can be published under a luxon npm tag before doing that to collect feedback and find bugs that aren't covered in tests. If bugfixes/features are added meanwhile it should be easy to merge them into the preview branch as well, if PR authors don't add moment-code outside of date_utils.\nDoes that make sense?. > How long would we expect to maintain a 1.x branch while users transition?\nI don't have experience running a popular library, so I don't really know what a time frame would be. 3\u20136 months of backporting bugfixes, but not adding features feels alright to me. Maybe we could release a codemod to make the transition easier? The necessary changes are mainly mechanic, subtle differences exist though.. > I have no clear picture of the usage of Luxon vs Moment currently\nIf NPM download stats are worth anything, moment is ~240x as popular \ud83d\ude43 \n\nwould it be an idea to implement it in a way that we can run Luxon next to moment? Giving the users the flexibility to use whatever library they want to use (Luxon, Moment, Pure JS dates, etc.)\n\nI mean yeah, that technically works and sounds nice, but there are a couple of things to consider:\n\nBuild & distribution: I guess you could add a property to react-datepicker which specifies the date backend, and then import that async as needed.\nDifferences in implementations: JS Dates and date-fns don't support timezones, moment has a mutable API (vs immutable of luxon and date-fns), weekday depends on locale in moment but doesn't in luxon, only moment has custom locales etc. For me an outcome of #1059 was that either the lowest common denominator of all possible date backends is implemented, or only very similar date backends are supported. Otherwise this grows too complex to maintain and use.\nDocumentation: Basically there'll be one set of documentation per date backend, definitely more effort to maintain than now. Also educating developers about the new possibility/complexity will take more time than just saying \"use luxon from $SOME_POINT_IN_FUTURE on.\"\nBugfixes: You now need to test them with all the date backends.\n\nPersonally I think that's too much, but it's up to you to decide I guess. I'm fine with whatever decision you make :)\n. Thanks a ton for the quick merge :) Would mind releasing a new version also? Then I can remove the dependency on a master commit.. I know, but it's there for a reason :grin: (As you can tell by the breaking tests.). Yeah, I wasn't referring to any technical reason. Looking forward to see it fixed :). Yeah, had exactly the same thought :). Hi, when you pull in latest master this goes away. I recently removed all usages of moment outside of date_utils.js.. To be fair, I have not checked if that works as intended with webpack. What you'd want is that the code in the other branch is not added to the bundle.. ",
    "dmnd": "This works for me :+1:\nIt's a breaking change for anyone that is running a custom stylesheet though.\n. > I think we should not provide styling for the <input> element so that it can integrate with forms as easily as possible\n:+1: That sounds great to me.\n. I'd also be happy with this :+1:\n. @arahansen did you make any progress on this?\n. > I think we should git-ignore the lib directory and have it built as part of the prepublish hook\nI can understand that, but it does have one small downside:\nWhen making a PR to a third party library I'm using, I change my application's package.json to depend on my PR instead of the published npm module. This lets me fix bugs I hit and not have to wait for other people to merge my changes, which I think makes me more likely to send fixes upstream.\nAs far as I understand, this workflow isn't possible if there are files in the npm module that are not part of the git repository. So while it's nice to not have built files checked into git, it does have a small advantage for consumers of the library. Unless there's some other easy way to depend on a PR that I'm unaware of.\nThat said, I'm happy to change this PR if you don't agree this benefit is worthwhile for your library.\n. Ok, removed ./lib from the repo and switched to grunt. Let me know if there's anything else blocking a merge.\n. No worries. Any chance I could get a release? After some investigation, depending on git repos that need a build step is pretty broken. See https://github.com/npm/npm/issues/3055\n. Absolutely \ud83d\udc4d\nThanks for asking!\n. The readme says \"You will also need to require the css file from this package (or provide your own)\", so I assumed this would be ok. I'm using my own stylesheet because of the clash with .datepicker.\nIf you'd prefer not to make this this class overridable, would you consider changing the class to something more specific?\n. This was necessary because babel converts jsx -> js. You might want to lint for this kind of thing in the future; I don't think there's a good reason to be specific about the extension when importing?\n. This could possibly be a breaking change for some users that aren't using module bundlers. I'm not really sure how to test that since I don't know the use cases very well.\nBut I think it's a good change. If it still makes sense to publish a standalone build, that can be imported via require('react-datepicker/dist/react-datepicker.min.js').\n. Apologies for not making this part of the grunt script. If you insist, I can figure that out, but this works as is.\n. Done; see 46e6fd9e01dd11640d1a6d86a5262e9374dbdf40\n. Cool, reverted this line in a9690a1\n. ",
    "pinturic": "I still have a question about this: I have 4 calendars in the page and I want them to have different styles. Since the \"react-datepicker\" className is not editable (ora at least configurable to be addictive)  there is no chance for the 4 calendars to have different styles. Am I correct ?\n. There was one #387 as far as I know.\n. to tell the truth it is not clear what and how to overcome the situation. In my opinion it should be enough if the className is \"additive\" so that nothing actually present breaks and the other added class is enough from outside to set the style.\n. okay perfect\n. ",
    "salmanhoque": "Hi, thanks for your quick feedback on this. I have updated and added test case for that. If this looks alright to you, could you able to merge it? \n. ",
    "cubbuk": "+1\n. ",
    "hedigerf": "I would appreciate that feature too :)\n. ",
    "piotrblasiak": "Great to hear arahansen!\nI think it makes more sense to have it in the same component and make it possible to specify the precision. If you then wanted to make one component for just the date and one for just the time you could do that, but also one for both if you wanted that.\n. ",
    "zsherman": "@arahansen https://projects.skratchdot.com/react-bootstrap-daterangepicker/ does a nice job with that imo.\n. ",
    "ktalebian": "What's the status of this? \n. ",
    "adamraudonis": "I would also love to see this feature. ",
    "paerhaty": "+1. ",
    "Valerz": "Just FYI\nThe datepicker also has a dependency called 'react-onclickoutside' which doesn't support IE9 and never will. So unless they change this dependency this datepicker will not function correclty in IE9. \n. Hey @rafeememon, thanks for quick response.\nBasically we can utilize html5 input type 'date' to keep the correct format.\nYou are correct that 'numbers' will not format the date correctly as I believe that type doesn't allow character '/'. However we could also use type 'tel'. \nThere is some more info here: https://miketaylr.com/pres/html5/forms2.html (be warned the date input on here has some funky font size issue but works well on mobile). \nOur use case is building our forms as mobile priority first and desktop second.  \nBy utilizing the inputs in correct type will force Android and OSX devices to show date/telephone pad when the focus is on the input. It is more of a usability case so that users don't need to have an extra step to enable numbers on their device when the default keyboard pops up. This is off course if they prefer to type it in instead of using the datepicker UI to select the date. \nPerhaps maybe you could just have a default of type 'text' and just let the developer decide on which type they want to implement. \n. @rafeememon thanks!\n. ",
    "vguzev": "@Pizdetss @rafeememon We've already created a clone of react-onclickoutside with IE9 support: https://www.npmjs.com/package/react-onclickoutside-ie9\n. Please, see PR for this issue: https://github.com/Hacker0x01/react-datepicker/pull/406\n. OK. Then I suppose you should add info about this classlist-polyfill to your Readme page (+ some polyfill for console.* support). And add these polyfills to your demo page as well...\nP.S. @Pomax should add classlist-polyfill as dependency in react-onclickoutside, but for some reasons declines to do that... So, all depending components have to warn their users about this issue... not really productive!\n. @rafeememon Please, reopen this issue, because #433 is about completely different thing...\nWhen you do some UI action in react-datepicker component (e.g. selecting a date or switching a month) it looks like that the react-datepicker is closing calendar using react-onclickoutside functionality.\nIn cases when react-datepicker is embedded in filter panels (like in this screenshot http://clip2net.com/s/3wthcf2) this causes the whole panel to close. Just because this panel is also depending on react-onclickoutside...\n. ",
    "Pomax": "@vguzev That's because IE9 has not been officially supported by Microsoft for over two months now. Make the web a better place, support supported browsers, not abandoned ones. If someone really needs IE9 or below support, they can add the polyfill at the start of the script load block of their own page (and only once) that's not a thing individual react component maintainers all need to do. Just like any other shim for browsers that don't support the modern web.\n. Right but only Vista SP2, and only on Vista SP2. IE9 is not supported on any other version of Windows anymore. (They were smart enough to add that stipulation)\n. nice, I'll update my readme to point to https://github.com/WebReflection/dom4\n. that has been fixed as of v5.11.1. commenting due to the cc: npm2 only comes with a version of node that was known to go out of LTS this month for the last 18 months, so if you're still using it, it's really time to put \"make our code run on the latest LTS\" a priority =)\nThe current LTS version of Node (6.x) comes bundled with npm3, and has already been the active LTS for the last six months.. ",
    "fritz-c": "@Pomax I'm no fan of IE9, but I want to note that it is actually still supported... barely. Hence, any business with an internal system that only runs on IE9 is probably on the edge of its seat.\nAccording to the press release, the IE support is for\n\nthe most current version of Internet Explorer available for a supported operating system\n\nAnd as Vista extended support lasts until April 11, 2017, and the latest IE on Vista is IE9... we're stuck with it for another year.\n. ",
    "gnawjaren": "I see, so maybe componentWillReceiveProps and setting maybeDate there may be an option?\n. That is what I was up to Initially - but moment global locale is out of the scope then.\n. Say you have top level locale state, which is in sync with moment (I know violates single source of truth) it will get picked up - without passing props. But since that is not a good approach anyway it does maybe not matter. I will change that. (and remove the test for global change)\n. ",
    "edygar": "it falls back to text type in all browsers.\n. @rafeememon, so, we can hide the built in controls with CSS and the value should comply with  RFC 3339.\nBut as I was looking deeper into this idea, I found hard to change the format it presents the input to the user, simply there isn't a way to specify the format, so it is up to the browser, which in the fallback versions, presents the wire format (YYYY-MM-DD).\nI think we will have to drop this idea.\nOn my iPhone, the input with type date shows the input like this:\n\nWhich is way easier to select/pick a date then using the picker, which doesn't always fits in the screen.\n. For me there's a simple solution, i just need to switch inputs accordingly with the resolution. It is just a shame that HTML5 date input comes so limited.\nAnyway, thank you by the support. Good job in this component!\n. ",
    "thomasduenser": "Thank you very much for the fast answer!\nI think that's not enough, on the month navigation (prev + next) next to the onClick, there must be onTouchTap like in the Example of the tap-event-plugin.\n. I ended up using fastclick with the help of this stackoverflow question. Seems to work fine.\nCan be closed, but maybe a solution inside the plugin code would be awesome one day. Keep up the great work!\n. ",
    "jochenberger": "Is there any reason why the dist build cannot stay in place in addition to the separate libs? I use react-datepicker in an AMD environment and therefore use the dist build.. What about changing the color to a lighter shade instead of changing the backgroundColor?. http://codepen.io/jochenberger/pen/RoxqyZ. this can probably be closed.. I use a customInput that uses http://react-bootstrap.github.io/ for this use case:\njavascript\nconst InputWithButton = (props)=>{\n  return(\n    <InputGroup>\n      <FormControl onClick={props.onClick} value={props.value} onChange={props.onChange} disabled={props.disabled} />\n      <InputGroup.Button>\n        <Button onClick={props.onClick} disabled={props.disabled}><Glyphicon glyph=\"calendar\" /></Button>\n      </InputGroup.Button>\n    </InputGroup>\n  );\n};\nand then\njavascript\n<DatePicker customInput={<InputWithButton />} ... />\nMaybe some custom input implementations could be provided with react-datepicker, this one would need a dependency on react-bootstrap though.. See http://codepen.io/jochenberger/pen/ENRNZN for an example.. Because there is no change handler specified on the DatePicker. I cannot reproduce this with 0.34.0: https://codepen.io/jochenberger/pen/xRpQOK. Yes, I think so. The global is still named onClickOutside.. What do you mean by \"does not seem to work\"? You can specify inline and disabled: http://codepen.io/jochenberger/pen/YpvxgV. I don't get any warnings in 0.34.0, React 15.3.2.. I think that the tests fail because they try to access components' internal state. Now those components are wrapped inside a HOC so the state is \"one level deeper\".. See #651.. Even though I created #651, I'll comment here anyway, so you can decide which approach you like better.\nFirst of all, you'll need to change calendar_test.js to use mount instead of shallow inside getCalendar(), line 14. Then you need to replace calendar.state() by calendar.instance().getInstance().state. That fixes the first batch of tests.\nThings get more complicated on year_dropdown_options_test.js since it tries to simulate events on refs. We cannot work with instance().getInstance() there because we're no longer in enzyme space then so we cannot use simulate.\nI can try to dig in deeper, but I'd like to know whether you want to take this approach or #651.\n. Confirmed, see http://codepen.io/jochenberger/pen/ENRNZN. Make sure that your input has the react-datepicker-ignore-onclickoutside CSS class, it should work then.. @martijnrusschen, this should probably be mentioned in the docs and fixed in https://hacker0x01.github.io/react-datepicker/#example-24.. Fixing the example won't prevent this from happening again. The docs definitely need some love too.. @martijnrusschen At least all the props and their effects should be documented. \nFor the custom input, I'm not even sure how it's supposed to work. Probably, you should just pass down all props to your custom component, as in props={...this.props}.. The button takes the complete height of the calendar. Shouldn't .react-datepicker__today-button have clear:left?. This issue was caused in 6ec4cb9ad2ef0393a9d66519b4bf51e896104bda, specifically in https://github.com/Hacker0x01/react-datepicker/commit/6ec4cb9ad2ef0393a9d66519b4bf51e896104bda#diff-9da5657b359639ae904fe748a1fb2b4cR119.. Confirmed, I can reproduce this issue in IE11 and a similar one in Edge.. What demo code do you mean? I can paste a date into the \"Default\" example on https://hacker0x01.github.io/react-datepicker/.. Should be fixed with #651.. I can reproduce this, it also happens if the initial date is null, it works fine for undefined however.. Duplicate of #607 actually. Can't use SFCs as custom inputs either because they cannot have refs.. I ended up implementing a focus function in my custom component that focuses the input: http://codepen.io/jochenberger/pen/qqKrPd\nThat's pretty advanced stuff though, I with it was easier. This should probably go into the documentation.\ncc @martijnrusschen . I cannot reproduce this with 0.34.0: http://codepen.io/jochenberger/pen/xRzRMP. @reznord have a look at http://codepen.io/jochenberger/pen/xRzRMP, it uses react 15.4.1, react-datepicker 0.37.0, and the MM/DD/YYYY format. It works fine. What are you doing differently? Can you modify the codepen to reproduce the issue?. See also #514. @martijnrusschen: thoughts?. See https://codepen.io/anon/pen/GNyJPN. It also breaks if you only specify dropdownMode=\"select\": https://codepen.io/jochenberger/pen/jVYbwX. Actually, I'm not sure how. It looks pretty complicated to me the way it is. Absolute positioning combined with magic-number margins. I think we should get rid of those altogether but since there are so many possible combinations of the dropdown options, I'm not sure how to fix it without breaking something else.. See #657 . done. I'm not entirely sure that this is the way it should be done, one could argue that the onClickOutside behavior belongs to the component and thus should be contained in the same file. That makes unit testing a bit more difficult. See also https://github.com/Pomax/react-onclickoutside/issues/133. It also works fine in Edge and works... sometimes... in IE11. I wonder if it's a rendering or a JavaScript issue.... Never mind, it's caused by react-bootstrap. The Modal tries to keep focus and that trips Firefox. You can set enforceFocus to false on the Modal. See http://react-bootstrap.github.io/components.html#modals-props-modal. It probably makes sense to review #646 first and revisit this afterwards.. @martijnrusschen this should be ready for review. Done. But I noticed that the year is not dsplayed in the header if showMonthDropdown is set. This is probably a bug. Might be related to #533.. No, this makes the layout jump when the year dropdown is opened. That should do it. Probably similar to #507.. Does this still happen with 0.37.0?. Could this be related to #597?. Have you tried setting showYearDropdown, like in https://hacker0x01.github.io/react-datepicker/#example-18?. The UTC offsets are not constant, e.g. \"Europe/Berlin\" has +01:00 or +02:00 depending on DST (https://en.wikipedia.org/wiki/Daylight_saving_time). Sorry, i was too quick with my response. I thought you had added a timezone picker to the component and used constant offsets for that.\nI suggest changing the option labels to not include locations. It might lead to issues for other users who copy your code without having DST in mind.. See https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types.\nI would have liked to do this via .babelrc, but unfortunately I haven't found a way to set the babel env from grunt.. Not sure I like this. Isn't this the kind of thing you should do with a customInput?. The only case I can imaging this going wrong is if the pattern has leading/trailing spaces, but this is probably not a very common usage. It might be worth adding a warning/check for that too. Maybe only trim() if input.length > pattern.length or something like that?. Yes, of course. I should have had more coffee before chiming in here. ;-). I haven't used react-datepicker in a while because I had too many issues with it, so I don't have a strong opinion.\nYou might want to consider doing some alpha/beta releases before 1.0.. ",
    "fitz0019": "Hey, I was searching for any issues related to keyboard navigation and noticed this was labeled as 'needs more info'. My needs require the use of only a keyboard to select a date. I'm happy to help discuss what this should be like.\nTo support certain levels of accessibility guidelines a user should be able to use just a keyboard and currently selecting a date isn't possible.\nIn my use case for the date picker being able to type in a date is not possible as the dates shown are current events which are loaded from an API and therefore the user does not know what's available.\nSome suggestions:\n- Using tabindex='-1' on the dates to allow focus\n- Have 'aria-selected' true|false depending on the state on each day\n- When tabbing through the calendar dates the focus shouldn't leave the component until they have made a selection or quit (e.g. pressing 'ESC').\n- Tabbing should loop through the dates i.e. after tabbing the last date move focus to the first visible date\nLet me know your thoughts.\nThanks for the great component and accessibility will be a great addition.\n. ",
    "jmfrancois": "Let's take how others are doing this:\n- http://eureka2.github.io/ab-datepicker/\n- https://angular-ui.github.io/bootstrap/#/datepicker\n```\nKeyboard support\nDepending on datepicker's current mode, the date may refer either to day, month or year. Accordingly, the term view refers either to a month, year or year range.\nLeft: Move focus to the previous date. Will move to the last date of the previous view, if the current date is the first date of a view.\nRight: Move focus to the next date. Will move to the first date of the following view, if the current date is the last date of a view.\nUp: Move focus to the same column of the previous row. Will wrap to the appropriate row in the previous view.\nDown: Move focus to the same column of the following row. Will wrap to the appropriate row in the following view.\nPgUp: Move focus to the same date of the previous view. If that date does not exist, focus is placed on the last date of the month.\nPgDn: Move focus to the same date of the following view. If that date does not exist, focus is placed on the last date of the month.\nHome: Move to the first date of the view.\nEnd: Move to the last date of the view.\nEnter/Space: Select date.\nCtrl+Up: Move to an upper mode.\nCtrl+Down: Move to a lower mode.\nEsc: Will close popup, and move focus to the input.\nNotes\nIf the date a user enters falls outside of the min-/max-date range, a dateDisabled validation error will show on the form.\n```\nThis is a needed feature for us too, so we will investigate it.\n. I'm OK to start a Pull Request on that.\n. ",
    "danielone": "awesome thanks guys! accessibility support via keyboard input so valuable to an accessible web for everyone of all human capabilities. \n. ",
    "sundariya": "Hi all i want  to  select date from  keyboard . how  can i do it  anyone any  idea . if i type  like  12/03/2019 then that  particular date  should  be marked as  selected. . ",
    "mailanpham": "One could make the inside-the-month days a grey color and the outside-the-month days a white background color. alternatively, the out-side-the-month days could be excluded altogether for clarity like in https://jqueryui.com/datepicker/\n. ",
    "MarkReeder": "I'll add this.\n. @rafeememon sure thing- just to confirm on the docs, just docs-site/bundle.js should be removed, correct? Also, happy to add a some tests.\n. @martijnrusschen I've rebased against the current master- let me know if you need anything else.\n. I tried that first and it didn't work, but I think I was using the wrong prop name autofocus instead of autoFocus. I'll change to just pass the prop through.\n. Good call- the test failed previously, but using the autoFocus prop, it's not necessary. I'll remove.\n. No worries- happy to remove that (and considered that when changing to pass the prop through), but it is useful. For instance, if you want to programmatically set the focus on the input, you have to do so through a chain of refs (the ref you set up on DatePicker -> the input ref). Basically it's this.refs.DatePicker.refs.input.focus() vs. this.refs.DatePicker.setFocus(). Happy to remove though if you feel strongly about it.\n. Sounds good, I'll break that out into a separate PR.\n. ",
    "adamgruber": "I'm using version 0.24.0. I looked a little deeper and I do see that the close icon is indeed getting rendered but it is being hidden by this line of CSS:\ncss\n.datepicker__input:not(:valid)~.close-icon {\n  display: none;\n}\n. ",
    "alurim": "@rafeememon thanks for the quick feedback, I'll keep the onBlur that I added in my code that does basically what I put up for review as I'm using redux-form (which expects onBlur to either return the current value or an event which has a target element with the current value). Totally understand your reasoning though!\n. ",
    "DriesVandermeulen": "@rafeememon The current demo page does not describe this behaviour thought. \nFrom demo\njavascript\nhandleOnBlur: function (date) {\n    if (date === null) {\n        console.log('selected date: %s', date);\n    }\n    else {\n        console.log('selected date: %s', date.format('DD/MM/YYYY'));\n    }\n};\nIt also bugs on the demo page\nUncaught TypeError: date.format is not a function\n. ",
    "dpwrussell": "@alurim Thanks for this, I was having the exact same problem with redux-form.. Thanks for reviewing. This should address all the comments. I decided that it made sense to drop the checks for the effect of the keyboard navigation (e.g.):\njs\ndata.copyM.add(1, 'years')\nexpect(result.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n...as the fact that it is not calling the callback handler at all makes this moot.. ",
    "abilashs90": "@rafeememon the styles, while using POSTCSS are imported as JavaScript objects and the class names are in react components are added something like className={styles['class-name']}. I noticed that the styles in date picker is used like className=\"class-name\". \nAny help would be appreciated.\n. ",
    "andynoelker": "Okay, thanks for the info! Yes, factoring into 2 change events might be the best way to pull that off. I look forward to seeing this addressed in v1.0. I guess I'll leave this open until then, although if you'd prefer it didn't fill up the issues list then please close it.\n. Just did an update and started getting this as well\n. ",
    "erzei": "Is there a workaround to get the native event object?\nI have a onChange handler where I receive the event and expect to get the input name from the event.target object, but instead I get a moment object, which breaks my state validation process.\n. ",
    "manishstrivepool": "I am facing the same problem. I am new to react so I don't have any sort of idea for solving this. can anybody please help me out of it.\n. ",
    "LeoAref": "@manishstrivepool @Erzei \nI'm solving the problem of native events by using ref and fire ref.onchange() manually!\nWaiting for a proper solution as well. @alex-shamshurin @andrius444 Thanks for your comments, I'll try it out and see if that's what I'm looking for.. I found that onChangeRaw is getting called if the user changed the date text manually without picking it from the calendar.\nBut what I'm looking for here is firing the native onchange method after changing the date value, so that the form validation is getting fired automatically, I hope it's clearer now. @rafeememon \nYes, it's almost the same, but I see these points are valuable\n\nIt's declarative\nThe user won't have to check if (date === null). @rafeememon I think implementing onClear will lead to not firing the onChange event in case of clearing (to not fire it twice), and that will introduce a breaking change\n\nSo do you see it worth it? (honestly not). ",
    "alex-shamshurin": "I noticed that onChange event never happens if using custom input component with null value. When we select date through DatePicker the input field first get onBlur event and then if it's value is null and onBlur handler of input element is defined then onChange of DatePicker is not fired.. https://github.com/Hacker0x01/react-datepicker/issues/679. Yes, I hope. if this is not in release you can use workaround: include utcOffset={moment().utcOffset()} property and it will fix it.. Sorry, I did not know that you are a maintainer. Thanks. +1\nThis is another reason why we need isOpen property\n. +1\nYes, during server rendering \"selected\" prop may be null and the field initially may be empty without warnings.\n. 0.32 it doesn't work, but on 0.33 it's ok. \n. yes, I read it via ref but now I have another problem. When user clicks on input, the datepicker opens only at first time, but subsequent times it first closes and then opens againg. I want to avoid it and keep it open when user clicks. (so state.open is always false)\n. I've passed a ref to input component\nThis is an Input.jsx, calendar is parent DatePicker\n```\nhandleClick(e) {\n    const {calendar, onClick} = this.props;\n    if (!calendar.state.open) {\n      calendar.setOpen(true);\n    }\n  }\nrender() {\n    return (\n      \n    )\n  }\n```\nbut the same, it first closes (on mouseDown I think) and open is always false in handleClick\n. I did't know about that, confirm, this fixed the issue, docs should be updated.. Is the project not maintained anymore?. Could you resolve conflicts and squash the commits into one? Do not include docs-site/bundle.js and docs-site/style.css into commit please to avoid conflicts.. I agree, in DB time values must be stored in UTC, it's doubtless. But in my case it's just a train ticket date which user selects from the form. User cannot choose \"yesterday\" date, it's a relative value. It must be taken from user's browser and it's local time. It applies to the user only, it doesn't matter what is the time of other users. I need simply \"today\" and all following dates. So the internal date representation in Datepicker must be in local time. If I need to extract UTC time to store it in DB, it's a programmer's responsibility to do it.. +1\nGuys, min and max dates are calculated incorrectly. This is what this issue is about. They in UTC but must be in user's local time.\nThe issue is in this string:\nconst current = moment.utc().utcOffset(utcOffset)\nif utcOffset prop is not set, time calculation is done in UTC, stead it should be\nconst current = moment()\nif (utcOffset) {\n   current = moment.utc().utcOffset(utcOffset)\n}\n. This is pretty simple:\n<DatePicker\n   ref={(c) => this._calendar = c}\n   locale='ru'\n    ...\n   customInput={<InputField {...this.props} calendar={this._calendar}/>}\n/>\nAnd then somewhere\nthis._calendar.setOpen(bool). No matter, it works! This is exaxtly is used inside.. That _calendar variable is in my code, not inside DatePicker. It's just a ref to calendar object, not related to DatePicker library at all. . I think so.. So setOpen is normal public method, as @martijnrusschen has just confirmed, we only need add this to the docs.. I really do not understand why you cannot get a reference to a component and use its methods and state.  if you want it always be opened you can use withPortal or inline options. If you want it just to start opened you should get a reference and open it. . Why you cannot wrap this ReactDatePicker component into custom your DatePicker or Calendar component and use ref=\"input\" on its props whereas save real reference on DatePicker inside your internal component and pass it back via callback function?. @tommyalvarez And besides, you need a reference only for input, not for a DatePicker. Because your input is somehow an uncontrolled component, perhaps, or your callback (onChange) does not sets it. In my project there two values 1) selectedDate (which is passed to selected property and it's a a moment object, and 2)day is a value which is bound to the input field itself. And there is a link between them. Once user selects date via date picker the appropriate value of date must be set and vice versa.. So is it merged to 0.44? I see it's still not working.. Guys, any update? PR is merged but did not work. In inlined mode with portal and monthShown it doesnt't work. It always opens on selected date. This is my config\nthis.currentTime = moment()\n....\n<ReactDatePicker\n        ref={this.saveRef}\n        locale='ru'\n        inline={isMobile}\n        popoverTargetOffset='10px -50px'\n        minDate={this.minDate}\n        maxDate={this.maxDate}\n        highlightDates={highlightDates}\n        onChange={this.onChange}\n        onSelect={this.onSelect}\n        onClickOutside={this.onSelect}\n        todayButton='today'\n        selected={input.value}\n        openToDate={currentTime}\n        withPortal={withPortal}\n        monthsShown={isMobile ? 3 : 2}\n        customInput={!isMobile ?\n          <InputField\n            {...this.props}            \n            currentTime={currentTime}/> : null}\n          />\n. No, I think it's different. select is an actual value of the widget, internal current date. But openToDate is the date to which widget will scroll when it's opened. For example selected may be some date at future, but every time  datepicker is open it must be opened at today, I think THIS is correct. . Yep, Our real example - user selects some departure date in some months in future, say on June, then he decided to select another date, but next time datepicker shows June and next 2 months (we use portal and inlined version with 2 months shown). So user cannot choose this month! and go to another ticket service. \nSo it must be opened everytime at openToDate date.. I want that selected date must be selected date )). And the openToDate must be the date on which calendar will open. No matter right or left or whatever. Selected may be today, but I want calendar to be opened at the openToDate date (may be 30 year before today or last age).  OpenToDate it's just like a scroll position.  . > Is that what you're trying to work around\nyes\n. Is there any update?. See my PR here https://github.com/Hacker0x01/react-datepicker/pull/860. @martijnrusschen The #860 is still not merged.. Could you check it out?. Merged, thank you.. I'm interested in that too.. Also we need new build system. Webpack2 and react-theme support.. Oh, and along with webpack2 I meant to change the building itself. Of course without grunt and I do not understand  why there after each build I get some bundle.js (I think it's a demo site) file and this is included into git.. Sure, I think demo site must be updated only when you release new version. May be it's the only case of grunt... Anyway it may must excluded from git. . And another issue with I had problems it's an internal  state, It works async and sometimes it leads to strange behaviour. It's better to use exterrnal state (passed as a prop) or use internal mobx to make it sync.. I think it's not stable enough. We have issues with build system, internal moment (see the post above), sync state and some other errors. You can do it in onChange, don't you?. @jbschrades If you use custom input, usually it's dependent upon its own state, you should call input.onChange(inputString|event). When you select date via widget you should update input's state too.\nI guess you have bound the input string value to redux-form state. Instead you should use react-datepicker selected date (of type moment) in your redux-form state with format and parse options to convert moment type to string type(for readability). And when input string (maybe internal input component this.state or mobx) changes or new date selected via datepicker use input.onChange(value|event). Could you provide more steps to reproduce?. You can move focus to another input field or whatever  in onChange callback. . You can use nodejs for rendering that part which uses react instead of noshorn and fetch this part of HTML into a Grails taglib class from nodejs server (renderToStaticMarkup). Also you can use more native way for Grails (via Nashorn)- try https://plugins.grails.org/plugin/grails-isomorphic plugin, if it works well with Grails 3.2.* you can include react into taglib. \nPlease let me know if you succeeded. This is with merge commit and should not be merged. I made a PR https://github.com/Hacker0x01/react-datepicker/pull/784 with onSelect callback for this purpose. (to close it when user clicks on the same date). When you click outside the event handleCalendarClickOutside is fired (I checked that) and open state sets to false : this.setOpen(false) but it does no close... Hmm.. Oh, I know why, because it inlined and cannot be closed, probably. This is a PR https://github.com/Hacker0x01/react-datepicker/pull/788 with 'onClickOutside' callback. You can use it to rerender outer component, like this.setState({showDatePicker: false}). I hope it will be merged into next release.. The typical workflow is to INCLUDE yarn.lock everywhere into git. I'm not sure we should break it for this specific case. . Hi, have you updated docs?. Styles works)) And I'm not sure about it\n this.state = {\n            startDate: moment(),\n            endDate: moment()\n        };. Please exclude build.js from the commit and resolve other conflicts.. You can use onSelect callback, it's already impemented and merged by PR https://github.com/Hacker0x01/react-datepicker/pull/788. That's why there is another callback - onClickOutside to solve your problem. . Ok, I think it might be an array. I'll do it.. Yep, this.highlightedDates may be an array of moment or multidimensional array of moments. I think className + arrayIndex, like ''react-datepicker__day--highlighted2''. Beside this, have no idea how to make it better.. OpenToDate property always take precedence over selected value. Does not specify openToDate \n\nThe calendar switches back to the old date\n\nit's a normal behaviour, calendar will scroll to openToDate . if so, do not use it, otherwise it will be scrolled to openToDate value. . @JorgenEvens So what is wrong with the inline example? Could you provide more info, please? . Yes, I see this. This will be fixed. So?. Conflict is with only these two build files. They must be excluded from git. If you have access permissions you can resolve it right here.  Or I have do it myself (syncing forks and so on)?. Why we cannot it exclude from this branch? On each build these files will be recreated. Yes, it prevents from easy switching to the branch which tracks these files, but we can delete these files ant then checkout.. It is really hard to work with build files in git index. It's terrible. Best solution is to exclude them from all branches.. Hmm, ok, got it. Do you mean I should include these two files built with all my changes?. I have updated build files, so please merge it! . It was two weeks ago! Any comments? . @martijnrusschen Please check it out and merge.. this.state.startDate is a moment object. You can always rewrite it in onChange or you can use onSelect callback if you need to catch each select. DatePicker is not TimePicker, it just cares about dates, but you can track current time in onSelect callback.. Up! Please merge https://github.com/Hacker0x01/react-datepicker/pull/860. Thanks. Really weird. Looks like with wrong ref or key somewhere. . What do you mean? Do you need validate input string or date which is selected? If you want to handle when calendar is open or closed you can just use inline property and open and close it manually via reference.\n```\nsaveRef = c => {\n  this._reactDatePicker = c\n}\n\n``\nand use itthis._reactdatePicker.seOpen(false)orthis._reactdatePicker.seOpen(true)`\nor use setTimeout(() => this._reactdatePicker.seOpen(false), 100). I think react-datepicker should get rid of internal state. It must be maintained somewhere else.. You can use different highlighted ranges. One cell can be red, another can be green. If you need combine colours inside one cell you can do it with css. So it's possible.. What you mean? Where undefined? These values exists only in native event handlers from elements like input, div and so on.. Because you need to maintain somehow input field state. It's not bound to any value.. Closing this, no feedback. ok, nice )). So is this a problem? may be a bit blurry is better than lack of GPU optimizations? With this optimization tethered component won't be repainted on scrolling.. Waiting for PR to test it!. Hmm, please provide a PR.. I really did not get what you meant. What do you mean by 'track time'? When you select date with react-datepicker it simple keeps time of initial state time passed as selected property.  . I think readOnly is only about the input field itself and it does not mean that value cannot be selected via widget. Moreover - readOnly status can be changed and usually used to hide phone's keyboard.. With a onChange callback and custom input you have full control over your state. You can do that onChange does nothing. Could your provide more info about your use case. The primary intention of this widget is a date selection. Why you need week numbers? You can calculate week number of selected date outside, I think.. Please provide additional info. I think you use custom input which is not bound to state.. Please provide additional information.. Styles are not applied. Supply the whole file.. Could you squash you commits into one-two and without merge commits?. This way you want to collect all styles for a particular day? I think it's a good idea. We must update proptypes package:\nimport React from 'react'\nimport PropTypes from 'prop-types'. I think you are right. onSelect must be called when you select. . Please provide more info, why you need this, what is yout use case?. Hmm, if you \"select\" some date it should close itself. If you open the widget next time it will open on selected date until you specify openToDate property. . You should listen onBlur event on the input field\n```\n restoreInputValue() {\n    // set a right default value to the state\n  }\nhandleOnBlur = event => {\n    const { input, setDate, inputDate } = this.props\n    const inputString = event.target.value\n    const d = moment(inputString, 'DD.MM.YYYY', true)\n//check that selected date is in allowed range\nif (d.isValid()) {\n  if (\n    d.add(1, 'seconds').isBetween(\n      moment()\n        .subtract(1, 'd')\n        .startOf('day'),\n      moment()\n        .endOf('day')\n        .add(1, 'y'),\n    )\n  ) {\n    setDate(d.format('DD.MM.YYYY'))\n  } else {\n    this.restoreInputValue()\n  }\n} else {\n  this.restoreInputValue()\n}\n\n}\n``. Pass a reference of datepicker to a custom input class and check its state. Please give a code example.openToDateshould only open the widget at the right page. It does notselect. You can save a reference to a date picker itself, and pass it to another component and when you need useref.setOpen(false). Yes, you can change it in css file, which is included.. Could you explain  your case in detail? I don't really get what you meant.. Could you provide an example - what all this is about?. could it be justthis.handleChangeYear` as callback instead of arrow function definition?. I agree, no regex here, overhead.. ",
    "FredyC": "Um, so is this ever going to happen since it was removed from milestone? It would be super useful for writing E2E tests so I can enter a specific value rather than by selecting a value from a combo.. ",
    "LopatkinEvgeniy": "thanks. That is what i need.\n. ",
    "matthewmueller": "is there anyway to disable this or style that element? sometimes it's nice to have it be a block element.. ",
    "k-stasevich": "Please do it guys! We need it too much!\n. ",
    "schillerk": "\nDoes this not already work?. ",
    "diffractometer": "@martijnrusschen Wow that was quick! But I'm already using this loader. \n{\n      test: /(\\.css|\\.scss)$/,\n      include: path.join(__dirname, 'src'),\n      loaders: ['style', 'css?sourceMap', 'sass?sourcMap']\n    },\n. Thanks. Does using ExtractTextPlugin force No Hot Module Replacement?\n. @rafeememon Yes! That was it. Thanks a ton!\n. ",
    "brendonco": "how did you manage to load the react-datepicker.min.css?\nI'm using webpack.config.js loader but doesnt work:\n{\n        test: /\\.(scss|css)$/,\n        include: [path.resolve(__dirname, \"src/scss/\"), path.resolve(__dirname, \"node_modules/react-datepicker/dist/\")],\n        loaders: [\"style\", \"css?sourceMap\", \"sass?sourceMap\"],\n      },. I agree, I'm also using showMonthYearDropdown and was force to specify minDate and maxDate.  Is there a way to not specify  minDate and maxDate?. ",
    "dlwalsh": "Crap! My own unit test broke. It worked fine for me locally.\nI'll take a look at this later and resubmit.\n. Pull request withdrawn.\nMy logic isn't quite right. And the unit tests I wrote for it aren't good enough.\nI will resubmit tomorrow.\n. @rafeememon #436 is indeed a more elegant solution. Thanks!\n. Good point!\n. OK. I'll refactor it out.\n. ",
    "janroesner": "Same issue here\n. Works for me. Thank you!\n. ",
    "tjcampbell": "@rafeememon I can create a PR if it saves you some time?\n. Thanks @rafeememon \n. @rafeememon are you guys going to do a release with the fix?\n. ",
    "maggiepint": "Track this by moment pull request moment/moment#3078\n. ",
    "mmahalwy": "Seems like the problem was around selected props, so I replaced startDate with moment(). In some cases it works and others it does not (where I have the weird offset of dates)\n. Also throws this error when i open the datepicker:\nDeprecation warning: use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale\n. \"react-datepicker\": \"^0.21.0\",\n. @rafeememon  \"version\": \"0.21.0\" think that's too old?\n. yep, fixed it! \n. ",
    "olanMbakop": "I'm having the issue until now... ^1.6.0. The problem still exists in ^1.6.0. ",
    "joelzimmer": "Hey guys, when will this be merged with a new version?\n. We'd really appreciate a version bump since it would help us upgrade one of our projects to use React 15. \n. ",
    "halloffame": "Looks like a new version of react-tether was released with the dependency change\nv0.5.1\nhttps://www.npmjs.com/package/react-tether\n. I'm all for ditching dependencies if they are not really necessary.\n. ",
    "pocketjoso": "Would be great to get this bumped!\n. ",
    "michaelzoidl": "Hey guys, is there some work-around to get the react-datepicker working?\nIn another project just removing react v0.14 from the peerDependencies in the package.json worked, seems like this works not for this project.\n. ",
    "peXed": "Hello! @rafeememon how is the status on this? React-tether is now up-to-date with their dependencies again or is still something missing?\n. ",
    "orangecoding": "@rafeememon is there a plan when React 15 will finally be supported as I would love to use this within my project. Anything I can help with to speed things up?\n. k. If there's anything I can help with, just comment.\n. @martijnrusschen awesome mate. thanks!\n. ",
    "Joramt": "Yup, i figured out that one a bit after i posted :p you might want to check your examples on your demo site, there's one with a placeholder and no selected attribute and it doesn't work. This is an expected behavior because if you dont bind the datepicker component value to a state via the selected attribute, it's more than obvious that it wont work ( you are basically giving it no value to display )\nAnyway thnk for the reply, the datepicker is also a great tool that we use a lot !\n. ",
    "anevaude": "This caught me as well. The demo does not explain that the placeholder won't appear if the date is there. But changes to null worked. \n```\nclass DatePickerContainer extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            startDate: ''\n        // Enable this if you want todays date to appear by default\n        // startDate: moment()\n    };\n    this.handleChange = this.handleChange.bind(this);\n}\n\nhandleChange(date) {\n    this.setState({\n        startDate: date\n    });\n}\n\nrender() {\n    return <DatePicker\n        selected={this.state.startDate}\n        onChange={this.handleChange}\n        placeholderText=\"MM/DD/YYYY\"\n    />;\n}\n\n}\n```. ",
    "baoqchau": "This will work but because theDatePicker is expecting a moment object, if we initialize it with a null string, it will print an error to the console: Failed prop type: Invalid prop 'selected' of type 'string' supplied to 'DatePicker', expected 'object'. ",
    "jacksonv1lle": "@baoqchau To resolve that problem you can do this:\nselected={this.state.startDate===\"\" ? null : moment()}. ",
    "gazedash": "I can replicate this. The selected prop is set to null, placeholderText is present, but there is no text shown.. ",
    "firedev": "Okay after I forked it I see why it's not an easy task since it tries to convert a string to date on every change.\nI hacked around it so it parses date only after you press enter, guess it can be improved, but that'll do for now.\n. You can see what I am doing here: https://github.com/firedev/react-datepicker/blob/master/src%2Fdate_input.jsx#L45-L66\nI parse date after user presses Enter otherwise it would be impossible to edit field.\n. Sorry, what do you mean exactly? I will make tests pass.\n. ",
    "tsironis": "@martijnrusschen There is the same typo in the website. There is a bundle.js in gh-pages branch, but I'm not sure I should mess with it!\n. No worries! Congrats on the library btw, awesome work.\n. ",
    "kvasa": "Sure, I will add some tomorrow.\n. So I added 3 simple tests mainly to check if TetherComponent is rendered or not. Is it ok like this or should I add some more?\n. ",
    "Gywem": "react-datepicker v0.25.0\nBasically I have a custom component that uses DatePicker, imported as a ReactDatePicker.\n``` javascript\nimport ReactDatePicker from 'react-datepicker';\n// [...]\ngetInitialState: function() {\n  return {\n    startDate: moment()\n  };\n},\nhandleChange: function(date) {\n  this.setState({\n    startDate: date\n  });\n},\nrender() {\n    const {\n      labelText,\n      disabled,\n    } = this.props;\nlet className = '';\nif (disabled) {\n  className += ' disabled';\n}\n\nreturn (\n  <label className={`field${className}`}>\n    { labelText }\n    <ReactDatePicker\n      selected={this.state.startDate}\n      onChange={this.handleChange}\n    />\n    <br />\n  </label>\n);\n\n},\n```\nAnd the callstacks of the errors:\n\n\nThanks\n. ",
    "chestozo": "I was struggling with the same issue for a day.\nSo finally in my case it was 2 different versions of React inside node_modules but it was somehow difficult to reproduce it - sometimes npm would install only one version, another time - both.\n(sh)\n$ npm ls react\nmy-mega-pack@0.1.0 /home/chestozo/my-mega-pack/client\n\u251c\u2500\u252c common-components@1.4.4\n\u2502 \u2514\u2500\u2500 react@15.6.1\n\u2514\u2500\u2500 react@15.4.0\nThere are 2 types of fix as far as I could understand:\n1) use same React version as your dependencies\nIn my case it was like on the snippet above - I had react@15.4.0 and react@15.6.1.\nThis was because in my package.json I had \"react\": \"15.4.0\" while in dependency package common-components they had \"^15.1.0\".\nAfter changing version in my package.json to the same version as specified in common-components - \"^15.1.0\" - it was fixed.\n2) another fix is to specify resolve.alias in webpack config (I am using webpack) - found here\nhttps://stackoverflow.com/a/42411974/449345\nhttps://stackoverflow.com/a/31170775/449345\nLike this:\n{\n    resolve: {\n        alias: {\n            react: path.resolve('./node_modules/react'),\n            'react-dom': path.resolve('./node_modules/react-dom')\n        }\n    }\n}\nMaybe it helps someone else.. ",
    "R0nd": "Experiencing the same issue in production on versions 0.60.0 and up.. ",
    "paulkarpenko": "This would be an excellent feature. Choosing historical dates, for example birthdays, is currently pretty annoying. Better than a , I think, would be a more classic year selection UI like the one used here: https://github.com/zippyui/react-date-picker\n. ",
    "iknowcss": "@nvarchar I forked this repo, implemented the code with tests, and am using it on a project now. The only problem is that I didn't write generic CSS for it for this project. I will pull it up this week and see how hard it would be to merge upstream.\nWould anyone else who wants this please +1 this so I can get a feel for interest?\n. (It's in a private repo)\n. @Faulik @nvarchar sorry for not responding sooner. I have pushed the changes to a public fork here:\nhttps://github.com/iknowcss/react-datepicker/tree/issue-462\nThis is branched off of the v0.25.0 release (tagged as such in the repo). I did a test rebase to the current Hacker0x01 master. There are a handful of conflicts in the actual source but it doesn't look too complicated to resolve. Unfortunately I don't have time to fix it myself right now.\nThe biggest block of work left to do is the generic styling. I didn't do it because the project I'm using it on had different styles anyway. I would have had to double-up.\nHope that helps!\n. I believe the change won't be available until a new version is published to npm (maybe v0.30.0) \n. This is really cool! Would love to see this merged in \ud83d\udc4d \n. Travis is failing but I don't understand why? I can't get the tests to fail for me locally.\n. @martijnrusschen I just realized I have caused a regression in fixedHeight during my refactor. It is late now so I will fix tomorrow.\n. @martijnrusschen I have completed my changes and added new tests to prevent a regression of fixedHeight again. When you have a chance, would you please have a look at the code and let me know if you have any questions?\nCheers!\nCody\n. Thanks Martijn!\n. Hey sanheng, the changes have been merged to master but they have not been published to npm yet. They should be available in version 0.30.0.\n. @saborrie and @karldanninger have you added the 'en-gb' locale to moment.js? I believe most locales are not included by default.\nhttp://momentjs.com/docs/#/i18n/loading-into-browser/ \nI am on mobile now so it is difficult to test. I will have a second look a bit later.\n. If this solves the problem maybe the README needs to be updated\n. ",
    "Faulik": "@iknowcss Hi, any news on this? It will be ok to even use your fork.\n. ",
    "adamellsworth": "Here's a general idea of what's happening:\n``` html\n<!DOCTYPE html>\n\n\n\n\n\n\n    <div id=\"app-mount-node\"> <!-- app mounts here -->\n        <iframe>\n            <!DOCTYPE html>\n            <html>\n                <head>\n                    <meta charset=\"utf-8\">\n                    <title></title>\n                    <link src=\"...\" /> <!-- app styles, react-datepicker wrapped into them -->\n                </head>\n                <body> <!-- where react-frame mounts the child by default -->\n                    <div id=\"app\">\n                        <!-- where react-datepicker is used -->\n                    </div>\n\n                    <!-- where I'd expect react-datepicker to mount -->\n                </body>\n            </html>\n        </iframe>\n    </div>\n\n    <div class=\"datepicker__tether-element datepicker__tether-element-attached-left datepicker__tether-target-attached-left datepicker__tether-abutted datepicker__tether-abutted-left datepicker__tether-element-attached-bottom datepicker__tether-target-attached-top datepicker__tether-enabled\" style=\"top: 0px; left: 0px; position: absolute; transform: translateX(424px) translateY(43px) translateZ(0px);\">\n        <!-- where react-datepicker mounts the DOM -->\n    </div>\n</body>\n\n\n```\n\nHere's how I'm using it in my component:\nhtml\n<DatePicker\n    dateFormat=\"MM/DD/YYYY\"\n    selected={this.state.filters.date || undefined}\n    onChange={this.handleDateChange}\n    className=\"form-control\"\n    placeholderText=\"Date &hellip;\"/>\n. Ah that did it, thank you. I made the wrapping component  <div className=\"row\" ref=\"filter-control\"> and set renderCalendarTo={this.refs['filter-control']}. Is that a bad way to approach the issue or should I look for the closest document.body instead?\n. For those whom the above solution did not work, this kind of works for me, although it does shrink the entire form group:\nscss\n.react-datepicker__input-container input.form-control {\n    margin-bottom: -5px !important;\n}. ",
    "daletune": "Thank you @rafeememon, i'll try it.\n. ",
    "ilya4544": "Unfortunatelly, in my case the datepicker closes only if I press Esc. Can you tell me in which cases it's possible?\n. ",
    "njj": "@ilya4544 Did you ever figure this out?\n. @Lacerda @opusrocks Any luck on figuring out why this was happening?  I'm having the same issue but can't seem to determine why.\n. Solved my issue, by including react-datepicker as an external with browserify and then manually loading it via requirejs (with its dependencies as well).\nAny maintainers know why this is happening? @rafeememon\n. @joeJazdzewski I ended up using requirejs to pull in moment and react-onclickoutside before requiring in this library.\nDid you have a different way you included the react-onclickoutside library?  I tried just importing it before this library, but no luck on fixing the issue.\nI think a PR to move react-onclickoutside to a HoC versus a mixin would be a good help too.  Maybe I'll do that.\n. @joeJazdzewski cool I'll give that a shot, so just installed the at the same version as they are in this library?  Do you import the dependencies in the same file you import this library also?\n. ",
    "gavinpatkinson": "This is still a problem and tetherConstraints no longer works.. ",
    "Rambobafet": "Anyone with a solution? Can we reopen this ticket? :)\nedit: ok found a solution :) For anyone looking for the info: #1246 . ",
    "veejai24": "Hi Rafeememon,\nPlease share some details about adding the css files into webpack and htm manually. \nWhenever i am adding the below import to my search.js file. \nimport 'react-datepicker/dist/datepicker.css'\nDate picker is integrated but the style is not applied. \nIam getting the below exception.\nUncaught Error: Cannot find module \"react-datepicker/dist/datepicker.css\"\n    at webpackMissingModule (index.js:61718)\n    at Object.defineProperty.value (index.js:6\nRegards,\nVijay. ",
    "webdesserts": "@rafeememon Looks like some weird resolve stuff was going on with npm link everything looks good now \ud83d\udc4d \n. ",
    "Miaonster": "This issue is resolved after upgrading react-datepicker to 0.27.0.  I'll close it. \nAnd the version is 0.25.0 before upgrading.\n. ",
    "tysoncadenhead": "Yep, I was apparently stuck on an old version. It's not an issue in the current version. Thanks!\n. ",
    "chodorowicz": "@rafeememon Thanks for quick response. But depending on react-datepicker/lib/datepicker doesn't solve the problem, fails in the same way. The problems is, I think, that when building react-datepicker.min.js react-onclickoutside is not bundled together and instead my top level 5.x is being used. And when depending react-datepicker/lib/datepicker datepicker of course tries to use wrong onclickoutside (5.x) and fails.\nreact-datepicker.min.js \u2192 http://pastebin.com/XeAZcRbj\n. So, yes, the v4 is installed inside node_modules/react-datepicker/node_modules/react-onclickoutside, but it seems the dist react-datepicker build doesn't have it included and (only require(\"react-onclickoutside\") calls), so I when I run my final build with Webpack this require is resolved with top level v5 node_modules/react-onclickoutside... Maybe I have sth strange in my webpack config.\n. Cool, thanks! I might take a shot at PR when I find time.\n. ",
    "cdomigan": "I'm running into the same issue. Not sure why webpack wouldn't be picking up the correct dependency here? Anyone had any luck resolving this issue?\n. ",
    "tudorpavel": "I'm in a Rails context, so I had this issue because react-onclickoutside dependency was completely missing.\nMy problem was that react-onclickoutside is defined in webpack as an external dependency, so it's not bundled together with react-datepicker, it simply expects it to be available.\nMy solution was grabbing index.js version 4.9 and adding it before react-datepicker in my Rails asset pipeline. \nThat's it, problem solved. Just make sure a 4.x version of react-onclickoutside is available in your context.\n. ",
    "ryanzec": "I have the same problem with this.\nA temporary hacky workaround I have found is to add this scss:\n``` scss\n//NOTE: this is needed in order to make react-datepicker work with bootstrap's input group / input group addon functionatily\n.react-datepicker__input-container {\n  width: 100%;\n//NOTE: using table instead of block as it is needed in order to make this element set the height since the input is floating\n  display: table;\ninput {\n    border-radius: $input-border-radius;\n  }\n}\n.form-inline {\n  .react-datepicker__input-container {\n    width: auto;\n    display: inline;\n  }\n}\n```\nThis works fine for regular form elements however when you use inline form elements, that is where the hacky part come into play.  When using inline form elements, the height of the react-datepicker__input-container becomes messed up and does not reflect the height of the elements within.  In order to work around that, you can use the popoverTargetOffset property of react-datepicker to align the date picker itself properly.\n@martijnrusschen I would be in favor of removing the clear functionality because as @rafeememon said, that is not very difficult functionality to implement manually and it would make this component more flexible to work with.  While my hacky solution works, I would not want it to be a long term solution as it would be very prone to breaking as styles are tweaked.\n. ",
    "aleccool213": "+1\n. ",
    "brw31415": "if you are intereted:\nhttp://fullcalendar.io/\nit is very popular\nOn Sat, May 14, 2016 at 4:30 AM, Rafee Memon notifications@github.com\nwrote:\n\nI'm not familiar with the jquery plugin, but you can check out the demo\nsite to see if this meets your needs:\nhttps://hacker0x01.github.io/react-datepicker\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/485#issuecomment-219208181\n. \n",
    "TMUND": "Have you tried e.stopPropagation()? \n. ",
    "mezod": "Did you make anything special to make it work inside a modal? It doesn't work for me\n. ",
    "leojh": "Anyone find a solution to this?\n. ",
    "reyhansofian": "Yeah, you're right. Thanks for your answer\nReyhan Sofian\nWeb Developer\nOn Jul 14, 2016 4:07 PM, \"Sascha Mayr\" notifications@github.com wrote:\n\nThe problem here is that the onChange callback only provides the newly\nselected date, but not the event associated with it. If we would get the\nevent as lets say second parameter the following code should work:\nhandleInputChange(date, e) {\ne.persist();\ne.stopPropagation();\n}\nIt would work because AFAIK most modals are adding a click listener to\nwindow and then check if the click target (in our case the datepicker\ncalendar) is the modal itself or a children of it.\nBUT\nReact datepicker is using the tether library to connect the date input\nfield with the calendar component and tether is placing the calendar\noutside the modal before the closing body tag for positioning reasons\n[image: bildschirmfoto 2016-07-14 um 10 44 16]\nhttps://cloud.githubusercontent.com/assets/5527658/16834136/c478e616-49b2-11e6-8491-6d8c01ef57f8.png\nSo technically the calendar is not inside your modal and thats why it\ncloses. As I wrote already, exposing the React event in the onChange\ncallback would probably solve this, since then you can stop the event from\nreaching the window onclick listener\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/488#issuecomment-232609299,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AFGxgY-S712uRFIMqmbctg95_aEfbXeTks5qVfxEgaJpZM4Ikvuc\n.\n. \n",
    "LeoZeda": "Is there a way to get the event?\n. ",
    "amakhrov": "Actually, passing the event into onChange wouldn't solve the issue completely. A user can click on the calendar without selecting a date (e.g. navigating between months). And in the scenario above it will as well close the modal.\nAn alternative suggestion is to introduce a new property: stopPropagationOnClick: PropTypes.bool. If this property is true, the component will run e.stopPropagation() on all mouse clicks inside the calendar.\n@martijnrusschen would you consider a PR with the proposed change?\n. ",
    "tommyalvarez": "@martijnrusschen In my case i have a date picker input inside a table row  and the tr is clickable (it handles the onClick event). So i also need to prevent that clicking the input, bubbles up to the row. . This is my custom component implementation to be used by redux-form Field after many try-outs receiving warnings about invalid prop types for value or complains about invalid dates and rfc's ... Everything works, initialization, selecting a date, re opening the datepicker and clicking outside (which was giving errors also!). Here it goes:\nconst { input, className, meta: { error, touched }, required, ...rest } = this.props \nThe key is to NOT manually set the value prop of the DatePicker component  and to have the input prop removed from the destructured props usually sent in many examples to the component\n```\nhandleChange = (date) => {\n    this.props.input.onChange(moment(date))\n  }\n\n``` \nHere is the final Component:\n```\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport DatePicker from 'react-datepicker'\nimport { I18n, Translate } from 'react-redux-i18n'\nimport classnames from 'classnames'\nimport moment from 'moment'\nimport 'react-datepicker/dist/react-datepicker.css'\nclass DatePickerInput extends PureComponent {\nhandleChange = (date) => {\n    this.props.input.onChange(moment(date))\n  }\nrender () {\n    const { input, className, meta: { error, touched }, required, ...rest } = this.props\nreturn (\n  <div className={classnames('form-group', { 'has-danger': error })}>\n    <label className='form-col-form-label' htmlFor={input.name}><Translate value={`attributes.${this.props.i18nKey}.${input.name}`} /> {required ? '*' : ''}</label>\n    <DatePicker {...rest}\n      autoOk\n      className={classnames(className, { 'form-control-danger': error })}\n      dateFormat={I18n.t('time.formats.calendar-date-js')}\n      onChange={this.handleChange}\n      selected={input.value ? moment(input.value) : null} />\n    {touched && error && <span className='error-block'>{error}</span>}\n  </div>\n)\n\n}\n}\nDatePickerInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  input: PropTypes.object.isRequired,\n  i18nKey: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  required: PropTypes.bool\n}\nDatePickerInput.defaultProps = {\n  className: 'form-control',\n  required: false\n}\nexport default DatePickerInput\n```. @kotmatpockuh nothing, that is filled by redux-form when you use the custom DatePickerInput in my comment above as the component prop for the redux-form Field component. E.g.\n<Field name='date_field_name' component={DatePickerInput}  />. \n. @Randore what do you mean by targeting fields? About setting valid ranges of dates... check the available props https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md, i think you're looking for the endDate prop, which of course you will need to set dynamically since it's user defined.. @Randore The onChange method doesn't trigger change to all your DatePicker inputs at once, it just changes the individual DatePicker from where it runs when the user clicks a date in the calendar. Each DatePicker has its own instance of onChange. So selecting a date in the DatePicker startDate should not change the endDate DatePicker value. If what you're asking is how to programatically change a DatePicker value instead of being defined by user action, then you should dispatch an action that changes the input value. Redux-form comes with the handy action creator method change that you pass the formid, fieldname and value and does the dispatch for you. If this doesn't clarify things, please give an example of what you mean by using event.target.input to change individual fields with a code example or something of the sort. \nAs to your second question, that's a not-so-simple-but-yet-classical-validation. What you need to check is the redux-form client-side validation documentation. You just validate that the startDate < endDate, i don't see your issue there. You have access to startDate / endDate props either by storing the values in redux store or you can retrieve them from redux-form using one of the documented selectors like getFormValues, go ahead and re-check redux-form validation and selectors documentation. . @alex-shamshurin in my case i don't have the possibility to use it as a public method, since i can't use the \"ref\" property of the component to assign it to a variable and the use the setOpen. Can you add it as a property or is there any other way to express directly in the render of an outer component that the DatePicker should start opened by default?. @alex-shamshurin it's a little bit complicated to explain but basically,  i'm using riek library for inline editing (values in a visual table). I'm extending that library to support inline datepicker editing. My extension class is: \n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { RIEInput } from 'riek'\nimport moment from 'moment'\nimport DatePicker from 'react-datepicker'\nimport { I18n } from 'react-redux-i18n'\nimport 'react-datepicker/dist/react-datepicker.css'\nconst debug = require('debug')('RIEDate')\nexport default class RIEDate extends RIEInput {\nconstructor(props) {\n    super(props)\n  }\nstatic propTypes = {\n    format: PropTypes.func\n  }\n// ... More code here omited for simplicity...\nrenderNormalComponent = () => {\n    debug(renderNormalComponent())\n    return  \n      { this.props.format ? this.props.format(this.state.newValue || this.props.value) : (moment(this.state.newValue).format(I18n.t(\"time.formats.calendar_date_js\")) || moment(this.props.value).format(I18n.t(\"time.formats.calendar_date_js\"))) } \n    \n  }\nrenderEditingComponent = () => {\n    debug(renderEditingComponent())\n    return       disabled={ this.props.shouldBlockWhileLoading && this.state.loading }\n      placeholderText={ this.props.placeholder }\n      className={ this.makeClassString() }\n      selected={ moment(this.props.value) }\n      onChange={ this.elementBlur }\n      locale=\"es\"\n      **ref=\"input\"**\n      {...this.props.editProps }\n    />\n  }\n}\n```\nThis works by calling  renderEditingComponent() when clicking a date value on a table column, which makes an input appears on top of it. That would be the . Riek library needs the ref value of the input component be set as \"input\" so i can't really change it, otherwise it won't work or at least i will have to override bunch of methods. \nRight now, upon clicking the value to be editted, the input will appear but the calendar won't open until i click again so i have to click twice to edit it. \n. ",
    "krupatel": "I am facing the similar issue where i have date picker which opens up on a input file type. So it opens the file browser window if we select the date from the area exactly on top of input field.\nAny solution to prevent the event propagation ?. ",
    "lukastillmann": "bump\nI am having the same issue. Any solution would be very welcome!. ",
    "ishake": "I am also having this issue on the time picker portion of this.. ",
    "Kitloo": "Any solution? @@. ",
    "vincentwongso": "Event propagation is not passed if time-picker is enabled.\nSee the following example:\nhttps://codesandbox.io/s/2w4611793j. ",
    "balsamiqstefano": "Sorry, I can't figure out why the tests are failing.\nUncaught TypeError: (0 , _reactOnclickoutside2.default) is not a function\n  at /Users/stefano/projects/react-datepicker/test/index.js:34799 <- webpack:///src/year_dropdown_options.jsx:9:967\nThe code seems to work though.\n. Doh, of course!\nSo, ok, I tried bumping up the revision, but now a whole bunch of other tests fail. :-(\n. ",
    "valerybugakov": "Would be great to have this merged! \n. ",
    "plentz": "536. #536. duplicates #536.",
    "abhaytalreja": "I figured the problem was that i was using \nthis.state = {\n  startDate: new Date(),\n}\nI think we need to use\nthis.state = {\n  startDate: moment(),\n}\n. ",
    "SalTor": "Why does selected take moment.js date objects if moment usage in react-datepicker was meant to be phased out?. ",
    "itphixl": "Oh okay after some research I've found why. My bad, sorry for disturbing you :)\nPhiXL team.\n. ",
    "jtheletter": "Yes, in the short term, we'll likely do something like your latter suggestion. Just thought I'd mention the feature, however, for your consideration. Thank you. \n. ",
    "DanSallau": "@rafeememon i am actually using a date string .Please see my updated post above, my date is in a string format and comes through the props instead of a component state. IS there anyway i can make this awesome lib support the  string format like format=\"YYYY/MM/DD\" ? Thank you\n. ",
    "griffinmyers": "thanks @rafeememon!  Sorry I couldn't get my search query quite right to find this on my own. \n. ",
    "lgrapenthin": "This is why the picker being timezone agnostic highly irritates me:\n1. The component is supposed to let the user pick a calendar date, not a point in time. A calendar date is defined by Wikipedia as reference to a particular day within a Calendar system. \n2. Being able to pick a calendar date is the minimum requirement to any datepicker. Everything else, like adding daytime, casting timezones etc. can be done without a datepicker. If the datepicker also has such capabilities that is great, but it shouldn't make this minimum usecase anymore difficult. \n3. At the time react-datepicker makes this very difficult by forcing one to convert the picked date from the users local timezone back.\n4. Whether the fact that users pick dates in different timezones is relevant to the meaning of the date picked entirely depends upon on what kind of information that date is supposed to specify and as such should be library users choice.\nConsider a birthday - Daytime has no meaning in this context. You don't know in what timezone the user was born, just the one in which he tells you about it. Yet react-datepicker merges those two facts of which only one is desired information into one piece of data: A moment object set to the users birthday in the timezone he recited it. Why would I want this?\n5. I. e. consider user1 has picked his m1 in USA, user2 has picked his m2 in GER, both via react-datepicker - Only knowing each users local timezone allows me to determine the calendar dates those users meant when they picked them in the UI.\n. @rafeememon I am truly sorry if my comment offends you, which was not my intent at all. I haven't addressed you directly as my comment was not a direct response to yours. I have had time today to think about the issue more deeply and aside from improving the title I took a bit time to research the issue and provided additional arguments why the current default behavior can appear as highly irritating and an opt-out would be desired. Please consider those as a contribution instead of a lecture you were not asking for.\nI don't see why you'd want me to program something before it is agreed upon with the maintainer which I am not sure you are. I don't know how development of this tool is organized and as such I couldn't infer from your comment that it was to be understood as a feature decision and implementation request  - especially since you used the word probably. I am not a JavaScript programmer, instead using JS from a compile-to-JS language via interop so I leave writing quality JavaScript to those who are capable of it. \nCertainly I am not here for sympathy but instead because I value this tool and wish to help improving it. Please consider my comments here as my main contribution so far.\nAltering global defaults affects other codes behavior, so it is not a viable workaround to me. I believe the only workaround at the time is to manually calculate the difference to the users timezone and adding it back.\n. ",
    "cshanejennings": "If I understand the workaround correctly, I'm not getting the results I was expecting.\nconst rightNow = new Date().getTime(); // run at ~2:30pm EST == 1472668275653\nconst startTime = moment.tz(rightNow, \"Australia/Melbourne\");\nreturn (\n    <DatePicker\n        className=\"form-control\"\n        dateFormat=\"YYYY-MM-DD\"\n        selected={ startTime }\n        onChange={ this.handleDateChange }\n    />\n);\nI'm still getting today's date, when I should be getting tomorrow when setting the timeZone to \"Australia/Melbourne\" (It's currently ~4:30 am there right now).  Is this more or less the recommended path?  Am I missing something?  Really don't mind workarounds, just feel like I've wandered off the reservation a bit and would love a suggestion.\nEDIT:  Correction, it works... sort of.  If I trigger the calendar view by selecting the text component, then it will highlight the correct date without me selecting it.  After de-focusing the control, the text field will display the correct date and everything seems to work fine.  You might already have a solution here with a small state problem at initialization.  Let me know if I can be of any help.\nANOTHER EDIT  A little further down the rabbit hole:\nIf I add the following code in my parent component where the date picker has a ref of dateRow:\ncomponentDidUpdate() {\n        this.refs.dateRow.refs.input.focus();\n        setTimeout(() => {\n            this.refs.dateRow.handleInputDone();\n        }, 0);\n    }\nAnd I change the timezone from UTC to Melbourne's I can click anywhere (including outside the browser window itself) and the date will update as expected. I tried running the module locally using npm link, but I ran into a lot of issues with hot loading and my current project so I was unable to troubleshoot with the code on my machine.\nFrom there I shortened the componentDidUpdate function to the following and everything seems to work:\nTHIS WORKS\n```\ncomponentDidUpdate() {\n    this.refs.dateRow.refs.input.handleBlur();\n}\nrender() {\n    const rightNow = new Date().getTime(); // run at ~2:30pm EST == 1472668275653\n    const startTime = moment.tz(rightNow, \"Australia/Melbourne\");\n    return (\n        \n    );\n}\n```\n. ",
    "ewittle": "Thank you all, this was annoying the *** out of me. I like the behavior much better now.. ",
    "m-salamon": "Im using react-datepicker\": \"^0.49.0\"\nand on the todayButton={\"Today\"} im still getting yesterdays date.. this fixes the issue for me moment(date).utcOffset(0). ",
    "dbyzero": "I share my \"fix\" here:\nMy goal was to keep current datepicker behavior (work in UTC is nice) and change only when date is push to other services (a cassandra database for me).\nTo convert date to user wishes, I have to move date as below : \nlet utcOffsetMinute = moment().utcOffset();\ndata.companyBirthDate.add(utcOffsetMinute, 'minutes').utc();\nIf user select 2012-01-10 at GMT+2, react-datepicker will store 2012-01-09T22:00:00Z. I'll change value to 2012-01-10T00:00:00Z before storing it.. ",
    "geirsagberg": "Can confirm that the latest version gives yesterdays date for timezones east of GMT.. @martijnrusschen Can you reopen this?. ",
    "stevengoldberg": "That was it! There are SVG elements on the page, and I was able to reproduce the error locally by opening the datepicker and then clicking inside an SVG.\nAdding the DOM4 shim fixes the error. This classList shim, which I tried first, didn't solve the SVG issue for some reason.\n. FWIW the MDN code is the same one I linked to, by @eligrey. Not sure why it didn't solve the problem -- the shim loaded, but classList still didn't exist on the SVGElement prototype.\n. ",
    "gor181": "I have just tried on 0.28.0 and it works without issues.\n@rafeememon keep in mind that date format should be uppercase for moment to parse it as 'DD/MM/YYYY' or similar. Check moment docs for format options it accepts.\n. ",
    "syam1123": "Nowhere in the demo it's showing the format of 'DD/MM/YYYY'\nFor me also when I'm giving format 'DD/MM/YYYY', it's automatically changing to 'MM/DD/YYYY' and suppose if I'm selected '23/05/2016', it's changing to '05/23/2016' and suddenly to 'Invalid date'.\n\nhere is the code:\n<DatePicker {...input}  dateFormat=\"DD/MM/YYYY\" className=\"form-control\"\n              fixedHeight\n              selected={selectedDate}\n              isClearable={true}\n              showYearDropdown />. ",
    "ehkasper": "@martijnrusschen Sure. It is there.\n. @rafeememon I understand you concern. CDNJS has enabled autoupdate (Check the badge at the top). The only thing to change as a new tag comes in is this README with the version (currently is the 0.27 one).\nMake sense?\n. No need. The only info to be changed in every release is the version on README. For instance, the URL is https://cdnjs.cloudflare.com/ajax/libs/react-datepicker/0.27.0/react-datepicker.css. When updating to 0.28 you should also update the URL in the README to https://cdnjs.cloudflare.com/ajax/libs/react-datepicker/0.28.0/react-datepicker.css.\n. sounds good. What about this message:\n```\nCDN\nThe folks at CDNJS graciously provide CDN support for React Datepicker's CSS and JavaScript: https://cdnjs.com/libraries/react-datepicker\n``\n. @ankibalyan did you includehttps://cdnjs.cloudflare.com/ajax/libs/react-datepicker/0.41.1/react-datepicker.min.js` or any other versions?. @sfentress I suppose your jsfiddle isnt handling requirejs properly. Have a look here: https://codesandbox.io/s/k5Onp9xjN. You can see the CDN dependency in the left. I use it in prod, btw. @justinbc820 I suppose these dependencies should be handled individually in each project. The CDN only includes the react-datepicker bundle.. Hey folks! Im pretty sure there was a discussion here lol \nHave you removed last comments?\n. oh, shit. Sorry :shipit: \n. Hey, please have a look at the updated message. I think it's pretty simple, just to let people know they can link this project's resources w/o npm installing it. Makes it easy to test features, hello worlds and so on.\n. @avindra as long as I know it's a good idea to commit .lock files so installation is deterministic. See gemfile.lock in ruby, composer.lock in PHP, etc.. @avindra great point! I havent thought of it this way. Makes sense, but i need to read further. Many thanks on your response :). Just to add info on top of this: https://yarnpkg.com/en/docs/yarn-lock#toc-check-into-source-control. Yarn only checks the top level, so libs should include it.. ",
    "damlu": "Hmm, maybe instead of having the resource URLs in the README which need to be updated every version, you could just link to the CDNJS library page, which looks to have auto-updated resource URLs: https://cdnjs.com/libraries/react-datepicker\nThat way people can access the up-to-date resource URLs without any additional work required by Martjin et al.\n. Thanks Martijn. I went ahead and updated the docs and examples, then rebased and squashed.\n. No worries! I'll have a go at it tomorrow. \n. Okay, rebased and fixed the patch coverage. Took the highlightDates parameter out of date_input.jsx as it wasn't actually doing anything there, and so wasn't testable.\n. My bad! Reverted that file and updated.\n. ",
    "ankibalyan": "@ehkasper \nAfter including the lib from CDN, ReferenceError: DatePicker is not defined in plunker.\nHow to define that?. ",
    "sfentress": "@ehkasper Is there an example of this working from the CDN build?\nI tried to make a simple example here: https://jsfiddle.net/6bhhqrwd/, (forked from a working React example https://jsfiddle.net/reactjs/69z2wepo/), which includes react, moment, and the react-datepicker css and js files, and I get the error\n    Uncaught TypeError: (0 , _reactOnclickoutside2.default) is not a function\n        at Object.module.exports (react-datepicker.js:1003)\n        at __webpack_require__ (react-datepicker.js:30)\n        at Object.module.exports (react-datepicker.js:573)\n        at __webpack_require__ (react-datepicker.js:30)\n        at Object.defineProperty.value (react-datepicker.js:65)\n        at __webpack_require__ (react-datepicker.js:30)\n        at Object.defineProperty.value (react-datepicker.js:50)\n        at react-datepicker.js:53\n        at webpackUniversalModuleDefinition (react-datepicker.js:9)\n        at react-datepicker.js:10\n    fiddle.jshell.net/:4 Uncaught ReferenceError: DatePicker is not defined\n        at eval (eval at transform.run (browser.js:5811), <anonymous>:4:37)\n        at Function.transform.run (browser.js:5811)\n        at exec (browser.js:5866)\n        at runScripts (browser.js:5903).\n",
    "justinbc820": "@ehkasper Looking at the webpack.config.js for your project, you have react-onclickoutside listed as an external dependency, so it's not being built into your final webpack bundle. Is that expected behavior?\nYou specify that react and moment are not built into the project, but don't mention anything about react-onclickoutside.\nThanks. ",
    "ranjan653": "If i click on the first text box date picker comes, and if click on the second text box the first date picker does not hide\n.  onClickOutside: this.handleCalendarClickOutside, \nthis method invokes but unable to close the date picker \nhandleCalendarClickOutside: function handleCalendarClickOutside(event) {\n        this.setOpen(false);\n      },\nit always returns true. Please help me how to close the date picker on click outside\n. hi @rafeememon  could you plz help me out\n. hi  , is there any one who can help me out\n. hi each time this method call s\nhandleBlur: function handleBlur(event) {\n        if (this.state.open) {\n          this.refs.input.focus();\n        } else {\n          this.props.onBlur(event);\n        }\n      },\non click datepicker and outside datepicker\n. ",
    "chadwilken": "Im also getting this, if you select a value, then reselect the same box but now attempt to click into another input field. It will change the focus back to the date selector and open the calendar.. ",
    "mrchief": "@ranjan653 Please take a moment to format your messages. Its hard to read through code and messages all mixed up.. onChangeRaw doesn't fire even in v1.1.0.. This seems like a bug at this moment. Per the documentation, one needs to set both minTime and maxTime. But doing so disables all the time fields.\n```\nconst now = moment().tz('America/New_York')\n...\n        \n```\nToday's date\n\nTomorrow's date\n\n. I think you're right. Maybe my test would work if it was a regular html input. For now, your approach is as good as any! :+1: . I'm seeing this on dekstop as well.. ",
    "opusrocks": "The issue I see, which might be the same issue,  is that when you click into the input field, the datepicker is displayed. But the only way to hide the datepicker is to select a date -- if you click or tab out of the input field, the datepicker remains visible. Firefox 46.0.1\n. No, I don't see the issue on the demo site. No errors logged to the console.. Hmm, I will have to troubleshoot more\n. ",
    "filipalacerda": "I believe I have the same problem.\nThe datepicker does not close when I select a date or on blur. It changes the selected date but the calendar stays open. \n``` javascript\nimport DatePicker from 'react-datepicker'\nimport moment from 'moment';\nconstructor(props) {\n  super(props);\nthis.state = {\n    selectedDate: moment()\n  };\n}\nhandleChange(date) {\n  this.setState({selectedDate: date});\n}\nrender() {\n  return (\n    \n  );\n}\n```\nAnd I have several warnings regarding missing props, but according to the docs the only two props I need are selected and onChange.\nWarning: Failed propType: Required prop `attachment` was not specified in `TetherComponent`.\nUncaught TypeError: this.props.onFocus is not a function\nWarning: Failed propType: Required prop `dateFormat` was not specified in `Calendar`. Check the render method of `DatePicker`.\nTether Error: You must provide an attachment\nUncaught TypeError: this.props.onBlur is not a function\nI have the following versions:\n\"moment\": \"^2.13.0\"\n\"react\": \"^15.0.2\"\n\"react-datepicker\": \"^0.27.0\"\n. @rafeememon I did that and I have the same problems. \n. My bad, I created the project from scratch and all the problems are gone!\nSorry!\n. @njj all I did was a clean install like suggested by @rafeememon and it worked. Have you tried that?\n. ",
    "cristiango": "@rafeememon I've opened that issues a couple of times an read an re-read it over. Not even sure if fixing the UTC problem will solve this problem\n\nYou are in UTC+2 and want to select today in UTC-9.\n\nThe fact that the controls show information about today make is zone dependent\n. Yes indeed adding UTC flag will make more sense in the long run.\n. @rafeememon what do you think about the new solution?\n. I think this is because of this\nhttps://github.com/Hacker0x01/react-datepicker/blob/master/src/date_utils.js#L5\nThis is because moment.utc().isSame(moment.utc().utcOffset(xx), 'day') returns always true\nSo i think the function isSameDay doesn't work properly in this specific case. ",
    "deammer": "This would be wonderful to have :)\n. ",
    "alextkachuk": "@rafeememon In my view, the best quick solution is setting opacity: 0.x (for example) for days are not in the current month and add my changes (fixed calendar).\nOption for fixed or not is not good approach because in this case - not fixed mode will have a strong bug. For example, now I can't use react-datepicker in my current project because some modal window needs only top-view calendar and this bug my users found in production.\nOn the other hand, if popover position will fix in short period it would be great and in this case option for fixed/not fixed would be additional sugar :-)\n. @rafeememon It makes sense, but now react-datepicker has the serious bug. The solution needs to change the tether library - it could be a long process. Can I add the option \"isCalendarFixed\" (or give me another name) and implement this optional logic? I think, anyway this option would be useful.\n. @rafeememon Yes, sure.\n. @rafeememon Done\n. @rafeememon - ok\n. @rafeememon I'm agree, done. Good notice! :+1: \n. ",
    "mattjstar": "@preacher2041 you can get rid of the keyboard by setting a readOnly prop to true.\nI'm also having the issue though where when scrolling sometimes the calendar disappears. When looking at the DOM, the class name react-datepicker-ignore-onclickoutside on the child input prop gets removed sometimes on scroll. \n. ",
    "skywickenden": "+1 This is a problem on mobile.. ",
    "jkowens": "+1 If the date input lost focus when tapping outside, I think that would resolve the issue. I can't figure out a way to force that to happen tho.. ",
    "skinread": "This still seems to be an issue: on any touch event outside of the input field or date picker, the calendar is hidden, even if only a swipe event and focus remains on the input. \nMobile users are unlikely to see the full calendar in viewport, especially when keyboard is open, so makes it extremely difficult to use.\nAny opportunity to address this one after all this time? . ",
    "MedianHansen": "I made a fix for this and is sending in a pull request.. ",
    "sanderlenaerts": "Any idea if they plan on merging and releasing this? I see your PR has some merge conflcits. @MedianHansen . ",
    "pvolodymyr": "@Hacker0x01 Hi, the issue is still here, when it could be fixed?. ",
    "jaredsohn": "Sorry, wrong base fork (meant to make a pr to our fork.)\n. ",
    "sophiebits": "As the gist says, you want to change DateInput to \"consume\" the props it uses instead of blindly spreading all of them onto the input tag.\nhttps://github.com/Hacker0x01/react-datepicker/blob/8da6d8a6f2964fce814a19d594648c25f1e6c44e/src/date_input.jsx#L89\n. ",
    "gaearon": "This is problematic because you\u2019re forwarding props that only make sense to your component (e.g. date) to the <input> component that doesn\u2019t know what to do with them. In future versions of React we plan to pass such props \u201cthrough\u201d without the whitelist, so we ask that you don\u2019t forward props that don\u2019t make sense to the underlying components anymore.\nHere is the code today:\njs\n    return <input\n        ref='input'\n        type='text'\n        {...this.props}  <----------- can be anything! not good.\n        value={this.state.value}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange} />\nyou might have something like\n``` js\n    const {\n      date, dateFormat , excludeDates, filterDate, includeDates, locale,\n      maxDate, minDate, onBlur, onChange, onChangeDate,\n      ...rest\n    } = this.props;\nreturn <input\n    ref='input'\n    type='text'\n    {...rest} <------------------ we know for sure we aren't passing any DateInput's props\n    value={this.state.value}\n    onBlur={this.handleBlur}\n    onChange={this.handleChange} />\n\n```\nAlternatively you may encourage users to pass a prop called inputProps separately, and apply it instead:\njs\n    return <input\n        ref='input'\n        type='text'\n        {...this.props.inputProps}\n        value={this.state.value}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange} />\nOr you can maintain a custom whitelist if you\u2019d like to:\njs\n    return <input\n        ref='input'\n        type='text'\n        className={this.props.className} <-----\n        style={this.props.style} <-------------  for example, could pass just these props\n        value={this.state.value}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange} />\n. > I like the variant with ...rest, but sadly you'll get an eslint warning about variables, being not used.\nYou can file this as an issue with ESLint. With the spread operator destructuring, I feel like this isn\u2019t quite fair to call it unused.\nGenerally, if there is a pattern that works great to solve a pattern, you shouldn\u2019t give up on it just because \u201cESLint says so\u201d. ESLint is built by humans and can be wrong \ud83d\ude09 . And in any case you can override any rule in your config, or propose changes to popular configs.\nThat said, instead of \njs\nconst { a, b, c, ...rest } = this.props\nyou can do\njs\nconst rest = {...this.props} // or Object.assign({}, this.props) but don\u2019t forget the polyfill\ndelete rest.a\ndelete rest.b\ndelete rest.c\n\nIt would be definitely great, if all components could export their valid props, so we could use sth like: pick(this.props, Component.props)\n\nTo me, this sounds a bit like a over-abstraction. I don\u2019t think we\u2019d like component authors to do something like this.\n. > It's similar to what @gaearon just suggested but maintains immutability (not calling delete) and is more functional.\nThere is no problem with immutability in my suggestion. I suggested making a shallow copy first, so deleteing from that copy is fine.\n. Yea they are certainly scary looking \ud83d\ude04 \n. If you're concerned about spread syntax and ESLint warnings, just use the delete way of solving this. It is described in the link that the warning mentions. Please don't introduce custom \"HTML whitelists\".\n. ",
    "vladshcherbin": "I like the variant with ...rest, but sadly you'll get an eslint warning about variables, being not used.\n. @tricoder42 yes, but you are loosing an option to let user define some props later (className, onClick, etc). Probably _omit or similar will be better.\nAnyway, there are a lot of ways to do this, I'm just not sure which to pick.\n. There is already an Eslint issue, but it won't be addressed until Rest/Spread Properties would progress to higher stage.\n. ",
    "tricoder42": "@VladShcherbin If you aren't going to use all variables, you could use pick from lodash or similar function:\njs\n<input {...pick(this.props, ['value', 'onChange', ...])} />\n. @VladShcherbin I guess you should define all props, that are valid for input\nelement. Might be useful to export them as constant InputProps and use them is such scenarios.\nIt would be definitely great, if all components could export their valid props, so we could use sth like: pick(this.props, Component.props)\n. ",
    "benmvp": "We've run into this exact problem at Eventbrite.\nWe first started with the ...rest, but as @VladShcherbin pointed out it results in ESLint warnings because you have to define variables you ultimately aren't going to use in order for rest to contain the properties you expect.\nPersonally, I think this is a valid ESLint warning because you are declaring variables you aren't using. Our solution is just like @VladShcherbin's second suggestion to use _.omit. Those variables that would result in ESLint warnings because we aren't use them, we pass to _.omit to filter down rest even further:\n``` js\nlet {usedA, usedB, usedC, ...extraAttrs} = this.props;\nlet propsToSpread = _.omit(extraAttrs, ['unusedD, unusedE']);\nreturn (\n    \n);\n```\nHopefully that gets the point across. It's similar to what @gaearon just suggested but maintains immutability (not calling delete) and is more functional.\n. > There is no problem with immutability in my suggestion. I suggested making a shallow copy first, so deleteing from that copy is fine.\nMy bad @gaearon. You're totally right. I saw the delete statements and couldn't see anything else hahaha\n. ",
    "santomegonzalo": "any update about this warning? \nThis is my solution...\n``` javascript\n  render () {\n    const __pick = function(current, arr) {\n      var obj = {};\n      arr.forEach((key) => {\n        obj[key] = current[key];\n      });\n      return obj;\n    };\nconst inputProps = [\n  // HTML attributes\n  \"className\",\n  \"disabled\",\n  \"readOnly\",\n  \"placeholder\",\n  // Event listeners\n  \"onFocus\",\n  \"onClick\",\n  \"onKeyDown\",\n];\n\nreturn <input\n    {...__pick(this.props, inputProps)}\n    ref='input'\n    type='text'\n    value={this.state.value}\n    onBlur={this.handleBlur}\n    onChange={this.handleChange} />\n\n}\n```\nand it's working great...\n. ",
    "darcyadams": "Adding a new dependency on lodash or underscore seems like overkill. To me this is eslint run amuck. Unused variables are a linting rule because they serve no purpose. Here they have a very specific purpose. \nI also think maintaining whitelisted input props is no good. All you are doing there is recreating the exact approach React has decided is the wrong one. \nIMHO, the best solution is to fix the linting rules so the build does not fail due to unused variables, and go with @meggantodd's solution in #522.\n. @tleunen - Minifier removing the vars would not be an issue, ES5 output looks like this...\n``` js\nvar _props = this.props;\nvar date = _props.date;\nvar locale = _props.locale;\nvar minDate = _props.minDate;\nvar maxDate = _props.maxDate;\nvar excludeDates = _props.excludeDates;\nvar includeDates = _props.includeDates;\nvar filterDate = _props.filterDate;\nvar dateFormat = _props.dateFormat;\nvar onChangeDate = _props.onChangeDate;\nvar rest = _objectWithoutProperties(_props, ['date', 'locale', 'minDate', 'maxDate', 'excludeDates', 'includeDates', 'filterDate', 'dateFormat', 'onChangeDate']);\n```\nThis would actually be beneficial... the rest variable would remain, since it gets used.\n. @rafeememon, thanks for the quick reply, but this broke my build, which does a clean npm install every time. FYI, I'm using Webpack 1.x and npm 2.x. thanks again, that info is much appreciated. Upgrading npm is on our to-do list, so I guess it just got a bump up the priority list. This is the first time we have encountered a module that has broken compatibility with npm 2. \n. ",
    "tleunen": "At the same time, if you run a minifier and remove unused variables, you'll get warnings again. So omitting the props you don't want to pass looks like the only way to go :/\n. ",
    "avk": "@AdamKyle this is a standard React error. The stack trace in console should help you see which component the setState call is coming from.\n. ",
    "omgaz": "LGTM \ud83d\udc4d \n. ",
    "flyalex": "thanks for this fix! \n. ",
    "Inlesco": "Same issue. The datepicker props documentation is lackluster, no examples, only types mentioned. For renderCalendarTo, type is 'Any', so with no examples provided it's basically useless.\nI'd like to ask: if react-datepicker is wrapped with another component, why the calendar is still appended to document.body, but not the wrapper / parent component by default? It'd make sense, especially for Unit tests as you could simulate clicks on the calendar because it's in as a child, etc.\nsadpanda.jpg\n. ",
    "dimafeldman": "@leojh have you found the solution for that? I'm struggling with the same issue\n. ",
    "sebastiandedeyne": "Also can't seem to render the tether component anywhere else than the body\n. ",
    "dbenfouzari": "Same here,\nCan't seem to render the component anywhere else than the body, event when trying to give a DOM element to renderCalendarTo as we can see in sources.\nPlease help !\n. ",
    "JoakimLofgren": "It actually expects a DOMNode.\nSetting a react ref to renderCalendarTo worked for me.\nYou might need to trigger a re-render using state to indicate that you've gotten the ref'ed element.\nI can provide a example if needed in a gist.\n. ",
    "mahammedzkhan": "@JoakimLofgren Can you provide a gist please? I've tried it like this:\n<div ref=\"test\" ></div> and then as a property to the datepicker: \nrenderCalendarTo={this.refs.test} => that didn't work\n. ",
    "avindra": "Any ideas why renderCalendarTo is null using the following?\njs\nfunction Wrapper() {\nlet mountNode = null;\nreturn <div ref={e => mountNode = e} >\n    <DatePicker\n      renderCalendarTo={ mountNode }\n    />\n  </div>\n}\nReact panel in Chrome:\n\nUsing React 15.4.0 and react-datepicker 0.34.0\nFurthermore, does anyone have a code-complete example of mounting the calendar to nodes other than document.body?. Our specific use case is to use react-datepicker, but while using css in a modular, non-global fashion with styled-components. It's really hard to solve this problem if renderCalendarTo is busted.. Found out the real issue, which is this:\n\nNever access refs inside of any component's render method \u2013 or while any component's render method is even running anywhere in the call stack.\n\nhttp://reactjs.cn/react/docs/more-about-refs.html#cautions\nBasically, the ref is undefined at the time of rendering. So as @JoakimLofgren mentioned above https://github.com/Hacker0x01/react-datepicker/issues/520#issuecomment-257944098, you can use a combination lifecycle hooks and/or state to only pass the ref when it is actually calculated.. Any feedback for this?\nNot sure if Yarn.lock should be there but the rest looks good. It should only be done if absolutely necessary. Lock files are great for apps (you want deterministic builds there), but I can't think of a case where this makes sense for a library. Otherwise, libraries are dictating to apps exactly what versions of their dependencies should be bundled, which goes too far, imho. ",
    "va20ych": "JoakimLofgren, thanks for suggestion, but it's not working for me. I did the following: inside componentDidMount handler I called setState with proper ref filled and inside render method this ref is taken from state and passed via renderCalendarTo prop. Render was called once again but markup of calendar stayed in the end of body as previously. \nWhat should I do to make this work? Or it's a bug related to 'react-datepicker' implementation?. ",
    "sebastiandeutsch": "I've managed to get it work by enhancing my component state with a field:\nrenderTo: null\nthen I've added a componentDidMount callback:\ncomponentDidMount() {\n  this.setState({ renderTo: this.refs.calenderTarget });\n}\nMy <DatePicker> will be called with the following property:\n...\nrenderCalendarTo={this.state.renderTo}\n...\nand then the Calender will be rendered inside the div.\n. I've update to the latest version and now I have the problem too. Did @supster @raulrene @charliehavak found a solution?. @obartra do you need any helping hands with this one? I've seen that you transitioned all the classes in your fork. Anything else to do?. Awesome! I'm using transform-class-properties in my projects too - but eventually @Hacker0x01 has to decide. Ping me if you need help with tedious tasks like putting the binds in the constructor in countless classes :-). @obartra if you want to get rid of all deprecation warnings you'll need to update react-onclickoutside to 5.11.1.. ",
    "charliehavak": "I debugged this feature and found that although setting the renderCalendarTo prop to a valid element, it will still render to document.body. \nFrom what I saw, the first rendering works well (i.e attached to the provided element) but the second falls back to body. This effectively renders to body. \nSomething in the internal logic does  not to work well.\nI believe that a dedicated style prop for the calendar is the right approach.\n. ",
    "raulrene": "@sebastiandeutsch I've tried the exact same thing and although the input gets rendered in my ref element, the calendar component is still rendered in the body directly. @sebastiandeutsch I've tried for at least 2 more hours and gave up. I needed only the calendar, not the datepicker input functionality, so I ended up writing my own calendar multi datepicker component in less than 3 hours.. ",
    "supster": "I have a similar problem.  I was able to get renderCalendarTo to work by using @sebastiandeutsch's approach.  However, when I use the same component in a modal that has position: fixed, the calendar always render into the body.  If I removed position: fixed from my modal css, the calendar would render correctly.\nAny idea on how to fix this?  I thought it could be because of TetherComponent, but even if I tried to implement the modal using Tether, the problem still persists.. ",
    "meggantodd": "Closing because of the eslint failure.\n. ",
    "afilp": "Is there  a way to do so? Thanks!\n. You are right! It was meant for a different repo ('react-date-picker), I apologize.\n. ",
    "thangaduraicse": "@rafeememon - Kindly Let us know whether above issue is resolved in current release or if this issue is resolved only in next release then please let us know date for next release?\n. @martijnrusschen: Client ask is to update that fix immediately. If you release the next version, this 'll be helpful for us.\n. @martijnrusschen @raffeememon Thank you.. :)\n. ",
    "vetri50ster": "@rafeememon - we are using the same plugin in our project. we are also facing same defect.Please let us know solution for this defect.\n. ",
    "tsteele2013": "I'm having this issue also. Using v0.41.1\nThe following code still opens to today's date. Any ideas?\n<DatePicker\n  selected={moment(Application.ExpectedRetDate).isValid() ? moment(Application.ExpectedRetDate) : null}\n  onChange={value => {\n    this.setState({ touched: Object.assign(touched, { ExpectedRetDate: true })});\n    Application.ExpectedRetDate = value ? value._d : null;\n  }}\n  openToDate={moment('1993-09-28')}\n  onBlur={value => this.setState({ touched: Object.assign(touched, { ExpectedRetDate: true })})}\n  minDate={Authentication.user.eligible_date}\n  maxDate={moment().add(5, \"years\")}\n  disabled={disabled}\n  fixedHeight\n  name=\"ExpectedRetDate\"\n  id=\"FormDatePicker\"\n  placeholderText=\"Select Date\"\n  className='form-control'\n/>. ",
    "kaylie-alexa": "Sure, you can try using Mac VoiceOver tool or get the WAVE Chrome extension. It'll notify to the screen reader that they're inside a list box and read out the options, like below:\n\n\nIf we do add the month, it can get a bit nosy - I'm sure there can definitely be other improvements though!\n. Thanks for asking! I actually originally thought it should be a label associated with a unique ID, but realized that there would be duplicates so went with aria-label instead, which provides more of a description. On the other hand, the roles are for semantic purposes, and elements with option roles are required to be within a listbox role to mark them as a group of available choices.\n. ",
    "TryingToImprove": "Is there any reason why this is not merged other than failing css lint? I am needing this for a datepicker for birthdates, and clicking the arrow is to slow..\n. ",
    "borm": "<CustomInputComponent onClick={ this.props.onClick } .... \nadd toggle Visibility calendar\n. up\n. <DatePicker dateFormat=\"MMM Do YY\" selected={moment()} />\n. ",
    "forum-is": "I've added a simple test. Somehow my first commit was missing some lines that my GitHub client appears to have swallowed...\n. ",
    "jasonmullins": "Has this PR been published to npm?\n. ",
    "averted": "Related to #488 \n. Changed ev everywhere in PR into event.\n. ",
    "FND": "Actually, this doesn't seem to suffice - injecting a temporary workaround for react-datepicker v0.28.2\u2026\nhtml\n<script src=\"react-onclickoutside.js\"></script>\n<script>\nwindow.OnClickOutside = window.onClickOutside;\n</script>\n<script src=\"react-datepicker.js\"></script>\n<script src=\"bundle.js\"></script>\n\u2026 results in\n\nUncaught Invariant Violation: ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.\n\nThat error disappears if I use onClickOutside.prototype instead - but that wouldn't help with the webpack configuration being used here, so I'm not sure how to address this properly.\n. ",
    "jbdeboer": "FYI: This issue is preventing my company from adopting react-datepicker. :-<.\n. ",
    "salmankhann": "This is how it looks. FYI you tagged the wrong guy \ud83d\ude06 \n\n. ",
    "dayAlone": "Done.\n. ",
    "gregorydrake": "You could wrap the DatePicker element so that it can be used as a component on \"Field\".\n```\nconst renderDatePicker = ({input, placeholder, defaultValue, meta: {touched, error} }) => (\n  \n\n        {touched && error && {error}}\n  \n);\nexport default renderDatePicker\n```\n. ",
    "delijah": "Thanks for your response. That's what i did. But if react-datepicker would support redux-form in the core that would be awesome!\n. Since this topic is not going anywhere, i'll close it.. Yes, but it is not recommended to use ReactDOM.findDOMNode. I would prefer a more appropriate way of doing this.. Passing up the dom node to the parent component would be the recommended way how i understand this: https://facebook.github.io/react/docs/refs-and-the-dom.html#refs-and-functional-components. ",
    "mistadikay": "I personally don't think reusable components like react-datepicker should support redux-form or similar out of the box \u2014 they should have a bare minimum functionality. Also it's not really a big deal to wrap this component as it was pointed above.. ",
    "idoo": "but it's good idea to move this snippet to wiki ;). doesn't works well for me with changes from https://github.com/Hacker0x01/react-datepicker/issues/1363#issuecomment-393509873 and https://github.com/Hacker0x01/react-datepicker/issues/1363#issuecomment-393826761. @ahmadalfy do you have any ideas how to validate it on field level? for example \u2014\u00a0required. @ahmadalfy I mean that one https://jaredpalmer.com/formik/docs/guides/validation#field-level-validation. so, would be nice to have such attribute somehow, or combine that datepicker with formik fields. ",
    "thangchung": "@gregorydrake Thanks. You are saving my life \ud83d\udc4d . @josiahsprague thanks a lot \ud83d\udc4d . ",
    "vedran-milic": "This part of code is not working properly selected={input.value ? moment(input.value) : null}. Locale is broken with this. Format \"DD/MM/YYYY\" is not working. Moment is displaying warning Deprecation warning: value provided is not in a recognized ISO format.. Manual input is not working.. ",
    "Meesam": "getting Datepicker not defined error\n. ",
    "dyadav123": "You need to import the Datepicker component from the node modules ( if you installed through npm install ) , typically ---  import DatePicker from 'react-datepicker';. ",
    "danyim": "Posting this here in case it helps anyone else. In my use case, I had issues with the datepicker trying to insert a moment.js date string into input.value instead of the format I wanted.\n```jsx\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport DatePicker from 'react-datepicker'\nimport moment from 'moment'\nimport 'react-datepicker/dist/react-datepicker.css'\nclass renderDatePicker extends React.Component {\n  static propTypes = {\n    input: PropTypes.shape({\n      onChange: PropTypes.func.isRequired,\n      value: PropTypes.string.isRequired,\n    }).isRequired,\n    meta: PropTypes.shape({\n      touched: PropTypes.bool,\n      error: PropTypes.bool,\n    }),\n    placeholder: PropTypes.string,\n  }\nstatic defaultProps = {\n    placeholder: ''\n  }\nconstructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\nhandleChange (date) {\n    this.props.input.onChange(moment(date).format('YYYY-MM-DD'))\n  }\nrender () {\n    const {\n      input, placeholder,\n      meta: {touched, error}\n    } = this.props\nreturn (\n  <div>\n    <DatePicker\n      {...input}\n      placeholder={placeholder}\n      dateFormat=\"YYYY-MM-DD\"\n      selected={input.value ? moment(input.value, 'YYYY-MM-DD') : null}\n      onChange={this.handleChange}\n    />\n    {touched && error && <span>{error}</span>}\n  </div>\n)\n\n}\n}\nexport default renderDatePicker\n```. ",
    "aikidoshi": "Brilliant, thanks danyim!\nUsed like this (import renderDatePicker):\n                        \nI'm finding the placeholder is ignored but otherwise works fine with Redux Form.. ",
    "viiiprock": "@danyim\nI still got 2 issues \n1.  \"Invalid date\" issue when clear the input field.\n2. Cannot clear input by using Delete keyboard nor select more than 1 number to change value via typing.\n. ",
    "Abhijeetjaiswalit": "To avoid 'Invalid date' error try following on onChange : \nhandleChange(date) {\n    if (date._d) {\n      this.setState({\n        startDate: date,\n      });\n    }\n    else {\n      this.setState({\n        startDate: '',\n      });\n    }\n  }\nalong with : \nreturn (\n            <div className={className}>\n                <DatePicker\n                    dateFormat={field.dateFormat}\n                    maxDate={field.maxDate}\n                    selected={field.selected ? moment(field.selected, field.dateFormat) : null}\n                    onChange={field.input.onChange}\n                    placeholderText={placeholder}\n                    isClearable={true}\n                    showMonthDropdown\n                    showYearDropdown\n                    scrollableMonthDropdown\n                    scrollableYearDropdown\n                />\n                <div className=\"help-block help-block-error\">\n                    {touched ? error : ''}\n                </div>\n            </div>\n        ). ",
    "cpaulit": "@viiiprock \nDid you resolve your item 2 issue listed above? \n\nCannot  clear input by using Delete keyboard nor select more than 1 number to change value via typing).\n\nI'm having the very same issue.  I'm using the following code:\n<DatePicker \n        {...input} \n        dateFormat={dateFormat} \n        placeholderText={label} \n        selected={input.value ? moment(input.value, dateFormat) : null} \n        onChange={this.handleChange}/>\nIf I remove the {...input}, the issue goes away.  Of course, I also lose my FOCUS and BLUR redux-form actions as well.  . ",
    "winlx": "If you need to use it with i18n and edit field with delete and backspace keys, than don't use {...input}. I'm using it like this:\n```javascript\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport default class renderDatePicker extends React.Component {\n  static propTypes = {\n    input: PropTypes.shape({\n      onChange: PropTypes.func,\n      value: PropTypes.string,\n    }).isRequired,\n    meta: PropTypes.shape({\n      touched: PropTypes.bool,\n      error: PropTypes.string,\n    }).isRequired,\n    inputValueFormat: PropTypes.string,\n  };\nstatic defaultProps = {\n    inputValueFormat: null,\n  };\nstate = {\n    selectedDate: null,\n  };\ncomponentWillMount() {\n    if (this.props.input.value) {\n      this.setState({\n        selectedDate: moment(this.props.input.value, this.props.inputValueFormat),\n      });\n    }\n  }\nhandleChange = (date) => {\n    this.setState({\n      selectedDate: date,\n    });\nthis.props.input.onChange(date);\n\n}\nrender() {\n    const {\n      meta: { touched, error },\n      ...rest\n    } = this.props;\nreturn (\n  <div>\n    <DatePicker\n      {...rest}\n      selected={this.state.selectedDate}\n      onChange={this.handleChange}\n    />\n    {touched &&\n      error &&\n      <span className=\"datepicker__error\">\n        {error}\n      </span>}\n  </div>\n);\n\n}\n}\nThan it can be used as a component on Field:javascript\n (value ? moment(value).format('YYYY-MM-DD') : null)}\n  component={renderDatePicker}\n/>\n```\nI'm using initialValue in \"YYYY-MM-DD\" format, but you can define any in \"inputValueFormat\".. @kicker10BOG Maybe you're using an incorrect inputValueFormat. If it's not ISO 8601, then try to define it.. @kicker10BOG I repeated this in my app and didn't get this issue. So I do not know why this happens in your case.. ",
    "kicker10BOG": "@winlx I'm trying to use your code and it works well except that it does not load the correct initial value when editing an existing item. \nThis issue has proven difficult because if I do a console.log(this) in componentWillMount then I can clearly see this.props.input.value but if I print out or try to access anything deeper than just the top level of the object, the value disappears. As a result, that if statement fails and the selectedDate never receives its initial value. Do you have any ideas why this might be happening? . @winlx I changed initialValueFormat and the format in the normalize attribute to match what we use (MM/DD/YYYY). I don't think that is the problem. \nHere's a screenshot of my console after these two lines\nconsole.log(this)\nconsole.log(this.props)\n\nNow if do, console.log(this) again, I can see it again. The name attribute is always accessible, but it isn't provided by redux, so I am thinking redux doesn't like this setup. \nIf I go back to the more standard way of using datepicker with redux (using {...input} in a functional component), it works, but then users can't do manual text entry. . @winlx Ok. Thank you for trying. I will continue my search. . ",
    "rayronvictor": "My contribution\n```javascript\nimport React from 'react'\nimport { compose, withHandlers, withState, lifecycle, setDisplayName } from 'recompose'\nimport moment from 'moment'\nimport { Form, Label } from 'semantic-ui-react'\nimport DatePickerComponent from 'react-datepicker'\nconst withLabel = (Component) => setDisplayName('withLabel')(\n  ({ id, label, ...props }) => (\n    \n      {label && {label}}\n      \n\n  )\n)\nconst withFormField = (Component) => setDisplayName('withFormField')(\n  ({ meta: { touched, error }, ...props }) => (\n    \n\n  {touched && error ? (\n    <Label basic color=\"red\" pointing>\n      {error}\n    </Label>\n  ) : null}\n</Form.Field>\n\n)\n)\nconst withFormLabelField = compose(\n  withFormField,\n  withLabel\n)\n/*\n * DatePicker Input\n /\nexport const DatePicker = compose(\n  withState('selectedDate', 'setSelectedDate', null),\n  withHandlers({\n    handleChange: ({ input, setSelectedDate }) => (date) => {\n      setSelectedDate(date)\n      input.onChange(date)\n    }\n  }),\n  lifecycle({\n    componentWillMount () {\n      if (this.props.input.value) {\n        this.props.setSelectedDate(moment(this.props.input.value, 'DD/MM/YYY'))\n      }\n    }\n  })\n)(({ input, meta, selectedDate, handleChange, ...rest }) => (\n  \n))\n/*\n * DatePicker Field\n /\nexport const DatePickerField = withFormLabelField(DatePicker)\n```\nUsage:\n```jsx\nimport React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Button, Form } from 'semantic-ui-react'\n// import moment from 'moment'\nimport { DatePickerField } from './Fields'\nconst MyForm = (props) => {\n  const { handleSubmit, invalid, loading } = props\nreturn (\n    \n (value ? moment(value).format('DD/MM/YYYY') : null)}\n        />\n    <Button\n      type='submit'\n      disabled={invalid || loading}\n      loading={loading}\n      content='Submit'\n    />\n</Form>\n\n)\n}\nexport default reduxForm({\n  form: 'my-form'\n})(MyForm)\n```\n. I realized that is necessary to propagate input, thus onChange is called and the errors are shown.\nThe value attribute was omited.\njsx\n<DatePickerComponent\n  {..._.omit(input, [value])}\n  selected={selectedDate}\n  onChange={handleChange}\n  {...rest}\n/>. ",
    "adjieindrawan": "Thanks @gregorydrake, i successfully render it, but if i want alert the value use JSON Stringfy. The value not show. \nMy code is:\nconst renderDatePicker = ({input, placeholder, defaultValue, meta: {touched, error}}) => (\n  <View>\n    <DatePicker {...input} dateForm='MM/DD/YYYY' selected={input.value ? moment(input.value) : null} />\n    {touched && error && <Text>{error}</Text>}\n  </View>\n);\n```\nexport default renderDatePicker;\n    <Field\n      name='birth_date'\n      placeholder='Birth Date'\n      component={renderDatePicker}\n      label='Tempat Lahir' />\n\n\n// Values onSubmit\nconst onSubmit = (values) => {\n  alert('Submited: \\n' + JSON.stringify(values));\n};\n```\nAny solutions?\n. ",
    "sookwei93": "I am having same problem with @indrawanadjie.. I am able to wrap datepicker in redux form but not able to get the datepicker selected value onSubmit and validation.\nPlease help!. ",
    "AustrisC": "Thank you @tommyalvarez. The solution works almost perfect - I had an issue with redux-form validator and had to add following props to DatePicker in order to make touched parameter work.\nonBlur={() => input.onBlur(input.value)}. ",
    "kotmatpockuh": "@tommyalvarez  what should I put into input: PropTypes.object.isRequired ?\n(how to use this component?). ",
    "Randore": "Hi, how to target Fields? I have 2 fields like start and end dates.\n1. start date is just like effective from date,\n2. And end date is effective to (planner)\nAnd by the way how to restrict start date should not go beyond end date, if end date is selected first.\nThanks in advance.. @tommyalvarez Hi,\nThe above solutions helped me to integrate the datepicker into ReduxForm.\nHere my question is, I have 2 date fields components\neg: \n<Field component={DatePicker} name=\"startDate\" />\n<Field component={DatePicker} name=\"endDate\" />\nMy first question is how to change individual Fields instead of all changing onChange method.\nJust like event.target.input how to do this in above cases.\nMy Second question is: https://github.com/jquense/yup/issues/287\nhow to achieve this ReduxForms.. ",
    "zaferzn": "@rayronvictor Thank you for your contribution, saved me after a couple of frustrating hours, and just a friendly reminder in react-datepicker document date format is something like below \n<DatePicker\ndateFormat=\"yyyy/MM/dd\"\nselected={this.state.startDate}\nonChange={this.handleChange} />\nFinal form should be something like this \n<Form.Group widths='equal' >\n                    <Field\n                        validate={[required]}\n                        id=\"deadline\"\n                        name=\"deadline\"\n                        type=\"text\"\n                        placeholderText=\"Deadline\"\n                        component={DatePickerField}\n                        dateFormat='YYYY-MM-dd'\n                    //if you want normalize before store on redux...\n                    //normalize={value => (value ? moment(value).format('DD/MM/YYYY') : null)}\n                    />\nBe careful with dd if you use DD you get funny results, \nfor placeholder use placeholderText. ",
    "tom-wagner": "For those still trying to figure out how to get Redux Form and ReactDatepicker to work well together try considering the change prop in Redux form passed to onChange from ReactDatepicker.\nIn the example below I do this to ensure startDate and endDate on my form are never more than 30-days apart:\n```\nconst StartDatePicker = ({\n  input: { onChange, value }, endDate, change,\n}: PropsWithEndDate) => (\n   {\n      onChange(startDateValue);\n  if (endDate.diff(startDateValue, 'days') > 60) {\n    change('endDate', moment(startDateValue).add(60, 'd'));\n  }\n}}\ndateForm=\"MM/DD/YYYY\"\nselectsStart\nselected={value}\nstartDate={value}\nendDate={endDate}\nminDate={moment.utc().subtract(65, 'day')}\nmaxDate={moment.min(endDate, moment.utc())}\nmonthsShown={2}\n\n/>\n);\n````\nHere's the link: https://redux-form.com/8.0.4/docs/api/props.md/#-code-change-field-string-value-any-function-code-\nHope this helps someone!. For those still trying to figure out how to get Redux Form and ReactDatepicker to work well together try considering the change prop in Redux form passed to onChange from ReactDatepicker.\nIn the example below I do this to ensure startDate and endDate on my form are never more than 30-days apart:\n```\nconst StartDatePicker = ({\n  input: { onChange, value }, endDate, change,\n}: PropsWithEndDate) => (\n   {\n      onChange(startDateValue);\n  if (endDate.diff(startDateValue, 'days') > 60) {\n    change('endDate', moment(startDateValue).add(60, 'd'));\n  }\n}}\ndateForm=\"MM/DD/YYYY\"\nselectsStart\nselected={value}\nstartDate={value}\nendDate={endDate}\nminDate={moment.utc().subtract(65, 'day')}\nmaxDate={moment.min(endDate, moment.utc())}\nmonthsShown={2}\n\n/>\n);\n````\nHere's the link: https://redux-form.com/8.0.4/docs/api/props.md/#-code-change-field-string-value-any-function-code-\nHope this helps someone!. ",
    "joeJazdzewski": "I have had the same issue, it might be that you were missing the \"react-onclickoutside\" package.\nThe not having \"react-onclickoutside\" installed in your project would cause the calendars to overlap if you click two different date-picker components on the same page. In the case of IE9, it also causes an infinite loop, caused by the onBlurhandler setting the refs.input.focus(), if the calendar for that component is still open. If you open another calendar in page then you will enter the infinite loop.\n. I installed both packages into my project and that seemed to fix it for me. I believe that version 5.0.0 (and above) of react-onclickoutside is a HoC instead of a mixin. \n. ",
    "arturictus": "ok, I fixed it:\nnpm install moment --save\nnpm install react-datepicker --save\nnpm install style-loader css-loader --save\nwebpack.config\nJSON\nresolve: {\n    extensions: ['', '.js', '.jsx', '.css'],\n...\nJSON\n{ test: /\\.css$/, loader: \"style-loader!css-loader\" },\n  { test: /\\.png$/, loader: \"url-loader?limit=100000\" },\n  { test: /\\.jpg$/, loader: \"file-loader\" }\nI do not understand how this loaders affected the .js but it suddenly worked??? \n. ",
    "bid007": "Worked for me as well. Thanks :)\n. The issue can be replicated in demo. If you enter the date manually and try to clear, it won't work.\n. ",
    "charlotteisabella": "Hey, is it resetting to nothing or is it resetting to 'Invalid Date'? I am having a similar issue in IE11 and firefox where when a user enters anything in the textbox it returns 'Invalid date'.\n. ",
    "rahulvjti": "I have analyzed this issue and for IE 11 when user select date from calendar first then its valid but when manually edit the date then its coming as invalid date so it resetting it to earlier date(Selected from calendar). At the start when i enter the date manually ,its coming invalid date so resetting it to blank.\n. Someone please provide the solution as its getting frustrated really.\n. ",
    "slavikdenis": "I have no idea why, but It seems to not work for me either. Maybe the issue can be that I have the inline date picker in bootstrap modal somehow?. ",
    "jakezatecky": "If you take the same example and modify it to include selected and onChange, it behaves as if nothing is actually disabled.\nhttp://codepen.io/anon/pen/aJQryY\nThe developer can get around some of this by setting minDate and maxDate to the selected value and omitting the onChange handler, but the calendar should at least have some visual indicators that it is disabled.\nI created an example based on @jochenberger's example that effectively created the appearance of a disabled inline date:\nhttp://codepen.io/anon/pen/XMywPE. ",
    "Florensvb": "It has been a while my friends! Unfortunately the issue still persists.\nWorkaround of setting the minDate and maxDate works, however it would be nice if this could get fixed soon.. ",
    "mtrabelsi": "REALLY coverage is 90.93%? you must be kidding : when using this custom input there is a lot of bugs that comes up : \n\nonBlur\nPlaceholder \nand much more\n\n. So sad that is not included in the doc, I will have time to make a lot of contribution for this... I'm able to solve this using : \n.react-datepicker__day--outside-month {\n                color: transparent;\n                pointer-events: none;\n              }\nDon't use display: none, it will break the layout ;)\nhere the result : \n\n. @jasonellington I use both, to style a single day based on some specific test then I use classname, but when I want to style the default layout for the Date picker ( as you can see in my screenshot ) I hook with the style names and override them with my style - pretty handy and quick to understand. But expect to do some CSS debugging to know which is the best class to Hook. ;). Hey guys, I have no more access to code, but I can help if you put your code here :).\nI'll try to find time this weekend to make a PR.\nCheers. ",
    "gogoge": "Sorry, I found out the problem is one of my chrome extension (something for English grammar check),I close this issue now.\n. ",
    "Matt007": "Test fails due to code formating. Im leaving it as it is as this seems time consuming - if anyone needs an onMonthChange Event feel free to pick this up :)\n. I totally understand :)\n. ",
    "magsout": "@martijnrusschen the code looks good to you? (apart code style)\n. @martijnrusschen \nSomething like \njs\nmodule.exports = onClickOutside(Calendar)\nNo ? \n. 1) it's dangerous to use this.state, because setState is asynchronous, so the result is not the same as above, better to use const with one result\n2) why did you passed func in setState ?. oh ok my bad, good to know, thanks for this information ;). ",
    "rahulkag": "Create an file with name Datapiecker.scss and Import that into our custom component. \nin that file use the below code \n```\n:global{\n /*\n css here \ncopy this css from datepicker library and past here. I will appear the into DOM as it is. \n*/\n}\n```\n. ",
    "kiddo13": "when this pull request will be merged?\n. I could not get this update from npm install. \n. ",
    "luggage66": "You can accept multiple import formats by providing an array to the dateFormat property. The first format will be the displayed format.\ne.g.\njs\n<DatePicker dateFormat={[ 'D/M/YYYY', 'DDMMYYYY', 'DD-MM-YYYY' ]} />\nNote that as soon as the user types a value that is valid in any of those formats, it'll reformat and put the cursor at the end.\n. Nevermind, I don't thing this is a solution. If you accept for M/D/YY and M/D/YYYY then as soon as you type two digits for a year, it assumes the whole year. If you tried to type \"1999\" if would assume you meant \"2019\".\n. ",
    "Haemoglobin": "I managed to get it working with the custom input in the end, but it wasn't entirely easy to get working due to various issues, the cursor problem you mentioned for example \n. ",
    "sanheng": "i can't use it through npm install react-datepicker@0.29.0 --save\nand i tried dropdownMode=\"select\" is not working\n. ",
    "RatanPaul": "ahh Thanks!\n. ",
    "Kelvne": "Actually null is not working for me.\nIt throws on the console:\nUncaught TypeError: t.date.clone is not a function\nVersion 0.40.0. ",
    "inyigo": "@rafeememon thanks for the info. I will give it a shot.\n. https://github.com/Hacker0x01/react-datepicker/pull/596. ",
    "jkyro": "Hi, I opened a PR #596 about multiple month support. However the layout of the months is horizontal since it fits my use case but should not be too difficult to make an option for vertical layout.\n. Thanks for the comments! I think the build fails because the added code lowers the coverage percent somewhat. Additional test cases should do the trick. As for the parameter naming, monthsShown sounds good to me, I'll fix that.\n. What I would expect after selection:\n\n. ",
    "gius": "@inyigo \nTry this CSS override:\ncss\n.react-datepicker__month-container {\n    float: none;\n}. ",
    "ReactGirl": "Any solution for this one?. ",
    "js2me": "@ReactGirl I'm not found solution, using that component, but I use air-datepicker for that feature. @alyahmedaly I heard so that component have possible to connect with react-inputmask\n. I think that issue need to close. ",
    "alyahmedaly": "any update on this ?. yes it's very easy \n<DatePicker {...DatePickerProps}\n            customInput={<MaskedInput mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]} }\n          />. @vctormb not sure what's your issue but any way this my props \nconst DatePickerProps = {\n      onBlur: input.onBlur,\n      onFocus: input.onFocus,\n      dateFormat: dateFormat,\n      selected: selectedValue,\n      onChange: this.handleChange,\n      className: \"form-control\",\n      fixedHeight: true,\n      showMonthDropdown: true,\n      showYearDropdown: true,\n      placeholderText: custom.placeholder,\n      disabled: custom.disabled,\n      minDate: custom.min,\n      maxDate: custom.max,\n      customInput: <DatePickerMaskedInput />,\n      customInputRef: 'inputRef'\n    };. ",
    "vctormb": "@alyahmedaly Where can I find the 'DatePickerProps'? I'm trying to use the 'MaskedInput' lib, but the value doesn't change when I select a new date on the calendar.. @alyahmedaly When I select a new date on the Calendar it does not change the MaskedInput value. Do you know how to solve it?. Any updates about this feature? I'm really interested too!. ",
    "karldanninger": "experiencing the same problem\n. yeah, sorry @rafeememon totally understandable, I'm just using the same as the example on the demo page\n<DatePicker\n      selected={selected}\n      onChange={onChange}\n      locale='en-gb'\n    />\nI'm also on \"react-datepicker\": \"^0.29.0\"\n\u2764\ufe0f \n. what I actually need is the side effect of having the week rows start with Mon-Sun\n. \ud83d\udc4d \n. ",
    "lfender6445": "this is simple, just change the date format prop\ndateFormat=\"MM/DD/YYYY\"\n      locale=\"en-gb\"\n. @saborrie also just wanted to note, the american date format does start with sunday and not monday\n\nAccording to international standard ISO 8601, Monday is the first day of the week. It is followed by Tuesday, Wednesday, Thursday, Friday, and Saturday. Sunday is the 7th and final day.\nAlthough this is the international standard, several countries, including the United States and Canada, consider Sunday as the start of the week.\n\nhttps://www.timeanddate.com/calendar/days/\n. ",
    "kilisoria": "My bad, I've just saw that this topic was tried here 361 I've just added the \"fixedHeight\" and that's work. Thanks!\n. ",
    "github1": "Ah yea I was on 0.27.0.  It is working in at least 0.29.0+. Cool.\n. @martijnrusschen Thanks. The PR has been rebased. . ",
    "umurgdk": "@rafeememon you're right ^_^ thanks for pointing me the fixedHeight that works for us. latest version in npm registry does includes that feature?\n. ",
    "grumd": "Seems like this is correct, see this file for reference https://github.com/Hacker0x01/react-datepicker/blob/master/src/date_input.jsx\n. ",
    "jbrey": "+1. ",
    "arnabk": "+1. Duplicate of https://github.com/Hacker0x01/react-datepicker/issues/470. ",
    "mihailmetro": "+1. ",
    "danilvalov": "I use the following solution:\n```\ncloseDatePicker() {\n  const {datepicker} = this.refs;\ndatepicker.setOpen(false);\n}\nrender() {\n   return (\n      \n\n\n    );\n}\n```. I sent PR with this small fix: https://github.com/Hacker0x01/react-datepicker/pull/1129\nI checked the fix in Firefox, Google Chrome, Opera and Safari. It works correctly:\n\nPlease, merge it as soon as possible.. Thank you very much!. ",
    "hoodsy": "@rafeememon sweet! thanks for the quick response. How about the hover styling, to show the range. It seems like that is controlled by selectsStart and selectsEnd\n. ",
    "sahanarula": "Looking forward for the best solution.\n. ",
    "TrejGun": "would love to see this feature too. probably its better to use https://github.com/airbnb/react-dates :). It should store date in UTC for simpler calculation\nfor example you are in GMT+3 and I'm in GMT+8\nso at the same time you select 10am and me - 3pm\njs\nnew Date().toISOString() // 2016-12-24T07:00:00.000Z\nyou store both in UTC in DB and then show it like\njs\nnew Date(\"2016-12-24T07:00:00.000Z\").toString() // Sat Dec 24 2016 15:00:00 GMT+0800 (WITA)\nmeanwhile if you store relative time you have to store your and mine UTC offset\njs\nconst date = new Date()\nconst x = {date: date, offset: date.getTimezoneOffset()}\nthen\njs\nconst d = new Date(x.date); \nd.setMinutes(d.getMinutes() + x.offset - y.offset); \nd.toString()\nso you have more data in db, more calculation to show date, and extremely hard calculations to get time difference and range difference. ",
    "Charlie91": "Ok, it's possible through the setting startDate and endDate, but how can I display two dates at one input field? It seems that I can only display one date at one time. <input type=\"date\"> is too unflexible to be a normal datepicker. There is no any native solution to choose data with 'DD MMM' format, without years.. ",
    "arnireynir": "@rafeememon fantastic, do you know when next npm release will be made?\n. Yes, no problem. I will make the changes.\n. ",
    "Siern": "The source of the error may actually be a false assumption that moment.add was immutable, due to inexperience with this container.\nI now believe this is modifying your old date object.\nthe onChange's handler had an add x days then conversion to Date, then on the render a conversion back to moment.  This I believe now resulted in original moment being modified.  This can be seen in the fact that their _i and _d values are not matching in the old props when the compare is made.\nI will test and confirm this tomorrow.\n. ",
    "tpinne": "I put something together really quick, but the problem is reproduced here.\ngit clone --depth=1 https://github.com/mxstbr/react-boilerplate.git\nnpm run setup\nnpm run clean\nnpm install react-datepicker --save\n\nOptional \n(to get rid of a webpack warning later):\nnpm install --save-dev empty-module\nin 'webpack/webpack.base.babel.js' add after line 72 \nnew webpack.ContextReplacementPlugin(/\\.\\/locale$/, 'empty-module', false, /js$/)\n\nthen\nnpm run start\nOpen 'http://localhost:3000'\nand add\nimport DatePicker from 'react-datepicker';\nto app/containers/HomePage/index.js @ line 15 (eg.)\nlet webpack recompile and then reload your browser and look at console output.\nHope this helps.\nThx for having a look into it anyway.\n. Haven't had the time to look into it. Maybe on Friday or sometime next week.\n. ",
    "akiokio": "Same here pretty sure is because how the react boilerplate loads the libraries.\nDid you find a solution @tpinne ?\n. ",
    "ej23lee": "I had the same issue. Check if this fixes your issue.\n. I'm closing the issue since this is the fix.\n. ",
    "kintendo": "Ah, I left isDefaultPrevented in there because it's possible with custom inputs that defaultPrevented could be undefined. According to jQuery docs and W3 docs it doesn't look like defaultPrevented is a property on the event object.\n. Sounds good, I'll make the change.\n. ",
    "joaoeffting": "yep, it does\n\n. No problem. I'll try hehe\n. I'm trying to resolve it. I saw the problem occurs only in october because daylight saving :)\n. ",
    "cristianounix": "\nSame problem :). ",
    "nildowjunior": "Same problem here.\nI've tested at two devices, both using the demo page:\n\niPad running iOS 9.3.5 - The problem doesn't exist\niPhone 7 running iOS 12.1 - The problem exist \n\nThe problem occurs in some specific months. For example 11/2018, 11/2019, 10/2020, 11/2020\nAnyone has ideas how to solve it?\n. ",
    "kaushikbarodiya": "Hi danylomarkov,\nHave you find any workaround for this problem?I am also facing this issue.Great if you can help.\n. I have used fixedHeight for workaround. \n. Yeah this issue persist only in mobile. On desktop it works fine.\nOn Mon, Oct 24, 2016 at 9:42 AM, andreechristian notifications@github.com\nwrote:\n\nIt is happening to me on mobile only.. After a little debugging, i found\nthese functions triggering on desktop (the correct one):\nhandleBlur\ndeferFocusInput\ncancelFocusInput\nhandleFocus -> most likely from deferFocusInput -> setOpen : true\nhandleSelect -> setOpen : false\nwhile in mobile i got following order :\nhandleBlur\ndeferFocusInput\ncancelFocusInput\nhandleSelect -> setOpen : false\nhandleFocus -> most likely from deferFocusInput -> setOpen : true\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/597#issuecomment-255644434,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMVQMC6NL6R9Z91vz9AWFaUYuh59lwM5ks5q3DAkgaJpZM4Kb1oY\n.\n. There were no console errors. You can recreate the problem on example site\nitself.\n1. Toggle the device from web to mobile.\n2. Try to select date in first example itself.You will find date picker\n   doesn't close after selecting particular date.\n\nPlease let me know in case you are not able to recreate.\nOn Fri, Oct 21, 2016 at 7:21 PM, Rafee Memon notifications@github.com\nwrote:\n\nDoes this work on the demo site? Are there any console errors? Can you\nlink to an app that shows this problem?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/597#issuecomment-255382370,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMVQMJ3PyT-RYMiOrT3PkmW689tZvAV9ks5q2MNNgaJpZM4Kb1oY\n.\n. Yes, I liked the idea of Mahammed. In this way we will have more control\nover the component.\n\nOn Tue, Nov 8, 2016 at 5:49 PM, Mahammed Zishan Khan \nnotifications@github.com wrote:\n\nMaybe it's better to add a property which allows it to stay open when you\nselect a date? On false it should just autoclose.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/597#issuecomment-259122462,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMVQMJvjuobkXju4sx8uc4GbJ_3Z-i-Nks5q8GjqgaJpZM4Kb1oY\n.\n. \n",
    "andreechristian": "It is happening to me on mobile only.. After a little debugging, i found these functions triggering on desktop (the correct one):\nhandleBlur\ndeferFocusInput\ncancelFocusInput\nhandleFocus -> most likely from deferFocusInput -> setOpen : true\nhandleSelect -> setOpen : false\nwhile in mobile i got following order :\nhandleBlur\ndeferFocusInput\ncancelFocusInput\nhandleSelect -> setOpen : false\nhandleFocus -> most likely from deferFocusInput -> setOpen : true\nwas using chrome 53.0.2785.143 (64-bit) on mac, toggling the responsive on and off.\n. ",
    "cyrusbowman": "+1 I have the same issue, I am NOT on mobile. I'm almost positive the date selector used to close after selecting a date in earlier versions. Also note if using a custom input it DOES close after selecting a date.\nNot Closing After Selection:\n\nCustom Input DOES Close After Selection:\n\n. ",
    "splendidtrade": "@kaushikbarodiya: were you able to solve this issue on mobile, please let me know.. ",
    "timwilkbrandt": "Device: was iPad\nI had the same problem, further compounding my ordeal was that we're using typescript and the react-datepicker component does not have the complete suite of typings available. In lieu of creating my own typings I decided to leverage what i had available, which basically boiled down to the onChange event and the refs. \nthis led to the following solution within the onChange eventHandler: \nthis.props.handleStartDateChange(date) //saving date to state\n      let temp = this\n      setTimeout(function(){\n      if (temp.refs.datepicker1.refs.calendar) {\n           temp.refs.datepicker1.refs.calendar.handleClickOutside()\n      }\n      }, 500)\nHope this helps someone.. @jvarshaprdxn you can either use the trick i listed above, but that was more due to the fact that I was using typescript and the typings did not support custom input. Or you can use the custom input type which we tested on the ipad and appeared to work:\nhttps://hacker0x01.github.io/react-datepicker/#example-29\nBest of luck,\nTim. ",
    "dfahlander": "This happens for me on chrome desktop. After navigating to next month and clicking a date, the onChange event does not trigger, but the calendar quickly closes and reopens. Then clicking a second time triggers the change event and calendar is closed. I am on version 1.3.0. Also had the issue on version 1.2.1. Not tested earlier versions. React popper versions: 0.8.2 and 0.8.3.\n. I've narrowed down the issue to reproduce it. It's actually even reproducable on the project's main page example.\nRepro:\n1. Use Chrome or Opera (not tested other browsers)\n2. Go to https://reactdatepicker.com\n3. Decrease the hight of your browser-window, so that the calendar needs to show over the input field instead of under it.\n4. Navigate to September 2018:\n\n5. Select september 19.\n6. Navigate back to August 2018\n7. Try to select August 15.\nExpected behavior: Date should be selected (onChange triggered) and calendar close down.\nActual behavior: The calendar is re-rendered but no date selected yet (no onChange triggered)\n. ",
    "pbreah": "I tested this on mobile, and it still happens on the latest release 1.6.0\nI wanted to share a simpler solution: add the prop preventOpenOnFocus to true. It works as expected on mobile.\n. ",
    "ido-ofir": "Apparently I was using an older version. on 0.33 it's fine. \nThank you.\n. ",
    "homerlex": "The problem with using the dateFormat prop is that it overrides the format based on locale.  So if I set dateFormat={['MM/DD/YYYY', 'M/D/YY', ...]} it would be fine for en-US but wrong for en-GB since it uses the first format in the dateFormat array to display the date.\n. ",
    "salkiducky": "I'm searching for this answer as well!. Yes, thank you for the suggestion, but we're looking to keep the interface of our field somewhat clean and not cluttered with extra buttons, so it would be the most ideal case that the 'clearable' button would work for us if changed.\nI understand this may be a long shot, but we wanted to give it a shot.. ",
    "pawlowskim": "I have the same issue today. And I wonder, theoretically. If we pass a function as first date format that will change it depends on locales could it display date in local format? I know this doable in some languages (a property, not a function that is dynamically calculated when needed). ",
    "dktan": "any one working on this?. ",
    "quangas": "I have the same issue\n\nselect the date\nclear the input (with backspace)\n\nthen it breaks and shows invalid date, NaN, NaN\nI defaulted to readOnly for now, but manual change of date would be nice.. ",
    "abury": "Same issue. Really need to be able to allow user input but can't really let them while this is a problem :(. Thanks @josiahsprague, works great.. ",
    "zouxuoz": "@rafeememon what should I change for merging this pull request?\n. @rafeememon fixed\n. ",
    "nbkhope": "I had the same issues you had. My redux application state should store a string while the onChange for the date picker has a Moment object as argument and the value prop for the picker takes a moment object, not a string. Thank you for for code sample.. I had the same issue. What I did was just reset my validation in the onChange() (because there should be no errors if you select the date using the UI widget) while I kept my validation in the onChangeRaw().. @alex-shamshurin can you elaborate?. Same problem here with Semantic UI !. @rkosafo could you elaborate how you got to apply ui input to the date picker input? My problem is I need the input to be fluid, so I need to apply the following class to a div containing the input: ui fluid input.. ",
    "jmhdez": "Any plans to merge this PR?. ",
    "AdamBrodzinski": "please disregard... I forgot to restart webpack after upgrading \ud83d\ude48 \n. ",
    "OAGr": "Previously there was an issue with the documentation, resulting in the 'monthsShown' examples to now work. I believe this was the intended functionality. It's a really small fix, just in the documentation.\nhttps://github.com/Hacker0x01/react-datepicker/pull/600\n\n. ",
    "torkjels": "I too am encountering this issue in IE11 specifically.. ",
    "cr4zyc4t": "it's 2019, is there any solutions? :). ",
    "jeremija": "You can import the .css file by omitting the extension. I have this in my .scss file:\ncss\n@import \"../node_modules/alertifyjs/build/css/alertify\";\n@import \"../node_modules/alertifyjs/build/css/themes/bootstrap\";\nEDIT: I just realized you want to alter the original CSS, never mind.\n. ",
    "dherran": "They should be included imo, for people who want to customise them. It's very annoying having to come back to the Github repo to manually pull the SCSS files everytime they change.. ",
    "lorinkoz": "Agreed, I also need this, plz.. ",
    "floriangosse": "It would be nice to have the scss files included. I have currently the problem that I can't increase the size of the component easily because everything depends on the body.. Closes #619. ",
    "MikaelCarpenter": "I have this issue if I paste a date that has extra whitespace: 03/15/2017 might not be able to tell but that has a trailing space\n. Yea i actually just submitted a PR to fix the issue. . https://github.com/Hacker0x01/react-datepicker/pull/717. so oddly enough, when I install from git it only pulls down\nLICENSE     README.md   node_modules    package.json\nSo i ended up cloning my forked version locally and running npm install also built the dist and lib folders. So i manually injected that into my projects node_modules/react-datepicker and it worked. hmm I don't think so? It's actually odd enough that the presence of trailing spaces makes a date not recognized as valid. I don't think this is something that is necessary in just certain use cases, I think it's a fundamental issue with the .isValid check and should be handled for all use cases. \n. @martijnrusschen Added a test that makes sure a date with trailing whitespace gets treated as a valid date. It passes locally for me, but it's failing here? Do you happen to see anything wrong with it? \nAlso as a side note I had to use mount rather than shallow to access the props. Shallow's props gives the props for the input not the DateInput for some reason.. @rafeememon Yea I saw that and I get that the test I added is failing, but it doesn't say why. I can only assume that either the callback wasn't called or that it was called but with a different value. \nHowever, this test passes for me locally so I'm not sure what would make it fail now.. So does anyone else have any idea why it might be failing? I'm having some coworkers run it locally to see if it fails for them, but it might be helpful for one of you guys to try that too.. Thanks @mgrdevport that .withArgs must have been causing problems. Modified the test to check the two separately. Yup, I'm doing that for now until this issue gets fixed.. ",
    "dmr": "About 80% of our users paste things with whitespace from my experience ^^. ",
    "syabro": "https://github.com/Hacker0x01/react-datepicker/issues/426. ",
    "DarynHolmes": "Sorry, I confused this with a different date picker....\n. ",
    "DannyRyman": "I have the same problem when using alongside the stylesheet from the react-bootstrap.\n. ",
    "localjo": "I'd also be willing to open a PR that converts this component to use JS styles (quickly becoming the React norm) instead of a global stylesheet that has to be included separately. @Hacker0x01 do you have any thoughts on which direction you'd like to take this?\n. This is what I'm using;\n.react-datepicker {\n  font-size: 1em;\n}\n.react-datepicker__header {\n  padding-top: 0.8em;\n}\n.react-datepicker__month {\n  margin: 0.4em 1em;\n}\n.react-datepicker__day-name, .react-datepicker__day {\n  width: 1.9em;\n  line-height: 1.9em;\n  margin: 0.166em;\n}\n.react-datepicker__current-month {\n  font-size: 1em;\n}\n.react-datepicker__navigation {\n  top: 1em;\n  line-height: 1.7em;\n  border: 0.45em solid transparent;\n}\n.react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n  left: 1em;\n}\n.react-datepicker__navigation--next {\n  border-left-color: #ccc;\n  right: 1em;\n}\nIt works for me. Basically just replaces rem values with the same values in em, and adjusts some other things to make it all fit. But I'm not sure how thorough this is. Ideally I think this component should be converted to use JS inline styles, and accept a style prop that can override those, so that it doesn't require including an external stylesheet, and I also think it should use em by default instead of rem, so that the sizes can scale with the page that it's included in instead of needing tedious overrides. Waiting to hear from a maintainer of the package on what direction they'd like to go before I open a PR.\n. Seems that this project isn't actively maintained anymore. @Hacker0x01 is it up for adoption?. @martijnrusschen I'm willing to open a PR. I was waiting for some feedback from the maintainers about  which type of PR they would merge for this. I can do one of two things;\n1) Update the global stylesheet to inherit font sizes, similar to the workaround CSS I posted above\n2) Update the component to use JS Styles via react-themeable instead of a global stylesheet since that's quickly becoming the React norm. Other components, such as react-autosuggest do this.\nI'd prefer approach 2, but I don't want to start that PR if the maintainers don't like the idea, because it'd be a lot of work to go to waste.. Once I get a response from the package maintainers about which type of PR they would prefer I'll open one. Until then, I'm closing this issue.. ",
    "matthizou": "Same issue as DannyRyman. The Bootstrap stylesheet has a side effect on the component, and the calendar appears tiny.\n. ",
    "acasaccia": "Thanks @josiahsprague for raising this! Would you share the CSS rules you used to override the default size while the PR is ready?\n. ",
    "jesseproudman": "Here's the CSS I used to make the table work:\n```\n.react-datepicker {\n  font-size: 1.3rem !important;\n}\n.react-datepicker__current-month {\n  font-size: 1.5rem !important;\n}\n.react-datepicker__header {\n  padding-top: 6px !important;\n}\n.react-datepicker__navigation {\n  top: 13px !important;\n}\n.react-datepicker__day-name, .react-datepicker__day {\n  margin: 0.5rem !important;\n}\n```\n\n. ",
    "loicbourg": "For the people struggling with this:\nI had to set fixedHeight to true for the DatePicker to make the css of @josiahsprague work correctly. . ",
    "pratik-trianz": "Thanks @jesseproudman . @zahi01 see the styles in above comments from @jesseproudman . ",
    "zahi01": "i can't see @josiahsprague response, can someone tell me what's the fix?\n@pratik-trianz @abury . ",
    "evonsdesigns": "@localjo's css works for date, but it is missing the following when time select is present:\n```\n.react-datepicker-time__header {\n  font-size: 0.944em;\n}\n.react-datepicker__navigation--next--with-time {\n  right: 80px;\n}\n```\nI also needed the following for the background of Time selection (24h): \n.react-datepicker__time-list-item {\n  width: 50px;\n}. ",
    "al3x-huang": "Any permanent fix on this besides changing the CSS?\nMy workaround (somewhat janky, but works):\n\n\nSet html font-size to be 100%\n\n\nIf you want html font-size to be at 62.5% let's say: convert react-datepicker.css to LESS or SASS, set a variable called @scale-factor:1.6rem and then ctrl+f and replace all references of rem with * @scale-factor and everything should work. \n\n\n Click for my LESS file\n\n\n### Note: I am using version 0.60.2. Your CSS may be different on a more current version.\n\n```css\n//@TODO: set to 1 if https://github.com/Hacker0x01/react-datepicker/issues/624 ever gets resolved\n@scale-factor: 1.6rem;\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  margin-left: -8px;\n  position: absolute;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  box-sizing: content-box;\n  position: absolute;\n  border: 8px solid transparent;\n  height: 0;\n  width: 1px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  content: \"\";\n  z-index: -1;\n  border-width: 8px;\n  left: -8px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle {\n  top: 0;\n  margin-top: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  border-top: none;\n  border-bottom-color: #f0f0f0;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  top: -1px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  bottom: 0;\n  margin-bottom: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  border-bottom: none;\n  border-top-color: #fff;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  bottom: -1px;\n  border-top-color: #aeaeae;\n}\n\n.react-datepicker-wrapper {\n  display: inline-block;\n}\n\n.react-datepicker {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 0.8 * @scale-factor;\n  background-color: #fff;\n  color: #000;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3 * @scale-factor;\n  display: inline-block;\n  position: relative;\n}\n\n.react-datepicker__triangle {\n  position: absolute;\n  left: 50px;\n}\n\n.react-datepicker-popper {\n  z-index: 1;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] {\n  margin-top: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] {\n  margin-bottom: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] {\n  margin-left: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] .react-datepicker__triangle {\n  left: auto;\n  right: 42px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] {\n  margin-right: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] .react-datepicker__triangle {\n  left: 42px;\n  right: auto;\n}\n\n.react-datepicker__header {\n  text-align: center;\n  background-color: #f0f0f0;\n  border-bottom: 1px solid #aeaeae;\n  border-top-left-radius: 0.3 * @scale-factor;\n  border-top-right-radius: 0.3 * @scale-factor;\n  padding-top: 8px;\n  position: relative;\n}\n\n.react-datepicker__header--time {\n  padding-bottom: 8px;\n}\n\n.react-datepicker__year-dropdown-container--select,\n.react-datepicker__month-dropdown-container--select,\n.react-datepicker__year-dropdown-container--scroll,\n.react-datepicker__month-dropdown-container--scroll {\n  display: inline-block;\n  margin: 0 2px;\n}\n\n.react-datepicker__current-month, .react-datepicker-time__header {\n  margin-top: 0;\n  color: #000;\n  font-weight: bold;\n  font-size: 0.944 * @scale-factor;\n}\n\n.react-datepicker__navigation {\n  line-height: 1.7 * @scale-factor;\n  text-align: center;\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  width: 0;\n  border: 0.45 * @scale-factor solid transparent;\n  z-index: 1;\n}\n\n.react-datepicker__navigation--previous {\n  left: 10px;\n  border-right-color: #ccc;\n}\n\n.react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--next {\n  right: 10px;\n  border-left-color: #ccc;\n}\n\n.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button) {\n  right: 80px;\n}\n\n.react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years {\n  position: relative;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__navigation--years-previous {\n  top: 4px;\n  border-top-color: #ccc;\n}\n\n.react-datepicker__navigation--years-previous:hover {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years-upcoming {\n  top: -4px;\n  border-bottom-color: #ccc;\n}\n\n.react-datepicker__navigation--years-upcoming:hover {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__month-container {\n  float: left;\n}\n\n.react-datepicker__month {\n  margin: 0.4 * @scale-factor;\n  text-align: center;\n}\n\n.react-datepicker__time-container {\n  float: right;\n  border-left: 1px solid #aeaeae;\n}\n\n.react-datepicker__time-container--with-today-button {\n  display: inline;\n  border: 1px solid #aeaeae;\n  border-radius: .3 * @scale-factor;\n  position: absolute;\n  right: -72px;\n  top: 0;\n}\n\n.react-datepicker__time-container .react-datepicker__time {\n  position: relative;\n  background: white;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n  width: 70px;\n  overflow-x: hidden;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n  list-style: none;\n  margin: 0;\n  height: calc(195px + (1.7 * @scale-factor / 2));\n  overflow-y: scroll;\n  padding-right: 30px;\n  width: 100%;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n  padding: 5px 10px;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover {\n  cursor: pointer;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected {\n  background-color: #216ba5;\n  color: white;\n  font-weight: bold;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover {\n  background-color: #216ba5;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled {\n  color: #ccc;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover {\n  cursor: default;\n  background-color: transparent;\n}\n\n.react-datepicker__week-number {\n  color: #ccc;\n  display: inline-block;\n  width: 1.7 * @scale-factor;\n  line-height: 1.7 * @scale-factor;\n  text-align: center;\n  margin: 0.166 * @scale-factor;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable {\n  cursor: pointer;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable:hover {\n  border-radius: 0.3 * @scale-factor;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day-names, .react-datepicker__week {\n  white-space: nowrap;\n}\n\n.react-datepicker__day-name,\n.react-datepicker__day, .react-datepicker__time-name {\n  color: #000;\n  display: inline-block;\n  width: 1.7 * @scale-factor;\n  line-height: 1.7 * @scale-factor;\n  text-align: center;\n  margin: 0.166 * @scale-factor;\n}\n\n.react-datepicker__day {\n  cursor: pointer;\n}\n\n.react-datepicker__day:hover {\n  border-radius: 0.3 * @scale-factor;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day--today {\n  font-weight: bold;\n}\n\n.react-datepicker__day--highlighted {\n  border-radius: 0.3 * @scale-factor;\n  background-color: #3dcc4a;\n  color: #fff;\n}\n\n.react-datepicker__day--highlighted:hover {\n  background-color: #32be3f;\n}\n\n.react-datepicker__day--highlighted-custom-1 {\n  color: magenta;\n}\n\n.react-datepicker__day--highlighted-custom-2 {\n  color: green;\n}\n\n.react-datepicker__day--selected, .react-datepicker__day--in-selecting-range, .react-datepicker__day--in-range {\n  border-radius: 0.3 * @scale-factor;\n  background-color: #216ba5;\n  color: #fff;\n}\n\n.react-datepicker__day--selected:hover, .react-datepicker__day--in-selecting-range:hover, .react-datepicker__day--in-range:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--keyboard-selected {\n  border-radius: 0.3 * @scale-factor;\n  background-color: #2a87d0;\n  color: #fff;\n}\n\n.react-datepicker__day--keyboard-selected:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range) {\n  background-color: rgba(33, 107, 165, 0.5);\n}\n\n.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range) {\n  background-color: #f0f0f0;\n  color: #000;\n}\n\n.react-datepicker__day--disabled {\n  cursor: default;\n  color: #ccc;\n}\n\n.react-datepicker__day--disabled:hover {\n  background-color: transparent;\n}\n\n.react-datepicker__input-container {\n  position: relative;\n  display: inline-block;\n}\n\n.react-datepicker__year-read-view,\n.react-datepicker__month-read-view {\n  border: 1px solid transparent;\n  border-radius: 0.3 * @scale-factor;\n}\n\n.react-datepicker__year-read-view:hover,\n.react-datepicker__month-read-view:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  border-top-color: #ccc;\n  float: right;\n  margin-left: 20px;\n  top: 8px;\n  position: relative;\n  border-width: 0.45 * @scale-factor;\n}\n\n.react-datepicker__year-dropdown,\n.react-datepicker__month-dropdown {\n  background-color: #f0f0f0;\n  position: absolute;\n  width: 50%;\n  left: 25%;\n  top: 30px;\n  z-index: 1;\n  text-align: center;\n  border-radius: 0.3 * @scale-factor;\n  border: 1px solid #aeaeae;\n}\n\n.react-datepicker__year-dropdown:hover,\n.react-datepicker__month-dropdown:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-dropdown--scrollable,\n.react-datepicker__month-dropdown--scrollable {\n  height: 150px;\n  overflow-y: scroll;\n}\n\n.react-datepicker__year-option,\n.react-datepicker__month-option {\n  line-height: 20px;\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__year-option:first-of-type,\n.react-datepicker__month-option:first-of-type {\n  border-top-left-radius: 0.3 * @scale-factor;\n  border-top-right-radius: 0.3 * @scale-factor;\n}\n\n.react-datepicker__year-option:last-of-type,\n.react-datepicker__month-option:last-of-type {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border-bottom-left-radius: 0.3 * @scale-factor;\n  border-bottom-right-radius: 0.3 * @scale-factor;\n}\n\n.react-datepicker__year-option:hover,\n.react-datepicker__month-option:hover {\n  background-color: #ccc;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-option--selected,\n.react-datepicker__month-option--selected {\n  position: absolute;\n  left: 15px;\n}\n\n.react-datepicker__close-icon {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: inline-block;\n  height: 0;\n  outline: 0;\n  padding: 0;\n  vertical-align: middle;\n}\n\n.react-datepicker__close-icon::after {\n  background-color: #216ba5;\n  border-radius: 50%;\n  bottom: 0;\n  box-sizing: border-box;\n  color: #fff;\n  content: \"\\00d7\";\n  cursor: pointer;\n  font-size: 12px;\n  height: 16px;\n  width: 16px;\n  line-height: 1;\n  margin: -8px auto 0;\n  padding: 2px;\n  position: absolute;\n  right: 7px;\n  text-align: center;\n  top: 50%;\n}\n\n.react-datepicker__today-button {\n  background: #f0f0f0;\n  border-top: 1px solid #aeaeae;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0;\n  clear: left;\n}\n\n.react-datepicker__portal {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  z-index: 2147483647;\n}\n\n.react-datepicker__portal .react-datepicker__day-name,\n.react-datepicker__portal .react-datepicker__day, .react-datepicker__portal .react-datepicker__time-name {\n  width: 3 * @scale-factor;\n  line-height: 3 * @scale-factor;\n}\n\n@media (max-width: 400px), (max-height: 550px) {\n  .react-datepicker__portal .react-datepicker__day-name,\n  .react-datepicker__portal .react-datepicker__day, .react-datepicker__portal .react-datepicker__time-name {\n    width: 2 * @scale-factor;\n    line-height: 2 * @scale-factor;\n  }\n}\n\n.react-datepicker__portal .react-datepicker__current-month, .react-datepicker__portal .react-datepicker-time__header {\n  font-size: 1.44 * @scale-factor;\n}\n\n.react-datepicker__portal .react-datepicker__navigation {\n  border: 0.81 * @scale-factor solid transparent;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next {\n  border-left-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n```\n\n\n\n. Applications might need to do an operation on each visible day. For example, if I were building a reservation system and choose to highlight days with empty reservations in green, it would be useful to have this list of visible dates so I can check availability on every day. This list of days will not change if the user selects a day within February but will change when any of the January or March days are clicked. . You claim that you can pass in the entire list. How could I do this then? I couldn't find an example. . Same issue here. \n<DatePicker selected={this.state.date} onChange={this.updateDate} dayClassName={date => date.date() < Math.random() * 31 ? 'random' : undefined}/>\nIs the code I used from the example.. Ah, I did some digging around and realized that I was using an earlier version of react-datepicker. Using v0.5.0 solved my issue. . ",
    "HSpens": "Thanks @localjo for the CSS. I'm using the react-datepicker with the \"showTimeSelect\" argument and had to add some CSS to properly display it. I'm using:\n```\n.react-datepicker { font-size: 1em !important }\n.react-datepicker__header { padding-top: 0.8em !important}\n.react-datepicker__month { margin: 0.4em 1em !important}\n.react-datepicker__day-name, .react-datepicker__day {\n  width: 1.9em !important; \n  line-height: 1.9em !important;\n  margin: 0.166em !important;\n}\n.react-datepicker__current-month { font-size: 1em !important }\n.react-datepicker__navigation {\n  top: 1em !important;\n  line-height: 1.7em !important;\n  border: 0.45em solid transparent !important;\n}\n.react-datepicker__navigation--previous { border-right-color: #ccc !important; left: 1em !important }\n.react-datepicker__navigation--next { \n  border-left-color: #ccc !important; \n  right: 1em !important; \n  left: 220px !important \n}\n.react-datepicker__time-container { width: 6em !important}\n.react-datepicker-time__header { font-size: 1em !important }\n.react-datepicker-time__header--time { padding-left: 0px !important; padding-right: 0px !important }\n.react-datepicker__time-box { \n  margin-left: 0px !important; \n  margin-right: 0px !important; \n  width:100% !important\n}\n.react-datepicker__time-list { padding: 0 !important; }. ",
    "nzjamesk": "This is all great for styling the popup - Can anyone suggest which style to override if I want to change the size of the displayed date once the popup has closed? Ie the textbox left showing the selected date, when you have shouldCloseOnSelect set to true? My popup is fine, but the actual final text box showing the selected formatted date is too small for me. ",
    "Stanback": "Looks like this is still an issue, was able to avoid it by setting an openToDate prop. Seems like it might be related to the utcOffset handling but I'm not sure.. ",
    "romanveryovkin": "Hi guys, I have the same story...does anybody have a workaround here?. The same issue for me as well. Do anybody have some workarounds?. ",
    "mdo5004": "@vladimir-konnov Did not work in my case. It looks like the issue is with the time of day, however. For example, picking 02/02/2018 where I am gives me 02/01/2018 at 19:00:00 and I am GMT-0500. This means it's probably selecting 02/02/2018 at 00:00:00 and then accounting for the fact that I am 5 hours ahead of that.. ",
    "Definence": "@vladimir-konnov, works for me\nmoment.utc(date.valueOf() + date.utcOffset() * 60000). I have the same problem!!. ",
    "Kadrian": "I'm having the same issue, would highly appreciate if this would be fixed soon :-). Looking good to me! Is there anything else to be done / can I help somehow?. ",
    "ignatif": "@Kadrian \nWell, I guess the solution i've provided isn't most accurate one.\nIt looks more like a crutch.\nIf you can figure out how to fix it more \"pretty\" - you are welcome :). ",
    "mgrdevport": "Resolved by #702 ?. Resolved by #673 ?. The calendar will pop out again, because the input field of the datepicker regains focus (default browser behaviour), which triggers the open state.\nPossible solution:\nLet the calendar only pop out on click of the input element. \nBut then the calendar won't pop out on keyboard navigation. This could be solved by changing the default behaviour of e.g. the ArrowDown event (if calendar is not visible pop it out, otherwise add 1 week).\nI would submit a PR if it's ok to change the default behaviour.. The sinon function withArgs(args) has to be used on the spy creation.\nWorking:\njavascript\nvar callback = sinon.spy().withArgs(expectedDate)\n...mount...\nexpect(callback.calledOnce).to.be.true\nIf you want to create a generic spy:\njavascript\nvar callback = sinon.spy()\n...mount...\nexpect(callback.calledOnce).to.be.true\nexpect(callback.calledWithExactly(expectedDate)).to.be.true\nSometimes its even better to compare the arguments with equal to be able to lookup the expected and actual value on failure:\njavascript\nvar callback = sinon.spy()\n...mount...\nexpect(callback.calledOnce).to.be.true\nexpect(moment(callback.args[0][0]).format(dateFormat)).to.equal(expectedDate.format(dateFormat)). Any messages in the console?\nAny changes on the css definition?\nDoes the document contain any element like the following if the calendar is popped out?\nhtml\n<a class=\"react-datepicker__navigation react-datepicker__navigation--previous\">\nIs the following css definition present on the page?\ncss\n.react-datepicker__navigation--previous {\n    left: 10px;\n    border-right-color: #ccc;\n}\n.react-datepicker__navigation {\n    line-height: 1.7rem;\n    text-align: center;\n    cursor: pointer;\n    position: absolute;\n    top: 10px;\n    width: 0;\n    border: 0.45rem solid transparent;\n    z-index: 1;\n}. @martijnrusschen \nDone.. I'm working on a PR.\nI think we can remove the openToDate prop on the calendar due to the preSelection prop and move the validation, handling and test cases to the datepicker class.. I will do it on the next weekend, sorry for my late reply.. @vmiimu Did you provide the isWeekday function in your component?\njs\nisWeekday = (date) => {\n    const day = date.day()\n    return day !== 0 && day !== 6\n  }. @Frezzaldo So you want the user to enter \"30022017\" and the datepicker to format it as \"30/02 2017\"? You could try to achieve that behavior by using the onChangeRaw property.\n```js\nimport moment from 'moment';\n// Your custom transformation/validation\nmyCustomFunction = (rawValue) => {\n  const parsedDate = moment(rawValue, \"DDMMYY\")\n  if(parsedDate.isValid()) {\n    this.setState({selectedDate: parsedDate});\n  }\n}\nrender() {\n  \n      this.myCustomFunction(event.target.value)}\n  />\n}\n```. @Frezzaldo I've created a pr to solve your issue, but it may cause side effects that I'm not aware of. So let's see, what the maintainers are saying.. @martijnrusschen See my latest commit, I've upgraded sinon and enzyme to the latest version to be compatible to the newer react 15.5 version. I think it's fine now.. I only had a windows machine to build at this time and cross-env enabled me to set the env-param there. You don't need it on unix systems, but on windows the npm scripts would fail -> I've removed the dependency and restored the old scripts.. @aij Good point, I will work on this later.. ",
    "fxfilmxf": "Fixed in v0.35.0. I verified that this test fails without the fix.. I don't know if this comment is helpful or not.. ",
    "subuta": "Latest example contains popperPlacement example. It might work for you guys!\nhttps://hacker0x01.github.io/react-datepicker/\njsx\n<DatePicker\n    selected={this.state.startDate}\n    onChange={this.handleChange}\n    popperPlacement=\"top-end\"\n    popperModifiers={{\n      offset: {\n        enabled: true,\n        offset: '5px, 10px'\n      },\n      preventOverflow: {\n        enabled: true,\n        escapeWithReference: false, // force popper to stay in viewport (even when input is scrolled out of view)\n        boundariesElement: 'viewport'\n      }\n    }}\n/>\nThese values are valid for popperPlacement :)\njs\nexport const popperPlacementPositions = [\n  'auto',\n  'auto-left',\n  'auto-right',\n  'bottom',\n  'bottom-end',\n  'bottom-start',\n  'left',\n  'left-end',\n  'left-start',\n  'right',\n  'right-end',\n  'right-start',\n  'top',\n  'top-end',\n  'top-start'\n]\nhttps://github.com/Hacker0x01/react-datepicker/blob/c179eecbe80885e410e4d8e2a7d776c0e7f644ef/src/popper_component.jsx#L5. ",
    "iisa": "hi, wanted to check in. Really love this datepicker, though it seems that the popperPlacement is not working. Not even in the demo. if you scroll the popperPlacement example a lil higher than the midline of the window, it will drop below the input. ",
    "caitlin": "The popper position seems to work fine for me, but the triangle isn't scooting over to the other side (for bottom-end). It looks like the CSS in react-datepicker.css is missing special styles for \"end\".. ",
    "carmouche": "I was experiencing the same thing as @iisa.\nAfter a ton of searching, it seems that you need to set the flip modifier to enabled: false to prevent it from flipping when it reaches the boundaries of the page. \nhttps://popper.js.org/popper-documentation.html#modifiers..flip\nI updated my props to:\n<DatePicker\n  popperPlacement=\"botom-start\"\n  popperModifiers={{\n    flip: {\n      enabled: false\n    },\n    preventOverflow: {\n      enabled: true,\n      escapeWithReference: false\n    }\n  }}\n/>\n. Figured it out!  Looking through the code, I found a prop called useWeekdaysShort that does what I'm looking for.  The name is somewhat misleading though haha\n<DatePicker useWeekdaysShort={true} />. ",
    "evepen1": "Facing the same issue with react-datepicker placed on top-right corner of the screen.\nThe below CSS code worked for me check it out: \n.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle {\n    margin-left: 8em; \n}. ",
    "canhoviet": "Basically, @carmouche 's solution works. However, when it comes into time picker, it doesn't work correctly: the time picker is still hidden (see red rectangle at the top right)\n\nThis is b/c the time container element is positioned as absolute and thus taken out of the normal flow. Therefore, the popper only takes date (in red)\n\n container's width into account.\nModifying the CSS may solve the issue but it has the risks of introducing other regression issues if not careful.\n. ",
    "dvdgarcia": "Same error here. I think we should be able to overwrite the onFocus like with onBlur or onChange.\nI noticed that if I call the e.preventDefault in my own onBlur, i have not this error, but I lose the dateValidation.\nSo I think that if we use a customInput, we should have the focus event inside our component and we decide if we focus or not, for example in my case I have to change the focus to other element once I selected a date.. +1 The issue as well happens without setting the offset.\nFor example if in excludeDates a I exclude tomorrow and next tomorrow when I open the datepicker I see today and tomorrow disabled, then I select next tomorrow, the date picker is closed I open again and I see what I was expecting originally(tomorrow and next tomorrow disabled, and yes as date selected I have nextTomorrow xD )\nOn my case I have the version 0.39.0\n<DatePicker dateFormat=\"DD/MM/YY\"\n minDate={moment()} \nclassName=\"form-control\" \nselected={this.props.value ? moment.unix(this.props.value) : null} \nplaceholderText={this.props.placeholder} \nonChange={::this.handleChange}\nexcludeDates={this.props.excludeDates?this.props.excludeDates:[]}/>\n. I am in Spain so Madrid+1.\nI have to say that I achieved a way for working, if selected value is not null works fine. So the bug is this one:\nwith this implementation with excludedDates in the same UTC offset:\n<DatePicker dateFormat=\"DD/MM/YY\"\n minDate={moment()} \nclassName=\"form-control\" \nselected={this.props.value ? moment.unix(this.props.value) : null} \nplaceholderText={this.props.placeholder} \nonChange={::this.handleChange}\nexcludeDates={this.props.excludeDates?this.props.excludeDates:[]}/>\nI open the date picker and the dates excluded are wrong, I select one, the datepicker is closed, then I open it again and I see the disabled dates as I wanted originally.\nSo I tried to do this implementation:\n```\n\n```\nI initialize the selected value with moment() and it works perfect. I see the disabled dates that I send as paramter\nIn my case I don't wanna initialize the date picker but I will do if I have not other option..\n. ",
    "seafarring13": "We are looking for this update as well. We had to use a custom input for layout/styling requirements and also see this error being thrown.. ",
    "crabicode": "No updates? . ",
    "stamkov-sc": "You can fix error if overwrite onBlur event in custom input  like <input type=\"text\" onBlur={()=>{}}/>. ",
    "gigaga": "@stamkov-sc Does not work for me... :(\n@jochenberger OK for me :). ",
    "janhartmann": "Verified custom text input does throw this error. ",
    "kcabading": "Found out that this is because of the component sizes are set in rem units. \nSee https://github.com/Hacker0x01/react-datepicker/issues/624 for workarounds.. ",
    "reznord": "@martijnrusschen I am still getting the same issue with the latest version as well.\nPackage versions: \nreact: 15.4.1\nreact-datepicker: 0.37.0\n\n. ",
    "jonnetanninen": "I have the same issue while using react-datepicker inside redux-form. The issue doesn't happen when first selecting the date, but only onBlur.\nreact: 15.1.0\nreact-datepicker: 0.39.0\nHere's my wrapper component to make the DatePicker work with redux-form's Field component:\nconst CustomizedDatePicker = ({input, placeholder, defaultValue, meta: {touched, error} }) => (\n  <div>\n     <DatePicker {...input} dateFormat=\"DD/MM/YYYY\" selected={input.value ? moment(input.value) : null} />\n    {touched && error && <span>{error}</span>}\n  </div>\n);\nAnd here I pass it to the Field component:\n<Field name=\"startDate\" component={CustomizedDatePicker} />. ",
    "STEVEOO6": "Just wanted to flag that to use a dateFormat format that differs from the format i'm using to store the value (in redux state), i needed to override the onBlur property to ignore it's input parameter, as per http://redux-form.com/6.4.3/examples/react-widgets/.\nFor example (in my state I store the date in YYYY-MM-DD format but I want it displayed to the user in DD/MM/YYYY format):\nconst FilterDeliveryDateField = field => (\n    <div>\n        <FilterDeliveryDate {...field.input} onBlur={() => field.input.onBlur()} />\n        {field.meta.touched && field.meta.error && \n        <span className=\"error\">{field.meta.error}</span>}\n    </div>\n)\nAND\n```\nconst parseStateToValue = state => moment(state, 'YYYY-MM-DD')\nconst formatValueToState = value => value.format('YYYY-MM-DD')\nconst FilterDeliveryDate = ({name, value, onChange, ...props}) => (\n     onChange(formatValueToState(value))}\n        {...props}\n        minDate={props.minDate || moment()}\n        />\n)\n```. ",
    "jackhamburger": "I will make a PR for this. ",
    "meganhumphreys": "Good day everyone! - I'm having this issue wrt to version \"react-datepicker\": \"^0.53.0\"\nMy code:\n```\n {\n                        var date = event.format('DD/MM/YYYY')\n                        this.props.inputChanged(date)\n                        this.props.inputSubmit()\n                    }}\n                    minDate={moment().subtract(100, \"years\")}\n                    maxDate={moment().add(1, \"years\")}\n                    dateFormatCalendar={'MMMM'}\n                    showYearDropdown\n                    scrollableYearDropdown\n                    yearDropdownItemNumber={50}\n                    locale={locale.locale}\n                    calendarClassName=\"rootCalendar\"\n                />\n```\nI'd really appreciate any assistance I can receive regarding this.\nThe expected behaviour:\nThe user can't see years beyond 2018 and before 100 years ago\nThe behaviour:\nThe yearDropdownItemNumber sets the years selectable in the drop down from 50 years in the past to 50 years in the future. I'd rather have a scrollable set than make the user hit the arrows in the scroll to go to previous years.\nI really enjoyed having this datepicker available and appreciate all the hard work you guys have done! With kind regards!. ",
    "valdemars": "Will be useful for month navigation. ",
    "dutchakdev": "+1. ",
    "intpp": "@martijnrusschen Why you ignore my PR?. ",
    "gazpachu": "@martijnrusschen I've forked the repo and when I was going to add it, it was already there O_O. I'm not sure why is not appearing in my app.\n\n. I've also noticed that, when creating two datepickers and set them as a range (like in example 12), after both dates are set, if I alter the end date to an earlier date than the start date, then the start date doesn't update itself automatically like in the example.\nI've fixed it like this:\nchangeEndDate(date) {\n        this.setState({ endDate: date }, function() {\n            // If we change the end date to a previous date than the start date, then update the start date\n            if (moment(this.state.endDate).isBefore(moment(this.state.startDate))) {\n                this.setState({ startDate: moment(this.state.endDate) }, function() {\n                    this.addFilter('timeframe', 'date_range', '');\n                });\n            }\n            else {\n                this.addFilter('timeframe', 'date_range', '');\n            }\n        });\n    }. ",
    "mnbucher": "Also had this issue... adding  .react-datepicker__navigation { \nz-index: 1 \n}  solved the problem for me. . ",
    "innopal": "Not sure why this is closed!\nThe suggested answer by @jochenberger compromises the accessibility of the bootstrap modal.\nIs there any other solution other than turning off enforceFocus?\nCheers. ",
    "lbelinsk": "I have encountered this issue also on my end...\n. @benbcai I guess this isn't relevant anymore :). I am waiting for this pr to be merged because of react-modal problem with additional components that have this ref style.\nhttps://github.com/reactjs/react-modal/issues/472. Thanks :)\nThis is from wix-style-react: https://wix.github.io/wix-style-react/?selectedKind=Core&selectedStory=DatePicker&full=0&down=0&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel. The design is not completely ready yet, it is a work in progress, but let me know how would you like us to contribute.\nReturning to topic, we really need this feature so hopefully I will get an answer for that as well.\ntnx. I agree - \ndefaultProps.shouldCloseOnSelect = true\nCool, I will  prepare a pr then... Pr is ready :)\n992 . Thanks, that was quick!\nAny estimation when a new version will be released?. @martijnrusschen is it ok to start working on that?. Actually after this discussion, we kind of agreed that the css solution might be better than our original idea.\nWe added it in our code:\n\nhttps://github.com/wix/wix-style-react/commit/b5649904798f25ed5fbad363ee6d3ef868542159\nMaybe this code snippet can be added here and the prop hideHeader can affect the css classes, instead of doing it in our code..\n@justame @martijnrusschen wdyt?. Cool, we will take care of it next week, we have a holiday here until Sunday :). @aij Since there are a lot of users for this library, we didn't want to break any existing behavior.\nWe have 3 interesting events:\n1. constructor: state.open will be initialized by the props.isOpen value (which is false by default).\n2. user did focus / blur: this.setOpen will take care of the state and will call the props.setOpen callback to allow the user to change the props.isOpen.\n3. User passed a different props.isOpen: We handle this case in componentWillReceiveProps and call this.setOpen.\nSo in each case, we make sure the state and the prop are in correlation. The \"react way\" will be to delete the state.open boolean, and to work only with the props.isOpen, but we should remember to have backward compatibility. \nThis is our solution, but there is an alternative one, like you suggested, to completely ignore the state.open if the props.isOpen was given.\nI personally like the first solution better, but we are open for discussion.. As @GBT3101 said before, we will go with the approach you will see best. \nI care enough about this component, so I will just raise some final concerns:\n\n\nThe user would have to pass onFocus as props. This callback will have to modify the external state. It will be called here:\nhttps://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L176-L180\n\n\nThe user would have to pass onBlur as props. This callback will have to modify the external state. It will be called here:\nhttps://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L197-L202\n\n\nIMHO, It feels like the user has too much control in his hands like he has 2 separated components, Calendar popup and an input which he needs to sync together from scratch.\nOther than that, the user can decide to modify the external state with \"onSelect\" or \"onChange\" callbacks, which is fine.\nPlease let us know what is the final solution. We will make sure to implement it tomorrow according to your decision.\nThanks for the quick responses, it is really appreciated.\n. @micahalcorn we have discussed about 2 possible solutions:\n\n\nKeep the current \"uncontrolled\" behavior but also allow add isOpen and setOpen props that would allow you to control the state of the calendar and keeping the state.open and props.isOpen synced. It means that as long as you won't provide these new props then everything will work normally, but when you do provide the new props then the control is in your hands by implementing the callback function to hide or show the calendar. It will update the inner state of the component as well. You won't have to take care of the obvious behavior of showing and hiding the calendar on focus and blur respectively.\n\n\nThe solution, which sounds like we are going to implement soon since the first approach was not approved here, is making the component support 2 modes: controlled and uncontrolled. It means that by passing the new props the component will no longer work with its internal state.open, and instead will only listen to the new prop which would get updated by the callback the user will pass.\nSo the user would have to also take care of onFocus and onBlur events to hide and close the calendar. so you basically going to get all or nothing.\n\n\n@rafeememon @aij can you confirm that the desired solution is the second one? \n@GBT3101 and I will take care of it hopefully this week (we had a lot of holidays here during the past few weeks :)). @aij thanks for your response.\nI will start from the beginning in order to explain our motivation. We needed to allow opening and closing the calendar not by focusing on the input (that's all :)).\nUse case:\nActually, the CCAP example is pretty similar to out usage. \nA form which has a checkbox \"Today\" and if you uncheck it then you will be requested to insert some other date. By unchecking this checkbox, a date-picker is being rendered and we wanted it to be rendered with an open calendar. So basically the \"onClick\" of the checkbox should open the calendar.\nWe implemented it on our side by placing ref prop on the react-date-picker and calling ref.setOpen(true||false). Of course It worked, but we felt maybe this is not exactly the \"react way\". In React the data flow is from top to bottom, and this approach kind of violates it.\nWe have a closed pr for that and I can share a link if it will be relevant.\nRegarding this comment:\n\n@lbelinsk I was thinking closer to 1, but making it so props.isOpen would actually allow you to control the state of the calendar. So the example in examples/set_open.jsx would stay the same, except that the opening and closing of the calendar would happen in response to the value of props.isOpen rather than in spite of it.\n\nWe thought about it in the beginning, but then we understood that there is one problem with this solution. Let's say we have a closed calendar. Now let's change props.isOpen to be true, and the calendar will be visible. Until here all good. Now let's say I clicked outside of the input, so now it got closed. Notice that the props.isOpen is still true, although the calendar is hidden. Now in order to open the calendar again with this prop, you can't really do anything since it's value is already true. You can change it to false and then again to true and this is the only way to open the calendar. This is not a nice solution. This is why we think the props.setOpen is needed. We can rename it of course.\n@aij I completely agree with you that it is similar to ref.focus() of input, but we try to avoid using it in general.\nThis is why we thought it will be nice to enrich the component with \"controlled calendar\".\nHaving read your comment, I am convinced that the option of using the ref.setOpen() is better than solution #2 that was suggested here. We would still prefer having our #1 suggestion, although it creates some confusion in the component's behavior and adds some complexity to the state management.\nHaving said that, You guys are the watchers over the wall, and if this solution is not the one you want to go with then let's just roll back to the existing solution ref.setOpen().\nWe can update only an example of examples/set_open.jsx and not to add any further changes.\n. Hey, so after this long conversation, what solution are we going to pursue?\n1. ref.setOpen(true||false) - We can add a usage example, but no code change is needed.\n2. props.isOpen and props.setOpen\n. Cool, so number 1 it is.... why do we need that?. I would add a test that checks that the header is visible by default, not only when you pass false. This is important because it will make sure we didn't change any behaviour by default. I think that since it is not a component like \"day\", \"week\", \"month\", a new file might not be needed, just add a describe block in the datepicker test. up to you... ",
    "josiahgallen": "I am also seeing the same issue, @lbelinsk how did you work around it?. Thanks @benbcai! I realized this after I posted the question.. ",
    "benbcai": "This issue should be resolved in the latest version. You can still use the arrows keys on the keyboard to navigate to the disabled dates but you can not select them.. @martijnrusschen @rafeememon I believe this was resolved by https://github.com/Hacker0x01/react-datepicker/pull/673 in version 0.41.0. Can this issue be closed?. @amit-coditas I still cannot get keyboard navigation to work for the inline picker and I think the reason is because there is no input to receive the onKeyDown event. However, I was able to get keyboard navigation to work for my custom input. I just had to add onKeyDown={this.props.onKeyDown} to my custom input.. Looks like this was introduced by https://github.com/Hacker0x01/react-datepicker/pull/721/ in version 0.41.0. \nThis line https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L275 still gets executed for 'Enter', 'Tab', or 'Escape' when it shouldn't and newSelection is never set to a valid date.\nMaybe this entire if block (https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L239-L276) should be an elseif block.. I am also seeing this warning in Devtools. I don't know if there is a problem in react-datepicker or in react itself. I'm using react 15.4.2. Anyone else having this issue and know what the cause is?. @Noitidart I don't think there is a way currently to disable only the left/right key navigation. If you would like to reserve the left/right arrow keys for moving the cursor position, you could use the disabledKeyboardNavigation prop but this would also disable the up/down key navigation.\nIf we do make a change to allow disabling only left/right and make up/down to do next/prev day, that seems counterintuitive to me as the up keep should move the day above the day currently in focus instead of moving it to the left.. I think this should be closed due to lack of description.. I'm switching from moment to date-fns and encountered the same issue. Take a look at https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg.. One way you could limit the years to show in the dropdown is to set the minDate and maxDate. See https://reactdatepicker.com/#example-35. @stepseazy Try changing your dateFormat to yyyy-MM-dd HH:mm and see if that fixes your issue. See https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md#popular-mistakes. @martijnrusschen Can you let me know your thought on this issue and pull request? This breaking change in V2 is a blocker for my team to upgrade to react-datepicker to V2.. @martijnrusschen The CI builds passed. Can you take a look at this? My team is in urgent need of this issue being fixed. Thanks!. @rafeememon react-datepicker V1.8.0 was still doing strictly parsing. This parsing/formatting behavior got changed starting in react-datepicker V2.0.0. This pull request basically changes it back to how it used to work before V2.\nIf you are concerned that this pull request would break existing react-datepicker V2.0.0 consumers, I'm fine adding a new prop to make this change truly passive.. @rafeememon and @martijnrusschen\nA prop named strictParsing has been added to this change. You may continue with this pull request review. . @rafeememon, @martijnrusschen Any additional feedback on this PR? This PR is blocking my team's project and would like to get this merged ASAP. Thanks!. ",
    "Vellames": "Someone can help me to? I have the same problem. ",
    "amityb": "You can do this externally to the react-datepicker component source code.  \nPlace your validation inside a function that is called in your render() function.  It can return the error message and validation state (invalid or valid).  Then you can conditionally render the error message in your render function.\n. Yes, UTC offsets are not constant for a given timezone.  I'm not exactly clear on how that applies to this commit.  Can you elaborate?. Removed locations from options labels in timezone example. As far as I can tell, codecov/patch check is failing because of a change to an import line.  I am unfamiliar as how to cover this.  I have written tests to cover the new object that was imported.  Can anyone explain how I'm supposed to improve coverage on an import line in order to get codecov/patch check to pass?  I don't know how to cover an import line.. ",
    "bcullman": "This might fix #699. This does indeed fix #699. Are the tests in the deleted file 'date_input_test.js' still valid for the datepicker? Should they be relocated?. If you want your users to only use the calendar control and not the input field, you need to use an alternate method for blocking text input - read-only has a defined meaning, per W3C - it specifies the value can not be edited by the user. see\nhttps://www.w3.org/TR/html401/interact/forms.html#adef-readonly. @pmacmillan - is this still on your radar?. fyi, we are using react-bootstrap for a lot of our UX, and they are still not ready for react v16, so dropping react-overlay Portal for React.createPortal at this time would be very hard to swallow.. Can we release a 0.56 for this fix?. looks like this is resolved with #1281 \ncan we merge?. @aij \n```\nThe browser focus actually needs to move from one control to the next so proper key handling can be achieved.\nI agree, though I will point out that from a UI perspective, the datepicker is one control...\n```\nAs soon as Hacker0x01 offered the datepicker with a date AND time control, it becomes 2 controls, because you cannot choose a date and time in a single selection.\nBecause of this, you need the ability to navigate between the date picker portion of the control and the timepicker portion of the control (which currently is inaccessible - see #1370). Tab would be ideal for this, but currently it is tied to the field.\nOpening a calendar control via a button, allows the controls for the calendar and the time to be focus-trapped, where the tab key can toggle between setting the date, and setting the time. And, perhaps in a later iteration, setting the date, hour, minute, second, and am/pm).\nWe can retain the existing keyboard navigation for when we are just dealing with a date, but when a date and time are involved, you NEED the ability to tab between setting each independently.\n. If you want your users to only use the calendar control and not the input field, you need to use an alternate method for blocking text input - read-only has a defined meaning, per W3C - it specifies the value can not be edited by the user. see\nhttps://www.w3.org/TR/html401/interact/forms.html#adef-readonly. If you want your users to only use the calendar control and not the input field, you need to use an alternate method for blocking text input - read-only has a defined meaning, per W3C - it specifies the value can not be edited by the user. see\nhttps://www.w3.org/TR/html401/interact/forms.html#adef-readonly. There is also an accessibility concern here. readonly is announced by screen readers and other assistive technologies. \nIf you are allowing editing via the datepicker when it is set readonly, you are creating an inaccessible experience. Users with screen readers will be told the field is readonly and will have no incentive to explore using the supplied datepicker.. Question: Could these peerDeps have remained at ^0.14.0 || ^15.0.0 || ^16.0.0\"?. ",
    "Robinfr": "Thanks for implementing this.. Uhm, not really, it literally happens simply by using React 15.4.2 and the latest react-datepicker.. I tried to create a fiddle but I cannot get it working properly.\nMaybe someone else can get it working without the React errors? https://jsfiddle.net/7g5e58s2/1/. ",
    "tzookb": "@rafeememon  thanks!\nshould I do like that: \nimport \"react-datepicker/dist/react-datepicker.css\";\n\nI simply get the html but with no design :/. my webpack config:\n```\n/ eslint-disable no-undef /\nvar path = require(\"path\");\nvar webpack = require(\"webpack\");\nvar HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar pkg = require(\"./package.json\");\nmodule.exports = {\n    eslint: {\n        emitError: true,\n        configFile: \".eslintrc.json\",\n        failOnError: false\n    },\n    entry: {\n        app: [\n            \"babel-polyfill\", \"./src/App.jsx\"\n        ],\n        vendor: Object.keys(pkg.dependencies)\n    },\n    output: {\n        path: './dist',\n        filename: '/[name].bundle.js'\n    },\n    externals: {\n        \"bundle!semantic-theme\": \"semantic-theme\"\n    },\n    devtool: \"source-map\",\nresolve: {\n    root: [\n        path.resolve(\"./semantic/dist\"), path.resolve(\"./src\"), path.resolve(\"./src/assets\"), path.resolve(\"./src/components\")\n    ],\n    extensions: [\"\", \".webpack.js\", \".web.js\", \".js\", \".jsx\"]\n},\n\nplugins: [\n    new webpack.optimize.CommonsChunkPlugin('vendor', '/[name].bundle.js'),\n    new HtmlWebpackPlugin({title: \"mediaQrator\", filename: \"index.html\", template: \"src/index.html\"}),\n    // new ExtractTextPlugin(\"styles.css\")\n],\n\nmodule: {\n    loaders: [\n        {\n            test: /.json$/,\n            loaders: [\"json\"]\n        }, {\n            test: /\\.jsx?$/,\n            loader: \"babel-loader\",\n            include: path.resolve(__dirname, \"src\")\n        }, {\n            test: /\\.(png|jpg)$/,\n            loader: \"file-loader?name=/images/[name].[ext]\"\n        }, {\n            test: /\\.(woff2?|eot|ttf)$/,\n            loader: \"file-loader?name=/fonts/[name]_[hash:base64:6].[ext]\"\n            //exclude: /semantic/\n        }, {\n            test: /\\.css$/,\n            loader: \"style-loader!css-loader?module=true&importLoaders=1&localIdentName=[name]_[local]_[hash:base64:5]\",\n            exclude: /semantic/\n        }, {\n            test: /semantic.*\\.css$/,\n            loader: \"style-loader!css-loader?importLoaders=1\" //Make sure module=true is not enabled to avoid local:: styles\n        }, {\n            test: /\\.svg$/,\n            loader: \"url-loader?limit=10000&mimetype=image/svg+xml\"\n        }\n    ],\n\n    preLoaders: [\n        {\n            test: /\\.jsx?$/,\n            loader: \"eslint-loader\",\n            exclude: /node_modules/\n        }, {\n            test: /\\.js$/,\n            loader: \"source-map-loader\"\n        }\n    ]\n},\n\ndevServer: {\n    port: 3000\n}\n\n};\n```. ",
    "benmratner": "I'm actually having this same problem. It loads the datepicker styles if you remove the modules argument from the css loader.  So:\n{\n        test: /\\.css$/,\n    loader: 'style!css',\n}\nThis isn't really a fix though, since now we can't use css-modules anywhere else in the project. . You're right - the css class names get changed when loaded with the modules flag on. I took your suggestion and attempted:\n{\n                test: /react-datepicker\\.css$.*$/,\n                loader: 'style!css',\n            },\n{\n                test: /\\.css$/,\n                loader: 'style!css?sourceMap&modules&localIdentName=[name]__[local]___[hash:base64:5]',\n            }\nWhich appeared to grab just the datepicker css file, but then gave me this error: \nERROR in ./~/css-loader!./~/style-loader!./~/css-loader?sourceMap&modules&localIdentName=[name]__[local][hash:base64:5]!./~/react-datepicker/dist/react-datepicker.css\nModule build failed: CssSyntaxError: /css-loader!/.../nodemodules/style-loader/index.js!/.../node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name][local]___[hash:base64:5]!/.../node_modules/react-datepicker/dist/react-datepicker.css:5:1: Unknown word\n3 | // load the styles\n4 | var content = require(\"!!./../../css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]___[hash:base64:5]!./react-datepicker.css\");\n5 | if(typeof content === 'string') content = [[module.id, content, '']];\n|           ^\n6 | // add the styles to the DOM\n7 | var update = require(\"!./../../style-loader/addStyles.js\")(content, {});\nAny ideas?. Tried this:\n{\n                test: /react-datepicker\\.css$.*$/,\n                loader: 'style!css',\n            },\n{\n                test: /^(?!^react-datepicker)(?=.*\\.css$).*$/,\n                loader: 'style!css?sourceMap&modules&localIdentName=[name]__[local]___[hash:base64:5]',\n            },\nSame error though.. @rafeememon So that error is actually in style loader, and it appears that webpack is grabbing the datepicker css file twice like you said, despite the regex telling it not to. I ended up just scrapping css modules from that webpack loader, and I'm using it only when the file is .scss, which I was already using anyway. Not really a fix, but maybe helpful for future debuggers?. ",
    "alex-cory": "Ugh, this is the most used date picker. Why does it not already work with css-modules.... Ohhh.... You don't support css modules.. ok\nAnd this issue seems to be in the workings here https://github.com/Hacker0x01/react-datepicker/issues/678. ",
    "fresk-nc": "\ud83d\udc4d . fixes #793 . done. ",
    "The-Code-Monkey": "this is something im looking into too and it would be so much smoother to be able to do that rather than 2 boxes\n. ",
    "travisbt": "You have to focus.  Could possibly work on PR to make the open state prop passed in or exposed using a new method.. @martijnrusschen I can also update the refs into the preferred ref usage in another PR, per https://facebook.github.io/react/docs/refs-and-the-dom.html. . ",
    "mir3z": "@alex-shamshurin It is but setOpen is not documented in API so i treat it like a workaround or hack rather than a public API method.. See https://hacker0x01.github.io/react-datepicker/#example-16\nDatepicker uses tether.io to position popover. You are looking for popoverAttachment, popoverTargetAttachment, popoverTargetOffset props.. ",
    "L-u-k-e": "@alex-shamshurin It's generally considered bad practice to use the _ prefixed methods as they're meant to be private and are subject to change between releases.. @alex-shamshurin oops I see that now. Sorry. \nI wonder why setOpen isn't documented. Perhaps a separate issue should be opened to wrote docs for it.. ",
    "serkolch": "This really needs to be documented, I shouldn't have to go to the third page of issues in order to find this...\nAt the very least, a reference to this issue in the main .md\nThat aside, this is awesome!. Hey! I was trying this out earlier and noticed that too - if I passed an element in with className, the html would show a class attribute with nothing else there.\nIn my case, I was just passing in a render function into customInput such as\n```\nrender () {\n    return \n}\nrenderInput () {\n    return ;\n}\n```\nI was able to get the classes to work when I took the custom input out of the React class and into its own CustomInput component. Hope that helps!. ",
    "poohsen": "the workaround doesn't work for me with v0.53.0.\nThe customInput line gives me a \nexpected a string (for built-in components) or a class/function (for composite components) but got: undefined.\nand setOpen gives \nCannot read property 'setOpen' of undefined\nAny ideas are appreciated...\nEDIT:\nSeems I was confused as to what the this keyword was referring to in this case. It worked with a helper method outside the return method.\nThe customInput part is still borked, though.. ",
    "danwild": "I'm a react/redux newb - so didn't immediately understand how the setOpen method might be exploited to wire up to redux.\nHere's how I got the React parts to work for anyone else with same issue:\nCreate a ref to the calendar in your components constructor:\njavascript\nthis.calendarRef = React.createRef();\nAttach the ref to your calendar:\n<DatePicker ref={this.calendarRef} />\nThen you can use the ref to trigger the setOpen method:\n<button onClick={() => {this.calendarRef.current.setOpen(true)}}>\n  Open sesame\n</button>. ",
    "cnolimit": "Had to update the react-datepicker/dist/react-datepicker.css file to achieve the behaviour that i wanted. would be good to be able to target the parent and apply styles.. thanks thats exactly what i was looking for, i must of scrolled past it when i checked the examples \ud83d\ude48 @mir3z. ",
    "Aarbel": "any news about it ? . @martijnrusschen @RSO @rafeememon when could we include this simple feature ? . i think it will take a long time for me to make a clean PR, so better to fix by main contributors :+1: . i'm not working on it right now, not the time those days. hi gomo, did you found a way to do it ? . ",
    "CaitlinWeb": "@Aarbel You can use the prop calendarClassName, eg:\njsx\n<DatePicker calendarClassName=\"custom-class-name\" />\nLooks like it has been supported for some time as of #715.. Can you use the inline prop for your case? That shows the calendar, though without an input.. ",
    "omjokine": "@martijnrusschen are you planning to release this?. ",
    "flanamacca": "Has this been released?. ",
    "frontsideair": "It's been a year and my suggestion has emerged as a pattern called \"render props\". But this requires a lot of effort to refactor, which I can't do right now. Feel free to close or promote to a feature request with a help wanted tag.. ",
    "brennowilliam": "Hi guys, I've been wanting to contribute to this project. Can I try to tackle this feature?\nIf so, could you provide me some guidance?. ",
    "leomyth330": "withPortal works great on desktop browser.\nWhen I test on mobile, it doesn't prevent outside touch events and if I click button behind overlay, it's click event works.\nAnd browser console says Unable to preventDefault inside passive event listener invocation.. ",
    "bshirah89": "Question Is there a way to customize the class of 'react-datepicker__portal', I am trying to lighten up the overlay for my use case.. ",
    "komlanvi": "Your suggestion work when the user can't change the month like in the example on the main website.\n\nBut in my case the user must also be able to change the month. Maybe I misunderstood some point ??\n. Yes that's partially what I tried to explain but I did not explain myself well. The goal is to disable (not only style) the next and prev month days from the monthly view.. ",
    "amajor": "I've been able to detect which month the user is viewing by passing a function in to the onMonthChange prop for the date picker.\nI initialize a state, monthBeingViewed, as 'current', then in handleMonthChange() I check to see which month is being viewed and compare it with the current month to tell where I am in the calendar, setting my state to reflect what I need to know.\nSo something like this:\njavascript\nhandleMonthChange(monthBeingViewed) {\n    const currentMonth = moment();\n    if (monthBeingViewed.isSame(currentMonth, 'month')) {\n        this.setState({ monthRelation: 'current' });\n    } else if (monthBeingViewed.isAfter(currentMonth, 'month')) {\n        this.setState({ monthRelation: 'future' });\n    } else {\n        this.setState({ monthRelation: 'past' });\n    }\n}\nYou can compare it to the current month using isBefore(), isSame(), etc.\nAnd then in the date picker that you're rendering...\njavascript\nrender() {\n    return (\n        <DatePicker\n            onMonthChange={this.handleMonthChange}\n        />\n    );\n}. ",
    "jasonellington": "@mtrabelsi where does this CSS go in relation to your datepicker component, are you passing it as a className?. I am using @mtrabelsi solution but needed to add \"visibility: hidden\" to the css property. @mtrabelsi how did you edit other css properties? It seems from your attached image that were able to change colors, font, selected date icon, etc... I didn't see any directions for this on the docs. ",
    "waheedsid": "@jasonellington I think he would dig in the classes from the debugger and appy styles to it, I was able to get his solution working and did not need visibility:hidden, but I still could not take out the space being taken by that transparent dates, there is lot of space at the bottom of the month. any ideas?\ndisplay:hidden would solve it but as @mtrabelsi mentioned it is breaking the layout.. Has anyone got a solution to this problem yet? my problem is I cant use this.calender or ref as mentioned in above solutions because my label is inside a stateless component.. ",
    "dmitrystril": "\nI'm able to solve this using :\n.react-datepicker__day--outside-month {\n                color: transparent;\n                pointer-events: none;\n              }\nDon't use display: none, it will break the layout ;)\nhere the result :\n\n\nOr just set visibility: hidden;. ",
    "dylanscott": "I've created a PR for this #706, but I'm not sure if this is the right way to change the documentation, since the previous commits to touch that doc file have \"automated commit\" in their messages so I'm not sure if this documentation is generated from elsewhere.. ",
    "yoobit": "I apologize, the setstate warning is my fault. I have an action that incorrectly unmounting the component. . it turned out someone else defined a custom global css that I need to update. It was missing \n.react-datepicker__day-name,. ",
    "robinspark": "The following prop fixes the issue.\nutcOffset={moment().utcOffset()}. ",
    "emilia-friedberg": "@mgrdevport We were missing the z-index! Thank you for your help.. ",
    "krismeister": "This commit, allows disabling Keyboard navigation: https://github.com/Hacker0x01/react-datepicker/commit/1877e697221c9e3f4ed63fc5dd503ff2fdcf0aa4 here is the resolved PR: https://github.com/Hacker0x01/react-datepicker/pull/702\npass disabledKeyboardNavigation={true} property.. ",
    "shubhanus": "HI i am still facing this issue.. ",
    "JankoSalkovicKS": "Also, there is an issue that you can do a raw input that is outside the given range (minDate and maxDate).. ",
    "vampics": "Here some more Informations:\n\"react\": \"15.4.2\",\n\"react-dom\": \"15.4.2\",\n\"react-datepicker\": \"0.40.0\",\n\"moment\": \"2.17.1\". Ah, found my mistake. Wrong path to locale. \nSorry Guys! . ",
    "andreas-koch": "Where did you set the path to locale?. ",
    "Matus-Stastny": "You need to load locales to the browser, you should check this:\nhttp://momentjs.com/docs/#/i18n/loading-into-browser/. ",
    "marekadamek": "Hello,\nJust a fallow-up. Is this bug scheduled for fixing? Is there an estimated date for release with the fix?\nThanks,\nMarek. Just an update. The issue is still present in v0.60.2. Ok. I did some investigation and found solution working for me. The datepicker definition I have looks like this:\nform-control ${this.props.className}}\n                    disabled={disabled}\n                    showMonthDropdown\n                    showYearDropdown\n                    dropdownMode=\"select\"\n                    isClearable={clearable}\n                />\nI noticed that I was passing dates with different utc offsets. and in case of openToDate, startDate and endDate the provided offset was overriding the value provided in utcOffset prop. \nI changed the code to always provide dates with the offset matching utcOffset and and problem disappeared. I'll leave it up to you to decide whether it is a bug or feature.. ",
    "tume": "I'm also seeing this....not sure which one to blame here but at least seems to be related to these lines: \nhttps://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L156-L157\nWithout that deferFocusInput() works for me. Not really sure why that is needed or what it is actually achieving so can't really comment on how to fix it. If someone has some pointers of fixing this I could try submitting PR. Didn't yet check anything on react-select side so there might be also something.  . Added example repository for reproducing this: \nhttps://github.com/tume/select-datepicker-conflict\nJust react-datepicker example + empty react-select component. You can see the weird behaviour when opening calendar and then trying to open the select component.\nI was digging this a bit deeper and my understanding now is that onBlur is being called before onClickOutside which means the calendar is still open when onBlur is called. And this seems to happen because react-select listens to mouseDown event and is calling focus in that handler and by my speculation is then calling onBlur in react-datepicker.\nI'm not so familiar with all these events and their correct calling order so would appreciate if someone can point out that should this be fixed in this component or is this more to do with react-select ?. @gilbertKaradja I was testing by calling this.props.onBlur(event) always so skipping that deferFocusInput().. Yeah in my testing but it's not really a proper fix.. ",
    "gilbertKaradja": "@tume The lines u referenced here: https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L156-L157 , removing them fixes the issue?\n. And that fixed the flickering?\n. Sure, but have you noticed any side-effects? I haven't had time to properly investigate this, might do that  tomorrow. @rafeememon: If that's all it does I am willing to sacrifice that feature to get rid of the flicker-bug . @rafeememon: I did't mean remove the functionality entirely. I will employ the \"fix\" until I or someone else   finds a proper solution. Any update on this?\n. ",
    "ibcWillJust42": "Same problem. ",
    "kevinrue": "+1. ",
    "shkumbin": "One way that worked for me:\n<DatePicker onChange={ this.onDateValueChange } selected={this.state.date} ref=\"picker\" onClickOutside={this.clickOutside}/>;\nAnd clickOutside method:\nclickOutside() {\n    this.refs.picker.cancelFocusInput();\n    this.refs.picker.setOpen(false);\n}. ",
    "swbullis": "https://github.com/JedWatson/react-select/issues/1539. ",
    "malectro": "I made a proof of concept PR that removes onclickoutside almost entirely and instead uses blur to hide the calendar component. I personally believe onclickoutside is inherently flawed and that any other component on the page should be able to call stopPropagation without breaking another.\nhttps://github.com/malectro/react-datepicker/pull/1\nUnfortunately this changes some basic behavior of react-datepicker and breaks 4 tests (mostly related to the year and month dropdowns and how it responds to blur events that aren't due to clicks). But I don't feel these changes to be degradations.\nThoughts? There's a lot more work to do fixing up the tests and possibly removing onclickoutside entirely, but I wanted to get feedback before proceeding.. oops, i meant to open this on my own fork. Great lib. Glad to help out!. ",
    "Alexey-Lukin": "Workaround, that works for me until the issue will be fixed:\n```\nimport DatePicker from \"react-datepicker\";\nclass CustomDatePicker extends DatePicker {\n  constructor(props) {\n    super(props);\n  }\ndeferFocusInput = () => {\n    this.cancelFocusInput();\n  }\n}\nexport default CustomDatePicker;\n```\nand then you could use CustomDatePicker instead of DatePicker. ",
    "JedWatson": "From what I can tell, the problem is that the handleBlur method is blindly refocusing the input when it is blurred, if the calendar was open. When react-select is clicked, it is focused (and the menu opens) but the calendar input immediately \"steals\" focus back again.\nI can't work out what the actual purpose of calling the deferFocusInput method is (or actually trace how the component detects that something else has been focused, for example tabbing through the inputs in the example) so if someone can shed light on this I'd be happy to help work out how both components can play nicely together.. @aij thanks for the quick reply!\nWith that in mind, it makes sense that stopping propagation in react-select could prevent the document event handler from detecting the click in handleCalendarClickOutside. Would be interesting to see if that prop is fired when you click in react-select, if anybody's got an example handy.\nAlthough the issue is most obvious when react-datepicker is used in a form with react-select, I don't think you can make any guarantees that there wouldn't be other event handlers on the page that could receive focus and stop the event from bubbling - hopefully it's possible to use a different solution in react-datepicker, rather than preventing react-select from cancelling events. As a rule, I'd expect that if I get an event it's \"mine\", and messing with it shouldn't have side-effects for the component that previously had focus.\nMy suggestion would be to use a different technique (not async refocus on blur) to maintain focus when a user clicks in the calendar - catch events in the calendar's outermost container, and refocus then, or something like that. I used a similar technique in react-select to handle clicks in the menu, because we need to keep the input \"browser focused\".\n(sorry if I sounds opinionated here, not my intention). ",
    "horaciosystem": "I had the same problem using react-final-form BTW and I fixed it calling the input.onBlur callback inside the onClickOutside function of DatePicker.\n. ",
    "primetwig": "@Alexey-Lukin's patch will let input loose focus if you click inside calendar.\nHere I've made some improvements to keep the focus:\n```\nimport RDP from \"react-datepicker\";\nclass ReactDatepicker extends RDP {\n  constructor(props) {\n    super(props);\nlet calendar = null;\nObject.defineProperty(this, 'calendar', {\n  get: () => calendar,\n  set: v => {\n    if (!calendar && v) {\n      v.componentNode.addEventListener('click', this.ownDeferFocusInput);\n    }\n    calendar = v;\n  },\n});\n\n}\n  ownDeferFocusInput = () => {\n    this.cancelFocusInput();\n    this.inputFocusTimeout = setTimeout(this.setFocus, 1);\n  };\n  deferFocusInput = () => {};\n}\nexport default ReactDatepicker;\n``. You could add a prop (e.g.keyboardNavigationTarget=input/date/timewithdate` as default) for that.. ",
    "jacknam8315": "This works for me\n``` \nclass DateTimeTest extends React.Component {\nconstructor(props) {\n    super(props);\n    this.OnOutsideClick = this.OnOutsideClick.bind(this);\n    this.pickerRef = null;\n  }\nOnOutsideClick() {\n    this.pickerRef.cancelFocusInput();\n  }\nrender() {\n    return (\n         { this.pickerRef = node; }}\n          onClickOutside={this.OnOutsideClick}\n        />\n    );\n}\n} \n```. ",
    "akbar-pyt": "\nOne way that worked for me:\n<DatePicker onChange={ this.onDateValueChange } selected={this.state.date} ref=\"picker\" onClickOutside={this.clickOutside}/>;\nAnd clickOutside method:\nclickOutside() {\n    this.refs.picker.cancelFocusInput();\n    this.refs.picker.setOpen(false);\n}\n\nThanks. it's work for me. ",
    "praveenkgoswami": "One way that worked for me:\n;\nAnd clickOutside method:\nclickOutside() {\n    this.refs.picker.cancelFocusInput();\n    this.refs.picker.setOpen(false);\n}\nThanks Alot. it's work for me. ",
    "skimi": "Don't forget to enable tree shaking with\nnew webpack.LoaderOptionsPlugin({\n      minimize: true,\n      debug: false\n    }),\nNote that this might minimize everything too. If you don't want that I think you need to give each loader a minimize false argument.. ",
    "yp": "Thanks for looking into this.\nAre you planning to remove openToDate?\nI found it really convenient for showing a (multi-month) inline calendar which stylistically matches the datepickers used in other places of the application. Actually, I am directly using the Calendar component now to show the inline calendar without using the DatePicker with the inline prop set to true. Is this use \"supported\" (potentially, at least) or discouraged?\n. ",
    "shogan94": "Wanted to know if there was any word on openToDate or a work around to get that functionality? I see that setting selected works but I don't want to have the field pre-selected. Thanks. I found a quick fix (for now) just downgrading the version to v. 0.40.0. ",
    "GautierT": "Any news on the fix for openToDate ? Thanks !. aha yes, i just did that too ! ;). Hello.\nWhen this will be available ?\nThanks for this feature btw. It's a feature of 0.55.0 : https://github.com/Hacker0x01/react-datepicker/releases. ",
    "dimitrykislichenko": "@rafeememon then the README should be updated:\n\nYou\u2019ll need to install React and Moment.js separately since those dependencies aren\u2019t included in the package. . \n",
    "joenot443": "Is there any chance this will end up being merged? It would be a huge help for my project.. ",
    "j33n": "Is there any reason this was put on hold? Looks like it was a needed change. ",
    "Amauris": "I created a pull request, although I'm honestly I'm not entirely sure if it's a proper fix: https://github.com/Hacker0x01/react-datepicker/pull/825\n. ",
    "raurfang": "So, to add a bit more detail:\nIt looks like this bug was introduced in #673.\nThis:\nhttps://github.com/Hacker0x01/react-datepicker/pull/673/files#diff-f662ae56197d5c888897a02b982f0ad3R119\ncauses problems when called from here:\nhttps://github.com/github1/react-datepicker/blob/2444feea4f5d940f0de96a52fb329554c27399e3/src/datepicker.jsx#L164\nThe problem is caused by the setSelected() state changes not being applied before the setOpen() call is made. setOpen() uses this.state which still has the old preSelection value, because React's setState() (called in setSelected()) is async.\nAnother way to fix this is by calling setOpen inside a setState callback:\nthis.setState({}, () => this.setOpen(false))\nThis makes sure that the setOpen() call is made after all the previous setState calls finish updating the state.. ",
    "kristofferahl": "Also not getting keyboard navigation to work when using the inline version. Would really like a fix to this. Awsome component btw!. ",
    "DavidHooper": "@benbcai had the solution for me. I am using a custom input.. ",
    "gavacho": "Okay, looks like the culprit was https://github.com/Hacker0x01/react-datepicker/pull/673.\n. not sure how to get the checks to pass. @rafeememon please review. ",
    "jzaefferer": "Having used react-datepicker for a few months: I suggest making the next release 1.0, without any further changes. Then follow usual semver from there. Its going to be fine.. Newest release: 0.64.0. Oh well. Good to see the project is still moving forward though \ud83d\udc4d . ",
    "Ch-Valentine": "What do i need to do that this pull request will merge ?. ",
    "pdfabbro": "Disregard, I just realized it's because today is the 28th of February and therefore going back to February is correct... duh. I checked this morning and the same issue is still occurring actually.  It defaults to March 1st but the previous month button is there for all months.  How do I make it disappear?. Any update on this?. I'm new to Git.  What's a PR?. ",
    "jcrben": "Passing null does seem to work sort of, but it also seems not too hard to end up with an 'Invalid date' - which is what I got when I pulled down https://github.com/Hacker0x01/react-datepicker/commit/40c7ee79754c979e97511c1c107749df5ad7e619.\nRan yarn start, and then tried clearing the Hero Example and hitting enter, I get NaN. And sometimes I also see Invalid date. \nMaybe because moment(null) returns a moment with _i: NaN. Also think it might have something to do with https://github.com/Hacker0x01/react-datepicker/blob/b1decffb4bbeabed8b0313050f0f57acc49e6208/src/datepicker.jsx#L130 and https://github.com/Hacker0x01/react-datepicker/blob/b1decffb4bbeabed8b0313050f0f57acc49e6208/src/datepicker.jsx#L275\nIn that line 274, it looks like moment can be called with moment if the boundedPreselection is not defined - moment(momentObj) is not valid. I'll look at maybe fixing it.... If we don't care about the time, an option to use UTC all the way through - with an initial adjustment to get it back to the local time to avoid crossing over to the next day - could make sense since toISOString() always returns a UTC datetime. So we avoid the chance of someone accidentally calling toUTCString() on a local time, which can cross over to the next day. That's what I'm dealing with right now.\nI addressed the problem in my case with a utcOffset(0) call to zero it out before calling toISOString. This is inside a reusable component so it just gets called in that one spot.. Not a maintainer, but did you actually encounter an issue with this?\nI can't imagine a use case where someone wanted the datepicker to be hidden under something else. It's like a modal - when it's open, it should be visible, and components should have defaults that handle the the typical use. z-index of 3 is far too low. You can always override it if need be.. Fair point, altho I don't think you'd have this issue if you put your header into a separate stacking context which seems more typical.. does .hero__content have a z-index and position: relative or something to give it a stacking context?. > From my experience if you have a child nested deep into the page it will definitely render above all of its parents if you give it a z-index that's high enough\nNo, the z-index of a child in a stacking context will only apply within the stacking context. So if you create a stacking context for the header with z-index 3 and a stacking context for the main content with z-index 2, everything inside the main body will be under the header. The MDN article explains it better than I can.. As MDN says, \"the z-index values of its child stacking contexts only have meaning in this parent\" - it has nothing to do with how deep the child is. There might be some caveats where a nested high z-index could trump a sibling of the parent's stacking context but I'm not aware of them. This is one of the reasons people use https://github.com/tajo/react-portal.\nIn this case, you need to look for the react-datepicker__tether-element, which is attached as a child of the body! And since 2147483647 is the highest possible z-index, it looks like you'd have to override that to reduce it in your own css. Which also gets tricky because you'd still have to create a stacking context that beats it...\nDialing the z-index down is an idea, but perhaps allowing people to customize where react-datepicker__tether-element is attached would be more flexible.. renderCalendarTo is it. Might be worth mentioning in the website example that it shows only a subselection of options. Also wish https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md had more descriptions. Maybe I'll open a PR at some point but I'm moving on to other tickets right now.... ",
    "nosykretts": "I think you should return undefined like this\njavascript\n<DatePicker\n  selected={this.state.myDate? moment(this.state.myDate) : undefined}\n  onChange={date => {\n    this.setState({\n       myDate: date ? date.toISOString() : undefined\n    })\n  }}\n/>. ",
    "Aprillion": "while passing selected={null} kind of works for me, when I press ENTER then some random date (previously selected value / today by default) will replace whatever is in the input value (e.g. when manually clearing the input field and pressing ENTER instead of clicking on the X button)\neven with disabledKeyboardNavigation :(\nedit: actually, pressing ENTER will always replace selected with the random value, not only for null in 0.53.0 \ud83d\ude3f . 1.) not possible to overwrite with a customInput={<input onKeyDown=...} because it's cloned in https://github.com/Hacker0x01/react-datepicker/blob/3ce7f9b1e237efb87ef8ce658db3945ec938b6c2/src/datepicker.jsx#L407  so the library onKeyDown takes precedence over custom props :(\n2.) and this is the place that inserts \"today\" on ENTER - https://github.com/Hacker0x01/react-datepicker/blob/3ce7f9b1e237efb87ef8ce658db3945ec938b6c2/src/datepicker.jsx#L289\nI will create a PR to check for disabledKeyboardNavigation to solve 2., ignoring 1. for now. This project is not interested in my collaboration. The only reply to my PR was that after 2 months of no one merging it, it is no longer possible to merge it due to a conflict (the original file no longer exists).\nSo I closed the PR because I did not get any advice how to address that problem in any other way.\nThen @rafeememon was so unsure about why I had to have such an attitude that he or she \"locked and limited conversation to collaborators\".\nSo I reply here that it was obvious that a PR with conflicts could not be merged - but no one indicated what will the core team do about it. Did I look like someone who would contribute to the PR for next 5 years until an official \"collaborator\" privilege core team member makes their appearance and merge / comment in the PR?\nIf you don't have time to accept or comment on contributions from previously-enthusiastic people, then you should have said at any time between September 18 and November 8:\n\nThank you for your effort, but unfortunately we do not have time to review contributions from new people. This PR cannot be merged at the moment, but if we find some time in next 6 months, we will get back to you. If you still want to contribute, code review of other PRs could really help us improve quality of contributions so they can be reviewed and merged by the core team faster.\n\nThere is no indication in readme.md nor contribution.md that this is a project hostile to newcomers, so I assumed that my contribution would be welcome and I was reasonably frustrated that it wasn't welcome :(. I was able to do startDate.toISOString().substr(0, 10) with <DatePicker utcOffset={0} ... which ~works just fine for me locally in UTC+2 time zone (not using moment at all)...~\n~Not sure I understand the problem here, did I miss something and should be worried?~\nedit: nevermind, it's totally fucked up - works only when I select the date from chooser, it is 1 day off when I type a date manually and remains 1 day off when I select a date afterwards \ud83d\ude22 . @martijnrusschen is it failing since July 17? if not, do you give a promise to kennethsaetereng that if they fix it and the PR gets approved, it will be merged BEFORE it starts to fail again (not sure if it can fail due to merge conflicts)?. sounds like https://github.com/Hacker0x01/react-datepicker/issues/945 which is already merged - regression or not relased yet plz?. #996 might help with the \"press Enter\" part when using disabledKeyboardNavigation ;). @rafeememon there was 1 line of code changed - what is your wildest guess how many conflicts were there when this PR was created?\nbut the file does not exist any more, so I am closing this unsuccessful PR, @xizi-xu feel free to create a new one, I am using separate input without react-datepicker to work around the issue. possible to implement when you replace the method handleChangeYear (date) => \nhandleChangeYear () {\n  ...onYearChange(this.state.date)...\nthough I guess it's best to change handleMonthChange too for consistency. ",
    "makkanimation": "Use this code, where you imported DatePicker component. This will clear input value:\n```\nhandleChange({ startDate, endDate }) {\n    if(startDate===undefined)\n    {\n        startDate = startDate || this.state.startDate\n    }\n    if(endDate===undefined)\n    {\n        endDate = endDate || this.state.endDate\n\n        if (startDate && startDate.isAfter(endDate)) {\n            endDate = startDate\n        }\n    }\n    this.setState({ startDate, endDate })\n}\n\n```. ",
    "andrius444": "I think you are looking for onChangeRaw(). ",
    "jbschrades": "@LeoAref Any luck with this?  I'm trying to to trigger a redux-form form onChange event when a date is selected. If I type in the input field, the event is triggered, but not when I select a date.  This doesn't work:\n<DatePicker\n        {..this.props.input}\n        ...\n        onChange={(date) => this.props.input.onChange(date)}\n        ...\n    />. ",
    "sartul": "Not sure if its too late to comment. I faced same issue and what helped me is onChange event which has date and event args. With event's type and target properties you can easily find out what was last action and value. These properties will give you more control in finding and setting your state. I got this clue form https://github.com/Hacker0x01/react-datepicker/issues/1310. . Not sure if its too late to comment. I faced same issue and what helped me is onChange event which has date and event args. With event's type and target properties you can easily find out what was last action and value. These properties will give you more control in finding and setting your state. I got this clue form https://github.com/Hacker0x01/react-datepicker/issues/1310. . ",
    "mvs202": "Reverting to version 0.40.0 avoids the problem.. yup; current version (0.44.0) fixes the problem.. ",
    "guillaumesayegh": "Well thank you.\nI did revert to version 0.40.0 for now.. ",
    "Anaskhalifa": "This was in 11 Mar 2017 so did you resolve the problem ?. ",
    "greg-a-smith": "@aij I checked out your pull request #773 and this seems to be a good solution for this issue.  My current pull request #769 could be closed if your pull request got approved and merged.\nAs for whether it is default behavior or enabled via a prop -- default is always nice, but it doesn't matter to me either way.  We use a component in our library that wraps the react-datepicker component so it would be invisible to our consumers.. Looking at the code coverage report, it doesn't appear there are any additional new lines that can be tested.  There are some additional lines defining the prop and its default values which seem to be causing the overall line coverage percentage to drop.  I am not quite sure how to address this.\nPlease let me know how to proceed.  Thanks!. Since the issue depends on a local environment's current date/time, I'm not quite sure how to replicate that in a unit test.  Passing a date in doesn't work because the fix is only hit when no date is passed in.. Similar to #921 , since the issue depends on a local environment's current date/time, I'm not quite sure how to replicate that in a unit test.  Passing a date in doesn't work because the fix is only hit when no date is passed in.. @martijnrusschen Fair point.  I will look at making the change a better way.. @snide Thanks for the note.  I will be sure to reach out to you.  I was hoping to get a little more traction on the issues we logged, but we may end up just starting and then let the discussions ensue in the pull requests.. Agreed -- not sure where that came from.. Okay, what's going on here?  I went back to explicitly revert this and it showed it as reverted, but after committing and pushing it, it keeps changing it to this format.. ",
    "osbornm": "@martijnrusschen Any idea on the Code Coverage issue @greg-a-smith is talking about? And is there anything else needed for this PR? . ",
    "Uyarn": "HI ,I think your DateFormats is wrong ,since you send your dataFormats as DD-MMM-YY,the year with 2 digit ,which results in 13-MAR-20, you only need to change it as DD-MMM-YYYY ,it will accept 4 digit~ . ",
    "kunalshewale": "@al3x-huang : Did you got solution?. ",
    "adam-horvath": "For me, a zero-time setTimeout was the trick in the onChange callback:\nsetTimeout(() => document.activeElement.blur());. My solution is a mix of the above mentioned ones.\n<label onClick={e => this.calendar.state.open && e.preventDefault()}>\n    <DatePicker\n        ref={r => this.calendar = r}\n        selected={this.props.filter.date}\n        onChange={this.onDateChange}\n        dropdownMode={'select'}\n        isClearable={true}\n        placeholderText={Constants.DATE_FILTER_PLACEHOLDER}\n    />\n    <div className=\"calendar-icon\" style={{display : this.props.filter.date ? 'none' : 'block'}}/>\n</label>. @waheedsid, I think my solution will work if you refactor your component to stateful.. ",
    "ibekavac": "Can u provide more info on your project?\nDo you have existing React project setup up?\nDo you use npm?\nSee https://github.com/Hacker0x01/react-datepicker/blob/master/README.md for Installation part . Sry I do not have experience with Grails. Maybe something here can help you https://objectcomputing.com/resources/publications/sett/june-2016-using-react-with-grails/\nSee \"Setting up our React environment\" part. @alex-shamshurin Ok, that's cool. Let me know when it gets merged!\nAny update on clicking outside of calendar? Is that a bug?. @martijnrusschen thank you!. ",
    "sathyadhari": "I use grails in my project and not npm. Please assist me if you have any idea .\nThanks .\nSent from my iPhone\n\nOn Mar 21, 2017, at 8:20 AM, Ivan Bekavac notifications@github.com wrote:\nCan u provide more info on your project?\nDo you have existing React project setup up?\nDo you use npm?\nSee https://github.com/Hacker0x01/react-datepicker/blob/master/README.md for Installation part\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "dhassouni": "I have created a simpler codepen based off someone else's code pen to illustrate the scrolling not working using the current version (0.43.0)\nhttps://codepen.io/dhassouni/pen/dvdZOr. Well, I feel silly now, but the scrollableYearDropdown input is what enables this. It actually was not intuitive to me from the documentation I have found and thought dropdownMode = 'scroll', would accomplish what I wanted, but I'll still chalk this up to user error.. ",
    "venkata82": "Any update on this change?. I have added year drop down. what's the shortcut to change year?. ",
    "xizi-xu": "I believe that if you use the picker, the picked time value is in GMT/UTC. However, if the time value is typed, it will be in local time zone. Also, it seems that setting utcOffset value does not anything. . Can this be merged?. ",
    "Noitidart": "Thanks @benbcai for your reply. Makes sense.\nI am coming from Kronos datepicker to here, there they had up/down arrow for moving days. So some do expect it to work like this - https://github.com/dubert/react-kronos/ - but I understand, your module your shot. I am appreciative of it!. ",
    "mberneti": "The problem is, once a developer run yarn install on its own computer and have the yarn.lock file pushed to git, all packages are resolved to \"https://registry.yarnpkg.com/*\" which is not accessible on out CI machine, so even when our CI machine has a yarn config set registry {out-local-registry}, yarn tries to fetch packages from registry.yarnpkg.com which causes network errors!. ",
    "tamitutor": "Ahhh, I think I may have found a clue: https://github.com/Hacker0x01/react-datepicker/issues/167\nThe \"selected\" property must be a Moment.js object--not a regular Javascript date object...\nI fixed this myself by setting my \"selected\" property to a moment() object.. +1 for docs reflecting the need to use a moment() object for the \"selected\" property.. ",
    "CoralSilver": "Nevermind this problem was caused by 3rd party script of page I was embedding plugin into.. ",
    "agrcrobles": "I am getting the same. ",
    "Yamini-Govardhani": "I guess u people are forget to import the css file\ni.e.., import 'react-datepicker/dist/react-datepicker.css';\n. ",
    "dereksweet": "Importing the CSS file working for me. Thanks @Yamini-Govardhani . ",
    "tharakabimal": "It still didn't work for me. ",
    "brainTrain": "I did encounter an issue. Unlike with a modal, users will (and should) still be able to scroll the page if the date picker is open. It's not exactly breaking anything but it does not look good to have the date picker hovering over the fixed header for the app this is being used in (which is what I was trying to demonstrate with the image in the original post). We override it but conceptually this is closer to a dropdown than a modal, and giving it the highest possible z-index doesn't make it very portable. 3 makes sense for a z-index to me since it should really just pop over its immediate surroundings, but I do agree it could be bigger. I opened an issue instead of a PR since the commit attached to the change doesn't have any context as to why it was changed but I assumed it fixed some issue for one or more people.. come to think of it, the problem here is more than aesthetic, since depending on the placement of your datepicker and buttons on your header, it could block clicking on them. You shouldn't need to click out of a date picker or drop down before you click on a menu item.. If you look at my image I believe I am putting the example header into a separate stacking context.\nThe header is in #app [data-reactroot] .hero header (with the header having a fixed position)\nThe datepicker is in #app [data-reactroot] .hero .hero__content .hero__example .react-datepicker__*\nAm I missing something here?. heh not sure it's from the demo page of this plugin :D. So I've never used the term stacking context, but it seems it's simply used for describing the hierarchy of an HTML page. From my experience if you have a child nested deep into the page it will definitely render above all of its parents if you give it a z-index that's high enough. Once I got better at understanding these hierarchies I was able to range my z-indices between [-1, 2] (with a -1 being a very special case) as long as I structured my HTML properly. Where I get into trouble is when plugins choose some arbitrarily high number, which completely destroys that nice relative z-index pattern (which I believe is what you're referring to a couple of comments above about stacking context). It's the main reason choosing a z-index that's the highest possible z-index for a browser is not a very nice default for a plugin as it forces the plugin to always be the most important thing on the page no matter what (which is what I attempted to demonstrate with my screen grab in the OP). \nAre we on the same page now @jcrben? Or is there something I'm still missing? I don't even work at the company that's using this plugin anymore, and the person who pointed the issue out to me got around it by over-riding the z-index in the app's style sheet. However, I do love learning new things so if I'm wrong about something here, I'd love to learn why :D. er also, I checked the demo page, there's no relative position or any other z-index on the container elements of that page. hm so if I give .hero__content a relative position and z-index of 1, and I nest this header directly inside of the data-reactroot a fixed position, z-index of 9999, then the .hero__content should never cover the header?\nThat's what I did and it didn't work. This MDN article discussion on stacking context appears to be describing why a child with z-index of 6 can still render under a parent with a z-index of 2 and that it depends on how deep that child is nested inside of the parent. My understanding is that it's basically a simple sum based on how many nodes the child would need to move to be at the same level as (or above) its parent. If you choose a z-index which is larger than the number of nests, then it doesn't matter if a few of the intermediate elements have a sane z-index, that child will always have the top level stacking context of the page (not sure if I'm using the term stacking context correctly here :p).\nSee this new image of me doing it again based on our discussion here, notice I even render the header outside of the .hero element and the datepicker still blocks it. To test your and my assumptions it'd be super helpful if you opened up the inspector and added some html/css to demonstrate what you think is happening. Obviously this isn't a demand or anything, but if you're able to make the datepicker render under a fixed header on that demo page without changing the z-index of the datepicker container and screen grab/share it here it'd probably be really obvious what I'm missing. If you're unable to do this, then it'll probably be really obvious what you're missing.\nI appreciate the introduction of a new term! If you don't feel like demonstrating your point that's totally cool, but if what you're saying is actually true then I'd love to see a screen grab of it happening so I can reproduce it on my own and learn something about z-index that I didn't know before :)\n\n. aaand boom goes the dynamite.\nThank you so much for staying with me this long man! I missed the tethering element on the body somehow. I'm guessing that'd be a tough one to move since it's likely being used to determine when the menu is colliding with the top of the body, and for positioning etc. Regardless, even 999 would be a better z-index here so I think I'll keep my issue open, but I'm very grateful that you took the time to explain this concept of stacking contexts to me. I knew that these orders were relative but always assumed there was some global order in general (which er, yes there's that too but it's obviously different than what I thought). It's pretty sweet to know I can reign these things in easier than I thought before, although I tend to keep my z-index values pretty small which is probably why I've never hit this upper limit issue before (er unless I'm dealing with a plugin, but then I just override if I can). Thanks again man, hopefully my lack of understanding wasn't too frustrating :p. ",
    "henrikq": "@kennethsaetereng This would be valuable to me. Would you or anyone familiar with this component finish this merge?. @kennethsaetereng Someone with write access, I suppose @Hacker0x01, needs to pull. You can make that easier by fixing the conflicts.. ",
    "kennethsaetereng": "@henrikq I'm also waiting for this, I dont know who can do this, but hoping it will happen soon.. @Hacker0x01 is this ok now?. I have just followed the way the handleMonthChange is solved, and since I'm quite new too React I don't know if it could be solved this way.\nchangeMonth (month) {\n    this.setState({\n      date: this.state.date.clone().set('month', month)\n    }, () => this.handleMonthChange(this.state.date))\n  },. ",
    "raduGaspar": "any progress on this?. ",
    "kujon": "Addressed by this: https://github.com/Hacker0x01/react-datepicker/pull/1075. @martijnrusschen - all the conflicts addressed.. ",
    "gomo": "@martijnrusschen\nHi !\nDo you have any opinion on this PR?\nThis PR too, some people want to attach the class attribute to the day. \n. @alex-shamshurin \nDo you mean the build of docs-site? I built it.\n@martijnrusschen \nI also did rebase. Some conflict occurred when rebasing, please review. If there is no problem merge, please.. ",
    "ziweiwu": "Thanks. I had trouble with override scss. This issue helped me the most. . this is indeed an issue.. ",
    "cattermo": "I think this commit https://github.com/Hacker0x01/react-datepicker/commit/82a48b0bf4653da69d4297bdbe2c090ad6c6f5d4 fixes this problem. Not yet released though. When can we expect a release @philiptzou ?. Please release this code. This bug is stopping me from upgrading to React 15.6 :-(\n@rafeememon @martijnrusschen . ",
    "philiptzou": "I don't know... Since I am not the owner of this project:)\nOn Wed, Jun 28, 2017 at 2:44 AM Clara Attermo notifications@github.com\nwrote:\n\nI think this commit 82a48b0\nhttps://github.com/Hacker0x01/react-datepicker/commit/82a48b0bf4653da69d4297bdbe2c090ad6c6f5d4\nfixes this problem. Not yet released though. When can we expect a release\n@philiptzou https://github.com/philiptzou ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/802#issuecomment-311610793,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAxbiQtDCr44sdqUofQz3jZNxGaFFI-8ks5sIiBxgaJpZM4MvFGt\n.\n. I think I found the reason.\n\nIn version 0.46.0, datepicker.jsx has following three lines:\njavascript\n      if (/^Arrow/.test(event.key)) {\n        this.onInputClick()\n      }\nThis behaviour was changed by b1decff. Instead of testing if event.key was one of the ArrowUp, ArrowDown, ArrowLeft and ArrowRight, the new version captured all key events which absolutely included tab.\nThe onInputClick() opened the calendar panel by setting this.state.open to true. However, the tab also triggered blur event. In handleBlur(), if this.state.open was true, deferFocusInput() would be called and eventually made the blurred input being focused again.\nThe remaining explanation of the infinite loop between the input A and B was described precisely by @conlanpatrek .\nMy suggestion is to add the if block back but change the condition to !(/^(Tab|Enter)$/.test(event.key)) to excludes keys which will trigger subsequent events, for example, blur or submit. A pull request was proposed.. Addressed the code review comment and also prevented re-opening the calendar when pressed \"ESC\" twice.. Well I guess it's true. I'll made the change.. ",
    "reactionic127": "@martijnrusschen \nI am getting same issue. did you released the updated version. @martijnrusschen \nI fixed it by myself.\nIn my case, custom input of react date picture was a button.\nso if date picture clicked, form is submitted. ",
    "oneRice": "Hello, what's the status of this PR? I really need it quick.. ",
    "marco-fp": "\nFixed conflicts.\nUpdated functionality to show the number passed as prop both below and above the selected date (previously showing one less below).. Our team came across this problem when we intended to use the datepicker to allow the users to specify a birthdate. Since clicking on the arrows only displays one more item in the list, it would be a problem to select a date far in the past. \nBy passing the min/max as a prop we can set it to a normal human lifespan and avoid this issue.\n\nI believe it will still obey the min/max dates as default, so it shouldn't be a problem to continue the normal use of the components.. ",
    "obartra": "Hey there @rafeememon happy to contribute, what should be the approach here, do you want to use create-react-class, ES6 classes or something else?\nIf using ES6 classes, I see you have stage-0 plugins added on babelrc, have you considered using transform-class-properties? It could make migration a bit simpler/cleaner\nSo for instance, switching from:\n```javascript\nimport React from 'react'\nexport default React.createClass({\n  displayName: 'CodeExampleComponent',\npropTypes: {\n    children: React.PropTypes.element,\n    id: React.PropTypes.number,\n    title: React.PropTypes.string\n  },\nrender () {\n    return example-${this.props.id}} className=\"example\">\n      {this.props.title}\n      {this.props.children}\n    \n  }\n})\nto:javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\nexport default class CodeExampleComponent extends React.Component {\n  static propTypes = {\n    children: PropTypes.element,\n    id: PropTypes.number,\n    title: PropTypes.string\n  }\nrender () {\n    return example-${this.props.id}} className=\"example\">\n      {this.props.title}\n      {this.props.children}\n    \n  }\n}\n``. I need to take another pass at it. I broke a couple tests inday.jsx` but should be easy to fix.\nMy main concern is on making sure we are ok using transform-class-properties. It's a stage 2 feature but help us get rid of .bind everywhere.. @martijnrusschen can you guys take a look see if this along the lines of what you are looking for?. Hi @aij, thanks for the reply.\nI agree that we don't want to format on the invalid date case. When the date is valid though, as in:\n```javascript\nmoment('4.23.1778', ['MM/DD/YYYY']).isValid(); // true\n```\nI think it makes sense to format it to follow the mask defined.\nIf this is intentional and 4.23.1778 is not valid for react-datepicker when the mask is MM/DD/YYYY,  it may be worth documenting the differences between what moment.js and react-datepicker consider valid. In my opinion, the expected behavior would be to keep them consistent. well, if we leave incomplete/invalid dates untouched that shouldn't be an issue. Is this something you are considering implementing?. ",
    "liady": "@rafeememon any news on this PR?. ",
    "ltfschoen": "To overcome the warning I simply had to change this:\n```\nimport React from 'react';\nconst Hello = React.createClass({\n    render() {\n        return Hello, world;\n    }\n});\nexport default Hello;\n```\nto either:\n```\nimport React from 'react';\nexport default class Hello extends React.Component{\n    render() {\n        return Hello, world;\n    }\n}\n```\nor:\n```\nimport React from 'react';\nconst Hello = () => {\n    return Hello, world;\n};\nexport default Hello;\n```\n. ",
    "SimonaJ": "I have the same problem.\nAlthough I see datepicker rendered in html but its' transform properties are calculated all wrong so datepicker is outside of the page. \nMaybe something's wrong with tether.js?. ",
    "wzup": "Thanks.\nHowever, it is actually confusing. You have examples directory in plugin's root directory examples/hello-world. And there is only one example there. And one might have no idea to check other directories for examples.. ",
    "davideghz": "for the lazy ones (like me) :) https://github.com/Hacker0x01/react-datepicker/blob/master/docs-site/src/examples/date_range.jsx. ",
    "aodinok": "For lazier ones (like me): https://reactdatepicker.com/#example-21. ",
    "bostonaholic": "Any reason all of these were closed without merging?. ",
    "vuphuctho": "Hi what is the current status of this PR?. ",
    "pjjanak": "Any movement on this?. ",
    "cozmo": "What would it take to get this PR merged? This is causing us to have to lock ourselves to an older version which is suboptimal. . ",
    "janbuerling": "What about this error? Is a time near the fixes in sight or is there a workaround?. ",
    "janka": "That is because rem units are used, so the date picker is sized relative to the root font size. Default for browsers are typically 16px, bootstrap uses 10px. So adding this\nhtml {font-size: 16px;}\nfixes it. May fuck up other things on your site though.... See also #624. It is not computed, just set with rem units in the style sheet. Not ideal, as pr discussion in #624 . ",
    "olefrank": "Thanks, it worked! I looked everywhere for the place in the code where the size is computed. But I didn't find it yet. Where is it?. What's the status on this? I don't see the change in master yet...?. ",
    "pek7": "Oops, that's a blunder. Seems react-datepicker is good to go with IE10, good work!. ",
    "dan-diaz": "Just ran into this today. Are there any work-arounds?. @skywickenden \nThis seems to have fixed the issue:\n```\nclass CustomInput extends Component {\n  handleTouchStart = () => {\n    this.props.onClick();\n  }\nrender() {\n    return ();\n  }\n}\n```\niOS will prevent additional click events to an input that is already in focus.\nBut it does accept touch events.\n. ",
    "raelgc": "I just saw it's entering the react-datepicker.min.js. Is there a way I can see in the non minified version?. Using .default make it works! What is the purpose of this option?. ",
    "ibcLee": "me too. ",
    "AverageZ": "Also getting this issue after bumping versions from 0.41 -> 0.46\n\"react\": \"^15.4.2\". ",
    "aviklar10": "me too, how to solve it ?. ",
    "davidmason": "This happens because getInitialState is defined, in datepicker.jsx at least. It is being used to set the state in the constructor so in this case there isn't an actual problem - ideally the check that React does would check whether getInitialState is called in the constructor and not generate this warning when it is.\nThe developers here could easily fix it by renaming getInitialState to something that React does not check for (even though the name is a perfect fit for what it does now).. ",
    "leopoldw": "Strictly speaking, I don't think this is a bug; it's up to the dev to handle the rendering of the inline window. However, there's no easy way I can see to bind the dev's close function to a background click. Passing a function which is run when the user clicks this background, something like inline={ close } or inlineClose={ close }, would help. \nIf anyone has any suggestions for API improvements I'd like to hear them - once there's some consensus I'm happy to put together a PR for this.. ",
    "martinek": "onSelect partially solves my problem by enabling clicking on the already picked date. It does not however solve problem with not being able to click on backdrop to close.. That solves my problem, thanks.. Well, you would have to somehow build up and object where you would store which day is which color. Then you would use something like\ndayClassName={date => dayColors[date]}\nIn dayColors you would have something along\ndayColors = {\n    '09-10-2017': 'red',\n    '10-10-2017': 'blue'\n}\nor something like that. Here is a working example that should help you out:\nhttps://codesandbox.io/s/825l6m0zr2?module=%2FExample.js. The example linked intended to show you how the prop on DatePicker works. I'm positive you can keep the data from state in database. I don't know what you mean with new click.\nAlso if you are designing you own application, you don't need <style dangerouslySetInnerHTML...>. That was something i used just for the example.\nI'm not sure what you expect of me? You are apparently creating some project and without whole picture it is hard to recommend any solution. Also it is kind of out of scope for pull request discussion.\nYou might get more info on stackoverflow.. ",
    "utsavdevsharma": "This is exactly what we need in advanced usage. I would like to request, it will be really helpful if we can merge #835 soon.. Big Thanks ! \ud83d\udc4d \ud83d\udcaf . This is exactly what we need in advanced usage. I would like to request, it would be really helpful if we can merge #835 soon.. ",
    "Rachomir": "@martinek example in docs is not very clear for myself is there any chance you can explain to me how for example you would give a class depending on previous button click. \nLet say you have three buttons \"red\" \"green\" and \"blue\" and depending on chosen button you would give className to a perticular day - .react-datepicker__day-green or .react-datepicker__day-red or .react-datepicker__day-blue. Everytime you click on a different day you have an option to click a button which change color of that day in datepicker.\nThanks in advance. @martinek first of all thanks for your help.\nI tried to do it like you said unfortunately without success. Any other ideas? I thought maybe date format should be different but I tried many things and still doesn't work.. @martinek thanks a lot for your patience and apologies for beeing pain in the ass :)\nDo you think it is possible to keep those \"coloured dates\" in database and render datepicker with days already coloured (accordingly to data fetched from db)? plus add new on click, like you did with state?. I think I know how to do it. I will keep the data in db and fetch informations. Than on componentWillReceiveProps I will setState with date + colour. Em I right?. My concern is also this bit \n<style dangerouslySetInnerHTML={{__html:\n          .red { color: red }\n          .green { color: green }\n          .blue { color: blue }\n        }} /> \nHow would I use it if I fetch data from DB? instead of clicking. @martinek would you be able to help me? . ",
    "toomuchdesign": "Yep, I think so! Static props is the way I personally declare displayName on React.component instances.. ",
    "spacebaboon": "I've also found this. Users are able to enter invalid dates, e.g. typing extra characters the end of a valid date. the invalid date stays in the input field.\nreverting to 0.44.0 has fixed it for now. the behaviour in 0.44.0 is to revert to the previous good value if the date is invalid, which is what I'd expect.. ",
    "cadbox1": "i fixed this by adding an onBlur event that clears the datepicker inputValue using refs\nhandleBlur() {\n    this.datepicker.setState({ inputValue: null });\n}\nrender() {\n    return <DatePicker ref={datepicker => {this.datepicker = datepicker}} onBlur={this.handleBlur}/>\n}. ",
    "shadrech": "Will work on tests at the weekend. Will creating tests be all thats needed to fix the codecov errors?. My bad. Been really busy at work. Will work on tests this weekend hopefully \ud83e\udd1e\ud83c\udffe. @martijnrusschen Sorry for hiatus. Added tests but codecov still not happy. Please advise on best way forward? What am I missing here?. Yh I can add this to README. I had just included examples of how to use the new feature in docs-site/src/examples (exclude_time_period.jsx, exclude_times.jsx, show_time.jsx). But yh I will add some info in README. What of the tests? @martijnrusschen . Will work on requests at the weekend. @permadiwibisono Whats your operating system and browser?. Sorry forgot to change that back. That port was occupied with a different process when I was developing the datepicker. That change isn't necessary at all. \"LLL\" is more verbose. It displays the time as well. Maybe I should set a if statement if this.props.showTimeSelect is instantiated before changing the format to display time as well. I'm pretty sure I didn't edit these files. They must have been edited when running yarn start and editing files in src/ directory. Only applicable if user decides to have a time range. Both values required to create time window. Since time loops at 24 (24 hr clock), setting a lower bound with no upper bound for example won't create a finite window (not good at explaining, hopefully that makes sense). @aij Add files ending in .js/.md/.css in directories docs/ & docs-site/ to .gitignore? Since files are auto generated. I find an array to be more simpler. I imagine a scenario where an api call returns a json array of moment.toISOString strings, and all client has to do is convert these to moment() objects and plug the array into excludeTimes. Even maybe extend excludeTime that first a check is made to see if objects received are strings, and automatically convert to moment() objects. That way client can just pass the json array directly to excludeTimes via a simple JSON.parse?. Yh most of it removed. Main function of special casing was for sizing the time component. Now thats done by calculating the month container height via clientHeight (passed via refs). Removed. Used to calculate height. Like mentioned above, now its calculated via month container clientHeight. Lol yh my bad. At first I wanted to test the number of .react-datepicker__time-list-item they'll be; there should be 3 with configuration above. I tried testing with expect(times).to.have.length(3) but kept getting a fail as length always comes back as 0. Any ideas what I'm missing here? Maybe theres another test I can do that'll achieve desired result. \ud83d\udc4d . ",
    "spiroski": "Any progress on this issue? . ",
    "dola": "Overall looking pretty cool. I'm looking forward to using this!\nHowever I would advise to only merge to master when the feature is due to be released. Otherwise the master Readme shows documentation for a feature that is not yet available. (confuses new users). ",
    "actraiser": "Thanks @dola - that was exactly the case for me. I was wondering why adding showTimeSelect to the props did not show up anything  when I tested react-datepicker for the first time using  0.54.0.. PS: The just released 0.55.0 now behaves as expected.  Thx!. ",
    "jamparke": "It would be great if these were in the docs. It just asks for a function without any info on the function.. ",
    "JorgenEvens": "We are seeing something similar in our application.\nPerform a click anywhere else on the page will cause the calendar to update correctly.\nSteps to reproduce:\n\nGo to the inline example\nSelect a any date on the calendar\nNavigate a few months into the future\nSelect another date\n\nExpect:\nThe future date is selected and highlighted\nActual:\nThe calendar switches back to the old date ( but does not highlight it ). Clicking on a different date after this point will only toggle between the last two dates.\nWorkaround:\nCalling setOpen after the component has been rendered seems to correctly select the date.\nThis is also happening in the onClickOutside handler, which explains why clicking anywhere else fixes the issue.\njs\n<DatePicker inline={true} ref={r => r && r.setOpen(false)} selected={selectedDate} />. @alex-shamshurin So what you are suggesting is that the behaviour on the inline example is intended behaviour?\nTo be clear I was literally using the component as specified earlier (<DatePicker inline={true} selected={selectedDate} />), not setting openToDate to any value at all when I ran into this issue.\nIf this is intended I think that the example should be fixed and the documentation should clearly state how inline should be used, because at this point even your explanation confuses me on the purpose of openToDate in the context of an inline calendar.. @alex-shamshurin I've added steps to reproduce in the second comment of this thread.. ",
    "malyfko": "@JorgenEvens Thanx, you saved my life! \ud83d\ude03  . @alex-shamshurin I'm using 'inline' option, OpenToDate shouldn't even be considered. @alex-shamshurin the problem is described by @AntonovAv  - after clicking on the switch month arrow, selecting date works as some kinda 'stack' and takes value I ckicked 2 steps ago, for example.. ",
    "baoist": "Sorry about this, it was unintentional. The base was auto-set to the source's master and I didn't catch it in time for me spamming 'open'.. ",
    "sweetLew2": "Hey, thanks for the fast response - I am on that version actually.  Also, the onChangeRaw isn't fired when the user hits enter.\nI think the main issue is that the datepicker overrides the input (which seems reasonable) but it does so without triggering any events... so I can't revalidate the new date.\n. ",
    "Frezzaldo": "Thanks that worked, but now there is another problem. My config looks like this:\n```\n this.handlerFunction(date)}\n     onChangeRaw={event => {this.rawHandlerFunction(event.target.value)}}\n     className=\"datepicker\"\n     placeholderText=\"MMDDYY...\"\n     dateFormat={\"D/M YYYY\"}\n     locale={\"nb-NO\"}\n     disabledKeyboardNavigation={true}\n     minDate={momentFromOtherDatepicker}\n     scrollableYearDropdown={true}\n     showYearDropdown={true}/>\n````\nWhen clicking on the input the calendar is displayed. Todays date is marked with a light blue color. Then i write \"260517\" and a dark blue color is marking that date and I also see that the code get \"260517\". But if I press enter the light blue date (todays date )is then sent as input to the onChange-method and the date is changed back to todays date or whatever was selected before. If I just tab to next input field instead of pressing enter it works as expected.. ",
    "unlabeled": "Will close this issue. But I hope in major release you'll try to solve it.. ",
    "ilyagelman": "+1 for this. ",
    "martinliptak": "+1. ",
    "jmas": "+1 it will be great to see that fix in master, we can't pass QA's without it. \ud83d\ude04 . ",
    "dmitryk-dk": "+1. @martijnrusschen can you update the status of this fix, because we have the error in console so this is not good for users.. ",
    "Ifgen09": "+1. ",
    "MHultman": "+1\nI'd love to see this in the next release. Have the exact same need!. ",
    "ZachGawlik": "I just ran into those warnings myself, but it turns out the fix is already in v0.46.0! Upgrade your version of react-datepicker to stop seeing the warnings.. ",
    "bodyflex": "worked around this by converting it to a class component. ",
    "jakeboone02": "The recommended approach is to wrap the SFC in a component class and pass the ref callback down to the SFC as a custom prop, but this library would have to convert from string refs to callbacks first.. I took a stab at typing v2:  DefinitelyTyped/DefinitelyTyped#30867\nI'm fairly new to TypeScript so any feedback would be appreciated.. The PR mentioned above was merged so this issue can be closed.. ",
    "wisyr": "If someone is struggling with that issue - the component that you are using as customInput prop has to be a class, not SFC.. ",
    "bs85": "Hey, you can do this:\nconst Datepicker = require('react-datepicker').default. ",
    "lukastong": "@malectro i used popoverAttachment=\"right\" as a prop, but threw error Failed prop type: Invalid propattachmentof valuerightsupplied toTetherComponent, expected one of [\"top left\",\"top center\",\"top right\",\"middle left\",\"middle center\",\"middle right\",\"bottom left\",\"bottom center\",\"bottom right\"].\ni m using version 0.29.0(the latest version download from npm)\ndid V.0.51.0 published on npm?. @martijnrusschen thx~ but why can't i install V0.51.0? even if i use npm install react-datepicker@0.51.0 --save.... ",
    "MatteoNY": "I downloaded the GitHub repository and it's using version 0.30.0 when I tested and it works as expected when using the keyboard to move about the calendar it speaks the day, tested using Chrome and Firefox. This works fine up until version 0.40.0 and then it moves to silence when you select. If you hover it speaks fine. I'm using the latest  NVDA screen reader 2017.3. Also when I move to the newer version 0.53.0 it goes silence. I'd use 0.40.0 but it has major issue on minDate and allows it to select a date prior to today. I've just noticed you have a new 0.55.0 version I will give that a try. If you want a good model I'd checkout  SouthWest Airlines home page's calendar it's exactly what the DOT (Dept. Trans) wants. Also JetBlue's calendar is also accessible. I've tried to use AirBndB's calendar and works but issues with Focus on Firefox. Two years ago I built an app using Angular 1.4/1.5 and used Angular UI Bootstrap and it works like a charm. I may have to give up on React and move to Angular for this new app. I hope you can resolve by maybe providing a props value to enable SRONLY features like speaking when you use the keyboard. I know this is difficult but version 0.40.0 would be perfect if it did not allow the selection of a minDate. Thanks in advance for your help. . ",
    "vcastrejont": "The reason v 0.30.0 works fine with a screen reader is that the input is updated when a new day is selected using the keyboard, the current version no longer do that.\nI am trying to do archive the change date on arrow key pressed behavior using custom input, any help is welcome \nExpected behavior:\n\n. ",
    "richardkazuomiller": "A good start would be to simply pass some of the aria-* props down to the input element.. ",
    "VrajSolanki": "is there any support to change the date as well as time from the date picker itself??. ",
    "karthiklsarma": "Thank you. It helped. Closing the issue.. ",
    "oldo": "@naheller see https://github.com/Hacker0x01/react-datepicker/issues/624#issuecomment-261696513. ",
    "naheller": "Thank you!. ",
    "benjh729": "can get map and move but can't set position from gps. ",
    "kunal886496": "can someone solve this?. ",
    "nicolaskern": "I'm actually facing the same problem!. ",
    "ghfkui": "The same question. ",
    "johhansantana": "well I was having trouble importing react-datepicker/dist/react-datepicker.css' I'm not a webpack savvy so I just added it as a static file and now it works.. ",
    "sislam6": "Just use a tilde in front of the the path. Just like you import bootstrap from the node dependencies.\nAdd this in your scss file import @import \"~react-datepicker/dist/react-datepicker.css\". This should work.. I think its not a good idea to load the css or scss file from the index. If we are using webpack. sass loader should do this. For me I just imported from scss file and it worked fine @import \"~react-datepicker/dist/react-datepicker.css\"; . This should do the trick.. ",
    "AKArunkumar": "@johhansantana if you solved this issue please let me know how,\nI tried, importing using require, importing using ~, made static css file in same directory tried to import but nothing worked for me.. [1] [require-hacker] Trying to load \"react-datepicker.css\" as a \"*.js\"\n[1] [piping] can't execute file: /home/arun/gitlab/auquan_client/bin/server.js\n[1] [piping] error given was: /home/arun/gitlab/auquan_client/node_modules/react-datepicker/dist/react-datepicker.css:1\n[1] (function (exports, require, module, __filename, __dirname) { .tether-element-attached-top .datepicker__triangle, .tether-element-attached-bottom .datepicker__triangle {\n[1]                                                               ^\n[1] \n[1] SyntaxError: Unexpected token .\n[1]     at new Script (vm.js:74:7)\n[1]     at createScript (vm.js:246:10)\n[1]     at Object.runInThisContext (vm.js:298:10)\n[1]     at Module._compile (internal/modules/cjs/loader.js:670:28)\n[1]     at Module._extensions..js (internal/modules/cjs/loader.js:713:10)\n[1]     at require.extensions.(anonymous function) (/home/arun/gitlab/auquan_client/node_modules/babel-register/lib/node.js:152:7)\n[1]     at Object._module2.default._extensions.(anonymous function) [as .js] (/home/arun/gitlab/auquan_client/node_modules/require-hacker/babel-transpiled-modules/require hacker.js:260:68)\n[1]     at Module.load (internal/modules/cjs/loader.js:612:32)\n[1]     at tryModuleLoad (internal/modules/cjs/loader.js:551:12)\n[1]     at Module._load (internal/modules/cjs/loader.js:543:3)\n[1] [piping] further repeats of this error will be suppressed...\n@holzru @sislam6 @frazboyz \nI am still getting above error,\nreact version:     \"react\": \"0.14.8\"\nreact-datepicker version:     \"react-datepicker\": \"^0.13.0\"\n what I tried:\n1. importing css file as per react-datepicker docs\n2. copied css file and add it in same directory then imported css file\n3. configured web pack configuration to load css\nbut still not worked for me.\nhelp would be appreciated.\nThanks. ",
    "hozefaj": "Done. Let me know if any updates are needed.. Oh man. Can you point me to the auto generation process. I can maybe modify the code to generate a table then. . Thats 30min of work down the drain.... :(. Let me have a look. In general I also prefer against custom stuff. But here when I was reviewing docs I realized they can be much better in the form of a table. . Basically this https://github.com/Hacker0x01/react-datepicker/blob/master/scripts/generateMarkdown.sh#L47-L56 LOC needs to be updated to create a tabular format.\nOnly thing is that, if there is a way to add some description for some of the props. That would be useful.. @martijnrusschen @rafeememon Created #898 to update generateMarkdown.sh.... since cannot support multiline code inside a table cell, converted this into single line.. ",
    "holzru": "@vamshikrishna144 & @narchunde solved mine by including react-datepicker/dist/react-datepicker-cssmodules.css in the webpack.config.js. ",
    "frazboyz": "Solved by placing this in my index.jsx file.\nrequire(\"react-datepicker/dist/react-datepicker-cssmodules.css\");. ",
    "grantglidewell": "@frazboyz thanks for this. . Anything new on this? Im working on bringing down the bundle size of my app and moment is a huge chunk of it currently.. ",
    "conlanpatrek": "I don't know that it's an incorrect ref...\nIt looks like an issue with the deferFocusInput call (https://github.com/Hacker0x01/react-datepicker/blob/master/src/datepicker.jsx#L175). When you blur from input A (with an open datepicker) by focusing on input B, you set a timeout that refocuses input A, but by the time that cb gets called, input B's datepicker is popped open. So now, when input B blurs, it will call deferFocusInput which primes it to steal focus back from input A. Wash, rinse, repeat until infinity.\nMy guess is that this never got noticed before because you're also closing the date picker on mouse down somewhere (probably in react-onclickoutside), so clicking into a second datepicker doesn't trigger the loop.. I should also mention that I can recreate the issue with 0.46.0 by not selecting a random date.\nEDIT: @philiptzou called me out on this (thank you, bud) -I was doing something else different. I was using a custom input component, though I was omitting the onKeyDown event handler. My entry point was different but I think the assessment of the loop still holds.. ",
    "riccoski": "From reading it looks like it shows the previous 10 years and the next 10 years... \nyearDropdownItemNumber={1}\nThis will change the amount of years it-/+. If you're on the latest version I believe if you set a maxDate with a year greater than 2100 then that should solve that issue. ",
    "mikeyc7m": "the yearDropdownItemNumber only sets the size of the picker window, it has no effect on the number of available years to pick from.. i'm also interested in a min & max.. hey wait, you can just use minDate and maxDate!. yeah right. so set maxDate to date(2017,1,1,0,0,0) and this means the year picker won't go beyond 2017.. here's my code...\n<DatePicker\n    onChange={ this.moveToDate }\n    selected={ this.props.selectedDate }\n    dropdownMode=\"select\"\n    showMonthDropdown\n    showYearDropdown\n    maxDate={ moment().add(10,'years')}\n    minDate={ moment().subtract(10,'years')}\n/>\nHere's a screenshot, see how it ends at 2027...\n\n. don't use the fancy styled year dropdown, use the <select> dropdown.\ndropdownMode=\"select\". ",
    "dsvictorh": "It was definitely a bit hectic but playing with a separate inner state just to define the value of the input I can force an empty string or today's date at reset! Thanks @aij !!!. ",
    "BillOTei": "related to #1025 any news?. issue seems to come from _this.setSelected(date, event, true); keepInput boolean should be false when called in _this.handleChange. resetting the state works when date has been chosen with datepicker but not\nmanually input. The input itself is uncontrolled\n2017-09-21 15:44 GMT+02:00 Ivan Jager notifications@github.com:\n\nHow are you resetting the state?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1025#issuecomment-331160649,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACNKqrOTAowQaYUTYUt_ThVCf84TzWkoks5skmhIgaJpZM4Pagli\n.\n\n\n-- \n __________________________\n!\\_________________________/!\\\n!!                         !! \\\n!! fsociety: ALX-DEV~$     !!  \\\n!! Alexandre Teilhet~$     !!  !\n!! Web Developer~$         !!  !\n!! +33 6 03 9092 71~$      !!  !\n!! linkedin\n\nhttps://www.linkedin.com/in/alexandre-teilhet-7aa71483\n !!  !\n    !!                         !!  !\n    !!                         !!  /\n    !!____!! /\n    !/____!/\n       ___//!\n      !___!/\n    ___\n   /oooo  oooo  oooo  oooo /!\n  /o#mrrobotoooooooooooooo/ /\n /ooooooooooooooooooooooo/ /\n/___//\n. we are using the seleted property linked to a state variable.. ",
    "maxm450": "Got the same problem with french translations. I added the french translations into moment, and pass the proper locale to the DatePicker and still have the month in english. But when display moment inside a console.log\nmoment().locale('fr-ca')\nconsole.log(moment().fromNow());\nit display the proper string.. ",
    "janhoeck": "Same problem here! Please fix it\n. ",
    "BernardTeske": "Did anyone solve this problem by himself?. ",
    "juliocarneiro": "same problem..... ",
    "amaurymartiny": "Yes, I have a use case where I need a year dropdown to scroll way back (an app about history).. ",
    "tohjustin": "Hmm true, this might not be a huge problem for everyone. =S\nBy exposing more props for the user to control, we can allow them to fine tune the component to their specific use case (might be the reason by this optimization can be disabled in the first place).\nJust to clarify, the fix would provide an option for the user to disable the the tether component's optimization (eg. gpu), everything else would stay the same & be unaffected.. @rafeememon I do understand your concerns, isn't tetherConstraints something similar that's already implemented?\nI'd love to help migrate over to popper.js if it also fixes the blurry text issue... =0. @rafeememon @alex-shamshurin I guess this fix isn't going through? =S\nOn a side note, any plans to migrate over popper.js? I can start working on it this weekend =). @martijnrusschen Is this a green light for me to start working on it? =0. Okay, will create an issue & start working on it this weekend =). @rafeememon  Thanks for the heads up! =)\nI'm aware that this might not fix the issue but will still be glad to help out you guys to migrate over to Popper.js . @martijnrusschen Thanks for the heads up \ud83d\udc4d will let you know if the blurry text is still there!. @alex-shamshurin @martijnrusschen @rafeememon Would be great if you guy can assign this issue to me =). @FezVrasta Thanks for the heads up, will look at it over the weekend!. @alex-shamshurin @rafeememon Just a quick question, do you think we should use popper.js directly or just use react-popper? Cause I'm a bit skeptical about how 'battle tested' this wrapper module is when there's no form of testing implemented =/\nAlso, let's say we're using react-popper and there's some bug in popper.js or react-popper itself, won't we have to wait for the guys w/ the react-popper to fix the stuff before we can update our dependencies & ship the fix on our end?. @FezVrasta Thanks for the quick reply! Didn't realize that you're also the creator of popper.js, I guess I shouldn't be worried about this issue then xD. @alex-shamshurin @rafeememon Popper.js uses a different way of specifying the behavior of the popups & there's some differences in functionality...\nDo you guys intend to maintain the same API & all tether related props? (classPrefix, attachment, targetAttachment, targetOffset, renderElementTo, constraints). @aij Thanks for reviewing, glad to contribute! =) \nRight now this is just a rough draft, still waiting for you guys to chip in about the types of props that we want to expose in our <datepicker /> component. (So that the devs can customize the popper's behavior according to their use cases)\nI'm currently thinking of providing the following props:\n- popperClassName (CSS class attached to the root div of the popper component)\n- popperModifiers (object to configure popper behavior, see popper.js modifier documentation)\n- popperPlacement (controls position of popper)\n. @aij I'm not really familiar with how codecov measure coverage, any idea on how to fix that codecov/patch \u2014 60% of diff hit (target 85.33%)?\n@martijnrusschen Thanks for responding! I don't think we need to rush b/c this commit has some breaking changes in the api, I'm guessing that it's probably going to be merged along with v1 release.\nBy the way, do we have any concrete milestones laid out for our v1.0.0 release?. My bad, master branch is still showing the old docs though =/. This is probably related to #899 . My bad, should have notice this mistake earlier on =S \n@sahaviev Thanks for fixing this! #944 . Fixes issue #943 . You should be able to change the triangle position easily by overwriting the CSS margin attributes defined inside .react-datepicker-popper & .react-datepicker__triangle. (See https://github.com/Hacker0x01/react-datepicker/blob/master/src/stylesheets/datepicker.scss)\nIf you need more help on this, try posting a jsFiddle or codepen example so we can help you out \ud83d\ude03 . @blazebarsamian Really nice examples you have there! It would definitely be ideal that the triangle position behaves similar to the Airbnb's one.\nI'm guessing that you're using this in your project at your workplace, it would be great if you can create a PR for this so that it gets fixed asap for your team \ud83d\ude04 \nAs for your preventOverflow modifier issue, maybe create another issue so that we can discuss & address it separately?. Will attempt to submit a PR over this weekend!. PR merged in #955  . Hi @AnderssonChristian! I will try to reproduce this behavior on my side and create a PR to fix it.\nAlso, is it possible to provide the props that you're passing into the <datepicker /> component? =0. @AnderssonChristian I wasn't able to reproduce the behavior on Firefox, not sure how different is my setup compared to yours. \n\nWould be great if you could provide more details on this =). Hi @AnderssonChristian! I tried using the snippet + datepicker props above but still couldn't get the layout bug that you have indicated =S \n\nHere's how to get my project (used for the screenshot above) on your local machine:\nbash\ngit clone https://github.com/tohjustin/react-datepicker react-datepicker-issue994\ncd react-datepicker-issue994/examples/hello-world\ngit checkout issue-994 # branched from v0.53.0 release\nyarn && yarn run start # browse http://localhost:3000/\nYep, migration to tether.io breaks the react-datepicker's API (you mentioned earlier that v0.48 fixes the problem) but currently I'm suspecting that it's a CSS bug on your side otherwise we should have been able to see the examples on the project's github-page to be broken on FF.\nThe best way to confirm the actual cause of it is to provide me a link to your project so that I can clone it & start looking at the issue. >_<. @AnderssonChristian Sounds good, let me if you need any help on this!\n@alex-shamshurin I think we can close this issue for now =). Hi @kesavan49, could you elaborate more on this? Which example on https://hacker0x01.github.io/react-datepicker/ are you currently referring to? =0. Hmm the current API for specifying the range of the year dropdown feels a bit awkward & your way of specifying a minYear & maxYear seems to make more sense!\nI'm not really sure whether the maintainer is currently interested in making break changes to our API but it would be great to submit a PR for this change =). ",
    "grkacy": "This blur is annoying and is becoming a stopper for using this component in our system. +1. ",
    "FezVrasta": "Popper.js roundes the offset values to avoid half pixels and prevent text blurring. Take a look at react-popper for a battle tested React integration with Popper.js. I use react-popper in production and it works wonderfully.\nI know there's an issue open to add tests, rather than create a new project consider add tests to the existing one maybe?\nAlso, react-popper doesn't lock you to a specific version,this means you can update Popper.js independently.. I'd love to get this fixed. It shouldn't be a complex bug. But for personal reasons I'm going to be away from PC for some time. If someone could come up with a PR it would be awesome.. the table bug should be fairly easy to fix if anyone wants to give it a shot in the Popper.js repo. react-popper depends on popper.js@1.x so you are able to update the popper.js version independently. ",
    "kolupaevri": "Ok.\nIf I get it correctly, problem in this line.\nhttps://github.com/Hacker0x01/react-datepicker/blob/master/scripts/generateMarkdown.sh#L36. ",
    "GreenAsJade": "Hi, sorry for not being clearer.\nI have to run with React 15.4.1 because react-bootstrap wont work with anything later.\nTherefore, I need to know what version of react-datepicker is most appropriate.\nreact-datepicker@0.48.0 requires react-onclickoutside@6.1.1 which requires react@15.5.x.\nI found by trial and error that react-datepicker@0.40.0 calls for react-onclickoutside@4.9.0 which is happy with react@15.4.1\nThe Compatibility note in the Readme only goes as far as React 14.   \nI didn't turn this into a PR because it was trial and error only.\nCheers,\nGaJ\n. I would have thought an authoritative update would have been better, but my suggestion is here:\nhttps://github.com/Hacker0x01/react-datepicker/pull/907\n. ",
    "willbuckingham": "Had a problem somewhere between 0.47 and 0.52 that I believe might have been caused by some of these changes.  Our datepicker was in a container that was overflow:scroll, and in the old incarnation it was fine because because the popup got appended to body, but now it stays inside the container and was affected by the overflow.  Now I can probably removed the overflow scroll, or perhaps I can change some options from: https://hacker0x01.github.io/react-datepicker/#example-20. Sorry, was paying enough attention kinda thought I was tagging on another issue. Not a PR. Will file correctly. Thanks. . ",
    "rmdavenp": "^I second this problem. ",
    "tfuda": "Thanks for the clarification.. ",
    "duncanfwalker": "We are trying to replace something that looks like this\n\nThe week numbers help with finding the date the user wants. In the corporation I'm working for (and in other very large organisations). All of the weeks of the year have numbers that are used consistently across the organisation for scheduling. For example when ours user is talking about a specific date they may say 'the tuesday of week 10', rather than 'March 12th'. \nThe week numbers are not necessarily the same as the ISO week numbers, the way of calculating week number may vary from one organisation to another.\n. At the organisation I am working for the \n2017 week 1 is 31st Dec - 7th Jan\n2016 week 1 is 2nd Jan - 9th Jan\nHow this is decided is based on complex logic that is roughly which week is the first to have more than 3 days in the new calendar year.\nA rule I have seen at another organisations is week 1 starts the first Monday after Christmas\n. If this seems a reasonable parameter to extract I can make a PR?. ",
    "sentient06": "Some companies that deal with scheduling events do have unorthodox week numbering systems that can increase the number of weeks in an year or decrease, positioning the next year's 1st week before and ahead the ISO standard. Also, such prop could be useful for situations like fiscal year starting in April, for example.. Hello, please find the PR below. All the best.\nhttps://github.com/Hacker0x01/react-datepicker/pull/934. I have the same problem, I've been forced to wrap the datepicker in a parent element with the class I require to include an icon over the input.. Should I create a new PR?. Sure, I'll add a new test above that one.. ",
    "alexaung": "Sorry. My mistake. . ",
    "iphonic": "Below is my import \n```\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\n```\nI don't get any error, but it looks like this\n\nThanks.\n. ",
    "shnako": "@iphonic Add this to your main.js:\nrequire('react-datepicker/dist/react-datepicker.css');. ",
    "acollier88": "maxDate={moment()} solves it. @Bobvantpadje @lmichailian I used maxDate={moment()}. ",
    "marius-vlas": "You can. Check the \"Open To Date\" example:\nhttps://hacker0x01.github.io/react-datepicker/#example-27. ",
    "victorredondoGL": "Can we get this fix merge? Im running in the same issue and the fix seems to be pretty clear.\nThanks guys. ",
    "U-4-E-A": "I was having this issue in Chrome. I resolved it by adding this to the popperModifiers config: -\ncomputeStyle: { gpuAcceleration: false }\nHope that helps someone.. ",
    "m1n0s": "@martijnrusschen could you tell me when approximately will be a release with this fix? Thanks.. @martijnrusschen, unfortunately, the bug is still present. Please reopen an issue, I'll try to fix it myself and make a PR after if succeed.. Hi @martijnrusschen!\nI kindly ask you to check this PR as soon as you can and release it because my project is very depending now on this feature.\nI hope I've done check and updating state in proper place and it not - I hope you get the idea and can do it better.\nAnyway thank you a lot for this awesome and very flexible picker.. @martijnrusschen @rafeememon \nI've added test case for my changes. Please review.\nLeo\n. ",
    "karlkras": "@xzyfer In your calendar captures in the OP, you're showing days of the week in a customized short format (not Su, Mo, Tu ...), could you tell me how you did that?. Wow, I just asked the same question, and this has been sitting here for 8 months? Well that's discouraging. . So the proper way to do this is configuring moment' for the target language, e.g.,\n```\nmoment.locale('en', {\n    weekdaysMin : 'S_M_T_W_T_F_S'.split('_')\n});\n```\n. @dahliacreative Yes, please share. I'm pulling what little hair I have out trying to \"fix\" this behavior.. Hey Simon, thanks for the feedback.\nHmm, I guess we probably aren't talking apples to apples on this. Here's an example of the problem I'm having... the component:\n```\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nclass DateExamplePicker extends Component {\n  constructor (props) {\n    super(props)\nthis.state = {\n  startDate: this.initialDate()\n};\n\n}\ninitialDate = () => (\n      moment().add(2, 'M')\n  );\nhandleChange = (date) => {\n    this.setState({\n      startDate: date || this.initialDate()\n    });\n  }\nrender() {\n    return ;\n  }\n}\nexport default DateExamplePicker;\n```\nso if you delete everything in the text field, the value in the onChange handler is reported back as null.\nWhen I detect this, I try and set the selected value back to initial date. You will see that the date does wind up properly reset in the calendar, but isn't rendered into the text field.. @dahliacreative Oops, you are correct (fixed my example), but the original issue remains. Won't update the text input when I force the selected back to the default date.. Yeah, I've tried using both the onblur and onkeydown events to see if I couldn't simply set the value on the input, but that didn't seem to work (frankly I don't know why, I assume this datepicker bug is getting in the way). I'll post the code showing this attempt later.\nI've been avoiding digging into this code myself (reason why I choose to use this was to save time rolling myself), but looks like I may not have a choice if I want this fixed.. So this functionality was never pulled in and there isn't any support for customizing the Day strings in the calendar header?. I would like documentation that would address a growing number of nebulous usage challenges. Using this github repo for technical questions is mostly unhelpful and getting very little notice from any existing knowledgeable devs.. Thanks, yep, found a solution by hunting around the issue items.. Yes I did... there's a class for the dates that aren't in the month (react-datepicker__day--outside-month), that I overwrote to basically hide these elements.. Help?. Actually, unfortunately it doesn't.\nConsider my sample code here \nI am catching this on the onChange callback, and when it's null, as it will be if you delete the entire input, I set it back to the original date via the selected value being linked to my state. Bug. oh, using the placeholder. simple but clever. thanks!\nI still maintain that this is a bug in the picker. If the selected date is changed by the client, the associated text input should be changed accordingly... but since this work around works, it will probably never get addressed.\nOh, also thanks for the link to codesandbox, I've been looking for a service like this.\nthanks again!. well, there is the onKeyDown callback, from which you can theoretically explicitly control what is entered into the \"value\" prop, which dictates what shows up in the input.\nHowever, I tried this but abandoned the attempt as I found that the datepicker will unexpectedly add its own stuff to this value before it calls the callback making it unpredictable and pretty much useless.\nYMMV, and you might have better success at making this work so don't let me deter you. Personally I'd like to hear from someone who actually makes this work properly.. Yep, what @WesselKroos said.. Is there a question?. or simply:\npadding: 0;  ?. ",
    "rkosafo": "@nbkhope In my case, I just added the class directly to the source file. Only problem is that it is lost, after e.g. adding a new npm package, and must be done again.\n@aij Is there anything we can do to get the PR merged?. I have some forms with date fields. For an \"empty\" form, this field is null. What I want to do is to have a date picker that shows nothing or a placeholder like input controls.\nAt the moment, I get an error when the value is null so I use moment(). The concern however is that it is not possible to know whether the value is actually set or not since the picker always displays something.\nFields like  dateOfBirth and dateJoined appear to have values when the value is actually null.. Not really sure but in the current version, passing null as date does not throw exceptions so this issue is fixed.. ",
    "buhuitou": "Sorry. This is a mistake to open PR here.. Hi! Thanks for your question.\nAs I understand Enter, Tab or Esc key presses are the only events which give the signal that user typing-in is ended hence eventual error events should be emitted.\nI hope my answer is clear.\n. @aij I think your points are reasonable.\nAs to the first point, I definitely agree that the event should be emitted when the field loses focus instead of on Tab pressed.\nAs to the second point, I think the proposal implements only optional event and they may be simply ignored when not desired. For this reason, they are not intrusive but give flexibility of control.\nBy the way, at least on Mac, Cmd-Tab does not trigger Blur event. I think it's the same on Linux but I am not sure on Windows.\nIf you agree, I can try to adjust the implementation for the first point.. ",
    "bradbirnbaum": "I am also having issue as a result of switching from tether to popper. ",
    "evolve2k": "To clarify for future reference, the version under discussion is 0.49 and this change:\n- Migrate from tether.io to popper.js for handling calendar popups\nWorkaround: Revert back to 0.48 for the mean time.. Edit: 17 October - Workaround helps a bit but doesn't solve the issue - see https://github.com/Hacker0x01/react-datepicker/issues/1018#issuecomment-430493313\nWorkaround\nExplicitly add a utcOffset paramater and set it to zero.\nIt seem the system uses your local utfOffset by default causing a difference in time.\n\nThe 'fix' seems to relate to the moment object having no utc offset the second time but using your local system offset the first time.\n\nExample applying the workaround:\n```\n\n```\nhttps://reactdatepicker.com/#example-12\nThis worked for me. Thanks to @RobMaple. Updated since I listed my 'Workaround' post on 7 June, seems it's working only when the local time is on the same day as UTC. For me in Australia, this means that half the day it works and the other half of the day it's off-by-one.  This is when the user has the datepicker control open and selects a date with the mouse the first time (eg when the date is empty). \nOnce there is a date present the control works correctly for future selections of dates.\n. ",
    "vitaliy-komenda": "@evolve2k I cannot because it fails in Jest test with: Invariant Violation: getNodeFromInstance: Invalid argument.. ",
    "f2net": "This project is using \"react-popper\", not \"popper.js\" by FezVrasta (which should have solved this problem since 1.11.0).. ",
    "pierre-H": "Does anyone have a concrete solution ?\nI have the bug inside a table.... ",
    "poushy": "Facing same issue with typing in value as well.. ",
    "mikkanika": "Acctually \"handleChange\" does not work if you paste the value into.. ",
    "Odrin": "Just noticed, that it's duplicate of #825, so you may close this and merge #825. ",
    "vicky-blr": "I thought to use readOnly to make sure user can't paste something in this. If I use readOnly, required is not working for me. Any reasons why? Can we not use both together?. Then is there any other option to disable typing/pasting directly into date-picker? Currently users can type texts as well in this. Obviously I can do verification by writing my custom logic but I'm just checking if there is already some flag that can disable manual typing or pasting something into this.. @RohitoOo \nI'm just using required to make sure it not blank or null (like below)\n<DatePicker minDate={minStartDate} maxDate={maxDate} selected={startDate} onChange={this.onChangeStartDate} required />\nBut as soon as I add readOnly (below), required is not working and its allowing blank value which is weird.\n<DatePicker minDate={minStartDate} maxDate={maxDate} selected={startDate} onChange={this.onChangeStartDate} required readOnly />. > I was able to get the desired behavior by adding a handler to onChangeRaw and preventing default:\n\n```\nhandleDateChangeRaw = (e) => {\n  e.preventDefault();\n}\n...\nrender() {\n  ...\n  \n  ...\n}\n```\n\nThis gives expected behavior, thanks a lot for this option :). ",
    "KarloZKvasin": "In react-datepicker 1.6.0 - readOnly disabled all component. I can not select from the datepicker.. ",
    "steinarb": "I have the same experience as the previous poster: setting readOnly to true, prevented the date picker from popping up. Version 1.6.0 for me as well. Looks like the new behaviour is intentional and new with 1.6.0, see https://github.com/Hacker0x01/react-datepicker/issues/1480#issuecomment-418777648. Looks like the new behaviour is intentional: c8c106e766f7893efe3833bebf8fcfe8fea2bf46\n. Downgrading to 1.5.0 and setting readOnly={true} gave me the desired behaviour on mobile devices: tapping into the date field pops up the date picker, but not the mobile keyboard. > @steinarb I downgraded to 1.5.0 and the readOnly behavior is the same as 1.7.0 (it disabled the input) in Chrome.\nMaybe a caching issue? Try opening your application in chrome incognito.. ",
    "RohitoOo": "@vicky-blr Please share your logic for validate dates. ",
    "sonusandeep": "the same issue with me and also until unless we don't strict the keyboard entering here, we have a write many validation conditions to check valid date entered  and if there are any 2 fields like start date and end date, in this case, there are validations that need to write based on the comparison. ",
    "joe-oli": "as answered by @rafeememon and closed soon after, using 'readOnly' is not really an answer. It disables the whole component, including the popup calendar. \nWhat you can do is give the DatePicker component an id, then on componentDidMount use getElementById to find the embedded input element, and use JS to set it to .readOnly = true.. ",
    "mariogintili": "I think its important to have an API where the end user is only allowed to select a date rather than manually inputting one. It guards us from input errors and odd behaviours. ",
    "daws": "I was able to get the desired behavior by adding a handler to onChangeRaw and preventing default:\n```\nhandleDateChangeRaw = (e) => {\n  e.preventDefault();\n}\n...\nrender() {\n  ...\n  \n  ...\n}\n```. ",
    "rbar2": "Any plans to add an option to allow only selecting a date as @mariogintili mentioned? \n@daws's option works for desktop, but not for mobile since the keyboard still shows. The only way to prevent the keyboard from showing on mobile appears to be reverting to version 1.5.0. Here is a codepen showing the issue - https://codepen.io/anon/pen/bjxENG. This is what worked for me.  By default, the Manager class is null.. give it a class name, then you can apply css to it.\nGo to node_modules > react-datepicker > es > index.js > line 2456:\nChange:\nreturn React.createElement(\n  Manager,\n  null,         // NOTE: change this line\n  React.createElement(\n    Target,\n    { className: \"react-datepicker-wrapper\" },\n    targetComponent\n  ),\n  popper\n);\n\nTo:\nreturn React.createElement(\n  Manager,\n  { className:\"react-datepicker-manager\" },  // NOTE: changed this line to contain a className\n  React.createElement(\n    Target,\n    { className: \"react-datepicker-wrapper\" },\n    targetComponent\n  ),\n  popper\n);\n\n\nThen you can apply css like this to make the width 100%:\n.myContainer .react-datepicker-manager,\n.myContainer .react-datepicker-wrapper,\n.myContainer .react-datepicker__input-container {\n  width: 100%;\n}\n\n\nRecommendation to Authors:\nreact-datepicker-manager should be added as the className on the Manager by default. Hi @martijnrusschen apologies for the delay.  I believe I have removed the changes you were referring to and created an updated pull request here. ",
    "siarheipashkevich": "@kyleturman I have the same issue.\nPlease add the ability to setup a class for this div element.. I have the same issue while building to production with react 15.6.2. I have the same issue.. ",
    "sahaviev": "I have the same issue too.\nPlease fix this foolish programming choice.... @rafeememon ok, I will try to fix and commit it now. ready... ",
    "kyleturman": "Thank you @sahaviev and @tohjustin!. ",
    "mellis481": "This is still an issue for me.  In my situation, however, I can enter a valid date which it will correctly accept onBlur, but if I hit ENTER, it will ignore my valid date and pick today.  I even tried adding disabledKeyboardNavigation, but that did nothing.\nI even added the following code to no avail:\nconst onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    return false;\n  }\n  return;\n};. @bcullman I understand the way you've interpreted W3C's read-only definition, but you understand it now acts differently than the HTML input's readonly functionality which is what the react-datepicker element renders?. @steinarb I downgraded to 1.5.0 and the readOnly behavior is the same as 1.7.0 (it disabled the input) in Chrome.. ",
    "davidgomes": "I have figured out why this was happening - this is for the case where the user types in an empty string in the DatePicker's textbox.. ",
    "blazebarsamian": "@tohjustin I actually think the triangle position should be in a :before around the input so that the triangle will be displayed relative to the input. Take a look at airbnb's datepicker and how they make the pip so that its not always in the same position. \nFor example, this is done with Airbnb's React-dates:\n \nWe needed the functionality to select years so we switched to using this datepicker. The only problem is that the triangle is fixed and doesnt point to the right input. \nExamples using react-datepicker:\n \nNOTE: the main source of this issue is because we had to use the popperModifiers to prevent overflow outside of the viewport. Otherwise it looks like this with the calendar running off screen: \n\nUltimately, I feel like if this is done, the triangle position wouldnt need to be customizable since it will automatically be in the correct position pointing to the right input.. This is probably a separate issue: but on mobile the preventOverflow modifier just overlays everything on the screen including the source input.\n\nBut if you don't use the preventOverflow modifier, the UX on mobile is extremely aggravating.\n\n. ",
    "pfarnach": "Any more on this?  I'm running into a case where I'm using the datepicker with Redux Form which, onBlur, will set the form's input value to the e.target.value, which is a string.\nEdit:\nAfter playing around a bit more, it seems like you can pass the value as the first argument to the Field's onBlur method.  I do something like this:\n<DatePicker\n    ...\n    onBlur={(e) => {\n        const val = props.input.value ? _.cloneDeep(props.input.value) : null\n        input.onBlur(val)\n    }}\n/>\n(not sure if the _.cloneDeep is necessary but didn't want to take the chance). @hdpinto I was running into the same issue and just switched over to using the portal version on mobile and tablet -- example here\n. I think you've over-complicated it.  Let Redux Form handle the datepicker's state using its onChange method.\nMy datepicker field component looks something like this:\nconst ReduxFormDateRange = (props) => {\n    return (\n        <DatePicker\n            selected={props.input.value || null}\n            onChange={props.input.onChange}\n        />\n    )\n}\nwhere props.input are just the regular input props that Redux Form passes in via the Field component.  If you really need a hook into the onChange method, you could set up a function inside of this component that calls the input.onChange indirectly.. If I'm following the question, you need to include the dateFormat and timeFormat props.  I pass in a prop (boolean) via the <Field> component called showTimeSelect and use it like this (simplified for the example) in the Redux Form Date Range component:\nconst ReduxFormDateRange = (props) => {\n    return (\n        <DatePicker\n            selected={props.input.value || null}\n            onChange={props.input.onChange}\n            showTimeSelect={props.showTimeSelect}\n            dateFormat={props.showTimeSelect ? 'lll' : 'll'}\n            timeFormat={props.showTimeSelect ? 'HH:mm' : ''}\n        />\n    )\n}. ",
    "jcabrerazuniga": "looks like something related to the  selected  props. Is it getting a value coming from the  moment  function? (a moment object?). https://github.com/Hacker0x01/react-datepicker/issues/624. ",
    "markhomoki": "This is what I thought so, but defaults to moment(). Now I created a simpler case based on the documentation and the issue is the same. I'm not sure if its related to webpack, because on first compile works fine. Then when recomplies after watch it breaks, but only because of the react-datepicker.\nHere is my simplified code, which still doesn't work as it did before.\nimport React from 'react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nexport default class _DatePicker extends React.PureComponent {\n\n    constructor (props) {\n        super(props)\n        this.state = {\n            startDate: moment()\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(date) {\n        this.setState({\n            startDate: date,\n        });\n    }\n\n    render() {\n        return (\n            <DatePicker\n                selected={this.state.startDate}\n                onChange={this.handleChange}\n            />\n        );\n    }\n}. I found the solution for this issue so I am sharing if anyone has the same in the future.\n\nI am using 2 webpack config files, 1 for production and 1 for development. The development config was running the webpack.optimize.ModuleConcatenationPlugin() plugin, which for some reason under webpack v3 crashes and does not work as expected. \nThis plugin has been removed from my config file which fixed the issue. Hope this will help.. ",
    "shrutic": "The issue mentioned updates the sizes of the font inside the calender. However the question is about how to increase the length/height of the input box itself. @orx0r Thanks!!! Works great !! The code snippet really helped. ",
    "staho": "You want to do something like this in your css file\n```css\n.react-datepicker__input-container {\n  width: inherit;\n}\n.react-datepicker-wrapper {\n  width: 100%;\n}\n.javascript\nimport moment from 'moment'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\n```. ",
    "tesarm": "use selected= instead of value= to set it. ",
    "mattgrannary": "Might be related to #1251 but in your example you are not adding the startDate and endDate props. Did you solve the issue you were having?. I'm also dealing with this issue. The examples show all the days within the range as selected (dark blue) where as in my implementation the days in range are only highlighted (light blue) on hover. I'd like to always show the selected state for days within the range.. Solved: you must add BOTH startDate and endDate to each of the DatePicker components.. ",
    "Mukhammadali": "hi @manishk-sdei ! This can fix it. \n```\ncomponentDidMount(){\n    const datePicker=document.getElementsByClassName(\"react-datepicker__input-container\")[0];\n    datePicker.childNodes[0].setAttribute(\"readOnly\",true);\n  }\n```. Hi @AnderssonChristian! I also faced with the same issue on chrome as well. but I tracked the datepicker main div container and could fix it by changing display attribute value to block. . @vikku use Chrome dev tools. And identify main parent divs give them display block attribute. Try from top diva to bottom you can fix it with this. @vilkku can I see your code? Can you share?. ",
    "MarkusLund": "Any progress on this issue? . @rafeememon As @bid007 are stating, this is an issue in both my local version and the demo. . ",
    "rnauthon": "The clear button is still not working on Firefox. . ",
    "joinsunil": "I am also facing the same issue. MM/DD/YYYY dateFormat does not work.. ",
    "superyarik": "also there is case: with date+time, when we type date without time it also select today, but will be better select typed date + 00:00 time. ",
    "Gintez": "Did someone find a workaround for this? . ",
    "Phyks": "I used https://github.com/th0r/webpack-bundle-analyzer, I really like this software, it gives awesome insights on your bundles :)\nSorry for the duplicate :/ I did do a search prior to opening this ticket, but I completely missed this one.\nThanks a lot for the workaround! =)\n\n. ",
    "pmacmillan": "I think I have the same issue.\nIt happens because if the popper element is rendered inside the scrollable container, then it -- by design -- scrolls inside the container.\nI've quickly hacked together this as a solution using react-overlays: pmacmillan/react-datepicker@9df6c1cadb3b50af37c273d575a2a7df0159d838\nYou use it like so:\njavascript\n<DatePicker ... popperContainer={containerElementOutsideOfScrollableDiv} ...></div>\nwhere containerElementOutsideOfScrollableDiv is anything accepted by https://github.com/react-bootstrap/react-overlays Portal element (I temporarily added a div at the root of my document and grabbed a reference with getElementById).\nJust threw this together right now, so I'm not sure if this is the best (or event a good) approach, however it does fix the issue for me (and I already use react-bootstrap for other things, so...). I think the correct solution here is to allow the caller to pass a \"popperWrapperComponent\" or something (still playing with the name)... In other words, let the caller wrap the calendar popover in a container (in my case, a component that uses renderIntoSubtree).\nI'll try to have a PR ready sometime tomorrow. @bcullman thanks for the ping. The branch I created at the end of August works but I was too lazy to create a fiddle to demo it and so it fell off my radar ;)\nHere's a demo of my fix in action: https://codesandbox.io/s/1ozy5ol5vl\nNow that React 16 is out, the react-overlay Portal component could be replaced with React.createPortal.\npr #1074 . I should note that in my demo link, I forgot to create the actual container html so the document.getElementById returns null.\nSuprisingly, this works and Portal will just drop in the element at the bottom of the BODY. So, it's missing in the demo url but works anyway because  magic. lol.\nI also added some test coverage to let the build pass, but I'm wary about writing green-to-green tests.\nFeel free to ping me if anything else is needed.. I'm pretty much in the same place (using react-bootstrap in a production app), which is why I like the approach of: just give me something to wrap the calendar in and that wrapper can take care of whatever approach you want ;).. Oh, and in case it isn't clear, the \"Portal\" example actually uses renderSubtreeIntoContainer (which is the same as react-bootstrap).. Fix #969 . The place where the click happens seems to matter.\n\nIf I click past the end of input, everything works fine. If I click in the middle of the input, the issue crops up.\n\n. What I am seeing is:  if I have one open and...\n\nclick after the end of the other input, then handleCalendarClickOutside gets called\nclick within the value of the other input, handleCalendarClickOutside is never called\n\nIn both cases, onBlur is called, but in the second instance the value of this.state.open is true and the component uses deferFocusInput to regain focus.\n(all within src/datepicker.jsx).\nIn Chrome and Firefox, handleCalendarClickOutside is always called.. Looks like Safari is event drunk.\n\nvs\n\nfrom: https://www.quirksmode.org/dom/events/tests/blurfocus.html\nBasically, if you click within the content of the text input with another input element focused, you get something like:\n\nblur on textarea\nfocus on text\nblur on text\nfocus on textarea\nblur on textarea\nfocus on text\n\nThis would explain the observed behaviour.\nI suppose an approach to fix this might be to debounce the focus/blur events, reacting only to the last one... but... yikes.. Interesting: https://github.com/facebook/react/issues/10871 Related?. At issue are the spurious events that safari seems to emit like crazy.\nIn thinking about this issue, I found this workaround.\nAs a proof of concept, I created this fiddle to demonstrate the problem and the workaround (see capture from safari below).\n\nSo, I think I'm on to a workaround here and would totally welcome feedback before plodding any further ahead ;)\n. This gist provides a WIP workaround for the issue in Safari. Supplying it to DatePicker as a custom input seems to resolve the issue:\nhttps://gist.github.com/pmacmillan/5e78836821ac22031567382dadd4a72e\nBut I'm not terribly happy with it and I don't think it belongs in this library (i.e. it feels like should be fixed either as part of React or as part of an environment compat polyfill).. It appears to be a regression in removing moment.\nhttps://github.com/Hacker0x01/react-datepicker/commit/f0d4c560c3f5722366c553bbbca3748cd03688fe#diff-eae406df76db9079672d27cd79e9079eL280\nThe old code (isDayInRange) rounded up/down whereas the new code just uses the day (which is probably at hour 0 and would not include any time after midnight).\nA workaround would be for the consumer of date picker to round dates to the start/end of days (which is probably not ideal).\nworkaround example: https://codesandbox.io/s/oo23r64r4q  (notice the startOfDay/endOfDay usage).. ",
    "MarineWinMedia": "Hi,\ni have the same issue, if someone have the answer.\nThat's be pretty cool !. I found a solution.\nYou have to insert :  import 'moment/locale/en-gb';\nand you can use locale=\"en-gb\".\nNow my week begin on Monday.\n. ",
    "marvwhere": "i do not understand the 66.66% failure . ",
    "dimitropoulos": "for notoriety of the impact of this issue: +1 (emoticon) if this is preventing you from using React 16 (now that it's released). ",
    "bjankord": "There is an open PR to add compatibility with react v16 here: https://github.com/Hacker0x01/react-datepicker/pull/1047 @martijnrusschen @rafeememon would you have some time to take a look?. @martijnrusschen Can we get a release for this published out to npm?. @adam-golab Overall changes look good to me. There are a few lint issues which TravisCI is getting hung up on.. @JustFly1984 A separate issue / PR would be good for the mobile issue you described. Let's keep this PR focused to adding react 16 support.. @fagerbua if you have things working in https://github.com/fagerbua/react-datepicker/tree/react16 can you submit that as a new PR.. Looks like this is failing on travis with the following error message:\nThe command \"yarn add --peer moment prop-types\" failed and exited with 1 during .\nThe prepublish command seems to be running and triggering the exit 1 status.\nI'm not familiar with what $(npm -v | tr . '\\n' | head -n 1) -ge '4' is actually doing.\nHowever, my thought is the prepublish script should not actually be run here, and the script should change from prepublish to prepublishOnly.. Looking at the latest travis error message has me thinking theres an issue around enzyme or the current use of it in the PR.\nsh\n TypeError: Super expression must either be null or a function, not undefined\n  at webpack:///~/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:45:0 <- test/index.js:39939\nI jumped over to the enzyme project to look and see if they had any open issue, I came across this issue which seems related: https://github.com/airbnb/enzyme/issues/1172\nI think it would be helpful to resolve the peerDependency warnings noted in the above comment on the package.json file and then follow the enzyme migration guide: https://github.com/airbnb/enzyme/blob/master/docs/guides/migration-from-2-to-3.md. There is an open issue around react 16 support here: https://github.com/Hacker0x01/react-datepicker/issues/972. Really interested in this update! Nice work @Darrken, also glad to see @martijnrusschen optimistic of the change \ud83d\udc4d . I'm very interested in this, we've been using Hacker0x01/react-datepicker and have been happy with it, (especially with the removal of MomentJS), but are interested in seeing improved accessibility of the component. @chandlerprall this will need to be updated with master which removes Moment. \nWould love to see this added to the project @martijnrusschen!. Linter is throwing error about moment being imported, but not actually used. \nWhat is this import being used for?. Linter throws an error that getDayOfWeekCode is defined but never used.\ngetDayOfWeekCode should be pulled in via the import on line 6\nimport * as utils from '../src/date_utils'\nLinter also throws error that ../src/date_utils is imported more than once.. Linter is throwing error about moment being imported, but not actually used.\nWhat is this import being used for?. Linter is throwing error about moment being imported, but not actually used.\nWhat is this import being used for?. Linter is throwing error about moment being imported, but not actually used.\nWhat is this import being used for?. Linter is throwing errors about duplicate import and that Datepicker is already defined. \nRemove one of the import DatePicker from '../src/datepicker.jsx' instances.. The current build on travis is throwing warnings around peerDependency issues:\nwarning \"enzyme-adapter-react-16@1.0.4\" has incorrect peer dependency \"enzyme@^3.0.0\".\nwarning \"enzyme-adapter-react-16@1.0.4\" has incorrect peer dependency \"react@^16.0.0-0\".\nwarning \"enzyme-adapter-react-16@1.0.4\" has incorrect peer dependency \"react-dom@^16.0.0-0\".\nwarning \"react-test-renderer@16.0.0\" has incorrect peer dependency \"react@^16.0.0-beta.5\".\nThe devDependency on enzyme should get bumped to ^3.0.0\nThe devDependency on react, react-dom, react-test-renderer and  should get bumped to ^16.0.0. @rafeememon I'd recommend only listing peerDependencies for versions which are actively being tested against.. @aij Yeah, setting up testing for all the major react versions which you want to support would be the ideal.. ",
    "jeffijoe": "I'm also having issues with React 16:\n\n. ",
    "rufman": "Looks like https://github.com/souporserious/react-popper/pull/59 is merged, so updating to the latest version will resolve the issue.. Yeah I tested it on my setup and everything works, except for yarn check which throws a peer dep error. react-popper will need to be updated too once https://github.com/souporserious/react-popper/pull/59 merges.. @rafeememon When I tried the local build (yarn run start), everything seemed to be working fine.. ",
    "pawarvijay": "Still Its giving error with react 16 ,  am i missing anything\n```\ntoms-Macbook:~ tom$ cd fireworks/\ntoms-Macbook:fireworks tom$ clear\ntoms-Macbook:fireworks tom$ mkdir myproject\ntoms-Macbook:fireworks tom$ cd myproject/\ntoms-Macbook:myproject tom$ npm init -y\ntoms-Macbook:myproject tom$ npm install react react-dom react-datepicker --save\nmyproject@1.0.0 /Users/tom/fireworks/myproject\n\u251c\u2500\u252c react@16.0.0\n\u2502 \u251c\u2500\u252c fbjs@0.8.16\n\u2502 \u2502 \u251c\u2500\u2500 core-js@1.2.7\n\u2502 \u2502 \u251c\u2500\u252c isomorphic-fetch@2.2.1\n\u2502 \u2502 \u2502 \u251c\u2500\u252c node-fetch@1.7.3\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c encoding@0.1.12\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 iconv-lite@0.4.19\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-stream@1.1.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 whatwg-fetch@2.0.3\n\u2502 \u2502 \u251c\u2500\u252c promise@7.3.1\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 asap@2.0.6\n\u2502 \u2502 \u251c\u2500\u2500 setimmediate@1.0.5\n\u2502 \u2502 \u2514\u2500\u2500 ua-parser-js@0.7.17\n\u2502 \u251c\u2500\u252c loose-envify@1.3.1\n\u2502 \u2502 \u2514\u2500\u2500 js-tokens@3.0.2\n\u2502 \u251c\u2500\u2500 object-assign@4.1.1\n\u2502 \u2514\u2500\u2500 prop-types@15.6.0\n\u251c\u2500\u252c react-datepicker@0.57.0\n\u2502 \u251c\u2500\u2500 classnames@2.2.5\n\u2502 \u251c\u2500\u2500 moment@2.19.1\n\u2502 \u251c\u2500\u2500 *UNMET PEER DEPENDENCY react@^15.5.x\n\u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY react-dom@^15.5.x\n\u2502 \u251c\u2500\u2500 react-onclickoutside@6.0.0\n\u2502 \u2514\u2500\u252c react-popper@0.7.4\n\u2502   \u2514\u2500\u2500 popper.js@1.12.6\n\u2514\u2500\u2500 react-dom@16.0.0\nnpm WARN react-onclickoutside@6.0.0 requires a peer of react@^15.5.x but none was installed.\nnpm WARN react-onclickoutside@6.0.0 requires a peer of react-dom@^15.5.x but none was installed.\nnpm WARN myproject@1.0.0 No description\nnpm WARN myproject@1.0.0 No repository field.\n```. It works fine with react v16, react-datepicker v0.56.. related to #972  & #1092 . ",
    "dhruvparmar372": "After digging around I figured this might be due to https://github.com/webpack/webpack/issues/706 . ",
    "cinic": "I fixed it by changing react-datepicker to airbnb/react-dates :+1: . ",
    "NI-Hsu": "Facing the same problem\nseen no one care. ",
    "danoc": "\nI'm getting this issue at well. Seems to be related to the calendar ref.. @gregpasha \u2013 Is there any chance that you are running two copies of React on your page? \nIt turns out we were. Spent many hours trying to remove the extra version and see if it fixes this issue but our build system is complicated so this is unfortunately not trivial.\nHere's a blog post to help see if you have two versions of React running:\nhttps://medium.com/@dan_abramov/two-weird-tricks-that-fix-react-7cf9bbdef375. Just want to circle back and point out that the issue we were having was indeed related to loading two versions of React on our pages.. ",
    "gregpasha": "I am not using inside a SFC, it's only happening when I use minified react.. ",
    "Fogetti": "Actually I see the same thing. Clicking outside the calendar after I select a date but not the time doesn't close the calendar.. ",
    "andrewwong97": "See #324 . I was able to reproduce the problem with a similar component. Essentially if you want to use the setState function, you need to bind it to the component. Alternatively, you can use the ES6 arrow function inline to avoid having to bind.. return <ChildComponent\n        wants_interview_date={this.state.wants_interview_date}\n        onDateChange={(date) => this.setState({wants_interview_date: date})} />;. ",
    "relifeted": "Finally got some time to fix test case, plz review it, tks!. ",
    "rijk": "When will this update be released to npm?. ",
    "mhaylock": "Thanks @rafeememon, do you have an idea of when the next release might be? I'm keen to be able to use this and the fix from #960 in a released version.. ",
    "Tarkzeng": "@sators Have you fixed this problem?. ",
    "sators": "No @Tarkzeng, I moved on to a different library.. ",
    "sonofjack": "@heatherbooker @serkolch The docs where not clear on this, I got the className to render on the customInput when providing it to the parent <DatePicker /> component.\nThis will render the custom-class on the button component\n<DatePicker\n  className=\"custom-class\" \n  customInput={<Button>{value}</Button>}\n/>. ",
    "davidtheclark": "Looks to me like the cause of this is that the package.json's main field is pointing to dist/react-datepicker.min.js \u2014\u00a0the minified file. Instead, I believe that should point to dist/react-datepicker.js, and leave it to the user to minify.\n@nbkhope My workaround for now is to require('react-datepicker/dist/react-datepicker') directly. . ",
    "yeziTesting": "the react 16.0.0 has not this problem. ",
    "AnderssonChristian": "@tohjustin Sure!\nHere's the relative JSX:\n<div>\n   <div>\n      <div className=\"datepicker-wrapper\">\n         <DatePicker dateFormat=\"YYYY/MM/DD\" showTodayButton={'Idag'} minDate={moment().startOf('day')} locale='sv-se' selected={moment(this.state.start_date)} onChange={this._handleStartDateChange} />\n      </div>\n   </div>\n   <div>\n      <div className=\"datepicker-wrapper\">\n         <DatePicker dateFormat=\"YYYY/MM/DD\" showTodayButton={'Idag'} minDate={moment().endOf('day').add(1, 'days')} locale='sv-se' selected={moment(this.state.end_date)} onChange={this._handleEndDateChange} />\n      </div>\n   </div>\n</div>\nUpon further experimentation, I found that going back to v0.48 fixes the problem, but v0.49 and later, breaks it. It must be something with the migration to tether.io; not sure what though.\nI did check for any conflicting css, but there shouldn't be any. Any wrappers above only have display: inline-block. Disabling position: absolute on react-datepicker-popper fixes the layout issue of the calendar itself, but obviously breaks its flow with the rest of the page.. I'm afraid I cannot provide you with a link to the project, because the project is private.\nI did run a new environment, as you suggested, and it worked fine. It's still weird to me though how a previous version works, while the newer doesn't. \nYou might indeed be right though. I'll have a closer look and get back, if I find the issue.\nThanks.. ",
    "Vilkku": "I'm having the same issue. Again, it's unfortunately not a project I can share with you at the moment, but it seems the issue comes from a parent element having a width and a position.\nFor example, on the demo page (https://hacker0x01.github.io/react-datepicker/), using the inspector give .hero__content width: 100px; and position: relative;.\nI am using the datepicker as a part of a form, so the input has a container that is not that wide, just enough to fit a date. I am using Foundation and their CSS grid, so it would be great if there was a solution that didn't involve me modifying the framework's CSS. Perhaps the datepicker element has to be created as a child for body instead of a sibling to the input element?. Setting display: block; does not fix it. I did it manually once using DevTools, and then again with jQuery (which is available on the page) $('.react-datepicker').parents().css('display', 'block');, verified that it did indeed set display: block; and all parents, and still the same issue.\nI believe that having a parent with a pretty narrow width is part of the issue, maybe that's unique for me?. > can I see your code? Can you share?\nUnfortunately, no. But it's really easy to reproduce it on the demo page (https://hacker0x01.github.io/react-datepicker/). Just give give .hero__content width: 100px; and position: relative;, I was unable to get the datepicker to display properly after that even after setting display: block; on all parents.. ",
    "krini": "isn't the same as this one?\nhttps://github.com/Hacker0x01/react-datepicker/issues/962. Did you solve this?. ",
    "kesavan49": "Hi tohujstin,\nThanks for response.\nI am referring example24 (https://hacker0x01.github.io/react-datepicker/#example-24).\nThere is one requirement where i need to restrict user to not select more current year(Ex. 2017).\ni dont know wheter i can touch this source code. But changed source and made build.\nThe changes are,\n\nyear_dropdown.jsx\n\nrenderDropdown = () => {\n    const minYear = this.props.minDate ? this.props.minDate.year() : 1900\n    const maxYear = this.props.maxDate ? this.props.maxDate.year() : 2100\n    return (\n    <WrappedYearDropdownOptions\n        key=\"dropdown\"\n        ref=\"options\"\n        year={this.props.year}\n        onChange={this.onChange}\n        onCancel={this.toggleDropdown}\n        scrollableYearDropdown={this.props.scrollableYearDropdown}\n        yearDropdownItemNumber={this.props.yearDropdownItemNumber}\n        minYear={minYear}\n        maxYear={maxYear} />\n    )\n  }\n\nyear_dropdown_options.jsx\n\nfunction generateYears (year, noOfYear) {\n  var list = []\n  for (var i = 0; i < noOfYear; i++) {\n    list.push(year - i)\n  }\n  return list\n}\nincrementYears = () => {\n    if (this.state.maxYear && (this.state.maxYear <= this.state.yearsList[0])) {\n      return\n    } else {\n      return this.shiftYears(1)\n    }\n  }\nits working as expected. But its done locally and i thought to share here and will helpful to others\n. Hi tohjustin,\nThanks and let us see response from maintainer.. Yes I am using Min and Max Date.\nconst minYear = this.props.minDate ? this.props.minDate.year() : 1900 \nconst maxYear = this.props.maxDate ? this.props.maxDate.year() : 2100. https://hacker0x01.github.io/react-datepicker/#example-24. check this example and from the year drop down i want to restrict. If you have solution please share with me.\nThanks. @mikeyc7m thanks . but your solution is not working for me and testing purpose added 0 years\nPlease find the attachement\n\n\n. @mikeyc7m  thanks. But this is not valid answer to tell my clients. ",
    "blakegilchrist": "Also experiencing issues with Year dropdown when enabled via config setting. We have set maxDate with moment value of today which is honoured by the Month/Day selector (won't let you go beyond current day/month) but the Year dropdown still shows 2018. 2019, 2020.. etc.. ",
    "DonikaV": "Same problem about Year Drop Down. How i can fix it ? . any news ? . ",
    "mfmora": "The select dropdown (when using a min, max date) its not working in safari/ios for me. Does anyone have the same problem?. ",
    "nothingrandom": "Thank you! I don't know why I didn't spot that when I did a search \ud83d\ude33  . ",
    "Deraen": "React-onclickoutside up-to 6.0 provides browser compatible JS file: https://unpkg.com/react-onclickoutside@6.0.0/index.js, but later versions only provide ES ja CJS modules.. This can be solved by adding https://github.com/59naga/babel-plugin-add-module-exports\nIt will restore old Babel 5 behavior that exports the ES6 default property on module.exports and the global object.. ",
    "TechFounder": "HI, I'm running into the same Uncaught TypeError: (0 , _reactOnclickoutside2.default) is not a function error. I'm using React 15.4.2 and React-datepicker 43+ ( I tried every version to the current and get the same error). I'm not using webpack either. What exactly should I do to fix this problem? Load https://unpkg.com/react-onclickoutside@6.0.0/index.js or https://github.com/59naga/babel-plugin-add-module-exports ?\nThanks. I fixed it by loading https://unpkg.com/react-onclickoutside@6.0.0/index.js. Thanks for the solution.. ",
    "marcopadillo": "It works fine in my project, until webpack rebuilds the bundle when a file is modified. I installed babel-plugin-add-module-exports and added add-module-exports to my .babelrc but I can still replicate the error.. ",
    "humphries40": "The first is this.\n\nThe 2-6 are all the same basically, and most likely are because of the first. \n\n. ",
    "danielvip98": "Has this been fixed, it seems the problem continues on IE11. ",
    "Kronuz": "...must be popper's issue? webpack issue? ...??. When using dist/react-datepicker.min.js, as it already comes packed and\nminified, the global variable somehow gets lost, producing an error:\nTypeError: Cannot read property 'PopperUtils' of undefined\nTo prevent this I'm directly using lib/datepicker.js instead.\nYou can either do import DatePicker from 'react-datepicker/lib/datepicker' or fork it and change package.json:\ndiff\n--- react-datepicker/package.json\n+++ react-datepicker/package.json\n@@ -5,7 +5,7 @@\n   \"version\": \"0.55.0\",\n   \"license\": \"MIT\",\n   \"homepage\": \"https://github.com/Hacker0x01/react-datepicker\",\n-  \"main\": \"dist/react-datepicker.min.js\",\n+  \"main\": \"lib/datepicker.js\",\n   \"style\": \"dist/react-datepicker.min.css\",\n   \"files\": [\n     \"*.md\",\n. Who knows.... I'll reopen to see if this could get fixed somehow.\nTo me, IMHO, I believe package maintainers should always provide src with ES6/ES7 modules right there, so users could use any packaging they want when they have to and import directly from sources (and it should be the default). I actually think providing minified dist files (or even lib) is more trouble than we'd want. But that's just me.. ",
    "lordalaqua": "Were you able to solve this issue? I am also getting it when doing server rendering.... Thank you, I had changed the minified version as you first suggested, but importing directly from source is better.\nAnyway, shouldn't the package mantainers take notice of this? Seeing as the issue is closed, I don't see this getting fixed, and it breaks server rendering for someone who isn't aware of importing directly.. Yeah, you are probably right, I wasn't even aware I was importing from the minified version by default, it can be confusing.. ",
    "kkashou": "But problem is when I do console.log(e) on handleSubmit function, Im not using onChange or onChangeRaw. How can I grab the string from the events that is printing out?. So I would need to loop through that object search for the value of \"Moment\" and then modify with what you mentioned above ? . ",
    "kblodget": "Can this functionality be added to the master branch?. Is there any way this may be added soon. This would be a great help to the project I am working on. I am willing to help out to get this feature added.\n  . This is assuming you have a property set up that sets when the user wants 12 hour versus 24 hour formats. \n<DatePicker\n      timeFormat={this.props.timeformat === '24' ? 'HH:mm' : 'hh:mm a'}\n  </. Could you post the fix to this please?. I am having the same problem and results. I have installed yarn version 1.3.2 node version 8.2.1 and tried with node version9.3.0. When I run yarn start \nreactDatePicker/react-datepicker/node_modules/webpack-core/lib/LoadersList.js:58\n    if(element.loader) return element.loader.split(\"!\");\n                                             ^\nTypeError: element.loader.split is not a function\nAny help would be appreciated. ",
    "justame": "@aij The CSS solution looks good, but I think we can adjust it a little bit to something like that : \ncss\n// Styling for the mini-calendar\n.react-datepicker {\n  // [Omitted styling to change react-datepicker colors to match our app]\n  .react-datepicker__current-month.react-datepicker__current-month--hasYearDropdown,\n  .react-datepicker__current-month.react-datepicker__current-month--hasMonthDropdown {\n    // Avoid showing the month and year a second time when it has month and year\n    // dropdowns.\n    display: none;\n  }\n}\n@martijnrusschen @aij, What I suggest is to hide the div if one of dropdown exists instead of both.\nBelow you can see an example of a use case that shows only one of the drop-down: \n\n. @martijnrusschen The 50% drop is very weird, do you have any idea why does it happen?. ",
    "terolepisto": "Ok, where does that title come from?\nI have two calendars in my app. The other says \"February 2018\" and the other says \"Wednesday\".\nSo how do I controll what data the title shows?\nedit:\nok, found, it was the dateFormatCalendar=\"dddd\" -prop.. ",
    "ashic": "Just tried it. It's still showing today / last day of includeDates in blue (using the default stylesheet). . I have the same issue. Datepicker doesn't close if a date is selected. . ",
    "cindyzwang": "had the same issue but found the answer here. ",
    "erikxcore": "Had the same issue, but in my case I had a label that was wrapping the date picker that caused this problem.\ne.g.\n<fieldset className='form-group'>\n<label>\nDate Posted:\n<DatePicker selected={this.state.datePosted} onChange={this.handleDateChange} todayButton={\"Today\"} required/>\n</label>\n</fieldset>. ",
    "tourshi": "I can confirm, I am experiencing the same issue. If Datepicker is wrapped in a label tag it doesn't close on selecting a date.. ",
    "warmbowski": "I see this problem to. I have a component that wraps a Datepicker component in a label tag. The calendar stays open after selection. If I change the label to a div, it works properly. \"react-datepicker\": \"^0.53.0\"\nI will add, I use this component in three different webpack entry points on the same app, and in one of them it works fine. The main difference between the builds is one uses React Router 2 (calendar works properly) and the others use React Router 4 (calendar stays open). I'll have to look harder at that to see if that's part of the problem.. ",
    "honzajerabek": "Same here, trying to use <DatePicker /> as a label for a radio button. adding <label onClick={e => e.preventDefault()}><DatePicker .... /></label> fixed this issue for me. In debugger I found that after select, setOpen(false) was called and DatePicker was closed but right after that it was reopened again (by label? \ud83e\udd14)\nedit: I'm using semantic-ui-react that has their own implementation of label behavior, but you have the idea... Agree! I saw you were doing some building refactors, so I changed the names, but previous state would be better for most users.. I can send a PR after lunch ^^. pushed a new PR, closing this one. is this project abandoned?. I know @martijnrusschen, I was just wondering that there isn't any reply on any of open PRs for a month. As I said, I was thinking about adding tests, but without any success.. I've been testing this fork on production in the meantime.. Hi, sorry for delay, I've finally got back to this and made some tests, even with live code and I've found out that there's another issue with Time component height - there's a height property passed from monthRef with some hardcoded value, which is imo unnecessary and can be solved with CSS. I'll have some time during weekend and have a deeper look at it, maybe it could be simplified. I'll finish the tests later and push them, but that height issue will be a blocker for now... @martijnrusschen hi, I've done tests and removed another hardcoded height value, being now used as computed property from the node. I'm still seeing many hardcoded height px values in the stylesheet, I might have a look at it and post another PR later, I'm using custom stylesheet, made with flexbox :). ",
    "BananaBobby": "+1, I have a label that wraps datepicker component. I use to let user click on a button near the datepicker and open the datepicker as clicking on label triggers focus on the inner input.. ",
    "frizar": "Hello! Any news? This bug still doesn't fixed :(. ",
    "chetan-jain": "Facing same problem, putting datepicker inside label causing it to not close on date/time selection. Works fine when used outside of label.. ",
    "tomoya-ozawa": "sorry, i have a mistakes.\nplz forget about it.. ",
    "zek0faws": "Hi,\nAccording to javascript's documentation, you can use 'dd MMM DD, YYYY' to display the date format you want.. Could you provide a screenshot of what happens ? . ",
    "jayendra-sharan": "Thanks \u270c\ufe0f . ",
    "guillaumepotier": "@aij thanks for your answer, I tried it, but the calendar would be opened in jan 1970, despite my minDate and maxDate.... > Just checking, you're not somehow accidentally passing selected={moment.unix(0)} are you?\nNope, I test and if no value I give moment()\nI'll update my issue title then, and would try to have a look for hopefully make a PR, but right now my workaround works fine I'll go a bit deeper in my project for now on :)\nBest\n. ",
    "erolsmsr58": "Turns out it was some weird CSS being injected into the page, which removed the display property values of the datepicker. This issue has been closed.... ",
    "studiojms": "I didn't understand why not adding to the default styles. \nI wonder if it wouldn't be possible to add this rule direct for the scenario:\n.datepickerClass > input::-ms-clear { display: none; }\nWhat do you think?. Ok, I'll follow this idea and change it in my project.\nAbout people relying on this X, the idea is to disable the X only for those inputs that are using the datepicker with the clearable option set to true, thus, it shouldn't affect other components of any page. \nI am saying that again because I believe it conflicts with the idea of supporting IE 10+ as stated in the project page. \nDo you think there could be, in a future version, something (configuration, specific optional component css class etc.) that could include such feature in a way the user doesn't need to customize anything, but instead, activate the behavior on the component itself?. ",
    "nwkeeley": "Also experiencing this issue. \nI open it up, select date its off by 1 day. I then open it up and select any other subsequent day and its correct. \n. ",
    "xarxziux": "I've run into this problem too.  This seems to appear in release 0.44.0.  From my tests, 0.43.0 behaves correctly and reports the date selected.  Release 0.44.0 reports the day prior to the day selected.\nFrom reading through the commits, it's likely that the problem is somewhere in commit a95cd86, but I've not been able to identify the exact cause.. Scrap that last comment.  Release 0.43.0 worked fine on a test project, but it's now showing the same error on my main project.  The hunt continues.... From further tests, I can actually turn this bug on in a test project using release 0.41.0 just by setting the startDate to null in the constructor function.  Setting it to moment() turns the bug off again.\nRelease 0.40.0 doesn't seem to have this problem.. ",
    "RobMaple": "I've just run into a similar sounding issue to this although on closer inspection it seems to be relating to when daylight's savings time ends at the end of October. Selecting a date after this point initially causes the date picker to be one day behind, selecting a date a second time seems to fix this. The 'fix' seems to relate to the moment object having no utc offset the second time - why this is though I'm not sure. \nTo get around this i'm currently setting the 'utcOffset' prop on the datpicker component to 0 -- this prevents the initial selection from shaowing as the day previous. I'm wondering if this is actually a bug with react-datepicker though or more to do with how dates are handled and manipulated within my app.. @aij The example worked fine although when I updated the version of react-datepicker to 0.55 (the same as in my project) the issue returned. Just updated it to 0.56 however and all looks to be working correctly again \ud83d\ude00. ",
    "aniruddhashevle": "This issue is there in v0.58!. @rafeememon : Yes I'm no it!. @rafeememon :  I've followed the below process.\ncd myproject/node_modules\ngit clone https://github.com/Hacker0x01/react-datepicker.git\ncd ..\nnpm start // it works fine\nnpm run build // gives below error\nerror\nERROR in formFlowStructure.bundle.js from UglifyJs\nUnexpected token: name (onClickOutside) [formFlowStructure.bundle.js:48997,33]. @rafeememon :  v0.58 is working well for build! Thanks.. ",
    "mwickett": "We're seeing this issue on 0.61 as well. With some testing, it looks like it only happens in a GMT negative timezone (WEST of GMT). Setting my machine's timezone to a positive value returns a proper date.\nSetting the utcOffset prop to 0 doesn't change anything.. ",
    "swellmar": "@mwickett @RobMaple Where do you find this utcOffset prob? I can find it on 100 different places . ",
    "tastypackets": "Using v0.39 it corrects after selecting a second date. For example select 12/20/17 and it will be 12/19/17, then select 12/22/17 and it will be 12/22/17.\nInitializing it with a date like @xarxziux mentioned does work.\nEdit:\nI just undated to v0.64 and it is now working properly even with defaulting to null.. ",
    "guyzmo": "I'm having that exact same bug, and I just understood what's wrong after chasing my own tail for hours. As I'm only interested in dates, in the date selector, the handled value is a Date object with a time set to midnight. \nAs the selection of the date is in current local time (I'm in CET time), and the storage is in UTC, local time gets shifted by one hour backward when stored. That makes selection of 2018-02-20 with a default to midnight getting stored as 2018-02-19T23:00:00.000Z.\nAnd because in my code I was doing a Q&D conversion from Datetime to string by splitting over T, I was setting the value back to the wrong date.\nSolution, in my case? use momentsjs e-ve-ry-whe-re!. ",
    "azza85": "I had the same issue,, with the date selected going back a day.  I fixed the issue for me by adding\nselected={null}\nThe reason I had it blank was if I had it set as \nmoment()\nit was displaying today rather than my placeholder text. ",
    "alexjjseppala": "The dates in my app's database were in UTC time with the ISOString format with a \"Z\" at the end \n(ie: 2011-10-05T14:48:00.000Z) \nand I was converting them to Moments as such: \nMoment(\"2011-10-05T14:48:00.000Z\") \nbut this was using my local UTC offset, causing them to appear one day off.\nCreating my dates like this:\nMoment.utc(\"2011-10-05T14:48:00.000Z\")\nfixed my issue\nref: https://maggiepint.com/2016/05/14/moment-js-shows-the-wrong-date/. ",
    "omerdn1": "Still having this issue in 1.4.1, couldn't find a proper solution. ",
    "jimmytb": "Having the same problem. ",
    "klijakub": "I have the same issue. ",
    "fathurhidayat3": "Still exists and mine has 7 hours behind.  I realize utcOffset props was removed in #1527 #1581 . I tried to set locale using registerLocale, setDefaultLocale and locale props to \"id\" but nothing happened. . ",
    "jesseseligman": "Still having this issue.... Wrapping the string in a moment object and then calling .toDate() seemed to fix this for me.\nSomething like:\nselected={moment(\"2019-02-07\").toDate()}. ",
    "ecrofeg": "Agreed, I've spent a lot of time trying to figure out what's going on, before I realised that popperClassName is completely ignored.. ",
    "adred": "I just experienced this. Hopefully fix is coming.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #1020 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1020   +/-\n=======================================\n  Coverage   85.84%   85.84%         \n=======================================\n  Files          12       12         \n  Lines         643      643         \n  Branches      128      128         \n=======================================\n  Hits          552      552         \n  Misses          6        6         \n  Partials       85       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0224bae...95f058b. Read the comment docs.\n. # Codecov Report\nMerging #1022 into master will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1022      +/-\n==========================================\n- Coverage   83.51%   83.45%   -0.07%   \n==========================================\n  Files          13       13            \n  Lines         837      846       +9   \n  Branches      141      142       +1   \n==========================================\n+ Hits          699      706       +7   \n- Misses         33       35       +2   \n  Partials      105      105\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 89.78% <\u00f8> (-0.62%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7829235...959a2e1. Read the comment docs.\n. # Codecov Report\nMerging #1026 into master will decrease coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1026      +/-\n==========================================\n- Coverage   78.77%   78.72%   -0.05%   \n==========================================\n  Files          13       13            \n  Lines         716      724       +8   \n  Branches      141      144       +3   \n==========================================\n+ Hits          564      570       +6   \n- Misses         61       63       +2   \n  Partials       91       91\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 85.03% <\u00f8> (-0.57%) | :arrow_down: |\n| src/datepicker.jsx | 89.72% <0%> (-0.22%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1957c31...7d14bc7. Read the comment docs.\n. # Codecov Report\nMerging #1035 into master will increase coverage by 2.5%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1035     +/-\n=========================================\n+ Coverage   78.77%   81.27%   +2.5%   \n=========================================\n  Files          13       13           \n  Lines         716      721      +5   \n  Branches      141      142      +1   \n=========================================\n+ Hits          564      586     +22   \n+ Misses         61       33     -28   \n- Partials       91      102     +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 84.12% <\u00f8> (-1.48%) | :arrow_down: |\n| src/datepicker.jsx | 89.61% <\u00f8> (-0.33%) | :arrow_down: |\n| src/time.jsx | 54.54% <0%> (+45.45%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 387d10a...62baa84. Read the comment docs.\n. # Codecov Report\nMerging #1036 into master will decrease coverage by 0.47%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1036      +/-\n=========================================\n- Coverage   81.27%   80.8%   -0.48%   \n=========================================\n  Files          13      13            \n  Lines         721     724       +3   \n  Branches      142     144       +2   \n=========================================\n- Hits          586     585       -1   \n  Misses         33      33            \n- Partials      102     106       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 89.18% <0%> (-0.43%) | :arrow_down: |\n| src/calendar.jsx | 81.88% <0%> (-2.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8b33031...a3318f7. Read the comment docs.\n. # Codecov Report\nMerging #1042 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1042   +/-\n=======================================\n  Coverage   81.27%   81.27%         \n=======================================\n  Files          13       13         \n  Lines         721      721         \n  Branches      142      142         \n=======================================\n  Hits          586      586         \n  Misses         33       33         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8b33031...50a5eae. Read the comment docs.\n. # Codecov Report\nMerging #1046 into master will increase coverage by 1.83%.\nThe diff coverage is 96.89%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1046      +/-\n=========================================\n+ Coverage   81.27%   83.1%   +1.83%   \n=========================================\n  Files          13      13            \n  Lines         721     817      +96   \n  Branches      142     141       -1   \n=========================================\n+ Hits          586     679      +93   \n  Misses         33      33            \n- Partials      102     105       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown.jsx | 87.8% <100%> (+0.62%) | :arrow_up: |\n| src/month.jsx | 81.25% <100%> (-0.57%) | :arrow_down: |\n| src/week.jsx | 72.72% <100%> (-0.61%) | :arrow_down: |\n| src/calendar.jsx | 83.6% <100%> (-0.53%) | :arrow_down: |\n| src/month_dropdown.jsx | 85% <100%> (-2.18%) | :arrow_down: |\n| src/day.jsx | 87.64% <66.66%> (+0.43%) | :arrow_up: |\n| src/time.jsx | 52.27% <88.88%> (-2.28%) | :arrow_down: |\n| src/datepicker.jsx | 90.39% <94.73%> (+0.77%) | :arrow_up: |\n| src/date_utils.js | 91.44% <99%> (+11.78%) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99d6879...f9a44b0. Read the comment docs.\n. # Codecov Report\nMerging #1047 into master will not change coverage.\nThe diff coverage is 80%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1047   +/-\n=======================================\n  Coverage   86.25%   86.25%         \n=======================================\n  Files          13       13         \n  Lines         851      851         \n  Branches      142      142         \n=======================================\n  Hits          734      734         \n  Misses         32       32         \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/month.jsx | 83.72% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month_dropdown.jsx | 89.47% <\u00f8> (\u00f8) | :arrow_up: |\n| src/year_dropdown.jsx | 91.89% <\u00f8> (\u00f8) | :arrow_up: |\n| src/day.jsx | 90.47% <\u00f8> (\u00f8) | :arrow_up: |\n| src/week_number.jsx | 41.66% <\u00f8> (\u00f8) | :arrow_up: |\n| src/week.jsx | 77.41% <\u00f8> (\u00f8) | :arrow_up: |\n| src/year_dropdown_options.jsx | 91.11% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month_dropdown_options.jsx | 60% <0%> (\u00f8) | :arrow_up: |\n| src/popper_component.jsx | 75% <100%> (\u00f8) | :arrow_up: |\n| src/date_utils.js | 92.04% <100%> (\u00f8) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e0b061...69825ed. Read the comment docs.\n. # Codecov Report\nMerging #1050 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1050   +/-\n=======================================\n  Coverage   81.27%   81.27%         \n=======================================\n  Files          13       13         \n  Lines         721      721         \n  Branches      142      142         \n=======================================\n  Hits          586      586         \n  Misses         33       33         \n  Partials      102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99d6879...af9707e. Read the comment docs.\n. # Codecov Report\nMerging #1052 into master will increase coverage by 0.4%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1052     +/-\n=========================================\n+ Coverage    83.1%   83.51%   +0.4%   \n=========================================\n  Files          13       13           \n  Lines         817      837     +20   \n  Branches      141      141           \n=========================================\n+ Hits          679      699     +20   \n  Misses         33       33           \n  Partials      105      105\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 92.44% <100%> (+0.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3c9d89...7b82f65. Read the comment docs.\n. # Codecov Report\nMerging #1066 into master will decrease coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1066      +/-\n==========================================\n- Coverage   83.68%   83.54%   -0.14%   \n==========================================\n  Files          13       13            \n  Lines         846      851       +5   \n  Branches      142      142            \n==========================================\n+ Hits          708      711       +3   \n- Misses         34       36       +2   \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 90.05% <\u00f8> (+0.27%) | :arrow_up: |\n| src/calendar.jsx | 84.49% <100%> (+0.88%) | :arrow_up: |\n| src/day.jsx | 87.5% <100%> (-0.15%) | :arrow_down: |\n| src/date_utils.js | 92.04% <100%> (-0.4%) | :arrow_down: |\n| src/time.jsx | 52.27% <0%> (-4.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a0e0f3...806cfe6. Read the comment docs.\n. # Codecov Report\nMerging #1067 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1067      +/-\n==========================================\n+ Coverage   83.54%   83.62%   +0.08%   \n==========================================\n  Files          13       13            \n  Lines         851      843       -8   \n  Branches      142      142            \n==========================================\n- Hits          711      705       -6   \n+ Misses         36       34       -2   \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 53.33% <\u00f8> (+1.06%) | :arrow_up: |\n| src/calendar.jsx | 83.6% <\u00f8> (-0.89%) | :arrow_down: |\n| src/datepicker.jsx | 91.06% <100%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb92e66...dbb534f. Read the comment docs.\n. # Codecov Report\nMerging #1071 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1071      +/-\n==========================================\n+ Coverage   83.54%   83.56%   +0.01%   \n==========================================\n  Files          13       13            \n  Lines         851      852       +1   \n  Branches      142      142            \n==========================================\n+ Hits          711      712       +1   \n  Misses         36       36            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 90.1% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb92e66...15dd9c5. Read the comment docs.\n. # Codecov Report\nMerging #1072 into master will increase coverage by 0.32%.\nThe diff coverage is 90.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1072      +/-\n==========================================\n+ Coverage   83.54%   83.87%   +0.32%   \n==========================================\n  Files          13       13            \n  Lines         851      868      +17   \n  Branches      142      147       +5   \n==========================================\n+ Hits          711      728      +17   \n  Misses         36       36            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown.jsx | 87.5% <\u00f8> (-0.31%) | :arrow_down: |\n| src/year_dropdown_options.jsx | 87.5% <90.47%> (+7.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb92e66...ceb2042. Read the comment docs.\n. # Codecov Report\nMerging #1074 into master will increase coverage by 0.32%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1074      +/-\n==========================================\n+ Coverage   83.54%   83.87%   +0.32%   \n==========================================\n  Files          13       13            \n  Lines         851      856       +5   \n  Branches      142      143       +1   \n==========================================\n+ Hits          711      718       +7   \n+ Misses         36       34       -2   \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 91.11% <\u00f8> (+1.05%) | :arrow_up: |\n| src/popper_component.jsx | 70% <100%> (+12.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb92e66...65d57e7. Read the comment docs.\n. # Codecov Report\nMerging #1075 into master will increase coverage by 0.24%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1075      +/-\n=========================================\n+ Coverage   85.36%   85.6%   +0.24%   \n=========================================\n  Files          13      13            \n  Lines         888     896       +8   \n  Branches      146     147       +1   \n=========================================\n+ Hits          758     767       +9   \n+ Misses         42      40       -2   \n- Partials       88      89       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 88.14% <\u00f8> (+0.31%) | :arrow_up: |\n| src/calendar.jsx | 83.94% <100%> (+0.35%) | :arrow_up: |\n| src/date_utils.js | 93.46% <0%> (+0.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8ab34c...bc984c5. Read the comment docs.\n. # Codecov Report\nMerging #1080 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1080   +/-\n=======================================\n  Coverage   84.09%   84.09%         \n=======================================\n  Files          13       13         \n  Lines         874      874         \n  Branches      148      148         \n=======================================\n  Hits          735      735         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5c7eaa...37e68c3. Read the comment docs.\n. # Codecov Report\nMerging #1082 into master will increase coverage by 0.03%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1082      +/-\n==========================================\n+ Coverage   84.09%   84.13%   +0.03%   \n==========================================\n  Files          13       13            \n  Lines         874      876       +2   \n  Branches      148      148            \n==========================================\n+ Hits          735      737       +2   \n  Misses         35       35            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 72.72% <66.66%> (+2.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5c7eaa...6f21523. Read the comment docs.\n. # Codecov Report\nMerging #1083 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1083   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f211e0a...d5b03c0. Read the comment docs.\n. # Codecov Report\nMerging #1087 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1087   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4c4aa9...c529cea. Read the comment docs.\n. # Codecov Report\nMerging #1088 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1088   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4c4aa9...354c640. Read the comment docs.\n. # Codecov Report\nMerging #1090 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1090   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4c4aa9...7109a55. Read the comment docs.\n. # Codecov Report\nMerging #1091 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1091   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9645aaf...f099bad. Read the comment docs.\n. # Codecov Report\nMerging #1093 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1093   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9645aaf...6845d15. Read the comment docs.\n. # Codecov Report\nMerging #1094 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1094   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac8b74b...9c0597d. Read the comment docs.\n. # Codecov Report\nMerging #1095 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1095   +/-\n=======================================\n  Coverage   84.13%   84.13%         \n=======================================\n  Files          13       13         \n  Lines         876      876         \n  Branches      148      148         \n=======================================\n  Hits          737      737         \n  Misses         35       35         \n  Partials      104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac8b74b...188f894. Read the comment docs.\n. # Codecov Report\nMerging #1096 into master will decrease coverage by 0.11%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1096      +/-\n==========================================\n- Coverage   84.13%   84.01%   -0.12%   \n==========================================\n  Files          13       13            \n  Lines         876      876            \n  Branches      148      148            \n==========================================\n- Hits          737      736       -1   \n  Misses         35       35            \n- Partials      104      105       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 90.05% <0%> (-0.56%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f76c6e8...bd7cd3c. Read the comment docs.\n. # Codecov Report\nMerging #1096 into master will decrease coverage by 0.11%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1096      +/-\n==========================================\n- Coverage   84.13%   84.01%   -0.12%   \n==========================================\n  Files          13       13            \n  Lines         876      876            \n  Branches      148      148            \n==========================================\n- Hits          737      736       -1   \n  Misses         35       35            \n- Partials      104      105       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/datepicker.jsx | 90.05% <0%> (-0.56%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f76c6e8...bd7cd3c. Read the comment docs.\n. # Codecov Report\nMerging #1109 into master will decrease coverage by 0.22%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1109      +/-\n==========================================\n- Coverage   84.24%   84.01%   -0.23%   \n==========================================\n  Files          13       13            \n  Lines         876      876            \n  Branches      148      148            \n==========================================\n- Hits          738      736       -2   \n- Misses         34       35       +1   \n- Partials      104      105       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 52.27% <0%> (-4.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72cabe3...a47c9c4. Read the comment docs.\n. # Codecov Report\nMerging #1123 into master will decrease coverage by 1.02%.\nThe diff coverage is 55.55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1123      +/-\n==========================================\n- Coverage   86.25%   85.22%   -1.03%   \n==========================================\n  Files          13       13            \n  Lines         851      873      +22   \n  Branches      142      148       +6   \n==========================================\n+ Hits          734      744      +10   \n- Misses         32       40       +8   \n- Partials       85       89       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 83.96% <100%> (-0.29%) | :arrow_down: |\n| src/year_dropdown.jsx | 76% <36.36%> (-15.9%) | :arrow_down: |\n| src/index.jsx | 89.52% <50%> (-0.8%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d1fc705...5775ca1. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@9bf21af). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1132   +/-\n=========================================\n  Coverage          ?   86.25%         \n=========================================\n  Files             ?       13         \n  Lines             ?      851         \n  Branches          ?      142         \n=========================================\n  Hits              ?      734         \n  Misses            ?       32         \n  Partials          ?       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9bf21af...ef92c40. Read the comment docs.\n. # Codecov Report\nMerging #1143 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1143   +/-\n=======================================\n  Coverage   86.25%   86.25%         \n=======================================\n  Files          13       13         \n  Lines         851      851         \n  Branches      142      142         \n=======================================\n  Hits          734      734         \n  Misses         32       32         \n  Partials       85       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a367717...40cf7fc. Read the comment docs.\n. # Codecov Report\nMerging #1146 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1146   +/-\n=======================================\n  Coverage   86.25%   86.25%         \n=======================================\n  Files          13       13         \n  Lines         851      851         \n  Branches      142      142         \n=======================================\n  Hits          734      734         \n  Misses         32       32         \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 37a7a39...b9b4e70. Read the comment docs.\n. # Codecov Report\nMerging #1154 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1154   +/-\n=======================================\n  Coverage   86.25%   86.25%         \n=======================================\n  Files          13       13         \n  Lines         851      851         \n  Branches      142      142         \n=======================================\n  Hits          734      734         \n  Misses         32       32         \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 84.25% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 37a7a39...a10797f. Read the comment docs.\n. # Codecov Report\nMerging #1155 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1155   +/-\n=======================================\n  Coverage   86.25%   86.25%         \n=======================================\n  Files          13       13         \n  Lines         851      851         \n  Branches      142      142         \n=======================================\n  Hits          734      734         \n  Misses         32       32         \n  Partials       85       85\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d1fc705...6f200e9. Read the comment docs.\n. # Codecov Report\nMerging #1166 into master will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1166      +/-\n==========================================\n+ Coverage   86.25%   86.38%   +0.13%   \n==========================================\n  Files          13       13            \n  Lines         851      852       +1   \n  Branches      142      143       +1   \n==========================================\n+ Hits          734      736       +2   \n+ Misses         32       31       -1   \n  Partials       85       85\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.9% <100%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d1fc705...1616bf8. Read the comment docs.\n. # Codecov Report\nMerging #1168 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1168   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         888      888         \n  Branches      146      146         \n=======================================\n  Hits          758      758         \n  Misses         42       42         \n  Partials       88       88\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d513e83...b6bea21. Read the comment docs.\n. # Codecov Report\nMerging #1169 into master will decrease coverage by 0.33%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1169      +/-\n==========================================\n- Coverage   86.38%   86.04%   -0.34%   \n==========================================\n  Files          13       13            \n  Lines         852      853       +1   \n  Branches      143      144       +1   \n==========================================\n- Hits          736      734       -2   \n- Misses         31       33       +2   \n- Partials       85       86       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 89.36% <75%> (-1.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f492511...d1fe6e7. Read the comment docs.\n. # Codecov Report\nMerging #1180 into master will increase coverage by 0.47%.\nThe diff coverage is 96.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1180      +/-\n==========================================\n+ Coverage   86.38%   86.86%   +0.47%   \n==========================================\n  Files          13       13            \n  Lines         852      860       +8   \n  Branches      143      139       -4   \n==========================================\n+ Hits          736      747      +11   \n+ Misses         31       30       -1   \n+ Partials       85       83       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 85.36% <\u00f8> (+1.11%) | :arrow_up: |\n| src/month.jsx | 83.72% <\u00f8> (\u00f8) | :arrow_up: |\n| src/week.jsx | 77.41% <\u00f8> (\u00f8) | :arrow_up: |\n| src/day.jsx | 93.33% <100%> (+2.85%) | :arrow_up: |\n| src/date_utils.js | 92.96% <100%> (+0.91%) | :arrow_up: |\n| src/index.jsx | 89.72% <75%> (-1.18%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55f9bdb...c780c79. Read the comment docs.\n. # Codecov Report\nMerging #1181 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1181      +/-\n==========================================\n- Coverage    85.6%   85.55%   -0.05%   \n==========================================\n  Files          13       13            \n  Lines         896      900       +4   \n  Branches      147      148       +1   \n==========================================\n+ Hits          767      770       +3   \n- Misses         40       41       +1   \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.87% <100%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8c9868...d63b370. Read the comment docs.\n. # Codecov Report\nMerging #1186 into master will increase coverage by 0.06%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1186      +/-\n==========================================\n+ Coverage    85.3%   85.36%   +0.06%   \n==========================================\n  Files          13       13            \n  Lines         898      902       +4   \n  Branches      149      151       +2   \n==========================================\n+ Hits          766      770       +4   \n  Misses         43       43            \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/month_dropdown_options.jsx | 63.63% <\u00f8> (+3.63%) | :arrow_up: |\n| src/year_dropdown_options.jsx | 91.48% <\u00f8> (+0.18%) | :arrow_up: |\n| src/index.jsx | 87.56% <0%> (-0.33%) | :arrow_down: |\n| src/month_dropdown.jsx | 90.47% <100%> (+1%) | :arrow_up: |\n| src/date_utils.js | 93.68% <100%> (+0.06%) | :arrow_up: |\n| src/calendar.jsx | 84.32% <100%> (-0.07%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 29bfed5...681a7af. Read the comment docs.\n. # Codecov Report\nMerging #1189 into master will decrease coverage by 0.25%.\nThe diff coverage is 88.8%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1189      +/-\n=========================================\n- Coverage   85.55%   85.3%   -0.26%   \n=========================================\n  Files          13      13            \n  Lines         900     898       -2   \n  Branches      148     149       +1   \n=========================================\n- Hits          770     766       -4   \n- Misses         41      43       +2   \n  Partials       89      89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown_options.jsx | 91.3% <100%> (+0.19%) | :arrow_up: |\n| src/week_number.jsx | 41.66% <42.85%> (\u00f8) | :arrow_up: |\n| src/month_dropdown_options.jsx | 60% <57.14%> (\u00f8) | :arrow_up: |\n| src/time.jsx | 54.76% <63.33%> (-7.15%) | :arrow_down: |\n| src/year_dropdown.jsx | 76% <78.78%> (\u00f8) | :arrow_up: |\n| src/week.jsx | 78.12% <86.36%> (+0.7%) | :arrow_up: |\n| src/calendar.jsx | 84.39% <88.09%> (+0.45%) | :arrow_up: |\n| src/index.jsx | 87.89% <88.46%> (+0.01%) | :arrow_up: |\n| src/month_dropdown.jsx | 89.47% <88.88%> (\u00f8) | :arrow_up: |\n| src/popper_component.jsx | 75% <88.88%> (\u00f8) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1306eb2...92c3fbb. Read the comment docs.\n. # Codecov Report\nMerging #1190 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1190   +/-\n======================================\n  Coverage    85.3%   85.3%         \n======================================\n  Files          13      13         \n  Lines         898     898         \n  Branches      149     149         \n======================================\n  Hits          766     766         \n  Misses         43      43         \n  Partials       89      89\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 066f207...263875b. Read the comment docs.\n. # Codecov Report\nMerging #1192 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1192   +/-\n======================================\n  Coverage    85.3%   85.3%         \n======================================\n  Files          13      13         \n  Lines         898     898         \n  Branches      149     149         \n======================================\n  Hits          766     766         \n  Misses         43      43         \n  Partials       89      89\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b494d1c...0dc974d. Read the comment docs.\n. # Codecov Report\nMerging #1193 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1193   +/-\n======================================\n  Coverage    85.3%   85.3%         \n======================================\n  Files          13      13         \n  Lines         898     898         \n  Branches      149     149         \n======================================\n  Hits          766     766         \n  Misses         43      43         \n  Partials       89      89\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6ab0225...558c16b. Read the comment docs.\n. # Codecov Report\nMerging #1194 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1194   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         902      902         \n  Branches      151      151         \n=======================================\n  Hits          770      770         \n  Misses         43       43         \n  Partials       89       89\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cce0aac...60eaa9f. Read the comment docs.\n. # Codecov Report\nMerging #1198 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1198      +/-\n==========================================\n+ Coverage   85.36%   85.44%   +0.08%   \n==========================================\n  Files          13       13            \n  Lines         902      907       +5   \n  Branches      151      153       +2   \n==========================================\n+ Hits          770      775       +5   \n+ Misses         43       42       -1   \n- Partials       89       90       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.87% <100%> (+0.31%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77ab7ea...20b0f2f. Read the comment docs.\n. # Codecov Report\nMerging #1199 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1199   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         902      902         \n  Branches      151      151         \n=======================================\n  Hits          770      770         \n  Misses         43       43         \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.56% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77ab7ea...7f23caf. Read the comment docs.\n. # Codecov Report\nMerging #1205 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1205   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         902      902         \n  Branches      151      151         \n=======================================\n  Hits          770      770         \n  Misses         43       43         \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 84.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07f2e38...2e38348. Read the comment docs.\n. # Codecov Report\nMerging #1206 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1206   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         902      902         \n  Branches      151      151         \n=======================================\n  Hits          770      770         \n  Misses         43       43         \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 84.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07f2e38...6fe12df. Read the comment docs.\n. # Codecov Report\nMerging #1207 into master will increase coverage by 0.53%.\nThe diff coverage is 91.48%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1207      +/-\n=========================================\n+ Coverage   85.36%   85.9%   +0.53%   \n=========================================\n  Files          13      15       +2   \n  Lines         902    1000      +98   \n  Branches      151     161      +10   \n=========================================\n+ Hits          770     859      +89   \n- Misses         43      44       +1   \n- Partials       89      97       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.69% <\u00f8> (+0.12%) | :arrow_up: |\n| src/date_utils.js | 93.39% <100%> (-0.3%) | :arrow_down: |\n| src/month_year_dropdown_options.jsx | 84.61% <84.61%> (\u00f8) | |\n| src/calendar.jsx | 85.52% <93.33%> (+1.19%) | :arrow_up: |\n| src/month_year_dropdown.jsx | 93.47% <93.47%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07f2e38...5f2d6d8. Read the comment docs.\n. # Codecov Report\nMerging #1211 into master will increase coverage by 0.22%.\nThe diff coverage is 93.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1211      +/-\n==========================================\n+ Coverage   85.36%   85.58%   +0.22%   \n==========================================\n  Files          13       13            \n  Lines         902      916      +14   \n  Branches      151      153       +2   \n==========================================\n+ Hits          770      784      +14   \n  Misses         43       43            \n  Partials       89       89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.5% <\u00f8> (-0.07%) | :arrow_down: |\n| src/calendar.jsx | 85.9% <93.75%> (+1.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6567538...d2b305b. Read the comment docs.\n. # Codecov Report\nMerging #1214 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1214   +/-\n=======================================\n  Coverage   85.36%   85.36%         \n=======================================\n  Files          13       13         \n  Lines         902      902         \n  Branches      151      151         \n=======================================\n  Hits          770      770         \n  Misses         43       43         \n  Partials       89       89\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6567538...4a7b8f6. Read the comment docs.\n. # Codecov Report\nMerging #1216 into master will increase coverage by 0.54%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1216      +/-\n==========================================\n+ Coverage   86.19%   86.73%   +0.54%   \n==========================================\n  Files          15       15            \n  Lines        1014     1018       +4   \n  Branches      165      165            \n==========================================\n+ Hits          874      883       +9   \n+ Misses         42       38       -4   \n+ Partials       98       97       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 85.88% <\u00f8> (-0.45%) | :arrow_down: |\n| src/time.jsx | 61.36% <\u00f8> (+6.6%) | :arrow_up: |\n| src/index.jsx | 88% <\u00f8> (-0.5%) | :arrow_down: |\n| src/date_utils.js | 95.75% <100%> (+2.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8e1eea0...6a4193c. Read the comment docs.\n. # Codecov Report\nMerging #1219 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1219   +/-\n=======================================\n  Coverage   86.19%   86.19%         \n=======================================\n  Files          15       15         \n  Lines        1014     1014         \n  Branches      165      165         \n=======================================\n  Hits          874      874         \n  Misses         42       42         \n  Partials       98       98\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 86.33% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8e1eea0...dfeaf6e. Read the comment docs.\n. # Codecov Report\nMerging #1220 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1220   +/-\n=======================================\n  Coverage   86.19%   86.19%         \n=======================================\n  Files          15       15         \n  Lines        1014     1014         \n  Branches      165      165         \n=======================================\n  Hits          874      874         \n  Misses         42       42         \n  Partials       98       98\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 86.33% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5998fe...6246d8e. Read the comment docs.\n. # Codecov Report\nMerging #1221 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1221   +/-\n=======================================\n  Coverage   86.19%   86.19%         \n=======================================\n  Files          15       15         \n  Lines        1014     1014         \n  Branches      165      165         \n=======================================\n  Hits          874      874         \n  Misses         42       42         \n  Partials       98       98\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5998fe...67b6d2e. Read the comment docs.\n. # Codecov Report\nMerging #1233 into master will decrease coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1233     +/-\n=========================================\n- Coverage   86.93%   86.73%   -0.2%   \n=========================================\n  Files          15       15           \n  Lines        1018     1018           \n  Branches      165      165           \n=========================================\n- Hits          885      883      -2   \n- Misses         37       38      +1   \n- Partials       96       97      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 85.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/time.jsx | 61.36% <0%> (-4.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd632ac...bcdbd51. Read the comment docs.\n. # Codecov Report\nMerging #1234 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1234   +/-\n=======================================\n  Coverage   86.73%   86.73%         \n=======================================\n  Files          15       15         \n  Lines        1018     1018         \n  Branches      165      165         \n=======================================\n  Hits          883      883         \n  Misses         38       38         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0803909...17b6b6b. Read the comment docs.\n. # Codecov Report\nMerging #1239 into master will decrease coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1239      +/-\n==========================================\n- Coverage   86.94%   86.87%   -0.08%   \n==========================================\n  Files          15       15            \n  Lines        1019     1021       +2   \n  Branches      165      165            \n==========================================\n+ Hits          886      887       +1   \n- Misses         36       37       +1   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 88.05% <100%> (-0.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 603a62b...cbee364. Read the comment docs.\n. # Codecov Report\nMerging #1240 into master will increase coverage by 0.2%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1240     +/-\n=========================================\n+ Coverage   86.73%   86.94%   +0.2%   \n=========================================\n  Files          15       15           \n  Lines        1018     1019      +1   \n  Branches      165      165           \n=========================================\n+ Hits          883      886      +3   \n+ Misses         38       36      -2   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 88.44% <\u00f8> (+0.44%) | :arrow_up: |\n| src/time.jsx | 63.63% <\u00f8> (+2.27%) | :arrow_up: |\n| src/calendar.jsx | 86.06% <\u00f8> (+0.17%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2e25b2...36266e0. Read the comment docs.\n. # Codecov Report\nMerging #1255 into master will increase coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1255      +/-\n==========================================\n+ Coverage   86.94%   87.14%   +0.19%   \n==========================================\n  Files          15       15            \n  Lines        1019     1019            \n  Branches      165      165            \n==========================================\n+ Hits          886      888       +2   \n+ Misses         36       35       -1   \n+ Partials       97       96       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 88.44% <0%> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 86.06% <0%> (\u00f8) | :arrow_up: |\n| src/time.jsx | 68.18% <0%> (+4.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bb8c2d...3102622. Read the comment docs.\n. # Codecov Report\nMerging #1258 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1258   +/-\n=======================================\n  Coverage   86.94%   86.94%         \n=======================================\n  Files          15       15         \n  Lines        1019     1019         \n  Branches      165      165         \n=======================================\n  Hits          886      886         \n  Misses         36       36         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 603a62b...4629676. Read the comment docs.\n. # Codecov Report\nMerging #1259 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1259   +/-\n=======================================\n  Coverage   86.94%   86.94%         \n=======================================\n  Files          15       15         \n  Lines        1019     1019         \n  Branches      165      165         \n=======================================\n  Hits          886      886         \n  Misses         36       36         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 603a62b...c02bdf7. Read the comment docs.\n. # Codecov Report\nMerging #1264 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1264   +/-\n=======================================\n  Coverage   86.87%   86.87%         \n=======================================\n  Files          15       15         \n  Lines        1021     1021         \n  Branches      165      165         \n=======================================\n  Hits          887      887         \n  Misses         37       37         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e34fe52...e8789a4. Read the comment docs.\n. # Codecov Report\nMerging #1265 into master will decrease coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1265     +/-\n=========================================\n- Coverage   87.07%   86.87%   -0.2%   \n=========================================\n  Files          15       15           \n  Lines        1021     1021           \n  Branches      165      165           \n=========================================\n- Hits          889      887      -2   \n- Misses         36       37      +1   \n- Partials       96       97      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 63.63% <0%> (-4.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42db96a...af4f87e. Read the comment docs.\n. # Codecov Report\nMerging #1266 into master will decrease coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1266     +/-\n=========================================\n- Coverage   87.07%   86.87%   -0.2%   \n=========================================\n  Files          15       15           \n  Lines        1021     1021           \n  Branches      165      165           \n=========================================\n- Hits          889      887      -2   \n- Misses         36       37      +1   \n- Partials       96       97      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 63.63% <0%> (-4.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42db96a...df5a5be. Read the comment docs.\n. # Codecov Report\nMerging #1273 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1273   +/-\n=======================================\n  Coverage   86.87%   86.87%         \n=======================================\n  Files          15       15         \n  Lines        1021     1021         \n  Branches      165      165         \n=======================================\n  Hits          887      887         \n  Misses         37       37         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c037926...a96cfc5. Read the comment docs.\n. # Codecov Report\nMerging #1274 into master will decrease coverage by 0.27%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1274      +/-\n=========================================\n- Coverage   86.87%   86.6%   -0.28%   \n=========================================\n  Files          15      15            \n  Lines        1021    1030       +9   \n  Branches      165     167       +2   \n=========================================\n+ Hits          887     892       +5   \n- Misses         37      39       +2   \n- Partials       97      99       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 84.48% <77.77%> (-1.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0cc7058...756bfaa. Read the comment docs.\n. # Codecov Report\nMerging #1275 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1275   +/-\n=======================================\n  Coverage   86.87%   86.87%         \n=======================================\n  Files          15       15         \n  Lines        1021     1021         \n  Branches      165      165         \n=======================================\n  Hits          887      887         \n  Misses         37       37         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0cc7058...0555331. Read the comment docs.\n. # Codecov Report\nMerging #1277 into master will decrease coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1277      +/-\n==========================================\n- Coverage   86.87%   86.76%   -0.12%   \n==========================================\n  Files          15       15            \n  Lines        1021     1020       -1   \n  Branches      165      165            \n==========================================\n- Hits          887      885       -2   \n- Misses         37       38       +1   \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 87.5% <100%> (-0.56%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42ceaaf...2d69197. Read the comment docs.\n. # Codecov Report\nMerging #1281 into master will decrease coverage by 0.08%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1281      +/-\n==========================================\n- Coverage   86.87%   86.79%   -0.09%   \n==========================================\n  Files          15       15            \n  Lines        1021     1022       +1   \n  Branches      165      166       +1   \n==========================================\n  Hits          887      887            \n  Misses         37       37            \n- Partials       97       98       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 88.11% <\u00f8> (+0.05%) | :arrow_up: |\n| src/calendar.jsx | 85.45% <66.66%> (-0.61%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42ceaaf...da88933. Read the comment docs.\n. # Codecov Report\nMerging #1289 into master will increase coverage by 1.74%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   86.87%   88.61%   +1.74%   \n==========================================\n  Files          15       15            \n  Lines        1021     1028       +7   \n  Branches      165      166       +1   \n==========================================\n+ Hits          887      911      +24   \n+ Misses         37       25      -12   \n+ Partials       97       92       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.86% <80%> (+2.8%) | :arrow_up: |\n| src/calendar.jsx | 90.3% <0%> (+4.24%) | :arrow_up: |\n| src/time.jsx | 75% <0%> (+11.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42ceaaf...ae6deff. Read the comment docs.\n. # Codecov Report\nMerging #1294 into master will increase coverage by 0.05%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1294      +/-\n==========================================\n+ Coverage   88.61%   88.67%   +0.05%   \n==========================================\n  Files          15       15            \n  Lines        1028     1024       -4   \n  Branches      166      167       +1   \n==========================================\n- Hits          911      908       -3   \n+ Misses         25       24       -1   \n  Partials       92       92\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.21% <\u00f8> (+0.35%) | :arrow_up: |\n| src/date_utils.js | 95.79% <100%> (+0.03%) | :arrow_up: |\n| src/calendar.jsx | 90.12% <85.71%> (-0.18%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f9e54e...9e53208. Read the comment docs.\n. # Codecov Report\nMerging #1300 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1300      +/-\n==========================================\n+ Coverage   88.61%   88.62%   +0.01%   \n==========================================\n  Files          15       15            \n  Lines        1028     1029       +1   \n  Branches      166      166            \n==========================================\n+ Hits          911      912       +1   \n  Misses         25       25            \n  Partials       92       92\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.73% <100%> (-0.14%) | :arrow_down: |\n| src/date_utils.js | 95.83% <100%> (+0.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f9e54e...d3b8cb6. Read the comment docs.\n. # Codecov Report\nMerging #1303 into master will decrease coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1303      +/-\n==========================================\n- Coverage   88.61%   88.54%   -0.08%   \n==========================================\n  Files          15       15            \n  Lines        1028     1030       +2   \n  Branches      166      167       +1   \n==========================================\n+ Hits          911      912       +1   \n- Misses         25       26       +1   \n  Partials       92       92\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.47% <100%> (-0.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f9e54e...a87951e. Read the comment docs.\n. # Codecov Report\nMerging #1307 into master will increase coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1307      +/-\n==========================================\n+ Coverage   88.79%   88.87%   +0.08%   \n==========================================\n  Files          15       15            \n  Lines        1044     1043       -1   \n  Branches      171      171            \n==========================================\n  Hits          927      927            \n+ Misses         24       23       -1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week_number.jsx | 45.45% <\u00f8> (+3.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed55d2b...2d0c978. Read the comment docs.\n. # Codecov Report\nMerging #1313 into master will increase coverage by 0.15%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1313      +/-\n==========================================\n+ Coverage   88.54%   88.69%   +0.15%   \n==========================================\n  Files          15       15            \n  Lines        1030     1026       -4   \n  Branches      167      168       +1   \n==========================================\n- Hits          912      910       -2   \n+ Misses         26       24       -2   \n  Partials       92       92\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 92.75% <\u00f8> (+0.32%) | :arrow_up: |\n| src/index.jsx | 90.77% <\u00f8> (+0.3%) | :arrow_up: |\n| src/calendar.jsx | 90.68% <\u00f8> (+0.38%) | :arrow_up: |\n| src/week.jsx | 78.78% <0%> (+0.66%) | :arrow_up: |\n| src/month.jsx | 85.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9ddc73f...4d5671a. Read the comment docs.\n. # Codecov Report\nMerging #1317 into master will increase coverage by 0.18%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1317      +/-\n==========================================\n+ Coverage   88.62%   88.81%   +0.18%   \n==========================================\n  Files          15       15            \n  Lines        1029     1028       -1   \n  Branches      168      168            \n==========================================\n+ Hits          912      913       +1   \n+ Misses         24       21       -3   \n- Partials       93       94       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.38% <100%> (-0.05%) | :arrow_down: |\n| src/week_number.jsx | 58.33% <0%> (+16.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bde841b...8ea638b. Read the comment docs.\n. # Codecov Report\nMerging #1319 into master will increase coverage by 0.13%.\nThe diff coverage is 93.97%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1319      +/-\n==========================================\n+ Coverage   88.49%   88.62%   +0.13%   \n==========================================\n  Files          15       15            \n  Lines        1026     1029       +3   \n  Branches      168      168            \n==========================================\n+ Hits          908      912       +4   \n+ Misses         25       24       -1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 78.12% <\u00f8> (\u00f8) | :arrow_up: |\n| src/week_number.jsx | 41.66% <\u00f8> (\u00f8) | :arrow_up: |\n| src/popper_component.jsx | 75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/day.jsx | 92.42% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month_dropdown_options.jsx | 63.63% <0%> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 89.75% <100%> (+0.06%) | :arrow_up: |\n| src/year_dropdown_options.jsx | 91.48% <100%> (\u00f8) | :arrow_up: |\n| src/year_dropdown.jsx | 76% <100%> (\u00f8) | :arrow_up: |\n| src/month.jsx | 85.1% <100%> (\u00f8) | :arrow_up: |\n| src/month_year_dropdown.jsx | 93.33% <100%> (-0.15%) | :arrow_down: |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8cc023...811b3e5. Read the comment docs.\n. # Codecov Report\nMerging #1321 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1321   +/-\n=======================================\n  Coverage   88.62%   88.62%         \n=======================================\n  Files          15       15         \n  Lines        1029     1029         \n  Branches      168      168         \n=======================================\n  Hits          912      912         \n  Misses         24       24         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 631b807...51f9665. Read the comment docs.\n. # Codecov Report\nMerging #1325 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1325   +/-\n=======================================\n  Coverage   88.62%   88.62%         \n=======================================\n  Files          15       15         \n  Lines        1029     1029         \n  Branches      168      168         \n=======================================\n  Hits          912      912         \n  Misses         24       24         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 87a8cb4...4e61f4e. Read the comment docs.\n. # Codecov Report\nMerging #1329 into master will increase coverage by 0.35%.\nThe diff coverage is 95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1329      +/-\n==========================================\n+ Coverage   88.62%   88.98%   +0.35%   \n==========================================\n  Files          15       15            \n  Lines        1029     1044      +15   \n  Branches      168      171       +3   \n==========================================\n+ Hits          912      929      +17   \n+ Misses         24       23       -1   \n+ Partials       93       92       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.34% <\u00f8> (-0.09%) | :arrow_down: |\n| src/calendar.jsx | 88.88% <\u00f8> (-0.88%) | :arrow_down: |\n| src/date_utils.js | 95.94% <100%> (+0.19%) | :arrow_up: |\n| src/time.jsx | 85.45% <90%> (+10.45%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f715f15...ac066b3. Read the comment docs.\n. # Codecov Report\nMerging #1330 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1330   +/-\n=======================================\n  Coverage   88.79%   88.79%         \n=======================================\n  Files          15       15         \n  Lines        1044     1044         \n  Branches      171      170    -1   \n=======================================\n  Hits          927      927         \n  Misses         24       24         \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 95.96% <100%> (+0.01%) | :arrow_up: |\n| src/time.jsx | 81.48% <100%> (-0.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed55d2b...289af0c. Read the comment docs.\n. # Codecov Report\nMerging #1331 into master will increase coverage by 0.1%.\nThe diff coverage is 90%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1331     +/-\n=========================================\n+ Coverage   89.12%   89.22%   +0.1%   \n=========================================\n  Files          16       16           \n  Lines        1057     1058      +1   \n  Branches      175      176      +1   \n=========================================\n+ Hits          942      944      +2   \n+ Misses         22       21      -1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.53% <100%> (\u00f8) | :arrow_up: |\n| src/time.jsx | 83.63% <88.88%> (+2.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8105ede...38e0506. Read the comment docs.\n. # Codecov Report\nMerging #1339 into master will increase coverage by 0.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1339      +/-\n==========================================\n+ Coverage   88.86%   88.96%   +0.09%   \n==========================================\n  Files          15       15            \n  Lines        1042     1042            \n  Branches      170      170            \n==========================================\n+ Hits          926      927       +1   \n  Misses         22       22            \n+ Partials       94       93       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.3% <0%> (+0.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e73a80d...7a1cf2e. Read the comment docs.\n. # Codecov Report\nMerging #1341 into master will decrease coverage by 2.61%.\nThe diff coverage is 17.64%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1341      +/-\n==========================================\n- Coverage   88.96%   86.35%   -2.62%   \n==========================================\n  Files          15       15            \n  Lines        1042     1077      +35   \n  Branches      170      178       +8   \n==========================================\n+ Hits          927      930       +3   \n- Misses         22       52      +30   \n- Partials       93       95       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.7% <\u00f8> (+0.4%) | :arrow_up: |\n| src/calendar.jsx | 74.37% <17.64%> (-14.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2e10682...c817327. Read the comment docs.\n. # Codecov Report\nMerging #1346 into master will decrease coverage by 0.02%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1346      +/-\n==========================================\n- Coverage   88.96%   88.94%   -0.03%   \n==========================================\n  Files          15       15            \n  Lines        1042     1049       +7   \n  Branches      170      170            \n==========================================\n+ Hits          927      933       +6   \n- Misses         22       23       +1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.12% <88.88%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ceb3b80...326a18d. Read the comment docs.\n. # Codecov Report\nMerging #1348 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1348   +/-\n=======================================\n  Coverage   88.96%   88.96%         \n=======================================\n  Files          15       15         \n  Lines        1042     1042         \n  Branches      170      170         \n=======================================\n  Hits          927      927         \n  Misses         22       22         \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2e10682...eb3d392. Read the comment docs.\n. # Codecov Report\nMerging #1351 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1351      +/-\n==========================================\n+ Coverage    89.1%   89.13%   +0.02%   \n==========================================\n  Files          15       15            \n  Lines        1056     1058       +2   \n  Branches      171      171            \n==========================================\n+ Hits          941      943       +2   \n  Misses         22       22            \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.58% <\u00f8> (+0.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b1efbe...f86a8e4. Read the comment docs.\n. # Codecov Report\nMerging #1354 into master will decrease coverage by 0.16%.\nThe diff coverage is 92.59%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1354      +/-\n==========================================\n- Coverage   88.93%   88.77%   -0.17%   \n==========================================\n  Files          16       16            \n  Lines        1112     1122      +10   \n  Branches      182      185       +3   \n==========================================\n+ Hits          989      996       +7   \n- Misses         26       27       +1   \n- Partials       97       99       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 89.53% <92.59%> (-0.86%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df59d1d...ea9fa8b. Read the comment docs.\n. # Codecov Report\nMerging #1356 into master will increase coverage by 0.03%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1356      +/-\n==========================================\n+ Coverage   88.76%   88.79%   +0.03%   \n==========================================\n  Files          16       16            \n  Lines        1121     1124       +3   \n  Branches      185      186       +1   \n==========================================\n+ Hits          995      998       +3   \n  Misses         27       27            \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 90% <\u00f8> (+0.05%) | :arrow_up: |\n| src/day.jsx | 92.64% <\u00f8> (-0.41%) | :arrow_down: |\n| src/month.jsx | 85.1% <\u00f8> (\u00f8) | :arrow_up: |\n| src/week.jsx | 78.78% <0%> (\u00f8) | :arrow_up: |\n| src/index.jsx | 89.75% <100%> (+0.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 626ca16...2c17a74. Read the comment docs.\n. # Codecov Report\nMerging #1360 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1360      +/-\n==========================================\n- Coverage   89.13%   89.08%   -0.05%   \n==========================================\n  Files          15       15            \n  Lines        1058     1054       -4   \n  Branches      171      172       +1   \n==========================================\n- Hits          943      939       -4   \n  Misses         22       22            \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.42% <100%> (-0.17%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83cf74f...4d2a110. Read the comment docs.\n. # Codecov Report\nMerging #1374 into master will decrease coverage by <.01%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1374      +/-\n==========================================\n- Coverage   89.08%   89.08%   -0.01%   \n==========================================\n  Files          15       15            \n  Lines        1054     1063       +9   \n  Branches      172      173       +1   \n==========================================\n+ Hits          939      947       +8   \n- Misses         22       23       +1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.32% <100%> (-0.11%) | :arrow_down: |\n| src/calendar.jsx | 89.34% <50%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e052b4a...91ee544. Read the comment docs.\n. # Codecov Report\nMerging #1376 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1376   +/-\n=======================================\n  Coverage   89.08%   89.08%         \n=======================================\n  Files          15       15         \n  Lines        1054     1054         \n  Branches      172      172         \n=======================================\n  Hits          939      939         \n  Misses         22       22         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e052b4a...7620dcd. Read the comment docs.\n. # Codecov Report\nMerging #1377 into master will decrease coverage by 1.1%.\nThe diff coverage is 60.86%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1377      +/-\n==========================================\n- Coverage   89.27%   88.17%   -1.11%   \n==========================================\n  Files          16       16            \n  Lines        1072     1099      +27   \n  Branches      173      186      +13   \n==========================================\n+ Hits          957      969      +12   \n- Misses         21       27       +6   \n- Partials       94      103       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/month_dropdown_options.jsx | 60.71% <55%> (-2.93%) | :arrow_down: |\n| src/month_dropdown.jsx | 84.61% <58.82%> (-5.39%) | :arrow_down: |\n| src/calendar.jsx | 87.79% <77.77%> (-2.44%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 387ea02...0c965cd. Read the comment docs.\n. # Codecov Report\nMerging #1382 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1382   +/-\n=======================================\n  Coverage   89.08%   89.08%         \n=======================================\n  Files          15       15         \n  Lines        1054     1054         \n  Branches      172      172         \n=======================================\n  Hits          939      939         \n  Misses         22       22         \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e052b4a...2014174. Read the comment docs.\n. # Codecov Report\nMerging #1387 into master will increase coverage by 0.18%.\nThe diff coverage is 84.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1387      +/-\n==========================================\n+ Coverage   89.08%   89.27%   +0.18%   \n==========================================\n  Files          15       16       +1   \n  Lines        1054     1072      +18   \n  Branches      172      173       +1   \n==========================================\n+ Hits          939      957      +18   \n+ Misses         22       21       -1   \n- Partials       93       94       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.7% <\u00f8> (+0.27%) | :arrow_up: |\n| src/calendar_container.jsx | 83.33% <83.33%> (\u00f8) | |\n| src/calendar.jsx | 90.22% <85.71%> (+0.88%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e052b4a...48029b8. Read the comment docs.\n. # Codecov Report\nMerging #1390 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1390   +/-\n=======================================\n  Coverage   89.27%   89.27%         \n=======================================\n  Files          16       16         \n  Lines        1072     1072         \n  Branches      173      173         \n=======================================\n  Hits          957      957         \n  Misses         21       21         \n  Partials       94       94\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8970e2c...b68be3b. Read the comment docs.\n. # Codecov Report\nMerging #1392 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1392   +/-\n=======================================\n  Coverage   89.27%   89.27%         \n=======================================\n  Files          16       16         \n  Lines        1072     1072         \n  Branches      173      173         \n=======================================\n  Hits          957      957         \n  Misses         21       21         \n  Partials       94       94\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67f05e9...9855b8a. Read the comment docs.\n. # Codecov Report\nMerging #1395 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1395      +/-\n==========================================\n+ Coverage   89.27%   89.36%   +0.09%   \n==========================================\n  Files          16       16            \n  Lines        1072     1072            \n  Branches      173      173            \n==========================================\n+ Hits          957      958       +1   \n  Misses         21       21            \n+ Partials       94       93       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 92.16% <100%> (+0.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67f05e9...b1e1d33. Read the comment docs.\n. # Codecov Report\nMerging #1396 into master will decrease coverage by 0.24%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1396      +/-\n==========================================\n- Coverage   89.27%   89.02%   -0.25%   \n==========================================\n  Files          16       16            \n  Lines        1072     1075       +3   \n  Branches      173      174       +1   \n==========================================\n  Hits          957      957            \n- Misses         21       23       +2   \n- Partials       94       95       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 77.19% <42.85%> (-4.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67f05e9...8492acd. Read the comment docs.\n. # Codecov Report\nMerging #1401 into master will decrease coverage by 0.13%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1401      +/-\n==========================================\n- Coverage   89.27%   89.13%   -0.14%   \n==========================================\n  Files          16       16            \n  Lines        1072     1068       -4   \n  Branches      173      173            \n==========================================\n- Hits          957      952       -5   \n- Misses         21       22       +1   \n  Partials       94       94\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 73.68% <\u00f8> (-1.32%) | :arrow_down: |\n| src/time.jsx | 81.48% <20%> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 90.22% <25%> (\u00f8) | :arrow_up: |\n| src/index.jsx | 91.12% <80%> (-0.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67f05e9...6c73b08. Read the comment docs.\n. # Codecov Report\nMerging #1403 into master will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1403      +/-\n==========================================\n+ Coverage   89.27%   89.34%   +0.07%   \n==========================================\n  Files          16       16            \n  Lines        1072     1070       -2   \n  Branches      173      173            \n==========================================\n- Hits          957      956       -1   \n+ Misses         21       20       -1   \n  Partials       94       94\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 96.41% <\u00f8> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67f05e9...7a43f7a. Read the comment docs.\n. # Codecov Report\nMerging #1405 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1405   +/-\n=======================================\n  Coverage   89.43%   89.43%         \n=======================================\n  Files          16       16         \n  Lines        1070     1070         \n  Branches      173      173         \n=======================================\n  Hits          957      957         \n  Misses         20       20         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update febaf1d...8e07160. Read the comment docs.\n. # Codecov Report\nMerging #1406 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1406   +/-\n=======================================\n  Coverage   89.43%   89.43%         \n=======================================\n  Files          16       16         \n  Lines        1070     1070         \n  Branches      173      173         \n=======================================\n  Hits          957      957         \n  Misses         20       20         \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown_options.jsx | 91.48% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8ab13e0...3c13bb2. Read the comment docs.\n. # Codecov Report\nMerging #1407 into master will decrease coverage by 0.36%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1407      +/-\n==========================================\n- Coverage   89.43%   89.07%   -0.37%   \n==========================================\n  Files          16       16            \n  Lines        1070     1062       -8   \n  Branches      173      174       +1   \n==========================================\n- Hits          957      946      -11   \n- Misses         20       22       +2   \n- Partials       93       94       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.9% <100%> (-1.26%) | :arrow_down: |\n| src/date_utils.js | 95.96% <0%> (-0.45%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04e33c8...f02f932. Read the comment docs.\n. # Codecov Report\nMerging #1408 into master will increase coverage by 0.08%.\nThe diff coverage is 93.05%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1408      +/-\n==========================================\n+ Coverage   89.07%   89.15%   +0.08%   \n==========================================\n  Files          16       16            \n  Lines        1062     1116      +54   \n  Branches      174      178       +4   \n==========================================\n+ Hits          946      995      +49   \n- Misses         22       26       +4   \n- Partials       94       95       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 75% <\u00f8> (\u00f8) | :arrow_up: |\n| src/time.jsx | 83.63% <0%> (+2.15%) | :arrow_up: |\n| src/calendar.jsx | 89.53% <100%> (-0.7%) | :arrow_down: |\n| src/index.jsx | 90.25% <92.85%> (-0.66%) | :arrow_down: |\n| src/date_utils.js | 96.01% <96.42%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 953c40a...d80a009. Read the comment docs.\n. # Codecov Report\nMerging #1410 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1410   +/-\n======================================\n  Coverage    89.2%   89.2%         \n======================================\n  Files          16      16         \n  Lines        1065    1065         \n  Branches      175     175         \n======================================\n  Hits          950     950         \n  Misses         21      21         \n  Partials       94      94\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5443432...0cfd95c. Read the comment docs.\n. # Codecov Report\nMerging #1419 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1419      +/-\n==========================================\n+ Coverage    89.2%   89.28%   +0.08%   \n==========================================\n  Files          16       16            \n  Lines        1065     1064       -1   \n  Branches      175      175            \n==========================================\n  Hits          950      950            \n  Misses         21       21            \n+ Partials       94       93       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.94% <100%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db6f040...8ad6a42. Read the comment docs.\n. # Codecov Report\nMerging #1421 into master will decrease coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1421      +/-\n==========================================\n- Coverage    89.2%   89.05%   -0.15%   \n==========================================\n  Files          16       16            \n  Lines        1065     1060       -5   \n  Branches      175      175            \n==========================================\n- Hits          950      944       -6   \n- Misses         21       22       +1   \n  Partials       94       94\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.3% <\u00f8> (-0.21%) | :arrow_down: |\n| src/calendar.jsx | 89.65% <100%> (-0.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db6f040...238b21b. Read the comment docs.\n. # Codecov Report\nMerging #1428 into master will increase coverage by 0.2%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1428     +/-\n=========================================\n+ Coverage   89.14%   89.34%   +0.2%   \n=========================================\n  Files          16       16           \n  Lines        1059     1061      +2   \n  Branches      175      175           \n=========================================\n+ Hits          944      948      +4   \n+ Misses         22       21      -1   \n+ Partials       93       92      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.82% <100%> (+0.07%) | :arrow_up: |\n| src/time.jsx | 85.18% <0%> (+3.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93c46ed...8a51bb3. Read the comment docs.\n. # Codecov Report\nMerging #1434 into master will decrease coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1434      +/-\n==========================================\n- Coverage   88.86%   88.81%   -0.06%   \n==========================================\n  Files          16       16            \n  Lines        1132     1135       +3   \n  Branches      193      194       +1   \n==========================================\n+ Hits         1006     1008       +2   \n  Misses         26       26            \n- Partials      100      101       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.11% <\u00f8> (+0.03%) | :arrow_up: |\n| src/week.jsx | 77.14% <100%> (-1.65%) | :arrow_down: |\n| src/calendar.jsx | 90% <100%> (\u00f8) | :arrow_up: |\n| src/month.jsx | 85.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 27b1507...d2546e3. Read the comment docs.\n. # Codecov Report\nMerging #1437 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1437   +/-\n=======================================\n  Coverage   89.14%   89.14%         \n=======================================\n  Files          16       16         \n  Lines        1059     1059         \n  Branches      175      175         \n=======================================\n  Hits          944      944         \n  Misses         22       22         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93c46ed...35bc2df. Read the comment docs.\n. # Codecov Report\nMerging #1448 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1448   +/-\n=======================================\n  Coverage   89.14%   89.14%         \n=======================================\n  Files          16       16         \n  Lines        1059     1059         \n  Branches      175      175         \n=======================================\n  Hits          944      944         \n  Misses         22       22         \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 75% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3feb10c...ba3909e. Read the comment docs.\n. # Codecov Report\nMerging #1454 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1454   +/-\n=======================================\n  Coverage   89.14%   89.14%         \n=======================================\n  Files          16       16         \n  Lines        1059     1059         \n  Branches      175      175         \n=======================================\n  Hits          944      944         \n  Misses         22       22         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3feb10c...e6223a9. Read the comment docs.\n. # Codecov Report\nMerging #1456 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1456      +/-\n==========================================\n- Coverage   89.14%   89.12%   -0.03%   \n==========================================\n  Files          16       16            \n  Lines        1059     1057       -2   \n  Branches      175      175            \n==========================================\n- Hits          944      942       -2   \n  Misses         22       22            \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.53% <\u00f8> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3feb10c...762ce4b. Read the comment docs.\n. # Codecov Report\nMerging #1461 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1461   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          16       16         \n  Lines        1057     1057         \n  Branches      175      175         \n=======================================\n  Hits          942      942         \n  Misses         22       22         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c655193...692b676. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will increase coverage by 0.09%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1465      +/-\n=========================================\n+ Coverage   88.81%   88.9%   +0.09%   \n=========================================\n  Files          16      16            \n  Lines        1135    1136       +1   \n  Branches      194     195       +1   \n=========================================\n+ Hits         1008    1010       +2   \n+ Misses         26      25       -1   \n  Partials      101     101\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.43% <\u00f8> (+0.31%) | :arrow_up: |\n| src/popper_component.jsx | 76.92% <75%> (+3.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44b8159...2210197. Read the comment docs.\n. # Codecov Report\nMerging #1475 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1475      +/-\n==========================================\n+ Coverage   88.93%   89.01%   +0.08%   \n==========================================\n  Files          16       16            \n  Lines        1075     1083       +8   \n  Branches      176      176            \n==========================================\n+ Hits          956      964       +8   \n  Misses         23       23            \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.78% <100%> (+0.31%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...b43f816. Read the comment docs.\n. # Codecov Report\nMerging #1476 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1476      +/-\n==========================================\n+ Coverage   89.12%   89.15%   +0.03%   \n==========================================\n  Files          16       16            \n  Lines        1057     1070      +13   \n  Branches      175      175            \n==========================================\n+ Hits          942      954      +12   \n- Misses         22       23       +1   \n  Partials       93       93\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 78.78% <\u00f8> (+0.66%) | :arrow_up: |\n| src/calendar.jsx | 89.59% <\u00f8> (+0.06%) | :arrow_up: |\n| src/index.jsx | 91.46% <\u00f8> (-0.28%) | :arrow_down: |\n| src/day.jsx | 93.05% <100%> (+0.63%) | :arrow_up: |\n| src/month.jsx | 85.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8105ede...1a01bda. Read the comment docs.\n. # Codecov Report\nMerging #1478 into master will increase coverage by 0.03%.\nThe diff coverage is 85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1478      +/-\n==========================================\n+ Coverage   89.15%   89.19%   +0.03%   \n==========================================\n  Files          16       16            \n  Lines        1070     1092      +22   \n  Branches      175      179       +4   \n==========================================\n+ Hits          954      974      +20   \n  Misses         23       23            \n- Partials       93       95       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 92.16% <80%> (+0.69%) | :arrow_up: |\n| src/calendar.jsx | 88.88% <86.66%> (-0.71%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8ef7622...46b43df. Read the comment docs.\n. # Codecov Report\nMerging #1479 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1479   +/-\n=======================================\n  Coverage   89.12%   89.12%         \n=======================================\n  Files          16       16         \n  Lines        1057     1057         \n  Branches      175      175         \n=======================================\n  Hits          942      942         \n  Misses         22       22         \n  Partials       93       93\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8105ede...54a03c6. Read the comment docs.\n. # Codecov Report\nMerging #1482 into master will decrease coverage by 0.04%.\nThe diff coverage is 84.37%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1482      +/-\n==========================================\n- Coverage   88.93%   88.88%   -0.05%   \n==========================================\n  Files          16       16            \n  Lines        1075     1107      +32   \n  Branches      176      181       +5   \n==========================================\n+ Hits          956      984      +28   \n- Misses         23       26       +3   \n- Partials       96       97       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 73.91% <100%> (\u00f8) | :arrow_up: |\n| src/date_utils.js | 96% <100%> (+0.03%) | :arrow_up: |\n| src/index.jsx | 90.66% <78.57%> (-0.81%) | :arrow_down: |\n| src/calendar.jsx | 89.94% <86.66%> (+0.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1be8fe3...d2df5c4. Read the comment docs.\n. # Codecov Report\nMerging #1483 into master will decrease coverage by 0.22%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1483      +/-\n==========================================\n- Coverage   89.15%   88.93%   -0.23%   \n==========================================\n  Files          16       16            \n  Lines        1070     1075       +5   \n  Branches      175      176       +1   \n==========================================\n+ Hits          954      956       +2   \n  Misses         23       23            \n- Partials       93       96       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 73.91% <100%> (-1.09%) | :arrow_down: |\n| src/calendar_container.jsx | 62.5% <66.66%> (-20.84%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8ef7622...c05919e. Read the comment docs.\n. # Codecov Report\nMerging #1491 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1491   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1112     1112         \n  Branches      182      182         \n=======================================\n  Hits          989      989         \n  Misses         26       26         \n  Partials       97       97\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 73.91% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 01c5606...42db207. Read the comment docs.\n. # Codecov Report\nMerging #1493 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1493   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.59% <\u00f8> (\u00f8) | :arrow_up: |\n| src/index.jsx | 91.46% <\u00f8> (\u00f8) | :arrow_up: |\n| src/time.jsx | 81.48% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...b162b23. Read the comment docs.\n. # Codecov Report\nMerging #1494 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1494   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/month.jsx | 85.1% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...c025a74. Read the comment docs.\n. # Codecov Report\nMerging #1495 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1495   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...dd60da8. Read the comment docs.\n. # Codecov Report\nMerging #1500 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1500   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 78.78% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month.jsx | 85.1% <\u00f8> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 89.59% <\u00f8> (\u00f8) | :arrow_up: |\n| src/day.jsx | 93.05% <\u00f8> (\u00f8) | :arrow_up: |\n| src/index.jsx | 91.46% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...fcfef7f. Read the comment docs.\n. # Codecov Report\nMerging #1505 into master will decrease coverage by 0.05%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1505      +/-\n==========================================\n- Coverage   88.93%   88.87%   -0.06%   \n==========================================\n  Files          16       16            \n  Lines        1075     1079       +4   \n  Branches      176      177       +1   \n==========================================\n+ Hits          956      959       +3   \n  Misses         23       23            \n- Partials       96       97       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 81.03% <83.33%> (-0.45%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24349d0...702a679. Read the comment docs.\n. # Codecov Report\nMerging #1509 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1509   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c3ecdeb...64783e3. Read the comment docs.\n. # Codecov Report\nMerging #1520 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1520   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1075     1075         \n  Branches      176      176         \n=======================================\n  Hits          956      956         \n  Misses         23       23         \n  Partials       96       96\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1be8fe3...0703ea4. Read the comment docs.\n. # Codecov Report\nMerging #1522 into master will increase coverage by 0.18%.\nThe diff coverage is 95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1522      +/-\n==========================================\n+ Coverage   88.93%   89.12%   +0.18%   \n==========================================\n  Files          16       16            \n  Lines        1112     1122      +10   \n  Branches      182      188       +6   \n==========================================\n+ Hits          989     1000      +11   \n+ Misses         26       23       -3   \n- Partials       97       99       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 91.21% <95%> (+0.82%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 179ee16...b4164c8. Read the comment docs.\n. # Codecov Report\nMerging #1523 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1523   +/-\n=======================================\n  Coverage   88.93%   88.93%         \n=======================================\n  Files          16       16         \n  Lines        1112     1112         \n  Branches      182      182         \n=======================================\n  Hits          989      989         \n  Misses         26       26         \n  Partials       97       97\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 179ee16...fa46291. Read the comment docs.\n. # Codecov Report\nMerging #1526 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1526      +/-\n==========================================\n- Coverage   88.77%   88.76%   -0.02%   \n==========================================\n  Files          16       16            \n  Lines        1122     1121       -1   \n  Branches      185      185            \n==========================================\n- Hits          996      995       -1   \n  Misses         27       27            \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 73.91% <100%> (\u00f8) | :arrow_up: |\n| src/index.jsx | 89.49% <100%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f63972d...3a967b1. Read the comment docs.\n. # Codecov Report\nMerging #1527 into master will decrease coverage by 0.04%.\nThe diff coverage is 91.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1527      +/-\n==========================================\n- Coverage   88.81%   88.76%   -0.05%   \n==========================================\n  Files          16       16            \n  Lines        1135     1113      -22   \n  Branches      194      193       -1   \n==========================================\n- Hits         1008      988      -20   \n+ Misses         26       25       -1   \n+ Partials      101      100       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/year_dropdown.jsx | 76% <\u00f8> (\u00f8) | :arrow_up: |\n| src/month_dropdown.jsx | 89.74% <100%> (-0.26%) | :arrow_down: |\n| src/day.jsx | 92.75% <100%> (+0.1%) | :arrow_up: |\n| src/year_dropdown_options.jsx | 91.11% <100%> (-0.38%) | :arrow_down: |\n| src/week.jsx | 77.14% <70%> (\u00f8) | :arrow_up: |\n| src/time.jsx | 84.21% <71.42%> (+0.57%) | :arrow_up: |\n| src/month_year_dropdown_options.jsx | 85.18% <80%> (\u00f8) | :arrow_up: |\n| src/month_year_dropdown.jsx | 93.33% <83.33%> (\u00f8) | :arrow_up: |\n| src/calendar.jsx | 89.67% <84.37%> (-0.33%) | :arrow_down: |\n| src/month.jsx | 84.78% <88.88%> (-0.33%) | :arrow_down: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44b8159...ff74e10. Read the comment docs.\n. # Codecov Report\nMerging #1529 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1529      +/-\n==========================================\n+ Coverage   88.76%   88.85%   +0.09%   \n==========================================\n  Files          16       16            \n  Lines        1121     1122       +1   \n  Branches      185      186       +1   \n==========================================\n+ Hits          995      997       +2   \n  Misses         27       27            \n+ Partials       99       98       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 89.95% <100%> (+0.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 626ca16...7151bb8. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@20bd487). Click here to learn what that means.\nThe diff coverage is 95.27%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1541   +/-\n=========================================\n  Coverage          ?   89.15%         \n=========================================\n  Files             ?       16         \n  Lines             ?     1106         \n  Branches          ?      194         \n=========================================\n  Hits              ?      986         \n  Misses            ?       21         \n  Partials          ?       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 92.75% <100%> (\u00f8) | |\n| src/month.jsx | 85.1% <100%> (\u00f8) | |\n| src/week.jsx | 77.14% <83.33%> (\u00f8) | |\n| src/calendar.jsx | 90.05% <90.47%> (\u00f8) | |\n| src/index.jsx | 91.83% <92%> (\u00f8) | |\n| src/date_utils.js | 96.26% <98.41%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20bd487...b6c5da7. Read the comment docs.\n. # Codecov Report\nMerging #1543 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1543   +/-\n=======================================\n  Coverage   88.81%   88.81%         \n=======================================\n  Files          16       16         \n  Lines        1135     1135         \n  Branches      194      194         \n=======================================\n  Hits         1008     1008         \n  Misses         26       26         \n  Partials      101      101\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44b8159...f5c67ce. Read the comment docs.\n. # Codecov Report\nMerging #1544 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1544   +/-\n=======================================\n  Coverage   88.76%   88.76%         \n=======================================\n  Files          16       16         \n  Lines        1113     1113         \n  Branches      193      193         \n=======================================\n  Hits          988      988         \n  Misses         25       25         \n  Partials      100      100\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19d1454...a3ec894. Read the comment docs.\n. # Codecov Report\nMerging #1545 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1545   +/-\n=======================================\n  Coverage   88.76%   88.76%         \n=======================================\n  Files          16       16         \n  Lines        1113     1113         \n  Branches      193      193         \n=======================================\n  Hits          988      988         \n  Misses         25       25         \n  Partials      100      100\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2f6552...7e83f3a. Read the comment docs.\n. # Codecov Report\nMerging #1548 into master will increase coverage by 0.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1548      +/-\n==========================================\n+ Coverage   88.76%   88.82%   +0.05%   \n==========================================\n  Files          16       16            \n  Lines        1113     1110       -3   \n  Branches      193      192       -1   \n==========================================\n- Hits          988      986       -2   \n  Misses         25       25            \n+ Partials      100       99       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.65% <\u00f8> (+0.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0263ea...49d271e. Read the comment docs.\n. # Codecov Report\nMerging #1553 into master will increase coverage by 0.62%.\nThe diff coverage is 86.95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1553      +/-\n==========================================\n+ Coverage   88.82%   89.45%   +0.62%   \n==========================================\n  Files          16       16            \n  Lines        1110     1119       +9   \n  Branches      192      193       +1   \n==========================================\n+ Hits          986     1001      +15   \n+ Misses         25       19       -6   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.78% <\u00f8> (+0.11%) | :arrow_up: |\n| src/time.jsx | 84.48% <100%> (+0.27%) | :arrow_up: |\n| src/index.jsx | 90.87% <85.71%> (+0.22%) | :arrow_up: |\n| src/date_utils.js | 99.06% <0%> (+2.8%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a381207...d331080. Read the comment docs.\n. # Codecov Report\nMerging #1557 into master will increase coverage by 0.06%.\nThe diff coverage is 86.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1557      +/-\n==========================================\n+ Coverage   88.82%   88.88%   +0.06%   \n==========================================\n  Files          16       16            \n  Lines        1110     1116       +6   \n  Branches      192      192            \n==========================================\n+ Hits          986      992       +6   \n  Misses         25       25            \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 75% <50%> (+1.08%) | :arrow_up: |\n| src/index.jsx | 90.83% <90%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba93663...20e5243. Read the comment docs.\n. # Codecov Report\nMerging #1559 into master will decrease coverage by 0.01%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1559      +/-\n==========================================\n- Coverage   88.82%   88.81%   -0.02%   \n==========================================\n  Files          16       16            \n  Lines        1110     1109       -1   \n  Branches      192      192            \n==========================================\n- Hits          986      985       -1   \n  Misses         25       25            \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/popper_component.jsx | 72.72% <50%> (-1.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba93663...29b4984. Read the comment docs.\n. # Codecov Report\nMerging #1566 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1566      +/-\n==========================================\n+ Coverage   88.81%   88.86%   +0.05%   \n==========================================\n  Files          16       16            \n  Lines        1109     1105       -4   \n  Branches      192      192            \n==========================================\n- Hits          985      982       -3   \n+ Misses         25       24       -1   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 90% <100%> (+0.32%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f1b2969...240d70f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@20bd487). Click here to learn what that means.\nThe diff coverage is 98.63%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1577   +/-\n=========================================\n  Coverage          ?   89.48%         \n=========================================\n  Files             ?       16         \n  Lines             ?     1113         \n  Branches          ?      192         \n=========================================\n  Hits              ?      996         \n  Misses            ?       18         \n  Partials          ?       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 99.09% <98.63%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20bd487...61b07ac. Read the comment docs.\n. # Codecov Report\nMerging #1577 into master will increase coverage by 0.33%.\nThe diff coverage is 98.63%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1577      +/-\n==========================================\n+ Coverage   89.15%   89.48%   +0.33%   \n==========================================\n  Files          16       16            \n  Lines        1106     1113       +7   \n  Branches      194      192       -2   \n==========================================\n+ Hits          986      996      +10   \n+ Misses         21       18       -3   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 99.09% <98.63%> (+2.83%) | :arrow_up: |\n| src/index.jsx | 90.65% <0%> (-1.19%) | :arrow_down: |\n| src/month.jsx | 84.78% <0%> (-0.33%) | :arrow_down: |\n| src/calendar.jsx | 90% <0%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 59c1b93...df7b2fa. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@20bd487). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1583   +/-\n=========================================\n  Coverage          ?   88.86%         \n=========================================\n  Files             ?       16         \n  Lines             ?     1105         \n  Branches          ?      192         \n=========================================\n  Hits              ?      982         \n  Misses            ?       24         \n  Partials          ?       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 90.65% <\u00f8> (\u00f8) | |\n| src/calendar.jsx | 90% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20bd487...8cf11d7. Read the comment docs.\n. # Codecov Report\nMerging #1591 into master will increase coverage by 0.65%.\nThe diff coverage is 86.2%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1591      +/-\n==========================================\n+ Coverage   89.72%   90.37%   +0.65%   \n==========================================\n  Files          16       17       +1   \n  Lines        1139     1164      +25   \n  Branches      194      196       +2   \n==========================================\n+ Hits         1022     1052      +30   \n+ Misses         18        8      -10   \n- Partials       99      104       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.jsx | 92% <100%> (+0.73%) | :arrow_up: |\n| src/calendar.jsx | 90.2% <100%> (+0.36%) | :arrow_up: |\n| src/date_utils.js | 99.14% <100%> (+0.01%) | :arrow_up: |\n| src/inputTime.jsx | 75% <75%> (\u00f8) | |\n| src/year_dropdown.jsx | 90% <0%> (+14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c8d0e6...c785629. Read the comment docs.\n. # Codecov Report\nMerging #1605 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1605   +/-\n=======================================\n  Coverage   89.15%   89.15%         \n=======================================\n  Files          16       16         \n  Lines        1106     1106         \n  Branches      194      194         \n=======================================\n  Hits          986      986         \n  Misses         21       21         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 59c1b93...31f1605. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@23a0c99). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1610   +/-\n=========================================\n  Coverage          ?   89.15%         \n=========================================\n  Files             ?       16         \n  Lines             ?     1106         \n  Branches          ?      194         \n=========================================\n  Hits              ?      986         \n  Misses            ?       21         \n  Partials          ?       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 23a0c99...1d75c72. Read the comment docs.\n. # Codecov Report\nMerging #1611 into master will decrease coverage by 22.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1611       +/-\n===========================================\n- Coverage   89.15%   66.99%   -22.16%   \n===========================================\n  Files          16       16             \n  Lines        1106     1106             \n  Branches      194      194             \n===========================================\n- Hits          986      741      -245   \n- Misses         21      258      +237   \n- Partials       99      107        +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 5.26% <0%> (-78.95%) | :arrow_down: |\n| src/year_dropdown_options.jsx | 13.33% <0%> (-77.78%) | :arrow_down: |\n| src/month_year_dropdown_options.jsx | 22.22% <0%> (-62.97%) | :arrow_down: |\n| src/month_dropdown_options.jsx | 18.18% <0%> (-45.46%) | :arrow_down: |\n| src/month_dropdown.jsx | 51.28% <0%> (-38.47%) | :arrow_down: |\n| src/day.jsx | 57.97% <0%> (-34.79%) | :arrow_down: |\n| src/month_year_dropdown.jsx | 60% <0%> (-33.34%) | :arrow_down: |\n| src/week.jsx | 45.71% <0%> (-31.43%) | :arrow_down: |\n| src/year_dropdown.jsx | 48% <0%> (-28%) | :arrow_down: |\n| src/week_number.jsx | 27.27% <0%> (-27.28%) | :arrow_down: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71c18f1...35904ac. Read the comment docs.\n. # Codecov Report\nMerging #1611 into master will decrease coverage by 22.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1611       +/-\n===========================================\n- Coverage   89.15%   66.99%   -22.16%   \n===========================================\n  Files          16       16             \n  Lines        1106     1106             \n  Branches      194      194             \n===========================================\n- Hits          986      741      -245   \n- Misses         21      258      +237   \n- Partials       99      107        +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/time.jsx | 5.26% <0%> (-78.95%) | :arrow_down: |\n| src/year_dropdown_options.jsx | 13.33% <0%> (-77.78%) | :arrow_down: |\n| src/month_year_dropdown_options.jsx | 22.22% <0%> (-62.97%) | :arrow_down: |\n| src/month_dropdown_options.jsx | 18.18% <0%> (-45.46%) | :arrow_down: |\n| src/month_dropdown.jsx | 51.28% <0%> (-38.47%) | :arrow_down: |\n| src/day.jsx | 57.97% <0%> (-34.79%) | :arrow_down: |\n| src/month_year_dropdown.jsx | 60% <0%> (-33.34%) | :arrow_down: |\n| src/week.jsx | 45.71% <0%> (-31.43%) | :arrow_down: |\n| src/year_dropdown.jsx | 48% <0%> (-28%) | :arrow_down: |\n| src/week_number.jsx | 27.27% <0%> (-27.28%) | :arrow_down: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71c18f1...35904ac. Read the comment docs.\n. # Codecov Report\nMerging #1613 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1613   +/-\n=======================================\n  Coverage   89.15%   89.15%         \n=======================================\n  Files          16       16         \n  Lines        1106     1106         \n  Branches      194      194         \n=======================================\n  Hits          986      986         \n  Misses         21       21         \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 96.26% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71c18f1...1040a47. Read the comment docs.\n. # Codecov Report\nMerging #1629 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1629   +/-\n=======================================\n  Coverage   89.76%   89.76%         \n=======================================\n  Files          16       16         \n  Lines        1114     1114         \n  Branches      194      194         \n=======================================\n  Hits         1000     1000         \n  Misses         15       15         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f9b5957...3a6c4cf. Read the comment docs.\n. # Codecov Report\nMerging #1634 into master will decrease coverage by 0.07%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1634      +/-\n==========================================\n- Coverage   89.76%   89.69%   -0.08%   \n==========================================\n  Files          16       16            \n  Lines        1114     1116       +2   \n  Branches      194      194            \n==========================================\n+ Hits         1000     1001       +1   \n- Misses         15       16       +1   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 98.66% <50%> (-0.44%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 164d10d...31073e4. Read the comment docs.\n. # Codecov Report\nMerging #1637 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1637   +/-\n=======================================\n  Coverage   90.09%   90.09%         \n=======================================\n  Files          17       17         \n  Lines        1161     1161         \n  Branches      198      198         \n=======================================\n  Hits         1046     1046         \n  Misses          9        9         \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/day.jsx | 92.75% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ccc715...55476a1. Read the comment docs.\n. # Codecov Report\nMerging #1646 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1646   +/-\n=======================================\n  Coverage   89.76%   89.76%         \n=======================================\n  Files          16       16         \n  Lines        1114     1114         \n  Branches      194      194         \n=======================================\n  Hits         1000     1000         \n  Misses         15       15         \n  Partials       99       99\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 164d10d...179602d. Read the comment docs.\n. # Codecov Report\nMerging #1656 into master will decrease coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1656      +/-\n==========================================\n- Coverage   89.76%   89.72%   -0.04%   \n==========================================\n  Files          16       16            \n  Lines        1114     1139      +25   \n  Branches      194      194            \n==========================================\n+ Hits         1000     1022      +22   \n- Misses         15       18       +3   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/date_utils.js | 99.12% <100%> (+0.02%) | :arrow_up: |\n| src/index.jsx | 91.26% <100%> (-0.57%) | :arrow_down: |\n| src/calendar.jsx | 89.83% <0%> (-0.22%) | :arrow_down: |\n| src/month.jsx | 85.71% <0%> (+0.6%) | :arrow_up: |\n| src/week.jsx | 78.94% <0%> (+1.8%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad499a2...9ee160c. Read the comment docs.\n. # Codecov Report\nMerging #1659 into master will decrease coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1659      +/-\n==========================================\n- Coverage   90.37%   90.09%   -0.29%   \n==========================================\n  Files          17       17            \n  Lines        1164     1161       -3   \n  Branches      196      198       +2   \n==========================================\n- Hits         1052     1046       -6   \n- Misses          8        9       +1   \n- Partials      104      106       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.11% <100%> (-1.09%) | :arrow_down: |\n| src/index.jsx | 91.53% <100%> (-0.47%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c13d17c...3d0cf33. Read the comment docs.\n. # Codecov Report\nMerging #1660 into master will decrease coverage by 0.21%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1660      +/-\n==========================================\n- Coverage   89.76%   89.54%   -0.22%   \n==========================================\n  Files          16       16            \n  Lines        1114     1129      +15   \n  Branches      194      194            \n==========================================\n+ Hits         1000     1011      +11   \n- Misses         15       19       +4   \n  Partials       99       99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/calendar.jsx | 89.83% <\u00f8> (-0.22%) | :arrow_down: |\n| src/index.jsx | 90.68% <\u00f8> (-1.15%) | :arrow_down: |\n| src/week.jsx | 78.94% <0%> (+1.8%) | :arrow_up: |\n| src/month.jsx | 85.71% <0%> (+0.6%) | :arrow_up: |\n| src/date_utils.js | 99.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad499a2...888aa1f. Read the comment docs.\n. # Codecov Report\nMerging #1669 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1669   +/-\n=======================================\n  Coverage   90.09%   90.09%         \n=======================================\n  Files          17       17         \n  Lines        1161     1161         \n  Branches      198      198         \n=======================================\n  Hits         1046     1046         \n  Misses          9        9         \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/week.jsx | 78.94% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f1c6069...87dc735. Read the comment docs.\n. # Codecov Report\nMerging #1673 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1673   +/-\n=======================================\n  Coverage   90.09%   90.09%         \n=======================================\n  Files          17       17         \n  Lines        1161     1161         \n  Branches      198      198         \n=======================================\n  Hits         1046     1046         \n  Misses          9        9         \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/inputTime.jsx | 75% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9409a0e...8420f01. Read the comment docs.\n. \n",
    "jakehasler": "@martijnrusschen Just updated with master, and it should be good to go once the build passes \ud83d\udc4d Thanks!. ",
    "MUllman": "Agreed there is no way to clear the selected date when the DateTool is rendered inline. Its really frustrating . ",
    "ShaneGlee": "In case anyone is still looking.\nYou can bind to onClickOutside to toggle your open state.\n<DatePicker\n  withPortal\n  inline\n  onClickOutside={this.toggleCalendar} />. ",
    "mcorteel": "Actually, setting minDate or maxDate to null breaks keyboard navigation.\nThe documentation marks these props as object, but I guess null should be ok too!\nSo, the only solution is to not set these props at all, which is really unpractical.\nEDIT What works is passing an undefined variable instead of null (which is not pretty...).. ",
    "ArthurSN57": "@ruchitalodha did you find the answer?. +1. ",
    "errawn": "I just passed a 'readOnly={true}' prop... ",
    "namezero": "not available in version 0.55.0. also, when datepiker  dont fit screen, we have scroll bar, but impossible to scroll because when we want to scroll the datepicker hide. you should calculate and detect that the datepicker is out of screen and change it position \n\n. What about the position on screen when it is on the edge?. \n. ",
    "thomax": "It seems props.timeFormat gets passed all the way down to Time.jsx, but internally, this component tries to read props.format, instead of props.timeFormat. Can submit a PR if you want?\nBug right here, unless I'm mistaken: https://github.com/Hacker0x01/react-datepicker/blob/master/src/time.jsx#L67. ",
    "tinhlv": "I have the same problem. help me. ",
    "SilvioMessi": "Try to force the datepicke's value to be consistent with the date object stored in the component state. Something like this:\n<DatePicker\n    value={this.state.date.format('DD/MM/YYYY')}\n    onChange={(inputValue) => {this.setState({date: inputValue});}}\n/>. ",
    "ArcanisCz": "@SilvioMessi Manual edit will trigger onChangeRaw, not onChange.. Had similar problem, and according to PR https://github.com/Hacker0x01/react-datepicker/pull/1074 i was able to \"fix\" datepicker in modals and scroll containers\n```\nconst CalendarContainer = ({children}) => children ? (\n    createPortal(React.cloneElement(children, {\n        className: \"YOUR_DATEPICKER_CSS_CLASS_HERE react-datepicker-popper\"\n    }), document.body)\n) : null;\n....\n\n```\nYou need to set proper classname (according to where you have imported react-datepicper styles) instead of YOUR_DATEPICKER_CSS_CLASS_HERE and set its z-index to some big value (bigger than modals have in your app). ",
    "DDzia": "@tinhlv , i was make wrapper component and custom input and handle focus on it. on input focus - do blur.. ",
    "colinrcummings": "I pass a readOnly prop to the DatePicker component and add the following CSS to make the background color white again:\n.react-datepicker__input-container input[readonly] {\n  background-color: white; \n}\nThe Calendar component still works as expected.. Sure thing; I'll work on a PR this week.. @aij, react-datepicker doesn't use componentWillMount or componentWillUpdate. There are two instances of componentWillReceiveProps (in DatePicker and Calendar ) that can probably be converted to componentDidUpdate, which won't break the API (docs). . Yes, @aij, componentDidUpdate-- sorry! I made a typo in my comment, which I've edited. I don't think we will need getDerivedStateFromProps. In regards to calling setState in componentDidUpdate, see here and here. I'll let you know as soon as I have something for review. . @aji, I have two tests to fix first:\nDatePicker should update the preSelection state when a day is selected with mouse click\nThis one is failing for me in master. Are you seeing this?\nTimePicker should allow for injected moment if input does not have focus\nThis one relates to this line; I think adding a check to see if the selected prop changed should resolve it. \n. @aji, see https://github.com/Hacker0x01/react-datepicker/pull/1374. I fixed the second test by adding the hasSelectionChanged check. The first one ran without issue during the CI run. . Addresses https://github.com/Hacker0x01/react-datepicker/issues/1367.. cc @aij. ",
    "nits": "Did anyone find solution for this?. alright. So I found out that this is not something related to datepicker component.\nDay abbreviation we can change using moment locale as follows:\nmoment.updateLocale('en', {\n      weekdaysMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n});\nSource: https://momentjs.com/docs/#/i18n/\n. ",
    "hufftheweevil": "I, too, am looking to control the style of the main wrapper. My biggest issue is that it takes up 100% width, so I can't put two Date Picker fields right next to each other.. Hmm, yeah I see what you mean. That logic part may not always be so logical, though. For example, if the current range starts on some Monday and ends on some Friday and then the user clicks on the Wednesday between those two, does he want to change the start to Wed or the end to Wed? I suppose I could use the children feature to add a toggle button within the picker, but I'm not sure if most people would understand that UI. I shall play around with it a bit. Obviously drag and drop would be clearer and easier to use.. ",
    "jordansykes": "If you just create your own wrapper for each datepicker element then put on your styles on that, the datepicker will take up 100% of the space.  I agree it would be useful to be able to add a classname to that empty containing div though.. ",
    "ladislavbili": "Yeah I had this problem too, until it is solved I reccomend wrapping it in your own div, style and give classname to that div and then you can set its css like this:\nrender example\n<div className=\"datepickerWrap\">\n<DatePicker/>\n</div>\ncss example\n.datepickerWrap div{\n  width: 100%;\n}\n.datepickerWrap{\n  width: 100%;\n}\nof course, it is up to you to style it as you want and set everything in your datepicker up, you might also want to change css of one of these guys but that situational\nreact-datepicker__time-container\nreact-datepicker__time\nreact-datepicker__time-box\nreact-datepicker__time-list\nreact-datepicker__input-container\nreact-datepicker-wrapper\nreact-datepicker__input-container. ",
    "seansfkelley": "As a workaround, you can reasonably safely select the classless div using ... > div:not([class]) where ... selects the parent element you control. This way, you don't need to add another layer with a class just so you can style it.. Related: #1344, #1208, #932. Looks like this wrapper div has been causing a lot of grief.. This type of message usually indicates that you've imported the library improperly and ended up with something like { default: DatePicker } rather than just DatePicker. Maybe your tooling or build changed at the same time you upgraded React?. ",
    "phun-ky": "Anyone with a fix here?. ",
    "lizter": "Hi, this is related to Internet Explorer.\n\nEvery time the datepicker is opened, this exception is thrown. This is annoying as it floods our logs.\nI also noticed that reactdatepicker.com doesn't work at all in IE11. The page is grey, and the following errors are present in console:\n\n. @aij Is the information provided sufficient enough to investigate the issue for you?. The DatePicker as a lib/component works in IE11, it\u2019s just the exception\ngetting thrown on handleChange all the time.\ntir. 23. jan. 2018 kl. 02:09 skrev Rafee Memon notifications@github.com:\n\nPossibly the same issue as #1076\nhttps://github.com/Hacker0x01/react-datepicker/issues/1076\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1041#issuecomment-359633946,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA4J3AZf7Kyd5apR8kyx0i0WfmIlM7M4ks5tNTFLgaJpZM4Pj_h4\n.\n. \n",
    "joshianuj": "Did you import 'moment/locale/de'?\nand tried with locale='de'\n . ",
    "maxnowack": "I've got the same problem. I've imported moment/locale/de, but locale=\"de\" has no effect \u2026. ",
    "etienne-bondot": "You need to call moment.locale('<your_local>'); after importing locales.. Did you try to import the moment locale as import 'moment/locale/<your_locale>'; ?. ",
    "BartusZak": "Thanks for answer.\nimport 'moment/locale/pl';\n...\nlocale=\"pl\". ",
    "pdpino": "The docs could say that importing the locale is needed. Also it could be specified in this example (locale example). ",
    "hdpinto": "This actually very helpful, thank you @pfarnach!\nThough, with the speech-bubble version it still shouldn't be going off-screen like that.. ",
    "adam-golab": "I'm still working on failing tests. . Does anybody know, why new version enzyme doesn't update component's state in some cases?. @navarroaxel @acierto But this PR doesn't apply to moving dependecies from normal to peer. So there should be other PR for that. This PR resolve only problems with migration to new version of React.  I can change it, but I'd like to focus on failing test cases, which for an unknown reason don't update component's state. . You\u2019ll need to install React and Moment.js separately since those dependencies aren\u2019t included in the package.\nThis is already in README.md so I don't think that it's necessary to explicitly write this. I only added missing information about PropTypes. I'm working on this. But I don't know how to resolve problems with a new enzyme, that in some situation doesn't update component's state. I'm doing research, but nothing helped so far... . Yes, I'm resolving it right now. Unfortunately not. There is used enzyme-adapter-react-16 which works only with react v16.x.x, so if these peerDeps have remained at ^0.14.0 || ^15.0.0 || ^16.0.0 then npm will display error about not compatible dependencies versions.. ",
    "acierto": "You can configure enzyme adapter just in one place, instead of duplicating the code in each test file.\nWhat you need to do for that:\npackage.json\n\njasmine.conf.js\n\n. Create a function, and call it, instead of variable. It will fix your issue.\nSo instead of \nconst suggestionsContainer = wrapper.find('.react-autosuggest__suggestions-container');\nexpect(suggestionsContainer).toBePresent();\nyou need to do\nconst suggestionsContainer = () => wrapper.find('.react-autosuggest__suggestions-container');\nexpect(suggestionsContainer()).toBePresent();\nSo when you will expect on some condition, you will always fetch new state of the component\n. I agree about moment and prop-types, though the latest version of moment doesn't work with latest version of react-datepicker. Same here, when I select a date, I have such error\n\n. ",
    "navarroaxel": "I think moment and prop-types should be peerDependencies. Because the client of this package should decide what version want to use. And a nested moment could duplicate the package in the webpack build and the final bundle.js could have a huge size because of this.. fix #1060. I know @adam-golab but I really like that change included in the next release. Maybe after merge we can continue with the dependencies change.. If you move moment to peerDependencies you need to install each peerDep after the yarn install.\nThe common way is add a script on the package.json: \njson\n\"install-peers\": \"yarn add --peer moment prop-types\"\nYou can specify the version if you want. But the peers are not installed implicitly. And you need to run the yarn run install-peers before the yarn test. That's why moment is not defined and build broken.. Also, the README.md should change this\nshell\nnpm install react-datepicker --save\nTo this\nshell\nnpm install react-datepicker moment prop-types --save. @adam-golab the prepublish script is run after the yarn install automatically. That's why this is failing. Also, you need to add moment and prop-types as devDependencies. And you can remove the install-peers is useless.\nI'm not sure if is required prop-types as peerDependencies. I think yes.. I just made a few comments but only @adam-golab can modify this PR.. fix #972. ",
    "adamscybot": "It could just be a peer dep with a version restriction for now?. ",
    "JustFly1984": "Guys, this is a bummer, but I have react 16 app, and only embed your datepicker, and have dependency conflicts right away.\nBut it builds with CRA ok.\nI have one more question. Is it possible to set readOnly: true optionally?\nI have an issue on Mobile. \nonClick it displays widget, but focus gets on datepicker's input, so cellphone's native keybord pops up, and scrolls the view, so datepicker gets pulled up, and half of datepicker gets out of screen.\nIt is natural reaction for user to scroll up, but touching the screen closes datepicker, and leads to confusing UI\nI get why you set type='text' for the input, so you do not display native datepicker on inconvinient  crossbrowser support, but if you set readOnly=true on input, it will still react on events, while do not showing native widget.\nIf you want, I can make a PR. Meanwhile trying to find a workaround.\n. I have same issue while building to production with react16\nIt is a bummer\n\n. I have no idea why but this happens only in Chrome Canary. I do not have same issue with standard chrome.. No, I did not. Instead we made our own datepicker with accessibility support. I've tried to refactor this repo, but it is too much work right now, although, I could try later on.. ",
    "vhflat": "Any progress on the migration to React 16? . ",
    "fagerbua": "I've resolved the conflicts and ~~started fixing~~ EDIT: fixed the remaining failing tests here: https://github.com/fagerbua/react-datepicker/tree/react16\n~~(Two tests still failing as I write this, but thought I'd let people know in case that could prevent duplication of efforts.)~~\n@adam-golab , would you be interested in adding my commits to this PR?. ",
    "punit-shah": "@bjankord @adam-golab \nsh\n$ test $(npm -v | tr . '\\n' | head -n 1) -ge '4' || exit 1\nThis is testing that the npm version is greater than or equal to 4.\nIt's failing because it is not greater than or equal to 4.\nsh\n$ npm --version\n3.10.10. ",
    "GBT3101": "The test fails with / without my commit, what can I do about it?. I understand what you mean with the confusing behaviour, theoretically props.setOpen callback is used so the developer will change his external isOpen value, as shown in the example (the openCalendar function used to keep this correlation).\nI've also made sure to expose this code in the example's description, so developers will understand how to use this callback.\nthe callback is triggered every time the internal \"state.open\" is being changed, so as long the developer chooses to keep the correlation it's his responsibility.\n\nThat said, it's only to explain our approach about the problematic behaviour you described.\nUltimately our first priority is to enable closing & opening the calendar from outside the component + not to harm in any way developers that are already using the component, your solution also provides this goal but here are some drawbacks I think you should consider:\n\n\nIn your suggested solution, where we will treat the prop.isOpen as an override over the state.open boolean, we can\u2019t completely stop updating the internal state. even If I as a user want to be able to control the visibility of the calendar with a boolean prop, I would expect the component to close and open on focus and blur, without me doing anything from outside.\n\n\nFuture contributors will have to maintain 2 scenarios:\n            - the current one, calendar visibility fully controlled from the internal state.\n            - the alternative, a prop that is being practically used as a state (a function inside the \n                 component, handleOpenChange that will change the prop).\n\n\nThe bigger the component will get, the harder it will be to maintain that 2 scenarios, I think in the long run it will cause that different developed attributes will work great alone, but might not work too well with different combinations because developers will overlook this new open-state-prop mutation.\nAfter considering this and the example with the checkbox (that teach developers how to use the callback appropriately and maintain correlation between the prop.isOpen and state.open), advise which solution you prefer and I will change it accordingly.\nThanks.\n. ",
    "micahalcorn": "Possibly related question:\nIn my experience, the calendar closes by default when a date is selected. When showTimeSelect is true, the calendar does not close when a time is selected. The current default workflow is actually perfect if a user selects a time first and then a date, but that isn't necessarily intuitive. So it's nice to have @lbelinsk's shouldCloseOnSelect (https://github.com/Hacker0x01/react-datepicker/pull/992) solution to prevent any automatic closing. Would it be appropriate to have a more granular closing controls for when to internally close the calendar? Or does the solution proposed here sufficiently solve my case by passing the auto-close responsibility to the developer?. @alex-shamshurin I assume that @namezero's expectation is that the timepicker's auto-scroll should prioritize openToDate over the current time. Based on my understanding of the componentDidMount hook, it currently falls back to the current time if no selection is passed. \nTo be consistent with the openToDate behavior, the \"open to time\" functionality described here would need to also prioritize the time of the openToDate over the selection (but not result in a selection).\ncomponentDidMount () {\n    // code to ensure selected time will always be in focus within time window when it first appears\n    const multiplier = 60 / this.props.intervals\n    const currH = (this.props.openToDate ? getHour(this.props.openToDate) : (this.props.selected) ? getHour(this.props.selected) : getHour(newDate()))\n    this.list.scrollTop = 30 * (multiplier * currH)\n  }\nAn alternative would be to only scroll to the \"open to time\" if a selection is not present:\ncomponentDidMount () {\n    // code to ensure selected time will always be in focus within time window when it first appears\n    const multiplier = 60 / this.props.intervals\n    const currH = (this.props.selected) ? getHour(this.props.selected) : getHour(this.props.openToDate || newDate())\n    this.list.scrollTop = 30 * (multiplier * currH)\n  }\nWould the maintainers be receptive to a pull request that includes one of these two changes? I have a user that is expecting this behavior. He is often using the datepicker in the early morning hours, but his selection always involves an evening time. It would be nice if we could save him some scrolling.\ncc: @martijnrusschen . ",
    "kodell": "Manually making your suggested change resolved this problem for me too. +1. ",
    "Raido0812": "not sure if this helps, \nsetting strictMath option on less-loader to true fixed the issue for me. . ",
    "kkseven07": "\nselected={props.input.value || null} onChange={props.input.onChange}\n\ndoes not work with time(showTimeSelect). After selecting the date and time, the input only shows the date. Any solutions? Thanks. ",
    "Shadowman4205": "At first sight no i did not find any problem. ",
    "michaelwclark": "I'm having the same issues.. I just downgraded my datepicker. @scrombie \n. ",
    "scrombie": "@michaelwclark From what i gathered, It could be caused by different libraries using different versions of React. Or particularly, a library using a version higher than what you're using.\nNot sure about this tho. I switched to a different library. Needed to move quick. But check it out and feel free to let me know if it was the cause.. ",
    "czechdave": "Had the same issue, make sure your react-dom version is also 15.6.1, that solved it for me, I had it different from the react version.. ",
    "eyanez1230": "Anyone still facing this issue on the latest release?. @dahliacreative  Can you please post a code snip? It is not working for me. Thanks!. ",
    "jkahne": "I am.  I'm using:\n\"react\": \"^16.2.0\",\n\"react-datepicker\": \"^0.64.0\",\n\"react-dom\": \"^16.2.0\",. ",
    "jessica-pixvana": "I have the same issue. Using v0.55.0. showTimeSelect breaks the datepicker and shows a poorly formatted list of times\n\n. Am I supposed to copy the file react-datepicker/dist/react-datepicker.css into my directory to use it?. Currently I haveimport 'react-datepicker/dist/react-datepicker.css'; at the top of my file. ",
    "nali": "@permadiwibisono I had the same issue on the 0.54 version, updating to 0.55 resolved it for me.. ",
    "permadiwibisono": "@nali i got it, but now there is bug in css, not show properly same problem with @jessica-pixvana \n\nAnd its my code:\n\n. @shadrech I'm using Windows 10 and with Google Chrome.. ",
    "codepandy": "@shadrech the same issue,windows 7 and Chrome.\nhow to solve it?. Hi @orx0r \nthe same issue.\nit's invalid the code that you show. ",
    "orx0r": "@shadrech I have the same issue on ubuntu and Chromium.\ncurrent versions react v15.5.4 react-datepicker v0.60.2 (on previous versions was the same issue)\n\nhttps://github.com/Hacker0x01/react-datepicker/issues/1056#issuecomment-334628577\n\nadd some inline styles\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n    padding-left: 0;\n    padding-right: 0;\n}\nit's solve display issues. It is temporary fix the issue:\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nadd some inline styles\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n    padding-left: 0;\n    padding-right: 0;\n}. Hi @Rahulkr204 sure. this works in my case\n```\n// imports\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\n...\n// component\nreturn (\n    \n\n          {<code>.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n            padding-left: 0;\n            padding-right: 0;\n          }</code>}\n        \n\n\n);\n```. ",
    "hugozap": "One thing I noticed is that the time list does not have padding set to 0, so it takes the browser defaults which results in issues: See a simple example here: https://codesandbox.io/s/l5oz7rvrzq\n( edit: I meant padding not margin ). ",
    "jfajardo": "I have the same issue with react semantic ui\n.react-datepicker {\n    display: flex  !important;\n}. ",
    "drinchev": "This has been implemented already : \nhttps://github.com/Hacker0x01/react-datepicker/pull/1035\n. ",
    "codexpert": "Are you using React 16 ? #1060 . ",
    "fukaminmin": "@GautierT Thanks! When I upgrade react-date-picker for 0.55.0, that works fine!. ",
    "josegers": "We have the same problem. Is there an update planned to support React 16?. We have the same problem as tadjohnston. The problem only occurs during the webpack production build.. Confirmed working for us as well.. ",
    "antonigiske": "It works if you update yarn. I had the same problem with older version of yarn.. ",
    "sindrisig": "@alex-shamshurin But the problem is that you can have the picker inline and then it never closes. I'm facing the same issue so if anybody knows a solution to this it would be much appreciated  . ",
    "cmangia47": "Has anyone identified a resolution to this issue?. Sorry forgot the mention we are using version 2.2.0. ",
    "murdink": "the fixedHeight prop should meet your needs. ",
    "kenta88": "thank you very much!. ",
    "kauehmoreno": "I've just check my version, and it's a little bit old.. I'm using 46.0.1 . I will update and check it out . I've just updated to 56.0.1 and still happening to me \n\n. ",
    "gabriel-card": "Hi, i'm having this issue in Firefox as well. Using 56.0.1.\nWorth mentioning that in October, in Brazil (GMT-3) we have daylight saving time beginning. Maybe it's a problem with moment.js.. @aij hi!\nJust tested from master, didn't fix. Could it be moment.js's locale settings?\nedit: just saw my code, i'm setting it globally to 'pt-br', so it should work just fine. This is mindbogging.. ",
    "stevenperezGL": "@mkovrigovich Thanks for this PR ! :). ",
    "igoradamenko": "@martijnrusschen, thanks! Could you please tell me something about the date of the next release? Do you have any plans about it?. Oh! It is already released. Thanks!. ",
    "iamandrewluca": "I am using reactstrap. Just added this\njs\nimport Portal from 'reactstrap/lib/Portal'\n// ...\n<DatePicker\n  // ...\n  popperContainer={Portal}\n  // ...\n/>\ncreation and removal of nodes are handled by Portal. I laughed. Thanks!. There is onChange(date, event) and onChangeRaw(event)\nThen it should be onBlur(date, event) and onBlurRaw(event)\nsame for onFocus and onFocusRaw ?!. ",
    "thiagofront": "works fine\n``` jsx\nimport ReactDOM from 'react-dom';\nconst $el = document.querySelector('#yourElement');\nconst PopperContainer = ({ children }) => (\n  ReactDOM.createPortal(\n    children,\n    $el,\n  )\n);\n\n```. ",
    "cliener": "I've seen similar oddities in iOS Safari. Looks like events are firing out of order potentially related to #597 \nMay also be related to #830 . The same problem here triggers a crash in Safari iOS however whatever is underlying cause seems to be different. Having stolen @pmacmillan's code, I have a test case that breaks in MacOS Safari only. Need to investigate more to find out what's causing issues in Safari.. I've put together a fix (in part borrowing @pmacmillan's work) though I'm unsure if it should live inside React or as a separate library. Assuming the latter, it's now available for implementation: https://github.com/cliener/input-fixer\nI'm now working on a fork of react-datepicker incorporating this library. Stay tuned!. My fork is done https://github.com/cliener/react-datepicker\nScoped npm install if anyone's keen https://www.npmjs.com/package/@cliener/react-datepicker\nI've fixed the immediate problem of the endless event loop however we're now left with the the originally opened calendar sometimes stays open. Removing outsideClickIgnoreClass={outsideClickIgnoreClass} from line 440 fixes this issue but then leaves the problem of the calendar re-rendering every time the input is clicked.\nI've made some attempt at resolving this bug but don't haven't yet found a solution. I'm open to suggestions/contributions on this.\nIt seems a similar endless loop in iOS has also been fixed with the changes I've made. I'll test this shortly.\nAny thoughts about whether I should create a PR at this point?. PR as above. The code is now in a better state having at least fixed the endless loop. iOS Safari is entirely happy now from my tests.. I've looked into the four failing tests and can't see what might be done about them. When testing each manually in-browser, the tests pass.\nThe fix I've implemented deliberately suppresses fast blur/focus events which is probably what's causing the failures.\nAny suggestions about what can be done to pass the tests?. ",
    "echarso": "Hi I am facing the same issue here with Safari. ",
    "kambala3000": "@carmouche this isn't work for me :(. ",
    "jblom": "thanks for the quick reply and this works! I missed the openToDate property. Maybe (when scanning the list) I expected a different kind of property name (initialDate or something) for this.. ",
    "rsshilli": "Well, I figured out a work around, but it isn't pretty.  It seems that backspacing over the date and re-typing it in seems to work.\nconst oldValue = browser.getValue(myDatePickerId);\n          if(oldValue) {\n            let backspaces = oldValue.replace(/./g, \"\\uE003\");\n            browser.setValue(myDatePickerId, [backspaces, value, \"\\uE007\"]);\n          } else {\n            //When the control does not have focus, setting the value directly does not work\n            browser.setValue(myDatePickerId, \"\");\n            browser.setValue(myDatePickerId, value);\n            browser.click(\"#companyHeader\");\n          }. ",
    "tadjohnston": "I'm not sure how much details I can give, but what I can tell you is that using 0.54 works fine.  When I bump to 0.57 it breaks and this is only happening when running a webpack production build.  \nNode: 8.1.2\nWebpack: 3.8.1\nRunning webpack in development mode (NODE_ENV=development) seems to run just fine.  Here is the full error:\n[client] container-b8552c-ad11534beeb7ba0bb4d4.js from UglifyJs\nUnexpected token: name (onClickOutside) [./node_modules/react-onclickoutside/index.js:92,0][container-b8552c-ad11534beeb7ba0bb4d4.js:1603,33]\nHere is the uglify config:\nnew webpack.optimize.UglifyJsPlugin({\n    minimize: false,\n    sourceMap: true,\n    compress: {\n      warnings: false,\n      pure_getters: true,\n      screw_ie8: true,\n      comparisons: false,\n    },\n  }),. Confirmed it's working in 0.58.0. Thanks for getting a fix out so quickly @martijnrusschen. Much appreciated.. ",
    "amarinov": "@martijnrusschen Seems to me this is a different problem you've fixed with downgrading react-onclickoutside to 6.0.0.\nThe problem I, @tadjohnston and @josegers have is that, ./node_modules/react-onclickoutside/index.js in v6.0.0 is not transpiled and has native ES6 class defined. This is sth that has been fixed in react-onclickoutside v.6.1.0, but you're using a lower version.. ",
    "firec0der": "I'm experiencing the same issue with the create-react-app stack. It can't build my application, fails with the message:\n. Reverting to 0.56.0 works for me.. @martijnrusschen works for me \ud83c\udf89 . Btw, I mentioned that there is little mess with these variables.\nThere is no way to customize only the color of \"prev\" and \"next\" arrows. There is $datepicker__muted-color variable for it, but it's also used for disabled dates.\nI can separate it if you want.. I prefer to override variables with my own, so I have separate datepicker.scss file:\n```\n@import \"from/my/colors.scss\";\n$datepicker__selected-color: $my-color !default;\n@import \"react-datepicker/src/stylesheets/datepicker.scss\";\n```. Thank you!. ",
    "roryza": "+1 here. Reverting to 0.54 seems to be fine. (with react 16 and react-onclickoutside 6.6.2). If you have a mouse with a scroll wheel or are using a touch device you should be able to scroll.\nTo get a scroll bar you can try adding styles like this on the page. There's probably a way to pass down a style or a class somehow, but this works well enough for me.\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n    overflow-y: visible;\n}. ",
    "Andarist": "@rafeememon it seems that this was fixed by recently merged in https://github.com/Hacker0x01/react-datepicker/pull/1091 , ofc I might be wrong, as I didn't dig into the issue properly, but from what I read here it is highly possible\nThe only thing left to do is releasing a new version of react-datepicker. Oh i didn't mean a major new version, just an updated one - patch, minor, whatever :P. @oskar-skuteli in what setup does the problem occur? When it comes to the mentioned issue - the codepen's dependencies are poorly configured. Here is a working one - https://codepen.io/anon/pen/qVbamX\nYou just need to add https://unpkg.com/react-onclickoutside@6.6.3/dist/react-onclickoutside.min.js before react-datepicker.. Ok, it seems that react-datepicker has really outdated build setup. It should get updated like a lot!\nTemporary fix here - https://github.com/Hacker0x01/react-datepicker/pull/1109 , need to be tested and checked but imho should work right away.. I might try to do this later, need to assess the required work though, however it should be pretty straightforward - I've done it already over dozens of time ;). Taken from the react-onclickoutside source code:\n```js\nexports.__esModule = true;\nexports.IGNORE_CLASS_NAME = undefined;\nexports.default = onClickOutsideHOC;\n// ...\nvar IGNORE_CLASS_NAME = exports.IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';\n```\nYou would have to share sample repository with the issue reproduced so I can check it out.. Hm, I think it is just a commonjs / es interoperability problem. At the moment commonjs package with _interopRequireDefault (react-datepicker) requests es package (react-onclickoutside), but the es exports in the latter get transpiled by webpack itself (and not babel) and it seems it doesnt do it in babel compatible way.\nKeep in mind that we are talking about some webpack@2-beta, I have no idea if newer versions are handling such scenario correctly and truth to be told - I just don't care.\nI will just try in the weekend refactor react-datepicker's build setup so you dont land in such commonjs / es mismatch.. @martijnrusschen how much are attached to the grunt here? I'd like to ditch it for most of the tasks.. ah yeah, done the changes from the github UI, havent noticed this project has a lockfile\nfixed :). For the time being if you use npm5 you can specify package.json entry as:\n\"react-datepicker\": \"Andarist/react-datepicker#fix/deps\"\nIt will build this project correctly inside of your node_modules using its dev deps and all.. I forgot I've done this PR and I've added prepare script in my recent 'modern-build' PR. Closing this as it has already found its way to master. I'm not sure if I understood correctly. Were you able to fix the issue or is there an issue with the changes and the fix is needed?. Sure, could you describe the issue in more details? That would get me starting sooner.. That's probably the case, gonna look into it soon.. Seems ok, dont know what are your plans for circleCI though.. see https://docs.npmjs.com/misc/scripts#deprecation-note\n+ https://github.com/npm/npm/releases/tag/v5.0.0\n\nGit dependencies with prepare scripts will have their devDependencies installed, and npm install run in their directory before being packed.. truth to be told it is a little messy - in general the answer is yes, if you have certainty that you won't use by accident npm older than v4 when publishing, because then without a prepublish script you might publish broken package, because it wont recognize prepare script, it has happened to me (other collaborator on the package I maintain had npm3 and he had published by accident broken package), that's why I have added simple guard in my projects for the time being:\n\"prepublish\": \"test $(npm -v | tr . '\\\\n' | head -n 1) -ge '4' || exit 1\",\n\nnpm still warns me that prepublish is deprecated and I should migrate to prepare, but at least it will prevent broken publications\n. this MODULES env variable should be removed when you upgrade your webpack (should be fairly easy, just following migration guides, but I didnt have time to do that). ",
    "hellojebus": "I was also having this issue with 0.57, production build handled by Netlify.\nDowngraded to 0.56 to temporarily fix this issue.. 0.58 is working! Thanks! . ",
    "bavicj": "@martijnrusschen works for me as well. ",
    "oskar-skuteli": "Unfortunatelty v0.58 has a https://github.com/Hacker0x01/react-datepicker/issues/1003 problem again.\n. @Andarist I will try to provide a sample project as soon as possible.\nIt's a react-boilerplate app with webpack v2.1.0-beta.25 and HMR\nThe OnClickOutside plugin either causes Uglify error when building production (v0.57 of react-datepicker) OR fails in runtime with (0 , _reactOnclickoutside2.default) is not a function like in https://github.com/Hacker0x01/react-datepicker/issues/975 in v0.56 and v0.58\nAny help will be greatly appreciated.\n. Guys, thanks a lot for prompt reaction.\nHowever I still can't import the datepicker correctly in my environment. \nFrom what I see onClickOutside doesn't get the _esModule property set to true, so it's being wrapped by _interopRequireDefault and becomes unusable. \n@Andarist do you have any idea what may be causing this? . I created a sample repository showing a problem. \nIt is based on react-boilerplate 3.2.0. \nI commited it with react-datepicker v0.57 which works ok in dev mode, but as we know doesn't compile with webpack's -p flag.\nWhen you bump datepickers version to v.058 or v0.59 and then npm install and npm start it will fail on react-onclickoutside plugin. \nAs far as I can see this is due to onClickOutside not being recognized as an esModule by webpack. But I can't figure out why it happens. \nhttps://github.com/oskar-skuteli/datepicker-react-boilerplate-test\nI need to add that I have a big project running in this webpack config with myriad of dependencies and there are no other problems with build.\nWhen manually deleting es folder and module entry from package.json of react-onclickoutside I have similar errors with react-popper (also datepickers dependency), which makes me think the problem may be with the way react-datepicker imports dependencies and not with react-onclickoutside itself.. ",
    "zslabs": "You'll probably want to run yarn in your PR branch so the yarn.lock file can be updated as well.. If you need it \u201cnow now\u201d then you could always just fork the repo with the change and add that as your dep instead - then check back in a few days.. ",
    "william57m": "Perfect, this need to be merged, I have some warnings because of that since I updated my app to React 16, thanks.. ",
    "SpencerTorres": "I hope it gets merged sometime today. My production app is using a terrible hack that increased my app bundle from about 60 to 600kb. \nThanks for getting this PR submitted!. ",
    "bhldev": "The onclickoutside depends on Edge or other browsers and doesn't support IE https://github.com/Pomax/react-onclickoutside\nThe only workaround is to not use the onClickOutside handler and use say, blur and disregard the edge cases onClickOutside deals with... or use IE specific events https://stackoverflow.com/questions/3422754/problem-with-onblur-event-in-ie\nGood luck\n~B. Hello,\nYou need to surround your JSX in code block markup so it will show up and not be escaped in the browser\nThat said there are several values to set like selected, value, format and so on, try different combinations until it works for you... one combination that works particularly well is selected with a customInput input box's value if you want to manage state on your own\n~B. Hello,\nI got around this by passing in a \"selected\" value even if it is a custom moment, then using a custom input with a value of blank to show nothing\nCreate localized moment like this\nmoment().locale('fa')\n~B. ",
    "yannickneemaa": "Hi,\nYou can use   timeFormat=\"HH:mm\"\n. ",
    "KirillYoYo": "How to chage time to 24 format in window with choise time?\n\n. ",
    "as-abhinav": "Thanks a ton for super quick reply... Yes, it works now. ",
    "mitsuruog": "ah, gotcha. thanks!!. ",
    "mollynordh": "I have a date picker that does not close when the user is selecting a date, instead the user has to press a confirm button to pick a date and close it. But when a user is pressing escape the date is still selected. Instead I'd like it to act as if the picker has been dismissed and no date has been selected. . ",
    "blueshw": "using calendarClassName prop can be solved this problem!!!\nadd any className with z-index > 1. @skvale \nthank you for your answer.\nbut, can overflow property set value of show?\nis it better? \noverflow: initial;\nit also works well. . ",
    "crismethods": "@firec0der the second link is broken. ",
    "anthonyLukes": "I have the same issue. https://codesandbox.io/s/pkx0qwzlm7 My guess is that this is a limitation from using popper.js vs. Tether.. ",
    "skvale": "I forked that and added\n~overflow: show;~\ncss\noverflow: visible;\nto the modal\nhttps://codesandbox.io/s/pylqqj0y27. @blueshw Yeah show is not a valid option for overflow\nvisible is what I was looking for.  Using initial and visible are the same, the initial value of overflow is visible . ",
    "wonskarol": "It's not exactly related to overflow: hidden. \nI ran into similar issue as @blueshw with my custom modal. \nI build a PoC: https://codepen.io/anon/pen/rpNeVW?editors=1111\nIf you add position: relative it breaks. \nIt would be nice if popper.js could provide something similar to Tether: attach popper into body.. ",
    "LindAety": "Just found that there's a popperClassname prop - that's the answer to my question ;) Closing!. ",
    "cbll": "I have no processor/loader for css.\nI've looked at the scss source but it's a bit difficult to figure out how it would look in typestyle or just regular non-minified css.. Not sure what you mean, it outputs CSS in the end similarly to scss/sass. Yes, the reason is i'm on a major project and with the tech setup, it's not possible to just load pure css in the structure(to maintain consistency/development workflow).\nTechnical debt, and all that jazz :) . ",
    "whereyoufindthis": "Experience the same problem, guys. ",
    "Rahulkr204": "I am not even getting the time section.\n\n\n. @orx0r Added your fix to my code, still struggling with problem. Can you share your code snippet of DatePicker component used ?. ",
    "matong1745": "I got the same problem TimeSelect is not working. Even upgrade to the ver. 0.60.0. ",
    "vvbvargas": "@orx0r works like a charm, thank you!!!. ",
    "oldmill1": "@orx0r Perfect!!. ",
    "bskinny129": "The temp fix helped on desktop, but mobile looks like this:\n\n. @willm Thank you, that really helped!\nIn case it helps anyone, here is my complete settings that I tried to optimize for mobile (doesn't pop up keyboard and is a little smaller to consistently fit on the screen):\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n                      padding-left: unset;\n                      padding-right: unset;\n                      width: 100px;\n}\n.react-datepicker__input-container, .react-datepicker-wrapper {\n                      width:100%;\n}\n.react-datepicker {\n                      width: 314px;\n}\n.react-datepicker .react-datepicker__day {\n                line-height: 1.4rem;\n                margin: .1rem 0.166rem;\n}\n.react-datepicker .react-datepicker__day-name {\n                line-height: 1rem;\n}\n<DatePicker autoFocus readOnly popperPlacement=\"bottom-start\" \n       popperModifiers={{\n              offset: {\n                enabled: true,\n                offset: '0px, 12px'\n              },\n              preventOverflow: {\n                enabled: true,\n                escapeWithReference: false, \n                boundariesElement: 'viewport'\n              }\n            }}\n        shouldCloseOnSelect={false} selected={this.state.tempDate} onChange={this.datePickerChanged} \n        dateFormat=\"M/D/YY h:mm a\" timeIntervals={15} timeFormat=\"h:mm a\" showTimeSelect />\n. ",
    "willm": "@bskinny129 I did this to make it work on smaller screens (probably not very elegant, but it worked)\n```css\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n        padding-left: unset;\n        padding-right: unset;\n        width: 100px;\n}\n.react-datepicker__input-container {\n        width:100%;\n}\n.react-datepicker-wrapper {\n        width:100%;\n}\n.react-datepicker {\n        width: 314px;\n}. ",
    "flameddd": "@orx0r and all others guys \nthanks all of you to save my days :)\nfor anyone who use styled-component solution\naccording @orx0r sol for ref\n```javascipt\nconst FixDatePickerTimer = styled.span& .react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n    padding-left: unset;\n    padding-right: unset;\n    width: 100px;\n  }\n  & .react-datepicker__input-container {\n    width:100%;\n  }\n  & .react-datepicker-wrapper {\n    width:100%;\n  }\n  & .react-datepicker {\n    width: 314px;\n  };\n.....\n\n\n\n```. ",
    "hnineitpm": "@orx0r thank you! it work now . ",
    "Ky6uk": "Agree. That was breaking change.. @OHaidukova this isn't looking at react-datepicker's issue. It looks you have no installed peer dependencies of react and react-dom at all. Try to install those dependencies first.. @OHaidukova those packages may not been installed still. Try to run npm install react react-dom.\nThis message also not an error. Just warning about possible problems.. What do you mean \"doesn't work\"? Can you provide an error or some details? It's working fine for latest react in my project.. ",
    "timfisher": "Please see https://github.com/Hacker0x01/react-datepicker/issues/491. ",
    "pixelhijack": "@timfisher it does not solve my issue, i also pass a moment() object: if i give it directly, it works, if i pass a moment() object as prop, it doesn't. . The issue corresponds to https://github.com/Hacker0x01/react-datepicker/issues/862 and a workout i used is to use a react class component instead of a stateless function as react-datepicker needs an internal state. The downside is that this way the external redux state and the internal this.state.startDate, etc needs to be reconciled somehow, but this is the question of controlled forms and redux which redux-forms answers for example. . ",
    "jamessral": "I just ran into the same thing, but if you use moment to parse your date back into a moment object, it works.\nExample:\n<DatePicker\n  className={styles.datePicker}\n  selected={moment(this.props.endDate)}\n  onChange={this.handleChangeEnd}\n/>. A lot of the moment methods return the date string (and are no longer an object). ",
    "johnsonsamuel": "I am getting the same error. Is there any specific format we need to pass as prop ? Cant we use it without moment? Help needed.. ",
    "Mursh": "Just found the solution for my project. Share it here if it can help :\n<DatePicker\n    selected={(this.props.myDate !== \")?moment(this.props.myDate, 'YOURFORMAT'):moment()}\n    value={(this.props.myDate !== \")?moment(this.props.myDate, 'YOURFORMAT'):\"\"}\n    dateFormat=\"YOURFORMAT\"\n    onChange={onDateChange}\n/>\nWeird but works.... ",
    "bamne123": "This may help\n`\nimport React from 'react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\n// CSS Modules, react-datepicker-cssmodules.css\n// import 'react-datepicker/dist/react-datepicker-cssmodules.css';\nclass Example extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            startDate: moment()\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\nhandleChange(date) {\n    this.setState({\n        startDate: date\n    });\n}\n\nrender() {\n    return <DatePicker\n        selected={this.state.startDate}\n        onChange={this.handleChange}\n    />;\n}\n\n}`. ",
    "harunkelesoglu": "But when i can not e.target.id or name when i try access changed input.How can i access to changing date input?. ",
    "GrzegorzBrdej": "Hi, I would like to see such feature too.\nAlso it would be good to parameterized number of years added to list when clicking on arrows.. ",
    "desmondgong": "The year dropdown is really a terrible user experience, can we make the arrows more flexible to switch the year list, rather than only 1 year per click.. ",
    "shmilyoo": "you can use minDate and maxDate to achieve this purpose,see https://reactdatepicker.com/#example-35\n. you can use minDate and maxDate to achieve this purpose,see https://reactdatepicker.com/#example-35. +1 \nminDate={new Date(new Date().setHours(0, 0, 0, 0))}\n maxDate={new Date(new Date().setHours(12, 0, 0, 0))}\nthe property above is of no effect. I want user can only select time betten 00:00 and 12:00.. ",
    "downzer0": "I guess this isn't really an issue since there is data on load. Will close.. ",
    "manishbhatt94": "@martijnrusschen please have a look at this feature request!. ",
    "mathiasha": "I am looking for this feature too.\nI want to set the minTime to be 6 hours in the future.\nI tried this minTime={moment().add(6, \"hours\")}, but it didn't seem to do what I was expecting.\n. ",
    "justinkahrs": "I'm coming across this as well. Any ideas how to manipulate the value of the time if the user didn't select one? It doesn't seem to care what the 'minTime' is, it will always default to 12:00am.. ",
    "mmcshinsky": "I would create a function that utilizes the excludeTimes parameter combined with your onChange event and/or selected parameter. If selected date === today's date then your excludeTimes will be an array of interval times you do not want displayed for this date. This function would have to run every time a date is selected on your onChange event and return null or and empty array when any other date other than the desired date is selected.\nNote: This is untested but should in theory work. \ud83d\ude04 . ",
    "GavinThomas1192": "+1 on this bug, same issue for me.. ",
    "fabiosangregorio": "I solved this issue by rounding the minTime and maxTime to the nearest timeIntervals slot.\nI think @mrchief 's issue is that the now time is not one of the timeIntervals (example: if now = \"8:43\" it's not in the time intervals [8:45, 9:00])\nExample:\n```\n// Rounds datepicker's time to the nearest 15 minute interval\nround = (date, duration, method) => {\n  duration = duration || moment.duration(15, 'minutes');\n  method = method || 'floor';\n  return moment(Mathmethod * (+duration));\n}\nrender() {\n  const startDate = this.state.startDate;\n  const now = moment();\nconst startDPConf = {\n    minDate: now,\n    showTimeSelect: true,\n    timeFormat: \"HH:mm\",\n    timeIntervals: 15,\n    dateFormat: format\n  }\nif (startDate.isSame(now, 'day')) {\n    startDPConf.minTime = this.round(now, 15, 'ceil');\n    startDPConf.maxTime = this.round(now.clone().endOf('day'));\n  }\n\n}\n```. @charlesmarino  you can check if the selected date is the same of today, and if that is the case you can set the min/max time. I updated the previous comment with the code to do that.. @Valerika here's a quick demo of it https://codepen.io/fabiosang/pen/PVyMJd?editors=0011. +1 on this fix\n. ",
    "charlesmarino": "@fabiosangregorio The issue is that if you choose another date, the time is sticky. So if it's 1 pm, you can't see dates before 1 pm. Not only today but everyday. \nStill a bug with no solutions on here. Wooooo!. ",
    "Valerika": "@fabiosangregorio Hi! This is not worked for me ((\n.  @fabiosangregorio Thanks!!!!!!!!!! . @fabiosangregorio  ((((\n\nand no open DatePicker\n. \n. \nstate = {\n            startDate: moment()\n      }\n. @fabiosangregorio This is due to the version, I lowered the version to 1.4.1 and it works\nThanks!. I'm having the same error (((. @JackHull @Shaker-Hamdi  This is due to the version, I lowered the version to 1.4.1 and it works. use dd/MM/YYYY. ",
    "a-eid": "@aij Yes the other components are react-select \nany chance you can help me out?. ",
    "ishtiaque05": "The issue is solved after upgrading for reactjs version 16. Thanks. ",
    "mattpage": "+1 this is a pain. The value in selected should receive the dateFormat prop. I am not able to find a workaround for supplying a moment object to selected and have it display initially in the correct format. In my case, I have dateFormat set to 'lll'. \nThis does not work for me:\n<DatePicker\n    selected={moment(\"12-25-1995\", \"MM-DD-YYYY\")}\n    onChange={this.handleChange}\n    dateFormat=\"LLL\"\n/>\nThe initial date is not displayed in LLL format.. ",
    "mhogryd": "Same problem here, sadly. Has anyone found a workaround for this?. Never mind, I think I had a different problem. I had assumed the input date string would be initially formatted based on \"dateFormat\", but that doesn't appear to be the case. I'm formatting the date string when the rest of the form data is prepared and that seems to work fine.. ",
    "euZebe": "A few investigation later, I think this is a regression which happened at version 0.46.0.. ",
    "JeffLoo-ong": "I have a similar issue were stuffing it into a bootstrap column causes loss of styling. \nreact-datepicker: 0.61.0\nbootstrap 4.0.0-alpha.6\nAlso running with Typescript if that matters.. ",
    "naishe": "I still have the same issue, when Col is small enough to not fit the Popper the time selector wrap at the bottom like the image shown.\n\"bootstrap\": \"^4.1.3\",\n\"react-datepicker\": \"^1.8.0\",\n\n. ",
    "pdanem": "A workaround that worked for me was to set the following in CSS:\ncss\n.react-datepicker-popper {\n    width: max-content;\n}. ",
    "keawade": "This occurs for me when pasting input or manually typing input.. @chrisjpatty's work around does not resolve the issue for me. If I manually enter a date and then clear it by setting the value of the moment variable to null, the value is cleared but the text stays in the input field.\nThe workaround just changes the steps taken to set the value to null. Calling the clear function just passes null to the component's update function which calls my update function instead of just calling my update function directly.. ",
    "bikerp": "I'm facing the same issue as keawade. Thanks for the fix.. ",
    "chrisjpatty": "Also facing this issue. Is there a function to manually clear the input in the meantime?. I answered my own question, and it may help someone else. After looking through the code it looks like you can manually call the clear function that gets called when you click on the clear button. \nFirst, add a reference to the DatePicker component\njsx\n<DatePicker ref={datePicker => this.datePicker = datePicker} />\nThen you can access the function by calling:\njsx\nsomeMemberFunction = (e) => {\n    this.datePicker.onClearClick(e)\n}\nThis should clear the input. \nNote: You do have to pass an event object to this function or it will crash while trying to call e.preventDefault(). If you don't have an event object I suppose you could synthesize one by passing an object like so: this.datePicker.onClearClick({preventDefault: () => {}})\nHopefully that helps in the meantime while the maintainers get around to looking at this and related issues. . Also I just added a test for the clear() function. To be honest, writing tests isn't my strong point at the moment so hopefully I did it right. ;). Sort of, there's always an edge case where a truthy value was passed in as a parameter but it's not actually a valid event object. This just covers that case by first checking if the parameter was defined, then if it has the function you're attempting to call before calling it. Could probably be accomplished in a different way if you have an idea to revise it. . Yeah so the way I'm using it is by setting a ref on the Datepicker component like so:\njsx\nrender(){\n    return(\n        <DatePicker ref={datePicker => {this.datePicker = datePicker}} />\n    )\n}\nand then I'm calling the clear function in a member method:\njsx\nsomeMemberMethod = () => {\n    this.datePicker.clear()\n}\nThis can currently be accomplished by setting the ref and calling this.onClearClick() but a method just called clear() seemed more appropriate for a method intended to be part of the public API. . ",
    "DamPe88": "Hi @rafeememon ,\nIt works. But can we have something like this?.\nselected={moment(data.meta.deadline) || moment()}\nif there is no data then show the current date.Something like that.\nThanks . Any help on this. ",
    "nicsptl": "I might be wrong, but its working for me, as I provide moment() on this.state.selected and if database return any value initialize with value in componentDidMount() with other initialization.  Or you can try following\nthis.state = {\nselected: ((data.meta.deadline)? moment(data.meta.deadline): moment())\n}\n\n. ",
    "tamouse": "The fix #1169 does keep the picker open until the time is selected, however, it fires onChange when the user selects a date and when the user selects a time, i.e. 2 events are fired. Can we have a single onChange event, please?. ",
    "magestican": "I need this feature as well :(. ",
    "AndreevskiAleksandar": "Any solution for this?. ",
    "mikael-johansson": "I get the same errors.\nreact 16, react-datepicker 1.2.1, react-popper 0.8.2\n. ",
    "danantal": "Any news on this?. ",
    "rmilejcz": "duh this isn't compatible with React16, anyone who reads this just use React15 instead.\nYou can close.. Nvm, still get error module is undefined. I have other packages via unpkg that use CommonJS and they work fine so not sure if this issue is with your config or with unpkg.. ",
    "lmichailian": "@Bobvantpadje You resolved this ?\n@Hacker0x01 any hint ?. ",
    "Bobvantpadje": "@lmichailian Nope.. I'm using another datepicker now. ",
    "ketysek": "Scroll position of the year picker is really not user friendly now ... \ud83d\udc4e I'm facing the same issue.. ",
    "jordenstuder": "Has there been any progress on this? . ",
    "abhilashdk2016": "Hi Even I am facing the same issue.\nI have the below webpack.config.js file :\n```\nmodule.exports = {\nentry: \"./Scripts/src/index.tsx\",\noutput: {\n    filename: \"./wwwroot/Scripts/dist/bundle.js\",\n},\n\n// Enable sourcemaps for debugging webpack's output.\ndevtool: \"source-map\",\n\nresolve: {\n    // Add '.ts' and '.tsx' as resolvable extensions.\n    extensions: [\".scss\",\".css\", \".webpack.js\", \".web.js\", \".ts\", \".tsx\", \".js\"]\n},\nmodule: {\n    rules: [\n        // All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.\n        { test: /\\.tsx?$/, loader: \"ts-loader\" },\n      {\n  test: /\\.s?css$/,\n  use: [\n    { loader: 'style-loader' },\n    {\n      loader: 'typings-for-css-modules-loader',\n      options: {\n        sass: false,\n        modules: true,\n        camelCase: true,\n        importLoaders: 1,\n        namedExport: true,\n        localIdentName: '[name]__[local]__[hash:base64:5]',\n      }\n    },\n\n  ]\n},\n      {\n        test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n        loader: require.resolve('url-loader'),\n        options: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]',\n        },\n      },\n      { test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, use: 'file-loader?&name=fonts/[name].[ext]' },\n      { test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, use: 'url-loader?limit=10000&mimetype=application/font-woff&name=fonts/[name].[ext]' },\n      { test: /\\.[ot]tf(\\?v=\\d+.\\d+.\\d+)?$/, use: 'url-loader?limit=10000&mimetype=application/octet-stream&name=fonts/[name].[ext]' },\n      { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/, use: 'url-loader?limit=10000&mimetype=image/svg+xml&name=images/[name].[ext]' },\n    ],\n}\n}\n\n```\nI have the below tsconfig.json file:\n{\n    \"compilerOptions\": {\n    \"outDir\": \"./Scripts/\",\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"jsx\": \"react\",\n    \"lib\": [ \"es5\", \"es6\", \"dom\" ]\n    },\n    \"exclude\": [\n    \"node_modules\",\n    \"wwwroot\"\n    ]\n  }\nMy Package.json looks like:\n{\n    \"name\": \"react-typescript-vs\",\n    \"version\": \"1.0.0\",\n    \"description\": \"React TypeScript VS 2017\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n      \"start\": \"webpack\"\n    },\n    \"keywords\": [\n      \"abhilash\",\n      \"react\",\n      \"typescript\",\n      \"vs2017\"\n    ],\n    \"author\": \"Abhilash D K\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n      \"react\": \"^16.2.0\",\n      \"react-dom\": \"^16.2.0\",\n      \"react-scripts-ts\": \"2.8.0\",\n      \"typed-css-modules-loader\": \"0.0.11\",\n      \"typescript\": \"^2.6.2\",\n      \"webpack\": \"^3.10.0\"\n    },\n    \"devDependencies\": {\n      \"@types/jest\": \"^21.1.8\",\n      \"@types/node\": \"^8.0.54\",\n      \"@types/react\": \"^16.0.27\",\n      \"@types/react-dom\": \"^16.0.3\",\n      \"autoprefixer\": \"7.1.6\",\n      \"case-sensitive-paths-webpack-plugin\": \"2.1.1\",\n      \"chalk\": \"1.1.3\",\n      \"css-loader\": \"0.28.7\",\n      \"dotenv\": \"4.0.0\",\n      \"eslint\": \"4.10.0\",\n      \"eslint-config-react-app\": \"^2.0.1\",\n      \"eslint-loader\": \"1.9.0\",\n      \"eslint-plugin-flowtype\": \"2.39.1\",\n      \"eslint-plugin-import\": \"2.8.0\",\n      \"eslint-plugin-jsx-a11y\": \"5.1.1\",\n      \"eslint-plugin-react\": \"7.4.0\",\n      \"extract-text-webpack-plugin\": \"3.0.2\",\n      \"file-loader\": \"1.1.5\",\n      \"fs-extra\": \"3.0.1\",\n      \"html-webpack-plugin\": \"2.29.0\",\n      \"jest\": \"20.0.4\",\n      \"object-assign\": \"4.1.1\",\n      \"postcss-flexbugs-fixes\": \"3.2.0\",\n      \"postcss-loader\": \"2.0.8\",\n      \"promise\": \"8.0.1\",\n      \"prop-types\": \"^15.6.0\",\n      \"radium\": \"^0.19.6\",\n      \"raf\": \"3.4.0\",\n      \"react\": \"^16.1.0\",\n      \"react-dev-utils\": \"^4.2.1\",\n      \"react-dom\": \"^16.1.0\",\n      \"sass-loader\": \"^6.0.6\",\n      \"source-map-loader\": \"^0.2.3\",\n      \"style-loader\": \"0.19.0\",\n      \"sw-precache-webpack-plugin\": \"0.11.4\",\n      \"ts-loader\": \"^3.2.0\",\n      \"typings-for-css-modules-loader\": \"^1.7.0\",\n      \"url-loader\": \"0.6.2\",\n      \"webpack-manifest-plugin\": \"1.3.2\",\n      \"whatwg-fetch\": \"2.0.3\"\n    }\n    }\nI have a Scripts/src folder. Under which I have a components folder with Hello.tsx with below content :\nimport * as React from \"react\";\n    export interface IHelloProps {\n        text: string;\n    }\n    export class Hello extends React.Component<IHelloProps, {}> {\n        render() {\n            return(<div>{this.props.text}</div>);\n        }\n    }\nUnder Scripts/src folder I have a index.tsx file with below content:\n```\n    import * as React from \"react\";\n    import * as ReactDOM from \"react-dom\";\n    import { Hello } from \"./components/Hello\";\nReactDOM.render(\n    <div>\n        <Hello text=\"Hello from React Typescript....\" />\n    </div>,\n    document.getElementById('app')\n);\n\n```\nEverything works fine. Now I will add Hello.css file with .textColor { color: azure } as it's content and i don't even use it. When I run webpack and try to access index.html I get the below error :\nUncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\nI tried adding module: commonjs as well as module : es6 to tsconfig.json. Still same error.\nCould somebody explain me what is the problem and give me a solution for the same.\nThanks in Advance.\n. ",
    "carlostxm": "Hi,\nI'm having the same issue too. In my case I'm using Jest + Enzyme. Any clue to solve it?\nThanks.. In our application we are experiencing the same problem, it's a little confusing when you don't know what is happening.. Changing import to const DatePicker = require('react-datepicker'); worked for me and I can launch tests using jest + enzyme. \nHowever, with this change the application cannot launch and now I'm getting this error in the console:\n\nReact.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\n. ",
    "CallidusAsinus": "I'm experiencing the same issue. I see this error when building with webpack, specifically when using the following in the plugins array: new webpack.optimize.ModuleConcatenationPlugin(). When I remove that plugin, everything works just fine. I believe this plugin is added automatically when the config's mode is set to \"production\"\n. ",
    "eshugoel24": "Anyone have any update on this issue. Still i am facing the same issue. ",
    "Jerczu": "So far I found only one solution to that problem, well two. jest.mock and ignore the component or edit the index.js and where modules.exports = DatePicker is add modules.exports.default = DatePicker if anyone figured out how to do it better way let me know I need that functionality in my tests!. ",
    "vtaits": "It works.\n<DatePicker id=\"abc\" />\nMaybe problem in \"for\" attribute that should be replaced with \"htmlFor\" in jsx?. I have same problem. As temporal fix you can provide onSelect property that\nduplicate of onChange.\n```\n    if (!isSameDay(this.props.selected, changedDate) || this.props.allowSameDay) {\n      if (changedDate !== null) {\n        if (this.props.selected) {\n          changedDate = setTime(newDate(changedDate), {\n            hour: getHour(this.props.selected),\n            minute: getMinute(this.props.selected),\n            second: getSecond(this.props.selected)\n          }) // <------- bug, i need to receive time from new date instead of old selected date\n        }\n        this.setState({\n          preSelection: changedDate\n        })\n      }\n      this.props.onChange(changedDate, event) // <--------- fires only if day changed\n    }\nthis.props.onSelect(changedDate, event) // <--------- fires always\n\n``. No, it is notplaceholderText, it is value from [react-input-mask](https://www.npmjs.com/package/react-input-mask).react-datepickerdon't provides native mask therefore i need to use other libraries. Of course, i can create proxy-component for prevent callingonChange` with placeholder-like value.\nBut there is 2nd issue: i need to reset value of datepicker for any invalid date in input, but now it resets only for empty value in input.\n\n. No, \"2nd issue\" is not related to react-input-mask. I try showing next state:\n- input value is \"03/16/\" (invalid);\n- datepicker value is Fri Mar 16 2018 ... (doesn't match current input value).. ",
    "vrinceanuv": "it is \"htmlFor\", will have a look. Thanks. ",
    "lewisdiamond": "@aij I disagree. Adding customInputRef just adds more flexibility, you can even wrap your custom input in a component (e.g. that does styling) without having to worry about the input API every time.. customInput already exists except it's limited to only class components because of the ref prop. ref isn't accessible from within the component, it's removed by React. ref is the only property like that.\nNot only that, it also forces you to re-implement the API even if it's already provided by another child component.\nhttps://reactjs.org/docs/refs-and-the-dom.html#exposing-dom-refs-to-parent-components. Oh sorry I thought the next version was 0.60.2.\nNo 0.61.0 doesn't fix it, it's the very latest commit I'm looking for: f49251167b6f0fb9cb356736cf4dbac0247856f1. Thanks.. ",
    "jwm0": "@lewisdiamond Can I see an example of how it's supposed to be done using material-ui TextField?\nEdit: nevermind, found the docs => change customInputRef's default value (\"ref\") to \"inputRef\". ",
    "mhluska": "For those wondering, the solution was to use the fixedHeight prop`.. ",
    "sabina4": "@aij yes react-select. ",
    "flaurida": "Never mind, I realized I had to pass the onClick prop from the parent.. ",
    "lejoss": "hi, thanks for the libray, i'm trying to change color of selected day, i notice the react-datepicker.css under /dist, and also sass files. i tried to copy the datepicker's stylesheet and add some changes, then i tried to import it in my code, but it's not working.\nwhats the process for changing the color of selected day? @flaurida @alex-shamshurin . ",
    "yangtheng": "The example does not use a custom input. I have just tried removing the custom input from my own component and selected=null works. However, why does it not work with custom input?\nAnyway, this is the component I am using for the customInput prop:\nclass CustomDatePicker extends Component {\n  render () {\n    return (\n      <span\n        key='datePicker'\n        onClick={this.props.onClick}>\n        {this.props.value}\n      </span>\n    )\n  }\n}\nI was just following the example from https://hacker0x01.github.io/react-datepicker/ but with span instead because I do not want a button.. Okay, it works after I change it to a button and removed the borders and set background as transparent. Works fine for me for now (does not look like a button). It will be good if the custom input works reliably for a variety of elements.. ",
    "anikakalbrun": "After refactoring this code is now working for me.\n```\nexport default class DateFieldWithIcon extends Component {\nstatic propTypes = {\n    input: shape({\n        onChange: func,\n        value: string,\n    }).isRequired,\n    meta: shape({\n        touched: bool,\n        error: string,\n    }).isRequired,\n    placeholder: string,\n    disabled: bool,\n    maxDate: string,\n    minDate: string\n};\n\nstate = {\n    selectedDate: moment(this.props.input.value),\n};\n\nonChange = (date, v) => {\n    this.setState({selectedDate: date,});\n    const { input, meta: { onChange } } = this.props;\n    if (onChange && typeof onChange === 'function') {\n        onChange(date, v, input);\n    }\n};\n\nonBlur = (date) => {\n    const { input } = this.props;\n    input.onBlur(date, input);\n};\n\nrender() {\n    const {label, placeholder, disabled, maxDate, minDate, meta: {touched, error}} = this.props;\n\n    return (\n        <div>\n            <label>{label}:</label>\n            <div>\n                <DatePicker selected={this.state.selectedDate}\n                            onChange={this.onChange}\n                            onBlur={this.onBlur}\n                            className=\"form-control index1 darkColor\"\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            placeholderText={placeholder}\n                            disabled={disabled}\n                />\n                {touched && error && <label className=\"error\">{label} {error}</label>}\n            </div>\n        </div>\n    );\n}\n\n}\n```\nThanks for help.. ",
    "Tsvetkovv": "IE dies when it happening.\n\n. ",
    "rjanot": "the \"hack\" we have found is to use the ref of the first DatePicker and call setOpen(false) on it, before giving focus to the second DatePicker. ",
    "Grinv": "@alex-shamshurin of course.\nI need the ability to edit the date from two places: input and calendar. But calendar hasn't to be popper. it always be visible. I changed styles for it:\ncss\n.react-datepicker-popper {\n   position: relative !important;\n   transform: inherit !important;\n}\nWhen I call component with startOpen prop. it's helps for first run, but when I click outside, calendar hides. I don't know how to cancel this behavior. Calendar always has to be visible,\nP.S. I attached the screenshot.\n\n. ",
    "Jmenache": "Yes, I'll try to.. It is resolved.. ",
    "juhana": "A workaround is to parse the value with onChangeRaw and call onChange manually.\n```\n\nhandleInputChangeRaw = e => {\n  const date = moment( e.target.value, \"YYYY-MM-DD HH:mm\" );\nif( date.isValid() ) {\n    this.handleInputChange( date );\n  }\n}\n```. A temporary fix is to add this CSS:\nul.react-datepicker__time-list {\n    padding: 0;\n}. ",
    "marioramva": "On reference to Issue #1183 . I don't know how to perform tests on this project. \nI've imported it to my React project and the changes work as expected.\nHow can I test on this project?. This is my CSS customized version of the plugin:\n\nAnd this is the month dropdown with short month names:\n\n. ",
    "nassimbenkirane": "Hi @aij, thanks for the answer \ud83d\udc4d\nUsing a span would work indeed, but it would remove the ability to clear the input with the keyboard \ud83e\udd14  Meaning it would be a regression...\nAlternatively, a <button type='button' /> also works, do you think it's better than the <a href /> ?\nAlso, I like the fact that we are able to style the close button on focus (.react-datepicker__close-icon:focus) \nWhat do you think ?\n. Thanks a lot for your reactivity !. ",
    "robbporto": "Same here.. ",
    "smtaydemir": "+1. ",
    "klis87": "Actually moment imports all locales as the default, and I import only en-gb and pl by webpack config: new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /en-gb|pl/),\nLocale works fine, it is imported and translates everything correctly, the only problem is that DatePicker doesnt rerender when ONLY locale prop is changed - after any other prop like selected is changed, suddenly new locale is picked up. This issue is only for inline calendars.. Very nice idea, I also need this to show some tooltips for given dates, with custom renderer this would be trivial.. ",
    "cheton": "Same to me with the following setup:\njsx\n<DatePicker\n    inline\n    locale={locale}\n/>\nIf I change the locale prop, it won't update current translation, unless I change the selected date with mouse click or update the \"selected\" prop.. ",
    "patfrat": "Same problem by my side, the locale text changes when choosing another date only !\nIt seems that the locale change is not listened by the DatePicker Component. ",
    "listatt": "Same issue for inline calendar\n. ",
    "Dean177": "A bit of a hack, but this is a quick fix:\n<DatePicker\n  inline={true}\n  key={locale}\n  locale={locale}\n/>. ",
    "jontrainor": "closed this pr because it referred to the wrong issue and opened a new one. is there any chance this can be released in a new tag soon? thanks!. ",
    "stilllife00": "I have found a different approach that works, not sure it is the best though.\nNote that the 'input' property comes from redux-form so it is not strictly related with this library. \nI keep it there to illustrate a working scenario.\n````\n// component MyComp\nconst DATE_EU_FORMAT = 'dd/mm/yyyy'\n {\n       input.onChange(moment(date).format(DATE_EU_FORMAT))\n   }} />\n// test\nit('tests the onChange callback', () => {\nlet newDate = null\nconst props = {\n     input: {\n          value: '26/01/2018',\n          onChange: (stringEUDate) => {\n                newDate = stringEUDate\n          }\n     }\n}\nconst component = mount()\nconst pickerInput = component.find('DatePicker')\npickerInput.instance().props.onChange('2018-01-26')\nexpect(newDate).toBe('26/01/2018')\n})\n````. ",
    "Gazler": "This is because react-datepicker uses rem for sizing and bootstrap sets the font-size of html to 10px.\nA quick fix is:\ncss\nhtml {\n  font-size: 14px;\n}\n. ",
    "yanniser": "well done @Gazler. @hoodsy I think you should close this issue . I currently use this datePicker with Redux , it works well.\nIn fact I throw the redux actions in the onChange handler and that's it.\n<DatePicker\n            value={format(dateDeNaissance, 'DD/MM/YYYY')}\n            onChange={this.handleCalendarChange}\n            dateFormat=\"LLL\"\n   />\npublic handleCalendarChange  = (value) => {\n    this.setState({value: moment(value).toISOString(),})\n    this.props.dispatchChangeAction (value)\n  }\nDoes that answer your question ?. ",
    "renanlecaro": "Also happens on firefox on the demo site. ",
    "Hultner": "My team experience the same problem, I also found another issue about the same problem #1334 \nI experienced it in all browsers I had available when testing.. I have the same behaviour in all browsers I tested in. Listed below:\n\nChrome, Version 66.0.3359.117 (Official Build) (64-bit)\nSafari, Version 11.1 (13605.1.33.1.4)\n\nI also experience a similar issue but much slower flashing in\n- Firefox Quantum 59.0.2 (64-bit)\nIn addition to this my team member @Levis92 also experience the same issue. It seems crucial that it's the first thing you click, in addition to that it sometimes doesn't happen (about 1 in 10).\n. ",
    "kyptin": "Has the fix been deployed to the https://reactdatepicker.com/ site yet? Because I'm still seeing the behavior in both Chrome and Firefox (but only if my devtools are closed).. ",
    "Elson8080": "find startDate and endDate .... ",
    "jennyscript-ridecell": "Is there any additional work needed here before it can be merged? I see a few PRs have been merged by @mnikkane since I submitted this one, so please provide feedback if you'd like to see anything else here.\nI'd really like to use the datepicker on my company's application and we need this feature. Also, I've found some bugs I'd be happy to submit PRs for after this one.. ",
    "aimarjs": "Same here!. ",
    "wengkhing": "I experience this problem using mobile Chrome browser and also desktop Chrome with device mode on. Couldn't reproduce this problem at Firefox. I find that adding 'preventOpenOnFocus' to props will solve this problem\n<DatePicker\n      selected={props.startDate}\n      onChange={props.changeStartDate}\n      showTimeSelect\n      timeIntervals={30}\n      dateFormat=\"MM/DD/YY, hh:mm a\"\n      todayButton=\"Today\"\n      minDate={moment()}\n      readOnly\n      preventOpenOnFocus\n       />. ",
    "chandawarlokesh": "I have resolved this issue and already created PR #1400 \nUse of preventOpenOnFocus is not used that much if my requirement is related to the focus event like in the form after every field user generally used the tab to move next.. ",
    "maksimdegtyarev": "You can use setOpen(bool) method. Just set ref property to DatePicker component and call setOpen, for example:\ntoggle = () => {\n    this.component.setOpen(this.focus);\n    this.focus = !this.focus;\n}\n...\n<DatePicker\n  ref={(r) => {\n    this.component = r;\n  }}\n  autoFocus\n  selected={this.state.startDate}\n  onChange={this.handleChange}\n/>\n<button type=\"button\" onClick={() => this.toggle()}>toggle</button>. ",
    "sambitroy": "I added a custom input.\n customInput={}\nclass CustomInput extends React.Component {\n    render () {\n        return (\n            \n {return false;}} {...this.props.inputProps}/>\n            \n        )\n    }\n}\nThis works like a charm! Thanks for your help though. :) Closing this issue.. ",
    "nWidart": "any updates on this issue?. ",
    "bobysf12": "@nWidart I forgot what was the problem, but its blocking me. So I decided to use https://github.com/YouCanBookMe/react-datetime instead.. ",
    "KalachevDev": "Have the same issue.\n\n. ",
    "kylethornton": "@stasyaner @Sensetive64 I was able to fix this by setting the following css\n.react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow,\n.react-datepicker__year-read-view--down-arrow {\n  margin-left: -20px;\n  left: 20px;\n  top: 6px;\n}\nThis works for IE11, chrome, safari (and mobile safari) now. IE doesn't seem to respect the margin-left but does respect left. so I set left: 20px, which looks right in IE but way too far right in Chrome so setting margin-left: -20px offsets that for all other browsers. ",
    "ashvinramana": ".react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-year-read-view--down-arrow,\n.react-datepicker__year-read-view--down-arrow {\n    left: 20px;\n    top: 6px;\n}\n.react-datepicker__month-dropdown-container span{\n    margin-left: 20px;\n}\nAdd this css in only Internet Explorer css file or Internet Explorer media query.\n.react-datepicker__month-dropdown-container span{\n    margin-left: 20px;\n}\nIt will add margin between month and year.\nTry this it work's for me.. ",
    "rodriturnes": "Hi,\nI tested both v0.55.0 and v.1.0.4 and I the time panel DOES NOT get rendered! It opens the usual calendar but the time component is not visible (not even on the elements).\nDoes someone addresses the same issue?\nThanks!. I only get the \"react-datepicker__month-container\" rendered, but the \"react-datepicker__time-container\" does not.\nHelp, please!. ",
    "dananw": "\nnpm uninstall react-datepicker\n\nnpm install react-datepicker@1.0.4\n\n\nhave you restarted npm?\n\n\nin package.json what version are you using for react-datepicker?\n. @ArtemBernatskyy Thx for correction.. ",
    "littletower": "I'll try to take a look at it this week. Thanks. sorry I'm swamped... you can clean it.. ",
    "ManvendraSK": "Is there any progress on this part? I tried to use popperContainer prop, but don't know how to use it. all it says is to provide a function that returns, I think a React element. This is the code that does this https://github.com/Hacker0x01/react-datepicker/blob/9ddc73fb889f30cf4c7301ff95487ab5c16299c0/src/popper_component.jsx#L73 . ",
    "ArtemBernatskyy": "@dananw Can you update title of the issue with something like this Solved : the display is broken when inside bootstrap modal withPortal .\nIt will help to find it easier. Thx.. @mvenaas nope (. @markokosir the problem is in inconsistency.\nDate is the same but dateFormat differs from moment.js - which is very bad.. ",
    "cklab": "@martijnrusschen Sure. I'm not sure if there's a better way to create these tests other than creating the custom inputs necessary to provide the handleChange with the modified arguments. I'll throw something up and feel free to make additional suggestions.. see #1255 for fix on the failed test. @martijnrusschen I'm not sure how code coverage is detected as having gone down. The new code is fully covered from what I can tell. Showing an increase on local tests. Any insight?. ",
    "qpzm": "Did you run npm install(or yarn install) beforehand to install dependency?. ",
    "PeterKottas": "Btw, for now, I managed to fix it via inline flag, keeping open state in my component and adding my own onClickOutside to it. Hardly a great way and I am hoping for a better one as an outcome of this thread, but worst case, you can do this to achieve what I described. . ",
    "postal286": "Have the same issue. Want to move it left depends on input position. Someone know how to do that ?).\nThis params will help you: 'auto', 'auto-left', 'auto-right', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start'\nFound params in src. You need to pass one of this values to popperPlacement props to the DatePicker component like that - <DatePicker popperPlacement=\"bottom-end\" />. \nSomeone who knows how to contact with develop team tell them to update popperPlacement docs. It's not so clear to find this values. Thx.. ",
    "m-morisaki": "I'm so grateful for that!. ",
    "benjaminkniaz": "Unfortunately, placement does not work for me, nor does it work in the official examples. I would expect placement to force the popper to appear on the bottom, etc.. @robhadfield turns out you have to add a modifier to force the position. flip forces it not to flip even if the popper is going to be partially off-screen, and preventOverflow prevents it from covering the element you clicked, if again the popper detects the item will partially go off screen.\nThis is where I found the modifiers:\nhttps://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers..flip\n<DatePicker\n    selected={props.followup_complete_by_dt}\n    onChange={props.handleDueDateChange}\n    className=\"form-control\"\n    monthsShown={1}\n    popperPlacement=\"bottom\"\n    popperModifiers={{\n        flip: {\n            behavior: [\"bottom\"] // don't allow it to flip to be above\n        },\n        preventOverflow: {\n            enabled: false // tell it not to try to stay within the view (this prevents the popper from covering the element you clicked)\n        },\n        hide: {\n            enabled: false // turn off since needs preventOverflow to be enabled\n        }\n    }}\n/>. Great datepicker tool. I am running into this problem as well. My users can enter an invalid date manually and never know it. What I would like is for the manually entered date to be parsed if possible and reformatted in the input field for the user to see. If it can't be parsed, then the input value (and selected value) should be cleared. Other than this issue of manually entered dates, the datepicker is working well!. I've used the value property along with onChangeRaw and onBlur to achieve what I want (see below). Seems to work so far.\nIt would be great if this kind of thing could be included out-of-the-box. Looking around at other react date pickers, I don't see that they validate the manual entry either.\n```javascript\n\n        props.handleBegDateChangeRaw(event.target.value)\n    }\n    onBlur={e => props.handleBegDateBlur(e.target.value)}\n    placeholderText=\"MM/DD/YYYY\"\n    value={props.beg_inv_dt_display}\n/>\n// then in my controller ...\nhandleBegDateChange(date) {\n    if (date !== null) {\n        let dateFormat = date.format(\"MM/DD/YYYY\");\n        this.setState({ beg_inv_dt: date, beg_inv_dt_display: dateFormat });\n    }\n}\nhandleBegDateChangeRaw(value) {\n    this.setState({ beg_inv_dt_display: value });\n}\nhandleBegDateBlur(value) {\n    var date = moment(value, \"MM/DD/YYYY\");\n    if (date.isValid() === false) {\n        this.setState({\n            beg_inv_dt: null,\n            beg_inv_dt_display: \"\"\n        });\n    } else {\n        this.setState({\n            beg_inv_dt: date,\n            beg_inv_dt_display: date.format(\"MM/DD/YYYY\")\n        });\n    }\n}\n```. ",
    "robhadfield": "Yep - as @benjaminkniaz says it doesn't force the position. if I say top-start I would expect to force that position even if it's near the screen edge.. Thanks a lot @benjaminkniaz , I'll give that a go. I ended up reverting to a dialog which really ruins the flow.\nEDIT: @benjaminkniaz - worked perfectly, thanks!. Here's the settings that work for me:\n<Picker\n                showMonthDropdown\n                showYearDropdown\n                dropdownMode=\"select\"\n                dateFormat={ dateFormat }\n                minDate={ isDate(minDate) ? moment(minDate) : null }\n                maxDate={ isDate(maxDate) ? moment(maxDate) : null }\n                placeholderText={ placeholder }\n                selected={ date && isDate(date) ? moment(date) : initialDate }\n                onChange={ onChange }\n                disabled={ disabled }\n                withPortal={ withPortal ? true : false }\n                popperPlacement='bottom'\n                popperModifiers={{\n                    flip: {\n                        behavior: ['bottom'] // don't allow it to flip to be above\n                    },\n                    preventOverflow: {\n                        enabled: false // tell it not to try to stay within the view (this prevents the popper from covering the element you clicked)\n                    },\n                    hide: {\n                        enabled: false // turn off since needs preventOverflow to be enabled\n                    }\n                }}\n            />. ",
    "ryanlozon": "I'm still running into an issue where the popup appears off to the left. Any idea why it might be doing? \n\n\n. ",
    "robinwkurtz": "Also interested in this!\nThanks for a great tool. ",
    "crorodriguezro": "I need this aswell.  I could work on this if it doesn't exist already.. ",
    "theinvensi": "+1 me too... wanted this feature. ",
    "ghenrique": "Hi! I'm really interested in this feature too. I need this in the project I'm working on and I'm having to search for another tool to cover this functionality.. ",
    "jeanfs": "Amazing idea, this would be really helpful! =). ",
    "PauloRibeiro": "I'm interested in this feature too. ",
    "wolfuno1996": "yeah, i agreed. ",
    "sensone": "me too. ",
    "3mp3ri0r": "I need this feature. ",
    "CDimonaco": "I'm interested in this feature too :). ",
    "gregorianisch": "Interested too :) . ",
    "dogrultan": "+1. ",
    "nomanalikhan": "+1. ",
    "cleberpereiradasilva": "+1. ",
    "mobicity": "+1 @martijnrusschen @RSO . ",
    "SaifAsad": "Is there any updates on this ? this would be a really useful feature, it would also be awesome to be able to select 'year' only view, keen to help on this if required,. ",
    "almond-bongbong": "+1. ",
    "gautam-relayr": "Hello guys, I looked at this thread and it seems that there is a massive need of a month/year picker variation. So, I have started to work on something like this:\n\nThis is the 1st step towards month/year picker variation. I am planning to later extend it to Range month/year picker which is also needed. I have few ideas for the use cases but would like to hear from everyone else as well. It will help me to handle such use cases while I code for this.\nHoping for a positive response.\nCheers!!. It was because of the moment config(http://momentjs.com/docs/#/i18n/changing-locale/). We can change the starting day by calling the following:\nmoment.locale(LOCALE, {\n                week: {\n                    dow: 0  //Sunday is the first day of the week.\n                }\n            });. @martijnrusschen \ud83d\udc4d \nRebase done.. @martijnrusschen I will resolve the conflicts and will push again.\nThanks.. @martijnrusschen Can we merge this now?...also, How can I make the codecov/patch pass. I can't figure out much from the report. Can you please help me out.. @martijnrusschen Can we merge this if everything's fine. I have a use case like this in my current organization and need this variant of datepicker. Can you please take a look at this on priority.\nThanks.. Thanks @vanekt for reporting this issue. I will try to fix the issue as soon as possible.. ",
    "gothbarbie": "Add your own styling: \n.react-datepicker-popper {\n  z-index: 3;\n}. ",
    "MonkeyJumps": "This is not working for me. I have the following component configuration:\n<DatePicker value={this.props.value} onChange={this.handleChange} //onChangeRaw={this.handleChangeRaw}\n                        popperClassName=\"calendar-popout\"\n                        popperPlacement=\"top-end\"\n                        popperModifiers={{\n                            offset: {\n                                enabled: true,\n                                offset: '5px, 10px'\n                            },\n                            preventOverflow: {\n                                enabled: true,\n                                escapeWithReference: false, // force popper to stay in viewport (even when input is scrolled out of view)\n                                boundariesElement: 'viewport'\n                            }\n                        }}\n                        isClearable={true}\n                        customInput={<button type=\"button\" className=\"btn btn-default\" onClick={this.props.onClick}>\n                            <img src='/Content/images/calendar.png' title='Run Lookup' />\n                        </button>} />\n\nI set the z-index as suggest above and every other i can think of but the popout still renders under other components.. ",
    "combizs": "@MonkeyJumps, your style needs to be added in a stylesheet.\nAlso, it would help if you paste the code in a readable format, at least without comments if it's one-line.\nstyle.css\ncss\n.react-datepicker-popper {\n  z-index: 3;\n}\nfile.js\n```js\nimport React from 'react';\nimport DatePicker from 'react-datepicker';\nimport style.css\n...\n\n      {' '}\n      {' '}\n    \n  }\n/>\n...\n```. ",
    "AgentChris": "it almost work, the popper position is still a bit off, but great fix. still needs some work to be done, don't merge it. ",
    "mantoze": ".react-datepicker__day {\n  cursor: pointer;\n.........\n  &--weekend {\n    color: #7b7b7b;\n  }\n.........\n}. ",
    "avivdevalore": "Got It!\nthe mistake was in the way i import the locales from moment.\ninstead of :\nimport 'moment/locale/fa';\nit should be :\nimport 'moment/src/locale/fa';. Thanks @sarahmarciano.\ndid you changed the direction to RTL?\nif i add to the calendar 'direction: RTL' then it start from the right but then if i will change the locale back to English it will stay RTL and that is no good.. ",
    "jinkyaw": "You can do that from css as :psuedo element as :first-letter . ",
    "tcollins": "Did you ever find a work around for this?  I'm thinking maybe onBlur can be used to update the date-time from the input, but I haven't tried it yet.  . I am seeing a similar thing. After editing the input directly, which triggers the onChangeRaw method.  If I click on a day in the calendar, it works and actually gets everything working correctly again, but if I click on a different time, my state is updated, but the value displayed in the input is not updated and there is a disconnect between the state value vs the input value.\n. ",
    "tomtwttr": "I submitted this PR https://github.com/Hacker0x01/react-datepicker/pull/1289. I believe this was an issue on my side. Running this solved my issue.\nnpm config set registry https://registry.npmjs.org && npm config set _auth ''. Submitted https://github.com/Hacker0x01/react-datepicker/pull/1289. Fixed by https://github.com/Hacker0x01/react-datepicker/pull/1289. Yes, after thinking about it for quite some time blur is the only thing that seems to work. Hence https://github.com/Hacker0x01/react-datepicker/pull/1303. I think switching apps mid date picker input typing is an unlikely use case, so I bet it's okay to do this change. If we're super worried about it we could add a flag, but I don't think this use case is likely, and I think the bug it produces in this use-case  more likely.. @saward I believe I worked around this such that the date picker is never aware it's using UTC or other. AKA I have UTC UI indication at a higher level and I adjust moments based on UTC offset minute.. @saward I'm unsure TBH. After digging around with this quite a bit it felt like moment lib was more to blame (at least half to blame) rather than date picker. If you feel this is important I recommend submitting a pull request or opening up a new issue referencing this one.. Thank you very much for the feedback @aij and @martijnrusschen . For my use case I've been able to remove the need to use moment utc related info. I'm basically wrapping the DatePicker component with my own component and using a unix() based interface, therefore ignoring all of the weird moment zone related cases. In general it feels moment itself handles this a bit unexpectedly with the separate parsing functions. I will be closing this in favor for a small PR without any zone related changes.. Opened https://github.com/Hacker0x01/react-datepicker/pull/1303. Hey @aij, thanks for the feedback. I've updated the PR and I think this solution works nicely.. Reverted the version change as requested by @rafeememon . You're welcome. To be clear, I think this is correct. This was actually my addition in https://github.com/Hacker0x01/react-datepicker/commit/a72bc43be63a00f8719361256c18466df7c2fb58#diff-73642d587163f2eb4d72f0fa6ebfba02R375.\nBefore that change the time would not change at all. The reason is that the input state side effect ignores changes. Clearing the input state makes sense if you're selecting a time.. The is needed such that the same component will be used AKA componentWillReceiveProps. A TestUtils.renderIntoDocument will not work for that kind of test.. Is it possible to leave this and let this bump to 1.2.5? Internally here I published this version a private registry, and I don't know if I can overwrite this version with the one you guys do.. ",
    "star-collector": "If you use webpack to create your bundle, you can remove unused moment.js locales using context replacement plugin. This will decrease moment.js size by ~400KB.\nAdd something like this to your plugins option in webpack.config: \nnew webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /ru/)\n. ",
    "mrtrandinhvn": "I don't know where to put this but I'm using version 2.0.0 and this package still increase my bundle size from 8 KB to 147KB using webpack production build.. ",
    "stefansandulescu": "This would be really helpful.. ",
    "jsouthern-ngs": "@martijnrusschen. do you have an idea of when you'd push a release with the popper upgrade. we are working on an early march release that uses the picker. if you are waiting to compile more things into a release, we may go ahead and fork and update to meet this release date, and switch back when the next release is dropped.. understood. we aren't blocked. i realize we can fork and pull from your origin at anytime.. ",
    "chandan7193": "Did you find the solution for this problem? @tomstich \n. ",
    "sumit-meshmd": "facing the same issue.. ",
    "sarahmarciano": "hmm... interesting, I am also using this library and using locale='he' but the days are aligned well as you can see below\n\nbut I have another problem: the arrows are inverted, I mean when pressing on the arrow on the right I am moving to the next month, but in rtl layout this should move me to the previous month\nhas anyone have a solution?\n. yes, indeed I've changed the direction to RTL,\nwhat I can suggest you if you need your app to be flexible is to have two divs one with direction of rtl and one with direction of ltr and render the div depending on the locale direction\nyour code will look something like this: (I did not test this snippet of code but you got the idea...)\n```\nconst rtlLocales = [\n    'ae',   / Avestan /\n    'ar',   / '\u0627\u0644\u0639\u0631\u0628\u064a\u0629', Arabic /\n    'arc',  / Aramaic /\n    'bcc',  / '\u0628\u0644\u0648\u0686\u06cc \u0645\u06a9\u0631\u0627\u0646\u06cc', Southern Balochi /\n    'bqi',  / '\u0628\u062e\u062a\u064a\u0627\u0631\u064a', Bakthiari /\n    'ckb',  / 'Soran\u00ee / \u06a9\u0648\u0631\u062f\u06cc', Sorani /\n    'dv',   / Dhivehi /\n    'fa',   / '\u0641\u0627\u0631\u0633\u06cc', Persian /\n    'glk',  / '\u06af\u06cc\u0644\u06a9\u06cc', Gilaki /\n    'he',   / '\u05e2\u05d1\u05e8\u05d9\u05ea', Hebrew /\n    'ku',   / 'Kurd\u00ee / \u0643\u0648\u0631\u062f\u06cc', Kurdish /\n    'mzn',  / '\u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06cc', Mazanderani /\n    'nqo',  / N'Ko /\n    'pnb',  / '\u067e\u0646\u062c\u0627\u0628\u06cc', Western Punjabi /\n    'ps',   / '\u067e\u069a\u062a\u0648', Pashto, /\n    'sd',   / '\u0633\u0646\u068c\u064a', Sindhi /\n    'ug',   / 'Uyghurche / \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5', Uyghur /\n    'ur',   / '\u0627\u0631\u062f\u0648', Urdu /\n    'yi'    / '\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9', Yiddish /\n];\nfunction isLocaleRtl(locale) {\n    return rtlLocales.indexOf(locale.split('-')[0]) !== -1;\n}\nrender() {\n        const { locale } = this.props;\n        if (isLocaleRtl(locale)) {\n            return (\n                \n setEventDate(date)}\n                        locale={locale}\n                        minDate={moment()}\n                    />\n                \n            );\n        }\n        return (\n             setEventDate(date)}\n                locale={locale}\n                minDate={moment()}\n            />\n        );\n    }\n```. I also tried to find in moment.js a function that detect if a locale is rtl or ltr but I didn't find\ninstead you can maybe use this library: https://github.com/shadiabuhilal/rtl-detect\nor build your own util function and have something like this: https://stackoverflow.com/questions/4192382/is-there-any-way-to-detect-an-rtl-language-in-java. ",
    "efef10": "I have a problen with the keyboard arrows, when I press the left key, it acts as right. and vice versa...\ndoes anyone got a solution?\nThanks! . ",
    "nick-vanvynckt": "I'm having a similar problem with the state value not being in sync with the input value. I have a dropdown box next to my date range where you can choose from a couple presets. Once the user manually changes the input fields, the datepicker input value will no longer update to the correct value (although I can see the datepicker working correctly and selecting the correct date in the pop-up).. ",
    "dahliacreative": "I dunno if anyone needs this but I ran into the same issue, I was updated the selected day via a button, (have previous and next buttons which update state to add / subtract one day) and when you open the pop up the correct day was selected but the input still showed the old date.\nSo here is my solution, it's reeeeeeeeally dirty but it works:\nI add a ref to the picker then inside my functions where I update the state to the new date I do this\nthis.picker.setFocus()\nthis.picker.setOpen(false)\nthis.picker.refs.input.refs.input.blur()\nHope this can help someone else out, I've spent 3 hours trying to get a solution.. Sorry I've been on holiday!\nRight since I came up with method I figured out that the issue is if you add/subtract from the date then it won't update, e.g:\nnextDay = () => {\n  this.setState({\n    date: this.state.date.add(1,'d')\n  })\n}\nThe key is to use moment's clone method, then it will update properly:\nnextDay = () => {\n  this.setState({\n    date: this.state.date.clone().add(1,'d')\n  })\n}\nHope this helps, let me know if it does!. @karlkras your add params are the wrong way around should be .add(2, 'M'). @karlkras ok I have some time today I'll take a look and see if I can figure it out. Might be a hacky solution though. What version of the datepicker are you using?. I'm using an older version seems some of the refs have been removed on the new version.\nMy suggestion would be to validate the input value on blur.\nNot sure what else you can do, definitely seems like a bug though. Yeah, our product already had it so I didn't want to look for another one to use. You might want to give this one a go: http://react-day-picker.js.org/. ",
    "ivdma": "\n. ",
    "farahamawi": "Hi Have you come up with a solution for this\n. ",
    "wramp": "Same issue here:\nGetting console error on dev environment:\n'Unable to preventDefault inside passive event listener invocation.'\nWhen closing-of Portal version (clicking on black surrounding area)\n\nAny ideas?. Same for me, im using newest Chrome Version 66.0.3359.181 (Official Build) (64-bit), Win 10. I belive this was fixes in release v2.0.0\nhttps://github.com/Hacker0x01/react-datepicker/releases/tag/v2.0.0. ",
    "Thrajnor": "Same bug here: \n\nany ideas ? Could someone fix it? I really like this date picker!\n. ",
    "porsich": "HI folks, I just add autoFocus flag, and it fixes bug for me. ",
    "gromez": "\nHI folks, I just add autoFocus flag, and it fixes bug for me\n\nStill have the error with autoFocus flag. ",
    "NanoMeko": "fixed this issue by loading new exclude times specific to the day when the date is changed . ",
    "jamesattard": "Hey @NanoMeko care to share your code snippet? I am trying to achieve something similar.. ",
    "ilya-lopukhin": "Looking forward to see that too. ",
    "trevordmiller": "Ah yeah 382 looks great. Closing this in favor of that!. ",
    "yangxiaoyao1983": "i meet the same issue. . i modify it by follow:. find the file react-datepicker.css\n.react-datepicker__time-box {\n  width: 120px;\n  overflow-x: hidden;\n  margin: 0 auto;\n  text-align: center;\n  margin-left: -58px;\n}\n. ",
    "christiantakle": "I use an overwrite:\ncss\n.react-datepicker__time-list {\n  padding: 0;\n}\n\nDepending on the project you may need to add more specificity to the selector.. ",
    "kaitmore": "+1 also experiencing this issue. ",
    "apbendi": "I'm having this issue as well. Good call on the override @christiantakle!. ",
    "beshanoe": "Same here, it happens because the datepicker actually requires some kind of reset.css and it's included in styles on the examples page, but is not mentioned in docs at all. The style should either be included in the selector or there should be additional line in docs. @davegravy sure, here https://github.com/Hacker0x01/react-datepicker/blob/e052b4ad349c92670b63c0a19d69a6a5f1fb6396/docs-site/style.css#L727 starting from line 645 there's kinda reset styles, and specifically on 727 padding: 0 is what makes examples work. You can see it when inspect as well. ",
    "davegravy": "@beshanoe I'm looking at the examples page (aka the main site) and see no reference to styles or reset.css. Can you be more specific?. ",
    "hudsonpereira": "Is there a way to set style={} for DatePicker component?. ",
    "stevenkaspar": "You can use the customInput property to make this happen - at least it worked for my purposes\nhttps://github.com/Hacker0x01/react-datepicker/blob/e052b4ad349c92670b63c0a19d69a6a5f1fb6396/src/index.jsx#L573\n<DatePicker\n  selected={this.state.starts_at}\n  timeFormat=\"HH:mm\"\n  dateFormat=\"LLL\"\n  onChange={(day) => this.handleDateChange('starts_at', day)}\n  customInput={<input style={INPUT_STYLE} />}\n/>\n. ",
    "eeeman1": "what for?. ",
    "bpsourav21": "It works for me. what you need to do just  define random class like this\n.random{\n    color: #f00 !important;\n}. ",
    "andrewdormi": "Here is a new formatWeekDay prop for function that format weekday.\nFor example if you need to show only fist symbol of weekday:\njavascript\n<ReactDatePicker formatWeekDay={day => day[0]} />\nSometimes i need to change case of weekday. Now i can do it without css changes\njavascript\n<ReactDatePicker formatWeekDay={day => day.toLowerCase()} />. ",
    "jaylucas": "Sorry, I guess the image is misleading. If you look at the top right of the two boxes. It is a SINGLE input box. A better example:\n\n. I mean, I \"could\" create this with custom drop downs/css/text box, but it would be a nice feature to have out of the box. I see a lot of other react date pickers with this functionality.. ",
    "wombat86": "After a short investigation I figured that componentDidMount hook of Time component has two possible problems that cause this issue:\n\nHardcoded height of li items is used (30)\nThe scrollTop position is calculated for the selected hour, not the actual selected li.\n\nIn my case the actual height of li is 25px. After manually hacking the code by replacing 30 with 25 the list started showing at the beginning of selected hour. E.g. if you select 12:45, the list shows 12:00. This is very inconvenient if you have intervals less than 30 minutes.. I could prepare a PR but need some input from maintainers. There are few option of fixing this issue:\n\nfix calculation logic\nuse scrollIntoView on selected element.\n\nEither option has its pros and cons.. ",
    "S1rFrancis": "I have put together a quick PR using the scrollIntoView function that @wombat86 mentioned above. Would be great if you could let me know what you think of it:\nhttps://github.com/Hacker0x01/react-datepicker/pull/1396. ",
    "DairoGrey": "This is a patch for patch-package based on PR from prevoius comment:\n```diff\npatch-package\n--- a/node_modules/react-datepicker/es/index.js\n+++ b/node_modules/react-datepicker/es/index.js\n@@ -1767,9 +1767,16 @@ var Time = function (_React$Component) {\nTime.prototype.componentDidMount = function componentDidMount() {\n     // code to ensure selected time will always be in focus within time window when it first appears\n-    var multiplier = 60 / this.props.intervals;\n-    var currH = this.props.selected ? getHour(this.props.selected) : getHour(newDate());\n-    this.list.scrollTop = 30 * (multiplier * currH);\n+    if (this.props.selected) {\n+      var formatted = this.props.selected.format(this.props.format);\n+      var list_elms = this.list.children;\n+      for (var i = 0; i < list_elms.length; i++) {\n+        if (list_elms[i].innerText === formatted) {\n+          list_elms[i].scrollIntoView();\n+          return;\n+        }\n+      }\n+    }\n   };\nTime.prototype.render = function render() {\n--- a/node_modules/react-datepicker/lib/index.js\n+++ b/node_modules/react-datepicker/lib/index.js\n@@ -1773,9 +1773,16 @@ var Time = function (_React$Component) {\nTime.prototype.componentDidMount = function componentDidMount() {\n     // code to ensure selected time will always be in focus within time window when it first appears\n-    var multiplier = 60 / this.props.intervals;\n-    var currH = this.props.selected ? getHour(this.props.selected) : getHour(newDate());\n-    this.list.scrollTop = 30 * (multiplier * currH);\n+    if (this.props.selected) {\n+      var formatted = this.props.selected.format(this.props.format);\n+      var list_elms = this.list.children;\n+      for (var i = 0; i < list_elms.length; i++) {\n+        if (list_elms[i].innerText === formatted) {\n+          list_elms[i].scrollIntoView();\n+          return;\n+        }\n+      }\n+    }\n   };\nTime.prototype.render = function render() {\n```. ",
    "WesselKroos": "For now I'll use a 30 pixels height for the time picker. But we would like to change that to a greater value so that it complies with our designs. When can we expect this fix to be released?. @kkras3 There is a customInput={} property you can set with your custom input component. In there you can add multiple elements, so in my case I just focus on the input on the click event of a button that is within that component. That'll open the datepicker automatically.. You can use the customInput={ <CustomInputComponent/> } property and handle the onKeyDown, onKeyUp, etc events yourself to get full control over the characters that can be put into it.. I have to agree that the current examples do a poor job at describing how you can make your own input components. But I can give you one of my own examples instead. Hopefully that can shed some light on questions you might have:\n```\nimport React, { Component } from 'react'\nimport DatePicker from 'react-datepicker'\nclass CustomInputExample extends Component {\n  render() {\n    const inputProps = this.props;\n    return \n  }\n}\nclass DatePickerExample extends Component {\n  render() {\n    return \n  }\n}\n```. @Daniel-Itemize disabledKeyboardNavigation does actually do something else than you expect. It disables navigating through the dates squares in the datepicker popup with the arrow keys on your keyboard. By adding disabledKeyboardNavigation you enable the user to use the arrow keys to move the cursor position in the input field rather than moving throught the popup.. ",
    "saward": "Did this get resolved?  I'm noticing this issue, or one very much like it, using 1.5.0.. Alright, taking a similar approach seems to have simplified my fix quite a lot, thanks.  Should this issue still be open since it appears to be a fault still?. ",
    "kangax": "Found this issue when looking for flow-typed definitions for react-date-picker. Looks like there are none yet. I'll see if I can find some time for a PR to flow-typed repo.. Added in https://github.com/flow-typed/flow-typed/pull/3066. ",
    "adelpuva": "Maybe...\nFrom React Devtools (Chrome/Mac OS):\nrenderDatePicker is the component (stateless function) that include DatePicker.\n\nThis is more readable input content:\n{\n    \"input\": {\n        \"name\": \"timetable[0].from\",\n        \"onBlur\": {},\n        \"onChange\": {},\n        \"onDragStart\": {},\n        \"onDrop\": {},\n        \"onFocus\": {},\n        \"value\": \"2018-02-25T22:00:00.000Z\"\n    }\n}\nIf the name of field is without square brackets and dot (timetable0from) the range selection works fine.\nThank you.\n. Here more info.\nAs you see the name of input is passed to DatePicker and input:\n\nAnd here all props of DatePicker:\n\nWith the name timetable[0].from the range selection no works, If i use timetable0from selection range works.\nWhere could my mistake be?\nThank you\n. Resolved! I do not pass startDate and endDate in the right way!. ",
    "aybb": "@martijnrusschen I just need to add text for date. See screenshot.\n\n. ",
    "jRichardeau": "I also need this to customize cell content !\nBut why a render prop that only adds children to date ? I think a better idea would be to have a render prop for all date cell, isn't it ?. Hi,\nIs it planned to merge this PR soon ?\nIt would be very helpfull to fully customize this calendar !\nThank you. Yep saw it, do you have any idea of a deliver date ?. Do you know when this PR could be available ? I want to use this picker but moment is a too big dependency.\nThank you. I think the component doesn't do it natively and lets you implement your own behavior.\nYou have to manage this in the onChange callbacks : for instance block the date change or change the start/end depending of what is the value.\nFor my part I made the start and end have the same value if the period is invalid and I think in the demo it is the first option that is implemented.. ",
    "FelipeLujan": "i need to do something like this too.\nbut also for the textbox background.. ",
    "xero88": "i need this feature too !. ",
    "indapublic": "Same with ru locale. Using as property or moment global - there is no difference. Fixed by importing moment locale\nimport moment from 'moment'\nimport 'moment/locale/ru'\nmoment.locale('ru'). @Rolando-Barbella I think you should import all 20 different languages yourself.. ",
    "Rolando-Barbella": "How can you do this dynamically?  I need something  like  import moment/src/locale/${Locale2} so I can add the appropriate language depending on the user, but javascript doesn't allow you to do this, our app has more than 20 different languages. \nDoing this  locale=Locale2 on the component doesn't work either.. ",
    "kkras3": "Now wait...\nI simply set moment locale\nmoment.locale('fr')\nand in the datepicker\n<Datepicker\n    locale={'fr'} \n        ... \n/>\nand it just works. No need to import the locale resources. . Huh... well that's an approach I hadn't considered. Thanks aij.. @aij How are you triggering the calendar to pop when you click on the added button?. Figured out how to do this via moment configuration. . Well, yeah, captain obvious, but that is nothing more than the standard input.\nNot sure what this does for me over overriding styles of the built in input. . ",
    "NastyaArt": "It was a big problem for me. Please, add to Docs some words about localization with moment.\nFor me works next:\n1. Import all necessary langs (or just one, if it static):\nimport 'moment/locale/ru';\nimport 'moment/locale/fr';\nimport 'moment/locale/en-gb';\n...\nNote: be careful, because last imported locale stay as default, if you don't set locale for DatePicker or if you set locale that has not been imported.\n\nAdd locale prop for DatePicker. It can be value from state or props or other variable, which you use to manage locale (or just string, if it static).\nthis.state = {\n     locale: \"ru\"\n};\n<DatePicker\n      locale={this.state.locale}\n...\n />. \n",
    "nateha1984": "@aij I updated the text to be user configurable so a dev can set any text they deem appropriate as the title, or no text at all and the attribute will not show up.\nAs for who will benefit, the change is to allow screen readers such as JAWS to pick and read the intention of the button back to a visually-disabled user. The button can be accessed by tabbing through the control (e.g., put the cursor in the date field, hit tab once, then hit enter and the field will clear) and without any sort of title or aria-label attribute a screen reader won't indicate the purpose of the button to the user.. Looks like I still need to increase test coverage a tad, will work on that.... @aij I'm not sure I understand how there is extra complexity added to have the purpose of a button read out by a screen reader or to show a tool tip on hover. In fact, it's necessary for users with assistive devices to understand what is going on on the screen. Users who do not need extra assistance won't even know there's any change unless they hover on the button.\nI do agree that there does need to be some visual styling added if the button is going to be accessible from the tab order. I did go ahead and remove the button from the tab order as you are correct in that it shouldn't be part of the tabbing since it's part of the control; tab should take the user to the next component/control/whatever. I also changed the element to be a button type instead of an anchor.. Made the button title configurable and added a test. ",
    "haddyo": "Any Solution which can be arrived at the moment, which can help me out?. ",
    "djalmaaraujo": "Fixed using isClearable={true}. ",
    "acontreras89": "My two cents (with barely 5 minutes of library usage):\n\n:+1: to removing moment altogether\n:heart: raw js dates, date-fns for :art:\n\nI'd leave out everything else for users to implement. Although I haven't worked with luxon, no idea how that is. ",
    "SampsonCrowley": "Id definitely be on the Raw JS dates bandwagon. I hate including extra libraries where I van avoid it. and ES6/7 makes working with most things in vanilla js pretty simple compared to how it used to be. Id be happy to help out if someone has something specific that needs work. ",
    "weyert": "I noticed a new release was created, any reason why this PR didn't make the cut?. ",
    "tomaskallup": "\ud83d\udc4d Also having this problem.\nHere's a reproduction test code:\n```jsx\nimport * as React from 'react';\nimport {configure, mount} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport DatePicker from 'react-datepicker';\nconfigure({ adapter: new Adapter});\ndescribe('DatePicker component', () => {\ndescribe('render', () => {\n    test('without crashing', () => {\n        const onChange = jest.fn(),\n            props = {\n                onChange\n            };\n\n        const snap = mount(<DatePicker {...props} />);\n\n        expect(snap).toMatchSnapshot();\n    });\n});\n\n});\n```\nI managed to fix it by editing the module code in node_modules:\nreact-datepicker/lib/index.js\nI added a default export.\njs\nmodule.exports = DatePicker;\nmodule.exports.default = DatePicker;\nThis issue is most likely related to how babel handles importing modules.\nAnother solution is to use require\nconst DatePicker = require('react-datepicker');\nBut I personaly hate mixing import and require as that makes a mess.. After some more digging around, the problem seems to be this:\njs\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nBabel add this piece of code which allows it to handle importing of transpiled modules. I'll try to solve this and create PR when I have the time.\nEDIT:\nNever mind, the problem is just the default. Normaly babel transpiles export default myVar to exports.default = myVar, which doesn't happen here, it becomes module.exports = myVar.. ",
    "EmergentBehavior": "Also running into same exact error as @carlostxm \nEdit: was able to resolve it.\nI'm using ClojureScript and before was doing:\n(def date-picker (.createFactory js/React js/DatePicker)) but had to switch it up with:\n(def date-picker (.createFactory js/React (.-default js/DatePicker)))\nThe JS equivalent is:\nvar date-picker = React.createFactory(DatePicker.default);. ",
    "JacquiManzi": "Just had a co-worker re-produce this on Chrome, it didn't happen for him at first, but once he refreshed the page and tried again he got it to flash. I'll try Firefox.\nEdit: Flashing on Firefox too.. ",
    "mmcc": "^^ I am the above coworker, using Firefox 59.0.1. It seems to only happen on the first click to the example in the hero. If I click elsewhere I can get the flashing to stop, and other examples (including that one) seem to work fine. If I refresh the page again and click the hero example, it triggers it again. Here's a quick recording: http://take.ms/Yj3sj. Yep, also happens in the latest Chrome (65.0.3325.181). My guess is the problem is just with the demo, not the library itself since it's really only one scenario that causes it. Unfortunately that scenario is also the most prominent example on the demo site, but I don't think this is a mission critical issue with the library itself.. Ok digging in a little more we found some other interesting tidbits, but ultimately this seems like a focus issue. I noticed that if I open the page with my devtools open, the input field shows up without the dropdown open and clicking the input doesn't trigger the flashing insanity. Likewise, if I go to the page like before but click away from the input first before clicking in the input field, the flashing doesn't occur. Recordings of both scenarios.. ",
    "mtford90": "Flashing for me also on Chrome Version 66.0.3359.139 (Official Build) (64-bit), Mac OS X. Also - can't click the backdrop to escape with inline/portal either.. ",
    "jchitel": "Ah, I seem to have spoken a bit too soon. I didn't notice the onChangeRaw prop, which behaves similarly to my second suggestion.\nHowever, I do think that a discussion around validation is warranted. A developer should not have to use an API labelled \"raw\" to add validation logic to a component.. ",
    "sarink": "No, I think you were right the first time.\nEven if you detect that something is invalid in your onChangeRaw handler, what are you supposed to do about it? You can't stomp the user's input as they're typing.\nAnd you can't do it in onBlur, because they might not have been typing, or, they might have stopped typing halfway through and ended up clicking on a date (in which case whatever \"input value\" you had been keeping track of will be stale).\nMaybe there's some combination of refs, changeRaw, onBlur, onSelect, onChange and weird state setting and tracking that you can wrangle together to accomplish this, but it won't be pretty, and it won't be easy.\nIt might even be impossible.\nHow could something so important be so overlooked?. ",
    "KennyMonster": "\nEven if you detect that something is invalid in your onChangeRaw handler, what are you supposed to do about it? You can't stomp the user's input as they're typing.\n\njchitel is correct in that you can use onChangeRaw as a workaround, as long as you simply do nothing on invalid input. \nIt's not intuitive though as normally when you have a \"controlled\" form component in React, you would pass in the value as a prop, and the form element would never change except on prop value change. react-datepicker works both like a controlled and also uncontrolled component, as you can edit the field, and it keeps local state independent of the state value passed into it as a prop. OTOH, updating the value prop clobbers the local DatePicker edit state.\nBelow is my app specific wrapper component that seems to work as expected:\n```javascript\nclass DateTimePicker extends React.Component {\n  onChangeRaw = (e) => {\n    let m = moment(e.target.value);\n    if (m.isValid()) {\n      this.props.onChange(m);\n    }\n  };\nrender() {\n    return \n  }\n}\n```. ",
    "pklada": "+1, we had to write some janky code to get this to work properly, would be great to have this as default behavior. ",
    "marcoancona": "I agree, the user should not be allowed to enter an invalid date/time. I am looking for a date-time picker component that acts as the one in the official macOS calendar app, but I did not find yet something that robust. Don't get me wrong, this is great work, but the following two improvements are for me foundamental:\n- when the user clicks on a date or time component (eg. the month), the month digits are highlighted such that I can start typing a new month number and it will not just add text to the existing one (invalidating the input) but rather replace it\n- forbid any invalid value for dates and times\nThe following is Apple date picker, no way one can insert an invalid date.\n\n. ",
    "Peterabsolon": "+1. ",
    "omasback": "After testing out different versions, I believe this regression was introduced in 1.1.0. Also for me, I dont even need to click a day to trigger this behavior. Even clicking outside shifts the months, with no days selected.. ",
    "fooberichu150": "We're running into this issue as well.  I don't mind so much that it shifts the calendar as that when you're on a mobile device (I think it may just be iOS) the previous date placeholder on the 2nd month still shows highlighted until you \"touch\" somewhere else on your screen.  Getting this bug fixed would at least also prevent that associated display issue from showing up.\nBefore:\n\nAfter (December 13th being my selection):\n\n. Is this merge going to happen anytime soon?. ",
    "VinceSJ": "Seeing the same thing.. ",
    "sascha-friederich": "I found a way... the customInput element should has to use the onKeyDown-event (that gets passed to the custom input element by the DatePicker)\n```\nclass ExampleCustomInput extends React.Component {\nrender () {\n    return (\n      \n        {this.props.value}\n      \n    )\n  }\n}\n```\ni found this, analyzing the code... i think this should be mentioned in the documentation!. ",
    "webdeb": "@martijnrusschen if it looks good to you, I'll squash it urgently.\nWe are facing this bug currently with a combination of a custom input field and this bug is an actual show-stopper.. @rafeememon the codecov thing is failing because there are no tests for that hasPreSelectedChanged function. This was the main reason to put it into utils, so that it could be tested. What do you think, can we merge it anyway?. @aij added a test as suggested, thank you for looking into it. @rafeememon can you please remove you \"change request\" since it refers to an old state?. Awesome, thank you guys!. I agree, that its not moment specific, I think its better to place it inside the component itself, because its the only place its used.\nI'll define a custom function inside index.js to make the componentReceiveProps callback a bit leaner.\nNaming is hard, but something like this should be clear enough..\nhasPreSelectionChanged = (date1, date2) => bool . I used onBlur to update the date, to work on the issue precisely.. right.. It was not intended as general usage proposal.. I'll revert it, thanks for pointing on it!. cannot get rid of this changes, because of the prettier precommit-hook :D . Do you agree, that this is really primarily opinion based?\nFor me both ways are just fine, no personal preference here.\nLets get a third voice here, @aij / @martijnrusschen ?. Ok, however, its fine for me. I changed it to your suggestion. Hope thats good to go now. Thanks. ",
    "dchhetri": "That would be ideal, do you think we can use contextAPI to help assist the peer deps somehow to allow users to use any date library long as they follow some standard format. ",
    "jrop": "In my opinion, libraries such as this should be as lean as possible.  That would mean:\n\nStore dates internally using JavaScript's own native Date\nPerform any arithmetic using specific functions from a lean library, such as date-fns (all unused imports get left out of the bundle).\nExpose selected dates using the native Date core class, (e.g., onChange(date: Moment) changes to onChange(date: Date))\n\nIn one of my own projects, I created a lib month-info that returns the \"shape\" of any given month that I used to display info.  Could this project take this approach to migrate away from moment?. @nateabele I took a whack at creating a PR for this, but quickly abandoned it as I realized I did not have enough time + project_familiarity to finish it :frowning_face: . ",
    "nateabele": "Just ran into this. We're trying to get off of Moment as well, but recently introduced a dependency on react-datepicker, which is the last transitive dependency on Moment at this point.\n\nIn my opinion, libraries such as this should be as lean as possible. [...]\n\nSeconded. After reviewing the codebase, it doesn't seem like abstracting for different date libraries would be worth the conceptual overhead or the code weight.\n@martijnrusschen I'd be happy to submit a PR based on @jrop's 3 bullet points. I think I can even do it in such a way that it's not a BC break for existing Moment + react-datepicker users. Thoughts?. @treyhoover I kinda don't even want to start on it unless I know it'd be accepted in principle... react-datepicker seems to be the only reasonable date picker out there for React, but, there seems to be enough demand for this that maybe a fork is worthwhile if not.. @martijnrusschen Ping! Just wanted to check in one more time. Any thoughts?. ",
    "treyhoover": "@nateabele Let me know if I can help. This would remove our last moment.js dependency as well.. ",
    "Amwam": "This has been updated to fix the tests now.. ",
    "DriesH": "I think so yea, but it's been a long time since I last used this component, so I can't say for certain if this functionality was added in newer versions. Fixed the merge conflicts, I hope it's all good, because I don't have alot of time at the moment.. ",
    "veezilla": "Was struggling with this and have realised I was running an old version 0.37.0. \ud83e\udd26\u200d\u2642\ufe0f. ",
    "goldfarbdev": "I can't get this to work even with new version 2.2.0. I've been scouring the internet for the same answer.  I want to access the Event object and not the Date object or access both.  I especially need this because I'm dynamically adding multiple field instances which creates an updated array for each add, so I NEED the index number as well as the name value to update the array in the state.\nThank you!. @josuevalrob I found a solution that helps.  \nUse the onFocus method to access the input.\ngetName(e) {\n        return this.setState({currentName: e.target.getAttribute('name')});\n}\nvalidate(e) {\n       const inputName = this.state.currentName;\n}\nrender() {\n<Datepicker \n    name=\"the name\"\n    onFocus={this.getName.bind(this)}\n    onChange={this.validate.bind(this)}\n/>\n}\n. ",
    "peter-zhu": "Nevermind, minTime can take a function that calculates the time depending on input date.\ne.g.\n<DatePicker\n    selected={this.state.startDate}\n    onChange={this.handleChange}\n    minTime={this.getMinTime(this.state.startDate)}\nClosing. ",
    "awwong1": "@martijnrusschen Just ran into this issue myself. Thank you for the fix! Looking forward to seeing this in the next minor version release.. ",
    "hakimelek": "Refer to custom CSS files using Next.js\n\ud83d\udc49 https://github.com/zeit/next.js#importing-css--sass--less--stylus-files. ",
    "redgetan": "i was able to make it larger by modifying the css styles. For example\n```\n.react-datepicker__day-name,\n.react-datepicker__day,\n.react-datepicker__time-name {\n  width: 2.5rem;\n  line-height: 2.5rem;\n  font-size: 12px;\n}\n```. ",
    "AndyMeps": "I had to change the font-size associated with my html, body rule:\ncss\nhtml, body {\n  font-size: 14px;\n}\nI assume this is because react-datepicker uses rem for font sizes.\n. ",
    "vladimir-poma": "I think to get CDN works it's needed to add other modules/stuff that are needed for React DatePicker defined in webpack.config.js, I was able to run CDN by adding the next libraries\n<!-- React DatePicker Dependencies -->\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.1/prop-types.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://unpkg.com/react-onclickoutside@6.7.1/dist/react-onclickoutside.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/classnames/2.2.5/index.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.1/moment.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/react-popper/0.10.4/umd/react-popper.js\"></script>\n\n<!-- React DatePicker CDN -->\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/react-datepicker/1.4.1/react-datepicker.js\"></script>.\n",
    "monkeysuffrage": "It doesn't seem to work. I'd love to get an update when it does though. In the meantime it's jQuery I guess.. ",
    "KajSzy": "Wish I could use single link or whole react-datepicker was packed into single file as UMD module. ",
    "Sigura": "found solution: https://github.com/Hacker0x01/react-datepicker/pull/1074\nsample: https://codesandbox.io/s/1ozy5ol5vl. ",
    "snide": "@greg-a-smith Let me know if you get started on this. My team would like to help out as well.. ",
    "aviram83": "great idea. ",
    "Blackop778": "Is there any update on the status of this PR?. @colinrcummings Friendly poke for update on this PR. ",
    "calvinkurniawan": "i hope this can solve your problem https://github.com/Hacker0x01/react-datepicker/pull/626. ",
    "sidsethupathi": "Have you tried setting the dateFormat property in DatePicker? \nhttps://reactdatepicker.com/#example-1\n<DatePicker\n  customInput={<StartDate />}\n  showTimeSelect\n  timeFormat=\"HH:mm\"\n  dateFormat=\"LLL\"\n  isClearable\n  selected={this.state.startdate}\n  onChange={this.handleStartDateChange} />\n. ",
    "lamasdev": "try: dateFormat=\"MM/DD/YYYY LT\". ",
    "Khangeldy": "1170 duplicate it sorry.",
    "whatisaphone": "The coverage went up. What is codecov complaining about?. I was wondering why the bundle was not gitignored... I was just trying to go with the flow \ud83d\ude03 \nMakes sense. I cleaned up the branch.. All right! \ud83c\udf89 \nDo you happen to know when the next release is going to be? We're not sure if we should spend the time to publish our fork temporarily while we wait.. This comment is about a small part of the PR\u2014the addition of the shift key. A big part of why we chose this datepicker was that picking a date with the arrow keys is convenient and \"just works\". I wouldn't want to start needing the shift key for this.\nI see that the rationale is to preserve cursor movement in the textbox. But on many platforms, shift+left selects a character to the left of the cursor, so this change would still be hijacking native behavior. On Windows, ctrl+left moves a word to the left, and you can combine the two, etc. I don't think there's any modifier that wouldn't conflict with standard input behavior on some OS.\nIn my mind, standard input box behavior isn't really a focus of this component. There are others that do that well (e.g. react-day-picker). It's kind of a UX decision that different datepickers have made in different ways. I also don't think the choice necessarily harms accessibility\u2014as long as dates are being announced to the screen reader it should be clear that the arrow keys are the \"primary\" interface.\nHope that made sense.. The change in #1419 broke us as well. I'm also in favor of reverting it. Until then, here is our workaround:\n```js\nconst ForceReadOnlyInput = React.forwardRef((props, ref) => (\n  \n));\n}\n/>\n```\nIt would have been nice to just pass customInput={<input readOnly={true} />}, but the library overwrites the attribute during render.. I think codecov is complaining about the PropTypes, which it's not possible to cover. The only actual code I changed is getLocaleObject, which is fully covered.\nSo it seems to be spurious. Can someone take a look and tell me if you agree/disagree?. Thanks for the quick merge!. ",
    "WeijianXu": "Hello\uff0cI just noticed this commit. I have the same demand and wait for the publishment. When is the next release going to be?. ",
    "EokLennon": "Use null, like this:\nthis.state = {\n    ...\n    Date: null,\n    ...\n}\n<DatePicker\n    selected={this.state.Date}\n    onChange={/* Your change function */}\n/>\n. ",
    "gangstaJS": "it will throw an error. ",
    "hisk": "@gangstaJS You can simply set the date inside your state as undefined.\n```\nthis.state = {\n    date: undefined\n}\nhandleChange(value) {\n    this.setState({ date: new Date(value) });\n}\nrender() {\n    return (\n        \n    )\n}\n```\nHope it helped! \ud83d\udc4d. ",
    "anitta-paul": "Either of setting initial state as 'null' and 'undefined' worked fine for me.. ",
    "pixelshaded": "This seems to be a styling issue. The icon is rendered with an ::after selector, but the parent in firefox (the button) has no width or height so it is not clickable. I fixed it by updating two styles with:\n.react-datepicker__close-icon {\n  top: 25%;\n  right: 7px;\n  width: 16px;\n  height: 16px;\n}\n.react-datepicker__close-icon::after {\n  right: 0\n}. ",
    "Jefski14": "@pixelshaded You're right, this is indeed a styling issue. I tried using your style fix but it doesn't work correctly for me.\nI'm going to try to fix it myseft later.. Here's my solution: \n.react-datepicker__close-icon {\n  top: 25%;\n  right: 7px;\n  width: 16px;\n  height: 16px !important;\n  position: absolute;\n}\n.react-datepicker__close-icon::after {\n  right: 0 !important;\n  top: 0;\n  margin: 0;\n}. ",
    "asarenski": "I would like to second this. We are currently having issues with Firefox as well, OSX and Ubuntu.. ",
    "mpress": "My fix was post-#1390.. ",
    "jwrlee88": "Running into the same issue, anyone have any progress on this?. Perhaps there is a way to use this: https://reactdatepicker.com/#example-6\njavascript <DatePicker\n  selected={this.state.startDate}\n  onChange={this.handleChange}\n  showTimeSelect\n  minTime={moment().hours(17).minutes(0)}\n  maxTime={moment().hours(20).minutes(30)}\n  dateFormat=\"LLL\"\n/>\n^ Is there a way to take the minTime prop and set that to the time that was selected in the previous DatePicker component?. ",
    "ArthurBrito": "@jwrlee88 I am working on it.\nI found that this.setOpen(false)is being called without checking shouldCloseOnSelect.\nI added the verification, but I found another problem. After I click the time, the CSS (to show what time is currently selected) is not being applied.\nWhen I have time I will check the problem with CSS and then make a PR.. ",
    "kdrich": "Ran into the same issue. The scrollTop height is calculated at 30px: this.list.scrollTop = 30 * (multiplier * currH);, but the element is 31px. I set the height of the element to 30px by overriding the CSS:\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n        height: 30px;\n    }\n. ",
    "apolzon": "Another artifact of this issue is that the width of the time container is hard-coded, so larger font-sizes are causing each time interval to render onto two lines.\nI have set the time-box and time-container elements to auto-width so that each li can render on a single line. \nThe fix can then either use scrollIntoView, or ask the browser for the li height when calculating scrollTop as font-sizes, line-height, and padding may be different depending on the user's stylesheet.\nAs a final tweak, I would probably scroll one element past selected so that the selected item is not at the very top of the list to make it easier for the user to select the previous time interval without scrolling.. ",
    "imhazige": "I have the same issue.. after made the ul padding to 0. some browser works, but in a screen it is showing \n\n. ",
    "sheppyc": "Trying to pin this down a bit more, but I only had this issue when I moved from using materialize CSS to bootstrap 4. Perhaps materialize was masking this issue by setting padding 0 on ul.. ",
    "peterswallow": "It seems to be the ul.react-datepicker__time-list element, which inherits from the base 'user agent stylesheet' (in chrome at least) with this class:\nul, menu, dir {\n   padding-inline-start:40px;\n}\nGuess we need to reset this to 0px, as mentioned above.... ",
    "ymor": "Your example shows that you used dateFormat, which formats the input.  You need to set the timeFormat to \"HH:mm\" too and this will format the dropdown.. ",
    "ninjami-matti": "I can't believe that I missed that typo there! I have gone through the code so many times and somehow every time failed to see that I was using dateFormat prop. \nThank you!. ",
    "kaekasui": "thanks! I'll delete this branch.. ",
    "aldavigdis": "~~Two things \u2014 I see the CI is broken and I will do my best to push the required fix.~~\n~~Seccondly,~~ this PR is based on a Wordpress Gutenberg ticket. For context, see https://github.com/WordPress/gutenberg/issues/1311. I can split it up into chunks as well.. @johnsoft What I've been seeing on my side is complaints from users who claim the keyboard navigation is hijacking expected UI behaviour. Freeing direct use of the left and right arrow keys makes it possible to move the input cursor inside the associated input element and edit the value that way, without the user ever having to depend on the date picker.. ",
    "wiscow": "@aldavigdis I would have to agree with @johnsoft on his assessment of the shift key.  I was just about to start working on a PR for a slightly less invasive change which would only allow the left and right arrow key to change the date if the calendar is open.  This would allow a user to navigate the raw input without inadvertently opening up the calendar (my biggest gripe with the current state of accessibility).  The problem with the shift key is that it will have to be explained, as it will not be intuitive to a user.   Bottom line is that if the calendar is open the keyboard navigation on the calendar makes sense.  If it is not, it should be opened by a keystroke and then gain focus.   \nRegardless, The improvements you have made here will keep us using this control as they are more restrictive than the current functionality.. ",
    "Fer0x": "@pagesrichie https://reactdatepicker.com/#example-21. ",
    "crazypixel": "doesn't work for me as well..  a problem with react-popper. ",
    "spyx08": "Yes i was thinking it was bad imported/builded but I tried to remove all my node_modules and to re-install them with yarn and npm but got the same issue. \nBut yes I expect an error with the import/build I don't know how I can check this.... ",
    "matttk": "More than half a year old. Anybody fix this problem? I have the same one. Yes, I am doing import Datepicker.. Just an update for anybody who stumbles upon this problem. I noticed the error was with popper and went over to their GitHub, where some people had the exact same issue and suggested making sure your react and react-dom are the same version. I tried that and had no luck. Then I stumbled upon another solution for a completely unrelated project but same error, where people suggested deleting your node_modules directory and starting over. It worked.\ntl;dr: if you're getting this problem, it's probably because something is screwed up in your node_modules, which is causing a dependency of react-datepicker to fail. Delete the folder and install everything fresh.. ",
    "JaSpr": "This is caused by the clear button not having type=\"button\".  The default for the type attribute for button elements is \"submit\", and when you press enter on a form, it will send a click event to the first button where type=\"submit\" (or type is undefined, and therefore defaults to submit).\nAdding type=\"button\" to the clear button will resolve this issue.. resolved in f86a8e4. ",
    "aurerua": "Same Problem here.\nAdding timeCaption: string to the interface in node_modules/@types/react-datepicker makes it possible to use it but it is no real solution.\nAre the type definitions available somewhere, so that a PR can be done?. ",
    "jslegers": "I experienced the same issue.\nThis is very annoying!. > onChange will not trigger if the format is incorrect or is an invalid date.\nI guess that's the problem, at least in my case.\nI want to use the onChange to validate the input when user types something into the text field manually and reset the text field when validation fails.\nWithout the onChange getting fired, the text field pretty much accepts any input when the user types something into it and I have no idea how to validate that input.\nIs there perhaps another way to achieve this?. The onChangeRaw event is triggered every time a single character is typed. \nThis is ill-suited for date fields, because when typing eg. 05/05/2018 manually, you'll have an invalid date the first 9 times the event is triggered. You have a valid date only when the 10th and last character is typed. And there is no way of knowing from this event handler when the last character is typed.\nThe onBlur would be a better fit, as it is triggered only when leaving the field. \nI'm not sure what would be the right way to validate & format, though, when using onBlur. \nI would like to use the same validation & formatting rules used by the date picker, but I have no idea how to do that.. @bvanderdrift :\n\nYou can see at https://github.com/Hacker0x01/react-datepicker/blob/master/src/date_utils.js#L66 how this library validates dates. You could use the same implementation to do validation yourself.\n\nDoesn't have to implement your own validation behavior kind of defeat the purpose of using components like react-datepicker?\n\nit will only strictly accept issues that adhere to the ISO-8610 standard.\n\nJust... why?\nIt's so counter-intuitive to have to use a format that's different from the format used by the date-picker.\n\nWhat I did personally is write a wrapper around the current DatePicker which exposes extra callbacks \n\nI'm already doing that. \nUnfortunately, that's not really making things any easier.\n\non which I can base whether the typed Date is valid or not.\n\nIn which handler should I put my validation code?\nAnd how should I update the textbox's content if the validation fails?\nThis is what my DateTimeFieldInput module currently looks like : \n````tsx\n**import * as moment from \"moment\";\nimport * as React from 'react';\nimport {default as ReactDatePicker} from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {DateTimeField, DateTimeFieldValue, ServiceConfigurationField} from \"../model/serviceconfig\";\nrequire(\"./_datetimefieldinput.scss\");\nconst DATEFORMAT: { [precision: string]: string } = {\n  year: \"YYYY\",\n  month: \"MM-YYYY\",\n  week: \"DD-MM-YYYY\",\n  day: \"DD-MM-YYYY\",\n  hour: \"DD-MM-YYYY\",\n  minute: \"DD-MM-YYYY\"\n};\nconst TIMEFORMAT: { [precision: string]: (boolean | string) } = {\n  year: false,\n  month: false,\n  week: false,\n  day: false,\n  hour: \"HH:mm\",\n  minute: \"HH:mm\"\n};\nconst DEFAULT_FORMAT = \"day\";\nconst MINIMUM_TIME_INTERVAL = 15;\ninterface DateTimeFieldInputProps {\n  field: DateTimeField;\n  value: DateTimeFieldValue;\n  onChange: (newValue: DateTimeFieldValue, sourceField: ServiceConfigurationField) => void;\n}\nexport class DateTimeFieldInput extends React.Component {\nshouldComponentUpdate(nextProps: DateTimeFieldInputProps, nextState: {}) {\n    return this.props.onChange !== nextProps.onChange ||\n           this.props.field !== nextProps.field ||\n           this.props.value !== nextProps.value;\n  }\nhandleChange = (changedDate: moment.Moment) => {\n    const {field, onChange} = this.props;\n    if (changedDate) {\n      //pass date back as a string, but make sure no date info is lost (use a ISO-8601 string)\n      onChange(changedDate.format(), field);\n    } else {\n      onChange(\"\", field);\n    }\n  }\nhandleChangeRaw = (event: React.FocusEvent) => {\n    const {field, onChange} = this.props;\n    const newValue = moment((event.target as HTMLInputElement).value, this.getFormat(), 'en', true);\n    if (newValue.isValid()) {\n      onChange(newValue.format(), field);\n    }\n  }\ngetPrecision() {\n    return this.props.field.precision || DEFAULT_FORMAT;\n  }\ngetFormat() {\n    const precision = this.getPrecision();\n    const timeformat = TIMEFORMAT[precision];\n    return timeformat ? DATEFORMAT[precision] + \", \" + TIMEFORMAT[precision] : DATEFORMAT[precision];\n  }\nrender() {\n    const {field, value} = this.props;\n    const date = !value ? null : moment(value);\n    const precision = this.getPrecision();\n    const dateformat = DATEFORMAT[precision];\n    const timeformat = TIMEFORMAT[precision];\n    const timeinterval = precision === \"minute\" ? MINIMUM_TIME_INTERVAL : 60;\nconst dateInput = {} as any;\nif (field.includeDates && field.includeDates.length) {\n  dateInput.includeDates = field.includeDates.map(d => moment(d))\n} else if (field.range) {\n  const {min, max} = field.range;\n  dateInput.minDate = min ? moment(min) : null;\n  dateInput.maxDate = max ? moment(max) : null;\n}\n\nreturn (\n    <div className=\"datepicker-container\">\n      <ReactDatePicker selected={date}\n                       onChange={this.handleChange}\n                       onChangeRaw={this.handleChangeRaw}\n                       value={date ? date.startOf(precision).format(this.getFormat()) : \"\"}\n                       isClearable={true}\n                       todayButton={\"Today\"}\n                       showMonthDropdown={true}\n                       showYearDropdown={true}\n                       scrollableYearDropdown={true}\n                       showTimeSelect={!!timeformat}\n                       dateFormat={dateformat}\n                       timeIntervals={timeinterval}\n                       timeFormat={(timeformat || \"\") as string}\n                       className=\"form-control\"\n                       placeholderText=\"Please pick a date\"\n                       id={field.id}\n                       name={name}\n                       {...dateInput}\n      />\n    </div>\n);\n\n}\n}\n````\nI've spent hours tinkering with this, but I'm not getting anywhere close.\nEverything I try seems to break more than it fixes.... > I have to correct myself on the ISO-8610 thing I said. I now see that it will just accept a date with trailing 0's and in the localization of your choosing. So if it prints 08-08-2010 it will also accept input like that and not as 08/08/2010, it will also not accept 8-8-2010.\nI just verified that that is indeed the case.\nStill pretty useless, though, without a way to guarantee that users enter dates in the correct format.\n\nI don't fully get the functionality of this wrapper, are you parsing the moment value to a string?\n\nI'm working on an app where fields can be added, modified or removed based on configuration in a JSON file or service.\nThe configuration of a DATETIME field would look something like this : \njson\n{\n  \"type\": \"DATETIME\",\n  \"id\": \"testdate\",\n  \"precision\" : \"hour\",\n  \"range\" : {\n    \"min\": \"2018-03-19T07:22+02:00\",\n    \"max\": \"2020-03-19T07:22+02:00\"\n  },\n  \"label\": {\n    \"message\": \"A date field\"\n  },\n  \"help\": {\n    \"message\": \"Shows you how to add a date field\"\n  }\n}\nThe DateTimeFieldInput wrapper acts as an abstraction on top of ReactDatePicker, to add the proper properties based on the JSON config.\n\nAlso, I don't see the use of the shouldComponentUpdate call you're doing. Why don't you let the ReactDatePicker do that? \n\nTo be honest, I don't know either. That part of the code was written by a colleague of mine, who is sort of the React \"expert\" in our team. I'm still in the process of getting used to React and trying to wrap my head around some of its more esoteric behavior. And unfortunately, my colleague is on holiday this week.\n\nIn my exprience shouldComponentUpdate is causing bugs to appear, and I just normally trust the React logic to do that job properly.\n\nI guess I'll have to ask my colleague when he returns from holiday why he doesn't trust the React logic to do that job properly.\n\nAlso if you want to know when an input is not value you need to expose some kind of callback that notifies a parent. Currently you only trigger the callback when isValid() returns true, but do nothing when it returns false.\n\nSo I should add something like an onInvalidInput callback with validation logic to my DateTimeFieldInput component in the parent component & call that callback when isValid() returns false?\nIt strikes me as odd that I would have to add validation logic to a parent component instead of the component itself. This goes so against everything I've learnt as a programmer in 15 years!. > Currently when someone inserts a date string which is not ISO-8610 formatted the DatePicker will not trigger onChange. \nISO-8610? That doesn't make sense.\nIf the datepicker returns values of format  MM/DD/YYYY, the text field should by default accept dates formatted as MM/DD/YYYY when entered manually.\nIf the datepicker returns values of format  DD-MM-YYYY, the text field should by default accept dates formatted as DD-MM-YYYY when entered manually.\netc.\nIt's totally counter-intuitive to have to input a date in ISO-8610 if dates selected by the picker are displayed as MM/DD/YYYY.. ",
    "bvanderdrift": "Did you make sure to put in the date in the correct format? This is currently working on my machine. onChange will not trigger if the format is incorrect or is an invalid date.. There is a onChangeRaw property . I guess you could use that to get any input that comes in and validate it yourself. I imagine it returns the normal event from the input element with the value in string format but did not verify that.. I have created an issue (#1464) to discuss a callback to notify users of an invalid date being given. What I needed was reactively show a message as long as the given input is an invalid date. \nYou can see at https://github.com/Hacker0x01/react-datepicker/blob/master/src/date_utils.js#L66 how this library validates dates. You could use the same implementation to do validation yourself. In a nutshell: it will only strictly accept dates that adhere to the ISO-8610 standard. What I did personally is write a wrapper around the current DatePicker which exposes extra callbacks on which I can base whether the typed Date is valid or not.. > Doesn't have to implement your own validation behavior kind of defeat the purpose of using components like react-datepicker?\nI feel that is always your own consideration. I personally do like the flexibility of the picker itself, and think it could be improved by some validation logic. If there is no need of visual validation (since internally it is validated) the component is still useful.\n\nIt's so counter-intuitive to have to use a format that's different from the format used by the date-picker.\n\nI have to correct myself on the ISO-8610 thing I said. I now see that it will just accept a date with trailing 0's and in the localization of your choosing. So if it prints 08-08-2010 it will also accept input like that and not as 08/08/2010, it will also not accept 8-8-2010.\nRegarding your code:\nI don't fully get the functionality of this wrapper, are you parsing the moment value to a string? So that you only have to interact with the ReactDatePicker with strings? I think that it's fine to pass around the moment object through which you have way more flexibilty with the date. This way you keep as close as possible to the source of truth.\nAlso, I don't see the use of the shouldComponentUpdate call you're doing. Why don't you let the ReactDatePicker do that? In my exprience shouldComponentUpdate is causing bugs to appear, and I just normally trust the React logic to do that job properly.\nI also have to admit I didn't take the time to completely root out your code but these are the first things that stand out to me. Also if you want to know when an input is not value you need to expose some kind of callback that notifies a parent. Currently you only trigger the callback when isValid() returns true, but do nothing when it returns false.. Ok, then I get why you do the manual converting!\n\nSo I should add something like an onInvalidInput callback with validation logic to my DateTimeFieldInput component in the parent component & call that callback when isValid() returns false?\n\nThis is exactly what I have done and works nice. Ultimatly I wish this would be native functionality (to some extend) in the react-datepicker. I just made a very basic solution so there might be a better solution if someone puts in more brainpower, but for me this works now.\nIf you want to have it in the component itself always feel free to submit a PR to implement it.. Sorry to close this again in such a rapid succession. I noticed the autocomplete did not use the set locale in the form input, noting down the month and day inverted resulting in an invalid date.. ",
    "mkrn": "Correct behaviour should be:\nonBlur of input check if the value is invalid (bad format or outside min/max restrictions) and return it to previous valid value or blank. \nThis needs to be changed in component. In wrapper component adding onBlur works but since value will not be changed there's no way to re-render component, and value in input stays.. ",
    "shuhei": "Here is my two cents. onChangeRaw() and manual validation with moment(str, format).isValid() work well for me. (You can ignore the timeZone if you don't care.)\n```js\nconst DATE_FORMAT = \"DD/MM/YYYY - HH:mm\";\n {\n    setValue(date);\n  }}\n  onChangeRaw={event => {\n    // Read a value from the text field.\n    // https://github.com/Hacker0x01/react-datepicker/issues/1414\n    const date = moment(event.target.value, DATE_FORMAT).tz(timeZone);\n    if (date.isValid()) {\n      setValue(date);\n    }\n  }}\n  dateFormat={DATE_FORMAT}\n  {...otherProps}\n/>\n```. ",
    "atkingtornado": "I'm having the same problem... any updates would be appreciated!. This is still an issue... any updates?. ",
    "janeschindler": "I get this too.. ",
    "jothi-pyt": "https://github.com/Hacker0x01/react-datepicker/issues/771 Please check out the response here.. ",
    "pniebrzydowski": "This needs to be reverted, I don't understand why it was accepted in the first place. The readOnly property worked perfectly earlier, but now the calendar does not open at all if readOnly is set to true. If you want a true read only date field, then it should just be a standard input field. There needs to be a way to disable user input while still using the datepicker component, and the most logical way to do this is with the readOnly property.\nMy idea for a temporary fix: https://github.com/Hacker0x01/react-datepicker/issues/1443#issuecomment-416531351. @kevcodez Unfortunately disabling keydown is problematic, as it removes all access to the keyboard which completely eliminates accessibility for the form. You can no longer tab away from the field, you can't use the keyboard to select the date, etc.. My solution was to utilize the customInput property and create a new component which returns an input with the properties passed through, where the onChange is only fired if it matches as a moment object.\nCode for the component:\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nclass DateOnlyInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkIfDate = this.checkIfDate.bind(this);\n    }\ncheckIfDate(date) {\n    if (!moment.isMoment(date)) return;\n    this.props.onChange(date);\n}\n\nrender() {\n    const props = {...this.props};\n    delete props.onChange;\n    return (\n        <input type=\"text\" onChange={this.checkIfDate} {...props} />\n    );\n}\n\n}\nDateOnlyInput.propTypes = {\n    onChange: PropTypes.func,\n};\nexport default DateOnlyInput;\n```\nThen I just input this into the customInput in my DatePicker component, and the component works properly again. \n<DatePicker\n    ...\n    customInput={<DateOnlyInput />}\n/>\nI still see this as a bit of a hack and a bunch of additional unnecessary code, and that this is exactly how it should function (and has in the past) when readOnly is true, but at least it seems to function as needed, and all keyboard functionality is retained. Hopefully the previous \"fix\" for read-only will be reverted.. For some reason this was changed in https://github.com/Hacker0x01/react-datepicker/pull/1419\nHere's the solution I came up with: https://github.com/Hacker0x01/react-datepicker/issues/1443#issuecomment-416531351. ",
    "mjlangan": "How does this change make readOnly different from disabled?. ",
    "peeyushsrivastava": "Exactly this change actually makes readOnly senseless, most of the chrome updated version not supporting this fix, which is hampering usability of React-Datepicker. This needs to be reverted. This condition will never let calendar once readOnly is set, we can apply this situation for disabled but not for readOnly. ",
    "Areaxe": "It is recommended to distinguish disabled from readonly.. ",
    "kochis": "Just a heads up, due to the default text on this prop, we started seeing the following after the upgrade to 1.6:\n\nSetting previousMonthButtonLabel and nextMonthButtonLabel to be empty strings will solve it, but wondering if this should be an optional prop.\n. I was able to achieve this by setting the wrapper and input-container to be display: block (instead of the default display: inline-block)\ncss\n.react-datepicker-wrapper, .react-datepicker__input-container {\n  display: block;\n}. ",
    "Huanzhang89": "Yeah I was confused when I saw the labels, came here to find out why XD. ",
    "joshlacey": "this was supposed to sent to react-date-picker. ",
    "yuderekyu": "Have any feedback on this proposal?. ",
    "zhs": "Hi, please try to set preventOpenOnFocus={true} in DatePicker component. ",
    "Genarito": "That seems to work! Thank you so much. It's not documentd here. I have made a pull request because I thought that it was a race condition. \nClosing PR!\nThank you again!. Ok, it can be fixed as explained in this issue: setting preventOpenFocus={true} on Datepicker component.. ",
    "xrrrx1": "best issue i ever seen. ",
    "jvleon": "efectivily, a seen the same issue :v. ",
    "bhupesh-sf": "I am doing the similar thing but the issue I am facing is I select date on one it shows the same on all other DatePicker instances as well.\nAny solution for that?. ",
    "charliearlie": "This issue actually disappears once the date picker is closed and re-opened. I suggest making the date picker close when a week number is selected. . I have tested each and every outcome of my changes and it says the test coverage of the diff only covers 80%?. Done. Merge conflicts again. Is this going to be merged, or should i just close it?. Thanks. I've resolved the conflicts. . CodeCov says 100% of diff covered now too. Weird.... ",
    "ayoung83": "These suggestions worked for me with the Clear button. https://github.com/Hacker0x01/react-datepicker/issues/1389. ",
    "symbiane": "<DatePicker\n                            selected={this.state.activitySelectedDate}\n                            onChange={this.handleActivityDateChange}\n                            includeDates={dates}\n                            showDisabledMonthNavigation\n                            dateFormat=\"YYYY-MM-DD\"\n                            readOnly\n                        />. ",
    "flynorc": "experiencing the same problem here. After updating to 1.6.0 the readOnly attribute seems to be causing the datepicker to not open. There are no errors in console or any other errors, it just does not open.\ntried readOnly={true} and readOnly none seem to work.\nRemoving the attribute makes it work again (but users are able to type into the field then). looking at some other issues, I found this one:\nhttps://github.com/Hacker0x01/react-datepicker/issues/1418\nit seems like that is the reason for the new behaviour.\n. did the same thing, and then also needed to add\nautoComplete=\"off\"\nto prevent chrome from showing the previously selected options . anyone has an idea on how i could prevent the \"soft keyboard\" showing on android (and other mobile devices) when clicking on the input field that has the datepicker?\nI've ended up building on top of @pniebrzydowski last answer and used a customInput, but modified in such a way that i'm applying the readOnly attribute to the input element conditionally inside the onFocus and onBlur. Whenever onFocus is triggered, i change the state to have readOnly true and whenever onBlur is triggered i change it to false.\n```\nclass DateOnlyInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            readonly: false,\n        }\n    }\n_onFocus = () => {\n    this.setState({\n        readonly: true,\n    });\n};\n\n_onBlur = () => {\n    this.setState({\n        readonly: false,\n    });\n};\n\nrender() {\n    const props = {...this.props};\n    delete props.onBlur;\n    delete props.onFocus;\n    delete props.readOnly;\n\n    return (\n        <input onBlur={this._onBlur} onFocus={this._onFocus} type=\"text\" readOnly={this.state.readonly} {...props} />\n    );\n}\n\n}\n```\nIt seems to get the job done, i'm wondering if there is a better way to go about this tho. seems pretty hacky to me and i'm not sure if there are any potential problems that i might have missed?. ",
    "kevcodez": "Solved it by using onKeyDown={e => e.preventDefault()}. ",
    "evangow": "You might want to check out the 'custom input' or 'portal inline version' in the docs\nhttps://reactdatepicker.com/#example-30\nhttps://reactdatepicker.com/#example-41. You might want to check out the \"Inline portal version\" in the docs\nhttps://reactdatepicker.com/. @mtford90 it's not documented, but you can add an onClickOutside property to the DatePicker component and pass it a toggle function. Basically, do something like the below.\njavascript\nclass MyDatePicker extends Component {\n  state = { isOpen: false };\n  toggleCalendar = () => this.setState({ isOpen: !this.state.isOpen });\n  render() {\n    <input onClick={this.toggleCalendar} />\n    {this.state.isOpen && (\n      <DatePicker\n        inline\n        withPortal\n        onClickOutside={this.toggleCalendar}\n      />\n    )}\n  }\n}. ",
    "cmonkey03": "I'm using Semantic UI React and would like to set the input field to 100%, but am unable to do so. The previous solutions mentioned here do not work and have not found any solution in the docs.. ",
    "lorenz068": "There are 2 CSS class : react-datepicker-wrapper & react-datepicker__input-containerand they are  display: inline-block. It could be nice to have control on that. This example https://reactdatepicker.com/#example-30 doesn't work because it embed the futur custom input in a display-block element. ",
    "pspray": "@cmonkey03 Forcing <Form.Field style={{ width: \"100%\" }}> and setting .react-datepicker-wrapper, .react-datepicker__input-container {\n    display: block !important;\n} as @lorenz068 suggested worked for me in Semantic UI React.. ",
    "brettjthom": "Just saw this happen too and saw this issue. You can do a hackish approach by handling it with raw data... not pretty but seems to works\n// Component isn't firing onChange when manually keying in a time\nonChangeRaw={(date) => {\n   if (moment(date.target.value).isValid())\n        this.handleChange(data.target.value);\n}}. ",
    "dogabudak": "Same here, fixed it with @brettjthom solution\nThanks . ",
    "szymkab": "Yes I know we can handle it in that way but shouldn't it work just on normal onChange?. ",
    "ChrisGarber-Medlever": "Yeah, something is weird with the time parsing here. On the demo page changing the time manually has no effect, but if the date is changed afterwards the time change is picked up. \nVideo for reference\nYou'll see that the time highlight changes (it's not visible) once the date is changed. ",
    "idmontie": "The code: \nif (\n      !isSameDay(this.props.selected, changedDate) ||\n      this.props.allowSameDay\n    ) {\nreturns false when just changing the time. Which means onChange doesn't get called, but onSelect does get called.. @martijnrusschen How would you suggest I go about covering this behavior? I don't see any tests that currently cover the componentDidMount lifecycle.. @martijnrusschen pinging you again in case you didn't see my previous comment. ",
    "haizz": "Is there an ETA for the fix?. up. ",
    "val1984": "yarn test passes on both Windows and macOS but not Travis-CI, any idea how to get same results locally?. ",
    "smithaitufe": "In my case, when the button is clicked, it does not show the datepicker. Rather it shows an input control which must be clicked to launch the Datepicker. Please what is the expected behaviour? \nThe sample in the doc works fine. So what is wrong?\njs\n<div className=\"field\">\n          <div className=\"control\">\n            <button \n            className=\"button is-outline\"\n            onClick={this.toggleCalendar}>{this.state.birthDate ? this.state.birthDate.format(\"DD-MM-YYYY\") : \"Birth Date\"}</button>\n            {this.state.isDatePickerOpen && (<DatePicker\n            selected={this.state.birthDate}\n            onChange={this.handleChange}\n            withPortal/>)}\n          </div>\n        </div>\n// handlers\nhandleChange = date => {\n    this.setState({birthDate: date})\n    this.toggleCalendar()\n  }\n  toggleCalendar = (e) => {\n    e && e.preventDefault()\n    this.setState({isDatePickerOpen: !this.state.isDatePickerOpen})\n  }. ",
    "ryanleland": "Direct link https://reactdatepicker.com/#example-30. ",
    "jacekk": "You have readOnly property which changed behavior in https://github.com/Hacker0x01/react-datepicker/pull/1419 . Don't ask me why it works like that right now ;) Or ... does not work ... to be more exact :/. ",
    "a-x-": "Did you restarted your builder watch mode?. npm info react-datepicker version\n1.6.0. Oh, I got, that's not reactportal. Can you clarify it in the docs?\nI started from the scratch props.reactPortal opt: https://github.com/Hacker0x01/react-datepicker/pull/1465. we can check dom element in the body's bottom. I added the test! :)\nBut it's seems true negative :(. +\nI wanna props api doc.\nexamples are not cover all the cases\ne.g. isOpen doc is missed. ",
    "Kuubs": "I had the same issue with the following dependencies:\n\"dependencies\": {\n    \"firebase\": \"^5.4.1\",\n    \"moment\": \"^2.22.2\",\n    \"react\": \"^16.4.2\",\n    \"react-datepicker\": \"^1.6.0\",\n    \"react-dom\": \"^16.4.2\",\n    \"react-loadable\": \"^5.5.0\",\n    \"react-moment\": \"^0.7.9\",\n    \"react-router\": \"^4.3.1\",\n    \"react-router-dom\": \"^4.3.1\",\n    \"react-scripts\": \"1.1.5\"\n  },\nAfter deleting the node_modules and a fresh npm install it seems to work. ",
    "lolbyaka": "@a-x- Hi! Do you have any status updates for this feature? . ",
    "rendall": "I would like the documentation to answer the question: how does one get a blank field to start?. ",
    "vamshi9666": "it is super hard to predict the arguments and use them without docs. i really appreciate to have written documentation. ",
    "xehpuk": "@martijnrusschen To me, it's not.. I'd like to see a description of every prop in the docs folder.\nI can't exactly remember what I needed when I created the issue.\nThe examples only describe how to achieve specific scenarios. The list is obviously not exhaustive.\nMost of the props are not used in the examples. adjustDateOnChange, clearButtonTitle, customInputRef \u2026. ",
    "trejster": "Import statement was incorrect. ",
    "shiftsave": "thanks!. ",
    "hudovisk": "Done :). @martijnrusschen can you check again?. ",
    "xcorail": "Hi @martijnrusschen \nHappy you found this useful.\nSome precisions about how it's run:\n Our recommended usage is to activate automated code review. LGTM will analyse immediately your pull requests, and report directly within the PR any new problem or fix.\n Otherwise, LGTM will poll your repo once a day, and analyse all new commits, most recent first\nDon't hesitate to drop me a line for any question. ",
    "lendresen87": "I'm having the same issue. I would like to disable keyboard for mobile rendering, as it hides the actual date picker, making it quite non-user-friendly at the moment.\nI see that using readOnly used to work, and that you have decided to disable that functionality. Could you maybe change your mind and go back to the way it worked before, or implement support for this in another way? It seems several people needs this functionality :). @bcullman , I see, I guess it is good that you take that into consideration. Maybe readOnly should be kept as it is. But would you consider implementing support for disabling keyboard in another way? My alternative is to use another date picker, and I'd prefer using yours.. Found a workaround for now.\nWorkaround is to force read only on input field to make it work as before, if it will help anyone else in the same boat:\nif (this.datePicker && this.datePicker.input) {\n    this.datePicker.input.readOnly = true;\n}\nHope to be able to use a built-in feature in the future instead of this workaround. :) . ",
    "Yakima-Teng": "+1. > There is also an accessibility concern here. readonly is announced by screen readers and other assistive technologies.\n\nIf you are allowing editing via the datepicker when it is set readonly, you are creating an inaccessible experience. Users with screen readers will be told the field is readonly and will have no incentive to explore using the supplied datepicker.\n\nYes, it quite a good consideration to take into. Actually, people found this webpack want to have this datepicker to be available in mobile platform, it's not so important that whether the detailed implementation for this feature is related to the readOnly attribute or not. :)\nI don't have a good workaround now, maybe you can support this feature just using readOnly like before but with strong emphasis on its accessibility problem in the documentation. Or otherwise, it would be better to add note in the documentation that this datepicker is not suitable for mobile platform. Actually I  find this datepicker by searching in npm repository and this plugin has good ranking in the searching result, then I read the documentation finding no statement whether it's for PC or mobile platform, then I had a try... If the documentation can includes content for the suitable scene, it will save me some time.. ",
    "radicalloop": "This works for me.\n<DatePicker\n    placeholderText=\"Click to select a date\"\n    onChange={this.handleChange}\n    selected={this.state.date}\n     dateFormat=\"MMMM DD, YYYY\"\n     minDate={moment()}\n     ref={el => this.onDatepickerRef(el)}\n     customInput={\n          <Input  labelPosition=\"right\" label={<div className=\"label__text\">Date</div>} />\n      }\n/>\nand \nonDatepickerRef(el) {        \n    if (el && el.input) {\n      el.input.inputRef.readOnly = true;\n    }\n}. ",
    "OmkarRa": "\nThis works for me.\n<DatePicker placeholderText=\"Click to select a date\" onChange={this.handleChange} selected={this.state.date} dateFormat=\"MMMM DD, YYYY\" minDate={moment()} ref={el => this.onDatepickerRef(el)} customInput={ <Input labelPosition=\"right\" label={<div className=\"label__text\">Date</div>} /> } />\nand\nonDatepickerRef(el) { if (el && el.input) { el.input.inputRef.readOnly = true; } }\n\nThank you. That worked for me too. I had to make a minor change though.\n\nonDatepickerRef(el) { if (el && el.input) { el.input.readOnly = true; } }\n. \n",
    "zaferkadi": "Any updates regarding this PR when will it be merged?. ",
    "joeflynn": "I'm experiencing the same error on keyboard navigation. If I remove minDate and maxDate, the error disappears and keyboard navigation starts working again. I feel like the two are probably related since @himynameisdave is also passing those props.\nI'm experiencing this on v1.8.0.. ",
    "GreenDavidA": "That did it. Thank you!. ",
    "JacoGasp": "Same for me using only showTimeSelect without showTimeSelectOnly. A workaround is to add to index.css the following\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n    padding: 0px\n}. ",
    "oknoorap": "I agree. react-datepicker is wonderful, why we need moment as dependencies? :cry: . ",
    "ahmadalfy": "Even better I think date-fns. I am using Formik like the following and the validations are working as expected\n```\nclass MyDatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n  handleChange = value => {\n    this.props.onChange(this.props.id, value);\n  };\nhandleBlur = () => {\n    this.props.onBlur(this.props.id, true);\n  };\nrender() {\n    return (\n      \n    );\n  }\n}\n``. @idoo do you mean using Formik or without it?. No I always use thevalidationSchemaoption and thevalidate` function is triggered automatically after blur and change.. ",
    "bertho-zero": "There is no valid reason why an extra div should be added, it is a resolvable technical limitation. https://github.com/FezVrasta/react-popper/issues/79. I guess it's not going to be easy, I'll try. :grin: . I have not tried yet.. @prayerslayer @martijnrusschen It works well with the same test using enzyme.. ",
    "saunders1989": "https://github.com/Hacker0x01/react-datepicker/pull/1356 is a much better approach. ",
    "hamilton-b": "This is perfect - thanks!. ",
    "alphanumericone": "Did you find a way to do this?. I also use a custom input, but I do not pass the placeholder prop to my custom input (although it supports that) but provide the placeholder to the DatePicker placeholderText prop.. ",
    "klov": "Did  you   updated your state in function onChange ?. ",
    "gangwar1": "i am also facing the same issue.. ",
    "NguyenDa18": "@karlkras , @gangwar1 \nThe 'selected' prop is only set when you trigger the 'onChange' prop when you choose a date on the datepicker. The prop 'onChangeRaw' is what is actually connected to the input box. When you make a change in the input box, onChangeRaw should do the handling like so:\njavascript\n<Datepicker\n onChangeRaw={e => customHandler(moment(e.target.value))}\nonChange={date => handleDateAndSelectedPropUpdated(date)}\n/>\nHope this helps!. @karlkras \nI worked out something that might fulfill your case. I had to set a prop to your custom component. I've worked with react-datepicker using redux and that was how we got the default date to show, because it was stored as a prop in the global state. Hope this helps.\n. @karlkras Thanks for liking my solution! CodeSandbox is fantastic for snippets like these -check out Repl.It as well! Happy coding.. ",
    "YahyaAhmad": "You can also use onChangeRaw: onChangeRaw={(event) => { event.preventDefault(); }}. You should use selected instead, I think it doesn't watch the value prop.. ",
    "danclax": "Skip that. These days from previous months are so confusing!. ",
    "kc5ez": "Figured it out that the 1 hour difference is due to daylight savings time. . ",
    "parthiiita": "@karlkras put reactdatepicker in bottom part of the screen and open the dateselector, it gets opened on top of the field which is currect but change the month using the right left arrow and since for september 2018 to october 2018 the number of rows differ hence the react-datepicker-popper alignment gets misaligned, basically the transform: translate3d(100px, 255px, 0px) is not being updated hence once we try to select a date by clicking a date on this misaligned react-datepicker-popper it only corrects the alignment and the date doesnt gets selected, next click will only select the date as the first click went in vain to correct the alignment by updating the transform property, this is only happening when the date picker is placed in the bottom part of the screen and the datepicker gets opened on top of the field as there is no space below the field on the screen.. please refer to the video link for reproducing the issue.\nhttps://drive.google.com/file/d/175qTPfFWSBw4b0VZmpuLO6BqE3WqHPPP/view. ",
    "Daniel-Itemize": "Thanks for your response. I found a work around. Best!. ",
    "tureey": "\nI am using Formik like the following and the validations are working as expected\n```\nclass MyDatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n  handleChange = value => {\n    this.props.onChange(this.props.id, value);\n  };\nhandleBlur = () => {\n    this.props.onBlur(this.props.id, true);\n  };\nrender() {\n    return (\n      \n    );\n  }\n}\n```\n\nSince you are using Arrow functions @ahmadalfy you don't need to use .bind() in the constructor. So, You could omit all the constructor and binding thing. BTW, I'm trying the same thing and it's not working for me :(. Why is that? @mjangir \n\n\n\nI am using Formik like the following and the validations are working as expected\n```\nclass MyDatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n  handleChange = value => {\n    this.props.onChange(this.props.id, value);\n  };\nhandleBlur = () => {\n    this.props.onBlur(this.props.id, true);\n  };\nrender() {\n    return (\n      \n    );\n  }\n}\n```\n\nSince you are using Arrow functions @ahmadalfy you don't need to use .bind() in the constructor. So, You could omit all the constructor and binding thing\n\nI try to avoid arrow functions in class properties though :)\n\n. ",
    "mjangir": "\n\nI am using Formik like the following and the validations are working as expected\n```\nclass MyDatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n  handleChange = value => {\n    this.props.onChange(this.props.id, value);\n  };\nhandleBlur = () => {\n    this.props.onBlur(this.props.id, true);\n  };\nrender() {\n    return (\n      \n    );\n  }\n}\n```\n\nSince you are using Arrow functions @ahmadalfy you don't need to use .bind() in the constructor. So, You could omit all the constructor and binding thing\n\nI try to avoid arrow functions in class properties though :). ",
    "jantaylor": "Tried to replicate this. It disappears like expected for me. If I don't click outside the input and switch tabs then come back, it pops open.\nLatest chrome v69x, OS X Mojave.. ",
    "nryumin": "Just tried on my android tablet (galaxy tab A chrome). Same bug. ",
    "adamwhiles": "I see the same issue as well. Select a date, the calendar popup stays in view until you click somewhere outside of the popup. I don't see this issue with the example on reactdatepicker.com but I do see it in my own application.\nI've tried with and without setting shouldCloseOnSelect\n<DatePicker\ndateFormat=\"YYYY/MM/DD\"\nselected={moment(this.state.startDate)}\nonChange={this.handleDateChange} \nshouldCloseOnSelect={true}\nname=\"startDate\"/>. ",
    "Sajam": "+1\nScreencast: https://drive.google.com/open?id=19KUg65IL1rxkD-JHKHija-PJCG28Tmpy. Possible workaround (minimal effort example):\n<DatePicker\n    ref=\"timePicker\"\n    onChange={value => {\n        this.refs.timePicker.cancelFocusInput();\n    } />\nI'm not 100% sure what are (and if there are any) drawbacks of using cancelFocusInput directly, but seems to be OK for me.. ",
    "katiawheeler": "Can confirm, had the same issue. When I updated to the latest react version (16.6.3) it works fine.. ",
    "OHaidukova": "package.json\n\"react\": \"^16.4.2\",\n\"react-dom\": \"^16.4.2\",. React and React-dom installed, like react-select. They work but Datepicker doesn't work.\nI try to use Datepicker in gulp and webpack, it has the same result (but different errors).\nDo you have a working project with React 16.4 and Datepicker?. ",
    "sammusic27": "the same for me.. ",
    "arran549": "same - I rolled back to version 1.4.1 (current Latest) and it's working. ",
    "allanserra1612": "Even though I was returning the version to 1.4.1, it had not worked, I updated the react and react-dom to version 16.0.0 and it worked\nI left the react-datepicker version as 1.4.1. ",
    "AlinaCapotaSG": "I have the same problem.. ",
    "briangleeson": "Run into the same issue as well when 1.7.0 was automatically picked up in our build pipeline. Rolling back to 1.6.0 works fine.\nBased on the discussion above, could it be related to this commit that was merged after 1.6.0? Perhaps the Manager from react-popper can be undefined in some circumstances leading to the error from the OP. ",
    "ndinhphi": "The same for me. My version is 1.6.0. ",
    "sizeight": "Same here, up to version 1.6.0 works.. I use react-datepicker and reactstrap in my project. Both have react-popper as a dependency. In react-datepicker v1.7.0 the react-popper depencency was upgraded from ^0.9.1 to ^1.0.2. This is the update that broke for me.\nreacstrap has dependency for react-popper of ^0.10.4\nIt seems the conflicting dependencies on react-popper major versions causes problems.\nThere is an outstanding issue to get reactstrap compliant with react-popper 1.0.x and it mentions that using packages with dependencies on different versions of react-popper together causes confusing errors.\nSee -> https://github.com/reactstrap/reactstrap/issues/1197#issuecomment-430104025. Problem solved. This could be the cause of issue for others as well?\nIt boils down to webpack configuration.\nThe issue I experienced related to a react-popper dependency conflict\nI use react-datepicker and reactstrap in my project, both depend on differing versions of react-popper. react-datepicker upgraded its react-popper dependency in the 1.6.0 -> 1.7.0 release. This caused my code to break. The reason has to do with reactstrap depending on react-popper 0.10.4 and react-datepicker now depending on a new react-popper major release 1.x.x.\nWhy would their differing dependencies cause a crash, isn't NPM supposed to manage conflicts like this? Yes, but the issue is in my webpack config. \nwebpack.config.js\n...\nmodules: [\n  path.join(__dirname, '../node_modules')\n]\n...\nThis forces all modules to resolve from the root node_modules, causing reactstrap to reslove the wrong react-popper.\nChange webpack.config.js to:\nmodules: [\n  'node_modules'\n]\nThis resolves node_modules hierarchically, ensuring react-datepicker and reactstrap each resolve to the correct dependency of react-popper.\nGot the clue here -> https://github.com/webpack/webpack/issues/6505#issuecomment-366502560\n. @martijnrusschen Will try to get round to it.. ",
    "lakesare": "Having the same issue, @sizeight's solution didn't help me. And I don't have any popper.js-s conflicting.. I believe it's not working for us because our React is < 16.0.2.\nPopper's document says\n\nUsing React <=15 or Preact? The components created with them don't support to return fragments, this means that you will need to wrap <Reference> and <Popper> into a <div> to make react-popper work.\n\nWhereas they probably meant to say <=16, because that's when Fragment support is added to React (https://reactjs.org/blog/2017/09/26/react-v16.0.html).\nHere is a relevant react-popper issue: https://github.com/FezVrasta/react-popper/issues/183, and their codesandbox: https://codesandbox.io/s/zr96k9j483 which creates exactly the same error as we see.. ",
    "vladbalan": "React 15.6.1 - rolling back react-datepicker to 1.4.1 fixed this for me (1.8, 1.6 did not).. ",
    "shlaikov": "The same bug.\n\"react\": \"16.8.4\",\n    \"react-dom\": \"16.8.4\",\n    \"react-datepicker\": \"2.1.0\". ",
    "idanen": "Thanks.\nWow that was quick \ud83d\ude0a\nWhat's the plan for publishing a new version to npm?. ",
    "Darrken": "@aij Date_utils still serves as an abstraction, at least the same way it did for all the moment functions.  I don't think I could have done this without the previous work to move the moment logic into date_utils! I tried to keep any calls to new Date() or date-fns functions behind the date_utils functions so there's a single source. If you have a suggestion on how that could better be separated or abstracted (maybe I'm misunderstanding), let me know.. Oh, good catches, thanks!. Which version of date-fns are you using? To take advantage of the latest date-fns localization file features (and to better match the previous moment localization), the alpha version was used in react-datepicker, so you may need to try a new version of date-fns: npm install date-fns@next\nAnother option if you don't want to go alpha is just grab the latest date localization files and use those independently: https://github.com/date-fns/date-fns/tree/master/src/locale. This was fixed in #1548.. You're right, I was thinking they'd need it in their downstream project but they shouldn't. I'll make that more clear.. Actually you would need date-fns to load in whatever locale you needed (other than en-US). I added a function to register the locale as a default for the datepicker, but you'd still need to import it. I'll still adjust the text.. ",
    "4ware": "Please merge this into the master if no conflicts exist!!. ",
    "balbesina": "In my case onBlur is called twice. First time with event argument, second - without it.\nAs a temporary fix I've added if (!event) return.\nFirst onBlur is called from handleBlur and correctly passes event:\njs\n_this.handleBlur = function (event) {\n      if (_this.state.open && !_this.props.withPortal) {\n        _this.deferFocusInput();\n      } else {\n        _this.props.onBlur(event);\n      }\n      _this.setState({ focused: false });\n    };\nSecond one comes from setOpen -> setBlur:\n```js\n_this.setOpen = function (open) {\n      var skipSetBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  _this.setState({\n    open: open,\n    preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\n    lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n  }, function () {\n    if (!open) {\n      _this.setState(function (prev) {\n        return {\n          focused: skipSetBlur ? prev.focused : false\n        };\n      }, function () {\n        !skipSetBlur && _this.setBlur(); // HERE\n\n        _this.setState({ inputValue: null });\n      });\n    }\n  });\n};\n\n```. ",
    "Cicko": "We need this. Please resolve this.. Same with JAWS. ",
    "chandlerprall": "CI testrun failed because the test runner is using FF 56 which is 7 major versions behind and doesn't support how I implemented the scroll-into-view.. ",
    "rebirthtobi": "@zachgibson datepicker has a props called placeholderText. this is what is used, not the placeholder on the input. @zachgibson i now understand, but check through you can use class to manipulate as you like. ",
    "zachgibson": "@rebirthtobi Let me expound.\nI\u2019m trying to pass a custom Input component that has props like css coming from emotion. These props are not getting passed through for some reason.. My code looks like:\njsx\ncustomInput={(\n    <Input\n        name=\"requestedDate\"\n        value={props.value}\n        placeholder=\"Date\"\n        onClick={props.onClick}\n        css={{ marginTop: 16, width: '100%', '@media(max-width: 700px)': { fontSize: 16 } }}\n        readOnly\n        autoComplete={false}\n    />\n)}. I used placeholder as an example, but other props like css didn\u2019t work either.\nSolved this by making my input a component with all the props I needed.\njsx\n<DatePicker\n    customInput={<DatePickerInput value={props.value} onClick={props.onClick} />}\n/>\njsx\nconst DatePickerInput = ({ value, onClick }) => (\n    <Input\n        name=\"requestedDate\"\n        value={value}\n        placeholder=\"Date\"\n        onClick={onClick}\n        css={{ cursor: 'pointer' }}\n        autoComplete={false}\n        readonly=\"true\"\n    />\n);. This does work, however it breaks opening the datepicker on input focus.. So I found out a composed component is the issue. If you try to make an Input component then make a DatepickerInput component by composing it from Input it won\u2019t show the picker on focus.\nSo I\u2019m going to just make a root DatepickerInput component with all the props I need. Not the most flexible solution, but it solves my requirements as of now.. ",
    "cention-sany": "@zachgibson may be this can help https://github.com/Hacker0x01/react-datepicker/issues/1469#issuecomment-417756933 because what happen to my case is the readOnly props is not pass through into customInput's component. What I did is instead of pass with readOnly props I use another props name notClickable then inside customInput's component notClickable is treated as readOnly. May be you want to try use another name for those props that not passed through.. ",
    "rootedy-ffit": "+1. ",
    "booyokkk": "@CalebKAston I like your solution for #1337, but I think you should add some tests for that. If you have trouble with that, please, ping me and I'll help you.. @CalebKAston Please pull the latest master to your branch and resolve conflicts. Great job @CalebKAston. @martijnrusschen What do you think about this solution?. ",
    "CalebKAston": "@booyokkk I have added a new commit to this branch which proves the functionality through several new tests. Let me know if there is anything else you would like me to do.. @booyokkk I have that done! I merged in master, resolved all conflicts, and ensured my tests still passed. . @booyokkk @martijnrusschen Any news on this solution being merged into the project?. I updated PR to resolve the conflicts. The build is failing because another test (completely unrelated to the work I was doing) is now failing.. @martijnrusschen I resolved the issue with the CI failing. Can we get this merged now?. ",
    "shettyashwitha": "When will this be merged? Can someone update the status on this, please?. @martijnrusschen I have a dependency on this. Can you please merge this PR?. > Is this merge going to happen anytime soon?\n+1. ",
    "aliberkhsl": "minTime={new Date().setHours(0,0,0)}\nmaxTime={new Date().setHours(12,0,0)}\nIt should be ok.. ",
    "Nemec163": "\nminTime={new Date().setHours(0,0,0)}\nmaxTime={new Date().setHours(12,0,0)}\n\n\nIt's working, but: \nWarning: Failed prop type: Invalid prop minTime of type Number supplied to DatePicker, expected instance of Date.. ",
    "cbh6": "Thanks a lot for your answer.\nI was using date-fns v1.29.0. Switched to alpha and it worked like a charm !\n:dancer: . Yes, that was for trying some features :smile: \nFinally grabbed needed locale files and it also worked withouth having to use alpha version. Hi Lidia, cannot understand. What do you mean? Can you provide an example (code, pic or something)?. Here is explained why Spanish locale has months in lowercase https://github.com/date-fns/date-fns/issues/674.\nI didn't try to format locale months to achieve what you want and I don't know if that's possible in react-datepicker. If you are using local locale files maybe you can modify these fields manually. . ",
    "philippov": "Alpha version. Brilliant.... ",
    "LidiaRamirez": "How could you change from lowercase to the first letter to upper case and the rest to lowercase?. \n\nThe months and days are in lowercase according to code, as it is with camelCase\n. ",
    "makesitgo": "This behavior still occurs on my end:\nversion: \"react-datepicker\": \"^2.0.0\",\nThe code changes found in the commit referenced here are not reflective of what I see in lib on my local machine after pulling the package through yarn add react-datepicker.  Has the fix not been released yet?. ",
    "hamza": "Rebasing and opening a version without conflicts momentarily. To anyone monitoring this, I could use some help interpreting the code coverage check here.\nThe above Codecov report seems to indicate from the deltas that coverage went up on all the affected files. But the \"patch\" metric is too low somehow? I don't understand.\nWould love to remedy this and do what it takes to get this merged. Thanks!. ",
    "aghoneim92": "Thank you :-)!. ",
    "sweetroll": "This would be great feature. Is there a timeframe for when this could be merged? Cheers.. ",
    "azizur": "Related to https://github.com/Hacker0x01/react-datepicker/issues/1040, https://github.com/Hacker0x01/react-datepicker/issues/932, https://github.com/Hacker0x01/react-datepicker/issues/1344, https://github.com/Hacker0x01/react-datepicker/issues/1208, and https://github.com/Hacker0x01/react-datepicker/issues/932. ",
    "mightym": "Same issue the other way around. If you've set minTime to 8:00 and you just select a date the time will be 00:00 . ",
    "TomiTakussaari": "I also found about this issue just when upgraded to 2.0. \nWas happy to get rid of moment.js, but received this in exchange...\nI could perhaps try to send PR for changing those window variables in date_utils.js to local variables, if that would be considered valid fix?. ",
    "tugkan": "+1. ",
    "willbee28": "Does it show how that is implemented? Also not to be an asset, but I think\nthat's kinda dumb, that should be on the user of the library. I like that\nthere is validation but I think it should be a choice and not in the form\nof a application-crashing bug.\nOn Wed, Nov 28, 2018, 1:37 PM J\u00e9r\u00e9mie Richardeau <notifications@github.com\nwrote:\n\nI think the component doesn't do it natively and lets you implement your\nown behavior.\nYou have to manage this in the onChange callbacks : for instance block\nthe date change or change the start/end depending of what is the value.\nFor my part I made the start and end have the same value if the period is\ninvalid and I think in the demo it is the first option that is implemented.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1563#issuecomment-442556991,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AZHNAfFFcUz4tL6u4Hisq29pBc2Uiz5bks5uztfvgaJpZM4Y4DOZ\n.\n. Also, this is most likely beyond this ticket, but I submitted another\naddressing that if you begin to type 20 for the year or 19 for the 20th\ncentury, the other date updates automatically to 2020 of 2019 for 20th\ncentury. Weird that it doesn't wait for the user to finish typing I think.\n\nOn Wed, Dec 12, 2018, 8:08 PM Jonathan Keam <notifications@github.com wrote:\n\nOpened a PR against this (#1577\nhttps://github.com/Hacker0x01/react-datepicker/pull/1577). Comments\nwelcome!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1563#issuecomment-446804640,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AZHNAQhJ7eiRU1EXDNl_2ElLh_Ahmojwks5u4ah5gaJpZM4Y4DOZ\n.\n. That is really unfortunate. It should be triggered on hitting enter or\nclicking off. Don't know if this would interfere with other features\nthough. No problems that I can think of.\n\nOn Mon, Dec 17, 2018, 5:02 AM Nuno Cardoso <notifications@github.com wrote:\n\nI have kind of the same problem, when I type 01, it already is formatting\na date.\nI want to allow the user to type in the date, OR click on a button to open\nthe datepicker. That part is easy to implement with a CustomInput, my\nproblem is that onChange is always triggered\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Hacker0x01/react-datepicker/issues/1576#issuecomment-447787663,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AZHNAVY_BOMiDbN2BcXLSpy73nsgZMmnks5u52usgaJpZM4ZNroN\n.\n. \n",
    "AKosorukov": "\n\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e? \u0422\u0430\u043a\u0436\u0435 \u043d\u0435 \u0431\u044b\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043e\u043c, \u043d\u043e \u044f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0433\u043b\u0443\u043f\u043e, \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f, \u043d\u043e \u044f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u043e\u0440, \u0430 \u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c.\n...\nOn Wed, Nov 28, 2018, 1:37 PM J\u00e9r\u00e9mie Richardeau @.* wrote: I think the component doesn't do it natively and lets you implement your own behavior. You have to manage this in the onChange callbacks : for instance block the date change or change the start/end depending of what is the value. For my part I made the start and end have the same value if the period is invalid and I think in the demo it is the first option that is implemented. \u2014 You are receiving this because you authored the thread. Reply to this email directly, view it on GitHub <#1563 (comment)>, or mute the thread https://github.com/notifications/unsubscribe-auth/AZHNAfFFcUz4tL6u4Hisq29pBc2Uiz5bks5uztfvgaJpZM4Y4DOZ .\n\nI agree. In addition, when I enter a date from the keyboard (dd.mm.yyyy format), the react-datepicker interprets the date incorrectly, which causes the same error. Validate the data must user.. ",
    "jkeam": "Opened a PR against this (https://github.com/Hacker0x01/react-datepicker/pull/1577).  Comments welcome!. Looks like prettier clobbered the quotes (single/double).  I see the command run is prettier --write, but with no --single-quote option.\nLooks like date_utils.js was last touched Nov 17th.  Prettier, in particular the command prettier --write in package.json that overwrites the file in place on commit, was added Nov 25.\nWhat is the correct formatting?  Is there a .prettierrc that should be checked in or do you want to go with the standard defaults for prettier?  If the latter we are good to go :). Just rebased!. ",
    "sugarfree1": "It is fixed now. Could you release it, please?. ",
    "makalkin": "Hey @seanpascoe, I thought I had same issues then I noticed that react-datepicker is using date-fns above 2.0.0 and they changed formatting rules quite a bit, so In your case DD refers to day of the year Hope this helps you, or anyone who comes across.. ",
    "seanpascoe": "Ahh, thanks @makalkin! Yup, I was looking at the latest formatting documentation, which at this time is v1.29.0.. ",
    "cgat": "I see this happening when an invalidate date (new Date(\"\")) is passed in to selected. I wonder if that's the root cause to your issue.. ",
    "ztplz": "it seems like https://github.com/ant-design/ant-design/issues/11957.. ",
    "tishapp": "I got the same issue when I used this.state = { startDate: moment() }; Use moment().valueOf(). This will fix this issue. ",
    "Krknv": "That helps me:\n```\nconst { startDate } = this.state;\n...\nselected={value !== '' ? new Date(startDate) : null}\n```. Something like this for Browserify and Webpack:\n<Datepicker selected={process.browser && this.props.date} />. ",
    "JackHull": "Any updates on this? This bug just cost me 1 hour of my time to figure out, just because react-datepicker doesn't manage to handle invalid dates without crashing the whole damn react application - absolutely ridiculous.. @maxsd Apparently not - the easiest workaround is to check the date for validity yourself, before passing it to react-datepicker - this bug just seems to happen as soon as react-datepicker receives an invalid date object.. ",
    "Shaker-Hamdi": "I'm having the same error, I'm using redux-form with \"revalidate\" and anytime I try to type anything other than a date in the input the whole app crashes with that error.. ",
    "maxsd": "Hi guys, any news on this ? :/. ",
    "orestis": "I just had the same issue. I completely agree, using a node works just fine but you do get warnings in the console.. ",
    "pariola": "also can't use it in NEXT JS.. ",
    "tombiddulph": "For whatever reason the dateFormat prop is still set as MM/dd/yyyy when the locale is set to en-GB.\nhttps://github.com/Hacker0x01/react-datepicker/blob/93d4694c50cb894edb3884f802537feeec4c4c66/src/index.jsx#L85 \nSetting the dateFormat  prop to dd/MM/yyyy resolves the issue with or without the locale set to en-GB\n```js-jsx\nclass App extends Component {\n  render() {\n    return ;\n  }\n}\n```. ",
    "MickMonaghan": "This is a significant issue. Changing the locale should by itself be enough to change the presented format. Looks like this applies for all locales - not just en-GB. One should not have to set the dateFormat manually.\nThe locale data imported from date-fns looks like it should be adequate - here's the en-GB data: https://github.com/date-fns/date-fns/blob/master/src/locale/en-GB/_lib/formatLong/index.js#L7. Seems that this is an issue that should be logged against date-fns, rather than react-datepicker?\nAs things stand date-fns v2.x does not yet support Korean - ko is listed in https://github.com/date-fns/date-fns/blob/master/outdatedLocales.json.\nAdding support to date-fns for a particular locale is described here:\nhttps://date-fns.org/v2.0.0-alpha.27/docs/I18n#adding-new-language. ",
    "henit": "Format issue. never mind.. ",
    "lutakyn": "If you read their example,they don't use moment() anymore. It has been truncated, it is better to use new Date(). ",
    "NunoCardoso": "I have kind of the same problem, when I type 01, it already is formatting a date.\nI want to allow the user to type in the date, OR click on a button to open the datepicker. That part is easy to implement with a CustomInput, my problem is that onChange is always triggered . ",
    "shansmith01": "Is this going to be merged? Just dealing with this issue now. ",
    "tomershvueli": "I'm seeing the same issue and would like to be able to test the onChange for the datepicker. . ",
    "klzns": "You can do:\ndiff\n  <DatePicker\n   selected={this.state.startDate}\n   onChange={this.handleDateChange}\n+  dateFormat=\"P\"\n   locale={this.state.locale} />. ",
    "ericreis": "Thank you @klzns ! It's exactly what I was looking for.. ",
    "jennyscript": "I needed to add this test fix from another PR because there's a test failing on master https://github.com/Hacker0x01/react-datepicker/pull/1577/files#diff-4a52023af2254c0d28ddc8e88036ff61R318. ",
    "SajagTiwari": "if we remove dropdownMode=\"select\" then its working fine.. ",
    "Samik081": "+1, any workaround for this? Is there any way to set months/days strings manually? Component's sweet itself, but for my usecase it's useless without proper locale.. ",
    "yshap": "Hey, could someone give me information on this issue? I have the same problem\u044e Why does on Select event do not fire with time selection?. ",
    "pareshmutha": "Issue was with momentjs. ",
    "Dakkers": "also experiencing this issue. @VSelemanov what version are you using?. For 2.1.0, there isn't any description, and the commit representing the change is just a version bump. \ud83d\ude2d . ",
    "pravoobi": "We are facing the same issue with version 2.0.0. ",
    "VSelemanov": "@Dakkers Hi. I am using react-datepicker 2.0.0. I found one more problem - when i use Date Range (example) if i try to choose right border of range less then left border of range datepicker crashes. ",
    "kilsen": "I am experiencing the same problem. I have version 2.1.0.  I can provide some additional examples that might be helpful in identifying the root cause.\nEnd of 2018: Selecting 30 December 2018 or 31 December 2018, the input field shows the year 2019. \nEnd of 2017: If I choose 31 December 2017, it shows 2018, but if I choose 30 December 2017, it correctly shows 2017.\nEnd of 2016: All dates display correctly.\nEnd of 2015: Dates from 27 December 2015 through 31 December 2015 display incorrectly, but 26 December 2015 is correct.\nSummary of the observed pattern: selecting a date in the last week of December (starting on Sunday) will result in an incorrect year being displayed. So if January 1 is Monday, selecting December 31 (Sunday) will show an incorrect year. If January 1 is Tuesday, then both December 30 (Sunday) and December 31 (Monday) will be incorrect. Etc. If January 1 is Saturday, then any date between December 26 (Sunday) and December 31 (Friday) will be incorrect.\nIn other words, when selecting a date in the last week of the year -- i.e., the bottom row of the calendar -- if January 1 is visible in that calendar row, the year will be incorrectly displayed in the input field.. ",
    "danconnell": "FYI this problem can be fixed by using yyyy in your dateFormat instead of YYYY.\nCorrect: dateFormat=\"dd/MM/yyyy\"\nIncorrect: dateFormat=\"dd/MM/YYYY\"\nYou should do this anyway because on some browsers you get an error trying to use YYYY: \n`options.awareOfUnicodeTokens` must be set to `true` to use `YYYY` token; see: https://git.io/fxCyr. ",
    "sdubrez": "@danconnell You made my day, thank's!. ",
    "jeremyk": "Hmm. I guess I could have used datepicker.input. I may switch to that while I wait to see if you want to upgrade react.. ",
    "ossiv": "I am also seeing this error, and I am wondering how anyone has gotten this library to work in its current state. This is what the function this exception is raised in looks like in the current npm package:\njs\na.formatWeekNumber = function(e) {\n                return a.props.formatWeekNumber ? a.props.formatWeekNumber(e) : function(t) {\n                    return function(e, t, n) {\n                        if (2 > arguments.length)\n                            throw new TypeError(\"2 arguments required, but only \" + arguments.length + \" present\");\n                        var r = c(e, n)\n                          , a = s(t);\n                        r.setMonth(0),\n                        r.setDate(a)\n                    }(t, 1),\n                    Se(function(e, t) {\n                        if (1 > arguments.length)\n                            throw new TypeError(\"1 argument required, but only \" + arguments.length + \" present\");\n                        var n = t || {}\n                          , r = n.locale\n                          , a = r && r.options && r.options.weekStartsOn\n                          , o = null == a ? 0 : s(a)\n                          , i = null == n.weekStartsOn ? o : s(n.weekStartsOn);\n                        if (0 > i || i > 6)\n                            throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n                        var u = c(e, n)\n                          , l = u.getDay()\n                          , p = 6 + (i > l ? -7 : 0) - (l - i);\n                        return u.setDate(u.getDate() + p),\n                        u.setHours(23, 59, 59, 999),\n                        u\n                    }(t), t) ? function(t, n, r) {\n                        if (2 > arguments.length)\n                            throw new TypeError(\"2 arguments required, but only \" + arguments.length + \" present\");\n                        var a = e(t, r) // ** exception raised here **\n                          , o = e(n, r)\n                          , i = a.getTime() - u(a)\n                          , s = o.getTime() - u(o);\n                        return Math.round((i - s) / pt)\n                    }(t, function(e, t) {\n                        if (1 > arguments.length)\n                            throw new TypeError(\"1 argument required, but only \" + arguments.length + \" present\");\n                        var n = c(e, t)\n                          , r = new Date(0);\n                        return r.setFullYear(n.getFullYear(), 0, 1),\n                        r.setHours(0, 0, 0, 0),\n                        r\n                    }(t)) + 1 : 1\n                }(e)\n            }\nI have marked the line where the exception is raised. e here seems to refer to the parameter of the function (called startOfWeek in the plaintext source).\nThis seems to be a part of an inlined function from date-fns, namely differenceInCalendarWeeks (Line 56). This line uses a function that has the same name as the parameter for formatWeekNumber. It would seem to be a bug where the minifier has conflated the two names, and replaced them with the same symbol.. ",
    "jiangli1984": "I have the same issue...any solution?\nis it related to react version or the warning while installing?\nbelow is info about my fresh project , any advise would be Appreciate!\n{\n  \"name\": \"DatePick\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"react\": \"16.6.3\",\n    \"react-datepicker\": \"^2.1.0\",\n    \"react-dom\": \"^16.8.3\",\n    \"react-native\": \"0.58.5\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"7.0.0-bridge.0\",\n    \"babel-jest\": \"24.1.0\",\n    \"jest\": \"24.1.0\",\n    \"metro-react-native-babel-preset\": \"0.52.0\",\n    \"react-test-renderer\": \"16.6.3\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n. > ### Expected behavior\n\nInvariant Violation: View config not found for name input\nI got this error. Please help me solved it. Thanks!\nSteps to reproduce\n\n\nit does not support on RN...just got it... sorry, I got the wrong place. it does not support on RN...right? little frustrate...\nbut this is wonderful component. how can I run it on RN.... ",
    "glebtv": "Adding all date-fns/something to external in rollup config seems to make it 100kb\nThis seems to be because each date-fns module has its own package.json file\n```\nimport nodeResolve from \"rollup-plugin-node-resolve\";\nimport babel from \"rollup-plugin-babel\";\nimport commonjs from \"rollup-plugin-commonjs\";\nimport { list as babelHelpersList } from \"babel-helpers\";\nimport pkg from \"./package.json\";\nimport fs from \"fs\"\nimport path from \"path\"\nvar dateFnsDirs = fs.readdirSync(path.join(\".\", \"node_modules\", \"date-fns\")).map((d) => date-fns/${d})\nconst config = {\n  output: {\n    format: process.env.BABEL_ENV\n  },\n  plugins: [\n    nodeResolve({\n      jsnext: true,\n      extensions: [\".js\", \".jsx\"]\n    }),\n    babel({\n      exclude: \"node_modules/**\",\n      plugins: [\"external-helpers\"],\n      externalHelpersWhitelist: babelHelpersList.filter(\n        helperName => helperName !== \"asyncGenerator\"\n      )\n    }),\n    commonjs()\n  ],\n  external: Object.keys(pkg.dependencies).concat(\n    Object.keys(pkg.peerDependencies)\n  ).concat(dateFnsDirs)\n};\nexport default config;\n```. ",
    "Quutti": "Any updates / comments on this? . ",
    "mvenaas": "Moment.js was removed as part of v2.0. \nI am also experiencing problems with react-datepicker showing a days corresponding \"number\" in a year rather than the date. Have you found a solution yet?. I downgraded from v2.0 to v1.8 and continued with Moment.js while in search for a better solution.. ",
    "mkosir": "@ArtemBernatskyy  @mvenaas since there is no more Moment.js dependency you should use date format in your case like so dateFormat={'yyyy-MM-dd'}. @martijnrusschen I tried to figure out why codecov/project fails and how to fix it, but unable to do so, not much info is available in the fail report. Can you help me out with this?\nEdit: also noticed that other users are facing same issue - https://github.com/Hacker0x01/react-datepicker/pull/1591#issuecomment-462390494. @martijnrusschen can anybody can take a look at this PR, so we could merged it? It's opened for quite some time now (1 month).. Thanks.. @streletss thanks for your proposition, I modified the code so it's now backward compatible with an older projects.. ",
    "xxyuk": "Day.Js is a nice alternative to me, supper small and the same date format. May be we could consider using it as a replacement of date-ins\n\u23f0 Day.js 2KB immutable date library alternative to Moment.js with the same modern API\nhttps://github.com/iamkun/dayjs. ",
    "DiscoDancer": "Hi.\nI don't know about ru, I've done for Finnish only.\nHere are some steps:\n\ninstall date-fns, in my case: ^2.0.0-alpha.26\nimport it somewhere before usage, in my case import * as fi from \"date-fns/locale/fi\";\nimport this import { registerLocale } from \"react-datepicker\";\ndo this: registerLocale(\"fi\", fi);\nand finally do this:\n<DatePicker\n            onChange={onChange}\n            id=\"startDate\"\n            required={true}\n            disabled={isDisabled}\n            className={inputClassName}\n            selected={selection}\n            locale=\"fi\"\n            dateFormat=\"d.M.yyyy\"\n            autoFocus={offerTypeChangedToNew}\n          />. \n",
    "novenix": "in the part of Field (imported from 'formik') still not working without the type='textarea' label\n. ",
    "andresg747": "+1. ",
    "jony89": "This bug caused by the following commit : \nhttps://github.com/Hacker0x01/react-datepicker/commit/f0d4c560c3f5722366c553bbbca3748cd03688fe#diff-eae406df76db9079672d27cd79e9079eR114 \nA call to formatDate was added which in turn calling to getLocaleObject that is looking for a window object, thus failing on server side.\n@Darrken . > Facing the same issue.\n\nSince there's no any other solution - here's my workaround.\n{ process.browser && <Datepicker {...props} /> }\n\nThis will cause a diff between server and client rendering.. ",
    "pedro-pedrosa": "Also getting an error here. registerLocale stores locale data in the window object.\nWhy do we have to register locales in the first place? Registering a default locale probably makes sense, but registering other locales and then referring to them by name is a bit strange if you ask me. Why not just pass the locale data to the component?. I have stopped using locales on datepickers.\nIn theory I guess you could disable them only on SSR, when client code picks up it will update to the desired locale.\nIf you don't want to do that, maybe you can create a global mock window object for this purpose.. To me this wasn't working because I was using locales on the datepicker. If you are not using locales then it's a different issue. Are you sure you're getting the window is not defined error?.. ",
    "abobykin": "Guys, @novenix @andresg747 @jony89 @pedro-pedrosa How do you think, is there any possibility to make this datepicker work on SSR configuration? \nIf Yes - how?\nIf NO or you stop trying and make other decision - could you please advise - what other solution have you found? \nThanks in advance!. Hey, thanks for fast feedback Pedro! \nCould you please show me the example of how use stop 'locales on datepickers' or the a little bit more detailed explanation that other variant maybe with mock object (I'm a little bit like stuck but deadline is too close) ? \nIt brakes for me on a selected attribute \n        \nwhen I removing it -> error goes away but nothing's switching in datepicker of course )\nThank you very much in advance, man!. @pedro-pedrosa Forgot you name tag in the post above) Looking forward to discuss if you have time of course.\n. With this selected={this.state.startDate} - Yes this doesn't work for my project, \"just from the box\". \nBut I've just made the switching dates with the way which is quite enough for me for now through onSelect={this.handleSelect} and binding the result in this function through the state object to the other visible input ) ! \nBut now the other one strange thing... , YEARS seems not working for me, I mean they are not switching independently, any datepicker should have this option) for faster select date of birth (Of course if the user is not too young)))) ) \nI've found and wrote such attribute for this, but the header of it just gone)\n        renderCustomHeader={({\n          date,\n          changeYear,\n          changeMonth,\n          decreaseMonth,\n          increaseMonth,\n          prevMonthButtonDisabled,\n          nextMonthButtonDisabled\n        }) => {}}\n\nMaybe you made it work of course somehow for this datepicker? (who knows). I've found 'showYearDropdown' attribute it works for me! thank you anyway bro @pedro-pedrosa . Have such error too. . @ashishlal91 Hi! As for me - don't know actually how it's all around Gatsby, have only React/Redux/Node.js in the stack I was starting working with couple of days ago. \nI've made this thing working for my needs with a help of 'handleSelect' attribute. I've catched it in my React component function and then save it to the state object value which I bind to the other input below this input with datepicker which I've made transparent with CSS).. @ashishlal91 Please note that selected={this.state.date} was not working for me, right for the reason you described I suppose, I've just found this with debugger and remove this line at all from the the html component. It works only without this ) Hope it would be helpful for you!\n. @ashishlal91 Sounds cool! I'll try it soon) But of course this folder is rewritable. Let's give it a try and then maybe offer a fix to creators of this module. . ",
    "macrozone": "\nI've found 'showYearDropdown' attribute it works for me! thank you anyway bro @pedro-pedrosa\n\ncan you elaborate? how did this fix your ssr issue?. yes, adding stuff to global is a no-go for libraries like that. ;-). ",
    "litrs": "This versions is working!!!\n\"react-datepicker\": \"^1.8.0\",. ",
    "redgenie": "The problem still persists; I'm using ^2.2.0. The picker doesn't show up, just the input, so I tried using \"inline\" to investigate and as soon as I add that prop, I get the following error:\n```\nwindow is not defined\nReferenceError: window is not defined\n    at getLocaleObject (/path/to/project/node_modules/react-datepicker/lib/index.js:6116:5)\n    at getStartOfWeek (/path/to/project/node_modules/react-datepicker/lib/index.js:6040:28)\n    at Calendar._this.header (/path/to/project/node_modules/react-datepicker/lib/index.js:7886:25)\n    at Calendar._this.renderDefaultHeader (/path/to/project/node_modules/react-datepicker/lib/index.js:8092:17)\n    at Calendar._this.renderMonths (/path/to/project/node_modules/react-datepicker/lib/index.js:8150:109)\n    at Calendar.render (/path/to/project/node_modules/react-datepicker/lib/index.js:8268:12)\n    at processChild (/path/to/project/node_modules/react-dom/cjs/react-dom-server.node.development.js:2942:18)\n    at resolve (/path/to/project/node_modules/react-dom/cjs/react-dom-server.node.development.js:2795:5)\n    at ReactDOMServerRenderer.render (/path/to/project/node_modules/react-dom/cjs/react-dom-server.node.development.js:3185:22)\n    at ReactDOMServerRenderer.read (/path/to/project/node_modules/react-dom/cjs/react-dom-server.node.development.js:3144:29)\n    at renderToString (/path/to/project/node_modules/react-dom/cjs/react-dom-server.node.development.js:3629:27)\n    at render (/path/to/project/node_modules/next-server/dist/server/render.js:42:16)\n    at renderPage (/path/to/project/node_modules/next-server/dist/server/render.js:102:16)\n    at Function.getInitialProps (/path/to/project/cars/.next/server/static/development/pages/_document.js:1139:25)\n    at _callee$ (/path/to/project/cars/.next/server/static/development/pages/_document.js:2477:77)\n    at tryCatch (/path/to/project/node_modules/regenerator-runtime/runtime.js:62:40)\n```\nI'm using NextJS 8 for server side rendering. I just submitted a pull request to fix it here https://github.com/Hacker0x01/react-datepicker/pull/1666\nYou can use that while it\u2019s being reviewed.. ",
    "levadadenys": "Facing the same issue.\nSince there's no any other solution - here's my workaround.\n{\n  process.browser && <Datepicker {...props} />\n}. ",
    "patilharshali": "I had to wrap Datepicker into  tag then the material-ui tooltip appears.. ",
    "adamthewan": "You have to do \nminTime={moment().hour(10).toDate()}\n    maxTime={moment().hour(16).toDate()}. ",
    "giannis-dallas": "This is related to create-guten-block or something else. ",
    "jjjss94": "Wow!! Youre my savior today! Its works thx. ",
    "beatfreaker": "Tried debugging the click event and found below details\n- when it is working properly, below is the path captured by react-dom, and we can see the origin click event is from the day.\n\n\nwhen it is not working, below is the path captured by react-dom, and here the origin of click event is from month div and not from day div.\n\n\ngot these path details from below function of react-dom\njs\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {}\nand call stack is as below\n\n. ",
    "julien1619": "I'm facing the same problem. In fact this library is not compatible with SSR (Server Side Rendering).\nAfter a short investigation, the localization data are stored using window, which is not defined at compile-time in Gatsby. It's because this library share the locale you configure somewhere to the whole app.. I've succeeded to make it work but the translations won't work in SSR.\nTo do it here is what I've done:\n```\nconst isSSR = typeof window === 'undefined';\nif (!isSSR) {\n  registerLocale('fr', fr);\n  setDefaultLocale('fr');\n}\n// In the render function\n\n``\n. There is a PR waiting to be merged that will fix this bug : #1634 . I forked #1634 (needed to build and push the built files) to test it on my Gatsby build and it works. For now I'm using\"react-datepicker\": \"github:julien1619/react-datepicker#window-fix\"in mypackage.json` file until the fix is made available.. Hi! When do you plan to merge this PR? It would be really useful to fix the SSR case with translations enabled. Thanks!. ",
    "ashishlal91": "@julien1619 @abobykin Could you find some work around?. @abobykin oh so you removed the selected option and get it worked! Great but I think this should be.fixed from the module itself. Why someone from the team is not replying . Well I have found a solution. \nGo to node_modules/react-datepicker/es/index.js and define the window variable\nvar window = require('window')\n. @ron766  What's not working?. ",
    "ron766": "@ashishlal91 not working!. ",
    "epicsports": "For me in gatsby it's working something like that: \n<DatePicker\n        locale=\"en\"\n        selected={this.props.field.value}\n        dateFormat=\"yyyy/MM/dd\"\n        withPortal\n        onChange={this.handleChange}\n      />. ",
    "YoSoyAisoy": "Resolved. Changing some of the properties seems to solved it. I haven't pinpointed which property caused this behaviour. Will update when I found it.. This bug is resolved if the following props are added :\n\nselectsEnd,\nselected,\nstartDate,\nendDate. \n",
    "flppv": "You can check this https://github.com/Hacker0x01/react-datepicker/releases. Oh, I just found that it works fine with \"M/d/YYYY\"\nStill would be cool if it would work with common format.. ",
    "samhstein": "same issue here, button or read only custom input would probably work, but it would be nice to have an option to hide the keyboard.. ",
    "allenaveen": "I am also getting the same issue. Any solution on this?. ",
    "rista86": "Having same problem and still no fix on this. Tried fix from other topic but that didn't worked for me.. ",
    "c0debreaker": "Folks, I switched to material-ui-pickers. I love it! No issues on their DatePicker.. ",
    "tinuts": "Use a custom input to override the default one, works for me :) \n```\n// DateInput.jsx\nimport React from 'react';\nexport default class DateInput extends React.PureComponent {\n  state = {readOnly: false};\nrender() {\n    return (\n       this.setState({readOnly: true})}\n        onBlur={() => this.setState({readOnly: false})}\n        readOnly={this.state.readOnly}\n      />\n    );\n  };\n}\n```\n```\n// DatePicker.jsx\n}\n  ...\n/>\n```. ",
    "evaldosantos": "I have faced the same problem @shmulikamin. I figure out that it's a named export.\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nYou can check it here: https://github.com/Hacker0x01/react-datepicker/blob/master/docs-site/src/examples/locale.jsx. ah sorry, my bad, I thought you were trying to import it directly like:\nimport registerLocale  from \"react-datepicker\";. ",
    "shmulikamin": "Thanks\nBut I tried it already, and I still get the same message. ",
    "loopdtw": "would also like to know this as well!. ",
    "stepseazy": "\n. Did the trick. Thanks a bunch, great library. ",
    "aviklai": "@martijnrusschen Hi, I have used this myself. My use case was that I needed to highlight x number of days when hovering a date. For example, if I hover on a date, I wanted the next 5 days to be highlighted. This pull request allows me to change the highlighted days using the onDayMouseEnter callback and remove the highliting using the onMonthMouseLeave callback .. @martijnrusschen Hi, done - I have resolved the conflicts.. ",
    "josuevalrob": "It works, in fact, if I check the event onFocus, I got all that I need, but I want to separate the logic from my birthday component. Is there a way to avoid managing states in the component?. I don't want to create a class component at this level, so I tried this: \nconst NacimientoInput = (props) => {  \n  return (\n  <React.Fragment>\n    <label htmlFor=\"username\">A\u00f1o de nacimiento</label>    \n    <DatePicker\n        selected={!props.data ? new Date() : props.data} \n        name = \"nacimiento\"\n        onFocus={props.handleChange}\n        className={`form-control ${ props.style }`}\n        showYearDropdown\n        dateFormatCalendar=\"MMMM\"\n        scrollableYearDropdown\n        yearDropdownItemNumber={50}\n      />\n  </React.Fragment>\n  )\n};\nIn my handleChange method, in the parent component, I got the event.target, with all the toys, the name and the value. But, something goes wrong with the date picker:\n\nWarning: Failed prop type: Invalid prop selected of type String supplied to DatePicker, expected instance of Date.\nWarning: Failed prop type: Invalid prop selected of type String supplied to Calendar, expected instance of Date\nWarning: Failed prop type: Invalid prop date of type String supplied to YearDropdown, expected instance of Date\nWarning: Failed prop type: Invalid prop selected of type String supplied to Month, expected instance of Date.\n\nThe date from the state didnt update: \nidentificacion: {\n      email: '',\n      username: '',\n      password: '',\n      sexo: '',\n      nacimiento: 'Invalid Date',\n      nif: ''\n    }\nI will check my actions and my reducer to get any clue. \nthanks anyway. . At the end, I did this on my handleEventfrom the Form. \nhandleChange = event => {\n    if(event instanceof Date ){ //This conditional sucks!\n      this.props.addField({...this.props.user['identificacion'], ['nacimiento'] : event})\n    } else { //the rest of inputs changes.... ",
    "ej9x": "This is described in issue https://github.com/Hacker0x01/react-datepicker/issues/1603#issuecomment-473902060\nA problem occurs only in the unpkg umd build.. ",
    "markijbema": "I think it would be better to pin these more exactly. Otherwise different dev environments might have different outputs, giving annoying merge conflicts in the generated file\n. why not set focus to dontBlur? That way you don't need an if.\nAlso, I think shouldBeFocussed is better than dontBlur. Negative function names lead to double negations, which leads to confusion, which leads to sadness, which leads to anger which leads to the darkside. Therefore I prefer positive function names ;)\n. I'm not really a fan of using switch. Does our ci check that every case has a break? Otherwise it's really easy to introduce confusing errors here.\n. move into if.\n. I would call this 'step'\n. especially since here it isn't really incrementing.\n. why is the ''{\" not on the previous line?\n. use ternary\n. extract to method/function\n. I don't really like doing so much logic in the initialisation, why not clone here?\n. ",
    "mvgijssel": "Title says React 0.12.2, but this dependency is 0.13\n. ",
    "reedloden": "Scoutboy.\n. ",
    "np": "Are these properties, really?\nJudging from the lack of apparent effect of setting startDate or endDate on the DatePicker component and a quick look at the code, these two lines could be removed.\n. ",
    "lf-kiranpariyar": "Yes, you are right but i think scrollable year dropdown mainly needed in case of date of birth field so when scrollableYearDropdown is true then we generate initially 50 passed year otherwise we do not generate many years, 5 initial year value will work fine. That's why i made it optional.\n. ",
    "lbrdar": "You are completely right, that is exactly why I changed this in later commit. setState allows callback as second argument, which ensures to return new state as this.state.\nSo  () => this.props.onMonthIncrease(this.state.date) will call onMonthIncrease function (that user sent as prop) with new date as argument, allowing user to do whatever he wants with this info.. ",
    "Qrysto": "then please keep this in mind and when you have other major changes, you can consider taking this up along with them to make all breaking changes at once, does that make sense?. ",
    "Gurkenschreck": "I second that. Being able to overwrite react-datepicker__input-container would be nice.. ",
    "ramsunvtech": "selected value has to be checked whether its valid date with moment(this.props.selected).isValid(). this causing an issue e.clone. ",
    "simkesd": "@rafeememon Is it possible then to add other div with this.props.componentWrapperClass or smth like that? I'm also having problem with this as I can't easily change DatePicker to inline element.. ",
    "prakashvgr": "C(CustomInput) must be caps customInput={}. ",
    "alalpod": "\"Time\" is default prop, so I put a \"Caption\" here that everyone could see what it does. But if you think there should be \"Time\" i will change it.. ",
    "emilyrohrbough": "Would you want to keep this install script?. ",
    "aabenoja": "I'm slightly confused by the start of this line. We have date-fns set as a dependency, but we're telling users to install it like we would a peer dependency?. ",
    "streletss": "Correct me if I'm wrong, but you could actually avoid breaking compatibility by doing \nthis.props.renderDayContents(getDate(this.props.day), this.props.day). "
}