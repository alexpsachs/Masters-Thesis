{
    "leemunroe": "I like it and was doing this locally but wasn't sure if designers would understand it.\n. Closing this. I like it but don't want to have to explain this in the readme. Devs can make this change if they want.\n. Good catch. Do we need both? I think hpricot is enough.\n. Gemfile and preinstall step is a great idea but I don't really want to add and support Less in this repo. \n. I just noticed 07, 10, and 13 weren't looking great. Planning to fix. If you fix it first feel free to submit pr.\n. Fixed it so it looks better. Not perfect, but that's Outlook for you.\n\n. main.css is generated from the scss so this file changes every time you run grunt. Plus the css is then inlined. No point in tidying this file, it's basically a temp file.\n. Sorry going to close this. Don't want to support multiple ESPs right now considering its just used for sending a test email right now.\n. Nice idea. Are there any Grunt tasks out there that do this or similar?\n. @derekrushforth Is it possible to have this check the HTML template only? Would love to integrate this but not sure it's applicable without the email headers etc.\n. Done :)\n. Cool!\n. Premailer grunt task is good enough to work this out for you. You can add more styles to the responsive scss file in the media query.\nhttps://github.com/dwightjack/grunt-premailer\n. Sorry @marocas I don't know off hand what this could be. Did you find a solution?\n. Thanks @taeo. Fixed.\n. @clecompte Having trouble getting imagemin task to work\n. I think it's a great idea. Been trying to figure out a solution to this that I can use (push/pull) seamlessly and that new users can understand.\n. @clecompte Nice job. Is imagemin able to update the paths? Looks like the logo in dist/branded.html still points to the original src/img/mailgun.png when running grunt.\n. @taeo Good point I think you're right. They could just overwrite the secrets placeholder with their own. And I could make the comments a bit more intuitive so they know they have that option. I'm not sure about adding more options to the command line.\n. @taeo Man this is awesome! \nHad a couple of issues getting it running but haven't dug into them. These were the warnings I was getting:\n```\nLoading \"autoprefixer.js\" tasks...ERROR\n\n\nError: Cannot find module 'js-base64'\nWarning: Task \"autoprefixer:preview\" not found. Use --force to continue.\n```\n. @taeo Sorry looks like npm install froze on me last time. Deleted, reinstalled and works flawlessly.\n. @taeo I'm wondering do we need to include the extra sass:preview and autoprefixer tasks in Gruntfile. Maybe instead compile that scss manually or just include the css file?\n\n\nMy fear is over complicating the Gruntfile for first time users.\n. Haven't gave up on this, just need more time to test and think through it.\n. @taeo :+1: Do it\n. @taeo p.s. would love to see the emails/projects you're using this on\n. @taeo Good point, reopening until pr merged\n. @clecompte @taeo Sorry for the hold up. With #34 merged what do we have to do to ship this?\n. @clecompte Think we're good. Nice work! cc @taeo \n. @brandonb927 My thinking is similar to @taeo, I'm fearful of adding and maintaining too many things. Although a link to a forked version w/ LESS support wouldn't do any harm.\n. @brandonb927 I'd rather not support multiple templating engines here. Reasons being I could see it growing out of control and I see this more of a grunt starter kit that you can modify with your own prefs.\nHappy to link to a forked version from the readme if you have one ready though?\n. @taeo Nice. This would tidy it up nicely. Happy to accept PR for this.\n. @taeo I think you nailed it.\n. @taeo Ping to see if you want to bring this up to date with master. Think it will be a great addition.\n. Looking awesome :+1: \n. @taeo Great work \ud83d\ude4c\n. To be honest I don't have any experience with docker, but have been meaning to try this out.\n@sherzberg What's the best dummy's guide to getting started with docker (on OS X) you've came across?\n. @sherzberg Apologies for the prolonged absence of communication. Would love to look at including this again if that's something you'd still be interested in? Note the dependencies have changed a bit.\n. @taeo Looks good too. If you can update it to date w/ master good to merge.\n. @aminmeyghani Yes you can alter the list of clients in Gruntfile.js. \nFind the client values through this Litmus URL https://{your_company}.litmus.com/emails/clients.xml\n. Premailer still requires ruby :-/\n. @eddywashere Nice. It uses Juice. Maybe that would do the job.\n. Just upgraded to 2.11.2 and didn't notice any issues.\nPremailer gem, unfortunately, is Rails dependent so if you happen to be on a different Rails version then you'd have to reinstall it.\n. @newswim I see what you mean about the npm warnings now. What's the best practice to dealing with such things?\n. @newswim Interesting. Thanks for pointing it out. Looks like package.json will need some additional info.\n. Closing as I don't think there's anything we can do about this now.\n. @taeo Since you added the partials I'm curious what you think of this. Are you using any helpers or other partials?\n. @xavierartot :+1: \n. @xavierartot Did #33 and livereload solve this for you?\nI don't have much experience with BrowserSync. Is there something it offers that we don't already have?\n. Pushed a fix.\n@taeo Thanks for the solution\n. Commenting on the wrong repo :)\n. Todo:\n- Plain text version\n- HTML table attributes e.g. cellpadding, cellspacing\n. @jrit Is it possible to set table cellpadding and cellspacing attributes automagically to \"0\" with Juice?\n. @jrit Thanks. I think I can get away with manually adding cellpadding and cellspacing for now. Still seems to render ok. Cheers.\n\n. @olapersson Agreed. Are images being inlined for you currently? Having trouble reproducing, what steps should I take?\n. Sorry changed the task name to be more consistent and forgot to update readme. Try\ngrunt rsupload\n. :+1: \n. @taeo This looks awesome btw! Just need some time this week to review and test.\n. I like this direction. I think you're right about it being more natural.\n1. Looks like there's an issue in the responsive view for components.html. Didn't get a chance to dig deeper.\n   \n2. Noticing some issues in Outlook 2013 and Outlook.com when previewed in Litmus. Most likely a margin issue.\n   \n3. Do you want to go ahead and remove src/css/main.css from the repo?\n4. Consider removing /helpers and updating the readme.\n. :+1: \nMakes sense. I'll definitely look into it.\n. @macbookandrew Did you ever find a good solution for this?\n. @taeo Sweet. Give it a good test and works a treat! \ud83c\udf89. Maybe give it a few more days in case @macbookandrew has time to try it out. Curious if it solves his problem. But it LGTM to PR.. Nice!\n. Thanks. Got the same issue. Upgraded the imagemin version to 1.0.0 after finding this.\n. :+1: \n. Good point. Don't want to go back in that direction.\n. While Roadie looks interesting, it re-introduces ruby dep.\n. Sure thing. Few ways you could do it. How do you upload your images to your host?\nOne way would be to use the replace task and replace the source path with your URL.\n. Hey @oldirony thanks for making the change.\nCan somebody else that uses s3 confirm? Maybe @clecompte?\n. Nice one. Does Pardot have an API  / Grunt task that would enable sending these templates to their system?\n. @xavisavvy Definitely I think these would be useful. Now that grunt tasks have their own file in /grunt and we have aliases.yaml I think that lessens the risk of cluttering the repo.\n. Solid. Glad you got it fixed. And would love to see any of the emails you produce!\n. Interesting. Now I'm wondering why and if I need both assemble and grunt-assemble. Let me know if you have any recommendations for tidying up dependencies.\n. Where are you trying to use src: ['<%= paths.src %>/emails/*.hbs']?\n. I see, glad you got it working. I'm not sure off hand what it was dependent on. \n. I'm guessing the use of <%= paths.src %> is dependent on a module you removed, but I could be wrong.\nWhat happens if you revert package.json back?\n\"assemble\": \"^0.4.42\",\n    \"cheerio\": \"^0.19.0\",\n    \"ejs\": \"^2.3.1\",\n    \"express\": \"^4.12.3\",\n    \"grunt\": \"^0.4.5\",\n    \"grunt-assemble\": \"^0.3.1\",\n    \"grunt-autoprefixer\": \"^2.2.0\",\n    \"grunt-aws-s3\": \"^0.13.1\",\n    \"grunt-cdn\": \"^0.6.5\",\n    \"grunt-cloudfiles\": \"^0.3.0\",\n    \"grunt-contrib-clean\": \"^0.6.0\",\n    \"grunt-contrib-imagemin\": \"^1.0.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\",\n    \"grunt-express\": \"^1.4.1\",\n    \"grunt-juice-email\": \"^0.1.3\",\n    \"grunt-litmus\": \"^0.1.8\",\n    \"grunt-mailgun\": \"^1.0.1\",\n    \"grunt-open\": \"^0.2.3\",\n    \"grunt-replace\": \"^0.9.3\",\n    \"grunt-sass\": \"^1.0.0\",\n    \"imagemin-mozjpeg\": \"^5.1.0\",\n    \"load-grunt-config\": \"^0.19.0\",\n    \"load-grunt-tasks\": \"^3.2.0\"\n. I see, yes. How does your Gruntfile.js currently look?\n. Not currently. But you could use a flag to set something like that up e.g. grunt build --template=templateOne and then modify aliases.yaml and assemble.js to support it.\n. Sure, take a look at https://github.com/firstandthird/load-grunt-config\n. Has anything changed with the Litmus API recently?\n/cc @rodriguezcommaj @jeremypeter\n. Working again\n. @mtsweir Good Q, not sure off hand. Curious if you were able to find a solution for this as it bugged me at first also.\n. Awesome! Would love to see a quick video demo of these in action (I'm not currently a user).\n. You're right. What I've done for other projects (and should probably update this repo) is added another SCSS file for styles that I wanted preserved, and put them in an \"all\" media query e.g.\n```\n@media all {\n// External class fix for Outlook.com\n  .ExternalClass {\n    width: 100%;\n  }\n.ExternalClass,\n  .ExternalClass p,\n  .ExternalClass span,\n  .ExternalClass font,\n  .ExternalClass td,\n  .ExternalClass div {\n    line-height: 100%;\n  }\n// Blue link fix for iOS\n  .apple-link a {\n    color: inherit !important;\n    font-family: inherit !important;\n    font-size: inherit !important;\n    font-weight: inherit !important;\n    line-height: inherit !important;\n    text-decoration: none !important;\n  }\n}\n``\n. @danilomatos I think these are warnings for dependencies that are out of date. The workflow should still work though. What happens when you rungrunt?\n. I'm afraid I don't have a Windows environment to test this on. Can some one try this with latest dependencies and see if that has fixed things?\n. @FGRibreau I think so. Here are the Litmus tests withheight` attribute removed https://litmus.com/checklist/emails/public/8592bc5\n. \ud83c\udf89\n. @adyz Looks like Mailgun updated some things recently for security purposes. The workflow should still work but you'll have to add your own domain and verify it on Mailgun.\nhttp://blog.mailgun.com/domain-verification-changes-for-new-and-existing-domains/\n. @adyz Or you can still use the sandbox but just have to add the recipient as a authorized address https://help.mailgun.com/hc/en-us/articles/217531258. Hey @Mizpah haven't had time to look into this in detail but looks like you've tried the raw option which I thought would have worked. I found a slight variation of it here. And also a helper someone documented here. Two options worth looking at. I can dig deeper if this doesn't work.. @markhuge Thanks for doing this. \nUnfortunately I wasn't able to get this to work. Played around with it for a while running your branch but didn't see any logs come in. Tried creating a new project with just a gruntfile and grunt-mailgun but no luck either. Tried creating a new Mailgun account and adding a verified email but no luck. Any other ideas what it could be?. All looks good in output\n```\n\u279c  grunt-mailgun grunt mailgun -v\nInitializing\nCommand-line options: --verbose\nReading \"gruntfile.js\" Gruntfile...OK\nRegistering Gruntfile tasks.\nInitializing config...OK\nRegistering \"grunt-mailgun\" local Npm module tasks.\nReading /Users/lee/Sites/tmp/grunt-mailgun/node_modules/grunt-mailgun/package.json...OK\nParsing /Users/lee/Sites/tmp/grunt-mailgun/node_modules/grunt-mailgun/package.json...OK\nLoading \"mailgun.js\" tasks...OK\n+ mailgun\nLoading \"gruntfile.js\" tasks...OK\n\n\nNo tasks were registered or unregistered.\n\n\nRunning tasks: mailgun\nRunning \"mailgun\" task\nRunning \"mailgun:marketingTemplates\" (mailgun) task\nVerifying property mailgun.marketingTemplates exists in config...OK\nFiles: test.html\nReading test.html...OK\nDone.\n``. Awesome working for me now. Thanks @markhuge . @VanGTO Absolutely lets do it. I think the way it is modularized now, where each grunt task has it's own file, makes this great for plugging in new options.. Love this suggestion. Admittedly I usually hack the flow a bit to provide outputs for whatever 3rd party tool/code I'm using e.g. a service that needs{{ content }}and{{ unsubscribe }}` or a rails app that needs .erb templates.\n@taeo All your ideas make sense. Allow the preview tool to render supported template types. Maybe you have a good idea here but I imagine that getting quite complex if server.js is trying to support more than html.. @taeo Your call. Some times I find it easier to just create a fork and start hacking. But if you want to get something a bit more formal in here to nail down ideas and scope, also sounds good. . Wow impressive work!\nSome things that come to mind after playing with this:\n\nIt's great that it can support these types. One concern I have though is it might add some confusion to noobs. Cloning this repo and running grunt for the first time usually involves a bit of a learning curve (at least for most email developers I've tested it with). If the ejs/hbs/liquid/php files are in there too (in both dist and src) it adds to that learning curve. Don't have a preferred solution but wondering if this is something that is turned off by default, or maybe they're in another examples folder, something to help them not being an additional distraction.\nAnother thought that comes to mind after playing with this is how do I have just one src file that integrates with the other features/commands e.g. I would love to have one email source file that I develop and preview locally, send to Mailgun, send to Litmus, and then send off to my 3rd party service.\nNoticed the PHP issue. It's been a while since I wrote PHP so not sure how to fix off hand. Sidenote: What apps/ESPs are you guys using to send email that use PHP?\n\n. 1. Good idea.\n\n\nExactly. Figured that was the plan, just making sure.\n\n\nThat's what I was thinking. Figured there might be some sort of Wordpress use case but maybe ignore it until someone really wants it.. Oh 3 years ago. I'm not sure. Some sort of secret project no doubt. Likely before we had secrets.json :). This would be amazing. @cjcorney Do you have any ideas or sketches to share to get the conversation going?. 1. This is looking really impressive.\n\n\nI'm afraid not. I get the same thing using *.html. Possibly a bug with https://github.com/markhuge/grunt-mailgun. Have you looked at something like https://www.npmjs.com/package/grunt-ftp?\n\n\nI haven't used it, but looks like you could use this in place of the S3/Cloudfiles task to upload your images directory. Then you would create a CDN option for replacing local paths with your FTP absolute path. . Of course. Feel free to share in this thread so others can see and help also.. For styles like this, you don't want them to be inlined. What you can do is put this styles in to a media query so that the inliner preserves them and doesn't clear them.\ne.g.\n@media all {\n  // Your styles go here\n}\nThe inliner will see the media query and embed these styles in the <head> instead of inlining them.. I like it and was doing this locally but wasn't sure if designers would understand it.\n. Closing this. I like it but don't want to have to explain this in the readme. Devs can make this change if they want.\n. Good catch. Do we need both? I think hpricot is enough.\n. Gemfile and preinstall step is a great idea but I don't really want to add and support Less in this repo. \n. I just noticed 07, 10, and 13 weren't looking great. Planning to fix. If you fix it first feel free to submit pr.\n. Fixed it so it looks better. Not perfect, but that's Outlook for you.\n\n. main.css is generated from the scss so this file changes every time you run grunt. Plus the css is then inlined. No point in tidying this file, it's basically a temp file.\n. Sorry going to close this. Don't want to support multiple ESPs right now considering its just used for sending a test email right now.\n. Nice idea. Are there any Grunt tasks out there that do this or similar?\n. @derekrushforth Is it possible to have this check the HTML template only? Would love to integrate this but not sure it's applicable without the email headers etc.\n. Done :)\n. Cool!\n. Premailer grunt task is good enough to work this out for you. You can add more styles to the responsive scss file in the media query.\nhttps://github.com/dwightjack/grunt-premailer\n. Sorry @marocas I don't know off hand what this could be. Did you find a solution?\n. Thanks @taeo. Fixed.\n. @clecompte Having trouble getting imagemin task to work\n. I think it's a great idea. Been trying to figure out a solution to this that I can use (push/pull) seamlessly and that new users can understand.\n. @clecompte Nice job. Is imagemin able to update the paths? Looks like the logo in dist/branded.html still points to the original src/img/mailgun.png when running grunt.\n. @taeo Good point I think you're right. They could just overwrite the secrets placeholder with their own. And I could make the comments a bit more intuitive so they know they have that option. I'm not sure about adding more options to the command line.\n. @taeo Man this is awesome! \nHad a couple of issues getting it running but haven't dug into them. These were the warnings I was getting:\n```\nLoading \"autoprefixer.js\" tasks...ERROR\n\n\nError: Cannot find module 'js-base64'\nWarning: Task \"autoprefixer:preview\" not found. Use --force to continue.\n```\n. @taeo Sorry looks like npm install froze on me last time. Deleted, reinstalled and works flawlessly.\n. @taeo I'm wondering do we need to include the extra sass:preview and autoprefixer tasks in Gruntfile. Maybe instead compile that scss manually or just include the css file?\n\n\nMy fear is over complicating the Gruntfile for first time users.\n. Haven't gave up on this, just need more time to test and think through it.\n. @taeo :+1: Do it\n. @taeo p.s. would love to see the emails/projects you're using this on\n. @taeo Good point, reopening until pr merged\n. @clecompte @taeo Sorry for the hold up. With #34 merged what do we have to do to ship this?\n. @clecompte Think we're good. Nice work! cc @taeo \n. @brandonb927 My thinking is similar to @taeo, I'm fearful of adding and maintaining too many things. Although a link to a forked version w/ LESS support wouldn't do any harm.\n. @brandonb927 I'd rather not support multiple templating engines here. Reasons being I could see it growing out of control and I see this more of a grunt starter kit that you can modify with your own prefs.\nHappy to link to a forked version from the readme if you have one ready though?\n. @taeo Nice. This would tidy it up nicely. Happy to accept PR for this.\n. @taeo I think you nailed it.\n. @taeo Ping to see if you want to bring this up to date with master. Think it will be a great addition.\n. Looking awesome :+1: \n. @taeo Great work \ud83d\ude4c\n. To be honest I don't have any experience with docker, but have been meaning to try this out.\n@sherzberg What's the best dummy's guide to getting started with docker (on OS X) you've came across?\n. @sherzberg Apologies for the prolonged absence of communication. Would love to look at including this again if that's something you'd still be interested in? Note the dependencies have changed a bit.\n. @taeo Looks good too. If you can update it to date w/ master good to merge.\n. @aminmeyghani Yes you can alter the list of clients in Gruntfile.js. \nFind the client values through this Litmus URL https://{your_company}.litmus.com/emails/clients.xml\n. Premailer still requires ruby :-/\n. @eddywashere Nice. It uses Juice. Maybe that would do the job.\n. Just upgraded to 2.11.2 and didn't notice any issues.\nPremailer gem, unfortunately, is Rails dependent so if you happen to be on a different Rails version then you'd have to reinstall it.\n. @newswim I see what you mean about the npm warnings now. What's the best practice to dealing with such things?\n. @newswim Interesting. Thanks for pointing it out. Looks like package.json will need some additional info.\n. Closing as I don't think there's anything we can do about this now.\n. @taeo Since you added the partials I'm curious what you think of this. Are you using any helpers or other partials?\n. @xavierartot :+1: \n. @xavierartot Did #33 and livereload solve this for you?\nI don't have much experience with BrowserSync. Is there something it offers that we don't already have?\n. Pushed a fix.\n@taeo Thanks for the solution\n. Commenting on the wrong repo :)\n. Todo:\n- Plain text version\n- HTML table attributes e.g. cellpadding, cellspacing\n. @jrit Is it possible to set table cellpadding and cellspacing attributes automagically to \"0\" with Juice?\n. @jrit Thanks. I think I can get away with manually adding cellpadding and cellspacing for now. Still seems to render ok. Cheers.\n\n. @olapersson Agreed. Are images being inlined for you currently? Having trouble reproducing, what steps should I take?\n. Sorry changed the task name to be more consistent and forgot to update readme. Try\ngrunt rsupload\n. :+1: \n. @taeo This looks awesome btw! Just need some time this week to review and test.\n. I like this direction. I think you're right about it being more natural.\n1. Looks like there's an issue in the responsive view for components.html. Didn't get a chance to dig deeper.\n   \n2. Noticing some issues in Outlook 2013 and Outlook.com when previewed in Litmus. Most likely a margin issue.\n   \n3. Do you want to go ahead and remove src/css/main.css from the repo?\n4. Consider removing /helpers and updating the readme.\n. :+1: \nMakes sense. I'll definitely look into it.\n. @macbookandrew Did you ever find a good solution for this?\n. @taeo Sweet. Give it a good test and works a treat! \ud83c\udf89. Maybe give it a few more days in case @macbookandrew has time to try it out. Curious if it solves his problem. But it LGTM to PR.. Nice!\n. Thanks. Got the same issue. Upgraded the imagemin version to 1.0.0 after finding this.\n. :+1: \n. Good point. Don't want to go back in that direction.\n. While Roadie looks interesting, it re-introduces ruby dep.\n. Sure thing. Few ways you could do it. How do you upload your images to your host?\nOne way would be to use the replace task and replace the source path with your URL.\n. Hey @oldirony thanks for making the change.\nCan somebody else that uses s3 confirm? Maybe @clecompte?\n. Nice one. Does Pardot have an API  / Grunt task that would enable sending these templates to their system?\n. @xavisavvy Definitely I think these would be useful. Now that grunt tasks have their own file in /grunt and we have aliases.yaml I think that lessens the risk of cluttering the repo.\n. Solid. Glad you got it fixed. And would love to see any of the emails you produce!\n. Interesting. Now I'm wondering why and if I need both assemble and grunt-assemble. Let me know if you have any recommendations for tidying up dependencies.\n. Where are you trying to use src: ['<%= paths.src %>/emails/*.hbs']?\n. I see, glad you got it working. I'm not sure off hand what it was dependent on. \n. I'm guessing the use of <%= paths.src %> is dependent on a module you removed, but I could be wrong.\nWhat happens if you revert package.json back?\n\"assemble\": \"^0.4.42\",\n    \"cheerio\": \"^0.19.0\",\n    \"ejs\": \"^2.3.1\",\n    \"express\": \"^4.12.3\",\n    \"grunt\": \"^0.4.5\",\n    \"grunt-assemble\": \"^0.3.1\",\n    \"grunt-autoprefixer\": \"^2.2.0\",\n    \"grunt-aws-s3\": \"^0.13.1\",\n    \"grunt-cdn\": \"^0.6.5\",\n    \"grunt-cloudfiles\": \"^0.3.0\",\n    \"grunt-contrib-clean\": \"^0.6.0\",\n    \"grunt-contrib-imagemin\": \"^1.0.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\",\n    \"grunt-express\": \"^1.4.1\",\n    \"grunt-juice-email\": \"^0.1.3\",\n    \"grunt-litmus\": \"^0.1.8\",\n    \"grunt-mailgun\": \"^1.0.1\",\n    \"grunt-open\": \"^0.2.3\",\n    \"grunt-replace\": \"^0.9.3\",\n    \"grunt-sass\": \"^1.0.0\",\n    \"imagemin-mozjpeg\": \"^5.1.0\",\n    \"load-grunt-config\": \"^0.19.0\",\n    \"load-grunt-tasks\": \"^3.2.0\"\n. I see, yes. How does your Gruntfile.js currently look?\n. Not currently. But you could use a flag to set something like that up e.g. grunt build --template=templateOne and then modify aliases.yaml and assemble.js to support it.\n. Sure, take a look at https://github.com/firstandthird/load-grunt-config\n. Has anything changed with the Litmus API recently?\n/cc @rodriguezcommaj @jeremypeter\n. Working again\n. @mtsweir Good Q, not sure off hand. Curious if you were able to find a solution for this as it bugged me at first also.\n. Awesome! Would love to see a quick video demo of these in action (I'm not currently a user).\n. You're right. What I've done for other projects (and should probably update this repo) is added another SCSS file for styles that I wanted preserved, and put them in an \"all\" media query e.g.\n```\n@media all {\n// External class fix for Outlook.com\n  .ExternalClass {\n    width: 100%;\n  }\n.ExternalClass,\n  .ExternalClass p,\n  .ExternalClass span,\n  .ExternalClass font,\n  .ExternalClass td,\n  .ExternalClass div {\n    line-height: 100%;\n  }\n// Blue link fix for iOS\n  .apple-link a {\n    color: inherit !important;\n    font-family: inherit !important;\n    font-size: inherit !important;\n    font-weight: inherit !important;\n    line-height: inherit !important;\n    text-decoration: none !important;\n  }\n}\n``\n. @danilomatos I think these are warnings for dependencies that are out of date. The workflow should still work though. What happens when you rungrunt?\n. I'm afraid I don't have a Windows environment to test this on. Can some one try this with latest dependencies and see if that has fixed things?\n. @FGRibreau I think so. Here are the Litmus tests withheight` attribute removed https://litmus.com/checklist/emails/public/8592bc5\n. \ud83c\udf89\n. @adyz Looks like Mailgun updated some things recently for security purposes. The workflow should still work but you'll have to add your own domain and verify it on Mailgun.\nhttp://blog.mailgun.com/domain-verification-changes-for-new-and-existing-domains/\n. @adyz Or you can still use the sandbox but just have to add the recipient as a authorized address https://help.mailgun.com/hc/en-us/articles/217531258. Hey @Mizpah haven't had time to look into this in detail but looks like you've tried the raw option which I thought would have worked. I found a slight variation of it here. And also a helper someone documented here. Two options worth looking at. I can dig deeper if this doesn't work.. @markhuge Thanks for doing this. \nUnfortunately I wasn't able to get this to work. Played around with it for a while running your branch but didn't see any logs come in. Tried creating a new project with just a gruntfile and grunt-mailgun but no luck either. Tried creating a new Mailgun account and adding a verified email but no luck. Any other ideas what it could be?. All looks good in output\n```\n\u279c  grunt-mailgun grunt mailgun -v\nInitializing\nCommand-line options: --verbose\nReading \"gruntfile.js\" Gruntfile...OK\nRegistering Gruntfile tasks.\nInitializing config...OK\nRegistering \"grunt-mailgun\" local Npm module tasks.\nReading /Users/lee/Sites/tmp/grunt-mailgun/node_modules/grunt-mailgun/package.json...OK\nParsing /Users/lee/Sites/tmp/grunt-mailgun/node_modules/grunt-mailgun/package.json...OK\nLoading \"mailgun.js\" tasks...OK\n+ mailgun\nLoading \"gruntfile.js\" tasks...OK\n\n\nNo tasks were registered or unregistered.\n\n\nRunning tasks: mailgun\nRunning \"mailgun\" task\nRunning \"mailgun:marketingTemplates\" (mailgun) task\nVerifying property mailgun.marketingTemplates exists in config...OK\nFiles: test.html\nReading test.html...OK\nDone.\n``. Awesome working for me now. Thanks @markhuge . @VanGTO Absolutely lets do it. I think the way it is modularized now, where each grunt task has it's own file, makes this great for plugging in new options.. Love this suggestion. Admittedly I usually hack the flow a bit to provide outputs for whatever 3rd party tool/code I'm using e.g. a service that needs{{ content }}and{{ unsubscribe }}` or a rails app that needs .erb templates.\n@taeo All your ideas make sense. Allow the preview tool to render supported template types. Maybe you have a good idea here but I imagine that getting quite complex if server.js is trying to support more than html.. @taeo Your call. Some times I find it easier to just create a fork and start hacking. But if you want to get something a bit more formal in here to nail down ideas and scope, also sounds good. . Wow impressive work!\nSome things that come to mind after playing with this:\n\nIt's great that it can support these types. One concern I have though is it might add some confusion to noobs. Cloning this repo and running grunt for the first time usually involves a bit of a learning curve (at least for most email developers I've tested it with). If the ejs/hbs/liquid/php files are in there too (in both dist and src) it adds to that learning curve. Don't have a preferred solution but wondering if this is something that is turned off by default, or maybe they're in another examples folder, something to help them not being an additional distraction.\nAnother thought that comes to mind after playing with this is how do I have just one src file that integrates with the other features/commands e.g. I would love to have one email source file that I develop and preview locally, send to Mailgun, send to Litmus, and then send off to my 3rd party service.\nNoticed the PHP issue. It's been a while since I wrote PHP so not sure how to fix off hand. Sidenote: What apps/ESPs are you guys using to send email that use PHP?\n\n. 1. Good idea.\n\n\nExactly. Figured that was the plan, just making sure.\n\n\nThat's what I was thinking. Figured there might be some sort of Wordpress use case but maybe ignore it until someone really wants it.. Oh 3 years ago. I'm not sure. Some sort of secret project no doubt. Likely before we had secrets.json :). This would be amazing. @cjcorney Do you have any ideas or sketches to share to get the conversation going?. 1. This is looking really impressive.\n\n\nI'm afraid not. I get the same thing using *.html. Possibly a bug with https://github.com/markhuge/grunt-mailgun. Have you looked at something like https://www.npmjs.com/package/grunt-ftp?\n\n\nI haven't used it, but looks like you could use this in place of the S3/Cloudfiles task to upload your images directory. Then you would create a CDN option for replacing local paths with your FTP absolute path. . Of course. Feel free to share in this thread so others can see and help also.. For styles like this, you don't want them to be inlined. What you can do is put this styles in to a media query so that the inliner preserves them and doesn't clear them.\ne.g.\n@media all {\n  // Your styles go here\n}\nThe inliner will see the media query and embed these styles in the <head> instead of inlining them.. ",
    "majksner": "If they are using grunt I don't think it's a problem. Up to you.\nOn May 20, 2014 8:30 PM, \"Lee Munroe\" notifications@github.com wrote:\n\nI like it and was doing this locally but wasn't sure if designers would\nunderstand it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leemunroe/grunt-email-design/pull/1#issuecomment-43665125\n.\n. Both. Throwing errors during compiling.\nOn May 20, 2014 7:40 AM, \"Lee Munroe\" notifications@github.com wrote:\nGood catch. Do we need both? I think hpricot is enough.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leemunroe/grunt-email-design/pull/2#issuecomment-43588188\n.\n. If they are using grunt I don't think it's a problem. Up to you.\nOn May 20, 2014 8:30 PM, \"Lee Munroe\" notifications@github.com wrote:\nI like it and was doing this locally but wasn't sure if designers would\nunderstand it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leemunroe/grunt-email-design/pull/1#issuecomment-43665125\n.\n. Both. Throwing errors during compiling.\nOn May 20, 2014 7:40 AM, \"Lee Munroe\" notifications@github.com wrote:\nGood catch. Do we need both? I think hpricot is enough.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leemunroe/grunt-email-design/pull/2#issuecomment-43588188\n.\n. \n",
    "linnett": "Ahh great - If I get a chance I'll try and find some time to fix.\n. Nice one! Looks A LOT better than it did and as you say, not a lot you can do about new versions of Outlook seeing as they have taken away functionality!\n. Ahh great - If I get a chance I'll try and find some time to fix.\n. Nice one! Looks A LOT better than it did and as you say, not a lot you can do about new versions of Outlook seeing as they have taken away functionality!\n. ",
    "PvmHD": "Oh ok, Im sorry was just trying to help, New to github so was just seeing if I can do anything  :+1: \n. Oh ok, Im sorry was just trying to help, New to github so was just seeing if I can do anything  :+1: \n. ",
    "johngerome": ":+1: \nThis would be Awesome!\n. :+1: \nThis would be Awesome!\n. ",
    "derekrushforth": "I just put this one together tonight: https://github.com/derekrushforth/grunt-spamcheck\nFeel free to give it a spin.\n. @leemunroe Totally agree, I've been thinking about this lately as well. Our SpamAssassin API is expecting those headers in the request, but there might be a way around it. On the spamcheck task I can insert mock header values into the API request. This will at least get rid of the header warnings in the report and give a somewhat more realistic score. Maybe even provide grunt task options to override and insert custom headers for more accuracy.\n. I just put this one together tonight: https://github.com/derekrushforth/grunt-spamcheck\nFeel free to give it a spin.\n. @leemunroe Totally agree, I've been thinking about this lately as well. Our SpamAssassin API is expecting those headers in the request, but there might be a way around it. On the spamcheck task I can insert mock header values into the API request. This will at least get rid of the header warnings in the report and give a somewhat more realistic score. Maybe even provide grunt task options to override and insert custom headers for more accuracy.\n. ",
    "espellcaste": "Fantastic!\n. Fantastic!\n. ",
    "marocas": "Sry for the late replay, still didnt found a solution, if i find one, ill post here.\n. Sry for the late replay, still didnt found a solution, if i find one, ill post here.\n. ",
    "taeo": "@leemunroe & @clecompte - Looks like the cloudfiles task should be updated for the imagemin PR to be consistent.\nsuggested cloudfiles task change:\n'src': 'src/img/*', > 'src': 'dist/img/*',\n. @leemunroe & @clecompte - grunt imagemin does not update html file strings/paths.\nTake a look at assemble assets.\n. @leemunroe - Yeah, I like that. I'll update shortly.\n. @leemunroe - This should be good to go. The PR did merge in the latest secrets PR that landed on master. Cheers!\n. If this get's merged, we'll want to track #21 and adhere to this standard.\nFYI @clecompte @leemunroe \njs\n s3: {\n  options: {\n    key: '<%= secrets.s3.key %>', // define this in secrets.json\n    secret: '<%= secrets.s3.secret %>', // define this in secrets.json\n    cont....\n  }\n}\n. @leemunroe - my gut feeling is that teams would want common, non sensitive account settings such as litmus.company or cloudfiles.region etc... to be saved in their repo.\nWith respect to sending - recipients and subjects, i'd recommend something like so (so it's not fixed).\njs\n        mailgun: {\n          mailer: {\n            options: {\n              key: '<%= secrets.mailgun.api_key %>',\n              sender: grunt.option('from') || 'you@youremail.com',\n              recipient: grunt.option('to') || 'you@youremail.com',\n              subject: grunt.option('subject') || '[TEST] - Subject n/a'\n            },\n            src: ['preview/'+grunt.option('template')]\n          }\n        },\nSend with all the following options other than template as optional:\ngrunt mailgun --template=branded.html --from=you@email.com --to=you@email.com,optionalsecond@email.com --subject=\"My custom subject\"\nThis suggested format could work in combination with some of your ideas.\nWhat do you think? \n. @leemunroe - Cool. I agree anyone capable enough dev-wise to use this project (starter kit) can figure out customizing / extending secrets to their liking.\nre: Adding options to the command line. I'm either way on it for the project. I personally would make that mod for my local project copies. \nCheers. Happy fri.\n. @leemunroe - I have a ready-to-go version of this if you'd like to check it out and provide any thoughts.\nfeature/browser-preview\nAll you need do differently is run grunt serve to start the project. It will do all the standard stuff + start up an express server and open the preview UI.\n. @leemunroe - sweet! Glad you like the idea.\nWeird issues. Did you do an npm install after switching branches?\nI just pulled from scratch fine:\nmkdir grunt-email-workflow-test; cd grunt-email-workflow-test; git clone git@github.com:taeo/grunt-email-design.git .\ngit checkout feature/browser-preview\ngit pull origin feature/browser-preview\nnpm install\n!!! copy your secrets.json file !!!\ngrunt serve\n. @leemunroe - Excellent. Let me know if you have any changes you'd like to see and I'll send in a PR.\nI know that I'll need to add a server route for ./dist/img in order for the imagemin #21 to work right.\n. @leemunroe - My 10\u00a2, headlined with\n\n\"I think this project is a starter kit that works out of the box if you follow the readme. Other customization needs should be issues/suggestions/PR's -or- learn grunt & make the changes yourself\"\n- w/o sass & autoprefixer tasks:\n  - The preview UI wouldn't be maintainable by other contributors if there were issues.\n  - Committing compiled css leads to more merge conflicts.\n- Readability of the gruntfile isn't a primary concern (IMO):\n  - It \"works\" out of the box if you follow the readme.\n  - If you're editing gruntfiles, you should have an idea of what you're doing.\n  - We could re-arrange the express, and auto-prefixer tasks w/in the gruntfile and add a big-ass comment block\n\njs\n/*************************************************************************************************\n The following tasks are needed so you can use the browser-based testing server\n We suggest you don't edit these unless you know what you're doing...\n**************************************************************************************************/\ntasks......\n/*************************************************************************************************\n END Don't Edit :: Browser UI\n**************************************************************************************************/\nI may just have a different outlook on what's important with this project...? Your thoughts on my comments?\n. @leemunroe - Bump.\nI can refactor PR #33 to bring up to date with master. I'm using my fork w/ previews on a few projects and loving it...\n. @leemunroe - why closed? This issue is still on master.\n. @clecompte - Sorry, I'm still seeing quite a few inconsistencies and bugs\nImagemin:\n- cloudfiles task is still serving from ./src/img/ (not the optimized path ./dist/img/)\n- when running grunt (default tasks), the complied templates are still serving images from ./src/img/, so any send or forthcoming browser-previews wouldn't be correct.\nAWS S3:\n- This is serving from ./src/img (not the min files from ./dist/img)\nReplace S3:\n- This is doing essentially the same thing as the cdn task. Ideally the cdn task would have options for cloudfiles and aws_s3 respectively.\nHope this comes across as constructive.\n. @clecompte - Sorry for tossing imagemin in there.\nThe cdn task could be updated like so:\ncdn: {\n          cloudfiles: {\n            options: {\n              cdn: '<%= secrets.cloudfiles.uri %>', // See README for secrets.json or replace this with your cdn uri\n              flatten: true,\n              supportedTypes: 'html'\n            },\n            cwd: './dist/',\n            dest: './dist/',\n            src: ['*.html']\n          },\n          aws: {\n            options: {\n              cdn: '<%= secrets.s3.bucketpath %>', // See README for secrets.json or replace this with your cdn uri\n              flatten: true,\n              supportedTypes: 'html'\n            },\n            cwd: './dist/',\n            dest: './dist/',\n            src: ['*.html']\n          }\n        },\nThe current cdnify alias would need to be updated like so:\ngrunt.registerTask('cdnify', ['default','cloudfiles','cdn:cloudfiles']);\n. @brandonb927 - My 10\u00a2 is that this is a starter kit that already supports a css pre-processor. If you prefer less to sass, you can download this project and make those preference-based changes.\n. @martinbutler it's possible to escape the line using a backslash\n\\{{ first_name }}\nOR\nYou can use an alternate syntax such as:\n[[ first_name ]] > {{ first_name }}\nThen and then add a custom regex via grunt task to replace it:\npatterns: [ {\n    match: /(\\[\\[)([^\\]\\r\\n]+)(\\]\\])/gi,\n    replacement: '{{ $2 }}'\n}]\nBetter to post a new issue / question in an issue that isn't closed :)\n. @leemunroe - Word. Preference on how we want to go about this and who's doing what?\nFYI - @clecompte\n. @leemunroe - Yes, sorry for the silence. I'll get this up to date with master and send the PR.\nCheers \n. a'ight @leemunroe - This looks good on my end and is up to date. \nFYI @chrisrowe \n. @leemunroe - Good catch. I caught that on my master, but never hit the feature branch. just cherry picked it and should be good to go!\n. Thank You! :bow: \n. @leemunroe - Took your suggestion and updated all refs to ./src/\nRelated, but not part of this PR:\n- s3 still needs to be removed ala #27\n- Cloudfiles task should get a separate PR and testing to change dest: '/' to dest: <%= paths.dist_img %> (#26)\n. @leemunroe - Love it. I was doing that on a couple projects with the following components:\n- Buttons\n- Horizontal\n- Signatures\n- Social Badges\n. @xavierartot - Checkout #33 and let us know if that's a preferable alternative to browsersync. It supports watch, live reload, browser preview(s) and quick nav to jump between compiled templates.\nIf you aren't feeling it, I can provide some sample code for BrowserSync to work with this project.\n. More directly, I'd consider adding a task. What's important is that watch is called after browserSync.\ngrunt.registerTask('giddyup', ['default','browserSync', 'watch']);\n. @toby1kenobi - It's not you. The cloudfiles task was never updated properly when imagemin was implemented. We'll get a fix / PR for this.\nLine 173 of Gruntfile.js should be 'src': '<%= paths.dist_img %>/*', NOT 'src': '<%= paths.src_img %>/*',\n. Passe with your restructure https://github.com/leemunroe/grunt-email-workflow/commit/eb2a79c8cc99c8756efac391b505b54754d3ec70\n. :+1: \n. @leemunroe - Right on! Hit me back with any feedback / questions once you've had time to review.\n. @leemunroe - Thanks for feedback / suggestions.\nThe first issue was word-break related with the long path in the code tag.\nThese latest updates should cover all your points. :beers: \n. :+1:\n. This is definitely a complicated. I think there's some refactoring/options to watch that can make this better and faster.\n\nscss changes should trigger scss, assemble, juice, and replace tasks for all templates.\nlayouts, partials, and data changes should trigger assemble, juice, and replace tasks for all templates.\nimg changes should trigger only imagemin task\n\nTaking it a step further, it's possible to incorporate something like the following that would process only a subset of src/emails/ templates.\n```\ngrunt watch:specific --files=\"filename_or_pattern\"\ngrunt build:specific --files=\"filename_or_pattern\"\n``` \n. No worries. I'll give this a spin when I have a second. I'm currently trying to wrap up #87 if you have any opinions or desire to help test that out.. Hey @macbookandrew \nI just pushed up a fork on my branch for build times and options. It addresses build times as well as watch related options.\nIt's not \"automagic\" unfortunately, but here's a use case that would only watch for and process:\n* template updates matching the name *2016-08*. \n* scss updates get compiled, but only applied to the afore mentioned templates\n* (Any layouts, data, or partials trigger a complete rebuild of all templates)\ngrunt preview --template=\"*2016-08*\"\nAdditional grunt option --noinline can be passed if you don't want css styles inlined (will be preserved in <style> tag.\ngrunt preview --template=\"*2016-08*\" --noinline\nLet me know if you're willing to give the branch a spin and provide any thoughts, feedback, or questions.. Solid. Thanks for testing!\nThere's a little tidying up and README updates to make. Other than that, should we give it a little time and prompt a few more people to test, or just go PR and done?. @macbookandrew - welcome back! Hope you had a good vacay. No rush here. Would love to have input + further testing to see if it meets your needs and is easy enough to use this way.. You'd have to remove the flatten: true option as well from /grunt/assemble.js\nThe downside(s) to this currently are:\n- The preview UI naively looks for /dist/*.html files, so template select will be blank. \n- You get more of the tree than you might want /dist/src/emails/<templates + subdirs>\n- css inlining and a number of other tasks don't compensate for depth in /dist at the moment\n. I'd stay away from near-duplicate grunt tasks.\nIdeal approach for what you're wanting to do would be to go through every grunt task and make sure it supported directory depth + add recursion to the preview app's template finder.\nAnother option would be to just prefix all your emails as opposed to having hierarchy. /emails/back_<template_name>.hbs\nI personally don't foresee the need to support directory structure in dist, but maybe that's just me and/or I don't see the full picture.\nCheers\n. Nice. Thanks for posting your solution :+1: \n. Not answering your question here, but avoiding ruby dependencies is pry a good move to keep this project more accessible. Roadie is ruby-centric.\n. Don't wrap your php in handlebars notation. PHP tags will be passed through assemble / handlebars unmodified if you write them as normal.\n{{{ <?= $firstname; ?> }}} should be simply <?php echo $firstname; ?>\nNOTE: The previewer will not parse or display your php code and the templates will still have .html extensions. You can go the extra mile to support .php extensions.\nin file grunt/assemble.js add:\noptions:\n    ext: '.php'\nThen for preview you'd have to add express-php via npm and in file server.js adapt the view engine from ejs to php\n. This does solve the issue of the actual replaced path(s). That said here are the related issues it creates that makes it incomplete for the workflow to function.\n\nBreaks images in preview (images are still written to dist/img/ but source files ref ../\nCDN Upload tasks for S3 & Cloudfiles do not write to the root / base folder. @toby1kenobi or @developering - if you're still using this project, and want to help us debug (a year later... eek).\n\nI'm not a WIN user, but I believe it's a permissions issue. A couple things worth trying.\n1. Try editing the clean task in grunt/clean.js to this:\njs\n// Clean your /dist folder\nmodule.exports = {\n  clean: [\"dist/*\"]\n};\n\nCheck your permissions on the project root folder and dist/, making sure they're writable. . @eldyvoon - I'm confused.\n\nYou say here \"it doesn't solve the problem\", then you submitted PR #89 which does exactly what I recommended in my suggestion 1 above in grunt/clean.js changing [\"dist\"] > [\"dist/*\"].\nPlease clarify + confirm my assumptions about your comments for me and anyone else reading this down the road.\n1. Your PR #89 (my suggestion 1) does solve the issue.\n2. Permissions making dist/ writable does not solve the issue.. Ok. I assume you are a WIN user? (I'm on a Mac and it's just fine)\nTo the best of my knowledge EPERM is a windows specific, permissions related error.\nPerhaps you could share your OS + Software versions for myself or others to help hone in on a fix?. Closing this one out @danilomatos - feel free to open a new ticket if you're still using this project and having issues.. @Mizpah - Block Helpers, see Raw Block sample are pry your best bet for getting uncompiled handlebars into your dist/ output.\n@ericdfields - Agree this is helpful. \nI've done a few iterations on the preview app that will render the compiled dist/ templates using various flavors (liquid, handlebars, php), plus allow you to create sample data files (json / yaml) that get parsed in for previewing only. You get A+ previews, and your templates are ready to ship as-is. TL;DR - Involves modifying server.js - I'll open a suggestion issue for this specifically.. @Mizpah - I just tried a variation of your code and it works just fine without the need to bypass compiling. Out of the box, handlebars won't compile non-handlebars syntax.\nBoth your sample code and the following simplification worked without issue and ended up in the compiled .html template identical to the input in .hbs\n<#list transaction.item as item>\n    <#if item_index==0>\n        {item.quantity@label}\n    </#if>\n    ${item.description}\n</#list>\nDid you have any specific errors or munged output that you can share?. @Mizpah99 - The juice task is treating the netsuite template syntax as html, converting logic and operators into attributes <#if item_index==0> becoming <#if item_index=\"=0\">\nYou can reproduce the issue in isolation over here: http://automattic.github.io/juice/\nI don't see a clear path to fixing that without doing something obscure. \nFor example. The following passes through juice unmodified. You'd have to then replace [[ to < and ]] to > after the juice task using something like grunt-replace\n<table class=\"order_details {{type}}\" cellpadding=\"0\" cellspacing=\"0\">\n  [[#list transaction.item as item]]\n  [[#if item_index==0]]\n  <thead>\n    <tr>\n      <th>{item.quantity@label}</th><th>{item.itemname@label}</th>\n    </tr>\n  </thead>\n  <tbody>\n  [[/#if]]\n    <tr>\n      <td>${item.description}</td>\n    </tr>\n  [[/#list]]\n  </tbody>\n</table>. With respect to non-html looking entities, passing other data through.\nYou can pass un-rendered single line hbs code with a backslash like this \\{{myvar}}\n87 is working towards adding a raw helper and much more.. Looks like your PR is still lingering.\nI was able to send mailgun emails just fine with the grunt send --template=[THE_TEMPLATE_NAME] command.\n@rwillwerth - What is your node version? That could be an issue if you're on an older version. I'm on v7.x\nnode --version\n. Nothing wrong with that, Mark. Thanks.\nWe can call this closed.. On the grunt -vs- gulp -vs- both scene, I'd recommend not trying to support both. Seems like a recipe for headaches and redundant code that needs to be kept in sync and maintained.\nI'd be curious to hear any specifics about why gulp would be better, or if just a cooler/newer thing. Installing and running npm install && run task is equally simple in both worlds.\nIf there's a huge cry for gulp over grunt, we could just port everything. . @ericdfields - data formats / naming conventions are key for sure. I do like the consideration of not inlining styles, presuming that the final engine will do that.\n@leemunroe - Express Server comes with a number of template engines supported out of the box, and many, many others from 3rd parties. I don't see that being too complicated to add supported engines and then conditionally process the preview based on the template extension / engine. Hypothetically of course.\nPushing this to the next level - should we make a bit of a spec, go YOLO style and just start a fork to play with, other?. Some quick research and feasibility tests are looking \ud83d\udc4d.\n\n[x] Create templates with any combination of extensions\n[x] Helper to pass mustache syntax through the compiler\n[x] Express preview handling multiple rending engines based on extension\n. Hey @ericdfields, @leemunroe and anyone else interested in testing this out.\n\nI just got a branch pushed up on my fork for multiple template engines.\nIt supports .ejs, .liquid, .hbs templates using consolidate (room for many more template engines).\nThe caveat is you have to name your src/emails/ as filename.<desired-extension>.hbs\nIt adds a raw helper:\n{{{{raw}}}}\n  whatever your heart desires... or non-rendered hbs code\n{{{{/raw}}}}\nSample data can be created in /preview/data/ either .json or .yml by simply adding one of those flavors with the base template name > _sample.html.hbs would lookup /preview/data/_sample.json or /preview/data/_sample.yaml\nThere's room for improvement, but it's a fully functional proof of concept! Look forward to your feedback.\ncaveat php is in there, but it's broken. There's some awkwardness passing variables into the previewer.. Thanks!\nTo your points.\n\n\nI vote we should fire up the gh wiki on this project to help elaborate on variations and options. That will help keep the README smaller, and we can include code samples as opposed to including them in the core repo.\n\n\nMaybe I'm not understanding correctly. Are you saying there's no way to send the dist/_sample.liquid for example via mailgun or to litmus fully rendered with the sample data? If I'm tracking... you're correct that doesn't work, but it could. dist/_sample.liquid is what you'd send off to your 3rd party service, right?\n\n\nPHP - not sure how to fix that either at the moment, nor do I care to spend more time trying to figure it out. I don't personally use many apps, or know of any ESP's that are php-driven. Someone else in the community with a hankering for that could patch and PR.... Chris, @romanlelek is mostly correct. \n\n\nYou would have to edit /grunt/aliases.yml to add a custom series of tasks. You would also need to modify or copy/rename some of the /grunt/*js tasks to suit your needs.\nIssue #57 is along these lines as a feature request.. Historical reference - This did not fix the issue #77 (authors words). Hey @jzantua - Can you post a sample of the configuration you're using and confirm it you are using this package (https://www.npmjs.com/package/grunt-ftp) or something else?. @jzantua - Yep, authentication is definitely required and unsupported. At the very top of the readme for the ftp-deploy package it says \"(Need sftp? Check out sftp-upload)\". . @leemunroe & @clecompte - Looks like the cloudfiles task should be updated for the imagemin PR to be consistent.\nsuggested cloudfiles task change:\n'src': 'src/img/*', > 'src': 'dist/img/*',\n. @leemunroe & @clecompte - grunt imagemin does not update html file strings/paths.\nTake a look at assemble assets.\n. @leemunroe - Yeah, I like that. I'll update shortly.\n. @leemunroe - This should be good to go. The PR did merge in the latest secrets PR that landed on master. Cheers!\n. If this get's merged, we'll want to track #21 and adhere to this standard.\nFYI @clecompte @leemunroe \njs\n s3: {\n  options: {\n    key: '<%= secrets.s3.key %>', // define this in secrets.json\n    secret: '<%= secrets.s3.secret %>', // define this in secrets.json\n    cont....\n  }\n}\n. @leemunroe - my gut feeling is that teams would want common, non sensitive account settings such as litmus.company or cloudfiles.region etc... to be saved in their repo.\nWith respect to sending - recipients and subjects, i'd recommend something like so (so it's not fixed).\njs\n        mailgun: {\n          mailer: {\n            options: {\n              key: '<%= secrets.mailgun.api_key %>',\n              sender: grunt.option('from') || 'you@youremail.com',\n              recipient: grunt.option('to') || 'you@youremail.com',\n              subject: grunt.option('subject') || '[TEST] - Subject n/a'\n            },\n            src: ['preview/'+grunt.option('template')]\n          }\n        },\nSend with all the following options other than template as optional:\ngrunt mailgun --template=branded.html --from=you@email.com --to=you@email.com,optionalsecond@email.com --subject=\"My custom subject\"\nThis suggested format could work in combination with some of your ideas.\nWhat do you think? \n. @leemunroe - Cool. I agree anyone capable enough dev-wise to use this project (starter kit) can figure out customizing / extending secrets to their liking.\nre: Adding options to the command line. I'm either way on it for the project. I personally would make that mod for my local project copies. \nCheers. Happy fri.\n. @leemunroe - I have a ready-to-go version of this if you'd like to check it out and provide any thoughts.\nfeature/browser-preview\nAll you need do differently is run grunt serve to start the project. It will do all the standard stuff + start up an express server and open the preview UI.\n. @leemunroe - sweet! Glad you like the idea.\nWeird issues. Did you do an npm install after switching branches?\nI just pulled from scratch fine:\nmkdir grunt-email-workflow-test; cd grunt-email-workflow-test; git clone git@github.com:taeo/grunt-email-design.git .\ngit checkout feature/browser-preview\ngit pull origin feature/browser-preview\nnpm install\n!!! copy your secrets.json file !!!\ngrunt serve\n. @leemunroe - Excellent. Let me know if you have any changes you'd like to see and I'll send in a PR.\nI know that I'll need to add a server route for ./dist/img in order for the imagemin #21 to work right.\n. @leemunroe - My 10\u00a2, headlined with\n\n\"I think this project is a starter kit that works out of the box if you follow the readme. Other customization needs should be issues/suggestions/PR's -or- learn grunt & make the changes yourself\"\n- w/o sass & autoprefixer tasks:\n  - The preview UI wouldn't be maintainable by other contributors if there were issues.\n  - Committing compiled css leads to more merge conflicts.\n- Readability of the gruntfile isn't a primary concern (IMO):\n  - It \"works\" out of the box if you follow the readme.\n  - If you're editing gruntfiles, you should have an idea of what you're doing.\n  - We could re-arrange the express, and auto-prefixer tasks w/in the gruntfile and add a big-ass comment block\n\njs\n/*************************************************************************************************\n The following tasks are needed so you can use the browser-based testing server\n We suggest you don't edit these unless you know what you're doing...\n**************************************************************************************************/\ntasks......\n/*************************************************************************************************\n END Don't Edit :: Browser UI\n**************************************************************************************************/\nI may just have a different outlook on what's important with this project...? Your thoughts on my comments?\n. @leemunroe - Bump.\nI can refactor PR #33 to bring up to date with master. I'm using my fork w/ previews on a few projects and loving it...\n. @leemunroe - why closed? This issue is still on master.\n. @clecompte - Sorry, I'm still seeing quite a few inconsistencies and bugs\nImagemin:\n- cloudfiles task is still serving from ./src/img/ (not the optimized path ./dist/img/)\n- when running grunt (default tasks), the complied templates are still serving images from ./src/img/, so any send or forthcoming browser-previews wouldn't be correct.\nAWS S3:\n- This is serving from ./src/img (not the min files from ./dist/img)\nReplace S3:\n- This is doing essentially the same thing as the cdn task. Ideally the cdn task would have options for cloudfiles and aws_s3 respectively.\nHope this comes across as constructive.\n. @clecompte - Sorry for tossing imagemin in there.\nThe cdn task could be updated like so:\ncdn: {\n          cloudfiles: {\n            options: {\n              cdn: '<%= secrets.cloudfiles.uri %>', // See README for secrets.json or replace this with your cdn uri\n              flatten: true,\n              supportedTypes: 'html'\n            },\n            cwd: './dist/',\n            dest: './dist/',\n            src: ['*.html']\n          },\n          aws: {\n            options: {\n              cdn: '<%= secrets.s3.bucketpath %>', // See README for secrets.json or replace this with your cdn uri\n              flatten: true,\n              supportedTypes: 'html'\n            },\n            cwd: './dist/',\n            dest: './dist/',\n            src: ['*.html']\n          }\n        },\nThe current cdnify alias would need to be updated like so:\ngrunt.registerTask('cdnify', ['default','cloudfiles','cdn:cloudfiles']);\n. @brandonb927 - My 10\u00a2 is that this is a starter kit that already supports a css pre-processor. If you prefer less to sass, you can download this project and make those preference-based changes.\n. @martinbutler it's possible to escape the line using a backslash\n\\{{ first_name }}\nOR\nYou can use an alternate syntax such as:\n[[ first_name ]] > {{ first_name }}\nThen and then add a custom regex via grunt task to replace it:\npatterns: [ {\n    match: /(\\[\\[)([^\\]\\r\\n]+)(\\]\\])/gi,\n    replacement: '{{ $2 }}'\n}]\nBetter to post a new issue / question in an issue that isn't closed :)\n. @leemunroe - Word. Preference on how we want to go about this and who's doing what?\nFYI - @clecompte\n. @leemunroe - Yes, sorry for the silence. I'll get this up to date with master and send the PR.\nCheers \n. a'ight @leemunroe - This looks good on my end and is up to date. \nFYI @chrisrowe \n. @leemunroe - Good catch. I caught that on my master, but never hit the feature branch. just cherry picked it and should be good to go!\n. Thank You! :bow: \n. @leemunroe - Took your suggestion and updated all refs to ./src/\nRelated, but not part of this PR:\n- s3 still needs to be removed ala #27\n- Cloudfiles task should get a separate PR and testing to change dest: '/' to dest: <%= paths.dist_img %> (#26)\n. @leemunroe - Love it. I was doing that on a couple projects with the following components:\n- Buttons\n- Horizontal\n- Signatures\n- Social Badges\n. @xavierartot - Checkout #33 and let us know if that's a preferable alternative to browsersync. It supports watch, live reload, browser preview(s) and quick nav to jump between compiled templates.\nIf you aren't feeling it, I can provide some sample code for BrowserSync to work with this project.\n. More directly, I'd consider adding a task. What's important is that watch is called after browserSync.\ngrunt.registerTask('giddyup', ['default','browserSync', 'watch']);\n. @toby1kenobi - It's not you. The cloudfiles task was never updated properly when imagemin was implemented. We'll get a fix / PR for this.\nLine 173 of Gruntfile.js should be 'src': '<%= paths.dist_img %>/*', NOT 'src': '<%= paths.src_img %>/*',\n. Passe with your restructure https://github.com/leemunroe/grunt-email-workflow/commit/eb2a79c8cc99c8756efac391b505b54754d3ec70\n. :+1: \n. @leemunroe - Right on! Hit me back with any feedback / questions once you've had time to review.\n. @leemunroe - Thanks for feedback / suggestions.\nThe first issue was word-break related with the long path in the code tag.\nThese latest updates should cover all your points. :beers: \n. :+1:\n. This is definitely a complicated. I think there's some refactoring/options to watch that can make this better and faster.\n\nscss changes should trigger scss, assemble, juice, and replace tasks for all templates.\nlayouts, partials, and data changes should trigger assemble, juice, and replace tasks for all templates.\nimg changes should trigger only imagemin task\n\nTaking it a step further, it's possible to incorporate something like the following that would process only a subset of src/emails/ templates.\n```\ngrunt watch:specific --files=\"filename_or_pattern\"\ngrunt build:specific --files=\"filename_or_pattern\"\n``` \n. No worries. I'll give this a spin when I have a second. I'm currently trying to wrap up #87 if you have any opinions or desire to help test that out.. Hey @macbookandrew \nI just pushed up a fork on my branch for build times and options. It addresses build times as well as watch related options.\nIt's not \"automagic\" unfortunately, but here's a use case that would only watch for and process:\n* template updates matching the name *2016-08*. \n* scss updates get compiled, but only applied to the afore mentioned templates\n* (Any layouts, data, or partials trigger a complete rebuild of all templates)\ngrunt preview --template=\"*2016-08*\"\nAdditional grunt option --noinline can be passed if you don't want css styles inlined (will be preserved in <style> tag.\ngrunt preview --template=\"*2016-08*\" --noinline\nLet me know if you're willing to give the branch a spin and provide any thoughts, feedback, or questions.. Solid. Thanks for testing!\nThere's a little tidying up and README updates to make. Other than that, should we give it a little time and prompt a few more people to test, or just go PR and done?. @macbookandrew - welcome back! Hope you had a good vacay. No rush here. Would love to have input + further testing to see if it meets your needs and is easy enough to use this way.. You'd have to remove the flatten: true option as well from /grunt/assemble.js\nThe downside(s) to this currently are:\n- The preview UI naively looks for /dist/*.html files, so template select will be blank. \n- You get more of the tree than you might want /dist/src/emails/<templates + subdirs>\n- css inlining and a number of other tasks don't compensate for depth in /dist at the moment\n. I'd stay away from near-duplicate grunt tasks.\nIdeal approach for what you're wanting to do would be to go through every grunt task and make sure it supported directory depth + add recursion to the preview app's template finder.\nAnother option would be to just prefix all your emails as opposed to having hierarchy. /emails/back_<template_name>.hbs\nI personally don't foresee the need to support directory structure in dist, but maybe that's just me and/or I don't see the full picture.\nCheers\n. Nice. Thanks for posting your solution :+1: \n. Not answering your question here, but avoiding ruby dependencies is pry a good move to keep this project more accessible. Roadie is ruby-centric.\n. Don't wrap your php in handlebars notation. PHP tags will be passed through assemble / handlebars unmodified if you write them as normal.\n{{{ <?= $firstname; ?> }}} should be simply <?php echo $firstname; ?>\nNOTE: The previewer will not parse or display your php code and the templates will still have .html extensions. You can go the extra mile to support .php extensions.\nin file grunt/assemble.js add:\noptions:\n    ext: '.php'\nThen for preview you'd have to add express-php via npm and in file server.js adapt the view engine from ejs to php\n. This does solve the issue of the actual replaced path(s). That said here are the related issues it creates that makes it incomplete for the workflow to function.\n\nBreaks images in preview (images are still written to dist/img/ but source files ref ../\nCDN Upload tasks for S3 & Cloudfiles do not write to the root / base folder. @toby1kenobi or @developering - if you're still using this project, and want to help us debug (a year later... eek).\n\nI'm not a WIN user, but I believe it's a permissions issue. A couple things worth trying.\n1. Try editing the clean task in grunt/clean.js to this:\njs\n// Clean your /dist folder\nmodule.exports = {\n  clean: [\"dist/*\"]\n};\n\nCheck your permissions on the project root folder and dist/, making sure they're writable. . @eldyvoon - I'm confused.\n\nYou say here \"it doesn't solve the problem\", then you submitted PR #89 which does exactly what I recommended in my suggestion 1 above in grunt/clean.js changing [\"dist\"] > [\"dist/*\"].\nPlease clarify + confirm my assumptions about your comments for me and anyone else reading this down the road.\n1. Your PR #89 (my suggestion 1) does solve the issue.\n2. Permissions making dist/ writable does not solve the issue.. Ok. I assume you are a WIN user? (I'm on a Mac and it's just fine)\nTo the best of my knowledge EPERM is a windows specific, permissions related error.\nPerhaps you could share your OS + Software versions for myself or others to help hone in on a fix?. Closing this one out @danilomatos - feel free to open a new ticket if you're still using this project and having issues.. @Mizpah - Block Helpers, see Raw Block sample are pry your best bet for getting uncompiled handlebars into your dist/ output.\n@ericdfields - Agree this is helpful. \nI've done a few iterations on the preview app that will render the compiled dist/ templates using various flavors (liquid, handlebars, php), plus allow you to create sample data files (json / yaml) that get parsed in for previewing only. You get A+ previews, and your templates are ready to ship as-is. TL;DR - Involves modifying server.js - I'll open a suggestion issue for this specifically.. @Mizpah - I just tried a variation of your code and it works just fine without the need to bypass compiling. Out of the box, handlebars won't compile non-handlebars syntax.\nBoth your sample code and the following simplification worked without issue and ended up in the compiled .html template identical to the input in .hbs\n<#list transaction.item as item>\n    <#if item_index==0>\n        {item.quantity@label}\n    </#if>\n    ${item.description}\n</#list>\nDid you have any specific errors or munged output that you can share?. @Mizpah99 - The juice task is treating the netsuite template syntax as html, converting logic and operators into attributes <#if item_index==0> becoming <#if item_index=\"=0\">\nYou can reproduce the issue in isolation over here: http://automattic.github.io/juice/\nI don't see a clear path to fixing that without doing something obscure. \nFor example. The following passes through juice unmodified. You'd have to then replace [[ to < and ]] to > after the juice task using something like grunt-replace\n<table class=\"order_details {{type}}\" cellpadding=\"0\" cellspacing=\"0\">\n  [[#list transaction.item as item]]\n  [[#if item_index==0]]\n  <thead>\n    <tr>\n      <th>{item.quantity@label}</th><th>{item.itemname@label}</th>\n    </tr>\n  </thead>\n  <tbody>\n  [[/#if]]\n    <tr>\n      <td>${item.description}</td>\n    </tr>\n  [[/#list]]\n  </tbody>\n</table>. With respect to non-html looking entities, passing other data through.\nYou can pass un-rendered single line hbs code with a backslash like this \\{{myvar}}\n87 is working towards adding a raw helper and much more.. Looks like your PR is still lingering.\nI was able to send mailgun emails just fine with the grunt send --template=[THE_TEMPLATE_NAME] command.\n@rwillwerth - What is your node version? That could be an issue if you're on an older version. I'm on v7.x\nnode --version\n. Nothing wrong with that, Mark. Thanks.\nWe can call this closed.. On the grunt -vs- gulp -vs- both scene, I'd recommend not trying to support both. Seems like a recipe for headaches and redundant code that needs to be kept in sync and maintained.\nI'd be curious to hear any specifics about why gulp would be better, or if just a cooler/newer thing. Installing and running npm install && run task is equally simple in both worlds.\nIf there's a huge cry for gulp over grunt, we could just port everything. . @ericdfields - data formats / naming conventions are key for sure. I do like the consideration of not inlining styles, presuming that the final engine will do that.\n@leemunroe - Express Server comes with a number of template engines supported out of the box, and many, many others from 3rd parties. I don't see that being too complicated to add supported engines and then conditionally process the preview based on the template extension / engine. Hypothetically of course.\nPushing this to the next level - should we make a bit of a spec, go YOLO style and just start a fork to play with, other?. Some quick research and feasibility tests are looking \ud83d\udc4d.\n\n[x] Create templates with any combination of extensions\n[x] Helper to pass mustache syntax through the compiler\n[x] Express preview handling multiple rending engines based on extension\n. Hey @ericdfields, @leemunroe and anyone else interested in testing this out.\n\nI just got a branch pushed up on my fork for multiple template engines.\nIt supports .ejs, .liquid, .hbs templates using consolidate (room for many more template engines).\nThe caveat is you have to name your src/emails/ as filename.<desired-extension>.hbs\nIt adds a raw helper:\n{{{{raw}}}}\n  whatever your heart desires... or non-rendered hbs code\n{{{{/raw}}}}\nSample data can be created in /preview/data/ either .json or .yml by simply adding one of those flavors with the base template name > _sample.html.hbs would lookup /preview/data/_sample.json or /preview/data/_sample.yaml\nThere's room for improvement, but it's a fully functional proof of concept! Look forward to your feedback.\ncaveat php is in there, but it's broken. There's some awkwardness passing variables into the previewer.. Thanks!\nTo your points.\n\n\nI vote we should fire up the gh wiki on this project to help elaborate on variations and options. That will help keep the README smaller, and we can include code samples as opposed to including them in the core repo.\n\n\nMaybe I'm not understanding correctly. Are you saying there's no way to send the dist/_sample.liquid for example via mailgun or to litmus fully rendered with the sample data? If I'm tracking... you're correct that doesn't work, but it could. dist/_sample.liquid is what you'd send off to your 3rd party service, right?\n\n\nPHP - not sure how to fix that either at the moment, nor do I care to spend more time trying to figure it out. I don't personally use many apps, or know of any ESP's that are php-driven. Someone else in the community with a hankering for that could patch and PR.... Chris, @romanlelek is mostly correct. \n\n\nYou would have to edit /grunt/aliases.yml to add a custom series of tasks. You would also need to modify or copy/rename some of the /grunt/*js tasks to suit your needs.\nIssue #57 is along these lines as a feature request.. Historical reference - This did not fix the issue #77 (authors words). Hey @jzantua - Can you post a sample of the configuration you're using and confirm it you are using this package (https://www.npmjs.com/package/grunt-ftp) or something else?. @jzantua - Yep, authentication is definitely required and unsupported. At the very top of the readme for the ftp-deploy package it says \"(Need sftp? Check out sftp-upload)\". . ",
    "clecompte": "Good catch -- I'll add a fix shortly.\n. Awesome, thanks!\n. Thanks -- I'll check it out and see about updating it to a supported version.\n. I have a better version of s3 coded and working. Will test further and send a PR shortly. Thanks @taeo for pointing this out!\n. @taeo I always appreciate the feedback.\nSince imagemin is not the focus of this PR, I'll defer that to another PR when I get the time to look over those issues. Hope to do that shortly.\nFor S3, I updated the source path. Forgot to change that from my tests.\nI understand what you're saying about the cdn task, but I'm not sure it's possible to include more than one cdn target. I tried to turn it into a multitask, which did not work. If you have any suggestions, I'm open to it. Might be worth swapping that task for something like https://www.npmjs.com/package/grunt-cdnify.\n. Yep, I was playing around with it a little earlier and discovered I had a typo. I'll update the branch shortly. Thanks!\n. @leemunroe This should be ready for your review.\n. @leemunroe I updated the s3-upgrade branch with the new changes. Everything seems to be working on my end. Let me know if you see any issues.\n. @taeo Nice -- thanks for taking this on.\n. Good catch -- I'll add a fix shortly.\n. Awesome, thanks!\n. Thanks -- I'll check it out and see about updating it to a supported version.\n. I have a better version of s3 coded and working. Will test further and send a PR shortly. Thanks @taeo for pointing this out!\n. @taeo I always appreciate the feedback.\nSince imagemin is not the focus of this PR, I'll defer that to another PR when I get the time to look over those issues. Hope to do that shortly.\nFor S3, I updated the source path. Forgot to change that from my tests.\nI understand what you're saying about the cdn task, but I'm not sure it's possible to include more than one cdn target. I tried to turn it into a multitask, which did not work. If you have any suggestions, I'm open to it. Might be worth swapping that task for something like https://www.npmjs.com/package/grunt-cdnify.\n. Yep, I was playing around with it a little earlier and discovered I had a typo. I'll update the branch shortly. Thanks!\n. @leemunroe This should be ready for your review.\n. @leemunroe I updated the s3-upgrade branch with the new changes. Everything seems to be working on my end. Let me know if you see any issues.\n. @taeo Nice -- thanks for taking this on.\n. ",
    "xavierartot": "Livereload is a great idea, but why not Brwoser-sync?\nIs include a server localhost:3000 and sync on many device.\nNice job.\n. I didn't find your project Taeo?\n. EDIT:\nI installed \ngem install premailer \ngem install hpricot\nand that works!\n. Livereload works well\n. That ok, I saw your repo, and is look really nice, I'd like the auto-prefixer.\nDo I have some exemple with BrowserSync?\nThank you.\n. Livereload is a great idea, but why not Brwoser-sync?\nIs include a server localhost:3000 and sync on many device.\nNice job.\n. I didn't find your project Taeo?\n. EDIT:\nI installed \ngem install premailer \ngem install hpricot\nand that works!\n. Livereload works well\n. That ok, I saw your repo, and is look really nice, I'd like the auto-prefixer.\nDo I have some exemple with BrowserSync?\nThank you.\n. ",
    "brandonb927": "No worries, I was going to take this on myself and just thought I'd ask if this was something in the works first.\n. No worries, I was going to take this on myself and just thought I'd ask if this was something in the works first.\n. ",
    "martinbutler": "@taeo thank you taeo. i pulled down the question b/c i did find the solution looking at the assemble.io repo, but i guess you were responding at the same time!\nthank you for the additional suggestion on the regex.\ncheers!\n. @taeo thank you taeo. i pulled down the question b/c i did find the solution looking at the assemble.io repo, but i guess you were responding at the same time!\nthank you for the additional suggestion on the regex.\ncheers!\n. ",
    "chrisrowe": "@taeo @leemunroe Thanks so much for this, great work. Looking forward to the PR merging :pray: \n. \ud83d\ude0d Thanks for all your hard work on this @leemunroe and @taeo. You've both saved me countless hours and hair pulling\n. @taeo @leemunroe Thanks so much for this, great work. Looking forward to the PR merging :pray: \n. \ud83d\ude0d Thanks for all your hard work on this @leemunroe and @taeo. You've both saved me countless hours and hair pulling\n. ",
    "sherzberg": "Any thoughts?\n. @leemunroe just getting back to needing to use this workflow again. sorry for the late reply.\nThe docker docs are pretty good (https://docs.docker.com/installation/mac/). On OSX, boot2docker is the way to go. It is available on homebrew.\n. Any thoughts?\n. @leemunroe just getting back to needing to use this workflow again. sorry for the late reply.\nThe docker docs are pretty good (https://docs.docker.com/installation/mac/). On OSX, boot2docker is the way to go. It is available on homebrew.\n. ",
    "thanhson1085": "+1\nThere are some issue with the installation to run your code. Docker will help everyone run you code quickly even they do not know how to install it\n. +1\nThere are some issue with the installation to run your code. Docker will help everyone run you code quickly even they do not know how to install it\n. ",
    "eddywashere": "Maybe you could switch to v2 of node-email-templates https://github.com/niftylettuce/node-email-templates/tree/v2.0\n. Maybe you could switch to v2 of node-email-templates https://github.com/niftylettuce/node-email-templates/tree/v2.0\n. ",
    "newswim": "Not sure, I got everything working after installing premailer independently. Perhaps check on current package versions and set them with \n```\n\n=1.2.3 <1.3.0\n```\n\nAlso, check out these articles:\nhttps://nodesource.com/blog/semver-tilde-and-caret\nhttp://blog.nodejitsu.com/package-dependencies-done-right/ (older article)\nhttps://github.com/npm/node-semver --- library for semvar parser\n. @leemunroe Did you see the release notes for NPM 3.0? It's only about 3 days old atp -- https://github.com/npm/npm/releases/tag/v3.0.0\nCheck out the section about the new npm install functionality.\n. I know they're working hard at NPM.. we should see a best currently\npossible solution soon.\nOn Wed, Jul 8, 2015 at 12:49 PM, Lee Munroe notifications@github.com\nwrote:\n\nClosing as I don't think there's anything we can do about this now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leemunroe/grunt-email-workflow/issues/39#issuecomment-119676040\n.\n. Not sure, I got everything working after installing premailer independently. Perhaps check on current package versions and set them with \n\n```\n\n=1.2.3 <1.3.0\n```\n\nAlso, check out these articles:\nhttps://nodesource.com/blog/semver-tilde-and-caret\nhttp://blog.nodejitsu.com/package-dependencies-done-right/ (older article)\nhttps://github.com/npm/node-semver --- library for semvar parser\n. @leemunroe Did you see the release notes for NPM 3.0? It's only about 3 days old atp -- https://github.com/npm/npm/releases/tag/v3.0.0\nCheck out the section about the new npm install functionality.\n. I know they're working hard at NPM.. we should see a best currently\npossible solution soon.\nOn Wed, Jul 8, 2015 at 12:49 PM, Lee Munroe notifications@github.com\nwrote:\n\nClosing as I don't think there's anything we can do about this now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leemunroe/grunt-email-workflow/issues/39#issuecomment-119676040\n.\n. \n",
    "bojingo": "In case anyone comes across this, hpricot is apparently not supported and I could not install the gem (see http://stackoverflow.com/questions/11605404/installing-hpricot). I did gem install nokogiri instead and it worked great.\n. In case anyone comes across this, hpricot is apparently not supported and I could not install the gem (see http://stackoverflow.com/questions/11605404/installing-hpricot). I did gem install nokogiri instead and it worked great.\n. ",
    "toby1kenobi": "Thanks!\n. Thanks!\n. ",
    "jrit": "Juice doesn't process either right now. Those properties don't have a real clean CSS equivalent. Would providing a default CSS with td{ margin: 0; padding: 0; } be enough, or are there clients that will still render padding by default?\n. Juice doesn't process either right now. Those properties don't have a real clean CSS equivalent. Would providing a default CSS with td{ margin: 0; padding: 0; } be enough, or are there clients that will still render padding by default?\n. ",
    "olapersson": "Here's an example (small png added in the branded template) where the image gets embedded:\nhttps://github.com/olapersson/grunt-email-workflow/tree/inline-image-repro\nFor reference, the same thing after the configuration change:\nhttps://github.com/olapersson/grunt-email-workflow/tree/inline-image-repro-fixed\nOpened a pull request with the change #50.\n. Here's an example (small png added in the branded template) where the image gets embedded:\nhttps://github.com/olapersson/grunt-email-workflow/tree/inline-image-repro\nFor reference, the same thing after the configuration change:\nhttps://github.com/olapersson/grunt-email-workflow/tree/inline-image-repro-fixed\nOpened a pull request with the change #50.\n. ",
    "macbookandrew": "@leemunroe I found grunt-newer-explicit and it seems to be working better. Here\u2019s a PR with changes that should work\u2026I\u2019ve modified a bunch of other settings in my working repo, but I think this is enough to get this working.\nAlso note that I removed clean from the default grunt task\u2026seems at odds with the grunt-newer approach, but it\u2019s up to you.\n. The more I think about this, it\u2019s not going to work well.\nFirst run\n1. Save a *.hbs file\n2. The template is assembled\n3. The output is juiced\nSo far, so good\nSubsequent runs\n1. Make some more changes\n2. The templates are all assembled again because juice modified them\n3. The output files are all juiced again because they\u2019ve been reassembled\nWithout an intermediate location to save assembled output before juice-ing it to the final location, I\u2019m not sure how to make this work. Any ideas?\n. @leemunroe Not really; I ended up modifying the grunt/juice.js file with a wildcard src and just updating it as necessary for newer files:\nfiles: [{\n      expand: true,\n      src: ['<%= paths.dist %>/*2016-08*.html'],\n      dest: ''\n    }]\n. @taeo I like the idea. Unfortunately I\u2019m not fluent enough with gulp to build those changes without taking a whole day to do it \ud83d\ude04 . @leemunroe @taeo Thanks! I just got back from vacation. Hopefully I can test this out in the next few days, but don\u2019t hold it just on my account.. Sorry\u2026thought this was working correctly but am running into issues.\n. @leemunroe I found grunt-newer-explicit and it seems to be working better. Here\u2019s a PR with changes that should work\u2026I\u2019ve modified a bunch of other settings in my working repo, but I think this is enough to get this working.\nAlso note that I removed clean from the default grunt task\u2026seems at odds with the grunt-newer approach, but it\u2019s up to you.\n. The more I think about this, it\u2019s not going to work well.\nFirst run\n1. Save a *.hbs file\n2. The template is assembled\n3. The output is juiced\nSo far, so good\nSubsequent runs\n1. Make some more changes\n2. The templates are all assembled again because juice modified them\n3. The output files are all juiced again because they\u2019ve been reassembled\nWithout an intermediate location to save assembled output before juice-ing it to the final location, I\u2019m not sure how to make this work. Any ideas?\n. @leemunroe Not really; I ended up modifying the grunt/juice.js file with a wildcard src and just updating it as necessary for newer files:\nfiles: [{\n      expand: true,\n      src: ['<%= paths.dist %>/*2016-08*.html'],\n      dest: ''\n    }]\n. @taeo I like the idea. Unfortunately I\u2019m not fluent enough with gulp to build those changes without taking a whole day to do it \ud83d\ude04 . @leemunroe @taeo Thanks! I just got back from vacation. Hopefully I can test this out in the next few days, but don\u2019t hold it just on my account.. Sorry\u2026thought this was working correctly but am running into issues.\n. ",
    "19peaches": "Yeah this works but as you said, breaks a few other things like juice and image urls.\nI wonder would it be better to create separate grunt tasks for each directory? Or perhaps even better, multiple tasks to assemble?\nI tried this:\njs\nmodule.exports = {\n    front: {\n        options: {\n          layoutdir: '<%= paths.src %>/layouts',\n          partials: ['<%= paths.src %>/partials/**/*.hbs'],\n          helpers: ['<%= paths.src %>/helpers/**/*.js'],\n          data: ['<%= paths.src %>/data/*.{json,yml}'],\n          flatten: true\n        },\n        pages: {\n          src: ['<%= paths.src %>/emails/front/*.hbs'],\n          dest: '<%= paths.dist %>/front'\n        }\n    },\n    back: {\n        options: {\n          layoutdir: '<%= paths.src %>/layouts',\n          partials: ['<%= paths.src %>/partials/**/*.hbs'],\n          helpers: ['<%= paths.src %>/helpers/**/*.js'],\n          data: ['<%= paths.src %>/data/*.{json,yml}'],\n          flatten: true\n        },\n        pages: {\n          src: ['<%= paths.src %>/emails/back/*.hbs'],\n          dest: '<%= paths.dist %>/back'\n        }\n    }\n}\nit doesn't throw an error, but it doesn't compile any files either.\n. Right. Normally I wouldn't do something like this, but there are simply way too many emails in this projects to have them all dumped in a single folder. Approx 50 different templates or so right now.\nI have however resolved the problem, after consulting the grunt-assemble repo I see that this is very simple:\njs\nmodule.exports = {\n    options: {\n      layoutdir: '<%= paths.src %>/layouts',\n      partials: ['<%= paths.src %>/partials/**/*.hbs'],\n      helpers: ['<%= paths.src %>/helpers/**/*.js'],\n      data: ['<%= paths.src %>/data/*.{json,yml}'],\n      flatten: true\n    },\n    front: {\n      src: ['<%= paths.src %>/emails/front/*.hbs'],\n      dest: '<%= paths.dist %>/front/'\n    },\n    back: {\n      src: ['<%= paths.src %>/emails/back/*.hbs'],\n      dest: '<%= paths.dist %>/back/'\n    }\n};\nThanks for your help :)\n. Well chalk one up to thinking way too far into it.\nThanks so much.\n. Yeah this works but as you said, breaks a few other things like juice and image urls.\nI wonder would it be better to create separate grunt tasks for each directory? Or perhaps even better, multiple tasks to assemble?\nI tried this:\njs\nmodule.exports = {\n    front: {\n        options: {\n          layoutdir: '<%= paths.src %>/layouts',\n          partials: ['<%= paths.src %>/partials/**/*.hbs'],\n          helpers: ['<%= paths.src %>/helpers/**/*.js'],\n          data: ['<%= paths.src %>/data/*.{json,yml}'],\n          flatten: true\n        },\n        pages: {\n          src: ['<%= paths.src %>/emails/front/*.hbs'],\n          dest: '<%= paths.dist %>/front'\n        }\n    },\n    back: {\n        options: {\n          layoutdir: '<%= paths.src %>/layouts',\n          partials: ['<%= paths.src %>/partials/**/*.hbs'],\n          helpers: ['<%= paths.src %>/helpers/**/*.js'],\n          data: ['<%= paths.src %>/data/*.{json,yml}'],\n          flatten: true\n        },\n        pages: {\n          src: ['<%= paths.src %>/emails/back/*.hbs'],\n          dest: '<%= paths.dist %>/back'\n        }\n    }\n}\nit doesn't throw an error, but it doesn't compile any files either.\n. Right. Normally I wouldn't do something like this, but there are simply way too many emails in this projects to have them all dumped in a single folder. Approx 50 different templates or so right now.\nI have however resolved the problem, after consulting the grunt-assemble repo I see that this is very simple:\njs\nmodule.exports = {\n    options: {\n      layoutdir: '<%= paths.src %>/layouts',\n      partials: ['<%= paths.src %>/partials/**/*.hbs'],\n      helpers: ['<%= paths.src %>/helpers/**/*.js'],\n      data: ['<%= paths.src %>/data/*.{json,yml}'],\n      flatten: true\n    },\n    front: {\n      src: ['<%= paths.src %>/emails/front/*.hbs'],\n      dest: '<%= paths.dist %>/front/'\n    },\n    back: {\n      src: ['<%= paths.src %>/emails/back/*.hbs'],\n      dest: '<%= paths.dist %>/back/'\n    }\n};\nThanks for your help :)\n. Well chalk one up to thinking way too far into it.\nThanks so much.\n. ",
    "xavisavvy": "If you think there is interest without cluttering the repo, I can also create a pardot demo / documentation page similar to how you did your component demo. \nI believe this one looks feature complete:\nhttps://www.npmjs.com/package/pardot#email\nHere is the official non-npm documentation for pardot as well for sending emails:\nhttp://developer.pardot.com/kb/api-version-3/emails/#supported-operations_1\n. Do you think there is any interest in a mailchimp yml file as well?\n. Discovered a bug in the new and old yml files. Fixing before commit. \n. If you think there is interest without cluttering the repo, I can also create a pardot demo / documentation page similar to how you did your component demo. \nI believe this one looks feature complete:\nhttps://www.npmjs.com/package/pardot#email\nHere is the official non-npm documentation for pardot as well for sending emails:\nhttp://developer.pardot.com/kb/api-version-3/emails/#supported-operations_1\n. Do you think there is any interest in a mailchimp yml file as well?\n. Discovered a bug in the new and old yml files. Fixing before commit. \n. ",
    "mtsweir": "thanks I got it working with grunt-assemble, there might be some variable changes.\nMine looks like:\n// Assembles your email content with HTML layout\n      assemble: {\n        options: {\n          layoutdir: 'src/layouts',\n          partials: ['src/partials//.hbs'],\n          flatten: true\n        },\n        pages: {\n          src: ['src/emails/.hbs'],\n          dest: 'dist/'\n        }\n      },\n. Right here:\n// Assembles your email content with HTML layout\n  assemble: {\n    options: {\n      layoutdir: 'src/layouts',\n      partials: ['src/partials/**/*.hbs'],\n      flatten: true\n    },\n    pages: {\n      src: ['src/emails/*.hbs'],\n      dest: 'dist/'\n    }\n  },\nSo basically I have had to change these to just src instead of the <% %> method.\n. So just in summary i should use an absolute path instead of e.g <%= paths.src %>?\n. It's specifically ejs, I tried adding ejs on its own but still got an error:\nRunning \"assemble:pages\" (assemble) task\nWarning: An error occurred while processing a template (Cannot read property 'src' of undefined). Use --force to continue.\nSo I'm assuming its related to the Gruntfile.js where you have defined the paths in the data object?\n. Almost there now! exciting. Added 'load-grunt-config' and used the same method which looks great.\nThen added the data paths to the Gruntfile.js and now working :-) Do I need to use the <%=  %> method? What exactly was the reason to use it? \n. Gruntfile.js is currently\"\nmodule.exports = function(grunt) {\nrequire('load-grunt-config')(grunt, {\n```\n// Pass data to tasks\ndata: {\n// Re-usable filesystem path variables\n  paths: {\n    src:        'src',\n    src_img:    'src/img',\n    dist:       'dist',\n    dist_img:   'dist/img',\n    preview:    'preview'\n  }\n}\n```\n});\n};\n. I'd love to see how you did the aliases part, and the way you configured your Gruntfile.js.\nThe way its constructed is really nice, is there any places I can learn how you set this up?\n. thanks I got it working with grunt-assemble, there might be some variable changes.\nMine looks like:\n// Assembles your email content with HTML layout\n      assemble: {\n        options: {\n          layoutdir: 'src/layouts',\n          partials: ['src/partials//.hbs'],\n          flatten: true\n        },\n        pages: {\n          src: ['src/emails/.hbs'],\n          dest: 'dist/'\n        }\n      },\n. Right here:\n// Assembles your email content with HTML layout\n  assemble: {\n    options: {\n      layoutdir: 'src/layouts',\n      partials: ['src/partials/**/*.hbs'],\n      flatten: true\n    },\n    pages: {\n      src: ['src/emails/*.hbs'],\n      dest: 'dist/'\n    }\n  },\nSo basically I have had to change these to just src instead of the <% %> method.\n. So just in summary i should use an absolute path instead of e.g <%= paths.src %>?\n. It's specifically ejs, I tried adding ejs on its own but still got an error:\nRunning \"assemble:pages\" (assemble) task\nWarning: An error occurred while processing a template (Cannot read property 'src' of undefined). Use --force to continue.\nSo I'm assuming its related to the Gruntfile.js where you have defined the paths in the data object?\n. Almost there now! exciting. Added 'load-grunt-config' and used the same method which looks great.\nThen added the data paths to the Gruntfile.js and now working :-) Do I need to use the <%=  %> method? What exactly was the reason to use it? \n. Gruntfile.js is currently\"\nmodule.exports = function(grunt) {\nrequire('load-grunt-config')(grunt, {\n```\n// Pass data to tasks\ndata: {\n// Re-usable filesystem path variables\n  paths: {\n    src:        'src',\n    src_img:    'src/img',\n    dist:       'dist',\n    dist_img:   'dist/img',\n    preview:    'preview'\n  }\n}\n```\n});\n};\n. I'd love to see how you did the aliases part, and the way you configured your Gruntfile.js.\nThe way its constructed is really nice, is there any places I can learn how you set this up?\n. ",
    "jrutter": "I believe you can just run this \"npm install grunt-parallel --save\"  to add it\n. I believe you can just run this \"npm install grunt-parallel --save\"  to add it\n. ",
    "cmacdonnacha": "npm install grunt-parallel --save-dev worked for me\n. npm install grunt-parallel --save-dev worked for me\n. ",
    "eldyvoon": "It's annoying the dist directory which in ur case is img/src, I solved that by altering the value of replace.js\n...\npatterns: [\n        {\n          match: /(<img[^>]+[\\\"'])(\\.\\.\\/src\\/img\\/)/gi,  // Matches <img * src=\"../src/img or <img * src='../src/img'\n          replacement: '$1../'\n        },\n        {\n          match: /(url\\(*[^)])(\\.\\.\\/src\\/img\\/)/gi,  // Matches url('../src/img') or url(../src/img) and even url(\"../src/img\")\n          replacement: '$1../'\n        }\n      ]\n.... @taeo Agreed. I actually have to adjust few path to make it to work. . @taeo it doesn't solve the problem.\n. @taeo, I made a PR but then later on I found that it doesn't solve the problem, simply ignore my PR. My workaround is to use grunt clean and grunt serve. Changing to [\"dist/\"] doesn't help, try to add one new file while keeping grunt serve running.. It's annoying the dist directory which in ur case is img/src, I solved that by altering the value of replace.js\n...\npatterns: [\n        {\n          match: /(<img[^>]+[\\\"'])(\\.\\.\\/src\\/img\\/)/gi,  // Matches <img * src=\"../src/img or <img * src='../src/img'\n          replacement: '$1../'\n        },\n        {\n          match: /(url\\(*[^)])(\\.\\.\\/src\\/img\\/)/gi,  // Matches url('../src/img') or url(../src/img) and even url(\"../src/img\")\n          replacement: '$1../'\n        }\n      ]\n.... @taeo Agreed. I actually have to adjust few path to make it to work. . @taeo it doesn't solve the problem.\n. @taeo, I made a PR but then later on I found that it doesn't solve the problem, simply ignore my PR. My workaround is to use grunt clean and grunt serve. Changing to [\"dist/\"] doesn't help, try to add one new file while keeping grunt serve running.. ",
    "romanlelek": "Ok, thank you for this quick fix. I originally thought that I need to have all styles in head even if they are inlined.\n. I have just tested it and it works for me. Thank you.\nSecrets.json - I have added my domain (without http): mydomain.com\ngrunt/mailgun.js - I have added :  domain: '<%= secrets.mailgun.domain %>',\nand updated package json to ^2.0.1 (I have originally tried previous non-working version too) and of course sudo npm install.\nRunning \"mailgun:mailer\" (mailgun) task\nSent msg to me@mydomain.com\n{ id: '20170315155421.34295.99154....@mydomain.com',\n  message: 'Queued. Thank you.' }\nThank you.\nBest regards,\nRoman \n. Hello, \nI think that you can define, which of your tasks should run in grunt/watch.js by parameter tasks:\npreview_dist: {\n    files: ['./dist/*'],\n    tasks: [],\n    options: {\n      livereload: true\n    }\n  },\nWhen empty - it runs grunt's 'default' task. But you can add you own sequence of tasks e.g. forexample without imagemin.\nBest regards,\nRoman. Ok, thank you for this quick fix. I originally thought that I need to have all styles in head even if they are inlined.\n. I have just tested it and it works for me. Thank you.\nSecrets.json - I have added my domain (without http): mydomain.com\ngrunt/mailgun.js - I have added :  domain: '<%= secrets.mailgun.domain %>',\nand updated package json to ^2.0.1 (I have originally tried previous non-working version too) and of course sudo npm install.\nRunning \"mailgun:mailer\" (mailgun) task\nSent msg to me@mydomain.com\n{ id: '20170315155421.34295.99154....@mydomain.com',\n  message: 'Queued. Thank you.' }\nThank you.\nBest regards,\nRoman \n. Hello, \nI think that you can define, which of your tasks should run in grunt/watch.js by parameter tasks:\npreview_dist: {\n    files: ['./dist/*'],\n    tasks: [],\n    options: {\n      livereload: true\n    }\n  },\nWhen empty - it runs grunt's 'default' task. But you can add you own sequence of tasks e.g. forexample without imagemin.\nBest regards,\nRoman. ",
    "developering": "@toby1kenobi Thanks for the tip on commenting out the clean task. I'm also on Windows 10 and am seeing the same issue. Unfortunately, it makes the grunt serve task basically unusable. Removing the clean task seems to be the workaround for now.\n. @toby1kenobi Thanks for the tip on commenting out the clean task. I'm also on Windows 10 and am seeing the same issue. Unfortunately, it makes the grunt serve task basically unusable. Removing the clean task seems to be the workaround for now.\n. ",
    "sakib0hasan": "Hey, if anyone is still having the issue: this code works for me.\nmodule.exports = {\n  clean: [\"dist/*.html\"]\n};\nHope it helps.\n. Hey, if anyone is still having the issue: this code works for me.\nmodule.exports = {\n  clean: [\"dist/*.html\"]\n};\nHope it helps.\n. ",
    "FGRibreau": "Hum, since the chart is a picture, I don't think it will be possible the only way we have is to set width:100% without height, so the picture will resize depending on the container.\nWould you like me to change the template so height & width will only be used for image chart size but not in the <img> itself?\n. @leemunroe thanks for your feedback! I updated the PR :)\n. Hum, since the chart is a picture, I don't think it will be possible the only way we have is to set width:100% without height, so the picture will resize depending on the container.\nWould you like me to change the template so height & width will only be used for image chart size but not in the <img> itself?\n. @leemunroe thanks for your feedback! I updated the PR :)\n. ",
    "adyz": "I think they are not letting us send the email without a domain. I see this in their log: \nRejected: 'This is a test email' Sandbox subdomains are for test purposes only. Please add your own domain or add the address to authorized recipients in Account Settings.:. @leemunroe Thank you very much!. I think they are not letting us send the email without a domain. I see this in their log: \nRejected: 'This is a test email' Sandbox subdomains are for test purposes only. Please add your own domain or add the address to authorized recipients in Account Settings.:. @leemunroe Thank you very much!. ",
    "Mizpah": "I should add that I have tried:\n{{{<#list transaction.item as item><#if item_index==0>}}}\n{{{{raw}}}}<#list transaction.item as item><#if item_index==0>{{{{/raw}}}}\n\\<#list transaction.item as item><#if item_index==0>}}}\nand many other variants!\n. Thanks @taeo - will dive into this later today, and put together a .hbs and the output thats being modified!. I should add that I have tried:\n{{{<#list transaction.item as item><#if item_index==0>}}}\n{{{{raw}}}}<#list transaction.item as item><#if item_index==0>{{{{/raw}}}}\n\\<#list transaction.item as item><#if item_index==0>}}}\nand many other variants!\n. Thanks @taeo - will dive into this later today, and put together a .hbs and the output thats being modified!. ",
    "ericdfields": "I'm looking for similar, too. Trying to establish a workflow where this tool helps us develop and test templates that would make their way to Postmark as a template. Their templating language is Mustachio, which is mostly similar to what we're doing in handlebars. I think all the syntax I'd want to use is the same between HBS and Mustachio.\nMy ideal scenario is to build the template with g-e-w with dummy data provided from a /data file, iterate over it fully rendered, then be able to flag a render to output in \"template mode,\" with no dummy data and all the partials flattened.\nIn this scenario, littering my template w/ extra flags would be sub-par.\nI'll see if I can pull it off with a helper, but any feasibility insight would be super. . @taeo very cool. Thanks for the guidance.. Definitely sums up what we talked about here.\nThis allows us to treat g-w-e as a \"dev\" environment for emails, while our (non-mailgun) third party system of choice acts as \"staging\" where we eventually fire off \"production\" emails.\nThoughts:\n\na folder along the lines of /data that would render into a select menu next to your email select menu in preview. choose the data source for the template you're working with'\nmaybe indicate \"test\" data in /data by filename convention:\u00a0/data/failed-transation.test.json, only use .test.(json|yml) files as dummy data sources\npass-through flag would presumably follow and assemble partials, but leave non-partial tags alone, uncompiled.\noption to render compiled stylesheet within  tags instead of juiced\n\nI'm still not sure where in the grunt process handlebars content gets substituted for real data if it exists. I could crudely intercept and escape a lot of my tags to achieve pass-through mode.\n. I'm looking for similar, too. Trying to establish a workflow where this tool helps us develop and test templates that would make their way to Postmark as a template. Their templating language is Mustachio, which is mostly similar to what we're doing in handlebars. I think all the syntax I'd want to use is the same between HBS and Mustachio.\nMy ideal scenario is to build the template with g-e-w with dummy data provided from a /data file, iterate over it fully rendered, then be able to flag a render to output in \"template mode,\" with no dummy data and all the partials flattened.\nIn this scenario, littering my template w/ extra flags would be sub-par.\nI'll see if I can pull it off with a helper, but any feasibility insight would be super. . @taeo very cool. Thanks for the guidance.. Definitely sums up what we talked about here.\nThis allows us to treat g-w-e as a \"dev\" environment for emails, while our (non-mailgun) third party system of choice acts as \"staging\" where we eventually fire off \"production\" emails.\nThoughts:\n\na folder along the lines of /data that would render into a select menu next to your email select menu in preview. choose the data source for the template you're working with'\nmaybe indicate \"test\" data in /data by filename convention:\u00a0/data/failed-transation.test.json, only use .test.(json|yml) files as dummy data sources\npass-through flag would presumably follow and assemble partials, but leave non-partial tags alone, uncompiled.\noption to render compiled stylesheet within  tags instead of juiced\n\nI'm still not sure where in the grunt process handlebars content gets substituted for real data if it exists. I could crudely intercept and escape a lot of my tags to achieve pass-through mode.\n. ",
    "HedgesDirect": "```\nBack again! As per the email above, am back doing some more of these. Here is an .hbs file containing an orders table.\n\n<#list transaction.item as item><#if item_index==0>\n  \n\n{item.quantity@label}{item.itemname@label}\n\n\n\n#if\n\n${item.quantity}${item.description}\n\n#list\n\n\n```\nLine 2 is the issue - when output in the workflow it looks like this:\n<#list transaction.item=\"\" as=\"\" item=\"\"><#if item_index=\"=0\">\nWhich is enough to prevent it from being imported into the netsuite mail templates. Manually replacing this line after generation works as expected.\n. ```\nBack again! As per the email above, am back doing some more of these. Here is an .hbs file containing an orders table.\n\n<#list transaction.item as item><#if item_index==0>\n  \n\n{item.quantity@label}{item.itemname@label}\n\n\n\n#if\n\n${item.quantity}${item.description}\n\n#list\n\n\n```\nLine 2 is the issue - when output in the workflow it looks like this:\n<#list transaction.item=\"\" as=\"\" item=\"\"><#if item_index=\"=0\">\nWhich is enough to prevent it from being imported into the netsuite mail templates. Manually replacing this line after generation works as expected.\n. ",
    "VanGTO": "I can confirm same issue as @williamdavies90 - I ran a test run about half an hour ago and it's not appearing in the Mailgun logs. Last run i sent successfully, was on 22 Feb 2017. So it appears something has changed between then and now.\n@leemunroe anything in the source below that you think may be responsible?\nhttps://www.hitchhq.com/mailgun/activities?utm_source=mailgun&utm_medium=widget&utm_campaign=click_widget. So I've also tried applying the changes in the PR:\n\ngrunt/mailgun.js\npackage.json\nAlso added the corresponding \"domain\" entry to the secrets.json file\nDidn't update the readme.md as didn't seem necessary at this point for my test.\n\nThe test send appears to go through fine in terminal. However, still no dice in the logs.\nHere's my console output:\n`Craigs-MacBook-Pro:mailgun-workflow craig$ grunt mailgun -v\nInitializing\nCommand-line options: --verbose\nReading \"Gruntfile.js\" Gruntfile...OK\nRegistering Gruntfile tasks.\nReading secrets.json...OK\nParsing secrets.json...OK\nInitializing config...OK\nRegistering \"grunt-assemble\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-assemble/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-assemble/package.json...OK\nLoading \"assemble.js\" tasks...OK\n+ assemble\nRegistering \"grunt-autoprefixer\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-autoprefixer/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-autoprefixer/package.json...OK\nLoading \"autoprefixer.js\" tasks...OK\n+ autoprefixer\nRegistering \"grunt-aws-s3\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-aws-s3/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-aws-s3/package.json...OK\nLoading \"aws_s3.js\" tasks...OK\n+ aws_s3\nRegistering \"grunt-cdn\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-cdn/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-cdn/package.json...OK\nLoading \"grunt-cdn.js\" tasks...OK\n+ cdn\nRegistering \"grunt-cloudfiles\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-cloudfiles/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-cloudfiles/package.json...OK\nLoading \"cloudfiles.js\" tasks...OK\n+ cloudfiles\nRegistering \"grunt-contrib-clean\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-clean/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-clean/package.json...OK\nLoading \"clean.js\" tasks...OK\n+ clean\nRegistering \"grunt-contrib-imagemin\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-imagemin/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-imagemin/package.json...OK\nLoading \"imagemin.js\" tasks...OK\n+ imagemin\nRegistering \"grunt-contrib-watch\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-watch/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-watch/package.json...OK\nLoading \"watch.js\" tasks...OK\n+ watch\nRegistering \"grunt-express\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-express/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-express/package.json...OK\nRegistering \"grunt-parallel\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-express/node_modules/grunt-parallel/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-express/node_modules/grunt-parallel/package.json...OK\nLoading \"parallel.js\" tasks...OK\n+ parallel\nLoading \"express.js\" tasks...OK\n+ express, express-keepalive, express-restart, express-server, express-start\nRegistering \"grunt-juice-email\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-juice-email/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-juice-email/package.json...OK\nLoading \"juice.js\" tasks...OK\n+ juice\nRegistering \"grunt-litmus\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-litmus/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-litmus/package.json...OK\nLoading \"litmus.js\" tasks...OK\n+ litmus\nRegistering \"grunt-mailgun\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-mailgun/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-mailgun/package.json...OK\nLoading \"mailgun.js\" tasks...OK\n+ mailgun\nRegistering \"grunt-open\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-open/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-open/package.json...OK\nLoading \"open.js\" tasks...OK\n+ open\nRegistering \"grunt-parallel\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-parallel/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-parallel/package.json...OK\nLoading \"parallel.js\" tasks...OK\n+ parallel\nRegistering \"grunt-replace\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-replace/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-replace/package.json...OK\nLoading \"replace.js\" tasks...OK\n+ replace\nRegistering \"grunt-sass\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-sass/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-sass/package.json...OK\nnode-sass   3.13.1  (Wrapper)   [JavaScript]\nlibsass     3.3.6   (Sass Compiler) [C/C++]\nLoading \"sass.js\" tasks...OK\n+ sass\nLoading \"Gruntfile.js\" tasks...OK\n+ default, rsupload, s3upload, send, serve\nRunning tasks: mailgun\nRunning \"mailgun\" task\nRunning \"mailgun:mailer\" (mailgun) task\nVerifying property mailgun.mailer exists in config...OK\nFiles: [no src]\nSent mailgun msg to testing@m...`\nI also reached out to mailgun support and here's their response:\n\nHello Craig,\nThank you for contacting Mailgun support. \nWe haven't made any updates to the API.\nI was able to successfully send out a messages using curl:\n~~~\n$ curl -s --user api:yourapikeyhere https://api.mailgun.net/v2/mail.MYDOMAIN.com/messages -F from='Sample Email me@mail.MYDOMAIN.com' -F to=mgbox01@gmail.com -F subject='Test Message' -F text='Testing some Mailgun awesomness!'\n{\n  \"id\": \"20170313061320.126621.18660.EA1B35D0@mail.MYDOMAIN.com\",\n  \"message\": \"Queued. Thank you.\"\n~~~\n~~~\n13.03.2017 06:13  Delivered: me@mail.MYDOMAIN.com \u2192 mgbox01@gmail.com 'Test Message' Server response: 250 OK  \n13.03.2017 06:13  Accepted: me@mail.MYDOMAIN.com \u2192 mgbox01@gmail.com 'Test Message'\n~~~\nThanks,\nRaquel@MG. No dice for me. I've followed changes:\n\nAdded to grunt/mailgun.js\ndomain: '<%= secrets.mailgun.domain %>', // See README for secrets.json or replace this with your own email domain\nAdded to secrets.json\n\"domain\": \"mail.my-domain-name.com\", NB - tried naked domain, and also with http:// unsuccessfully\nAdded to package.json\n\"grunt-mailgun\": \"^2.0.1\", NB removed 1.0.1 and then 2.0.0\nAs i say, still not working for me.. Sounds good. It's always good to have options/redundancies. \nTo that end, I have been meaning to ask if you had appetite to add options for other transactional mail vendors. I'm specifically looking at AWS SES. I'm looking to try and replicate your grunt (and/or gulp process once developed) for SES. Thus allowing another option and having a redundancy in place should things go a bit 'Pete Tong'.\nThoughts?. I can confirm same issue as @williamdavies90 - I ran a test run about half an hour ago and it's not appearing in the Mailgun logs. Last run i sent successfully, was on 22 Feb 2017. So it appears something has changed between then and now.\n@leemunroe anything in the source below that you think may be responsible?\nhttps://www.hitchhq.com/mailgun/activities?utm_source=mailgun&utm_medium=widget&utm_campaign=click_widget. So I've also tried applying the changes in the PR:\n\ngrunt/mailgun.js\npackage.json\nAlso added the corresponding \"domain\" entry to the secrets.json file\nDidn't update the readme.md as didn't seem necessary at this point for my test.\n\nThe test send appears to go through fine in terminal. However, still no dice in the logs.\nHere's my console output:\n`Craigs-MacBook-Pro:mailgun-workflow craig$ grunt mailgun -v\nInitializing\nCommand-line options: --verbose\nReading \"Gruntfile.js\" Gruntfile...OK\nRegistering Gruntfile tasks.\nReading secrets.json...OK\nParsing secrets.json...OK\nInitializing config...OK\nRegistering \"grunt-assemble\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-assemble/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-assemble/package.json...OK\nLoading \"assemble.js\" tasks...OK\n+ assemble\nRegistering \"grunt-autoprefixer\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-autoprefixer/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-autoprefixer/package.json...OK\nLoading \"autoprefixer.js\" tasks...OK\n+ autoprefixer\nRegistering \"grunt-aws-s3\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-aws-s3/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-aws-s3/package.json...OK\nLoading \"aws_s3.js\" tasks...OK\n+ aws_s3\nRegistering \"grunt-cdn\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-cdn/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-cdn/package.json...OK\nLoading \"grunt-cdn.js\" tasks...OK\n+ cdn\nRegistering \"grunt-cloudfiles\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-cloudfiles/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-cloudfiles/package.json...OK\nLoading \"cloudfiles.js\" tasks...OK\n+ cloudfiles\nRegistering \"grunt-contrib-clean\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-clean/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-clean/package.json...OK\nLoading \"clean.js\" tasks...OK\n+ clean\nRegistering \"grunt-contrib-imagemin\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-imagemin/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-imagemin/package.json...OK\nLoading \"imagemin.js\" tasks...OK\n+ imagemin\nRegistering \"grunt-contrib-watch\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-contrib-watch/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-contrib-watch/package.json...OK\nLoading \"watch.js\" tasks...OK\n+ watch\nRegistering \"grunt-express\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-express/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-express/package.json...OK\nRegistering \"grunt-parallel\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-express/node_modules/grunt-parallel/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-express/node_modules/grunt-parallel/package.json...OK\nLoading \"parallel.js\" tasks...OK\n+ parallel\nLoading \"express.js\" tasks...OK\n+ express, express-keepalive, express-restart, express-server, express-start\nRegistering \"grunt-juice-email\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-juice-email/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-juice-email/package.json...OK\nLoading \"juice.js\" tasks...OK\n+ juice\nRegistering \"grunt-litmus\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-litmus/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-litmus/package.json...OK\nLoading \"litmus.js\" tasks...OK\n+ litmus\nRegistering \"grunt-mailgun\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-mailgun/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-mailgun/package.json...OK\nLoading \"mailgun.js\" tasks...OK\n+ mailgun\nRegistering \"grunt-open\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-open/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-open/package.json...OK\nLoading \"open.js\" tasks...OK\n+ open\nRegistering \"grunt-parallel\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-parallel/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-parallel/package.json...OK\nLoading \"parallel.js\" tasks...OK\n+ parallel\nRegistering \"grunt-replace\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-replace/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-replace/package.json...OK\nLoading \"replace.js\" tasks...OK\n+ replace\nRegistering \"grunt-sass\" local Npm module tasks.\nReading /Projects/mailgun-workflow/node_modules/grunt-sass/package.json...OK\nParsing /Projects/mailgun-workflow/node_modules/grunt-sass/package.json...OK\nnode-sass   3.13.1  (Wrapper)   [JavaScript]\nlibsass     3.3.6   (Sass Compiler) [C/C++]\nLoading \"sass.js\" tasks...OK\n+ sass\nLoading \"Gruntfile.js\" tasks...OK\n+ default, rsupload, s3upload, send, serve\nRunning tasks: mailgun\nRunning \"mailgun\" task\nRunning \"mailgun:mailer\" (mailgun) task\nVerifying property mailgun.mailer exists in config...OK\nFiles: [no src]\nSent mailgun msg to testing@m...`\nI also reached out to mailgun support and here's their response:\n\nHello Craig,\nThank you for contacting Mailgun support. \nWe haven't made any updates to the API.\nI was able to successfully send out a messages using curl:\n~~~\n$ curl -s --user api:yourapikeyhere https://api.mailgun.net/v2/mail.MYDOMAIN.com/messages -F from='Sample Email me@mail.MYDOMAIN.com' -F to=mgbox01@gmail.com -F subject='Test Message' -F text='Testing some Mailgun awesomness!'\n{\n  \"id\": \"20170313061320.126621.18660.EA1B35D0@mail.MYDOMAIN.com\",\n  \"message\": \"Queued. Thank you.\"\n~~~\n~~~\n13.03.2017 06:13  Delivered: me@mail.MYDOMAIN.com \u2192 mgbox01@gmail.com 'Test Message' Server response: 250 OK  \n13.03.2017 06:13  Accepted: me@mail.MYDOMAIN.com \u2192 mgbox01@gmail.com 'Test Message'\n~~~\nThanks,\nRaquel@MG. No dice for me. I've followed changes:\n\nAdded to grunt/mailgun.js\ndomain: '<%= secrets.mailgun.domain %>', // See README for secrets.json or replace this with your own email domain\nAdded to secrets.json\n\"domain\": \"mail.my-domain-name.com\", NB - tried naked domain, and also with http:// unsuccessfully\nAdded to package.json\n\"grunt-mailgun\": \"^2.0.1\", NB removed 1.0.1 and then 2.0.0\nAs i say, still not working for me.. Sounds good. It's always good to have options/redundancies. \nTo that end, I have been meaning to ask if you had appetite to add options for other transactional mail vendors. I'm specifically looking at AWS SES. I'm looking to try and replicate your grunt (and/or gulp process once developed) for SES. Thus allowing another option and having a redundancy in place should things go a bit 'Pete Tong'.\nThoughts?. ",
    "rwillwerth": "Yes. Having the same issues... same time frame. . I tried to implement. I'm getting a \n`\"mailgun.js\" tasks...ERROR \n\n\nSyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`\n\n\nbut mailgun.js is a JSON file.. Yes. Having the same issues... same time frame. . I tried to implement. I'm getting a \n`\"mailgun.js\" tasks...ERROR \n\n\nSyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`\n\n\nbut mailgun.js is a JSON file.. ",
    "markhuge": "@leemunroe I'm updating the upstream packages your repo depends on with the new API implementation.   I'll send a PR with the updated package version of grunt-mailgun once I'm done.. @leemunroe are there any errors in the console output?. @leemunroe Apologies, I haven't used grunt in years and didn't remember how to unit test grunt plugins. I didn't bother writing new tests for this and it totally bit me >:D. \nIts working for email templates on my end, so you should be good to go.. This is going to sound really pedantic, but I've had to stop accepting PRs  (however trivial) for issues that are not effecting current LTS. \nThis doesn't seem to be an issue in 6.x which is the current LTS.. @leemunroe I'm updating the upstream packages your repo depends on with the new API implementation.   I'll send a PR with the updated package version of grunt-mailgun once I'm done.. @leemunroe are there any errors in the console output?. @leemunroe Apologies, I haven't used grunt in years and didn't remember how to unit test grunt plugins. I didn't bother writing new tests for this and it totally bit me >:D. \nIts working for email templates on my end, so you should be good to go.. This is going to sound really pedantic, but I've had to stop accepting PRs  (however trivial) for issues that are not effecting current LTS. \nThis doesn't seem to be an issue in 6.x which is the current LTS.. ",
    "andersan": "Thanks for the responses! I edited aliases.yml and made a separate task for minimizing images, removing it from the default tasks.\n// $ grunt\ndefault:\n  - 'clean'\n  - 'sass:dist'\n  - 'assemble'\n  - 'juice'\n\n// Compress images\n// $ grunt min\nmin:\n  - 'imagemin'\n  - 'replace:src_images'. Thanks for the responses! I edited aliases.yml and made a separate task for minimizing images, removing it from the default tasks.\n\n// $ grunt\ndefault:\n  - 'clean'\n  - 'sass:dist'\n  - 'assemble'\n  - 'juice'\n\n// Compress images\n// $ grunt min\nmin:\n  - 'imagemin'\n  - 'replace:src_images'.\n",
    "cjcorney": "Hi Lee,\nMy developer and I have been working on a prototype but due to the systems\nwe use (Strongview is our ESP and frankly belongs in a museum) and the way\nthe templates are currently setup to serve four languages has made life a\nbit tricky. I'll share some screenshots next week though as to what we've\nbeen able to do so far in terms of generating multiple files etc :)\nOn Fri, Sep 1, 2017 at 12:22 PM, Lee Munroe notifications@github.com\nwrote:\n\nThis would be amazing. @cjcorney https://github.com/cjcorney Do you\nhave any ideas or sketches to share to get the conversation going?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/leemunroe/grunt-email-workflow/issues/92#issuecomment-326483583,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQL6cA-04mxQXZ3D8ly6zzsKfMDiYQebks5sd4ZtgaJpZM4PIcOu\n.\n. Hi Lee,\n\nOur progress to date below:\nhttp://imgur.com/a/4G8i0\nFor now we're going back to the CLI and adapting our new templates into the various components etc. Our main issue is that our Strongview templates are setup to use variables for each language which is proving a pain.\nAlso wondering if there is a way to send all templates form the dist folder in your example rather than just a specific one? Using your git example each time I run grunt send --template=*.html I am sent the last .html file in the folder (transaction.html) three times rather than each email once.. Hi Lee,\nMy developer and I have been working on a prototype but due to the systems\nwe use (Strongview is our ESP and frankly belongs in a museum) and the way\nthe templates are currently setup to serve four languages has made life a\nbit tricky. I'll share some screenshots next week though as to what we've\nbeen able to do so far in terms of generating multiple files etc :)\nOn Fri, Sep 1, 2017 at 12:22 PM, Lee Munroe notifications@github.com\nwrote:\n\nThis would be amazing. @cjcorney https://github.com/cjcorney Do you\nhave any ideas or sketches to share to get the conversation going?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/leemunroe/grunt-email-workflow/issues/92#issuecomment-326483583,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQL6cA-04mxQXZ3D8ly6zzsKfMDiYQebks5sd4ZtgaJpZM4PIcOu\n.\n. Hi Lee,\n\nOur progress to date below:\nhttp://imgur.com/a/4G8i0\nFor now we're going back to the CLI and adapting our new templates into the various components etc. Our main issue is that our Strongview templates are setup to use variables for each language which is proving a pain.\nAlso wondering if there is a way to send all templates form the dist folder in your example rather than just a specific one? Using your git example each time I run grunt send --template=*.html I am sent the last .html file in the folder (transaction.html) three times rather than each email once.. ",
    "jzantua": "Hi @leemunroe  thanks for the great reference \ud83d\udc4d !\nill try to catch up using this one :)\nbut is it ok if had some trouble using this 'grunt-ftp' can you assist me using it ? \ud83e\udd47 . done doing it via FTP but getting an error when connecting to ftps /sftp any thoughts ? already put the right credentials but still getting an error  does connecting ftp and ftps /sftp is different ? maybe because ftps /sftp need some ssl certificate before passing through ? ANY THOUGHTS ?. Hi @taeo im using this package (https://www.npmjs.com/package/ftp-deploy). thanks @taeo  will try this and share to you guys when im \ud83d\udcaf percent done \ud83d\udc4d thanks for all of the assistance . Hi @leemunroe  thanks for the great reference \ud83d\udc4d !\nill try to catch up using this one :)\nbut is it ok if had some trouble using this 'grunt-ftp' can you assist me using it ? \ud83e\udd47 . done doing it via FTP but getting an error when connecting to ftps /sftp any thoughts ? already put the right credentials but still getting an error  does connecting ftp and ftps /sftp is different ? maybe because ftps /sftp need some ssl certificate before passing through ? ANY THOUGHTS ?. Hi @taeo im using this package (https://www.npmjs.com/package/ftp-deploy). thanks @taeo  will try this and share to you guys when im \ud83d\udcaf percent done \ud83d\udc4d thanks for all of the assistance . ",
    "kinglezhuang": "It only extend the first class style. Not all, but in fact i need all.. Thank you very much, i will try it.. It only extend the first class style. Not all, but in fact i need all.. Thank you very much, i will try it.. "
}